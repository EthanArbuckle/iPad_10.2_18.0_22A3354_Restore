void sub_2182E6B48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,void *__p,uint64_t a54,int a55,__int16 a56,char a57,char a58,char a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  void *a70;
  char a72;
  void *a73;
  uint64_t v74;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a14);
  turi::general_ofstream::~general_ofstream((turi::general_ofstream *)&STACK[0x208]);
  if (a58 < 0)
    operator delete(__p);
  turi::sframe::~sframe((turi::sframe *)&STACK[0x388]);
  STACK[0x208] = (unint64_t)&a59;
  std::vector<std::vector<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x208]);
  v74 = a62;
  a62 = 0;
  if (v74)
    (*(void (**)(uint64_t))(*(_QWORD *)v74 + 8))(v74);
  STACK[0x208] = (unint64_t)&a63;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x208]);
  turi::general_ofstream::~general_ofstream((turi::general_ofstream *)&STACK[0x4B0]);
  if (a72 < 0)
    operator delete(a70);
  turi::sframe::~sframe((turi::sframe *)&STACK[0x630]);
  if (SLOBYTE(STACK[0x207]) < 0)
    operator delete(a73);
  _Unwind_Resume(a1);
}

void sub_2182E6F04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

uint64_t OUTLINED_FUNCTION_10_3(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  return file_logger::operator<<<std::string>(v3, (uint64_t)va);
}

uint64_t OUTLINED_FUNCTION_14_4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  return turi::error::io_error::io_error(v9, &a9);
}

const std::locale::facet *OUTLINED_FUNCTION_21_3(uint64_t a1, std::locale::id *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  return std::locale::use_facet(&a9, a2);
}

std::locale OUTLINED_FUNCTION_33_0(const std::ios_base *this)
{
  return std::ios_base::getloc(this);
}

uint64_t OUTLINED_FUNCTION_35_1()
{
  return std::stringbuf::str();
}

_QWORD *OUTLINED_FUNCTION_36_5(_QWORD *a1, uint64_t a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, a2, 14);
}

uint64_t OUTLINED_FUNCTION_37_3()
{
  return std::operator+<char>();
}

void __cxx_global_var_init_15_1()
{
  uint64_t v0;
  const char *v1;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, v1, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_sgraph_io_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void turi::sgraph_compute::triple_apply(turi::sgraph *a1, uint64_t a2, const void ***a3, const void ***a4, char a5)
{
  unint64_t edge_field_id;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  void *v34[2];
  char v35;
  void *__p[2];
  char v37;
  _QWORD v38[3];
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41[3];
  uint64_t v42[3];
  uint64_t v43[4];
  void *v44;
  void *v45;
  uint64_t v46;
  _QWORD v47[5];
  uint64_t v48;
  _BYTE v49[24];
  _BYTE *v50;
  _BYTE v51[24];
  _BYTE *v52;
  _BYTE v53[24];
  _BYTE *v54;
  void *v55;
  void *v56;
  _BYTE v57[24];
  _BYTE *v58;
  _QWORD v59[3];
  _QWORD *v60;
  void **v61[5];
  _BYTE v62[296];
  _BYTE v63[24];
  _BYTE *v64;
  _BYTE v65[24];
  _BYTE *v66;
  _BYTE v67[24];
  __int128 v68;
  __int128 v69;
  _BYTE v70[24];
  _BYTE *v71;
  _QWORD *v72;
  unint64_t v73;
  unint64_t v74;
  _QWORD v75[3];
  _QWORD *v76;
  _QWORD v77[3];
  _QWORD *v78;
  _QWORD v79[3];
  _QWORD *v80;
  uint64_t v81;

  v81 = *MEMORY[0x24BDAC8D0];
  std::vector<turi::mutex>::vector(v38, turi::SGRAPH_TRIPLE_APPLY_LOCK_ARRAY_SIZE);
  std::string::basic_string[abi:ne180100]<0>(__p, turi::sgraph::SRC_COLUMN_NAME);
  edge_field_id = turi::sgraph::get_edge_field_id((uint64_t)a1, (unsigned __int8 **)__p, 0, 0);
  if (v37 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(v34, turi::sgraph::DST_COLUMN_NAME);
  v8 = turi::sgraph::get_edge_field_id((uint64_t)a1, (unsigned __int8 **)v34, 0, 0);
  if (v35 < 0)
    operator delete(v34[0]);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)v59, a2);
  v61[0] = (void **)&off_24D937AD0;
  turi::sframe::sframe((turi::sframe *)v62);
  v64 = 0;
  v66 = 0;
  v9 = v70;
  v68 = 0u;
  v69 = 0u;
  if (!v60)
  {
    v71 = 0;
    v72 = v38;
    v73 = edge_field_id;
    v74 = v8;
    goto LABEL_15;
  }
  if (v60 == v59)
  {
    v71 = v70;
    (*(void (**)(_QWORD *, _BYTE *))(v59[0] + 24))(v59, v70);
  }
  else
  {
    v71 = (_BYTE *)(*(uint64_t (**)(void))(*v60 + 16))();
  }
  v10 = v60;
  v72 = v38;
  v73 = edge_field_id;
  v74 = v8;
  if (v60 == v59)
  {
    v11 = 4;
    v10 = v59;
  }
  else
  {
    if (!v60)
      goto LABEL_15;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_15:
  v79[0] = &off_24D937B30;
  v79[1] = &v39;
  v80 = v79;
  v12 = *(_QWORD *)(v39 + 24);
  v78 = v77;
  v77[0] = &off_24D937B30;
  v77[1] = &v39;
  v75[0] = &off_24D937C10;
  v75[1] = &v39;
  v75[2] = v47;
  v76 = v75;
  turi::sgraph_compute::hilbert_blocked_parallel_for (v12, (uint64_t)v77, (uint64_t)v75, turi::SGRAPH_HILBERT_CURVE_PARALLEL_FOR_NUM_THREADS);
  v13 = v76;
  if (v76 == v75)
  {
    v14 = 4;
    v13 = v75;
  }
  else
  {
    if (!v76)
      goto LABEL_20;
    v14 = 5;
  }
  (*(void (**)(void))(*v13 + 8 * v14))();
LABEL_20:
  v15 = v78;
  if (v78 == v77)
  {
    v16 = 4;
    v15 = v77;
  }
  else
  {
    if (!v78)
      goto LABEL_25;
    v16 = 5;
  }
  (*(void (**)(void))(*v15 + 8 * v16))();
LABEL_25:
  v44 = 0;
  v45 = 0;
  v46 = 0;
  if (!v80)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(_QWORD *, void **))(*v80 + 48))(v80, &v44);
  if (v44)
  {
    v45 = v44;
    operator delete(v44);
  }
  v17 = v80;
  if (v80 == v79)
  {
    v18 = 4;
    v17 = v79;
  }
  else
  {
    if (!v80)
      goto LABEL_33;
    v18 = 5;
  }
  (*(void (**)(void))(*v17 + 8 * v18))();
LABEL_33:
  v47[0] = &off_24D937AD0;
  v19 = v58;
  if (v58 == v57)
  {
    v20 = 4;
    v19 = v57;
  }
  else
  {
    if (!v58)
      goto LABEL_38;
    v20 = 5;
  }
  (*(void (**)(void))(*v19 + 8 * v20))();
LABEL_38:
  if (v55)
  {
    v56 = v55;
    operator delete(v55);
  }
  v21 = v54;
  if (v54 == v53)
  {
    v22 = 4;
    v21 = v53;
  }
  else
  {
    if (!v54)
      goto LABEL_45;
    v22 = 5;
  }
  (*(void (**)(void))(*v21 + 8 * v22))();
LABEL_45:
  v23 = v52;
  if (v52 == v51)
  {
    v24 = 4;
    v23 = v51;
  }
  else
  {
    if (!v52)
      goto LABEL_50;
    v24 = 5;
  }
  (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_50:
  v25 = v50;
  if (v50 == v49)
  {
    v26 = 4;
    v25 = v49;
  }
  else
  {
    if (!v50)
      goto LABEL_55;
    v26 = 5;
  }
  (*(void (**)(void))(*v25 + 8 * v26))();
LABEL_55:
  turi::sframe::~sframe((turi::sframe *)&v48);
  v61[0] = (void **)&off_24D937AD0;
  if (v71 == v70)
  {
    v27 = 4;
  }
  else
  {
    if (!v71)
      goto LABEL_60;
    v27 = 5;
    v9 = v71;
  }
  (*(void (**)(_QWORD *))(*v9 + 8 * v27))(v9);
LABEL_60:
  if (*((_QWORD *)&v68 + 1))
  {
    *(_QWORD *)&v69 = *((_QWORD *)&v68 + 1);
    operator delete(*((void **)&v68 + 1));
  }
  v28 = (_QWORD *)v68;
  if ((_BYTE *)v68 == v67)
  {
    v29 = 4;
    v28 = v67;
  }
  else
  {
    if (!(_QWORD)v68)
      goto LABEL_67;
    v29 = 5;
  }
  (*(void (**)(void))(*v28 + 8 * v29))();
LABEL_67:
  v30 = v66;
  if (v66 == v65)
  {
    v31 = 4;
    v30 = v65;
  }
  else
  {
    if (!v66)
      goto LABEL_72;
    v31 = 5;
  }
  (*(void (**)(void))(*v30 + 8 * v31))();
LABEL_72:
  v32 = v64;
  if (v64 == v63)
  {
    v33 = 4;
    v32 = v63;
    goto LABEL_76;
  }
  if (v64)
  {
    v33 = 5;
LABEL_76:
    (*(void (**)(void))(*v32 + 8 * v33))();
  }
  turi::sframe::~sframe((turi::sframe *)v62);
  v61[0] = (void **)v38;
  std::vector<turi::mutex>::__destroy_vector::operator()[abi:ne180100](v61);
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)v41, v41[1]);
  v61[0] = (void **)&v40;
  std::vector<turi::sgraph_compute::vertex_block<turi::sframe>>::__destroy_vector::operator()[abi:ne180100](v61);
}

void sub_2182E75D8(_Unwind_Exception *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  turi::sframe *v8;
  void *v10;
  unint64_t *v11;
  uint64_t v12;
  unint64_t *v13;
  uint64_t v14;
  unint64_t *v15;
  uint64_t v16;
  unint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  va_list va;
  uint64_t v21;
  uint64_t v22;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v19 = va_arg(va1, _QWORD);
  v21 = va_arg(va1, _QWORD);
  v22 = va_arg(va1, _QWORD);
  v10 = (void *)STACK[0x4B8];
  if (STACK[0x4B8])
  {
    STACK[0x4C0] = (unint64_t)v10;
    operator delete(v10);
  }
  v11 = (unint64_t *)STACK[0x4B0];
  if ((unint64_t *)STACK[0x4B0] == &STACK[0x498])
  {
    v12 = 4;
    v11 = &STACK[0x498];
  }
  else
  {
    if (!v11)
      goto LABEL_8;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_8:
  v13 = (unint64_t *)STACK[0x490];
  if ((unint64_t *)STACK[0x490] == &STACK[0x478])
  {
    v14 = 4;
    v13 = &STACK[0x478];
  }
  else
  {
    if (!v13)
      goto LABEL_13;
    v14 = 5;
  }
  (*(void (**)(void))(*v13 + 8 * v14))();
LABEL_13:
  v15 = (unint64_t *)STACK[0x470];
  if ((unint64_t *)STACK[0x470] == &STACK[0x458])
  {
    v16 = 4;
    v15 = &STACK[0x458];
  }
  else
  {
    if (!v15)
      goto LABEL_18;
    v16 = 5;
  }
  (*(void (**)(void))(*v15 + 8 * v16))();
LABEL_18:
  turi::sframe::~sframe(v8);
  v17 = (unint64_t *)STACK[0x300];
  if ((unint64_t *)STACK[0x300] == &STACK[0x2E8])
  {
    v18 = 4;
    v17 = &STACK[0x2E8];
  }
  else
  {
    if (!v17)
      goto LABEL_23;
    v18 = 5;
  }
  (*(void (**)(void))(*v17 + 8 * v18))();
LABEL_23:
  STACK[0x308] = (unint64_t)va;
  std::vector<turi::mutex>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x308]);
  _Unwind_Resume(a1);
}

uint64_t turi::sgraph_compute::`anonymous namespace'::triple_apply_impl::triple_apply_impl(uint64_t a1, turi::sgraph *this, const void ***a3, const void ***a4, char a5)
{
  uint64_t *v7;
  uint64_t *v8;
  const void **v9;
  const void **v10;
  uint64_t v11;
  const char *p_p;
  const void **v13;
  const void **v14;
  uint64_t v15;
  const char *v16;
  const void **v17;
  const void **v18;
  turi::sgraph *v19;
  __int128 v20;
  void *vertex_field_id;
  char v22;
  __int128 v23;
  const void **v24;
  const void **v25;
  turi::sgraph *v26;
  __int128 v27;
  void *edge_field_id;
  char v29;
  __int128 v30;
  uint64_t *v32;
  std::string v34;
  void *__p;
  std::string v36;
  char v37;
  std::string v38;
  void *v39[3];
  void *v40[3];
  char v41[8];
  char *v42;
  char v43[8];
  char *v44;
  std::string v45;
  std::string v46;

  *(_QWORD *)(a1 + 8) = 0;
  v32 = (uint64_t *)(a1 + 8);
  *(_QWORD *)a1 = this;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  *(_QWORD *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  v7 = (uint64_t *)(a1 + 56);
  v8 = (uint64_t *)(a1 + 80);
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_BYTE *)(a1 + 104) = a5;
  turi::sgraph::get_vertex_fields(this, 0, &v46);
  turi::sgraph::get_edge_fields(*(turi::sgraph **)a1, 0, 0, &v45);
  std::set<std::string>::set[abi:ne180100]<std::__wrap_iter<std::string*>>((uint64_t)v43, (const void **)v46.__r_.__value_.__l.__data_, (const void **)v46.__r_.__value_.__l.__size_);
  std::set<std::string>::set[abi:ne180100]<std::__wrap_iter<std::string*>>((uint64_t)v41, (const void **)v45.__r_.__value_.__l.__data_, (const void **)v45.__r_.__value_.__l.__size_);
  v10 = *a3;
  v9 = a3[1];
  if (*a3 != v9)
  {
    do
    {
      v11 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)v43, v10);
      std::operator+<char>();
      if (v36.__r_.__value_.__s.__data_[15] >= 0)
        p_p = (const char *)&__p;
      else
        p_p = (const char *)__p;
      assert_msg(v11 != 0, "%s", p_p);
      if (v36.__r_.__value_.__s.__data_[15] < 0)
        operator delete(__p);
      v10 += 3;
    }
    while (v10 != v9);
  }
  v14 = *a4;
  v13 = a4[1];
  if (*a4 != v13)
  {
    do
    {
      v15 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)v41, v14);
      std::operator+<char>();
      if (v36.__r_.__value_.__s.__data_[15] >= 0)
        v16 = (const char *)&__p;
      else
        v16 = (const char *)__p;
      assert_msg(v15 != 0, "%s", v16);
      if (v36.__r_.__value_.__s.__data_[15] < 0)
        operator delete(__p);
      v14 += 3;
    }
    while (v14 != v13);
  }
  std::vector<turi::sgraph_compute::vertex_block<turi::sframe>>::resize(v32, *(_QWORD *)(*(_QWORD *)a1 + 24));
  turi::sgraph::get_vertex_field_types(*(turi::sgraph **)a1, 0, v40);
  turi::sgraph::get_edge_field_types(*(turi::sgraph **)a1, 0, 0, (uint64_t *)v39);
  v17 = *a3;
  v18 = a3[1];
  if (*a3 != v18)
  {
    do
    {
      v19 = *(turi::sgraph **)a1;
      if (*((char *)v17 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v38, (const std::string::value_type *)*v17, (std::string::size_type)v17[1]);
      }
      else
      {
        v20 = *(_OWORD *)v17;
        v38.__r_.__value_.__r.__words[2] = (std::string::size_type)v17[2];
        *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v20;
      }
      vertex_field_id = (void *)turi::sgraph::get_vertex_field_id((uint64_t)v19, (unsigned __int8 **)&v38, 0);
      if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v38.__r_.__value_.__l.__data_);
      v22 = *((_BYTE *)v40[0] + (unint64_t)vertex_field_id);
      __p = vertex_field_id;
      if (*((char *)v17 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v36, (const std::string::value_type *)*v17, (std::string::size_type)v17[1]);
      }
      else
      {
        v23 = *(_OWORD *)v17;
        v36.__r_.__value_.__r.__words[2] = (std::string::size_type)v17[2];
        *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v23;
      }
      v37 = v22;
      if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v36.__r_.__value_.__l.__data_);
      v17 += 3;
    }
    while (v17 != v18);
  }
  v24 = *a4;
  v25 = a4[1];
  if (*a4 != v25)
  {
    do
    {
      v26 = *(turi::sgraph **)a1;
      if (*((char *)v24 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v34, (const std::string::value_type *)*v24, (std::string::size_type)v24[1]);
      }
      else
      {
        v27 = *(_OWORD *)v24;
        v34.__r_.__value_.__r.__words[2] = (std::string::size_type)v24[2];
        *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v27;
      }
      edge_field_id = (void *)turi::sgraph::get_edge_field_id((uint64_t)v26, (unsigned __int8 **)&v34, 0, 0);
      if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v34.__r_.__value_.__l.__data_);
      v29 = *((_BYTE *)v39[0] + (unint64_t)edge_field_id);
      __p = edge_field_id;
      if (*((char *)v24 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v36, (const std::string::value_type *)*v24, (std::string::size_type)v24[1]);
      }
      else
      {
        v30 = *(_OWORD *)v24;
        v36.__r_.__value_.__r.__words[2] = (std::string::size_type)v24[2];
        *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v30;
      }
      v37 = v29;
      if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v36.__r_.__value_.__l.__data_);
      v24 += 3;
    }
    while (v24 != v25);
  }
  if (v39[0])
  {
    v39[1] = v39[0];
    operator delete(v39[0]);
  }
  if (v40[0])
  {
    v40[1] = v40[0];
    operator delete(v40[0]);
  }
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)v41, v42);
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)v43, v44);
  __p = &v45;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p = &v46;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  return a1;
}

void sub_2182E7BFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, _QWORD **a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,int a23,__int16 a24,char a25,char a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42,uint64_t a43,char a44,char *a45)
{
  uint64_t *v45;
  uint64_t *v46;
  uint64_t v47;

  if (__p)
  {
    a42 = (uint64_t)__p;
    operator delete(__p);
  }
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)&a44, a45);
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy(v47 - 160, *(char **)(v47 - 152));
  a21 = v47 - 136;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a21);
  a21 = v47 - 112;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a21);
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy(a11, *a12);
  a21 = a13;
  std::vector<turi::sgraph_compute::vertex_block<turi::sframe>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a21);
  _Unwind_Resume(a1);
}

uint64_t turi::sgraph_compute::`anonymous namespace'::single_edge_triple_apply_visitor::single_edge_triple_apply_visitor(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;

  *(_QWORD *)a1 = &off_24D937AD0;
  v4 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 17) = *(_OWORD *)(a2 + 17);
  *(_OWORD *)(a1 + 8) = v4;
  turi::sframe::sframe((turi::sframe *)(a1 + 40), (const turi::sframe *)(a2 + 40));
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100](a1 + 336, a2 + 336);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100](a1 + 368, a2 + 368);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100](a1 + 400, a2 + 400);
  *(_QWORD *)(a1 + 432) = 0;
  *(_QWORD *)(a1 + 440) = 0;
  *(_QWORD *)(a1 + 448) = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>((_QWORD *)(a1 + 432), *(const void **)(a2 + 432), *(_QWORD *)(a2 + 440), (uint64_t)(*(_QWORD *)(a2 + 440) - *(_QWORD *)(a2 + 432)) >> 3);
  *(_OWORD *)(a1 + 456) = *(_OWORD *)(a2 + 456);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100](a1 + 472, a2 + 472);
  v5 = *(_OWORD *)(a2 + 504);
  *(_QWORD *)(a1 + 520) = *(_QWORD *)(a2 + 520);
  *(_OWORD *)(a1 + 504) = v5;
  return a1;
}

void sub_2182E7E24(_Unwind_Exception *a1)
{
  turi::sframe *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  void **v6;
  void *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;

  v8 = *v6;
  if (*v6)
  {
    v3[55] = v8;
    operator delete(v8);
  }
  v9 = (_QWORD *)v3[53];
  if (v9 == v5)
  {
    v10 = 4;
    v9 = v5;
  }
  else
  {
    if (!v9)
      goto LABEL_8;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_8:
  v11 = (_QWORD *)v3[49];
  if (v11 == v4)
  {
    v12 = 4;
  }
  else
  {
    if (!v11)
      goto LABEL_13;
    v12 = 5;
    v4 = (_QWORD *)v3[49];
  }
  (*(void (**)(_QWORD *))(*v4 + 8 * v12))(v4);
LABEL_13:
  v13 = (_QWORD *)v3[45];
  if (v13 == v2)
  {
    v14 = 4;
  }
  else
  {
    if (!v13)
      goto LABEL_18;
    v14 = 5;
    v2 = (_QWORD *)v3[45];
  }
  (*(void (**)(_QWORD *))(*v2 + 8 * v14))(v2);
LABEL_18:
  turi::sframe::~sframe(v1);
  _Unwind_Resume(a1);
}

void turi::sgraph_compute::`anonymous namespace'::single_edge_triple_apply_visitor::~single_edge_triple_apply_visitor(turi::sgraph_compute::_anonymous_namespace_::single_edge_triple_apply_visitor *this)
{
  char *v2;
  char *v3;
  uint64_t v4;
  void *v5;
  turi::sgraph_compute::_anonymous_namespace_::single_edge_triple_apply_visitor *v6;
  uint64_t v7;
  turi::sgraph_compute::_anonymous_namespace_::single_edge_triple_apply_visitor *v8;
  uint64_t v9;
  turi::sgraph_compute::_anonymous_namespace_::single_edge_triple_apply_visitor *v10;
  uint64_t v11;

  *(_QWORD *)this = &off_24D937AD0;
  v2 = (char *)this + 472;
  v3 = (char *)*((_QWORD *)this + 62);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  v5 = (void *)*((_QWORD *)this + 54);
  if (v5)
  {
    *((_QWORD *)this + 55) = v5;
    operator delete(v5);
  }
  v6 = (turi::sgraph_compute::_anonymous_namespace_::single_edge_triple_apply_visitor *)*((_QWORD *)this + 53);
  if (v6 == (turi::sgraph_compute::_anonymous_namespace_::single_edge_triple_apply_visitor *)((char *)this + 400))
  {
    v7 = 4;
    v6 = (turi::sgraph_compute::_anonymous_namespace_::single_edge_triple_apply_visitor *)((char *)this + 400);
  }
  else
  {
    if (!v6)
      goto LABEL_13;
    v7 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v6 + 8 * v7))();
LABEL_13:
  v8 = (turi::sgraph_compute::_anonymous_namespace_::single_edge_triple_apply_visitor *)*((_QWORD *)this + 49);
  if (v8 == (turi::sgraph_compute::_anonymous_namespace_::single_edge_triple_apply_visitor *)((char *)this + 368))
  {
    v9 = 4;
    v8 = (turi::sgraph_compute::_anonymous_namespace_::single_edge_triple_apply_visitor *)((char *)this + 368);
  }
  else
  {
    if (!v8)
      goto LABEL_18;
    v9 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v8 + 8 * v9))();
LABEL_18:
  v10 = (turi::sgraph_compute::_anonymous_namespace_::single_edge_triple_apply_visitor *)*((_QWORD *)this + 45);
  if (v10 == (turi::sgraph_compute::_anonymous_namespace_::single_edge_triple_apply_visitor *)((char *)this + 336))
  {
    v11 = 4;
    v10 = (turi::sgraph_compute::_anonymous_namespace_::single_edge_triple_apply_visitor *)((char *)this + 336);
    goto LABEL_22;
  }
  if (v10)
  {
    v11 = 5;
LABEL_22:
    (*(void (**)(void))(*(_QWORD *)v10 + 8 * v11))();
  }
  turi::sframe::~sframe((turi::sgraph_compute::_anonymous_namespace_::single_edge_triple_apply_visitor *)((char *)this + 40));
}

{
  char *v2;
  char *v3;
  uint64_t v4;
  void *v5;
  turi::sgraph_compute::_anonymous_namespace_::single_edge_triple_apply_visitor *v6;
  uint64_t v7;
  turi::sgraph_compute::_anonymous_namespace_::single_edge_triple_apply_visitor *v8;
  uint64_t v9;
  turi::sgraph_compute::_anonymous_namespace_::single_edge_triple_apply_visitor *v10;
  uint64_t v11;

  *(_QWORD *)this = &off_24D937AD0;
  v2 = (char *)this + 472;
  v3 = (char *)*((_QWORD *)this + 62);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  v5 = (void *)*((_QWORD *)this + 54);
  if (v5)
  {
    *((_QWORD *)this + 55) = v5;
    operator delete(v5);
  }
  v6 = (turi::sgraph_compute::_anonymous_namespace_::single_edge_triple_apply_visitor *)*((_QWORD *)this + 53);
  if (v6 == (turi::sgraph_compute::_anonymous_namespace_::single_edge_triple_apply_visitor *)((char *)this + 400))
  {
    v7 = 4;
    v6 = (turi::sgraph_compute::_anonymous_namespace_::single_edge_triple_apply_visitor *)((char *)this + 400);
  }
  else
  {
    if (!v6)
      goto LABEL_13;
    v7 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v6 + 8 * v7))();
LABEL_13:
  v8 = (turi::sgraph_compute::_anonymous_namespace_::single_edge_triple_apply_visitor *)*((_QWORD *)this + 49);
  if (v8 == (turi::sgraph_compute::_anonymous_namespace_::single_edge_triple_apply_visitor *)((char *)this + 368))
  {
    v9 = 4;
    v8 = (turi::sgraph_compute::_anonymous_namespace_::single_edge_triple_apply_visitor *)((char *)this + 368);
  }
  else
  {
    if (!v8)
      goto LABEL_18;
    v9 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v8 + 8 * v9))();
LABEL_18:
  v10 = (turi::sgraph_compute::_anonymous_namespace_::single_edge_triple_apply_visitor *)*((_QWORD *)this + 45);
  if (v10 == (turi::sgraph_compute::_anonymous_namespace_::single_edge_triple_apply_visitor *)((char *)this + 336))
  {
    v11 = 4;
    v10 = (turi::sgraph_compute::_anonymous_namespace_::single_edge_triple_apply_visitor *)((char *)this + 336);
  }
  else
  {
    if (!v10)
    {
LABEL_23:
      turi::sframe::~sframe((turi::sgraph_compute::_anonymous_namespace_::single_edge_triple_apply_visitor *)((char *)this + 40));
      JUMPOUT(0x219A19A08);
    }
    v11 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v10 + 8 * v11))();
  goto LABEL_23;
}

void turi::sgraph_compute::`anonymous namespace'::triple_apply_impl::~triple_apply_impl(turi::sgraph_compute::_anonymous_namespace_::triple_apply_impl *this)
{
  void **v2;

  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)this + 32, *((_QWORD **)this + 5));
  v2 = (void **)((char *)this + 8);
  std::vector<turi::sgraph_compute::vertex_block<turi::sframe>>::__destroy_vector::operator()[abi:ne180100](&v2);
}

uint64_t *std::vector<turi::sgraph_compute::`anonymous namespace'::field_info>::~vector[abi:ne180100](uint64_t *a1)
{
  if (*a1)
  {
    operator delete((void *)*a1);
  }
  return a1;
}

void std::vector<turi::sgraph_compute::vertex_block<turi::sframe>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  v3 = a1[1];
  v4 = (v3 - *a1) >> 6;
  if (a2 <= v4)
  {
    if (a2 < v4)
    {
      v5 = *a1 + (a2 << 6);
      while (v3 != v5)
      {
        v3 -= 64;
        std::allocator<turi::sgraph_compute::vertex_block<turi::sframe>>::destroy[abi:ne180100]((uint64_t)(a1 + 2), v3);
      }
      a1[1] = v5;
    }
  }
  else
  {
    std::vector<turi::sgraph_compute::vertex_block<turi::sframe>>::__append(a1, a2 - v4);
  }
}

void std::vector<turi::sgraph_compute::`anonymous namespace'::field_info>::push_back[abi:ne180100](void **a1, uint64_t a2)
{
  char *v4;
  char *v5;
  __int128 v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  void **v15;
  uint64_t v16;
  char *v17;
  char *v18;
  __int128 v19;
  void **v20;

  v4 = (char *)a1[1];
  v5 = (char *)a1[2];
  if (v4 >= v5)
  {
    v8 = 0xCCCCCCCCCCCCCCCDLL * ((v4 - (_BYTE *)*a1) >> 3);
    v9 = v8 + 1;
    if (v8 + 1 > 0x666666666666666)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - (_BYTE *)*a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x333333333333333)
      v11 = 0x666666666666666;
    else
      v11 = v9;
    if (v11 > 0x666666666666666)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v12 = (char *)operator new(40 * v11);
    v13 = &v12[40 * v8];
    *(_QWORD *)v13 = *(_QWORD *)a2;
    *(_OWORD *)(v13 + 8) = *(_OWORD *)(a2 + 8);
    *((_QWORD *)v13 + 3) = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    v13[32] = *(_BYTE *)(a2 + 32);
    v14 = (char *)*a1;
    v15 = (void **)a1[1];
    if (v15 == *a1)
    {
      v7 = v13 + 40;
      *a1 = v13;
      a1[1] = v13 + 40;
      a1[2] = &v12[40 * v11];
    }
    else
    {
      v16 = 0;
      do
      {
        v17 = &v13[v16 * 8];
        v18 = (char *)&v15[v16];
        *((_QWORD *)v17 - 5) = v15[v16 - 5];
        v19 = *(_OWORD *)&v15[v16 - 4];
        *((_QWORD *)v17 - 2) = v15[v16 - 2];
        *((_OWORD *)v17 - 2) = v19;
        *((_QWORD *)v18 - 3) = 0;
        *((_QWORD *)v18 - 2) = 0;
        *((_QWORD *)v18 - 4) = 0;
        *(v17 - 8) = (char)v15[v16 - 1];
        v16 -= 5;
      }
      while (&v15[v16] != (void **)v14);
      v15 = (void **)*a1;
      v20 = (void **)a1[1];
      v7 = v13 + 40;
      *a1 = &v13[v16 * 8];
      a1[1] = v13 + 40;
      a1[2] = &v12[40 * v11];
      while (v20 != v15)
      {
        if (*((char *)v20 - 9) < 0)
          operator delete(*(v20 - 4));
        v20 -= 5;
      }
    }
    if (v15)
      operator delete(v15);
  }
  else
  {
    *(_QWORD *)v4 = *(_QWORD *)a2;
    v6 = *(_OWORD *)(a2 + 8);
    *((_QWORD *)v4 + 3) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)(v4 + 8) = v6;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 8) = 0;
    v4[32] = *(_BYTE *)(a2 + 32);
    v7 = v4 + 40;
  }
  a1[1] = v7;
}

void sub_2182E8458(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void std::vector<turi::sgraph_compute::vertex_block<turi::sframe>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  void *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (a2 <= (v6 - v7) >> 6)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), a2 << 6);
      v7 += a2 << 6;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = v7 - *a1;
    v9 = a2 + (v8 >> 6);
    if (v9 >> 58)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 6;
    v11 = v5 - *a1;
    if (v11 >> 5 > v9)
      v9 = v11 >> 5;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFC0)
      v12 = 0x3FFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    v18 = v4;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::mutex>>(v4, v12);
    else
      v13 = 0;
    v14 = v13;
    v15 = &v13[64 * v10];
    v17 = &v13[64 * v12];
    bzero(v15, a2 << 6);
    v16 = &v15[64 * a2];
    std::vector<turi::sgraph_compute::vertex_block<turi::sframe>>::__swap_out_circular_buffer(a1, &v14);
    std::__split_buffer<turi::sgraph_compute::vertex_block<turi::sframe>>::~__split_buffer(&v14);
  }
}

void sub_2182E85D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<turi::sgraph_compute::vertex_block<turi::sframe>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<turi::sgraph_compute::vertex_block<turi::sframe>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::sgraph_compute::vertex_block<turi::sframe>>,std::reverse_iterator<turi::sgraph_compute::vertex_block<turi::sframe>*>,std::reverse_iterator<turi::sgraph_compute::vertex_block<turi::sframe>*>,std::reverse_iterator<turi::sgraph_compute::vertex_block<turi::sframe>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::sgraph_compute::vertex_block<turi::sframe>>,std::reverse_iterator<turi::sgraph_compute::vertex_block<turi::sframe>*>,std::reverse_iterator<turi::sgraph_compute::vertex_block<turi::sframe>*>,std::reverse_iterator<turi::sgraph_compute::vertex_block<turi::sframe>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 64) = 0;
      *(_QWORD *)(v7 - 56) = 0;
      *(_QWORD *)(v7 - 48) = 0;
      v8 = *(_OWORD *)(a3 - 64);
      a3 -= 64;
      *(_OWORD *)(v7 - 64) = v8;
      *(_QWORD *)(v7 - 48) = *(_QWORD *)(a3 + 16);
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_WORD *)(v7 - 40) = *(_WORD *)(a3 + 24);
      v9 = *(_OWORD *)(a3 + 32);
      *(_QWORD *)(v7 - 16) = *(_QWORD *)(a3 + 48);
      *(_OWORD *)(v7 - 32) = v9;
      *(_QWORD *)(a3 + 32) = 0;
      *(_QWORD *)(a3 + 40) = 0;
      v10 = *(_QWORD *)(a3 + 56);
      *(_QWORD *)(a3 + 48) = 0;
      *(_QWORD *)(a3 + 56) = 0;
      *(_QWORD *)(v7 - 8) = v10;
      v7 = *((_QWORD *)&v16 + 1) - 64;
      *((_QWORD *)&v16 + 1) -= 64;
    }
    while (a3 != a5);
    v11 = v16;
  }
  v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::sgraph_compute::vertex_block<turi::sframe>>,std::reverse_iterator<turi::sgraph_compute::vertex_block<turi::sframe>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::sgraph_compute::vertex_block<turi::sframe>>,std::reverse_iterator<turi::sgraph_compute::vertex_block<turi::sframe>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<turi::sgraph_compute::vertex_block<turi::sframe>>,std::reverse_iterator<turi::sgraph_compute::vertex_block<turi::sframe>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<turi::sgraph_compute::vertex_block<turi::sframe>>,std::reverse_iterator<turi::sgraph_compute::vertex_block<turi::sframe>*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1[2] + 8);
  v2 = *(_QWORD *)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      std::allocator<turi::sgraph_compute::vertex_block<turi::sframe>>::destroy[abi:ne180100](v3, v1);
      v1 += 64;
    }
    while (v1 != v2);
  }
}

void std::allocator<turi::sgraph_compute::vertex_block<turi::sframe>>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void **v4;

  v3 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 56) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (*(char *)(a2 + 55) < 0)
    operator delete(*(void **)(a2 + 32));
  v4 = (void **)a2;
  std::vector<std::vector<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v4);
}

void **std::__split_buffer<turi::sgraph_compute::vertex_block<turi::sframe>>::~__split_buffer(void **a1)
{
  std::__split_buffer<turi::sgraph_compute::vertex_block<turi::sframe>>::clear[abi:ne180100](a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<turi::sgraph_compute::vertex_block<turi::sframe>>::clear[abi:ne180100](_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 64;
    std::allocator<turi::sgraph_compute::vertex_block<turi::sframe>>::destroy[abi:ne180100](v4, i - 64);
  }
}

void std::vector<turi::sgraph_compute::`anonymous namespace'::field_info>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 40)
  {
    if (*(char *)(i - 9) < 0)
      operator delete(*(void **)(i - 32));
  }
  a1[1] = v2;
}

void std::vector<turi::sgraph_compute::vertex_block<turi::sframe>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 64;
        std::allocator<turi::sgraph_compute::vertex_block<turi::sframe>>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void turi::sgraph_compute::`anonymous namespace'::single_edge_triple_apply_visitor::load_partition(uint64_t a1, turi::sgraph *this, uint64_t a3, uint64_t a4, int a5, uint64_t *a6, unint64_t a7, unint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  void **v13;
  __int128 *v14;
  std::string *v15;
  __int128 v16;
  std::string *v17;
  char *v18;
  char *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  size_t v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  char v29;
  unint64_t v30;
  char *v31;
  _QWORD *v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  std::string *p_p;
  uint64_t v46;
  void *v47;
  char *v48;
  char *v49;
  uint64_t v50;
  std::string *v51;
  unint64_t v52;
  std::string __p;
  std::string *v54;
  _BYTE v55[24];
  _BYTE *v56;
  _BYTE v57[24];
  _BYTE *v58;
  uint64_t v59;

  v59 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = a4;
  *(_QWORD *)(a1 + 456) = a7;
  *(_QWORD *)(a1 + 464) = a8;
  *(_QWORD *)(a1 + 24) = turi::sgraph::edge_partition(this, a7, a8, 0, 0);
  v10 = *a6;
  v11 = a6[1];
  v12 = *a6 == v11;
  *(_BYTE *)(a1 + 32) = *a6 != v11;
  if (v12)
    return;
  v50 = 0;
  v51 = 0;
  v52 = 0;
  v13 = (void **)(a1 + 432);
  v47 = 0;
  v48 = 0;
  v49 = 0;
  do
  {
    v14 = (__int128 *)(v10 + 8);
    v15 = v51;
    if ((unint64_t)v51 >= v52)
    {
      v17 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>(&v50, v14);
    }
    else
    {
      if (*(char *)(v10 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(v51, *(const std::string::value_type **)(v10 + 8), *(_QWORD *)(v10 + 16));
      }
      else
      {
        v16 = *v14;
        v51->__r_.__value_.__r.__words[2] = *(_QWORD *)(v10 + 24);
        *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v16;
      }
      v17 = v15 + 1;
    }
    v51 = v17;
    v18 = v48;
    if (v48 >= v49)
    {
      v20 = (unint64_t)v47;
      v21 = v48 - (_BYTE *)v47;
      v22 = v48 - (_BYTE *)v47 + 1;
      if (v22 < 0)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      v23 = v49 - (_BYTE *)v47;
      if (2 * (v49 - (_BYTE *)v47) > (unint64_t)v22)
        v22 = 2 * v23;
      if (v23 >= 0x3FFFFFFFFFFFFFFFLL)
        v24 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v24 = v22;
      if (v24)
        v25 = (char *)operator new(v24);
      else
        v25 = 0;
      v26 = &v25[v21];
      v27 = &v25[v21];
      *v27 = *(_BYTE *)(v10 + 32);
      v19 = v27 + 1;
      if (v18 != (char *)v20)
      {
        v28 = &v18[~v20];
        do
        {
          v29 = *--v18;
          (v28--)[(_QWORD)v25] = v29;
        }
        while (v18 != (char *)v20);
        v26 = v25;
      }
      v47 = v26;
      v48 = v19;
      v49 = &v25[v24];
      if (v20)
        operator delete((void *)v20);
    }
    else
    {
      *v48 = *(_BYTE *)(v10 + 32);
      v19 = v18 + 1;
    }
    v48 = v19;
    v31 = *(char **)(a1 + 440);
    v30 = *(_QWORD *)(a1 + 448);
    if ((unint64_t)v31 >= v30)
    {
      v33 = (char *)*v13;
      v34 = (v31 - (_BYTE *)*v13) >> 3;
      v35 = v34 + 1;
      if ((unint64_t)(v34 + 1) >> 61)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      v36 = v30 - (_QWORD)v33;
      if (v36 >> 2 > v35)
        v35 = v36 >> 2;
      if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF8)
        v37 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v37 = v35;
      if (v37)
      {
        v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a1 + 448, v37);
        v33 = *(char **)(a1 + 432);
        v31 = *(char **)(a1 + 440);
      }
      else
      {
        v38 = 0;
      }
      v39 = &v38[8 * v34];
      *(_QWORD *)v39 = *(_QWORD *)v10;
      v32 = v39 + 8;
      while (v31 != v33)
      {
        v40 = *((_QWORD *)v31 - 1);
        v31 -= 8;
        *((_QWORD *)v39 - 1) = v40;
        v39 -= 8;
      }
      *(_QWORD *)(a1 + 432) = v39;
      *(_QWORD *)(a1 + 440) = v32;
      *(_QWORD *)(a1 + 448) = &v38[8 * v37];
      if (v33)
        operator delete(v33);
    }
    else
    {
      *(_QWORD *)v31 = *(_QWORD *)v10;
      v32 = v31 + 8;
    }
    *(_QWORD *)(a1 + 440) = v32;
    v10 += 40;
  }
  while (v10 != v11);
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  turi::sframe::open_for_write(a1 + 40, &v50, &v47, &__p, 1, 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  turi::sframe::get_output_iterator((size_t *)(a1 + 40), 0, (uint64_t)&__p);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::operator=[abi:ne180100]((_QWORD *)(a1 + 336), (uint64_t)&__p);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::operator=[abi:ne180100]((_QWORD *)(a1 + 368), (uint64_t)v55);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::operator=[abi:ne180100]((_QWORD *)(a1 + 400), (uint64_t)v57);
  v41 = v58;
  if (v58 == v57)
  {
    v42 = 4;
    v41 = v57;
  }
  else
  {
    if (!v58)
      goto LABEL_50;
    v42 = 5;
  }
  (*(void (**)(void))(*v41 + 8 * v42))();
LABEL_50:
  v43 = v56;
  if (v56 == v55)
  {
    v44 = 4;
    v43 = v55;
  }
  else
  {
    if (!v56)
      goto LABEL_55;
    v44 = 5;
  }
  (*(void (**)(void))(*v43 + 8 * v44))();
LABEL_55:
  p_p = v54;
  if (v54 == &__p)
  {
    v46 = 4;
    p_p = &__p;
    goto LABEL_59;
  }
  if (v54)
  {
    v46 = 5;
LABEL_59:
    (*(void (**)(void))(p_p->__r_.__value_.__r.__words[0] + 8 * v46))();
  }
  if (v47)
  {
    v48 = (char *)v47;
    operator delete(v47);
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v50;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
}

void sub_2182E8D08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void turi::sgraph_compute::`anonymous namespace'::single_edge_triple_apply_visitor::visit_edges(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t size;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  char **v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int *v34;
  unsigned int *v35;
  unsigned int v36;
  __int128 v37;
  __int128 v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  std::string::size_type v50;
  std::string::size_type v51;
  std::string::size_type v52;
  BOOL v53;
  std::string::size_type v54;
  std::string::size_type v55;
  std::string::size_type v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t *v64;
  unint64_t *v65;
  uint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t *v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t *v74;
  void *v75;
  void *v76;
  unsigned int v77;
  unint64_t *v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t *v81;
  void *v82;
  unint64_t *v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t *v89;
  uint64_t v90;
  BOOL v91;
  int v92;
  unint64_t *v94;
  unint64_t v95;
  uint64_t v96;
  std::runtime_error *v97;
  std::string *v98;
  __int128 v99;
  std::runtime_error *exception;
  std::string *v101;
  __int128 v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t v106[3];
  void **v107;
  unsigned int *v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  std::string __p;
  std::string::size_type v113;
  std::string::size_type v114;
  void *v115;
  void *v116;
  std::string v117;
  size_t __idx[2];

  memset(v106, 0, sizeof(v106));
  v2 = *(_QWORD **)a2;
  v105 = *(_QWORD **)(a2 + 8);
  if (*(_QWORD **)a2 != v105)
  {
    v103 = *(_QWORD *)(a1 + 432);
    v104 = *(_QWORD *)(a1 + 440);
    if ((unint64_t)((v104 - v103) >> 3) <= 1)
      v4 = 1;
    else
      v4 = (v104 - v103) >> 3;
    while (2)
    {
      v5 = *v2 + 16 * *(_QWORD *)(a1 + 512);
      size = 0;
      switch(*(_BYTE *)(v5 + 12))
      {
        case 0:
          size = *(_QWORD *)v5;
          goto LABEL_33;
        case 1:
          size = (uint64_t)*(double *)v5;
          goto LABEL_33;
        case 2:
          v10 = *(_QWORD *)v5;
          v11 = (char **)(*(_QWORD *)v5 + 8);
          __idx[0] = 0;
          v12 = (char *)v11;
          if (*(char *)(v10 + 31) < 0)
            v12 = *v11;
          std::string::basic_string[abi:ne180100]<0>(&__p, v12);
          size = std::stoll(&__p, __idx, 10);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if (*(char *)(v10 + 31) < 0)
            v13 = *(_QWORD *)(v10 + 16);
          else
            v13 = *(unsigned __int8 *)(v10 + 31);
          if (__idx[0] != v13)
          {
            exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::operator+<char>();
            v101 = std::string::append(&v117, " cannot be interpreted as an integer");
            v102 = *(_OWORD *)&v101->__r_.__value_.__l.__data_;
            __p.__r_.__value_.__r.__words[2] = v101->__r_.__value_.__r.__words[2];
            *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v102;
            v101->__r_.__value_.__l.__size_ = 0;
            v101->__r_.__value_.__r.__words[2] = 0;
            v101->__r_.__value_.__r.__words[0] = 0;
            std::runtime_error::runtime_error(exception, &__p);
            __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
          }
          goto LABEL_33;
        case 3:
          v7 = *(_QWORD *)v5;
          memset(&__p, 0, sizeof(__p));
          std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, *(const void **)(v7 + 8), *(_QWORD *)(v7 + 16), (uint64_t)(*(_QWORD *)(v7 + 16) - *(_QWORD *)(v7 + 8)) >> 3);
          turi::flexible_type_fail(0);
          if (__p.__r_.__value_.__r.__words[0])
          {
            __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          goto LABEL_32;
        case 4:
          v14 = *(_QWORD *)v5;
          memset(&__p, 0, sizeof(__p));
          std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&__p, *(uint64_t **)(v14 + 8), *(uint64_t **)(v14 + 16), (uint64_t)(*(_QWORD *)(v14 + 16) - *(_QWORD *)(v14 + 8)) >> 4);
          turi::flexible_type_fail(0);
          v117.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v117);
          goto LABEL_32;
        case 5:
          v15 = *(_QWORD *)v5;
          memset(&__p, 0, sizeof(__p));
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&__p, *(uint64_t **)(v15 + 8), *(uint64_t **)(v15 + 16), (uint64_t)(*(_QWORD *)(v15 + 16) - *(_QWORD *)(v15 + 8)) >> 5);
          turi::flexible_type_fail(0);
          v117.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v117);
          goto LABEL_32;
        case 6:
          size = (uint64_t)(*(_QWORD *)v5 << 8) >> 8;
          goto LABEL_33;
        case 7:
          goto LABEL_33;
        case 8:
          v16 = *(_QWORD *)v5;
          v17 = *(unsigned int **)(v16 + 16);
          v107 = *(void ***)(v16 + 8);
          v108 = v17;
          if (v17)
          {
            v18 = v17 + 2;
            do
              v19 = __ldxr(v18);
            while (__stxr(v19 + 1, v18));
          }
          v20 = *(_OWORD *)(v16 + 24);
          v21 = *(_OWORD *)(v16 + 56);
          v110 = *(_OWORD *)(v16 + 40);
          v111 = v21;
          v109 = v20;
          turi::flexible_type_fail(0);
          boost::detail::shared_count::~shared_count(&v108);
          goto LABEL_32;
        case 9:
          turi::flexible_type_impl::ndarray<double>::ndarray(&__p, *(_QWORD *)v5 + 8);
          turi::flexible_type_fail(0);
          if (v115)
          {
            v116 = v115;
            operator delete(v115);
          }
          if (__p.__r_.__value_.__r.__words[2])
          {
            v113 = __p.__r_.__value_.__r.__words[2];
            operator delete((void *)__p.__r_.__value_.__r.__words[2]);
          }
          size = __p.__r_.__value_.__l.__size_;
          if (!__p.__r_.__value_.__l.__size_)
            goto LABEL_33;
          v8 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
          do
            v9 = __ldaxr(v8);
          while (__stlxr(v9 - 1, v8));
          if (!v9)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)size + 16))(size);
            std::__shared_weak_count::__release_weak((std::__shared_weak_count *)size);
          }
LABEL_32:
          size = 0;
LABEL_33:
          v22 = *v2 + 16 * *(_QWORD *)(a1 + 520);
          v23 = 0;
          switch(*(_BYTE *)(v22 + 12))
          {
            case 0:
              v23 = *(_QWORD *)v22;
              goto LABEL_61;
            case 1:
              v23 = (uint64_t)*(double *)v22;
              goto LABEL_61;
            case 2:
              v27 = *(_QWORD *)v22;
              v28 = (char **)(*(_QWORD *)v22 + 8);
              __idx[0] = 0;
              v29 = (char *)v28;
              if (*(char *)(v27 + 31) < 0)
                v29 = *v28;
              std::string::basic_string[abi:ne180100]<0>(&__p, v29);
              v23 = std::stoll(&__p, __idx, 10);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
              if (*(char *)(v27 + 31) < 0)
                v30 = *(_QWORD *)(v27 + 16);
              else
                v30 = *(unsigned __int8 *)(v27 + 31);
              if (__idx[0] != v30)
              {
                v97 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::operator+<char>();
                v98 = std::string::append(&v117, " cannot be interpreted as an integer");
                v99 = *(_OWORD *)&v98->__r_.__value_.__l.__data_;
                __p.__r_.__value_.__r.__words[2] = v98->__r_.__value_.__r.__words[2];
                *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v99;
                v98->__r_.__value_.__l.__size_ = 0;
                v98->__r_.__value_.__r.__words[2] = 0;
                v98->__r_.__value_.__r.__words[0] = 0;
                std::runtime_error::runtime_error(v97, &__p);
                __cxa_throw(v97, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
              }
              goto LABEL_61;
            case 3:
              v24 = *(_QWORD *)v22;
              memset(&__p, 0, sizeof(__p));
              std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, *(const void **)(v24 + 8), *(_QWORD *)(v24 + 16), (uint64_t)(*(_QWORD *)(v24 + 16) - *(_QWORD *)(v24 + 8)) >> 3);
              turi::flexible_type_fail(0);
              if (__p.__r_.__value_.__r.__words[0])
              {
                __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
                operator delete(__p.__r_.__value_.__l.__data_);
              }
              goto LABEL_60;
            case 4:
              v31 = *(_QWORD *)v22;
              memset(&__p, 0, sizeof(__p));
              std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&__p, *(uint64_t **)(v31 + 8), *(uint64_t **)(v31 + 16), (uint64_t)(*(_QWORD *)(v31 + 16) - *(_QWORD *)(v31 + 8)) >> 4);
              turi::flexible_type_fail(0);
              v117.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v117);
              goto LABEL_60;
            case 5:
              v32 = *(_QWORD *)v22;
              memset(&__p, 0, sizeof(__p));
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&__p, *(uint64_t **)(v32 + 8), *(uint64_t **)(v32 + 16), (uint64_t)(*(_QWORD *)(v32 + 16) - *(_QWORD *)(v32 + 8)) >> 5);
              turi::flexible_type_fail(0);
              v117.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v117);
              goto LABEL_60;
            case 6:
              v23 = (uint64_t)(*(_QWORD *)v22 << 8) >> 8;
              goto LABEL_61;
            case 7:
              goto LABEL_61;
            case 8:
              v33 = *(_QWORD *)v22;
              v34 = *(unsigned int **)(v33 + 16);
              v107 = *(void ***)(v33 + 8);
              v108 = v34;
              if (v34)
              {
                v35 = v34 + 2;
                do
                  v36 = __ldxr(v35);
                while (__stxr(v36 + 1, v35));
              }
              v37 = *(_OWORD *)(v33 + 24);
              v38 = *(_OWORD *)(v33 + 56);
              v110 = *(_OWORD *)(v33 + 40);
              v111 = v38;
              v109 = v37;
              turi::flexible_type_fail(0);
              boost::detail::shared_count::~shared_count(&v108);
              goto LABEL_60;
            case 9:
              turi::flexible_type_impl::ndarray<double>::ndarray(&__p, *(_QWORD *)v22 + 8);
              turi::flexible_type_fail(0);
              if (v115)
              {
                v116 = v115;
                operator delete(v115);
              }
              if (__p.__r_.__value_.__r.__words[2])
              {
                v113 = __p.__r_.__value_.__r.__words[2];
                operator delete((void *)__p.__r_.__value_.__r.__words[2]);
              }
              v23 = __p.__r_.__value_.__l.__size_;
              if (!__p.__r_.__value_.__l.__size_)
                goto LABEL_61;
              v25 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
              do
                v26 = __ldaxr(v25);
              while (__stlxr(v26 - 1, v25));
              if (!v26)
              {
                (*(void (**)(uint64_t))(*(_QWORD *)v23 + 16))(v23);
                std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v23);
              }
LABEL_60:
              v23 = 0;
LABEL_61:
              v39 = (0xC6A4A7935BD1E995 * (*(_QWORD *)(a1 + 456) ^ 0xC3A5C85C97CB3127)) ^ ((0xC6A4A7935BD1E995
                                                                                              * (*(_QWORD *)(a1 + 456) ^ 0xC3A5C85C97CB3127)) >> 47);
              v40 = (0xC6A4A7935BD1E995 * (size ^ 0xC3A5C85C97CB3127)) ^ ((0xC6A4A7935BD1E995
                                                                             * (size ^ 0xC3A5C85C97CB3127)) >> 47);
              v41 = 5
                  * __ROR8__((0x4CF5AD432745937FLL * ((0x23994FF200000000 * v39) | ((0x309B56691CCA7F9 * v39) >> 31))) ^ 0x73A3916AE45D01E5, 27);
              v42 = __ROR8__((0x87C37B91114253D5 * ((0x5F3637F580000000 * v40) | ((0x60004CFCBE6C6FEBLL * v40) >> 33))) ^ 0x73A3916AE45D01E5, 31);
              v43 = **(_QWORD **)(a1 + 504);
              v44 = (*(_QWORD *)(*(_QWORD *)(a1 + 504) + 8) - v43) >> 6;
              v45 = ((5 * (v41 + 0x4231D716C8ADF0A2 + v42) + 944331445) ^ (unint64_t)(v41 + 0x4231D716C8ADF0A2))
                  % v44;
              v46 = (0xC6A4A7935BD1E995 * (*(_QWORD *)(a1 + 464) ^ 0xC3A5C85C97CB3127)) ^ ((0xC6A4A7935BD1E995
                                                                                              * (*(_QWORD *)(a1 + 464) ^ 0xC3A5C85C97CB3127)) >> 47);
              v47 = (0xC6A4A7935BD1E995 * (v23 ^ 0xC3A5C85C97CB3127)) ^ ((0xC6A4A7935BD1E995
                                                                            * (v23 ^ 0xC3A5C85C97CB3127)) >> 47);
              v48 = 5
                  * __ROR8__((0x4CF5AD432745937FLL * ((0x23994FF200000000 * v46) | ((0x309B56691CCA7F9 * v46) >> 31))) ^ 0x73A3916AE45D01E5, 27)+ 0x4231D716C8ADF0A2;
              v49 = ((5
                    * (v48
                     + __ROR8__((0x87C37B91114253D5 * ((0x5F3637F580000000 * v47) | ((0x60004CFCBE6C6FEBLL * v47) >> 33))) ^ 0x73A3916AE45D01E5, 31))+ 944331445) ^ (unint64_t)v48)% v44;
              v50 = v43 + (v49 << 6);
              v51 = v43 + (v45 << 6);
              if (v45 < v49)
                v52 = v51;
              else
                v52 = v50;
              if (v45 >= v49)
                v50 = v51;
              v53 = v45 == v49;
              if (v45 == v49)
                v54 = v51;
              else
                v54 = v52;
              if (v53)
                v55 = v51;
              else
                v55 = v50;
              v56 = **(_QWORD **)(a1 + 16) + 24 * v23;
              __p.__r_.__value_.__r.__words[0] = **(_QWORD **)(a1 + 8) + 24 * size;
              __p.__r_.__value_.__l.__size_ = v56;
              __p.__r_.__value_.__r.__words[2] = (std::string::size_type)v2;
              v113 = v54;
              v114 = v55;
              v57 = *(_QWORD *)(a1 + 496);
              if (!v57)
                std::__throw_bad_function_call[abi:ne180100]();
              (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v57 + 48))(v57, &__p);
              if (*(_BYTE *)(a1 + 32))
              {
                std::vector<turi::flexible_type>::resize(v106, (v104 - v103) >> 3);
                if (v104 != v103)
                {
                  v58 = 0;
                  do
                  {
                    v59 = *v2 + 16 * *(_QWORD *)(*(_QWORD *)(a1 + 432) + 8 * v58);
                    v60 = v106[0] + 16 * v58;
                    if (v59 != v60)
                    {
                      switch(*(_BYTE *)(v60 + 12))
                      {
                        case 2:
                          v61 = *(unint64_t **)v60;
                          do
                          {
                            v62 = __ldaxr(v61);
                            v63 = v62 - 1;
                          }
                          while (__stlxr(v63, v61));
                          if (!v63)
                          {
                            v64 = *(unint64_t **)v60;
                            if (!*(_QWORD *)v60)
                              goto LABEL_119;
                            if (*((char *)v64 + 31) < 0)
                              operator delete((void *)v64[1]);
                            v65 = v64;
                            v66 = 0x1012C404EF22A49;
                            goto LABEL_118;
                          }
                          break;
                        case 3:
                          v78 = *(unint64_t **)v60;
                          do
                          {
                            v79 = __ldaxr(v78);
                            v80 = v79 - 1;
                          }
                          while (__stlxr(v80, v78));
                          if (!v80)
                          {
                            v81 = *(unint64_t **)v60;
                            if (!*(_QWORD *)v60)
                              goto LABEL_119;
                            v82 = (void *)v81[1];
                            if (v82)
                            {
                              v81[2] = (unint64_t)v82;
                              operator delete(v82);
                            }
                            v65 = v81;
                            v66 = 0x1080C409938AC02;
                            goto LABEL_118;
                          }
                          break;
                        case 4:
                          v67 = *(unint64_t **)v60;
                          do
                          {
                            v68 = __ldaxr(v67);
                            v69 = v68 - 1;
                          }
                          while (__stlxr(v69, v67));
                          if (!v69)
                          {
                            v70 = *(unint64_t **)v60;
                            if (!*(_QWORD *)v60)
                              goto LABEL_119;
                            v107 = (void **)(v70 + 1);
                            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v107);
                            goto LABEL_111;
                          }
                          break;
                        case 5:
                          v83 = *(unint64_t **)v60;
                          do
                          {
                            v84 = __ldaxr(v83);
                            v85 = v84 - 1;
                          }
                          while (__stlxr(v85, v83));
                          if (!v85)
                          {
                            v70 = *(unint64_t **)v60;
                            if (!*(_QWORD *)v60)
                              goto LABEL_119;
                            v107 = (void **)(v70 + 1);
                            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v107);
LABEL_111:
                            v65 = v70;
                            v66 = 0x1020C405E66F15BLL;
                            goto LABEL_118;
                          }
                          break;
                        case 8:
                          v86 = *(unint64_t **)v60;
                          do
                          {
                            v87 = __ldaxr(v86);
                            v88 = v87 - 1;
                          }
                          while (__stlxr(v88, v86));
                          if (!v88)
                          {
                            v89 = *(unint64_t **)v60;
                            if (!*(_QWORD *)v60)
                              goto LABEL_119;
                            boost::detail::shared_count::~shared_count((unsigned int **)v89 + 2);
                            v65 = v89;
                            v77 = -235920773;
                            goto LABEL_117;
                          }
                          break;
                        case 9:
                          v71 = *(unint64_t **)v60;
                          do
                          {
                            v72 = __ldaxr(v71);
                            v73 = v72 - 1;
                          }
                          while (__stlxr(v73, v71));
                          if (!v73)
                          {
                            v74 = *(unint64_t **)v60;
                            if (*(_QWORD *)v60)
                            {
                              v75 = (void *)v74[6];
                              if (v75)
                              {
                                v74[7] = (unint64_t)v75;
                                operator delete(v75);
                              }
                              v76 = (void *)v74[3];
                              if (v76)
                              {
                                v74[4] = (unint64_t)v76;
                                operator delete(v76);
                              }
                              std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v74 + 1));
                              v65 = v74;
                              v77 = 2071181815;
LABEL_117:
                              v66 = v77 | 0x1030C4000000000;
LABEL_118:
                              MEMORY[0x219A19A08](v65, v66);
                            }
LABEL_119:
                            *(_QWORD *)v60 = 0;
                          }
                          break;
                        default:
                          break;
                      }
                      v90 = *(_QWORD *)v59;
                      *(_QWORD *)(v60 + 5) = *(_QWORD *)(v59 + 5);
                      *(_QWORD *)v60 = v90;
                      LODWORD(v90) = *(unsigned __int8 *)(v59 + 12);
                      *(_BYTE *)(v60 + 12) = v90;
                      v91 = v90 > 9;
                      v92 = (1 << v90) & 0x33C;
                      if (!v91 && v92 != 0)
                      {
                        v94 = *(unint64_t **)v60;
                        do
                          v95 = __ldaxr(v94);
                        while (__stlxr(v95 + 1, v94));
                      }
                    }
                    ++v58;
                  }
                  while (v58 != v4);
                }
                v96 = *(_QWORD *)(a1 + 392);
                if (!v96)
                  std::__throw_bad_function_call[abi:ne180100]();
                (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v96 + 48))(v96, v106);
              }
              v2 += 3;
              if (v2 == v105)
                goto LABEL_137;
              continue;
            default:
              goto LABEL_140;
          }
        default:
LABEL_140:
          turi::flexible_type_fail(0);
          __break(1u);
          return;
      }
    }
  }
LABEL_137:
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v106;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
}

void sub_2182E9808(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, boost::detail::shared_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  void *v32;
  int v33;
  uint64_t v34;

  if (a32 < 0)
    operator delete(__p);
  if (*(char *)(v34 - 97) < 0)
  {
    operator delete(*(void **)(v34 - 120));
    if ((v33 & 1) == 0)
    {
LABEL_8:
      *(_QWORD *)(v34 - 120) = &a16;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)(v34 - 120));
      _Unwind_Resume(a1);
    }
  }
  else if (!v33)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v32);
  goto LABEL_8;
}

void turi::sgraph_compute::`anonymous namespace'::single_edge_triple_apply_visitor::finalize(turi::sgraph_compute::_anonymous_namespace_::single_edge_triple_apply_visitor *this)
{
  char *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 *v6;
  __int128 v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::string __p;
  __int128 v12;
  uint64_t v13[38];

  v13[37] = *MEMORY[0x24BDAC8D0];
  if (*((_BYTE *)this + 32))
  {
    v2 = (char *)this + 40;
    turi::sframe::close((turi::sgraph_compute::_anonymous_namespace_::single_edge_triple_apply_visitor *)((char *)this + 40));
    if (*((_QWORD *)this + 55) != *((_QWORD *)this + 54))
    {
      v3 = 0;
      do
      {
        v4 = *((_QWORD *)this + 3);
        turi::sframe::select_column((uint64_t)v2, v3, &v12);
        v5 = *((_QWORD *)this + 10);
        if (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 11) - v5) >> 3) <= v3)
          turi::sframe::column_name(unsigned long)const::{lambda(void)#1}::operator()();
        v6 = (__int128 *)(v5 + 24 * v3);
        if (*((char *)v6 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
        }
        else
        {
          v7 = *v6;
          __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v7;
        }
        turi::sframe::replace_column(v4, &v12, &__p, v13);
        turi::sframe::operator=(*((_QWORD *)this + 3), (uint64_t)v13);
        turi::sframe::~sframe((turi::sframe *)v13);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        v8 = (std::__shared_weak_count *)*((_QWORD *)&v12 + 1);
        if (*((_QWORD *)&v12 + 1))
        {
          v9 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
          do
            v10 = __ldaxr(v9);
          while (__stlxr(v10 - 1, v9));
          if (!v10)
          {
            ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
            std::__shared_weak_count::__release_weak(v8);
          }
        }
        ++v3;
      }
      while (v3 < (uint64_t)(*((_QWORD *)this + 55) - *((_QWORD *)this + 54)) >> 3);
    }
  }
}

void sub_2182E9ABC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, char a18)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void std::__function::__func<void turi::sgraph_compute::`anonymous namespace'::triple_apply_impl::run<turi::sgraph_compute::`anonymous namespace'::single_edge_triple_apply_visitor>(turi::sgraph_compute::`anonymous namespace'::single_edge_triple_apply_visitor)::{lambda(std::vector<std::pair<unsigned long,unsigned long>>)#1},std::allocator<void turi::sgraph_compute::`anonymous namespace'::triple_apply_impl::run<turi::sgraph_compute::`anonymous namespace'::single_edge_triple_apply_visitor>(turi::sgraph_compute::`anonymous namespace'::single_edge_triple_apply_visitor)::{lambda(std::vector<std::pair<unsigned long,unsigned long>>)#1}>,void ()(std::vector<std::pair<unsigned long,unsigned long>>)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

_QWORD *std::__function::__func<void turi::sgraph_compute::`anonymous namespace'::triple_apply_impl::run<turi::sgraph_compute::`anonymous namespace'::single_edge_triple_apply_visitor>(turi::sgraph_compute::`anonymous namespace'::single_edge_triple_apply_visitor)::{lambda(std::vector<std::pair<unsigned long,unsigned long>>)#1},std::allocator<void turi::sgraph_compute::`anonymous namespace'::triple_apply_impl::run<turi::sgraph_compute::`anonymous namespace'::single_edge_triple_apply_visitor>(turi::sgraph_compute::`anonymous namespace'::single_edge_triple_apply_visitor)::{lambda(std::vector<std::pair<unsigned long,unsigned long>>)#1}>,void ()(std::vector<std::pair<unsigned long,unsigned long>>)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24D937B30;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void turi::sgraph_compute::`anonymous namespace'::triple_apply_impl::run<turi::sgraph_compute::`anonymous namespace'::single_edge_triple_apply_visitor>(turi::sgraph_compute::`anonymous namespace'::single_edge_triple_apply_visitor)::{lambda(std::vector<std::pair<unsigned long,unsigned long>>)#1},std::allocator<void turi::sgraph_compute::`anonymous namespace'::triple_apply_impl::run<turi::sgraph_compute::`anonymous namespace'::single_edge_triple_apply_visitor>(turi::sgraph_compute::`anonymous namespace'::single_edge_triple_apply_visitor)::{lambda(std::vector<std::pair<unsigned long,unsigned long>>)#1}>,void ()(std::vector<std::pair<unsigned long,unsigned long>>)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24D937B30;
  a2[1] = v2;
  return result;
}

void std::__function::__func<void turi::sgraph_compute::`anonymous namespace'::triple_apply_impl::run<turi::sgraph_compute::`anonymous namespace'::single_edge_triple_apply_visitor>(turi::sgraph_compute::`anonymous namespace'::single_edge_triple_apply_visitor)::{lambda(std::vector<std::pair<unsigned long,unsigned long>>)#1},std::allocator<void turi::sgraph_compute::`anonymous namespace'::triple_apply_impl::run<turi::sgraph_compute::`anonymous namespace'::single_edge_triple_apply_visitor>(turi::sgraph_compute::`anonymous namespace'::single_edge_triple_apply_visitor)::{lambda(std::vector<std::pair<unsigned long,unsigned long>>)#1}>,void ()(std::vector<std::pair<unsigned long,unsigned long>>)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t *v15;
  int *v16;
  file_logger *v17;
  file_logger *started;
  uint64_t v19;
  _QWORD *v20;
  const std::locale::facet *v21;
  uint64_t v22;
  _QWORD *exception;
  void *__p;
  char v25;
  __int128 v26;
  _QWORD v27[11];
  char v28;
  uint64_t v29;
  uint64_t *v30;
  _QWORD *v31[2];
  uint64_t *v32;
  _QWORD *v33[2];
  std::locale v34;

  v2 = *(uint64_t **)a2;
  v3 = *(uint64_t **)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v4 = *(_QWORD *)(a1 + 8);
  v33[0] = 0;
  v33[1] = 0;
  v31[1] = 0;
  v32 = (uint64_t *)v33;
  v30 = (uint64_t *)v31;
  v31[0] = 0;
  if (v2 != v3)
  {
    v5 = v2;
    do
    {
      v6 = *v5;
      v7 = v5[1];
      *(_QWORD *)&v26 = 0;
      *((_QWORD *)&v26 + 1) = v6;
      std::__tree<turi::sgraph::vertex_partition_address>::__emplace_unique_key_args<turi::sgraph::vertex_partition_address,turi::sgraph::vertex_partition_address>(&v32, (unint64_t *)&v26, &v26);
      *(_QWORD *)&v26 = 0;
      *((_QWORD *)&v26 + 1) = v7;
      std::__tree<turi::sgraph::vertex_partition_address>::__emplace_unique_key_args<turi::sgraph::vertex_partition_address,turi::sgraph::vertex_partition_address>(&v32, (unint64_t *)&v26, &v26);
      v5 += 2;
    }
    while (v5 != v3);
  }
  v8 = *(_QWORD **)(v4 + 32);
  if (v8 != (_QWORD *)(v4 + 40))
  {
    do
    {
      if (v33 == std::__tree<turi::sgraph::vertex_partition_address>::find<turi::sgraph::vertex_partition_address>((uint64_t)&v32, v8 + 4))std::__tree<turi::sgraph::vertex_partition_address>::__emplace_unique_key_args<turi::sgraph::vertex_partition_address,turi::sgraph::vertex_partition_address>(&v30, v8 + 4, (_OWORD *)v8 + 2);
      v9 = (_QWORD *)v8[1];
      if (v9)
      {
        do
        {
          v10 = v9;
          v9 = (_QWORD *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          v10 = (_QWORD *)v8[2];
          v11 = *v10 == (_QWORD)v8;
          v8 = v10;
        }
        while (!v11);
      }
      v8 = v10;
    }
    while (v10 != (_QWORD *)(v4 + 40));
  }
  if ((uint64_t **)(v4 + 32) != &v32)
    std::__tree<turi::sgraph::vertex_partition_address>::__assign_multi<std::__tree_const_iterator<turi::sgraph::vertex_partition_address,std::__tree_node<turi::sgraph::vertex_partition_address,void *> *,long>>((uint64_t **)(v4 + 32), v32, v33);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v26);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"Vertex partitions in memory: ", 29);
  v12 = v32;
  if (v32 != (uint64_t *)v33)
  {
    do
    {
      v13 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" ", 1);
      v14 = (uint64_t *)v12[1];
      if (v14)
      {
        do
        {
          v15 = v14;
          v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          v15 = (uint64_t *)v12[2];
          v11 = *v15 == (_QWORD)v12;
          v12 = v15;
        }
        while (!v11);
      }
      v12 = v15;
    }
    while (v15 != (uint64_t *)v33);
  }
  v16 = (int *)global_logger();
  if (v16[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v16))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v17 = (file_logger *)global_logger();
    started = file_logger::start_stream(v17, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph_triple_apply.cpp", "operator()", 178, 1);
    std::stringbuf::str();
    v19 = file_logger::operator<<<std::string>((uint64_t)started, (uint64_t)&__p);
    v20 = pthread_getspecific(*(_QWORD *)(v19 + 592));
    if (v20)
    {
      if (*((_BYTE *)v20 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v20 + *(_QWORD *)(v20[2] - 24) + 16));
        v21 = std::locale::use_facet(&v34, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v21->__vftable[2].~facet_0)(v21, 10);
        std::locale::~locale(&v34);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush((file_logger *)v19);
        if (*(_DWORD *)(v19 + 600) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
    if (v25 < 0)
      operator delete(__p);
  }
  *(_QWORD *)&v26 = *MEMORY[0x24BEDB7F0];
  v22 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)&v27[-2] + *(_QWORD *)(v26 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v27[0] = v22;
  v27[1] = MEMORY[0x24BEDB848] + 16;
  if (v28 < 0)
    operator delete((void *)v27[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x219A198F4](&v29);
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)&v30, v31[0]);
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)&v32, v33[0]);
  if (v2)
    operator delete(v2);
}

void sub_2182EA004(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  void *v35;
  uint64_t v36;
  uint64_t v38;

  std::locale::~locale((std::locale *)(v36 - 72));
  if (a15 < 0)
    operator delete(__p);
  a16 = *MEMORY[0x24BEDB7F0];
  v38 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(uint64_t *)((char *)&a16 + *(_QWORD *)(a16 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  a18 = v38;
  a19 = MEMORY[0x24BEDB848] + 16;
  if (a32 < 0)
    operator delete(a27);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x219A198F4](&a35);
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy(v36 - 120, *(_QWORD **)(v36 - 112));
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy(v36 - 96, *(_QWORD **)(v36 - 88));
  if (v35)
    operator delete(v35);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void turi::sgraph_compute::`anonymous namespace'::triple_apply_impl::run<turi::sgraph_compute::`anonymous namespace'::single_edge_triple_apply_visitor>(turi::sgraph_compute::`anonymous namespace'::single_edge_triple_apply_visitor)::{lambda(std::vector<std::pair<unsigned long,unsigned long>>)#1},std::allocator<void turi::sgraph_compute::`anonymous namespace'::triple_apply_impl::run<turi::sgraph_compute::`anonymous namespace'::single_edge_triple_apply_visitor>(turi::sgraph_compute::`anonymous namespace'::single_edge_triple_apply_visitor)::{lambda(std::vector<std::pair<unsigned long,unsigned long>>)#1}>,void ()(std::vector<std::pair<unsigned long,unsigned long>>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void turi::sgraph_compute::`anonymous namespace'::triple_apply_impl::run<turi::sgraph_compute::`anonymous namespace'::single_edge_triple_apply_visitor>(turi::sgraph_compute::`anonymous namespace'::single_edge_triple_apply_visitor)::{lambda(std::vector<std::pair<unsigned long,unsigned long>>)#1},std::allocator<void turi::sgraph_compute::`anonymous namespace'::triple_apply_impl::run<turi::sgraph_compute::`anonymous namespace'::single_edge_triple_apply_visitor>(turi::sgraph_compute::`anonymous namespace'::single_edge_triple_apply_visitor)::{lambda(std::vector<std::pair<unsigned long,unsigned long>>)#1}>,void ()(std::vector<std::pair<unsigned long,unsigned long>>)>::target_type()
{
}

void turi::sgraph_compute::`anonymous namespace'::triple_apply_impl::unload_graph_vertex_blocks(uint64_t *a1, uint64_t a2)
{
  turi::thread_pool *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  __int128 *v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  char *v20;
  char *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  size_t v26;
  std::string *v27;
  _BYTE *v28;
  char *v29;
  std::string::value_type v30;
  _BYTE *v31;
  _BYTE *v32;
  turi::thread_pool *instance;
  turi::thread *v34;
  turi::thread_pool *tls_data;
  uint64_t v36;
  turi::thread_pool *v37;
  uint64_t v38;
  double v39;
  turi::thread *v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE *v43;
  _BYTE *v44;
  turi::thread_pool *v45;
  turi::thread *v46;
  turi::thread_pool *v47;
  uint64_t v48;
  turi::thread_pool *v49;
  uint64_t v50;
  double v51;
  turi::thread *v52;
  unint64_t v53;
  uint64_t v54;
  void **v55;
  uint64_t *v56;
  uint64_t *v57;
  void **v58;
  void **p_p;
  void *__p;
  char *v61;
  char *v62;
  void *v63;
  char *v64;
  char *v65;
  uint64_t v66;
  std::string *v67;
  unint64_t v68;
  void *v69;
  _BYTE *v70;
  uint64_t *v71;
  void **v72;
  unint64_t v73;
  uint64_t v74;
  void **v75[26];

  v75[24] = *(void ***)MEMORY[0x24BDAC8D0];
  v3 = (turi::thread_pool *)std::vector<std::pair<unsigned long,unsigned long>>::vector<std::__tree_const_iterator<std::pair<unsigned long,unsigned long>,std::__tree_node<std::pair<unsigned long,unsigned long>,void *> *,long>,0>(&v69, *(_QWORD **)a2, (_QWORD *)(a2 + 8));
  v4 = a1[7];
  v5 = a1[8];
  if (v4 != v5)
  {
    v66 = 0;
    v67 = 0;
    v68 = 0;
    v63 = 0;
    v64 = 0;
    v65 = 0;
    __p = 0;
    v61 = 0;
    v62 = 0;
    do
    {
      v6 = v61;
      if (v61 >= v62)
      {
        v8 = (char *)__p;
        v9 = (v61 - (_BYTE *)__p) >> 3;
        v10 = v9 + 1;
        if ((unint64_t)(v9 + 1) >> 61)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v11 = v62 - (_BYTE *)__p;
        if ((v62 - (_BYTE *)__p) >> 2 > v10)
          v10 = v11 >> 2;
        if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
          v12 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v12 = v10;
        if (v12)
        {
          v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v62, v12);
          v8 = (char *)__p;
          v6 = v61;
        }
        else
        {
          v13 = 0;
        }
        v14 = &v13[8 * v9];
        *(_QWORD *)v14 = *(_QWORD *)v4;
        v7 = v14 + 8;
        while (v6 != v8)
        {
          v15 = *((_QWORD *)v6 - 1);
          v6 -= 8;
          *((_QWORD *)v14 - 1) = v15;
          v14 -= 8;
        }
        __p = v14;
        v61 = v7;
        v62 = &v13[8 * v12];
        if (v8)
          operator delete(v8);
      }
      else
      {
        *(_QWORD *)v61 = *(_QWORD *)v4;
        v7 = v6 + 8;
      }
      v61 = v7;
      v16 = (__int128 *)(v4 + 8);
      v17 = v67;
      if ((unint64_t)v67 >= v68)
      {
        v19 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>(&v66, v16);
      }
      else
      {
        if (*(char *)(v4 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(v67, *(const std::string::value_type **)(v4 + 8), *(_QWORD *)(v4 + 16));
        }
        else
        {
          v18 = *v16;
          v67->__r_.__value_.__r.__words[2] = *(_QWORD *)(v4 + 24);
          *(_OWORD *)&v17->__r_.__value_.__l.__data_ = v18;
        }
        v19 = v17 + 1;
      }
      v67 = v19;
      v20 = v64;
      if (v64 >= v65)
      {
        v22 = (unint64_t)v63;
        v23 = v64 - (_BYTE *)v63;
        v24 = v64 - (_BYTE *)v63 + 1;
        if (v24 < 0)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v25 = v65 - (_BYTE *)v63;
        if (2 * (v65 - (_BYTE *)v63) > (unint64_t)v24)
          v24 = 2 * v25;
        if (v25 >= 0x3FFFFFFFFFFFFFFFLL)
          v26 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v26 = v24;
        if (v26)
          v19 = (std::string *)operator new(v26);
        else
          v19 = 0;
        v27 = (std::string *)((char *)v19 + v23);
        v28 = (char *)v19 + v23;
        *v28 = *(_BYTE *)(v4 + 32);
        v21 = v28 + 1;
        if (v20 != (char *)v22)
        {
          v29 = &v20[~v22];
          do
          {
            v30 = *--v20;
            (v29--)[(_QWORD)v19] = v30;
          }
          while (v20 != (char *)v22);
          v27 = v19;
        }
        v63 = v27;
        v64 = v21;
        v65 = (char *)v19 + v26;
        if (v22)
          operator delete((void *)v22);
      }
      else
      {
        *v64 = *(_BYTE *)(v4 + 32);
        v21 = v20 + 1;
      }
      v64 = v21;
      v4 += 40;
    }
    while (v4 != v5);
    v32 = v69;
    v31 = v70;
    v55 = &v69;
    v56 = a1;
    v57 = &v66;
    v58 = &v63;
    p_p = &__p;
    instance = (turi::thread_pool *)turi::thread_pool::get_instance((turi::thread_pool *)v19);
    v34 = (turi::thread *)turi::thread_pool::size(instance);
    tls_data = (turi::thread_pool *)turi::thread::get_tls_data(v34);
    v36 = (v31 - v32) >> 4;
    if (*((_BYTE *)tls_data + 8) || (unint64_t)v34 <= 1)
    {
      if (v31 != v32)
      {
        v42 = 0;
        do
        while (v36 != v42);
      }
    }
    else
    {
      v37 = (turi::thread_pool *)turi::thread_pool::get_instance(tls_data);
      turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)v75, v37);
      v38 = 0;
      v39 = (double)(unint64_t)v36 / (double)(unint64_t)v34;
      do
      {
        v40 = (turi::thread *)(v38 + 1);
        v41 = (unint64_t)(v39 * (double)(unint64_t)(v38 + 1) + 0.0);
        if ((turi::thread *)v38 == (turi::thread *)((char *)v34 - 1))
          v41 = (v31 - v32) >> 4;
        v73 = (unint64_t)(v39 * (double)(unint64_t)v38 + 0.0);
        v74 = v41;
                        + 1);
        v72 = (void **)&v55;
        turi::parallel_task_queue::launch((uint64_t)v75, (uint64_t)&v71, v38);
        boost::function0<void>::~function0((uint64_t *)&v71);
        v38 = (uint64_t)v40;
      }
      while (v40 != v34);
      turi::parallel_task_queue::join((turi::parallel_task_queue *)v75);
      turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)v75);
    }
    if (__p)
    {
      v61 = (char *)__p;
      operator delete(__p);
    }
    if (v63)
    {
      v64 = (char *)v63;
      operator delete(v63);
    }
    v75[0] = (void **)&v66;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v75);
  }
  v44 = v69;
  v43 = v70;
  v71 = a1;
  v72 = &v69;
  v45 = (turi::thread_pool *)turi::thread_pool::get_instance(v3);
  v46 = (turi::thread *)turi::thread_pool::size(v45);
  v47 = (turi::thread_pool *)turi::thread::get_tls_data(v46);
  v48 = (v43 - v44) >> 4;
  if (*((_BYTE *)v47 + 8) || (unint64_t)v46 <= 1)
  {
    if (v43 != v44)
    {
      v54 = 8;
      do
      {
        turi::sgraph_compute::vertex_block<turi::sframe>::unload(a1[1] + (*(_QWORD *)((char *)v69 + v54) << 6));
        v54 += 16;
        --v48;
      }
      while (v48);
    }
  }
  else
  {
    v49 = (turi::thread_pool *)turi::thread_pool::get_instance(v47);
    turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)v75, v49);
    v50 = 0;
    v51 = (double)(unint64_t)v48 / (double)(unint64_t)v46;
    do
    {
      v52 = (turi::thread *)(v50 + 1);
      v53 = (unint64_t)(v51 * (double)(unint64_t)(v50 + 1) + 0.0);
      if ((turi::thread *)v50 == (turi::thread *)((char *)v46 - 1))
        v53 = v48;
      v57 = (uint64_t *)(v51 * (double)(unint64_t)v50 + 0.0);
      v58 = (void **)v53;
                    + 1);
      v56 = (uint64_t *)&v71;
      turi::parallel_task_queue::launch((uint64_t)v75, (uint64_t)&v55, v50);
      boost::function0<void>::~function0((uint64_t *)&v55);
      v50 = (uint64_t)v52;
    }
    while (v52 != v46);
    turi::parallel_task_queue::join((turi::parallel_task_queue *)v75);
    turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)v75);
  }
  if (v69)
  {
    v70 = v69;
    operator delete(v69);
  }
}

void sub_2182EA5DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)&a31);
  if (__p)
  {
    a16 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a18)
  {
    a19 = (uint64_t)a18;
    operator delete(a18);
  }
  a10 = &a21;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  if (a24)
  {
    a25 = (uint64_t)a24;
    operator delete(a24);
  }
  _Unwind_Resume(a1);
}

void turi::sgraph_compute::`anonymous namespace'::triple_apply_impl::load_graph_vertex_blocks(uint64_t a1, uint64_t a2)
{
  turi::thread_pool *v3;
  _BYTE *v4;
  _BYTE *v5;
  turi::thread_pool *instance;
  turi::thread *v7;
  turi::thread_pool *tls_data;
  uint64_t v9;
  turi::thread_pool *v10;
  uint64_t v11;
  double v12;
  turi::thread *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[2];
  void *__p;
  _BYTE *v18;
  uint64_t v19[4];
  _BYTE v20[192];
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v3 = (turi::thread_pool *)std::vector<std::pair<unsigned long,unsigned long>>::vector<std::__tree_const_iterator<std::pair<unsigned long,unsigned long>,std::__tree_node<std::pair<unsigned long,unsigned long>,void *> *,long>,0>(&__p, *(_QWORD **)a2, (_QWORD *)(a2 + 8));
  v5 = __p;
  v4 = v18;
  v16[0] = &__p;
  v16[1] = a1;
  instance = (turi::thread_pool *)turi::thread_pool::get_instance(v3);
  v7 = (turi::thread *)turi::thread_pool::size(instance);
  tls_data = (turi::thread_pool *)turi::thread::get_tls_data(v7);
  v9 = (v4 - v5) >> 4;
  if (*((_BYTE *)tls_data + 8) || (unint64_t)v7 <= 1)
  {
    if (v4 != v5)
    {
      v15 = 0;
      do
      while (v9 != v15);
    }
  }
  else
  {
    v10 = (turi::thread_pool *)turi::thread_pool::get_instance(tls_data);
    turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)v20, v10);
    v11 = 0;
    v12 = (double)(unint64_t)v9 / (double)(unint64_t)v7;
    do
    {
      v13 = (turi::thread *)(v11 + 1);
      v14 = (unint64_t)(v12 * (double)(unint64_t)(v11 + 1) + 0.0);
      if ((turi::thread *)v11 == (turi::thread *)((char *)v7 - 1))
        v14 = (v4 - v5) >> 4;
      v19[2] = (unint64_t)(v12 * (double)(unint64_t)v11 + 0.0);
      v19[3] = v14;
             + 1;
      v19[1] = (uint64_t)v16;
      turi::parallel_task_queue::launch((uint64_t)v20, (uint64_t)v19, v11);
      boost::function0<void>::~function0(v19);
      v11 = (uint64_t)v13;
    }
    while (v13 != v7);
    turi::parallel_task_queue::join((turi::parallel_task_queue *)v20);
    turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)v20);
  }
  if (__p)
  {
    v18 = __p;
    operator delete(__p);
  }
}

void sub_2182EA810(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)&a18);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<turi::sgraph::vertex_partition_address>::__emplace_unique_key_args<turi::sgraph::vertex_partition_address,turi::sgraph::vertex_partition_address>(uint64_t **a1, unint64_t *a2, _OWORD *a3)
{
  void **v5;
  uint64_t *v6;
  uint64_t **v7;
  uint64_t v9;

  v5 = (void **)std::__tree<turi::sgraph::vertex_partition_address>::__find_equal<turi::sgraph::vertex_partition_address>((uint64_t)a1, &v9, a2);
  v6 = (uint64_t *)*v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = (uint64_t *)operator new(0x30uLL);
    *((_OWORD *)v6 + 2) = *a3;
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v9, v7, v6);
  }
  return v6;
}

_QWORD *std::__tree<turi::sgraph::vertex_partition_address>::__find_equal<turi::sgraph::vertex_partition_address>(uint64_t a1, _QWORD *a2, unint64_t *a3)
{
  _QWORD *result;
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;

  v5 = *(_QWORD **)(a1 + 8);
  result = (_QWORD *)(a1 + 8);
  v4 = v5;
  if (v5)
  {
    v6 = *a3;
    v7 = a3[1];
    while (1)
    {
      while (1)
      {
        v8 = v4;
        v9 = v4[4];
        if (v6 >= v9)
          break;
LABEL_6:
        v4 = (_QWORD *)*v8;
        result = v8;
        if (!*v8)
          goto LABEL_14;
      }
      if (v6 == v9)
      {
        v10 = v8[5];
        if (v7 < v10)
          goto LABEL_6;
        if (v10 >= v7)
          goto LABEL_14;
      }
      else if (v9 >= v6)
      {
        goto LABEL_14;
      }
      result = v8 + 1;
      v4 = (_QWORD *)v8[1];
      if (!v4)
        goto LABEL_14;
    }
  }
  v8 = result;
LABEL_14:
  *a2 = v8;
  return result;
}

_QWORD *std::__tree<turi::sgraph::vertex_partition_address>::find<turi::sgraph::vertex_partition_address>(uint64_t a1, unint64_t *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;

  v4 = *(_QWORD **)(a1 + 8);
  v2 = (_QWORD *)(a1 + 8);
  v3 = v4;
  if (!v4)
    return v2;
  v6 = *a2;
  v5 = a2[1];
  v7 = v2;
  do
  {
    v8 = v3[4];
    if (v8 >= v6)
    {
      if (v8 == v6)
      {
        if (v3[5] < v5)
          ++v3;
        else
          v7 = v3;
      }
      else
      {
        v7 = v3;
      }
    }
    else
    {
      ++v3;
    }
    v3 = (_QWORD *)*v3;
  }
  while (v3);
  if (v7 == v2)
    return v2;
  v9 = v7[4];
  if (v6 < v9 || v6 == v9 && v5 < v7[5])
    return v2;
  return v7;
}

void turi::sgraph_compute::`anonymous namespace'::triple_apply_impl::unload_graph_vertex_blocks(std::set<turi::sgraph::vertex_partition_address> const&)::$_0::operator()(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  std::string::size_type *v3;
  std::string::size_type v4;
  std::string::size_type v5;
  _QWORD *v6;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  __int128 *v13;
  __int128 v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  __int128 v18;
  std::string v19;
  std::string __p[12];
  std::string *v21;
  std::string *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD **)(a1 + 8);
  v3 = (std::string::size_type *)(**(_QWORD **)a1 + 16 * a2);
  v4 = *v3;
  v5 = v3[1];
  v6 = (_QWORD *)*v2;
  __p[0].__r_.__value_.__r.__words[0] = v5;
  v19.__r_.__value_.__r.__words[0] = v6[3];
  if (v19.__r_.__value_.__r.__words[0] <= v5)
  {
    v21 = __p;
    v22 = &v19;
    turi::sgraph::vertex_partition(unsigned long,unsigned long)::{lambda(void)#1}::operator()();
  }
  __p[0].__r_.__value_.__r.__words[0] = v4;
  v19.__r_.__value_.__r.__words[0] = v6[4];
  if (v19.__r_.__value_.__r.__words[0] <= v4)
  {
    v21 = __p;
    v22 = &v19;
    turi::sgraph::vertex_group(unsigned long)::{lambda(void)#1}::operator()();
  }
  v8 = *(_QWORD *)(v6[8] + 24 * v4);
  turi::sframe::sframe((turi::sframe *)&v21);
  v9 = *(_QWORD **)(a1 + 16);
  v10 = *(_QWORD **)(a1 + 24);
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  turi::sframe::open_for_write((uint64_t)&v21, v9, v10, __p, 1, 1);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  turi::sgraph_compute::vertex_block<turi::sframe>::flush(v2[1] + (v5 << 6), (uint64_t)&v21, *(uint64_t **)(a1 + 32));
  if (v2[8] != v2[7])
  {
    v11 = 0;
    v12 = v8 + 296 * v5;
    do
    {
      if (0xAAAAAAAAAAAAAAABLL * ((v24 - v23) >> 3) <= v11)
        turi::sframe::column_name(unsigned long)const::{lambda(void)#1}::operator()();
      v13 = (__int128 *)(v23 + 24 * v11);
      if (*((char *)v13 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v19, *(const std::string::value_type **)v13, *((_QWORD *)v13 + 1));
      }
      else
      {
        v14 = *v13;
        v19.__r_.__value_.__r.__words[2] = *((_QWORD *)v13 + 2);
        *(_OWORD *)&v19.__r_.__value_.__l.__data_ = v14;
      }
      turi::sframe::select_column((uint64_t)&v21, v11, &v18);
      turi::sframe::replace_column(v12, &v18, &v19, (uint64_t *)__p);
      turi::sframe::operator=(v12, (uint64_t)__p);
      turi::sframe::~sframe((turi::sframe *)__p);
      v15 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
      if (*((_QWORD *)&v18 + 1))
      {
        v16 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v19.__r_.__value_.__l.__data_);
      ++v11;
    }
    while (v11 < 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v2[8] - v2[7]) >> 3));
  }
  *(_BYTE *)(v2[1] + (v5 << 6) + 25) = 1;
  turi::sframe::~sframe((turi::sframe *)&v21);
}

void sub_2182EAC40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  turi::sframe::~sframe((turi::sframe *)&a57);
  _Unwind_Resume(a1);
}

_QWORD *turi::sgraph_compute::vertex_block<turi::sframe>::flush(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t *v25;
  void *v26;
  void *v27;
  unsigned int v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t *v32;
  void *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t *v40;
  uint64_t v41;
  BOOL v42;
  int v43;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  _QWORD *result;
  uint64_t v52;
  uint64_t v53;
  _QWORD v54[3];
  void **v55;
  _QWORD v56[3];
  _QWORD *v57;
  _BYTE v58[24];
  _BYTE *v59;
  _BYTE v60[24];
  _BYTE *v61;
  uint64_t v62;

  v62 = *MEMORY[0x24BDAC8D0];
  (*(void (**)(_QWORD *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)a2 + 32))(v56, a2, 0);
  v53 = a2;
  std::vector<turi::flexible_type>::vector(v54, (a3[1] - *a3) >> 3);
  v6 = *(_QWORD **)a1;
  v7 = *(_QWORD **)(a1 + 8);
  if (*(_QWORD **)a1 != v7)
  {
    do
    {
      v8 = *a3;
      if (a3[1] != *a3)
      {
        v9 = 0;
        do
        {
          v10 = *v6 + 16 * *(_QWORD *)(v8 + 8 * v9);
          v11 = v54[0] + 16 * v9;
          if (v10 != v11)
          {
            switch(*(_BYTE *)(v11 + 12))
            {
              case 2:
                v12 = *(unint64_t **)v11;
                do
                {
                  v13 = __ldaxr(v12);
                  v14 = v13 - 1;
                }
                while (__stlxr(v14, v12));
                if (!v14)
                {
                  v15 = *(unint64_t **)v11;
                  if (!*(_QWORD *)v11)
                    goto LABEL_47;
                  if (*((char *)v15 + 31) < 0)
                    operator delete((void *)v15[1]);
                  v16 = v15;
                  v17 = 0x1012C404EF22A49;
                  goto LABEL_46;
                }
                break;
              case 3:
                v29 = *(unint64_t **)v11;
                do
                {
                  v30 = __ldaxr(v29);
                  v31 = v30 - 1;
                }
                while (__stlxr(v31, v29));
                if (!v31)
                {
                  v32 = *(unint64_t **)v11;
                  if (!*(_QWORD *)v11)
                    goto LABEL_47;
                  v33 = (void *)v32[1];
                  if (v33)
                  {
                    v32[2] = (unint64_t)v33;
                    operator delete(v33);
                  }
                  v16 = v32;
                  v17 = 0x1080C409938AC02;
                  goto LABEL_46;
                }
                break;
              case 4:
                v18 = *(unint64_t **)v11;
                do
                {
                  v19 = __ldaxr(v18);
                  v20 = v19 - 1;
                }
                while (__stlxr(v20, v18));
                if (!v20)
                {
                  v21 = *(unint64_t **)v11;
                  if (!*(_QWORD *)v11)
                    goto LABEL_47;
                  v55 = (void **)(v21 + 1);
                  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v55);
                  goto LABEL_39;
                }
                break;
              case 5:
                v34 = *(unint64_t **)v11;
                do
                {
                  v35 = __ldaxr(v34);
                  v36 = v35 - 1;
                }
                while (__stlxr(v36, v34));
                if (!v36)
                {
                  v21 = *(unint64_t **)v11;
                  if (!*(_QWORD *)v11)
                    goto LABEL_47;
                  v55 = (void **)(v21 + 1);
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v55);
LABEL_39:
                  v16 = v21;
                  v17 = 0x1020C405E66F15BLL;
                  goto LABEL_46;
                }
                break;
              case 8:
                v37 = *(unint64_t **)v11;
                do
                {
                  v38 = __ldaxr(v37);
                  v39 = v38 - 1;
                }
                while (__stlxr(v39, v37));
                if (!v39)
                {
                  v40 = *(unint64_t **)v11;
                  if (!*(_QWORD *)v11)
                    goto LABEL_47;
                  boost::detail::shared_count::~shared_count((unsigned int **)v40 + 2);
                  v16 = v40;
                  v28 = -235920773;
                  goto LABEL_45;
                }
                break;
              case 9:
                v22 = *(unint64_t **)v11;
                do
                {
                  v23 = __ldaxr(v22);
                  v24 = v23 - 1;
                }
                while (__stlxr(v24, v22));
                if (!v24)
                {
                  v25 = *(unint64_t **)v11;
                  if (*(_QWORD *)v11)
                  {
                    v26 = (void *)v25[6];
                    if (v26)
                    {
                      v25[7] = (unint64_t)v26;
                      operator delete(v26);
                    }
                    v27 = (void *)v25[3];
                    if (v27)
                    {
                      v25[4] = (unint64_t)v27;
                      operator delete(v27);
                    }
                    std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v25 + 1));
                    v16 = v25;
                    v28 = 2071181815;
LABEL_45:
                    v17 = v28 | 0x1030C4000000000;
LABEL_46:
                    MEMORY[0x219A19A08](v16, v17);
                  }
LABEL_47:
                  *(_QWORD *)v11 = 0;
                }
                break;
              default:
                break;
            }
            v41 = *(_QWORD *)v10;
            *(_QWORD *)(v11 + 5) = *(_QWORD *)(v10 + 5);
            *(_QWORD *)v11 = v41;
            LODWORD(v41) = *(unsigned __int8 *)(v10 + 12);
            *(_BYTE *)(v11 + 12) = v41;
            v42 = v41 > 9;
            v43 = (1 << v41) & 0x33C;
            if (!v42 && v43 != 0)
            {
              v45 = *(unint64_t **)v11;
              do
                v46 = __ldaxr(v45);
              while (__stlxr(v46 + 1, v45));
            }
          }
          ++v9;
          v8 = *a3;
        }
        while (v9 < (a3[1] - *a3) >> 3);
      }
      if (!v57)
        std::__throw_bad_function_call[abi:ne180100]();
      (*(void (**)(_QWORD *, _QWORD *))(*v57 + 48))(v57, v54);
      v6 += 3;
    }
    while (v6 != v7);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v53 + 40))(v53);
  v55 = (void **)v54;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v55);
  v47 = v61;
  if (v61 == v60)
  {
    v48 = 4;
    v47 = v60;
  }
  else
  {
    if (!v61)
      goto LABEL_62;
    v48 = 5;
  }
  (*(void (**)(void))(*v47 + 8 * v48))();
LABEL_62:
  v49 = v59;
  if (v59 == v58)
  {
    v50 = 4;
    v49 = v58;
  }
  else
  {
    if (!v59)
      goto LABEL_67;
    v50 = 5;
  }
  (*(void (**)(void))(*v49 + 8 * v50))();
LABEL_67:
  result = v57;
  if (v57 == v56)
  {
    v52 = 4;
    result = v56;
  }
  else
  {
    if (!v57)
      return result;
    v52 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v52))();
}

void sub_2182EB0A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  void **v7;
  va_list va1;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  va_arg(va2, _QWORD);
  va_copy((va_list)v7, va);
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)va1);
  turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>::~sframe_function_output_iterator((uint64_t *)va2);
  _Unwind_Resume(a1);
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<turi::sgraph_compute::`anonymous namespace'::triple_apply_impl::unload_graph_vertex_blocks(std::set<turi::sgraph::vertex_partition_address> const&)::$_0>(unsigned long,unsigned long,turi::sgraph_compute::`anonymous namespace'::triple_apply_impl::unload_graph_vertex_blocks(std::set<turi::sgraph::vertex_partition_address> const&)::$_0 const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v4;
  __int128 v5;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == ((unint64_t)"ZN4turi12parallel_forIZNS_14sgraph_compute12_GLOBAL__N_117triple_apply_impl26unl"
                                        "oad_graph_vertex_blocksERKNSt3__13setINS_6sgraph24vertex_partition_addressENS4_4"
                                        "lessIS7_EENS4_9allocatorIS7_EEEEE3$_0EEvmmRKT_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)
        || (result = strcmp((const char *)result, (const char *)((unint64_t)"ZN4turi12parallel_forIZNS_14sgraph_compute12_GLOBAL__N_117triple_apply_impl26unload_graph_vertex_blocksERKNSt3__13setINS_6sgraph24vertex_partition_addressENS4_4lessIS7_EENS4_9allocatorIS7_EEEEE3$_0EEvmmRKT_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)), !(_DWORD)result))
      {
        *(_QWORD *)a2 = v4;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
    }
  }
  else
  {
    v5 = *(_OWORD *)result;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

void boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<turi::sgraph_compute::`anonymous namespace'::triple_apply_impl::unload_graph_vertex_blocks(std::set<turi::sgraph::vertex_partition_address> const&)::$_0>(unsigned long,unsigned long,turi::sgraph_compute::`anonymous namespace'::triple_apply_impl::unload_graph_vertex_blocks(std::set<turi::sgraph::vertex_partition_address> const&)::$_0 const&)::{lambda(void)#1},void>::invoke(uint64_t *a1)
{
  unint64_t i;

  for (i = a1[1]; i < a1[2]; ++i)
}

void **turi::sgraph_compute::vertex_block<turi::sframe>::unload(uint64_t a1)
{
  void **v2;
  void **v3;
  void **result;
  void **v5;

  *(_BYTE *)(a1 + 24) = 0;
  v2 = *(void ***)a1;
  v3 = *(void ***)(a1 + 8);
  while (v3 != v2)
  {
    v3 -= 3;
    v5 = v3;
    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
  *(_QWORD *)(a1 + 8) = v2;
  result = std::vector<std::vector<turi::flexible_type>>::shrink_to_fit((void **)a1);
  if (*(_BYTE *)(a1 + 25))
  {
    result = *(void ***)(a1 + 56);
    *(_QWORD *)(a1 + 56) = 0;
    if (result)
      result = (void **)(*((uint64_t (**)(void **))*result + 1))(result);
  }
  *(_BYTE *)(a1 + 25) = 0;
  return result;
}

void **std::vector<std::vector<turi::flexible_type>>::shrink_to_fit(void **result)
{
  unint64_t v1;
  int64x2_t v2;
  int64x2_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  void *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;

  v1 = (unint64_t)*result;
  v2 = *(int64x2_t *)(result + 1);
  v3 = vshrq_n_s64(vsubq_s64(v2, vdupq_n_s64((unint64_t)*result)), 3uLL);
  v4 = 0xAAAAAAAAAAAAAAABLL * v3.i64[0];
  v5 = v4;
  if (0xAAAAAAAAAAAAAAABLL * v3.i64[1] > v4)
  {
    v6 = (uint64_t *)result;
    v7 = (uint64_t)(result + 2);
    v14 = v7;
    if (v2.i64[0] == v1)
    {
      v8 = 0;
      v9 = 0;
    }
    else
    {
      v8 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>(v7, v4);
    }
    v10 = v8;
    v11 = &v8[24 * v5];
    v12 = v11;
    v13 = &v8[24 * v9];
    std::vector<std::vector<turi::flexible_type>>::__swap_out_circular_buffer(v6, &v10);
    return std::__split_buffer<std::vector<turi::flexible_type>>::~__split_buffer(&v10);
  }
  return result;
}

void sub_2182EB2F4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x2182EB2E4);
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<turi::sgraph_compute::`anonymous namespace'::triple_apply_impl::unload_graph_vertex_blocks(std::set<turi::sgraph::vertex_partition_address> const&)::$_1>(unsigned long,unsigned long,turi::sgraph_compute::`anonymous namespace'::triple_apply_impl::unload_graph_vertex_blocks(std::set<turi::sgraph::vertex_partition_address> const&)::$_1 const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v4;
  __int128 v5;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == ((unint64_t)"ZN4turi12parallel_forIZNS_14sgraph_compute12_GLOBAL__N_117triple_apply_impl26unl"
                                        "oad_graph_vertex_blocksERKNSt3__13setINS_6sgraph24vertex_partition_addressENS4_4"
                                        "lessIS7_EENS4_9allocatorIS7_EEEEE3$_1EEvmmRKT_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)
        || (result = strcmp((const char *)result, (const char *)((unint64_t)"ZN4turi12parallel_forIZNS_14sgraph_compute12_GLOBAL__N_117triple_apply_impl26unload_graph_vertex_blocksERKNSt3__13setINS_6sgraph24vertex_partition_addressENS4_4lessIS7_EENS4_9allocatorIS7_EEEEE3$_1EEvmmRKT_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)), !(_DWORD)result))
      {
        *(_QWORD *)a2 = v4;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
    }
  }
  else
  {
    v5 = *(_OWORD *)result;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

void **boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<turi::sgraph_compute::`anonymous namespace'::triple_apply_impl::unload_graph_vertex_blocks(std::set<turi::sgraph::vertex_partition_address> const&)::$_1>(unsigned long,unsigned long,turi::sgraph_compute::`anonymous namespace'::triple_apply_impl::unload_graph_vertex_blocks(std::set<turi::sgraph::vertex_partition_address> const&)::$_1 const&)::{lambda(void)#1},void>::invoke(void **result)
{
  unint64_t v1;
  void **v2;
  uint64_t v3;

  v1 = (unint64_t)result[1];
  if (v1 < (unint64_t)result[2])
  {
    v2 = result;
    v3 = (16 * v1) | 8;
    do
    {
      result = turi::sgraph_compute::vertex_block<turi::sframe>::unload(*(_QWORD *)(*(_QWORD *)*v2 + 8) + (*(_QWORD *)(**((_QWORD **)*v2 + 1) + v3) << 6));
      ++v1;
      v3 += 16;
    }
    while (v1 < (unint64_t)v2[2]);
  }
  return result;
}

void turi::sgraph_compute::`anonymous namespace'::triple_apply_impl::load_graph_vertex_blocks(std::set<turi::sgraph::vertex_partition_address> const&)::$_0::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  void ***v3;
  void **v4;
  void **v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t **v11;
  uint64_t *v12;
  uint64_t *v13;
  unint64_t v14;
  void **p_p;
  void *__p;
  unint64_t *v17;
  char v18;
  _BYTE v19[40];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v2 = *(uint64_t **)(a1 + 8);
  v3 = (void ***)(**(_QWORD **)a1 + 16 * a2);
  v4 = v3[1];
  if (!*(_BYTE *)(v2[1] + ((_QWORD)v4 << 6) + 24))
  {
    v5 = *v3;
    v6 = *v2;
    v14 = *(_QWORD *)(*v2 + 24);
    p_p = v4;
    if (v14 <= (unint64_t)v4)
    {
      __p = &p_p;
      v17 = &v14;
      turi::sgraph::vertex_partition(unsigned long,unsigned long)::{lambda(void)#1}::operator()();
    }
    v14 = *(_QWORD *)(v6 + 32);
    p_p = v5;
    if (v14 <= (unint64_t)v5)
    {
      __p = &p_p;
      v17 = &v14;
      turi::sgraph::vertex_group(unsigned long)::{lambda(void)#1}::operator()();
    }
    turi::sframe::sframe((turi::sframe *)v19, (const turi::sframe *)(*(_QWORD *)(*(_QWORD *)(v6 + 64) + 24 * (_QWORD)v5) + 296 * (_QWORD)v4));
    if (*((_BYTE *)v2 + 104))
    {
      v7 = v2[1] + ((_QWORD)v4 << 6);
      turi::sgraph_compute::vertex_block<turi::sframe>::load_impl(v7, (uint64_t)v19);
      *(_BYTE *)(v7 + 24) = 1;
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, turi::sgraph::VID_COLUMN_NAME);
      v8 = std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(v20, v21, (unsigned __int8 **)&__p);
      if (v8 == v21)
      {
        p_p = &__p;
        turi::sframe::column_index(std::string const&)const::{lambda(void)#1}::operator()();
      }
      v9 = 0xAAAAAAAAAAAAAAABLL * ((v8 - v20) >> 3);
      if (v18 < 0)
        operator delete(__p);
      turi::sframe::remove_column((turi::sframe *)v19, v9, (uint64_t)&__p);
      turi::sframe::operator=((uint64_t)v19, (uint64_t)&__p);
      turi::sframe::~sframe((turi::sframe *)&__p);
      v10 = v2[1] + ((_QWORD)v4 << 6);
      turi::sgraph_compute::vertex_block<turi::sframe>::load_impl(v10, (uint64_t)v19);
      *(_BYTE *)(v10 + 24) = 1;
      v11 = (uint64_t **)(v2[1] + ((_QWORD)v4 << 6));
      v12 = *v11;
      v13 = v11[1];
      if (*v11 != v13)
      {
        do
        {
          std::vector<turi::flexible_type>::insert(v12, *v12 + 16 * v9, (unint64_t)&turi::FLEX_UNDEFINED);
          v12 += 3;
        }
        while (v12 != v13);
      }
    }
    turi::sframe::~sframe((turi::sframe *)v19);
  }
}

void sub_2182EB62C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52)
{
  turi::sframe::~sframe((turi::sframe *)&a52);
  _Unwind_Resume(a1);
}

uint64_t turi::sgraph_compute::vertex_block<turi::sframe>::load_impl(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  const std::string *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  unint64_t v12;
  turi::sframe_reader *v13;
  uint64_t v14;
  turi::sframe_reader *v15;
  turi::sframe_reader *v17;

  if (!*(_BYTE *)(a2 + 288))
    turi::sframe::get_index_file(void)const::{lambda(void)#1}::operator()();
  v4 = (std::string *)(a1 + 32);
  v5 = (const std::string *)(a2 + 136);
  v6 = *(unsigned __int8 *)(a1 + 55);
  if ((v6 & 0x80u) == 0)
    v7 = *(unsigned __int8 *)(a1 + 55);
  else
    v7 = *(_QWORD *)(a1 + 40);
  v8 = *(unsigned __int8 *)(a2 + 159);
  v9 = (char)v8;
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a2 + 144);
  if (v7 != v8)
    goto LABEL_20;
  if (v9 >= 0)
    v10 = (unsigned __int8 *)(a2 + 136);
  else
    v10 = (unsigned __int8 *)v5->__r_.__value_.__r.__words[0];
  if ((v6 & 0x80) != 0)
  {
    if (memcmp(v4->__r_.__value_.__l.__data_, v10, *(_QWORD *)(a1 + 40)))
      goto LABEL_20;
  }
  else if (*(_BYTE *)(a1 + 55))
  {
    v11 = (unsigned __int8 *)(a1 + 32);
    while (*v11 == *v10)
    {
      ++v11;
      ++v10;
      if (!--v6)
        goto LABEL_18;
    }
    goto LABEL_20;
  }
LABEL_18:
  if (*(_QWORD *)(a1 + 56))
  {
    v12 = *(_QWORD *)(a2 + 32);
    goto LABEL_26;
  }
LABEL_20:
  std::string::operator=(v4, v5);
  turi::sframe::get_reader((turi::sframe *)a2, &v17);
  v13 = v17;
  v17 = 0;
  v14 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v13;
  if (v14)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    v15 = v17;
    v17 = 0;
    if (v15)
      (*(void (**)(turi::sframe_reader *))(*(_QWORD *)v15 + 8))(v15);
  }
  if (*(_BYTE *)(a2 + 288))
    v12 = *(_QWORD *)(a2 + 32);
  else
    v12 = 0;
LABEL_26:
  std::vector<std::vector<turi::flexible_type>>::reserve((uint64_t *)a1, v12);
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 56) + 48))(*(_QWORD *)(a1 + 56), 0, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 40), a1);
}

void turi::sframe::get_index_file(void)const::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe.hpp", 101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"inited", 6);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe.hpp", "operator()", 309, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::sframe::get_index_file(void)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2182EB8D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<turi::sgraph_compute::`anonymous namespace'::triple_apply_impl::load_graph_vertex_blocks(std::set<turi::sgraph::vertex_partition_address> const&)::$_0>(unsigned long,unsigned long,turi::sgraph_compute::`anonymous namespace'::triple_apply_impl::load_graph_vertex_blocks(std::set<turi::sgraph::vertex_partition_address> const&)::$_0 const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v4;
  __int128 v5;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == ((unint64_t)"ZN4turi12parallel_forIZNS_14sgraph_compute12_GLOBAL__N_117triple_apply_impl24loa"
                                        "d_graph_vertex_blocksERKNSt3__13setINS_6sgraph24vertex_partition_addressENS4_4le"
                                        "ssIS7_EENS4_9allocatorIS7_EEEEE3$_0EEvmmRKT_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)
        || (result = strcmp((const char *)result, (const char *)((unint64_t)"ZN4turi12parallel_forIZNS_14sgraph_compute12_GLOBAL__N_117triple_apply_impl24load_graph_vertex_blocksERKNSt3__13setINS_6sgraph24vertex_partition_addressENS4_4lessIS7_EENS4_9allocatorIS7_EEEEE3$_0EEvmmRKT_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)), !(_DWORD)result))
      {
        *(_QWORD *)a2 = v4;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
    }
  }
  else
  {
    v5 = *(_OWORD *)result;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

void boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<turi::sgraph_compute::`anonymous namespace'::triple_apply_impl::load_graph_vertex_blocks(std::set<turi::sgraph::vertex_partition_address> const&)::$_0>(unsigned long,unsigned long,turi::sgraph_compute::`anonymous namespace'::triple_apply_impl::load_graph_vertex_blocks(std::set<turi::sgraph::vertex_partition_address> const&)::$_0 const&)::{lambda(void)#1},void>::invoke(uint64_t *a1)
{
  unint64_t i;

  for (i = a1[1]; i < a1[2]; ++i)
}

uint64_t **std::__tree<turi::sgraph::vertex_partition_address>::__assign_multi<std::__tree_const_iterator<turi::sgraph::vertex_partition_address,std::__tree_node<turi::sgraph::vertex_partition_address,void *> *,long>>(uint64_t **result, _QWORD *a2, _QWORD *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t **leaf_high;
  _QWORD *v11;
  BOOL v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t **v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;

  v5 = result;
  if (result[2])
  {
    v6 = *result;
    v7 = result[1];
    *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1])
      v8 = (uint64_t *)v6[1];
    else
      v8 = v6;
    v15 = result;
    v16 = v8;
    v17 = v8;
    if (v8)
    {
      v16 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        v9 = a2;
        do
        {
          *((_OWORD *)v8 + 2) = *((_OWORD *)v9 + 2);
          leaf_high = (uint64_t **)std::__tree<turi::sgraph::vertex_partition_address>::__find_leaf_high((uint64_t)v5, &v18, (unint64_t *)v8 + 4);
          std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(v5, v18, leaf_high, v8);
          v17 = v16;
          if (v16)
            v16 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::_DetachedTreeCache::__detach_next((uint64_t)v16);
          v11 = (_QWORD *)v9[1];
          if (v11)
          {
            do
            {
              a2 = v11;
              v11 = (_QWORD *)*v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              a2 = (_QWORD *)v9[2];
              v12 = *a2 == (_QWORD)v9;
              v9 = a2;
            }
            while (!v12);
          }
          v8 = v17;
          if (v17)
            v12 = a2 == a3;
          else
            v12 = 1;
          v9 = a2;
        }
        while (!v12);
      }
    }
    result = (uint64_t **)std::__tree<turi::sgraph::vertex_partition_address>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v15);
  }
  if (a2 != a3)
  {
    do
    {
      result = (uint64_t **)std::__tree<turi::sgraph::vertex_partition_address>::__emplace_multi<turi::sgraph::vertex_partition_address const&>(v5, (_OWORD *)a2 + 2);
      v13 = (_QWORD *)a2[1];
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (_QWORD *)a2[2];
          v12 = *v14 == (_QWORD)a2;
          a2 = v14;
        }
        while (!v12);
      }
      a2 = v14;
    }
    while (v14 != a3);
  }
  return result;
}

void sub_2182EBB9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__tree<turi::sgraph::vertex_partition_address>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::__tree<turi::sgraph::vertex_partition_address>::__find_leaf_high(uint64_t a1, _QWORD *a2, unint64_t *a3)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;

  v5 = *(_QWORD **)(a1 + 8);
  v3 = (_QWORD *)(a1 + 8);
  v4 = v5;
  if (v5)
  {
    v6 = *a3;
    do
    {
      while (1)
      {
        v3 = v4;
        v7 = v4[4];
        if (v6 >= v7 && (v6 != v7 || a3[1] >= v4[5]))
          break;
        v4 = (_QWORD *)*v4;
        v8 = v3;
        if (!*v3)
          goto LABEL_11;
      }
      v4 = (_QWORD *)v4[1];
    }
    while (v4);
    v8 = v3 + 1;
  }
  else
  {
    v8 = v3;
  }
LABEL_11:
  *a2 = v3;
  return v8;
}

uint64_t std::__tree<turi::sgraph::vertex_partition_address>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy(*(_QWORD *)a1, *(_QWORD **)(a1 + 16));
  v2 = *(_QWORD **)(a1 + 8);
  if (v2)
  {
    v3 = (_QWORD *)v2[2];
    if (v3)
    {
      do
      {
        v2 = v3;
        v3 = (_QWORD *)v3[2];
      }
      while (v3);
      *(_QWORD *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy(*(_QWORD *)a1, v2);
  }
  return a1;
}

void *std::__tree<turi::sgraph::vertex_partition_address>::__emplace_multi<turi::sgraph::vertex_partition_address const&>(uint64_t **a1, _OWORD *a2)
{
  void *v4;
  uint64_t **leaf_high;
  uint64_t v7;

  v4 = operator new(0x30uLL);
  *((_OWORD *)v4 + 2) = *a2;
  leaf_high = (uint64_t **)std::__tree<turi::sgraph::vertex_partition_address>::__find_leaf_high((uint64_t)a1, &v7, (unint64_t *)v4 + 4);
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v7, leaf_high, (uint64_t *)v4);
  return v4;
}

void sub_2182EBCCC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void turi::sgraph_compute::`anonymous namespace'::triple_apply_impl::run<turi::sgraph_compute::`anonymous namespace'::single_edge_triple_apply_visitor>(turi::sgraph_compute::`anonymous namespace'::single_edge_triple_apply_visitor)::{lambda(std::pair<unsigned long,unsigned long>)#1},std::allocator<void turi::sgraph_compute::`anonymous namespace'::triple_apply_impl::run<turi::sgraph_compute::`anonymous namespace'::single_edge_triple_apply_visitor>(turi::sgraph_compute::`anonymous namespace'::single_edge_triple_apply_visitor)::{lambda(std::pair<unsigned long,unsigned long>)#1}>,void ()(std::pair<unsigned long,unsigned long>)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

__n128 std::__function::__func<void turi::sgraph_compute::`anonymous namespace'::triple_apply_impl::run<turi::sgraph_compute::`anonymous namespace'::single_edge_triple_apply_visitor>(turi::sgraph_compute::`anonymous namespace'::single_edge_triple_apply_visitor)::{lambda(std::pair<unsigned long,unsigned long>)#1},std::allocator<void turi::sgraph_compute::`anonymous namespace'::triple_apply_impl::run<turi::sgraph_compute::`anonymous namespace'::single_edge_triple_apply_visitor>(turi::sgraph_compute::`anonymous namespace'::single_edge_triple_apply_visitor)::{lambda(std::pair<unsigned long,unsigned long>)#1}>,void ()(std::pair<unsigned long,unsigned long>)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24D937C10;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<void turi::sgraph_compute::`anonymous namespace'::triple_apply_impl::run<turi::sgraph_compute::`anonymous namespace'::single_edge_triple_apply_visitor>(turi::sgraph_compute::`anonymous namespace'::single_edge_triple_apply_visitor)::{lambda(std::pair<unsigned long,unsigned long>)#1},std::allocator<void turi::sgraph_compute::`anonymous namespace'::triple_apply_impl::run<turi::sgraph_compute::`anonymous namespace'::single_edge_triple_apply_visitor>(turi::sgraph_compute::`anonymous namespace'::single_edge_triple_apply_visitor)::{lambda(std::pair<unsigned long,unsigned long>)#1}>,void ()(std::pair<unsigned long,unsigned long>)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24D937C10;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<void turi::sgraph_compute::`anonymous namespace'::triple_apply_impl::run<turi::sgraph_compute::`anonymous namespace'::single_edge_triple_apply_visitor>(turi::sgraph_compute::`anonymous namespace'::single_edge_triple_apply_visitor)::{lambda(std::pair<unsigned long,unsigned long>)#1},std::allocator<void turi::sgraph_compute::`anonymous namespace'::triple_apply_impl::run<turi::sgraph_compute::`anonymous namespace'::single_edge_triple_apply_visitor>(turi::sgraph_compute::`anonymous namespace'::single_edge_triple_apply_visitor)::{lambda(std::pair<unsigned long,unsigned long>)#1}>,void ()(std::pair<unsigned long,unsigned long>)>::operator()(uint64_t a1, unint64_t *a2)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  turi::sframe *v6;
  uint64_t v7;
  int *v8;
  file_logger *v9;
  file_logger *started;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  turi::sgraph *v16;
  uint64_t v17;
  _QWORD *v18;
  turi::sgraph *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  const std::locale::facet *v24;
  int v25;
  int *v26;
  file_logger *v27;
  file_logger *v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  const std::locale::facet *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  int *v38;
  file_logger *v39;
  file_logger *v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  const std::locale::facet *v49;
  int *v50;
  file_logger *v51;
  file_logger *v52;
  _QWORD *v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  const std::locale::facet *v61;
  turi::sframe_reader *v62;
  _QWORD *v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  _QWORD *v71;
  _QWORD *exception;
  _QWORD v73[3];
  turi::sframe_reader *v74;
  timeval v75;
  timeval v76;
  _QWORD v77[5];
  uint64_t v78;
  _BYTE v79[24];
  _BYTE *v80;
  _BYTE v81[24];
  _BYTE *v82;
  _BYTE v83[24];
  _BYTE *v84;
  void *__p;
  void *v86;
  _BYTE v87[24];
  _BYTE *v88;
  pthread_mutex_t v89;
  pthread_cond_t v90;
  uint64_t v91;

  v91 = *MEMORY[0x24BDAC8D0];
  v4 = *a2;
  v3 = a2[1];
  v5 = *(_QWORD *)(a1 + 8);
  v6 = (turi::sframe *)turi::sgraph::edge_partition(*(turi::sgraph **)v5, *a2, v3, 0, 0);
  gettimeofday(&v75, 0);
  v7 = *(_QWORD *)(v5 + 8);
  v8 = (int *)global_logger();
  if (v8[169] > 2)
    goto LABEL_25;
  if (cppipc::must_cancel((cppipc *)v8))
    goto LABEL_102;
  v9 = (file_logger *)global_logger();
  started = file_logger::start_stream(v9, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph_triple_apply.cpp", "do_work_on_edge_partition", 316, 1);
  v11 = pthread_getspecific(*((_QWORD *)started + 74));
  if (v11 && *((_BYTE *)v11 + 280))
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11 + 2, (uint64_t)"Do work on partition ", 21);
  v12 = file_logger::operator<<<unsigned long>((uint64_t)started);
  v13 = pthread_getspecific(*(_QWORD *)(v12 + 592));
  if (v13 && *((_BYTE *)v13 + 280))
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13 + 2, (uint64_t)", ", 2);
  v14 = file_logger::operator<<<unsigned long>(v12);
  v15 = pthread_getspecific(*(_QWORD *)(v14 + 592));
  if (v15 && *((_BYTE *)v15 + 280))
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15 + 2, (uint64_t)"\nNumber of vertices: ", 21);
  v16 = *(turi::sgraph **)v5;
  v73[0] = v4;
  v76.tv_sec = *((_QWORD *)v16 + 3);
  if (v76.tv_sec <= v4)
    goto LABEL_100;
  v73[0] = 0;
  v76.tv_sec = *((_QWORD *)v16 + 4);
  if (!v76.tv_sec)
    goto LABEL_101;
  v17 = file_logger::operator<<<unsigned long>(v14);
  v18 = pthread_getspecific(*(_QWORD *)(v17 + 592));
  if (v18 && *((_BYTE *)v18 + 280))
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18 + 2, (uint64_t)", ", 2);
  v19 = *(turi::sgraph **)v5;
  v73[0] = v3;
  v76.tv_sec = *((_QWORD *)v19 + 3);
  if (v76.tv_sec <= v3)
  {
LABEL_100:
    v89.__sig = (uint64_t)v73;
    *(_QWORD *)v89.__opaque = &v76;
    turi::sgraph::vertex_partition(unsigned long,unsigned long)::{lambda(void)#1}::operator()();
  }
  v73[0] = 0;
  v76.tv_sec = *((_QWORD *)v19 + 4);
  if (!v76.tv_sec)
  {
LABEL_101:
    v89.__sig = (uint64_t)v73;
    *(_QWORD *)v89.__opaque = &v76;
    turi::sgraph::vertex_group(unsigned long)::{lambda(void)#1}::operator()();
  }
  v20 = file_logger::operator<<<unsigned long>(v17);
  v21 = pthread_getspecific(*(_QWORD *)(v20 + 592));
  if (v21 && *((_BYTE *)v21 + 280))
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21 + 2, (uint64_t)"\nNumber of edges: ", 18);
  v22 = file_logger::operator<<<unsigned long>(v20);
  v23 = pthread_getspecific(*(_QWORD *)(v22 + 592));
  if (v23)
  {
    if (*((_BYTE *)v23 + 280))
    {
      std::ios_base::getloc((const std::ios_base *)((char *)v23 + *(_QWORD *)(v23[2] - 24) + 16));
      v24 = std::locale::use_facet((const std::locale *)&v89, MEMORY[0x24BEDB350]);
      ((void (*)(const std::locale::facet *, uint64_t))v24->__vftable[2].~facet_0)(v24, 10);
      std::locale::~locale((std::locale *)&v89);
      std::ostream::put();
      std::ostream::flush();
      file_logger::stream_flush((file_logger *)v22);
      if (*(_DWORD *)(v22 + 600) == 7)
      {
LABEL_105:
        __print_back_trace();
        exception = __cxa_allocate_exception(8uLL);
        *exception = "LOG_FATAL encountered";
        __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
      }
    }
  }
LABEL_25:
  gettimeofday(&v75, 0);
  v26 = (int *)global_logger();
  if (v26[169] > 2)
    goto LABEL_36;
  if (cppipc::must_cancel((cppipc *)v26))
LABEL_102:
    log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
  v27 = (file_logger *)global_logger();
  v28 = file_logger::start_stream(v27, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph_triple_apply.cpp", "do_work_on_edge_partition", 329, 1);
  v29 = pthread_getspecific(*((_QWORD *)v28 + 74));
  if (v29 && *((_BYTE *)v29 + 280))
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29 + 2, (uint64_t)"Setup visitor in ", 17);
  gettimeofday((timeval *)&v89, 0);
  v30 = file_logger::operator<<<double>((uint64_t)v28);
  v31 = pthread_getspecific(*(_QWORD *)(v30 + 592));
  if (v31 && *((_BYTE *)v31 + 280))
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31 + 2, (uint64_t)" secs", 5);
  v26 = (int *)pthread_getspecific(*(_QWORD *)(v30 + 592));
  if (v26)
  {
    if (*((_BYTE *)v26 + 280))
    {
      std::ios_base::getloc((const std::ios_base *)((char *)v26 + *(_QWORD *)(*((_QWORD *)v26 + 2) - 24) + 16));
      v32 = std::locale::use_facet((const std::locale *)&v89, MEMORY[0x24BEDB350]);
      ((void (*)(const std::locale::facet *, uint64_t))v32->__vftable[2].~facet_0)(v32, 10);
      std::locale::~locale((std::locale *)&v89);
      std::ostream::put();
      std::ostream::flush();
      file_logger::stream_flush((file_logger *)v30);
      if (*(_DWORD *)(v30 + 600) == 7)
        goto LABEL_105;
    }
  }
LABEL_36:
  v33 = turi::thread::cpu_count((turi::thread *)v26);
  turi::cancellable_barrier::cancellable_barrier((turi::cancellable_barrier *)&v89, v33);
  gettimeofday(&v75, 0);
  turi::sframe::get_reader(v6, &v74);
  v34 = 0;
  v35 = *((_QWORD *)v74 + 5);
  memset(v73, 0, sizeof(v73));
  while (1)
  {
    v36 = v35 - v34;
    if (v35 <= v34)
      break;
    if (v36 >= turi::SGRAPH_TRIPLE_APPLY_EDGE_BATCH_SIZE)
      v36 = turi::SGRAPH_TRIPLE_APPLY_EDGE_BATCH_SIZE;
    v37 = v36 + v34;
    (*(void (**)(turi::sframe_reader *))(*(_QWORD *)v74 + 48))(v74);
    v34 = v37;
  }
  v38 = (int *)global_logger();
  if (v38[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v38))
      goto LABEL_103;
    v39 = (file_logger *)global_logger();
    v40 = file_logger::start_stream(v39, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph_triple_apply.cpp", "do_work_on_edge_partition", 346, 1);
    v41 = pthread_getspecific(*((_QWORD *)v40 + 74));
    if (v41 && *((_BYTE *)v41 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41 + 2, (uint64_t)"Finish working on partition ", 28);
    v42 = file_logger::operator<<<unsigned long>((uint64_t)v40);
    v43 = pthread_getspecific(*(_QWORD *)(v42 + 592));
    if (v43 && *((_BYTE *)v43 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43 + 2, (uint64_t)", ", 2);
    v44 = file_logger::operator<<<unsigned long>(v42);
    v45 = pthread_getspecific(*(_QWORD *)(v44 + 592));
    if (v45 && *((_BYTE *)v45 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45 + 2, (uint64_t)" in ", 4);
    gettimeofday(&v76, 0);
    v46 = file_logger::operator<<<double>(v44);
    v47 = pthread_getspecific(*(_QWORD *)(v46 + 592));
    if (v47 && *((_BYTE *)v47 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47 + 2, (uint64_t)" secs", 5);
    v48 = pthread_getspecific(*(_QWORD *)(v46 + 592));
    if (v48)
    {
      if (*((_BYTE *)v48 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v48 + *(_QWORD *)(v48[2] - 24) + 16));
        v49 = std::locale::use_facet((const std::locale *)&v76, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v49->__vftable[2].~facet_0)(v49, 10);
        std::locale::~locale((std::locale *)&v76);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush((file_logger *)v46);
        if (*(_DWORD *)(v46 + 600) == 7)
        {
LABEL_104:
          __print_back_trace();
          v71 = __cxa_allocate_exception(8uLL);
          *v71 = "LOG_FATAL encountered";
          __cxa_throw(v71, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  gettimeofday(&v75, 0);
  v50 = (int *)global_logger();
  if (v50[169] > 2)
    goto LABEL_75;
  if (cppipc::must_cancel((cppipc *)v50))
LABEL_103:
    log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
  v51 = (file_logger *)global_logger();
  v52 = file_logger::start_stream(v51, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sgraph_data/sgraph_triple_apply.cpp", "do_work_on_edge_partition", 354, 1);
  v53 = pthread_getspecific(*((_QWORD *)v52 + 74));
  if (v53 && *((_BYTE *)v53 + 280))
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53 + 2, (uint64_t)"Finalize working on partition ", 30);
  v54 = file_logger::operator<<<unsigned long>((uint64_t)v52);
  v55 = pthread_getspecific(*(_QWORD *)(v54 + 592));
  if (v55 && *((_BYTE *)v55 + 280))
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55 + 2, (uint64_t)", ", 2);
  v56 = file_logger::operator<<<unsigned long>(v54);
  v57 = pthread_getspecific(*(_QWORD *)(v56 + 592));
  if (v57 && *((_BYTE *)v57 + 280))
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57 + 2, (uint64_t)" in ", 4);
  gettimeofday(&v76, 0);
  v58 = file_logger::operator<<<double>(v56);
  v59 = pthread_getspecific(*(_QWORD *)(v58 + 592));
  if (v59 && *((_BYTE *)v59 + 280))
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59 + 2, (uint64_t)" secs", 5);
  v60 = pthread_getspecific(*(_QWORD *)(v58 + 592));
  if (v60)
  {
    if (*((_BYTE *)v60 + 280))
    {
      std::ios_base::getloc((const std::ios_base *)((char *)v60 + *(_QWORD *)(v60[2] - 24) + 16));
      v61 = std::locale::use_facet((const std::locale *)&v76, MEMORY[0x24BEDB350]);
      ((void (*)(const std::locale::facet *, uint64_t))v61->__vftable[2].~facet_0)(v61, 10);
      std::locale::~locale((std::locale *)&v76);
      std::ostream::put();
      std::ostream::flush();
      file_logger::stream_flush((file_logger *)v58);
      if (*(_DWORD *)(v58 + 600) == 7)
        goto LABEL_104;
    }
  }
LABEL_75:
  v76.tv_sec = (__darwin_time_t)v73;
  std::vector<std::vector<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v76);
  v62 = v74;
  v74 = 0;
  if (v62)
    (*(void (**)(turi::sframe_reader *))(*(_QWORD *)v62 + 8))(v62);
  turi::conditional::~conditional(&v90);
  turi::mutex::~mutex(&v89);
  v77[0] = &off_24D937AD0;
  v63 = v88;
  if (v88 == v87)
  {
    v64 = 4;
    v63 = v87;
  }
  else
  {
    if (!v88)
      goto LABEL_82;
    v64 = 5;
  }
  (*(void (**)(void))(*v63 + 8 * v64))();
LABEL_82:
  if (__p)
  {
    v86 = __p;
    operator delete(__p);
  }
  v65 = v84;
  if (v84 == v83)
  {
    v66 = 4;
    v65 = v83;
  }
  else
  {
    if (!v84)
      goto LABEL_89;
    v66 = 5;
  }
  (*(void (**)(void))(*v65 + 8 * v66))();
LABEL_89:
  v67 = v82;
  if (v82 == v81)
  {
    v68 = 4;
    v67 = v81;
  }
  else
  {
    if (!v82)
      goto LABEL_94;
    v68 = 5;
  }
  (*(void (**)(void))(*v67 + 8 * v68))();
LABEL_94:
  v69 = v80;
  if (v80 == v79)
  {
    v70 = 4;
    v69 = v79;
    goto LABEL_98;
  }
  if (v80)
  {
    v70 = 5;
LABEL_98:
    (*(void (**)(void))(*v69 + 8 * v70))();
  }
  turi::sframe::~sframe((turi::sframe *)&v78);
}

void sub_2182EC814(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::locale a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a64;
  uint64_t a65;
  uint64_t a68;
  uint64_t a69;
  uint64_t a72;
  uint64_t v72;
  unint64_t *v74;
  uint64_t v75;
  void *v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;

  std::locale::~locale((std::locale *)(v72 - 224));
  v74 = (unint64_t *)STACK[0x240];
  if ((unint64_t *)STACK[0x240] == &STACK[0x228])
  {
    v75 = 4;
    v74 = &STACK[0x228];
  }
  else
  {
    if (!v74)
      goto LABEL_6;
    v75 = 5;
  }
  (*(void (**)(void))(*v74 + 8 * v75))();
LABEL_6:
  v76 = (void *)STACK[0x200];
  if (STACK[0x200])
  {
    STACK[0x208] = (unint64_t)v76;
    operator delete(v76);
  }
  v77 = (uint64_t *)a72;
  if ((uint64_t *)a72 == &a69)
  {
    v78 = 4;
    v77 = &a69;
  }
  else
  {
    if (!a72)
      goto LABEL_13;
    v78 = 5;
  }
  (*(void (**)(void))(*v77 + 8 * v78))();
LABEL_13:
  v79 = (uint64_t *)a68;
  if ((uint64_t *)a68 == &a65)
  {
    v80 = 4;
    v79 = &a65;
  }
  else
  {
    if (!a68)
      goto LABEL_18;
    v80 = 5;
  }
  (*(void (**)(void))(*v79 + 8 * v80))();
LABEL_18:
  v81 = (uint64_t *)a64;
  if ((uint64_t *)a64 == &a61)
  {
    v82 = 4;
    v81 = &a61;
  }
  else
  {
    if (!a64)
      goto LABEL_23;
    v82 = 5;
  }
  (*(void (**)(void))(*v81 + 8 * v82))();
LABEL_23:
  turi::sframe::~sframe((turi::sframe *)&a24);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void turi::sgraph_compute::`anonymous namespace'::triple_apply_impl::run<turi::sgraph_compute::`anonymous namespace'::single_edge_triple_apply_visitor>(turi::sgraph_compute::`anonymous namespace'::single_edge_triple_apply_visitor)::{lambda(std::pair<unsigned long,unsigned long>)#1},std::allocator<void turi::sgraph_compute::`anonymous namespace'::triple_apply_impl::run<turi::sgraph_compute::`anonymous namespace'::single_edge_triple_apply_visitor>(turi::sgraph_compute::`anonymous namespace'::single_edge_triple_apply_visitor)::{lambda(std::pair<unsigned long,unsigned long>)#1}>,void ()(std::pair<unsigned long,unsigned long>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void turi::sgraph_compute::`anonymous namespace'::triple_apply_impl::run<turi::sgraph_compute::`anonymous namespace'::single_edge_triple_apply_visitor>(turi::sgraph_compute::`anonymous namespace'::single_edge_triple_apply_visitor)::{lambda(std::pair<unsigned long,unsigned long>)#1},std::allocator<void turi::sgraph_compute::`anonymous namespace'::triple_apply_impl::run<turi::sgraph_compute::`anonymous namespace'::single_edge_triple_apply_visitor>(turi::sgraph_compute::`anonymous namespace'::single_edge_triple_apply_visitor)::{lambda(std::pair<unsigned long,unsigned long>)#1}>,void ()(std::pair<unsigned long,unsigned long>)>::target_type()
{
}

turi::cancellable_barrier *turi::cancellable_barrier::cancellable_barrier(turi::cancellable_barrier *this, uint64_t a2)
{
  int v4;

  v4 = pthread_mutex_init((pthread_mutex_t *)this, 0);
  assert_msg(v4 == 0, "Mutex create error %d", v4);
  turi::conditional::conditional((pthread_cond_t *)((char *)this + 64));
  *((_QWORD *)this + 14) = a2;
  *((_QWORD *)this + 15) = 0;
  *((_WORD *)this + 64) = 256;
  *((_BYTE *)this + 130) = 1;
  return this;
}

void sub_2182ECA48(_Unwind_Exception *a1)
{
  pthread_mutex_t *v1;

  turi::mutex::~mutex(v1);
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_4_12()
{
  int v0;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, "Mutex create error %d", v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_sgraph_triple_apply_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void boost::throw_exception<boost::lock_error>(uint64_t a1)
{
  void *exception;
  _BYTE v3[96];

  exception = __cxa_allocate_exception(0x68uLL);
  boost::exception_detail::error_info_injector<boost::lock_error>::error_info_injector((uint64_t)v3, a1);
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::lock_error>>::clone_impl((uint64_t)exception, (uint64_t)v3);
}

void sub_2182ECBA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::runtime_error a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16)
{
  void *v16;
  int v17;

  a15 = &unk_24D918C48;
  if (a16 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a16 + 32))(a16))
    a16 = 0;
  boost::system::system_error::~system_error(&a9);
  if (v17)
    __cxa_free_exception(v16);
  _Unwind_Resume(a1);
}

std::runtime_error *boost::lock_error::lock_error(boost::lock_error *this, unsigned int a2, const char *a3)
{
  uint64_t *v6;
  std::runtime_error *result;

  v6 = boost::system::detail::generic_category_ncx(this);
  result = std::runtime_error::runtime_error((std::runtime_error *)this, a3);
  *((_QWORD *)this + 2) = a2;
  *((_QWORD *)this + 3) = v6;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 4) = 0;
  *(_QWORD *)this = &unk_24D937E20;
  return result;
}

void boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::lock_error>>::~clone_impl(uint64_t a1)
{
  *(_QWORD *)(a1 + 56) = &unk_24D918C48;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 64));
  boost::system::system_error::~system_error((std::runtime_error *)a1);
}

{
  *(_QWORD *)(a1 + 56) = &unk_24D918C48;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 64));
  boost::system::system_error::~system_error((std::runtime_error *)a1);
  JUMPOUT(0x219A19A08);
}

uint64_t boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::lock_error>>::clone_impl(uint64_t a1, uint64_t a2)
{
  std::runtime_error *v4;
  std::string *v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;

  *(_QWORD *)(a1 + 96) = &unk_24D918BA8;
  v4 = std::runtime_error::runtime_error((std::runtime_error *)a1, (const std::runtime_error *)a2);
  v4->__vftable = (std::runtime_error_vtbl *)&unk_24D921E98;
  v4[1] = *(std::runtime_error *)(a2 + 16);
  v5 = (std::string *)&v4[2];
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 32), *(_QWORD *)(a2 + 40));
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 32);
    v5->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 48);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  *(_QWORD *)a1 = &unk_24D937E20;
  *(_QWORD *)(a1 + 56) = &unk_24D918C48;
  v7 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 64) = v7;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7);
  v8 = *(_OWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 72) = v8;
  *(_QWORD *)a1 = &unk_24D937D38;
  *(_QWORD *)(a1 + 56) = &unk_24D937D70;
  *(_QWORD *)(a1 + 96) = &unk_24D937DA8;
  boost::exception_detail::copy_boost_exception(a1 + 56, a2 + 56);
  return a1;
}

{
  std::runtime_error *v4;
  std::string *v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;

  *(_QWORD *)(a1 + 96) = &unk_24D918BA8;
  v4 = std::runtime_error::runtime_error((std::runtime_error *)a1, (const std::runtime_error *)a2);
  v4->__vftable = (std::runtime_error_vtbl *)&unk_24D921E98;
  v4[1] = *(std::runtime_error *)(a2 + 16);
  v5 = (std::string *)&v4[2];
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 32), *(_QWORD *)(a2 + 40));
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 32);
    v5->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 48);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  *(_QWORD *)a1 = &unk_24D937E20;
  v7 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = &unk_24D918C48;
  *(_QWORD *)(a1 + 64) = v7;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7);
  v8 = *(_OWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 72) = v8;
  *(_QWORD *)a1 = &unk_24D937D38;
  *(_QWORD *)(a1 + 56) = &unk_24D937D70;
  *(_QWORD *)(a1 + 96) = &unk_24D937DA8;
  return a1;
}

void sub_2182ECDA4(_Unwind_Exception *a1)
{
  std::runtime_error *v1;

  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

char *boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::lock_error>>::clone(uint64_t a1)
{
  _QWORD *v2;

  v2 = (_QWORD *)operator new();
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::lock_error>>::clone_impl((uint64_t)v2, a1);
  return (char *)v2 + *(_QWORD *)(*v2 - 24);
}

void sub_2182ECE78(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10F3C403E1ED767);
  _Unwind_Resume(a1);
}

void boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::lock_error>>::rethrow(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x68uLL);
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::lock_error>>::clone_impl((uint64_t)exception, a1);
}

void sub_2182ECED8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::lock_error>>::~clone_impl(_QWORD *a1)
{
  std::runtime_error *v1;

  v1 = (std::runtime_error *)(a1 - 7);
  *a1 = &unk_24D918C48;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  boost::system::system_error::~system_error(v1);
}

void `non-virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::lock_error>>::~clone_impl(uint64_t a1)
{
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::lock_error>>::~clone_impl(a1 - 56);
}

char *`virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::lock_error>>::clone(_QWORD *a1)
{
  return boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::lock_error>>::clone((uint64_t)a1 + *(_QWORD *)(*a1 - 24));
}

void `virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::lock_error>>::rethrow(_QWORD *a1)
{
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::lock_error>>::rethrow((uint64_t)a1 + *(_QWORD *)(*a1 - 32));
}

void `virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::lock_error>>::~clone_impl(_QWORD *a1)
{
  char *v1;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 40);
  *((_QWORD *)v1 + 7) = &unk_24D918C48;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)v1 + 8);
  boost::system::system_error::~system_error((std::runtime_error *)v1);
}

{
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::lock_error>>::~clone_impl((uint64_t)a1 + *(_QWORD *)(*a1 - 40));
}

void boost::exception_detail::error_info_injector<boost::lock_error>::~error_info_injector(uint64_t a1)
{
  *(_QWORD *)(a1 + 56) = &unk_24D918C48;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 64));
  boost::system::system_error::~system_error((std::runtime_error *)a1);
  JUMPOUT(0x219A19A08);
}

void `non-virtual thunk to'boost::exception_detail::error_info_injector<boost::lock_error>::~error_info_injector(uint64_t a1)
{
  boost::exception_detail::error_info_injector<boost::lock_error>::~error_info_injector(a1 - 56);
}

void sub_2182ED0CC(_Unwind_Exception *a1)
{
  std::runtime_error *v1;

  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::exception_detail::error_info_injector<boost::lock_error>::error_info_injector(uint64_t a1, uint64_t a2)
{
  std::runtime_error *v4;
  std::string *v5;
  __int128 v6;

  v4 = std::runtime_error::runtime_error((std::runtime_error *)a1, (const std::runtime_error *)a2);
  v4->__vftable = (std::runtime_error_vtbl *)&unk_24D921E98;
  v4[1] = *(std::runtime_error *)(a2 + 16);
  v5 = (std::string *)&v4[2];
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 32), *(_QWORD *)(a2 + 40));
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 32);
    v5->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 48);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = -1;
  *(_QWORD *)a1 = &unk_24D937DD8;
  *(_QWORD *)(a1 + 56) = &unk_24D937E00;
  *(_QWORD *)(a1 + 64) = 0;
  return a1;
}

void sub_2182ED180(_Unwind_Exception *a1)
{
  std::runtime_error *v1;

  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

void std::__list_imp<std::string>::clear(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  if (a1[2])
  {
    v3 = *a1;
    v2 = a1[1];
    v4 = *(_QWORD **)v2;
    v4[1] = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v3 + 8) = v4;
    a1[2] = 0;
    while ((_QWORD *)v2 != a1)
    {
      v5 = *(_QWORD *)(v2 + 8);
      std::__list_imp<std::string>::__delete_node[abi:ne180100]<>((int)a1, (void **)v2);
      v2 = v5;
    }
  }
}

void std::__list_imp<std::string>::__delete_node[abi:ne180100]<>(int a1, void **__p)
{
  if (*((char *)__p + 39) < 0)
    operator delete(__p[2]);
  operator delete(__p);
}

void boost::throw_exception<std::runtime_error>(const std::runtime_error *a1)
{
  void *exception;
  std::runtime_error v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  exception = __cxa_allocate_exception(0x40uLL);
  std::runtime_error::runtime_error(&v3, a1);
  v5 = 0;
  v6 = 0;
  v7 = 0;
  v8 = -1;
  v3.__vftable = (std::runtime_error_vtbl *)&unk_24D937F60;
  v4 = &unk_24D937F88;
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)exception, (uint64_t)&v3);
}

void sub_2182ED2AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, void *a11, uint64_t a12)
{
  void *v12;
  int v13;

  a11 = &unk_24D918C48;
  if (a12 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a12 + 32))(a12))
    a12 = 0;
  std::runtime_error::~runtime_error(&a10);
  if (v13)
    __cxa_free_exception(v12);
  _Unwind_Resume(a1);
}

uint64_t boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)(a1 + 56) = &unk_24D918BA8;
  std::runtime_error::runtime_error((std::runtime_error *)a1, (const std::runtime_error *)a2);
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 16) = &unk_24D918C48;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v5;
  *(_QWORD *)a1 = &unk_24D937EC0;
  *(_QWORD *)(a1 + 16) = &unk_24D937EF8;
  *(_QWORD *)(a1 + 56) = &unk_24D937F30;
  boost::exception_detail::copy_boost_exception(a1 + 16, a2 + 16);
  return a1;
}

{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)(a1 + 56) = &unk_24D918BA8;
  std::runtime_error::runtime_error((std::runtime_error *)a1, (const std::runtime_error *)a2);
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = &unk_24D918C48;
  *(_QWORD *)(a1 + 24) = v4;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v5;
  *(_QWORD *)a1 = &unk_24D937EC0;
  *(_QWORD *)(a1 + 16) = &unk_24D937EF8;
  *(_QWORD *)(a1 + 56) = &unk_24D937F30;
  return a1;
}

void sub_2182ED3B4(_Unwind_Exception *a1)
{
  std::runtime_error *v1;

  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

char *boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone(uint64_t a1)
{
  _QWORD *v2;

  v2 = (_QWORD *)operator new();
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v2, a1);
  return (char *)v2 + *(_QWORD *)(*v2 - 24);
}

void sub_2182ED42C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10F1C40311038C2);
  _Unwind_Resume(a1);
}

void boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::rethrow(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x40uLL);
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)exception, a1);
}

void sub_2182ED48C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *`virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone(_QWORD *a1)
{
  return boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone((uint64_t)a1 + *(_QWORD *)(*a1 - 24));
}

void `virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::rethrow(_QWORD *a1)
{
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::rethrow((uint64_t)a1 + *(_QWORD *)(*a1 - 32));
}

void sub_2182ED54C(_Unwind_Exception *a1)
{
  std::runtime_error *v1;

  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__value_func<void ()(std::string)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_2182ED6C8(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

uint64_t _GLOBAL__sub_I_comm_client_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

uint64_t file_logger::operator<<<char *>(uint64_t a1, const char *a2)
{
  char *v4;
  _QWORD *v5;
  size_t v6;

  v4 = (char *)pthread_getspecific(*(_QWORD *)(a1 + 592));
  if (v4 && v4[280])
  {
    v5 = v4 + 16;
    v6 = strlen(a2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)a2, v6);
  }
  return a1;
}

uint64_t _GLOBAL__sub_I_console_cancel_handler_unix_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

uint64_t _GLOBAL__sub_I_ipc_deserializer_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

uint64_t _GLOBAL__sub_I_message_types_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

uint64_t _GLOBAL__sub_I_object_factory_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void turi::TuriException::~TuriException(std::exception *this)
{
  this->__vftable = (std::exception_vtbl *)&off_24D937FA8;
  if (SHIBYTE(this[7].__vftable) < 0)
    operator delete(this[5].__vftable);
  if (SHIBYTE(this[4].__vftable) < 0)
    operator delete(this[2].__vftable);
  std::exception::~exception(this);
}

{
  turi::TuriException::~TuriException(this);
  JUMPOUT(0x219A19A08);
}

uint64_t turi::TuriException::TuriException(uint64_t a1, int a2, __int128 *a3)
{
  __int128 v4;
  std::string *v5;
  uint64_t v6;
  void **v7;
  std::string::size_type v8;
  void *__p[2];
  unsigned __int8 v11;

  *(_QWORD *)a1 = &off_24D937FA8;
  *(_DWORD *)(a1 + 8) = a2;
  v4 = *a3;
  *(_QWORD *)(a1 + 32) = *((_QWORD *)a3 + 2);
  *(_OWORD *)(a1 + 16) = v4;
  *((_QWORD *)a3 + 1) = 0;
  *((_QWORD *)a3 + 2) = 0;
  *(_QWORD *)a3 = 0;
  v5 = (std::string *)(a1 + 40);
  turi::ErrorCodeToString(*(_DWORD *)(a1 + 8), (_QWORD *)(a1 + 40));
  v6 = *(unsigned __int8 *)(a1 + 39);
  if ((v6 & 0x80u) != 0)
    v6 = *(_QWORD *)(a1 + 24);
  if (v6)
  {
    std::operator+<char>();
    if ((v11 & 0x80u) == 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    if ((v11 & 0x80u) == 0)
      v8 = v11;
    else
      v8 = (std::string::size_type)__p[1];
    std::string::append(v5, (const std::string::value_type *)v7, v8);
    if ((char)v11 < 0)
      operator delete(__p[0]);
  }
  return a1;
}

void sub_2182ED99C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  void **v16;
  void **v17;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v15 + 63) < 0)
    operator delete(*v17);
  if (*(char *)(v15 + 39) < 0)
    operator delete(*v16);
  std::exception::~exception((std::exception *)v15);
  _Unwind_Resume(a1);
}

uint64_t turi::TuriException::TuriException(uint64_t a1, int a2)
{
  __int128 __p;
  uint64_t v5;

  __p = 0uLL;
  v5 = 0;
  turi::TuriException::TuriException(a1, a2, &__p);
  if (SHIBYTE(v5) < 0)
    operator delete((void *)__p);
  return a1;
}

void sub_2182EDA38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t turi::TuriException::what(turi::TuriException *this)
{
  uint64_t result;

  result = (uint64_t)this + 40;
  if (*((char *)this + 63) < 0)
    return *(_QWORD *)result;
  return result;
}

uint64_t _GLOBAL__sub_I_TuriException_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void CoreML::validate<(MLModelType)2001>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL4 v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  __int128 *v18;
  __int128 v19;
  const void **v20;
  char v21;
  void *v22;
  size_t v23;
  std::string::size_type size;
  std::string *v25;
  size_t v26;
  _BOOL4 v27;
  _QWORD *v28;
  const void **v29;
  int v30;
  size_t v31;
  const void **v32;
  size_t v33;
  _BOOL4 v34;
  int v35;
  const void **v36;
  size_t v37;
  size_t v38;
  _BOOL4 v39;
  int v40;
  const void **v41;
  size_t v42;
  size_t v43;
  BOOL v44;
  _BOOL4 v45;
  BOOL v46;
  _DWORD *v47;
  int v48;
  _DWORD *v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t *v52;
  void *v53;
  std::string *v54;
  __int128 v55;
  std::string *v56;
  __int128 v57;
  uint64_t *v58;
  uint64_t *v59;
  _QWORD *v60;
  uint64_t v61;
  const char *v62;
  size_t v63;
  _QWORD *v64;
  _QWORD *v65;
  std::string *v66;
  std::string::size_type v67;
  _QWORD *v68;
  _DWORD *v69;
  uint64_t *v70;
  uint64_t *v71;
  _QWORD *v72;
  uint64_t v73;
  const char *v74;
  uint64_t *v75;
  uint64_t *v76;
  _QWORD *v77;
  uint64_t v78;
  const char *v79;
  size_t v80;
  _QWORD *v81;
  _QWORD *v82;
  std::string *v83;
  std::string::size_type v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  const char *v90;
  size_t v91;
  _QWORD *v92;
  _QWORD *v93;
  std::string *v94;
  std::string::size_type v95;
  _QWORD *v96;
  size_t v97;
  _QWORD *v98;
  _QWORD *v99;
  std::string *v100;
  std::string::size_type v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  _DWORD *v105;
  uint64_t *v106;
  int v107;
  int v108;
  int v109;
  std::string v110;
  uint64_t v111;
  std::string v112;
  uint64_t v113;
  std::string v114;

  if (*(_QWORD *)(a1 + 16))
    v3 = *(uint64_t **)(a1 + 16);
  else
    v3 = &CoreML::Specification::_ModelDescription_default_instance_;
  if (*(_DWORD *)(a1 + 44) != 2001)
  {
    std::string::basic_string[abi:ne180100]<0>(&v110, "Model not a word tagger.");
    CoreML::Result::Result(a2, 13);
LABEL_91:
    if ((SHIBYTE(v110.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
    v53 = (void *)v110.__r_.__value_.__r.__words[0];
    goto LABEL_93;
  }
  v4 = *(_QWORD **)(a1 + 32);
  v5 = v4[4];
  if (*(char *)(v5 + 23) < 0)
    v6 = *(_QWORD *)(v5 + 8);
  else
    v6 = *(unsigned __int8 *)(v5 + 23);
  v7 = v6 != 0;
  v8 = v4[3];
  if (*(char *)(v8 + 23) < 0)
    v9 = *(_QWORD *)(v8 + 8);
  else
    v9 = *(unsigned __int8 *)(v8 + 23);
  if (v6)
    v10 = 2;
  else
    v10 = 1;
  if (!v9)
    v10 = v7;
  v11 = v4[5];
  if (*(char *)(v11 + 23) < 0)
    v12 = *(_QWORD *)(v11 + 8);
  else
    v12 = *(unsigned __int8 *)(v11 + 23);
  if (v12)
    ++v10;
  v13 = v4[6];
  if (*(char *)(v13 + 23) < 0)
    v14 = *(_QWORD *)(v13 + 8);
  else
    v14 = *(unsigned __int8 *)(v13 + 23);
  if (v14)
    ++v10;
  if (*((_DWORD *)v3 + 12) != v10)
  {
    std::string::basic_string[abi:ne180100]<0>(&v110, "More model output features than the output features of the word tagger model.");
    CoreML::Result::Result(a2, 9);
    goto LABEL_91;
  }
  if (v10)
  {
    v15 = 0;
    v104 = (uint64_t)(v3 + 2);
    v105 = a2;
    v103 = (uint64_t)(v3 + 5);
    v16 = -1;
    v108 = -1;
    v109 = -1;
    v17 = -1;
    v106 = v3;
    do
    {
      v18 = *(__int128 **)(*(_QWORD *)(v3[7] + 8 * v15 + 8) + 16);
      if (*((char *)v18 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v110, *(const std::string::value_type **)v18, *((_QWORD *)v18 + 1));
      }
      else
      {
        v19 = *v18;
        v110.__r_.__value_.__r.__words[2] = *((_QWORD *)v18 + 2);
        *(_OWORD *)&v110.__r_.__value_.__l.__data_ = v19;
      }
      v20 = (const void **)v4[3];
      v21 = HIBYTE(v110.__r_.__value_.__r.__words[2]);
      v22 = (void *)v110.__r_.__value_.__r.__words[0];
      v107 = v17;
      if (*((char *)v20 + 23) < 0)
      {
        v20 = (const void **)*v20;
        v23 = *(_QWORD *)(v4[3] + 8);
      }
      else
      {
        v23 = *((unsigned __int8 *)v20 + 23);
      }
      if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v110.__r_.__value_.__r.__words[2]);
      else
        size = v110.__r_.__value_.__l.__size_;
      if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v25 = &v110;
      else
        v25 = (std::string *)v110.__r_.__value_.__r.__words[0];
      if (size >= v23)
        v26 = v23;
      else
        v26 = size;
      v27 = memcmp(v20, v25, v26) == 0 && size == v23;
      if (v27)
        v16 = v15;
      v28 = v4;
      v29 = (const void **)v4[4];
      v30 = v16;
      if (*((char *)v29 + 23) < 0)
      {
        v32 = v29;
        v29 = (const void **)*v29;
        v31 = (size_t)v32[1];
      }
      else
      {
        v31 = *((unsigned __int8 *)v29 + 23);
      }
      if (size >= v31)
        v33 = v31;
      else
        v33 = size;
      v34 = memcmp(v29, v25, v33) == 0 && size == v31;
      v35 = v109;
      if (v34)
        v35 = v15;
      v109 = v35;
      v36 = (const void **)v28[5];
      if (*((char *)v36 + 23) < 0)
      {
        v36 = (const void **)*v36;
        v37 = *(_QWORD *)(v28[5] + 8);
      }
      else
      {
        v37 = *((unsigned __int8 *)v36 + 23);
      }
      if (size >= v37)
        v38 = v37;
      else
        v38 = size;
      v39 = memcmp(v36, v25, v38) == 0 && size == v37;
      v40 = v108;
      if (v39)
        v40 = v15;
      v108 = v40;
      v41 = (const void **)v28[6];
      if (*((char *)v41 + 23) < 0)
      {
        v41 = (const void **)*v41;
        v42 = *(_QWORD *)(v28[6] + 8);
      }
      else
      {
        v42 = *((unsigned __int8 *)v41 + 23);
      }
      if (size >= v42)
        v43 = v42;
      else
        v43 = size;
      v45 = memcmp(v41, v25, v43) == 0 && size == v42;
      v44 = !v45;
      v46 = v45 || v39 || v34 || v27;
      v17 = v107;
      if (!v44)
        v17 = v15;
      if (!v46)
      {
        std::operator+<char>();
        v56 = std::string::append(&v114, "' was not required by the output features of the word tagger model.");
        v57 = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
        v112.__r_.__value_.__r.__words[2] = v56->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v112.__r_.__value_.__l.__data_ = v57;
        v56->__r_.__value_.__l.__size_ = 0;
        v56->__r_.__value_.__r.__words[2] = 0;
        v56->__r_.__value_.__r.__words[0] = 0;
        CoreML::Result::Result(v105, 9);
        if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v112.__r_.__value_.__l.__data_);
        if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v114.__r_.__value_.__l.__data_);
        goto LABEL_91;
      }
      if (v21 < 0)
        operator delete(v22);
      ++v15;
      v3 = v106;
      v16 = v30;
      v4 = v28;
    }
    while (v15 < *((int *)v106 + 12));
    a2 = v105;
    if (v109 == -1)
      goto LABEL_95;
    CoreML::Result::Result((CoreML::Result *)&v112);
    v47 = operator new(4uLL);
    v114.__r_.__value_.__r.__words[0] = (std::string::size_type)v47;
    *v47 = 3;
    v114.__r_.__value_.__l.__size_ = (std::string::size_type)(v47 + 1);
    v114.__r_.__value_.__r.__words[2] = (std::string::size_type)(v47 + 1);
    CoreML::validateDescriptionsContainFeatureWithTypes<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>>(v104, 1, (int **)&v114, (uint64_t)&v110);
    v112.__r_.__value_.__r.__words[0] = v110.__r_.__value_.__r.__words[0];
    if (SHIBYTE(v113) < 0)
      operator delete((void *)v112.__r_.__value_.__l.__size_);
    *(_OWORD *)&v112.__r_.__value_.__r.__words[1] = *(_OWORD *)&v110.__r_.__value_.__r.__words[1];
    v113 = v111;
    HIBYTE(v111) = 0;
    v110.__r_.__value_.__s.__data_[8] = 0;
    if (v114.__r_.__value_.__r.__words[0])
    {
      v114.__r_.__value_.__l.__size_ = v114.__r_.__value_.__r.__words[0];
      operator delete(v114.__r_.__value_.__l.__data_);
    }
    if (!CoreML::Result::good((CoreML::Result *)&v112))
    {
      *(std::string *)v105 = v112;
      *((_QWORD *)v105 + 3) = v113;
LABEL_190:
      *(_OWORD *)&v112.__r_.__value_.__r.__words[1] = 0uLL;
      v113 = 0;
LABEL_191:
      if ((SHIBYTE(v113) & 0x80000000) == 0)
        return;
      v53 = (void *)v112.__r_.__value_.__l.__size_;
      goto LABEL_93;
    }
    v48 = *((_DWORD *)v106 + 12);
    v49 = operator new(4uLL);
    v114.__r_.__value_.__r.__words[0] = (std::string::size_type)v49;
    *v49 = 7;
    v114.__r_.__value_.__l.__size_ = (std::string::size_type)(v49 + 1);
    v114.__r_.__value_.__r.__words[2] = (std::string::size_type)(v49 + 1);
    CoreML::validateDescriptionsContainFeatureWithTypes<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>>(v103, v48, (int **)&v114, (uint64_t)&v110);
    v112.__r_.__value_.__r.__words[0] = v110.__r_.__value_.__r.__words[0];
    if (SHIBYTE(v113) < 0)
      operator delete((void *)v112.__r_.__value_.__l.__size_);
    *(_OWORD *)&v112.__r_.__value_.__r.__words[1] = *(_OWORD *)&v110.__r_.__value_.__r.__words[1];
    v113 = v111;
    HIBYTE(v111) = 0;
    v110.__r_.__value_.__s.__data_[8] = 0;
    if (v114.__r_.__value_.__r.__words[0])
    {
      v114.__r_.__value_.__l.__size_ = v114.__r_.__value_.__r.__words[0];
      operator delete(v114.__r_.__value_.__l.__data_);
    }
    v50 = (uint64_t *)CoreML::Result::good((CoreML::Result *)&v112);
    if ((v50 & 1) == 0)
    {
LABEL_189:
      *(std::string *)v105 = v112;
      *((_QWORD *)v105 + 3) = v113;
      goto LABEL_190;
    }
    v51 = *(uint64_t **)(*(_QWORD *)(v106[7] + 8 * v109 + 8) + 32);
    if (!v51)
      v51 = &CoreML::Specification::_FeatureType_default_instance_;
    if (*((_DWORD *)v51 + 9) == 7)
    {
      v52 = (uint64_t *)v51[3];
    }
    else
    {
      v50 = CoreML::Specification::SequenceFeatureType::default_instance((CoreML::Specification::SequenceFeatureType *)v50);
      v52 = v50;
    }
    if (*((_DWORD *)v52 + 9) == 3)
    {
      if (v16 == -1)
        goto LABEL_133;
      v58 = *(uint64_t **)(*(_QWORD *)(v106[7] + 8 * v16 + 8) + 32);
      if (!v58)
        v58 = &CoreML::Specification::_FeatureType_default_instance_;
      if (*((_DWORD *)v58 + 9) == 7)
      {
        v59 = (uint64_t *)v58[3];
      }
      else
      {
        v50 = CoreML::Specification::SequenceFeatureType::default_instance((CoreML::Specification::SequenceFeatureType *)v50);
        v59 = v50;
      }
      if (*((_DWORD *)v59 + 9) == 3)
      {
LABEL_133:
        if (v108 == -1)
          goto LABEL_152;
        v70 = *(uint64_t **)(*(_QWORD *)(v106[7] + 8 * v108 + 8) + 32);
        if (!v70)
          v70 = &CoreML::Specification::_FeatureType_default_instance_;
        if (*((_DWORD *)v70 + 9) == 7)
        {
          v71 = (uint64_t *)v70[3];
        }
        else
        {
          v50 = CoreML::Specification::SequenceFeatureType::default_instance((CoreML::Specification::SequenceFeatureType *)v50);
          v71 = v50;
        }
        if (*((_DWORD *)v71 + 9) == 1)
        {
LABEL_152:
          if (v17 == -1)
            goto LABEL_196;
          v75 = *(uint64_t **)(*(_QWORD *)(v106[7] + 8 * v17 + 8) + 32);
          if (!v75)
            v75 = &CoreML::Specification::_FeatureType_default_instance_;
          v76 = *((_DWORD *)v75 + 9) == 7
              ? (uint64_t *)v75[3]
              : CoreML::Specification::SequenceFeatureType::default_instance((CoreML::Specification::SequenceFeatureType *)v50);
          if (*((_DWORD *)v76 + 9) == 1)
          {
LABEL_196:
            if (*((_DWORD *)v28 + 16))
            {
              if (*((_DWORD *)v28 + 21) == 200 && *(int *)(v28[9] + 24) > 0)
              {
                v86 = v28[7];
                if (*(char *)(v86 + 23) < 0)
                  v87 = *(_QWORD *)(v86 + 8);
                else
                  v87 = *(unsigned __int8 *)(v86 + 23);
                if (v87)
                  goto LABEL_189;
                std::string::basic_string[abi:ne180100]<0>(&v110, "Model parameter data not set");
                CoreML::Result::Result(v105, 13);
              }
              else
              {
                std::string::basic_string[abi:ne180100]<0>(&v110, "Model output tags not set. Must have at least one tag");
                CoreML::Result::Result(v105, 13);
              }
            }
            else
            {
              std::string::basic_string[abi:ne180100]<0>(&v110, "Model revision number not set. Must be >= 1");
              CoreML::Result::Result(v105, 13);
            }
            if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v110.__r_.__value_.__l.__data_);
            goto LABEL_191;
          }
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v110);
          v88 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v110.__r_.__value_.__r.__words[2], (uint64_t)"Unsupported type \"", 18);
          v89 = *((int *)v76 + 9);
          if (v89 > 7)
            v90 = "INVALID";
          else
            v90 = off_24D937FD8[v89];
          v97 = strlen(v90);
          v98 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v88, (uint64_t)v90, v97);
          v99 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v98, (uint64_t)"\" for feature \"", 15);
          std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("\". Should be: ", (const void **)v28[6], (void **)&v114.__r_.__value_.__l.__data_);
          if ((v114.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v100 = &v114;
          else
            v100 = (std::string *)v114.__r_.__value_.__r.__words[0];
          if ((v114.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v101 = HIBYTE(v114.__r_.__value_.__r.__words[2]);
          else
            v101 = v114.__r_.__value_.__l.__size_;
          v102 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v99, (uint64_t)v100, v101);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v102, (uint64_t)"MLFeatureTypeType_int64Type", 27);
          if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v114.__r_.__value_.__l.__data_);
          std::stringbuf::str();
          CoreML::Result::Result(v105, 2);
LABEL_184:
          if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v114.__r_.__value_.__l.__data_);
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&v110);
          goto LABEL_191;
        }
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v110);
        v77 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v110.__r_.__value_.__r.__words[2], (uint64_t)"Unsupported type \"", 18);
        v78 = *((int *)v71 + 9);
        if (v78 > 7)
          v79 = "INVALID";
        else
          v79 = off_24D937FD8[v78];
        v91 = strlen(v79);
        v92 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)v79, v91);
        v93 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v92, (uint64_t)"\" for feature \"", 15);
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("\". Should be: ", (const void **)v28[5], (void **)&v114.__r_.__value_.__l.__data_);
        if ((v114.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v94 = &v114;
        else
          v94 = (std::string *)v114.__r_.__value_.__r.__words[0];
        if ((v114.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v95 = HIBYTE(v114.__r_.__value_.__r.__words[2]);
        else
          v95 = v114.__r_.__value_.__l.__size_;
        v96 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v93, (uint64_t)v94, v95);
        v69 = v105;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v96, (uint64_t)"MLFeatureTypeType_int64Type", 27);
        if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v114.__r_.__value_.__l.__data_);
      }
      else
      {
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v110);
        v72 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v110.__r_.__value_.__r.__words[2], (uint64_t)"Unsupported type \"", 18);
        v73 = *((int *)v59 + 9);
        if (v73 > 7)
          v74 = "INVALID";
        else
          v74 = off_24D937FD8[v73];
        v80 = strlen(v74);
        v81 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)v74, v80);
        v82 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v81, (uint64_t)"\" for feature \"", 15);
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("\". Should be: ", (const void **)v28[3], (void **)&v114.__r_.__value_.__l.__data_);
        if ((v114.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v83 = &v114;
        else
          v83 = (std::string *)v114.__r_.__value_.__r.__words[0];
        if ((v114.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v84 = HIBYTE(v114.__r_.__value_.__r.__words[2]);
        else
          v84 = v114.__r_.__value_.__l.__size_;
        v85 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v82, (uint64_t)v83, v84);
        v69 = v105;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v85, (uint64_t)"MLFeatureTypeType_stringType", 28);
        if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v114.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v110);
      v60 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v110.__r_.__value_.__r.__words[2], (uint64_t)"Unsupported type \"", 18);
      v61 = *((int *)v52 + 9);
      if (v61 > 7)
        v62 = "INVALID";
      else
        v62 = off_24D937FD8[v61];
      v63 = strlen(v62);
      v64 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, (uint64_t)v62, v63);
      v65 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)"\" for feature \"", 15);
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("\". Should be: ", (const void **)v28[4], (void **)&v114.__r_.__value_.__l.__data_);
      if ((v114.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v66 = &v114;
      else
        v66 = (std::string *)v114.__r_.__value_.__r.__words[0];
      if ((v114.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v67 = HIBYTE(v114.__r_.__value_.__r.__words[2]);
      else
        v67 = v114.__r_.__value_.__l.__size_;
      v68 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)v66, v67);
      v69 = v105;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)"MLFeatureTypeType_stringType", 28);
      if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v114.__r_.__value_.__l.__data_);
    }
    std::stringbuf::str();
    CoreML::Result::Result(v69, 2);
    goto LABEL_184;
  }
LABEL_95:
  std::operator+<char>();
  v54 = std::string::append(&v112, "' (defined by tokenTagsOutputFeatureName) to the model is not present in the model description.");
  v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
  v110.__r_.__value_.__r.__words[2] = v54->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v110.__r_.__value_.__l.__data_ = v55;
  v54->__r_.__value_.__l.__size_ = 0;
  v54->__r_.__value_.__r.__words[2] = 0;
  v54->__r_.__value_.__r.__words[0] = 0;
  CoreML::Result::Result(a2, 10);
  if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v110.__r_.__value_.__l.__data_);
  if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
  {
    v53 = (void *)v112.__r_.__value_.__r.__words[0];
LABEL_93:
    operator delete(v53);
  }
}

void sub_2182EE5E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;

  if (a20 < 0)
    operator delete(__p);
  if (*(char *)(v20 - 113) < 0)
    operator delete(*(void **)(v20 - 136));
  _Unwind_Resume(exception_object);
}

uint64_t std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>@<X0>(char *__s@<X1>, const void **a2@<X0>, void **a3@<X8>)
{
  size_t v6;
  size_t v7;
  uint64_t result;
  const void *v9;
  char *v10;

  if (*((char *)a2 + 23) >= 0)
    v6 = *((unsigned __int8 *)a2 + 23);
  else
    v6 = (size_t)a2[1];
  v7 = strlen(__s);
  result = std::string::basic_string[abi:ne180100]((uint64_t)a3, v6 + v7);
  if (*((char *)a3 + 23) < 0)
    a3 = (void **)*a3;
  if (v6)
  {
    if (*((char *)a2 + 23) >= 0)
      v9 = a2;
    else
      v9 = *a2;
    result = (uint64_t)memmove(a3, v9, v6);
  }
  v10 = (char *)a3 + v6;
  if (v7)
    result = (uint64_t)memmove(v10, __s, v7);
  v10[v7] = 0;
  return result;
}

uint64_t _GLOBAL__sub_I_WordTaggerValidator_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

uint64_t _GLOBAL__sub_I_object_factory_impl_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void cppipc::ipc_object_base::~ipc_object_base(cppipc::ipc_object_base *this)
{
  std::__shared_weak_count *v1;

  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

uint64_t _GLOBAL__sub_I_ipc_object_base_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

BOOL cppipc::must_cancel(cppipc *this)
{
  unint64_t v1;

  atomic_store(1u, cppipc::get_cancel_bit_checked(void)::cancel_bit_checked);
  v1 = atomic_load(&cppipc::get_srv_running_command(void)::srv_running_command);
  return v1 == -1;
}

uint64_t _GLOBAL__sub_I_cancel_ops_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

uint64_t _GLOBAL__sub_I_comm_server_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

uint64_t _GLOBAL__sub_I_graph_pylambda_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

CoreML::Recommender::_ItemSimilarityRecommenderData *CoreML::Recommender::_ItemSimilarityRecommenderData::_ItemSimilarityRecommenderData(CoreML::Recommender::_ItemSimilarityRecommenderData *this, const CoreML::Specification::ItemSimilarityRecommender *a2)
{
  const CoreML::Specification::ItemSimilarityRecommender *v2;
  CoreML::Recommender::_ItemSimilarityRecommenderData *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  std::string::size_type v7;
  uint64_t *v8;
  uint64_t *v9;
  unint64_t **v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  unint64_t *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  std::vector<std::string>::size_type v36;
  uint64_t v37;
  __int128 **v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  std::string::size_type v43;
  std::logic_error *v44;
  uint64_t v45;
  uint64_t v46;
  std::string::size_type v47;
  std::logic_error *v49;
  std::string *v50;
  __int128 v51;
  std::string *v52;
  __int128 v53;
  std::string *v54;
  std::string::size_type size;
  std::string *v56;
  __int128 v57;
  std::string *v58;
  __int128 v59;
  std::logic_error *v60;
  std::logic_error *exception;
  std::logic_error *v62;
  std::string *v63;
  __int128 v64;
  std::string *v65;
  __int128 v66;
  std::string *v67;
  std::string::size_type v68;
  std::string *v69;
  __int128 v70;
  std::string *v71;
  __int128 v72;
  std::vector<std::string> *v73;
  void **v74;
  std::string *v75;
  std::string *v76;
  std::string *v77;
  std::string *v78;
  std::string *v79;
  std::string *v80;
  uint64_t **v81;
  uint64_t v83;
  uint64_t v85;
  std::string v86;
  std::string v87;
  std::string v88;
  std::string v89;
  std::string v90;
  std::string v91;

  v2 = a2;
  v3 = this;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = (char *)this + 8;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 3) = (char *)this + 32;
  *(_OWORD *)((char *)this + 56) = 0u;
  v77 = (std::string *)((char *)this + 56);
  *((_QWORD *)this + 5) = 0;
  *(_OWORD *)((char *)this + 104) = 0u;
  v78 = (std::string *)((char *)this + 104);
  v79 = (std::string *)((char *)this + 80);
  v80 = (std::string *)((char *)this + 128);
  v81 = (uint64_t **)((char *)this + 24);
  *(_OWORD *)((char *)this + 152) = 0u;
  v76 = (std::string *)((char *)this + 152);
  *(_OWORD *)((char *)this + 200) = 0u;
  v74 = (void **)((char *)this + 200);
  v75 = (std::string *)((char *)this + 176);
  v73 = (std::vector<std::string> *)((char *)this + 224);
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  v83 = *((unsigned int *)a2 + 6);
  if ((int)v83 < 1)
  {
    v5 = 0;
  }
  else
  {
    v4 = 0;
    v5 = 0;
    do
    {
      v85 = v4;
      v6 = *(_QWORD *)(*((_QWORD *)v2 + 4) + 8 * v4 + 8);
      v91.__r_.__value_.__r.__words[0] = *(_QWORD *)(v6 + 40);
      v7 = v91.__r_.__value_.__r.__words[0];
      v90.__r_.__value_.__r.__words[0] = (std::string::size_type)&v91;
      v8 = std::__tree<std::__value_type<unsigned long long,std::vector<std::pair<unsigned long long,double>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::vector<std::pair<unsigned long long,double>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::vector<std::pair<unsigned long long,double>>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t **)v3, (unint64_t *)&v91, (uint64_t)&std::piecewise_construct, (uint64_t **)&v90);
      v9 = v8;
      if (v5 <= v7)
        v5 = v7;
      v10 = (unint64_t **)(v8 + 5);
      v11 = *(unsigned int *)(v6 + 24);
      if ((int)v11 <= 0)
      {
        v14 = (uint64_t *)v8[6];
      }
      else
      {
        v12 = 0;
        v13 = v8 + 7;
        v14 = (uint64_t *)v8[6];
        do
        {
          v15 = *(_QWORD *)(*(_QWORD *)(v6 + 32) + 8 * v12 + 8);
          v16 = *(_QWORD *)(v15 + 16);
          v17 = *(_QWORD *)(v15 + 24);
          if ((unint64_t)v14 >= *v13)
          {
            v18 = *v10;
            v19 = ((char *)v14 - (char *)*v10) >> 4;
            v20 = v19 + 1;
            if ((unint64_t)(v19 + 1) >> 60)
              std::vector<float>::__throw_length_error[abi:ne180100]();
            v21 = *v13 - (_QWORD)v18;
            if (v21 >> 3 > v20)
              v20 = v21 >> 3;
            if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF0)
              v22 = 0xFFFFFFFFFFFFFFFLL;
            else
              v22 = v20;
            if (v22)
            {
              v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::flexible_type>>((uint64_t)(v9 + 7), v22);
              v18 = (unint64_t *)v9[5];
              v14 = (uint64_t *)v9[6];
            }
            else
            {
              v23 = 0;
            }
            v24 = (unint64_t *)&v23[16 * v19];
            *v24 = v16;
            v24[1] = v17;
            v25 = v24;
            if (v14 != (uint64_t *)v18)
            {
              do
              {
                *((_OWORD *)v25 - 1) = *((_OWORD *)v14 - 1);
                v25 -= 2;
                v14 -= 2;
              }
              while (v14 != (uint64_t *)v18);
              v18 = *v10;
            }
            v14 = (uint64_t *)(v24 + 2);
            v9[5] = (uint64_t)v25;
            v9[6] = (uint64_t)(v24 + 2);
            v9[7] = (uint64_t)&v23[16 * v22];
            if (v18)
              operator delete(v18);
          }
          else
          {
            *v14 = v16;
            v14[1] = v17;
            v14 += 2;
          }
          v9[6] = (uint64_t)v14;
          if (v5 <= v16)
            v5 = v16;
          ++v12;
        }
        while (v12 != v11);
      }
      v26 = 126 - 2 * __clz(((char *)v14 - (char *)*v10) >> 4);
      if (v14 == (uint64_t *)*v10)
        v27 = 0;
      else
        v27 = v26;
      std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *,false>(*v10, v14, (uint64_t)&v90, v27, 1);
      v28 = *(double *)(v6 + 48);
      v3 = this;
      v2 = a2;
      if (v28 != 0.0)
      {
        v90.__r_.__value_.__r.__words[0] = (std::string::size_type)&v91;
        *((double *)std::__tree<std::__value_type<unsigned long long,turi::any::iholder * (*)(turi::iarchive_soft_fail &)>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,turi::any::iholder * (*)(turi::iarchive_soft_fail &)>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,turi::any::iholder * (*)(turi::iarchive_soft_fail &)>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(v81, (unint64_t *)&v91, (uint64_t)&std::piecewise_construct, (uint64_t **)&v90)+ 5) = v28;
      }
      v4 = v85 + 1;
    }
    while (v85 + 1 != v83);
  }
  *((_QWORD *)v3 + 6) = 0;
  if (v2 == (const CoreML::Specification::ItemSimilarityRecommender *)&CoreML::Specification::_ItemSimilarityRecommender_default_instance_)
    goto LABEL_58;
  v29 = *((_QWORD *)v2 + 12);
  if (v29)
  {
    v30 = *(int *)(v29 + 16);
    if ((_DWORD)v30)
    {
      v31 = *((_QWORD *)v2 + 11);
      if (v31 && *(_DWORD *)(v31 + 24))
      {
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(exception, "Only integer item ids or string item ids can be specified in the same model.");
        exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
        __cxa_throw(exception, (struct type_info *)off_24D916A90, (void (*)(void *))MEMORY[0x24BEDAB88]);
      }
      *((_QWORD *)v3 + 6) = v30;
      if (v5 >= v30)
      {
        v49 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::to_string(&v87, v5);
        v50 = std::string::insert(&v87, 0, "List of integer item ids specified must be large enough to index all item ids specified.  The largest item index is ");
        v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
        v88.__r_.__value_.__r.__words[2] = v50->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v51;
        v50->__r_.__value_.__l.__size_ = 0;
        v50->__r_.__value_.__r.__words[2] = 0;
        v50->__r_.__value_.__r.__words[0] = 0;
        v52 = std::string::append(&v88, ", whereas there are  only ");
        v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
        v89.__r_.__value_.__r.__words[2] = v52->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v89.__r_.__value_.__l.__data_ = v53;
        v52->__r_.__value_.__l.__size_ = 0;
        v52->__r_.__value_.__r.__words[2] = 0;
        v52->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v86, *((_QWORD *)this + 6));
        if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v54 = &v86;
        else
          v54 = (std::string *)v86.__r_.__value_.__r.__words[0];
        if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v86.__r_.__value_.__r.__words[2]);
        else
          size = v86.__r_.__value_.__l.__size_;
        v56 = std::string::append(&v89, (const std::string::value_type *)v54, size);
        v57 = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
        v90.__r_.__value_.__r.__words[2] = v56->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v90.__r_.__value_.__l.__data_ = v57;
        v56->__r_.__value_.__l.__size_ = 0;
        v56->__r_.__value_.__r.__words[2] = 0;
        v56->__r_.__value_.__r.__words[0] = 0;
        v58 = std::string::append(&v90, " item ids given.");
        v59 = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
        v91.__r_.__value_.__r.__words[2] = v58->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v91.__r_.__value_.__l.__data_ = v59;
        v58->__r_.__value_.__l.__size_ = 0;
        v58->__r_.__value_.__r.__words[2] = 0;
        v58->__r_.__value_.__r.__words[0] = 0;
        std::logic_error::logic_error(v49, &v91);
        v49->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
        __cxa_throw(v49, (struct type_info *)off_24D916A90, (void (*)(void *))MEMORY[0x24BEDAB88]);
      }
      std::vector<unsigned long>::reserve(v74, v30);
      v32 = *(_QWORD *)(v29 + 24);
      if (v32)
        v33 = (_QWORD *)(v32 + 8);
      else
        v33 = 0;
      if (v32)
        v34 = (_QWORD *)(v32 + 8 + 8 * *(int *)(v29 + 16));
      else
        v34 = 0;
      std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,long long const*,long long const*,std::back_insert_iterator<std::vector<long long>>,0>(v33, v34, (uint64_t)v74);
      v45 = std::set<long long>::set[abi:ne180100]<std::__wrap_iter<long long *>>((uint64_t)&v91, *((uint64_t **)v3 + 25), *((uint64_t **)v3 + 26));
      v46 = *((_QWORD *)v3 + 6);
      v47 = v91.__r_.__value_.__r.__words[2];
      std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy(v45, (_QWORD *)v91.__r_.__value_.__l.__size_);
      if (v47 != v46)
      {
        v60 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v60, "List of integer item ids specified must be unique; list contains duplicates.");
        v60->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
        __cxa_throw(v60, (struct type_info *)off_24D916A90, (void (*)(void *))MEMORY[0x24BEDAB88]);
      }
      goto LABEL_61;
    }
  }
  v35 = *((_QWORD *)v2 + 11);
  if (!v35 || (v36 = *(int *)(v35 + 24), !(_DWORD)v36))
  {
LABEL_58:
    *((_QWORD *)v3 + 6) = v5 + 1;
    goto LABEL_61;
  }
  *((_QWORD *)v3 + 6) = v36;
  if (v5 > v36)
  {
    v62 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v87, v5);
    v63 = std::string::insert(&v87, 0, "List of string item ids specified must be large enough to index all item ids specified.  The largest item index is ");
    v64 = *(_OWORD *)&v63->__r_.__value_.__l.__data_;
    v88.__r_.__value_.__r.__words[2] = v63->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v64;
    v63->__r_.__value_.__l.__size_ = 0;
    v63->__r_.__value_.__r.__words[2] = 0;
    v63->__r_.__value_.__r.__words[0] = 0;
    v65 = std::string::append(&v88, ", whereas there are  only ");
    v66 = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
    v89.__r_.__value_.__r.__words[2] = v65->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v89.__r_.__value_.__l.__data_ = v66;
    v65->__r_.__value_.__l.__size_ = 0;
    v65->__r_.__value_.__r.__words[2] = 0;
    v65->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v86, *((_QWORD *)this + 6));
    if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v67 = &v86;
    else
      v67 = (std::string *)v86.__r_.__value_.__r.__words[0];
    if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v68 = HIBYTE(v86.__r_.__value_.__r.__words[2]);
    else
      v68 = v86.__r_.__value_.__l.__size_;
    v69 = std::string::append(&v89, (const std::string::value_type *)v67, v68);
    v70 = *(_OWORD *)&v69->__r_.__value_.__l.__data_;
    v90.__r_.__value_.__r.__words[2] = v69->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v90.__r_.__value_.__l.__data_ = v70;
    v69->__r_.__value_.__l.__size_ = 0;
    v69->__r_.__value_.__r.__words[2] = 0;
    v69->__r_.__value_.__r.__words[0] = 0;
    v71 = std::string::append(&v90, " item ids given.");
    v72 = *(_OWORD *)&v71->__r_.__value_.__l.__data_;
    v91.__r_.__value_.__r.__words[2] = v71->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v91.__r_.__value_.__l.__data_ = v72;
    v71->__r_.__value_.__l.__size_ = 0;
    v71->__r_.__value_.__r.__words[2] = 0;
    v71->__r_.__value_.__r.__words[0] = 0;
    std::logic_error::logic_error(v62, &v91);
    v62->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(v62, (struct type_info *)off_24D916A90, (void (*)(void *))MEMORY[0x24BEDAB88]);
  }
  std::vector<std::string>::reserve(v73, v36);
  v37 = *(_QWORD *)(v35 + 32);
  if (v37)
    v38 = (__int128 **)(v37 + 8);
  else
    v38 = 0;
  v39 = *(int *)(v35 + 24);
  v90.__r_.__value_.__r.__words[0] = (std::string::size_type)v73;
  if ((_DWORD)v39)
  {
    v40 = 8 * v39;
    do
    {
      std::back_insert_iterator<std::vector<std::string>>::operator=[abi:ne180100]((uint64_t **)&v90, *v38++);
      v40 -= 8;
    }
    while (v40);
  }
  v41 = std::set<std::string>::set[abi:ne180100]<std::__wrap_iter<std::string*>>((uint64_t)&v91, *((const void ***)v3 + 28), *((const void ***)v3 + 29));
  v42 = *((_QWORD *)v3 + 6);
  v43 = v91.__r_.__value_.__r.__words[2];
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy(v41, (char *)v91.__r_.__value_.__l.__size_);
  if (v43 != v42)
  {
    v44 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v44, "List of string item ids specified must be unique; list contains duplicates.");
    v44->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(v44, (struct type_info *)off_24D916A90, (void (*)(void *))MEMORY[0x24BEDAB88]);
  }
LABEL_61:
  std::string::operator=(v80, *((const std::string **)v2 + 5));
  std::string::operator=(v79, *((const std::string **)v2 + 6));
  std::string::operator=(v78, *((const std::string **)v2 + 8));
  std::string::operator=(v77, *((const std::string **)v2 + 7));
  std::string::operator=(v76, *((const std::string **)v2 + 9));
  std::string::operator=(v75, *((const std::string **)v2 + 10));
  return v3;
}

void sub_2182EF140(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void **a11, void **a12, void **a13, void **a14, void **a15, void **a16, void **a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  int v47;
  void *v48;
  uint64_t v49;
  uint64_t v51;
  void *v52;

  if (*(char *)(v49 - 105) < 0)
    operator delete(*(void **)(v49 - 128));
  if (*(char *)(v49 - 137) < 0)
    operator delete(*(void **)(v49 - 160));
  if (a28 < 0)
    operator delete(__p);
  if (a47 < 0)
    operator delete(a42);
  if (a40 < 0)
    operator delete(a35);
  if (a34 < 0)
  {
    operator delete(a29);
    v51 = a21;
    if ((v47 & 1) == 0)
    {
LABEL_16:
      *(_QWORD *)(v49 - 128) = a10;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v49 - 128));
      v52 = *a11;
      if (*a11)
      {
        *(_QWORD *)(v51 + 208) = v52;
        operator delete(v52);
      }
      if (*(char *)(v51 + 199) < 0)
        operator delete(*a12);
      if (*(char *)(v51 + 175) < 0)
        operator delete(*a13);
      if (*(char *)(v51 + 151) < 0)
        operator delete(*a17);
      if (*(char *)(v51 + 127) < 0)
        operator delete(*a15);
      if (*(char *)(v51 + 103) < 0)
        operator delete(*a16);
      if (*(char *)(v51 + 79) < 0)
        operator delete(*a14);
      std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy(a18, *(_QWORD **)(v51 + 32));
      std::__tree<std::__value_type<unsigned long long,std::vector<std::pair<unsigned long long,double>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::vector<std::pair<unsigned long long,double>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::vector<std::pair<unsigned long long,double>>>>>::destroy(v51, *(_QWORD **)(v51 + 8));
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v51 = a21;
    if (!v47)
      goto LABEL_16;
  }
  __cxa_free_exception(v48);
  goto LABEL_16;
}

void CoreML::Recommender::constructAndValidateItemSimilarityRecommenderFromSpec(CoreML::Recommender *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  _DWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t i;
  char *v13;
  uint64_t j;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  _DWORD *v18;
  std::logic_error *v19;
  const std::string *v20;
  std::logic_error *v21;
  const std::string *v22;
  std::logic_error *exception;
  const std::string *v24;
  std::logic_error *v25;
  const std::string *v26;
  std::logic_error *v27;
  const std::string *v28;
  void *v29;
  __int128 v30;
  std::string::size_type v31;
  void *v32;
  void *v33;
  _QWORD *v34;
  _BYTE v35[112];
  void *v36;
  __int128 __p;
  std::string::size_type v38;
  std::string v39;
  std::string v40;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  if (*((_QWORD *)this + 2))
    v5 = (uint64_t *)*((_QWORD *)this + 2);
  else
    v5 = &CoreML::Specification::_ModelDescription_default_instance_;
  CoreML::validateModelDescription((CoreML *)v5, (const CoreML::Specification::ModelDescription *)*((unsigned int *)this + 6), (CoreML::Result *)&v36);
  if (!CoreML::Result::good((CoreML::Result *)&v36) || *((_DWORD *)this + 11) != 501)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    v24 = (const std::string *)turi::neural_net::float_scalar::data((turi::neural_net::float_scalar *)&v36);
    std::logic_error::logic_error(exception, v24);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24D916A90, (void (*)(void *))MEMORY[0x24BEDAB88]);
  }
  CoreML::Specification::ItemSimilarityRecommender::ItemSimilarityRecommender((CoreML::Specification::ItemSimilarityRecommender *)v35, *((const CoreML::Specification::ItemSimilarityRecommender **)this + 4));
  std::allocate_shared[abi:ne180100]<CoreML::Recommender::_ItemSimilarityRecommenderData,std::allocator<CoreML::Recommender::_ItemSimilarityRecommenderData>,CoreML::Specification::ItemSimilarityRecommender &,void>((const CoreML::Specification::ItemSimilarityRecommender *)v35, a2);
  v6 = *a2;
  if (*(char *)(*a2 + 151) < 0)
  {
    if (*(_QWORD *)(v6 + 136))
      goto LABEL_12;
  }
  else if (*(_BYTE *)(*a2 + 151))
  {
    goto LABEL_12;
  }
  if (*((_DWORD *)v5 + 6) != 1)
  {
    v27 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v27, "Name of column for item input data not specified.");
    goto LABEL_76;
  }
  std::string::operator=((std::string *)(v6 + 128), *(const std::string **)(*(_QWORD *)(v5[4] + 8) + 16));
LABEL_12:
  v7 = operator new(0xCuLL);
  *(_QWORD *)&v30 = v7 + 3;
  *((_QWORD *)&v30 + 1) = v7 + 3;
  *(_QWORD *)v7 = 0x700000006;
  v7[2] = 5;
  v29 = v7;
  CoreML::validateDescriptionsContainFeatureWithNameAndType<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>>((uint64_t)(v5 + 2), (const void **)(*a2 + 128), (int **)&v29, (CoreML::Result *)&v39);
  v36 = (void *)v39.__r_.__value_.__r.__words[0];
  if (SHIBYTE(v38) < 0)
    operator delete((void *)__p);
  __p = *(_OWORD *)&v39.__r_.__value_.__r.__words[1];
  v38 = v40.__r_.__value_.__r.__words[0];
  if (!CoreML::Result::good((CoreML::Result *)&v36))
  {
    v25 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    v26 = (const std::string *)turi::neural_net::float_scalar::data((turi::neural_net::float_scalar *)&v36);
    std::logic_error::logic_error(v25, v26);
    v25->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(v25, (struct type_info *)off_24D916A90, (void (*)(void *))MEMORY[0x24BEDAB88]);
  }
  if (v29)
  {
    *(_QWORD *)&v30 = v29;
    operator delete(v29);
  }
  v8 = *a2;
  if ((*(char *)(*a2 + 103) & 0x80000000) == 0)
  {
    if (!*(_BYTE *)(*a2 + 103))
      goto LABEL_26;
    goto LABEL_21;
  }
  if (*(_QWORD *)(v8 + 88))
  {
LABEL_21:
    v9 = operator new(4uLL);
    v29 = v9;
    *v9 = 1;
    *(_QWORD *)&v30 = v9 + 1;
    *((_QWORD *)&v30 + 1) = v9 + 1;
    CoreML::validateDescriptionsContainFeatureWithNameAndType<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>>((uint64_t)(v5 + 2), (const void **)(v8 + 80), (int **)&v29, (CoreML::Result *)&v39);
    v36 = (void *)v39.__r_.__value_.__r.__words[0];
    if (SHIBYTE(v38) < 0)
      operator delete((void *)__p);
    __p = *(_OWORD *)&v39.__r_.__value_.__r.__words[1];
    v38 = v40.__r_.__value_.__r.__words[0];
    v40.__r_.__value_.__s.__data_[7] = 0;
    v39.__r_.__value_.__s.__data_[8] = 0;
    if (v29)
    {
      *(_QWORD *)&v30 = v29;
      operator delete(v29);
    }
    if (CoreML::Result::good((CoreML::Result *)&v36))
      goto LABEL_26;
    v27 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    v28 = (const std::string *)turi::neural_net::float_scalar::data((turi::neural_net::float_scalar *)&v36);
    std::logic_error::logic_error(v27, v28);
LABEL_76:
    v27->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(v27, (struct type_info *)off_24D916A90, (void (*)(void *))MEMORY[0x24BEDAB88]);
  }
LABEL_26:
  v10 = operator new(8uLL);
  v32 = v10;
  *v10 = 0x500000007;
  v33 = v10 + 1;
  v34 = v10 + 1;
  v11 = *a2;
  if (*(char *)(*a2 + 127) < 0)
  {
    std::string::__init_copy_ctor_external(&v39, *(const std::string::value_type **)(v11 + 104), *(_QWORD *)(v11 + 112));
    v11 = *a2;
  }
  else
  {
    v39 = *(std::string *)(v11 + 104);
  }
  if (*(char *)(v11 + 79) < 0)
    std::string::__init_copy_ctor_external(&v40, *(const std::string::value_type **)(v11 + 56), *(_QWORD *)(v11 + 64));
  else
    v40 = *(std::string *)(v11 + 56);
  for (i = 0; i != 6; i += 3)
  {
    v13 = (char *)&v39 + i * 8;
    if (SHIBYTE(v39.__r_.__value_.__r.__words[i + 2]) < 0)
    {
      if (!*((_QWORD *)v13 + 1))
        continue;
    }
    else if (!v39.__r_.__value_.__s.__data_[i * 8 + 23])
    {
      continue;
    }
    CoreML::validateDescriptionsContainFeatureWithNameAndType<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>>((uint64_t)(v5 + 2), (const void **)v13, (int **)&v32, (CoreML::Result *)&v29);
    v36 = v29;
    if (SHIBYTE(v38) < 0)
      operator delete((void *)__p);
    __p = v30;
    v38 = v31;
    if (!CoreML::Result::good((CoreML::Result *)&v36))
    {
      v21 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      v22 = (const std::string *)turi::neural_net::float_scalar::data((turi::neural_net::float_scalar *)&v36);
      std::logic_error::logic_error(v21, v22);
      v21->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
      __cxa_throw(v21, (struct type_info *)off_24D916A90, (void (*)(void *))MEMORY[0x24BEDAB88]);
    }
  }
  for (j = 0; j != -6; j -= 3)
  {
    if (SHIBYTE(v40.__r_.__value_.__r.__words[j + 2]) < 0)
      operator delete(*(void **)((char *)&v39 + j * 8 + 24));
  }
  if (v32)
  {
    v33 = v32;
    operator delete(v32);
  }
  v15 = *a2;
  if (*(char *)(*a2 + 199) < 0)
  {
    v16 = *(_QWORD *)(v15 + 184);
    if (!v16)
      goto LABEL_57;
LABEL_51:
    v17 = operator new(4uLL);
    v29 = v17;
    *v17 = 6;
    *(_QWORD *)&v30 = v17 + 1;
    *((_QWORD *)&v30 + 1) = v17 + 1;
    CoreML::validateDescriptionsContainFeatureWithNameAndType<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>>((uint64_t)(v5 + 5), (const void **)(v15 + 176), (int **)&v29, (CoreML::Result *)&v39);
    v36 = (void *)v39.__r_.__value_.__r.__words[0];
    if (SHIBYTE(v38) < 0)
      operator delete((void *)__p);
    __p = *(_OWORD *)&v39.__r_.__value_.__r.__words[1];
    v38 = v40.__r_.__value_.__r.__words[0];
    v40.__r_.__value_.__s.__data_[7] = 0;
    v39.__r_.__value_.__s.__data_[8] = 0;
    if (v29)
    {
      *(_QWORD *)&v30 = v29;
      operator delete(v29);
    }
    if (CoreML::Result::good((CoreML::Result *)&v36))
    {
      v15 = *a2;
      goto LABEL_57;
    }
    goto LABEL_64;
  }
  v16 = *(unsigned __int8 *)(*a2 + 199);
  if (*(_BYTE *)(*a2 + 199))
    goto LABEL_51;
LABEL_57:
  if ((*(char *)(v15 + 175) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(v15 + 175))
      goto LABEL_59;
LABEL_66:
    if (v16)
      goto LABEL_67;
    v19 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v19, "No output columns specified.");
LABEL_78:
    v19->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(v19, (struct type_info *)off_24D916A90, (void (*)(void *))MEMORY[0x24BEDAB88]);
  }
  if (!*(_QWORD *)(v15 + 160))
    goto LABEL_66;
LABEL_59:
  v18 = operator new(4uLL);
  v29 = v18;
  *v18 = 7;
  *(_QWORD *)&v30 = v18 + 1;
  *((_QWORD *)&v30 + 1) = v18 + 1;
  CoreML::validateDescriptionsContainFeatureWithNameAndType<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>>((uint64_t)(v5 + 5), (const void **)(v15 + 152), (int **)&v29, (CoreML::Result *)&v39);
  v36 = (void *)v39.__r_.__value_.__r.__words[0];
  if (SHIBYTE(v38) < 0)
    operator delete((void *)__p);
  __p = *(_OWORD *)&v39.__r_.__value_.__r.__words[1];
  v38 = v40.__r_.__value_.__r.__words[0];
  v40.__r_.__value_.__s.__data_[7] = 0;
  v39.__r_.__value_.__s.__data_[8] = 0;
  if (v29)
  {
    *(_QWORD *)&v30 = v29;
    operator delete(v29);
  }
  if (!CoreML::Result::good((CoreML::Result *)&v36))
  {
LABEL_64:
    v19 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    v20 = (const std::string *)turi::neural_net::float_scalar::data((turi::neural_net::float_scalar *)&v36);
    std::logic_error::logic_error(v19, v20);
    goto LABEL_78;
  }
LABEL_67:
  CoreML::Specification::ItemSimilarityRecommender::~ItemSimilarityRecommender((CoreML::Specification::ItemSimilarityRecommender *)v35);
  if (SHIBYTE(v38) < 0)
    operator delete((void *)__p);
}

void sub_2182EF9F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  uint64_t v37;
  void *v38;

  __cxa_free_exception(v38);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v37);
  CoreML::Specification::ItemSimilarityRecommender::~ItemSimilarityRecommender((CoreML::Specification::ItemSimilarityRecommender *)&a17);
  if (a37 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<unsigned long long,std::vector<std::pair<unsigned long long,double>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::vector<std::pair<unsigned long long,double>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::vector<std::pair<unsigned long long,double>>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t **v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = v6[4];
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = (uint64_t *)operator new(0x40uLL);
    v12 = **a4;
    v11[6] = 0;
    v11[7] = 0;
    v11[4] = v12;
    v11[5] = 0;
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *,false>(unint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  unint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  double *v19;
  char v20;
  BOOL v21;
  unint64_t v22;
  unint64_t v23;
  double v24;
  double v25;

uint64_t *std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  double v8;
  double v9;
  double *v10;
  uint64_t v11;
  unint64_t v12;
  double v13;
  uint64_t v14;

  if (result == a2)
    return result;
  v2 = result + 2;
  if (result + 2 == a2)
    return result;
  v3 = 0;
  v4 = result;
  do
  {
    v5 = (unint64_t *)v4;
    v4 = v2;
    v6 = v5[2];
    v7 = *v5;
    if (v6 >= *v5)
    {
      if (v7 < v6)
        goto LABEL_19;
      v8 = *((double *)v5 + 3);
      v9 = *((double *)v5 + 1);
      if (v8 >= v9)
        goto LABEL_19;
    }
    else
    {
      v8 = *((double *)v5 + 3);
      v9 = *((double *)v5 + 1);
    }
    v5[2] = v7;
    *((double *)v4 + 1) = v9;
    v10 = (double *)result;
    if (v5 == (unint64_t *)result)
      goto LABEL_18;
    v11 = v3;
    while (1)
    {
      v12 = *(uint64_t *)((char *)result + v11 - 16);
      if (v6 >= v12)
        break;
      v13 = *(double *)((char *)result + v11 - 8);
LABEL_12:
      v5 -= 2;
      v14 = (uint64_t)result + v11;
      *(_QWORD *)v14 = v12;
      *(double *)(v14 + 8) = v13;
      v11 -= 16;
      if (!v11)
      {
        v10 = (double *)result;
        goto LABEL_18;
      }
    }
    if (v12 >= v6)
    {
      v10 = (double *)((char *)result + v11);
      v13 = *(double *)((char *)result + v11 - 8);
      if (v8 >= v13)
        goto LABEL_18;
      goto LABEL_12;
    }
    v10 = (double *)v5;
LABEL_18:
    *(_QWORD *)v10 = v6;
    v10[1] = v8;
LABEL_19:
    v2 = v4 + 2;
    v3 += 16;
  }
  while (v4 + 2 != a2);
  return result;
}

uint64_t *std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t *v2;
  double *i;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  double v7;
  double *j;

  if (result != a2)
  {
    v2 = result + 2;
    if (result + 2 != a2)
    {
      for (i = (double *)(result + 1); ; i += 2)
      {
        v4 = (unint64_t *)result;
        result = v2;
        v5 = v4[2];
        v6 = *v4;
        if (v5 < *v4)
          break;
        if (v6 >= v5)
        {
          v7 = *((double *)v4 + 3);
          if (v7 < *((double *)v4 + 1))
            goto LABEL_6;
        }
LABEL_14:
        v2 = result + 2;
        if (result + 2 == a2)
          return result;
      }
      v7 = *((double *)v4 + 3);
LABEL_6:
      for (j = i; ; j -= 2)
      {
        *((_QWORD *)j + 1) = v6;
        j[2] = *j;
        v6 = *((_QWORD *)j - 3);
        if (v5 >= v6 && (v6 < v5 || v7 >= *(j - 2)))
          break;
      }
      *((_QWORD *)j - 1) = v5;
      *j = v7;
      goto LABEL_14;
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *>(unint64_t *a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  double v6;
  unint64_t v7;
  uint64_t result;
  unint64_t v9;
  double v10;
  double v11;
  unint64_t v12;
  unint64_t v13;
  double v14;
  double v15;
  double v16;
  double v17;
  unint64_t v18;
  double v19;

  v3 = *a2;
  v4 = *a1;
  if (*a2 >= *a1 && (v4 < v3 || *((double *)a2 + 1) >= *((double *)a1 + 1)))
  {
    v9 = *a3;
    if (*a3 >= v3)
    {
      if (v3 < v9)
        return 0;
      v11 = *((double *)a3 + 1);
      v10 = *((double *)a2 + 1);
      if (v11 >= v10)
        return 0;
    }
    else
    {
      v10 = *((double *)a2 + 1);
      v11 = *((double *)a3 + 1);
    }
    *a2 = v9;
    *a3 = v3;
    *((double *)a2 + 1) = v11;
    *((double *)a3 + 1) = v10;
    v12 = *a2;
    v13 = *a1;
    if (*a2 >= *a1)
    {
      if (v13 < v12)
        return 1;
      v15 = *((double *)a2 + 1);
      v14 = *((double *)a1 + 1);
      if (v15 >= v14)
        return 1;
    }
    else
    {
      v14 = *((double *)a1 + 1);
      v15 = *((double *)a2 + 1);
    }
    *a1 = v12;
    *a2 = v13;
    *((double *)a1 + 1) = v15;
    result = 2;
    *((double *)a2 + 1) = v14;
  }
  else
  {
    v5 = *a3;
    if (*a3 < v3)
    {
      v6 = *((double *)a3 + 1);
LABEL_6:
      *a1 = v5;
      *a3 = v4;
      v7 = a1[1];
      *((double *)a1 + 1) = v6;
      a3[1] = v7;
      return 1;
    }
    if (v3 >= v5)
    {
      v6 = *((double *)a3 + 1);
      v16 = *((double *)a2 + 1);
      if (v6 < v16)
        goto LABEL_6;
    }
    else
    {
      v16 = *((double *)a2 + 1);
    }
    *a1 = v3;
    *a2 = v4;
    v17 = *((double *)a1 + 1);
    *((double *)a1 + 1) = v16;
    *((double *)a2 + 1) = v17;
    v18 = *a3;
    if (*a3 >= v4)
    {
      if (v4 < v18)
        return 1;
      v19 = *((double *)a3 + 1);
      if (v19 >= v17)
        return 1;
    }
    else
    {
      v19 = *((double *)a3 + 1);
    }
    *a2 = v18;
    *a3 = v4;
    *((double *)a2 + 1) = v19;
    result = 2;
    *((double *)a3 + 1) = v17;
  }
  return result;
}

unint64_t *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<unsigned long long,double> *,std::__less<void,void> &>(unint64_t *a1, double *a2)
{
  unint64_t v2;
  double v3;
  unint64_t v4;
  unint64_t *i;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;

  v2 = *a1;
  v3 = *((double *)a1 + 1);
  v4 = *((_QWORD *)a2 - 2);
  if (*a1 >= v4 && (v4 < v2 || v3 >= *(a2 - 1)))
  {
    for (i = a1 + 2; i < (unint64_t *)a2 && v2 >= *i && (*i < v2 || v3 >= *((double *)i + 1)); i += 2)
      ;
  }
  else
  {
    i = a1;
    do
    {
      v7 = i[2];
      i += 2;
      v6 = v7;
    }
    while (v2 >= v7 && (v6 < v2 || v3 >= *((double *)i + 1)));
  }
  if (i < (unint64_t *)a2)
  {
    for (a2 -= 2; v2 < v4 || v4 >= v2 && v3 < a2[1]; a2 -= 2)
    {
      v8 = *((_QWORD *)a2 - 2);
      v4 = v8;
    }
  }
  if (i < (unint64_t *)a2)
  {
    v9 = *i;
    v10 = *(_QWORD *)a2;
    do
    {
      *i = v10;
      *(_QWORD *)a2 = v9;
      v11 = i[2];
      i += 2;
      v9 = v11;
      v12 = *(i - 1);
      *(i - 1) = *((_QWORD *)a2 + 1);
      *((_QWORD *)a2 + 1) = v12;
      while (v2 >= v9 && (v9 < v2 || v3 >= *((double *)i + 1)))
      {
        v13 = i[2];
        i += 2;
        v9 = v13;
      }
      do
      {
        do
        {
          v14 = *((_QWORD *)a2 - 2);
          a2 -= 2;
          v10 = v14;
        }
        while (v2 < v14);
      }
      while (v10 >= v2 && v3 < a2[1]);
    }
    while (i < (unint64_t *)a2);
  }
  if (i - 2 != a1)
  {
    *a1 = *(i - 2);
    a1[1] = *(i - 1);
  }
  *(i - 2) = v2;
  *((double *)i - 1) = v3;
  return i;
}

double *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<unsigned long long,double> *,std::__less<void,void> &>(double *a1, unint64_t a2)
{
  uint64_t v2;
  double v3;
  double v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v12;
  double *v13;
  double *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;

  v2 = 0;
  v3 = *a1;
  v4 = a1[1];
  while (1)
  {
    v5 = *(_QWORD *)&a1[v2 + 2];
    if (v5 >= *(_QWORD *)&v3 && (*(_QWORD *)&v3 < v5 || a1[v2 + 3] >= v4))
      break;
    v2 += 2;
  }
  v6 = (unint64_t)&a1[v2 + 2];
  if (v2 * 8)
  {
    do
    {
      v8 = *(_QWORD *)(a2 - 16);
      a2 -= 16;
      v7 = v8;
    }
    while (v8 >= *(_QWORD *)&v3 && (*(_QWORD *)&v3 < v7 || *(double *)(a2 + 8) >= v4));
  }
  else
  {
LABEL_19:
    if (v6 < a2)
    {
      do
      {
        v10 = *(_QWORD *)(a2 - 16);
        a2 -= 16;
        v9 = v10;
        if (v10 < *(_QWORD *)&v3)
          break;
        if (*(_QWORD *)&v3 < v9)
          goto LABEL_19;
      }
      while (*(double *)(a2 + 8) >= v4 && v6 < a2);
    }
  }
  if (v6 >= a2)
  {
    v13 = (double *)v6;
  }
  else
  {
    v12 = *(_QWORD *)a2;
    v13 = (double *)v6;
    v14 = (double *)a2;
    do
    {
      *(_QWORD *)v13 = v12;
      *(_QWORD *)v14 = v5;
      v15 = *((_QWORD *)v13 + 1);
      v13[1] = v14[1];
      *((_QWORD *)v14 + 1) = v15;
      do
      {
        do
        {
          v16 = *((_QWORD *)v13 + 2);
          v13 += 2;
          v5 = v16;
        }
        while (v16 < *(_QWORD *)&v3);
      }
      while (*(_QWORD *)&v3 >= v5 && v13[1] < v4);
      do
      {
        v17 = *((_QWORD *)v14 - 2);
        v14 -= 2;
        v12 = v17;
      }
      while (v17 >= *(_QWORD *)&v3 && (*(_QWORD *)&v3 < v12 || v14[1] >= v4));
    }
    while (v13 < v14);
  }
  if (v13 - 2 != a1)
  {
    *a1 = *(v13 - 2);
    a1[1] = *(v13 - 1);
  }
  *(v13 - 2) = v3;
  *(v13 - 1) = v4;
  return v13 - 2;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  unint64_t v6;
  unint64_t v7;
  double v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  double v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  double v22;

  v4 = (a2 - a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(_QWORD *)(a2 - 16);
      v7 = *(_QWORD *)a1;
      if (v6 < *(_QWORD *)a1)
      {
        v8 = *(double *)(a1 + 8);
        v9 = *(double *)(a2 - 8);
LABEL_30:
        *(_QWORD *)a1 = v6;
        *(_QWORD *)(a2 - 16) = v7;
        *(double *)(a1 + 8) = v9;
        *(double *)(a2 - 8) = v8;
        return result;
      }
      if (v7 >= v6)
      {
        v9 = *(double *)(a2 - 8);
        v8 = *(double *)(a1 + 8);
        if (v9 < v8)
          goto LABEL_30;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *>((unint64_t *)a1, (unint64_t *)(a1 + 16), (unint64_t *)(a2 - 16));
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *>(a1, a1 + 16, a1 + 32, a2 - 16);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *>(a1, a1 + 16, a1 + 32, a1 + 48, (unint64_t *)(a2 - 16));
      return 1;
    default:
      v10 = a1 + 32;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *>((unint64_t *)a1, (unint64_t *)(a1 + 16), (unint64_t *)(a1 + 32));
      v11 = a1 + 48;
      if (a1 + 48 == a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
LABEL_6:
  v14 = *(_QWORD *)v11;
  v15 = *(_QWORD *)v10;
  if (*(_QWORD *)v11 >= *(_QWORD *)v10)
  {
    if (v15 < v14)
      goto LABEL_21;
    v16 = *(double *)(v11 + 8);
    v17 = *(double *)(v10 + 8);
    if (v16 >= v17)
      goto LABEL_21;
  }
  else
  {
    v16 = *(double *)(v11 + 8);
    v17 = *(double *)(v10 + 8);
  }
  *(_QWORD *)v11 = v15;
  *(double *)(v11 + 8) = v17;
  v18 = a1;
  if (v10 == a1)
    goto LABEL_20;
  v19 = v12;
  while (1)
  {
    v20 = a1 + v19;
    v21 = *(_QWORD *)(a1 + v19 + 16);
    if (v14 >= v21)
    {
      if (v21 < v14)
      {
        v18 = v10;
        goto LABEL_20;
      }
      v22 = *(double *)(a1 + v19 + 24);
      if (v16 >= v22)
      {
        v18 = a1 + v19 + 32;
LABEL_20:
        *(_QWORD *)v18 = v14;
        *(double *)(v18 + 8) = v16;
        if (++v13 == 8)
          return v11 + 16 == a2;
LABEL_21:
        v10 = v11;
        v12 += 16;
        v11 += 16;
        if (v11 == a2)
          return 1;
        goto LABEL_6;
      }
    }
    else
    {
      v22 = *(double *)(v20 + 24);
    }
    v10 -= 16;
    *(_QWORD *)(v20 + 32) = v21;
    *(double *)(a1 + v19 + 40) = v22;
    v19 -= 16;
    if (v19 == -32)
    {
      v18 = a1;
      goto LABEL_20;
    }
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v9;
  unint64_t v10;
  double v11;
  double v12;
  unint64_t v13;
  unint64_t v14;
  double v15;
  double v16;
  unint64_t v17;
  unint64_t v18;
  double v19;
  double v20;

  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *>((unint64_t *)a1, (unint64_t *)a2, (unint64_t *)a3);
  v9 = *(_QWORD *)a4;
  v10 = *(_QWORD *)a3;
  if (*(_QWORD *)a4 >= *(_QWORD *)a3)
  {
    if (v10 < v9)
      return result;
    v12 = *(double *)(a4 + 8);
    v11 = *(double *)(a3 + 8);
    if (v12 >= v11)
      return result;
  }
  else
  {
    v11 = *(double *)(a3 + 8);
    v12 = *(double *)(a4 + 8);
  }
  *(_QWORD *)a3 = v9;
  *(_QWORD *)a4 = v10;
  *(double *)(a3 + 8) = v12;
  *(double *)(a4 + 8) = v11;
  v13 = *(_QWORD *)a3;
  v14 = *(_QWORD *)a2;
  if (*(_QWORD *)a3 >= *(_QWORD *)a2)
  {
    if (v14 < v13)
      return result;
    v16 = *(double *)(a3 + 8);
    v15 = *(double *)(a2 + 8);
    if (v16 >= v15)
      return result;
  }
  else
  {
    v15 = *(double *)(a2 + 8);
    v16 = *(double *)(a3 + 8);
  }
  *(_QWORD *)a2 = v13;
  *(_QWORD *)a3 = v14;
  *(double *)(a2 + 8) = v16;
  *(double *)(a3 + 8) = v15;
  v17 = *(_QWORD *)a2;
  v18 = *(_QWORD *)a1;
  if (*(_QWORD *)a2 < *(_QWORD *)a1)
  {
    v19 = *(double *)(a1 + 8);
    v20 = *(double *)(a2 + 8);
LABEL_15:
    *(_QWORD *)a1 = v17;
    *(_QWORD *)a2 = v18;
    *(double *)(a1 + 8) = v20;
    *(double *)(a2 + 8) = v19;
    return result;
  }
  if (v18 >= v17)
  {
    v20 = *(double *)(a2 + 8);
    v19 = *(double *)(a1 + 8);
    if (v20 < v19)
      goto LABEL_15;
  }
  return result;
}

double std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t *a5)
{
  double result;
  unint64_t v11;
  unint64_t v12;
  double v13;
  unint64_t v14;
  unint64_t v15;
  double v16;
  unint64_t v17;
  unint64_t v18;
  double v19;
  unint64_t v20;
  unint64_t v21;
  double v22;

  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *>(a1, a2, a3, a4);
  v11 = *a5;
  v12 = *(_QWORD *)a4;
  if (*a5 >= *(_QWORD *)a4)
  {
    if (v12 < v11)
      return result;
    v13 = *((double *)a5 + 1);
    result = *(double *)(a4 + 8);
    if (v13 >= result)
      return result;
  }
  else
  {
    result = *(double *)(a4 + 8);
    v13 = *((double *)a5 + 1);
  }
  *(_QWORD *)a4 = v11;
  *a5 = v12;
  *(double *)(a4 + 8) = v13;
  *((double *)a5 + 1) = result;
  v14 = *(_QWORD *)a4;
  v15 = *(_QWORD *)a3;
  if (*(_QWORD *)a4 >= *(_QWORD *)a3)
  {
    if (v15 < v14)
      return result;
    v16 = *(double *)(a4 + 8);
    result = *(double *)(a3 + 8);
    if (v16 >= result)
      return result;
  }
  else
  {
    result = *(double *)(a3 + 8);
    v16 = *(double *)(a4 + 8);
  }
  *(_QWORD *)a3 = v14;
  *(_QWORD *)a4 = v15;
  *(double *)(a3 + 8) = v16;
  *(double *)(a4 + 8) = result;
  v17 = *(_QWORD *)a3;
  v18 = *(_QWORD *)a2;
  if (*(_QWORD *)a3 >= *(_QWORD *)a2)
  {
    if (v18 < v17)
      return result;
    v19 = *(double *)(a3 + 8);
    result = *(double *)(a2 + 8);
    if (v19 >= result)
      return result;
  }
  else
  {
    result = *(double *)(a2 + 8);
    v19 = *(double *)(a3 + 8);
  }
  *(_QWORD *)a2 = v17;
  *(_QWORD *)a3 = v18;
  *(double *)(a2 + 8) = v19;
  *(double *)(a3 + 8) = result;
  v20 = *(_QWORD *)a2;
  v21 = *(_QWORD *)a1;
  if (*(_QWORD *)a2 < *(_QWORD *)a1)
  {
    result = *(double *)(a1 + 8);
    v22 = *(double *)(a2 + 8);
LABEL_9:
    *(_QWORD *)a1 = v20;
    *(_QWORD *)a2 = v21;
    *(double *)(a1 + 8) = v22;
    *(double *)(a2 + 8) = result;
    return result;
  }
  if (v21 >= v20)
  {
    v22 = *(double *)(a2 + 8);
    result = *(double *)(a1 + 8);
    if (v22 < result)
      goto LABEL_9;
  }
  return result;
}

uint64_t std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *,std::pair<unsigned long long,double> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  double v17;
  double v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;

  if (a1 != a2)
  {
    v8 = a2 - a1;
    v9 = (a2 - a1) >> 4;
    if (a2 - a1 >= 17)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = (unint64_t *)(a1 + 16 * v10);
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *>(a1, a4, v9, v12);
        v12 -= 2;
        --v11;
      }
      while (v11);
    }
    v13 = a2;
    if (a2 != a3)
    {
      v14 = a2;
      while (1)
      {
        v15 = *(_QWORD *)v14;
        v16 = *(_QWORD *)a1;
        if (*(_QWORD *)v14 >= *(_QWORD *)a1)
        {
          if (v16 < v15)
            goto LABEL_12;
          v17 = *(double *)(v14 + 8);
          v18 = *(double *)(a1 + 8);
          if (v17 >= v18)
            goto LABEL_12;
        }
        else
        {
          v17 = *(double *)(v14 + 8);
          v18 = *(double *)(a1 + 8);
        }
        *(_QWORD *)v14 = v16;
        *(_QWORD *)a1 = v15;
        *(double *)(v14 + 8) = v18;
        *(double *)(a1 + 8) = v17;
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *>(a1, a4, v9, (unint64_t *)a1);
LABEL_12:
        v14 += 16;
        if (v14 == a3)
        {
          v13 = a3;
          break;
        }
      }
    }
    if (v8 >= 17)
    {
      v19 = (unint64_t)v8 >> 4;
      v20 = (unint64_t *)(a2 - 16);
      do
      {
        v21 = *(_QWORD *)a1;
        v22 = *(_QWORD *)(a1 + 8);
        std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *>(a1, a4, v19);
        if (v20 == v23)
        {
          *v23 = v21;
          v23[1] = v22;
        }
        else
        {
          *v23 = *v20;
          v23[1] = v20[1];
          *v20 = v21;
          v20[1] = v22;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *>(a1, (uint64_t)(v23 + 2), a4, ((uint64_t)v23 - a1 + 16) >> 4);
        }
        v20 -= 2;
      }
      while (v19-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *>(uint64_t result, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  double v13;
  double v14;
  unint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  double v20;

  if (a3 >= 2)
  {
    v4 = (uint64_t)a4 - result;
    v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 4)
    {
      v6 = v4 >> 3;
      v7 = (v4 >> 3) + 1;
      v8 = (unint64_t *)(result + 16 * v7);
      v9 = v6 + 2;
      if (v9 < a3)
      {
        v10 = v8[2];
        if (*v8 < v10 || v10 >= *v8 && *(double *)(result + 16 * v7 + 8) < *((double *)v8 + 3))
        {
          v8 += 2;
          v7 = v9;
        }
      }
      v11 = *v8;
      v12 = *a4;
      if (*v8 >= *a4)
      {
        if (v12 >= v11)
        {
          v14 = *((double *)v8 + 1);
          v13 = *((double *)a4 + 1);
          if (v14 < v13)
            return result;
        }
        else
        {
          v13 = *((double *)a4 + 1);
          v14 = *((double *)v8 + 1);
        }
        *a4 = v11;
        *((double *)a4 + 1) = v14;
        if (v5 >= v7)
        {
          while (1)
          {
            v16 = 2 * v7;
            v7 = (2 * v7) | 1;
            v15 = (unint64_t *)(result + 16 * v7);
            v17 = v16 + 2;
            if (v17 < a3)
            {
              v18 = v15[2];
              if (*v15 < v18 || v18 >= *v15 && *(double *)(result + 16 * v7 + 8) < *((double *)v15 + 3))
              {
                v15 += 2;
                v7 = v17;
              }
            }
            v19 = *v15;
            if (*v15 < v12)
              break;
            v20 = *((double *)v15 + 1);
            if (v12 >= v19 && v20 < v13)
              break;
            *v8 = v19;
            *((double *)v8 + 1) = v20;
            v8 = v15;
            if (v5 < v7)
              goto LABEL_14;
          }
        }
        v15 = v8;
LABEL_14:
        *v15 = v12;
        *((double *)v15 + 1) = v13;
      }
    }
  }
  return result;
}

double std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  double result;

  v3 = 0;
  v4 = a3 - 2;
  if (a3 < 2)
    v4 = a3 - 1;
  v5 = v4 >> 1;
  do
  {
    v6 = a1;
    v7 = v3 + 1;
    a1 += 16 * (v3 + 1);
    v8 = 2 * v3;
    v3 = (2 * v3) | 1;
    v9 = v8 + 2;
    if (v9 < a3)
    {
      v10 = *(_QWORD *)(a1 + 16);
      if (*(_QWORD *)a1 < v10 || v10 >= *(_QWORD *)a1 && *(double *)(v6 + 16 * v7 + 8) < *(double *)(a1 + 24))
      {
        a1 += 16;
        v3 = v9;
      }
    }
    *(_QWORD *)v6 = *(_QWORD *)a1;
    result = *(double *)(a1 + 8);
    *(double *)(v6 + 8) = result;
  }
  while (v3 <= v5);
  return result;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  double v9;
  double v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  double v14;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v5 = v4 >> 1;
    v6 = (unint64_t *)(result + 16 * (v4 >> 1));
    v7 = *v6;
    v8 = *(_QWORD *)(a2 - 16);
    if (*v6 >= v8)
    {
      if (v8 < v7)
        return result;
      v10 = *(double *)(result + 16 * v5 + 8);
      v9 = *(double *)(a2 - 8);
      if (v10 >= v9)
        return result;
    }
    else
    {
      v9 = *(double *)(a2 - 8);
      v10 = *((double *)v6 + 1);
    }
    *(_QWORD *)(a2 - 16) = v7;
    *(double *)(a2 - 8) = v10;
    if (v4 >= 2)
    {
      while (1)
      {
        v12 = v5 - 1;
        v5 = (v5 - 1) >> 1;
        v11 = (unint64_t *)(result + 16 * v5);
        v13 = *v11;
        if (*v11 >= v8)
        {
          if (v8 < v13)
            break;
          v14 = *(double *)(result + 16 * v5 + 8);
          if (v14 >= v9)
            break;
        }
        else
        {
          v14 = *((double *)v11 + 1);
        }
        *v6 = v13;
        *((double *)v6 + 1) = v14;
        v6 = (unint64_t *)(result + 16 * v5);
        if (v12 <= 1)
          goto LABEL_13;
      }
    }
    v11 = v6;
LABEL_13:
    *v11 = v8;
    *((double *)v11 + 1) = v9;
  }
  return result;
}

_QWORD *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,long long const*,long long const*,std::back_insert_iterator<std::vector<long long>>,0>(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v6;

  v3 = a1;
  v6 = a3;
  if (a1 == a2)
    return a1;
  v4 = a2;
  do
    std::back_insert_iterator<std::vector<long long>>::operator=[abi:ne180100](&v6, v3++);
  while (v3 != v4);
  return v4;
}

uint64_t *std::back_insert_iterator<std::vector<long long>>::operator=[abi:ne180100](uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;

  v4 = *a1;
  v5 = *(_QWORD **)(*a1 + 8);
  v6 = (_QWORD *)(*a1 + 16);
  if ((unint64_t)v5 >= *v6)
  {
    v8 = *(_QWORD **)v4;
    v9 = ((uint64_t)v5 - *(_QWORD *)v4) >> 3;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 61)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v11 = *v6 - (_QWORD)v8;
    if (v11 >> 2 > v10)
      v10 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v6, v12);
      v8 = *(_QWORD **)v4;
      v5 = *(_QWORD **)(v4 + 8);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[8 * v9];
    v15 = &v13[8 * v12];
    *(_QWORD *)v14 = *a2;
    v7 = v14 + 8;
    while (v5 != v8)
    {
      v16 = *--v5;
      *((_QWORD *)v14 - 1) = v16;
      v14 -= 8;
    }
    *(_QWORD *)v4 = v14;
    *(_QWORD *)(v4 + 8) = v7;
    *(_QWORD *)(v4 + 16) = v15;
    if (v8)
      operator delete(v8);
  }
  else
  {
    *v5 = *a2;
    v7 = v5 + 1;
  }
  *(_QWORD *)(v4 + 8) = v7;
  return a1;
}

_QWORD *std::allocate_shared[abi:ne180100]<CoreML::Recommender::_ItemSimilarityRecommenderData,std::allocator<CoreML::Recommender::_ItemSimilarityRecommenderData>,CoreML::Specification::ItemSimilarityRecommender &,void>@<X0>(const CoreML::Specification::ItemSimilarityRecommender *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x110uLL);
  result = std::__shared_ptr_emplace<CoreML::Recommender::_ItemSimilarityRecommenderData>::__shared_ptr_emplace[abi:ne180100]<CoreML::Specification::ItemSimilarityRecommender &,std::allocator<CoreML::Recommender::_ItemSimilarityRecommenderData>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_2182F0F08(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<CoreML::Recommender::_ItemSimilarityRecommenderData>::__shared_ptr_emplace[abi:ne180100]<CoreML::Specification::ItemSimilarityRecommender &,std::allocator<CoreML::Recommender::_ItemSimilarityRecommenderData>,0>(_QWORD *a1, const CoreML::Specification::ItemSimilarityRecommender *a2)
{
  a1[2] = 0;
  *a1 = &unk_24D938060;
  a1[1] = 0;
  CoreML::Recommender::_ItemSimilarityRecommenderData::_ItemSimilarityRecommenderData((CoreML::Recommender::_ItemSimilarityRecommenderData *)(a1 + 3), a2);
  return a1;
}

void sub_2182F0F54(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<CoreML::Recommender::_ItemSimilarityRecommenderData>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D938060;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<CoreML::Recommender::_ItemSimilarityRecommenderData>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D938060;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

void std::__shared_ptr_emplace<CoreML::Recommender::_ItemSimilarityRecommenderData>::__on_zero_shared(uint64_t a1)
{
  CoreML::Recommender::_ItemSimilarityRecommenderData::~_ItemSimilarityRecommenderData((CoreML::Recommender::_ItemSimilarityRecommenderData *)(a1 + 24));
}

uint64_t _GLOBAL__sub_I_ItemSimilarityRecommenderCommon_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

uint64_t _GLOBAL__sub_I_graph_pylambda_master_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void _GLOBAL__sub_I_lambda_constants_cpp()
{
  void **v0;
  uint64_t v1;
  void **v2;
  uint64_t v3;
  void *__p[2];
  char v5;
  void *v6;
  BOOL (*v7)(turi::$_0 *);
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  std::string::basic_string[abi:ne180100]<0>(__p, "TURI_DEFAULT_NUM_PYLAMBDA_WORKERS");
  v6 = &unk_24D921BF0;
  v7 = turi::$_0::__invoke;
  v8 = &v6;
  turi::globals::register_global<long long>::register_global(&turi::__DEFAULT_NUM_PYLAMBDA_WORKERS__register__instance, __p, &turi::DEFAULT_NUM_PYLAMBDA_WORKERS, 1, &v6);
  v0 = v8;
  if (v8 == &v6)
  {
    v1 = 4;
    v0 = &v6;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v1 = 5;
  }
  (*((void (**)(void))*v0 + v1))();
LABEL_6:
  if (v5 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "TURI_DEFAULT_NUM_GRAPH_LAMBDA_WORKERS");
  v6 = &unk_24D921BF0;
  v7 = turi::$_1::__invoke;
  v8 = &v6;
  turi::globals::register_global<long long>::register_global(&turi::__DEFAULT_NUM_GRAPH_LAMBDA_WORKERS__register__instance, __p, &turi::DEFAULT_NUM_GRAPH_LAMBDA_WORKERS, 1, &v6);
  v2 = v8;
  if (v8 == &v6)
  {
    v3 = 4;
    v2 = &v6;
  }
  else
  {
    if (!v8)
      goto LABEL_13;
    v3 = 5;
  }
  (*((void (**)(void))*v2 + v3))();
LABEL_13:
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_2182F11D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, char *a18)
{
  char *v18;
  char *v20;
  uint64_t v21;

  v20 = a18;
  if (a18 == v18)
  {
    v21 = 4;
    v20 = &a15;
  }
  else
  {
    if (!a18)
      goto LABEL_6;
    v21 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
LABEL_6:
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t _GLOBAL__sub_I_lambda_master_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  qword_254FF9A40 = 0;
  unk_254FF9A48 = 0;
  turi::lambda::lambda_master::lambda_worker_binary_and_args = 0;
  return __cxa_atexit((void (*)(void *))std::vector<std::string>::~vector[abi:ne180100], &turi::lambda::lambda_master::lambda_worker_binary_and_args, &dword_217E69000);
}

void sub_2182F142C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_8_3()
{
  uint64_t v0;
  const char *v1;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, v1, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_pylambda_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

uint64_t _GLOBAL__sub_I_pylambda_function_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

uint64_t _GLOBAL__sub_I_pylambda_worker_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

__n128 CoreML::validate<(MLModelType)607>@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  CoreML *v4;
  _DWORD *v5;
  _DWORD *v6;
  _BOOL8 v7;
  uint64_t *v8;
  __n128 result;
  void *v10;
  void *v11;
  _DWORD *v12;
  void *v13;
  __n128 v14;
  uint64_t v15;
  void *v16;
  __n128 __p;
  uint64_t v18;

  if (*(_QWORD *)(a1 + 16))
    v4 = *(CoreML **)(a1 + 16);
  else
    v4 = (CoreML *)&CoreML::Specification::_ModelDescription_default_instance_;
  CoreML::Result::Result((CoreML::Result *)&v16);
  CoreML::validateModelDescription(v4, (const CoreML::Specification::ModelDescription *)*(unsigned int *)(a1 + 24), (CoreML::Result *)&v13);
  v16 = v13;
  if (SHIBYTE(v18) < 0)
    operator delete((void *)__p.n128_u64[0]);
  __p = v14;
  v18 = v15;
  if (!CoreML::Result::good((CoreML::Result *)&v16))
    goto LABEL_25;
  v5 = operator new(4uLL);
  v10 = v5;
  *v5 = 5;
  v11 = v5 + 1;
  v12 = v5 + 1;
  CoreML::validateDescriptionsContainFeatureWithTypes<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>>((uint64_t)v4 + 16, 1, (int **)&v10, (uint64_t)&v13);
  v16 = v13;
  if (SHIBYTE(v18) < 0)
    operator delete((void *)__p.n128_u64[0]);
  __p = v14;
  v18 = v15;
  HIBYTE(v15) = 0;
  v14.n128_u8[0] = 0;
  if (v10)
  {
    v11 = v10;
    operator delete(v10);
  }
  if (!CoreML::Result::good((CoreML::Result *)&v16))
    goto LABEL_25;
  v6 = operator new(4uLL);
  v10 = v6;
  *v6 = 5;
  v11 = v6 + 1;
  v12 = v6 + 1;
  CoreML::validateDescriptionsContainFeatureWithTypes<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>>((uint64_t)v4 + 40, 1, (int **)&v10, (uint64_t)&v13);
  v16 = v13;
  if (SHIBYTE(v18) < 0)
    operator delete((void *)__p.n128_u64[0]);
  __p = v14;
  v18 = v15;
  HIBYTE(v15) = 0;
  v14.n128_u8[0] = 0;
  if (v10)
  {
    v11 = v10;
    operator delete(v10);
  }
  v7 = CoreML::Result::good((CoreML::Result *)&v16);
  if (v7
    && (*(_DWORD *)(a1 + 44) != 607
      ? (v8 = CoreML::Specification::Normalizer::default_instance((CoreML::Specification::Normalizer *)v7))
      : (v8 = *(uint64_t **)(a1 + 32)),
        *((_DWORD *)v8 + 4) >= 3u))
  {
    std::string::basic_string[abi:ne180100]<0>(&v13, "NormalizerValidator normLx invalid");
    CoreML::Result::Result((_DWORD *)a2, 13);
    if (v14.n128_i8[15] < 0)
      operator delete(v13);
    if (SHIBYTE(v18) < 0)
      operator delete((void *)__p.n128_u64[0]);
  }
  else
  {
LABEL_25:
    *(_QWORD *)a2 = v16;
    result = __p;
    *(__n128 *)(a2 + 8) = __p;
    *(_QWORD *)(a2 + 24) = v18;
  }
  return result;
}

void sub_2182F1828(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a18 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(exception_object);
}

uint64_t _GLOBAL__sub_I_NormalizerValidator_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

uint64_t _GLOBAL__sub_I_python_callbacks_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  turi::python::last_exception = 0u;
  unk_254FF2C18 = 0u;
  xmmword_254FF2C28 = 0u;
  return __cxa_atexit((void (*)(void *))std::pair<std::string,std::string>::~pair, &turi::python::last_exception, &dword_217E69000);
}

void _GLOBAL__sub_I_worker_pool_cpp()
{
  _QWORD *v0;
  uint64_t v1;
  void *__p[2];
  char v3;
  _BYTE v4[24];
  _BYTE *v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  std::string::basic_string[abi:ne180100]<0>(__p, "TURI_LAMBDA_WORKER_CONNECTION_TIMEOUT");
  v5 = 0;
  turi::globals::register_global<double>::register_global(&turi::__LAMBDA_WORKER_CONNECTION_TIMEOUT__register__instance, __p, &turi::LAMBDA_WORKER_CONNECTION_TIMEOUT, 1, v4);
  v0 = v5;
  if (v5 == v4)
  {
    v1 = 4;
    v0 = v4;
  }
  else
  {
    if (!v5)
      goto LABEL_6;
    v1 = 5;
  }
  (*(void (**)(void))(*v0 + 8 * v1))();
LABEL_6:
  if (v3 < 0)
    operator delete(__p[0]);
}

void sub_2182F1A18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  _GLOBAL__sub_I_worker_pool_cpp_cold_1((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::unique_lock<turi::mutex>::lock(uint64_t a1)
{
  pthread_mutex_t *v2;
  uint64_t result;

  v2 = *(pthread_mutex_t **)a1;
  if (v2)
  {
    if (!*(_BYTE *)(a1 + 8))
    {
      result = pthread_mutex_lock(v2);
      *(_BYTE *)(a1 + 8) = 1;
      return result;
    }
  }
  else
  {
    std::__throw_system_error(1, "unique_lock::lock: references null mutex");
  }
  std::__throw_system_error(11, "unique_lock::lock: already locked");
  return _GLOBAL__sub_I_async_reply_socket_cpp();
}

uint64_t _GLOBAL__sub_I_async_reply_socket_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

uint64_t _GLOBAL__sub_I_async_request_socket_cpp()
{
  uint64_t result;

  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  result = __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  ASYNC_SOCKET_CTR = 0;
  return result;
}

uint64_t _GLOBAL__sub_I_get_next_port_number_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

uint64_t _GLOBAL__sub_I_print_zmq_error_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

uint64_t _GLOBAL__sub_I_publish_socket_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void _GLOBAL__sub_I_socket_config_cpp()
{
  _QWORD *v0;
  uint64_t v1;
  void *__p[2];
  char v3;
  _BYTE v4[24];
  _BYTE *v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  std::string::basic_string[abi:ne180100]<0>(__p, "TURI_FORCE_IPC_TO_TCP_FALLBACK");
  v5 = 0;
  turi::globals::register_global<long long>::register_global(&turi::nanosockets::__FORCE_IPC_TO_TCP_FALLBACK__register__instance, __p, &turi::nanosockets::FORCE_IPC_TO_TCP_FALLBACK, 1, v4);
  v0 = v5;
  if (v5 == v4)
  {
    v1 = 4;
    v0 = v4;
  }
  else
  {
    if (!v5)
      goto LABEL_6;
    v1 = 5;
  }
  (*(void (**)(void))(*v0 + 8 * v1))();
LABEL_6:
  if (v3 < 0)
    operator delete(__p[0]);
}

void sub_2182F1CDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  _GLOBAL__sub_I_socket_config_cpp_cold_1((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t _GLOBAL__sub_I_subscribe_socket_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

uint64_t _GLOBAL__sub_I_zmq_msg_vector_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void sub_2182F1DF8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void turi::config::init_cocoa_multithreaded_runtime(turi::config *this)
{
  void *v1;

  if ((turi::config::_cocoa_initialized & 1) == 0)
  {
    v1 = (void *)MEMORY[0x219A19FE4](this);

    objc_autoreleasePoolPop(v1);
    turi::config::_cocoa_initialized = 1;
  }
}

void turi::config::get_apple_system_temporary_directory(turi::config *this@<X0>, _QWORD *a2@<X8>)
{
  void *v3;
  id v4;

  v3 = (void *)MEMORY[0x219A19FE4](this);
  NSTemporaryDirectory();
  v4 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  std::string::basic_string[abi:ne180100]<0>(a2, (char *)objc_msgSend(v4, "UTF8String"));

  objc_autoreleasePoolPop(v3);
}

void sub_2182F1EB4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void _GLOBAL__sub_I_apple_config_mm()
{
  void *v0;

  v0 = (void *)MEMORY[0x219A19FE4]();
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  objc_autoreleasePoolPop(v0);
}

uint64_t _GLOBAL__sub_I_crash_handler_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  std::string::basic_string[abi:ne180100]<0>(BACKTRACE_FNAME, "");
  return __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], BACKTRACE_FNAME, &dword_217E69000);
}

uint64_t total_mem()
{
  size_t v1;
  uint64_t v2;
  int v3[2];
  uint64_t v4;

  v4 = *MEMORY[0x24BDAC8D0];
  v1 = 8;
  v2 = 0;
  *(_QWORD *)v3 = 0x1800000006;
  if (sysctl(v3, 2u, &v2, &v1, 0, 0))
    return 0;
  else
    return v2;
}

uint64_t _GLOBAL__sub_I_net_util_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void sub_2182F21DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

uint64_t _GLOBAL__sub_I_tracepoint_cpp()
{
  uint64_t v0;
  const char *v1;

  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  v0 = pthread_mutex_init(&turi::printlock, 0);
  assert_msg((_DWORD)v0 == 0, v1, v0);
  return __cxa_atexit((void (*)(void *))turi::mutex::~mutex, &turi::printlock, &dword_217E69000);
}

uint64_t turi::process::read_from_child(turi::process *this, uint64_t a2)
{
  turi::process *v2;
  ssize_t v3;
  ssize_t v4;
  void **v5;
  uint64_t v6;
  int *v7;
  file_logger *v8;
  file_logger *started;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  const std::locale::facet *v15;
  uint64_t v16;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v20;
  _QWORD v21[2];
  _QWORD v22[11];
  char v23;
  uint64_t v24;
  char v25[4096];
  uint64_t v26;

  v2 = (turi::process *)MEMORY[0x24BDAC7A8](this, a2);
  v26 = *MEMORY[0x24BDAC8D0];
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v21);
  while (1)
  {
    v3 = turi::process::read_from_child(v2, v25, 0x1000uLL);
    v4 = v3;
    if (v3 < 1)
      break;
    std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<char *>,std::__wrap_iter<char *>>(__p, v25, &v25[v3], v3);
    if ((v20 & 0x80u) == 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    if ((v20 & 0x80u) == 0)
      v6 = v20;
    else
      v6 = (uint64_t)__p[1];
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)v5, v6);
    if ((char)v20 < 0)
      operator delete(__p[0]);
  }
  std::stringbuf::str();
  if (v4 == -1)
  {
    v7 = (int *)global_logger();
    if (v7[169] <= 5)
    {
      if (cppipc::must_cancel((cppipc *)v7))
        log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
      v8 = (file_logger *)global_logger();
      started = file_logger::start_stream(v8, 5, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/system/platform/process/process.cpp", "read_from_child", 22, 1);
      v10 = pthread_getspecific(*((_QWORD *)started + 74));
      if (v10 && *((_BYTE *)v10 + 280))
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10 + 2, (uint64_t)"Error reading from child, message may be partial ", 49);
      v11 = pthread_getspecific(*((_QWORD *)started + 74));
      if (v11 && *((_BYTE *)v11 + 280))
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11 + 2, (uint64_t)"(", 1);
      v12 = file_logger::operator<<<unsigned long>((uint64_t)started);
      v13 = pthread_getspecific(*(_QWORD *)(v12 + 592));
      if (v13 && *((_BYTE *)v13 + 280))
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13 + 2, (uint64_t)" bytes received).", 17);
      v14 = pthread_getspecific(*(_QWORD *)(v12 + 592));
      if (v14)
      {
        if (*((_BYTE *)v14 + 280))
        {
          std::ios_base::getloc((const std::ios_base *)((char *)v14 + *(_QWORD *)(v14[2] - 24) + 16));
          v15 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x24BEDB350]);
          ((void (*)(const std::locale::facet *, uint64_t))v15->__vftable[2].~facet_0)(v15, 10);
          std::locale::~locale((std::locale *)__p);
          std::ostream::put();
          std::ostream::flush();
          file_logger::stream_flush((file_logger *)v12);
          if (*(_DWORD *)(v12 + 600) == 7)
          {
            __print_back_trace();
            exception = __cxa_allocate_exception(8uLL);
            *exception = "LOG_FATAL encountered";
            __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
          }
        }
      }
    }
  }
  v21[0] = *MEMORY[0x24BEDB7F0];
  v16 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v21 + *(_QWORD *)(v21[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v22[0] = v16;
  v22[1] = MEMORY[0x24BEDB848] + 16;
  if (v23 < 0)
    operator delete((void *)v22[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x219A198F4](&v24);
}

void sub_2182F2600(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  std::locale::~locale(&a10);
  if (*(char *)(v16 + 23) < 0)
    operator delete(*(void **)v16);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t _GLOBAL__sub_I_process_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

BOOL turi::process::popen(uint64_t a1, uint64_t a2, uint64_t **a3, int a4, int a5)
{
  int *v10;
  file_logger *v11;
  file_logger *started;
  _QWORD *v13;
  int *v14;
  int *v15;
  file_logger *v16;
  file_logger *v17;
  _QWORD *v18;
  int *v19;
  char *const *v20;
  pid_t v21;
  pid_t v22;
  int *v23;
  file_logger *v24;
  file_logger *v25;
  _QWORD *v26;
  int *v27;
  char *v28;
  uint64_t v29;
  _QWORD *v30;
  const std::locale::facet *v31;
  int *v32;
  file_logger *v33;
  file_logger *v34;
  _QWORD *v35;
  uint64_t v36;
  _BYTE *v37;
  const std::locale::facet *v38;
  const char *v40;
  _QWORD *v41;
  int *v42;
  char *v43;
  size_t v44;
  _QWORD *v45;
  _QWORD *exception;
  std::string v47;
  void *__p[2];
  char v49;
  void *v50[2];
  char v51;
  std::locale v52;
  int v53[2];
  int v54[2];
  uint64_t v55;

  v55 = *MEMORY[0x24BDAC8D0];
  if (!pipe(v54))
    goto LABEL_8;
  v10 = (int *)global_logger();
  if (v10[169] > 6)
    goto LABEL_8;
  if (cppipc::must_cancel((cppipc *)v10))
    log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
  v11 = (file_logger *)global_logger();
  started = file_logger::start_stream(v11, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/system/platform/process/process_unix.cpp", "popen", 119, 1);
  v13 = pthread_getspecific(*((_QWORD *)started + 74));
  if (v13 && *((_BYTE *)v13 + 280))
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13 + 2, (uint64_t)"Error building pipe for process launch: ", 40);
  v14 = __error();
  get_last_err_str(*v14, v50);
  file_logger::operator<<<std::string>((uint64_t)started, (uint64_t)v50);
  if (v51 < 0)
  {
    operator delete(v50[0]);
    if (!a5)
      goto LABEL_18;
  }
  else
  {
LABEL_8:
    if (!a5)
      goto LABEL_18;
  }
  if (pipe(v53))
  {
    v15 = (int *)global_logger();
    if (v15[169] <= 6)
    {
      if (cppipc::must_cancel((cppipc *)v15))
        log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
      v16 = (file_logger *)global_logger();
      v17 = file_logger::start_stream(v16, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/system/platform/process/process_unix.cpp", "popen", 125, 1);
      v18 = pthread_getspecific(*((_QWORD *)v17 + 74));
      if (v18 && *((_BYTE *)v18 + 280))
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18 + 2, (uint64_t)"Error building pipe for process launch: ", 40);
      v19 = __error();
      get_last_err_str(*v19, __p);
      file_logger::operator<<<std::string>((uint64_t)v17, (uint64_t)__p);
      if (v49 < 0)
        operator delete(__p[0]);
    }
  }
LABEL_18:
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v47, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v47 = *(std::string *)a2;
  v20 = (char *const *)turi::convert_args((uint64_t *)&v47, a3);
  v21 = fork();
  v22 = v21;
  if (v21 < 0)
  {
    v23 = (int *)global_logger();
    if (v23[169] <= 6)
    {
      if (cppipc::must_cancel((cppipc *)v23))
        goto LABEL_61;
      v24 = (file_logger *)global_logger();
      v25 = file_logger::start_stream(v24, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/system/platform/process/process_unix.cpp", "popen", 139, 1);
      v26 = pthread_getspecific(*((_QWORD *)v25 + 74));
      if (v26 && *((_BYTE *)v26 + 280))
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26 + 2, (uint64_t)"Fail to fork process: ", 22);
      v27 = __error();
      v28 = strerror(*v27);
      v29 = file_logger::operator<<<char *>((uint64_t)v25, v28);
      v30 = pthread_getspecific(*(_QWORD *)(v29 + 592));
      if (v30)
      {
        if (*((_BYTE *)v30 + 280))
        {
          std::ios_base::getloc((const std::ios_base *)((char *)v30 + *(_QWORD *)(v30[2] - 24) + 16));
          v31 = std::locale::use_facet(&v52, MEMORY[0x24BEDB350]);
          ((void (*)(const std::locale::facet *, uint64_t))v31->__vftable[2].~facet_0)(v31, 10);
          std::locale::~locale(&v52);
          std::ostream::put();
          std::ostream::flush();
          file_logger::stream_flush((file_logger *)v29);
          if (*(_DWORD *)(v29 + 600) == 7)
            goto LABEL_63;
        }
      }
    }
    MEMORY[0x219A199F0](v20, 0x50C80EE9192B6);
    goto LABEL_45;
  }
  if (!v21)
  {
    close(v54[0]);
    if ((a4 & 0x80000000) == 0 && v54[1] != a4)
    {
      *__error() = 0;
      if (dup2(v54[1], a4) != a4)
        goto LABEL_65;
      close(v54[1]);
    }
    if (!a5)
      goto LABEL_55;
    close(v53[1]);
    if (!dup2(v53[0], 0))
    {
      close(v53[0]);
LABEL_55:
      if (*(char *)(a2 + 23) >= 0)
        v40 = (const char *)a2;
      else
        v40 = *(const char **)a2;
      if (execvp(v40, v20) == -1)
      {
        v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"Fail to exec: ", 14);
        v42 = __error();
        v43 = strerror(*v42);
        v44 = strlen(v43);
        v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)v43, v44);
        std::endl[abi:ne180100]<char,std::char_traits<char>>(v45);
      }
      _exit(0);
    }
LABEL_65:
    _exit(1);
  }
  *(_WORD *)(a1 + 12) = 257;
  *(_DWORD *)(a1 + 8) = v21;
  if (a4 < 0)
    close(v54[0]);
  else
    *(_DWORD *)a1 = v54[0];
  close(v54[1]);
  if (a5)
  {
    close(v53[0]);
    *(_DWORD *)(a1 + 4) = v53[1];
  }
  MEMORY[0x219A199F0](v20, 0x50C80EE9192B6);
  v32 = (int *)global_logger();
  if (v32[169] <= 2)
  {
    if (!cppipc::must_cancel((cppipc *)v32))
    {
      v33 = (file_logger *)global_logger();
      v34 = file_logger::start_stream(v33, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/system/platform/process/process_unix.cpp", "popen", 183, 1);
      v35 = pthread_getspecific(*((_QWORD *)v34 + 74));
      if (v35 && *((_BYTE *)v35 + 280))
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35 + 2, (uint64_t)"Launched process with pid: ", 27);
      v36 = file_logger::operator<<<int>((uint64_t)v34);
      v37 = pthread_getspecific(*(_QWORD *)(v36 + 592));
      if (!v37)
        goto LABEL_45;
      if (!v37[280])
        goto LABEL_45;
      std::ios_base::getloc((const std::ios_base *)&v37[*(_QWORD *)(*((_QWORD *)v37 + 2) - 24) + 16]);
      v38 = std::locale::use_facet(&v52, MEMORY[0x24BEDB350]);
      ((void (*)(const std::locale::facet *, uint64_t))v38->__vftable[2].~facet_0)(v38, 10);
      std::locale::~locale(&v52);
      std::ostream::put();
      std::ostream::flush();
      file_logger::stream_flush((file_logger *)v36);
      if (*(_DWORD *)(v36 + 600) != 7)
        goto LABEL_45;
LABEL_63:
      __print_back_trace();
      exception = __cxa_allocate_exception(8uLL);
      *exception = "LOG_FATAL encountered";
      __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
    }
LABEL_61:
    log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
  }
LABEL_45:
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v47.__r_.__value_.__l.__data_);
  return v22 >= 0;
}

void sub_2182F2C50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,std::locale a28)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *turi::convert_args(uint64_t *a1, uint64_t **a2)
{
  _QWORD *result;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;

  result = (_QWORD *)operator new[]();
  if (*((char *)a1 + 23) >= 0)
    v5 = a1;
  else
    v5 = (uint64_t *)*a1;
  *result = v5;
  v6 = *a2;
  v7 = a2[1];
  if (*a2 == v7)
  {
    v10 = 1;
  }
  else
  {
    v8 = 1;
    do
    {
      v9 = v6;
      if (*((char *)v6 + 23) < 0)
        v9 = (uint64_t *)*v6;
      v10 = v8 + 1;
      result[v8] = v9;
      v6 += 3;
      ++v8;
    }
    while (v6 != v7);
  }
  result[v10] = 0;
  return result;
}

uint64_t turi::process::set_nonblocking(turi::process *this, int a2)
{
  unsigned int v4;
  int v5;

  v4 = fcntl(*(_DWORD *)this, 3) & 0xFFFFFFFB;
  if (a2)
    v5 = 4;
  else
    v5 = 0;
  return fcntl(*(_DWORD *)this, 4, v4 | v5);
}

ssize_t turi::process::read_from_child(turi::process *this, void *a2, size_t a3)
{
  int v3;

  if (!*((_BYTE *)this + 12))
    turi::process::read_from_child(void *,unsigned long)::$_0::operator()();
  if (!*((_BYTE *)this + 13))
    turi::process::read_from_child(void *,unsigned long)::$_1::operator()();
  v3 = *(_DWORD *)this;
  if (v3 == -1)
    turi::process::read_from_child(void *,unsigned long)::$_2::operator()();
  return read(v3, a2, a3);
}

BOOL turi::process::write_to_child(turi::process *this, char *__buf, size_t __nbyte)
{
  size_t v5;
  ssize_t v6;

  if (!*((_BYTE *)this + 12))
    turi::process::write_to_child(void const*,unsigned long)::$_0::operator()();
  if (!*((_BYTE *)this + 13))
    turi::process::write_to_child(void const*,unsigned long)::$_1::operator()();
  if (*((_DWORD *)this + 1) == -1)
    turi::process::write_to_child(void const*,unsigned long)::$_2::operator()();
  do
  {
    v5 = __nbyte;
    if (!__nbyte)
      break;
    v6 = write(*((_DWORD *)this + 1), __buf, __nbyte);
    __nbyte = v5 - v6;
    __buf += v6;
  }
  while (v6 != -1);
  return v5 == 0;
}

uint64_t turi::process::exists(turi::process *this)
{
  uint64_t v1;
  pid_t v2;
  int *v3;
  file_logger *v4;
  file_logger *started;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  int *v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  const std::locale::facet *v13;
  _QWORD *exception;
  int v16;
  std::locale v17;

  if (!*((_BYTE *)this + 12))
    turi::process::exists(void)::$_0::operator()();
  v16 = 0;
  v1 = 1;
  v2 = waitpid(*((_DWORD *)this + 2), &v16, 1);
  if (v2)
  {
    if (v2 == -1)
    {
      v3 = (int *)global_logger();
      if (v3[169] <= 5)
      {
        if (cppipc::must_cancel((cppipc *)v3))
          log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
        v4 = (file_logger *)global_logger();
        started = file_logger::start_stream(v4, 5, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/system/platform/process/process_unix.cpp", "exists", 288, 1);
        v6 = pthread_getspecific(*((_QWORD *)started + 74));
        if (v6 && *((_BYTE *)v6 + 280))
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"Failed while checking for existence of process ", 47);
        v7 = file_logger::operator<<<int>((uint64_t)started);
        v8 = pthread_getspecific(*(_QWORD *)(v7 + 592));
        if (v8 && *((_BYTE *)v8 + 280))
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8 + 2, (uint64_t)": ", 2);
        v9 = __error();
        v10 = strerror(*v9);
        v11 = file_logger::operator<<<char *>(v7, v10);
        v12 = pthread_getspecific(*(_QWORD *)(v11 + 592));
        if (v12)
        {
          if (*((_BYTE *)v12 + 280))
          {
            std::ios_base::getloc((const std::ios_base *)((char *)v12 + *(_QWORD *)(v12[2] - 24) + 16));
            v13 = std::locale::use_facet(&v17, MEMORY[0x24BEDB350]);
            ((void (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 10);
            std::locale::~locale(&v17);
            std::ostream::put();
            std::ostream::flush();
            file_logger::stream_flush((file_logger *)v11);
            if (*(_DWORD *)(v11 + 600) == 7)
            {
              __print_back_trace();
              exception = __cxa_allocate_exception(8uLL);
              *exception = "LOG_FATAL encountered";
              __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
            }
          }
        }
      }
    }
    return 0;
  }
  return v1;
}

void sub_2182F3050(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

void turi::process::~process(turi::process *this)
{
  int v2;
  int v3;

  v2 = *(_DWORD *)this;
  if ((v2 & 0x80000000) == 0)
    close(v2);
  v3 = *((_DWORD *)this + 1);
  if ((v3 & 0x80000000) == 0)
    close(v3);
}

uint64_t turi::process::autoreap(uint64_t this)
{
  uint64_t v1;
  unint64_t v2;
  char v3;
  sigaction *v4;
  sigaction v5;

  if (*(_DWORD *)(this + 8))
  {
    v1 = this;
    pthread_mutex_lock(&sigchld_handler_lock);
    v5.__sigaction_u.__sa_handler = 0;
    *(_QWORD *)&v5.sa_mask = 0;
    sigaction(20, &v5, 0);
    v2 = atomic_load(&__proc_ids_to_reap_initialized);
    if (v2 != -1)
    {
      v5.__sigaction_u.__sa_handler = (void (__cdecl *)(int))&v3;
      v4 = &v5;
      std::__call_once(&__proc_ids_to_reap_initialized, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<get_proc_ids_to_reap(void)::$_0 &&>>);
    }
    v5.__sigaction_u.__sa_handler = (void (__cdecl *)(int))*(int *)(v1 + 8);
    std::__tree<unsigned long>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t **)__proc_ids_to_reap, (unint64_t *)&v5, (uint64_t *)&v5);
    v5.__sigaction_u.__sa_handler = (void (__cdecl *)(int))sigchld_handler;
    *(_QWORD *)&v5.sa_mask = 0;
    sigaction(20, &v5, 0);
    return pthread_mutex_unlock(&sigchld_handler_lock);
  }
  return this;
}

void sub_2182F3174(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(&sigchld_handler_lock);
  _Unwind_Resume(a1);
}

void sub_2182F3334(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

_QWORD *std::__call_once_proxy[abi:ne180100]<std::tuple<get_proc_ids_to_reap(void)::$_0 &&>>()
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  result[2] = 0;
  result[1] = 0;
  *result = result + 1;
  __proc_ids_to_reap = (uint64_t)result;
  return result;
}

void sigchld_handler()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t *v2;
  BOOL v3;

  v0 = *(uint64_t **)__proc_ids_to_reap;
  if (*(_QWORD *)__proc_ids_to_reap != __proc_ids_to_reap + 8)
  {
    do
    {
      if (waitpid(*((_DWORD *)v0 + 8), 0, 1) < 1)
      {
        v2 = (uint64_t *)v0[1];
        if (v2)
        {
          do
          {
            v1 = v2;
            v2 = (uint64_t *)*v2;
          }
          while (v2);
        }
        else
        {
          do
          {
            v1 = (uint64_t *)v0[2];
            v3 = *v1 == (_QWORD)v0;
            v0 = v1;
          }
          while (!v3);
        }
      }
      else
      {
        v1 = std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__remove_node_pointer((uint64_t **)__proc_ids_to_reap, v0);
        operator delete(v0);
      }
      v0 = v1;
    }
    while (v1 != (uint64_t *)(__proc_ids_to_reap + 8));
  }
}

_QWORD *OUTLINED_FUNCTION_17_3(_QWORD *a1, uint64_t a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, a2, 20);
}

uint64_t _GLOBAL__sub_I_process_unix_cpp()
{
  uint64_t v0;
  const char *v1;

  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  v0 = pthread_mutex_init(&sigchld_handler_lock, 0);
  assert_msg((_DWORD)v0 == 0, v1, v0);
  return __cxa_atexit((void (*)(void *))turi::mutex::~mutex, &sigchld_handler_lock, &dword_217E69000);
}

CoreML::Specification::ItemSimilarityRecommender_SimilarItems *_tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::ItemSimilarityRecommender_SimilarItems>::TypeHandler>(uint64_t a1)
{
  int *v2;
  uint64_t v3;
  int v4;
  CoreML::Specification::ItemSimilarityRecommender_SimilarItems *Aligned;
  _tc_google::protobuf::Arena *v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(int **)(a1 + 16);
  if (!v2)
  {
    v4 = *(_DWORD *)(a1 + 12);
LABEL_6:
    _tc_google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)a1, v4 + 1);
    v2 = *(int **)(a1 + 16);
    v4 = *v2;
    goto LABEL_7;
  }
  v3 = *(int *)(a1 + 8);
  v4 = *v2;
  if ((int)v3 < *v2)
  {
    *(_DWORD *)(a1 + 8) = v3 + 1;
    return *(CoreML::Specification::ItemSimilarityRecommender_SimilarItems **)&v2[2 * v3 + 2];
  }
  if (v4 == *(_DWORD *)(a1 + 12))
    goto LABEL_6;
LABEL_7:
  *v2 = v4 + 1;
  v6 = *(_tc_google::protobuf::Arena **)a1;
  if (*(_QWORD *)a1)
  {
    CoreML::Specification::ItemSimilarityRecommender_SimilarItems::ItemSimilarityRecommender_SimilarItems(Aligned);
    _tc_google::protobuf::Arena::AddListNode(v6, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::ItemSimilarityRecommender_SimilarItems>);
  }
  else
  {
    Aligned = (CoreML::Specification::ItemSimilarityRecommender_SimilarItems *)operator new();
    CoreML::Specification::ItemSimilarityRecommender_SimilarItems::ItemSimilarityRecommender_SimilarItems(Aligned);
  }
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v8 + 1;
  *(_QWORD *)(v7 + 8 * v8 + 8) = Aligned;
  return Aligned;
}

void sub_2182F3638(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C407C6D6C37);
  _Unwind_Resume(a1);
}

uint64_t _tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::ItemSimilarityRecommender_SimilarItems>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

void _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<std::string>::TypeHandler>(uint64_t a1, __int128 *a2)
{
  int *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  __int128 v8;
  _tc_google::protobuf::Arena *v9;
  _QWORD *Aligned;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *(int **)(a1 + 16);
  if (!v4)
  {
    v6 = *(_DWORD *)(a1 + 12);
LABEL_8:
    _tc_google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)a1, v6 + 1);
    v4 = *(int **)(a1 + 16);
    v6 = *v4;
    goto LABEL_9;
  }
  v5 = *(int *)(a1 + 8);
  v6 = *v4;
  if ((int)v5 < *v4)
  {
    *(_DWORD *)(a1 + 8) = v5 + 1;
    v7 = *(_QWORD *)&v4[2 * v5 + 2];
    if (*(char *)(v7 + 23) < 0)
      operator delete(*(void **)v7);
    v8 = *a2;
    *(_QWORD *)(v7 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v7 = v8;
    *((_BYTE *)a2 + 23) = 0;
    *(_BYTE *)a2 = 0;
    return;
  }
  if (v6 == *(_DWORD *)(a1 + 12))
    goto LABEL_8;
LABEL_9:
  *v4 = v6 + 1;
  v9 = *(_tc_google::protobuf::Arena **)a1;
  if (*(_QWORD *)a1)
  {
    v11 = *((_QWORD *)a2 + 2);
    *(_OWORD *)Aligned = *a2;
    Aligned[2] = v11;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    _tc_google::protobuf::Arena::AddListNode(v9, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<std::string>);
  }
  else
  {
    Aligned = (_QWORD *)operator new();
    *(_OWORD *)Aligned = *a2;
    Aligned[2] = *((_QWORD *)a2 + 2);
    *(_QWORD *)a2 = 0;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
  }
  v12 = *(_QWORD *)(a1 + 16);
  v13 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v13 + 1;
  *(_QWORD *)(v12 + 8 * v13 + 8) = Aligned;
}

CoreML::Specification::ItemSimilarityRecommender_ConnectedItem *_tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::ItemSimilarityRecommender_ConnectedItem>::TypeHandler>(uint64_t a1)
{
  int *v2;
  uint64_t v3;
  int v4;
  CoreML::Specification::ItemSimilarityRecommender_ConnectedItem *Aligned;
  _tc_google::protobuf::Arena *v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(int **)(a1 + 16);
  if (!v2)
  {
    v4 = *(_DWORD *)(a1 + 12);
LABEL_6:
    _tc_google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)a1, v4 + 1);
    v2 = *(int **)(a1 + 16);
    v4 = *v2;
    goto LABEL_7;
  }
  v3 = *(int *)(a1 + 8);
  v4 = *v2;
  if ((int)v3 < *v2)
  {
    *(_DWORD *)(a1 + 8) = v3 + 1;
    return *(CoreML::Specification::ItemSimilarityRecommender_ConnectedItem **)&v2[2 * v3 + 2];
  }
  if (v4 == *(_DWORD *)(a1 + 12))
    goto LABEL_6;
LABEL_7:
  *v2 = v4 + 1;
  v6 = *(_tc_google::protobuf::Arena **)a1;
  if (*(_QWORD *)a1)
  {
    CoreML::Specification::ItemSimilarityRecommender_ConnectedItem::ItemSimilarityRecommender_ConnectedItem(Aligned);
    _tc_google::protobuf::Arena::AddListNode(v6, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::ItemSimilarityRecommender_ConnectedItem>);
  }
  else
  {
    Aligned = (CoreML::Specification::ItemSimilarityRecommender_ConnectedItem *)operator new();
    CoreML::Specification::ItemSimilarityRecommender_ConnectedItem::ItemSimilarityRecommender_ConnectedItem(Aligned);
  }
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v8 + 1;
  *(_QWORD *)(v7 + 8 * v8 + 8) = Aligned;
  return Aligned;
}

void sub_2182F38A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40B7564605);
  _Unwind_Resume(a1);
}

uint64_t _tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::ItemSimilarityRecommender_ConnectedItem>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::FeatureDescription>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::FeatureDescription>);
  return result;
}

void _tc_google::protobuf::internal::GenericTypeHandler<CoreML::Specification::FeatureDescription>::Merge(const CoreML::Specification::FeatureDescription *a1, CoreML::Specification::FeatureDescription *a2)
{
  CoreML::Specification::FeatureDescription::MergeFrom(a2, a1);
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::FeatureDescription>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t _GLOBAL__sub_I_ItemSimilarityRecommender_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

BOOL turi::is_process_running(turi *this)
{
  return kill((pid_t)this, 0) == 0;
}

char *turi::getenv_str@<X0>(turi *this@<X0>, uint64_t a2@<X8>)
{
  char *result;
  __int128 v5;
  uint64_t v6;

  result = getenv((const char *)this);
  if (result)
  {
    result = (char *)std::string::basic_string[abi:ne180100]<0>(&v5, result);
    *(_OWORD *)(a2 + 8) = v5;
    *(_QWORD *)(a2 + 24) = v6;
    *(_BYTE *)a2 = 1;
  }
  else
  {
    *(_BYTE *)a2 = 0;
  }
  return result;
}

uint64_t _GLOBAL__sub_I_process_util_unix_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void __cxx_global_var_init_4_13()
{
  {
    boost::interprocess::mapped_region::page_size_holder<0>::PageSize = sysconf(29);
  }
}

void __cxx_global_var_init_21_1()
{
  uint64_t v0;
  int v1;

  {
    v0 = sysconf(58);
    if ((unint64_t)v0 > 0xFFFFFFFE)
      v1 = -1;
    else
      v1 = v0;
    if (v0 < 1)
      v1 = 1;
    boost::interprocess::ipcdetail::num_core_holder<0>::num_cores = v1;
  }
}

uint64_t _GLOBAL__sub_I_shmipc_cpp()
{
  uint64_t result;

  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  result = __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  turi::shmipc::SERVER_IPC_COUNTER = 0;
  return result;
}

uint64_t _GLOBAL__sub_I_shmipc_garbage_collect_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void CoreML::Specification::CoreMLModels::protobuf_TextClassifier_2eproto::TableStruct::InitDefaultsImpl(CoreML::Specification::CoreMLModels::protobuf_TextClassifier_2eproto::TableStruct *this, uint64_t a2, uint64_t a3, const char *a4)
{
  _tc_google::protobuf::internal *v4;
  CoreML::Specification::protobuf_DataStructures_2eproto *v5;

  _tc_google::protobuf::internal::VerifyVersion((_tc_google::protobuf::internal *)0x2DD278, (_tc_google::protobuf::internal *)0x2DD278, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/external/coremltools_wrap/coremltools/mlmodel/build/format/TextClassifier.pb.cc", a4);
  _tc_google::protobuf::internal::InitProtobufDefaults(v4);
  CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults(v5);
  CoreML::Specification::CoreMLModels::_TextClassifier_default_instance_ = (uint64_t)&off_24D9380B0;
  *(_QWORD *)algn_254FF9AB8 = 0;
  qword_254FF9AC0 = (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string;
  unk_254FF9AC8 = &_tc_google::protobuf::internal::fixed_address_empty_string;
  dword_254FF9AD0 = 0;
  qword_254FF9AE0 = 0;
  byte_254FF9AE8 = 1;
}

void CoreML::Specification::CoreMLModels::protobuf_TextClassifier_2eproto::InitDefaults(CoreML::Specification::CoreMLModels::protobuf_TextClassifier_2eproto *this)
{
  unint64_t v1;
  _QWORD v2[2];
  char v3;

  v1 = atomic_load(&CoreML::Specification::CoreMLModels::protobuf_TextClassifier_2eproto::InitDefaults(void)::once);
  if (v1 != 2)
  {
    v2[0] = &off_24D93BCB0;
    v2[1] = CoreML::Specification::CoreMLModels::protobuf_TextClassifier_2eproto::TableStruct::InitDefaultsImpl;
    v3 = 0;
    _tc_google::protobuf::GoogleOnceInitImpl(&CoreML::Specification::CoreMLModels::protobuf_TextClassifier_2eproto::InitDefaults(void)::once, (uint64_t)v2);
    _tc_google::protobuf::internal::FunctionClosure0::~FunctionClosure0((_tc_google::protobuf::internal::FunctionClosure0 *)v2);
  }
}

void sub_2182F3BD8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  _tc_google::protobuf::internal::FunctionClosure0::~FunctionClosure0((_tc_google::protobuf::internal::FunctionClosure0 *)va);
  _Unwind_Resume(a1);
}

CoreML::Specification::CoreMLModels::TextClassifier *CoreML::Specification::CoreMLModels::TextClassifier::TextClassifier(CoreML::Specification::CoreMLModels::TextClassifier *this)
{
  *(_QWORD *)this = &off_24D9380B0;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::CoreMLModels::TextClassifier *)&CoreML::Specification::CoreMLModels::_TextClassifier_default_instance_)
    CoreML::Specification::CoreMLModels::protobuf_TextClassifier_2eproto::InitDefaults(this);
  *((_QWORD *)this + 2) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 3) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  *((_DWORD *)this + 8) = 0;
  *((_QWORD *)this + 6) = 0;
  return this;
}

void sub_2182F3C48(_Unwind_Exception *a1)
{
  uint64_t *v1;

  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::CoreMLModels::TextClassifier::~TextClassifier(CoreML::Specification::CoreMLModels::TextClassifier *this)
{
  *(_QWORD *)this = &off_24D9380B0;
  CoreML::Specification::CoreMLModels::Gazetteer::SharedDtor(this);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  CoreML::Specification::CoreMLModels::TextClassifier::~TextClassifier(this);
  JUMPOUT(0x219A19A08);
}

uint64_t *CoreML::Specification::CoreMLModels::TextClassifier::default_instance(CoreML::Specification::CoreMLModels::TextClassifier *this)
{
  CoreML::Specification::CoreMLModels::protobuf_TextClassifier_2eproto::InitDefaults(this);
  return &CoreML::Specification::CoreMLModels::_TextClassifier_default_instance_;
}

CoreML::Specification::CoreMLModels::TextClassifier *CoreML::Specification::CoreMLModels::TextClassifier::New(CoreML::Specification::CoreMLModels::TextClassifier *this, _tc_google::protobuf::Arena *a2)
{
  CoreML::Specification::CoreMLModels::TextClassifier *v3;

  v3 = (CoreML::Specification::CoreMLModels::TextClassifier *)operator new();
  CoreML::Specification::CoreMLModels::TextClassifier::TextClassifier(v3);
  if (a2)
    _tc_google::protobuf::Arena::Own<CoreML::Specification::CoreMLModels::TextClassifier>(a2, v3);
  return v3;
}

void sub_2182F3D30(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C40C43D3D65);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::CoreMLModels::TextClassifier>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::CoreMLModels::TextClassifier>);
  return result;
}

uint64_t CoreML::Specification::CoreMLModels::TextClassifier::Clear(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = this;
  v2 = *(_QWORD *)(this + 16);
  if ((uint64_t *)v2 != &_tc_google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(_BYTE **)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 23) = 0;
    }
  }
  v3 = *(_QWORD *)(this + 24);
  if ((uint64_t *)v3 != &_tc_google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v3 + 23) < 0)
    {
      **(_BYTE **)v3 = 0;
      *(_QWORD *)(v3 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v3 = 0;
      *(_BYTE *)(v3 + 23) = 0;
    }
  }
  *(_DWORD *)(this + 32) = 0;
  if (*(_DWORD *)(this + 52) == 200)
  {
    this = *(_QWORD *)(this + 40);
    if (this)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
  }
  *(_DWORD *)(v1 + 52) = 0;
  return this;
}

BOOL CoreML::Specification::CoreMLModels::TextClassifier::MergePartialFromCodedStream(CoreML::Specification::CoreMLModels::TextClassifier *this, _tc_google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  std::string **v5;
  std::string **v6;
  unsigned __int8 *v7;
  unint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  unsigned int v13;
  std::string *v14;
  _BOOL8 result;
  std::string *v16;
  const char *size;
  CoreML::Specification::StringVector *v18;
  char *v19;
  int v20;
  std::string *v21;
  char *v22;
  int VarintSizeAsIntFallback;
  unint64_t v24;
  unsigned int v25;
  int v26;
  unsigned int TagFallback;
  uint64_t Varint32Fallback;

  v5 = (std::string **)((char *)this + 24);
  v6 = (std::string **)((char *)this + 16);
  while (1)
  {
    while (1)
    {
      v7 = *(unsigned __int8 **)a2;
      v8 = *((_QWORD *)a2 + 1);
      if (*(_QWORD *)a2 >= v8)
      {
        v10 = 0;
LABEL_45:
        TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v10);
        v11 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x3FFF) << 32);
        if ((v11 & 0x100000000) == 0)
          goto LABEL_46;
        goto LABEL_9;
      }
      v9 = v7 + 1;
      v10 = *v7;
      if ((char)*v7 >= 1)
        break;
      if ((unint64_t)v9 >= v8)
        goto LABEL_45;
      v12 = *v9;
      if ((v10 & ~v12) < 0x80)
        goto LABEL_45;
      *(_QWORD *)a2 = v7 + 2;
      v11 = (v10 + (v12 << 7) - 128) | 0x100000000;
LABEL_9:
      v13 = v11 >> 3;
      if (v11 >> 3 > 0x63)
      {
        if (v13 == 100)
        {
          if (v11 != 34)
            goto LABEL_46;
          v21 = *v5;
          if (*v5 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string)
          {
            _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v5, (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string);
            v21 = *v5;
          }
          if (!_tc_google::protobuf::internal::WireFormatLite::ReadBytes((char **)a2, v21))
            return 0;
        }
        else
        {
          if (v13 != 200 || v11 != 66)
            goto LABEL_46;
          if (*((_DWORD *)this + 13) == 200)
          {
            v18 = (CoreML::Specification::StringVector *)*((_QWORD *)this + 5);
          }
          else
          {
            *((_DWORD *)this + 13) = 200;
            v18 = (CoreML::Specification::StringVector *)operator new();
            CoreML::Specification::StringVector::StringVector(v18);
            *((_QWORD *)this + 5) = v18;
          }
          v22 = *(char **)a2;
          if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v22 < 0)
          {
            VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
            if (VarintSizeAsIntFallback < 0)
              return 0;
          }
          else
          {
            VarintSizeAsIntFallback = *v22;
            *(_QWORD *)a2 = v22 + 1;
          }
          v24 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, VarintSizeAsIntFallback);
          if ((v24 & 0x8000000000000000) != 0)
            return 0;
          v26 = v24;
          result = CoreML::Specification::StringVector::MergePartialFromCodedStream(v18, (char **)a2, v25);
          if (!result)
            return result;
          if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v26))
            return 0;
        }
      }
      else if (v13 == 1)
      {
        if (v11 != 8)
          goto LABEL_46;
        v19 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1))
        {
          v20 = 0;
          goto LABEL_53;
        }
        v20 = *v19;
        if (*v19 < 0)
        {
LABEL_53:
          Varint32Fallback = _tc_google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v20);
          *((_DWORD *)this + 8) = Varint32Fallback;
          if (Varint32Fallback < 0)
            return 0;
        }
        else
        {
          *((_DWORD *)this + 8) = v20;
          *(_QWORD *)a2 = v19 + 1;
        }
      }
      else
      {
        if (v13 != 10 || v11 != 82)
          goto LABEL_46;
        v14 = *v6;
        if (*v6 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string)
        {
          _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v6, (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string);
          v14 = *v6;
        }
        result = _tc_google::protobuf::internal::WireFormatLite::ReadBytes((char **)a2, v14);
        if (!result)
          return result;
        v16 = *v6;
        if (SHIBYTE((*v6)->__r_.__value_.__r.__words[2]) < 0)
        {
          v16 = (std::string *)v16->__r_.__value_.__r.__words[0];
          size = (const char *)(*v6)->__r_.__value_.__l.__size_;
        }
        else
        {
          size = (const char *)HIBYTE((*v6)->__r_.__value_.__r.__words[2]);
        }
        if (!_tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String((_tc_google::protobuf::internal *)v16, size, 0, (uint64_t)"CoreML.Specification.CoreMLModels.TextClassifier.language"))return 0;
      }
    }
    *(_QWORD *)a2 = v9;
    v11 = v10 | 0x100000000;
    if ((v11 & 0x100000000) != 0)
      goto LABEL_9;
LABEL_46:
    if (!(_DWORD)v11 || (v11 & 7) == 4)
      return 1;
    if ((_tc_google::protobuf::internal::WireFormatLite::SkipField(a2, (_tc_google::protobuf::io::CodedInputStream *)v11, a3) & 1) == 0)return 0;
  }
}

void sub_2182F40D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C40290C9B23);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::CoreMLModels::TextClassifier::SerializeWithCachedSizes(CoreML::Specification::CoreMLModels::TextClassifier *this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  unsigned int v6;
  uint64_t result;
  const char *v8;
  uint64_t v9;

  v6 = *((_DWORD *)this + 8);
  if (v6)
    _tc_google::protobuf::internal::WireFormatLite::WriteUInt32(1, v6, a2, a4);
  result = *((_QWORD *)this + 2);
  if (*(char *)(result + 23) < 0)
  {
    v8 = *(const char **)(result + 8);
    if (!v8)
      goto LABEL_9;
    result = *(_QWORD *)result;
    goto LABEL_8;
  }
  v8 = (const char *)*(unsigned __int8 *)(result + 23);
  if (*(_BYTE *)(result + 23))
  {
LABEL_8:
    _tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String((_tc_google::protobuf::internal *)result, v8, 1, (uint64_t)"CoreML.Specification.CoreMLModels.TextClassifier.language");
    result = _tc_google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(10, *((_QWORD *)this + 2), a2);
  }
LABEL_9:
  v9 = *((_QWORD *)this + 3);
  if ((*(char *)(v9 + 23) & 0x80000000) == 0)
  {
    if (!*(_BYTE *)(v9 + 23))
      goto LABEL_12;
    goto LABEL_11;
  }
  if (*(_QWORD *)(v9 + 8))
LABEL_11:
    result = _tc_google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(100, v9, a2);
LABEL_12:
  if (*((_DWORD *)this + 13) == 200)
    return _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0xC8, *((_QWORD *)this + 5), a2, a4);
  return result;
}

uint64_t CoreML::Specification::CoreMLModels::TextClassifier::ByteSizeLong(CoreML::Specification::CoreMLModels::TextClassifier *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;

  v2 = *((_QWORD *)this + 2);
  v3 = *(unsigned __int8 *)(v2 + 23);
  if (*(char *)(v2 + 23) < 0)
  {
    if (*(_QWORD *)(v2 + 8))
      goto LABEL_3;
LABEL_7:
    v5 = 0;
    goto LABEL_8;
  }
  if (!*(_BYTE *)(v2 + 23))
    goto LABEL_7;
LABEL_3:
  v4 = *(_QWORD *)(v2 + 8);
  if ((v3 & 0x80u) == 0)
    v4 = v3;
  v5 = v4 + ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_8:
  v6 = *((_QWORD *)this + 3);
  v7 = *(unsigned __int8 *)(v6 + 23);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(_QWORD *)(v6 + 8))
      goto LABEL_13;
  }
  else if (!*(_BYTE *)(v6 + 23))
  {
    goto LABEL_13;
  }
  v8 = *(_QWORD *)(v6 + 8);
  if ((v7 & 0x80u) == 0)
    v8 = v7;
  v5 += v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 2;
LABEL_13:
  v9 = *((_DWORD *)this + 8);
  if (v9)
    v5 += ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if (*((_DWORD *)this + 13) == 200)
  {
    v10 = CoreML::Specification::StringVector::ByteSizeLong(*((CoreML::Specification::StringVector **)this + 5));
    v5 += v10 + ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6) + 2;
  }
  *((_DWORD *)this + 12) = v5;
  return v5;
}

void CoreML::Specification::CoreMLModels::TextClassifier::MergeFrom(CoreML::Specification::CoreMLModels::TextClassifier *this, const CoreML::Specification::CoreMLModels::TextClassifier *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  int v9;
  CoreML::Specification::StringVector *v10;
  CoreML::Specification::StringVector *v11;
  uint64_t *v12;

  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_QWORD *)a2 + 2);
  if (*(char *)(v5 + 23) < 0)
  {
    if (!*(_QWORD *)(v5 + 8))
      goto LABEL_11;
  }
  else if (!*(_BYTE *)(v5 + 23))
  {
    goto LABEL_11;
  }
  v6 = (uint64_t *)*((_QWORD *)this + 2);
  if (v6 != (uint64_t *)v5)
  {
    if (v6 == &_tc_google::protobuf::internal::fixed_address_empty_string)
      _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v5);
    else
      std::string::operator=(*((std::string **)this + 2), (const std::string *)v5);
  }
LABEL_11:
  v7 = *((_QWORD *)a2 + 3);
  if (*(char *)(v7 + 23) < 0)
  {
    if (!*(_QWORD *)(v7 + 8))
      goto LABEL_19;
  }
  else if (!*(_BYTE *)(v7 + 23))
  {
    goto LABEL_19;
  }
  v8 = (uint64_t *)*((_QWORD *)this + 3);
  if (v8 != (uint64_t *)v7)
  {
    if (v8 == &_tc_google::protobuf::internal::fixed_address_empty_string)
      _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 3, v7);
    else
      std::string::operator=(*((std::string **)this + 3), (const std::string *)v7);
  }
LABEL_19:
  v9 = *((_DWORD *)a2 + 8);
  if (v9)
    *((_DWORD *)this + 8) = v9;
  if (*((_DWORD *)a2 + 13) == 200)
  {
    if (*((_DWORD *)this + 13) == 200)
    {
      v10 = (CoreML::Specification::StringVector *)*((_QWORD *)this + 5);
    }
    else
    {
      *((_DWORD *)this + 13) = 200;
      v10 = (CoreML::Specification::StringVector *)operator new();
      v11 = (CoreML::Specification::StringVector *)CoreML::Specification::StringVector::StringVector(v10);
      *((_QWORD *)this + 5) = v10;
      if (*((_DWORD *)a2 + 13) != 200)
      {
        v12 = CoreML::Specification::StringVector::default_instance(v11);
        goto LABEL_28;
      }
    }
    v12 = (uint64_t *)*((_QWORD *)a2 + 5);
LABEL_28:
    CoreML::Specification::V5::TensorValue_RepeatedStrings::MergeFrom((std::string *)v10, (const CoreML::Specification::V5::TensorValue_RepeatedStrings *)v12);
  }
}

void sub_2182F4460(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C40290C9B23);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::CoreMLModels::TextClassifier::IsInitialized(CoreML::Specification::CoreMLModels::TextClassifier *this)
{
  return 1;
}

_QWORD *CoreML::Specification::CoreMLModels::TextClassifier::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.CoreMLModels.TextClassifier");
}

CoreML::Specification::CoreMLModels::TextClassifier *CoreML::Specification::CoreMLModels::TextClassifier::New(CoreML::Specification::CoreMLModels::TextClassifier *this)
{
  return CoreML::Specification::CoreMLModels::TextClassifier::New(this, 0);
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::CoreMLModels::TextClassifier>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t _GLOBAL__sub_I_TextClassifier_pb_cc()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

float turi::timer::approx_time_seconds(turi::timer *this)
{
  turi::get_hms_timer(this);
  return (float)(unint64_t)qword_254FF2E70 / 10.0;
}

void turi::get_hms_timer(turi *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      turi::hundredms_timer::hundredms_timer((turi::hundredms_timer *)&turi::get_hms_timer(void)::hmstimer);
      __cxa_atexit((void (*)(void *))turi::hundredms_timer::~hundredms_timer, &turi::get_hms_timer(void)::hmstimer, &dword_217E69000);
    }
  }
}

void sub_2182F4590(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t turi::hundredms_timer::stop_timer(uint64_t this)
{
  uint64_t v1;
  pthread_mutex_t *v2;
  int v3;
  turi::thread *v4;

  if (!*(_BYTE *)(this + 168))
  {
    v1 = this;
    v2 = (pthread_mutex_t *)(this + 56);
    pthread_mutex_lock((pthread_mutex_t *)(this + 56));
    *(_BYTE *)(v1 + 168) = 1;
    v3 = pthread_cond_signal((pthread_cond_t *)(v1 + 120));
    assert_msg(v3 == 0, "Condition variable signal error %d", v3);
    pthread_mutex_unlock(v2);
    return turi::thread::join(v1, v4);
  }
  return this;
}

uint64_t turi::timer::sleep_ms(unint64_t this)
{
  uint64_t result;
  timespec v2;

  v2.tv_sec = this / 0x3E8;
  v2.tv_nsec = 1000000 * (this % 0x3E8);
  do
    result = nanosleep(&v2, &v2);
  while ((_DWORD)result == -1);
  return result;
}

uint64_t turi::estimate_ticks_per_second(turi *this)
{
  uint64_t result;
  std::chrono::system_clock::time_point v2;
  __int128 v3;

  result = turi::rtdsc_ticks_per_sec;
  if (!turi::rtdsc_ticks_per_sec)
  {
    pthread_mutex_lock(&turi::rtdsc_ticks_per_sec_mutex);
    if (!turi::rtdsc_ticks_per_sec)
    {
      v2.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
      v3 = xmmword_2186F1660;
      while (nanosleep((const timespec *)&v3, (timespec *)&v3) == -1)
        ;
      turi::rtdsc_ticks_per_sec = 1000 * (std::chrono::system_clock::now().__d_.__rep_ - v2.__d_.__rep_);
    }
    pthread_mutex_unlock(&turi::rtdsc_ticks_per_sec_mutex);
    return turi::rtdsc_ticks_per_sec;
  }
  return result;
}

turi::hundredms_timer *turi::hundredms_timer::hundredms_timer(turi::hundredms_timer *this)
{
  timeval *v2;
  int v3;
  uint64_t v5[4];

  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_BYTE *)this + 24) = 0;
  *(_QWORD *)this = 0x800000;
  v2 = (timeval *)((char *)this + 40);
  gettimeofday((timeval *)((char *)this + 40), 0);
  v3 = pthread_mutex_init((pthread_mutex_t *)((char *)this + 56), 0);
  assert_msg(v3 == 0, "Mutex create error %d", v3);
  turi::conditional::conditional((pthread_cond_t *)((char *)this + 120));
  *((_BYTE *)this + 168) = 0;
  gettimeofday(v2, 0);
  v5[2] = 0;
  v5[3] = (uint64_t)this;
  v5[0] = (uint64_t)boost::function0<void>::assign_to<boost::_bi::bind_t<void,boost::_mfi::mf0<void,turi::hundredms_timer>,boost::_bi::list1<boost::_bi::value<turi::hundredms_timer*>>>>(boost::_bi::bind_t<void,boost::_mfi::mf0<void,turi::hundredms_timer>,boost::_bi::list1<boost::_bi::value<turi::hundredms_timer*>>>)::stored_vtable
        + 1;
  v5[1] = (uint64_t)turi::hundredms_timer::alarm_thread;
  turi::thread::launch((uint64_t)this, v5);
  boost::function0<void>::~function0(v5);
  return this;
}

void sub_2182F47E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  pthread_mutex_t *v3;
  pthread_cond_t *v4;
  va_list va;

  va_start(va, a3);
  boost::function0<void>::~function0((uint64_t *)va);
  turi::conditional::~conditional(v4);
  turi::mutex::~mutex(v3);
  _Unwind_Resume(a1);
}

uint64_t turi::hundredms_timer::alarm_thread(turi::hundredms_timer *this)
{
  pthread_mutex_t *v2;
  timeval v4;
  timespec v5;

  v2 = (pthread_mutex_t *)((char *)this + 56);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 56));
  for (;
        !*((_BYTE *)this + 168);
        *((_QWORD *)this + 4) = (unint64_t)(((double)(LODWORD(v5.tv_nsec) - *((_DWORD *)this + 12)) / 1000000.0
                                                  + (double)(v5.tv_sec - *((_QWORD *)this + 5)))
                                                 * 10.0))
  {
    gettimeofday(&v4, 0);
    v5.tv_sec = v4.tv_sec;
    v5.tv_nsec = 1000 * v4.tv_usec + 50000000;
    if (v4.tv_usec >= 950001)
    {
      v5.tv_sec = v4.tv_sec + 1;
      v5.tv_nsec = 1000 * v4.tv_usec - 950000000;
    }
    pthread_cond_timedwait((pthread_cond_t *)((char *)this + 120), v2, &v5);
    gettimeofday((timeval *)&v5, 0);
  }
  return pthread_mutex_unlock(v2);
}

uint64_t boost::detail::function::functor_manager<boost::_bi::bind_t<void,boost::_mfi::mf0<void,turi::hundredms_timer>,boost::_bi::list1<boost::_bi::value<turi::hundredms_timer*>>>>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v4;
  __int128 v5;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x80000002186F15FFLL & 0x7FFFFFFFFFFFFFFFLL)
        || (result = strcmp((const char *)result, (const char *)(0x80000002186F15FFLL & 0x7FFFFFFFFFFFFFFFLL)),
            !(_DWORD)result))
      {
        *(_QWORD *)a2 = v4;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
    }
  }
  else
  {
    v5 = *(_OWORD *)result;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

uint64_t boost::detail::function::void_function_obj_invoker0<boost::_bi::bind_t<void,boost::_mfi::mf0<void,turi::hundredms_timer>,boost::_bi::list1<boost::_bi::value<turi::hundredms_timer*>>>,void>::invoke(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(uint64_t (**)(_QWORD *))a1;
  v3 = (_QWORD *)(*(_QWORD *)(a1 + 16) + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

void turi::hundredms_timer::~hundredms_timer(turi::hundredms_timer *this)
{
  turi::hundredms_timer::stop_timer((uint64_t)this);
  turi::conditional::~conditional((pthread_cond_t *)((char *)this + 120));
  turi::mutex::~mutex((pthread_mutex_t *)((char *)this + 56));
}

void sub_2182F4BB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

uint64_t _GLOBAL__sub_I_timer_cpp()
{
  int v0;

  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  v0 = pthread_mutex_init(&turi::rtdsc_ticks_per_sec_mutex, 0);
  assert_msg(v0 == 0, "Mutex create error %d", v0);
  return __cxa_atexit((void (*)(void *))turi::mutex::~mutex, &turi::rtdsc_ticks_per_sec_mutex, &dword_217E69000);
}

double CoreML::Specification::protobuf_SVM_2eproto::TableStruct::InitDefaultsImpl(CoreML::Specification::protobuf_SVM_2eproto::TableStruct *this, uint64_t a2, uint64_t a3, const char *a4)
{
  _tc_google::protobuf::internal *v4;
  CoreML::Specification::protobuf_DataStructures_2eproto *v5;
  double result;

  _tc_google::protobuf::internal::VerifyVersion((_tc_google::protobuf::internal *)0x2DD278, (_tc_google::protobuf::internal *)0x2DD278, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/external/coremltools_wrap/coremltools/mlmodel/build/format/SVM.pb.cc", a4);
  _tc_google::protobuf::internal::InitProtobufDefaults(v4);
  CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults(v5);
  CoreML::Specification::_LinearKernel_default_instance_ = (uint64_t)&off_24D938180;
  qword_254FF9B00 = 0;
  dword_254FF9B08 = 0;
  byte_254FF9B10 = 1;
  qword_254FF9B20 = 0;
  qword_254FF9B28 = 0;
  CoreML::Specification::_RBFKernel_default_instance_ = (uint64_t)&off_24D938218;
  dword_254FF9B30 = 0;
  byte_254FF9B38 = 1;
  CoreML::Specification::_PolyKernel_default_instance_ = (uint64_t)&off_24D9382B0;
  result = 0.0;
  unk_254FF9B48 = 0u;
  unk_254FF9B58 = 0u;
  byte_254FF9B68 = 1;
  CoreML::Specification::_SigmoidKernel_default_instance_ = (uint64_t)&off_24D938348;
  *(_QWORD *)algn_254FF9B78 = 0;
  qword_254FF9B80 = 0;
  unk_254FF9B88 = 0;
  dword_254FF9B90 = 0;
  byte_254FF9B98 = 1;
  CoreML::Specification::_Kernel_default_instance_ = (uint64_t)&off_24D9383E0;
  unk_254FF9BA8 = 0;
  qword_254FF9BB8 = 0;
  byte_254FF9BC0 = 1;
  CoreML::Specification::_SparseNode_default_instance_ = (uint64_t)&off_24D938478;
  unk_254FF9BF0 = 0;
  qword_254FF9BF8 = 0;
  unk_254FF9C00 = 0;
  byte_254FF9C08 = 1;
  CoreML::Specification::_SparseVector_default_instance_ = (uint64_t)&off_24D938510;
  unk_254FF9C18 = 0u;
  unk_254FF9C28 = 0u;
  dword_254FF9C38 = 0;
  byte_254FF9C40 = 1;
  CoreML::Specification::_SparseSupportVectors_default_instance_ = (uint64_t)&off_24D9385A8;
  unk_254FF9C50 = 0u;
  unk_254FF9C60 = 0u;
  dword_254FF9C70 = 0;
  byte_254FF9C78 = 1;
  CoreML::Specification::_DenseVector_default_instance_ = (uint64_t)&off_24D938640;
  *(_QWORD *)algn_254FF9C88 = 0;
  qword_254FF9C90 = 0;
  unk_254FF9C98 = 0;
  dword_254FF9CA4 = 0;
  byte_254FF9CA8 = 1;
  CoreML::Specification::_DenseSupportVectors_default_instance_ = (uint64_t)&off_24D9386D8;
  dword_254FF9CD8 = 0;
  unk_254FF9CC8 = 0u;
  unk_254FF9CB8 = 0u;
  byte_254FF9CE0 = 1;
  CoreML::Specification::_Coefficients_default_instance_ = (uint64_t)&off_24D938770;
  unk_254FF9CF0 = 0;
  qword_254FF9CF8 = 0;
  unk_254FF9D00 = 0;
  dword_254FF9D0C = 0;
  byte_254FF9D10 = 1;
  CoreML::Specification::_SupportVectorRegressor_default_instance_ = (uint64_t)&off_24D938808;
  qword_254FF9D48 = 0;
  xmmword_254FF9D30 = 0u;
  unk_254FF9D20 = 0u;
  byte_254FF9D50 = 1;
  qword_254FF9DC0 = 0;
  unk_254FF9DC8 = 0;
  qword_254FF9DD8 = 0;
  unk_254FF9DE0 = 0;
  CoreML::Specification::_SupportVectorClassifier_default_instance_ = (uint64_t)&off_24D9388A0;
  unk_254FF9D70 = 0;
  qword_254FF9D78 = 0;
  unk_254FF9D80 = 0;
  qword_254FF9DB0 = 0;
  unk_254FF9DA0 = 0u;
  unk_254FF9D90 = 0u;
  dword_254FF9E10 = 0;
  qword_254FF9E08 = 0;
  byte_254FF9E18 = 1;
  qword_254FF9D28 = (uint64_t)&CoreML::Specification::_Kernel_default_instance_;
  *(_QWORD *)&xmmword_254FF9D30 = &CoreML::Specification::_Coefficients_default_instance_;
  qword_254FF9DF0 = (uint64_t)&CoreML::Specification::_Kernel_default_instance_;
  return result;
}

void CoreML::Specification::protobuf_SVM_2eproto::InitDefaults(CoreML::Specification::protobuf_SVM_2eproto *this)
{
  unint64_t v1;
  _QWORD v2[2];
  char v3;

  v1 = atomic_load(&CoreML::Specification::protobuf_SVM_2eproto::InitDefaults(void)::once);
  if (v1 != 2)
  {
    v2[0] = &off_24D93BCB0;
    v2[1] = CoreML::Specification::protobuf_SVM_2eproto::TableStruct::InitDefaultsImpl;
    v3 = 0;
    _tc_google::protobuf::GoogleOnceInitImpl(&CoreML::Specification::protobuf_SVM_2eproto::InitDefaults(void)::once, (uint64_t)v2);
    _tc_google::protobuf::internal::FunctionClosure0::~FunctionClosure0((_tc_google::protobuf::internal::FunctionClosure0 *)v2);
  }
}

void sub_2182F4F40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  _tc_google::protobuf::internal::FunctionClosure0::~FunctionClosure0((_tc_google::protobuf::internal::FunctionClosure0 *)va);
  _Unwind_Resume(a1);
}

CoreML::Specification::LinearKernel *CoreML::Specification::LinearKernel::LinearKernel(CoreML::Specification::LinearKernel *this)
{
  *(_QWORD *)this = &off_24D938180;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::LinearKernel *)&CoreML::Specification::_LinearKernel_default_instance_)
    CoreML::Specification::protobuf_SVM_2eproto::InitDefaults(this);
  *((_DWORD *)this + 4) = 0;
  return this;
}

void sub_2182F4FA0(_Unwind_Exception *a1)
{
  uint64_t *v1;

  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::LinearKernel::~LinearKernel(CoreML::Specification::LinearKernel *this)
{
  *(_QWORD *)this = &off_24D938180;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  *(_QWORD *)this = &off_24D938180;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
  JUMPOUT(0x219A19A08);
}

CoreML::Specification::LinearKernel *CoreML::Specification::LinearKernel::New(CoreML::Specification::LinearKernel *this, _tc_google::protobuf::Arena *a2)
{
  CoreML::Specification::LinearKernel *v3;

  v3 = (CoreML::Specification::LinearKernel *)operator new();
  CoreML::Specification::LinearKernel::LinearKernel(v3);
  if (a2)
    _tc_google::protobuf::Arena::Own<CoreML::Specification::LinearKernel>(a2, v3);
  return v3;
}

void sub_2182F5074(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40622C3295);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::LinearKernel>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::LinearKernel>);
  return result;
}

uint64_t CoreML::Specification::LinearKernel::MergePartialFromCodedStream(CoreML::Specification::LinearKernel *this, char **a2, unsigned int a3)
{
  char *v4;
  unint64_t TagFallback;
  BOOL v6;
  uint64_t v7;

  do
  {
    v4 = *a2;
    if (*a2 >= a2[1])
    {
      TagFallback = 0;
    }
    else
    {
      TagFallback = *v4;
      if (*v4 >= 1)
      {
        *a2 = v4 + 1;
        goto LABEL_6;
      }
    }
    TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, TagFallback);
LABEL_6:
    if ((_DWORD)TagFallback)
      v6 = (TagFallback & 7) == 4;
    else
      v6 = 1;
    v7 = v6;
  }
  while (!v6
       && (_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) != 0);
  return v7;
}

uint64_t CoreML::Specification::LinearKernel::ByteSizeLong(CoreML::Specification::LinearKernel *this)
{
  *((_DWORD *)this + 4) = 0;
  return 0;
}

std::string *CoreML::Specification::LinearKernel::CheckTypeAndMergeFrom(std::string *this, const _tc_google::protobuf::MessageLite *a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)a2 + 1);
  if ((v2 & 1) != 0)
    return _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)&this->__r_.__value_.__l.__size_, v2 & 0xFFFFFFFFFFFFFFFELL);
  return this;
}

uint64_t CoreML::Specification::LinearKernel::IsInitialized(CoreML::Specification::LinearKernel *this)
{
  return 1;
}

_QWORD *CoreML::Specification::LinearKernel::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.LinearKernel");
}

CoreML::Specification::RBFKernel *CoreML::Specification::RBFKernel::RBFKernel(CoreML::Specification::RBFKernel *this)
{
  *(_QWORD *)this = &off_24D938218;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::RBFKernel *)&CoreML::Specification::_RBFKernel_default_instance_)
    CoreML::Specification::protobuf_SVM_2eproto::InitDefaults(this);
  *((_QWORD *)this + 2) = 0;
  *((_DWORD *)this + 6) = 0;
  return this;
}

void sub_2182F51B8(_Unwind_Exception *a1)
{
  uint64_t *v1;

  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::RBFKernel::~RBFKernel(CoreML::Specification::RBFKernel *this)
{
  *(_QWORD *)this = &off_24D938218;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  *(_QWORD *)this = &off_24D938218;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
  JUMPOUT(0x219A19A08);
}

uint64_t *CoreML::Specification::RBFKernel::default_instance(CoreML::Specification::RBFKernel *this)
{
  CoreML::Specification::protobuf_SVM_2eproto::InitDefaults(this);
  return &CoreML::Specification::_RBFKernel_default_instance_;
}

CoreML::Specification::RBFKernel *CoreML::Specification::RBFKernel::New(CoreML::Specification::RBFKernel *this, _tc_google::protobuf::Arena *a2)
{
  CoreML::Specification::RBFKernel *v3;

  v3 = (CoreML::Specification::RBFKernel *)operator new();
  CoreML::Specification::RBFKernel::RBFKernel(v3);
  if (a2)
    _tc_google::protobuf::Arena::Own<CoreML::Specification::RBFKernel>(a2, v3);
  return v3;
}

void sub_2182F52A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40E1DA5700);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::RBFKernel>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::RBFKernel>);
  return result;
}

uint64_t CoreML::Specification::RBFKernel::Clear(uint64_t this)
{
  *(_QWORD *)(this + 16) = 0;
  return this;
}

uint64_t CoreML::Specification::RBFKernel::MergePartialFromCodedStream(CoreML::Specification::RBFKernel *this, char **a2, unsigned int a3)
{
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  BOOL v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v15;

  while (1)
  {
    while (1)
    {
      v5 = *a2;
      if (*a2 < a2[1])
        break;
      v6 = 0;
LABEL_6:
      TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v6);
      v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
      if ((v7 & 0x100000000) != 0)
        goto LABEL_7;
LABEL_11:
      if ((_DWORD)v7)
        v10 = (v7 & 7) == 4;
      else
        v10 = 1;
      v11 = v10;
      if (v10
        || (_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v7, a3) & 1) == 0)
      {
        return v11;
      }
    }
    v6 = *v5;
    if (*v5 < 1)
      goto LABEL_6;
    *a2 = v5 + 1;
    v7 = v6 | 0x100000000;
    if ((v7 & 0x100000000) == 0)
      goto LABEL_11;
LABEL_7:
    if (v7 != 9 || (v7 & 0xFFFFFFF8) != 8)
      goto LABEL_11;
    v15 = 0;
    v12 = (unint64_t *)*a2;
    if ((int)(*((_DWORD *)a2 + 2) - *a2) >= 8)
    {
      v13 = *v12;
      *a2 = (char *)(v12 + 1);
      goto LABEL_22;
    }
    if (!_tc_google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((unint64_t **)a2, &v15))
      return 0;
    v13 = v15;
LABEL_22:
    *((_QWORD *)this + 2) = v13;
  }
}

uint64_t CoreML::Specification::RBFKernel::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, _tc_google::protobuf::io::CodedOutputStream *a3)
{
  double v3;

  v3 = *(double *)(this + 16);
  if (v3 != 0.0)
    return _tc_google::protobuf::internal::WireFormatLite::WriteDouble((_tc_google::protobuf::internal::WireFormatLite *)1, a2, v3, a3);
  return this;
}

uint64_t CoreML::Specification::RBFKernel::ByteSizeLong(CoreML::Specification::RBFKernel *this)
{
  uint64_t v1;

  v1 = 9;
  if (*((double *)this + 2) == 0.0)
    v1 = 0;
  *((_DWORD *)this + 6) = v1;
  return v1;
}

std::string *CoreML::Specification::RBFKernel::CheckTypeAndMergeFrom(std::string *this, const _tc_google::protobuf::MessageLite *a2)
{
  std::string *v3;
  uint64_t v4;
  double v5;

  v3 = this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((double *)a2 + 2);
  if (v5 != 0.0)
    *(double *)&v3->__r_.__value_.__r.__words[2] = v5;
  return this;
}

uint64_t CoreML::Specification::RBFKernel::IsInitialized(CoreML::Specification::RBFKernel *this)
{
  return 1;
}

_QWORD *CoreML::Specification::RBFKernel::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.RBFKernel");
}

CoreML::Specification::PolyKernel *CoreML::Specification::PolyKernel::PolyKernel(CoreML::Specification::PolyKernel *this)
{
  *(_QWORD *)this = &off_24D9382B0;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::PolyKernel *)&CoreML::Specification::_PolyKernel_default_instance_)
    CoreML::Specification::protobuf_SVM_2eproto::InitDefaults(this);
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  return this;
}

void sub_2182F54CC(_Unwind_Exception *a1)
{
  uint64_t *v1;

  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::PolyKernel::~PolyKernel(CoreML::Specification::PolyKernel *this)
{
  *(_QWORD *)this = &off_24D9382B0;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  *(_QWORD *)this = &off_24D9382B0;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
  JUMPOUT(0x219A19A08);
}

CoreML::Specification::PolyKernel *CoreML::Specification::PolyKernel::New(CoreML::Specification::PolyKernel *this, _tc_google::protobuf::Arena *a2)
{
  CoreML::Specification::PolyKernel *v3;

  v3 = (CoreML::Specification::PolyKernel *)operator new();
  CoreML::Specification::PolyKernel::PolyKernel(v3);
  if (a2)
    _tc_google::protobuf::Arena::Own<CoreML::Specification::PolyKernel>(a2, v3);
  return v3;
}

void sub_2182F55A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40825B58B5);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::PolyKernel>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::PolyKernel>);
  return result;
}

uint64_t CoreML::Specification::PolyKernel::Clear(uint64_t this)
{
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

BOOL CoreML::Specification::PolyKernel::MergePartialFromCodedStream(CoreML::Specification::PolyKernel *this, char **a2, unsigned int a3)
{
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  unsigned int v9;
  char *v11;
  int v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  BOOL v17;
  uint64_t Varint32Fallback;
  _BOOL8 result;
  unint64_t v20;

  do
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          v5 = *a2;
          if (*a2 >= a2[1])
          {
            v6 = 0;
LABEL_6:
            TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v6);
            v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
            if ((v7 & 0x100000000) == 0)
              goto LABEL_25;
            goto LABEL_7;
          }
          v6 = *v5;
          if (*v5 < 1)
            goto LABEL_6;
          *a2 = v5 + 1;
          v7 = v6 | 0x100000000;
          if ((v7 & 0x100000000) == 0)
            goto LABEL_25;
LABEL_7:
          v9 = v7 >> 3;
          if (v7 >> 3 != 3)
            break;
          if (v7 != 25)
            goto LABEL_25;
          v20 = 0;
          v13 = (unint64_t *)*a2;
          if ((int)(*((_DWORD *)a2 + 2) - *a2) < 8)
          {
            result = _tc_google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((unint64_t **)a2, &v20);
            if (!result)
              return result;
            v14 = v20;
          }
          else
          {
            v14 = *v13;
            *a2 = (char *)(v13 + 1);
          }
          *((_QWORD *)this + 3) = v14;
        }
        if (v9 != 2)
          break;
        if (v7 != 17)
          goto LABEL_25;
        v20 = 0;
        v15 = (unint64_t *)*a2;
        if ((int)(*((_DWORD *)a2 + 2) - *a2) < 8)
        {
          result = _tc_google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((unint64_t **)a2, &v20);
          if (!result)
            return result;
          v16 = v20;
        }
        else
        {
          v16 = *v15;
          *a2 = (char *)(v15 + 1);
        }
        *((_QWORD *)this + 2) = v16;
      }
      if (v9 != 1 || v7 != 8)
        break;
      v11 = *a2;
      if (*a2 >= a2[1])
      {
        v12 = 0;
      }
      else
      {
        v12 = *v11;
        if ((*v11 & 0x80000000) == 0)
        {
          *a2 = v11 + 1;
          goto LABEL_33;
        }
      }
      Varint32Fallback = _tc_google::protobuf::io::CodedInputStream::ReadVarint32Fallback((_tc_google::protobuf::io::CodedInputStream *)a2, v12);
      v12 = Varint32Fallback;
      if (Varint32Fallback < 0)
        return 0;
LABEL_33:
      *((_DWORD *)this + 8) = v12;
    }
LABEL_25:
    if ((_DWORD)v7)
      v17 = (v7 & 7) == 4;
    else
      v17 = 1;
    if (v17)
      return 1;
  }
  while ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v7, a3) & 1) != 0);
  return 0;
}

uint64_t CoreML::Specification::PolyKernel::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, _tc_google::protobuf::io::CodedOutputStream *a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  signed int v6;
  double v7;
  double v8;

  v5 = this;
  v6 = *(_DWORD *)(this + 32);
  if (v6)
    this = _tc_google::protobuf::internal::WireFormatLite::WriteInt32(1, v6, a2, a4);
  v7 = *(double *)(v5 + 16);
  if (v7 != 0.0)
    this = _tc_google::protobuf::internal::WireFormatLite::WriteDouble((_tc_google::protobuf::internal::WireFormatLite *)2, a2, v7, a3);
  v8 = *(double *)(v5 + 24);
  if (v8 != 0.0)
    return _tc_google::protobuf::internal::WireFormatLite::WriteDouble((_tc_google::protobuf::internal::WireFormatLite *)3, a2, v8, a3);
  return this;
}

uint64_t CoreML::Specification::PolyKernel::ByteSizeLong(CoreML::Specification::PolyKernel *this)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = 9;
  if (*((double *)this + 2) == 0.0)
    v1 = 0;
  if (*((double *)this + 3) != 0.0)
    v1 += 9;
  v2 = *((_DWORD *)this + 8);
  v3 = 11;
  v4 = ((9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if (v2 >= 0)
    v3 = v4;
  v5 = v3 + v1;
  if (v2)
    v1 = v5;
  *((_DWORD *)this + 9) = v1;
  return v1;
}

std::string *CoreML::Specification::PolyKernel::MergeFrom(std::string *this, const CoreML::Specification::PolyKernel *a2)
{
  std::string *v3;
  uint64_t v4;
  double v5;
  double v6;
  int v7;

  v3 = this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((double *)a2 + 2);
  if (v5 != 0.0)
    *(double *)&v3->__r_.__value_.__r.__words[2] = v5;
  v6 = *((double *)a2 + 3);
  if (v6 != 0.0)
    *(double *)&v3[1].__r_.__value_.__l.__data_ = v6;
  v7 = *((_DWORD *)a2 + 8);
  if (v7)
    LODWORD(v3[1].__r_.__value_.__r.__words[1]) = v7;
  return this;
}

uint64_t CoreML::Specification::PolyKernel::IsInitialized(CoreML::Specification::PolyKernel *this)
{
  return 1;
}

_QWORD *CoreML::Specification::PolyKernel::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.PolyKernel");
}

CoreML::Specification::SigmoidKernel *CoreML::Specification::SigmoidKernel::SigmoidKernel(CoreML::Specification::SigmoidKernel *this)
{
  *(_QWORD *)this = &off_24D938348;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::SigmoidKernel *)&CoreML::Specification::_SigmoidKernel_default_instance_)
    CoreML::Specification::protobuf_SVM_2eproto::InitDefaults(this);
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  return this;
}

void sub_2182F5920(_Unwind_Exception *a1)
{
  uint64_t *v1;

  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::SigmoidKernel::~SigmoidKernel(CoreML::Specification::SigmoidKernel *this)
{
  *(_QWORD *)this = &off_24D938348;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  *(_QWORD *)this = &off_24D938348;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
  JUMPOUT(0x219A19A08);
}

CoreML::Specification::SigmoidKernel *CoreML::Specification::SigmoidKernel::New(CoreML::Specification::SigmoidKernel *this, _tc_google::protobuf::Arena *a2)
{
  CoreML::Specification::SigmoidKernel *v3;

  v3 = (CoreML::Specification::SigmoidKernel *)operator new();
  CoreML::Specification::SigmoidKernel::SigmoidKernel(v3);
  if (a2)
    _tc_google::protobuf::Arena::Own<CoreML::Specification::SigmoidKernel>(a2, v3);
  return v3;
}

void sub_2182F59F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40B7564605);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::SigmoidKernel>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::SigmoidKernel>);
  return result;
}

uint64_t CoreML::Specification::SigmoidKernel::Clear(uint64_t this)
{
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  return this;
}

uint64_t CoreML::Specification::SigmoidKernel::MergePartialFromCodedStream(CoreML::Specification::SigmoidKernel *this, char **a2, unsigned int a3)
{
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  BOOL v14;
  uint64_t v15;
  unint64_t v17;

  while (1)
  {
    while (1)
    {
      while (1)
      {
        v5 = *a2;
        if (*a2 < a2[1])
          break;
        v6 = 0;
LABEL_6:
        TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v6);
        v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v7 & 0x100000000) != 0)
          goto LABEL_7;
LABEL_20:
        if ((_DWORD)v7)
          v14 = (v7 & 7) == 4;
        else
          v14 = 1;
        v15 = v14;
        if (v14
          || (_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v7, a3) & 1) == 0)
        {
          return v15;
        }
      }
      v6 = *v5;
      if (*v5 < 1)
        goto LABEL_6;
      *a2 = v5 + 1;
      v7 = v6 | 0x100000000;
      if ((v7 & 0x100000000) == 0)
        goto LABEL_20;
LABEL_7:
      if (v7 >> 3 == 2)
        break;
      if (v7 >> 3 != 1 || v7 != 9)
        goto LABEL_20;
      v17 = 0;
      v10 = (unint64_t *)*a2;
      if ((int)(*((_DWORD *)a2 + 2) - *a2) < 8)
      {
        if (!_tc_google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((unint64_t **)a2, &v17))
          return 0;
        v11 = v17;
      }
      else
      {
        v11 = *v10;
        *a2 = (char *)(v10 + 1);
      }
      *((_QWORD *)this + 2) = v11;
    }
    if (v7 != 17)
      goto LABEL_20;
    v17 = 0;
    v12 = (unint64_t *)*a2;
    if ((int)(*((_DWORD *)a2 + 2) - *a2) >= 8)
    {
      v13 = *v12;
      *a2 = (char *)(v12 + 1);
      goto LABEL_19;
    }
    if (!_tc_google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((unint64_t **)a2, &v17))
      return 0;
    v13 = v17;
LABEL_19:
    *((_QWORD *)this + 3) = v13;
  }
}

uint64_t CoreML::Specification::SigmoidKernel::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, _tc_google::protobuf::io::CodedOutputStream *a3)
{
  uint64_t v4;
  double v5;
  double v6;

  v4 = this;
  v5 = *(double *)(this + 16);
  if (v5 != 0.0)
    this = _tc_google::protobuf::internal::WireFormatLite::WriteDouble((_tc_google::protobuf::internal::WireFormatLite *)1, a2, v5, a3);
  v6 = *(double *)(v4 + 24);
  if (v6 != 0.0)
    return _tc_google::protobuf::internal::WireFormatLite::WriteDouble((_tc_google::protobuf::internal::WireFormatLite *)2, a2, v6, a3);
  return this;
}

uint64_t CoreML::Specification::SigmoidKernel::ByteSizeLong(CoreML::Specification::SigmoidKernel *this)
{
  uint64_t v1;

  v1 = 9;
  if (*((double *)this + 2) == 0.0)
    v1 = 0;
  if (*((double *)this + 3) != 0.0)
    v1 += 9;
  *((_DWORD *)this + 8) = v1;
  return v1;
}

std::string *CoreML::Specification::SigmoidKernel::MergeFrom(std::string *this, const CoreML::Specification::SigmoidKernel *a2)
{
  std::string *v3;
  uint64_t v4;
  double v5;
  double v6;

  v3 = this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((double *)a2 + 2);
  if (v5 != 0.0)
    *(double *)&v3->__r_.__value_.__r.__words[2] = v5;
  v6 = *((double *)a2 + 3);
  if (v6 != 0.0)
    *(double *)&v3[1].__r_.__value_.__l.__data_ = v6;
  return this;
}

uint64_t CoreML::Specification::SigmoidKernel::IsInitialized(CoreML::Specification::SigmoidKernel *this)
{
  return 1;
}

_QWORD *CoreML::Specification::SigmoidKernel::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.SigmoidKernel");
}

CoreML::Specification::Kernel *CoreML::Specification::Kernel::Kernel(CoreML::Specification::Kernel *this)
{
  *(_QWORD *)this = &off_24D9383E0;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::Kernel *)&CoreML::Specification::_Kernel_default_instance_)
    CoreML::Specification::protobuf_SVM_2eproto::InitDefaults(this);
  *((_QWORD *)this + 3) = 0;
  return this;
}

void sub_2182F5CC8(_Unwind_Exception *a1)
{
  uint64_t *v1;

  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::Kernel::~Kernel(CoreML::Specification::Kernel *this)
{
  *(_QWORD *)this = &off_24D9383E0;
  if (*((_DWORD *)this + 7))
    CoreML::Specification::Kernel::clear_kernel((uint64_t)this);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  CoreML::Specification::Kernel::~Kernel(this);
  JUMPOUT(0x219A19A08);
}

uint64_t CoreML::Specification::Kernel::clear_kernel(uint64_t this)
{
  uint64_t v1;

  v1 = this;
  switch(*(_DWORD *)(this + 28))
  {
    case 1:
    case 2:
    case 3:
    case 4:
      this = *(_QWORD *)(this + 16);
      if (this)
        this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
      break;
    default:
      break;
  }
  *(_DWORD *)(v1 + 28) = 0;
  return this;
}

CoreML::Specification::Kernel *CoreML::Specification::Kernel::New(CoreML::Specification::Kernel *this, _tc_google::protobuf::Arena *a2)
{
  CoreML::Specification::Kernel *v3;

  v3 = (CoreML::Specification::Kernel *)operator new();
  CoreML::Specification::Kernel::Kernel(v3);
  if (a2)
    _tc_google::protobuf::Arena::Own<CoreML::Specification::Kernel>(a2, v3);
  return v3;
}

void sub_2182F5DF8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C406A65A86DLL);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::Kernel>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::Kernel>);
  return result;
}

uint64_t CoreML::Specification::Kernel::MergePartialFromCodedStream(CoreML::Specification::Kernel *this, char **a2, unsigned int a3)
{
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  CoreML::Specification::LinearKernel *v9;
  char *v10;
  int VarintSizeAsIntFallback;
  CoreML::Specification::RBFKernel *v12;
  CoreML::Specification::PolyKernel *v13;
  CoreML::Specification::SigmoidKernel *v14;
  BOOL v15;
  char *v16;
  int v17;
  char *v18;
  int v19;
  char *v20;
  int v21;
  unint64_t v22;
  unsigned int v23;
  int v24;
  uint64_t result;
  _tc_google::protobuf::io::CodedInputStream *v26;
  int v27;
  unint64_t v28;
  unsigned int v29;
  int v30;
  unint64_t v31;
  unsigned int v32;
  unint64_t v33;
  unsigned int v34;

  while (2)
  {
    while (1)
    {
      v5 = *a2;
      if (*a2 >= a2[1])
        break;
      v6 = *v5;
      if (*v5 < 1)
        goto LABEL_6;
      *a2 = v5 + 1;
      v7 = v6 | 0x100000000;
      if ((v7 & 0x100000000) != 0)
        goto LABEL_7;
LABEL_23:
      if ((_DWORD)v7)
        v15 = (v7 & 7) == 4;
      else
        v15 = 1;
      if (v15)
        return 1;
      if ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v7, a3) & 1) == 0)goto LABEL_58;
    }
    v6 = 0;
LABEL_6:
    TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v6);
    v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
    if ((v7 & 0x100000000) == 0)
      goto LABEL_23;
LABEL_7:
    switch(v7 >> 3)
    {
      case 1u:
        if (v7 != 10)
          goto LABEL_23;
        if (*((_DWORD *)this + 7) != 1)
        {
          CoreML::Specification::Kernel::clear_kernel((uint64_t)this);
          *((_DWORD *)this + 7) = 1;
          v9 = (CoreML::Specification::LinearKernel *)operator new();
          CoreML::Specification::LinearKernel::LinearKernel(v9);
          *((_QWORD *)this + 2) = v9;
        }
        v10 = *a2;
        if (*a2 >= a2[1] || *v10 < 0)
        {
          VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
          if (VarintSizeAsIntFallback < 0)
            goto LABEL_58;
        }
        else
        {
          VarintSizeAsIntFallback = *v10;
          *a2 = v10 + 1;
        }
        v22 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, VarintSizeAsIntFallback);
        if ((v22 & 0x8000000000000000) != 0)
          goto LABEL_58;
        v24 = v22;
        result = CoreML::Specification::LinearKernel::MergePartialFromCodedStream((CoreML::Specification::LinearKernel *)v22, a2, v23);
        if (!(_DWORD)result)
          return result;
        v26 = (_tc_google::protobuf::io::CodedInputStream *)a2;
        v27 = v24;
        goto LABEL_57;
      case 2u:
        if (v7 != 18)
          goto LABEL_23;
        if (*((_DWORD *)this + 7) == 2)
        {
          v12 = (CoreML::Specification::RBFKernel *)*((_QWORD *)this + 2);
        }
        else
        {
          CoreML::Specification::Kernel::clear_kernel((uint64_t)this);
          *((_DWORD *)this + 7) = 2;
          v12 = (CoreML::Specification::RBFKernel *)operator new();
          CoreML::Specification::RBFKernel::RBFKernel(v12);
          *((_QWORD *)this + 2) = v12;
        }
        v16 = *a2;
        if (*a2 >= a2[1] || *v16 < 0)
        {
          v17 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
          if (v17 < 0)
            goto LABEL_58;
        }
        else
        {
          v17 = *v16;
          *a2 = v16 + 1;
        }
        v28 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v17);
        if ((v28 & 0x8000000000000000) != 0)
          goto LABEL_58;
        v30 = v28;
        result = CoreML::Specification::RBFKernel::MergePartialFromCodedStream(v12, a2, v29);
        if (!(_DWORD)result)
          return result;
        goto LABEL_56;
      case 3u:
        if (v7 != 26)
          goto LABEL_23;
        if (*((_DWORD *)this + 7) == 3)
        {
          v13 = (CoreML::Specification::PolyKernel *)*((_QWORD *)this + 2);
        }
        else
        {
          CoreML::Specification::Kernel::clear_kernel((uint64_t)this);
          *((_DWORD *)this + 7) = 3;
          v13 = (CoreML::Specification::PolyKernel *)operator new();
          CoreML::Specification::PolyKernel::PolyKernel(v13);
          *((_QWORD *)this + 2) = v13;
        }
        v18 = *a2;
        if (*a2 >= a2[1] || *v18 < 0)
        {
          v19 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
          if (v19 < 0)
            goto LABEL_58;
        }
        else
        {
          v19 = *v18;
          *a2 = v18 + 1;
        }
        v31 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v19);
        if ((v31 & 0x8000000000000000) != 0)
          goto LABEL_58;
        v30 = v31;
        result = CoreML::Specification::PolyKernel::MergePartialFromCodedStream(v13, a2, v32);
        if (!(_DWORD)result)
          return result;
        goto LABEL_56;
      case 4u:
        if (v7 != 34)
          goto LABEL_23;
        if (*((_DWORD *)this + 7) == 4)
        {
          v14 = (CoreML::Specification::SigmoidKernel *)*((_QWORD *)this + 2);
        }
        else
        {
          CoreML::Specification::Kernel::clear_kernel((uint64_t)this);
          *((_DWORD *)this + 7) = 4;
          v14 = (CoreML::Specification::SigmoidKernel *)operator new();
          CoreML::Specification::SigmoidKernel::SigmoidKernel(v14);
          *((_QWORD *)this + 2) = v14;
        }
        v20 = *a2;
        if (*a2 >= a2[1] || *v20 < 0)
        {
          v21 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
          if (v21 < 0)
            goto LABEL_58;
        }
        else
        {
          v21 = *v20;
          *a2 = v20 + 1;
        }
        v33 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v21);
        if ((v33 & 0x8000000000000000) != 0)
          goto LABEL_58;
        v30 = v33;
        result = CoreML::Specification::SigmoidKernel::MergePartialFromCodedStream(v14, a2, v34);
        if (!(_DWORD)result)
          return result;
LABEL_56:
        v26 = (_tc_google::protobuf::io::CodedInputStream *)a2;
        v27 = v30;
LABEL_57:
        if (_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(v26, v27))
          continue;
LABEL_58:
        result = 0;
        break;
      default:
        goto LABEL_23;
    }
    return result;
  }
}

void sub_2182F61D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40B7564605);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::Kernel::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;

  v5 = this;
  v6 = *(_DWORD *)(this + 28);
  if (v6 == 1)
  {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(this + 16), a2, a4);
    v6 = *(_DWORD *)(v5 + 28);
  }
  if (v6 == 2)
  {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)2, *(_QWORD *)(v5 + 16), a2, a4);
    v6 = *(_DWORD *)(v5 + 28);
  }
  if (v6 == 3)
  {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)3, *(_QWORD *)(v5 + 16), a2, a4);
    v6 = *(_DWORD *)(v5 + 28);
  }
  if (v6 == 4)
    return _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)4, *(_QWORD *)(v5 + 16), a2, a4);
  return this;
}

uint64_t CoreML::Specification::Kernel::ByteSizeLong(CoreML::Specification::Kernel *this)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  switch(*((_DWORD *)this + 7))
  {
    case 1:
      *(_DWORD *)(*((_QWORD *)this + 2) + 16) = 0;
      result = 2;
      break;
    case 2:
      v3 = *((_QWORD *)this + 2);
      v4 = 9;
      if (*(double *)(v3 + 16) == 0.0)
        v4 = 0;
      *(_DWORD *)(v3 + 24) = v4;
      result = v4 | 2;
      break;
    case 3:
      v5 = CoreML::Specification::PolyKernel::ByteSizeLong(*((CoreML::Specification::PolyKernel **)this + 2));
      v6 = v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6);
      goto LABEL_13;
    case 4:
      v7 = *((_QWORD *)this + 2);
      v8 = 9;
      if (*(double *)(v7 + 16) == 0.0)
        v8 = 0;
      if (*(double *)(v7 + 24) != 0.0)
        v8 += 9;
      *(_DWORD *)(v7 + 32) = v8;
      v6 = v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6);
LABEL_13:
      result = v6 + 1;
      break;
    default:
      result = 0;
      break;
  }
  *((_DWORD *)this + 6) = result;
  return result;
}

void CoreML::Specification::Kernel::MergeFrom(CoreML::Specification::Kernel *this, const CoreML::Specification::Kernel *a2)
{
  uint64_t v4;
  uint64_t *v5;
  CoreML::Specification::PolyKernel *v6;
  CoreML::Specification::SigmoidKernel *v7;
  uint64_t v8;
  CoreML::Specification::PolyKernel *v9;
  const CoreML::Specification::PolyKernel *v10;
  CoreML::Specification::SigmoidKernel *v11;
  const CoreML::Specification::SigmoidKernel *v12;
  CoreML::Specification::LinearKernel *v13;
  uint64_t *v14;
  CoreML::Specification::RBFKernel *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  double v19;

  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  switch(*((_DWORD *)a2 + 7))
  {
    case 1:
      if (*((_DWORD *)this + 7) == 1)
      {
        v5 = (uint64_t *)*((_QWORD *)this + 2);
LABEL_17:
        v14 = (uint64_t *)*((_QWORD *)a2 + 2);
        goto LABEL_25;
      }
      CoreML::Specification::Kernel::clear_kernel((uint64_t)this);
      *((_DWORD *)this + 7) = 1;
      v5 = (uint64_t *)operator new();
      v13 = CoreML::Specification::LinearKernel::LinearKernel((CoreML::Specification::LinearKernel *)v5);
      *((_QWORD *)this + 2) = v5;
      if (*((_DWORD *)a2 + 7) == 1)
        goto LABEL_17;
      CoreML::Specification::protobuf_SVM_2eproto::InitDefaults(v13);
      v14 = &CoreML::Specification::_LinearKernel_default_instance_;
LABEL_25:
      v17 = v14[1];
      if ((v17 & 1) != 0)
        _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(v5 + 1, v17 & 0xFFFFFFFFFFFFFFFELL);
      return;
    case 2:
      if (*((_DWORD *)this + 7) == 2)
      {
        v8 = *((_QWORD *)this + 2);
LABEL_19:
        v16 = (uint64_t *)*((_QWORD *)a2 + 2);
        goto LABEL_28;
      }
      CoreML::Specification::Kernel::clear_kernel((uint64_t)this);
      *((_DWORD *)this + 7) = 2;
      v8 = operator new();
      v15 = CoreML::Specification::RBFKernel::RBFKernel((CoreML::Specification::RBFKernel *)v8);
      *((_QWORD *)this + 2) = v8;
      if (*((_DWORD *)a2 + 7) == 2)
        goto LABEL_19;
      CoreML::Specification::protobuf_SVM_2eproto::InitDefaults(v15);
      v16 = &CoreML::Specification::_RBFKernel_default_instance_;
LABEL_28:
      v18 = v16[1];
      if ((v18 & 1) != 0)
        _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)(v8 + 8), v18 & 0xFFFFFFFFFFFFFFFELL);
      v19 = *((double *)v16 + 2);
      if (v19 != 0.0)
        *(double *)(v8 + 16) = v19;
      return;
    case 3:
      if (*((_DWORD *)this + 7) == 3)
      {
        v6 = (CoreML::Specification::PolyKernel *)*((_QWORD *)this + 2);
      }
      else
      {
        CoreML::Specification::Kernel::clear_kernel((uint64_t)this);
        *((_DWORD *)this + 7) = 3;
        v6 = (CoreML::Specification::PolyKernel *)operator new();
        v9 = CoreML::Specification::PolyKernel::PolyKernel(v6);
        *((_QWORD *)this + 2) = v6;
        if (*((_DWORD *)a2 + 7) != 3)
        {
          CoreML::Specification::protobuf_SVM_2eproto::InitDefaults(v9);
          v10 = (const CoreML::Specification::PolyKernel *)&CoreML::Specification::_PolyKernel_default_instance_;
          goto LABEL_21;
        }
      }
      v10 = (const CoreML::Specification::PolyKernel *)*((_QWORD *)a2 + 2);
LABEL_21:
      CoreML::Specification::PolyKernel::MergeFrom((std::string *)v6, v10);
      return;
    case 4:
      if (*((_DWORD *)this + 7) == 4)
      {
        v7 = (CoreML::Specification::SigmoidKernel *)*((_QWORD *)this + 2);
LABEL_15:
        v12 = (const CoreML::Specification::SigmoidKernel *)*((_QWORD *)a2 + 2);
        goto LABEL_23;
      }
      CoreML::Specification::Kernel::clear_kernel((uint64_t)this);
      *((_DWORD *)this + 7) = 4;
      v7 = (CoreML::Specification::SigmoidKernel *)operator new();
      v11 = CoreML::Specification::SigmoidKernel::SigmoidKernel(v7);
      *((_QWORD *)this + 2) = v7;
      if (*((_DWORD *)a2 + 7) == 4)
        goto LABEL_15;
      CoreML::Specification::protobuf_SVM_2eproto::InitDefaults(v11);
      v12 = (const CoreML::Specification::SigmoidKernel *)&CoreML::Specification::_SigmoidKernel_default_instance_;
LABEL_23:
      CoreML::Specification::SigmoidKernel::MergeFrom((std::string *)v7, v12);
      return;
    default:
      return;
  }
}

void sub_2182F662C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40E1DA5700);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::Kernel::IsInitialized(CoreML::Specification::Kernel *this)
{
  return 1;
}

_QWORD *CoreML::Specification::Kernel::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.Kernel");
}

CoreML::Specification::SparseNode *CoreML::Specification::SparseNode::SparseNode(CoreML::Specification::SparseNode *this)
{
  *(_QWORD *)this = &off_24D938478;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::SparseNode *)&CoreML::Specification::_SparseNode_default_instance_)
    CoreML::Specification::protobuf_SVM_2eproto::InitDefaults(this);
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  return this;
}

void sub_2182F66F0(_Unwind_Exception *a1)
{
  uint64_t *v1;

  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::SparseNode::~SparseNode(CoreML::Specification::SparseNode *this)
{
  *(_QWORD *)this = &off_24D938478;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  *(_QWORD *)this = &off_24D938478;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
  JUMPOUT(0x219A19A08);
}

CoreML::Specification::SparseNode *CoreML::Specification::SparseNode::New(CoreML::Specification::SparseNode *this, _tc_google::protobuf::Arena *a2)
{
  CoreML::Specification::SparseNode *v3;

  v3 = (CoreML::Specification::SparseNode *)operator new();
  CoreML::Specification::SparseNode::SparseNode(v3);
  if (a2)
    _tc_google::protobuf::Arena::Own<CoreML::Specification::SparseNode>(a2, v3);
  return v3;
}

void sub_2182F67C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C404FE48876);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::SparseNode>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::SparseNode>);
  return result;
}

uint64_t CoreML::Specification::SparseNode::Clear(uint64_t this)
{
  *(_DWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 16) = 0;
  return this;
}

BOOL CoreML::Specification::SparseNode::MergePartialFromCodedStream(CoreML::Specification::SparseNode *this, char **a2, unsigned int a3)
{
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  char *v10;
  int v11;
  unint64_t *v12;
  unint64_t v13;
  BOOL v14;
  uint64_t Varint32Fallback;
  _BOOL8 result;
  unint64_t v17;

  do
  {
    while (1)
    {
      while (1)
      {
        v5 = *a2;
        if (*a2 >= a2[1])
        {
          v6 = 0;
LABEL_6:
          TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v6);
          v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
          if ((v7 & 0x100000000) == 0)
            goto LABEL_20;
          goto LABEL_7;
        }
        v6 = *v5;
        if (*v5 < 1)
          goto LABEL_6;
        *a2 = v5 + 1;
        v7 = v6 | 0x100000000;
        if ((v7 & 0x100000000) == 0)
          goto LABEL_20;
LABEL_7:
        if (v7 >> 3 != 2)
          break;
        if (v7 != 17)
          goto LABEL_20;
        v17 = 0;
        v12 = (unint64_t *)*a2;
        if ((int)(*((_DWORD *)a2 + 2) - *a2) < 8)
        {
          result = _tc_google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((unint64_t **)a2, &v17);
          if (!result)
            return result;
          v13 = v17;
        }
        else
        {
          v13 = *v12;
          *a2 = (char *)(v12 + 1);
        }
        *((_QWORD *)this + 2) = v13;
      }
      if (v7 >> 3 != 1 || v7 != 8)
        break;
      v10 = *a2;
      if (*a2 >= a2[1])
      {
        v11 = 0;
      }
      else
      {
        v11 = *v10;
        if ((*v10 & 0x80000000) == 0)
        {
          *a2 = v10 + 1;
          goto LABEL_28;
        }
      }
      Varint32Fallback = _tc_google::protobuf::io::CodedInputStream::ReadVarint32Fallback((_tc_google::protobuf::io::CodedInputStream *)a2, v11);
      v11 = Varint32Fallback;
      if (Varint32Fallback < 0)
        return 0;
LABEL_28:
      *((_DWORD *)this + 6) = v11;
    }
LABEL_20:
    if ((_DWORD)v7)
      v14 = (v7 & 7) == 4;
    else
      v14 = 1;
    if (v14)
      return 1;
  }
  while ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v7, a3) & 1) != 0);
  return 0;
}

uint64_t CoreML::Specification::SparseNode::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, _tc_google::protobuf::io::CodedOutputStream *a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  signed int v6;
  double v7;

  v5 = this;
  v6 = *(_DWORD *)(this + 24);
  if (v6)
    this = _tc_google::protobuf::internal::WireFormatLite::WriteInt32(1, v6, a2, a4);
  v7 = *(double *)(v5 + 16);
  if (v7 != 0.0)
    return _tc_google::protobuf::internal::WireFormatLite::WriteDouble((_tc_google::protobuf::internal::WireFormatLite *)2, a2, v7, a3);
  return this;
}

uint64_t CoreML::Specification::SparseNode::ByteSizeLong(CoreML::Specification::SparseNode *this)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = 9;
  if (*((double *)this + 2) == 0.0)
    v1 = 0;
  v2 = *((_DWORD *)this + 6);
  v3 = 11;
  v4 = ((9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if (v2 >= 0)
    v3 = v4;
  v5 = v3 + v1;
  if (v2)
    v1 = v5;
  *((_DWORD *)this + 7) = v1;
  return v1;
}

std::string *CoreML::Specification::SparseNode::MergeFrom(std::string *this, const CoreML::Specification::SparseNode *a2)
{
  std::string *v3;
  uint64_t v4;
  double v5;
  int v6;

  v3 = this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((double *)a2 + 2);
  if (v5 != 0.0)
    *(double *)&v3->__r_.__value_.__r.__words[2] = v5;
  v6 = *((_DWORD *)a2 + 6);
  if (v6)
    LODWORD(v3[1].__r_.__value_.__l.__data_) = v6;
  return this;
}

uint64_t CoreML::Specification::SparseNode::IsInitialized(CoreML::Specification::SparseNode *this)
{
  return 1;
}

_QWORD *CoreML::Specification::SparseNode::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.SparseNode");
}

CoreML::Specification::SparseVector *CoreML::Specification::SparseVector::SparseVector(CoreML::Specification::SparseVector *this)
{
  *(_QWORD *)this = &off_24D938510;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  if (this != (CoreML::Specification::SparseVector *)&CoreML::Specification::_SparseVector_default_instance_)
    CoreML::Specification::protobuf_SVM_2eproto::InitDefaults(this);
  *((_DWORD *)this + 10) = 0;
  return this;
}

void sub_2182F6ACC(_Unwind_Exception *a1)
{
  uint64_t *v1;
  _QWORD *v2;

  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Destroy<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMRegressor_DoubleArray>::TypeHandler>(v2);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::SparseVector::~SparseVector(CoreML::Specification::SparseVector *this)
{
  *(_QWORD *)this = &off_24D938510;
  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Destroy<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMRegressor_DoubleArray>::TypeHandler>((_QWORD *)this + 2);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  CoreML::Specification::SparseVector::~SparseVector(this);
  JUMPOUT(0x219A19A08);
}

CoreML::Specification::SparseVector *CoreML::Specification::SparseVector::New(CoreML::Specification::SparseVector *this, _tc_google::protobuf::Arena *a2)
{
  CoreML::Specification::SparseVector *v3;

  v3 = (CoreML::Specification::SparseVector *)operator new();
  CoreML::Specification::SparseVector::SparseVector(v3);
  if (a2)
    _tc_google::protobuf::Arena::Own<CoreML::Specification::SparseVector>(a2, v3);
  return v3;
}

void sub_2182F6BA0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C40290C9B23);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::SparseVector>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::SparseVector>);
  return result;
}

uint64_t CoreML::Specification::SparseVector::Clear(uint64_t this)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v1 = *(unsigned int *)(this + 24);
  if ((int)v1 >= 1)
  {
    v2 = (uint64_t *)(*(_QWORD *)(this + 32) + 8);
    do
    {
      v3 = *v2++;
      *(_DWORD *)(v3 + 24) = 0;
      *(_QWORD *)(v3 + 16) = 0;
      --v1;
    }
    while (v1);
    *(_DWORD *)(this + 24) = 0;
  }
  return this;
}

BOOL CoreML::Specification::SparseVector::MergePartialFromCodedStream(CoreML::Specification::SparseVector *this, char **a2, unsigned int a3)
{
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  CoreML::Specification::SparseNode *v11;
  char *v12;
  int VarintSizeAsIntFallback;
  unint64_t v14;
  unsigned int v15;
  int v16;
  _BOOL8 result;

  v4 = (char *)this + 16;
  while (1)
  {
    while (1)
    {
      v5 = *a2;
      if (*a2 >= a2[1])
      {
        v6 = 0;
LABEL_7:
        TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v6);
        v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v7 & 0x100000000) == 0)
          break;
        goto LABEL_8;
      }
      v6 = *v5;
      if (*v5 < 1)
        goto LABEL_7;
      *a2 = v5 + 1;
      v7 = v6 | 0x100000000;
      if ((v7 & 0x100000000) == 0)
        break;
LABEL_8:
      if (v7 != 10 || (v7 & 0xFFFFFFF8) != 8)
        break;
      v11 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::SparseNode>::TypeHandler>((uint64_t)v4);
      v12 = *a2;
      if (*a2 >= a2[1] || *v12 < 0)
      {
        VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
        if (VarintSizeAsIntFallback < 0)
          return 0;
      }
      else
      {
        VarintSizeAsIntFallback = *v12;
        *a2 = v12 + 1;
      }
      v14 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, VarintSizeAsIntFallback);
      if ((v14 & 0x8000000000000000) == 0)
      {
        v16 = v14;
        result = CoreML::Specification::SparseNode::MergePartialFromCodedStream(v11, a2, v15);
        if (!result)
          return result;
        if (_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v16))
        {
          continue;
        }
      }
      return 0;
    }
    if (!(_DWORD)v7 || (v7 & 7) == 4)
      return 1;
    if ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v7, a3) & 1) == 0)return 0;
  }
}

uint64_t CoreML::Specification::SparseVector::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  int v4;
  uint64_t v6;
  int i;

  v4 = *(_DWORD *)(this + 24);
  if (v4)
  {
    v6 = this;
    for (i = 0; i != v4; ++i)
      this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(*(_QWORD *)(v6 + 32) + 8 * i + 8), a2, a4);
  }
  return this;
}

uint64_t CoreML::Specification::SparseVector::ByteSizeLong(CoreML::Specification::SparseVector *this)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *((_DWORD *)this + 6);
  if (v2)
  {
    v3 = 0;
    v4 = *((unsigned int *)this + 6);
    do
    {
      v5 = CoreML::Specification::SparseNode::ByteSizeLong(*(CoreML::Specification::SparseNode **)(*((_QWORD *)this + 4)
                                                                                                 + 8 * v3
                                                                                                 + 8));
      v4 += v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6);
      ++v3;
    }
    while (v2 != v3);
  }
  else
  {
    v4 = 0;
  }
  *((_DWORD *)this + 10) = v4;
  return v4;
}

std::string *CoreML::Specification::SparseVector::MergeFrom(std::string *this, const CoreML::Specification::SparseVector *a2)
{
  std::string *v3;
  uint64_t v4;
  int v5;
  CoreML::Specification::SparseNode **v6;
  unsigned int *v7;
  int v8;
  int *size;

  v3 = this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_DWORD *)a2 + 6);
  if (v5)
  {
    v6 = (CoreML::Specification::SparseNode **)(*((_QWORD *)a2 + 4) + 8);
    v7 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((_tc_google::protobuf::internal::RepeatedPtrFieldBase *)&v3->__r_.__value_.__r.__words[2], v5);
    this = _tc_google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::SparseNode>::TypeHandler>((std::string *)&v3->__r_.__value_.__r.__words[2], (std::string **)v7, v6, v5, *(_DWORD *)v3[1].__r_.__value_.__l.__size_ - LODWORD(v3[1].__r_.__value_.__l.__data_));
    v8 = LODWORD(v3[1].__r_.__value_.__l.__data_) + v5;
    LODWORD(v3[1].__r_.__value_.__l.__data_) = v8;
    size = (int *)v3[1].__r_.__value_.__l.__size_;
    if (*size < v8)
      *size = v8;
  }
  return this;
}

uint64_t CoreML::Specification::SparseVector::IsInitialized(CoreML::Specification::SparseVector *this)
{
  return 1;
}

_QWORD *CoreML::Specification::SparseVector::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.SparseVector");
}

CoreML::Specification::SparseSupportVectors *CoreML::Specification::SparseSupportVectors::SparseSupportVectors(CoreML::Specification::SparseSupportVectors *this)
{
  *(_QWORD *)this = &off_24D9385A8;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  if (this != (CoreML::Specification::SparseSupportVectors *)&CoreML::Specification::_SparseSupportVectors_default_instance_)
    CoreML::Specification::protobuf_SVM_2eproto::InitDefaults(this);
  *((_DWORD *)this + 10) = 0;
  return this;
}

void sub_2182F6F2C(_Unwind_Exception *a1)
{
  uint64_t *v1;
  _QWORD *v2;

  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Destroy<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMRegressor_DoubleArray>::TypeHandler>(v2);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::SparseSupportVectors::~SparseSupportVectors(CoreML::Specification::SparseSupportVectors *this)
{
  *(_QWORD *)this = &off_24D9385A8;
  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Destroy<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMRegressor_DoubleArray>::TypeHandler>((_QWORD *)this + 2);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  CoreML::Specification::SparseSupportVectors::~SparseSupportVectors(this);
  JUMPOUT(0x219A19A08);
}

CoreML::Specification::SparseSupportVectors *CoreML::Specification::SparseSupportVectors::New(CoreML::Specification::SparseSupportVectors *this, _tc_google::protobuf::Arena *a2)
{
  CoreML::Specification::SparseSupportVectors *v3;

  v3 = (CoreML::Specification::SparseSupportVectors *)operator new();
  CoreML::Specification::SparseSupportVectors::SparseSupportVectors(v3);
  if (a2)
    _tc_google::protobuf::Arena::Own<CoreML::Specification::SparseSupportVectors>(a2, v3);
  return v3;
}

void sub_2182F7000(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C40290C9B23);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::SparseSupportVectors>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::SparseSupportVectors>);
  return result;
}

uint64_t CoreML::Specification::SparseSupportVectors::Clear(CoreML::Specification::SparseSupportVectors *this)
{
  return _tc_google::protobuf::internal::RepeatedPtrFieldBase::Clear<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::SparseVector>::TypeHandler>((uint64_t)this + 16);
}

BOOL CoreML::Specification::SparseSupportVectors::MergePartialFromCodedStream(CoreML::Specification::SparseSupportVectors *this, char **a2, unsigned int a3)
{
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  CoreML::Specification::SparseVector *v11;
  char *v12;
  int VarintSizeAsIntFallback;
  unint64_t v14;
  unsigned int v15;
  int v16;
  _BOOL8 result;

  v4 = (char *)this + 16;
  while (1)
  {
    while (1)
    {
      v5 = *a2;
      if (*a2 >= a2[1])
      {
        v6 = 0;
LABEL_7:
        TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v6);
        v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v7 & 0x100000000) == 0)
          break;
        goto LABEL_8;
      }
      v6 = *v5;
      if (*v5 < 1)
        goto LABEL_7;
      *a2 = v5 + 1;
      v7 = v6 | 0x100000000;
      if ((v7 & 0x100000000) == 0)
        break;
LABEL_8:
      if (v7 != 10 || (v7 & 0xFFFFFFF8) != 8)
        break;
      v11 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::SparseVector>::TypeHandler>((uint64_t)v4);
      v12 = *a2;
      if (*a2 >= a2[1] || *v12 < 0)
      {
        VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
        if (VarintSizeAsIntFallback < 0)
          return 0;
      }
      else
      {
        VarintSizeAsIntFallback = *v12;
        *a2 = v12 + 1;
      }
      v14 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, VarintSizeAsIntFallback);
      if ((v14 & 0x8000000000000000) == 0)
      {
        v16 = v14;
        result = CoreML::Specification::SparseVector::MergePartialFromCodedStream(v11, a2, v15);
        if (!result)
          return result;
        if (_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v16))
        {
          continue;
        }
      }
      return 0;
    }
    if (!(_DWORD)v7 || (v7 & 7) == 4)
      return 1;
    if ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v7, a3) & 1) == 0)return 0;
  }
}

uint64_t CoreML::Specification::SparseSupportVectors::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  int v4;
  uint64_t v6;
  int i;

  v4 = *(_DWORD *)(this + 24);
  if (v4)
  {
    v6 = this;
    for (i = 0; i != v4; ++i)
      this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(*(_QWORD *)(v6 + 32) + 8 * i + 8), a2, a4);
  }
  return this;
}

uint64_t CoreML::Specification::SparseSupportVectors::ByteSizeLong(CoreML::Specification::SparseSupportVectors *this)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *((_DWORD *)this + 6);
  if (v2)
  {
    v3 = 0;
    v4 = *((unsigned int *)this + 6);
    do
    {
      v5 = CoreML::Specification::SparseVector::ByteSizeLong(*(CoreML::Specification::SparseVector **)(*((_QWORD *)this + 4) + 8 * v3 + 8));
      v4 += v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6);
      ++v3;
    }
    while (v2 != v3);
  }
  else
  {
    v4 = 0;
  }
  *((_DWORD *)this + 10) = v4;
  return v4;
}

std::string *CoreML::Specification::SparseSupportVectors::MergeFrom(std::string *this, const CoreML::Specification::SparseSupportVectors *a2)
{
  std::string *v3;
  uint64_t v4;
  int v5;
  CoreML::Specification::SparseVector **v6;
  unsigned int *v7;
  int v8;
  int *size;

  v3 = this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_DWORD *)a2 + 6);
  if (v5)
  {
    v6 = (CoreML::Specification::SparseVector **)(*((_QWORD *)a2 + 4) + 8);
    v7 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((_tc_google::protobuf::internal::RepeatedPtrFieldBase *)&v3->__r_.__value_.__r.__words[2], v5);
    this = _tc_google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::SparseVector>::TypeHandler>((std::string *)&v3->__r_.__value_.__r.__words[2], (std::string **)v7, v6, v5, *(_DWORD *)v3[1].__r_.__value_.__l.__size_ - LODWORD(v3[1].__r_.__value_.__l.__data_));
    v8 = LODWORD(v3[1].__r_.__value_.__l.__data_) + v5;
    LODWORD(v3[1].__r_.__value_.__l.__data_) = v8;
    size = (int *)v3[1].__r_.__value_.__l.__size_;
    if (*size < v8)
      *size = v8;
  }
  return this;
}

uint64_t CoreML::Specification::SparseSupportVectors::IsInitialized(CoreML::Specification::SparseSupportVectors *this)
{
  return 1;
}

_QWORD *CoreML::Specification::SparseSupportVectors::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.SparseSupportVectors");
}

CoreML::Specification::DenseVector *CoreML::Specification::DenseVector::DenseVector(CoreML::Specification::DenseVector *this)
{
  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)this = &off_24D938640;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  if (this != (CoreML::Specification::DenseVector *)&CoreML::Specification::_DenseVector_default_instance_)
    CoreML::Specification::protobuf_SVM_2eproto::InitDefaults(this);
  *((_DWORD *)this + 9) = 0;
  return this;
}

void sub_2182F735C(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v4;

  v4 = *(_QWORD **)(v2 + 24);
  if (v4)
  {
    if (!*v4)
      operator delete(v4);
  }
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::DenseVector::~DenseVector(CoreML::Specification::DenseVector *this)
{
  _QWORD *v2;

  *(_QWORD *)this = &off_24D938640;
  v2 = (_QWORD *)*((_QWORD *)this + 3);
  if (v2 && !*v2)
    operator delete(v2);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  CoreML::Specification::DenseVector::~DenseVector(this);
  JUMPOUT(0x219A19A08);
}

CoreML::Specification::DenseVector *CoreML::Specification::DenseVector::New(CoreML::Specification::DenseVector *this, _tc_google::protobuf::Arena *a2)
{
  CoreML::Specification::DenseVector *v3;

  v3 = (CoreML::Specification::DenseVector *)operator new();
  CoreML::Specification::DenseVector::DenseVector(v3);
  if (a2)
    _tc_google::protobuf::Arena::Own<CoreML::Specification::DenseVector>(a2, v3);
  return v3;
}

void sub_2182F7444(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C406130BDD3);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::DenseVector>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::DenseVector>);
  return result;
}

uint64_t CoreML::Specification::DenseVector::Clear(uint64_t this)
{
  *(_DWORD *)(this + 16) = 0;
  return this;
}

BOOL CoreML::Specification::DenseVector::MergePartialFromCodedStream(CoreML::Specification::DenseVector *this, char **a2, unsigned int a3)
{
  unsigned int *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int TagFallback;
  char *v10;
  unsigned int VarintSizeAsIntFallback;
  BOOL v12;
  signed int v13;
  unsigned int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  unint64_t *v19;
  unint64_t v20;
  signed int v21;
  uint64_t v22;
  _BOOL8 result;
  signed int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;

  v5 = (unsigned int *)((char *)this + 16);
  do
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          v6 = *a2;
          if (*a2 < a2[1])
            break;
          v7 = 0;
LABEL_7:
          TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v7);
          v8 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
          if ((v8 & 0x100000000) != 0)
            goto LABEL_8;
LABEL_14:
          if ((_DWORD)v8)
            v12 = (v8 & 7) == 4;
          else
            v12 = 1;
          if (v12)
            return 1;
          if ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v8, a3) & 1) == 0)return 0;
        }
        v7 = *v6;
        if (*v6 < 1)
          goto LABEL_7;
        *a2 = v6 + 1;
        v8 = v7 | 0x100000000;
        if ((v8 & 0x100000000) == 0)
          goto LABEL_14;
LABEL_8:
        if ((v8 & 0xFFFFFFF8) != 8)
          goto LABEL_14;
        if (v8 != 9)
          break;
        if (!_tc_google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1>(1, 0xAu, (unint64_t **)a2, (uint64_t)v5))return 0;
      }
      if (v8 != 10)
        goto LABEL_14;
      v10 = *a2;
      if (*a2 >= a2[1] || *v10 < 0)
      {
        VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
        if ((VarintSizeAsIntFallback & 0x80000000) != 0)
          return 0;
      }
      else
      {
        VarintSizeAsIntFallback = *v10;
        *a2 = v10 + 1;
      }
      if ((VarintSizeAsIntFallback & 7) != 0)
        return 0;
      v13 = *v5;
      v14 = VarintSizeAsIntFallback >> 3;
      v15 = _tc_google::protobuf::io::CodedInputStream::BytesUntilTotalBytesLimit((_tc_google::protobuf::io::CodedInputStream *)a2);
      v16 = _tc_google::protobuf::io::CodedInputStream::BytesUntilLimit((_tc_google::protobuf::io::CodedInputStream *)a2);
      if (v16 >= v15)
        v17 = v15;
      else
        v17 = v16;
      if (v15 == -1)
        v17 = v16;
      if (v17 >= (uint64_t)VarintSizeAsIntFallback)
        break;
      if (VarintSizeAsIntFallback >= 8)
      {
        if (v14 <= 1)
          v18 = 1;
        else
          v18 = VarintSizeAsIntFallback >> 3;
        do
        {
          v28 = 0;
          v19 = (unint64_t *)*a2;
          if ((int)(*((_DWORD *)a2 + 2) - *a2) < 8)
          {
            result = _tc_google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((unint64_t **)a2, &v28);
            if (!result)
              return result;
            v20 = v28;
          }
          else
          {
            v20 = *v19;
            *a2 = (char *)(v19 + 1);
          }
          v21 = *((_DWORD *)this + 4);
          if (v21 == *((_DWORD *)this + 5))
          {
            _tc_google::protobuf::RepeatedField<double>::Reserve(v5, v21 + 1);
            v21 = *v5;
          }
          v22 = *((_QWORD *)this + 3);
          *((_DWORD *)this + 4) = v21 + 1;
          *(_QWORD *)(v22 + 8 * v21 + 8) = v20;
          --v18;
        }
        while (v18);
      }
    }
    v24 = v13 + v14;
    if ((int)*v5 >= (int)(v13 + v14))
    {
      v25 = *((_QWORD *)this + 3);
    }
    else
    {
      _tc_google::protobuf::RepeatedField<double>::Reserve(v5, v13 + v14);
      v25 = *((_QWORD *)this + 3);
      v26 = 8 * v24 - 8 * *((int *)this + 4);
      if (v26 >= 1)
        bzero((void *)(v25 + 8 + 8 * *((int *)this + 4)), 8 * (((unint64_t)v26 >> 3) - ((unint64_t)v26 > 7)) + 8);
    }
    *v5 = v24;
    v27 = v25 + 8;
    if (!v25)
      v27 = 0;
  }
  while (_tc_google::protobuf::io::CodedInputStream::ReadRaw((_tc_google::protobuf::io::CodedInputStream *)a2, (char *)(v27 + 8 * v13), VarintSizeAsIntFallback));
  if ((int)*v5 >= 1)
  {
    result = 0;
    *v5 = v13;
    return result;
  }
  return 0;
}

uint64_t CoreML::Specification::DenseVector::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  _BYTE *v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  _tc_google::protobuf::internal::WireFormatLite *v14;

  if (*(int *)(this + 16) >= 1)
  {
    v5 = this;
    if (*((int *)a2 + 4) < 5)
    {
      _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, 0xAu);
      v6 = *((_DWORD *)a2 + 4);
    }
    else
    {
      *(_BYTE *)(*((_QWORD *)a2 + 1))++ = 10;
      v6 = *((_DWORD *)a2 + 4) - 1;
      *((_DWORD *)a2 + 4) = v6;
    }
    v7 = *(_DWORD *)(v5 + 32);
    if (v6 < 5)
    {
      _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, v7);
    }
    else
    {
      v8 = *((_QWORD *)a2 + 1);
      if (v7 < 0x80)
      {
        v10 = *(_DWORD *)(v5 + 32);
        v9 = (_BYTE *)*((_QWORD *)a2 + 1);
      }
      else
      {
        v9 = (_BYTE *)*((_QWORD *)a2 + 1);
        do
        {
          *v9++ = v7 | 0x80;
          v10 = v7 >> 7;
          v11 = v7 >> 14;
          v7 >>= 7;
        }
        while (v11);
      }
      *v9 = v10;
      v12 = (_DWORD)v9 - v8 + 1;
      *((_QWORD *)a2 + 1) += v12;
      *((_DWORD *)a2 + 4) -= v12;
    }
    v13 = *(_QWORD *)(v5 + 24);
    if (v13)
      v14 = (_tc_google::protobuf::internal::WireFormatLite *)(v13 + 8);
    else
      v14 = 0;
    return _tc_google::protobuf::internal::WireFormatLite::WriteDoubleArray(v14, (const double *)*(unsigned int *)(v5 + 16), a2, a4);
  }
  return this;
}

uint64_t CoreML::Specification::DenseVector::ByteSizeLong(CoreML::Specification::DenseVector *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *((unsigned int *)this + 4);
  v2 = 8 * v1;
  if ((_DWORD)v1)
  {
    if ((v2 & 0x80000000) != 0)
      v3 = 11;
    else
      v3 = ((9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
  else
  {
    v3 = 0;
  }
  v4 = v3 + v2;
  *((_DWORD *)this + 8) = v2;
  *((_DWORD *)this + 9) = v4;
  return v4;
}

uint64_t CoreML::Specification::DenseVector::IsInitialized(CoreML::Specification::DenseVector *this)
{
  return 1;
}

_QWORD *CoreML::Specification::DenseVector::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.DenseVector");
}

CoreML::Specification::DenseSupportVectors *CoreML::Specification::DenseSupportVectors::DenseSupportVectors(CoreML::Specification::DenseSupportVectors *this)
{
  *(_QWORD *)this = &off_24D9386D8;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  if (this != (CoreML::Specification::DenseSupportVectors *)&CoreML::Specification::_DenseSupportVectors_default_instance_)
    CoreML::Specification::protobuf_SVM_2eproto::InitDefaults(this);
  *((_DWORD *)this + 10) = 0;
  return this;
}

void sub_2182F78F0(_Unwind_Exception *a1)
{
  uint64_t *v1;
  _QWORD *v2;

  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Destroy<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMRegressor_DoubleArray>::TypeHandler>(v2);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::DenseSupportVectors::~DenseSupportVectors(CoreML::Specification::DenseSupportVectors *this)
{
  *(_QWORD *)this = &off_24D9386D8;
  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Destroy<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMRegressor_DoubleArray>::TypeHandler>((_QWORD *)this + 2);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  CoreML::Specification::DenseSupportVectors::~DenseSupportVectors(this);
  JUMPOUT(0x219A19A08);
}

CoreML::Specification::DenseSupportVectors *CoreML::Specification::DenseSupportVectors::New(CoreML::Specification::DenseSupportVectors *this, _tc_google::protobuf::Arena *a2)
{
  CoreML::Specification::DenseSupportVectors *v3;

  v3 = (CoreML::Specification::DenseSupportVectors *)operator new();
  CoreML::Specification::DenseSupportVectors::DenseSupportVectors(v3);
  if (a2)
    _tc_google::protobuf::Arena::Own<CoreML::Specification::DenseSupportVectors>(a2, v3);
  return v3;
}

void sub_2182F79C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C40290C9B23);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::DenseSupportVectors>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::DenseSupportVectors>);
  return result;
}

uint64_t CoreML::Specification::DenseSupportVectors::Clear(uint64_t this)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v1 = *(unsigned int *)(this + 24);
  if ((int)v1 >= 1)
  {
    v2 = (uint64_t *)(*(_QWORD *)(this + 32) + 8);
    do
    {
      v3 = *v2++;
      *(_DWORD *)(v3 + 16) = 0;
      --v1;
    }
    while (v1);
    *(_DWORD *)(this + 24) = 0;
  }
  return this;
}

BOOL CoreML::Specification::DenseSupportVectors::MergePartialFromCodedStream(CoreML::Specification::DenseSupportVectors *this, char **a2, unsigned int a3)
{
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  CoreML::Specification::DenseVector *v11;
  char *v12;
  int VarintSizeAsIntFallback;
  unint64_t v14;
  unsigned int v15;
  int v16;
  _BOOL8 result;

  v4 = (char *)this + 16;
  while (1)
  {
    while (1)
    {
      v5 = *a2;
      if (*a2 >= a2[1])
      {
        v6 = 0;
LABEL_7:
        TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v6);
        v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v7 & 0x100000000) == 0)
          break;
        goto LABEL_8;
      }
      v6 = *v5;
      if (*v5 < 1)
        goto LABEL_7;
      *a2 = v5 + 1;
      v7 = v6 | 0x100000000;
      if ((v7 & 0x100000000) == 0)
        break;
LABEL_8:
      if (v7 != 10 || (v7 & 0xFFFFFFF8) != 8)
        break;
      v11 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::DenseVector>::TypeHandler>((uint64_t)v4);
      v12 = *a2;
      if (*a2 >= a2[1] || *v12 < 0)
      {
        VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
        if (VarintSizeAsIntFallback < 0)
          return 0;
      }
      else
      {
        VarintSizeAsIntFallback = *v12;
        *a2 = v12 + 1;
      }
      v14 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, VarintSizeAsIntFallback);
      if ((v14 & 0x8000000000000000) == 0)
      {
        v16 = v14;
        result = CoreML::Specification::DenseVector::MergePartialFromCodedStream(v11, a2, v15);
        if (!result)
          return result;
        if (_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v16))
        {
          continue;
        }
      }
      return 0;
    }
    if (!(_DWORD)v7 || (v7 & 7) == 4)
      return 1;
    if ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v7, a3) & 1) == 0)return 0;
  }
}

uint64_t CoreML::Specification::DenseSupportVectors::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  int v4;
  uint64_t v6;
  int i;

  v4 = *(_DWORD *)(this + 24);
  if (v4)
  {
    v6 = this;
    for (i = 0; i != v4; ++i)
      this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(*(_QWORD *)(v6 + 32) + 8 * i + 8), a2, a4);
  }
  return this;
}

uint64_t CoreML::Specification::DenseSupportVectors::ByteSizeLong(CoreML::Specification::DenseSupportVectors *this)
{
  int v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *((_DWORD *)this + 6);
  if (v1)
  {
    v2 = 0;
    v3 = *((_QWORD *)this + 4);
    v4 = *((unsigned int *)this + 6);
    do
    {
      v5 = *(unsigned int **)(v3 + 8 * v2 + 8);
      v6 = v5[4];
      v7 = 8 * v6;
      if ((_DWORD)v6)
      {
        if ((v7 & 0x80000000) != 0)
          v8 = 11;
        else
          v8 = ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6) + 1;
      }
      else
      {
        v8 = 0;
      }
      v9 = v8 + v7;
      v5[8] = v7;
      v5[9] = v9;
      v4 += v9 + ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6);
      ++v2;
    }
    while (v1 != v2);
  }
  else
  {
    v4 = 0;
  }
  *((_DWORD *)this + 10) = v4;
  return v4;
}

std::string *CoreML::Specification::DenseSupportVectors::MergeFrom(std::string *this, const CoreML::Specification::DenseSupportVectors *a2)
{
  std::string *v3;
  uint64_t v4;
  int v5;
  CoreML::Specification::GLMRegressor_DoubleArray **v6;
  unsigned int *v7;
  int v8;
  int *size;

  v3 = this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_DWORD *)a2 + 6);
  if (v5)
  {
    v6 = (CoreML::Specification::GLMRegressor_DoubleArray **)(*((_QWORD *)a2 + 4) + 8);
    v7 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((_tc_google::protobuf::internal::RepeatedPtrFieldBase *)&v3->__r_.__value_.__r.__words[2], v5);
    this = (std::string *)_tc_google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::DenseVector>::TypeHandler>((uint64_t *)&v3->__r_.__value_.__r.__words[2], (CoreML::Specification::GLMRegressor_DoubleArray **)v7, v6, v5, *(_DWORD *)v3[1].__r_.__value_.__l.__size_ - LODWORD(v3[1].__r_.__value_.__l.__data_));
    v8 = LODWORD(v3[1].__r_.__value_.__l.__data_) + v5;
    LODWORD(v3[1].__r_.__value_.__l.__data_) = v8;
    size = (int *)v3[1].__r_.__value_.__l.__size_;
    if (*size < v8)
      *size = v8;
  }
  return this;
}

uint64_t CoreML::Specification::DenseSupportVectors::IsInitialized(CoreML::Specification::DenseSupportVectors *this)
{
  return 1;
}

_QWORD *CoreML::Specification::DenseSupportVectors::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.DenseSupportVectors");
}

CoreML::Specification::Coefficients *CoreML::Specification::Coefficients::Coefficients(CoreML::Specification::Coefficients *this)
{
  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)this = &off_24D938770;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  if (this != (CoreML::Specification::Coefficients *)&CoreML::Specification::_Coefficients_default_instance_)
    CoreML::Specification::protobuf_SVM_2eproto::InitDefaults(this);
  *((_DWORD *)this + 9) = 0;
  return this;
}

void sub_2182F7D64(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v4;

  v4 = *(_QWORD **)(v2 + 24);
  if (v4)
  {
    if (!*v4)
      operator delete(v4);
  }
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::Coefficients::~Coefficients(CoreML::Specification::Coefficients *this)
{
  _QWORD *v2;

  *(_QWORD *)this = &off_24D938770;
  v2 = (_QWORD *)*((_QWORD *)this + 3);
  if (v2 && !*v2)
    operator delete(v2);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  CoreML::Specification::Coefficients::~Coefficients(this);
  JUMPOUT(0x219A19A08);
}

CoreML::Specification::Coefficients *CoreML::Specification::Coefficients::New(CoreML::Specification::Coefficients *this, _tc_google::protobuf::Arena *a2)
{
  CoreML::Specification::Coefficients *v3;

  v3 = (CoreML::Specification::Coefficients *)operator new();
  CoreML::Specification::Coefficients::Coefficients(v3);
  if (a2)
    _tc_google::protobuf::Arena::Own<CoreML::Specification::Coefficients>(a2, v3);
  return v3;
}

void sub_2182F7E4C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C406130BDD3);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::Coefficients>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::Coefficients>);
  return result;
}

uint64_t CoreML::Specification::Coefficients::Clear(uint64_t this)
{
  *(_DWORD *)(this + 16) = 0;
  return this;
}

BOOL CoreML::Specification::Coefficients::MergePartialFromCodedStream(CoreML::Specification::Coefficients *this, char **a2, unsigned int a3)
{
  unsigned int *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int TagFallback;
  char *v10;
  unsigned int VarintSizeAsIntFallback;
  BOOL v12;
  signed int v13;
  unsigned int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  unint64_t *v19;
  unint64_t v20;
  signed int v21;
  uint64_t v22;
  _BOOL8 result;
  signed int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;

  v5 = (unsigned int *)((char *)this + 16);
  do
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          v6 = *a2;
          if (*a2 < a2[1])
            break;
          v7 = 0;
LABEL_7:
          TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v7);
          v8 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
          if ((v8 & 0x100000000) != 0)
            goto LABEL_8;
LABEL_14:
          if ((_DWORD)v8)
            v12 = (v8 & 7) == 4;
          else
            v12 = 1;
          if (v12)
            return 1;
          if ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v8, a3) & 1) == 0)return 0;
        }
        v7 = *v6;
        if (*v6 < 1)
          goto LABEL_7;
        *a2 = v6 + 1;
        v8 = v7 | 0x100000000;
        if ((v8 & 0x100000000) == 0)
          goto LABEL_14;
LABEL_8:
        if ((v8 & 0xFFFFFFF8) != 8)
          goto LABEL_14;
        if (v8 != 9)
          break;
        if (!_tc_google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1>(1, 0xAu, (unint64_t **)a2, (uint64_t)v5))return 0;
      }
      if (v8 != 10)
        goto LABEL_14;
      v10 = *a2;
      if (*a2 >= a2[1] || *v10 < 0)
      {
        VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
        if ((VarintSizeAsIntFallback & 0x80000000) != 0)
          return 0;
      }
      else
      {
        VarintSizeAsIntFallback = *v10;
        *a2 = v10 + 1;
      }
      if ((VarintSizeAsIntFallback & 7) != 0)
        return 0;
      v13 = *v5;
      v14 = VarintSizeAsIntFallback >> 3;
      v15 = _tc_google::protobuf::io::CodedInputStream::BytesUntilTotalBytesLimit((_tc_google::protobuf::io::CodedInputStream *)a2);
      v16 = _tc_google::protobuf::io::CodedInputStream::BytesUntilLimit((_tc_google::protobuf::io::CodedInputStream *)a2);
      if (v16 >= v15)
        v17 = v15;
      else
        v17 = v16;
      if (v15 == -1)
        v17 = v16;
      if (v17 >= (uint64_t)VarintSizeAsIntFallback)
        break;
      if (VarintSizeAsIntFallback >= 8)
      {
        if (v14 <= 1)
          v18 = 1;
        else
          v18 = VarintSizeAsIntFallback >> 3;
        do
        {
          v28 = 0;
          v19 = (unint64_t *)*a2;
          if ((int)(*((_DWORD *)a2 + 2) - *a2) < 8)
          {
            result = _tc_google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((unint64_t **)a2, &v28);
            if (!result)
              return result;
            v20 = v28;
          }
          else
          {
            v20 = *v19;
            *a2 = (char *)(v19 + 1);
          }
          v21 = *((_DWORD *)this + 4);
          if (v21 == *((_DWORD *)this + 5))
          {
            _tc_google::protobuf::RepeatedField<double>::Reserve(v5, v21 + 1);
            v21 = *v5;
          }
          v22 = *((_QWORD *)this + 3);
          *((_DWORD *)this + 4) = v21 + 1;
          *(_QWORD *)(v22 + 8 * v21 + 8) = v20;
          --v18;
        }
        while (v18);
      }
    }
    v24 = v13 + v14;
    if ((int)*v5 >= (int)(v13 + v14))
    {
      v25 = *((_QWORD *)this + 3);
    }
    else
    {
      _tc_google::protobuf::RepeatedField<double>::Reserve(v5, v13 + v14);
      v25 = *((_QWORD *)this + 3);
      v26 = 8 * v24 - 8 * *((int *)this + 4);
      if (v26 >= 1)
        bzero((void *)(v25 + 8 + 8 * *((int *)this + 4)), 8 * (((unint64_t)v26 >> 3) - ((unint64_t)v26 > 7)) + 8);
    }
    *v5 = v24;
    v27 = v25 + 8;
    if (!v25)
      v27 = 0;
  }
  while (_tc_google::protobuf::io::CodedInputStream::ReadRaw((_tc_google::protobuf::io::CodedInputStream *)a2, (char *)(v27 + 8 * v13), VarintSizeAsIntFallback));
  if ((int)*v5 >= 1)
  {
    result = 0;
    *v5 = v13;
    return result;
  }
  return 0;
}

uint64_t CoreML::Specification::Coefficients::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  _BYTE *v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  _tc_google::protobuf::internal::WireFormatLite *v14;

  if (*(int *)(this + 16) >= 1)
  {
    v5 = this;
    if (*((int *)a2 + 4) < 5)
    {
      _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, 0xAu);
      v6 = *((_DWORD *)a2 + 4);
    }
    else
    {
      *(_BYTE *)(*((_QWORD *)a2 + 1))++ = 10;
      v6 = *((_DWORD *)a2 + 4) - 1;
      *((_DWORD *)a2 + 4) = v6;
    }
    v7 = *(_DWORD *)(v5 + 32);
    if (v6 < 5)
    {
      _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, v7);
    }
    else
    {
      v8 = *((_QWORD *)a2 + 1);
      if (v7 < 0x80)
      {
        v10 = *(_DWORD *)(v5 + 32);
        v9 = (_BYTE *)*((_QWORD *)a2 + 1);
      }
      else
      {
        v9 = (_BYTE *)*((_QWORD *)a2 + 1);
        do
        {
          *v9++ = v7 | 0x80;
          v10 = v7 >> 7;
          v11 = v7 >> 14;
          v7 >>= 7;
        }
        while (v11);
      }
      *v9 = v10;
      v12 = (_DWORD)v9 - v8 + 1;
      *((_QWORD *)a2 + 1) += v12;
      *((_DWORD *)a2 + 4) -= v12;
    }
    v13 = *(_QWORD *)(v5 + 24);
    if (v13)
      v14 = (_tc_google::protobuf::internal::WireFormatLite *)(v13 + 8);
    else
      v14 = 0;
    return _tc_google::protobuf::internal::WireFormatLite::WriteDoubleArray(v14, (const double *)*(unsigned int *)(v5 + 16), a2, a4);
  }
  return this;
}

uint64_t CoreML::Specification::Coefficients::ByteSizeLong(CoreML::Specification::Coefficients *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *((unsigned int *)this + 4);
  v2 = 8 * v1;
  if ((_DWORD)v1)
  {
    if ((v2 & 0x80000000) != 0)
      v3 = 11;
    else
      v3 = ((9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
  else
  {
    v3 = 0;
  }
  v4 = v3 + v2;
  *((_DWORD *)this + 8) = v2;
  *((_DWORD *)this + 9) = v4;
  return v4;
}

uint64_t CoreML::Specification::Coefficients::IsInitialized(CoreML::Specification::Coefficients *this)
{
  return 1;
}

_QWORD *CoreML::Specification::Coefficients::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.Coefficients");
}

CoreML::Specification::SupportVectorRegressor *CoreML::Specification::SupportVectorRegressor::SupportVectorRegressor(CoreML::Specification::SupportVectorRegressor *this)
{
  *(_QWORD *)this = &off_24D938808;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::SupportVectorRegressor *)&CoreML::Specification::_SupportVectorRegressor_default_instance_)
    CoreML::Specification::protobuf_SVM_2eproto::InitDefaults(this);
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 6) = 0;
  return this;
}

void sub_2182F82EC(_Unwind_Exception *a1)
{
  uint64_t *v1;

  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::SupportVectorRegressor::~SupportVectorRegressor(CoreML::Specification::SupportVectorRegressor *this)
{
  *(_QWORD *)this = &off_24D938808;
  CoreML::Specification::SupportVectorRegressor::SharedDtor((uint64_t *)this);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  CoreML::Specification::SupportVectorRegressor::~SupportVectorRegressor(this);
  JUMPOUT(0x219A19A08);
}

uint64_t *CoreML::Specification::SupportVectorRegressor::SharedDtor(uint64_t *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = (uint64_t)this;
  if (this != &CoreML::Specification::_SupportVectorRegressor_default_instance_)
  {
    v2 = this[2];
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    this = *(uint64_t **)(v1 + 24);
    if (this)
      this = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*this + 8))(this);
  }
  if (*(_DWORD *)(v1 + 52))
    return (uint64_t *)CoreML::Specification::SupportVectorRegressor::clear_supportVectors(v1);
  return this;
}

uint64_t CoreML::Specification::SupportVectorRegressor::clear_supportVectors(uint64_t this)
{
  uint64_t v1;
  int v2;

  v1 = this;
  v2 = *(_DWORD *)(this + 52);
  if (v2 == 3 || v2 == 2)
  {
    this = *(_QWORD *)(this + 40);
    if (this)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
  }
  *(_DWORD *)(v1 + 52) = 0;
  return this;
}

uint64_t *CoreML::Specification::SupportVectorRegressor::default_instance(CoreML::Specification::SupportVectorRegressor *this)
{
  CoreML::Specification::protobuf_SVM_2eproto::InitDefaults(this);
  return &CoreML::Specification::_SupportVectorRegressor_default_instance_;
}

CoreML::Specification::SupportVectorRegressor *CoreML::Specification::SupportVectorRegressor::New(CoreML::Specification::SupportVectorRegressor *this, _tc_google::protobuf::Arena *a2)
{
  CoreML::Specification::SupportVectorRegressor *v3;

  v3 = (CoreML::Specification::SupportVectorRegressor *)operator new();
  CoreML::Specification::SupportVectorRegressor::SupportVectorRegressor(v3);
  if (a2)
    _tc_google::protobuf::Arena::Own<CoreML::Specification::SupportVectorRegressor>(a2, v3);
  return v3;
}

void sub_2182F8488(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C4034009599);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::SupportVectorRegressor>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::SupportVectorRegressor>);
  return result;
}

uint64_t CoreML::Specification::SupportVectorRegressor::Clear(CoreML::Specification::SupportVectorRegressor *this)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *((_QWORD *)this + 2);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  return CoreML::Specification::SupportVectorRegressor::clear_supportVectors((uint64_t)this);
}

uint64_t CoreML::Specification::SupportVectorRegressor::MergePartialFromCodedStream(CoreML::Specification::SupportVectorRegressor *this, char **a2, unsigned int a3)
{
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  CoreML::Specification::Kernel *v9;
  char *v10;
  int VarintSizeAsIntFallback;
  CoreML::Specification::SparseSupportVectors *v12;
  CoreML::Specification::DenseSupportVectors *v13;
  CoreML::Specification::Coefficients *v14;
  char *v15;
  int v16;
  unint64_t *v17;
  unint64_t v18;
  char *v20;
  int v21;
  char *v22;
  int v23;
  unint64_t v24;
  unsigned int v25;
  int v26;
  uint64_t result;
  unint64_t v28;
  unsigned int v29;
  unint64_t v30;
  unsigned int v31;
  unint64_t v32;
  unsigned int v33;
  unint64_t v34;

  while (1)
  {
    while (1)
    {
      v5 = *a2;
      if (*a2 < a2[1])
        break;
      v6 = 0;
LABEL_6:
      TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v6);
      v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
      if ((v7 & 0x100000000) == 0)
        goto LABEL_30;
LABEL_7:
      switch(v7 >> 3)
      {
        case 1u:
          if (v7 != 10)
            goto LABEL_30;
          v9 = (CoreML::Specification::Kernel *)*((_QWORD *)this + 2);
          if (!v9)
          {
            v9 = (CoreML::Specification::Kernel *)operator new();
            CoreML::Specification::Kernel::Kernel(v9);
            *((_QWORD *)this + 2) = v9;
          }
          v10 = *a2;
          if (*a2 >= a2[1] || *v10 < 0)
          {
            VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
            if (VarintSizeAsIntFallback < 0)
              return 0;
          }
          else
          {
            VarintSizeAsIntFallback = *v10;
            *a2 = v10 + 1;
          }
          v24 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, VarintSizeAsIntFallback);
          if ((v24 & 0x8000000000000000) != 0)
            return 0;
          v26 = v24;
          result = CoreML::Specification::Kernel::MergePartialFromCodedStream(v9, a2, v25);
          if (!(_DWORD)result)
            return result;
          goto LABEL_59;
        case 2u:
          if (v7 != 18)
            goto LABEL_30;
          if (*((_DWORD *)this + 13) == 2)
          {
            v12 = (CoreML::Specification::SparseSupportVectors *)*((_QWORD *)this + 5);
          }
          else
          {
            CoreML::Specification::SupportVectorRegressor::clear_supportVectors((uint64_t)this);
            *((_DWORD *)this + 13) = 2;
            v12 = (CoreML::Specification::SparseSupportVectors *)operator new();
            CoreML::Specification::SparseSupportVectors::SparseSupportVectors(v12);
            *((_QWORD *)this + 5) = v12;
          }
          v20 = *a2;
          if (*a2 >= a2[1] || *v20 < 0)
          {
            v21 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
            if (v21 < 0)
              return 0;
          }
          else
          {
            v21 = *v20;
            *a2 = v20 + 1;
          }
          v30 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v21);
          if ((v30 & 0x8000000000000000) != 0)
            return 0;
          v26 = v30;
          result = CoreML::Specification::SparseSupportVectors::MergePartialFromCodedStream(v12, a2, v31);
          if (!(_DWORD)result)
            return result;
          goto LABEL_59;
        case 3u:
          if (v7 != 26)
            goto LABEL_30;
          if (*((_DWORD *)this + 13) == 3)
          {
            v13 = (CoreML::Specification::DenseSupportVectors *)*((_QWORD *)this + 5);
          }
          else
          {
            CoreML::Specification::SupportVectorRegressor::clear_supportVectors((uint64_t)this);
            *((_DWORD *)this + 13) = 3;
            v13 = (CoreML::Specification::DenseSupportVectors *)operator new();
            CoreML::Specification::DenseSupportVectors::DenseSupportVectors(v13);
            *((_QWORD *)this + 5) = v13;
          }
          v22 = *a2;
          if (*a2 >= a2[1] || *v22 < 0)
          {
            v23 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
            if (v23 < 0)
              return 0;
          }
          else
          {
            v23 = *v22;
            *a2 = v22 + 1;
          }
          v32 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v23);
          if ((v32 & 0x8000000000000000) != 0)
            return 0;
          v26 = v32;
          result = CoreML::Specification::DenseSupportVectors::MergePartialFromCodedStream(v13, a2, v33);
          if (!(_DWORD)result)
            return result;
LABEL_59:
          if (_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v26))
          {
            continue;
          }
          return 0;
        case 4u:
          if (v7 != 34)
            goto LABEL_30;
          v14 = (CoreML::Specification::Coefficients *)*((_QWORD *)this + 3);
          if (!v14)
          {
            v14 = (CoreML::Specification::Coefficients *)operator new();
            CoreML::Specification::Coefficients::Coefficients(v14);
            *((_QWORD *)this + 3) = v14;
          }
          v15 = *a2;
          if (*a2 >= a2[1] || *v15 < 0)
          {
            v16 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
            if (v16 < 0)
              return 0;
          }
          else
          {
            v16 = *v15;
            *a2 = v15 + 1;
          }
          v28 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v16);
          if ((v28 & 0x8000000000000000) != 0)
            return 0;
          v26 = v28;
          result = CoreML::Specification::Coefficients::MergePartialFromCodedStream(v14, a2, v29);
          if (!(_DWORD)result)
            return result;
          goto LABEL_59;
        case 5u:
          if (v7 != 41)
            goto LABEL_30;
          v34 = 0;
          v17 = (unint64_t *)*a2;
          if ((int)(*((_DWORD *)a2 + 2) - *a2) < 8)
          {
            result = _tc_google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((unint64_t **)a2, &v34);
            if (!(_DWORD)result)
              return result;
            v18 = v34;
          }
          else
          {
            v18 = *v17;
            *a2 = (char *)(v17 + 1);
          }
          *((_QWORD *)this + 4) = v18;
          break;
        default:
          goto LABEL_30;
      }
    }
    v6 = *v5;
    if (*v5 < 1)
      goto LABEL_6;
    *a2 = v5 + 1;
    v7 = v6 | 0x100000000;
    if ((v7 & 0x100000000) != 0)
      goto LABEL_7;
LABEL_30:
    if (!(_DWORD)v7 || (v7 & 7) == 4)
      return 1;
    if ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v7, a3) & 1) == 0)return 0;
  }
}

void sub_2182F88D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C406130BDD3);
  _Unwind_Resume(a1);
}

uint64_t *CoreML::Specification::SupportVectorRegressor::SerializeWithCachedSizes(uint64_t *this, _tc_google::protobuf::io::CodedOutputStream *a2, _tc_google::protobuf::io::CodedOutputStream *a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  double v9;

  v5 = this;
  if (this != &CoreML::Specification::_SupportVectorRegressor_default_instance_)
  {
    v6 = this[2];
    if (v6)
      this = (uint64_t *)_tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)1, v6, a2, a4);
  }
  v7 = *((_DWORD *)v5 + 13);
  if (v7 == 2)
  {
    this = (uint64_t *)_tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)2, v5[5], a2, a4);
    v7 = *((_DWORD *)v5 + 13);
  }
  if (v7 == 3)
    this = (uint64_t *)_tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)3, v5[5], a2, a4);
  if (v5 != &CoreML::Specification::_SupportVectorRegressor_default_instance_)
  {
    v8 = v5[3];
    if (v8)
      this = (uint64_t *)_tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)4, v8, a2, a4);
  }
  v9 = *((double *)v5 + 4);
  if (v9 != 0.0)
    return (uint64_t *)_tc_google::protobuf::internal::WireFormatLite::WriteDouble((_tc_google::protobuf::internal::WireFormatLite *)5, a2, v9, a3);
  return this;
}

uint64_t CoreML::Specification::SupportVectorRegressor::ByteSizeLong(CoreML::Specification::SupportVectorRegressor *this)
{
  CoreML::Specification::Kernel *v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;

  if (this == (CoreML::Specification::SupportVectorRegressor *)&CoreML::Specification::_SupportVectorRegressor_default_instance_)
  {
    v4 = 0;
  }
  else
  {
    v2 = (CoreML::Specification::Kernel *)*((_QWORD *)this + 2);
    if (v2)
    {
      v3 = CoreML::Specification::Kernel::ByteSizeLong(v2);
      v4 = v3 + ((9 * (__clz(v3 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    else
    {
      v4 = 0;
    }
    v5 = (unsigned int *)*((_QWORD *)this + 3);
    if (v5)
    {
      v6 = v5[4];
      v7 = 8 * v6;
      if ((_DWORD)v6)
      {
        if ((v7 & 0x80000000) != 0)
          v8 = 11;
        else
          v8 = ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6) + 1;
      }
      else
      {
        v8 = 0;
      }
      v9 = v8 + v7;
      v5[8] = v7;
      v5[9] = v9;
      v4 += v9 + ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
  }
  if (*((double *)this + 4) == 0.0)
    v10 = v4;
  else
    v10 = v4 + 9;
  v11 = *((_DWORD *)this + 13);
  if (v11 == 3)
  {
    v12 = CoreML::Specification::DenseSupportVectors::ByteSizeLong(*((CoreML::Specification::DenseSupportVectors **)this
                                                                   + 5));
    goto LABEL_20;
  }
  if (v11 == 2)
  {
    v12 = CoreML::Specification::SparseSupportVectors::ByteSizeLong(*((CoreML::Specification::SparseSupportVectors **)this
                                                                    + 5));
LABEL_20:
    v10 += v12 + ((9 * (__clz(v12 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
  *((_DWORD *)this + 12) = v10;
  return v10;
}

void CoreML::Specification::SupportVectorRegressor::MergeFrom(CoreML::Specification::SupportVectorRegressor *this, const CoreML::Specification::SupportVectorRegressor *a2)
{
  uint64_t v4;
  const CoreML::Specification::Kernel *v5;
  CoreML::Specification::Kernel *v6;
  const CoreML::Specification::Kernel *v7;
  const CoreML::Specification::GLMRegressor_DoubleArray *v8;
  CoreML::Specification::Coefficients *v9;
  const CoreML::Specification::GLMRegressor_DoubleArray *v10;
  double v11;
  int v12;
  CoreML::Specification::SparseSupportVectors *v13;
  CoreML::Specification::DenseSupportVectors *v14;
  CoreML::Specification::SparseSupportVectors *v15;
  const CoreML::Specification::SparseSupportVectors *v16;
  CoreML::Specification::DenseSupportVectors *v17;
  const CoreML::Specification::DenseSupportVectors *v18;

  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  if (a2 != (const CoreML::Specification::SupportVectorRegressor *)&CoreML::Specification::_SupportVectorRegressor_default_instance_)
  {
    v5 = (const CoreML::Specification::Kernel *)*((_QWORD *)a2 + 2);
    if (v5)
    {
      v6 = (CoreML::Specification::Kernel *)*((_QWORD *)this + 2);
      if (!v6)
      {
        v6 = (CoreML::Specification::Kernel *)operator new();
        CoreML::Specification::Kernel::Kernel(v6);
        *((_QWORD *)this + 2) = v6;
        v5 = (const CoreML::Specification::Kernel *)*((_QWORD *)a2 + 2);
      }
      if (v5)
        v7 = v5;
      else
        v7 = (const CoreML::Specification::Kernel *)&CoreML::Specification::_Kernel_default_instance_;
      CoreML::Specification::Kernel::MergeFrom(v6, v7);
    }
    v8 = (const CoreML::Specification::GLMRegressor_DoubleArray *)*((_QWORD *)a2 + 3);
    if (v8)
    {
      v9 = (CoreML::Specification::Coefficients *)*((_QWORD *)this + 3);
      if (!v9)
      {
        v9 = (CoreML::Specification::Coefficients *)operator new();
        CoreML::Specification::Coefficients::Coefficients(v9);
        *((_QWORD *)this + 3) = v9;
        v8 = (const CoreML::Specification::GLMRegressor_DoubleArray *)*((_QWORD *)a2 + 3);
      }
      if (v8)
        v10 = v8;
      else
        v10 = (const CoreML::Specification::GLMRegressor_DoubleArray *)&CoreML::Specification::_Coefficients_default_instance_;
      CoreML::Specification::GLMRegressor_DoubleArray::MergeFrom((uint64_t *)v9, v10);
    }
  }
  v11 = *((double *)a2 + 4);
  if (v11 != 0.0)
    *((double *)this + 4) = v11;
  v12 = *((_DWORD *)a2 + 13);
  if (v12 == 3)
  {
    if (*((_DWORD *)this + 13) == 3)
    {
      v14 = (CoreML::Specification::DenseSupportVectors *)*((_QWORD *)this + 5);
    }
    else
    {
      CoreML::Specification::SupportVectorRegressor::clear_supportVectors((uint64_t)this);
      *((_DWORD *)this + 13) = 3;
      v14 = (CoreML::Specification::DenseSupportVectors *)operator new();
      v17 = CoreML::Specification::DenseSupportVectors::DenseSupportVectors(v14);
      *((_QWORD *)this + 5) = v14;
      if (*((_DWORD *)a2 + 13) != 3)
      {
        CoreML::Specification::protobuf_SVM_2eproto::InitDefaults(v17);
        v18 = (const CoreML::Specification::DenseSupportVectors *)&CoreML::Specification::_DenseSupportVectors_default_instance_;
        goto LABEL_34;
      }
    }
    v18 = (const CoreML::Specification::DenseSupportVectors *)*((_QWORD *)a2 + 5);
LABEL_34:
    CoreML::Specification::DenseSupportVectors::MergeFrom((std::string *)v14, v18);
    return;
  }
  if (v12 == 2)
  {
    if (*((_DWORD *)this + 13) == 2)
    {
      v13 = (CoreML::Specification::SparseSupportVectors *)*((_QWORD *)this + 5);
    }
    else
    {
      CoreML::Specification::SupportVectorRegressor::clear_supportVectors((uint64_t)this);
      *((_DWORD *)this + 13) = 2;
      v13 = (CoreML::Specification::SparseSupportVectors *)operator new();
      v15 = CoreML::Specification::SparseSupportVectors::SparseSupportVectors(v13);
      *((_QWORD *)this + 5) = v13;
      if (*((_DWORD *)a2 + 13) != 2)
      {
        CoreML::Specification::protobuf_SVM_2eproto::InitDefaults(v15);
        v16 = (const CoreML::Specification::SparseSupportVectors *)&CoreML::Specification::_SparseSupportVectors_default_instance_;
        goto LABEL_32;
      }
    }
    v16 = (const CoreML::Specification::SparseSupportVectors *)*((_QWORD *)a2 + 5);
LABEL_32:
    CoreML::Specification::SparseSupportVectors::MergeFrom((std::string *)v13, v16);
  }
}

void sub_2182F8D2C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C406130BDD3);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::SupportVectorRegressor::IsInitialized(CoreML::Specification::SupportVectorRegressor *this)
{
  return 1;
}

_QWORD *CoreML::Specification::SupportVectorRegressor::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.SupportVectorRegressor");
}

CoreML::Specification::SupportVectorClassifier *CoreML::Specification::SupportVectorClassifier::SupportVectorClassifier(CoreML::Specification::SupportVectorClassifier *this)
{
  *((_QWORD *)this + 1) = 0;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_QWORD *)this = &off_24D9388A0;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_QWORD *)this + 9) = 0;
  if (this != (CoreML::Specification::SupportVectorClassifier *)&CoreML::Specification::_SupportVectorClassifier_default_instance_)
    CoreML::Specification::protobuf_SVM_2eproto::InitDefaults(this);
  *((_QWORD *)this + 17) = 0;
  *((_DWORD *)this + 42) = 0;
  *((_QWORD *)this + 20) = 0;
  return this;
}

void sub_2182F8E10(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t *v2;
  _QWORD *v3;
  _QWORD *v5;

  v5 = *(_QWORD **)(v1 + 120);
  if (v5)
  {
    if (!*v5)
      operator delete(v5);
  }
  CoreML::Specification::SupportVectorClassifier::SupportVectorClassifier(v1);
  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Destroy<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMRegressor_DoubleArray>::TypeHandler>(v3);
  CoreML::Specification::LinearQuantizationParams::LinearQuantizationParams(v1);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v2);
  _Unwind_Resume(a1);
}

void CoreML::Specification::SupportVectorClassifier::~SupportVectorClassifier(CoreML::Specification::SupportVectorClassifier *this)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;

  *(_QWORD *)this = &off_24D9388A0;
  CoreML::Specification::SupportVectorClassifier::SharedDtor((uint64_t *)this);
  v2 = (_QWORD *)*((_QWORD *)this + 15);
  if (v2 && !*v2)
    operator delete(v2);
  v3 = (_QWORD *)*((_QWORD *)this + 12);
  if (v3 && !*v3)
    operator delete(v3);
  v4 = (_QWORD *)*((_QWORD *)this + 9);
  if (v4 && !*v4)
    operator delete(v4);
  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Destroy<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMRegressor_DoubleArray>::TypeHandler>((_QWORD *)this + 5);
  v5 = (_QWORD *)*((_QWORD *)this + 3);
  if (v5 && !*v5)
    operator delete(v5);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  CoreML::Specification::SupportVectorClassifier::~SupportVectorClassifier(this);
  JUMPOUT(0x219A19A08);
}

uint64_t *CoreML::Specification::SupportVectorClassifier::SharedDtor(uint64_t *this)
{
  uint64_t v1;

  v1 = (uint64_t)this;
  if (this != &CoreML::Specification::_SupportVectorClassifier_default_instance_)
  {
    this = (uint64_t *)this[17];
    if (this)
      this = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*this + 8))(this);
  }
  if (*(_DWORD *)(v1 + 164))
    this = (uint64_t *)CoreML::Specification::SupportVectorClassifier::clear_supportVectors(v1);
  if (*(_DWORD *)(v1 + 168))
    return (uint64_t *)CoreML::Specification::SupportVectorClassifier::clear_ClassLabels(v1);
  return this;
}

uint64_t CoreML::Specification::SupportVectorClassifier::clear_supportVectors(uint64_t this)
{
  uint64_t v1;
  int v2;

  v1 = this;
  v2 = *(_DWORD *)(this + 164);
  if (v2 == 4 || v2 == 3)
  {
    this = *(_QWORD *)(this + 144);
    if (this)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
  }
  *(_DWORD *)(v1 + 164) = 0;
  return this;
}

uint64_t CoreML::Specification::SupportVectorClassifier::clear_ClassLabels(uint64_t this)
{
  uint64_t v1;
  int v2;

  v1 = this;
  v2 = *(_DWORD *)(this + 168);
  if (v2 == 101 || v2 == 100)
  {
    this = *(_QWORD *)(this + 152);
    if (this)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
  }
  *(_DWORD *)(v1 + 168) = 0;
  return this;
}

uint64_t *CoreML::Specification::SupportVectorClassifier::default_instance(CoreML::Specification::SupportVectorClassifier *this)
{
  CoreML::Specification::protobuf_SVM_2eproto::InitDefaults(this);
  return &CoreML::Specification::_SupportVectorClassifier_default_instance_;
}

CoreML::Specification::SupportVectorClassifier *CoreML::Specification::SupportVectorClassifier::New(CoreML::Specification::SupportVectorClassifier *this, _tc_google::protobuf::Arena *a2)
{
  CoreML::Specification::SupportVectorClassifier *v3;

  v3 = (CoreML::Specification::SupportVectorClassifier *)operator new();
  CoreML::Specification::SupportVectorClassifier::SupportVectorClassifier(v3);
  if (a2)
    _tc_google::protobuf::Arena::Own<CoreML::Specification::SupportVectorClassifier>(a2, v3);
  return v3;
}

void sub_2182F907C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C4069FFF750);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::SupportVectorClassifier>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::SupportVectorClassifier>);
  return result;
}

uint64_t CoreML::Specification::SupportVectorClassifier::Clear(CoreML::Specification::SupportVectorClassifier *this)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  *((_DWORD *)this + 4) = 0;
  v2 = *((unsigned int *)this + 12);
  if ((int)v2 >= 1)
  {
    v3 = (uint64_t *)(*((_QWORD *)this + 7) + 8);
    do
    {
      v4 = *v3++;
      *(_DWORD *)(v4 + 16) = 0;
      --v2;
    }
    while (v2);
    *((_DWORD *)this + 12) = 0;
  }
  *((_DWORD *)this + 16) = 0;
  *((_DWORD *)this + 22) = 0;
  *((_DWORD *)this + 28) = 0;
  v5 = *((_QWORD *)this + 17);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *((_QWORD *)this + 17) = 0;
  CoreML::Specification::SupportVectorClassifier::clear_supportVectors((uint64_t)this);
  return CoreML::Specification::SupportVectorClassifier::clear_ClassLabels((uint64_t)this);
}

uint64_t CoreML::Specification::SupportVectorClassifier::MergePartialFromCodedStream(CoreML::Specification::SupportVectorClassifier *this, _tc_google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  unsigned int *v5;
  unsigned int *v6;
  char *v7;
  signed int *v8;
  unsigned __int8 *v9;
  unint64_t v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  BOOL v15;
  unsigned int TagFallback;
  unsigned int v17;
  CoreML::Specification::Kernel *v18;
  char *v19;
  int VarintSizeAsIntFallback;
  CoreML::Specification::Int64Vector *v21;
  char *v22;
  int v23;
  CoreML::Specification::SparseSupportVectors *v24;
  CoreML::Specification::DenseSupportVectors *v25;
  CoreML::Specification::Coefficients *v26;
  char *v27;
  int v28;
  char *v29;
  unsigned int v30;
  CoreML::Specification::StringVector *v31;
  char *v32;
  unsigned int v33;
  char *v34;
  unsigned int v35;
  unsigned int v36;
  unint64_t **v37;
  uint64_t v38;
  char *v39;
  int v40;
  char *v41;
  int v42;
  char *v43;
  int v44;
  char *v45;
  int v46;
  unint64_t v47;
  unsigned int v48;
  int v49;
  uint64_t result;
  unint64_t v51;
  unsigned int v52;
  unint64_t v53;
  unsigned int v54;
  unint64_t v55;
  unsigned int v56;
  unint64_t v57;
  unsigned int v58;
  unint64_t v59;
  unsigned int v60;
  int v61;
  char *v62;
  int v63;
  uint64_t Varint32Fallback;
  signed int v65;
  uint64_t v66;
  signed int v67;
  unsigned int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  unint64_t *v73;
  unint64_t v74;
  signed int v75;
  uint64_t v76;
  signed int v77;
  uint64_t v78;
  uint64_t v79;
  signed int v80;
  unsigned int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  unint64_t *v86;
  unint64_t v87;
  signed int v88;
  uint64_t v89;
  signed int v90;
  uint64_t v91;
  uint64_t v92;
  signed int v93;
  unsigned int v94;
  int v95;
  int v96;
  int v97;
  int v98;
  unint64_t *v99;
  unint64_t v100;
  signed int v101;
  uint64_t v102;
  signed int v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unsigned int *v109;
  unint64_t v110;

  v109 = (unsigned int *)((char *)this + 112);
  v5 = (unsigned int *)((char *)this + 88);
  v6 = (unsigned int *)((char *)this + 64);
  v7 = (char *)this + 40;
  v8 = (signed int *)((char *)this + 16);
  while (2)
  {
    v9 = *(unsigned __int8 **)a2;
    v10 = *((_QWORD *)a2 + 1);
    if (*(_QWORD *)a2 >= v10)
    {
      v12 = 0;
    }
    else
    {
      v11 = v9 + 1;
      v12 = *v9;
      if ((char)*v9 >= 1)
      {
        *(_QWORD *)a2 = v11;
        v13 = v12 | 0x100000000;
        if ((v13 & 0x100000000) == 0)
          goto LABEL_9;
        goto LABEL_17;
      }
      if ((unint64_t)v11 < v10)
      {
        v14 = *v11;
        if ((v12 & ~v14) >= 0x80)
        {
          *(_QWORD *)a2 = v9 + 2;
          v13 = (v12 + (v14 << 7) - 128) | 0x100000000;
          goto LABEL_17;
        }
      }
    }
    TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v12);
    v13 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x3FFF) << 32);
    if ((v13 & 0x100000000) == 0)
      goto LABEL_9;
LABEL_17:
    v17 = v13 >> 3;
    switch(v13 >> 3)
    {
      case 1u:
        if (v13 != 10)
          goto LABEL_9;
        v18 = (CoreML::Specification::Kernel *)*((_QWORD *)this + 17);
        if (!v18)
        {
          v18 = (CoreML::Specification::Kernel *)operator new();
          CoreML::Specification::Kernel::Kernel(v18);
          *((_QWORD *)this + 17) = v18;
        }
        v19 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v19 < 0)
        {
          VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (VarintSizeAsIntFallback < 0)
            return 0;
        }
        else
        {
          VarintSizeAsIntFallback = *v19;
          *(_QWORD *)a2 = v19 + 1;
        }
        v51 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, VarintSizeAsIntFallback);
        if ((v51 & 0x8000000000000000) != 0)
          return 0;
        v49 = v51;
        result = CoreML::Specification::Kernel::MergePartialFromCodedStream(v18, (char **)a2, v52);
        if ((_DWORD)result)
          goto LABEL_108;
        return result;
      case 2u:
        if (v13 == 16)
        {
          if ((_tc_google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<int,(_tc_google::protobuf::internal::WireFormatLite::FieldType)5>(1, 0x12u, a2, v8) & 1) != 0)continue;
          return 0;
        }
        if (v13 != 18)
          goto LABEL_9;
        v22 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v22 < 0)
        {
          v23 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (v23 < 0)
            return 0;
        }
        else
        {
          v23 = *v22;
          *(_QWORD *)a2 = v22 + 1;
        }
        v61 = _tc_google::protobuf::io::CodedInputStream::PushLimit(a2, v23);
        if ((int)_tc_google::protobuf::io::CodedInputStream::BytesUntilLimit(a2) < 1)
        {
LABEL_120:
          _tc_google::protobuf::io::CodedInputStream::PopLimit((uint64_t)a2, v61);
          continue;
        }
        while (1)
        {
          v62 = *(char **)a2;
          if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1))
            break;
          v63 = *v62;
          if (*v62 < 0)
            goto LABEL_116;
          *(_QWORD *)a2 = v62 + 1;
LABEL_117:
          v65 = *((_DWORD *)this + 4);
          if (v65 == *((_DWORD *)this + 5))
          {
            _tc_google::protobuf::RepeatedField<float>::Reserve((unsigned int *)v8, v65 + 1);
            v65 = *v8;
          }
          v66 = *((_QWORD *)this + 3);
          *((_DWORD *)this + 4) = v65 + 1;
          *(_DWORD *)(v66 + 4 * v65 + 8) = v63;
          if ((int)_tc_google::protobuf::io::CodedInputStream::BytesUntilLimit(a2) <= 0)
            goto LABEL_120;
        }
        v63 = 0;
LABEL_116:
        Varint32Fallback = _tc_google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v63);
        v63 = Varint32Fallback;
        if (Varint32Fallback < 0)
          return 0;
        goto LABEL_117;
      case 3u:
        if (v13 != 26)
          goto LABEL_9;
        if (*((_DWORD *)this + 41) == 3)
        {
          v24 = (CoreML::Specification::SparseSupportVectors *)*((_QWORD *)this + 18);
        }
        else
        {
          CoreML::Specification::SupportVectorClassifier::clear_supportVectors((uint64_t)this);
          *((_DWORD *)this + 41) = 3;
          v24 = (CoreML::Specification::SparseSupportVectors *)operator new();
          CoreML::Specification::SparseSupportVectors::SparseSupportVectors(v24);
          *((_QWORD *)this + 18) = v24;
        }
        v41 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v41 < 0)
        {
          v42 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (v42 < 0)
            return 0;
        }
        else
        {
          v42 = *v41;
          *(_QWORD *)a2 = v41 + 1;
        }
        v55 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v42);
        if ((v55 & 0x8000000000000000) != 0)
          return 0;
        v49 = v55;
        result = CoreML::Specification::SparseSupportVectors::MergePartialFromCodedStream(v24, (char **)a2, v56);
        if (!(_DWORD)result)
          return result;
        goto LABEL_108;
      case 4u:
        if (v13 != 34)
          goto LABEL_9;
        if (*((_DWORD *)this + 41) == 4)
        {
          v25 = (CoreML::Specification::DenseSupportVectors *)*((_QWORD *)this + 18);
        }
        else
        {
          CoreML::Specification::SupportVectorClassifier::clear_supportVectors((uint64_t)this);
          *((_DWORD *)this + 41) = 4;
          v25 = (CoreML::Specification::DenseSupportVectors *)operator new();
          CoreML::Specification::DenseSupportVectors::DenseSupportVectors(v25);
          *((_QWORD *)this + 18) = v25;
        }
        v43 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v43 < 0)
        {
          v44 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (v44 < 0)
            return 0;
        }
        else
        {
          v44 = *v43;
          *(_QWORD *)a2 = v43 + 1;
        }
        v57 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v44);
        if ((v57 & 0x8000000000000000) != 0)
          return 0;
        v49 = v57;
        result = CoreML::Specification::DenseSupportVectors::MergePartialFromCodedStream(v25, (char **)a2, v58);
        if (!(_DWORD)result)
          return result;
        goto LABEL_108;
      case 5u:
        if (v13 != 42)
          goto LABEL_9;
        v26 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::Coefficients>::TypeHandler>((uint64_t)v7);
        v27 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v27 < 0)
        {
          v28 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (v28 < 0)
            return 0;
        }
        else
        {
          v28 = *v27;
          *(_QWORD *)a2 = v27 + 1;
        }
        v47 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v28);
        if ((v47 & 0x8000000000000000) != 0)
          return 0;
        v49 = v47;
        result = CoreML::Specification::Coefficients::MergePartialFromCodedStream(v26, (char **)a2, v48);
        if (!(_DWORD)result)
          return result;
        goto LABEL_108;
      case 6u:
        if (v13 == 49)
        {
          v36 = 50;
          v37 = (unint64_t **)a2;
          v38 = (uint64_t)v6;
          goto LABEL_67;
        }
        if (v13 != 50)
          goto LABEL_9;
        v32 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v32 < 0)
        {
          v33 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if ((v33 & 0x80000000) != 0)
            return 0;
        }
        else
        {
          v33 = *v32;
          *(_QWORD *)a2 = v32 + 1;
        }
        if ((v33 & 7) != 0)
          return 0;
        v80 = *v6;
        v81 = v33 >> 3;
        v82 = _tc_google::protobuf::io::CodedInputStream::BytesUntilTotalBytesLimit(a2);
        v83 = _tc_google::protobuf::io::CodedInputStream::BytesUntilLimit(a2);
        if (v83 >= v82)
          v84 = v82;
        else
          v84 = v83;
        if (v82 == -1)
          v84 = v83;
        if (v84 >= (uint64_t)v33)
        {
          v90 = v80 + v81;
          if ((int)*v6 >= (int)(v80 + v81))
          {
            v91 = *((_QWORD *)this + 9);
          }
          else
          {
            _tc_google::protobuf::RepeatedField<double>::Reserve(v6, v80 + v81);
            v91 = *((_QWORD *)this + 9);
            v92 = 8 * v90 - 8 * *((int *)this + 16);
            if (v92 >= 1)
              bzero((void *)(v91 + 8 + 8 * *((int *)this + 16)), 8 * (((unint64_t)v92 >> 3) - ((unint64_t)v92 > 7)) + 8);
          }
          *v6 = v90;
          v107 = v91 + 8;
          if (!v91)
            v107 = 0;
          if (!_tc_google::protobuf::io::CodedInputStream::ReadRaw(a2, (char *)(v107 + 8 * v80), v33))
          {
            if ((int)*v6 < 1)
              return 0;
            result = 0;
            *v6 = v80;
            return result;
          }
        }
        else if (v33 >= 8)
        {
          if (v81 <= 1)
            v85 = 1;
          else
            v85 = v33 >> 3;
          do
          {
            v110 = 0;
            v86 = *(unint64_t **)a2;
            if ((int)(*((_DWORD *)a2 + 2) - *(_QWORD *)a2) < 8)
            {
              result = _tc_google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((unint64_t **)a2, &v110);
              if (!(_DWORD)result)
                return result;
              v87 = v110;
            }
            else
            {
              v87 = *v86;
              *(_QWORD *)a2 = v86 + 1;
            }
            v88 = *((_DWORD *)this + 16);
            if (v88 == *((_DWORD *)this + 17))
            {
              _tc_google::protobuf::RepeatedField<double>::Reserve(v6, v88 + 1);
              v88 = *v6;
            }
            v89 = *((_QWORD *)this + 9);
            *((_DWORD *)this + 16) = v88 + 1;
            *(_QWORD *)(v89 + 8 * v88 + 8) = v87;
            --v85;
          }
          while (v85);
        }
        continue;
      case 7u:
        if (v13 == 57)
        {
          v36 = 58;
          v37 = (unint64_t **)a2;
          v38 = (uint64_t)v5;
          goto LABEL_67;
        }
        if (v13 != 58)
          goto LABEL_9;
        v34 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v34 < 0)
        {
          v35 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if ((v35 & 0x80000000) != 0)
            return 0;
        }
        else
        {
          v35 = *v34;
          *(_QWORD *)a2 = v34 + 1;
        }
        if ((v35 & 7) != 0)
          return 0;
        v93 = *v5;
        v94 = v35 >> 3;
        v95 = _tc_google::protobuf::io::CodedInputStream::BytesUntilTotalBytesLimit(a2);
        v96 = _tc_google::protobuf::io::CodedInputStream::BytesUntilLimit(a2);
        if (v96 >= v95)
          v97 = v95;
        else
          v97 = v96;
        if (v95 == -1)
          v97 = v96;
        if (v97 >= (uint64_t)v35)
        {
          v103 = v93 + v94;
          if ((int)*v5 >= (int)(v93 + v94))
          {
            v104 = *((_QWORD *)this + 12);
          }
          else
          {
            _tc_google::protobuf::RepeatedField<double>::Reserve(v5, v93 + v94);
            v104 = *((_QWORD *)this + 12);
            v105 = 8 * v103 - 8 * *((int *)this + 22);
            if (v105 >= 1)
              bzero((void *)(v104 + 8 + 8 * *((int *)this + 22)), 8 * (((unint64_t)v105 >> 3) - ((unint64_t)v105 > 7)) + 8);
          }
          *v5 = v103;
          v108 = v104 + 8;
          if (!v104)
            v108 = 0;
          if (!_tc_google::protobuf::io::CodedInputStream::ReadRaw(a2, (char *)(v108 + 8 * v93), v35))
          {
            if ((int)*v5 >= 1)
            {
              result = 0;
              *v5 = v93;
              return result;
            }
            return 0;
          }
        }
        else if (v35 >= 8)
        {
          if (v94 <= 1)
            v98 = 1;
          else
            v98 = v35 >> 3;
          do
          {
            v110 = 0;
            v99 = *(unint64_t **)a2;
            if ((int)(*((_DWORD *)a2 + 2) - *(_QWORD *)a2) < 8)
            {
              result = _tc_google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((unint64_t **)a2, &v110);
              if (!(_DWORD)result)
                return result;
              v100 = v110;
            }
            else
            {
              v100 = *v99;
              *(_QWORD *)a2 = v99 + 1;
            }
            v101 = *((_DWORD *)this + 22);
            if (v101 == *((_DWORD *)this + 23))
            {
              _tc_google::protobuf::RepeatedField<double>::Reserve(v5, v101 + 1);
              v101 = *v5;
            }
            v102 = *((_QWORD *)this + 12);
            *((_DWORD *)this + 22) = v101 + 1;
            *(_QWORD *)(v102 + 8 * v101 + 8) = v100;
            --v98;
          }
          while (v98);
        }
        continue;
      case 8u:
        if (v13 == 65)
        {
          v36 = 66;
          v37 = (unint64_t **)a2;
          v38 = (uint64_t)v109;
LABEL_67:
          if (!_tc_google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1>(1, v36, v37, v38))return 0;
          continue;
        }
        if (v13 != 66)
        {
LABEL_9:
          if ((_DWORD)v13)
            v15 = (v13 & 7) == 4;
          else
            v15 = 1;
          if (v15)
            return 1;
          if ((_tc_google::protobuf::internal::WireFormatLite::SkipField(a2, (_tc_google::protobuf::io::CodedInputStream *)v13, a3) & 1) == 0)return 0;
          continue;
        }
        v29 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v29 < 0)
        {
          v30 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if ((v30 & 0x80000000) != 0)
            return 0;
        }
        else
        {
          v30 = *v29;
          *(_QWORD *)a2 = v29 + 1;
        }
        if ((v30 & 7) != 0)
          return 0;
        v67 = *v109;
        v68 = v30 >> 3;
        v69 = _tc_google::protobuf::io::CodedInputStream::BytesUntilTotalBytesLimit(a2);
        v70 = _tc_google::protobuf::io::CodedInputStream::BytesUntilLimit(a2);
        if (v70 >= v69)
          v71 = v69;
        else
          v71 = v70;
        if (v69 == -1)
          v71 = v70;
        if (v71 < (uint64_t)v30)
        {
          if (v30 >= 8)
          {
            if (v68 <= 1)
              v72 = 1;
            else
              v72 = v30 >> 3;
            do
            {
              v110 = 0;
              v73 = *(unint64_t **)a2;
              if ((int)(*((_DWORD *)a2 + 2) - *(_QWORD *)a2) < 8)
              {
                result = _tc_google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((unint64_t **)a2, &v110);
                if (!(_DWORD)result)
                  return result;
                v74 = v110;
              }
              else
              {
                v74 = *v73;
                *(_QWORD *)a2 = v73 + 1;
              }
              v75 = *((_DWORD *)this + 28);
              if (v75 == *((_DWORD *)this + 29))
              {
                _tc_google::protobuf::RepeatedField<double>::Reserve(v109, v75 + 1);
                v75 = *v109;
              }
              v76 = *((_QWORD *)this + 15);
              *((_DWORD *)this + 28) = v75 + 1;
              *(_QWORD *)(v76 + 8 * v75 + 8) = v74;
              --v72;
            }
            while (v72);
          }
          continue;
        }
        v77 = v67 + v68;
        if ((int)*v109 >= (int)(v67 + v68))
        {
          v78 = *((_QWORD *)this + 15);
        }
        else
        {
          _tc_google::protobuf::RepeatedField<double>::Reserve(v109, v67 + v68);
          v78 = *((_QWORD *)this + 15);
          v79 = 8 * v77 - 8 * *((int *)this + 28);
          if (v79 >= 1)
            bzero((void *)(v78 + 8 + 8 * *((int *)this + 28)), 8 * (((unint64_t)v79 >> 3) - ((unint64_t)v79 > 7)) + 8);
        }
        *v109 = v77;
        v106 = v78 + 8;
        if (!v78)
          v106 = 0;
        if (_tc_google::protobuf::io::CodedInputStream::ReadRaw(a2, (char *)(v106 + 8 * v67), v30))
          continue;
        if ((int)*v109 >= 1)
        {
          result = 0;
          *v109 = v67;
          return result;
        }
        return 0;
      default:
        if (v17 == 100)
        {
          if (v13 != 34)
            goto LABEL_9;
          if (*((_DWORD *)this + 42) == 100)
          {
            v31 = (CoreML::Specification::StringVector *)*((_QWORD *)this + 19);
          }
          else
          {
            CoreML::Specification::SupportVectorClassifier::clear_ClassLabels((uint64_t)this);
            *((_DWORD *)this + 42) = 100;
            v31 = (CoreML::Specification::StringVector *)operator new();
            CoreML::Specification::StringVector::StringVector(v31);
            *((_QWORD *)this + 19) = v31;
          }
          v45 = *(char **)a2;
          if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v45 < 0)
          {
            v46 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
            if (v46 < 0)
              return 0;
          }
          else
          {
            v46 = *v45;
            *(_QWORD *)a2 = v45 + 1;
          }
          v59 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v46);
          if ((v59 & 0x8000000000000000) != 0)
            return 0;
          v49 = v59;
          result = CoreML::Specification::StringVector::MergePartialFromCodedStream(v31, (char **)a2, v60);
          if (!(_DWORD)result)
            return result;
        }
        else
        {
          if (v17 != 101 || v13 != 42)
            goto LABEL_9;
          if (*((_DWORD *)this + 42) == 101)
          {
            v21 = (CoreML::Specification::Int64Vector *)*((_QWORD *)this + 19);
          }
          else
          {
            CoreML::Specification::SupportVectorClassifier::clear_ClassLabels((uint64_t)this);
            *((_DWORD *)this + 42) = 101;
            v21 = (CoreML::Specification::Int64Vector *)operator new();
            CoreML::Specification::Int64Vector::Int64Vector(v21);
            *((_QWORD *)this + 19) = v21;
          }
          v39 = *(char **)a2;
          if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v39 < 0)
          {
            v40 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
            if (v40 < 0)
              return 0;
          }
          else
          {
            v40 = *v39;
            *(_QWORD *)a2 = v39 + 1;
          }
          v53 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v40);
          if ((v53 & 0x8000000000000000) != 0)
            return 0;
          v49 = v53;
          result = CoreML::Specification::Int64Vector::MergePartialFromCodedStream(v21, (char **)a2, v54);
          if (!(_DWORD)result)
            return result;
        }
LABEL_108:
        if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v49))
          return 0;
        continue;
    }
  }
}

void sub_2182F9CEC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C406A65A86DLL);
  _Unwind_Resume(a1);
}

uint64_t *CoreML::Specification::SupportVectorClassifier::SerializeWithCachedSizes(uint64_t *this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t *v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  _BYTE *v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  uint64_t i;
  unint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  int v22;
  int v23;
  int j;
  int v25;
  unsigned int v26;
  uint64_t v27;
  _BYTE *v28;
  unsigned int v29;
  unsigned int v30;
  int v31;
  uint64_t v32;
  _tc_google::protobuf::internal::WireFormatLite *v33;
  int v34;
  unsigned int v35;
  uint64_t v36;
  _BYTE *v37;
  unsigned int v38;
  unsigned int v39;
  int v40;
  uint64_t v41;
  _tc_google::protobuf::internal::WireFormatLite *v42;
  int v43;
  unsigned int v44;
  uint64_t v45;
  _BYTE *v46;
  unsigned int v47;
  unsigned int v48;
  int v49;
  uint64_t v50;
  _tc_google::protobuf::internal::WireFormatLite *v51;
  int v52;

  v5 = this;
  if (this != &CoreML::Specification::_SupportVectorClassifier_default_instance_)
  {
    v6 = this[17];
    if (v6)
      this = (uint64_t *)_tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)1, v6, a2, a4);
  }
  if (*((int *)v5 + 4) >= 1)
  {
    if (*((int *)a2 + 4) < 5)
    {
      this = (uint64_t *)_tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, 0x12u);
      v7 = *((_DWORD *)a2 + 4);
    }
    else
    {
      *(_BYTE *)(*((_QWORD *)a2 + 1))++ = 18;
      v7 = *((_DWORD *)a2 + 4) - 1;
      *((_DWORD *)a2 + 4) = v7;
    }
    v8 = *((_DWORD *)v5 + 8);
    if (v7 < 5)
    {
      this = (uint64_t *)_tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, v8);
    }
    else
    {
      v9 = *((_QWORD *)a2 + 1);
      if (v8 < 0x80)
      {
        v11 = *((_DWORD *)v5 + 8);
        v10 = (_BYTE *)*((_QWORD *)a2 + 1);
      }
      else
      {
        v10 = (_BYTE *)*((_QWORD *)a2 + 1);
        do
        {
          *v10++ = v8 | 0x80;
          v11 = v8 >> 7;
          v12 = v8 >> 14;
          v8 >>= 7;
        }
        while (v12);
      }
      *v10 = v11;
      v13 = (_DWORD)v10 - v9 + 1;
      *((_QWORD *)a2 + 1) += v13;
      *((_DWORD *)a2 + 4) -= v13;
    }
    v14 = *((unsigned int *)v5 + 4);
    if ((int)v14 >= 1)
    {
      for (i = 0; i != v14; ++i)
      {
        v16 = *(int *)(v5[3] + 4 * i + 8);
        if (*((int *)a2 + 4) < 10)
        {
          this = (uint64_t *)_tc_google::protobuf::io::CodedOutputStream::WriteVarint64SlowPath(a2, v16);
        }
        else
        {
          v17 = *((_QWORD *)a2 + 1);
          if (v16 < 0x80)
          {
            LODWORD(v19) = *(_DWORD *)(v5[3] + 4 * i + 8);
            v18 = (_BYTE *)*((_QWORD *)a2 + 1);
          }
          else
          {
            v18 = (_BYTE *)*((_QWORD *)a2 + 1);
            do
            {
              *v18++ = v16 | 0x80;
              v19 = v16 >> 7;
              v20 = v16 >> 14;
              v16 >>= 7;
            }
            while (v20);
          }
          *v18 = v19;
          v21 = (_DWORD)v18 - v17 + 1;
          *((_QWORD *)a2 + 1) += v21;
          *((_DWORD *)a2 + 4) -= v21;
        }
      }
    }
  }
  v22 = *((_DWORD *)v5 + 41);
  if (v22 == 3)
  {
    this = (uint64_t *)_tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)3, v5[18], a2, a4);
    v22 = *((_DWORD *)v5 + 41);
  }
  if (v22 == 4)
    this = (uint64_t *)_tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)4, v5[18], a2, a4);
  v23 = *((_DWORD *)v5 + 12);
  if (v23)
  {
    for (j = 0; j != v23; ++j)
      this = (uint64_t *)_tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)5, *(_QWORD *)(v5[7] + 8 * j + 8), a2, a4);
  }
  if (*((int *)v5 + 16) > 0)
  {
    if (*((int *)a2 + 4) < 5)
    {
      _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, 0x32u);
      v25 = *((_DWORD *)a2 + 4);
    }
    else
    {
      *(_BYTE *)(*((_QWORD *)a2 + 1))++ = 50;
      v25 = *((_DWORD *)a2 + 4) - 1;
      *((_DWORD *)a2 + 4) = v25;
    }
    v26 = *((_DWORD *)v5 + 20);
    if (v25 < 5)
    {
      _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, v26);
    }
    else
    {
      v27 = *((_QWORD *)a2 + 1);
      if (v26 < 0x80)
      {
        v29 = *((_DWORD *)v5 + 20);
        v28 = (_BYTE *)*((_QWORD *)a2 + 1);
      }
      else
      {
        v28 = (_BYTE *)*((_QWORD *)a2 + 1);
        do
        {
          *v28++ = v26 | 0x80;
          v29 = v26 >> 7;
          v30 = v26 >> 14;
          v26 >>= 7;
        }
        while (v30);
      }
      *v28 = v29;
      v31 = (_DWORD)v28 - v27 + 1;
      *((_QWORD *)a2 + 1) += v31;
      *((_DWORD *)a2 + 4) -= v31;
    }
    v32 = v5[9];
    if (v32)
      v33 = (_tc_google::protobuf::internal::WireFormatLite *)(v32 + 8);
    else
      v33 = 0;
    this = (uint64_t *)_tc_google::protobuf::internal::WireFormatLite::WriteDoubleArray(v33, (const double *)*((unsigned int *)v5 + 16), a2, a4);
  }
  if (*((int *)v5 + 22) >= 1)
  {
    if (*((int *)a2 + 4) < 5)
    {
      _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, 0x3Au);
      v34 = *((_DWORD *)a2 + 4);
    }
    else
    {
      *(_BYTE *)(*((_QWORD *)a2 + 1))++ = 58;
      v34 = *((_DWORD *)a2 + 4) - 1;
      *((_DWORD *)a2 + 4) = v34;
    }
    v35 = *((_DWORD *)v5 + 26);
    if (v34 < 5)
    {
      _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, v35);
    }
    else
    {
      v36 = *((_QWORD *)a2 + 1);
      if (v35 < 0x80)
      {
        v38 = *((_DWORD *)v5 + 26);
        v37 = (_BYTE *)*((_QWORD *)a2 + 1);
      }
      else
      {
        v37 = (_BYTE *)*((_QWORD *)a2 + 1);
        do
        {
          *v37++ = v35 | 0x80;
          v38 = v35 >> 7;
          v39 = v35 >> 14;
          v35 >>= 7;
        }
        while (v39);
      }
      *v37 = v38;
      v40 = (_DWORD)v37 - v36 + 1;
      *((_QWORD *)a2 + 1) += v40;
      *((_DWORD *)a2 + 4) -= v40;
    }
    v41 = v5[12];
    if (v41)
      v42 = (_tc_google::protobuf::internal::WireFormatLite *)(v41 + 8);
    else
      v42 = 0;
    this = (uint64_t *)_tc_google::protobuf::internal::WireFormatLite::WriteDoubleArray(v42, (const double *)*((unsigned int *)v5 + 22), a2, a4);
  }
  if (*((int *)v5 + 28) >= 1)
  {
    if (*((int *)a2 + 4) < 5)
    {
      _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, 0x42u);
      v43 = *((_DWORD *)a2 + 4);
    }
    else
    {
      *(_BYTE *)(*((_QWORD *)a2 + 1))++ = 66;
      v43 = *((_DWORD *)a2 + 4) - 1;
      *((_DWORD *)a2 + 4) = v43;
    }
    v44 = *((_DWORD *)v5 + 32);
    if (v43 < 5)
    {
      _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, v44);
    }
    else
    {
      v45 = *((_QWORD *)a2 + 1);
      if (v44 < 0x80)
      {
        v47 = *((_DWORD *)v5 + 32);
        v46 = (_BYTE *)*((_QWORD *)a2 + 1);
      }
      else
      {
        v46 = (_BYTE *)*((_QWORD *)a2 + 1);
        do
        {
          *v46++ = v44 | 0x80;
          v47 = v44 >> 7;
          v48 = v44 >> 14;
          v44 >>= 7;
        }
        while (v48);
      }
      *v46 = v47;
      v49 = (_DWORD)v46 - v45 + 1;
      *((_QWORD *)a2 + 1) += v49;
      *((_DWORD *)a2 + 4) -= v49;
    }
    v50 = v5[15];
    if (v50)
      v51 = (_tc_google::protobuf::internal::WireFormatLite *)(v50 + 8);
    else
      v51 = 0;
    this = (uint64_t *)_tc_google::protobuf::internal::WireFormatLite::WriteDoubleArray(v51, (const double *)*((unsigned int *)v5 + 28), a2, a4);
  }
  v52 = *((_DWORD *)v5 + 42);
  if (v52 == 100)
  {
    this = (uint64_t *)_tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0x64, v5[19], a2, a4);
    v52 = *((_DWORD *)v5 + 42);
  }
  if (v52 == 101)
    return (uint64_t *)_tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0x65, v5[19], a2, a4);
  return this;
}

uint64_t CoreML::Specification::SupportVectorClassifier::ByteSizeLong(CoreML::Specification::SupportVectorClassifier *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  CoreML::Specification::Kernel *v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;

  v2 = _tc_google::protobuf::internal::WireFormatLite::Int32Size((unsigned int *)this + 4);
  if (v2)
  {
    v3 = 11;
    v4 = ((9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((int)v2 >= 0)
      v3 = v4;
    v5 = v2;
  }
  else
  {
    v5 = 0;
    v3 = 0;
  }
  *((_DWORD *)this + 8) = v5;
  v6 = *((unsigned int *)this + 12);
  v7 = v3 + v2 + v6;
  if ((_DWORD)v6)
  {
    v8 = 0;
    v9 = *((_QWORD *)this + 7);
    do
    {
      v10 = *(unsigned int **)(v9 + 8 * v8 + 8);
      v11 = v10[4];
      v12 = 8 * v11;
      if ((_DWORD)v11)
      {
        if ((v12 & 0x80000000) != 0)
          v13 = 11;
        else
          v13 = ((9 * (__clz(v12 | 1) ^ 0x1F) + 73) >> 6) + 1;
      }
      else
      {
        v13 = 0;
      }
      v14 = v13 + v12;
      v10[8] = v12;
      v10[9] = v14;
      v7 += v14 + ((9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6);
      ++v8;
    }
    while ((_DWORD)v6 != v8);
  }
  v15 = *((unsigned int *)this + 16);
  v16 = 8 * v15;
  if ((_DWORD)v15)
  {
    if ((v16 & 0x80000000) != 0)
      v17 = 11;
    else
      v17 = ((9 * (__clz(v16 | 1) ^ 0x1F) + 73) >> 6) + 1;
    v7 += v17;
  }
  *((_DWORD *)this + 20) = v16;
  v18 = v7 + v16;
  v19 = *((unsigned int *)this + 22);
  v20 = 8 * v19;
  if ((_DWORD)v19)
  {
    if ((v20 & 0x80000000) != 0)
      v21 = 11;
    else
      v21 = ((9 * (__clz(v20 | 1) ^ 0x1F) + 73) >> 6) + 1;
    v18 += v21;
  }
  *((_DWORD *)this + 26) = v20;
  v22 = v18 + v20;
  v23 = *((unsigned int *)this + 28);
  v24 = 8 * v23;
  if ((_DWORD)v23)
  {
    if ((v24 & 0x80000000) != 0)
      v25 = 11;
    else
      v25 = ((9 * (__clz(v24 | 1) ^ 0x1F) + 73) >> 6) + 1;
    v22 += v25;
  }
  *((_DWORD *)this + 32) = v24;
  v26 = v22 + v24;
  if (this != (CoreML::Specification::SupportVectorClassifier *)&CoreML::Specification::_SupportVectorClassifier_default_instance_)
  {
    v27 = (CoreML::Specification::Kernel *)*((_QWORD *)this + 17);
    if (v27)
    {
      v28 = CoreML::Specification::Kernel::ByteSizeLong(v27);
      v26 += v28 + ((9 * (__clz(v28 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
  }
  v29 = *((_DWORD *)this + 41);
  if (v29 == 4)
  {
    v30 = CoreML::Specification::DenseSupportVectors::ByteSizeLong(*((CoreML::Specification::DenseSupportVectors **)this
                                                                   + 18));
  }
  else
  {
    if (v29 != 3)
      goto LABEL_37;
    v30 = CoreML::Specification::SparseSupportVectors::ByteSizeLong(*((CoreML::Specification::SparseSupportVectors **)this
                                                                    + 18));
  }
  v26 += v30 + ((9 * (__clz(v30 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_37:
  v31 = *((_DWORD *)this + 42);
  if (v31 == 101)
  {
    v32 = CoreML::Specification::Int64Vector::ByteSizeLong(*((CoreML::Specification::Int64Vector **)this + 19));
    goto LABEL_41;
  }
  if (v31 == 100)
  {
    v32 = CoreML::Specification::StringVector::ByteSizeLong(*((CoreML::Specification::StringVector **)this + 19));
LABEL_41:
    v26 += v32 + ((9 * (__clz(v32 | 1) ^ 0x1F) + 73) >> 6) + 2;
  }
  *((_DWORD *)this + 40) = v26;
  return v26;
}

void CoreML::Specification::SupportVectorClassifier::MergeFrom(CoreML::Specification::SupportVectorClassifier *this, const CoreML::Specification::SupportVectorClassifier *a2)
{
  uint64_t v4;
  int v5;
  signed int v6;
  CoreML::Specification::GLMRegressor_DoubleArray **v7;
  unsigned int *v8;
  int v9;
  int *v10;
  int v11;
  int v12;
  int v13;
  const CoreML::Specification::Kernel *v14;
  CoreML::Specification::Kernel *v15;
  const CoreML::Specification::Kernel *v16;
  int v17;
  CoreML::Specification::SparseSupportVectors *v18;
  CoreML::Specification::DenseSupportVectors *v19;
  CoreML::Specification::SparseSupportVectors *v20;
  const CoreML::Specification::SparseSupportVectors *v21;
  CoreML::Specification::DenseSupportVectors *v22;
  const CoreML::Specification::DenseSupportVectors *v23;
  int v24;
  CoreML::Specification::StringVector *v25;
  CoreML::Specification::Int64Vector *v26;
  CoreML::Specification::StringVector *v27;
  uint64_t *v28;
  CoreML::Specification::Int64Vector *v29;
  uint64_t *v30;

  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_DWORD *)a2 + 4);
  if (v5)
  {
    _tc_google::protobuf::RepeatedField<float>::Reserve((unsigned int *)this + 4, *((_DWORD *)this + 4) + v5);
    memcpy((void *)(*((_QWORD *)this + 3) + 4 * *((int *)this + 4) + 8), (const void *)(*((_QWORD *)a2 + 3) + 8), 4 * *((int *)a2 + 4));
    *((_DWORD *)this + 4) += *((_DWORD *)a2 + 4);
  }
  v6 = *((_DWORD *)a2 + 12);
  if (v6)
  {
    v7 = (CoreML::Specification::GLMRegressor_DoubleArray **)(*((_QWORD *)a2 + 7) + 8);
    v8 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((CoreML::Specification::SupportVectorClassifier *)((char *)this + 40), *((_DWORD *)a2 + 12));
    _tc_google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::Coefficients>::TypeHandler>((uint64_t *)this + 5, (CoreML::Specification::GLMRegressor_DoubleArray **)v8, v7, v6, **((_DWORD **)this + 7) - *((_DWORD *)this + 12));
    v9 = *((_DWORD *)this + 12) + v6;
    *((_DWORD *)this + 12) = v9;
    v10 = (int *)*((_QWORD *)this + 7);
    if (*v10 < v9)
      *v10 = v9;
  }
  v11 = *((_DWORD *)a2 + 16);
  if (v11)
  {
    _tc_google::protobuf::RepeatedField<double>::Reserve((unsigned int *)this + 16, *((_DWORD *)this + 16) + v11);
    memcpy((void *)(*((_QWORD *)this + 9) + 8 * *((int *)this + 16) + 8), (const void *)(*((_QWORD *)a2 + 9) + 8), 8 * *((int *)a2 + 16));
    *((_DWORD *)this + 16) += *((_DWORD *)a2 + 16);
  }
  v12 = *((_DWORD *)a2 + 22);
  if (v12)
  {
    _tc_google::protobuf::RepeatedField<double>::Reserve((unsigned int *)this + 22, *((_DWORD *)this + 22) + v12);
    memcpy((void *)(*((_QWORD *)this + 12) + 8 * *((int *)this + 22) + 8), (const void *)(*((_QWORD *)a2 + 12) + 8), 8 * *((int *)a2 + 22));
    *((_DWORD *)this + 22) += *((_DWORD *)a2 + 22);
  }
  v13 = *((_DWORD *)a2 + 28);
  if (v13)
  {
    _tc_google::protobuf::RepeatedField<double>::Reserve((unsigned int *)this + 28, *((_DWORD *)this + 28) + v13);
    memcpy((void *)(*((_QWORD *)this + 15) + 8 * *((int *)this + 28) + 8), (const void *)(*((_QWORD *)a2 + 15) + 8), 8 * *((int *)a2 + 28));
    *((_DWORD *)this + 28) += *((_DWORD *)a2 + 28);
  }
  if (a2 != (const CoreML::Specification::SupportVectorClassifier *)&CoreML::Specification::_SupportVectorClassifier_default_instance_)
  {
    v14 = (const CoreML::Specification::Kernel *)*((_QWORD *)a2 + 17);
    if (v14)
    {
      v15 = (CoreML::Specification::Kernel *)*((_QWORD *)this + 17);
      if (!v15)
      {
        v15 = (CoreML::Specification::Kernel *)operator new();
        CoreML::Specification::Kernel::Kernel(v15);
        *((_QWORD *)this + 17) = v15;
        v14 = (const CoreML::Specification::Kernel *)*((_QWORD *)a2 + 17);
      }
      if (v14)
        v16 = v14;
      else
        v16 = (const CoreML::Specification::Kernel *)&CoreML::Specification::_Kernel_default_instance_;
      CoreML::Specification::Kernel::MergeFrom(v15, v16);
    }
  }
  v17 = *((_DWORD *)a2 + 41);
  if (v17 != 4)
  {
    if (v17 != 3)
      goto LABEL_36;
    if (*((_DWORD *)this + 41) == 3)
    {
      v18 = (CoreML::Specification::SparseSupportVectors *)*((_QWORD *)this + 18);
    }
    else
    {
      CoreML::Specification::SupportVectorClassifier::clear_supportVectors((uint64_t)this);
      *((_DWORD *)this + 41) = 3;
      v18 = (CoreML::Specification::SparseSupportVectors *)operator new();
      v20 = CoreML::Specification::SparseSupportVectors::SparseSupportVectors(v18);
      *((_QWORD *)this + 18) = v18;
      if (*((_DWORD *)a2 + 41) != 3)
      {
        CoreML::Specification::protobuf_SVM_2eproto::InitDefaults(v20);
        v21 = (const CoreML::Specification::SparseSupportVectors *)&CoreML::Specification::_SparseSupportVectors_default_instance_;
        goto LABEL_33;
      }
    }
    v21 = (const CoreML::Specification::SparseSupportVectors *)*((_QWORD *)a2 + 18);
LABEL_33:
    CoreML::Specification::SparseSupportVectors::MergeFrom((std::string *)v18, v21);
    goto LABEL_36;
  }
  if (*((_DWORD *)this + 41) == 4)
  {
    v19 = (CoreML::Specification::DenseSupportVectors *)*((_QWORD *)this + 18);
  }
  else
  {
    CoreML::Specification::SupportVectorClassifier::clear_supportVectors((uint64_t)this);
    *((_DWORD *)this + 41) = 4;
    v19 = (CoreML::Specification::DenseSupportVectors *)operator new();
    v22 = CoreML::Specification::DenseSupportVectors::DenseSupportVectors(v19);
    *((_QWORD *)this + 18) = v19;
    if (*((_DWORD *)a2 + 41) != 4)
    {
      CoreML::Specification::protobuf_SVM_2eproto::InitDefaults(v22);
      v23 = (const CoreML::Specification::DenseSupportVectors *)&CoreML::Specification::_DenseSupportVectors_default_instance_;
      goto LABEL_35;
    }
  }
  v23 = (const CoreML::Specification::DenseSupportVectors *)*((_QWORD *)a2 + 18);
LABEL_35:
  CoreML::Specification::DenseSupportVectors::MergeFrom((std::string *)v19, v23);
LABEL_36:
  v24 = *((_DWORD *)a2 + 42);
  if (v24 == 101)
  {
    if (*((_DWORD *)this + 42) == 101)
    {
      v26 = (CoreML::Specification::Int64Vector *)*((_QWORD *)this + 19);
    }
    else
    {
      CoreML::Specification::SupportVectorClassifier::clear_ClassLabels((uint64_t)this);
      *((_DWORD *)this + 42) = 101;
      v26 = (CoreML::Specification::Int64Vector *)operator new();
      v29 = (CoreML::Specification::Int64Vector *)CoreML::Specification::Int64Vector::Int64Vector(v26);
      *((_QWORD *)this + 19) = v26;
      if (*((_DWORD *)a2 + 42) != 101)
      {
        v30 = CoreML::Specification::Int64Vector::default_instance(v29);
        goto LABEL_50;
      }
    }
    v30 = (uint64_t *)*((_QWORD *)a2 + 19);
LABEL_50:
    CoreML::Specification::GLMRegressor_DoubleArray::MergeFrom((uint64_t *)v26, (const CoreML::Specification::GLMRegressor_DoubleArray *)v30);
    return;
  }
  if (v24 == 100)
  {
    if (*((_DWORD *)this + 42) == 100)
    {
      v25 = (CoreML::Specification::StringVector *)*((_QWORD *)this + 19);
    }
    else
    {
      CoreML::Specification::SupportVectorClassifier::clear_ClassLabels((uint64_t)this);
      *((_DWORD *)this + 42) = 100;
      v25 = (CoreML::Specification::StringVector *)operator new();
      v27 = (CoreML::Specification::StringVector *)CoreML::Specification::StringVector::StringVector(v25);
      *((_QWORD *)this + 19) = v25;
      if (*((_DWORD *)a2 + 42) != 100)
      {
        v28 = CoreML::Specification::StringVector::default_instance(v27);
        goto LABEL_48;
      }
    }
    v28 = (uint64_t *)*((_QWORD *)a2 + 19);
LABEL_48:
    CoreML::Specification::V5::TensorValue_RepeatedStrings::MergeFrom((std::string *)v25, (const CoreML::Specification::V5::TensorValue_RepeatedStrings *)v28);
  }
}

void sub_2182FA908(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C406130BDD3);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::SupportVectorClassifier::IsInitialized(CoreML::Specification::SupportVectorClassifier *this)
{
  return 1;
}

_QWORD *CoreML::Specification::SupportVectorClassifier::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.SupportVectorClassifier");
}

CoreML::Specification::LinearKernel *CoreML::Specification::LinearKernel::New(CoreML::Specification::LinearKernel *this)
{
  return CoreML::Specification::LinearKernel::New(this, 0);
}

CoreML::Specification::RBFKernel *CoreML::Specification::RBFKernel::New(CoreML::Specification::RBFKernel *this)
{
  return CoreML::Specification::RBFKernel::New(this, 0);
}

CoreML::Specification::PolyKernel *CoreML::Specification::PolyKernel::New(CoreML::Specification::PolyKernel *this)
{
  return CoreML::Specification::PolyKernel::New(this, 0);
}

CoreML::Specification::SigmoidKernel *CoreML::Specification::SigmoidKernel::New(CoreML::Specification::SigmoidKernel *this)
{
  return CoreML::Specification::SigmoidKernel::New(this, 0);
}

CoreML::Specification::Kernel *CoreML::Specification::Kernel::New(CoreML::Specification::Kernel *this)
{
  return CoreML::Specification::Kernel::New(this, 0);
}

CoreML::Specification::SparseNode *CoreML::Specification::SparseNode::New(CoreML::Specification::SparseNode *this)
{
  return CoreML::Specification::SparseNode::New(this, 0);
}

CoreML::Specification::SparseVector *CoreML::Specification::SparseVector::New(CoreML::Specification::SparseVector *this)
{
  return CoreML::Specification::SparseVector::New(this, 0);
}

CoreML::Specification::SparseSupportVectors *CoreML::Specification::SparseSupportVectors::New(CoreML::Specification::SparseSupportVectors *this)
{
  return CoreML::Specification::SparseSupportVectors::New(this, 0);
}

CoreML::Specification::DenseVector *CoreML::Specification::DenseVector::New(CoreML::Specification::DenseVector *this)
{
  return CoreML::Specification::DenseVector::New(this, 0);
}

CoreML::Specification::DenseSupportVectors *CoreML::Specification::DenseSupportVectors::New(CoreML::Specification::DenseSupportVectors *this)
{
  return CoreML::Specification::DenseSupportVectors::New(this, 0);
}

CoreML::Specification::Coefficients *CoreML::Specification::Coefficients::New(CoreML::Specification::Coefficients *this)
{
  return CoreML::Specification::Coefficients::New(this, 0);
}

CoreML::Specification::SupportVectorRegressor *CoreML::Specification::SupportVectorRegressor::New(CoreML::Specification::SupportVectorRegressor *this)
{
  return CoreML::Specification::SupportVectorRegressor::New(this, 0);
}

CoreML::Specification::SupportVectorClassifier *CoreML::Specification::SupportVectorClassifier::New(CoreML::Specification::SupportVectorClassifier *this)
{
  return CoreML::Specification::SupportVectorClassifier::New(this, 0);
}

uint64_t CoreML::Specification::SupportVectorClassifier::GetCachedSize(CoreML::Specification::SupportVectorClassifier *this)
{
  return *((unsigned int *)this + 40);
}

CoreML::Specification::SparseNode *_tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::SparseNode>::TypeHandler>(uint64_t a1)
{
  int *v2;
  uint64_t v3;
  int v4;
  CoreML::Specification::SparseNode *Aligned;
  _tc_google::protobuf::Arena *v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(int **)(a1 + 16);
  if (!v2)
  {
    v4 = *(_DWORD *)(a1 + 12);
LABEL_6:
    _tc_google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)a1, v4 + 1);
    v2 = *(int **)(a1 + 16);
    v4 = *v2;
    goto LABEL_7;
  }
  v3 = *(int *)(a1 + 8);
  v4 = *v2;
  if ((int)v3 < *v2)
  {
    *(_DWORD *)(a1 + 8) = v3 + 1;
    return *(CoreML::Specification::SparseNode **)&v2[2 * v3 + 2];
  }
  if (v4 == *(_DWORD *)(a1 + 12))
    goto LABEL_6;
LABEL_7:
  *v2 = v4 + 1;
  v6 = *(_tc_google::protobuf::Arena **)a1;
  if (*(_QWORD *)a1)
  {
    CoreML::Specification::SparseNode::SparseNode(Aligned);
    _tc_google::protobuf::Arena::AddListNode(v6, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::SparseNode>);
  }
  else
  {
    Aligned = (CoreML::Specification::SparseNode *)operator new();
    CoreML::Specification::SparseNode::SparseNode(Aligned);
  }
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v8 + 1;
  *(_QWORD *)(v7 + 8 * v8 + 8) = Aligned;
  return Aligned;
}

void sub_2182FAADC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C404FE48876);
  _Unwind_Resume(a1);
}

uint64_t _tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::SparseNode>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

CoreML::Specification::SparseVector *_tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::SparseVector>::TypeHandler>(uint64_t a1)
{
  int *v2;
  uint64_t v3;
  int v4;
  CoreML::Specification::SparseVector *Aligned;
  _tc_google::protobuf::Arena *v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(int **)(a1 + 16);
  if (!v2)
  {
    v4 = *(_DWORD *)(a1 + 12);
LABEL_6:
    _tc_google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)a1, v4 + 1);
    v2 = *(int **)(a1 + 16);
    v4 = *v2;
    goto LABEL_7;
  }
  v3 = *(int *)(a1 + 8);
  v4 = *v2;
  if ((int)v3 < *v2)
  {
    *(_DWORD *)(a1 + 8) = v3 + 1;
    return *(CoreML::Specification::SparseVector **)&v2[2 * v3 + 2];
  }
  if (v4 == *(_DWORD *)(a1 + 12))
    goto LABEL_6;
LABEL_7:
  *v2 = v4 + 1;
  v6 = *(_tc_google::protobuf::Arena **)a1;
  if (*(_QWORD *)a1)
  {
    CoreML::Specification::SparseVector::SparseVector(Aligned);
    _tc_google::protobuf::Arena::AddListNode(v6, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::SparseVector>);
  }
  else
  {
    Aligned = (CoreML::Specification::SparseVector *)operator new();
    CoreML::Specification::SparseVector::SparseVector(Aligned);
  }
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v8 + 1;
  *(_QWORD *)(v7 + 8 * v8 + 8) = Aligned;
  return Aligned;
}

void sub_2182FAC04(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C40290C9B23);
  _Unwind_Resume(a1);
}

uint64_t _tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::SparseVector>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

CoreML::Specification::DenseVector *_tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::DenseVector>::TypeHandler>(uint64_t a1)
{
  int *v2;
  uint64_t v3;
  int v4;
  CoreML::Specification::DenseVector *Aligned;
  _tc_google::protobuf::Arena *v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(int **)(a1 + 16);
  if (!v2)
  {
    v4 = *(_DWORD *)(a1 + 12);
LABEL_6:
    _tc_google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)a1, v4 + 1);
    v2 = *(int **)(a1 + 16);
    v4 = *v2;
    goto LABEL_7;
  }
  v3 = *(int *)(a1 + 8);
  v4 = *v2;
  if ((int)v3 < *v2)
  {
    *(_DWORD *)(a1 + 8) = v3 + 1;
    return *(CoreML::Specification::DenseVector **)&v2[2 * v3 + 2];
  }
  if (v4 == *(_DWORD *)(a1 + 12))
    goto LABEL_6;
LABEL_7:
  *v2 = v4 + 1;
  v6 = *(_tc_google::protobuf::Arena **)a1;
  if (*(_QWORD *)a1)
  {
    CoreML::Specification::DenseVector::DenseVector(Aligned);
    _tc_google::protobuf::Arena::AddListNode(v6, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::DenseVector>);
  }
  else
  {
    Aligned = (CoreML::Specification::DenseVector *)operator new();
    CoreML::Specification::DenseVector::DenseVector(Aligned);
  }
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v8 + 1;
  *(_QWORD *)(v7 + 8 * v8 + 8) = Aligned;
  return Aligned;
}

void sub_2182FAD2C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C406130BDD3);
  _Unwind_Resume(a1);
}

uint64_t _tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::DenseVector>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

CoreML::Specification::Coefficients *_tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::Coefficients>::TypeHandler>(uint64_t a1)
{
  int *v2;
  uint64_t v3;
  int v4;
  CoreML::Specification::Coefficients *Aligned;
  _tc_google::protobuf::Arena *v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(int **)(a1 + 16);
  if (!v2)
  {
    v4 = *(_DWORD *)(a1 + 12);
LABEL_6:
    _tc_google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)a1, v4 + 1);
    v2 = *(int **)(a1 + 16);
    v4 = *v2;
    goto LABEL_7;
  }
  v3 = *(int *)(a1 + 8);
  v4 = *v2;
  if ((int)v3 < *v2)
  {
    *(_DWORD *)(a1 + 8) = v3 + 1;
    return *(CoreML::Specification::Coefficients **)&v2[2 * v3 + 2];
  }
  if (v4 == *(_DWORD *)(a1 + 12))
    goto LABEL_6;
LABEL_7:
  *v2 = v4 + 1;
  v6 = *(_tc_google::protobuf::Arena **)a1;
  if (*(_QWORD *)a1)
  {
    CoreML::Specification::Coefficients::Coefficients(Aligned);
    _tc_google::protobuf::Arena::AddListNode(v6, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::Coefficients>);
  }
  else
  {
    Aligned = (CoreML::Specification::Coefficients *)operator new();
    CoreML::Specification::Coefficients::Coefficients(Aligned);
  }
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v8 + 1;
  *(_QWORD *)(v7 + 8 * v8 + 8) = Aligned;
  return Aligned;
}

void sub_2182FAE54(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C406130BDD3);
  _Unwind_Resume(a1);
}

uint64_t _tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::Coefficients>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t _tc_google::protobuf::internal::RepeatedPtrFieldBase::Clear<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::SparseVector>::TypeHandler>(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;

  v1 = *(unsigned int *)(result + 8);
  if ((int)v1 >= 1)
  {
    v2 = 0;
    v3 = *(_QWORD *)(result + 16) + 8;
    do
    {
      v4 = *(_QWORD *)(v3 + 8 * v2);
      v5 = *(unsigned int *)(v4 + 24);
      if ((int)v5 >= 1)
      {
        v6 = (uint64_t *)(*(_QWORD *)(v4 + 32) + 8);
        do
        {
          v7 = *v6++;
          *(_DWORD *)(v7 + 24) = 0;
          *(_QWORD *)(v7 + 16) = 0;
          --v5;
        }
        while (v5);
        *(_DWORD *)(v4 + 24) = 0;
      }
      ++v2;
    }
    while (v2 != v1);
    *(_DWORD *)(result + 8) = 0;
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::LinearKernel>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::RBFKernel>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::PolyKernel>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::SigmoidKernel>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::Kernel>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::SparseNode>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::SparseVector>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

std::string *_tc_google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::SparseNode>::TypeHandler>(std::string *result, std::string **a2, CoreML::Specification::SparseNode **a3, signed int a4, signed int a5)
{
  _tc_google::protobuf::Arena **v9;
  uint64_t v10;
  CoreML::Specification::SparseNode **v11;
  std::string **v12;
  CoreML::Specification::SparseNode *v13;
  CoreML::Specification::SparseNode *v14;
  std::string *v15;
  int v16;
  _tc_google::protobuf::Arena *v17;
  CoreML::Specification::SparseNode **v18;
  CoreML::Specification::SparseNode **v19;
  CoreML::Specification::SparseNode *v20;
  CoreML::Specification::SparseNode *Aligned;

  v9 = (_tc_google::protobuf::Arena **)result;
  if (a5 >= a4)
    v10 = a4;
  else
    v10 = a5;
  if ((int)v10 >= 1)
  {
    v11 = a3;
    v12 = a2;
    do
    {
      v14 = *v11++;
      v13 = v14;
      v15 = *v12++;
      result = _tc_google::protobuf::internal::GenericTypeHandler<CoreML::Specification::SparseNode>::Merge(v13, v15);
      --v10;
    }
    while (v10);
  }
  v16 = a4 - a5;
  if (a4 > a5)
  {
    v17 = *v9;
    v18 = &a3[a5];
    v19 = (CoreML::Specification::SparseNode **)&a2[a5];
    do
    {
      v20 = *v18;
      if (v17)
      {
        CoreML::Specification::SparseNode::SparseNode(Aligned);
        _tc_google::protobuf::Arena::AddListNode(v17, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::SparseNode>);
      }
      else
      {
        Aligned = (CoreML::Specification::SparseNode *)operator new();
        CoreML::Specification::SparseNode::SparseNode(Aligned);
      }
      result = _tc_google::protobuf::internal::GenericTypeHandler<CoreML::Specification::SparseNode>::Merge(v20, (std::string *)Aligned);
      *v19++ = Aligned;
      ++v18;
      --v16;
    }
    while (v16);
  }
  return result;
}

void sub_2182FB070(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C404FE48876);
  _Unwind_Resume(a1);
}

std::string *_tc_google::protobuf::internal::GenericTypeHandler<CoreML::Specification::SparseNode>::Merge(CoreML::Specification::SparseNode *a1, std::string *this)
{
  return CoreML::Specification::SparseNode::MergeFrom(this, a1);
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::SparseSupportVectors>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

std::string *_tc_google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::SparseVector>::TypeHandler>(std::string *result, std::string **a2, CoreML::Specification::SparseVector **a3, signed int a4, signed int a5)
{
  _tc_google::protobuf::Arena **v9;
  uint64_t v10;
  CoreML::Specification::SparseVector **v11;
  std::string **v12;
  CoreML::Specification::SparseVector *v13;
  CoreML::Specification::SparseVector *v14;
  std::string *v15;
  int v16;
  _tc_google::protobuf::Arena *v17;
  CoreML::Specification::SparseVector **v18;
  CoreML::Specification::SparseVector **v19;
  CoreML::Specification::SparseVector *v20;
  CoreML::Specification::SparseVector *Aligned;

  v9 = (_tc_google::protobuf::Arena **)result;
  if (a5 >= a4)
    v10 = a4;
  else
    v10 = a5;
  if ((int)v10 >= 1)
  {
    v11 = a3;
    v12 = a2;
    do
    {
      v14 = *v11++;
      v13 = v14;
      v15 = *v12++;
      result = _tc_google::protobuf::internal::GenericTypeHandler<CoreML::Specification::SparseVector>::Merge(v13, v15);
      --v10;
    }
    while (v10);
  }
  v16 = a4 - a5;
  if (a4 > a5)
  {
    v17 = *v9;
    v18 = &a3[a5];
    v19 = (CoreML::Specification::SparseVector **)&a2[a5];
    do
    {
      v20 = *v18;
      if (v17)
      {
        CoreML::Specification::SparseVector::SparseVector(Aligned);
        _tc_google::protobuf::Arena::AddListNode(v17, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::SparseVector>);
      }
      else
      {
        Aligned = (CoreML::Specification::SparseVector *)operator new();
        CoreML::Specification::SparseVector::SparseVector(Aligned);
      }
      result = _tc_google::protobuf::internal::GenericTypeHandler<CoreML::Specification::SparseVector>::Merge(v20, (std::string *)Aligned);
      *v19++ = Aligned;
      ++v18;
      --v16;
    }
    while (v16);
  }
  return result;
}

void sub_2182FB1BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C40290C9B23);
  _Unwind_Resume(a1);
}

std::string *_tc_google::protobuf::internal::GenericTypeHandler<CoreML::Specification::SparseVector>::Merge(CoreML::Specification::SparseVector *a1, std::string *this)
{
  return CoreML::Specification::SparseVector::MergeFrom(this, a1);
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::DenseVector>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::DenseSupportVectors>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t *_tc_google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::DenseVector>::TypeHandler>(uint64_t *result, CoreML::Specification::GLMRegressor_DoubleArray **a2, CoreML::Specification::GLMRegressor_DoubleArray **a3, signed int a4, signed int a5)
{
  _tc_google::protobuf::Arena **v9;
  uint64_t v10;
  CoreML::Specification::GLMRegressor_DoubleArray **v11;
  CoreML::Specification::GLMRegressor_DoubleArray **v12;
  CoreML::Specification::GLMRegressor_DoubleArray *v13;
  CoreML::Specification::GLMRegressor_DoubleArray *v14;
  CoreML::Specification::GLMRegressor_DoubleArray *v15;
  int v16;
  _tc_google::protobuf::Arena *v17;
  CoreML::Specification::GLMRegressor_DoubleArray **v18;
  CoreML::Specification::DenseVector **v19;
  CoreML::Specification::GLMRegressor_DoubleArray *v20;
  CoreML::Specification::DenseVector *Aligned;

  v9 = (_tc_google::protobuf::Arena **)result;
  if (a5 >= a4)
    v10 = a4;
  else
    v10 = a5;
  if ((int)v10 >= 1)
  {
    v11 = a3;
    v12 = a2;
    do
    {
      v14 = *v11++;
      v13 = v14;
      v15 = *v12++;
      result = _tc_google::protobuf::internal::GenericTypeHandler<CoreML::Specification::GLMRegressor_DoubleArray>::Merge(v13, v15);
      --v10;
    }
    while (v10);
  }
  v16 = a4 - a5;
  if (a4 > a5)
  {
    v17 = *v9;
    v18 = &a3[a5];
    v19 = &a2[a5];
    do
    {
      v20 = *v18;
      if (v17)
      {
        CoreML::Specification::DenseVector::DenseVector(Aligned);
        _tc_google::protobuf::Arena::AddListNode(v17, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::DenseVector>);
      }
      else
      {
        Aligned = (CoreML::Specification::DenseVector *)operator new();
        CoreML::Specification::DenseVector::DenseVector(Aligned);
      }
      result = _tc_google::protobuf::internal::GenericTypeHandler<CoreML::Specification::GLMRegressor_DoubleArray>::Merge(v20, Aligned);
      *v19++ = Aligned;
      ++v18;
      --v16;
    }
    while (v16);
  }
  return result;
}

void sub_2182FB31C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C406130BDD3);
  _Unwind_Resume(a1);
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::Coefficients>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::SupportVectorRegressor>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::SupportVectorClassifier>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t *_tc_google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::Coefficients>::TypeHandler>(uint64_t *result, CoreML::Specification::GLMRegressor_DoubleArray **a2, CoreML::Specification::GLMRegressor_DoubleArray **a3, signed int a4, signed int a5)
{
  _tc_google::protobuf::Arena **v9;
  uint64_t v10;
  CoreML::Specification::GLMRegressor_DoubleArray **v11;
  CoreML::Specification::GLMRegressor_DoubleArray **v12;
  CoreML::Specification::GLMRegressor_DoubleArray *v13;
  CoreML::Specification::GLMRegressor_DoubleArray *v14;
  CoreML::Specification::GLMRegressor_DoubleArray *v15;
  int v16;
  _tc_google::protobuf::Arena *v17;
  CoreML::Specification::GLMRegressor_DoubleArray **v18;
  CoreML::Specification::Coefficients **v19;
  CoreML::Specification::GLMRegressor_DoubleArray *v20;
  CoreML::Specification::Coefficients *Aligned;

  v9 = (_tc_google::protobuf::Arena **)result;
  if (a5 >= a4)
    v10 = a4;
  else
    v10 = a5;
  if ((int)v10 >= 1)
  {
    v11 = a3;
    v12 = a2;
    do
    {
      v14 = *v11++;
      v13 = v14;
      v15 = *v12++;
      result = _tc_google::protobuf::internal::GenericTypeHandler<CoreML::Specification::GLMRegressor_DoubleArray>::Merge(v13, v15);
      --v10;
    }
    while (v10);
  }
  v16 = a4 - a5;
  if (a4 > a5)
  {
    v17 = *v9;
    v18 = &a3[a5];
    v19 = &a2[a5];
    do
    {
      v20 = *v18;
      if (v17)
      {
        CoreML::Specification::Coefficients::Coefficients(Aligned);
        _tc_google::protobuf::Arena::AddListNode(v17, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::Coefficients>);
      }
      else
      {
        Aligned = (CoreML::Specification::Coefficients *)operator new();
        CoreML::Specification::Coefficients::Coefficients(Aligned);
      }
      result = _tc_google::protobuf::internal::GenericTypeHandler<CoreML::Specification::GLMRegressor_DoubleArray>::Merge(v20, Aligned);
      *v19++ = Aligned;
      ++v18;
      --v16;
    }
    while (v16);
  }
  return result;
}

void sub_2182FB480(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C406130BDD3);
  _Unwind_Resume(a1);
}

uint64_t _GLOBAL__sub_I_SVM_pb_cc()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void turi::configure_global_environment(uint64_t a1)
{
  _BOOL8 v2;
  cppipc *file_handle_limit;
  int v4;
  file_logger *v5;
  file_logger *started;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  const std::locale::facet *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  BOOL v18;
  unint64_t v19;
  std::string *v20;
  uint64_t v21;
  int *v22;
  file_logger *v23;
  file_logger *v24;
  _QWORD *v25;
  _QWORD *v26;
  const std::locale::facet *v27;
  char v28;
  std::string *v29;
  _QWORD *exception;
  _QWORD *v31;
  std::string __p;
  std::string v33;
  char v34;
  std::locale v35;
  std::string v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v2 = turi::fs_util::upgrade_file_handle_limit((turi::fs_util *)0x1000);
  file_handle_limit = (cppipc *)turi::fs_util::get_file_handle_limit((turi::fs_util *)v2);
  v4 = (int)file_handle_limit;
  if ((int)file_handle_limit <= 4095)
  {
    file_handle_limit = (cppipc *)global_logger();
    if (*((int *)file_handle_limit + 169) <= 5)
    {
      if (cppipc::must_cancel(file_handle_limit))
        log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
      v5 = (file_logger *)global_logger();
      started = file_logger::start_stream(v5, 5, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/system/startup_teardown/startup_teardown.cpp", "configure_global_environment", 115, 1);
      v7 = pthread_getspecific(*((_QWORD *)started + 74));
      if (v7 && *((_BYTE *)v7 + 280))
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7 + 2, (uint64_t)"Unable to raise the file handle limit to 4096. ", 47);
      v8 = pthread_getspecific(*((_QWORD *)started + 74));
      if (v8 && *((_BYTE *)v8 + 280))
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8 + 2, (uint64_t)"Current file handle limit = ", 28);
      v9 = file_logger::operator<<<int>((uint64_t)started);
      v10 = pthread_getspecific(*(_QWORD *)(v9 + 592));
      if (v10 && *((_BYTE *)v10 + 280))
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10 + 2, (uint64_t)". ", 2);
      v11 = pthread_getspecific(*(_QWORD *)(v9 + 592));
      if (v11 && *((_BYTE *)v11 + 280))
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11 + 2, (uint64_t)"You may be limited to frames with about ", 40);
      v12 = file_logger::operator<<<int>(v9);
      v13 = pthread_getspecific(*(_QWORD *)(v12 + 592));
      if (v13 && *((_BYTE *)v13 + 280))
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13 + 2, (uint64_t)" columns", 8);
      file_handle_limit = (cppipc *)pthread_getspecific(*(_QWORD *)(v12 + 592));
      if (file_handle_limit)
      {
        if (*((_BYTE *)file_handle_limit + 280))
        {
          std::ios_base::getloc((const std::ios_base *)((char *)file_handle_limit
                                                      + *(_QWORD *)(*((_QWORD *)file_handle_limit + 2) - 24)
                                                      + 16));
          v14 = std::locale::use_facet(&v35, MEMORY[0x24BEDB350]);
          ((void (*)(const std::locale::facet *, uint64_t))v14->__vftable[2].~facet_0)(v14, 10);
          std::locale::~locale(&v35);
          std::ostream::put();
          std::ostream::flush();
          file_logger::stream_flush((file_logger *)v12);
          if (*(_DWORD *)(v12 + 600) == 7)
          {
            __print_back_trace();
            exception = __cxa_allocate_exception(8uLL);
            *exception = "LOG_FATAL encountered";
            __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
          }
        }
      }
    }
  }
  LODWORD(v15) = 3 * (v4 >> 2);
  if (v4 <= 511)
    v15 = 128;
  else
    v15 = v15;
  turi::SFRAME_FILE_HANDLE_POOL_SIZE = v15;
  turi::SFRAME_DEFAULT_NUM_SEGMENTS = turi::thread::cpu_count(file_handle_limit);
  turi::SFRAME_MAX_BLOCKS_IN_CACHE = 16 * turi::thread::cpu_count((turi::thread *)turi::SFRAME_DEFAULT_NUM_SEGMENTS);
  if (turi::SFRAME_SORT_MAX_SEGMENTS <= (unint64_t)turi::SFRAME_FILE_HANDLE_POOL_SIZE >> 2)
    v16 = (unint64_t)turi::SFRAME_FILE_HANDLE_POOL_SIZE >> 2;
  else
    v16 = turi::SFRAME_SORT_MAX_SEGMENTS;
  turi::SFRAME_SORT_MAX_SEGMENTS = v16;
  v17 = total_mem();
  turi::getenv_str((turi *)"DISABLE_MEMORY_AUTOTUNE", (uint64_t)&v35);
  if (!LOBYTE(v35.__locale_))
    goto LABEL_35;
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v33, v36.__r_.__value_.__l.__data_, v36.__r_.__value_.__l.__size_);
  else
    v33 = v36;
  if ((SHIBYTE(v33.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) == 1)
    {
      v18 = v33.__r_.__value_.__s.__data_[0] == 49;
      goto LABEL_40;
    }
LABEL_35:
    v18 = 0;
    goto LABEL_40;
  }
  v18 = v33.__r_.__value_.__l.__size_ == 1 && *v33.__r_.__value_.__l.__data_ == 49;
  operator delete(v33.__r_.__value_.__l.__data_);
LABEL_40:
  turi::getenv_str((turi *)"TURI_MEMORY_LIMIT_IN_MB", (uint64_t)&v33);
  boost::optional_detail::optional_base<std::string>::assign((uint64_t)&v35, (uint64_t)&v33);
  v19 = v17 >> 1;
  if (v33.__r_.__value_.__s.__data_[0] && v34 < 0)
    operator delete((void *)v33.__r_.__value_.__l.__size_);
  if (LOBYTE(v35.__locale_))
  {
    if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v20 = &v36;
    else
      v20 = (std::string *)v36.__r_.__value_.__r.__words[0];
    v21 = atoll((const char *)v20);
    if (v21)
    {
      v19 = v21 << 20;
    }
    else
    {
      v22 = (int *)global_logger();
      if (v22[169] <= 5)
      {
        if (cppipc::must_cancel((cppipc *)v22))
          log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
        v23 = (file_logger *)global_logger();
        v24 = file_logger::start_stream(v23, 5, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/system/startup_teardown/startup_teardown.cpp", "configure_global_environment", 149, 1);
        v25 = pthread_getspecific(*((_QWORD *)v24 + 74));
        if (v25 && *((_BYTE *)v25 + 280))
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25 + 2, (uint64_t)"TURI_MEMORY_LIMIT_IN_MB environment variable cannot be parsed", 61);
        v26 = pthread_getspecific(*((_QWORD *)v24 + 74));
        if (v26)
        {
          if (*((_BYTE *)v26 + 280))
          {
            std::ios_base::getloc((const std::ios_base *)((char *)v26 + *(_QWORD *)(v26[2] - 24) + 16));
            v27 = std::locale::use_facet((const std::locale *)&v33, MEMORY[0x24BEDB350]);
            ((void (*)(const std::locale::facet *, uint64_t))v27->__vftable[2].~facet_0)(v27, 10);
            std::locale::~locale((std::locale *)&v33);
            std::ostream::put();
            std::ostream::flush();
            file_logger::stream_flush(v24);
            if (*((_DWORD *)v24 + 150) == 7)
            {
              __print_back_trace();
              v31 = __cxa_allocate_exception(8uLL);
              *v31 = "LOG_FATAL encountered";
              __cxa_throw(v31, MEMORY[0x24BEDB718], 0);
            }
          }
        }
      }
    }
  }
  if (v19)
    v28 = v18;
  else
    v28 = 1;
  if ((v28 & 1) == 0)
  {
    turi::SFRAME_GROUPBY_BUFFER_NUM_ROWS = v19 / 0x500;
    turi::SFRAME_JOIN_BUFFER_NUM_CELLS = v19 >> 8;
    turi::sframe_config::SFRAME_SORT_BUFFER_SIZE = v19 >> 2;
    turi::fileio::FILEIO_MAXIMUM_CACHE_CAPACITY_PER_FILE = v19 >> 1;
    turi::fileio::FILEIO_MAXIMUM_CACHE_CAPACITY = v19 >> 1;
  }
  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  v29 = turi::globals::initialize_globals_from_environment((turi::globals *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  turi::random::get_source((turi::random *)v29);
  if (LOBYTE(v35.__locale_))
  {
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v36.__r_.__value_.__l.__data_);
  }
}

void sub_2182FBA94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, std::locale a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::locale a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  std::locale::~locale(&a16);
  if (LOBYTE(a21.__locale_))
  {
    if (a27 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void turi::global_startup::perform_startup(turi::global_startup *this)
{
  unsigned __int8 v1;

  if (!*(_BYTE *)this)
  {
    *(_BYTE *)this = 1;
    if ((v1 & 1) == 0)
    {
      {
        Eigen::internal::manage_caching_sizes(Eigen::Action,long *,long *,long *)::m_cacheSizes = xmmword_2186F1960;
        qword_254FD4068 = 0x80000;
      }
    }
    turi::MEMORY_RELEASE_THREAD = operator new();
    turi::reap_unused_temp_files((turi *)turi::MEMORY_RELEASE_THREAD);
  }
}

void *turi::global_startup::get_instance(turi::global_startup *this)
{
  return &turi::startup_impl::startup_instance;
}

void boost::optional_detail::optional_base<std::string>::assign(uint64_t a1, uint64_t a2)
{
  __int128 *v4;
  void **v5;
  __int128 v6;
  __int128 v7;

  if (*(_BYTE *)a1)
  {
    if (*(_BYTE *)a2)
    {
      v4 = (__int128 *)(a2 + 8);
      v5 = (void **)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        operator delete(*v5);
      v6 = *v4;
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      *(_OWORD *)v5 = v6;
      *(_BYTE *)(a2 + 31) = 0;
      *(_BYTE *)(a2 + 8) = 0;
    }
    else
    {
      if (*(char *)(a1 + 31) < 0)
        operator delete(*(void **)(a1 + 8));
      *(_BYTE *)a1 = 0;
    }
  }
  else if (*(_BYTE *)a2)
  {
    v7 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_BYTE *)a1 = 1;
  }
}

uint64_t _GLOBAL__sub_I_startup_teardown_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

const __CFString *DevicePolicyToString(uint64_t a1)
{
  if (a1 == 1)
    return CFSTR("cpu");
  else
    return CFSTR("auto");
}

uint64_t DevicePolicyFromString(void *a1)
{
  return objc_msgSend(a1, "isEqualToString:", CFSTR("cpu"));
}

void boost::throw_exception<boost::system::system_error>(uint64_t a1)
{
  void *exception;
  _BYTE v3[96];

  exception = __cxa_allocate_exception(0x68uLL);
  boost::exception_detail::error_info_injector<boost::system::system_error>::error_info_injector((uint64_t)v3, a1);
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::system::system_error>>::clone_impl((uint64_t)exception, (uint64_t)v3);
}

void sub_2182FBD30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::runtime_error a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16)
{
  void *v16;
  int v17;

  a15 = &unk_24D918C48;
  if (a16 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a16 + 32))(a16))
    a16 = 0;
  boost::system::system_error::~system_error(&a9);
  if (v17)
    __cxa_free_exception(v16);
  _Unwind_Resume(a1);
}

uint64_t boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::system::system_error>>::clone_impl(uint64_t a1, uint64_t a2)
{
  std::runtime_error *v4;
  std::string *v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;

  *(_QWORD *)(a1 + 96) = &unk_24D918BA8;
  v4 = std::runtime_error::runtime_error((std::runtime_error *)a1, (const std::runtime_error *)a2);
  v4->__vftable = (std::runtime_error_vtbl *)&unk_24D921E98;
  v4[1] = *(std::runtime_error *)(a2 + 16);
  v5 = (std::string *)&v4[2];
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 32), *(_QWORD *)(a2 + 40));
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 32);
    v5->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 48);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  v7 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 64) = v7;
  *(_QWORD *)(a1 + 56) = &unk_24D918C48;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7);
  v8 = *(_OWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 72) = v8;
  *(_QWORD *)a1 = &unk_24D938AE8;
  *(_QWORD *)(a1 + 56) = &unk_24D938B20;
  *(_QWORD *)(a1 + 96) = &unk_24D938B58;
  boost::exception_detail::copy_boost_exception(a1 + 56, a2 + 56);
  return a1;
}

{
  std::runtime_error *v4;
  std::string *v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;

  *(_QWORD *)(a1 + 96) = &unk_24D918BA8;
  v4 = std::runtime_error::runtime_error((std::runtime_error *)a1, (const std::runtime_error *)a2);
  v4->__vftable = (std::runtime_error_vtbl *)&unk_24D921E98;
  v4[1] = *(std::runtime_error *)(a2 + 16);
  v5 = (std::string *)&v4[2];
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 32), *(_QWORD *)(a2 + 40));
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 32);
    v5->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 48);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  v7 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = &unk_24D918C48;
  *(_QWORD *)(a1 + 64) = v7;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7);
  v8 = *(_OWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 72) = v8;
  *(_QWORD *)a1 = &unk_24D938AE8;
  *(_QWORD *)(a1 + 56) = &unk_24D938B20;
  *(_QWORD *)(a1 + 96) = &unk_24D938B58;
  return a1;
}

void sub_2182FBE84(_Unwind_Exception *a1)
{
  std::runtime_error *v1;

  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

char *boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::system::system_error>>::clone(uint64_t a1)
{
  _QWORD *v2;

  v2 = (_QWORD *)operator new();
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::system::system_error>>::clone_impl((uint64_t)v2, a1);
  return (char *)v2 + *(_QWORD *)(*v2 - 24);
}

void sub_2182FBF0C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10F3C403E1ED767);
  _Unwind_Resume(a1);
}

void boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::system::system_error>>::rethrow(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x68uLL);
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::system::system_error>>::clone_impl((uint64_t)exception, a1);
}

void sub_2182FBF6C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *`virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::system::system_error>>::clone(_QWORD *a1)
{
  return boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::system::system_error>>::clone((uint64_t)a1 + *(_QWORD *)(*a1 - 24));
}

void `virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::system::system_error>>::rethrow(_QWORD *a1)
{
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::system::system_error>>::rethrow((uint64_t)a1 + *(_QWORD *)(*a1 - 32));
}

void sub_2182FC070(_Unwind_Exception *a1)
{
  std::runtime_error *v1;

  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::exception_detail::error_info_injector<boost::system::system_error>::error_info_injector(uint64_t a1, uint64_t a2)
{
  std::runtime_error *v4;
  std::string *v5;
  __int128 v6;

  v4 = std::runtime_error::runtime_error((std::runtime_error *)a1, (const std::runtime_error *)a2);
  v4->__vftable = (std::runtime_error_vtbl *)&unk_24D921E98;
  v4[1] = *(std::runtime_error *)(a2 + 16);
  v5 = (std::string *)&v4[2];
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 32), *(_QWORD *)(a2 + 40));
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 32);
    v5->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 48);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = -1;
  *(_QWORD *)a1 = &unk_24D938B88;
  *(_QWORD *)(a1 + 56) = &unk_24D938BB0;
  *(_QWORD *)(a1 + 64) = 0;
  return a1;
}

void sub_2182FC124(_Unwind_Exception *a1)
{
  std::runtime_error *v1;

  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

uint64_t _GLOBAL__sub_I_chrono_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

uint64_t _GLOBAL__sub_I_process_cpu_clocks_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

uint64_t _GLOBAL__sub_I_thread_clock_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

uint64_t _GLOBAL__sub_I_date_generators_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

uint64_t _GLOBAL__sub_I_greg_month_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

uint64_t _GLOBAL__sub_I_greg_weekday_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

uint64_t _GLOBAL__sub_I_gregorian_types_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

uint64_t _GLOBAL__sub_I_posix_time_types_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

uint64_t boost::system::error_category::default_error_condition(boost::system::error_category *this, unsigned int a2)
{
  return a2;
}

BOOL boost::system::error_category::equivalent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v4;
  uint64_t v5;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  return *(_QWORD *)(a3 + 8) == v5 && *(_DWORD *)a3 == v4;
}

BOOL boost::system::error_category::equivalent(uint64_t a1, uint64_t a2, int a3)
{
  return *(_QWORD *)(a2 + 8) == a1 && *(_DWORD *)a2 == a3;
}

void boost::system::error_category::std_category::~std_category(std::error_category *this)
{
  std::error_category::~error_category(this);
  JUMPOUT(0x219A19A08);
}

uint64_t boost::system::error_category::std_category::name(boost::system::error_category::std_category *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1));
}

uint64_t boost::system::error_category::std_category::default_error_condition(boost::system::error_category::std_category *this)
{
  return (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 32))(*((_QWORD *)this + 1));
}

uint64_t boost::system::error_category::std_category::equivalent(boost::system::error_category::std_category *this, uint64_t a2, const std::error_condition *a3)
{
  boost::system::error_category::std_category *cat;
  boost::system::detail *v7;
  const std::error_category *v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t *v11;
  int v13;
  const std::error_category *v14;
  int val;
  uint64_t *v17;

  cat = (boost::system::error_category::std_category *)a3->__cat_;
  if (cat == this)
  {
    v11 = (uint64_t *)*((_QWORD *)this + 1);
    val = a3->__val_;
    v17 = v11;
    return (*(uint64_t (**)(uint64_t *, uint64_t, int *))(*v11 + 40))(v11, a2, &val);
  }
  v7 = (boost::system::detail *)std::generic_category();
  if (cat == v7
    || (v8 = a3->__cat_,
        v7 = (boost::system::detail *)boost::system::detail::generic_category_ncx(v7),
        v8 == (const std::error_category *)((char *)v7 + 8)))
  {
    val = a3->__val_;
    v17 = boost::system::detail::generic_category_ncx(v7);
    goto LABEL_7;
  }
  if (v9)
  {
    v10 = (uint64_t *)v9[1];
    val = a3->__val_;
    v17 = v10;
LABEL_7:
    v11 = (uint64_t *)*((_QWORD *)this + 1);
    return (*(uint64_t (**)(uint64_t *, uint64_t, int *))(*v11 + 40))(v11, a2, &val);
  }
  v13 = (*(uint64_t (**)(boost::system::error_category::std_category *, uint64_t))(*(_QWORD *)this + 24))(this, a2);
  return a3->__cat_ == v14 && a3->__val_ == v13;
}

uint64_t boost::system::error_category::std_category::equivalent(boost::system::error_category::std_category *this, const std::error_code *a2, uint64_t a3)
{
  boost::system::error_category::std_category *cat;
  boost::system::detail *v7;
  const std::error_category *v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v13;
  const std::error_category *v14;
  int val;
  uint64_t *v16;

  cat = (boost::system::error_category::std_category *)a2->__cat_;
  if (cat == this)
  {
    v11 = (uint64_t *)*((_QWORD *)this + 1);
    val = a2->__val_;
    v16 = v11;
    return (*(uint64_t (**)(uint64_t *, int *, uint64_t))(*v11 + 48))(v11, &val, a3);
  }
  v7 = (boost::system::detail *)std::generic_category();
  if (cat == v7
    || (v8 = a2->__cat_,
        v7 = (boost::system::detail *)boost::system::detail::generic_category_ncx(v7),
        v8 == (const std::error_category *)((char *)v7 + 8)))
  {
    val = a2->__val_;
    v16 = boost::system::detail::generic_category_ncx(v7);
    goto LABEL_7;
  }
  if (v9)
  {
    v10 = (uint64_t *)v9[1];
    val = a2->__val_;
    v16 = v10;
LABEL_7:
    v11 = (uint64_t *)*((_QWORD *)this + 1);
    return (*(uint64_t (**)(uint64_t *, int *, uint64_t))(*v11 + 48))(v11, &val, a3);
  }
  v13 = (uint64_t *)*((_QWORD *)this + 1);
  if (v13 != boost::system::detail::generic_category_ncx(0))
    return 0;
  v14 = std::generic_category();
  return ((uint64_t (*)(const std::error_category *, const std::error_code *, uint64_t))v14->equivalent_0)(v14, a2, a3);
}

uint64_t boost::system::error_category::std_category::message(boost::system::error_category::std_category *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 24))(*((_QWORD *)this + 1));
}

uint64_t _GLOBAL__sub_I_codecvt_error_category_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void boost::filesystem::directory_iterator::~directory_iterator(unsigned int **this)
{
  boost::detail::shared_count::~shared_count(this + 1);
}

boost::system::detail *boost::filesystem::detail::symlink_status@<X0>(const std::string *a1@<X0>, uint64_t a2@<X1>, int *a3@<X8>)
{
  const std::string *v4;
  boost::system::detail *result;
  boost::system::detail *v7;
  int v8;
  uint64_t *v9;
  int v10;
  int v11;
  void *exception;
  int *v13;
  uint64_t v14;
  uint64_t *v15;
  void *v16;
  std::string v17;
  stat v18;

  v4 = a1;
  if ((a1->__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    a1 = (const std::string *)a1->__r_.__value_.__r.__words[0];
  result = (boost::system::detail *)lstat((const char *)a1, &v18);
  if ((_DWORD)result)
  {
    if (a2)
    {
      v7 = (boost::system::detail *)__error();
      v8 = *(_DWORD *)v7;
      v9 = boost::system::detail::system_category_ncx(v7);
      *(_DWORD *)a2 = v8;
      *(_QWORD *)(a2 + 8) = v9;
    }
    result = (boost::system::detail *)__error();
    if (*(_DWORD *)result == 2)
    {
      v10 = 0;
      v11 = 1;
    }
    else
    {
      result = (boost::system::detail *)__error();
      v11 = *(_DWORD *)result == 20;
      if (*(_DWORD *)result == 20)
        v10 = 0;
      else
        v10 = 0xFFFF;
      if (*(_DWORD *)result != 20 && !a2)
      {
        exception = __cxa_allocate_exception(0x48uLL);
        std::string::basic_string[abi:ne180100]<0>(&v17, "boost::filesystem::status");
        v13 = __error();
        v14 = *v13;
        v15 = boost::system::detail::system_category_ncx((boost::system::detail *)v13);
        v16 = (void *)boost::filesystem::filesystem_error::filesystem_error((uint64_t)exception, &v17, v4, v14, (uint64_t)v15);
      }
    }
  }
  else
  {
    if (a2)
    {
      *(_DWORD *)a2 = 0;
      result = (boost::system::detail *)boost::system::detail::system_category_ncx(result);
      *(_QWORD *)(a2 + 8) = result;
    }
    v10 = 0xFFFF;
    v11 = 10;
    switch(((v18.st_mode & 0xF000u) - 4096) >> 12)
    {
      case 0u:
        v10 = v18.st_mode & 0xFFF;
        v11 = 7;
        break;
      case 1u:
        v10 = v18.st_mode & 0xFFF;
        v11 = 6;
        break;
      case 3u:
        v10 = v18.st_mode & 0xFFF;
        v11 = 3;
        break;
      case 5u:
        v10 = v18.st_mode & 0xFFF;
        v11 = 5;
        break;
      case 7u:
        v10 = v18.st_mode & 0xFFF;
        v11 = 2;
        break;
      case 9u:
        v10 = v18.st_mode & 0xFFF;
        v11 = 4;
        break;
      case 0xBu:
        v10 = v18.st_mode & 0xFFF;
        v11 = 8;
        break;
      default:
        break;
    }
  }
  *a3 = v11;
  a3[1] = v10;
  return result;
}

void sub_2182FC7FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t *`anonymous namespace'::error(uint64_t *result, const std::string *a2, const std::string *a3, uint64_t a4, char *a5)
{
  unsigned int v6;
  void *exception;
  boost::system::detail *v9;
  uint64_t *v10;
  void *v11;
  std::string v14;

  if ((_DWORD)result)
  {
    v6 = result;
    if (!a4)
    {
      exception = __cxa_allocate_exception(0x48uLL);
      v9 = (boost::system::detail *)std::string::basic_string[abi:ne180100]<0>(&v14, a5);
      v10 = boost::system::detail::system_category_ncx(v9);
      v11 = (void *)boost::filesystem::filesystem_error::filesystem_error((uint64_t)exception, &v14, a2, a3, v6, (uint64_t)v10);
    }
    result = boost::system::detail::system_category_ncx((boost::system::detail *)result);
    *(_DWORD *)a4 = v6;
  }
  else
  {
    if (!a4)
      return result;
    *(_DWORD *)a4 = 0;
    result = boost::system::detail::system_category_ncx((boost::system::detail *)result);
  }
  *(_QWORD *)(a4 + 8) = result;
  return result;
}

void sub_2182FC8DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *boost::filesystem::detail::create_symlink(const std::string *a1, const std::string *a2, uint64_t a3)
{
  const std::string *v4;
  const std::string *v5;
  uint64_t *v6;

  v4 = a2;
  v5 = a1;
  if ((a1->__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    a1 = (const std::string *)a1->__r_.__value_.__r.__words[0];
  if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    a2 = (const std::string *)a2->__r_.__value_.__r.__words[0];
  v6 = (uint64_t *)symlink((const char *)a1, (const char *)a2);
  if ((_DWORD)v6)
    v6 = (uint64_t *)*__error();
}

uint64_t boost::filesystem::detail::create_directories(std::string *a1, uint64_t a2)
{
  std::string::size_type size;
  boost::system::detail *v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;
  std::string::size_type v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  std::string::size_type v13;
  std::string::size_type v14;
  std::string *v15;
  uint64_t directory;
  boost::system::detail *v17;
  std::string::size_type v18;
  void *exception;
  boost::system::detail *v21;
  uint64_t *v22;
  void *v23;
  void *v24;
  void *v25;
  std::string v26;
  int v27;
  int v28;
  __int128 v29;
  std::string __p;

  size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) != 0)
    size = a1->__r_.__value_.__l.__size_;
  if (!size)
  {
    if (!a2)
    {
      exception = __cxa_allocate_exception(0x48uLL);
      v21 = (boost::system::detail *)std::string::basic_string[abi:ne180100]<0>(&__p, "boost::filesystem::create_directories");
      v22 = boost::system::detail::generic_category_ncx(v21);
      v23 = (void *)boost::filesystem::filesystem_error::filesystem_error((uint64_t)exception, &__p, a1, 22, (uint64_t)v22);
    }
    v6 = boost::system::detail::generic_category_ncx((boost::system::detail *)a1);
    v7 = 0;
    *(_DWORD *)a2 = 22;
LABEL_34:
    *(_QWORD *)(a2 + 8) = v6;
    return v7;
  }
  boost::filesystem::path::filename((boost::filesystem::path *)a1, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    if (__p.__r_.__value_.__l.__size_ == 1)
    {
      v8 = *__p.__r_.__value_.__l.__data_;
      operator delete(__p.__r_.__value_.__l.__data_);
      if (v8 == 46)
        goto LABEL_30;
    }
    else
    {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) == 1 && __p.__r_.__value_.__s.__data_[0] == 46)
  {
    goto LABEL_30;
  }
  v9 = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  v10 = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  if (SHIBYTE(a1->__r_.__value_.__r.__words[2]) < 0)
  {
    v11 = a1->__r_.__value_.__l.__size_;
    if (v11 <= 1)
      goto LABEL_31;
  }
  else
  {
    if (v10 < 2)
      goto LABEL_31;
    v11 = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  }
  v12 = v11 - 1;
  if ((v10 & 0x80) != 0)
  {
    if (*(_BYTE *)(a1->__r_.__value_.__r.__words[0] + v12) != 46)
      goto LABEL_31;
    v13 = a1->__r_.__value_.__l.__size_;
  }
  else
  {
    if (a1->__r_.__value_.__s.__data_[v12] != 46)
      goto LABEL_31;
    v13 = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  }
  v14 = v13 - 2;
  if ((v10 & 0x80) == 0)
  {
    if (a1->__r_.__value_.__s.__data_[v14] != 46)
      goto LABEL_31;
    if (v10 != 2)
    {
      v15 = a1;
      goto LABEL_29;
    }
LABEL_30:
    boost::filesystem::path::parent_path((boost::filesystem::path *)a1, &__p);
    directory = boost::filesystem::detail::create_directories(&__p, a2);
    goto LABEL_43;
  }
  v15 = (std::string *)a1->__r_.__value_.__r.__words[0];
  if (*(_BYTE *)(a1->__r_.__value_.__r.__words[0] + v14) != 46)
    goto LABEL_31;
  v9 = a1->__r_.__value_.__l.__size_;
  if (v9 == 2)
    goto LABEL_30;
LABEL_29:
  if (v15->__r_.__value_.__s.__data_[v9 - 3] == 47)
    goto LABEL_30;
LABEL_31:
  LODWORD(v29) = 0;
  *((_QWORD *)&v29 + 1) = boost::system::detail::system_category_ncx(v5);
  v17 = (boost::system::detail *)boost::filesystem::detail::status(a1, (uint64_t)&v29, &v28);
  if (v28 == 3)
  {
    if (!a2)
      return 0;
    *(_DWORD *)a2 = 0;
    v6 = boost::system::detail::system_category_ncx(v17);
    v7 = 0;
    goto LABEL_34;
  }
  boost::filesystem::path::parent_path((boost::filesystem::path *)a1, &__p);
  v18 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v18 = __p.__r_.__value_.__l.__size_;
  if (v18)
  {
    boost::filesystem::detail::status(&__p, (uint64_t)&v29, &v27);
    if (v27 == 1)
    {
      boost::filesystem::detail::create_directories(&__p, &v29);
      if ((_DWORD)v29)
      {
        if (!a2)
        {
          v24 = __cxa_allocate_exception(0x48uLL);
          std::string::basic_string[abi:ne180100]<0>(&v26, "boost::filesystem::create_directories");
          v25 = (void *)boost::filesystem::filesystem_error::filesystem_error((uint64_t)v24, &v26, &__p, v29, *((uint64_t *)&v29 + 1));
        }
        v7 = 0;
        *(_OWORD *)a2 = v29;
        goto LABEL_44;
      }
    }
  }
  directory = boost::filesystem::detail::create_directory(a1, a2);
LABEL_43:
  v7 = directory;
LABEL_44:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v7;
}

void sub_2182FCC5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a14 < 0)
    operator delete(__p);
  if (a24 < 0)
    operator delete(a19);
  _Unwind_Resume(exception_object);
}

BOOL boost::filesystem::detail::create_directory(const std::string *a1, uint64_t a2)
{
  const std::string *v3;
  uint64_t v4;
  int v5;
  int *v6;
  uint64_t v7;
  uint64_t *v8;
  void *exception;
  boost::system::detail *v11;
  uint64_t *v12;
  void *v13;
  std::string v14;
  int v15;
  uint64_t *v16;

  v3 = a1;
  if ((a1->__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    a1 = (const std::string *)a1->__r_.__value_.__r.__words[0];
  v4 = mkdir((const char *)a1, 0x1FFu);
  v5 = v4;
  if ((_DWORD)v4)
  {
    v6 = __error();
    v7 = *v6;
    v15 = 0;
    v16 = boost::system::detail::system_category_ncx((boost::system::detail *)v6);
    v4 = boost::filesystem::detail::status(v3, (uint64_t)&v15, &v14);
    if (LODWORD(v14.__r_.__value_.__l.__data_) != 3)
    {
      if (!a2)
      {
        exception = __cxa_allocate_exception(0x48uLL);
        v11 = (boost::system::detail *)std::string::basic_string[abi:ne180100]<0>(&v14, "boost::filesystem::create_directory");
        v12 = boost::system::detail::system_category_ncx(v11);
        v13 = (void *)boost::filesystem::filesystem_error::filesystem_error((uint64_t)exception, &v14, v3, v7, (uint64_t)v12);
      }
      v8 = boost::system::detail::system_category_ncx((boost::system::detail *)v4);
      *(_DWORD *)a2 = v7;
      goto LABEL_9;
    }
  }
  if (a2)
  {
    *(_DWORD *)a2 = 0;
    v8 = boost::system::detail::system_category_ncx((boost::system::detail *)v4);
LABEL_9:
    *(_QWORD *)(a2 + 8) = v8;
  }
  return v5 == 0;
}

void sub_2182FCDB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL `anonymous namespace'::error(boost::system::detail *a1, const std::string *a2, uint64_t a3, char *a4)
{
  unsigned int v5;
  uint64_t *v6;
  void *exception;
  boost::system::detail *v10;
  uint64_t *v11;
  void *v12;
  std::string v14;

  v5 = a1;
  if ((_DWORD)a1)
  {
    if (!a3)
    {
      exception = __cxa_allocate_exception(0x48uLL);
      v10 = (boost::system::detail *)std::string::basic_string[abi:ne180100]<0>(&v14, a4);
      v11 = boost::system::detail::system_category_ncx(v10);
      v12 = (void *)boost::filesystem::filesystem_error::filesystem_error((uint64_t)exception, &v14, a2, v5, (uint64_t)v11);
    }
    v6 = boost::system::detail::system_category_ncx(a1);
    *(_DWORD *)a3 = v5;
    goto LABEL_6;
  }
  if (a3)
  {
    *(_DWORD *)a3 = 0;
    v6 = boost::system::detail::system_category_ncx(a1);
LABEL_6:
    *(_QWORD *)(a3 + 8) = v6;
  }
  return v5 != 0;
}

void sub_2182FCE94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL boost::filesystem::detail::remove(boost::system::detail *a1, uint64_t a2)
{
  int v4;
  boost::system::detail *v5;
  BOOL v6;
  _BOOL8 result;
  unsigned int v8;
  uint64_t *v9;
  int v10;

  v8 = 0;
  v9 = boost::system::detail::system_category_ncx(a1);
  boost::filesystem::detail::symlink_status((const std::string *)a1, (uint64_t)&v8, &v10);
  v4 = v10;
  if (v10)
    v5 = 0;
  else
    v5 = (boost::system::detail *)v8;
  result = 0;
  if (!v6)
  return result;
}

BOOL `anonymous namespace'::remove_file_or_directory(std::string *a1, int a2, uint64_t a3)
{
  const std::string *v4;
  uint64_t *v5;
  _BOOL8 result;
  boost::system::detail *v7;
  int *v8;

  v4 = a1;
  if (a2 == 3)
  {
    if ((a1->__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      a1 = (std::string *)a1->__r_.__value_.__r.__words[0];
    v7 = (boost::system::detail *)rmdir((const char *)a1);
    if ((_DWORD)v7)
    {
LABEL_12:
      v8 = __error();
        v7 = 0;
      else
        v7 = (boost::system::detail *)*__error();
    }
  }
  else
  {
    if (a2 == 1)
    {
      if (a3)
      {
        *(_DWORD *)a3 = 0;
        v5 = boost::system::detail::system_category_ncx((boost::system::detail *)a1);
        result = 0;
        *(_QWORD *)(a3 + 8) = v5;
        return result;
      }
      return 0;
    }
    if ((a1->__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      a1 = (std::string *)a1->__r_.__value_.__r.__words[0];
    v7 = (boost::system::detail *)unlink((const char *)a1);
    if ((_DWORD)v7)
      goto LABEL_12;
  }
}

uint64_t boost::filesystem::detail::remove_all(boost::system::detail *a1, _DWORD *a2)
{
  unsigned int v4;
  boost::system::detail *v5;
  BOOL v6;
  uint64_t result;
  unsigned int v8;
  uint64_t *v9;
  unsigned int v10;

  v8 = 0;
  v9 = boost::system::detail::system_category_ncx(a1);
  boost::filesystem::detail::symlink_status((const std::string *)a1, (uint64_t)&v8, (int *)&v10);
  v4 = v10;
  if (v10)
    v5 = 0;
  else
    v5 = (boost::system::detail *)v8;
  result = 0;
  if (v4 >= 2 && !v6)
  return result;
}

uint64_t `anonymous namespace'::remove_all_aux(const boost::filesystem::path *a1, int a2, _DWORD *a3)
{
  boost::filesystem::path *v6;
  boost::filesystem::path *v7;
  unsigned int *v8;
  unsigned int v9;
  __int128 v10;
  uint64_t v11;
  boost::filesystem::path *v12;
  boost::filesystem::path *v13;
  unsigned int *v14;
  unsigned int v15;
  __int128 v16;
  boost::filesystem::path *v17;
  boost::filesystem::path *v19;
  unsigned int *v20;
  boost::filesystem::path *v21[2];
  __int128 v22;

  if (a2 != 3)
  {
    v11 = 1;
    goto LABEL_27;
  }
  v21[0] = 0;
  v21[1] = 0;
  if (a3)
  {
    boost::filesystem::directory_iterator::directory_iterator((uint64_t *)&v19, (uint64_t)a1, (uint64_t)a3);
    v6 = v19;
    v7 = (boost::filesystem::path *)v20;
    if (v20)
    {
      v8 = v20 + 2;
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
    }
    v10 = *(_OWORD *)v21;
    v21[0] = v6;
    v21[1] = v7;
    v22 = v10;
    boost::detail::shared_count::~shared_count((unsigned int **)&v22 + 1);
    boost::detail::shared_count::~shared_count(&v20);
    if (*a3)
    {
      v11 = 1;
LABEL_8:
      boost::detail::shared_count::~shared_count((unsigned int **)&v21[1]);
      return v11;
    }
  }
  else
  {
    boost::filesystem::directory_iterator::directory_iterator((boost::filesystem::directory_iterator *)&v19, a1);
    v12 = v19;
    v13 = (boost::filesystem::path *)v20;
    if (v20)
    {
      v14 = v20 + 2;
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    v16 = *(_OWORD *)v21;
    v21[0] = v12;
    v21[1] = v13;
    v22 = v16;
    boost::detail::shared_count::~shared_count((unsigned int **)&v22 + 1);
    boost::detail::shared_count::~shared_count(&v20);
  }
  v11 = 1;
  {
    if (v21[0])
    {
      v17 = v21[0];
        goto LABEL_21;
    }
    else
    {
        goto LABEL_21;
    }
    if (!*((_QWORD *)v17 + 5))
      break;
LABEL_21:
    boost::filesystem::detail::symlink_status((const std::string *)v21[0], (uint64_t)a3, (int *)&v22);
    if (a3 && *a3)
      goto LABEL_8;
    if (a3)
    {
      if (*a3)
        goto LABEL_8;
    }
    boost::filesystem::detail::directory_iterator_increment((boost::system::detail *)v21, 0);
  }
  boost::detail::shared_count::~shared_count((unsigned int **)&v21[1]);
LABEL_27:
  return v11;
}

void sub_2182FD254(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  boost::detail::shared_count::~shared_count((unsigned int **)va);
  _Unwind_Resume(a1);
}

uint64_t boost::filesystem::detail::status@<X0>(const std::string *a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X8>)
{
  const std::string *v4;
  boost::system::detail *v6;
  boost::system::detail *v7;
  int v8;
  uint64_t *v9;
  int *v10;
  uint64_t result;
  int v12;
  void *exception;
  int *v14;
  uint64_t v15;
  uint64_t *v16;
  void *v17;
  std::string v18;
  stat v19;

  v4 = a1;
  if ((a1->__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    a1 = (const std::string *)a1->__r_.__value_.__r.__words[0];
  v6 = (boost::system::detail *)stat((const char *)a1, &v19);
  if ((_DWORD)v6)
  {
    if (a2)
    {
      v7 = (boost::system::detail *)__error();
      v8 = *(_DWORD *)v7;
      v9 = boost::system::detail::system_category_ncx(v7);
      *(_DWORD *)a2 = v8;
      *(_QWORD *)(a2 + 8) = v9;
    }
    v10 = __error();
    if ((_DWORD)result)
      v12 = 0;
    else
      v12 = 0xFFFF;
    if ((result & 1) == 0 && !a2)
    {
      exception = __cxa_allocate_exception(0x48uLL);
      std::string::basic_string[abi:ne180100]<0>(&v18, "boost::filesystem::status");
      v14 = __error();
      v15 = *v14;
      v16 = boost::system::detail::system_category_ncx((boost::system::detail *)v14);
      v17 = (void *)boost::filesystem::filesystem_error::filesystem_error((uint64_t)exception, &v18, v4, v15, (uint64_t)v16);
    }
  }
  else
  {
    if (a2)
    {
      *(_DWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = boost::system::detail::system_category_ncx(v6);
    }
    v12 = 0xFFFF;
    result = 10;
    switch(((v19.st_mode & 0xF000u) - 4096) >> 12)
    {
      case 0u:
        v12 = v19.st_mode & 0xFFF;
        result = 7;
        break;
      case 1u:
        v12 = v19.st_mode & 0xFFF;
        result = 6;
        break;
      case 3u:
        v12 = v19.st_mode & 0xFFF;
        result = 3;
        break;
      case 5u:
        v12 = v19.st_mode & 0xFFF;
        result = 5;
        break;
      case 7u:
        v12 = v19.st_mode & 0xFFF;
        result = 2;
        break;
      case 0xBu:
        v12 = v19.st_mode & 0xFFF;
        result = 8;
        break;
      default:
        break;
    }
  }
  *a3 = result;
  a3[1] = v12;
  return result;
}

void sub_2182FD3EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

BOOL `anonymous namespace'::not_found_error(_anonymous_namespace_ *this)
{
  return *__error() == 2 || *__error() == 20;
}

double boost::filesystem::directory_entry::m_get_status@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, double *a3@<X8>)
{
  BOOL v5;
  int v6;
  int v7;
  double result;
  uint64_t v10;

  if (*(_DWORD *)(a1 + 24))
    v5 = *(_DWORD *)(a1 + 28) == 0xFFFF;
  else
    v5 = 1;
  if (v5)
  {
    v6 = *(_DWORD *)(a1 + 32);
    v7 = *(_DWORD *)(a1 + 36);
    if ((v6 & 0xFFFFFFFB) == 0 || v7 == 0xFFFF)
    {
      boost::filesystem::detail::status((const std::string *)a1, a2, &v10);
      *(_QWORD *)(a1 + 24) = v10;
      goto LABEL_14;
    }
    *(_DWORD *)(a1 + 24) = v6;
    *(_DWORD *)(a1 + 28) = v7;
  }
  if (a2)
  {
    *(_DWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = boost::system::detail::system_category_ncx((boost::system::detail *)a1);
  }
LABEL_14:
  result = *(double *)(a1 + 24);
  *a3 = result;
  return result;
}

_DWORD *boost::filesystem::directory_entry::m_get_symlink_status@<X0>(_DWORD *result@<X0>, uint64_t a2@<X1>, int *a3@<X8>)
{
  _DWORD *v4;
  int v6;
  int v7;
  BOOL v8;
  int v9[2];

  v4 = result;
  v6 = result[8];
  v7 = result[9];
  if (v6)
    v8 = v7 == 0xFFFF;
  else
    v8 = 1;
  if (v8)
  {
    result = boost::filesystem::detail::symlink_status((const std::string *)result, a2, v9);
    v6 = v9[0];
    v7 = v9[1];
    v4[8] = v9[0];
    v4[9] = v7;
  }
  else if (a2)
  {
    *(_DWORD *)a2 = 0;
    result = boost::system::detail::system_category_ncx((boost::system::detail *)result);
    *(_QWORD *)(a2 + 8) = result;
    v6 = v4[8];
    v7 = v4[9];
  }
  *a3 = v6;
  a3[1] = v7;
  return result;
}

unint64_t boost::filesystem::detail::dir_itr_close(DIR **this, void **a2, void **a3)
{
  DIR *v5;
  int *v6;
  unsigned int v7;
  unint64_t v8;

  free(*a2);
  *a2 = 0;
  v5 = *this;
  if (*this)
  {
    *this = 0;
    v6 = (int *)closedir(v5);
    if ((_DWORD)v6)
    {
      v6 = __error();
      v7 = *v6;
    }
    else
    {
      v7 = 0;
    }
    boost::system::detail::system_category_ncx((boost::system::detail *)v6);
    v8 = 0;
  }
  else
  {
  }
  return v8 | v7;
}

void boost::filesystem::detail::directory_iterator_construct(boost::system::detail *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  boost::system::detail *v7;
  std::string::size_type v8;
  const char *v9;
  DIR *v10;
  std::string::size_type v11;
  std::string::size_type size;
  unsigned int v13;
  unint64_t v14;
  __int128 v15;
  int *v16;
  std::string::size_type v17;
  std::string::size_type v18;
  std::string *v19;
  __int128 v20;
  __int128 v21;
  std::string v22;
  std::string __str;
  _DWORD v24[2];
  std::string v25;

  v6 = *(unsigned __int8 *)(a2 + 23);
  if ((v6 & 0x80u) != 0)
    v6 = *(_QWORD *)(a2 + 8);
  if (v6)
    v7 = 0;
  else
    return;
  memset(v24, 0, 7);
  v8 = *(_QWORD *)a1;
  if (*(char *)(a2 + 23) >= 0)
    v9 = (const char *)a2;
  else
    v9 = *(const char **)a2;
  v10 = opendir(v9);
  *(_QWORD *)(v8 + 40) = v10;
  if (v10)
  {
    std::string::basic_string[abi:ne180100]<0>(&v25, ".");
    size = v25.__r_.__value_.__l.__size_;
    v11 = v25.__r_.__value_.__r.__words[0];
    v24[0] = v25.__r_.__value_.__r.__words[2];
    *(_DWORD *)((char *)v24 + 3) = *(_DWORD *)((char *)&v25.__r_.__value_.__r.__words[2] + 3);
    v13 = HIBYTE(v25.__r_.__value_.__r.__words[2]);
    {
      *(_QWORD *)(v8 + 48) = malloc_type_malloc(0x419uLL, 0xB46CB279uLL);
    }
    if ((_DWORD)v14)
      goto LABEL_14;
  }
  else
  {
    v16 = __error();
    v14 = *v16;
    boost::system::detail::system_category_ncx((boost::system::detail *)v16);
    v13 = 0;
    size = 0;
    v11 = 0;
    if ((_DWORD)v14)
    {
LABEL_14:
      v15 = *(_OWORD *)a1;
      *(_QWORD *)a1 = 0;
      *((_QWORD *)a1 + 1) = 0;
      *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v15;
      boost::detail::shared_count::~shared_count((unsigned int **)&v25.__r_.__value_.__l.__size_);
      goto LABEL_15;
    }
  }
  v17 = *(_QWORD *)a1;
  if (!*(_QWORD *)(*(_QWORD *)a1 + 40))
  {
    v18 = *((_QWORD *)a1 + 1);
    *(_QWORD *)a1 = 0;
    *((_QWORD *)a1 + 1) = 0;
    v25.__r_.__value_.__r.__words[0] = v17;
    v25.__r_.__value_.__l.__size_ = v18;
    boost::detail::shared_count::~shared_count((unsigned int **)&v25.__r_.__value_.__l.__size_);
    goto LABEL_15;
  }
  if ((v13 & 0x80) != 0)
  {
    std::string::__init_copy_ctor_external(&v22, (const std::string::value_type *)v11, size);
  }
  else
  {
    v22.__r_.__value_.__r.__words[0] = v11;
    v22.__r_.__value_.__l.__size_ = size;
    LODWORD(v22.__r_.__value_.__r.__words[2]) = v24[0];
    *(_DWORD *)((char *)&v22.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v24 + 3);
    *((_BYTE *)&v22.__r_.__value_.__s + 23) = v13;
  }
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v25, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v25 = *(std::string *)a2;
  v19 = boost::filesystem::path::operator/=(&v25, &v22);
  if (SHIBYTE(v19->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&__str, v19->__r_.__value_.__l.__data_, v19->__r_.__value_.__l.__size_);
  }
  else
  {
    v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v20;
  }
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
  std::string::operator=((std::string *)v17, &__str);
  *(_QWORD *)&v21 = 0xFFFF00000000;
  *((_QWORD *)&v21 + 1) = 0xFFFF00000000;
  *(_OWORD *)(v17 + 24) = v21;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
  if ((v13 & 0x80) != 0)
  {
    if (*(_BYTE *)v11 == 46)
    {
      if (size == 1)
        goto LABEL_45;
      if (*(_BYTE *)(v11 + 1) == 46)
      {
LABEL_44:
        if (size != 2)
          goto LABEL_15;
        goto LABEL_45;
      }
    }
LABEL_16:
    operator delete((void *)v11);
    return;
  }
  if (v11 != 46)
    return;
  if (v13 == 1)
  {
LABEL_45:
    boost::filesystem::detail::directory_iterator_increment(a1, a3);
LABEL_15:
    if ((v13 & 0x80) == 0)
      return;
    goto LABEL_16;
  }
  if ((v11 & 0xFF00) == 0x2E00)
  {
    size = v13;
    goto LABEL_44;
  }
}

void sub_2182FD8B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  void *v28;
  char v29;

  if (a15 < 0)
    operator delete(__p);
  if (v29 < 0)
    operator delete(v28);
  _Unwind_Resume(exception_object);
}

void boost::filesystem::detail::directory_iterator_increment(boost::system::detail *a1, uint64_t a2)
{
  std::string::size_type v4;
  DIR *v5;
  void **v6;
  dirent *v7;
  dirent *v8;
  void **v9;
  boost::system::detail *v10;
  int v11;
  boost::system::detail *v12;
  dirent *v13;
  std::string::size_type size;
  const std::string::value_type *v15;
  __int128 v16;
  boost::system::detail *v17;
  int v18;
  uint64_t *v19;
  std::string::size_type v20;
  __int128 v21;
  void *exception;
  int *v23;
  uint64_t v24;
  uint64_t *v25;
  void *v26;
  std::string v27;
  std::string v28;
  std::string __p;

  memset(&__p, 0, sizeof(__p));
  boost::system::detail::system_category_ncx(a1);
  v4 = *(_QWORD *)a1;
  v5 = *(DIR **)(*(_QWORD *)a1 + 40);
  while (1)
  {
    v8 = *(dirent **)(v4 + 48);
    v6 = (void **)(v4 + 48);
    v7 = v8;
    v28.__r_.__value_.__r.__words[0] = 0;
    *__error() = 0;
    if (sysconf(91) < 0)
    {
      *__error() = 0;
      v28.__r_.__value_.__r.__words[0] = 0;
      v13 = readdir(v5);
      if (v13)
      {
        strcpy(v7->d_name, v13->d_name);
        v28.__r_.__value_.__r.__words[0] = (std::string::size_type)v7;
        if (!v7)
          goto LABEL_7;
        goto LABEL_10;
      }
      if (*__error())
      {
LABEL_4:
        v10 = (boost::system::detail *)__error();
        v11 = *(_DWORD *)v10;
        v12 = (boost::system::detail *)boost::system::detail::system_category_ncx(v10);
        goto LABEL_11;
      }
    }
    else if (readdir_r(v5, v7, (dirent **)&v28))
    {
      goto LABEL_4;
    }
    if (!v28.__r_.__value_.__r.__words[0])
    {
LABEL_7:
      v12 = (boost::system::detail *)boost::filesystem::detail::dir_itr_close((DIR **)v6 - 1, v6, v9);
      v11 = (int)v12;
      goto LABEL_11;
    }
LABEL_10:
    v12 = (boost::system::detail *)MEMORY[0x219A19390](&__p, v7->d_name);
LABEL_11:
    if (v11)
      break;
    if (a2)
    {
      *(_DWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = boost::system::detail::system_category_ncx(v12);
    }
    v4 = *(_QWORD *)a1;
    v5 = *(DIR **)(*(_QWORD *)a1 + 40);
    if (!v5)
    {
      v20 = *((_QWORD *)a1 + 1);
      *(_QWORD *)a1 = 0;
      *((_QWORD *)a1 + 1) = 0;
      v28.__r_.__value_.__r.__words[0] = v4;
      v28.__r_.__value_.__l.__size_ = v20;
      boost::detail::shared_count::~shared_count((unsigned int **)&v28.__r_.__value_.__l.__size_);
      goto LABEL_34;
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      v15 = (const std::string::value_type *)__p.__r_.__value_.__r.__words[0];
      if (*__p.__r_.__value_.__l.__data_ != 46)
        goto LABEL_29;
      size = __p.__r_.__value_.__l.__size_;
      if (__p.__r_.__value_.__l.__size_ != 1)
      {
        if (*(_BYTE *)(__p.__r_.__value_.__r.__words[0] + 1) != 46)
          goto LABEL_30;
        goto LABEL_23;
      }
    }
    else
    {
      if (__p.__r_.__value_.__s.__data_[0] != 46)
        goto LABEL_25;
      if (HIBYTE(__p.__r_.__value_.__r.__words[2]) != 1)
      {
        if (__p.__r_.__value_.__s.__data_[1] != 46)
          goto LABEL_25;
        size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
LABEL_23:
        if (size != 2)
        {
          if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
          {
LABEL_29:
            size = __p.__r_.__value_.__l.__size_;
            v15 = (const std::string::value_type *)__p.__r_.__value_.__r.__words[0];
LABEL_30:
            std::string::__init_copy_ctor_external(&v28, v15, size);
          }
          else
          {
LABEL_25:
            v28 = __p;
          }
          boost::filesystem::path::remove_filename((boost::filesystem::path *)v4);
          boost::filesystem::path::operator/=((std::string *)v4, &v28);
          *(_QWORD *)&v21 = 0xFFFF00000000;
          *((_QWORD *)&v21 + 1) = 0xFFFF00000000;
          *(_OWORD *)(v4 + 24) = v21;
          goto LABEL_32;
        }
      }
    }
  }
  boost::filesystem::path::parent_path(*(boost::filesystem::path **)a1, &v28);
  v16 = *(_OWORD *)a1;
  *(_QWORD *)a1 = 0;
  *((_QWORD *)a1 + 1) = 0;
  *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v16;
  boost::detail::shared_count::~shared_count((unsigned int **)&v27.__r_.__value_.__l.__size_);
  if (!a2)
  {
    exception = __cxa_allocate_exception(0x48uLL);
    std::string::basic_string[abi:ne180100]<0>(&v27, "boost::filesystem::directory_iterator::operator++");
    v23 = __error();
    v24 = *v23;
    v25 = boost::system::detail::system_category_ncx((boost::system::detail *)v23);
    v26 = (void *)boost::filesystem::filesystem_error::filesystem_error((uint64_t)exception, &v27, &v28, v24, (uint64_t)v25);
  }
  v17 = (boost::system::detail *)__error();
  v18 = *(_DWORD *)v17;
  v19 = boost::system::detail::system_category_ncx(v17);
  *(_DWORD *)a2 = v18;
  *(_QWORD *)(a2 + 8) = v19;
LABEL_32:
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
LABEL_34:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_2182FDBAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  void *v27;
  int v28;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v28 & 1) == 0)
    {
LABEL_6:
      if (a21 < 0)
        operator delete(a16);
      if (a27 < 0)
        operator delete(a22);
      _Unwind_Resume(a1);
    }
  }
  else if (!v28)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v27);
  goto LABEL_6;
}

uint64_t boost::filesystem::filesystem_error::filesystem_error(uint64_t a1, const std::string *a2, const std::string *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;

  std::runtime_error::runtime_error((std::runtime_error *)a1, a2);
  *(_QWORD *)(a1 + 16) = a4;
  *(_QWORD *)(a1 + 24) = a5;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)a1 = &unk_24D921E70;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  v9 = operator new();
  *(_QWORD *)(v9 + 64) = 0;
  *(_OWORD *)(v9 + 32) = 0u;
  *(_OWORD *)(v9 + 48) = 0u;
  *(_OWORD *)v9 = 0u;
  *(_OWORD *)(v9 + 16) = 0u;
  boost::shared_ptr<boost::filesystem::filesystem_error::m_imp>::reset<boost::filesystem::filesystem_error::m_imp>((__int128 *)(a1 + 56), v9);
  std::string::operator=(*(std::string **)(a1 + 56), a3);
  return a1;
}

void sub_2182FDCC8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9)
{
  __int128 *v9;
  __int128 v10;

  __cxa_begin_catch(a1);
  v10 = *v9;
  *(_QWORD *)v9 = 0;
  *((_QWORD *)v9 + 1) = 0;
  *((_QWORD *)&a9 + 1) = *((_QWORD *)&v10 + 1);
  boost::detail::shared_count::~shared_count((unsigned int **)&a9 + 1);
  __cxa_end_catch();
  JUMPOUT(0x2182FDCB0);
}

uint64_t boost::filesystem::filesystem_error::filesystem_error(uint64_t a1, const std::string *a2, const std::string *a3, const std::string *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;

  std::runtime_error::runtime_error((std::runtime_error *)a1, a2);
  *(_QWORD *)(a1 + 16) = a5;
  *(_QWORD *)(a1 + 24) = a6;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)a1 = &unk_24D921E70;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  v11 = operator new();
  *(_QWORD *)(v11 + 64) = 0;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)v11 = 0u;
  *(_OWORD *)(v11 + 16) = 0u;
  boost::shared_ptr<boost::filesystem::filesystem_error::m_imp>::reset<boost::filesystem::filesystem_error::m_imp>((__int128 *)(a1 + 56), v11);
  std::string::operator=(*(std::string **)(a1 + 56), a3);
  std::string::operator=((std::string *)(*(_QWORD *)(a1 + 56) + 24), a4);
  return a1;
}

void sub_2182FDDB4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9)
{
  __int128 *v9;
  __int128 v10;

  __cxa_begin_catch(a1);
  v10 = *v9;
  *(_QWORD *)v9 = 0;
  *((_QWORD *)v9 + 1) = 0;
  *((_QWORD *)&a9 + 1) = *((_QWORD *)&v10 + 1);
  boost::detail::shared_count::~shared_count((unsigned int **)&a9 + 1);
  __cxa_end_catch();
  JUMPOUT(0x2182FDD98);
}

std::string *std::string::append[abi:ne180100]<char const*,0>(std::string *this, char *a2, char *a3)
{
  char *v4;
  unint64_t v6;
  unint64_t v7;
  std::string::size_type size;
  std::string::size_type v9;
  std::string *v10;
  unint64_t v11;
  void **v12;
  std::string::size_type v13;
  std::string *v14;
  _BYTE *i;
  char v16;
  std::string::size_type v17;
  void *__p[2];
  unsigned __int8 v20;

  v4 = a2;
  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  v7 = a3 - a2;
  if ((v6 & 0x80000000) != 0)
  {
    if (a3 == a2)
      return this;
    size = this->__r_.__value_.__l.__size_;
    v11 = this->__r_.__value_.__r.__words[2];
    v9 = (v11 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    v10 = (std::string *)this->__r_.__value_.__r.__words[0];
    v6 = HIBYTE(v11);
  }
  else
  {
    if (a3 == a2)
      return this;
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    v9 = 22;
    v10 = this;
  }
  if (v10 > (std::string *)v4 || (char *)&v10->__r_.__value_.__l.__data_ + size + 1 <= v4)
  {
    if (v9 - size < v7)
    {
      std::string::__grow_by(this, v9, size - v9 + v7, size, size, 0, 0);
      this->__r_.__value_.__l.__size_ = size;
      LOBYTE(v6) = *((_BYTE *)&this->__r_.__value_.__s + 23);
    }
    v14 = this;
    if ((v6 & 0x80) != 0)
      v14 = (std::string *)this->__r_.__value_.__r.__words[0];
    for (i = (char *)v14 + size; v4 != a3; ++i)
    {
      v16 = *v4++;
      *i = v16;
    }
    *i = 0;
    v17 = v7 + size;
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
      this->__r_.__value_.__l.__size_ = v17;
    else
      *((_BYTE *)&this->__r_.__value_.__s + 23) = v17 & 0x7F;
  }
  else
  {
    std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<char *>,std::__wrap_iter<char *>>(__p, v4, a3, v7);
    if ((v20 & 0x80u) == 0)
      v12 = __p;
    else
      v12 = (void **)__p[0];
    if ((v20 & 0x80u) == 0)
      v13 = v20;
    else
      v13 = (std::string::size_type)__p[1];
    std::string::append(this, (const std::string::value_type *)v12, v13);
    if ((char)v20 < 0)
      operator delete(__p[0]);
  }
  return this;
}

void sub_2182FDF34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *_GLOBAL__sub_I_operations_cpp()
{
  boost::system::detail *v0;
  uint64_t *result;

  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  *(_QWORD *)algn_254FF2FD8 = 0;
  qword_254FF2FE8 = (uint64_t)boost::system::detail::system_category_ncx(v0);
  result = boost::system::detail::system_category_ncx((boost::system::detail *)qword_254FF2FE8);
  qword_254FF2FF8 = (uint64_t)result;
  return result;
}

std::string *boost::filesystem::path::operator/=(std::string *this, std::string *a2)
{
  std::string::size_type v3;
  char v4;
  std::string::size_type size;
  std::string::size_type v6;
  std::string *v8;
  std::string *v9;
  std::string *v10;
  unsigned __int8 v11;
  std::string::size_type v12;
  std::string *p_p;
  std::string *v14;
  std::string::size_type v15;
  std::string __p;

  v3 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  v4 = v3;
  size = a2->__r_.__value_.__l.__size_;
  if ((v3 & 0x80u) == 0)
    v6 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  else
    v6 = a2->__r_.__value_.__l.__size_;
  if (v6)
  {
    if (this == a2)
    {
      if ((char)v3 < 0)
        std::string::__init_copy_ctor_external(&__p, a2->__r_.__value_.__l.__data_, size);
      else
        __p = *a2;
      v11 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      v12 = __p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if (p_p->__r_.__value_.__s.__data_[0] != 47)
      {
        boost::filesystem::path::m_append_separator_if_needed(a2);
        v11 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        v12 = __p.__r_.__value_.__r.__words[0];
      }
      if ((v11 & 0x80u) == 0)
        v14 = &__p;
      else
        v14 = (std::string *)v12;
      if ((v11 & 0x80u) == 0)
        v15 = v11;
      else
        v15 = __p.__r_.__value_.__l.__size_;
      std::string::append(a2, (const std::string::value_type *)v14, v15);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    else
    {
      v8 = (std::string *)a2->__r_.__value_.__r.__words[0];
      if ((v3 & 0x80u) == 0)
        v9 = a2;
      else
        v9 = (std::string *)a2->__r_.__value_.__r.__words[0];
      if (v9->__r_.__value_.__s.__data_[0] != 47)
      {
        boost::filesystem::path::m_append_separator_if_needed(this);
        v3 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
        v8 = (std::string *)a2->__r_.__value_.__r.__words[0];
        size = a2->__r_.__value_.__l.__size_;
        v4 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
      }
      if (v4 >= 0)
        v10 = a2;
      else
        v10 = v8;
      if (v4 >= 0)
        size = v3;
      std::string::append(this, (const std::string::value_type *)v10, size);
    }
  }
  return this;
}

void sub_2182FE100(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string::size_type boost::filesystem::path::m_append_separator_if_needed(std::string *this)
{
  std::string::size_type size;
  char *v2;

  if ((SHIBYTE(this->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    if (!*((_BYTE *)&this->__r_.__value_.__s + 23))
      return 0;
    v2 = (char *)this + size;
LABEL_6:
    if (*(v2 - 1) != 47)
    {
      std::string::push_back(this, 47);
      return size;
    }
    return 0;
  }
  size = this->__r_.__value_.__l.__size_;
  if (size)
  {
    v2 = (char *)(this->__r_.__value_.__r.__words[0] + size);
    goto LABEL_6;
  }
  return size;
}

uint64_t boost::filesystem::path::compare(std::string *this, std::string *a2)
{
  std::string::size_type size;
  void *v5;
  uint64_t v6;
  void *v8[5];
  void *__p[2];
  char v10;
  _QWORD v11[5];
  const void *v12[2];
  char v13;

  boost::filesystem::path::begin(this, (uint64_t)v12);
  memset(v11, 0, 24);
  v11[3] = this;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
    size = this->__r_.__value_.__l.__size_;
  else
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  v11[4] = size;
  boost::filesystem::path::begin(a2, (uint64_t)__p);
  memset(v8, 0, 24);
  v8[3] = a2;
  v5 = (void *)HIBYTE(a2->__r_.__value_.__r.__words[2]);
  if ((char)v5 < 0)
    v5 = (void *)a2->__r_.__value_.__l.__size_;
  v8[4] = v5;
  v6 = boost::filesystem::detail::lex_compare(v12, (uint64_t)v11, (const void **)__p, (uint64_t)v8);
  if (v10 < 0)
    operator delete(__p[0]);
  if (v13 < 0)
    operator delete((void *)v12[0]);
  return v6;
}

uint64_t boost::filesystem::detail::lex_compare(const void **a1, uint64_t a2, const void **a3, uint64_t a4)
{
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  int v14;
  int v15;
  size_t v16;
  const void *v17;
  size_t v18;
  const void *v19;
  size_t v20;
  int v21;
  BOOL v22;
  int v23;
  BOOL v24;

  v6 = a1[3];
  v7 = a1[4];
  v8 = *(const void **)(a2 + 24);
  v9 = *(const void **)(a2 + 32);
  if (v6 == v8 && v7 == v9)
  {
LABEL_35:
    v8 = v6;
    v9 = v7;
  }
  else
  {
    while (a3[3] != *(const void **)(a4 + 24) || a3[4] != *(const void **)(a4 + 32))
    {
      v14 = *((char *)a3 + 23);
      v15 = *((char *)a1 + 23);
      if (v15 >= 0)
        v16 = *((unsigned __int8 *)a1 + 23);
      else
        v16 = (size_t)a1[1];
      if (v15 >= 0)
        v17 = a1;
      else
        v17 = *a1;
      if (v14 >= 0)
        v18 = *((unsigned __int8 *)a3 + 23);
      else
        v18 = (size_t)a3[1];
      if (v14 >= 0)
        v19 = a3;
      else
        v19 = *a3;
      if (v18 >= v16)
        v20 = v16;
      else
        v20 = v18;
      v21 = memcmp(v17, v19, v20);
      v22 = v16 < v18;
      if (v21)
        v22 = v21 < 0;
      if (v22)
        return 0xFFFFFFFFLL;
      v23 = memcmp(v19, v17, v20);
      v24 = v18 < v16;
      if (v23)
        v24 = v23 < 0;
      if (v24)
        return 1;
      boost::filesystem::path::m_path_iterator_increment((std::string *)a1);
      boost::filesystem::path::m_path_iterator_increment((std::string *)a3);
      v6 = a1[3];
      v7 = a1[4];
      v8 = *(const void **)(a2 + 24);
      v9 = *(const void **)(a2 + 32);
      if (v6 == v8 && v7 == v9)
        goto LABEL_35;
    }
  }
  if (v6 != v8 || v7 != v9)
    return 1;
  if (a3[3] != *(const void **)(a4 + 24) || a3[4] != *(const void **)(a4 + 32))
    return 0xFFFFFFFFLL;
  return 0;
}

void boost::filesystem::path::begin(std::string *__str@<X0>, uint64_t a2@<X8>)
{
  std::string::size_type size;
  int v4;
  std::string::size_type v5;
  std::string *v6;
  std::string::size_type v7;
  std::string *v8;
  std::string *v9;
  uint64_t v10;
  int v11;
  std::string *v12;
  int v13;
  _BYTE *v14;
  std::string __p;
  char v16;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = __str;
  size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  v4 = (char)size;
  if ((size & 0x80u) != 0)
    size = __str->__r_.__value_.__l.__size_;
  *(_QWORD *)(a2 + 32) = 0;
  if (!size)
  {
    v5 = 0;
LABEL_39:
    v7 = size;
    goto LABEL_41;
  }
  if (size == 1)
  {
    v5 = 0;
    v6 = (std::string *)__str->__r_.__value_.__r.__words[0];
    if (v4 >= 0)
      v6 = __str;
    if (v6->__r_.__value_.__s.__data_[0] == 47)
      goto LABEL_8;
    v7 = 0;
    goto LABEL_32;
  }
  if (v4 < 0)
  {
    v8 = (std::string *)__str->__r_.__value_.__r.__words[0];
    if (*__str->__r_.__value_.__l.__data_ != 47)
      goto LABEL_23;
  }
  else
  {
    v8 = __str;
    if (__str->__r_.__value_.__s.__data_[0] != 47)
    {
LABEL_31:
      v7 = 0;
      goto LABEL_32;
    }
  }
  if (v8->__r_.__value_.__s.__data_[1] != 47)
  {
    v8 = (std::string *)__str->__r_.__value_.__r.__words[0];
    goto LABEL_23;
  }
  if (size != 2)
  {
    v8 = (std::string *)__str->__r_.__value_.__r.__words[0];
    v9 = v4 >= 0 ? __str : (std::string *)__str->__r_.__value_.__r.__words[0];
    if (v9->__r_.__value_.__s.__data_[2] == 47)
    {
LABEL_23:
      if (v4 >= 0)
        v8 = __str;
      if (v8->__r_.__value_.__s.__data_[0] == 47)
      {
        if (v8->__r_.__value_.__s.__data_[1] == 47)
        {
          v10 = 2;
          do
          {
            v5 = v10 - 1;
            *(_QWORD *)(a2 + 32) = v10 - 1;
            if (size == v10)
              break;
            v11 = v8->__r_.__value_.__s.__data_[v10++];
          }
          while (v11 == 47);
        }
        else
        {
          v5 = 0;
        }
LABEL_8:
        v7 = 1;
        goto LABEL_41;
      }
      goto LABEL_31;
    }
  }
  v7 = 2;
LABEL_32:
  if (v7 < size)
  {
    if (v4 >= 0)
      v12 = __str;
    else
      v12 = (std::string *)__str->__r_.__value_.__r.__words[0];
    while (v12->__r_.__value_.__s.__data_[v7] != 47)
    {
      if (size == ++v7)
      {
        v5 = 0;
        goto LABEL_39;
      }
    }
  }
  v5 = 0;
LABEL_41:
  std::string::basic_string(&__p, __str, v5, v7, (std::allocator<char> *)&v16);
  std::string::operator=((std::string *)a2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v13 = *(char *)(a2 + 23);
  if (v13 < 0)
  {
    if (*(_QWORD *)(a2 + 8) != 1)
      return;
    v14 = *(_BYTE **)a2;
  }
  else
  {
    v14 = (_BYTE *)a2;
    if (v13 != 1)
      return;
  }
  if (*v14 == 47)
    MEMORY[0x219A19390](a2, "/");
}

void sub_2182FE59C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  if (*(char *)(v14 + 23) < 0)
    operator delete(*(void **)v14);
  _Unwind_Resume(exception_object);
}

boost::filesystem::path *boost::filesystem::path::remove_filename(boost::filesystem::path *this)
{
  std::string::size_type v2;

  v2 = boost::filesystem::path::m_parent_path_end(this);
  std::string::erase((std::string *)this, v2, 0xFFFFFFFFFFFFFFFFLL);
  return this;
}

uint64_t boost::filesystem::path::m_parent_path_end(boost::filesystem::path *this)
{
  char v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  boost::filesystem::path *v6;
  _BOOL4 v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  boost::filesystem::path *v11;
  int v12;

  v2 = *((_BYTE *)this + 23);
  if (v2 < 0)
    v3 = *((_QWORD *)this + 1);
  else
    v3 = *((unsigned __int8 *)this + 23);
  v5 = v4;
  if (v3)
  {
    v6 = this;
    if (v2 < 0)
      v6 = *(boost::filesystem::path **)this;
    v7 = *((unsigned __int8 *)v6 + v4) != 47;
  }
  else
  {
    v7 = 1;
  }
  v9 = v8 + 1;
  v10 = v5 - 1;
  while (v10 != -1)
  {
    if (v8 == v10)
      goto LABEL_17;
    v11 = this;
    if (v2 < 0)
      v11 = *(boost::filesystem::path **)this;
    v12 = *((unsigned __int8 *)v11 + v10--);
    if (v12 != 47)
    {
      v9 = v10 + 2;
      goto LABEL_17;
    }
  }
  v9 = 0;
LABEL_17:
  if (v9 != 1 || v8 != 0 || v7)
    return v9;
  else
    return -1;
}

std::string *boost::filesystem::path::root_directory@<X0>(boost::filesystem::path *this@<X0>, std::string *a2@<X8>)
{
  boost::filesystem::path *v2;
  std::string *result;

  v2 = this;
  if ((*((char *)this + 23) & 0x80000000) == 0)
  {
    if (result == (std::string *)-1)
      goto LABEL_7;
    return boost::filesystem::path::path<char const*>(a2, (char *)result + (_QWORD)v2, &result->__r_.__value_.__s.__data_[(_QWORD)v2 + 1]);
  }
  if (result != (std::string *)-1)
  {
    v2 = *(boost::filesystem::path **)v2;
    return boost::filesystem::path::path<char const*>(a2, (char *)result + (_QWORD)v2, &result->__r_.__value_.__s.__data_[(_QWORD)v2 + 1]);
  }
LABEL_7:
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return result;
}

uint64_t `anonymous namespace'::root_directory_start(unsigned __int8 **a1, unint64_t a2)
{
  int v2;
  int v3;
  _BYTE *v4;
  unint64_t v5;
  unsigned __int8 **v6;
  unint64_t v7;
  _BYTE *v8;
  _BYTE *v10;
  _BYTE *v11;
  unint64_t v12;
  _BYTE *v13;

  if (a2 == 2)
  {
    v2 = *((char *)a1 + 23);
    if (v2 < 0)
    {
      v4 = *a1;
      v3 = **a1;
    }
    else
    {
      v3 = *(unsigned __int8 *)a1;
      v4 = a1;
    }
    if (v3 == 47 && v4[1] == 47)
      return -1;
    goto LABEL_21;
  }
  if (a2 < 4)
  {
    if (!a2)
      return -1;
    LOBYTE(v2) = *((_BYTE *)a1 + 23);
LABEL_21:
    if ((v2 & 0x80u) == 0)
      v8 = a1;
    else
      v8 = *a1;
    if (*v8 == 47)
      return 0;
    return -1;
  }
  v2 = *((char *)a1 + 23);
  if (v2 < 0)
  {
    v6 = (unsigned __int8 **)*a1;
    if (**a1 != 47 || *((_BYTE *)v6 + 1) != 47 || *((_BYTE *)v6 + 2) == 47)
      goto LABEL_21;
    v5 = (unint64_t)a1[1];
  }
  else
  {
    if (*(_BYTE *)a1 != 47 || *((_BYTE *)a1 + 1) != 47 || *((_BYTE *)a1 + 2) == 47)
      goto LABEL_21;
    v5 = *((unsigned __int8 *)a1 + 23);
    v6 = a1;
  }
  if (v5 >= 3)
  {
    v10 = (char *)v6 + 2;
    v11 = (char *)v6 + v5;
    v12 = v5 - 2;
    while (*v10 != 47)
    {
      ++v10;
      if (!--v12)
      {
        v10 = v11;
        break;
      }
    }
    v13 = (_BYTE *)(v10 - (_BYTE *)v6);
    if (v10 == v11)
      v7 = -1;
    else
      v7 = (unint64_t)v13;
  }
  else
  {
    v7 = -1;
  }
  if (v7 >= a2)
    return -1;
  else
    return v7;
}

unint64_t `anonymous namespace'::filename_pos(unsigned __int8 **a1, unint64_t a2)
{
  unint64_t v2;
  _BYTE *v3;
  unint64_t v4;
  int v5;
  _BYTE *v6;
  unsigned __int8 **v7;
  int v8;

  if (a2 == 2)
  {
    LODWORD(v2) = *((char *)a1 + 23);
    if ((v2 & 0x80000000) != 0)
    {
      v6 = *a1;
      v5 = **a1;
    }
    else
    {
      v5 = *(unsigned __int8 *)a1;
      v6 = a1;
    }
    if (v5 == 47 && v6[1] == 47)
      return 0;
LABEL_10:
    v4 = a2 - 1;
    v3 = *a1;
    if ((v2 & 0x80u) == 0)
      v7 = a1;
    else
      v7 = (unsigned __int8 **)*a1;
    if (*((_BYTE *)v7 + v4) == 47)
      return v4;
    goto LABEL_14;
  }
  if (a2)
  {
    LOBYTE(v2) = *((_BYTE *)a1 + 23);
    goto LABEL_10;
  }
  LOBYTE(v2) = *((_BYTE *)a1 + 23);
  v3 = *a1;
  v4 = -1;
LABEL_14:
  if ((v2 & 0x80u) == 0)
    v3 = a1;
  v2 = v2;
  if ((v2 & 0x80u) != 0)
    v2 = (unint64_t)a1[1];
  if (v2 <= v4)
    v4 = v2;
  else
    v4 = a2;
  while (v4)
  {
    v8 = v3[--v4];
    if (v8 == 47)
    {
      if (v4 != -1 && (v4 != 1 || *v3 != 47))
        return ++v4;
      return 0;
    }
  }
  return v4;
}

std::string *boost::filesystem::path::parent_path@<X0>(boost::filesystem::path *this@<X0>, std::string *a2@<X8>)
{
  char *v2;
  std::string *result;

  v2 = (char *)this;
  result = (std::string *)boost::filesystem::path::m_parent_path_end(this);
  if (result == (std::string *)-1)
  {
    a2->__r_.__value_.__r.__words[0] = 0;
    a2->__r_.__value_.__l.__size_ = 0;
    a2->__r_.__value_.__r.__words[2] = 0;
  }
  else
  {
    if (v2[23] < 0)
      v2 = *(char **)v2;
    return boost::filesystem::path::path<char const*>(a2, v2, (char *)result + (_QWORD)v2);
  }
  return result;
}

void boost::filesystem::path::filename(boost::filesystem::path *this@<X0>, std::string *a2@<X8>)
{
  boost::filesystem::path *v2;
  char v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  BOOL v8;
  boost::filesystem::path *v9;
  _BOOL8 is_root_separator;

  v2 = this;
  v4 = *((_BYTE *)this + 23);
  if (v4 < 0)
    v5 = *((_QWORD *)this + 1);
  else
    v5 = *((unsigned __int8 *)this + 23);
  v7 = v6;
  if (v5)
    v8 = v6 == 0;
  else
    v8 = 1;
  if (v8)
    goto LABEL_12;
  v9 = v2;
  if (v4 < 0)
    v9 = *(boost::filesystem::path **)v2;
  {
LABEL_12:
    if (v4 < 0)
      v2 = *(boost::filesystem::path **)v2;
    std::string::basic_string[abi:ne180100]<0>(a2, (char *)v2 + v7);
  }
  else
  {
    boost::filesystem::detail::dot_path((boost::filesystem::detail *)is_root_separator);
    if (byte_254FF3027 < 0)
    {
      std::string::__init_copy_ctor_external(a2, (const std::string::value_type *)boost::filesystem::detail::dot_path(void)::dot_pth, *((std::string::size_type *)&boost::filesystem::detail::dot_path(void)::dot_pth + 1));
    }
    else
    {
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = boost::filesystem::detail::dot_path(void)::dot_pth;
      a2->__r_.__value_.__r.__words[2] = unk_254FF3020;
    }
  }
}

BOOL `anonymous namespace'::is_root_separator(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  _BYTE *v3;
  _BYTE *v4;
  _BYTE *v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  _BYTE *v10;
  _BYTE *v11;
  unint64_t v12;

  v2 = *(unsigned __int8 *)(a1 + 23);
  v3 = *(_BYTE **)a1;
  if ((v2 & 0x80u) == 0)
    v4 = (_BYTE *)a1;
  else
    v4 = *(_BYTE **)a1;
  v5 = v4 - 1;
  do
  {
    if (!a2)
      return 1;
    v6 = a2 - 1;
    v7 = v5[a2--];
  }
  while (v7 == 47);
  if ((unint64_t)(v6 + 1) < 3)
    return 0;
  if ((v2 & 0x80) != 0)
  {
    if (*v3 == 47 && v3[1] == 47)
    {
      v2 = *(_QWORD *)(a1 + 8);
      goto LABEL_15;
    }
    return 0;
  }
  if ((unsigned __int16)v3 != 12079)
    return 0;
  v3 = (_BYTE *)a1;
LABEL_15:
  if (v2 >= 3)
  {
    v10 = v3 + 2;
    v11 = &v3[v2];
    v12 = v2 - 2;
    while (*v10 != 47)
    {
      ++v10;
      if (!--v12)
      {
        v10 = v11;
        break;
      }
    }
    v9 = v10 - v3;
    if (v10 == v11)
      v9 = -1;
  }
  else
  {
    v9 = -1;
  }
  return v9 - 1 == v6;
}

__int128 *boost::filesystem::detail::dot_path(boost::filesystem::detail *this)
{
  unsigned __int8 v1;

  {
    std::string::basic_string[abi:ne180100]<0>(&boost::filesystem::detail::dot_path(void)::dot_pth, ".");
    __cxa_atexit((void (*)(void *))jsonSingletonEMPTY_JSON_STRING::~jsonSingletonEMPTY_JSON_STRING, &boost::filesystem::detail::dot_path(void)::dot_pth, &dword_217E69000);
  }
  return &boost::filesystem::detail::dot_path(void)::dot_pth;
}

void sub_2182FEC08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void boost::filesystem::path::m_path_iterator_increment(std::string *this)
{
  std::string::size_type v2;
  unsigned int v3;
  std::string::size_type size;
  std::string::size_type v5;
  std::string::pointer data;
  std::string::size_type v7;
  int v8;
  std::string::size_type v9;
  uint64_t v10;
  BOOL v11;
  std::string *v12;
  std::string::pointer v13;
  uint64_t i;
  std::string::size_type v15;
  std::string::pointer v16;
  std::string::size_type v17;
  _BOOL8 is_root_separator;
  std::string::pointer v19;
  std::string::size_type v20;
  std::string::size_type v21;
  std::string __p;
  char v23;

  v2 = HIBYTE(this->__r_.__value_.__r.__words[2]);
  v3 = (char)v2;
  size = this->__r_.__value_.__l.__size_;
  if ((v2 & 0x80u) != 0)
    v2 = this->__r_.__value_.__l.__size_;
  data = this[1].__r_.__value_.__l.__data_;
  v5 = this[1].__r_.__value_.__l.__size_;
  v7 = v5 + v2;
  this[1].__r_.__value_.__l.__size_ = v5 + v2;
  v8 = data[23];
  v9 = data[23];
  if (v8 < 0)
    v10 = *((_QWORD *)data + 1);
  else
    v10 = data[23];
  if (v7 == v10)
  {
    if ((v3 & 0x80000000) != 0)
    {
      *this->__r_.__value_.__l.__data_ = 0;
      this->__r_.__value_.__l.__size_ = 0;
    }
    else
    {
      this->__r_.__value_.__s.__data_[0] = 0;
      *((_BYTE *)&this->__r_.__value_.__s + 23) = 0;
    }
    return;
  }
  if ((v3 & 0x80000000) != 0)
  {
    if (size <= 2
      || (v12 = (std::string *)this->__r_.__value_.__r.__words[0], *this->__r_.__value_.__l.__data_ != 47)
      || v12->__r_.__value_.__s.__data_[1] != 47)
    {
      v11 = 0;
      goto LABEL_19;
    }
  }
  else
  {
    v11 = 0;
    if (v3 < 3)
      goto LABEL_19;
    if (this->__r_.__value_.__s.__data_[0] != 47)
      goto LABEL_19;
    v12 = this;
    if (this->__r_.__value_.__s.__data_[1] != 47)
      goto LABEL_19;
  }
  v11 = v12->__r_.__value_.__s.__data_[2] != 47;
LABEL_19:
  v13 = data;
  if (v8 < 0)
    v13 = *(std::string::pointer *)data;
  if (v13[v7] != 47)
    goto LABEL_36;
  if (v11)
  {
    std::string::operator=(this, 47);
    return;
  }
  for (i = v2 + v5 - 1; ; ++i)
  {
    v15 = v9;
    if ((v9 & 0x80) != 0)
      v15 = *((_QWORD *)data + 1);
    if (i + 1 == v15)
      break;
    v16 = data;
    if ((char)v9 < 0)
      v16 = *(std::string::pointer *)data;
    if (v16[i + 1] != 47)
      break;
    this[1].__r_.__value_.__l.__size_ = i + 2;
    v9 = data[23];
  }
  v7 = i + 1;
  v17 = v9;
  if ((char)v9 < 0)
    v17 = *((_QWORD *)data + 1);
  {
    this[1].__r_.__value_.__l.__size_ = i;
    boost::filesystem::detail::dot_path((boost::filesystem::detail *)is_root_separator);
    std::string::operator=(this, (const std::string *)&boost::filesystem::detail::dot_path(void)::dot_pth);
  }
  else
  {
LABEL_36:
    v19 = data;
    v20 = v9;
    if ((v9 & 0x80) != 0)
    {
      v19 = *(std::string::pointer *)data;
      v20 = *((_QWORD *)data + 1);
    }
    if (v20 <= v7)
      goto LABEL_45;
    v21 = v7;
    while (v19[v21] != 47)
    {
      if (v20 == ++v21)
        goto LABEL_45;
    }
    if (v20 == v21 || v21 == -1)
    {
LABEL_45:
      v21 = v9;
      if ((char)v9 < 0)
        v21 = *((_QWORD *)data + 1);
    }
    std::string::basic_string(&__p, (const std::string *)data, v7, v21 - v7, (std::allocator<char> *)&v23);
    std::string::operator=(this, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_2182FEE8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *boost::filesystem::path::path<char const*>(std::string *a1, char *a2, char *a3)
{
  unint64_t v4;
  char *v5;
  void *__p[2];
  unsigned __int8 v8;

  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  if (a2 != a3)
  {
    std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<char *>,std::__wrap_iter<char *>>(__p, a2, a3, a3 - a2);
    v4 = v8;
    if ((v8 & 0x80u) == 0)
      v5 = (char *)__p;
    else
      v5 = (char *)__p[0];
    if ((v8 & 0x80u) != 0)
      v4 = (unint64_t)__p[1];
    std::string::append[abi:ne180100]<char const*,0>(a1, v5, &v5[v4]);
    if ((char)v8 < 0)
      operator delete(__p[0]);
  }
  return a1;
}

void sub_2182FEF24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v15 + 23) < 0)
    operator delete(*(void **)v15);
  _Unwind_Resume(exception_object);
}

uint64_t _GLOBAL__sub_I_path_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

uint64_t _GLOBAL__sub_I_path_traits_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

uint64_t _GLOBAL__sub_I_portability_cpp()
{
  char *v0;
  void (*v1)(void *);

  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  v0 = (char *)operator new(0x28uLL);
  unk_254FF3058 = xmmword_2186F1AC0;
  strcpy(v0, "\x01\x02\x03\x04\x05\x06\a\b\t\n\v\f\r\x0E\x0F\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1A\x1B\x1C\x1D\x1E\x1F<>:\"/\\|");
  v0[39] = 0;
  v1 = (void (*)(void *))MEMORY[0x24BEDACF0];
}

uint64_t _GLOBAL__sub_I_unique_path_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

uint64_t _GLOBAL__sub_I_utf8_codecvt_facet_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void turi::supervised_2::get_toolkit_class_registration(uint64_t *a1@<X8>)
{
  _QWORD *v3;
  _OWORD *v4;
  _OWORD *v5;
  char *v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  void *v21;
  void *v22;
  unsigned int v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  void *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  void *v50;
  void *v51;
  unsigned int v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  void *v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  __int128 **properties;
  _OWORD *v66;
  _OWORD *v67;
  char *v68;
  unint64_t *v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t *v72;
  unint64_t *v73;
  uint64_t v74;
  unint64_t *v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t *v78;
  unint64_t *v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t *v82;
  void *v83;
  void *v84;
  unsigned int v85;
  unint64_t *v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t *v89;
  void *v90;
  unint64_t *v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t *v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t *v97;
  unint64_t *v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t *v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t *v108;
  unint64_t v109;
  unint64_t v110;
  uint64_t v111;
  void *v112;
  void *v113;
  unsigned int v114;
  unint64_t *v115;
  unint64_t v116;
  unint64_t v117;
  uint64_t v118;
  void *v119;
  unint64_t *v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t *v123;
  unint64_t v124;
  unint64_t v125;
  uint64_t v126;
  __int128 **v127;
  _OWORD *v128;
  _OWORD *v129;
  char *v130;
  unint64_t *v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t *v134;
  unint64_t *v135;
  uint64_t v136;
  unint64_t *v137;
  unint64_t v138;
  unint64_t v139;
  unint64_t *v140;
  unint64_t *v141;
  unint64_t v142;
  unint64_t v143;
  unint64_t *v144;
  void *v145;
  void *v146;
  unsigned int v147;
  unint64_t *v148;
  unint64_t v149;
  unint64_t v150;
  unint64_t *v151;
  void *v152;
  unint64_t *v153;
  unint64_t v154;
  unint64_t v155;
  unint64_t *v156;
  unint64_t v157;
  unint64_t v158;
  unint64_t *v159;
  unint64_t *v160;
  unint64_t v161;
  unint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t *v166;
  unint64_t v167;
  unint64_t v168;
  uint64_t v169;
  unint64_t *v170;
  unint64_t v171;
  unint64_t v172;
  uint64_t v173;
  void *v174;
  void *v175;
  unsigned int v176;
  unint64_t *v177;
  unint64_t v178;
  unint64_t v179;
  uint64_t v180;
  void *v181;
  unint64_t *v182;
  unint64_t v183;
  unint64_t v184;
  unint64_t *v185;
  unint64_t v186;
  unint64_t v187;
  uint64_t v188;
  unsigned __int8 v189;
  _OWORD *v190;
  _OWORD *v191;
  char *v192;
  unint64_t *v193;
  unint64_t v194;
  unint64_t v195;
  unint64_t *v196;
  unint64_t *v197;
  uint64_t v198;
  unint64_t *v199;
  unint64_t v200;
  unint64_t v201;
  unint64_t *v202;
  unint64_t *v203;
  unint64_t v204;
  unint64_t v205;
  unint64_t *v206;
  void *v207;
  void *v208;
  unsigned int v209;
  unint64_t *v210;
  unint64_t v211;
  unint64_t v212;
  unint64_t *v213;
  void *v214;
  unint64_t *v215;
  unint64_t v216;
  unint64_t v217;
  unint64_t *v218;
  unint64_t v219;
  unint64_t v220;
  unint64_t *v221;
  unint64_t *v222;
  unint64_t v223;
  unint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  unint64_t *v228;
  unint64_t v229;
  unint64_t v230;
  uint64_t v231;
  unint64_t *v232;
  unint64_t v233;
  unint64_t v234;
  uint64_t v235;
  void *v236;
  void *v237;
  unsigned int v238;
  unint64_t *v239;
  unint64_t v240;
  unint64_t v241;
  uint64_t v242;
  void *v243;
  unint64_t *v244;
  unint64_t v245;
  unint64_t v246;
  unint64_t *v247;
  unint64_t v248;
  unint64_t v249;
  uint64_t v250;
  unint64_t v251;
  uint64_t v252;
  _QWORD *v253;
  _OWORD *v254;
  _OWORD *v255;
  char *v256;
  unint64_t *v257;
  unint64_t v258;
  unint64_t v259;
  unint64_t *v260;
  unint64_t *v261;
  uint64_t v262;
  unint64_t *v263;
  unint64_t v264;
  unint64_t v265;
  unint64_t *v266;
  unint64_t *v267;
  unint64_t v268;
  unint64_t v269;
  unint64_t *v270;
  void *v271;
  void *v272;
  unsigned int v273;
  unint64_t *v274;
  unint64_t v275;
  unint64_t v276;
  unint64_t *v277;
  void *v278;
  unint64_t *v279;
  unint64_t v280;
  unint64_t v281;
  unint64_t *v282;
  unint64_t v283;
  unint64_t v284;
  unint64_t *v285;
  unint64_t *v286;
  unint64_t v287;
  unint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  unint64_t *v292;
  unint64_t v293;
  unint64_t v294;
  uint64_t v295;
  unint64_t *v296;
  unint64_t v297;
  unint64_t v298;
  uint64_t v299;
  void *v300;
  void *v301;
  unsigned int v302;
  unint64_t *v303;
  unint64_t v304;
  unint64_t v305;
  uint64_t v306;
  void *v307;
  unint64_t *v308;
  unint64_t v309;
  unint64_t v310;
  unint64_t *v311;
  unint64_t v312;
  unint64_t v313;
  uint64_t v314;
  __int128 **v315;
  _OWORD *v316;
  _OWORD *v317;
  char *v318;
  unint64_t *v319;
  unint64_t v320;
  unint64_t v321;
  unint64_t *v322;
  unint64_t *v323;
  uint64_t v324;
  unint64_t *v325;
  unint64_t v326;
  unint64_t v327;
  unint64_t *v328;
  unint64_t *v329;
  unint64_t v330;
  unint64_t v331;
  unint64_t *v332;
  void *v333;
  void *v334;
  unsigned int v335;
  unint64_t *v336;
  unint64_t v337;
  unint64_t v338;
  unint64_t *v339;
  void *v340;
  unint64_t *v341;
  unint64_t v342;
  unint64_t v343;
  unint64_t *v344;
  unint64_t v345;
  unint64_t v346;
  unint64_t *v347;
  unint64_t *v348;
  unint64_t v349;
  unint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  unint64_t *v354;
  unint64_t v355;
  unint64_t v356;
  uint64_t v357;
  unint64_t *v358;
  unint64_t v359;
  unint64_t v360;
  uint64_t v361;
  void *v362;
  void *v363;
  unsigned int v364;
  unint64_t *v365;
  unint64_t v366;
  unint64_t v367;
  uint64_t v368;
  void *v369;
  unint64_t *v370;
  unint64_t v371;
  unint64_t v372;
  unint64_t *v373;
  unint64_t v374;
  unint64_t v375;
  uint64_t v376;
  __int128 **v377;
  _OWORD *v378;
  _OWORD *v379;
  char *v380;
  unint64_t *v381;
  unint64_t v382;
  unint64_t v383;
  unint64_t *v384;
  unint64_t *v385;
  uint64_t v386;
  unint64_t *v387;
  unint64_t v388;
  unint64_t v389;
  unint64_t *v390;
  unint64_t *v391;
  unint64_t v392;
  unint64_t v393;
  unint64_t *v394;
  void *v395;
  void *v396;
  unsigned int v397;
  unint64_t *v398;
  unint64_t v399;
  unint64_t v400;
  unint64_t *v401;
  void *v402;
  unint64_t *v403;
  unint64_t v404;
  unint64_t v405;
  unint64_t *v406;
  unint64_t v407;
  unint64_t v408;
  unint64_t *v409;
  unint64_t *v410;
  unint64_t v411;
  unint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  unint64_t *v416;
  unint64_t v417;
  unint64_t v418;
  uint64_t v419;
  unint64_t *v420;
  unint64_t v421;
  unint64_t v422;
  uint64_t v423;
  void *v424;
  void *v425;
  unsigned int v426;
  unint64_t *v427;
  unint64_t v428;
  unint64_t v429;
  uint64_t v430;
  void *v431;
  unint64_t *v432;
  unint64_t v433;
  unint64_t v434;
  unint64_t *v435;
  unint64_t v436;
  unint64_t v437;
  uint64_t v438;
  unsigned __int8 v439;
  _OWORD *v440;
  _OWORD *v441;
  char *v442;
  unint64_t *v443;
  unint64_t v444;
  unint64_t v445;
  unint64_t *v446;
  unint64_t *v447;
  uint64_t v448;
  unint64_t *v449;
  unint64_t v450;
  unint64_t v451;
  unint64_t *v452;
  unint64_t *v453;
  unint64_t v454;
  unint64_t v455;
  unint64_t *v456;
  void *v457;
  void *v458;
  unsigned int v459;
  unint64_t *v460;
  unint64_t v461;
  unint64_t v462;
  unint64_t *v463;
  void *v464;
  unint64_t *v465;
  unint64_t v466;
  unint64_t v467;
  unint64_t *v468;
  unint64_t v469;
  unint64_t v470;
  unint64_t *v471;
  unint64_t *v472;
  unint64_t v473;
  unint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  unint64_t *v478;
  unint64_t v479;
  unint64_t v480;
  uint64_t v481;
  unint64_t *v482;
  unint64_t v483;
  unint64_t v484;
  uint64_t v485;
  void *v486;
  void *v487;
  unsigned int v488;
  unint64_t *v489;
  unint64_t v490;
  unint64_t v491;
  uint64_t v492;
  void *v493;
  unint64_t *v494;
  unint64_t v495;
  unint64_t v496;
  unint64_t *v497;
  unint64_t v498;
  unint64_t v499;
  uint64_t v500;
  unint64_t v501;
  uint64_t v502;
  void *__p[2];
  char v504;
  _BYTE v505[904];
  __int128 v506;
  uint64_t v507;
  uint64_t *v508;
  _QWORD *v509;
  uint64_t v510;
  turi::supervised_2::logistic_regression *(*v511)();
  void **v512;
  _BYTE v513[13];
  uint64_t v514;

  v514 = *MEMORY[0x24BDAC8D0];
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v506 = 0uLL;
  v509 = 0;
  v510 = 0;
  v507 = 0;
  v508 = (uint64_t *)&v509;
  turi::supervised_2::logistic_regression::logistic_regression((turi::supervised_2::logistic_regression *)v505);
  MEMORY[0x219A19390](&v506, "classifier_logistic_regression_v2");
  v511 = turi::supervised_2::get_toolkit_class_registration(void)::$_0::__invoke;
  v3 = (_QWORD *)turi::model_base::list_functions((turi::model_base *)v505);
  turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set(v3, (uint64_t)v513);
  std::string::basic_string[abi:ne180100]<0>(__p, "functions");
  v512 = __p;
  v4 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v508, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v512);
  v5 = v4;
  v6 = (char *)v4 + 56;
  if (v513 != (char *)v4 + 56)
  {
    switch(*((_BYTE *)v4 + 68))
    {
      case 2:
        v7 = *(unint64_t **)v6;
        do
        {
          v8 = __ldaxr(v7);
          v9 = v8 - 1;
        }
        while (__stlxr(v9, v7));
        if (!v9)
        {
          v10 = *(unint64_t **)v6;
          if (!*(_QWORD *)v6)
            goto LABEL_44;
          if (*((char *)v10 + 31) < 0)
            operator delete((void *)v10[1]);
          v11 = v10;
          v12 = 0x1012C404EF22A49;
          goto LABEL_43;
        }
        break;
      case 3:
        v24 = *(unint64_t **)v6;
        do
        {
          v25 = __ldaxr(v24);
          v26 = v25 - 1;
        }
        while (__stlxr(v26, v24));
        if (!v26)
        {
          v27 = *(unint64_t **)v6;
          if (!*(_QWORD *)v6)
            goto LABEL_44;
          v28 = (void *)v27[1];
          if (v28)
          {
            v27[2] = (unint64_t)v28;
            operator delete(v28);
          }
          v11 = v27;
          v12 = 0x1080C409938AC02;
          goto LABEL_43;
        }
        break;
      case 4:
        v13 = *(unint64_t **)v6;
        do
        {
          v14 = __ldaxr(v13);
          v15 = v14 - 1;
        }
        while (__stlxr(v15, v13));
        if (!v15)
        {
          v16 = *(unint64_t **)v6;
          if (!*(_QWORD *)v6)
            goto LABEL_44;
          v512 = (void **)(v16 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v512);
          goto LABEL_36;
        }
        break;
      case 5:
        v29 = *(unint64_t **)v6;
        do
        {
          v30 = __ldaxr(v29);
          v31 = v30 - 1;
        }
        while (__stlxr(v31, v29));
        if (!v31)
        {
          v16 = *(unint64_t **)v6;
          if (!*(_QWORD *)v6)
            goto LABEL_44;
          v512 = (void **)(v16 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v512);
LABEL_36:
          v11 = v16;
          v12 = 0x1020C405E66F15BLL;
          goto LABEL_43;
        }
        break;
      case 8:
        v32 = *(unint64_t **)v6;
        do
        {
          v33 = __ldaxr(v32);
          v34 = v33 - 1;
        }
        while (__stlxr(v34, v32));
        if (!v34)
        {
          v35 = *(unint64_t **)v6;
          if (!*(_QWORD *)v6)
            goto LABEL_44;
          boost::detail::shared_count::~shared_count((unsigned int **)v35 + 2);
          v11 = v35;
          v23 = -235920773;
          goto LABEL_42;
        }
        break;
      case 9:
        v17 = *(unint64_t **)v6;
        do
        {
          v18 = __ldaxr(v17);
          v19 = v18 - 1;
        }
        while (__stlxr(v19, v17));
        if (!v19)
        {
          v20 = *(unint64_t **)v6;
          if (*(_QWORD *)v6)
          {
            v21 = (void *)v20[6];
            if (v21)
            {
              v20[7] = (unint64_t)v21;
              operator delete(v21);
            }
            v22 = (void *)v20[3];
            if (v22)
            {
              v20[4] = (unint64_t)v22;
              operator delete(v22);
            }
            std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v20 + 1));
            v11 = v20;
            v23 = 2071181815;
LABEL_42:
            v12 = v23 | 0x1030C4000000000;
LABEL_43:
            MEMORY[0x219A19A08](v11, v12);
          }
LABEL_44:
          *(_QWORD *)v6 = 0;
        }
        break;
      default:
        break;
    }
    *(_QWORD *)v6 = *(_QWORD *)v513;
    *(_QWORD *)(v6 + 5) = *(_QWORD *)&v513[5];
    *((_BYTE *)v5 + 68) = v513[12];
    v513[12] = 0;
  }
  if (v504 < 0)
    operator delete(__p[0]);
  switch(v513[12])
  {
    case 2:
      v36 = *(unint64_t **)v513;
      do
      {
        v37 = __ldaxr(v36);
        v38 = v37 - 1;
      }
      while (__stlxr(v38, v36));
      if (!v38)
      {
        v39 = *(_QWORD *)v513;
        if (*(_QWORD *)v513)
        {
          if (*(char *)(*(_QWORD *)v513 + 31) < 0)
            operator delete(*(void **)(*(_QWORD *)v513 + 8));
          v40 = v39;
          v41 = 0x1012C404EF22A49;
          goto LABEL_89;
        }
      }
      break;
    case 3:
      v53 = *(unint64_t **)v513;
      do
      {
        v54 = __ldaxr(v53);
        v55 = v54 - 1;
      }
      while (__stlxr(v55, v53));
      if (!v55)
      {
        v56 = *(_QWORD *)v513;
        if (*(_QWORD *)v513)
        {
          v57 = *(void **)(*(_QWORD *)v513 + 8);
          if (v57)
          {
            *(_QWORD *)(*(_QWORD *)v513 + 16) = v57;
            operator delete(v57);
          }
          v40 = v56;
          v41 = 0x1080C409938AC02;
          goto LABEL_89;
        }
      }
      break;
    case 4:
      v42 = *(unint64_t **)v513;
      do
      {
        v43 = __ldaxr(v42);
        v44 = v43 - 1;
      }
      while (__stlxr(v44, v42));
      if (!v44)
      {
        v45 = *(_QWORD *)v513;
        if (*(_QWORD *)v513)
        {
          __p[0] = (void *)(*(_QWORD *)v513 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
          goto LABEL_82;
        }
      }
      break;
    case 5:
      v58 = *(unint64_t **)v513;
      do
      {
        v59 = __ldaxr(v58);
        v60 = v59 - 1;
      }
      while (__stlxr(v60, v58));
      if (!v60)
      {
        v45 = *(_QWORD *)v513;
        if (*(_QWORD *)v513)
        {
          __p[0] = (void *)(*(_QWORD *)v513 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
LABEL_82:
          v40 = v45;
          v41 = 0x1020C405E66F15BLL;
          goto LABEL_89;
        }
      }
      break;
    case 8:
      v61 = *(unint64_t **)v513;
      do
      {
        v62 = __ldaxr(v61);
        v63 = v62 - 1;
      }
      while (__stlxr(v63, v61));
      if (!v63)
      {
        v64 = *(_QWORD *)v513;
        if (*(_QWORD *)v513)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)v513 + 16));
          v40 = v64;
          v52 = -235920773;
          goto LABEL_88;
        }
      }
      break;
    case 9:
      v46 = *(unint64_t **)v513;
      do
      {
        v47 = __ldaxr(v46);
        v48 = v47 - 1;
      }
      while (__stlxr(v48, v46));
      if (!v48)
      {
        v49 = *(_QWORD *)v513;
        if (*(_QWORD *)v513)
        {
          v50 = *(void **)(*(_QWORD *)v513 + 48);
          if (v50)
          {
            *(_QWORD *)(*(_QWORD *)v513 + 56) = v50;
            operator delete(v50);
          }
          v51 = *(void **)(v49 + 24);
          if (v51)
          {
            *(_QWORD *)(v49 + 32) = v51;
            operator delete(v51);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v49 + 8);
          v40 = v49;
          v52 = 2071181815;
LABEL_88:
          v41 = v52 | 0x1030C4000000000;
LABEL_89:
          MEMORY[0x219A19A08](v40, v41);
        }
      }
      break;
    default:
      break;
  }
  properties = (__int128 **)turi::model_base::list_get_properties((turi::model_base *)v505);
  turi::flexible_type_converter<std::vector<std::string>>::set(properties, (uint64_t)v513);
  std::string::basic_string[abi:ne180100]<0>(__p, "get_properties");
  v512 = __p;
  v66 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v508, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v512);
  v67 = v66;
  v68 = (char *)v66 + 56;
  if (v513 != (char *)v66 + 56)
  {
    switch(*((_BYTE *)v66 + 68))
    {
      case 2:
        v69 = *(unint64_t **)v68;
        do
        {
          v70 = __ldaxr(v69);
          v71 = v70 - 1;
        }
        while (__stlxr(v71, v69));
        if (!v71)
        {
          v72 = *(unint64_t **)v68;
          if (!*(_QWORD *)v68)
            goto LABEL_133;
          if (*((char *)v72 + 31) < 0)
            operator delete((void *)v72[1]);
          v73 = v72;
          v74 = 0x1012C404EF22A49;
          goto LABEL_132;
        }
        break;
      case 3:
        v86 = *(unint64_t **)v68;
        do
        {
          v87 = __ldaxr(v86);
          v88 = v87 - 1;
        }
        while (__stlxr(v88, v86));
        if (!v88)
        {
          v89 = *(unint64_t **)v68;
          if (!*(_QWORD *)v68)
            goto LABEL_133;
          v90 = (void *)v89[1];
          if (v90)
          {
            v89[2] = (unint64_t)v90;
            operator delete(v90);
          }
          v73 = v89;
          v74 = 0x1080C409938AC02;
          goto LABEL_132;
        }
        break;
      case 4:
        v75 = *(unint64_t **)v68;
        do
        {
          v76 = __ldaxr(v75);
          v77 = v76 - 1;
        }
        while (__stlxr(v77, v75));
        if (!v77)
        {
          v78 = *(unint64_t **)v68;
          if (!*(_QWORD *)v68)
            goto LABEL_133;
          v512 = (void **)(v78 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v512);
          goto LABEL_125;
        }
        break;
      case 5:
        v91 = *(unint64_t **)v68;
        do
        {
          v92 = __ldaxr(v91);
          v93 = v92 - 1;
        }
        while (__stlxr(v93, v91));
        if (!v93)
        {
          v78 = *(unint64_t **)v68;
          if (!*(_QWORD *)v68)
            goto LABEL_133;
          v512 = (void **)(v78 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v512);
LABEL_125:
          v73 = v78;
          v74 = 0x1020C405E66F15BLL;
          goto LABEL_132;
        }
        break;
      case 8:
        v94 = *(unint64_t **)v68;
        do
        {
          v95 = __ldaxr(v94);
          v96 = v95 - 1;
        }
        while (__stlxr(v96, v94));
        if (!v96)
        {
          v97 = *(unint64_t **)v68;
          if (!*(_QWORD *)v68)
            goto LABEL_133;
          boost::detail::shared_count::~shared_count((unsigned int **)v97 + 2);
          v73 = v97;
          v85 = -235920773;
          goto LABEL_131;
        }
        break;
      case 9:
        v79 = *(unint64_t **)v68;
        do
        {
          v80 = __ldaxr(v79);
          v81 = v80 - 1;
        }
        while (__stlxr(v81, v79));
        if (!v81)
        {
          v82 = *(unint64_t **)v68;
          if (*(_QWORD *)v68)
          {
            v83 = (void *)v82[6];
            if (v83)
            {
              v82[7] = (unint64_t)v83;
              operator delete(v83);
            }
            v84 = (void *)v82[3];
            if (v84)
            {
              v82[4] = (unint64_t)v84;
              operator delete(v84);
            }
            std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v82 + 1));
            v73 = v82;
            v85 = 2071181815;
LABEL_131:
            v74 = v85 | 0x1030C4000000000;
LABEL_132:
            MEMORY[0x219A19A08](v73, v74);
          }
LABEL_133:
          *(_QWORD *)v68 = 0;
        }
        break;
      default:
        break;
    }
    *(_QWORD *)v68 = *(_QWORD *)v513;
    *(_QWORD *)(v68 + 5) = *(_QWORD *)&v513[5];
    *((_BYTE *)v67 + 68) = v513[12];
    v513[12] = 0;
  }
  if (v504 < 0)
    operator delete(__p[0]);
  switch(v513[12])
  {
    case 2:
      v98 = *(unint64_t **)v513;
      do
      {
        v99 = __ldaxr(v98);
        v100 = v99 - 1;
      }
      while (__stlxr(v100, v98));
      if (!v100)
      {
        v101 = *(_QWORD *)v513;
        if (*(_QWORD *)v513)
        {
          if (*(char *)(*(_QWORD *)v513 + 31) < 0)
            operator delete(*(void **)(*(_QWORD *)v513 + 8));
          v102 = v101;
          v103 = 0x1012C404EF22A49;
          goto LABEL_178;
        }
      }
      break;
    case 3:
      v115 = *(unint64_t **)v513;
      do
      {
        v116 = __ldaxr(v115);
        v117 = v116 - 1;
      }
      while (__stlxr(v117, v115));
      if (!v117)
      {
        v118 = *(_QWORD *)v513;
        if (*(_QWORD *)v513)
        {
          v119 = *(void **)(*(_QWORD *)v513 + 8);
          if (v119)
          {
            *(_QWORD *)(*(_QWORD *)v513 + 16) = v119;
            operator delete(v119);
          }
          v102 = v118;
          v103 = 0x1080C409938AC02;
          goto LABEL_178;
        }
      }
      break;
    case 4:
      v104 = *(unint64_t **)v513;
      do
      {
        v105 = __ldaxr(v104);
        v106 = v105 - 1;
      }
      while (__stlxr(v106, v104));
      if (!v106)
      {
        v107 = *(_QWORD *)v513;
        if (*(_QWORD *)v513)
        {
          __p[0] = (void *)(*(_QWORD *)v513 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
          goto LABEL_171;
        }
      }
      break;
    case 5:
      v120 = *(unint64_t **)v513;
      do
      {
        v121 = __ldaxr(v120);
        v122 = v121 - 1;
      }
      while (__stlxr(v122, v120));
      if (!v122)
      {
        v107 = *(_QWORD *)v513;
        if (*(_QWORD *)v513)
        {
          __p[0] = (void *)(*(_QWORD *)v513 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
LABEL_171:
          v102 = v107;
          v103 = 0x1020C405E66F15BLL;
          goto LABEL_178;
        }
      }
      break;
    case 8:
      v123 = *(unint64_t **)v513;
      do
      {
        v124 = __ldaxr(v123);
        v125 = v124 - 1;
      }
      while (__stlxr(v125, v123));
      if (!v125)
      {
        v126 = *(_QWORD *)v513;
        if (*(_QWORD *)v513)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)v513 + 16));
          v102 = v126;
          v114 = -235920773;
          goto LABEL_177;
        }
      }
      break;
    case 9:
      v108 = *(unint64_t **)v513;
      do
      {
        v109 = __ldaxr(v108);
        v110 = v109 - 1;
      }
      while (__stlxr(v110, v108));
      if (!v110)
      {
        v111 = *(_QWORD *)v513;
        if (*(_QWORD *)v513)
        {
          v112 = *(void **)(*(_QWORD *)v513 + 48);
          if (v112)
          {
            *(_QWORD *)(*(_QWORD *)v513 + 56) = v112;
            operator delete(v112);
          }
          v113 = *(void **)(v111 + 24);
          if (v113)
          {
            *(_QWORD *)(v111 + 32) = v113;
            operator delete(v113);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v111 + 8);
          v102 = v111;
          v114 = 2071181815;
LABEL_177:
          v103 = v114 | 0x1030C4000000000;
LABEL_178:
          MEMORY[0x219A19A08](v102, v103);
        }
      }
      break;
    default:
      break;
  }
  v127 = (__int128 **)turi::model_base::list_set_properties((turi::model_base *)v505);
  turi::flexible_type_converter<std::vector<std::string>>::set(v127, (uint64_t)v513);
  std::string::basic_string[abi:ne180100]<0>(__p, "set_properties");
  v512 = __p;
  v128 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v508, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v512);
  v129 = v128;
  v130 = (char *)v128 + 56;
  if (v513 != (char *)v128 + 56)
  {
    switch(*((_BYTE *)v128 + 68))
    {
      case 2:
        v131 = *(unint64_t **)v130;
        do
        {
          v132 = __ldaxr(v131);
          v133 = v132 - 1;
        }
        while (__stlxr(v133, v131));
        if (!v133)
        {
          v134 = *(unint64_t **)v130;
          if (!*(_QWORD *)v130)
            goto LABEL_222;
          if (*((char *)v134 + 31) < 0)
            operator delete((void *)v134[1]);
          v135 = v134;
          v136 = 0x1012C404EF22A49;
          goto LABEL_221;
        }
        break;
      case 3:
        v148 = *(unint64_t **)v130;
        do
        {
          v149 = __ldaxr(v148);
          v150 = v149 - 1;
        }
        while (__stlxr(v150, v148));
        if (!v150)
        {
          v151 = *(unint64_t **)v130;
          if (!*(_QWORD *)v130)
            goto LABEL_222;
          v152 = (void *)v151[1];
          if (v152)
          {
            v151[2] = (unint64_t)v152;
            operator delete(v152);
          }
          v135 = v151;
          v136 = 0x1080C409938AC02;
          goto LABEL_221;
        }
        break;
      case 4:
        v137 = *(unint64_t **)v130;
        do
        {
          v138 = __ldaxr(v137);
          v139 = v138 - 1;
        }
        while (__stlxr(v139, v137));
        if (!v139)
        {
          v140 = *(unint64_t **)v130;
          if (!*(_QWORD *)v130)
            goto LABEL_222;
          v512 = (void **)(v140 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v512);
          goto LABEL_214;
        }
        break;
      case 5:
        v153 = *(unint64_t **)v130;
        do
        {
          v154 = __ldaxr(v153);
          v155 = v154 - 1;
        }
        while (__stlxr(v155, v153));
        if (!v155)
        {
          v140 = *(unint64_t **)v130;
          if (!*(_QWORD *)v130)
            goto LABEL_222;
          v512 = (void **)(v140 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v512);
LABEL_214:
          v135 = v140;
          v136 = 0x1020C405E66F15BLL;
          goto LABEL_221;
        }
        break;
      case 8:
        v156 = *(unint64_t **)v130;
        do
        {
          v157 = __ldaxr(v156);
          v158 = v157 - 1;
        }
        while (__stlxr(v158, v156));
        if (!v158)
        {
          v159 = *(unint64_t **)v130;
          if (!*(_QWORD *)v130)
            goto LABEL_222;
          boost::detail::shared_count::~shared_count((unsigned int **)v159 + 2);
          v135 = v159;
          v147 = -235920773;
          goto LABEL_220;
        }
        break;
      case 9:
        v141 = *(unint64_t **)v130;
        do
        {
          v142 = __ldaxr(v141);
          v143 = v142 - 1;
        }
        while (__stlxr(v143, v141));
        if (!v143)
        {
          v144 = *(unint64_t **)v130;
          if (*(_QWORD *)v130)
          {
            v145 = (void *)v144[6];
            if (v145)
            {
              v144[7] = (unint64_t)v145;
              operator delete(v145);
            }
            v146 = (void *)v144[3];
            if (v146)
            {
              v144[4] = (unint64_t)v146;
              operator delete(v146);
            }
            std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v144 + 1));
            v135 = v144;
            v147 = 2071181815;
LABEL_220:
            v136 = v147 | 0x1030C4000000000;
LABEL_221:
            MEMORY[0x219A19A08](v135, v136);
          }
LABEL_222:
          *(_QWORD *)v130 = 0;
        }
        break;
      default:
        break;
    }
    *(_QWORD *)v130 = *(_QWORD *)v513;
    *(_QWORD *)(v130 + 5) = *(_QWORD *)&v513[5];
    *((_BYTE *)v129 + 68) = v513[12];
    v513[12] = 0;
  }
  if (v504 < 0)
    operator delete(__p[0]);
  switch(v513[12])
  {
    case 2:
      v160 = *(unint64_t **)v513;
      do
      {
        v161 = __ldaxr(v160);
        v162 = v161 - 1;
      }
      while (__stlxr(v162, v160));
      if (!v162)
      {
        v163 = *(_QWORD *)v513;
        if (*(_QWORD *)v513)
        {
          if (*(char *)(*(_QWORD *)v513 + 31) < 0)
            operator delete(*(void **)(*(_QWORD *)v513 + 8));
          v164 = v163;
          v165 = 0x1012C404EF22A49;
          goto LABEL_267;
        }
      }
      break;
    case 3:
      v177 = *(unint64_t **)v513;
      do
      {
        v178 = __ldaxr(v177);
        v179 = v178 - 1;
      }
      while (__stlxr(v179, v177));
      if (!v179)
      {
        v180 = *(_QWORD *)v513;
        if (*(_QWORD *)v513)
        {
          v181 = *(void **)(*(_QWORD *)v513 + 8);
          if (v181)
          {
            *(_QWORD *)(*(_QWORD *)v513 + 16) = v181;
            operator delete(v181);
          }
          v164 = v180;
          v165 = 0x1080C409938AC02;
          goto LABEL_267;
        }
      }
      break;
    case 4:
      v166 = *(unint64_t **)v513;
      do
      {
        v167 = __ldaxr(v166);
        v168 = v167 - 1;
      }
      while (__stlxr(v168, v166));
      if (!v168)
      {
        v169 = *(_QWORD *)v513;
        if (*(_QWORD *)v513)
        {
          __p[0] = (void *)(*(_QWORD *)v513 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
          goto LABEL_260;
        }
      }
      break;
    case 5:
      v182 = *(unint64_t **)v513;
      do
      {
        v183 = __ldaxr(v182);
        v184 = v183 - 1;
      }
      while (__stlxr(v184, v182));
      if (!v184)
      {
        v169 = *(_QWORD *)v513;
        if (*(_QWORD *)v513)
        {
          __p[0] = (void *)(*(_QWORD *)v513 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
LABEL_260:
          v164 = v169;
          v165 = 0x1020C405E66F15BLL;
          goto LABEL_267;
        }
      }
      break;
    case 8:
      v185 = *(unint64_t **)v513;
      do
      {
        v186 = __ldaxr(v185);
        v187 = v186 - 1;
      }
      while (__stlxr(v187, v185));
      if (!v187)
      {
        v188 = *(_QWORD *)v513;
        if (*(_QWORD *)v513)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)v513 + 16));
          v164 = v188;
          v176 = -235920773;
          goto LABEL_266;
        }
      }
      break;
    case 9:
      v170 = *(unint64_t **)v513;
      do
      {
        v171 = __ldaxr(v170);
        v172 = v171 - 1;
      }
      while (__stlxr(v172, v170));
      if (!v172)
      {
        v173 = *(_QWORD *)v513;
        if (*(_QWORD *)v513)
        {
          v174 = *(void **)(*(_QWORD *)v513 + 48);
          if (v174)
          {
            *(_QWORD *)(*(_QWORD *)v513 + 56) = v174;
            operator delete(v174);
          }
          v175 = *(void **)(v173 + 24);
          if (v175)
          {
            *(_QWORD *)(v173 + 32) = v175;
            operator delete(v175);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v173 + 8);
          v164 = v173;
          v176 = 2071181815;
LABEL_266:
          v165 = v176 | 0x1030C4000000000;
LABEL_267:
          MEMORY[0x219A19A08](v164, v165);
        }
      }
      break;
    default:
      break;
  }
  if ((v189 & 1) == 0
  {
    std::string::basic_string[abi:ne180100]<0>(&turi::supervised_2::logistic_regression::uid(void)::_uid, "__LINE__,/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning_2/logistic_regression.hpp");
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &turi::supervised_2::logistic_regression::uid(void)::_uid, &dword_217E69000);
  }
  turi::flexible_type_converter<std::string>::set(&turi::supervised_2::logistic_regression::uid(void)::_uid, (uint64_t)v513);
  std::string::basic_string[abi:ne180100]<0>(__p, "uid");
  v512 = __p;
  v190 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v508, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v512);
  v191 = v190;
  v192 = (char *)v190 + 56;
  if (v513 != (char *)v190 + 56)
  {
    switch(*((_BYTE *)v190 + 68))
    {
      case 2:
        v193 = *(unint64_t **)v192;
        do
        {
          v194 = __ldaxr(v193);
          v195 = v194 - 1;
        }
        while (__stlxr(v195, v193));
        if (!v195)
        {
          v196 = *(unint64_t **)v192;
          if (!*(_QWORD *)v192)
            goto LABEL_312;
          if (*((char *)v196 + 31) < 0)
            operator delete((void *)v196[1]);
          v197 = v196;
          v198 = 0x1012C404EF22A49;
          goto LABEL_311;
        }
        break;
      case 3:
        v210 = *(unint64_t **)v192;
        do
        {
          v211 = __ldaxr(v210);
          v212 = v211 - 1;
        }
        while (__stlxr(v212, v210));
        if (!v212)
        {
          v213 = *(unint64_t **)v192;
          if (!*(_QWORD *)v192)
            goto LABEL_312;
          v214 = (void *)v213[1];
          if (v214)
          {
            v213[2] = (unint64_t)v214;
            operator delete(v214);
          }
          v197 = v213;
          v198 = 0x1080C409938AC02;
          goto LABEL_311;
        }
        break;
      case 4:
        v199 = *(unint64_t **)v192;
        do
        {
          v200 = __ldaxr(v199);
          v201 = v200 - 1;
        }
        while (__stlxr(v201, v199));
        if (!v201)
        {
          v202 = *(unint64_t **)v192;
          if (!*(_QWORD *)v192)
            goto LABEL_312;
          v512 = (void **)(v202 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v512);
          goto LABEL_304;
        }
        break;
      case 5:
        v215 = *(unint64_t **)v192;
        do
        {
          v216 = __ldaxr(v215);
          v217 = v216 - 1;
        }
        while (__stlxr(v217, v215));
        if (!v217)
        {
          v202 = *(unint64_t **)v192;
          if (!*(_QWORD *)v192)
            goto LABEL_312;
          v512 = (void **)(v202 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v512);
LABEL_304:
          v197 = v202;
          v198 = 0x1020C405E66F15BLL;
          goto LABEL_311;
        }
        break;
      case 8:
        v218 = *(unint64_t **)v192;
        do
        {
          v219 = __ldaxr(v218);
          v220 = v219 - 1;
        }
        while (__stlxr(v220, v218));
        if (!v220)
        {
          v221 = *(unint64_t **)v192;
          if (!*(_QWORD *)v192)
            goto LABEL_312;
          boost::detail::shared_count::~shared_count((unsigned int **)v221 + 2);
          v197 = v221;
          v209 = -235920773;
          goto LABEL_310;
        }
        break;
      case 9:
        v203 = *(unint64_t **)v192;
        do
        {
          v204 = __ldaxr(v203);
          v205 = v204 - 1;
        }
        while (__stlxr(v205, v203));
        if (!v205)
        {
          v206 = *(unint64_t **)v192;
          if (*(_QWORD *)v192)
          {
            v207 = (void *)v206[6];
            if (v207)
            {
              v206[7] = (unint64_t)v207;
              operator delete(v207);
            }
            v208 = (void *)v206[3];
            if (v208)
            {
              v206[4] = (unint64_t)v208;
              operator delete(v208);
            }
            std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v206 + 1));
            v197 = v206;
            v209 = 2071181815;
LABEL_310:
            v198 = v209 | 0x1030C4000000000;
LABEL_311:
            MEMORY[0x219A19A08](v197, v198);
          }
LABEL_312:
          *(_QWORD *)v192 = 0;
        }
        break;
      default:
        break;
    }
    *(_QWORD *)v192 = *(_QWORD *)v513;
    *(_QWORD *)(v192 + 5) = *(_QWORD *)&v513[5];
    *((_BYTE *)v191 + 68) = v513[12];
    v513[12] = 0;
  }
  if (v504 < 0)
    operator delete(__p[0]);
  switch(v513[12])
  {
    case 2:
      v222 = *(unint64_t **)v513;
      do
      {
        v223 = __ldaxr(v222);
        v224 = v223 - 1;
      }
      while (__stlxr(v224, v222));
      if (!v224)
      {
        v225 = *(_QWORD *)v513;
        if (*(_QWORD *)v513)
        {
          if (*(char *)(*(_QWORD *)v513 + 31) < 0)
            operator delete(*(void **)(*(_QWORD *)v513 + 8));
          v226 = v225;
          v227 = 0x1012C404EF22A49;
          goto LABEL_357;
        }
      }
      break;
    case 3:
      v239 = *(unint64_t **)v513;
      do
      {
        v240 = __ldaxr(v239);
        v241 = v240 - 1;
      }
      while (__stlxr(v241, v239));
      if (!v241)
      {
        v242 = *(_QWORD *)v513;
        if (*(_QWORD *)v513)
        {
          v243 = *(void **)(*(_QWORD *)v513 + 8);
          if (v243)
          {
            *(_QWORD *)(*(_QWORD *)v513 + 16) = v243;
            operator delete(v243);
          }
          v226 = v242;
          v227 = 0x1080C409938AC02;
          goto LABEL_357;
        }
      }
      break;
    case 4:
      v228 = *(unint64_t **)v513;
      do
      {
        v229 = __ldaxr(v228);
        v230 = v229 - 1;
      }
      while (__stlxr(v230, v228));
      if (!v230)
      {
        v231 = *(_QWORD *)v513;
        if (*(_QWORD *)v513)
        {
          __p[0] = (void *)(*(_QWORD *)v513 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
          goto LABEL_350;
        }
      }
      break;
    case 5:
      v244 = *(unint64_t **)v513;
      do
      {
        v245 = __ldaxr(v244);
        v246 = v245 - 1;
      }
      while (__stlxr(v246, v244));
      if (!v246)
      {
        v231 = *(_QWORD *)v513;
        if (*(_QWORD *)v513)
        {
          __p[0] = (void *)(*(_QWORD *)v513 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
LABEL_350:
          v226 = v231;
          v227 = 0x1020C405E66F15BLL;
          goto LABEL_357;
        }
      }
      break;
    case 8:
      v247 = *(unint64_t **)v513;
      do
      {
        v248 = __ldaxr(v247);
        v249 = v248 - 1;
      }
      while (__stlxr(v249, v247));
      if (!v249)
      {
        v250 = *(_QWORD *)v513;
        if (*(_QWORD *)v513)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)v513 + 16));
          v226 = v250;
          v238 = -235920773;
          goto LABEL_356;
        }
      }
      break;
    case 9:
      v232 = *(unint64_t **)v513;
      do
      {
        v233 = __ldaxr(v232);
        v234 = v233 - 1;
      }
      while (__stlxr(v234, v232));
      if (!v234)
      {
        v235 = *(_QWORD *)v513;
        if (*(_QWORD *)v513)
        {
          v236 = *(void **)(*(_QWORD *)v513 + 48);
          if (v236)
          {
            *(_QWORD *)(*(_QWORD *)v513 + 56) = v236;
            operator delete(v236);
          }
          v237 = *(void **)(v235 + 24);
          if (v237)
          {
            *(_QWORD *)(v235 + 32) = v237;
            operator delete(v237);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v235 + 8);
          v226 = v235;
          v238 = 2071181815;
LABEL_356:
          v227 = v238 | 0x1030C4000000000;
LABEL_357:
          MEMORY[0x219A19A08](v226, v227);
        }
      }
      break;
    default:
      break;
  }
  v251 = a1[1];
  if (v251 >= a1[2])
  {
    v252 = std::vector<turi::toolkit_class_specification>::__push_back_slow_path<turi::toolkit_class_specification const&>(a1, &v506);
  }
  else
  {
    std::allocator<turi::toolkit_class_specification>::construct[abi:ne180100]<turi::toolkit_class_specification,turi::toolkit_class_specification const&>((_DWORD)a1 + 16, (std::string *)a1[1], &v506);
    v252 = v251 + 56;
    a1[1] = v251 + 56;
  }
  a1[1] = v252;
  turi::supervised_2::logistic_regression::~logistic_regression((turi::supervised_2::logistic_regression *)v505);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v508, v509);
  if (SHIBYTE(v507) < 0)
    operator delete((void *)v506);
  v506 = 0uLL;
  v509 = 0;
  v510 = 0;
  v507 = 0;
  v508 = (uint64_t *)&v509;
  turi::supervised_2::linear_regression::linear_regression((turi::supervised_2::linear_regression *)v505);
  MEMORY[0x219A19390](&v506, "regression_linear_regression_v2");
  v511 = turi::supervised_2::get_toolkit_class_registration(void)::$_1::__invoke;
  v253 = (_QWORD *)turi::model_base::list_functions((turi::model_base *)v505);
  turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set(v253, (uint64_t)v513);
  std::string::basic_string[abi:ne180100]<0>(__p, "functions");
  v512 = __p;
  v254 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v508, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v512);
  v255 = v254;
  v256 = (char *)v254 + 56;
  if (v513 != (char *)v254 + 56)
  {
    switch(*((_BYTE *)v254 + 68))
    {
      case 2:
        v257 = *(unint64_t **)v256;
        do
        {
          v258 = __ldaxr(v257);
          v259 = v258 - 1;
        }
        while (__stlxr(v259, v257));
        if (!v259)
        {
          v260 = *(unint64_t **)v256;
          if (!*(_QWORD *)v256)
            goto LABEL_406;
          if (*((char *)v260 + 31) < 0)
            operator delete((void *)v260[1]);
          v261 = v260;
          v262 = 0x1012C404EF22A49;
          goto LABEL_405;
        }
        break;
      case 3:
        v274 = *(unint64_t **)v256;
        do
        {
          v275 = __ldaxr(v274);
          v276 = v275 - 1;
        }
        while (__stlxr(v276, v274));
        if (!v276)
        {
          v277 = *(unint64_t **)v256;
          if (!*(_QWORD *)v256)
            goto LABEL_406;
          v278 = (void *)v277[1];
          if (v278)
          {
            v277[2] = (unint64_t)v278;
            operator delete(v278);
          }
          v261 = v277;
          v262 = 0x1080C409938AC02;
          goto LABEL_405;
        }
        break;
      case 4:
        v263 = *(unint64_t **)v256;
        do
        {
          v264 = __ldaxr(v263);
          v265 = v264 - 1;
        }
        while (__stlxr(v265, v263));
        if (!v265)
        {
          v266 = *(unint64_t **)v256;
          if (!*(_QWORD *)v256)
            goto LABEL_406;
          v512 = (void **)(v266 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v512);
          goto LABEL_398;
        }
        break;
      case 5:
        v279 = *(unint64_t **)v256;
        do
        {
          v280 = __ldaxr(v279);
          v281 = v280 - 1;
        }
        while (__stlxr(v281, v279));
        if (!v281)
        {
          v266 = *(unint64_t **)v256;
          if (!*(_QWORD *)v256)
            goto LABEL_406;
          v512 = (void **)(v266 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v512);
LABEL_398:
          v261 = v266;
          v262 = 0x1020C405E66F15BLL;
          goto LABEL_405;
        }
        break;
      case 8:
        v282 = *(unint64_t **)v256;
        do
        {
          v283 = __ldaxr(v282);
          v284 = v283 - 1;
        }
        while (__stlxr(v284, v282));
        if (!v284)
        {
          v285 = *(unint64_t **)v256;
          if (!*(_QWORD *)v256)
            goto LABEL_406;
          boost::detail::shared_count::~shared_count((unsigned int **)v285 + 2);
          v261 = v285;
          v273 = -235920773;
          goto LABEL_404;
        }
        break;
      case 9:
        v267 = *(unint64_t **)v256;
        do
        {
          v268 = __ldaxr(v267);
          v269 = v268 - 1;
        }
        while (__stlxr(v269, v267));
        if (!v269)
        {
          v270 = *(unint64_t **)v256;
          if (*(_QWORD *)v256)
          {
            v271 = (void *)v270[6];
            if (v271)
            {
              v270[7] = (unint64_t)v271;
              operator delete(v271);
            }
            v272 = (void *)v270[3];
            if (v272)
            {
              v270[4] = (unint64_t)v272;
              operator delete(v272);
            }
            std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v270 + 1));
            v261 = v270;
            v273 = 2071181815;
LABEL_404:
            v262 = v273 | 0x1030C4000000000;
LABEL_405:
            MEMORY[0x219A19A08](v261, v262);
          }
LABEL_406:
          *(_QWORD *)v256 = 0;
        }
        break;
      default:
        break;
    }
    *(_QWORD *)v256 = *(_QWORD *)v513;
    *(_QWORD *)(v256 + 5) = *(_QWORD *)&v513[5];
    *((_BYTE *)v255 + 68) = v513[12];
    v513[12] = 0;
  }
  if (v504 < 0)
    operator delete(__p[0]);
  switch(v513[12])
  {
    case 2:
      v286 = *(unint64_t **)v513;
      do
      {
        v287 = __ldaxr(v286);
        v288 = v287 - 1;
      }
      while (__stlxr(v288, v286));
      if (!v288)
      {
        v289 = *(_QWORD *)v513;
        if (*(_QWORD *)v513)
        {
          if (*(char *)(*(_QWORD *)v513 + 31) < 0)
            operator delete(*(void **)(*(_QWORD *)v513 + 8));
          v290 = v289;
          v291 = 0x1012C404EF22A49;
          goto LABEL_451;
        }
      }
      break;
    case 3:
      v303 = *(unint64_t **)v513;
      do
      {
        v304 = __ldaxr(v303);
        v305 = v304 - 1;
      }
      while (__stlxr(v305, v303));
      if (!v305)
      {
        v306 = *(_QWORD *)v513;
        if (*(_QWORD *)v513)
        {
          v307 = *(void **)(*(_QWORD *)v513 + 8);
          if (v307)
          {
            *(_QWORD *)(*(_QWORD *)v513 + 16) = v307;
            operator delete(v307);
          }
          v290 = v306;
          v291 = 0x1080C409938AC02;
          goto LABEL_451;
        }
      }
      break;
    case 4:
      v292 = *(unint64_t **)v513;
      do
      {
        v293 = __ldaxr(v292);
        v294 = v293 - 1;
      }
      while (__stlxr(v294, v292));
      if (!v294)
      {
        v295 = *(_QWORD *)v513;
        if (*(_QWORD *)v513)
        {
          __p[0] = (void *)(*(_QWORD *)v513 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
          goto LABEL_444;
        }
      }
      break;
    case 5:
      v308 = *(unint64_t **)v513;
      do
      {
        v309 = __ldaxr(v308);
        v310 = v309 - 1;
      }
      while (__stlxr(v310, v308));
      if (!v310)
      {
        v295 = *(_QWORD *)v513;
        if (*(_QWORD *)v513)
        {
          __p[0] = (void *)(*(_QWORD *)v513 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
LABEL_444:
          v290 = v295;
          v291 = 0x1020C405E66F15BLL;
          goto LABEL_451;
        }
      }
      break;
    case 8:
      v311 = *(unint64_t **)v513;
      do
      {
        v312 = __ldaxr(v311);
        v313 = v312 - 1;
      }
      while (__stlxr(v313, v311));
      if (!v313)
      {
        v314 = *(_QWORD *)v513;
        if (*(_QWORD *)v513)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)v513 + 16));
          v290 = v314;
          v302 = -235920773;
          goto LABEL_450;
        }
      }
      break;
    case 9:
      v296 = *(unint64_t **)v513;
      do
      {
        v297 = __ldaxr(v296);
        v298 = v297 - 1;
      }
      while (__stlxr(v298, v296));
      if (!v298)
      {
        v299 = *(_QWORD *)v513;
        if (*(_QWORD *)v513)
        {
          v300 = *(void **)(*(_QWORD *)v513 + 48);
          if (v300)
          {
            *(_QWORD *)(*(_QWORD *)v513 + 56) = v300;
            operator delete(v300);
          }
          v301 = *(void **)(v299 + 24);
          if (v301)
          {
            *(_QWORD *)(v299 + 32) = v301;
            operator delete(v301);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v299 + 8);
          v290 = v299;
          v302 = 2071181815;
LABEL_450:
          v291 = v302 | 0x1030C4000000000;
LABEL_451:
          MEMORY[0x219A19A08](v290, v291);
        }
      }
      break;
    default:
      break;
  }
  v315 = (__int128 **)turi::model_base::list_get_properties((turi::model_base *)v505);
  turi::flexible_type_converter<std::vector<std::string>>::set(v315, (uint64_t)v513);
  std::string::basic_string[abi:ne180100]<0>(__p, "get_properties");
  v512 = __p;
  v316 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v508, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v512);
  v317 = v316;
  v318 = (char *)v316 + 56;
  if (v513 != (char *)v316 + 56)
  {
    switch(*((_BYTE *)v316 + 68))
    {
      case 2:
        v319 = *(unint64_t **)v318;
        do
        {
          v320 = __ldaxr(v319);
          v321 = v320 - 1;
        }
        while (__stlxr(v321, v319));
        if (!v321)
        {
          v322 = *(unint64_t **)v318;
          if (!*(_QWORD *)v318)
            goto LABEL_495;
          if (*((char *)v322 + 31) < 0)
            operator delete((void *)v322[1]);
          v323 = v322;
          v324 = 0x1012C404EF22A49;
          goto LABEL_494;
        }
        break;
      case 3:
        v336 = *(unint64_t **)v318;
        do
        {
          v337 = __ldaxr(v336);
          v338 = v337 - 1;
        }
        while (__stlxr(v338, v336));
        if (!v338)
        {
          v339 = *(unint64_t **)v318;
          if (!*(_QWORD *)v318)
            goto LABEL_495;
          v340 = (void *)v339[1];
          if (v340)
          {
            v339[2] = (unint64_t)v340;
            operator delete(v340);
          }
          v323 = v339;
          v324 = 0x1080C409938AC02;
          goto LABEL_494;
        }
        break;
      case 4:
        v325 = *(unint64_t **)v318;
        do
        {
          v326 = __ldaxr(v325);
          v327 = v326 - 1;
        }
        while (__stlxr(v327, v325));
        if (!v327)
        {
          v328 = *(unint64_t **)v318;
          if (!*(_QWORD *)v318)
            goto LABEL_495;
          v512 = (void **)(v328 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v512);
          goto LABEL_487;
        }
        break;
      case 5:
        v341 = *(unint64_t **)v318;
        do
        {
          v342 = __ldaxr(v341);
          v343 = v342 - 1;
        }
        while (__stlxr(v343, v341));
        if (!v343)
        {
          v328 = *(unint64_t **)v318;
          if (!*(_QWORD *)v318)
            goto LABEL_495;
          v512 = (void **)(v328 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v512);
LABEL_487:
          v323 = v328;
          v324 = 0x1020C405E66F15BLL;
          goto LABEL_494;
        }
        break;
      case 8:
        v344 = *(unint64_t **)v318;
        do
        {
          v345 = __ldaxr(v344);
          v346 = v345 - 1;
        }
        while (__stlxr(v346, v344));
        if (!v346)
        {
          v347 = *(unint64_t **)v318;
          if (!*(_QWORD *)v318)
            goto LABEL_495;
          boost::detail::shared_count::~shared_count((unsigned int **)v347 + 2);
          v323 = v347;
          v335 = -235920773;
          goto LABEL_493;
        }
        break;
      case 9:
        v329 = *(unint64_t **)v318;
        do
        {
          v330 = __ldaxr(v329);
          v331 = v330 - 1;
        }
        while (__stlxr(v331, v329));
        if (!v331)
        {
          v332 = *(unint64_t **)v318;
          if (*(_QWORD *)v318)
          {
            v333 = (void *)v332[6];
            if (v333)
            {
              v332[7] = (unint64_t)v333;
              operator delete(v333);
            }
            v334 = (void *)v332[3];
            if (v334)
            {
              v332[4] = (unint64_t)v334;
              operator delete(v334);
            }
            std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v332 + 1));
            v323 = v332;
            v335 = 2071181815;
LABEL_493:
            v324 = v335 | 0x1030C4000000000;
LABEL_494:
            MEMORY[0x219A19A08](v323, v324);
          }
LABEL_495:
          *(_QWORD *)v318 = 0;
        }
        break;
      default:
        break;
    }
    *(_QWORD *)v318 = *(_QWORD *)v513;
    *(_QWORD *)(v318 + 5) = *(_QWORD *)&v513[5];
    *((_BYTE *)v317 + 68) = v513[12];
    v513[12] = 0;
  }
  if (v504 < 0)
    operator delete(__p[0]);
  switch(v513[12])
  {
    case 2:
      v348 = *(unint64_t **)v513;
      do
      {
        v349 = __ldaxr(v348);
        v350 = v349 - 1;
      }
      while (__stlxr(v350, v348));
      if (!v350)
      {
        v351 = *(_QWORD *)v513;
        if (*(_QWORD *)v513)
        {
          if (*(char *)(*(_QWORD *)v513 + 31) < 0)
            operator delete(*(void **)(*(_QWORD *)v513 + 8));
          v352 = v351;
          v353 = 0x1012C404EF22A49;
          goto LABEL_540;
        }
      }
      break;
    case 3:
      v365 = *(unint64_t **)v513;
      do
      {
        v366 = __ldaxr(v365);
        v367 = v366 - 1;
      }
      while (__stlxr(v367, v365));
      if (!v367)
      {
        v368 = *(_QWORD *)v513;
        if (*(_QWORD *)v513)
        {
          v369 = *(void **)(*(_QWORD *)v513 + 8);
          if (v369)
          {
            *(_QWORD *)(*(_QWORD *)v513 + 16) = v369;
            operator delete(v369);
          }
          v352 = v368;
          v353 = 0x1080C409938AC02;
          goto LABEL_540;
        }
      }
      break;
    case 4:
      v354 = *(unint64_t **)v513;
      do
      {
        v355 = __ldaxr(v354);
        v356 = v355 - 1;
      }
      while (__stlxr(v356, v354));
      if (!v356)
      {
        v357 = *(_QWORD *)v513;
        if (*(_QWORD *)v513)
        {
          __p[0] = (void *)(*(_QWORD *)v513 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
          goto LABEL_533;
        }
      }
      break;
    case 5:
      v370 = *(unint64_t **)v513;
      do
      {
        v371 = __ldaxr(v370);
        v372 = v371 - 1;
      }
      while (__stlxr(v372, v370));
      if (!v372)
      {
        v357 = *(_QWORD *)v513;
        if (*(_QWORD *)v513)
        {
          __p[0] = (void *)(*(_QWORD *)v513 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
LABEL_533:
          v352 = v357;
          v353 = 0x1020C405E66F15BLL;
          goto LABEL_540;
        }
      }
      break;
    case 8:
      v373 = *(unint64_t **)v513;
      do
      {
        v374 = __ldaxr(v373);
        v375 = v374 - 1;
      }
      while (__stlxr(v375, v373));
      if (!v375)
      {
        v376 = *(_QWORD *)v513;
        if (*(_QWORD *)v513)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)v513 + 16));
          v352 = v376;
          v364 = -235920773;
          goto LABEL_539;
        }
      }
      break;
    case 9:
      v358 = *(unint64_t **)v513;
      do
      {
        v359 = __ldaxr(v358);
        v360 = v359 - 1;
      }
      while (__stlxr(v360, v358));
      if (!v360)
      {
        v361 = *(_QWORD *)v513;
        if (*(_QWORD *)v513)
        {
          v362 = *(void **)(*(_QWORD *)v513 + 48);
          if (v362)
          {
            *(_QWORD *)(*(_QWORD *)v513 + 56) = v362;
            operator delete(v362);
          }
          v363 = *(void **)(v361 + 24);
          if (v363)
          {
            *(_QWORD *)(v361 + 32) = v363;
            operator delete(v363);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v361 + 8);
          v352 = v361;
          v364 = 2071181815;
LABEL_539:
          v353 = v364 | 0x1030C4000000000;
LABEL_540:
          MEMORY[0x219A19A08](v352, v353);
        }
      }
      break;
    default:
      break;
  }
  v377 = (__int128 **)turi::model_base::list_set_properties((turi::model_base *)v505);
  turi::flexible_type_converter<std::vector<std::string>>::set(v377, (uint64_t)v513);
  std::string::basic_string[abi:ne180100]<0>(__p, "set_properties");
  v512 = __p;
  v378 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v508, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v512);
  v379 = v378;
  v380 = (char *)v378 + 56;
  if (v513 != (char *)v378 + 56)
  {
    switch(*((_BYTE *)v378 + 68))
    {
      case 2:
        v381 = *(unint64_t **)v380;
        do
        {
          v382 = __ldaxr(v381);
          v383 = v382 - 1;
        }
        while (__stlxr(v383, v381));
        if (!v383)
        {
          v384 = *(unint64_t **)v380;
          if (!*(_QWORD *)v380)
            goto LABEL_584;
          if (*((char *)v384 + 31) < 0)
            operator delete((void *)v384[1]);
          v385 = v384;
          v386 = 0x1012C404EF22A49;
          goto LABEL_583;
        }
        break;
      case 3:
        v398 = *(unint64_t **)v380;
        do
        {
          v399 = __ldaxr(v398);
          v400 = v399 - 1;
        }
        while (__stlxr(v400, v398));
        if (!v400)
        {
          v401 = *(unint64_t **)v380;
          if (!*(_QWORD *)v380)
            goto LABEL_584;
          v402 = (void *)v401[1];
          if (v402)
          {
            v401[2] = (unint64_t)v402;
            operator delete(v402);
          }
          v385 = v401;
          v386 = 0x1080C409938AC02;
          goto LABEL_583;
        }
        break;
      case 4:
        v387 = *(unint64_t **)v380;
        do
        {
          v388 = __ldaxr(v387);
          v389 = v388 - 1;
        }
        while (__stlxr(v389, v387));
        if (!v389)
        {
          v390 = *(unint64_t **)v380;
          if (!*(_QWORD *)v380)
            goto LABEL_584;
          v512 = (void **)(v390 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v512);
          goto LABEL_576;
        }
        break;
      case 5:
        v403 = *(unint64_t **)v380;
        do
        {
          v404 = __ldaxr(v403);
          v405 = v404 - 1;
        }
        while (__stlxr(v405, v403));
        if (!v405)
        {
          v390 = *(unint64_t **)v380;
          if (!*(_QWORD *)v380)
            goto LABEL_584;
          v512 = (void **)(v390 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v512);
LABEL_576:
          v385 = v390;
          v386 = 0x1020C405E66F15BLL;
          goto LABEL_583;
        }
        break;
      case 8:
        v406 = *(unint64_t **)v380;
        do
        {
          v407 = __ldaxr(v406);
          v408 = v407 - 1;
        }
        while (__stlxr(v408, v406));
        if (!v408)
        {
          v409 = *(unint64_t **)v380;
          if (!*(_QWORD *)v380)
            goto LABEL_584;
          boost::detail::shared_count::~shared_count((unsigned int **)v409 + 2);
          v385 = v409;
          v397 = -235920773;
          goto LABEL_582;
        }
        break;
      case 9:
        v391 = *(unint64_t **)v380;
        do
        {
          v392 = __ldaxr(v391);
          v393 = v392 - 1;
        }
        while (__stlxr(v393, v391));
        if (!v393)
        {
          v394 = *(unint64_t **)v380;
          if (*(_QWORD *)v380)
          {
            v395 = (void *)v394[6];
            if (v395)
            {
              v394[7] = (unint64_t)v395;
              operator delete(v395);
            }
            v396 = (void *)v394[3];
            if (v396)
            {
              v394[4] = (unint64_t)v396;
              operator delete(v396);
            }
            std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v394 + 1));
            v385 = v394;
            v397 = 2071181815;
LABEL_582:
            v386 = v397 | 0x1030C4000000000;
LABEL_583:
            MEMORY[0x219A19A08](v385, v386);
          }
LABEL_584:
          *(_QWORD *)v380 = 0;
        }
        break;
      default:
        break;
    }
    *(_QWORD *)v380 = *(_QWORD *)v513;
    *(_QWORD *)(v380 + 5) = *(_QWORD *)&v513[5];
    *((_BYTE *)v379 + 68) = v513[12];
    v513[12] = 0;
  }
  if (v504 < 0)
    operator delete(__p[0]);
  switch(v513[12])
  {
    case 2:
      v410 = *(unint64_t **)v513;
      do
      {
        v411 = __ldaxr(v410);
        v412 = v411 - 1;
      }
      while (__stlxr(v412, v410));
      if (!v412)
      {
        v413 = *(_QWORD *)v513;
        if (*(_QWORD *)v513)
        {
          if (*(char *)(*(_QWORD *)v513 + 31) < 0)
            operator delete(*(void **)(*(_QWORD *)v513 + 8));
          v414 = v413;
          v415 = 0x1012C404EF22A49;
          goto LABEL_629;
        }
      }
      break;
    case 3:
      v427 = *(unint64_t **)v513;
      do
      {
        v428 = __ldaxr(v427);
        v429 = v428 - 1;
      }
      while (__stlxr(v429, v427));
      if (!v429)
      {
        v430 = *(_QWORD *)v513;
        if (*(_QWORD *)v513)
        {
          v431 = *(void **)(*(_QWORD *)v513 + 8);
          if (v431)
          {
            *(_QWORD *)(*(_QWORD *)v513 + 16) = v431;
            operator delete(v431);
          }
          v414 = v430;
          v415 = 0x1080C409938AC02;
          goto LABEL_629;
        }
      }
      break;
    case 4:
      v416 = *(unint64_t **)v513;
      do
      {
        v417 = __ldaxr(v416);
        v418 = v417 - 1;
      }
      while (__stlxr(v418, v416));
      if (!v418)
      {
        v419 = *(_QWORD *)v513;
        if (*(_QWORD *)v513)
        {
          __p[0] = (void *)(*(_QWORD *)v513 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
          goto LABEL_622;
        }
      }
      break;
    case 5:
      v432 = *(unint64_t **)v513;
      do
      {
        v433 = __ldaxr(v432);
        v434 = v433 - 1;
      }
      while (__stlxr(v434, v432));
      if (!v434)
      {
        v419 = *(_QWORD *)v513;
        if (*(_QWORD *)v513)
        {
          __p[0] = (void *)(*(_QWORD *)v513 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
LABEL_622:
          v414 = v419;
          v415 = 0x1020C405E66F15BLL;
          goto LABEL_629;
        }
      }
      break;
    case 8:
      v435 = *(unint64_t **)v513;
      do
      {
        v436 = __ldaxr(v435);
        v437 = v436 - 1;
      }
      while (__stlxr(v437, v435));
      if (!v437)
      {
        v438 = *(_QWORD *)v513;
        if (*(_QWORD *)v513)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)v513 + 16));
          v414 = v438;
          v426 = -235920773;
          goto LABEL_628;
        }
      }
      break;
    case 9:
      v420 = *(unint64_t **)v513;
      do
      {
        v421 = __ldaxr(v420);
        v422 = v421 - 1;
      }
      while (__stlxr(v422, v420));
      if (!v422)
      {
        v423 = *(_QWORD *)v513;
        if (*(_QWORD *)v513)
        {
          v424 = *(void **)(*(_QWORD *)v513 + 48);
          if (v424)
          {
            *(_QWORD *)(*(_QWORD *)v513 + 56) = v424;
            operator delete(v424);
          }
          v425 = *(void **)(v423 + 24);
          if (v425)
          {
            *(_QWORD *)(v423 + 32) = v425;
            operator delete(v425);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v423 + 8);
          v414 = v423;
          v426 = 2071181815;
LABEL_628:
          v415 = v426 | 0x1030C4000000000;
LABEL_629:
          MEMORY[0x219A19A08](v414, v415);
        }
      }
      break;
    default:
      break;
  }
  if ((v439 & 1) == 0
  {
    std::string::basic_string[abi:ne180100]<0>(&turi::supervised_2::linear_regression::uid(void)::_uid, "__LINE__,/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning_2/linear_regression.hpp");
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &turi::supervised_2::linear_regression::uid(void)::_uid, &dword_217E69000);
  }
  turi::flexible_type_converter<std::string>::set(&turi::supervised_2::linear_regression::uid(void)::_uid, (uint64_t)v513);
  std::string::basic_string[abi:ne180100]<0>(__p, "uid");
  v512 = __p;
  v440 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v508, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v512);
  v441 = v440;
  v442 = (char *)v440 + 56;
  if (v513 != (char *)v440 + 56)
  {
    switch(*((_BYTE *)v440 + 68))
    {
      case 2:
        v443 = *(unint64_t **)v442;
        do
        {
          v444 = __ldaxr(v443);
          v445 = v444 - 1;
        }
        while (__stlxr(v445, v443));
        if (!v445)
        {
          v446 = *(unint64_t **)v442;
          if (!*(_QWORD *)v442)
            goto LABEL_674;
          if (*((char *)v446 + 31) < 0)
            operator delete((void *)v446[1]);
          v447 = v446;
          v448 = 0x1012C404EF22A49;
          goto LABEL_673;
        }
        break;
      case 3:
        v460 = *(unint64_t **)v442;
        do
        {
          v461 = __ldaxr(v460);
          v462 = v461 - 1;
        }
        while (__stlxr(v462, v460));
        if (!v462)
        {
          v463 = *(unint64_t **)v442;
          if (!*(_QWORD *)v442)
            goto LABEL_674;
          v464 = (void *)v463[1];
          if (v464)
          {
            v463[2] = (unint64_t)v464;
            operator delete(v464);
          }
          v447 = v463;
          v448 = 0x1080C409938AC02;
          goto LABEL_673;
        }
        break;
      case 4:
        v449 = *(unint64_t **)v442;
        do
        {
          v450 = __ldaxr(v449);
          v451 = v450 - 1;
        }
        while (__stlxr(v451, v449));
        if (!v451)
        {
          v452 = *(unint64_t **)v442;
          if (!*(_QWORD *)v442)
            goto LABEL_674;
          v512 = (void **)(v452 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v512);
          goto LABEL_666;
        }
        break;
      case 5:
        v465 = *(unint64_t **)v442;
        do
        {
          v466 = __ldaxr(v465);
          v467 = v466 - 1;
        }
        while (__stlxr(v467, v465));
        if (!v467)
        {
          v452 = *(unint64_t **)v442;
          if (!*(_QWORD *)v442)
            goto LABEL_674;
          v512 = (void **)(v452 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v512);
LABEL_666:
          v447 = v452;
          v448 = 0x1020C405E66F15BLL;
          goto LABEL_673;
        }
        break;
      case 8:
        v468 = *(unint64_t **)v442;
        do
        {
          v469 = __ldaxr(v468);
          v470 = v469 - 1;
        }
        while (__stlxr(v470, v468));
        if (!v470)
        {
          v471 = *(unint64_t **)v442;
          if (!*(_QWORD *)v442)
            goto LABEL_674;
          boost::detail::shared_count::~shared_count((unsigned int **)v471 + 2);
          v447 = v471;
          v459 = -235920773;
          goto LABEL_672;
        }
        break;
      case 9:
        v453 = *(unint64_t **)v442;
        do
        {
          v454 = __ldaxr(v453);
          v455 = v454 - 1;
        }
        while (__stlxr(v455, v453));
        if (!v455)
        {
          v456 = *(unint64_t **)v442;
          if (*(_QWORD *)v442)
          {
            v457 = (void *)v456[6];
            if (v457)
            {
              v456[7] = (unint64_t)v457;
              operator delete(v457);
            }
            v458 = (void *)v456[3];
            if (v458)
            {
              v456[4] = (unint64_t)v458;
              operator delete(v458);
            }
            std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v456 + 1));
            v447 = v456;
            v459 = 2071181815;
LABEL_672:
            v448 = v459 | 0x1030C4000000000;
LABEL_673:
            MEMORY[0x219A19A08](v447, v448);
          }
LABEL_674:
          *(_QWORD *)v442 = 0;
        }
        break;
      default:
        break;
    }
    *(_QWORD *)v442 = *(_QWORD *)v513;
    *(_QWORD *)(v442 + 5) = *(_QWORD *)&v513[5];
    *((_BYTE *)v441 + 68) = v513[12];
    v513[12] = 0;
  }
  if (v504 < 0)
    operator delete(__p[0]);
  switch(v513[12])
  {
    case 2:
      v472 = *(unint64_t **)v513;
      do
      {
        v473 = __ldaxr(v472);
        v474 = v473 - 1;
      }
      while (__stlxr(v474, v472));
      if (!v474)
      {
        v475 = *(_QWORD *)v513;
        if (*(_QWORD *)v513)
        {
          if (*(char *)(*(_QWORD *)v513 + 31) < 0)
            operator delete(*(void **)(*(_QWORD *)v513 + 8));
          v476 = v475;
          v477 = 0x1012C404EF22A49;
          goto LABEL_719;
        }
      }
      break;
    case 3:
      v489 = *(unint64_t **)v513;
      do
      {
        v490 = __ldaxr(v489);
        v491 = v490 - 1;
      }
      while (__stlxr(v491, v489));
      if (!v491)
      {
        v492 = *(_QWORD *)v513;
        if (*(_QWORD *)v513)
        {
          v493 = *(void **)(*(_QWORD *)v513 + 8);
          if (v493)
          {
            *(_QWORD *)(*(_QWORD *)v513 + 16) = v493;
            operator delete(v493);
          }
          v476 = v492;
          v477 = 0x1080C409938AC02;
          goto LABEL_719;
        }
      }
      break;
    case 4:
      v478 = *(unint64_t **)v513;
      do
      {
        v479 = __ldaxr(v478);
        v480 = v479 - 1;
      }
      while (__stlxr(v480, v478));
      if (!v480)
      {
        v481 = *(_QWORD *)v513;
        if (*(_QWORD *)v513)
        {
          __p[0] = (void *)(*(_QWORD *)v513 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
          goto LABEL_712;
        }
      }
      break;
    case 5:
      v494 = *(unint64_t **)v513;
      do
      {
        v495 = __ldaxr(v494);
        v496 = v495 - 1;
      }
      while (__stlxr(v496, v494));
      if (!v496)
      {
        v481 = *(_QWORD *)v513;
        if (*(_QWORD *)v513)
        {
          __p[0] = (void *)(*(_QWORD *)v513 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
LABEL_712:
          v476 = v481;
          v477 = 0x1020C405E66F15BLL;
          goto LABEL_719;
        }
      }
      break;
    case 8:
      v497 = *(unint64_t **)v513;
      do
      {
        v498 = __ldaxr(v497);
        v499 = v498 - 1;
      }
      while (__stlxr(v499, v497));
      if (!v499)
      {
        v500 = *(_QWORD *)v513;
        if (*(_QWORD *)v513)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)v513 + 16));
          v476 = v500;
          v488 = -235920773;
          goto LABEL_718;
        }
      }
      break;
    case 9:
      v482 = *(unint64_t **)v513;
      do
      {
        v483 = __ldaxr(v482);
        v484 = v483 - 1;
      }
      while (__stlxr(v484, v482));
      if (!v484)
      {
        v485 = *(_QWORD *)v513;
        if (*(_QWORD *)v513)
        {
          v486 = *(void **)(*(_QWORD *)v513 + 48);
          if (v486)
          {
            *(_QWORD *)(*(_QWORD *)v513 + 56) = v486;
            operator delete(v486);
          }
          v487 = *(void **)(v485 + 24);
          if (v487)
          {
            *(_QWORD *)(v485 + 32) = v487;
            operator delete(v487);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v485 + 8);
          v476 = v485;
          v488 = 2071181815;
LABEL_718:
          v477 = v488 | 0x1030C4000000000;
LABEL_719:
          MEMORY[0x219A19A08](v476, v477);
        }
      }
      break;
    default:
      break;
  }
  v501 = a1[1];
  if (v501 >= a1[2])
  {
    v502 = std::vector<turi::toolkit_class_specification>::__push_back_slow_path<turi::toolkit_class_specification const&>(a1, &v506);
  }
  else
  {
    std::allocator<turi::toolkit_class_specification>::construct[abi:ne180100]<turi::toolkit_class_specification,turi::toolkit_class_specification const&>((_DWORD)a1 + 16, (std::string *)a1[1], &v506);
    v502 = v501 + 56;
    a1[1] = v501 + 56;
  }
  a1[1] = v502;
  turi::supervised_2::linear_regression::~linear_regression((turi::supervised_2::linear_regression *)v505);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v508, v509);
  if (SHIBYTE(v507) < 0)
    operator delete((void *)v506);
}

void sub_2183014B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17)
{
  uint64_t v17;

  turi::supervised_2::linear_regression::~linear_regression((turi::supervised_2::linear_regression *)&a17);
  turi::toolkit_class_specification::~toolkit_class_specification((turi::toolkit_class_specification *)(v17 - 160));
  std::vector<turi::toolkit_class_specification>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  _Unwind_Resume(a1);
}

void turi::supervised_2::get_toolkit_function_registration(uint64_t *a1@<X8>)
{
  unint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  void *v9[2];
  char v10;
  void *__p[2];
  char v12;
  char *v13[3];
  _QWORD *v14[3];
  _BYTE v15[24];
  _BYTE *v16;
  _BYTE v17[24];
  _BYTE *v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  std::string::basic_string[abi:ne180100]<0>(v9, "test_supervised_learning");
  turi::toolkit_function_wrapper_impl::make_spec_indirect<void (*)(void)>((uint64_t)turi::supervised_2::test_supervised_learning, (uint64_t)v9, (uint64_t)__p);
  v3 = a1[1];
  if (v3 >= a1[2])
  {
    v4 = std::vector<turi::toolkit_function_specification>::__push_back_slow_path<turi::toolkit_function_specification>(a1, (__int128 *)__p);
  }
  else
  {
    std::allocator<turi::toolkit_function_specification>::construct[abi:ne180100]<turi::toolkit_function_specification,turi::toolkit_function_specification>((uint64_t)(a1 + 2), a1[1], (__int128 *)__p);
    v4 = v3 + 136;
  }
  a1[1] = v4;
  v5 = v18;
  if (v18 == v17)
  {
    v6 = 4;
    v5 = v17;
  }
  else
  {
    if (!v18)
      goto LABEL_9;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_9:
  v7 = v16;
  if (v16 == v15)
  {
    v8 = 4;
    v7 = v15;
  }
  else
  {
    if (!v16)
      goto LABEL_14;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_14:
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)v14, v14[1]);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)v13, v13[1]);
  if (v12 < 0)
    operator delete(__p[0]);
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_218301F74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16)
{
  turi::toolkit_function_specification::~toolkit_function_specification((turi::toolkit_function_specification *)&a16);
  if (a15 < 0)
    operator delete(__p);
  std::vector<turi::toolkit_function_specification>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  _Unwind_Resume(a1);
}

void turi::toolkit_function_wrapper_impl::make_spec_indirect<void (*)(void)>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __int128 *v5[3];
  std::string v6;
  __int128 **v7;

  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v6, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v6 = *(std::string *)a2;
  memset(v5, 0, sizeof(v5));
  turi::toolkit_function_wrapper_impl::make_spec<0ul,void (*)(void)>(a1, &v6, v5, a3);
  v7 = v5;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v7);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
}

void sub_21830204C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v18;
  uint64_t v19;

  *(_QWORD *)(v19 - 40) = v18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v19 - 40));
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

turi::supervised_2::logistic_regression *turi::supervised_2::get_toolkit_class_registration(void)::$_0::__invoke()
{
  turi::supervised_2::logistic_regression *v0;

  v0 = (turi::supervised_2::logistic_regression *)operator new();
  turi::supervised_2::logistic_regression::logistic_regression(v0);
  return v0;
}

void sub_2183020B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10B1C40C777C491);
  _Unwind_Resume(a1);
}

turi::supervised_2::linear_regression *turi::supervised_2::get_toolkit_class_registration(void)::$_1::__invoke()
{
  turi::supervised_2::linear_regression *v0;

  v0 = (turi::supervised_2::linear_regression *)operator new();
  turi::supervised_2::linear_regression::linear_regression(v0);
  return v0;
}

void sub_218302110(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10B1C40C71827E1);
  _Unwind_Resume(a1);
}

void sub_2183022D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

_QWORD *turi::toolkit_function_wrapper_impl::make_spec<0ul,void (*)(void)>@<X0>(uint64_t a1@<X0>, const std::string *a2@<X1>, __int128 **a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t **v8;
  uint64_t v9;
  std::string::size_type size;
  const std::string *v11;
  uint64_t v12;
  int v13;
  _OWORD *v14;
  _OWORD *v15;
  char *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  void *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t *v38;
  unsigned int v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t *v43;
  void *v44;
  void *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  void *v60;
  void *v61;
  unsigned int v62;
  unint64_t *v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  void *v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  _OWORD *v75;
  _OWORD *v76;
  unint64_t *v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  unint64_t *v83;
  unint64_t v84;
  unint64_t v85;
  _QWORD *v86;
  void *v87;
  unint64_t *v88;
  unint64_t v89;
  unint64_t v90;
  _QWORD *v91;
  unint64_t *v92;
  unint64_t v93;
  unint64_t v94;
  _QWORD *v95;
  void *v96;
  void *v97;
  unsigned int v98;
  unint64_t *v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t *v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  void ***v106;
  uint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  _QWORD *result;
  uint64_t v111;
  std::string v112;
  std::string v113;
  std::string *v114;
  _BYTE v115[13];
  void **v116[3];
  void ***v117;
  std::string v118;
  _QWORD v119[3];
  _QWORD *v120;
  _QWORD v121[3];
  _QWORD *v122;
  uint64_t v123;

  v123 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 40) = 0;
  *(_QWORD *)(a4 + 32) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)(a4 + 24) = a4 + 32;
  *(_QWORD *)(a4 + 56) = 0;
  *(_QWORD *)(a4 + 48) = a4 + 56;
  v8 = (uint64_t **)(a4 + 48);
  *(_QWORD *)(a4 + 64) = 0;
  *(_QWORD *)(a4 + 96) = 0;
  *(_QWORD *)(a4 + 128) = 0;
  memset(&v113, 0, sizeof(v113));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v113, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a3[1] - (char *)*a3) >> 3));
  turi::toolkit_function_wrapper_impl::generate_function_wrapper<0ul,void (*)(void)>(a1, (__int128 **)&v113, (uint64_t)v121);
  v116[0] = (void **)&v113;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v116);
  turi::toolkit_function_wrapper_impl::generate_native_function_wrapper<0ul,void (*)(void)>(a1, v119);
  v9 = (uint64_t)v122;
  if (v122)
  {
    if (v122 == v121)
    {
      v117 = v116;
      (*(void (**)(_QWORD *, void ***))(v121[0] + 24))(v121, v116);
      goto LABEL_6;
    }
    v9 = (*(uint64_t (**)(_QWORD *))(*v122 + 16))(v122);
  }
  v117 = (void ***)v9;
LABEL_6:
  memset(&v118, 0, sizeof(v118));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v118, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a3[1] - (char *)*a3) >> 3));
  if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
  {
    v11 = (const std::string *)a2->__r_.__value_.__r.__words[0];
    size = a2->__r_.__value_.__l.__size_;
  }
  else
  {
    size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
    v11 = a2;
  }
  v12 = (uint64_t)&v11[-1].__r_.__value_.__r.__words[2] + 7;
  do
  {
    if (!size)
      goto LABEL_16;
    v13 = *(unsigned __int8 *)(v12 + size--);
  }
  while (v13 != 58);
  if (size == -1)
  {
LABEL_16:
    std::string::operator=((std::string *)a4, a2);
    goto LABEL_17;
  }
  std::string::basic_string(&v112, a2, size + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)v115);
  if (*(char *)(a4 + 23) < 0)
    operator delete(*(void **)a4);
  *(std::string *)a4 = v112;
LABEL_17:
  std::function<turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::operator=<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<0ul,void (*)(void)>(void (*)(void),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1} &,void>((_QWORD *)(a4 + 72), (uint64_t)v116);
  std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::operator=((_QWORD *)(a4 + 104), (uint64_t)v119);
  turi::flexible_type_converter<std::vector<std::string>>::set(a3, (uint64_t)v115);
  std::string::basic_string[abi:ne180100]<0>(&v112, "arguments");
  v114 = &v112;
  v14 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v8, (const void **)&v112.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (_OWORD **)&v114);
  v15 = v14;
  v16 = (char *)v14 + 56;
  if (v115 != (char *)v14 + 56)
  {
    switch(*((_BYTE *)v14 + 68))
    {
      case 2:
        v17 = *(unint64_t **)v16;
        do
        {
          v18 = __ldaxr(v17);
          v19 = v18 - 1;
        }
        while (__stlxr(v19, v17));
        if (!v19)
        {
          v20 = *(unint64_t **)v16;
          if (!*(_QWORD *)v16)
            goto LABEL_60;
          if (*((char *)v20 + 31) < 0)
            operator delete((void *)v20[1]);
          v21 = v20;
          v22 = 0x1012C404EF22A49;
          goto LABEL_59;
        }
        break;
      case 3:
        v23 = *(unint64_t **)v16;
        do
        {
          v24 = __ldaxr(v23);
          v25 = v24 - 1;
        }
        while (__stlxr(v25, v23));
        if (!v25)
        {
          v26 = *(unint64_t **)v16;
          if (!*(_QWORD *)v16)
            goto LABEL_60;
          v27 = (void *)v26[1];
          if (v27)
          {
            v26[2] = (unint64_t)v27;
            operator delete(v27);
          }
          v21 = v26;
          v22 = 0x1080C409938AC02;
          goto LABEL_59;
        }
        break;
      case 4:
        v28 = *(unint64_t **)v16;
        do
        {
          v29 = __ldaxr(v28);
          v30 = v29 - 1;
        }
        while (__stlxr(v30, v28));
        if (!v30)
        {
          v31 = *(unint64_t **)v16;
          if (!*(_QWORD *)v16)
            goto LABEL_60;
          v114 = (std::string *)(v31 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v114);
          goto LABEL_43;
        }
        break;
      case 5:
        v32 = *(unint64_t **)v16;
        do
        {
          v33 = __ldaxr(v32);
          v34 = v33 - 1;
        }
        while (__stlxr(v34, v32));
        if (!v34)
        {
          v31 = *(unint64_t **)v16;
          if (!*(_QWORD *)v16)
            goto LABEL_60;
          v114 = (std::string *)(v31 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v114);
LABEL_43:
          v21 = v31;
          v22 = 0x1020C405E66F15BLL;
          goto LABEL_59;
        }
        break;
      case 8:
        v35 = *(unint64_t **)v16;
        do
        {
          v36 = __ldaxr(v35);
          v37 = v36 - 1;
        }
        while (__stlxr(v37, v35));
        if (!v37)
        {
          v38 = *(unint64_t **)v16;
          if (!*(_QWORD *)v16)
            goto LABEL_60;
          boost::detail::shared_count::~shared_count((unsigned int **)v38 + 2);
          v21 = v38;
          v39 = -235920773;
          goto LABEL_58;
        }
        break;
      case 9:
        v40 = *(unint64_t **)v16;
        do
        {
          v41 = __ldaxr(v40);
          v42 = v41 - 1;
        }
        while (__stlxr(v42, v40));
        if (!v42)
        {
          v43 = *(unint64_t **)v16;
          if (*(_QWORD *)v16)
          {
            v44 = (void *)v43[6];
            if (v44)
            {
              v43[7] = (unint64_t)v44;
              operator delete(v44);
            }
            v45 = (void *)v43[3];
            if (v45)
            {
              v43[4] = (unint64_t)v45;
              operator delete(v45);
            }
            std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v43 + 1));
            v21 = v43;
            v39 = 2071181815;
LABEL_58:
            v22 = v39 | 0x1030C4000000000;
LABEL_59:
            MEMORY[0x219A19A08](v21, v22);
          }
LABEL_60:
          *(_QWORD *)v16 = 0;
        }
        break;
      default:
        break;
    }
    *(_QWORD *)v16 = *(_QWORD *)v115;
    *(_QWORD *)(v16 + 5) = *(_QWORD *)&v115[5];
    *((_BYTE *)v15 + 68) = v115[12];
    v115[12] = 0;
  }
  if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v112.__r_.__value_.__l.__data_);
  switch(v115[12])
  {
    case 2:
      v46 = *(unint64_t **)v115;
      do
      {
        v47 = __ldaxr(v46);
        v48 = v47 - 1;
      }
      while (__stlxr(v48, v46));
      if (!v48)
      {
        v49 = *(_QWORD *)v115;
        if (*(_QWORD *)v115)
        {
          if (*(char *)(*(_QWORD *)v115 + 31) < 0)
            operator delete(*(void **)(*(_QWORD *)v115 + 8));
          v50 = v49;
          v51 = 0x1012C404EF22A49;
          goto LABEL_105;
        }
      }
      break;
    case 3:
      v63 = *(unint64_t **)v115;
      do
      {
        v64 = __ldaxr(v63);
        v65 = v64 - 1;
      }
      while (__stlxr(v65, v63));
      if (!v65)
      {
        v66 = *(_QWORD *)v115;
        if (*(_QWORD *)v115)
        {
          v67 = *(void **)(*(_QWORD *)v115 + 8);
          if (v67)
          {
            *(_QWORD *)(*(_QWORD *)v115 + 16) = v67;
            operator delete(v67);
          }
          v50 = v66;
          v51 = 0x1080C409938AC02;
          goto LABEL_105;
        }
      }
      break;
    case 4:
      v52 = *(unint64_t **)v115;
      do
      {
        v53 = __ldaxr(v52);
        v54 = v53 - 1;
      }
      while (__stlxr(v54, v52));
      if (!v54)
      {
        v55 = *(_QWORD *)v115;
        if (*(_QWORD *)v115)
        {
          v112.__r_.__value_.__r.__words[0] = *(_QWORD *)v115 + 8;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v112);
          goto LABEL_98;
        }
      }
      break;
    case 5:
      v68 = *(unint64_t **)v115;
      do
      {
        v69 = __ldaxr(v68);
        v70 = v69 - 1;
      }
      while (__stlxr(v70, v68));
      if (!v70)
      {
        v55 = *(_QWORD *)v115;
        if (*(_QWORD *)v115)
        {
          v112.__r_.__value_.__r.__words[0] = *(_QWORD *)v115 + 8;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v112);
LABEL_98:
          v50 = v55;
          v51 = 0x1020C405E66F15BLL;
          goto LABEL_105;
        }
      }
      break;
    case 8:
      v71 = *(unint64_t **)v115;
      do
      {
        v72 = __ldaxr(v71);
        v73 = v72 - 1;
      }
      while (__stlxr(v73, v71));
      if (!v73)
      {
        v74 = *(_QWORD *)v115;
        if (*(_QWORD *)v115)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)v115 + 16));
          v50 = v74;
          v62 = -235920773;
          goto LABEL_104;
        }
      }
      break;
    case 9:
      v56 = *(unint64_t **)v115;
      do
      {
        v57 = __ldaxr(v56);
        v58 = v57 - 1;
      }
      while (__stlxr(v58, v56));
      if (!v58)
      {
        v59 = *(_QWORD *)v115;
        if (*(_QWORD *)v115)
        {
          v60 = *(void **)(*(_QWORD *)v115 + 48);
          if (v60)
          {
            *(_QWORD *)(*(_QWORD *)v115 + 56) = v60;
            operator delete(v60);
          }
          v61 = *(void **)(v59 + 24);
          if (v61)
          {
            *(_QWORD *)(v59 + 32) = v61;
            operator delete(v61);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v59 + 8);
          v50 = v59;
          v62 = 2071181815;
LABEL_104:
          v51 = v62 | 0x1030C4000000000;
LABEL_105:
          MEMORY[0x219A19A08](v50, v51);
        }
      }
      break;
    default:
      break;
  }
  std::string::basic_string[abi:ne180100]<0>(&v112, "_raw_fn_pointer_");
  *(_QWORD *)v115 = &v112;
  v75 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v8, (const void **)&v112.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (_OWORD **)v115);
  v76 = v75;
  switch(*((_BYTE *)v75 + 68))
  {
    case 2:
      v77 = (unint64_t *)*((_QWORD *)v75 + 7);
      do
      {
        v78 = __ldaxr(v77);
        v79 = v78 - 1;
      }
      while (__stlxr(v79, v77));
      if (!v79)
      {
        v80 = *((_QWORD *)v75 + 7);
        if (!v80)
          goto LABEL_148;
        if (*(char *)(v80 + 31) < 0)
          operator delete(*(void **)(v80 + 8));
        v81 = (_QWORD *)v80;
        v82 = 0x1012C404EF22A49;
        goto LABEL_147;
      }
      break;
    case 3:
      v83 = (unint64_t *)*((_QWORD *)v75 + 7);
      do
      {
        v84 = __ldaxr(v83);
        v85 = v84 - 1;
      }
      while (__stlxr(v85, v83));
      if (!v85)
      {
        v86 = (_QWORD *)*((_QWORD *)v75 + 7);
        if (!v86)
          goto LABEL_148;
        v87 = (void *)v86[1];
        if (v87)
        {
          v86[2] = v87;
          operator delete(v87);
        }
        v81 = v86;
        v82 = 0x1080C409938AC02;
        goto LABEL_147;
      }
      break;
    case 4:
      v88 = (unint64_t *)*((_QWORD *)v75 + 7);
      do
      {
        v89 = __ldaxr(v88);
        v90 = v89 - 1;
      }
      while (__stlxr(v90, v88));
      if (!v90)
      {
        v91 = (_QWORD *)*((_QWORD *)v75 + 7);
        if (!v91)
          goto LABEL_148;
        *(_QWORD *)v115 = v91 + 1;
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v115);
        goto LABEL_140;
      }
      break;
    case 5:
      v99 = (unint64_t *)*((_QWORD *)v75 + 7);
      do
      {
        v100 = __ldaxr(v99);
        v101 = v100 - 1;
      }
      while (__stlxr(v101, v99));
      if (!v101)
      {
        v91 = (_QWORD *)*((_QWORD *)v75 + 7);
        if (!v91)
          goto LABEL_148;
        *(_QWORD *)v115 = v91 + 1;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v115);
LABEL_140:
        v81 = v91;
        v82 = 0x1020C405E66F15BLL;
        goto LABEL_147;
      }
      break;
    case 8:
      v102 = (unint64_t *)*((_QWORD *)v75 + 7);
      do
      {
        v103 = __ldaxr(v102);
        v104 = v103 - 1;
      }
      while (__stlxr(v104, v102));
      if (!v104)
      {
        v105 = *((_QWORD *)v75 + 7);
        if (!v105)
          goto LABEL_148;
        boost::detail::shared_count::~shared_count((unsigned int **)(v105 + 16));
        v81 = (_QWORD *)v105;
        v98 = -235920773;
        goto LABEL_146;
      }
      break;
    case 9:
      v92 = (unint64_t *)*((_QWORD *)v75 + 7);
      do
      {
        v93 = __ldaxr(v92);
        v94 = v93 - 1;
      }
      while (__stlxr(v94, v92));
      if (!v94)
      {
        v95 = (_QWORD *)*((_QWORD *)v75 + 7);
        if (v95)
        {
          v96 = (void *)v95[6];
          if (v96)
          {
            v95[7] = v96;
            operator delete(v96);
          }
          v97 = (void *)v95[3];
          if (v97)
          {
            v95[4] = v97;
            operator delete(v97);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v95 + 1));
          v81 = v95;
          v98 = 2071181815;
LABEL_146:
          v82 = v98 | 0x1030C4000000000;
LABEL_147:
          MEMORY[0x219A19A08](v81, v82);
        }
LABEL_148:
        *((_QWORD *)v76 + 7) = 0;
      }
      break;
    default:
      break;
  }
  *((_DWORD *)v76 + 16) = 0;
  *((_BYTE *)v76 + 68) = 0;
  *((_QWORD *)v76 + 7) = a1;
  if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v112.__r_.__value_.__l.__data_);
  v112.__r_.__value_.__r.__words[0] = (std::string::size_type)&v118;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v112);
  v106 = v117;
  if (v117 == v116)
  {
    v107 = 4;
    v106 = v116;
  }
  else
  {
    if (!v117)
      goto LABEL_156;
    v107 = 5;
  }
  ((void (*)(void))(*v106)[v107])();
LABEL_156:
  v108 = v120;
  if (v120 == v119)
  {
    v109 = 4;
    v108 = v119;
  }
  else
  {
    if (!v120)
      goto LABEL_161;
    v109 = 5;
  }
  (*(void (**)(void))(*v108 + 8 * v109))();
LABEL_161:
  result = v122;
  if (v122 == v121)
  {
    v111 = 4;
    result = v121;
  }
  else
  {
    if (!v122)
      return result;
    v111 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v111))();
}

void sub_218302C54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  turi::toolkit_function_specification *v32;
  uint64_t v33;
  uint64_t v34;
  char *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;

  turi::unity_sframe::transform_native(turi::function_closure_info const&,turi::flex_type_enum,BOOL,unsigned long long)::$_0::~$_0((uint64_t)&a25);
  v36 = *(char **)(v33 + 80);
  if (v36 == &a32)
  {
    v37 = 4;
    v36 = &a32;
  }
  else
  {
    if (!v36)
      goto LABEL_6;
    v37 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v36 + 8 * v37))();
LABEL_6:
  v38 = *(_QWORD **)(v33 + 112);
  if (v38 == (_QWORD *)(v34 - 120))
  {
    v39 = 4;
    v38 = (_QWORD *)(v34 - 120);
  }
  else
  {
    if (!v38)
      goto LABEL_11;
    v39 = 5;
  }
  (*(void (**)(void))(*v38 + 8 * v39))();
LABEL_11:
  turi::toolkit_function_specification::~toolkit_function_specification(v32);
  _Unwind_Resume(a1);
}

void turi::toolkit_function_wrapper_impl::generate_function_wrapper<0ul,void (*)(void)>(uint64_t a1@<X0>, __int128 **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  std::string::size_type v5;
  __int128 v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD v12[3];
  uint64_t v13;
  std::string v14;
  std::string *v15;
  void *__p;
  uint64_t v17;
  uint64_t v18;
  char **v19;
  char *v20[2];
  _QWORD **v21;
  _QWORD *v22[2];
  _BYTE v23[24];
  _BYTE *v24;
  _BYTE v25[24];
  _BYTE *v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  __p = 0;
  v17 = 0;
  v20[0] = 0;
  v20[1] = 0;
  v18 = 0;
  v19 = v20;
  v21 = v22;
  v22[0] = 0;
  v22[1] = 0;
  v24 = 0;
  v26 = 0;
  v13 = a1;
  memset(&v14, 0, sizeof(v14));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v14, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  v4 = v13;
  v6 = *(_OWORD *)&v14.__r_.__value_.__l.__data_;
  v5 = v14.__r_.__value_.__r.__words[2];
  memset(&v14, 0, sizeof(v14));
  *(_QWORD *)(a3 + 24) = 0;
  v7 = operator new(0x28uLL);
  *v7 = &unk_24D938CA0;
  v7[1] = v4;
  *((_OWORD *)v7 + 1) = v6;
  v7[4] = v5;
  memset(v12, 0, sizeof(v12));
  *(_QWORD *)(a3 + 24) = v7;
  v15 = (std::string *)v12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
  v15 = &v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
  v8 = v26;
  if (v26 == v25)
  {
    v9 = 4;
    v8 = v25;
  }
  else
  {
    if (!v26)
      goto LABEL_6;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_6:
  v10 = v24;
  if (v24 == v23)
  {
    v11 = 4;
    v10 = v23;
  }
  else
  {
    if (!v24)
      goto LABEL_11;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_11:
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v21, v22[0]);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v19, v20[0]);
  if (SHIBYTE(v18) < 0)
    operator delete(__p);
}

void sub_2183030F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  void **v11;
  va_list va;
  va_list va1;

  va_start(va1, a10);
  va_start(va, a10);
  v11 = va_arg(va1, void **);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  turi::toolkit_function_specification::~toolkit_function_specification((turi::toolkit_function_specification *)va1);
  _Unwind_Resume(a1);
}

void turi::toolkit_function_wrapper_impl::generate_native_function_wrapper<0ul,void (*)(void)>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  char **v2;
  char *v3[2];
  _QWORD *v4;
  _QWORD v5[11];

  v5[10] = *MEMORY[0x24BDAC8D0];
  v3[0] = 0;
  v3[1] = 0;
  v2 = v3;
  v4 = v5;
  v5[0] = 0;
  v5[1] = 0;
  v5[5] = 0;
  v5[9] = 0;
  *a2 = &unk_24D938D30;
  a2[1] = a1;
  a2[3] = a2;
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v4, 0);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v2, v3[0]);
}

_QWORD *std::function<turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::operator=<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<0ul,void (*)(void)>(void (*)(void),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1} &,void>(_QWORD *a1, uint64_t a2)
{
  char *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  std::string *v10;
  _BYTE v11[24];
  _BYTE *v12;
  std::string v13;
  _QWORD v14[3];
  _QWORD *v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)v11, a2);
  memset(&v13, 0, sizeof(v13));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v13, *(__int128 **)(a2 + 32), *(__int128 **)(a2 + 40), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 3));
  v4 = (char *)operator new(0x40uLL);
  *(_QWORD *)v4 = &unk_24D938DC0;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(v4 + 8), (uint64_t)v11);
  *(std::string *)(v4 + 40) = v13;
  memset(&v13, 0, sizeof(v13));
  v15 = v4;
  std::__function::__value_func<turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::swap[abi:ne180100](v14, a1);
  v5 = v15;
  if (v15 == v14)
  {
    v6 = 4;
    v5 = v14;
  }
  else
  {
    if (!v15)
      goto LABEL_6;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_6:
  v10 = &v13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v10);
  v7 = v12;
  if (v12 == v11)
  {
    v8 = 4;
    v7 = v11;
    goto LABEL_10;
  }
  if (v12)
  {
    v8 = 5;
LABEL_10:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  return a1;
}

void sub_218303330(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  turi::unity_sframe::transform_native(turi::function_closure_info const&,turi::flex_type_enum,BOOL,unsigned long long)::$_0::~$_0((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::operator=(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)v6, a2);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::swap[abi:ne180100](v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<0ul,void (*)(void)>(void (*)(void),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<0ul,void (*)(void)>(void (*)(void),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__func(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = &unk_24D938CA0;
  v3 = (void **)(a1 + 16);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

{
  void **v3;

  *(_QWORD *)a1 = &unk_24D938CA0;
  v3 = (void **)(a1 + 16);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return MEMORY[0x219A19A08](a1, 0xA1C40C7E0E799);
}

char *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<0ul,void (*)(void)>(void (*)(void),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<0ul,void (*)(void)>(void (*)(void),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1)
{
  char *v2;
  __int128 *v3;
  uint64_t v4;

  v2 = (char *)operator new(0x28uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(__int128 **)(a1 + 16);
  *(_QWORD *)v2 = &unk_24D938CA0;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = 0;
  *((_QWORD *)v2 + 3) = 0;
  *((_QWORD *)v2 + 4) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(v2 + 16), v3, *(__int128 **)(a1 + 24), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 24) - (_QWORD)v3) >> 3));
  return v2;
}

void sub_218303524(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<0ul,void (*)(void)>(void (*)(void),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<0ul,void (*)(void)>(void (*)(void),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &unk_24D938CA0;
  *(_QWORD *)(a2 + 8) = v2;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  return std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a2 + 16), *(__int128 **)(a1 + 16), *(__int128 **)(a1 + 24), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3));
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<0ul,void (*)(void)>(void (*)(void),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<0ul,void (*)(void)>(void (*)(void),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 16);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<0ul,void (*)(void)>(void (*)(void),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<0ul,void (*)(void)>(void (*)(void),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy_deallocate(void **a1)
{
  void **v2;

  v2 = a1 + 2;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  operator delete(a1);
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<0ul,void (*)(void)>(void (*)(void),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<0ul,void (*)(void)>(void (*)(void),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::operator()(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<0ul,void (*)(void)>(void (*)(void),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(a1 + 8, a2, a3);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<0ul,void (*)(void)>(void (*)(void),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<0ul,void (*)(void)>(void (*)(void),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<0ul,void (*)(void)>(void (*)(void),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<0ul,void (*)(void)>(void (*)(void),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target_type()
{
}

void std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<0ul,void (*)(void)>(void (*)(void),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  char **v5;
  char *v6;

  v3 = a2 + 1;
  v4 = a2[1];
  v5 = (char **)*a2;
  v6 = (char *)v4;
  if (a2[2])
  {
    *(_QWORD *)(v4 + 16) = &v6;
    *a2 = v3;
    *v3 = 0;
    a2[2] = 0;
  }
  else
  {
    v5 = &v6;
  }
  turi::toolkit_function_wrapper_impl::generate_function_wrapper<0ul,void (*)(void)>(void (*)(void),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator()(a1, (uint64_t)&v5, a3);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v5, v6);
}

void sub_218303698(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void turi::toolkit_function_wrapper_impl::generate_function_wrapper<0ul,void (*)(void)>(void (*)(void),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator()(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __int128 *begin;
  __int128 *end;
  std::string v7;
  uint64_t v8;
  _BYTE *v9;
  std::vector<std::string> v10;
  uint64_t v11;
  _BYTE v12[9];
  void *__p;
  uint64_t v14;
  uint64_t v15;
  char **v16;
  char *v17[2];
  void **v18[3];

  v18[2] = *(void ***)MEMORY[0x24BDAC8D0];
  v12[1] = 1;
  __p = 0;
  v14 = 0;
  v17[0] = 0;
  v17[1] = 0;
  v15 = 0;
  v16 = v17;
  memset(&v10, 0, sizeof(v10));
  v11 = a2;
  if (&v9 == (_BYTE **)a1)
  {
    end = 0;
    begin = 0;
  }
  else
  {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(&v10, *(std::string **)(a1 + 8), *(__int128 **)(a1 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3));
    begin = (__int128 *)v10.__begin_;
    end = (__int128 *)v10.__end_;
  }
  v9 = v12;
  memset(&v7, 0, sizeof(v7));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v7, begin, end, 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3));
  v8 = v11;
  v18[0] = (void **)&v7;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v18);
  (*(void (**)(void))a1)();
  memset(v18, 0, 13);
  turi::flexible_type_internals::ft_converter<1>::set<turi::flexible_type const&>((uint64_t)v18, &turi::FLEX_UNDEFINED);
  *(void ***)(a3 + 13) = *(void ***)((char *)v18 + 5);
  *(void ***)(a3 + 8) = v18[0];
  *(_BYTE *)(a3 + 20) = BYTE4(v18[1]);
  *(_DWORD *)a3 = 0;
  v18[0] = (void **)&v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v18);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v16, v17[0]);
  if (SHIBYTE(v15) < 0)
    operator delete(__p);
}

void sub_21830382C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  uint64_t v14;
  va_list va;

  va_start(va, a13);
  *(_QWORD *)(v14 - 72) = v13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  turi::toolkit_function_response_type::~toolkit_function_response_type((turi::toolkit_function_response_type *)va);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)> turi::toolkit_function_wrapper_impl::generate_native_function_wrapper<0ul,void (*)(void)>(void (*)(void))::{lambda(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)> turi::toolkit_function_wrapper_impl::generate_native_function_wrapper<0ul,void (*)(void)>(void (*)(void))::{lambda(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_24D938D30;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)> turi::toolkit_function_wrapper_impl::generate_native_function_wrapper<0ul,void (*)(void)>(void (*)(void))::{lambda(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)> turi::toolkit_function_wrapper_impl::generate_native_function_wrapper<0ul,void (*)(void)>(void (*)(void))::{lambda(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_24D938D30;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)> turi::toolkit_function_wrapper_impl::generate_native_function_wrapper<0ul,void (*)(void)>(void (*)(void))::{lambda(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)> turi::toolkit_function_wrapper_impl::generate_native_function_wrapper<0ul,void (*)(void)>(void (*)(void))::{lambda(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::operator()@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  return std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)> turi::toolkit_function_wrapper_impl::generate_native_function_wrapper<0ul,void (*)(void)>(void (*)(void))::{lambda(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)#1} &,std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&>((void (**)(void))(a1 + 8), a2, a3);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)> turi::toolkit_function_wrapper_impl::generate_native_function_wrapper<0ul,void (*)(void)>(void (*)(void))::{lambda(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)> turi::toolkit_function_wrapper_impl::generate_native_function_wrapper<0ul,void (*)(void)>(void (*)(void))::{lambda(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)> turi::toolkit_function_wrapper_impl::generate_native_function_wrapper<0ul,void (*)(void)>(void (*)(void))::{lambda(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)> turi::toolkit_function_wrapper_impl::generate_native_function_wrapper<0ul,void (*)(void)>(void (*)(void))::{lambda(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::target_type()
{
}

uint64_t std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)> turi::toolkit_function_wrapper_impl::generate_native_function_wrapper<0ul,void (*)(void)>(void (*)(void))::{lambda(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)#1} &,std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&>@<X0>(void (**a1)(void)@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  void *exception;
  _QWORD v6[3];

  v6[2] = *MEMORY[0x24BDAC8D0];
  if (a2[1] != *a2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(exception, "Insufficient arguments");
  }
  (*a1)();
  memset(v6, 0, 13);
  result = turi::flexible_type_internals::ft_converter<1>::set<turi::flexible_type const&>((uint64_t)v6, &turi::FLEX_UNDEFINED);
  *(_QWORD *)(a3 + 13) = *(_QWORD *)((char *)v6 + 5);
  *(_QWORD *)(a3 + 8) = v6[0];
  *(_BYTE *)(a3 + 20) = BYTE4(v6[1]);
  *(_DWORD *)a3 = 0;
  return result;
}

void sub_2183039C8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<0ul,void (*)(void)>(void (*)(void),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1},std::allocator<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<0ul,void (*)(void)>(void (*)(void),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1}>,turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::~__func(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void **v6;

  *(_QWORD *)a1 = &unk_24D938DC0;
  v2 = (_QWORD *)(a1 + 8);
  v6 = (void **)(a1 + 40);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v6);
  v3 = *(_QWORD **)(a1 + 32);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void **v6;

  *(_QWORD *)a1 = &unk_24D938DC0;
  v2 = (_QWORD *)(a1 + 8);
  v6 = (void **)(a1 + 40);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v6);
  v3 = *(_QWORD **)(a1 + 32);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return MEMORY[0x219A19A08](a1, 0x10A1C409BB2071CLL);
}

_QWORD *std::__function::__func<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<0ul,void (*)(void)>(void (*)(void),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1},std::allocator<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<0ul,void (*)(void)>(void (*)(void),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1}>,turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x40uLL);
  *v2 = &unk_24D938DC0;
  std::__compressed_pair_elem<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<0ul,void (*)(void)>(void (*)(void),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1},0,false>::__compressed_pair_elem[abi:ne180100]<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<0ul,void (*)(void)>(void (*)(void),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1} const&,0ul>((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_218303B24(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<0ul,void (*)(void)>(void (*)(void),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1},std::allocator<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<0ul,void (*)(void)>(void (*)(void),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1}>,turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24D938DC0;
  return std::__compressed_pair_elem<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<0ul,void (*)(void)>(void (*)(void),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1},0,false>::__compressed_pair_elem[abi:ne180100]<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<0ul,void (*)(void)>(void (*)(void),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1} const&,0ul>((uint64_t)(a2 + 1), a1 + 8);
}

void std::__function::__func<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<0ul,void (*)(void)>(void (*)(void),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1},std::allocator<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<0ul,void (*)(void)>(void (*)(void),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1}>,turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::destroy(uint64_t a1)
{
  std::__function::__alloc_func<turi::unity_sframe::transform_native(turi::function_closure_info const&,turi::flex_type_enum,BOOL,unsigned long long)::$_0,std::allocator<turi::unity_sframe::transform_native(turi::function_closure_info const&,turi::flex_type_enum,BOOL,unsigned long long)::$_0>,turi::flexible_type ()(turi::sframe_rows::row const&)>::destroy[abi:ne180100](a1 + 8);
}

void std::__function::__func<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<0ul,void (*)(void)>(void (*)(void),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1},std::allocator<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<0ul,void (*)(void)>(void (*)(void),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1}>,turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<turi::unity_sframe::transform_native(turi::function_closure_info const&,turi::flex_type_enum,BOOL,unsigned long long)::$_0,std::allocator<turi::unity_sframe::transform_native(turi::function_closure_info const&,turi::flex_type_enum,BOOL,unsigned long long)::$_0>,turi::flexible_type ()(turi::sframe_rows::row const&)>::destroy[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

void std::__function::__func<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<0ul,void (*)(void)>(void (*)(void),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1},std::allocator<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<0ul,void (*)(void)>(void (*)(void),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1}>,turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::operator()(uint64_t a1@<X0>, const void ***a2@<X1>, uint64_t a3@<X8>)
{
  turi::toolkit_function_wrapper_impl::make_spec<0ul,void (*)(void)>(void (*)(void),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1}::operator()(a1 + 8, a2, a3);
}

uint64_t std::__function::__func<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<0ul,void (*)(void)>(void (*)(void),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1},std::allocator<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<0ul,void (*)(void)>(void (*)(void),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1}>,turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<0ul,void (*)(void)>(void (*)(void),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1},std::allocator<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<0ul,void (*)(void)>(void (*)(void),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1}>,turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::target_type()
{
}

uint64_t std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

uint64_t std::__compressed_pair_elem<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<0ul,void (*)(void)>(void (*)(void),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1},0,false>::__compressed_pair_elem[abi:ne180100]<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<0ul,void (*)(void)>(void (*)(void),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1} const&,0ul>(uint64_t a1, uint64_t a2)
{
  std::string *v4;

  v4 = (std::string *)std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100](a1, a2);
  v4[1].__r_.__value_.__l.__size_ = 0;
  v4[1].__r_.__value_.__r.__words[2] = 0;
  v4 = (std::string *)((char *)v4 + 32);
  v4->__r_.__value_.__r.__words[2] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v4, *(__int128 **)(a2 + 32), *(__int128 **)(a2 + 40), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 3));
  return a1;
}

void sub_218303C88(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)v1[3];
  if (v3 == v1)
  {
    v4 = 4;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
    v1 = (_QWORD *)v1[3];
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v4))(v1);
LABEL_6:
  _Unwind_Resume(exception_object);
}

void turi::toolkit_function_wrapper_impl::make_spec<0ul,void (*)(void)>(void (*)(void),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1}::operator()(uint64_t a1@<X0>, const void ***a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  unsigned int *v6;
  void *__p[2];
  char v8;
  uint64_t v9[3];
  void **v10;
  uint64_t v11[12];

  v11[11] = *MEMORY[0x24BDAC8D0];
  *(_BYTE *)a3 = 1;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a3 + 32) = a3 + 40;
  *(_QWORD *)(a3 + 48) = 0;
  std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::map[abi:ne180100](v9, a2);
  v5 = *(_QWORD *)(a1 + 24);
  if (!v5)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)v5 + 48))(v11, v5, v9);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)v9, (char *)v9[1]);
  std::string::basic_string[abi:ne180100]<0>(__p, "return_value");
  v10 = __p;
  v6 = (unsigned int *)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a3 + 32), (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v10);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign(v6 + 14, v11);
  if (v8 < 0)
    operator delete(__p[0]);
  *(_BYTE *)a3 = 1;
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)v11);
}

void sub_218303DE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, __int128 __str,uint64_t __str_16)
{
  _BYTE *v21;
  std::string *v22;
  char *exception_ptr;
  __int128 v26;
  void *v27;
  void *v28;
  uint64_t v29;

  if (a2)
  {
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&__str);
    if (a2 == 4)
    {
      exception_ptr = (char *)__cxa_get_exception_ptr(exception_object);
      if (exception_ptr[23] < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&__str, *(const std::string::value_type **)exception_ptr, *((_QWORD *)exception_ptr + 1));
      }
      else
      {
        v26 = *(_OWORD *)exception_ptr;
        __str_16 = *((_QWORD *)exception_ptr + 2);
        __str = v26;
      }
      __cxa_begin_catch(exception_object);
      std::string::operator=(v22, (const std::string *)&__str);
      *v21 = 0;
      if (SHIBYTE(__str_16) < 0)
        operator delete((void *)__str);
      __cxa_end_catch();
    }
    else if (a2 == 3)
    {
      v27 = __cxa_begin_catch(exception_object);
      MEMORY[0x219A19390](v22, v27);
      *v21 = 0;
      __cxa_end_catch();
    }
    else
    {
      v28 = __cxa_begin_catch(exception_object);
      if (a2 == 2)
      {
        v29 = (*(uint64_t (**)(void *))(*(_QWORD *)v28 + 16))(v28);
        MEMORY[0x219A19390](v22, v29);
      }
      else
      {
        MEMORY[0x219A19390](v22, "Unknown Exception");
      }
      *v21 = 0;
      __cxa_end_catch();
    }
    JUMPOUT(0x218303DA8);
  }
  _Unwind_Resume(exception_object);
}

void sub_218303F78(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x218303F70);
}

_QWORD *std::__function::__value_func<turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_2183040F0(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

_QWORD *std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_218304264(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

uint64_t std::vector<turi::toolkit_function_specification>::__push_back_slow_path<turi::toolkit_function_specification>(uint64_t *a1, __int128 *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  void *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t *v14;

  v3 = 0xF0F0F0F0F0F0F0F1 * ((a1[1] - *a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0x1E1E1E1E1E1E1E1)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  if (0xE1E1E1E1E1E1E1E2 * ((a1[2] - *a1) >> 3) > v4)
    v4 = 0xE1E1E1E1E1E1E1E2 * ((a1[2] - *a1) >> 3);
  if (0xF0F0F0F0F0F0F0F1 * ((a1[2] - *a1) >> 3) >= 0xF0F0F0F0F0F0F0)
    v6 = 0x1E1E1E1E1E1E1E1;
  else
    v6 = v4;
  v14 = a1 + 2;
  if (v6)
    v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::toolkit_function_specification>>((uint64_t)(a1 + 2), v6);
  else
    v7 = 0;
  v10 = v7;
  v11 = &v7[136 * v3];
  v13 = &v7[136 * v6];
  std::allocator<turi::toolkit_function_specification>::construct[abi:ne180100]<turi::toolkit_function_specification,turi::toolkit_function_specification>((uint64_t)(a1 + 2), (uint64_t)v11, a2);
  v12 = v11 + 136;
  std::vector<turi::toolkit_function_specification>::__swap_out_circular_buffer(a1, &v10);
  v8 = a1[1];
  std::__split_buffer<turi::toolkit_function_specification>::~__split_buffer(&v10);
  return v8;
}

void sub_218304364(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<turi::toolkit_function_specification>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::allocator<turi::toolkit_function_specification>::construct[abi:ne180100]<turi::toolkit_function_specification,turi::toolkit_function_specification>(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = *a3;
  *(_QWORD *)(a2 + 16) = *((_QWORD *)a3 + 2);
  *(_OWORD *)a2 = v5;
  *((_QWORD *)a3 + 1) = 0;
  *((_QWORD *)a3 + 2) = 0;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a2 + 24) = *((_QWORD *)a3 + 3);
  v6 = a3 + 2;
  v7 = *((_QWORD *)a3 + 4);
  *(_QWORD *)(a2 + 32) = v7;
  v8 = a2 + 32;
  v9 = *((_QWORD *)a3 + 5);
  *(_QWORD *)(a2 + 40) = v9;
  if (v9)
  {
    *(_QWORD *)(v7 + 16) = v8;
    *((_QWORD *)a3 + 3) = v6;
    *v6 = 0;
    *((_QWORD *)a3 + 5) = 0;
  }
  else
  {
    *(_QWORD *)(a2 + 24) = v8;
  }
  *(_QWORD *)(a2 + 48) = *((_QWORD *)a3 + 6);
  v10 = (_QWORD *)a3 + 7;
  v11 = *((_QWORD *)a3 + 7);
  *(_QWORD *)(a2 + 56) = v11;
  v12 = a2 + 56;
  v13 = *((_QWORD *)a3 + 8);
  *(_QWORD *)(a2 + 64) = v13;
  if (v13)
  {
    *(_QWORD *)(v11 + 16) = v12;
    *((_QWORD *)a3 + 6) = v10;
    *v10 = 0;
    *((_QWORD *)a3 + 8) = 0;
  }
  else
  {
    *(_QWORD *)(a2 + 48) = v12;
  }
  std::__function::__value_func<turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::__value_func[abi:ne180100](a2 + 72, (uint64_t)a3 + 72);
  return std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::__value_func[abi:ne180100](a2 + 104, (uint64_t)a3 + 104);
}

uint64_t std::__function::__value_func<turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

uint64_t std::vector<turi::toolkit_function_specification>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::toolkit_function_specification>,std::reverse_iterator<turi::toolkit_function_specification*>,std::reverse_iterator<turi::toolkit_function_specification*>,std::reverse_iterator<turi::toolkit_function_specification*>>((uint64_t)(a1 + 2), a1[1], (__int128 *)a1[1], *a1, (__int128 *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<turi::toolkit_function_specification>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1E1E1E1E1E1E1E2)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(136 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::toolkit_function_specification>,std::reverse_iterator<turi::toolkit_function_specification*>,std::reverse_iterator<turi::toolkit_function_specification*>,std::reverse_iterator<turi::toolkit_function_specification*>>(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4, __int128 *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 *v9;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  v14 = 0;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v9 = (__int128 *)((char *)v9 - 136);
      std::allocator<turi::toolkit_function_specification>::construct[abi:ne180100]<turi::toolkit_function_specification,turi::toolkit_function_specification>(a1, v7 - 136, v9);
      v7 = *((_QWORD *)&v16 + 1) - 136;
      *((_QWORD *)&v16 + 1) -= 136;
    }
    while (v9 != a5);
    v11 = v16;
  }
  v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::toolkit_function_specification>,std::reverse_iterator<turi::toolkit_function_specification*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::toolkit_function_specification>,std::reverse_iterator<turi::toolkit_function_specification*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<turi::toolkit_function_specification>,std::reverse_iterator<turi::toolkit_function_specification*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<turi::toolkit_function_specification>,std::reverse_iterator<turi::toolkit_function_specification*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1[2] + 8);
  v2 = *(_QWORD *)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      std::allocator<turi::toolkit_function_specification>::destroy[abi:ne180100](v3, v1);
      v1 += 136;
    }
    while (v1 != v2);
  }
}

void **std::__split_buffer<turi::toolkit_function_specification>::~__split_buffer(void **a1)
{
  std::__split_buffer<turi::toolkit_function_specification>::clear[abi:ne180100](a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<turi::toolkit_function_specification>::clear[abi:ne180100](_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 136;
    std::allocator<turi::toolkit_function_specification>::destroy[abi:ne180100](v4, i - 136);
  }
}

void __cxx_global_var_init_16_3()
{
  uint64_t v0;
  const char *v1;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, v1, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_class_registrations_cpp_3()
{
  uint64_t i;
  uint64_t j;
  std::string v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  int v9;
  char v10;
  uint64_t v11;
  char v12;
  _QWORD v13[2];
  int v14;
  char v15;
  uint64_t v16;
  _QWORD v17[3];
  int v18;
  char v19;
  _QWORD v20[3];
  uint64_t v21;
  int v22;
  char v23;
  _QWORD v24[4];
  int v25;
  char v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  std::string::basic_string[abi:ne180100]<0>(&v3, "convergence_threshold");
  LODWORD(v5) = 0;
  BYTE4(v5) = 1;
  v4 = 0x3F847AE147AE147BLL;
  std::string::basic_string[abi:ne180100]<0>(&v6, "step_size");
  v9 = 0;
  v10 = 1;
  v8 = 0x3FF0000000000000;
  std::string::basic_string[abi:ne180100]<0>(&v11, "lbfgs_memory_level");
  v15 = 0;
  v14 = 0;
  v13[1] = 3;
  std::string::basic_string[abi:ne180100]<0>(&v16, "mini_batch_size");
  v19 = 0;
  v18 = 0;
  v17[2] = 1000;
  std::string::basic_string[abi:ne180100]<0>(v20, "max_iterations");
  v23 = 0;
  v22 = 0;
  v21 = 10;
  std::string::basic_string[abi:ne180100]<0>(v24, "auto_tuning");
  v26 = 0;
  v25 = 0;
  v24[3] = 1;
  std::map<std::string,turi::flexible_type>::map[abi:ne180100]((uint64_t)&turi::optimization::default_solver_options, &v3, 6);
  for (i = 200; i != -40; i -= 40)
    std::pair<std::string const,turi::flexible_type>::~pair((uint64_t)&v3 + i);
  __cxa_atexit((void (*)(void *))std::map<std::string,turi::flexible_type>::~map[abi:ne180100], &turi::optimization::default_solver_options, &dword_217E69000);
  std::string::basic_string[abi:ne180100]<0>(&v3, "convergence_threshold");
  LOBYTE(v4) = 1;
  std::string::basic_string[abi:ne180100]<0>(&v5, "step_size");
  v7 = 1;
  std::string::basic_string[abi:ne180100]<0>(&v8, "lbfgs_memory_level");
  v12 = 0;
  std::string::basic_string[abi:ne180100]<0>(v13, "mini_batch_size");
  LOBYTE(v16) = 0;
  std::string::basic_string[abi:ne180100]<0>(v17, "max_iterations");
  LOBYTE(v18) = 0;
  std::string::basic_string[abi:ne180100]<0>(v20, "auto_tuning");
  LOBYTE(v21) = 0;
  std::map<std::string,turi::flex_type_enum>::map[abi:ne180100]((uint64_t)&turi::optimization::default_solver_option_types, (const void **)&v3.__r_.__value_.__l.__data_, 6);
  for (j = 0; j != -24; j -= 4)
  {
    if (SHIBYTE(v20[j + 2]) < 0)
      operator delete((void *)v20[j]);
  }
  return __cxa_atexit((void (*)(void *))std::map<std::string,turi::flex_type_enum>::~map[abi:ne180100], &turi::optimization::default_solver_option_types, &dword_217E69000);
}

void sub_218304A5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v12;

  v12 = 0;
  while (1)
  {
    if (*(char *)(v10 + v12 + 183) < 0)
      operator delete(*(void **)(v10 + v12 + 160));
    v12 -= 32;
    if (v12 == -192)
      _Unwind_Resume(exception_object);
  }
}

uint64_t _GLOBAL__sub_I_windows_file_codecvt_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void boost::throw_exception<std::bad_alloc>()
{
  void *exception;
  _QWORD v1[5];
  int v2;

  exception = __cxa_allocate_exception(0x38uLL);
  memset(&v1[2], 0, 24);
  v2 = -1;
  v1[0] = &unk_24D938F68;
  v1[1] = &unk_24D938F90;
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::bad_alloc>>::clone_impl((uint64_t)exception, (uint64_t)v1);
}

void sub_218304BC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11)
{
  void *v11;
  int v12;

  a10 = &unk_24D918C48;
  if (a11 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a11 + 32))(a11))
    a11 = 0;
  std::bad_alloc::~bad_alloc((std::bad_alloc *)&a9);
  if (v12)
    __cxa_free_exception(v11);
  _Unwind_Resume(a1);
}

void boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::bad_alloc>>::~clone_impl(uint64_t a1)
{
  *(_QWORD *)(a1 + 8) = &unk_24D918C48;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 16));
  std::bad_alloc::~bad_alloc((std::bad_alloc *)a1);
}

{
  *(_QWORD *)(a1 + 8) = &unk_24D918C48;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 16));
  std::bad_alloc::~bad_alloc((std::bad_alloc *)a1);
  JUMPOUT(0x219A19A08);
}

uint64_t boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::bad_alloc>>::clone_impl(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;

  *(_QWORD *)(a1 + 48) = &unk_24D918BA8;
  *(_QWORD *)a1 = MEMORY[0x24BEDB8E8] + 16;
  *(_QWORD *)(a1 + 8) = &unk_24D918C48;
  v4 = a1 + 8;
  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v5;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  v6 = *(_OWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = v6;
  *(_QWORD *)a1 = &unk_24D938EC8;
  *(_QWORD *)(a1 + 8) = &unk_24D938F00;
  *(_QWORD *)(a1 + 48) = &unk_24D938F38;
  boost::exception_detail::copy_boost_exception(v4, a2 + 8);
  return a1;
}

{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)(a1 + 48) = &unk_24D918BA8;
  *(_QWORD *)a1 = MEMORY[0x24BEDB8E8] + 16;
  *(_QWORD *)(a1 + 8) = &unk_24D918C48;
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v4;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *(_OWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = v5;
  *(_QWORD *)a1 = &unk_24D938EC8;
  *(_QWORD *)(a1 + 8) = &unk_24D938F00;
  *(_QWORD *)(a1 + 48) = &unk_24D938F38;
  return a1;
}

void sub_218304D10(_Unwind_Exception *a1)
{
  std::bad_alloc *v1;

  std::bad_alloc::~bad_alloc(v1);
  _Unwind_Resume(a1);
}

char *boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::bad_alloc>>::clone(uint64_t a1)
{
  _QWORD *v2;

  v2 = (_QWORD *)operator new();
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::bad_alloc>>::clone_impl((uint64_t)v2, a1);
  return (char *)v2 + *(_QWORD *)(*v2 - 24);
}

void sub_218304DD4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10F1C40F6FF0CB6);
  _Unwind_Resume(a1);
}

void boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::bad_alloc>>::rethrow(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x38uLL);
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::bad_alloc>>::clone_impl((uint64_t)exception, a1);
}

void sub_218304E34(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::bad_alloc>>::~clone_impl(_QWORD *a1)
{
  std::bad_alloc *v1;

  v1 = (std::bad_alloc *)(a1 - 1);
  *a1 = &unk_24D918C48;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  std::bad_alloc::~bad_alloc(v1);
}

void `non-virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::bad_alloc>>::~clone_impl(uint64_t a1)
{
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::bad_alloc>>::~clone_impl(a1 - 8);
}

char *`virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::bad_alloc>>::clone(_QWORD *a1)
{
  return boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::bad_alloc>>::clone((uint64_t)a1 + *(_QWORD *)(*a1 - 24));
}

void `virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::bad_alloc>>::rethrow(_QWORD *a1)
{
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::bad_alloc>>::rethrow((uint64_t)a1 + *(_QWORD *)(*a1 - 32));
}

void `virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::bad_alloc>>::~clone_impl(_QWORD *a1)
{
  char *v1;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 40);
  *((_QWORD *)v1 + 1) = &unk_24D918C48;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)v1 + 2);
  std::bad_alloc::~bad_alloc((std::bad_alloc *)v1);
}

{
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::bad_alloc>>::~clone_impl((uint64_t)a1 + *(_QWORD *)(*a1 - 40));
}

void boost::exception_detail::error_info_injector<std::bad_alloc>::~error_info_injector(uint64_t a1)
{
  *(_QWORD *)(a1 + 8) = &unk_24D918C48;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 16));
  std::bad_alloc::~bad_alloc((std::bad_alloc *)a1);
  JUMPOUT(0x219A19A08);
}

void `non-virtual thunk to'boost::exception_detail::error_info_injector<std::bad_alloc>::~error_info_injector(uint64_t a1)
{
  boost::exception_detail::error_info_injector<std::bad_alloc>::~error_info_injector(a1 - 8);
}

void sub_218304FDC(_Unwind_Exception *a1)
{
  std::bad_alloc *v1;

  std::bad_alloc::~bad_alloc(v1);
  _Unwind_Resume(a1);
}

uint64_t _GLOBAL__sub_I_bzip2_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

uint64_t _GLOBAL__sub_I_file_descriptor_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void boost::iostreams::detail::gzip_header::process(boost::iostreams::detail::gzip_header *this, int a2)
{
  int v2;
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  std::ios_base::failure v7;

  switch(*((_DWORD *)this + 17))
  {
    case 1:
      if (a2 != 31)
      {
        boost::iostreams::gzip_error::gzip_error(&v7, 4);
        boost::throw_exception<boost::iostreams::gzip_error>(&v7);
      }
      v2 = 2;
      goto LABEL_35;
    case 2:
      if (a2 != -117)
      {
        boost::iostreams::gzip_error::gzip_error(&v7, 4);
        boost::throw_exception<boost::iostreams::gzip_error>(&v7);
      }
      v2 = 3;
      goto LABEL_35;
    case 3:
      if (a2 != 8)
      {
        boost::iostreams::gzip_error::gzip_error(&v7, 6);
        boost::throw_exception<boost::iostreams::gzip_error>(&v7);
      }
      v2 = 4;
      goto LABEL_35;
    case 4:
      *((_DWORD *)this + 16) = a2;
      *((_DWORD *)this + 17) = 5;
      return;
    case 5:
      v3 = *((_DWORD *)this + 18);
      *((_QWORD *)this + 7) += a2 << (8 * v3);
      if (v3 != 3)
        goto LABEL_16;
      v4 = 6;
      goto LABEL_15;
    case 6:
      v2 = 7;
      goto LABEL_35;
    case 7:
      *((_DWORD *)this + 12) = a2;
      v5 = *((_DWORD *)this + 16);
      if ((v5 & 4) == 0)
        goto LABEL_27;
      v2 = 8;
      goto LABEL_35;
    case 8:
      v3 = *((_DWORD *)this + 18);
      *((_DWORD *)this + 19) += a2 << (8 * v3);
      if (v3 != 1)
        goto LABEL_16;
      v4 = 9;
      goto LABEL_15;
    case 9:
      v6 = *((_DWORD *)this + 19) - 1;
      *((_DWORD *)this + 19) = v6;
      if (v6)
        return;
      v5 = *((_DWORD *)this + 16);
LABEL_27:
      if ((v5 & 8) == 0)
        goto LABEL_28;
      v2 = 10;
      goto LABEL_35;
    case 0xA:
      if (a2)
        goto LABEL_24;
      v5 = *((_DWORD *)this + 16);
LABEL_28:
      if ((v5 & 0x10) == 0)
        goto LABEL_32;
      v2 = 11;
      goto LABEL_35;
    case 0xB:
      if (a2)
      {
        this = (boost::iostreams::detail::gzip_header *)((char *)this + 24);
LABEL_24:
        std::string::push_back((std::string *)this, a2);
      }
      else
      {
        LOBYTE(v5) = *((_BYTE *)this + 64);
LABEL_32:
        if ((v5 & 2) != 0)
          v2 = 12;
        else
          v2 = 13;
LABEL_35:
        *((_DWORD *)this + 17) = v2;
      }
      return;
    case 0xC:
      v3 = *((_DWORD *)this + 18);
      if (v3 == 1)
      {
        v4 = 13;
LABEL_15:
        *(_QWORD *)((char *)this + 68) = v4;
      }
      else
      {
LABEL_16:
        *((_DWORD *)this + 18) = v3 + 1;
      }
      return;
    default:
      return;
  }
}

void sub_218305244(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10)
{
  std::runtime_error::~runtime_error(&a10);
  _Unwind_Resume(a1);
}

double boost::iostreams::detail::gzip_header::reset(boost::iostreams::detail::gzip_header *this)
{
  double result;

  if (*((char *)this + 23) < 0)
  {
    **(_BYTE **)this = 0;
    *((_QWORD *)this + 1) = 0;
  }
  else
  {
    *(_BYTE *)this = 0;
    *((_BYTE *)this + 23) = 0;
  }
  if (*((char *)this + 47) < 0)
  {
    **((_BYTE **)this + 3) = 0;
    *((_QWORD *)this + 4) = 0;
  }
  else
  {
    *((_BYTE *)this + 24) = 0;
    *((_BYTE *)this + 47) = 0;
  }
  *((_DWORD *)this + 12) = 0;
  *((_QWORD *)this + 7) = 0;
  *(_QWORD *)&result = 0x100000000;
  *((_OWORD *)this + 4) = xmmword_2186F2170;
  return result;
}

_DWORD *boost::iostreams::detail::gzip_footer::process(_DWORD *this, unsigned __int8 a2)
{
  int v2;
  int v3;
  uint64_t v4;

  v2 = this[2];
  if (v2 == 2)
  {
    v3 = this[3];
    this[1] += a2 << (8 * v3);
    if (v3 == 3)
    {
      v4 = 3;
      goto LABEL_7;
    }
  }
  else
  {
    if (v2 != 1)
      return this;
    v3 = this[3];
    *this += a2 << (8 * v3);
    if (v3 == 3)
    {
      v4 = 2;
LABEL_7:
      *((_QWORD *)this + 1) = v4;
      return this;
    }
  }
  this[3] = v3 + 1;
  return this;
}

double boost::iostreams::detail::gzip_footer::reset(boost::iostreams::detail::gzip_footer *this)
{
  double result;

  result = 0.0;
  *(_OWORD *)this = xmmword_2186CF1A0;
  return result;
}

uint64_t _GLOBAL__sub_I_gzip_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

uint64_t _GLOBAL__sub_I_mapped_file_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

BOOL turi::fs_util::upgrade_file_handle_limit(turi::fs_util *this)
{
  rlimit v2;

  v2.rlim_cur = (rlim_t)this;
  v2.rlim_max = (rlim_t)this;
  return setrlimit(8, &v2) == 0;
}

uint64_t turi::fs_util::get_file_handle_limit(turi::fs_util *this)
{
  rlimit v2;

  if (getrlimit(8, &v2))
    return 0;
  else
    return LODWORD(v2.rlim_cur);
}

uint64_t _GLOBAL__sub_I_fs_util_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

std::ios_base::failure *boost::iostreams::zlib_error::zlib_error(std::ios_base::failure *this, int a2)
{
  std::ios_base::failure *result;
  std::error_code v5;

  *(_QWORD *)&v5.__val_ = 1;
  v5.__cat_ = std::iostream_category();
  result = std::ios_base::failure::failure(this, "zlib error", &v5);
  this->__vftable = (std::ios_base::failure_vtbl *)&unk_24D938FB0;
  LODWORD(this[1].__vftable) = a2;
  return result;
}

uint64_t boost::iostreams::zlib_error::check(uint64_t this)
{
  std::ios_base::failure v1;

  if (this >= 2)
  {
    if ((_DWORD)this == -4)
    {
      std::bad_alloc::bad_alloc((std::bad_alloc *)&v1);
      boost::throw_exception<std::bad_alloc>();
    }
    boost::iostreams::zlib_error::zlib_error(&v1, this);
    boost::throw_exception<boost::iostreams::zlib_error>((uint64_t)&v1);
  }
  return this;
}

void sub_218305514(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10)
{
  std::runtime_error::~runtime_error(&a10);
  _Unwind_Resume(a1);
}

void boost::throw_exception<boost::iostreams::zlib_error>(uint64_t a1)
{
  void *exception;
  std::runtime_error v3[2];
  int v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  exception = __cxa_allocate_exception(0x58uLL);
  std::runtime_error::runtime_error(v3, (const std::runtime_error *)a1);
  v3[1] = *(std::runtime_error *)(a1 + 16);
  v4 = *(_DWORD *)(a1 + 32);
  v7 = 0;
  v8 = 0;
  v9 = -1;
  v3[0].__vftable = (std::runtime_error_vtbl *)&unk_24D9390F0;
  v5 = &unk_24D939118;
  v6 = 0;
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::iostreams::zlib_error>>::clone_impl((uint64_t)exception, (uint64_t)v3);
}

void sub_2183055CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::runtime_error a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  void *v14;
  int v15;

  a13 = &unk_24D918C48;
  if (a14 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a14 + 32))(a14))
    a14 = 0;
  std::runtime_error::~runtime_error(&a9);
  if (v15)
    __cxa_free_exception(v14);
  _Unwind_Resume(a1);
}

boost::iostreams::detail::zlib_base *boost::iostreams::detail::zlib_base::zlib_base(boost::iostreams::detail::zlib_base *this)
{
  *(_QWORD *)this = operator new();
  *((_BYTE *)this + 8) = 0;
  *((_DWORD *)this + 3) = 0;
  *((_DWORD *)this + 4) = 0;
  return this;
}

void boost::iostreams::detail::zlib_base::~zlib_base(boost::iostreams::detail::zlib_base *this)
{
  uint64_t v1;

  v1 = *(_QWORD *)this;
  if (v1)
    MEMORY[0x219A19A08](v1, 0x10B0C40E8CA615DLL);
}

uint64_t *boost::iostreams::detail::zlib_base::before(uint64_t *this, const char **a2, const char *a3, char **a4, char *a5)
{
  uint64_t v5;

  v5 = *this;
  *(_QWORD *)v5 = *a2;
  *(_DWORD *)(v5 + 8) = (_DWORD)a3 - *(_DWORD *)a2;
  *(_QWORD *)(v5 + 24) = *a4;
  *(_DWORD *)(v5 + 32) = (_DWORD)a5 - *(_DWORD *)a4;
  return this;
}

uLong boost::iostreams::detail::zlib_base::after(uLong this, const Bytef **a2, const Bytef **a3, int a4)
{
  _DWORD *v6;
  const char **v7;
  const char *v8;
  char *v9;
  uInt v10;
  const Bytef *v11;
  uInt v12;
  const char *v13;

  v6 = (_DWORD *)this;
  v7 = *(const char ***)this;
  v8 = **(const char ***)this;
  v9 = *(char **)(*(_QWORD *)this + 24);
  if (*(_BYTE *)(this + 8))
  {
    v10 = (_DWORD)v8 - *a2;
    if (a4)
      v11 = *a2;
    else
      v11 = *a3;
    if (a4)
      v12 = v10;
    else
      v12 = (_DWORD)v9 - *a3;
    this = crc32(*(unsigned int *)(this + 16), v11, v12);
    v6[3] = this;
    v6[4] = this;
  }
  v13 = v7[5];
  v6[5] = v7[2];
  v6[6] = (_DWORD)v13;
  *a2 = (const Bytef *)v8;
  *a3 = (const Bytef *)v9;
  return this;
}

uint64_t boost::iostreams::detail::zlib_base::xdeflate(z_streamp *this, int a2)
{
  return deflate(*this, a2);
}

uint64_t boost::iostreams::detail::zlib_base::xinflate(z_streamp *this, int a2)
{
  return inflate(*this, a2);
}

uint64_t boost::iostreams::detail::zlib_base::reset(z_stream **this, int a2, int a3)
{
  z_stream *v4;
  uint64_t result;

  v4 = *this;
  if (a3)
  {
    if (a2)
      result = deflateReset(v4);
    else
      result = inflateReset(v4);
  }
  else if (a2)
  {
    result = deflateEnd(v4);
  }
  else
  {
    result = inflateEnd(v4);
  }
  *((_DWORD *)this + 4) = 0;
  return result;
}

uint64_t boost::iostreams::detail::zlib_base::do_init(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, void *a6)
{
  z_stream *v6;
  int v7;
  uint64_t v8;

  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 21);
  v6 = *(z_stream **)a1;
  v6->zalloc = 0;
  v6->zfree = 0;
  v6->opaque = a6;
  if (*(_BYTE *)(a2 + 20))
    v7 = -*(_DWORD *)(a2 + 8);
  else
    v7 = *(_DWORD *)(a2 + 8);
  if (a3)
    v8 = deflateInit2_(v6, *(_DWORD *)a2, *(_DWORD *)(a2 + 4), v7, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 16), "1.2.12", 112);
  else
    v8 = inflateInit2_(v6, v7, "1.2.12", 112);
  return boost::iostreams::zlib_error::check(v8);
}

void boost::iostreams::zlib_error::~zlib_error(std::runtime_error *this)
{
  std::runtime_error::~runtime_error(this);
  JUMPOUT(0x219A19A08);
}

uint64_t boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::iostreams::zlib_error>>::clone_impl(uint64_t a1, uint64_t a2)
{
  std::runtime_error *v4;
  uint64_t p_imp;
  uint64_t v6;
  __int128 v7;

  *(_QWORD *)(a1 + 80) = &unk_24D918BA8;
  v4 = std::runtime_error::runtime_error((std::runtime_error *)a1, (const std::runtime_error *)a2);
  v4->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x24BEDB818] + 16);
  v4[1] = *(std::runtime_error *)(a2 + 16);
  v4->__vftable = (std::runtime_error_vtbl *)&unk_24D938FB0;
  LODWORD(v4[2].__vftable) = *(_DWORD *)(a2 + 32);
  v4[2].__imp_.__imp_ = (const char *)&unk_24D918C48;
  p_imp = (uint64_t)&v4[2].__imp_;
  v6 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 48) = v6;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
  v7 = *(_OWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = v7;
  *(_QWORD *)a1 = &unk_24D939050;
  *(_QWORD *)(a1 + 40) = &unk_24D939088;
  *(_QWORD *)(a1 + 80) = &unk_24D9390C0;
  boost::exception_detail::copy_boost_exception(p_imp, a2 + 40);
  return a1;
}

{
  std::runtime_error *v4;
  uint64_t v5;
  __int128 v6;

  *(_QWORD *)(a1 + 80) = &unk_24D918BA8;
  v4 = std::runtime_error::runtime_error((std::runtime_error *)a1, (const std::runtime_error *)a2);
  v4->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x24BEDB818] + 16);
  v4[1] = *(std::runtime_error *)(a2 + 16);
  v4->__vftable = (std::runtime_error_vtbl *)&unk_24D938FB0;
  LODWORD(v4[2].__vftable) = *(_DWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = &unk_24D918C48;
  *(_QWORD *)(a1 + 48) = v5;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  v6 = *(_OWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = v6;
  *(_QWORD *)a1 = &unk_24D939050;
  *(_QWORD *)(a1 + 40) = &unk_24D939088;
  *(_QWORD *)(a1 + 80) = &unk_24D9390C0;
  return a1;
}

void sub_218305928(_Unwind_Exception *a1)
{
  std::runtime_error *v1;

  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

void boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::iostreams::zlib_error>>::~clone_impl(uint64_t a1)
{
  *(_QWORD *)(a1 + 40) = &unk_24D918C48;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 48));
  std::runtime_error::~runtime_error((std::runtime_error *)a1);
  JUMPOUT(0x219A19A08);
}

char *boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::iostreams::zlib_error>>::clone(uint64_t a1)
{
  _QWORD *v2;

  v2 = (_QWORD *)operator new();
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::iostreams::zlib_error>>::clone_impl((uint64_t)v2, a1);
  return (char *)v2 + *(_QWORD *)(*v2 - 24);
}

void sub_2183059EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10F1C4039E95DADLL);
  _Unwind_Resume(a1);
}

void boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::iostreams::zlib_error>>::rethrow(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x58uLL);
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::iostreams::zlib_error>>::clone_impl((uint64_t)exception, a1);
}

void sub_218305A4C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::iostreams::zlib_error>>::~clone_impl(uint64_t a1)
{
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::iostreams::zlib_error>>::~clone_impl(a1 - 40);
}

char *`virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::iostreams::zlib_error>>::clone(_QWORD *a1)
{
  return boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::iostreams::zlib_error>>::clone((uint64_t)a1 + *(_QWORD *)(*a1 - 24));
}

void `virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::iostreams::zlib_error>>::rethrow(_QWORD *a1)
{
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::iostreams::zlib_error>>::rethrow((uint64_t)a1 + *(_QWORD *)(*a1 - 32));
}

void `virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::iostreams::zlib_error>>::~clone_impl(_QWORD *a1)
{
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::iostreams::zlib_error>>::~clone_impl((uint64_t)a1 + *(_QWORD *)(*a1 - 40));
}

void boost::exception_detail::error_info_injector<boost::iostreams::zlib_error>::~error_info_injector(uint64_t a1)
{
  *(_QWORD *)(a1 + 40) = &unk_24D918C48;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 48));
  std::runtime_error::~runtime_error((std::runtime_error *)a1);
  JUMPOUT(0x219A19A08);
}

void `non-virtual thunk to'boost::exception_detail::error_info_injector<boost::iostreams::zlib_error>::~error_info_injector(uint64_t a1)
{
  boost::exception_detail::error_info_injector<boost::iostreams::zlib_error>::~error_info_injector(a1 - 40);
}

void sub_218305BA8(_Unwind_Exception *a1)
{
  std::runtime_error *v1;

  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

uint64_t _GLOBAL__sub_I_zlib_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

uint64_t _GLOBAL__sub_I_random_device_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

uint64_t boost::re_detail_106800::get_default_class_id<char>(const void *a1, uint64_t a2)
{
  char **v2;
  char *v3;
  const void *v5;
  uint64_t v6;
  char v7;

  v5 = a1;
  v6 = a2;
  v7 = 0;
  v2 = std::__lower_bound[abi:ne180100]<std::_ClassicAlgPolicy,boost::re_detail_106800::character_pointer_range<char> const*,boost::re_detail_106800::character_pointer_range<char> const*,boost::re_detail_106800::character_pointer_range<char>,std::__identity,std::__less<void,void>>(boost::re_detail_106800::get_default_class_id<char>(char const*,char const*)::ranges_begin, (char **)boost::re_detail_106800::get_default_class_id<char>(char const*,char const*)::ranges_end, &v5);
  if (v2 != (char **)boost::re_detail_106800::get_default_class_id<char>(char const*,char const*)::ranges_end
    && (v3 = (char *)v2, v6 - (_QWORD)v5 == *((_QWORD *)v3 + 1) - *(_QWORD *)v3)
    && !memcmp(v5, *v2, v6 - (_QWORD)v5))
  {
    return (unint64_t)(v3
                            - (char *)&boost::re_detail_106800::get_default_class_id<char>(char const*,char const*)::ranges) >> 4;
  }
  else
  {
    return 0xFFFFFFFFLL;
  }
}

char **std::__lower_bound[abi:ne180100]<std::_ClassicAlgPolicy,boost::re_detail_106800::character_pointer_range<char> const*,boost::re_detail_106800::character_pointer_range<char> const*,boost::re_detail_106800::character_pointer_range<char>,std::__identity,std::__less<void,void>>(char **a1, char **a2, _QWORD *a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char **v6;
  char *v7;
  uint64_t v8;
  int v9;
  int v10;

  if (a2 != a1)
  {
    v3 = ((char *)a2 - (char *)a1) >> 4;
    v4 = a3[1];
    a2 = a1;
    do
    {
      v5 = v3 >> 1;
      if (*a3 != v4)
      {
        v6 = &a2[2 * v5];
        v7 = *v6;
        v8 = *a3 + 1;
        while (v7 != v6[1])
        {
          v9 = *v7;
          v10 = *(char *)(v8 - 1);
          if (v9 < v10)
            break;
          ++v7;
          if (v10 < v9 || v8++ == v4)
            goto LABEL_14;
        }
        a2 = v6 + 2;
        v5 = v3 + ~v5;
      }
LABEL_14:
      v3 = v5;
    }
    while (v5);
  }
  return a2;
}

uint64_t _GLOBAL__sub_I_c_regex_traits_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void boost::re_detail_106800::cpp_regex_traits_char_layer<char>::init(uint64_t a1)
{
  std::string::size_type size;
  uint64_t v3;
  uint64_t v4;
  const std::runtime_error *v5;
  uint64_t v6;
  uint64_t v7;
  char *default_syntax;
  unint64_t v9;
  unint64_t v10;
  void **v11;
  void *v12;
  void **v13;
  unsigned __int8 v14;
  const char *v15;
  unsigned int v16;
  unsigned __int8 *v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  int v23;
  char v24;
  std::string v25;
  std::runtime_error v26;
  void *__p[2];
  unsigned __int8 v28;
  std::string v29;

  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  boost::cpp_regex_traits<char>::get_catalog_name(&v29);
  size = HIBYTE(v29.__r_.__value_.__r.__words[2]);
  if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v29.__r_.__value_.__l.__size_;
  if (size && (v3 = *(_QWORD *)(a1 + 16)) != 0)
  {
    v4 = (*(uint64_t (**)(uint64_t, std::string *, uint64_t))(*(_QWORD *)v3 + 24))(v3, &v29, a1);
    if ((v4 & 0x80000000) != 0)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "Unable to open message catalog: ");
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)__p, (const void **)&v29.__r_.__value_.__l.__data_, (uint64_t)&v25);
      std::runtime_error::runtime_error(&v26, &v25);
      if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v25.__r_.__value_.__l.__data_);
      boost::re_detail_106800::raise_runtime_error(&v26, v5);
    }
    v6 = 1;
    do
    {
      v7 = *(_QWORD *)(a1 + 16);
      default_syntax = (char *)boost::re_detail_106800::get_default_syntax((boost::re_detail_106800 *)v6);
      std::string::basic_string[abi:ne180100]<0>(&v25, default_syntax);
      (*(void (**)(void **__return_ptr, uint64_t, uint64_t, _QWORD, uint64_t, std::string *))(*(_QWORD *)v7 + 32))(__p, v7, v4, 0, v6, &v25);
      if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v25.__r_.__value_.__l.__data_);
      v9 = 0;
      v10 = v28;
      v11 = (void **)__p[0];
      v12 = __p[1];
      if ((v28 & 0x80) != 0)
      {
        while (1)
        {
          v13 = v11;
          if (v9 >= (unint64_t)v12)
            break;
LABEL_16:
          *(_BYTE *)(a1 + *((unsigned __int8 *)v13 + v9++) + 32) = v6;
          if ((v10 & 0x80) == 0)
            goto LABEL_13;
        }
        operator delete(v11);
      }
      else
      {
LABEL_13:
        if (v9 < v10)
        {
          v13 = __p;
          goto LABEL_16;
        }
      }
      v6 = (v6 + 1);
    }
    while ((_DWORD)v6 != 60);
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16), v4);
  }
  else
  {
    v14 = 1;
    do
    {
      v15 = boost::re_detail_106800::get_default_syntax((boost::re_detail_106800 *)v14);
      if (v15)
      {
        v16 = *(unsigned __int8 *)v15;
        if (*v15)
        {
          v17 = (unsigned __int8 *)(v15 + 1);
          do
          {
            *(_BYTE *)(a1 + v16 + 32) = v14;
            v18 = *v17++;
            v16 = v18;
          }
          while (v18);
        }
      }
      v19 = v14++;
    }
    while (v19 < 0x3B);
  }
  v20 = 0;
  v21 = a1 + 97;
  do
  {
    if (*(_BYTE *)(v21 + v20))
      v22 = 0;
    else
      v22 = (((_BYTE)v20 + 65) & 0x80) == 0;
    if (v22)
    {
      v23 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 16) + 4 * v20 + 260);
      if ((v23 & 0x1000) != 0)
      {
        v24 = 22;
      }
      else
      {
        if ((v23 & 0x8000) == 0)
          goto LABEL_38;
        v24 = 23;
      }
      *(_BYTE *)(v21 + v20) = v24;
    }
LABEL_38:
    ++v20;
  }
  while (v20 != 191);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
}

void sub_218305FD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, std::runtime_error a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;

  std::runtime_error::~runtime_error(&a16);
  if (a22 < 0)
    operator delete(__p);
  if (*(char *)(v22 - 33) < 0)
    operator delete(*(void **)(v22 - 56));
  _Unwind_Resume(a1);
}

uint64_t _GLOBAL__sub_I_cpp_regex_traits_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void std::__tree<std::__value_type<int,std::string>,std::__map_value_compare<int,std::__value_type<int,std::string>,std::less<int>,true>,std::allocator<std::__value_type<int,std::string>>>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<int,std::string>,std::__map_value_compare<int,std::__value_type<int,std::string>,std::less<int>,true>,std::allocator<std::__value_type<int,std::string>>>::destroy(a1, *(_QWORD *)a2);
    std::__tree<std::__value_type<int,std::string>,std::__map_value_compare<int,std::__value_type<int,std::string>,std::less<int>,true>,std::allocator<std::__value_type<int,std::string>>>::destroy(a1, *((_QWORD *)a2 + 1));
    if (a2[63] < 0)
      operator delete(*((void **)a2 + 5));
    operator delete(a2);
  }
}

uint64_t boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::logic_error>>::clone_impl(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)(a1 + 56) = &unk_24D918BA8;
  std::logic_error::logic_error((std::logic_error *)a1, (const std::logic_error *)a2);
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 16) = &unk_24D918C48;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v5;
  *(_QWORD *)a1 = &unk_24D939300;
  *(_QWORD *)(a1 + 16) = &unk_24D939338;
  *(_QWORD *)(a1 + 56) = &unk_24D939370;
  boost::exception_detail::copy_boost_exception(a1 + 16, a2 + 16);
  return a1;
}

{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)(a1 + 56) = &unk_24D918BA8;
  std::logic_error::logic_error((std::logic_error *)a1, (const std::logic_error *)a2);
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = &unk_24D918C48;
  *(_QWORD *)(a1 + 24) = v4;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v5;
  *(_QWORD *)a1 = &unk_24D939300;
  *(_QWORD *)(a1 + 16) = &unk_24D939338;
  *(_QWORD *)(a1 + 56) = &unk_24D939370;
  return a1;
}

void sub_2183061D0(_Unwind_Exception *a1)
{
  std::logic_error *v1;

  std::logic_error::~logic_error(v1);
  _Unwind_Resume(a1);
}

char *boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::logic_error>>::clone(uint64_t a1)
{
  _QWORD *v2;

  v2 = (_QWORD *)operator new();
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::logic_error>>::clone_impl((uint64_t)v2, a1);
  return (char *)v2 + *(_QWORD *)(*v2 - 24);
}

void sub_218306248(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10F1C40311038C2);
  _Unwind_Resume(a1);
}

void boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::logic_error>>::rethrow(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x40uLL);
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::logic_error>>::clone_impl((uint64_t)exception, a1);
}

void sub_2183062A8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *`virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::logic_error>>::clone(_QWORD *a1)
{
  return boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::logic_error>>::clone((uint64_t)a1 + *(_QWORD *)(*a1 - 24));
}

void `virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::logic_error>>::rethrow(_QWORD *a1)
{
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::logic_error>>::rethrow((uint64_t)a1 + *(_QWORD *)(*a1 - 32));
}

void sub_218306368(_Unwind_Exception *a1)
{
  std::logic_error *v1;

  std::logic_error::~logic_error(v1);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<int,std::string>,std::__map_value_compare<int,std::__value_type<int,std::string>,std::less<int>,true>,std::allocator<std::__value_type<int,std::string>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  int v8;
  uint64_t **v9;
  int v10;
  _DWORD *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = operator new(0x40uLL);
    v11[8] = **a4;
    *((_QWORD *)v11 + 6) = 0;
    *((_QWORD *)v11 + 7) = 0;
    *((_QWORD *)v11 + 5) = 0;
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

BOOL boost::cpp_regex_traits<char>::isctype(uint64_t a1, int a2, int a3)
{
  uint64_t v3;

  if ((a2 & 0x80000000) == 0
    && (a3 & 0x5F700) != 0
    && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 8) + 16) + 4 * a2) & a3 & 0x5F700) != 0
    || a2 == 95 && (a3 & 0x2000000) != 0)
  {
    return 1;
  }
  if ((a2 & 0x80) != 0
    || (a3 & 0x1000000) == 0
    || (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 8) + 16) + 4 * a2) & 0x4000) == 0
    || (v3 = 1, a2 <= 0xDu) && ((1 << a2) & 0x3400) != 0)
  {
    if (a2 - 10 <= 3 && (a3 & 0x10000000) != 0)
      return 1;
    v3 = 0;
    if ((a2 & 0x80) == 0 && (a3 & 0x8000000) != 0)
      return (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 8) + 16) + 4 * a2) & 0x4000) != 0
          && a2 - 14 < 0xFFFFFFFC;
  }
  return v3;
}

void boost::re_detail_106800::cpp_regex_traits_implementation<char>::error_string(uint64_t a1@<X0>, int a2@<W1>, std::string *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  BOOL v7;
  uint64_t *v8;
  char *default_error_string;
  __int128 v10;

  if (!*(_QWORD *)(a1 + 304))
    goto LABEL_12;
  v4 = *(_QWORD *)(a1 + 296);
  if (!v4)
    goto LABEL_12;
  v5 = a1 + 296;
  do
  {
    v6 = *(_DWORD *)(v4 + 32);
    v7 = v6 < a2;
    if (v6 >= a2)
      v8 = (uint64_t *)v4;
    else
      v8 = (uint64_t *)(v4 + 8);
    if (!v7)
      v5 = v4;
    v4 = *v8;
  }
  while (*v8);
  if (v5 != a1 + 296 && *(_DWORD *)(v5 + 32) <= a2)
  {
    if (*(char *)(v5 + 63) < 0)
    {
      std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)(v5 + 40), *(_QWORD *)(v5 + 48));
    }
    else
    {
      v10 = *(_OWORD *)(v5 + 40);
      a3->__r_.__value_.__r.__words[2] = *(_QWORD *)(v5 + 56);
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v10;
    }
  }
  else
  {
LABEL_12:
    default_error_string = (char *)boost::re_detail_106800::get_default_error_string(a2);
    std::string::basic_string[abi:ne180100]<0>(a3, default_error_string);
  }
}

uint64_t _GLOBAL__sub_I_cregex_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

uint64_t _GLOBAL__sub_I_fileiter_cpp()
{
  uint64_t result;

  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  result = __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  boost::re_detail_106800::_fi_sep_alt = boost::re_detail_106800::_fi_sep;
  return result;
}

uint64_t _GLOBAL__sub_I_icu_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

std::locale::__imp *boost::re_detail_106800::cpp_regex_traits_base<char>::imbue@<X0>(std::locale *a1@<X0>, const std::locale *a2@<X1>, std::locale *a3@<X8>)
{
  std::locale::__imp *v5;
  std::locale::__imp *result;

  std::locale::locale(a3, a1);
  std::locale::operator=(a1, a2);
  a1[1].__locale_ = (std::locale::__imp *)std::locale::use_facet(a2, MEMORY[0x24BEDB350]);
  if (std::locale::has_facet(a2, MEMORY[0x24BEDB580]))
    v5 = (std::locale::__imp *)std::locale::use_facet(a2, MEMORY[0x24BEDB580]);
  else
    v5 = 0;
  a1[2].__locale_ = v5;
  result = (std::locale::__imp *)std::locale::use_facet(a2, MEMORY[0x24BEDB4B0]);
  a1[3].__locale_ = result;
  return result;
}

void sub_218306718(_Unwind_Exception *a1)
{
  std::locale *v1;

  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

void boost::re_detail_106800::cpp_regex_traits_implementation<char>::transform_primary(uint64_t a1@<X0>, std::string::value_type *a2@<X1>, std::string::value_type *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  std::string::size_type v11;
  int v12;
  std::string::size_type v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  __int128 v17;
  unint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  switch(*(_DWORD *)(a1 + 360))
  {
    case 0:
    case 3:
      std::string::__assign_trivial[abi:ne180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>((std::string *)a4, a2, a3, a3 - a2);
      v6 = *((unsigned __int8 *)a4 + 23);
      if ((v6 & 0x80u) == 0)
        v7 = a4;
      else
        v7 = (uint64_t *)*a4;
      if ((v6 & 0x80u) != 0)
        v6 = a4[1];
      (*(void (**)(_QWORD, uint64_t *, uint64_t))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8), v7, (uint64_t)v7 + v6);
      v8 = *((unsigned __int8 *)a4 + 23);
      if ((v8 & 0x80u) == 0)
        v9 = a4;
      else
        v9 = (uint64_t *)*a4;
      if ((v8 & 0x80u) != 0)
        v8 = a4[1];
      (*(void (**)(__int128 *__return_ptr, _QWORD, uint64_t *, uint64_t))(**(_QWORD **)(a1 + 24) + 32))(&v17, *(_QWORD *)(a1 + 24), v9, (uint64_t)v9 + v8);
      if (*((char *)a4 + 23) < 0)
        operator delete((void *)*a4);
      *(_OWORD *)a4 = v17;
      a4[2] = v18;
      break;
    case 1:
      (*(void (**)(__int128 *__return_ptr))(**(_QWORD **)(a1 + 24) + 32))(&v17);
      if (*((char *)a4 + 23) < 0)
        operator delete((void *)*a4);
      *(_OWORD *)a4 = v17;
      a4[2] = v18;
      std::string::erase((std::string *)a4, *(char *)(a1 + 364), 0xFFFFFFFFFFFFFFFFLL);
      break;
    case 2:
      (*(void (**)(__int128 *__return_ptr))(**(_QWORD **)(a1 + 24) + 32))(&v17);
      if (*((char *)a4 + 23) < 0)
        operator delete((void *)*a4);
      *(_OWORD *)a4 = v17;
      v10 = v18;
      a4[2] = v18;
      v11 = HIBYTE(v10);
      v12 = (char)v11;
      v13 = 0;
      if ((v11 & 0x80u) != 0)
        v11 = a4[1];
      if (v11)
      {
        if (v12 >= 0)
          v14 = a4;
        else
          v14 = (uint64_t *)*a4;
        while (*((unsigned __int8 *)v14 + v13) != *(unsigned __int8 *)(a1 + 364))
        {
          if (v11 == ++v13)
          {
            v13 = v11;
            break;
          }
        }
      }
      std::string::erase((std::string *)a4, v13, 0xFFFFFFFFFFFFFFFFLL);
      break;
    default:
      break;
  }
  v15 = a4 + 1;
  while ((*((char *)a4 + 23) & 0x80000000) == 0)
  {
    v16 = *((unsigned __int8 *)a4 + 23);
    if (!*((_BYTE *)a4 + 23))
      goto LABEL_39;
    if (*((_BYTE *)a4 + v16 - 1))
      return;
LABEL_37:
    std::string::erase((std::string *)a4, v16 - 1, 0xFFFFFFFFFFFFFFFFLL);
  }
  v16 = *v15;
  if (*v15)
  {
    if (*(_BYTE *)(*a4 + v16 - 1))
      return;
    goto LABEL_37;
  }
  operator delete((void *)*a4);
LABEL_39:
  *a4 = 0;
  *v15 = v17;
  *(uint64_t *)((char *)a4 + 15) = *(_QWORD *)((char *)&v17 + 7);
  *((_BYTE *)a4 + 23) = 1;
}

void sub_218306984(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x2183068E0);
  }
  _Unwind_Resume(exception_object);
}

void boost::re_detail_106800::cpp_regex_traits_implementation<char>::transform(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string::size_type size;
  char v4;
  std::string::size_type v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  std::string *p_i;
  int v10;
  std::string *v11;
  std::string::value_type v12;
  std::string::size_type v13;
  std::string v15;
  std::string i;

  memset(&i, 0, sizeof(i));
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  a2->__r_.__value_.__r.__words[0] = 0;
  (*(void (**)(std::string *__return_ptr))(**(_QWORD **)(a1 + 24) + 32))(&v15);
  for (i = v15; SHIBYTE(i.__r_.__value_.__r.__words[2]) < 0; std::string::erase(&i, size - 1, 0xFFFFFFFFFFFFFFFFLL))
  {
    size = i.__r_.__value_.__l.__size_;
    if (!i.__r_.__value_.__l.__size_ || *(_BYTE *)(i.__r_.__value_.__r.__words[0] + i.__r_.__value_.__l.__size_ - 1))
      goto LABEL_10;
LABEL_8:
    ;
  }
  size = HIBYTE(i.__r_.__value_.__r.__words[2]);
  if (*((_BYTE *)&i.__r_.__value_.__s + 23))
  {
    if (*((_BYTE *)&v15.__r_.__value_.__r.__words[2] + HIBYTE(i.__r_.__value_.__r.__words[2]) + 7))
      goto LABEL_10;
    goto LABEL_8;
  }
  size = 0;
LABEL_10:
  std::string::reserve(a2, 2 * size + 2);
  v4 = HIBYTE(i.__r_.__value_.__r.__words[2]);
  v5 = i.__r_.__value_.__l.__size_;
  if ((i.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v5 = HIBYTE(i.__r_.__value_.__r.__words[2]);
  if (v5)
  {
    v6 = 0;
    v7 = SHIBYTE(i.__r_.__value_.__r.__words[2]) >> 31;
    v8 = 1;
    do
    {
      if ((v7 & 1) != 0)
        p_i = (std::string *)i.__r_.__value_.__r.__words[0];
      else
        p_i = &i;
      v10 = p_i->__r_.__value_.__s.__data_[v6];
      if (v10 == 255)
      {
        v11 = std::string::append(a2, 1uLL, -1);
        v12 = 98;
      }
      else
      {
        v11 = std::string::append(a2, 1uLL, v10 + 1);
        v12 = 97;
      }
      std::string::append(v11, 1uLL, v12);
      v6 = v8;
      v7 = SHIBYTE(i.__r_.__value_.__r.__words[2]) >> 31;
      v13 = i.__r_.__value_.__l.__size_;
      if ((i.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v13 = HIBYTE(i.__r_.__value_.__r.__words[2]);
    }
    while (v13 > v8++);
    v4 = HIBYTE(i.__r_.__value_.__r.__words[2]);
  }
  if (v4 < 0)
    operator delete(i.__r_.__value_.__l.__data_);
}

void sub_218306B48(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  if (a18 < 0)
    JUMPOUT(0x218306B2CLL);
  JUMPOUT(0x218306B34);
}

void sub_218306B68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  if (*(char *)(v5 + 23) < 0)
    operator delete(*(void **)v5);
  turi::unity_sarray::construct_from_sarray_index((uint64_t)va);
  _Unwind_Resume(a1);
}

void boost::re_detail_106800::cpp_regex_traits_implementation<char>::lookup_collatename(uint64_t a1@<X0>, char *a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  __int128 v11;
  char v12;
  unint64_t v13;
  char *v14;
  unsigned __int8 v15;
  __int128 v16;
  uint64_t v17;
  void *__p[2];
  uint64_t v19;

  if (!*(_QWORD *)(a1 + 352))
  {
    v9 = a3 - a2;
    goto LABEL_8;
  }
  v8 = a1 + 336;
  v9 = a3 - a2;
  std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<char *>,std::__wrap_iter<char *>>(__p, a2, a3, a3 - a2);
  v10 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(v8, (const void **)__p);
  if (SHIBYTE(v19) < 0)
    operator delete(__p[0]);
  if (a1 + 344 == v10)
  {
LABEL_8:
    std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<char *>,std::__wrap_iter<char *>>(__p, a2, a3, v9);
    boost::re_detail_106800::lookup_default_collate_name((size_t)__p, (uint64_t)&v16);
    if (SHIBYTE(v19) < 0)
      operator delete(__p[0]);
    v19 = v17;
    *(_OWORD *)__p = v16;
    v12 = HIBYTE(v17);
    if (SHIBYTE(v17) < 0)
    {
      v13 = (unint64_t)__p[1];
      if (__p[1])
      {
        v14 = (char *)__p[0];
LABEL_15:
        std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<char *>,std::__wrap_iter<char *>>((_QWORD *)a4, v14, &v14[v13], v13);
        if ((v19 & 0x8000000000000000) == 0)
          return;
LABEL_22:
        operator delete(__p[0]);
        return;
      }
    }
    else if (HIBYTE(v17))
    {
      v13 = HIBYTE(v17);
      v14 = (char *)__p;
      goto LABEL_15;
    }
    if (v9 == 1)
    {
      v15 = *a2;
      *(_BYTE *)(a4 + 23) = 1;
      *(_WORD *)a4 = v15;
      if ((v12 & 0x80) == 0)
        return;
    }
    else
    {
      *(_QWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_QWORD *)(a4 + 16) = 0;
      if ((v12 & 0x80) == 0)
        return;
    }
    goto LABEL_22;
  }
  if (*(char *)(v10 + 79) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)a4, *(const std::string::value_type **)(v10 + 56), *(_QWORD *)(v10 + 64));
  }
  else
  {
    v11 = *(_OWORD *)(v10 + 56);
    *(_QWORD *)(a4 + 16) = *(_QWORD *)(v10 + 72);
    *(_OWORD *)a4 = v11;
  }
}

void sub_218306D04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void boost::re_detail_106800::cpp_regex_traits_implementation<char>::init(uint64_t a1)
{
  std::string::size_type size;
  uint64_t v3;
  uint64_t v4;
  int i;
  const char *default_error_string;
  char v7;
  unsigned __int8 *v8;
  std::string::value_type v9;
  int v10;
  BOOL v11;
  std::string::size_type v12;
  std::string::size_type v13;
  std::string *p_p;
  std::string::value_type v15;
  std::string::size_type v16;
  uint64_t **v17;
  unsigned __int8 v18;
  uint64_t j;
  std::string::size_type v20;
  char v21;
  int v22;
  const std::runtime_error *v23;
  int v24;
  std::string __str;
  std::string __p;
  std::string v27;
  std::string v28;
  int *v29;

  boost::cpp_regex_traits<char>::get_catalog_name(&v28);
  size = HIBYTE(v28.__r_.__value_.__r.__words[2]);
  if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v28.__r_.__value_.__l.__size_;
  if (size)
  {
    v3 = *(_QWORD *)(a1 + 16);
    if (v3)
    {
      v4 = (*(uint64_t (**)(uint64_t, std::string *, uint64_t))(*(_QWORD *)v3 + 24))(v3, &v28, a1);
      if ((v4 & 0x80000000) != 0)
      {
        std::string::basic_string[abi:ne180100]<0>(&v27, "Unable to open message catalog: ");
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v27.__r_.__value_.__l.__data_, (const void **)&v28.__r_.__value_.__l.__data_, (uint64_t)&__p);
        std::runtime_error::runtime_error((std::runtime_error *)&__str, &__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        boost::re_detail_106800::raise_runtime_error((const std::runtime_error *)&__str, v23);
      }
      for (i = 0; i != 22; ++i)
      {
        default_error_string = boost::re_detail_106800::get_default_error_string(i);
        memset(&v27, 0, sizeof(v27));
        v7 = *default_error_string;
        if (*default_error_string)
        {
          v8 = (unsigned __int8 *)(default_error_string + 1);
          do
          {
            v9 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8), v7);
            std::string::append(&v27, 1uLL, v9);
            v10 = *v8++;
            v7 = v10;
          }
          while (v10);
        }
        (*(void (**)(std::string *__return_ptr, _QWORD, uint64_t, _QWORD, _QWORD, std::string *))(**(_QWORD **)(a1 + 16) + 32))(&__p, *(_QWORD *)(a1 + 16), v4, 0, (i + 200), &v27);
        memset(&__str, 0, sizeof(__str));
        v11 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0;
        v12 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v12 = __p.__r_.__value_.__l.__size_;
        if (v12)
        {
          v13 = 0;
          do
          {
            if (v11)
              p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
            else
              p_p = &__p;
            v15 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 72))(*(_QWORD *)(a1 + 8), p_p->__r_.__value_.__s.__data_[v13], 0);
            std::string::append(&__str, 1uLL, v15);
            ++v13;
            v11 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0;
            v16 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v16 = __p.__r_.__value_.__l.__size_;
          }
          while (v13 < v16);
        }
        v24 = i;
        v29 = &v24;
        v17 = std::__tree<std::__value_type<int,std::string>,std::__map_value_compare<int,std::__value_type<int,std::string>,std::less<int>,true>,std::allocator<std::__value_type<int,std::string>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t **)(a1 + 288), &v24, (uint64_t)&std::piecewise_construct, &v29);
        std::string::operator=((std::string *)(v17 + 5), &__str);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v27.__r_.__value_.__l.__data_);
      }
      if ((v18 & 1) == 0
      {
        boost::re_detail_106800::cpp_regex_traits_implementation<char>::init(void)::null_string = 0;
        *(_QWORD *)algn_254FD4118 = 0;
        qword_254FD4120 = 0;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &boost::re_detail_106800::cpp_regex_traits_implementation<char>::init(void)::null_string, &dword_217E69000);
      }
      for (j = 0; j != 14; ++j)
      {
        (*(void (**)(std::string *__return_ptr, _QWORD, uint64_t, _QWORD, _QWORD, uint64_t *))(**(_QWORD **)(a1 + 16) + 32))(&v27, *(_QWORD *)(a1 + 16), v4, 0, (j + 300), &boost::re_detail_106800::cpp_regex_traits_implementation<char>::init(void)::null_string);
        v20 = HIBYTE(v27.__r_.__value_.__r.__words[2]);
        v21 = HIBYTE(v27.__r_.__value_.__r.__words[2]);
        if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v20 = v27.__r_.__value_.__l.__size_;
        if (v20)
        {
          v22 = boost::re_detail_106800::cpp_regex_traits_implementation<char>::init(void)::masks[j];
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v27;
          *((_DWORD *)std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 312), (const void **)&v27.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&__p)+ 14) = v22;
          v21 = HIBYTE(v27.__r_.__value_.__r.__words[2]);
        }
        if (v21 < 0)
          operator delete(v27.__r_.__value_.__l.__data_);
      }
    }
  }
  *(_DWORD *)(a1 + 360) = boost::re_detail_106800::find_sort_syntax<boost::re_detail_106800::cpp_regex_traits_implementation<char>,char>(a1, (_BYTE *)(a1 + 364));
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
}

void sub_218307090(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::runtime_error a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  std::runtime_error::~runtime_error(&a11);
  if (a27 < 0)
    operator delete(__p);
  if (a33 < 0)
    operator delete(a28);
  _Unwind_Resume(a1);
}

void boost::cpp_regex_traits<char>::get_catalog_name(std::string *a1@<X8>)
{
  uint64_t *catalog_name_inst;
  __int128 v3;
  _BYTE v4[16];

  boost::scoped_static_mutex_lock::scoped_static_mutex_lock((uint64_t)v4, &boost::cpp_regex_traits<char>::get_mutex_inst(void)::s_mutex, 1);
  catalog_name_inst = boost::cpp_regex_traits<char>::get_catalog_name_inst();
  if (*((char *)catalog_name_inst + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a1, (const std::string::value_type *)*catalog_name_inst, catalog_name_inst[1]);
  }
  else
  {
    v3 = *(_OWORD *)catalog_name_inst;
    a1->__r_.__value_.__r.__words[2] = catalog_name_inst[2];
    *(_OWORD *)&a1->__r_.__value_.__l.__data_ = v3;
  }
  boost::scoped_static_mutex_lock::~scoped_static_mutex_lock((boost::scoped_static_mutex_lock *)v4);
}

void sub_21830718C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  boost::scoped_static_mutex_lock::~scoped_static_mutex_lock((boost::scoped_static_mutex_lock *)&a9);
  _Unwind_Resume(a1);
}

uint64_t boost::re_detail_106800::find_sort_syntax<boost::re_detail_106800::cpp_regex_traits_implementation<char>,char>(uint64_t a1, _BYTE *a2)
{
  size_t v4;
  size_t v5;
  char v6;
  std::string *p_s1;
  std::string::size_type size;
  uint64_t v9;
  int v10;
  std::string *v11;
  std::string *v12;
  uint64_t v13;
  std::string *v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  std::string::size_type v19;
  std::string::size_type v20;
  char v21;
  std::string::size_type v22;
  uint64_t v23;
  int v24;
  std::string *v25;
  uint64_t v26;
  int v27;
  std::string::size_type v28;
  uint64_t v29;
  int v30;
  std::string *p_p;
  std::string::size_type v32;
  std::string::size_type v33;
  BOOL v34;
  std::string __p;
  __int16 v37;
  std::string v38;
  __int16 v39;
  std::string __s1;
  char __s[2];

  strcpy(__s, "a");
  boost::re_detail_106800::cpp_regex_traits_implementation<char>::transform(a1, &__s1);
  v4 = strlen(__s);
  v5 = v4;
  v6 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  if ((SHIBYTE(__s1.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v4 != HIBYTE(__s1.__r_.__value_.__r.__words[2]))
      goto LABEL_9;
    if (v4 != -1)
    {
      p_s1 = &__s1;
      goto LABEL_8;
    }
LABEL_93:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v4 != __s1.__r_.__value_.__l.__size_)
    goto LABEL_9;
  if (v4 == -1)
    goto LABEL_93;
  p_s1 = (std::string *)__s1.__r_.__value_.__r.__words[0];
LABEL_8:
  if (memcmp(p_s1, __s, v5))
  {
LABEL_9:
    v39 = 65;
    boost::re_detail_106800::cpp_regex_traits_implementation<char>::transform(a1, &v38);
    v37 = 59;
    boost::re_detail_106800::cpp_regex_traits_implementation<char>::transform(a1, &__p);
    size = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
    if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = __s1.__r_.__value_.__l.__size_;
    if ((size & 0x80000000) != 0)
    {
LABEL_39:
      LOBYTE(v15) = 0;
      v18 = 3;
      goto LABEL_86;
    }
    v9 = 0;
    v10 = HIBYTE(v38.__r_.__value_.__r.__words[2]);
    if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v10 = v38.__r_.__value_.__r.__words[1];
    v11 = (std::string *)v38.__r_.__value_.__r.__words[0];
    if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v11 = &v38;
    if (v10 < 0)
      v10 = -1;
    v12 = &__s1;
    if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v12 = (std::string *)__s1.__r_.__value_.__r.__words[0];
    v13 = (v10 + 1);
    while (1)
    {
      if (v13 == v9)
        goto LABEL_25;
      if (v12->__r_.__value_.__s.__data_[v9] != v11->__r_.__value_.__s.__data_[v9])
        break;
      if ((_DWORD)size + 1 == ++v9)
      {
        LODWORD(v13) = size + 1;
LABEL_25:
        if (!(_DWORD)v13)
          goto LABEL_39;
        goto LABEL_26;
      }
    }
    LODWORD(v13) = v9;
    if (!(_DWORD)v9)
      goto LABEL_39;
LABEL_26:
    if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v14 = &__s1;
    else
      v14 = (std::string *)__s1.__r_.__value_.__r.__words[0];
    if ((_DWORD)v13 == 1)
    {
      v19 = HIBYTE(v38.__r_.__value_.__r.__words[2]);
      v20 = v38.__r_.__value_.__l.__size_;
      v21 = HIBYTE(v38.__r_.__value_.__r.__words[2]);
    }
    else
    {
      v15 = v14->__r_.__value_.__s.__data_[(v13 - 1)];
      if (size)
      {
        v16 = 0;
        v17 = 0;
        do
        {
          if (v14->__r_.__value_.__s.__data_[v16] == v15)
            ++v17;
          ++v16;
        }
        while (size > v16);
      }
      else
      {
        v17 = 0;
      }
      v19 = HIBYTE(v38.__r_.__value_.__r.__words[2]);
      v21 = HIBYTE(v38.__r_.__value_.__r.__words[2]);
      v20 = v38.__r_.__value_.__l.__size_;
      if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v22 = HIBYTE(v38.__r_.__value_.__r.__words[2]);
      else
        v22 = v38.__r_.__value_.__l.__size_;
      if (v22)
      {
        v23 = 0;
        v24 = 0;
        v25 = (std::string *)v38.__r_.__value_.__r.__words[0];
        if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v25 = &v38;
        do
        {
          if (v25->__r_.__value_.__s.__data_[v23] == v15)
            ++v24;
          ++v23;
        }
        while (v22 > v23);
      }
      else
      {
        v24 = 0;
      }
      if (v17 == v24)
      {
        if (size)
        {
          v26 = 0;
          v27 = 0;
          do
          {
            if (v14->__r_.__value_.__s.__data_[v26] == v15)
              ++v27;
            ++v26;
          }
          while (size > v26);
        }
        else
        {
          v27 = 0;
        }
        v28 = __p.__r_.__value_.__l.__size_;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v28 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        if (v28)
        {
          v29 = 0;
          v30 = 0;
          p_p = &__p;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          do
          {
            if (p_p->__r_.__value_.__s.__data_[v29] == v15)
              ++v30;
            ++v29;
          }
          while (v28 > v29);
        }
        else
        {
          v30 = 0;
        }
        if (v27 == v30)
        {
          v18 = 2;
          goto LABEL_86;
        }
      }
    }
    if (v21 >= 0)
      v32 = v19;
    else
      v32 = v20;
    v18 = 3;
    if (size == v32)
    {
      v33 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v33 = __p.__r_.__value_.__l.__size_;
      v34 = size == v33;
      if (size == v33)
        LOBYTE(v15) = v13;
      else
        LOBYTE(v15) = 0;
      if (v34)
        v18 = 1;
      else
        v18 = 3;
    }
    else
    {
      LOBYTE(v15) = 0;
    }
LABEL_86:
    *a2 = v15;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v38.__r_.__value_.__l.__data_);
    if ((*((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
      goto LABEL_91;
    return v18;
  }
  v18 = 0;
  *a2 = 0;
  if (v6 < 0)
LABEL_91:
    operator delete(__s1.__r_.__value_.__l.__data_);
  return v18;
}

void sub_2183074F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a18 < 0)
    operator delete(__p);
  if (a25 < 0)
    operator delete(a20);
  _Unwind_Resume(exception_object);
}

uint64_t boost::re_detail_106800::cpp_regex_traits_implementation<char>::lookup_classname_imp(uint64_t a1, char *a2, char *a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  void *__p[2];
  char v11;

  if (!*(_QWORD *)(a1 + 328))
    goto LABEL_6;
  v6 = a1 + 312;
  std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<char *>,std::__wrap_iter<char *>>(__p, a2, a3, a3 - a2);
  v7 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(v6, (const void **)__p);
  if (v11 < 0)
    operator delete(__p[0]);
  if (a1 + 320 == v7)
LABEL_6:
    v8 = (unsigned int *)((char *)&boost::re_detail_106800::cpp_regex_traits_implementation<char>::lookup_classname_imp(char const*,char const*)const::masks
                        + 4 * (int)boost::re_detail_106800::get_default_class_id<char>(a2, (uint64_t)a3)
                        + 4);
  else
    v8 = (unsigned int *)(v7 + 56);
  return *v8;
}

void sub_2183075CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t boost::cpp_regex_traits<char>::toi(uint64_t a1, uint64_t *a2, _BYTE *a3, int a4)
{
  void *v7;
  const std::locale::facet *v8;
  int v9;
  _BYTE *v10;
  int v11;
  int v12;
  int v13;
  _QWORD *v14;
  uint64_t locale;
  uint64_t v16;
  std::locale v18;
  _QWORD v19[2];
  std::ios_base v20;
  uint64_t v21;
  int v22;
  _QWORD __sb[3];
  unint64_t v24;
  unint64_t v25;

  std::streambuf::basic_streambuf();
  __sb[0] = &unk_24D9393E8;
  __sb[2] = 0;
  v24 = 0;
  v25 = 0;
  v19[1] = 0;
  v20.__vftable = (std::ios_base_vtbl *)(MEMORY[0x24BEDB820] + 64);
  v19[0] = MEMORY[0x24BEDB820] + 24;
  std::ios_base::init(&v20, __sb);
  v21 = 0;
  v22 = -1;
  v7 = (void *)*a2;
  std::ios_base::getloc((const std::ios_base *)((char *)v19 + *(_QWORD *)(v19[0] - 24)));
  v8 = std::locale::use_facet(&v18, MEMORY[0x24BEDB588]);
  v9 = ((uint64_t (*)(const std::locale::facet *))v8->__vftable[1].~facet_0)(v8);
  v10 = memchr(v7, v9, a3 - (_BYTE *)v7);
  if (v10)
    a3 = v10;
  std::locale::~locale(&v18);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(__sb[0] + 24))(__sb, *a2, (uint64_t)&a3[-*a2]);
  std::ios_base::clear((std::ios_base *)((char *)v19 + *(_QWORD *)(v19[0] - 24)), 0);
  if (a4 >= 0)
    v11 = a4;
  else
    v11 = -a4;
  if (v11 == 8)
    v12 = 64;
  else
    v12 = 2;
  if (v11 == 16)
    v13 = 8;
  else
    v13 = v12;
  *(_DWORD *)((char *)&v19[1] + *(_QWORD *)(v19[0] - 24)) = *(_DWORD *)((_BYTE *)&v19[1] + *(_QWORD *)(v19[0] - 24)) & 0xFFFFFFB5 | v13;
  v18.__locale_ = 0;
  v14 = (_QWORD *)MEMORY[0x219A19510](v19, &v18);
  if ((*((_BYTE *)v14 + *(_QWORD *)(*v14 - 24) + 32) & 5) != 0)
  {
    locale = -1;
  }
  else
  {
    if (v24 >= v25)
      v16 = (*(uint64_t (**)(_QWORD *))(__sb[0] + 56))(__sb);
    else
      v16 = v25 - v24;
    *a2 = (uint64_t)&a3[-v16];
    locale = (uint64_t)v18.__locale_;
  }
  std::istream::~istream();
  std::streambuf::~streambuf();
  return locale;
}

void sub_2183077BC(_Unwind_Exception *a1)
{
  std::istream::~istream();
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t *boost::cpp_regex_traits<char>::get_catalog_name_inst()
{
  unsigned __int8 v0;

  if ((v0 & 1) == 0
  {
    boost::cpp_regex_traits<char>::get_catalog_name_inst(void)::s_name = 0;
    unk_254FD40F0 = 0;
    qword_254FD40F8 = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &boost::cpp_regex_traits<char>::get_catalog_name_inst(void)::s_name, &dword_217E69000);
  }
  return &boost::cpp_regex_traits<char>::get_catalog_name_inst(void)::s_name;
}

uint64_t *boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::do_assign(uint64_t *a1, const void *a2, uint64_t a3, unsigned int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v18;
  __int128 v19;
  __int128 v20;

  v19 = 0uLL;
  if (*a1)
  {
    v8 = operator new();
    v9 = *a1;
    *(_QWORD *)(v8 + 8) = 0;
    *(_QWORD *)(v8 + 16) = 0;
    *(_QWORD *)v8 = 0;
    *(_QWORD *)(v8 + 24) = *(_QWORD *)(v9 + 24);
    v10 = *(_QWORD *)(v9 + 32);
    *(_QWORD *)(v8 + 32) = v10;
    if (v10)
    {
      v11 = (unsigned int *)(v10 + 8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
    }
    *(_QWORD *)(v8 + 344) = 0;
    *(_QWORD *)(v8 + 352) = 0;
    *(_QWORD *)(v8 + 360) = 0;
    *(_QWORD *)(v8 + 384) = 0;
    *(_QWORD *)(v8 + 392) = 0;
    *(_QWORD *)(v8 + 376) = 0;
    *(_BYTE *)(v8 + 401) = 0;
    *(_QWORD *)(v8 + 48) = 0;
    *(_QWORD *)(v8 + 56) = 0;
    boost::shared_ptr<boost::re_detail_106800::basic_regex_implementation<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>>::shared_ptr<boost::re_detail_106800::basic_regex_implementation<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>>((uint64_t *)&v18, v8);
  }
  else
  {
    v13 = operator new();
    boost::re_detail_106800::regex_data<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::regex_data(v13);
    boost::shared_ptr<boost::re_detail_106800::basic_regex_implementation<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>>::shared_ptr<boost::re_detail_106800::basic_regex_implementation<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>>((uint64_t *)&v18, v13);
  }
  v14 = v18;
  v15 = v19;
  v18 = 0uLL;
  v19 = v14;
  v20 = v15;
  boost::detail::shared_count::~shared_count((unsigned int **)&v20 + 1);
  boost::detail::shared_count::~shared_count((unsigned int **)&v18 + 1);
  boost::re_detail_106800::basic_regex_implementation<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::assign(v19, a2, a3, a4);
  v16 = *(_OWORD *)a1;
  *(_OWORD *)a1 = v19;
  v19 = v16;
  boost::detail::shared_count::~shared_count((unsigned int **)&v19 + 1);
  return a1;
}

void sub_2183079C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  va_list va;

  va_start(va, a4);
  MEMORY[0x219A19A08](v4, 0x1070C40DD0CB916);
  boost::detail::shared_count::~shared_count((unsigned int **)va);
  _Unwind_Resume(a1);
}

void boost::re_detail_106800::basic_regex_implementation<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::assign(uint64_t a1, const void *a2, uint64_t a3, unsigned int a4)
{
  _BYTE v7[56];
  void *v8;
  void *v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  void *__p[3];
  int v16;

  boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::basic_regex_creator((uint64_t)v7, a1);
  v10 = 0xFFFFFFFF00000000;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  memset(__p, 0, sizeof(__p));
  v16 = 0;
  boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse((uint64_t)v7, a2, a3, a4);
  if (*(void **)((char *)__p + 4))
  {
    *(void **)((char *)&__p[1] + 4) = *(void **)((char *)__p + 4);
    operator delete(*(void **)((char *)__p + 4));
  }
  if (v8)
  {
    v9 = v8;
    operator delete(v8);
  }
}

void sub_218307AAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::~basic_regex_parser(&a9);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;

  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_equal<std::string>((uint64_t)a1, &v9, a2);
  result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v9, v6, v8);
    return v8;
  }
  return result;
}

void std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *v7;
  __int128 *v8;
  __int128 v9;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x40uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = (std::string *)(v6 + 32);
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    *((_QWORD *)v6 + 6) = *((_QWORD *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  *((_DWORD *)v6 + 14) = 0;
  *(_BYTE *)(a3 + 16) = 1;
}

void sub_218307BDC(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,MPSRNNMatrixId>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void boost::re_detail_106800::parser_buf<char,std::char_traits<char>>::~parser_buf()
{
  std::streambuf::~streambuf();
  JUMPOUT(0x219A19A08);
}

uint64_t boost::re_detail_106800::regex_data<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::regex_data(uint64_t a1)
{
  uint64_t *v2;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v2 = (uint64_t *)operator new();
  boost::cpp_regex_traits<char>::cpp_regex_traits(v2);
  boost::shared_ptr<boost::regex_traits_wrapper<boost::regex_traits<char,boost::cpp_regex_traits<char>>>>::shared_ptr<boost::regex_traits_wrapper<boost::regex_traits<char,boost::cpp_regex_traits<char>>>>((uint64_t *)(a1 + 24), (uint64_t)v2);
  *(_QWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 352) = 0;
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 392) = 0;
  *(_QWORD *)(a1 + 376) = 0;
  *(_BYTE *)(a1 + 401) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  return a1;
}

void sub_218307C88(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v5;

  v3 = v2;
  MEMORY[0x219A19A08](v3, 0x60C405C6656D0);
  v5 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(a1);
}

uint64_t *boost::cpp_regex_traits<char>::cpp_regex_traits(uint64_t *a1)
{
  std::locale v3;
  std::locale v4;

  MEMORY[0x219A19828](&v3);
  boost::re_detail_106800::cpp_regex_traits_base<char>::cpp_regex_traits_base((uint64_t)&v4, &v3);
  boost::object_cache<boost::re_detail_106800::cpp_regex_traits_base<char>,boost::re_detail_106800::cpp_regex_traits_implementation<char>>::get((uint64_t)&v4, 5uLL, a1);
  std::locale::~locale(&v4);
  std::locale::~locale(&v3);
  return a1;
}

void sub_218307D24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, std::locale a11)
{
  std::locale::~locale(&a11);
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

void boost::object_cache<boost::re_detail_106800::cpp_regex_traits_base<char>,boost::re_detail_106800::cpp_regex_traits_implementation<char>>::get(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  std::runtime_error v6;
  _BYTE v7[16];

  boost::scoped_static_mutex_lock::scoped_static_mutex_lock((uint64_t)v7, &boost::object_cache<boost::re_detail_106800::cpp_regex_traits_base<char>,boost::re_detail_106800::cpp_regex_traits_implementation<char>>::get(boost::re_detail_106800::cpp_regex_traits_base<char> const&,unsigned long)::mut, 1);
  if (!v7[8])
  {
    std::runtime_error::runtime_error(&v6, "Error in thread safety code: could not acquire a lock");
    boost::throw_exception<std::runtime_error>(&v6);
  }
  boost::object_cache<boost::re_detail_106800::cpp_regex_traits_base<char>,boost::re_detail_106800::cpp_regex_traits_implementation<char>>::do_get(a1, a2, a3);
  boost::scoped_static_mutex_lock::~scoped_static_mutex_lock((boost::scoped_static_mutex_lock *)v7);
}

void sub_218307DCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::runtime_error a9, char a10)
{
  std::runtime_error::~runtime_error(&a9);
  boost::scoped_static_mutex_lock::~scoped_static_mutex_lock((boost::scoped_static_mutex_lock *)&a10);
  _Unwind_Resume(a1);
}

uint64_t boost::re_detail_106800::cpp_regex_traits_base<char>::cpp_regex_traits_base(uint64_t a1, const std::locale *a2)
{
  std::locale *v4;
  std::locale v6;

  v4 = (std::locale *)MEMORY[0x219A19828]();
  boost::re_detail_106800::cpp_regex_traits_base<char>::imbue(v4, a2, &v6);
  std::locale::~locale(&v6);
  return a1;
}

void sub_218307E38(_Unwind_Exception *a1)
{
  std::locale *v1;

  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

void boost::object_cache<boost::re_detail_106800::cpp_regex_traits_base<char>,boost::re_detail_106800::cpp_regex_traits_implementation<char>>::do_get(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  unsigned __int8 v6;
  uint64_t *v7;
  _QWORD *v8;
  uint64_t v9;
  std::locale *v10;
  std::locale *v11;
  uint64_t v12;
  std::locale::__imp *locale;
  uint64_t v14;
  std::locale *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  _QWORD *v20;
  _QWORD *v21;
  void *v22;
  unint64_t v23;
  unsigned int **v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int **v27;
  unsigned int *v28;
  std::locale::__imp *v30;
  std::locale::__imp *v31;
  std::locale::__imp *v32;
  uint64_t v33;
  unsigned int *v34;
  unsigned int v35;
  std::locale v36;
  __int128 v37;
  uint64_t v38;
  void *v39;

  if ((v6 & 1) == 0
  {
    boost::object_cache<boost::re_detail_106800::cpp_regex_traits_base<char>,boost::re_detail_106800::cpp_regex_traits_implementation<char>>::do_get(boost::re_detail_106800::cpp_regex_traits_base<char> const&,unsigned long)::s_data = &boost::object_cache<boost::re_detail_106800::cpp_regex_traits_base<char>,boost::re_detail_106800::cpp_regex_traits_implementation<char>>::do_get(boost::re_detail_106800::cpp_regex_traits_base<char> const&,unsigned long)::s_data;
    off_254FD4178 = &boost::object_cache<boost::re_detail_106800::cpp_regex_traits_base<char>,boost::re_detail_106800::cpp_regex_traits_implementation<char>>::do_get(boost::re_detail_106800::cpp_regex_traits_base<char> const&,unsigned long)::s_data;
    qword_254FD4198 = 0;
    qword_254FD4190 = 0;
    qword_254FD4180 = 0;
    qword_254FD4188 = &qword_254FD4190;
    __cxa_atexit((void (*)(void *))boost::object_cache<boost::re_detail_106800::cpp_regex_traits_base<char>,boost::re_detail_106800::cpp_regex_traits_implementation<char>>::data::~data, &boost::object_cache<boost::re_detail_106800::cpp_regex_traits_base<char>,boost::re_detail_106800::cpp_regex_traits_implementation<char>>::do_get(boost::re_detail_106800::cpp_regex_traits_base<char> const&,unsigned long)::s_data, &dword_217E69000);
  }
  v7 = std::__tree<std::__value_type<boost::re_detail_106800::cpp_regex_traits_base<char>,std::__list_iterator<std::pair<boost::shared_ptr<boost::re_detail_106800::cpp_regex_traits_implementation<char> const>,boost::re_detail_106800::cpp_regex_traits_base<char> const*>,void *>>,std::__map_value_compare<boost::re_detail_106800::cpp_regex_traits_base<char>,std::__value_type<boost::re_detail_106800::cpp_regex_traits_base<char>,std::__list_iterator<std::pair<boost::shared_ptr<boost::re_detail_106800::cpp_regex_traits_implementation<char> const>,boost::re_detail_106800::cpp_regex_traits_base<char> const*>,void *>>,std::less<boost::re_detail_106800::cpp_regex_traits_base<char>>,true>,std::allocator<std::__value_type<boost::re_detail_106800::cpp_regex_traits_base<char>,std::__list_iterator<std::pair<boost::shared_ptr<boost::re_detail_106800::cpp_regex_traits_implementation<char> const>,boost::re_detail_106800::cpp_regex_traits_base<char> const*>,void *>>>>::find<boost::re_detail_106800::cpp_regex_traits_base<char>>((uint64_t)&qword_254FD4188, (_QWORD *)a1);
  if (v7 != &qword_254FD4190)
  {
    v8 = boost::object_cache<boost::re_detail_106800::cpp_regex_traits_base<char>,boost::re_detail_106800::cpp_regex_traits_implementation<char>>::do_get(boost::re_detail_106800::cpp_regex_traits_base<char> const&,unsigned long)::s_data;
    v9 = v7[8];
    if (boost::object_cache<boost::re_detail_106800::cpp_regex_traits_base<char>,boost::re_detail_106800::cpp_regex_traits_implementation<char>>::do_get(boost::re_detail_106800::cpp_regex_traits_base<char> const&,unsigned long)::s_data == (_UNKNOWN *)v9)
      goto LABEL_26;
    v10 = &v36;
    v36.__locale_ = (std::locale::__imp *)&v36;
    v37 = (unint64_t)&v36;
    if (&v36 == (std::locale *)v9 || (v11 = *(std::locale **)(v9 + 8), v11 == &v36))
    {
      v14 = -1;
    }
    else
    {
      v12 = *(_QWORD *)v9;
      *(_QWORD *)(v12 + 8) = v11;
      **(_QWORD **)(v9 + 8) = v12;
      locale = v36.__locale_;
      *((_QWORD *)v36.__locale_ + 1) = v9;
      *(_QWORD *)v9 = locale;
      *(_QWORD *)(v9 + 8) = &v36;
      --qword_254FD4180;
      v36.__locale_ = (std::locale::__imp *)v9;
      *((_QWORD *)&v37 + 1) = 1;
      v10 = (std::locale *)v37;
      if ((_UNKNOWN **)v37 == &boost::object_cache<boost::re_detail_106800::cpp_regex_traits_base<char>,boost::re_detail_106800::cpp_regex_traits_implementation<char>>::do_get(boost::re_detail_106800::cpp_regex_traits_base<char> const&,unsigned long)::s_data)
      {
LABEL_25:
        v7[8] = (uint64_t)boost::object_cache<boost::re_detail_106800::cpp_regex_traits_base<char>,boost::re_detail_106800::cpp_regex_traits_implementation<char>>::do_get(boost::re_detail_106800::cpp_regex_traits_base<char> const&,unsigned long)::s_data;
        std::__list_imp<std::pair<boost::shared_ptr<boost::re_detail_106800::cpp_regex_traits_implementation<char> const>,boost::re_detail_106800::cpp_regex_traits_base<char> const*>>::clear((unsigned int **)&v36);
        v8 = boost::object_cache<boost::re_detail_106800::cpp_regex_traits_base<char>,boost::re_detail_106800::cpp_regex_traits_implementation<char>>::do_get(boost::re_detail_106800::cpp_regex_traits_base<char> const&,unsigned long)::s_data;
LABEL_26:
        *a3 = v8[2];
        v33 = v8[3];
        a3[1] = v33;
        if (v33)
        {
          v34 = (unsigned int *)(v33 + 8);
          do
            v35 = __ldxr(v34);
          while (__stxr(v35 + 1, v34));
        }
        return;
      }
      v14 = 0;
    }
    v30 = v10[1].__locale_;
    if (v30 != (std::locale::__imp *)&boost::object_cache<boost::re_detail_106800::cpp_regex_traits_base<char>,boost::re_detail_106800::cpp_regex_traits_implementation<char>>::do_get(boost::re_detail_106800::cpp_regex_traits_base<char> const&,unsigned long)::s_data)
    {
      v31 = v10->__locale_;
      *((_QWORD *)v31 + 1) = v30;
      *(_QWORD *)v10[1].__locale_ = v31;
      v32 = (std::locale::__imp *)boost::object_cache<boost::re_detail_106800::cpp_regex_traits_base<char>,boost::re_detail_106800::cpp_regex_traits_implementation<char>>::do_get(boost::re_detail_106800::cpp_regex_traits_base<char> const&,unsigned long)::s_data;
      *((_QWORD *)boost::object_cache<boost::re_detail_106800::cpp_regex_traits_base<char>,boost::re_detail_106800::cpp_regex_traits_implementation<char>>::do_get(boost::re_detail_106800::cpp_regex_traits_base<char> const&,unsigned long)::s_data
      + 1) = v10;
      v10->__locale_ = v32;
      v10[1].__locale_ = (std::locale::__imp *)&boost::object_cache<boost::re_detail_106800::cpp_regex_traits_base<char>,boost::re_detail_106800::cpp_regex_traits_implementation<char>>::do_get(boost::re_detail_106800::cpp_regex_traits_base<char> const&,unsigned long)::s_data;
      boost::object_cache<boost::re_detail_106800::cpp_regex_traits_base<char>,boost::re_detail_106800::cpp_regex_traits_implementation<char>>::do_get(boost::re_detail_106800::cpp_regex_traits_base<char> const&,unsigned long)::s_data = v10;
      *((_QWORD *)&v37 + 1) = v14;
      ++qword_254FD4180;
    }
    goto LABEL_25;
  }
  v15 = (std::locale *)operator new();
  boost::re_detail_106800::cpp_regex_traits_implementation<char>::cpp_regex_traits_implementation(v15, a1);
  boost::shared_ptr<boost::re_detail_106800::cpp_regex_traits_implementation<char> const>::shared_ptr<boost::re_detail_106800::cpp_regex_traits_implementation<char>>(a3, (uint64_t)v15);
  v16 = *a3;
  v17 = a3[1];
  v36.__locale_ = (std::locale::__imp *)*a3;
  *(_QWORD *)&v37 = v17;
  if (v17)
  {
    v18 = (unsigned int *)(v17 + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  *((_QWORD *)&v37 + 1) = 0;
  v20 = operator new(0x28uLL);
  v20[2] = v16;
  v20[3] = v17;
  v36.__locale_ = 0;
  *(_QWORD *)&v37 = 0;
  v20[4] = 0;
  v21 = boost::object_cache<boost::re_detail_106800::cpp_regex_traits_base<char>,boost::re_detail_106800::cpp_regex_traits_implementation<char>>::do_get(boost::re_detail_106800::cpp_regex_traits_base<char> const&,unsigned long)::s_data;
  *v20 = boost::object_cache<boost::re_detail_106800::cpp_regex_traits_base<char>,boost::re_detail_106800::cpp_regex_traits_implementation<char>>::do_get(boost::re_detail_106800::cpp_regex_traits_base<char> const&,unsigned long)::s_data;
  v20[1] = &boost::object_cache<boost::re_detail_106800::cpp_regex_traits_base<char>,boost::re_detail_106800::cpp_regex_traits_implementation<char>>::do_get(boost::re_detail_106800::cpp_regex_traits_base<char> const&,unsigned long)::s_data;
  v21[1] = v20;
  boost::object_cache<boost::re_detail_106800::cpp_regex_traits_base<char>,boost::re_detail_106800::cpp_regex_traits_implementation<char>>::do_get(boost::re_detail_106800::cpp_regex_traits_base<char> const&,unsigned long)::s_data = v20;
  ++qword_254FD4180;
  boost::detail::shared_count::~shared_count((unsigned int **)&v37);
  v22 = boost::object_cache<boost::re_detail_106800::cpp_regex_traits_base<char>,boost::re_detail_106800::cpp_regex_traits_implementation<char>>::do_get(boost::re_detail_106800::cpp_regex_traits_base<char> const&,unsigned long)::s_data;
  std::locale::locale(&v36, (const std::locale *)a1);
  v37 = *(_OWORD *)(a1 + 8);
  v38 = *(_QWORD *)(a1 + 24);
  v39 = v22;
  std::__tree<std::__value_type<boost::re_detail_106800::cpp_regex_traits_base<char>,std::__list_iterator<std::pair<boost::shared_ptr<boost::re_detail_106800::cpp_regex_traits_implementation<char> const>,boost::re_detail_106800::cpp_regex_traits_base<char> const*>,void *>>,std::__map_value_compare<boost::re_detail_106800::cpp_regex_traits_base<char>,std::__value_type<boost::re_detail_106800::cpp_regex_traits_base<char>,std::__list_iterator<std::pair<boost::shared_ptr<boost::re_detail_106800::cpp_regex_traits_implementation<char> const>,boost::re_detail_106800::cpp_regex_traits_base<char> const*>,void *>>,std::less<boost::re_detail_106800::cpp_regex_traits_base<char>>,true>,std::allocator<std::__value_type<boost::re_detail_106800::cpp_regex_traits_base<char>,std::__list_iterator<std::pair<boost::shared_ptr<boost::re_detail_106800::cpp_regex_traits_implementation<char> const>,boost::re_detail_106800::cpp_regex_traits_base<char> const*>,void *>>>>::__emplace_unique_key_args<boost::re_detail_106800::cpp_regex_traits_base<char>,std::pair<boost::re_detail_106800::cpp_regex_traits_base<char>,std::__list_iterator<std::pair<boost::shared_ptr<boost::re_detail_106800::cpp_regex_traits_implementation<char> const>,boost::re_detail_106800::cpp_regex_traits_base<char> const*>,void *>>>(&qword_254FD4188, &v36, (uint64_t)&v36);
  std::locale::~locale(&v36);
  *((_QWORD *)boost::object_cache<boost::re_detail_106800::cpp_regex_traits_base<char>,boost::re_detail_106800::cpp_regex_traits_implementation<char>>::do_get(boost::re_detail_106800::cpp_regex_traits_base<char> const&,unsigned long)::s_data
  + 4) = std::__tree<std::__value_type<boost::re_detail_106800::cpp_regex_traits_base<char>,std::__list_iterator<std::pair<boost::shared_ptr<boost::re_detail_106800::cpp_regex_traits_implementation<char> const>,boost::re_detail_106800::cpp_regex_traits_base<char> const*>,void *>>,std::__map_value_compare<boost::re_detail_106800::cpp_regex_traits_base<char>,std::__value_type<boost::re_detail_106800::cpp_regex_traits_base<char>,std::__list_iterator<std::pair<boost::shared_ptr<boost::re_detail_106800::cpp_regex_traits_implementation<char> const>,boost::re_detail_106800::cpp_regex_traits_base<char> const*>,void *>>,std::less<boost::re_detail_106800::cpp_regex_traits_base<char>>,true>,std::allocator<std::__value_type<boost::re_detail_106800::cpp_regex_traits_base<char>,std::__list_iterator<std::pair<boost::shared_ptr<boost::re_detail_106800::cpp_regex_traits_implementation<char> const>,boost::re_detail_106800::cpp_regex_traits_base<char> const*>,void *>>>>::find<boost::re_detail_106800::cpp_regex_traits_base<char>>((uint64_t)&qword_254FD4188, (_QWORD *)a1)+ 4;
  v23 = qword_254FD4198;
  if (qword_254FD4198 > a2)
  {
    v24 = (unsigned int **)off_254FD4178;
    if (off_254FD4178 != (_UNKNOWN *)&boost::object_cache<boost::re_detail_106800::cpp_regex_traits_base<char>,boost::re_detail_106800::cpp_regex_traits_implementation<char>>::do_get(boost::re_detail_106800::cpp_regex_traits_base<char> const&,unsigned long)::s_data)
    {
      do
      {
        v25 = v24[3];
        if (v25 && (v26 = atomic_load(v25 + 2), v26 == 1))
        {
          v27 = (unsigned int **)v24[1];
          std::__tree<std::__value_type<boost::re_detail_106800::cpp_regex_traits_base<char>,std::__list_iterator<std::pair<boost::shared_ptr<boost::re_detail_106800::cpp_regex_traits_implementation<char> const>,boost::re_detail_106800::cpp_regex_traits_base<char> const*>,void *>>,std::__map_value_compare<boost::re_detail_106800::cpp_regex_traits_base<char>,std::__value_type<boost::re_detail_106800::cpp_regex_traits_base<char>,std::__list_iterator<std::pair<boost::shared_ptr<boost::re_detail_106800::cpp_regex_traits_implementation<char> const>,boost::re_detail_106800::cpp_regex_traits_base<char> const*>,void *>>,std::less<boost::re_detail_106800::cpp_regex_traits_base<char>>,true>,std::allocator<std::__value_type<boost::re_detail_106800::cpp_regex_traits_base<char>,std::__list_iterator<std::pair<boost::shared_ptr<boost::re_detail_106800::cpp_regex_traits_implementation<char> const>,boost::re_detail_106800::cpp_regex_traits_base<char> const*>,void *>>>>::__erase_unique<boost::re_detail_106800::cpp_regex_traits_base<char>>(&qword_254FD4188, v24[4]);
          v28 = *v24;
          *((_QWORD *)v28 + 1) = v24[1];
          *(_QWORD *)v24[1] = v28;
          --qword_254FD4180;
          boost::detail::shared_count::~shared_count(v24 + 3);
          operator delete(v24);
          --v23;
          v24 = v27;
        }
        else
        {
          v24 = (unsigned int **)v24[1];
        }
      }
      while (v24 != (unsigned int **)&boost::object_cache<boost::re_detail_106800::cpp_regex_traits_base<char>,boost::re_detail_106800::cpp_regex_traits_implementation<char>>::do_get(boost::re_detail_106800::cpp_regex_traits_base<char> const&,unsigned long)::s_data
           && v23 > a2);
    }
  }
}

void sub_218308180(_Unwind_Exception *a1)
{
  unsigned int **v1;

  boost::detail::shared_count::~shared_count(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::object_cache<boost::re_detail_106800::cpp_regex_traits_base<char>,boost::re_detail_106800::cpp_regex_traits_implementation<char>>::data::~data(uint64_t a1)
{
  std::__tree<std::__value_type<boost::re_detail_106800::cpp_regex_traits_base<char>,std::__list_iterator<std::pair<boost::shared_ptr<boost::re_detail_106800::cpp_regex_traits_implementation<char> const>,boost::re_detail_106800::cpp_regex_traits_base<char> const*>,void *>>,std::__map_value_compare<boost::re_detail_106800::cpp_regex_traits_base<char>,std::__value_type<boost::re_detail_106800::cpp_regex_traits_base<char>,std::__list_iterator<std::pair<boost::shared_ptr<boost::re_detail_106800::cpp_regex_traits_implementation<char> const>,boost::re_detail_106800::cpp_regex_traits_base<char> const*>,void *>>,std::less<boost::re_detail_106800::cpp_regex_traits_base<char>>,true>,std::allocator<std::__value_type<boost::re_detail_106800::cpp_regex_traits_base<char>,std::__list_iterator<std::pair<boost::shared_ptr<boost::re_detail_106800::cpp_regex_traits_implementation<char> const>,boost::re_detail_106800::cpp_regex_traits_base<char> const*>,void *>>>>::destroy(a1 + 24, *(std::locale **)(a1 + 32));
  std::__list_imp<std::pair<boost::shared_ptr<boost::re_detail_106800::cpp_regex_traits_implementation<char> const>,boost::re_detail_106800::cpp_regex_traits_base<char> const*>>::clear((unsigned int **)a1);
  return a1;
}

void std::__tree<std::__value_type<boost::re_detail_106800::cpp_regex_traits_base<char>,std::__list_iterator<std::pair<boost::shared_ptr<boost::re_detail_106800::cpp_regex_traits_implementation<char> const>,boost::re_detail_106800::cpp_regex_traits_base<char> const*>,void *>>,std::__map_value_compare<boost::re_detail_106800::cpp_regex_traits_base<char>,std::__value_type<boost::re_detail_106800::cpp_regex_traits_base<char>,std::__list_iterator<std::pair<boost::shared_ptr<boost::re_detail_106800::cpp_regex_traits_implementation<char> const>,boost::re_detail_106800::cpp_regex_traits_base<char> const*>,void *>>,std::less<boost::re_detail_106800::cpp_regex_traits_base<char>>,true>,std::allocator<std::__value_type<boost::re_detail_106800::cpp_regex_traits_base<char>,std::__list_iterator<std::pair<boost::shared_ptr<boost::re_detail_106800::cpp_regex_traits_implementation<char> const>,boost::re_detail_106800::cpp_regex_traits_base<char> const*>,void *>>>>::destroy(uint64_t a1, std::locale *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<boost::re_detail_106800::cpp_regex_traits_base<char>,std::__list_iterator<std::pair<boost::shared_ptr<boost::re_detail_106800::cpp_regex_traits_implementation<char> const>,boost::re_detail_106800::cpp_regex_traits_base<char> const*>,void *>>,std::__map_value_compare<boost::re_detail_106800::cpp_regex_traits_base<char>,std::__value_type<boost::re_detail_106800::cpp_regex_traits_base<char>,std::__list_iterator<std::pair<boost::shared_ptr<boost::re_detail_106800::cpp_regex_traits_implementation<char> const>,boost::re_detail_106800::cpp_regex_traits_base<char> const*>,void *>>,std::less<boost::re_detail_106800::cpp_regex_traits_base<char>>,true>,std::allocator<std::__value_type<boost::re_detail_106800::cpp_regex_traits_base<char>,std::__list_iterator<std::pair<boost::shared_ptr<boost::re_detail_106800::cpp_regex_traits_implementation<char> const>,boost::re_detail_106800::cpp_regex_traits_base<char> const*>,void *>>>>::destroy(a1, a2->__locale_);
    std::__tree<std::__value_type<boost::re_detail_106800::cpp_regex_traits_base<char>,std::__list_iterator<std::pair<boost::shared_ptr<boost::re_detail_106800::cpp_regex_traits_implementation<char> const>,boost::re_detail_106800::cpp_regex_traits_base<char> const*>,void *>>,std::__map_value_compare<boost::re_detail_106800::cpp_regex_traits_base<char>,std::__value_type<boost::re_detail_106800::cpp_regex_traits_base<char>,std::__list_iterator<std::pair<boost::shared_ptr<boost::re_detail_106800::cpp_regex_traits_implementation<char> const>,boost::re_detail_106800::cpp_regex_traits_base<char> const*>,void *>>,std::less<boost::re_detail_106800::cpp_regex_traits_base<char>>,true>,std::allocator<std::__value_type<boost::re_detail_106800::cpp_regex_traits_base<char>,std::__list_iterator<std::pair<boost::shared_ptr<boost::re_detail_106800::cpp_regex_traits_implementation<char> const>,boost::re_detail_106800::cpp_regex_traits_base<char> const*>,void *>>>>::destroy(a1, a2[1].__locale_);
    std::locale::~locale(a2 + 4);
    operator delete(a2);
  }
}

_QWORD *std::__tree<std::__value_type<boost::re_detail_106800::cpp_regex_traits_base<char>,std::__list_iterator<std::pair<boost::shared_ptr<boost::re_detail_106800::cpp_regex_traits_implementation<char> const>,boost::re_detail_106800::cpp_regex_traits_base<char> const*>,void *>>,std::__map_value_compare<boost::re_detail_106800::cpp_regex_traits_base<char>,std::__value_type<boost::re_detail_106800::cpp_regex_traits_base<char>,std::__list_iterator<std::pair<boost::shared_ptr<boost::re_detail_106800::cpp_regex_traits_implementation<char> const>,boost::re_detail_106800::cpp_regex_traits_base<char> const*>,void *>>,std::less<boost::re_detail_106800::cpp_regex_traits_base<char>>,true>,std::allocator<std::__value_type<boost::re_detail_106800::cpp_regex_traits_base<char>,std::__list_iterator<std::pair<boost::shared_ptr<boost::re_detail_106800::cpp_regex_traits_implementation<char> const>,boost::re_detail_106800::cpp_regex_traits_base<char> const*>,void *>>>>::find<boost::re_detail_106800::cpp_regex_traits_base<char>>(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *result;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;
  unint64_t v8;
  unint64_t v9;

  v3 = (_QWORD *)(a1 + 8);
  result = std::__tree<std::__value_type<boost::re_detail_106800::cpp_regex_traits_base<char>,std::__list_iterator<std::pair<boost::shared_ptr<boost::re_detail_106800::cpp_regex_traits_implementation<char> const>,boost::re_detail_106800::cpp_regex_traits_base<char> const*>,void *>>,std::__map_value_compare<boost::re_detail_106800::cpp_regex_traits_base<char>,std::__value_type<boost::re_detail_106800::cpp_regex_traits_base<char>,std::__list_iterator<std::pair<boost::shared_ptr<boost::re_detail_106800::cpp_regex_traits_implementation<char> const>,boost::re_detail_106800::cpp_regex_traits_base<char> const*>,void *>>,std::less<boost::re_detail_106800::cpp_regex_traits_base<char>>,true>,std::allocator<std::__value_type<boost::re_detail_106800::cpp_regex_traits_base<char>,std::__list_iterator<std::pair<boost::shared_ptr<boost::re_detail_106800::cpp_regex_traits_implementation<char> const>,boost::re_detail_106800::cpp_regex_traits_base<char> const*>,void *>>>>::__lower_bound<boost::re_detail_106800::cpp_regex_traits_base<char>>(a1, a2, *(_QWORD **)(a1 + 8), (_QWORD *)(a1 + 8));
  if (v3 != result)
  {
    v5 = a2[1];
    v6 = result[5];
    v7 = v5 >= v6;
    if (v5 == v6 && (v8 = a2[2], v9 = result[6], v7 = v8 >= v9, v8 == v9))
    {
      if (a2[3] >= result[7])
        return result;
    }
    else if (v7)
    {
      return result;
    }
  }
  return v3;
}

_QWORD *std::__tree<std::__value_type<boost::re_detail_106800::cpp_regex_traits_base<char>,std::__list_iterator<std::pair<boost::shared_ptr<boost::re_detail_106800::cpp_regex_traits_implementation<char> const>,boost::re_detail_106800::cpp_regex_traits_base<char> const*>,void *>>,std::__map_value_compare<boost::re_detail_106800::cpp_regex_traits_base<char>,std::__value_type<boost::re_detail_106800::cpp_regex_traits_base<char>,std::__list_iterator<std::pair<boost::shared_ptr<boost::re_detail_106800::cpp_regex_traits_implementation<char> const>,boost::re_detail_106800::cpp_regex_traits_base<char> const*>,void *>>,std::less<boost::re_detail_106800::cpp_regex_traits_base<char>>,true>,std::allocator<std::__value_type<boost::re_detail_106800::cpp_regex_traits_base<char>,std::__list_iterator<std::pair<boost::shared_ptr<boost::re_detail_106800::cpp_regex_traits_implementation<char> const>,boost::re_detail_106800::cpp_regex_traits_base<char> const*>,void *>>>>::__lower_bound<boost::re_detail_106800::cpp_regex_traits_base<char>>(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *result;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  BOOL v8;
  unint64_t v9;
  int v10;
  BOOL v11;
  _QWORD *v12;

  result = a4;
  if (a3)
  {
    v5 = a2[1];
    v6 = a2[2];
    do
    {
      v7 = a3[5];
      v8 = v7 >= v5;
      if (v7 == v5)
      {
        v9 = a3[6];
        v8 = v9 >= v6;
        if (v9 == v6)
          v8 = a3[7] >= a2[3];
      }
      v10 = !v8;
      v11 = v10 == 0;
      if (v10)
        v12 = a3 + 1;
      else
        v12 = a3;
      if (v11)
        result = a3;
      a3 = (_QWORD *)*v12;
    }
    while (*v12);
  }
  return result;
}

void std::__list_imp<std::pair<boost::shared_ptr<boost::re_detail_106800::cpp_regex_traits_implementation<char> const>,boost::re_detail_106800::cpp_regex_traits_base<char> const*>>::clear(unsigned int **a1)
{
  unsigned int *v2;
  unsigned int **v3;
  unsigned int *v4;
  unsigned int **v5;

  if (a1[2])
  {
    v2 = *a1;
    v3 = (unsigned int **)a1[1];
    v4 = *v3;
    *((_QWORD *)v4 + 1) = *((_QWORD *)*a1 + 1);
    **((_QWORD **)v2 + 1) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        v5 = (unsigned int **)v3[1];
        boost::detail::shared_count::~shared_count(v3 + 3);
        operator delete(v3);
        v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

std::locale *boost::re_detail_106800::cpp_regex_traits_implementation<char>::cpp_regex_traits_implementation(std::locale *a1, uint64_t a2)
{
  std::locale *v3;

  v3 = boost::re_detail_106800::cpp_regex_traits_char_layer<char>::cpp_regex_traits_char_layer(a1, a2);
  v3[36].__locale_ = (std::locale::__imp *)&v3[37];
  v3[37].__locale_ = 0;
  v3[40].__locale_ = 0;
  v3[41].__locale_ = 0;
  v3[38].__locale_ = 0;
  v3[39].__locale_ = (std::locale::__imp *)&v3[40];
  v3[43].__locale_ = 0;
  v3[44].__locale_ = 0;
  v3[42].__locale_ = (std::locale::__imp *)&v3[43];
  boost::re_detail_106800::cpp_regex_traits_implementation<char>::init((uint64_t)v3);
  return a1;
}

void sub_2183083E8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v4, *(_QWORD **)(v1 + 344));
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy(v3, *(char **)(v1 + 320));
  std::__tree<std::__value_type<int,std::string>,std::__map_value_compare<int,std::__value_type<int,std::string>,std::less<int>,true>,std::allocator<std::__value_type<int,std::string>>>::destroy(v2, *(char **)(v1 + 296));
  std::locale::~locale((std::locale *)v1);
  _Unwind_Resume(a1);
}

std::locale *boost::re_detail_106800::cpp_regex_traits_char_layer<char>::cpp_regex_traits_char_layer(std::locale *a1, uint64_t a2)
{
  std::locale *v4;
  __int128 v5;

  v4 = std::locale::locale(a1, (const std::locale *)a2);
  v5 = *(_OWORD *)(a2 + 8);
  v4[3].__locale_ = *(std::locale::__imp **)(a2 + 24);
  *(_OWORD *)&v4[1].__locale_ = v5;
  boost::re_detail_106800::cpp_regex_traits_char_layer<char>::init((uint64_t)v4);
  return a1;
}

void sub_21830845C(_Unwind_Exception *a1)
{
  std::locale *v1;

  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

uint64_t *boost::shared_ptr<boost::re_detail_106800::cpp_regex_traits_implementation<char> const>::shared_ptr<boost::re_detail_106800::cpp_regex_traits_implementation<char>>(uint64_t *a1, uint64_t a2)
{
  unsigned int *v3;
  unsigned int *v5;

  *a1 = a2;
  a1[1] = 0;
  boost::detail::shared_count::shared_count<boost::re_detail_106800::cpp_regex_traits_implementation<char>>(&v5, a2);
  v3 = (unsigned int *)a1[1];
  a1[1] = (uint64_t)v5;
  v5 = v3;
  boost::detail::shared_count::~shared_count(&v5);
  return a1;
}

void sub_2183084C4(_Unwind_Exception *a1)
{
  unsigned int **v1;

  boost::detail::shared_count::~shared_count(v1);
  _Unwind_Resume(a1);
}

_QWORD *boost::detail::shared_count::shared_count<boost::re_detail_106800::cpp_regex_traits_implementation<char>>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = 0;
  v4 = (_QWORD *)operator new();
  v4[1] = 0x100000001;
  *v4 = &unk_24D939480;
  v4[2] = a2;
  *a1 = v4;
  return a1;
}

void sub_218308538(void *a1)
{
  uint64_t v1;

  __cxa_begin_catch(a1);
  boost::checked_delete<boost::re_detail_106800::cpp_regex_traits_implementation<char>>(v1);
  __cxa_rethrow();
}

void sub_21830854C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t boost::checked_delete<boost::re_detail_106800::cpp_regex_traits_implementation<char>>(uint64_t result)
{
  uint64_t v1;

  if (result)
  {
    v1 = result;
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(result + 336, *(_QWORD **)(result + 344));
    std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy(v1 + 312, *(char **)(v1 + 320));
    std::__tree<std::__value_type<int,std::string>,std::__map_value_compare<int,std::__value_type<int,std::string>,std::less<int>,true>,std::allocator<std::__value_type<int,std::string>>>::destroy(v1 + 288, *(char **)(v1 + 296));
    std::locale::~locale((std::locale *)v1);
    JUMPOUT(0x219A19A08);
  }
  return result;
}

uint64_t boost::detail::sp_counted_impl_p<boost::re_detail_106800::cpp_regex_traits_implementation<char>>::dispose(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 16);
  if (v1)
  {
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v1 + 336, *(_QWORD **)(v1 + 344));
    std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy(v1 + 312, *(char **)(v1 + 320));
    std::__tree<std::__value_type<int,std::string>,std::__map_value_compare<int,std::__value_type<int,std::string>,std::less<int>,true>,std::allocator<std::__value_type<int,std::string>>>::destroy(v1 + 288, *(char **)(v1 + 296));
    std::locale::~locale((std::locale *)v1);
    JUMPOUT(0x219A19A08);
  }
  return result;
}

char *std::__tree<std::__value_type<boost::re_detail_106800::cpp_regex_traits_base<char>,std::__list_iterator<std::pair<boost::shared_ptr<boost::re_detail_106800::cpp_regex_traits_implementation<char> const>,boost::re_detail_106800::cpp_regex_traits_base<char> const*>,void *>>,std::__map_value_compare<boost::re_detail_106800::cpp_regex_traits_base<char>,std::__value_type<boost::re_detail_106800::cpp_regex_traits_base<char>,std::__list_iterator<std::pair<boost::shared_ptr<boost::re_detail_106800::cpp_regex_traits_implementation<char> const>,boost::re_detail_106800::cpp_regex_traits_base<char> const*>,void *>>,std::less<boost::re_detail_106800::cpp_regex_traits_base<char>>,true>,std::allocator<std::__value_type<boost::re_detail_106800::cpp_regex_traits_base<char>,std::__list_iterator<std::pair<boost::shared_ptr<boost::re_detail_106800::cpp_regex_traits_implementation<char> const>,boost::re_detail_106800::cpp_regex_traits_base<char> const*>,void *>>>>::__emplace_unique_key_args<boost::re_detail_106800::cpp_regex_traits_base<char>,std::pair<boost::re_detail_106800::cpp_regex_traits_base<char>,std::__list_iterator<std::pair<boost::shared_ptr<boost::re_detail_106800::cpp_regex_traits_implementation<char> const>,boost::re_detail_106800::cpp_regex_traits_base<char> const*>,void *>>>(uint64_t **a1, _QWORD *a2, uint64_t a3)
{
  void **v5;
  char *v6;
  uint64_t **v7;
  uint64_t v8;
  _QWORD v10[2];
  char v11;
  uint64_t v12;

  v5 = (void **)std::__tree<std::__value_type<boost::re_detail_106800::cpp_regex_traits_base<char>,std::__list_iterator<std::pair<boost::shared_ptr<boost::re_detail_106800::cpp_regex_traits_implementation<char> const>,boost::re_detail_106800::cpp_regex_traits_base<char> const*>,void *>>,std::__map_value_compare<boost::re_detail_106800::cpp_regex_traits_base<char>,std::__value_type<boost::re_detail_106800::cpp_regex_traits_base<char>,std::__list_iterator<std::pair<boost::shared_ptr<boost::re_detail_106800::cpp_regex_traits_implementation<char> const>,boost::re_detail_106800::cpp_regex_traits_base<char> const*>,void *>>,std::less<boost::re_detail_106800::cpp_regex_traits_base<char>>,true>,std::allocator<std::__value_type<boost::re_detail_106800::cpp_regex_traits_base<char>,std::__list_iterator<std::pair<boost::shared_ptr<boost::re_detail_106800::cpp_regex_traits_implementation<char> const>,boost::re_detail_106800::cpp_regex_traits_base<char> const*>,void *>>>>::__find_equal<boost::re_detail_106800::cpp_regex_traits_base<char>>((uint64_t)a1, &v12, a2);
  v6 = (char *)*v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = (char *)operator new(0x48uLL);
    v10[1] = a1 + 1;
    std::locale::locale((std::locale *)v6 + 4, (const std::locale *)a3);
    *(_OWORD *)(v6 + 40) = *(_OWORD *)(a3 + 8);
    v8 = *(_QWORD *)(a3 + 32);
    *((_QWORD *)v6 + 7) = *(_QWORD *)(a3 + 24);
    *((_QWORD *)v6 + 8) = v8;
    v11 = 1;
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v12, v7, (uint64_t *)v6);
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<boost::re_detail_106800::cpp_regex_traits_base<char>,std::__list_iterator<std::pair<boost::shared_ptr<boost::re_detail_106800::cpp_regex_traits_implementation<char> const>,boost::re_detail_106800::cpp_regex_traits_base<char> const*>,void *>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<boost::re_detail_106800::cpp_regex_traits_base<char>,std::__list_iterator<std::pair<boost::shared_ptr<boost::re_detail_106800::cpp_regex_traits_implementation<char> const>,boost::re_detail_106800::cpp_regex_traits_base<char> const*>,void *>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v6;
}

_QWORD *std::__tree<std::__value_type<boost::re_detail_106800::cpp_regex_traits_base<char>,std::__list_iterator<std::pair<boost::shared_ptr<boost::re_detail_106800::cpp_regex_traits_implementation<char> const>,boost::re_detail_106800::cpp_regex_traits_base<char> const*>,void *>>,std::__map_value_compare<boost::re_detail_106800::cpp_regex_traits_base<char>,std::__value_type<boost::re_detail_106800::cpp_regex_traits_base<char>,std::__list_iterator<std::pair<boost::shared_ptr<boost::re_detail_106800::cpp_regex_traits_implementation<char> const>,boost::re_detail_106800::cpp_regex_traits_base<char> const*>,void *>>,std::less<boost::re_detail_106800::cpp_regex_traits_base<char>>,true>,std::allocator<std::__value_type<boost::re_detail_106800::cpp_regex_traits_base<char>,std::__list_iterator<std::pair<boost::shared_ptr<boost::re_detail_106800::cpp_regex_traits_implementation<char> const>,boost::re_detail_106800::cpp_regex_traits_base<char> const*>,void *>>>>::__find_equal<boost::re_detail_106800::cpp_regex_traits_base<char>>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *result;
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;

  v5 = *(_QWORD **)(a1 + 8);
  result = (_QWORD *)(a1 + 8);
  v4 = v5;
  if (v5)
  {
    v6 = a3[1];
    v7 = a3[2];
    v8 = a3[3];
    while (1)
    {
      while (1)
      {
        v9 = v4;
        v10 = v4[5];
        if (v6 != v10)
          break;
        v11 = v9[6];
        if (v7 == v11)
        {
          v12 = v9[7];
          if (v8 >= v12)
          {
            if (v12 >= v8)
              goto LABEL_18;
            goto LABEL_15;
          }
        }
        else if (v7 >= v11)
        {
          if (v11 >= v7)
            goto LABEL_18;
          goto LABEL_15;
        }
LABEL_12:
        v4 = (_QWORD *)*v9;
        result = v9;
        if (!*v9)
          goto LABEL_18;
      }
      if (v6 < v10)
        goto LABEL_12;
      if (v10 >= v6)
        goto LABEL_18;
LABEL_15:
      result = v9 + 1;
      v4 = (_QWORD *)v9[1];
      if (!v4)
        goto LABEL_18;
    }
  }
  v9 = result;
LABEL_18:
  *a2 = v9;
  return result;
}

void std::unique_ptr<std::__tree_node<std::__value_type<boost::re_detail_106800::cpp_regex_traits_base<char>,std::__list_iterator<std::pair<boost::shared_ptr<boost::re_detail_106800::cpp_regex_traits_implementation<char> const>,boost::re_detail_106800::cpp_regex_traits_base<char> const*>,void *>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<boost::re_detail_106800::cpp_regex_traits_base<char>,std::__list_iterator<std::pair<boost::shared_ptr<boost::re_detail_106800::cpp_regex_traits_implementation<char> const>,boost::re_detail_106800::cpp_regex_traits_base<char> const*>,void *>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  std::locale *v2;

  v2 = *(std::locale **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::locale::~locale(v2 + 4);
    operator delete(v2);
  }
}

uint64_t std::__tree<std::__value_type<boost::re_detail_106800::cpp_regex_traits_base<char>,std::__list_iterator<std::pair<boost::shared_ptr<boost::re_detail_106800::cpp_regex_traits_implementation<char> const>,boost::re_detail_106800::cpp_regex_traits_base<char> const*>,void *>>,std::__map_value_compare<boost::re_detail_106800::cpp_regex_traits_base<char>,std::__value_type<boost::re_detail_106800::cpp_regex_traits_base<char>,std::__list_iterator<std::pair<boost::shared_ptr<boost::re_detail_106800::cpp_regex_traits_implementation<char> const>,boost::re_detail_106800::cpp_regex_traits_base<char> const*>,void *>>,std::less<boost::re_detail_106800::cpp_regex_traits_base<char>>,true>,std::allocator<std::__value_type<boost::re_detail_106800::cpp_regex_traits_base<char>,std::__list_iterator<std::pair<boost::shared_ptr<boost::re_detail_106800::cpp_regex_traits_implementation<char> const>,boost::re_detail_106800::cpp_regex_traits_base<char> const*>,void *>>>>::__erase_unique<boost::re_detail_106800::cpp_regex_traits_base<char>>(uint64_t **a1, _QWORD *a2)
{
  uint64_t *v3;
  std::locale *v4;

  v3 = std::__tree<std::__value_type<boost::re_detail_106800::cpp_regex_traits_base<char>,std::__list_iterator<std::pair<boost::shared_ptr<boost::re_detail_106800::cpp_regex_traits_implementation<char> const>,boost::re_detail_106800::cpp_regex_traits_base<char> const*>,void *>>,std::__map_value_compare<boost::re_detail_106800::cpp_regex_traits_base<char>,std::__value_type<boost::re_detail_106800::cpp_regex_traits_base<char>,std::__list_iterator<std::pair<boost::shared_ptr<boost::re_detail_106800::cpp_regex_traits_implementation<char> const>,boost::re_detail_106800::cpp_regex_traits_base<char> const*>,void *>>,std::less<boost::re_detail_106800::cpp_regex_traits_base<char>>,true>,std::allocator<std::__value_type<boost::re_detail_106800::cpp_regex_traits_base<char>,std::__list_iterator<std::pair<boost::shared_ptr<boost::re_detail_106800::cpp_regex_traits_implementation<char> const>,boost::re_detail_106800::cpp_regex_traits_base<char> const*>,void *>>>>::find<boost::re_detail_106800::cpp_regex_traits_base<char>>((uint64_t)a1, a2);
  if (a1 + 1 == (uint64_t **)v3)
    return 0;
  v4 = (std::locale *)v3;
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__remove_node_pointer(a1, v3);
  std::locale::~locale(v4 + 4);
  operator delete(v4);
  return 1;
}

uint64_t *boost::shared_ptr<boost::regex_traits_wrapper<boost::regex_traits<char,boost::cpp_regex_traits<char>>>>::shared_ptr<boost::regex_traits_wrapper<boost::regex_traits<char,boost::cpp_regex_traits<char>>>>(uint64_t *a1, uint64_t a2)
{
  unsigned int *v3;
  unsigned int *v5;

  *a1 = a2;
  a1[1] = 0;
  boost::detail::shared_count::shared_count<boost::regex_traits_wrapper<boost::regex_traits<char,boost::cpp_regex_traits<char>>>>(&v5, a2);
  v3 = (unsigned int *)a1[1];
  a1[1] = (uint64_t)v5;
  v5 = v3;
  boost::detail::shared_count::~shared_count(&v5);
  return a1;
}

void sub_218308860(_Unwind_Exception *a1)
{
  unsigned int **v1;

  boost::detail::shared_count::~shared_count(v1);
  _Unwind_Resume(a1);
}

_QWORD *boost::detail::shared_count::shared_count<boost::regex_traits_wrapper<boost::regex_traits<char,boost::cpp_regex_traits<char>>>>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = 0;
  v4 = (_QWORD *)operator new();
  v4[1] = 0x100000001;
  *v4 = &unk_24D9394E0;
  v4[2] = a2;
  *a1 = v4;
  return a1;
}

void sub_2183088D4(void *a1)
{
  uint64_t v1;

  __cxa_begin_catch(a1);
  boost::checked_delete<boost::regex_traits_wrapper<boost::regex_traits<char,boost::cpp_regex_traits<char>>>>(v1);
  __cxa_rethrow();
}

void sub_2183088E8(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t boost::checked_delete<boost::regex_traits_wrapper<boost::regex_traits<char,boost::cpp_regex_traits<char>>>>(uint64_t result)
{
  if (result)
  {
    boost::detail::shared_count::~shared_count((unsigned int **)(result + 8));
    JUMPOUT(0x219A19A08);
  }
  return result;
}

uint64_t boost::detail::sp_counted_impl_p<boost::regex_traits_wrapper<boost::regex_traits<char,boost::cpp_regex_traits<char>>>>::dispose(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 16);
  if (v1)
  {
    boost::detail::shared_count::~shared_count((unsigned int **)(v1 + 8));
    JUMPOUT(0x219A19A08);
  }
  return result;
}

uint64_t *boost::shared_ptr<boost::re_detail_106800::basic_regex_implementation<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>>::shared_ptr<boost::re_detail_106800::basic_regex_implementation<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>>(uint64_t *a1, uint64_t a2)
{
  unsigned int *v3;
  unsigned int *v5;

  *a1 = a2;
  a1[1] = 0;
  boost::detail::shared_count::shared_count<boost::re_detail_106800::basic_regex_implementation<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>>(&v5, a2);
  v3 = (unsigned int *)a1[1];
  a1[1] = (uint64_t)v5;
  v5 = v3;
  boost::detail::shared_count::~shared_count(&v5);
  return a1;
}

void sub_2183089D8(_Unwind_Exception *a1)
{
  unsigned int **v1;

  boost::detail::shared_count::~shared_count(v1);
  _Unwind_Resume(a1);
}

_QWORD *boost::detail::shared_count::shared_count<boost::re_detail_106800::basic_regex_implementation<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = 0;
  v4 = (_QWORD *)operator new();
  v4[1] = 0x100000001;
  *v4 = &unk_24D939540;
  v4[2] = a2;
  *a1 = v4;
  return a1;
}

void sub_218308A4C(void *a1)
{
  uint64_t v1;

  __cxa_begin_catch(a1);
  boost::checked_delete<boost::re_detail_106800::basic_regex_implementation<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>>(v1);
  __cxa_rethrow();
}

void sub_218308A60(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t boost::checked_delete<boost::re_detail_106800::basic_regex_implementation<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>>(uint64_t result)
{
  uint64_t v1;
  void *v2;
  void *v3;

  if (result)
  {
    v1 = result;
    v2 = *(void **)(result + 376);
    if (v2)
    {
      *(_QWORD *)(v1 + 384) = v2;
      operator delete(v2);
    }
    operator delete(*(void **)(v1 + 352));
    boost::detail::shared_count::~shared_count((unsigned int **)(v1 + 32));
    v3 = *(void **)v1;
    if (*(_QWORD *)v1)
    {
      *(_QWORD *)(v1 + 8) = v3;
      operator delete(v3);
    }
    JUMPOUT(0x219A19A08);
  }
  return result;
}

uint64_t boost::detail::sp_counted_impl_p<boost::re_detail_106800::basic_regex_implementation<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>>::dispose(uint64_t result)
{
  uint64_t v1;
  void *v2;
  void *v3;

  v1 = *(_QWORD *)(result + 16);
  if (v1)
  {
    v2 = *(void **)(v1 + 376);
    if (v2)
    {
      *(_QWORD *)(v1 + 384) = v2;
      operator delete(v2);
    }
    operator delete(*(void **)(v1 + 352));
    boost::detail::shared_count::~shared_count((unsigned int **)(v1 + 32));
    v3 = *(void **)v1;
    if (*(_QWORD *)v1)
    {
      *(_QWORD *)(v1 + 8) = v3;
      operator delete(v3);
    }
    JUMPOUT(0x219A19A08);
  }
  return result;
}

void boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse(uint64_t a1, const void *a2, uint64_t a3, unsigned int a4)
{
  int v8;
  _DWORD *appended;
  uint64_t (*v10)(uint64_t);
  BOOL v11;
  uint64_t v12;
  const char *v13;
  void *__p[2];
  char v15;

  *(_DWORD *)(*(_QWORD *)a1 + 40) = a4;
  v8 = (a4 >> 20) & 1;
  *(_BYTE *)(a1 + 24) = (a4 & 0x100000) != 0;
  *(_QWORD *)(a1 + 128) = a3;
  *(_QWORD *)(a1 + 136) = a2;
  *(_QWORD *)(a1 + 120) = a2;
  if (a2 == (const void *)a3 && (a4 & 0x1000003) != 0)
  {
    boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fail((std::string *)a1, 17, 0);
    return;
  }
  if ((a4 & 3) == 2)
  {
    v10 = boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse_literal;
LABEL_10:
    *(_QWORD *)(a1 + 104) = v10;
    *(_QWORD *)(a1 + 112) = 0;
    goto LABEL_11;
  }
  if ((a4 & 3) == 1)
  {
    v10 = boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse_basic;
    goto LABEL_10;
  }
  if ((a4 & 3) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "An invalid combination of regular expression syntax flags was used.");
    boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fail((std::string *)a1, 21, 0, (uint64_t)__p);
    goto LABEL_18;
  }
  *(_QWORD *)(a1 + 104) = boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse_extended;
  *(_QWORD *)(a1 + 112) = 0;
  appended = boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::append_state((uint64_t *)a1, 0, 0x18uLL);
  appended[4] = 0;
  *((_BYTE *)appended + 20) = (*(_DWORD *)(*(_QWORD *)a1 + 40) & 0x100000) != 0;
LABEL_11:
  v11 = boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse_all(a1);
  boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::unwind_alts((std::string *)a1, -1);
  v12 = *(_QWORD *)a1;
  *(_DWORD *)(*(_QWORD *)a1 + 40) = a4;
  if (v8 != *(unsigned __int8 *)(a1 + 24))
    *(_BYTE *)(a1 + 24) = v8;
  if (v11)
  {
    if (!*(_DWORD *)(v12 + 44))
    {
      *(_QWORD *)(v12 + 64) = (*(_DWORD *)(a1 + 144) + 1);
      boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::finalize((uint64_t *)a1, a2, a3);
    }
    return;
  }
  v13 = (const char *)(*(_QWORD *)(a1 + 136) - *(_QWORD *)(a1 + 120));
  std::string::basic_string[abi:ne180100]<0>(__p, "Found a closing) with no corresponding openening parenthesis.");
  boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fail((std::string *)a1, 8, v13, (uint64_t)__p);
LABEL_18:
  if (v15 < 0)
    operator delete(__p[0]);
}

void sub_218308D14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::~basic_regex_parser(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[23];
  if (v2)
  {
    a1[24] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[7];
  if (v3)
  {
    a1[8] = v3;
    operator delete(v3);
  }
  return a1;
}

uint64_t boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::basic_regex_creator(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;

  v3 = *(uint64_t **)(a2 + 24);
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 28) = 0;
  *(_BYTE *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 36) = 0;
  *(_BYTE *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a2 + 360) = *(_QWORD *)(a2 + 352);
  *(_DWORD *)(a2 + 44) = 0;
  *(_DWORD *)(a1 + 80) = boost::re_detail_106800::cpp_regex_traits_implementation<char>::lookup_classname(*v3, (char *)&boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::basic_regex_creator(boost::re_detail_106800::regex_data<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>> *)::w, boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::basic_regex_creator(boost::re_detail_106800::regex_data<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>> *)::s);
  *(_DWORD *)(a1 + 84) = boost::re_detail_106800::cpp_regex_traits_implementation<char>::lookup_classname(**(_QWORD **)(a1 + 8), boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::basic_regex_creator(boost::re_detail_106800::regex_data<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>> *)::s, boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::basic_regex_creator(boost::re_detail_106800::regex_data<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>> *)::l);
  *(_DWORD *)(a1 + 88) = boost::re_detail_106800::cpp_regex_traits_implementation<char>::lookup_classname(**(_QWORD **)(a1 + 8), boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::basic_regex_creator(boost::re_detail_106800::regex_data<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>> *)::l, boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::basic_regex_creator(boost::re_detail_106800::regex_data<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>> *)::u);
  *(_DWORD *)(a1 + 92) = boost::re_detail_106800::cpp_regex_traits_implementation<char>::lookup_classname(**(_QWORD **)(a1 + 8), boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::basic_regex_creator(boost::re_detail_106800::regex_data<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>> *)::u, "alpha");
  *(_DWORD *)(a1 + 96) = boost::re_detail_106800::cpp_regex_traits_implementation<char>::lookup_classname(**(_QWORD **)(a1 + 8), "alpha", "");
  *(_DWORD *)(*(_QWORD *)a1 + 368) = *(_DWORD *)(a1 + 80);
  return a1;
}

void sub_218308E5C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;

  v3 = v2;
  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 64) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

uint64_t boost::re_detail_106800::cpp_regex_traits_implementation<char>::lookup_classname(uint64_t a1, char *a2, char *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *p_p;
  uint64_t v9;
  char *v10;
  void *__p;
  uint64_t v13;
  unsigned __int8 v14;

  v6 = boost::re_detail_106800::cpp_regex_traits_implementation<char>::lookup_classname_imp(a1, a2, a3);
  if (!(_DWORD)v6)
  {
    std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<char *>,std::__wrap_iter<char *>>(&__p, a2, a3, a3 - a2);
    v7 = v14;
    if ((v14 & 0x80u) == 0)
      p_p = (char *)&__p;
    else
      p_p = (char *)__p;
    if ((v14 & 0x80u) != 0)
      v7 = v13;
    (*(void (**)(_QWORD, char *, char *))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8), p_p, &p_p[v7]);
    v9 = v14;
    if ((v14 & 0x80u) == 0)
      v10 = (char *)&__p;
    else
      v10 = (char *)__p;
    if ((v14 & 0x80u) != 0)
      v9 = v13;
    v6 = boost::re_detail_106800::cpp_regex_traits_implementation<char>::lookup_classname_imp(a1, v10, &v10[v9]);
    if ((char)v14 < 0)
      operator delete(__p);
  }
  return v6;
}

void sub_218308F3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fail(std::string *a1, int a2, const char *a3)
{
  std::string __p;

  boost::re_detail_106800::cpp_regex_traits_implementation<char>::error_string(**(_QWORD **)(a1->__r_.__value_.__r.__words[0] + 24), a2, &__p);
  boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fail(a1, a2, a3, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_218308FC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse_extended(std::string *a1)
{
  unsigned __int8 *v2;
  uint64_t v3;
  BOOL v5;
  int v6;
  int v7;
  int v8;
  int v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *size;
  unsigned __int8 *v15;
  unsigned int v16;
  BOOL v17;
  int v18;
  BOOL v19;
  const char *v20;
  void *__p[2];
  char v22;

  v2 = (unsigned __int8 *)a1[5].__r_.__value_.__r.__words[2];
  v3 = 0;
  switch(*(_BYTE *)(*(_QWORD *)a1->__r_.__value_.__l.__size_ + *v2 + 32))
  {
    case 1:
      return boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse_open_paren((uint64_t)a1);
    case 2:
      return v3;
    case 3:
      a1[5].__r_.__value_.__r.__words[2] = (std::string::size_type)(v2 + 1);
      v5 = (*(_DWORD *)(a1->__r_.__value_.__r.__words[0] + 40) & 0x400) == 0;
      v6 = 12;
      v7 = 4;
      goto LABEL_5;
    case 4:
      a1[5].__r_.__value_.__r.__words[2] = (std::string::size_type)(v2 + 1);
      v5 = (*(_DWORD *)(a1->__r_.__value_.__r.__words[0] + 40) & 0x400) == 0;
      v6 = 11;
      v7 = 3;
LABEL_5:
      if (v5)
        v8 = v7;
      else
        v8 = v6;
      boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::append_state((uint64_t *)a1, v8, 0x10uLL);
      return 1;
    case 5:
      a1[5].__r_.__value_.__r.__words[2] = (std::string::size_type)(v2 + 1);
      v9 = *(_DWORD *)(a1->__r_.__value_.__r.__words[0] + 40);
      v3 = 1;
      if ((v9 & 0x1000) != 0)
        v10 = 2;
      else
        v10 = 1;
      if ((v9 & 0x2000) != 0)
        v11 = 0;
      else
        v11 = v10;
      *((_BYTE *)boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::append_state((uint64_t *)a1, 5, 0x18uLL)+ 16) = v11;
      return v3;
    case 6:
      if (v2 != (unsigned __int8 *)a1[5].__r_.__value_.__l.__data_)
      {
        a1[5].__r_.__value_.__r.__words[2] = (std::string::size_type)(v2 + 1);
        v12 = 0;
        goto LABEL_21;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "The repeat operator \"*\" cannot start a regular expression.");
      boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fail(a1, 13, 0, (uint64_t)__p);
      goto LABEL_44;
    case 7:
      if (v2 == (unsigned __int8 *)a1[5].__r_.__value_.__l.__data_)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "The repeat operator \"+\" cannot start a regular expression.");
        boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fail(a1, 13, 0, (uint64_t)__p);
        goto LABEL_44;
      }
      a1[5].__r_.__value_.__r.__words[2] = (std::string::size_type)(v2 + 1);
      v12 = 1;
LABEL_21:
      v13 = -1;
      return boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse_repeat((uint64_t)a1, v12, v13);
    case 8:
      if (v2 == (unsigned __int8 *)a1[5].__r_.__value_.__l.__data_)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "The repeat operator \"?\" cannot start a regular expression.");
        boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fail(a1, 13, 0, (uint64_t)__p);
LABEL_44:
        if (v22 < 0)
          operator delete(__p[0]);
        return 0;
      }
      a1[5].__r_.__value_.__r.__words[2] = (std::string::size_type)(v2 + 1);
      v12 = 0;
      v13 = 1;
      return boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse_repeat((uint64_t)a1, v12, v13);
    case 9:
      return boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse_set((uint64_t)a1);
    case 0xB:
      return boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse_alt((uint64_t)a1);
    case 0xC:
      return boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse_extended_escape((uint64_t)a1);
    case 0xD:
      if ((*(_DWORD *)(a1->__r_.__value_.__r.__words[0] + 40) & 0xA00) != 0x800)
        return boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse_literal((uint64_t)a1);
      size = (unsigned __int8 *)a1[5].__r_.__value_.__l.__size_;
      v3 = 1;
      break;
    case 0xF:
      a1[5].__r_.__value_.__r.__words[2] = (std::string::size_type)(v2 + 1);
      return boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse_repeat_range((uint64_t)a1, 0);
    case 0x10:
      if ((*(_BYTE *)(a1->__r_.__value_.__r.__words[0] + 41) & 2) == 0)
        return boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse_literal((uint64_t)a1);
      v20 = (const char *)&v2[-a1[5].__r_.__value_.__r.__words[0]];
      std::string::basic_string[abi:ne180100]<0>(__p, "Found a closing repetition operator } with no corresponding {.");
      boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fail(a1, 9, v20, (uint64_t)__p);
      goto LABEL_44;
    case 0x1A:
      if ((*(_BYTE *)(a1->__r_.__value_.__r.__words[0] + 42) & 2) == 0)
        return boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse_literal((uint64_t)a1);
      return boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse_alt((uint64_t)a1);
    default:
      return boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse_literal((uint64_t)a1);
  }
  while (v2 != size)
  {
    v15 = v2 + 1;
    a1[5].__r_.__value_.__r.__words[2] = (std::string::size_type)(v2 + 1);
    v16 = *v2;
    v17 = v16 > 0xD;
    v18 = (1 << v16) & 0x3400;
    v19 = v17 || v18 == 0;
    v2 = v15;
    if (!v19)
      return v3;
  }
  return 1;
}

void sub_218309320(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_DWORD *boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::append_state(uint64_t *a1, int a2, unint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *result;

  if (a2 == 13)
    *((_BYTE *)a1 + 32) = 1;
  v5 = *a1;
  v6 = *(_QWORD *)(*a1 + 352);
  v7 = (*(_QWORD *)(*a1 + 360) - v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)(*a1 + 360) = v6 + v7;
  v8 = a1[2];
  if (v8)
  {
    *(_QWORD *)(v8 + 8) = v7 - v8 + v6;
    v5 = *a1;
  }
  v9 = boost::re_detail_106800::raw_storage::extend((boost::re_detail_106800::raw_storage *)(v5 + 344), a3);
  a1[2] = v9;
  *(_QWORD *)(v9 + 8) = 0;
  result = (_DWORD *)a1[2];
  *result = a2;
  return result;
}

uint64_t boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse_basic(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  uint64_t result;
  int v4;
  char v5;
  char v6;
  _DWORD *v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  _DWORD *v11;

  v1 = *(unsigned __int8 **)(a1 + 136);
  switch(*(_BYTE *)(**(_QWORD **)(a1 + 8) + *v1 + 32))
  {
    case 3:
      *(_QWORD *)(a1 + 136) = v1 + 1;
      v2 = 4;
      goto LABEL_7;
    case 4:
      *(_QWORD *)(a1 + 136) = v1 + 1;
      v2 = 3;
LABEL_7:
      boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::append_state((uint64_t *)a1, v2, 0x10uLL);
      return 1;
    case 5:
      *(_QWORD *)(a1 + 136) = v1 + 1;
      v4 = *(_DWORD *)(*(_QWORD *)a1 + 40);
      if ((v4 & 0x1000) != 0)
        v5 = 2;
      else
        v5 = 1;
      if ((v4 & 0x2000) != 0)
        v6 = 0;
      else
        v6 = v5;
      *((_BYTE *)boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::append_state((uint64_t *)a1, 5, 0x18uLL)+ 16) = v6;
      return 1;
    case 6:
      v7 = *(_DWORD **)(a1 + 16);
      if (!v7 || *v7 == 3)
        goto LABEL_27;
      *(_QWORD *)(a1 + 136) = v1 + 1;
      v8 = 0;
      goto LABEL_23;
    case 7:
      v9 = *(_DWORD **)(a1 + 16);
      if (!v9 || *v9 == 3 || (*(_BYTE *)(*(_QWORD *)a1 + 41) & 0x10) == 0)
        goto LABEL_27;
      *(_QWORD *)(a1 + 136) = v1 + 1;
      v8 = 1;
LABEL_23:
      v10 = -1;
      goto LABEL_31;
    case 8:
      v11 = *(_DWORD **)(a1 + 16);
      if (!v11 || *v11 == 3 || (*(_BYTE *)(*(_QWORD *)a1 + 41) & 0x10) == 0)
        goto LABEL_27;
      *(_QWORD *)(a1 + 136) = v1 + 1;
      v8 = 0;
      v10 = 1;
LABEL_31:
      result = boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse_repeat(a1, v8, v10);
      break;
    case 9:
      return boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse_set(a1);
    case 0xA:
    case 0xB:
      goto LABEL_27;
    case 0xC:
      return boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse_basic_escape((std::string *)a1);
    default:
      if (*(_BYTE *)(**(_QWORD **)(a1 + 8) + *v1 + 32) == 26 && (*(_BYTE *)(*(_QWORD *)a1 + 42) & 2) != 0)
        result = boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse_alt(a1);
      else
LABEL_27:
        result = boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse_literal(a1);
      break;
  }
  return result;
}

uint64_t boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse_literal(uint64_t a1)
{
  if ((*(_DWORD *)(*(_QWORD *)a1 + 40) & 0xA03) != 0x800
    || !boost::cpp_regex_traits<char>::isctype(*(_QWORD *)(a1 + 8), **(char **)(a1 + 136), *(_DWORD *)(a1 + 84)))
  {
    boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::append_literal((_QWORD *)a1, **(char **)(a1 + 136));
  }
  ++*(_QWORD *)(a1 + 136);
  return 1;
}

void boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fail(std::string *a1, int a2, const char *a3, uint64_t a4)
{
  std::string __p;

  if (*(char *)(a4 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
  else
    __p = *(std::string *)a4;
  boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fail(a1, a2, (uint64_t)a3, &__p, a3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_218309644(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse_all(uint64_t a1)
{
  unsigned int v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(_QWORD *);
  uint64_t v7;
  _QWORD *v8;
  _BOOL8 result;
  void *__p[2];
  char v11;

  v2 = *(_DWORD *)(a1 + 180) + 1;
  *(_DWORD *)(a1 + 180) = v2;
  if (v2 >= 0x191)
  {
    v3 = (const char *)(*(_QWORD *)(a1 + 136) - *(_QWORD *)(a1 + 120));
    std::string::basic_string[abi:ne180100]<0>(__p, "Exceeded nested brace limit.");
    boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fail((std::string *)a1, 18, v3, (uint64_t)__p);
    if (v11 < 0)
      operator delete(__p[0]);
  }
  do
  {
    v5 = *(_QWORD *)(a1 + 128);
    v4 = *(_QWORD *)(a1 + 136);
    if (v4 == v5)
      break;
    v6 = *(uint64_t (**)(_QWORD *))(a1 + 104);
    v7 = *(_QWORD *)(a1 + 112);
    v8 = (_QWORD *)(a1 + (v7 >> 1));
    if ((v7 & 1) != 0)
      v6 = *(uint64_t (**)(_QWORD *))(*v8 + v6);
  }
  while ((v6(v8) & 1) != 0);
  result = v4 == v5;
  --*(_DWORD *)(a1 + 180);
  return result;
}

void sub_21830971C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::unwind_alts(std::string *a1, uint64_t a2)
{
  std::string::pointer data;
  char *v4;
  const char *v5;
  std::string::size_type v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  void *__p[2];
  char v13;

  if (a1[7].__r_.__value_.__r.__words[0] != *(_QWORD *)(a1->__r_.__value_.__r.__words[0] + 360)
                                           - *(_QWORD *)(a1->__r_.__value_.__r.__words[0] + 352))
    goto LABEL_8;
  v4 = (char *)a1[7].__r_.__value_.__r.__words[2];
  data = a1[8].__r_.__value_.__l.__data_;
  if (data == v4)
    return 1;
  if (*((_QWORD *)data - 1) <= a2 || (*(_DWORD *)(a1->__r_.__value_.__r.__words[0] + 40) & 0x1000003) == 0)
  {
    while (data != v4)
    {
      v9 = *((_QWORD *)data - 1);
      v7 = (std::string::size_type)(data - 8);
      v8 = v9;
      if (v9 <= a2)
        break;
      a1[8].__r_.__value_.__r.__words[0] = v7;
      v10 = *(_QWORD *)(a1->__r_.__value_.__r.__words[0] + 352);
      v11 = (*(_QWORD *)(a1->__r_.__value_.__r.__words[0] + 360) - v10 + 7) & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)(a1->__r_.__value_.__r.__words[0] + 360) = v10 + v11;
      *(_QWORD *)(v10 + v8 + 16) = v11 - v8;
LABEL_8:
      v4 = (char *)a1[7].__r_.__value_.__r.__words[2];
      data = a1[8].__r_.__value_.__l.__data_;
    }
    return 1;
  }
  v5 = (const char *)(a1[5].__r_.__value_.__r.__words[2] - a1[5].__r_.__value_.__r.__words[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "Can't terminate a sub-expression with an alternation operator |.");
  boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fail(a1, 17, v5, (uint64_t)__p);
  if (v13 < 0)
    operator delete(__p[0]);
  return 0;
}

uint64_t *boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::finalize(uint64_t *result, const void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  size_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  _OWORD *v14;
  __n128 v15;
  uint64_t v16;
  unint64_t v17;
  int restart_type;
  uint64_t v19;
  char v20;

  if (!*(_DWORD *)(*result + 44))
  {
    v5 = (uint64_t)result;
    boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::append_state(result, 6, 0x10uLL);
    v6 = *(_QWORD *)v5;
    *(_QWORD *)(v6 + 56) = a3 - (_QWORD)a2;
    v7 = (_BYTE *)boost::re_detail_106800::raw_storage::extend((boost::re_detail_106800::raw_storage *)(v6 + 344), a3 - (_QWORD)a2 + 1);
    v8 = v7;
    *(_QWORD *)(*(_QWORD *)v5 + 48) = v7;
    v9 = a3 - (_QWORD)a2;
    if (v9)
      memmove(v7, a2, v9);
    v8[v9] = 0;
    v10 = *(_QWORD *)v5;
    *(_DWORD *)(v10 + 44) = 0;
    v11 = *(_QWORD *)(v10 + 352);
    *(_QWORD *)(v10 + 72) = v11;
    boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fixup_pointers(v5, v11);
    v13 = *(_QWORD *)v5;
    if (*(_BYTE *)(v5 + 48))
    {
      *(_BYTE *)(v13 + 400) = 1;
      result = (uint64_t *)boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fixup_recursions(v5, *(int **)(v13 + 72));
      v13 = *(_QWORD *)v5;
      if (*(_DWORD *)(*(_QWORD *)v5 + 44))
        return result;
    }
    else
    {
      *(_BYTE *)(v13 + 400) = 0;
    }
    boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::create_startmaps(v5, *(int **)(v13 + 72), v12);
    v14 = *(_OWORD **)v5;
    v15 = 0uLL;
    *(_OWORD *)((char *)v14 + 84) = 0u;
    v14 = (_OWORD *)((char *)v14 + 84);
    v14[14] = 0u;
    v14[15] = 0u;
    v14[12] = 0u;
    v14[13] = 0u;
    v14[10] = 0u;
    v14[11] = 0u;
    v14[8] = 0u;
    v14[9] = 0u;
    v14[6] = 0u;
    v14[7] = 0u;
    v14[4] = 0u;
    v14[5] = 0u;
    v14[2] = 0u;
    v14[3] = 0u;
    v14[1] = 0u;
    v16 = *(_QWORD *)v5;
    *(_DWORD *)(*(_QWORD *)v5 + 340) = 0;
    *(_QWORD *)(v5 + 40) = 0;
    if (*(_BYTE *)(v5 + 48))
    {
      v17 = *(_QWORD *)(v16 + 64) + 1;
      v20 = 0;
      std::vector<unsigned char>::assign((char **)(v5 + 56), v17, &v20);
      v16 = *(_QWORD *)v5;
    }
    boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::create_startmap(v5, *(_QWORD *)(v16 + 72), (char *)(v16 + 84), (_DWORD *)(v16 + 340), 3u, v15);
    restart_type = boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::get_restart_type(v5, *(_QWORD *)(*(_QWORD *)v5 + 72));
    v19 = *(_QWORD *)v5;
    *(_DWORD *)(v19 + 80) = restart_type;
    return (uint64_t *)boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::probe_leading_repeat(v5, *(int **)(v19 + 72));
  }
  return result;
}

uint64_t boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse_open_paren(uint64_t a1)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  _QWORD *v4;
  int v5;
  int v7;
  int v9;
  unsigned __int8 *v10;
  unint64_t v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  unsigned __int8 **v20;
  char *v21;
  _DWORD *appended;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _DWORD *v35;

  v2 = *(unsigned __int8 **)(a1 + 128);
  v3 = (unsigned __int8 *)(*(_QWORD *)(a1 + 136) + 1);
  *(_QWORD *)(a1 + 136) = v3;
  if (v3 == v2)
    goto LABEL_42;
  v4 = *(_QWORD **)a1;
  v5 = *(_DWORD *)(*(_QWORD *)a1 + 40);
  if ((v5 & 0x203) == 0 || (*(_DWORD *)(*(_QWORD *)a1 + 40) & 0x1003) == 4097)
  {
    v7 = *(unsigned __int8 *)(**(_QWORD **)(a1 + 8) + *v3 + 32);
    if (v7 == 6)
      return boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse_perl_verb(a1);
    if (v7 == 8)
      return boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse_perl_extension(a1);
  }
  if ((v5 & 0x400000) != 0)
  {
    v9 = 0;
  }
  else
  {
    v9 = *(_DWORD *)(a1 + 144) + 1;
    *(_DWORD *)(a1 + 144) = v9;
    if ((v5 & 0x800000) != 0)
    {
      v10 = &v3[~*(_QWORD *)(a1 + 120)];
      v12 = (char *)v4[48];
      v11 = v4[49];
      if ((unint64_t)v12 >= v11)
      {
        v14 = (char *)v4[47];
        v15 = (v12 - v14) >> 4;
        v16 = v15 + 1;
        if ((unint64_t)(v15 + 1) >> 60)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v17 = v11 - (_QWORD)v14;
        if (v17 >> 3 > v16)
          v16 = v17 >> 3;
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF0)
          v18 = 0xFFFFFFFFFFFFFFFLL;
        else
          v18 = v16;
        if (v18)
        {
          v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::flexible_type>>((uint64_t)(v4 + 49), v18);
          v14 = (char *)v4[47];
          v12 = (char *)v4[48];
        }
        else
        {
          v19 = 0;
        }
        v20 = (unsigned __int8 **)&v19[16 * v15];
        v21 = &v19[16 * v18];
        *v20 = v10;
        v20[1] = 0;
        v13 = v20 + 2;
        if (v12 != v14)
        {
          do
          {
            *((_OWORD *)v20 - 1) = *((_OWORD *)v12 - 1);
            v20 -= 2;
            v12 -= 16;
          }
          while (v12 != v14);
          v14 = (char *)v4[47];
        }
        v4[47] = v20;
        v4[48] = v13;
        v4[49] = v21;
        if (v14)
          operator delete(v14);
      }
      else
      {
        *(_QWORD *)v12 = v10;
        *((_QWORD *)v12 + 1) = 0;
        v13 = v12 + 16;
      }
      v4[48] = v13;
    }
  }
  appended = boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::append_state((uint64_t *)a1, 0, 0x18uLL);
  appended[4] = v9;
  v23 = *(_QWORD *)a1;
  v24 = *(_DWORD *)(*(_QWORD *)a1 + 40);
  *((_BYTE *)appended + 20) = (v24 & 0x100000) != 0;
  v25 = *(_QWORD *)(v23 + 352);
  v26 = (uint64_t)appended - v25;
  v27 = *(_QWORD *)(a1 + 168);
  v28 = (*(_QWORD *)(v23 + 360) - v25 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)(v23 + 360) = v25 + v28;
  *(_QWORD *)(a1 + 168) = v28;
  v29 = *(_BYTE *)(a1 + 176);
  *(_BYTE *)(a1 + 176) = 0;
  v30 = *(_DWORD *)(a1 + 148);
  *(_DWORD *)(a1 + 148) = -1;
  boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse_all(a1);
  v31 = 0;
  if (boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::unwind_alts((std::string *)a1, v26))
  {
    if (*(_BYTE *)(a1 + 176))
      *((_BYTE *)boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::append_state((uint64_t *)a1, 28, 0x18uLL)+ 16) = (v24 & 0x100000) != 0;
    v32 = *(_QWORD *)a1;
    *(_DWORD *)(*(_QWORD *)a1 + 40) = v24;
    if (((v24 >> 20) & 1) != *(_BYTE *)(a1 + 24))
      *(_BYTE *)(a1 + 24) = (v24 & 0x100000) != 0;
    *(_BYTE *)(a1 + 176) = v29;
    *(_DWORD *)(a1 + 148) = v30;
    v3 = *(unsigned __int8 **)(a1 + 136);
    if (v3 != *(unsigned __int8 **)(a1 + 128))
    {
      if (*(_BYTE *)(**(_QWORD **)(a1 + 8) + *v3 + 32) == 2)
      {
        if (v9 && (v24 & 0x800000) != 0)
        {
          v33 = (v9 - 1);
          v34 = *(_QWORD *)(v32 + 376);
          if (v33 >= (*(_QWORD *)(v32 + 384) - v34) >> 4)
            std::vector<turi::flex_type_enum>::__throw_out_of_range[abi:ne180100]();
          *(_QWORD *)(v34 + 16 * v33 + 8) = &v3[-*(_QWORD *)(a1 + 120)];
        }
        else
        {
          LODWORD(v33) = v9 - 1;
        }
        *(_QWORD *)(a1 + 136) = v3 + 1;
        v31 = 1;
        v35 = boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::append_state((uint64_t *)a1, 1, 0x18uLL);
        v35[4] = v9;
        *((_BYTE *)v35 + 20) = (*(_DWORD *)(*(_QWORD *)a1 + 40) & 0x100000) != 0;
        *(_QWORD *)(a1 + 160) = v26;
        *(_QWORD *)(a1 + 168) = v27;
        if (v33 <= 0x1E)
          *(_DWORD *)(a1 + 36) |= 1 << v33;
        return v31;
      }
      return 0;
    }
LABEL_42:
    boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fail((std::string *)a1, 8, (const char *)&v3[-*(_QWORD *)(a1 + 120)]);
    return 0;
  }
  return v31;
}

uint64_t boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse_extended_escape(uint64_t a1)
{
  char *v2;
  char *v3;
  char *v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t result;
  const char *v10;
  _BOOL8 v11;
  uint64_t *v12;
  int v13;
  _DWORD *v14;
  unsigned int **v15;
  int v16;
  char v17;
  char v18;
  uint64_t v19;
  char *v20;
  const char *v21;
  int v22;
  _OWORD *v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  int v27;
  char *v28;
  uint64_t v29;
  unsigned int v30;
  BOOL v31;
  char v32;
  int v34;
  int v35;
  char *appended;
  const char *v37;
  uint64_t v38;
  char v39;
  char *v40;
  unsigned __int8 *v41;
  uint64_t v42;
  unsigned __int8 *v43;
  unint64_t v44;
  uint64_t v45;
  const char *v46;
  _DWORD *v47;
  unsigned __int8 *v48;
  unsigned int v49;
  const char *v50;
  unsigned __int8 *v51;
  void *__p;
  _QWORD *v53;
  uint64_t v54;
  void *v55;
  void *v56;
  uint64_t v57;
  __int16 v58;
  int v59;
  int v60;
  char v61;
  _QWORD **v62;
  _QWORD *v63;
  uint64_t v64;

  v2 = *(char **)(a1 + 128);
  v3 = *(char **)(a1 + 136);
  v4 = v3 + 1;
  *(_QWORD *)(a1 + 136) = v3 + 1;
  if (v3 + 1 == v2)
  {
    v10 = &v4[-*(_QWORD *)(a1 + 120)];
    std::string::basic_string[abi:ne180100]<0>(&__p, "Incomplete escape sequence found.");
    boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fail((std::string *)a1, 5, v10, (uint64_t)&__p);
LABEL_5:
    if (SHIBYTE(v54) < 0)
      operator delete(__p);
    return 0;
  }
  v5 = *(uint64_t **)(a1 + 8);
  v6 = *v5;
  v7 = 0;
  v8 = 0;
  switch(*(_BYTE *)(*v5 + *v4 + 32))
  {
    case 0x11:
      return boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse_backref(a1);
    case 0x12:
      *(_QWORD *)(a1 + 136) = v3 + 2;
      v12 = (uint64_t *)a1;
      v13 = 7;
      goto LABEL_32;
    case 0x13:
      *(_QWORD *)(a1 + 136) = v3 + 2;
      v12 = (uint64_t *)a1;
      v13 = 8;
      goto LABEL_32;
    case 0x14:
      *(_QWORD *)(a1 + 136) = v3 + 2;
      v12 = (uint64_t *)a1;
      v13 = 9;
      goto LABEL_32;
    case 0x15:
      *(_QWORD *)(a1 + 136) = v3 + 2;
      v12 = (uint64_t *)a1;
      v13 = 10;
      goto LABEL_32;
    case 0x16:
      goto LABEL_41;
    case 0x17:
      v7 = 1;
      goto LABEL_41;
    case 0x18:
      *(_QWORD *)(a1 + 136) = v3 + 2;
      v12 = (uint64_t *)a1;
      v13 = 11;
      goto LABEL_32;
    case 0x19:
      *(_QWORD *)(a1 + 136) = v3 + 2;
      v12 = (uint64_t *)a1;
      v13 = 12;
      goto LABEL_32;
    case 0x21:
      if ((*(_WORD *)(*(_QWORD *)a1 + 40) & 0x203) == 0)
        goto LABEL_40;
      goto LABEL_46;
    case 0x30:
      return boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse_QE(a1);
    case 0x31:
      *(_QWORD *)(a1 + 136) = v3 + 2;
      v12 = (uint64_t *)a1;
      v13 = 19;
      goto LABEL_32;
    case 0x32:
      *(_QWORD *)(a1 + 136) = v3 + 2;
      v16 = *(_DWORD *)(*(_QWORD *)a1 + 40);
      v11 = 1;
      if ((v16 & 0x1000) != 0)
        v17 = 2;
      else
        v17 = 1;
      if ((v16 & 0x2000) != 0)
        v18 = 0;
      else
        v18 = v17;
      *((_BYTE *)boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::append_state((uint64_t *)a1, 5, 0x18uLL)+ 16) = v18;
      return v11;
    case 0x33:
      *(_QWORD *)(a1 + 136) = v3 + 2;
      v12 = (uint64_t *)a1;
      v13 = 20;
      goto LABEL_32;
    case 0x34:
      *(_QWORD *)(a1 + 136) = v3 + 2;
      v12 = (uint64_t *)a1;
      v13 = 21;
LABEL_32:
      boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::append_state(v12, v13, 0x10uLL);
      return 1;
    case 0x36:
      goto LABEL_34;
    case 0x37:
      v8 = 1;
LABEL_34:
      v20 = v3 + 2;
      *(_QWORD *)(a1 + 136) = v3 + 2;
      if (v3 + 2 == v2)
      {
        v26 = &v2[-*(_QWORD *)(a1 + 120)];
        std::string::basic_string[abi:ne180100]<0>(&__p, "Incomplete property escape found.");
        boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fail((std::string *)a1, 5, v26, (uint64_t)&__p);
        goto LABEL_5;
      }
      if (*(_BYTE *)(v6 + *v20 + 32) == 15)
      {
        while (*(_BYTE *)(v6 + *v20 + 32) != 16)
        {
          *(_QWORD *)(a1 + 136) = ++v20;
          if (v20 == v2)
          {
            v21 = &v2[-*(_QWORD *)(a1 + 120)];
            std::string::basic_string[abi:ne180100]<0>(&__p, "Closing } missing from property escape sequence.");
            boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fail((std::string *)a1, 5, v21, (uint64_t)&__p);
            goto LABEL_5;
          }
        }
        *(_QWORD *)(a1 + 136) = v20 + 1;
        v27 = boost::re_detail_106800::cpp_regex_traits_implementation<char>::lookup_classname(v6, v3 + 3, v20);
      }
      else
      {
        v27 = boost::re_detail_106800::cpp_regex_traits_implementation<char>::lookup_classname(v6, v3 + 2, v3 + 3);
        ++*(_QWORD *)(a1 + 136);
      }
      if (!v27)
      {
        v37 = (const char *)(*(_QWORD *)(a1 + 136) - *(_QWORD *)(a1 + 120));
        std::string::basic_string[abi:ne180100]<0>(&__p, "Escape sequence was neither a valid property nor a valid character class name.");
        boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fail((std::string *)a1, 4, v37, (uint64_t)&__p);
        goto LABEL_5;
      }
      __p = &v53;
      v53 = 0;
      v54 = 0;
      v55 = 0;
      v56 = 0;
      v57 = 0;
      v63 = 0;
      v64 = 0;
      v62 = &v63;
      v58 = 0;
      v60 = 0;
      if (v8)
        LOBYTE(v58) = 1;
      v59 = v27;
      v61 = 0;
      appended = boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::append_set(a1, (uint64_t)&__p);
      v11 = appended != 0;
      if (!appended)
        boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fail((std::string *)a1, 4, (const char *)(*(_QWORD *)(a1 + 136) - *(_QWORD *)(a1 + 120)));
      boost::re_detail_106800::basic_char_set<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::~basic_char_set((uint64_t)&__p);
      return v11;
    case 0x39:
      if ((*(_WORD *)(*(_QWORD *)a1 + 40) & 0x203) != 0)
        goto LABEL_40;
      v28 = v3 + 2;
      *(_QWORD *)(a1 + 136) = v3 + 2;
      if (v3 + 2 == v2)
        goto LABEL_98;
      v29 = *v28;
      v30 = *(unsigned __int8 *)(v6 + v29 + 32);
      v31 = v30 == 20;
      if (v30 == 25)
        v31 = 1;
      v32 = v30 == 15 || v31;
      if (v30 > 0x19 || ((1 << v30) & 0x2108000) == 0)
      {
        v35 = 0;
      }
      else
      {
        v28 = v3 + 3;
        *(_QWORD *)(a1 + 136) = v3 + 3;
        if (v3 + 3 == v2)
        {
LABEL_98:
          v46 = &v2[-*(_QWORD *)(a1 + 120)];
          std::string::basic_string[abi:ne180100]<0>(&__p, boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse_extended_escape(void)::incomplete_message[0]);
          boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fail((std::string *)a1, 5, v46, (uint64_t)&__p);
          goto LABEL_5;
        }
        if (v30 == 20)
          v34 = 21;
        else
          v34 = 25;
        if (v30 == 15)
          v35 = 16;
        else
          v35 = v34;
        LODWORD(v29) = *v28;
      }
      if ((_DWORD)v29 == 45)
      {
        *(_QWORD *)(a1 + 136) = ++v28;
        if (v28 == v2)
          goto LABEL_98;
      }
      v51 = (unsigned __int8 *)v28;
      v38 = boost::cpp_regex_traits<char>::toi((uint64_t)v5, (uint64_t *)&v51, v2, 10);
      v39 = v32 ^ 1;
      if (v38 >= 0)
        v39 = 1;
      if ((v39 & 1) == 0)
      {
        v41 = *(unsigned __int8 **)(a1 + 128);
        v40 = *(char **)(a1 + 136);
        if (v40 == (char *)v41)
        {
          v38 = 10000;
        }
        else
        {
          v42 = **(_QWORD **)(a1 + 8);
          v43 = *(unsigned __int8 **)(a1 + 136);
          while (v35 != *(unsigned __int8 *)(v42 + *v43 + 32))
          {
            *(_QWORD *)(a1 + 136) = ++v43;
            if (v43 == v41)
            {
              v43 = v41;
              break;
            }
          }
          if (v40 == (char *)v43)
          {
            v38 = 10000;
          }
          else
          {
            v44 = 0;
            do
            {
              v45 = *v40++;
              v44 ^= (v44 << 6) + (v44 >> 2) + 2654435769u + v45;
            }
            while (v40 != (char *)v43);
            v38 = v44 % 0x7FFFD8EE + 10000;
          }
          v40 = (char *)v43;
        }
        v51 = (unsigned __int8 *)v40;
      }
      if ((_DWORD)v29 == 45)
        v38 = (*(_DWORD *)(a1 + 144) + 1) - v38;
      if ((unint64_t)(v38 - 1) > 0x1E)
      {
        if (v38 >= 10001
          && (int)boost::re_detail_106800::named_subexpressions::get_id(*(unsigned int ***)a1, v38) >= 1
          && (int)boost::re_detail_106800::named_subexpressions::get_id(*(unsigned int ***)a1, v38) <= 32)
        {
          v49 = *(_DWORD *)(a1 + 36);
          if (((v49 >> (boost::re_detail_106800::named_subexpressions::get_id(*(unsigned int ***)a1, v38) - 1)) & 1) != 0)
            goto LABEL_107;
        }
      }
      else if (((*(_DWORD *)(a1 + 36) >> (v38 - 1)) & 1) != 0)
      {
LABEL_107:
        *(_QWORD *)(a1 + 136) = v51;
        v47 = boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::append_state((uint64_t *)a1, 13, 0x18uLL);
        v47[4] = v38;
        *((_BYTE *)v47 + 20) = (*(_DWORD *)(*(_QWORD *)a1 + 40) & 0x100000) != 0;
        v48 = v51;
        *(_QWORD *)(a1 + 136) = v51;
        v11 = 1;
        if (v30 > 0x19 || ((1 << v30) & 0x2108000) == 0)
          return v11;
        if (v48 != *(unsigned __int8 **)(a1 + 128) && v35 == *(unsigned __int8 *)(**(_QWORD **)(a1 + 8) + *v48 + 32))
        {
          *(_QWORD *)(a1 + 136) = v48 + 1;
          return v11;
        }
        v50 = (const char *)&v48[-*(_QWORD *)(a1 + 120)];
        std::string::basic_string[abi:ne180100]<0>(&__p, boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse_extended_escape(void)::incomplete_message[0]);
        boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fail((std::string *)a1, 5, v50, (uint64_t)&__p);
        goto LABEL_5;
      }
      boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fail((std::string *)a1, 6, (const char *)(*(_QWORD *)(a1 + 136) - *(_QWORD *)(a1 + 120)));
      return 0;
    case 0x3A:
      if ((*(_WORD *)(*(_QWORD *)a1 + 40) & 0x203) != 0)
        goto LABEL_40;
      v14 = boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::append_state((uint64_t *)a1, 0, 0x18uLL);
      v14[4] = -5;
      v15 = *(unsigned int ***)a1;
      *((_BYTE *)v14 + 20) = (*(_DWORD *)(*(_QWORD *)a1 + 40) & 0x100000) != 0;
      v15[45] = (unsigned int *)((char *)v15[44] + (((char *)v15[45] - (char *)v15[44] + 7) & 0xFFFFFFFFFFFFFFF8));
      ++*(_QWORD *)(a1 + 136);
      return 1;
    case 0x3B:
      if ((*(_WORD *)(*(_QWORD *)a1 + 40) & 0x203) == 0)
      {
        v19 = *(_QWORD *)(a1 + 120);
        *(_QWORD *)(a1 + 120) = "(?>\\x0D\\x0A?|[\\x0A\\x0B\\x0C\\x85])";
        *(_QWORD *)(a1 + 128) = "";
        *(_QWORD *)(a1 + 136) = "(?>\\x0D\\x0A?|[\\x0A\\x0B\\x0C\\x85])";
        result = boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse_all(a1);
        *(_QWORD *)(a1 + 128) = v2;
        *(_QWORD *)(a1 + 136) = v3 + 2;
        *(_QWORD *)(a1 + 120) = v19;
        return result;
      }
LABEL_40:
      v7 = 0;
LABEL_41:
      v22 = boost::re_detail_106800::cpp_regex_traits_implementation<char>::lookup_classname(v6, v4, v3 + 2);
      if (v22)
      {
        __p = &v53;
        v53 = 0;
        v54 = 0;
        v55 = 0;
        v56 = 0;
        v57 = 0;
        v63 = 0;
        v64 = 0;
        v62 = &v63;
        v58 = 0;
        v60 = 0;
        if (v7)
          LOBYTE(v58) = 1;
        v59 = v22;
        v61 = 0;
        v23 = boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::append_set(a1, (uint64_t)&__p);
        v11 = v23 != 0;
        v24 = *(_QWORD *)(a1 + 136);
        if (v23)
          *(_QWORD *)(a1 + 136) = v24 + 1;
        else
          boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fail((std::string *)a1, 4, (const char *)(v24 - *(_QWORD *)(a1 + 120)));
        std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)&v62, v63);
        if (v55)
        {
          v56 = v55;
          operator delete(v55);
        }
        std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)&__p, v53);
      }
      else
      {
LABEL_46:
        v25 = boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::unescape_character((std::string *)a1);
        boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::append_literal((_QWORD *)a1, v25);
        return 1;
      }
      return v11;
    default:
      goto LABEL_46;
  }
}

void sub_21830A5CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse_repeat(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 *v6;
  char *v7;
  BOOL v8;
  _BOOL4 v9;
  int v10;
  BOOL v11;
  int v12;
  _DWORD *v13;
  int v14;
  const char *v15;
  const char *v16;
  uint64_t v17;
  unsigned int v19;
  uint64_t v20;
  char v21;
  _DWORD *appended;
  uint64_t v23;
  char *inserted;
  char *v25;
  _DWORD *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unsigned __int8 *v30;
  char v31;
  char *v32;
  char v33;
  _BOOL4 v34;
  uint64_t v35;
  int v36;
  int v38;
  char *v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  _DWORD *v43;
  void *__p[2];
  char v45;

  v7 = *(char **)(a1 + 128);
  v6 = *(unsigned __int8 **)(a1 + 136);
  if (v6 == (unsigned __int8 *)v7
    || ((*(_DWORD *)(*(_QWORD *)a1 + 40) & 0x203) != 0
      ? (v8 = (*(_DWORD *)(*(_QWORD *)a1 + 40) & 0x1003) == 4097)
      : (v8 = 1),
        !v8))
  {
    v10 = 0;
    v11 = 1;
    goto LABEL_23;
  }
  if ((*(_DWORD *)(*(_QWORD *)a1 + 40) & 0xA03) == 0x800)
  {
    while (1)
    {
      v9 = boost::cpp_regex_traits<char>::isctype(*(_QWORD *)(a1 + 8), (char)*v6, *(_DWORD *)(a1 + 84));
      v7 = *(char **)(a1 + 128);
      v6 = *(unsigned __int8 **)(a1 + 136);
      if (!v9)
        break;
      *(_QWORD *)(a1 + 136) = ++v6;
      if (v6 == (unsigned __int8 *)v7)
        goto LABEL_19;
    }
  }
  if (v6 == (unsigned __int8 *)v7)
  {
LABEL_19:
    v10 = 0;
    v11 = 1;
LABEL_22:
    v6 = (unsigned __int8 *)v7;
    goto LABEL_23;
  }
  v12 = *(unsigned __int8 *)(**(_QWORD **)(a1 + 8) + *v6 + 32);
  v11 = v12 != 8;
  if (v12 == 8)
    *(_QWORD *)(a1 + 136) = ++v6;
  if (v6 == (unsigned __int8 *)v7)
  {
    v10 = 0;
    goto LABEL_22;
  }
  if ((*(_BYTE *)(*(_QWORD *)a1 + 40) & 3) != 0 || *(_BYTE *)(**(_QWORD **)(a1 + 8) + *v6 + 32) != 7)
  {
    v10 = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 136) = ++v6;
    v10 = 1;
  }
LABEL_23:
  v13 = *(_DWORD **)(a1 + 16);
  if (!v13)
  {
    v16 = (const char *)&v6[-*(_QWORD *)(a1 + 120)];
    std::string::basic_string[abi:ne180100]<0>(__p, "Nothing to repeat.");
    boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fail((std::string *)a1, 13, v16, (uint64_t)__p);
    if (v45 < 0)
      operator delete(__p[0]);
    return 0;
  }
  v14 = *v13;
  if (*v13 > 0x1Au)
  {
LABEL_36:
    v23 = (uint64_t)v13 - *(_QWORD *)(*(_QWORD *)a1 + 352);
    goto LABEL_38;
  }
  if (((1 << v14) & 0x4331F99) != 0)
  {
    v15 = (const char *)&v6[-*(_QWORD *)(a1 + 120)];
LABEL_27:
    boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fail((std::string *)a1, 13, v15);
    return 0;
  }
  if (v14 != 1)
  {
    if (v14 == 2)
    {
      v19 = v13[4];
      if (v19 >= 2)
      {
        v20 = v19 - 1;
        v21 = *((_BYTE *)v13 + v20 + 24);
        v13[4] = v20;
        appended = boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::append_state((uint64_t *)a1, 2, 0x19uLL);
        appended[4] = 1;
        *((_BYTE *)appended + 24) = v21;
        v23 = *(_QWORD *)(a1 + 16) - *(_QWORD *)(*(_QWORD *)a1 + 352);
        goto LABEL_38;
      }
    }
    goto LABEL_36;
  }
  v23 = *(_QWORD *)(a1 + 160);
LABEL_38:
  inserted = boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::insert_state((_QWORD *)a1, v23, 18, 0x138uLL);
  *((_QWORD *)inserted + 36) = a2;
  *((_QWORD *)inserted + 37) = a3;
  inserted[309] = v11;
  inserted[308] = 0;
  v25 = &inserted[-*(_QWORD *)(*(_QWORD *)a1 + 352)];
  v26 = boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::append_state((uint64_t *)a1, 16, 0x18uLL);
  *((_QWORD *)v26 + 2) = v25 - (char *)v26 + *(_QWORD *)(*(_QWORD *)a1 + 352);
  v27 = *(_QWORD *)(*(_QWORD *)a1 + 352);
  v28 = (*(_QWORD *)(*(_QWORD *)a1 + 360) - v27 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)(*(_QWORD *)a1 + 360) = v27 + v28;
  *(_QWORD *)&v25[v27 + 16] = v28 - (_QWORD)v25;
  if (!v10)
    return 1;
  v29 = *(_QWORD *)(a1 + 128);
  v30 = *(unsigned __int8 **)(a1 + 136);
  if (v30 != (unsigned __int8 *)v29)
  {
    v31 = 0;
    v32 = *(char **)(a1 + 136);
LABEL_41:
    while (1)
    {
      v33 = v31;
      if ((*(_DWORD *)(*(_QWORD *)a1 + 40) & 0xA03) == 0x800)
        break;
LABEL_46:
      if (v32 == (char *)v29)
        goto LABEL_62;
      v35 = **(_QWORD **)(a1 + 8);
      v36 = *(unsigned __int8 *)(v35 + *v32 + 32);
      if (v36 == 1)
      {
        if ((unint64_t)(v32 + 2) >= v29
          || *(_BYTE *)(v35 + v32[1] + 32) != 8
          || *(_BYTE *)(v35 + v32[2] + 32) != 13)
        {
          goto LABEL_62;
        }
        while (v30 != (unsigned __int8 *)v29)
        {
          v32 = (char *)(v30 + 1);
          *(_QWORD *)(a1 + 136) = v30 + 1;
          v38 = *(unsigned __int8 *)(v35 + *v30++ + 32);
          if (v38 == 2)
          {
            v31 = 1;
            v30 = (unsigned __int8 *)v32;
            goto LABEL_41;
          }
        }
        v31 = 1;
        v30 = (unsigned __int8 *)v29;
        v32 = (char *)v29;
      }
      else
      {
        if ((v36 - 6) < 3 || v36 == 15)
        {
          v15 = &v32[-*(_QWORD *)(a1 + 120)];
          goto LABEL_27;
        }
        v31 = 1;
        if ((v33 & 1) == 0)
          goto LABEL_62;
      }
    }
    while (v32 != (char *)v29)
    {
      v34 = boost::cpp_regex_traits<char>::isctype(*(_QWORD *)(a1 + 8), *v32, *(_DWORD *)(a1 + 84));
      v29 = *(_QWORD *)(a1 + 128);
      v30 = *(unsigned __int8 **)(a1 + 136);
      if (!v34)
      {
        v32 = *(char **)(a1 + 136);
        goto LABEL_46;
      }
      v32 = (char *)(v30 + 1);
      *(_QWORD *)(a1 + 136) = v30 + 1;
    }
  }
LABEL_62:
  v39 = boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::insert_state((_QWORD *)a1, v23, 0, 0x18uLL);
  *((_DWORD *)v39 + 4) = -3;
  v39[20] = (*(_DWORD *)(*(_QWORD *)a1 + 40) & 0x100000) != 0;
  v40 = boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::insert_state((_QWORD *)a1, v23 + 24, 16, 0x18uLL);
  v41 = *(_QWORD *)(*(_QWORD *)a1 + 352);
  v42 = (*(_QWORD *)(*(_QWORD *)a1 + 360) - v41 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)(*(_QWORD *)a1 + 360) = v41 + v42;
  *((_QWORD *)v40 + 2) = v41 - (_QWORD)v40 + v42;
  v17 = 1;
  v43 = boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::append_state((uint64_t *)a1, 1, 0x18uLL);
  v43[4] = -3;
  *((_BYTE *)v43 + 20) = (*(_DWORD *)(*(_QWORD *)a1 + 40) & 0x100000) != 0;
  return v17;
}

void sub_21830AA94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse_repeat_range(uint64_t a1, int a2)
{
  char *v3;
  uint64_t *v4;
  _BOOL4 v6;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  _BOOL4 v12;
  char *v13;
  char *i;
  const char *v15;
  uint64_t v17;
  char *v18;
  unsigned int v19;
  const char *v20;
  unint64_t v21;
  char *v22;
  unint64_t v23;
  _BOOL4 v24;
  unsigned __int8 *v25;
  const char *v26;
  uint64_t v27;
  char *v28;
  unsigned int v29;
  uint64_t v30;
  unsigned __int8 *v31;
  unsigned int v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  unsigned int v39;
  uint64_t v40;
  char *v41;
  unsigned int v42;
  unsigned __int8 *v43;
  unsigned int v44;
  const char *v45;
  void *__p[2];
  char v47;

  v4 = (uint64_t *)(a1 + 136);
  v3 = *(char **)(a1 + 136);
  if (v3 == *(char **)(a1 + 128))
  {
    v7 = *(char **)(a1 + 136);
  }
  else
  {
    while (1)
    {
      v6 = boost::cpp_regex_traits<char>::isctype(*(_QWORD *)(a1 + 8), *v3, *(_DWORD *)(a1 + 84));
      v7 = *(char **)(a1 + 128);
      v8 = *(char **)(a1 + 136);
      if (!v6)
        break;
      v3 = v8 + 1;
      *v4 = (uint64_t)v3;
      if (v3 == v7)
        goto LABEL_13;
    }
    if (v8 != v7)
    {
      v9 = boost::cpp_regex_traits<char>::toi(*(_QWORD *)(a1 + 8), v4, v7, 10);
      if ((v9 & 0x8000000000000000) == 0)
      {
        v10 = *(char **)(a1 + 136);
        if (v10 == *(char **)(a1 + 128))
        {
          v13 = *(char **)(a1 + 136);
        }
        else
        {
          v11 = v9;
          while (1)
          {
            v12 = boost::cpp_regex_traits<char>::isctype(*(_QWORD *)(a1 + 8), *v10, *(_DWORD *)(a1 + 84));
            v13 = *(char **)(a1 + 128);
            i = *(char **)(a1 + 136);
            if (!v12)
              break;
            v10 = i + 1;
            *v4 = (uint64_t)v10;
            if (v10 == v13)
              goto LABEL_36;
          }
          if (i != v13)
          {
            v21 = v11;
            if (*(_BYTE *)(**(_QWORD **)(a1 + 8) + *i + 32) != 27)
              goto LABEL_33;
            while (1)
            {
              v22 = *(char **)(a1 + 128);
              v7 = (char *)(*(_QWORD *)(a1 + 136) + 1);
              *(_QWORD *)(a1 + 136) = v7;
              if (v7 == v22)
                break;
              if (!boost::cpp_regex_traits<char>::isctype(*(_QWORD *)(a1 + 8), *v7, *(_DWORD *)(a1 + 84)))
              {
                v7 = *(char **)(a1 + 128);
                if (*(char **)(a1 + 136) != v7)
                {
                  v23 = boost::cpp_regex_traits<char>::toi(*(_QWORD *)(a1 + 8), v4, v7, 10);
                  if (v23 >= 0x7FFFFFFFFFFFFFFFLL)
                    v21 = -1;
                  else
                    v21 = v23;
                  v13 = *(char **)(a1 + 128);
                  for (i = *(char **)(a1 + 136); ; *v4 = (uint64_t)i)
                  {
LABEL_33:
                    if (i == v13)
                      goto LABEL_55;
                    v24 = boost::cpp_regex_traits<char>::isctype(*(_QWORD *)(a1 + 8), *i, *(_DWORD *)(a1 + 84));
                    v13 = *(char **)(a1 + 128);
                    v25 = *(unsigned __int8 **)(a1 + 136);
                    if (!v24)
                      break;
                    i = (char *)(v25 + 1);
                  }
                  if (v25 == (unsigned __int8 *)v13)
                  {
LABEL_55:
                    if ((*(_WORD *)(*(_QWORD *)a1 + 40) & 0x203) != 0)
                      goto LABEL_37;
                    v37 = **(_QWORD **)(a1 + 8);
                    v38 = v13 - 1;
                    do
                    {
                      *v4 = (uint64_t)v38;
                      v39 = *v38--;
                    }
                    while (*(_BYTE *)(v37 + v39 + 32) != 15);
                    return boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse_literal(a1);
                  }
                  v33 = *(uint64_t **)(a1 + 8);
                  v34 = *v33;
                  if (a2)
                  {
                    if (*(_BYTE *)(v34 + *v25 + 32) != 12)
                    {
                      v45 = (const char *)&v25[-*(_QWORD *)(a1 + 120)];
                      std::string::basic_string[abi:ne180100]<0>(__p, boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse_repeat_range(BOOL)::incomplete_message[0]);
                      boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fail((std::string *)a1, 9, v45, (uint64_t)__p);
                      goto LABEL_15;
                    }
                    *v4 = (uint64_t)++v25;
                    if (v25 == (unsigned __int8 *)v13)
                      goto LABEL_37;
                  }
                  if (*(_BYTE *)(v34 + *v25 + 32) != 16)
                  {
                    v43 = v25 - 1;
                    do
                    {
                      *v4 = (uint64_t)v43;
                      v44 = *v43--;
                    }
                    while (*(_BYTE *)(v34 + v44 + 32) != 15);
                    return boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse_literal(a1);
                  }
                  *v4 = (uint64_t)(v25 + 1);
                  if (v11 <= v21)
                    return boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse_repeat(a1, v11, v21);
                  *(_QWORD *)(a1 + 136) = v25 - 1;
                  if (boost::cpp_regex_traits<char>::isctype((uint64_t)v33, (char)*(v25 - 1), *(_DWORD *)(a1 + 80)))
                  {
                    do
                    {
                      v35 = *(_QWORD *)(a1 + 136);
                      *(_QWORD *)(a1 + 136) = v35 - 1;
                    }
                    while (boost::cpp_regex_traits<char>::isctype(*(_QWORD *)(a1 + 8), *(char *)(v35 - 1), *(_DWORD *)(a1 + 80)));
                  }
                  v36 = *(_QWORD *)(a1 + 136) + 1;
                  *(_QWORD *)(a1 + 136) = v36;
                  boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fail((std::string *)a1, 10, (const char *)(v36 - *(_QWORD *)(a1 + 120)));
                  return 0;
                }
                break;
              }
            }
            if ((*(_WORD *)(*(_QWORD *)a1 + 40) & 0x203) != 0)
              goto LABEL_14;
            v40 = **(_QWORD **)(a1 + 8);
            v41 = v7 - 1;
            do
            {
              *v4 = (uint64_t)v41;
              v42 = *v41--;
            }
            while (*(_BYTE *)(v40 + v42 + 32) != 15);
            return boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse_literal(a1);
          }
        }
LABEL_36:
        if ((*(_WORD *)(*(_QWORD *)a1 + 40) & 0x203) != 0)
        {
LABEL_37:
          v26 = &v13[-*(_QWORD *)(a1 + 120)];
          std::string::basic_string[abi:ne180100]<0>(__p, boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse_repeat_range(BOOL)::incomplete_message[0]);
          boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fail((std::string *)a1, 9, v26, (uint64_t)__p);
          goto LABEL_15;
        }
        v27 = **(_QWORD **)(a1 + 8);
        v28 = v13 - 1;
        do
        {
          *v4 = (uint64_t)v28;
          v29 = *v28--;
        }
        while (*(_BYTE *)(v27 + v29 + 32) != 15);
        return boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse_literal(a1);
      }
      if ((*(_WORD *)(*(_QWORD *)a1 + 40) & 0x203) == 0)
      {
        v30 = **(_QWORD **)(a1 + 8);
        v31 = (unsigned __int8 *)(*(_QWORD *)(a1 + 136) - 1);
        do
        {
          *v4 = (uint64_t)v31;
          v32 = *v31--;
        }
        while (*(_BYTE *)(v30 + v32 + 32) != 15);
        return boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse_literal(a1);
      }
      v20 = (const char *)(*(_QWORD *)(a1 + 136) - *(_QWORD *)(a1 + 120));
      std::string::basic_string[abi:ne180100]<0>(__p, boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse_repeat_range(BOOL)::incomplete_message[0]);
      boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fail((std::string *)a1, 9, v20, (uint64_t)__p);
      goto LABEL_15;
    }
  }
LABEL_13:
  if ((*(_WORD *)(*(_QWORD *)a1 + 40) & 0x203) == 0)
  {
    v17 = **(_QWORD **)(a1 + 8);
    v18 = v7 - 1;
    do
    {
      *v4 = (uint64_t)v18;
      v19 = *v18--;
    }
    while (*(_BYTE *)(v17 + v19 + 32) != 15);
    return boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse_literal(a1);
  }
LABEL_14:
  v15 = &v7[-*(_QWORD *)(a1 + 120)];
  std::string::basic_string[abi:ne180100]<0>(__p, boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse_repeat_range(BOOL)::incomplete_message[0]);
  boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fail((std::string *)a1, 9, v15, (uint64_t)__p);
LABEL_15:
  if (v47 < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_21830AFFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse_alt(uint64_t a1)
{
  _DWORD *v2;
  const char *v3;
  unsigned int v5;
  int v6;
  char *v7;
  char *inserted;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  unint64_t v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  char **v22;
  char *v23;
  char *v24;
  void *__p[2];
  char v26;

  v2 = *(_DWORD **)(a1 + 16);
  if (v2 && *v2 || (*(_DWORD *)(*(_QWORD *)a1 + 40) & 0x1000003) == 0)
  {
    v5 = *(_DWORD *)(a1 + 144);
    if (*(_DWORD *)(a1 + 152) < v5)
      *(_DWORD *)(a1 + 152) = v5;
    v6 = *(_DWORD *)(a1 + 148);
    if ((v6 & 0x80000000) == 0)
      *(_DWORD *)(a1 + 144) = v6;
    ++*(_QWORD *)(a1 + 136);
    v7 = (char *)boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::append_state((uint64_t *)a1, 16, 0x18uLL)- *(_QWORD *)(*(_QWORD *)a1 + 352);
    inserted = boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::insert_state((_QWORD *)a1, *(_QWORD *)(a1 + 168), 17, 0x120uLL);
    v9 = v7 + 288;
    v10 = *(_QWORD *)(*(_QWORD *)a1 + 352);
    v11 = (*(_QWORD *)(*(_QWORD *)a1 + 360) - v10 + 7) & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)(*(_QWORD *)a1 + 360) = v10 + v11;
    *((_QWORD *)inserted + 2) = v10 - (_QWORD)inserted + v11;
    *(_QWORD *)(a1 + 168) = *(_QWORD *)(*(_QWORD *)a1 + 360) - *(_QWORD *)(*(_QWORD *)a1 + 352);
    if (*(_BYTE *)(a1 + 176))
    {
      v12 = *(_BYTE *)(a1 + 24);
      *((_BYTE *)boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::append_state((uint64_t *)a1, 28, 0x18uLL)+ 16) = v12;
    }
    v13 = *(_QWORD *)(a1 + 200);
    v14 = *(char **)(a1 + 192);
    if ((unint64_t)v14 >= v13)
    {
      v16 = *(char **)(a1 + 184);
      v17 = (v14 - v16) >> 3;
      if ((unint64_t)(v17 + 1) >> 61)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      v18 = v13 - (_QWORD)v16;
      v19 = (uint64_t)(v13 - (_QWORD)v16) >> 2;
      if (v19 <= v17 + 1)
        v19 = v17 + 1;
      if (v18 >= 0x7FFFFFFFFFFFFFF8)
        v20 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v20 = v19;
      if (v20)
      {
        v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a1 + 200, v20);
        v16 = *(char **)(a1 + 184);
        v14 = *(char **)(a1 + 192);
      }
      else
      {
        v21 = 0;
      }
      v22 = (char **)&v21[8 * v17];
      v23 = &v21[8 * v20];
      *v22 = v9;
      v15 = v22 + 1;
      while (v14 != v16)
      {
        v24 = (char *)*((_QWORD *)v14 - 1);
        v14 -= 8;
        *--v22 = v24;
      }
      *(_QWORD *)(a1 + 184) = v22;
      *(_QWORD *)(a1 + 192) = v15;
      *(_QWORD *)(a1 + 200) = v23;
      if (v16)
        operator delete(v16);
    }
    else
    {
      *(_QWORD *)v14 = v9;
      v15 = v14 + 8;
    }
    *(_QWORD *)(a1 + 192) = v15;
    return 1;
  }
  else
  {
    v3 = (const char *)(*(_QWORD *)(a1 + 136) - *(_QWORD *)(a1 + 120));
    std::string::basic_string[abi:ne180100]<0>(__p, "A regular expression cannot start with the alternation operator |.");
    boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fail((std::string *)a1, 17, v3, (uint64_t)__p);
    if (v26 < 0)
      operator delete(__p[0]);
    return 0;
  }
}

void sub_21830B240(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse_set(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 *v4;
  char *v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  const char *v15;
  void *appended;
  void *__p;
  _QWORD *v19;
  uint64_t v20;
  void *v21;
  void *v22;
  uint64_t v23;
  __int16 v24;
  int v25;
  int v26;
  char v27;
  _QWORD **v28;
  _QWORD *v29[2];

  v3 = *(_QWORD *)(a1 + 128);
  v2 = *(_QWORD *)(a1 + 136);
  v4 = (unsigned __int8 *)(v2 + 1);
  *(_QWORD *)(a1 + 136) = v2 + 1;
  if (v2 + 1 == v3)
  {
    v15 = (const char *)&v4[-*(_QWORD *)(a1 + 120)];
    std::string::basic_string[abi:ne180100]<0>(&__p, boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse_set(void)::incomplete_message[0]);
    boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fail((std::string *)a1, 7, v15, (uint64_t)&__p);
    if (SHIBYTE(v20) < 0)
      operator delete(__p);
    return 0;
  }
  __p = &v19;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v29[0] = 0;
  v29[1] = 0;
  v28 = v29;
  v24 = 0;
  v5 = (char *)(v2 + 2);
  v25 = 0;
  v26 = 0;
  v6 = (unsigned __int8 *)(v2 + 1);
  v7 = (unsigned __int8 *)(v2 + 1);
  v27 = 1;
  while (2)
  {
    v8 = **(_QWORD **)(a1 + 8);
    switch(*(_BYTE *)(v8 + *v6 + 32))
    {
      case 4:
        if (v6 != v4)
          goto LABEL_19;
        LOBYTE(v24) = 1;
        v9 = v5;
        v7 = (unsigned __int8 *)v5;
        goto LABEL_17;
      case 9:
        if (!boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse_inner_set((std::string *)a1, (uint64_t)&__p))goto LABEL_29;
        goto LABEL_20;
      case 0xA:
        if (v6 == v7)
        {
          boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse_set_literal(a1, (uint64_t)&__p);
          v7 = v6;
LABEL_20:
          v6 = *(unsigned __int8 **)(a1 + 136);
          if (v6 == *(unsigned __int8 **)(a1 + 128))
            goto LABEL_21;
          continue;
        }
        *(_QWORD *)(a1 + 136) = v6 + 1;
        if (HIBYTE(v24))
          appended = boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::append_set(a1, (uint64_t)&__p);
        else
          appended = boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::append_set(a1, (uint64_t)&__p);
        if (appended)
        {
LABEL_29:
          v14 = 1;
        }
        else
        {
          boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fail((std::string *)a1, 4, (const char *)(*(_QWORD *)(a1 + 136) - *(_QWORD *)(a1 + 120)));
LABEL_21:
          v14 = 0;
        }
        std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)&v28, v29[0]);
        if (v21)
        {
          v22 = v21;
          operator delete(v21);
        }
        std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)&__p, v19);
        return v14;
      case 0xC:
        v10 = (char *)(v6 + 1);
        *(_QWORD *)(a1 + 136) = v6 + 1;
        v11 = *(unsigned __int8 *)(v8 + v6[1] + 32);
        if (v11 == 23)
        {
          v13 = boost::re_detail_106800::cpp_regex_traits_implementation<char>::lookup_classname(v8, v10, (char *)v6 + 2);
          v10 = *(char **)(a1 + 136);
          if (v13)
          {
            v26 |= v13;
LABEL_16:
            v27 = 0;
            v9 = v10 + 1;
LABEL_17:
            *(_QWORD *)(a1 + 136) = v9;
            goto LABEL_20;
          }
        }
        else if (v11 == 22)
        {
          v12 = boost::re_detail_106800::cpp_regex_traits_implementation<char>::lookup_classname(v8, v10, (char *)v6 + 2);
          v10 = *(char **)(a1 + 136);
          if (v12)
          {
            v25 |= v12;
            goto LABEL_16;
          }
        }
        *(_QWORD *)(a1 + 136) = v10 - 1;
LABEL_19:
        boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse_set_literal(a1, (uint64_t)&__p);
        goto LABEL_20;
      default:
        goto LABEL_19;
    }
  }
}

void sub_21830B4D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  boost::re_detail_106800::basic_char_set<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::~basic_char_set((uint64_t)&__p);
  _Unwind_Resume(a1);
}

uint64_t boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse_perl_extension(uint64_t a1)
{
  unsigned __int8 *v2;
  uint64_t *v3;
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;
  uint64_t result;
  uint64_t v10;
  unsigned int v11;
  const char *v12;
  std::string *v13;
  int v14;
  _DWORD *appended;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  int v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  int64_t v28;
  uint64_t v29;
  unsigned __int8 *v30;
  uint64_t v31;
  uint64_t v32;
  signed int v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unsigned __int8 *v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  unsigned __int8 *v43;
  unsigned __int8 *v44;
  unsigned int v45;
  const char *v46;
  unsigned __int8 *v47;
  int v48;
  unsigned int v49;
  _BYTE *v50;
  unsigned __int8 *v51;
  uint64_t v52;
  unsigned __int8 *v53;
  int64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  unsigned __int8 *v61;
  unsigned int v62;
  unsigned int v63;
  _DWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unsigned __int8 *v69;
  unsigned int v70;
  unsigned int v71;
  unsigned __int8 *v72;
  unsigned int v73;
  const char *v74;
  unsigned int v75;
  unsigned int v76;
  uint64_t v77;
  int v78;
  BOOL v79;
  uint64_t v80;
  int v81;
  _BOOL4 v82;
  uint64_t v83;
  unsigned __int8 *v84;
  unsigned int v85;
  unsigned __int8 *v86;
  unsigned __int8 *v87;
  int v88;
  BOOL v89;
  char *v90;
  unsigned __int8 *v91;
  uint64_t v92;
  char *v93;
  unsigned int v94;
  uint64_t v95;
  unsigned __int8 *v96;
  unsigned int v97;
  char *v98;
  char *v99;
  char *v100;
  uint64_t v101;
  char *v102;
  unsigned int v103;
  uint64_t v104;
  unsigned int v105;
  uint64_t i;
  uint64_t v107;
  unsigned int v108;
  unsigned __int8 *v109;
  unsigned int v110;
  BOOL v111;
  char *v112;
  uint64_t v113;
  BOOL v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  unsigned int v118;
  uint64_t v119;
  unsigned __int8 *v120;
  unsigned int v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  int v125;
  uint64_t v126;
  unsigned __int8 *v127;
  unsigned int v128;
  char *v129;
  unsigned int v130;
  unint64_t v131;
  uint64_t v132;
  unsigned __int8 *v133;
  int v134;
  unsigned __int8 *v135;
  unsigned __int8 *v136;
  uint64_t v137;
  unsigned int v138;
  uint64_t v139;
  unsigned int v140;
  uint64_t v141;
  int v142;
  unsigned int v143;
  unsigned int v144;
  unsigned __int8 *v145;
  unsigned int v146;
  uint64_t v147;
  unsigned __int8 *v148;
  uint64_t v149;
  uint64_t v150;
  unsigned __int8 *v151;
  unsigned int v152;
  const char *v153;
  unsigned __int8 *v154;
  unsigned int v155;
  unsigned int v156;
  char *v157;
  unsigned int v158;
  _DWORD *v159;
  int v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  BOOL v170;
  uint64_t v171;
  uint64_t v172;
  unsigned __int8 *v173;
  unsigned int v174;
  const char *v175;
  uint64_t v176;
  uint64_t v177;
  unsigned __int8 *v178;
  unsigned int v179;
  const char *v180;
  uint64_t v181;
  unsigned __int8 *v182;
  unsigned int v183;
  uint64_t v184;
  uint64_t v185;
  unsigned __int8 *v186;
  unsigned int v187;
  const char *v188;
  char *inserted;
  int v190;
  int *v191;
  uint64_t v192;
  uint64_t v193;
  unsigned __int8 *v194;
  unsigned int v195;
  const char *v196;
  BOOL v197;
  _DWORD *v198;
  uint64_t v199;
  int v200;
  unsigned int v201;
  unint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  unsigned __int8 *v206;
  unsigned int v207;
  const char *v208;
  BOOL v209;
  unsigned __int8 *v210;
  unsigned int v211;
  uint64_t v212;
  unsigned __int8 *v213;
  unint64_t v214;
  uint64_t v215;
  unsigned __int8 *v216;
  unsigned int v217;
  uint64_t v218;
  unsigned int v219;
  unsigned __int8 *v220;
  unsigned int v221;
  unsigned __int8 *v222;
  unsigned int v223;
  unsigned int v224;
  char v225;
  int v226;
  void *__p[2];
  char v228;

  v3 = (uint64_t *)(a1 + 136);
  v2 = *(unsigned __int8 **)(a1 + 136);
  v4 = v2 + 1;
  *(_QWORD *)(a1 + 136) = v2 + 1;
  v5 = *(unsigned __int8 **)(a1 + 128);
  v6 = *(uint64_t **)(a1 + 8);
  if (v2 + 1 == v5)
  {
    v10 = *v6;
    do
    {
      *v3 = (uint64_t)v2;
      v11 = *v2--;
      --v4;
    }
    while (*(_BYTE *)(v10 + v11 + 32) != 1);
    goto LABEL_8;
  }
  v7 = *v6;
  if (*(_BYTE *)(*v6 + *v4 + 32) == 13)
  {
    do
    {
      if (v4 == v5)
        break;
      *v3 = (uint64_t)(v4 + 1);
      v8 = *(unsigned __int8 *)(v7 + *v4++ + 32);
    }
    while (v8 != 2);
    return 1;
  }
  appended = boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::append_state((uint64_t *)a1, 0, 0x18uLL);
  v16 = *(_QWORD *)a1;
  v17 = *(_DWORD *)(*(_QWORD *)a1 + 40);
  *((_BYTE *)appended + 20) = (v17 & 0x100000) != 0;
  v18 = *(_QWORD *)(a1 + 168);
  v19 = *(_QWORD *)(v16 + 352);
  v20 = (*(_QWORD *)(v16 + 360) - v19 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)(v16 + 360) = v19 + v20;
  *(_QWORD *)(a1 + 168) = v20;
  v21 = *(_BYTE *)(a1 + 176);
  *(_BYTE *)(a1 + 176) = 0;
  v22 = *(_QWORD *)(a1 + 148);
  v23 = *(_DWORD *)(a1 + 144);
  *(_DWORD *)(a1 + 148) = -1;
  *(_DWORD *)(a1 + 152) = v23;
  v24 = *(uint64_t **)(a1 + 8);
  v4 = *(unsigned __int8 **)(a1 + 136);
  v25 = *v4;
  v26 = *v24;
  v27 = *(unsigned __int8 *)(*v24 + v25 + 32);
  if (v27 > 0xA)
  {
    if (*(unsigned __int8 *)(*v24 + v25 + 32) <= 0x23u)
    {
      switch(*(_BYTE *)(*v24 + v25 + 32))
      {
        case 0xB:
          *(_DWORD *)(a1 + 148) = v23;
          goto LABEL_28;
        case 0xE:
          *(_QWORD *)(a1 + 136) = v4 + 1;
          v35 = boost::cpp_regex_traits<char>::toi((uint64_t)v24, v3, *(_BYTE **)(a1 + 128), 10);
          if (v35 <= 0)
          {
            --*v3;
            goto LABEL_79;
          }
          v226 = (v17 >> 20) & 1;
          v36 = (*(_DWORD *)(a1 + 144) + 1);
          v37 = v36 - v35;
          if (v36 > v35)
            goto LABEL_223;
          v38 = **(_QWORD **)(a1 + 8);
          v30 = *(unsigned __int8 **)(a1 + 136);
          v39 = v30 - 1;
          do
          {
            *v3 = (uint64_t)v39;
            v40 = *v39--;
            --v30;
          }
          while (*(_BYTE *)(v38 + v40 + 32) != 1);
          goto LABEL_77;
        case 0x11:
          v226 = (v17 >> 20) & 1;
          v41 = boost::cpp_regex_traits<char>::toi((uint64_t)v24, v3, *(_BYTE **)(a1 + 128), 10);
          v42 = **(_QWORD **)(a1 + 8);
          v43 = *(unsigned __int8 **)(a1 + 136);
          if ((v41 & 0x8000000000000000) == 0)
          {
            v37 = v41;
            if (*(_BYTE *)(v42 + *v43 + 32) == 2)
              goto LABEL_223;
          }
          v44 = v43 - 1;
          do
          {
            *v3 = (uint64_t)v44;
            v45 = *v44--;
            --v43;
          }
          while (*(_BYTE *)(v42 + v45 + 32) != 1);
          v46 = (const char *)&v43[-*(_QWORD *)(a1 + 120)];
          std::string::basic_string[abi:ne180100]<0>(__p, "The recursive sub-expression refers to an invalid marking group, or is unterminated.");
          boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fail((std::string *)a1, 20, v46, (uint64_t)__p);
          goto LABEL_251;
        case 0x14:
          v47 = v4 + 1;
          *(_QWORD *)(a1 + 136) = v4 + 1;
          if (v4 + 1 == *(unsigned __int8 **)(a1 + 128))
          {
            do
            {
              *v3 = (uint64_t)v4;
              v49 = *v4--;
              --v47;
            }
            while (*(_BYTE *)(v26 + v49 + 32) != 1);
            v12 = (const char *)&v47[-*(_QWORD *)(a1 + 120)];
            goto LABEL_9;
          }
          v48 = *(unsigned __int8 *)(v26 + *v47 + 32);
          if (v48 == 53)
          {
            v225 = v21;
            v226 = (v17 >> 20) & 1;
            v32 = v18;
            v33 = -2;
            goto LABEL_107;
          }
          if (v48 == 37)
          {
            v225 = v21;
            v226 = (v17 >> 20) & 1;
            v32 = v18;
            v33 = -1;
LABEL_107:
            appended[4] = v33;
            *(_QWORD *)(a1 + 136) = v4 + 2;
            v34 = (char *)boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::append_state((uint64_t *)a1, 16, 0x18uLL)- *(_QWORD *)(*(_QWORD *)a1 + 352);
            boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::append_state((uint64_t *)a1, 26, 0x18uLL);
            v65 = *(_QWORD *)a1;
            v66 = *(_QWORD *)(*(_QWORD *)a1 + 352);
            v67 = *(_QWORD *)(*(_QWORD *)a1 + 360);
            goto LABEL_64;
          }
          *v3 = (uint64_t)v4;
          LODWORD(v25) = 62;
LABEL_109:
          v226 = (v17 >> 20) & 1;
          if ((v17 & 0x400000) != 0)
          {
            v33 = 0;
          }
          else
          {
            v33 = v23 + 1;
            *(_DWORD *)(a1 + 144) = v23 + 1;
            if ((v17 & 0x800000) != 0)
            {
              __p[0] = &v4[-*(_QWORD *)(a1 + 120) - 2];
              __p[1] = 0;
              std::vector<std::pair<unsigned long,unsigned long>>::push_back[abi:ne180100]((void **)(v16 + 376), __p);
              v4 = *(unsigned __int8 **)(a1 + 136);
            }
          }
          appended[4] = v33;
          v98 = (char *)(v4 + 1);
          *(_QWORD *)(a1 + 136) = v4 + 1;
          v99 = *(char **)(a1 + 128);
          if (v4 + 1 == (unsigned __int8 *)v99)
          {
            v104 = **(_QWORD **)(a1 + 8);
            do
            {
              *v3 = (uint64_t)v4;
              v105 = *v4--;
              --v98;
            }
            while (*(_BYTE *)(v104 + v105 + 32) != 1);
            v12 = &v98[-*(_QWORD *)(a1 + 120)];
            goto LABEL_9;
          }
          v100 = (char *)(v4 + 1);
          do
          {
            if (*v100 == (_DWORD)v25)
            {
              v225 = v21;
              v32 = v18;
              boost::re_detail_106800::named_subexpressions::set_name<char>(*(void ***)a1, v98, v100, v33);
              v34 = 0;
              ++*(_QWORD *)(a1 + 136);
              goto LABEL_224;
            }
            *v3 = (uint64_t)++v100;
          }
          while (v100 != v99);
          v101 = **(_QWORD **)(a1 + 8);
          v102 = v99 - 1;
          do
          {
            *v3 = (uint64_t)v102;
            v103 = *v102--;
            --v99;
          }
          while (*(_BYTE *)(v101 + v103 + 32) != 1);
          break;
        case 0x15:
          v225 = v21;
          v226 = (v17 >> 20) & 1;
          v32 = v18;
          v33 = -3;
          goto LABEL_63;
        case 0x19:
          goto LABEL_109;
        default:
          goto LABEL_68;
      }
LABEL_119:
      v12 = &v99[-*(_QWORD *)(a1 + 120)];
      goto LABEL_9;
    }
    switch(v27)
    {
      case '$':
LABEL_28:
        v225 = v21;
        v226 = (v17 >> 20) & 1;
        v32 = v18;
        v34 = 0;
        v33 = 0;
        appended[4] = 0;
        *v3 = (uint64_t)(v4 + 1);
LABEL_224:
        v82 = 1;
        goto LABEL_225;
      case '%':
        v225 = v21;
        v226 = (v17 >> 20) & 1;
        v32 = v18;
        v33 = -1;
LABEL_63:
        appended[4] = v33;
        *(_QWORD *)(a1 + 136) = v4 + 1;
        v64 = boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::append_state((uint64_t *)a1, 16, 0x18uLL);
        v65 = *(_QWORD *)a1;
        v66 = *(_QWORD *)(*(_QWORD *)a1 + 352);
        v67 = *(_QWORD *)(*(_QWORD *)a1 + 360);
        v34 = (char *)v64 - v66;
LABEL_64:
        v68 = (v67 - v66 + 7) & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)(v65 + 360) = v66 + v68;
        *(_QWORD *)(a1 + 168) = v68;
        goto LABEL_224;
      case '5':
        v225 = v21;
        v226 = (v17 >> 20) & 1;
        v32 = v18;
        v33 = -2;
        goto LABEL_63;
    }
    goto LABEL_68;
  }
  if (v27 != 1)
  {
    if (v27 == 2)
    {
      v69 = v4 - 1;
      do
      {
        *v3 = (uint64_t)v69;
        v70 = *v69--;
        --v4;
      }
      while (*(_BYTE *)(v26 + v70 + 32) != 1);
      goto LABEL_8;
    }
    if (v27 == 7)
    {
      *(_QWORD *)(a1 + 136) = v4 + 1;
      v28 = boost::cpp_regex_traits<char>::toi((uint64_t)v24, v3, *(_BYTE **)(a1 + 128), 10);
      v29 = **(_QWORD **)(a1 + 8);
      v30 = *(unsigned __int8 **)(a1 + 136);
      if (v28 >= 1 && *(_BYTE *)(v29 + *v30 + 32) == 2)
      {
        v31 = *(unsigned int *)(a1 + 144);
        if ((v31 ^ 0x7FFFFFFFFFFFFFFFuLL) >= v28)
        {
          v226 = (v17 >> 20) & 1;
          v37 = v28 + v31;
LABEL_223:
          v225 = v21;
          v32 = v18;
          appended[4] = 0;
          v159 = boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::append_state((uint64_t *)a1, 29, 0x20uLL);
          *((_QWORD *)v159 + 2) = v37;
          v159[6] = 0;
          v160 = *(_DWORD *)(*(_QWORD *)a1 + 40);
          v34 = 0;
          v33 = 0;
          *((_BYTE *)boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::append_state((uint64_t *)a1, 28, 0x18uLL)+ 16) = (v160 & 0x100000) != 0;
          goto LABEL_224;
        }
      }
      else
      {
        v72 = v30 - 1;
        do
        {
          *v3 = (uint64_t)v72;
          v73 = *v72--;
          --v30;
        }
        while (*(_BYTE *)(v29 + v73 + 32) != 1);
      }
LABEL_77:
      v74 = (const char *)&v30[-*(_QWORD *)(a1 + 120)];
      std::string::basic_string[abi:ne180100]<0>(__p, "An invalid or unterminated recursive sub-expression.");
      boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fail((std::string *)a1, 20, v74, (uint64_t)__p);
      goto LABEL_251;
    }
LABEL_68:
    switch((_DWORD)v25)
    {
      case '&':
        v86 = v4 + 1;
        v87 = *(unsigned __int8 **)(a1 + 128);
        *(_QWORD *)(a1 + 136) = v4 + 1;
        v226 = (v17 >> 20) & 1;
        if (v4 + 1 == v87)
        {
          v111 = 1;
        }
        else
        {
          v88 = *(unsigned __int8 *)(v26 + *v86 + 32);
          if (v88 == 2)
          {
            v89 = 0;
            v90 = (char *)v86;
LABEL_155:
            if (v88 == 2)
              goto LABEL_202;
            v122 = 0;
            do
            {
              v123 = (char)*v86++;
              v122 ^= (v122 << 6) + 2654435769u + (v122 >> 2) + v123;
            }
            while (v86 != (unsigned __int8 *)v90);
            goto LABEL_205;
          }
          v119 = v87 - v4 - 2;
          v120 = v4 + 2;
          while (1)
          {
            *v3 = (uint64_t)v120;
            if (!v119)
              break;
            v121 = *v120++;
            --v119;
            if (*(_BYTE *)(v26 + v121 + 32) == 2)
            {
              v90 = (char *)(v120 - 1);
              v89 = v120 - 1 == v87;
              goto LABEL_155;
            }
          }
          v111 = v120 == v87;
          v86 = v120;
        }
        v129 = (char *)(v86 - 1);
        do
        {
          *v3 = (uint64_t)v129;
          v130 = *v129--;
          --v86;
        }
        while (*(_BYTE *)(v26 + v130 + 32) != 1);
        break;
      case 'P':
        v50 = v4 + 1;
        *(_QWORD *)(a1 + 136) = v4 + 1;
        v91 = *(unsigned __int8 **)(a1 + 128);
        if (v4 + 1 == v91)
        {
          do
          {
            *v3 = (uint64_t)v4;
            v94 = *v4--;
            --v50;
          }
          while (*(_BYTE *)(v26 + v94 + 32) != 1);
          goto LABEL_97;
        }
        if (*v50 != 62)
          goto LABEL_79;
        v86 = v4 + 2;
        *v3 = (uint64_t)(v4 + 2);
        v226 = (v17 >> 20) & 1;
        if (v4 + 2 == v91)
        {
          v111 = 1;
        }
        else
        {
          if (*(_BYTE *)(v26 + v4[2] + 32) == 2)
          {
            v89 = 0;
            v92 = 2;
            v93 = (char *)v86;
LABEL_201:
            if (v92 == 2)
            {
LABEL_202:
              v37 = 10000;
              goto LABEL_206;
            }
            v122 = 0;
            do
            {
              v149 = (char)*v86++;
              v122 ^= (v122 << 6) + 2654435769u + (v122 >> 2) + v149;
            }
            while (v86 != (unsigned __int8 *)v93);
LABEL_205:
            v37 = v122 % 0x7FFFD8EE + 10000;
LABEL_206:
            if (v89)
              return 0;
            goto LABEL_223;
          }
          v147 = 3;
          while (1)
          {
            v148 = &v4[v147];
            *v3 = (uint64_t)&v4[v147];
            if (v91 - v4 == v147)
              break;
            ++v147;
            if (*(_BYTE *)(v26 + *v148 + 32) == 2)
            {
              v92 = v147 - 1;
              v93 = (char *)&v4[v92];
              v89 = &v4[v92] == v91;
              goto LABEL_201;
            }
          }
          v111 = v148 == v91;
          v86 = &v4[v147];
        }
        v157 = (char *)(v86 - 1);
        do
        {
          *v3 = (uint64_t)v157;
          v158 = *v157--;
          --v86;
        }
        while (*(_BYTE *)(v26 + v158 + 32) != 1);
        break;
      case 'R':
        v50 = v4 + 1;
        *v3 = (uint64_t)(v4 + 1);
        if (*(_BYTE *)(v26 + v4[1] + 32) != 2)
        {
          do
          {
            *v3 = (uint64_t)v4;
            v71 = *v4--;
            --v50;
          }
          while (*(_BYTE *)(v26 + v71 + 32) != 1);
          goto LABEL_97;
        }
        v226 = (v17 >> 20) & 1;
LABEL_222:
        v37 = 0;
        goto LABEL_223;
      default:
LABEL_79:
        v75 = boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse_options((std::string *)a1);
        v4 = *(unsigned __int8 **)(a1 + 136);
        if (v4 == *(unsigned __int8 **)(a1 + 128))
        {
          v83 = **(_QWORD **)(a1 + 8);
          v84 = v4 - 1;
          do
          {
            *v3 = (uint64_t)v84;
            v85 = *v84--;
            --v4;
          }
          while (*(_BYTE *)(v83 + v85 + 32) != 1);
        }
        else
        {
          v225 = v21;
          v32 = v18;
          v76 = v75 & 0x100000;
          v77 = *(_QWORD *)a1;
          v78 = *(_DWORD *)(*(_QWORD *)a1 + 40) & 0x100000;
          v79 = (v75 & 0x100000) != v78;
          *(_BYTE *)(a1 + 176) = v79;
          appended[4] = 0;
          v80 = **(_QWORD **)(a1 + 8);
          v81 = *(unsigned __int8 *)(v80 + *v4 + 32);
          v82 = v81 != 2;
          if (v81 == 2)
          {
            *(_DWORD *)(v77 + 40) = v75;
            if (((v75 >> 20) & 1) != *(_BYTE *)(a1 + 24))
              *(_BYTE *)(a1 + 24) = (v75 & 0x100000) != 0;
            v225 |= v79;
            goto LABEL_104;
          }
          if (v81 == 36)
          {
            *(_DWORD *)(v77 + 40) = v75;
            if (((v75 >> 20) & 1) != *(_BYTE *)(a1 + 24))
              *(_BYTE *)(a1 + 24) = (v75 & 0x100000) != 0;
            *v3 = (uint64_t)(v4 + 1);
LABEL_104:
            v226 = (v17 >> 20) & 1;
            v34 = 0;
            v33 = 0;
            if (v76 != v78)
              *((_BYTE *)boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::append_state((uint64_t *)a1, 28, 0x18uLL)+ 16) = v76 >> 20;
LABEL_225:
            v161 = (uint64_t)appended - v19;
            boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse_all(a1);
            if ((boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::unwind_alts((std::string *)a1, v161) & 1) != 0)
            {
              v162 = *(_QWORD *)(a1 + 136);
              if (v162 == *(_QWORD *)(a1 + 128))
              {
                v181 = **(_QWORD **)(a1 + 8);
                v182 = (unsigned __int8 *)(v162 - 1);
                do
                {
                  *v3 = (uint64_t)v182;
                  v183 = *v182--;
                }
                while (*(_BYTE *)(v181 + v183 + 32) != 1);
                v12 = (const char *)(v162 - *(_QWORD *)(a1 + 120));
                v13 = (std::string *)a1;
                v14 = 8;
                goto LABEL_10;
              }
              *v3 = v162 + 1;
              if (v82)
              {
                if (*(_BYTE *)(a1 + 176))
                  *((_BYTE *)boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::append_state((uint64_t *)a1, 28, 0x18uLL)+ 16) = v226;
                *(_DWORD *)(*(_QWORD *)a1 + 40) = v17;
                if (v226 != *(unsigned __int8 *)(a1 + 24))
                  *(_BYTE *)(a1 + 24) = v226;
              }
              if (v34)
              {
                v163 = *(_QWORD *)(*(_QWORD *)a1 + 352);
                v164 = (*(_QWORD *)(*(_QWORD *)a1 + 360) - v163 + 7) & 0xFFFFFFFFFFFFFFF8;
                *(_QWORD *)(*(_QWORD *)a1 + 360) = v163 + v164;
                *(_QWORD *)&v34[v163 + 16] = v164 - (_QWORD)v34;
                if (*(char **)(a1 + 16) == &v34[v163] && v33 != -2)
                {
                  v184 = **(_QWORD **)(a1 + 8);
                  v185 = *(_QWORD *)(a1 + 136);
                  v186 = (unsigned __int8 *)(v185 - 1);
                  do
                  {
                    *v3 = (uint64_t)v186;
                    v187 = *v186--;
                    --v185;
                  }
                  while (*(_BYTE *)(v184 + v187 + 32) != 1);
                  v188 = (const char *)(v185 - *(_QWORD *)(a1 + 120));
                  std::string::basic_string[abi:ne180100]<0>(__p, "Invalid or empty zero width assertion.");
                  boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fail((std::string *)a1, 20, v188, (uint64_t)__p);
                  goto LABEL_251;
                }
              }
              if (v33 != -4)
                goto LABEL_269;
              v166 = *(_QWORD *)(*(_QWORD *)a1 + 352);
              v167 = v166 + v20;
              if (*(_DWORD *)(v166 + v20) == 17)
              {
                v168 = *(_QWORD *)(*(_QWORD *)a1 + 360) - v166;
                v169 = *(_QWORD *)(v167 + 16);
                v170 = v169 < 1 || v168 <= (uint64_t)(v169 + v20);
                if (!v170 && *(_DWORD *)(v167 + v169) == 17)
                {
                  v171 = **(_QWORD **)(a1 + 8);
                  v172 = *(_QWORD *)(a1 + 136);
                  v173 = (unsigned __int8 *)(v172 - 1);
                  do
                  {
                    *v3 = (uint64_t)v173;
                    v174 = *v173--;
                    --v172;
                  }
                  while (*(_BYTE *)(v171 + v174 + 32) != 1);
                  v175 = (const char *)(v172 - *(_QWORD *)(a1 + 120));
                  std::string::basic_string[abi:ne180100]<0>(__p, "More than one alternation operator | was encountered inside a conditional expression.");
                  boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fail((std::string *)a1, 2, v175, (uint64_t)__p);
                  goto LABEL_251;
                }
                v191 = (int *)(v167 + *(_QWORD *)(v167 + 8));
                v190 = *v191;
                if (*v191 == 27)
                {
                  if (v191[4] == 9999)
                  {
                    v192 = **(_QWORD **)(a1 + 8);
                    v193 = *(_QWORD *)(a1 + 136);
                    v194 = (unsigned __int8 *)(v193 - 1);
                    do
                    {
                      *v3 = (uint64_t)v194;
                      v195 = *v194--;
                      --v193;
                    }
                    while (*(_BYTE *)(v192 + v195 + 32) != 1);
                    v196 = (const char *)(v193 - *(_QWORD *)(a1 + 120));
                    std::string::basic_string[abi:ne180100]<0>(__p, "Alternation operators are not allowed inside a DEFINE block.");
                    boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fail((std::string *)a1, 2, v196, (uint64_t)__p);
                    goto LABEL_251;
                  }
LABEL_269:
                  v198 = boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::append_state((uint64_t *)a1, 1, 0x18uLL);
                  v198[4] = v33;
                  v199 = *(_QWORD *)a1;
                  v200 = *(_DWORD *)(*(_QWORD *)a1 + 40);
                  *((_BYTE *)v198 + 20) = (v200 & 0x100000) != 0;
                  *(_QWORD *)(a1 + 160) = v161;
                  *(_QWORD *)(a1 + 168) = v32;
                  *(_BYTE *)(a1 + 176) = v225;
                  v201 = *(_DWORD *)(a1 + 152);
                  if (v201 > *(_DWORD *)(a1 + 144))
                    *(_DWORD *)(a1 + 144) = v201;
                  *(_QWORD *)(a1 + 148) = v22;
                  v202 = (v33 - 1);
                  if (v33 >= 1)
                  {
                    if ((v200 & 0x800000) != 0)
                    {
                      v203 = *(_QWORD *)(v199 + 376);
                      if (v202 >= (*(_QWORD *)(v199 + 384) - v203) >> 4)
                        std::vector<turi::flex_type_enum>::__throw_out_of_range[abi:ne180100]();
                      *(_QWORD *)(v203 + 16 * v202 + 8) = *(_QWORD *)(a1 + 136) + ~*(_QWORD *)(a1 + 120);
                    }
                    result = 1;
                    if (v33 <= 0x1F)
                      *(_DWORD *)(a1 + 36) |= 1 << (v33 - 1);
                    return result;
                  }
                  return 1;
                }
              }
              else
              {
                inserted = boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::insert_state((_QWORD *)a1, v20, 17, 0x120uLL);
                *((_QWORD *)inserted + 2) = *(_QWORD *)(*(_QWORD *)a1 + 360) - (_QWORD)inserted;
                v190 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 352)
                                 + v20
                                 + *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 352) + v20 + 8));
              }
              if (v190)
                v197 = v190 == 27;
              else
                v197 = 1;
              if (v197)
                goto LABEL_269;
              v204 = **(_QWORD **)(a1 + 8);
              v205 = *(_QWORD *)(a1 + 136);
              v206 = (unsigned __int8 *)(v205 - 1);
              do
              {
                *v3 = (uint64_t)v206;
                v207 = *v206--;
                --v205;
              }
              while (*(_BYTE *)(v204 + v207 + 32) != 1);
              v208 = (const char *)(v205 - *(_QWORD *)(a1 + 120));
              std::string::basic_string[abi:ne180100]<0>(__p, "A repetition operator cannot be applied to a zero-width assertion.");
              boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fail((std::string *)a1, 13, v208, (uint64_t)__p);
            }
            else
            {
              v176 = **(_QWORD **)(a1 + 8);
              v177 = *(_QWORD *)(a1 + 136);
              v178 = (unsigned __int8 *)(v177 - 1);
              do
              {
                *v3 = (uint64_t)v178;
                v179 = *v178--;
                --v177;
              }
              while (*(_BYTE *)(v176 + v179 + 32) != 1);
              v180 = (const char *)(v177 - *(_QWORD *)(a1 + 120));
              std::string::basic_string[abi:ne180100]<0>(__p, "Invalid alternation operators within (?...) block.");
              boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fail((std::string *)a1, 20, v180, (uint64_t)__p);
            }
LABEL_251:
            if (v228 < 0)
              operator delete(__p[0]);
            return 0;
          }
          v109 = v4 - 1;
          do
          {
            *v3 = (uint64_t)v109;
            v110 = *v109--;
            --v4;
          }
          while (*(_BYTE *)(v80 + v110 + 32) != 1);
        }
LABEL_8:
        v12 = (const char *)&v4[-*(_QWORD *)(a1 + 120)];
        goto LABEL_9;
    }
    boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fail((std::string *)a1, 20, (const char *)&v86[-*(_QWORD *)(a1 + 120)]);
    if (v111)
      return 0;
    goto LABEL_222;
  }
  appended[4] = -4;
  v50 = v4 + 1;
  *(_QWORD *)(a1 + 136) = v4 + 1;
  v51 = *(unsigned __int8 **)(a1 + 128);
  if (v4 + 1 == v51)
  {
    do
    {
      *v3 = (uint64_t)v4;
      v63 = *v4--;
      --v50;
    }
    while (*(_BYTE *)(v26 + v63 + 32) != 1);
    goto LABEL_97;
  }
  v226 = (v17 >> 20) & 1;
  v52 = boost::cpp_regex_traits<char>::toi((uint64_t)v24, v3, v51, 10);
  v53 = *(unsigned __int8 **)(a1 + 128);
  v4 = *(unsigned __int8 **)(a1 + 136);
  if (v4 == v53)
  {
    v95 = **(_QWORD **)(a1 + 8);
    v96 = v4 - 1;
    do
    {
      *v3 = (uint64_t)v96;
      v97 = *v96--;
      --v4;
    }
    while (*(_BYTE *)(v95 + v97 + 32) != 1);
    goto LABEL_8;
  }
  v54 = v52;
  v55 = *v4;
  if (*v4 <= 0x43u)
  {
    if ((_DWORD)v55 == 39 || (_DWORD)v55 == 60)
    {
      v56 = (char *)(v4 + 1);
      *v3 = (uint64_t)(v4 + 1);
      if (v4 + 1 == v53)
      {
LABEL_57:
        v60 = **(_QWORD **)(a1 + 8);
        v61 = v53 - 1;
        do
        {
          *v3 = (uint64_t)v61;
          v62 = *v61--;
          --v53;
        }
        while (*(_BYTE *)(v60 + v62 + 32) != 1);
LABEL_164:
        v12 = (const char *)&v53[-*(_QWORD *)(a1 + 120)];
        goto LABEL_9;
      }
      v57 = 1;
      while (1)
      {
        v58 = v4[v57];
        if (v58 == 39 || v58 == 62)
          break;
        v59 = v57 + 1;
        *v3 = (uint64_t)&v4[v57 + 1];
        v57 = v59;
        if (v53 - v4 == v59)
        {
          v53 = &v4[v59];
          goto LABEL_57;
        }
      }
      v124 = v57 - 1;
      if (v57 == 1)
      {
        v125 = 10000;
      }
      else
      {
        v131 = 0;
        do
        {
          v132 = *v56++;
          v131 ^= (v131 << 6) + 2654435769u + (v131 >> 2) + v132;
          --v124;
        }
        while (v124);
        v125 = v131 % 0x7FFFD8EE + 10000;
      }
      boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::append_state((uint64_t *)a1, 27, 0x18uLL)[4] = v125;
      v133 = *(unsigned __int8 **)(a1 + 136);
      v134 = *v133;
      if (v134 == 62 || v134 == 39)
      {
        v135 = v133 + 1;
        *(_QWORD *)(a1 + 136) = v133 + 1;
        v136 = *(unsigned __int8 **)(a1 + 128);
        if (v133 + 1 != v136)
        {
          v137 = **(_QWORD **)(a1 + 8);
          if (*(_BYTE *)(v137 + *v135 + 32) != 2)
          {
            v50 = v133 + 1;
            do
            {
              *v3 = (uint64_t)v133;
              v156 = *v133--;
              --v50;
            }
            while (*(_BYTE *)(v137 + v156 + 32) != 1);
            goto LABEL_97;
          }
          v4 = v133 + 2;
          *v3 = (uint64_t)v4;
          if (v4 == v136)
          {
            do
            {
              *v3 = (uint64_t)v135;
              v138 = *v135--;
              --v4;
            }
            while (*(_BYTE *)(v137 + v138 + 32) != 1);
            goto LABEL_8;
          }
          goto LABEL_300;
        }
        ++v133;
      }
      v150 = **(_QWORD **)(a1 + 8);
      v151 = v133 - 1;
      do
      {
        *v3 = (uint64_t)v151;
        v152 = *v151--;
        --v133;
      }
      while (*(_BYTE *)(v150 + v152 + 32) != 1);
      v153 = (const char *)&v133[-*(_QWORD *)(a1 + 120)];
      std::string::basic_string[abi:ne180100]<0>(__p, "Unterminated named capture.");
      boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fail((std::string *)a1, 20, v153, (uint64_t)__p);
      goto LABEL_251;
    }
    goto LABEL_146;
  }
  if ((_DWORD)v55 == 82)
  {
    v99 = (char *)(v4 + 1);
    *v3 = (uint64_t)(v4 + 1);
    if (v4 + 1 == v53)
    {
      v139 = **(_QWORD **)(a1 + 8);
      do
      {
        *v3 = (uint64_t)v4;
        v140 = *v4--;
        --v99;
      }
      while (*(_BYTE *)(v139 + v140 + 32) != 1);
      goto LABEL_119;
    }
    if (*v99 == 38)
    {
      v112 = (char *)(v4 + 2);
      *(_QWORD *)(a1 + 136) = v4 + 2;
      v113 = **(_QWORD **)(a1 + 8);
      if (v4 + 2 == v53)
      {
        v209 = 1;
      }
      else
      {
        if (*(_BYTE *)(v113 + v4[2] + 32) == 2)
        {
          v114 = 0;
          v115 = 2;
          v116 = v112;
LABEL_287:
          if (v115 == 2)
          {
            if (v114)
              return 0;
            v54 = -10000;
          }
          else
          {
            v214 = 0;
            do
            {
              v215 = *v112++;
              v214 ^= (v214 << 6) + 2654435769u + (v214 >> 2) + v215;
            }
            while (v112 != v116);
            if (v114)
              return 0;
            v54 = 2147473646 * (v214 / 0x7FFFD8EE) - v214 - 10000;
          }
          goto LABEL_298;
        }
        v212 = 3;
        while (1)
        {
          v213 = &v4[v212];
          *v3 = (uint64_t)&v4[v212];
          if (v53 - v4 == v212)
            break;
          ++v212;
          if (*(_BYTE *)(v113 + *v213 + 32) == 2)
          {
            v115 = v212 - 1;
            v116 = (char *)&v4[v115];
            v114 = &v4[v115] == v53;
            goto LABEL_287;
          }
        }
        v209 = v213 == v53;
        v53 = &v4[v212];
      }
      v216 = v53 - 1;
      do
      {
        *v3 = (uint64_t)v216;
        v217 = *v216--;
        --v53;
      }
      while (*(_BYTE *)(v113 + v217 + 32) != 1);
      boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fail((std::string *)a1, 20, (const char *)&v53[-*(_QWORD *)(a1 + 120)]);
      if (v209)
        return 0;
    }
    else
    {
      v54 = -boost::cpp_regex_traits<char>::toi(*(_QWORD *)(a1 + 8), v3, v53, 10);
    }
LABEL_298:
    boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::append_state((uint64_t *)a1, 27, 0x18uLL)[4] = (v54 >> 63) & (v54 - 1);
    v4 = *(unsigned __int8 **)(a1 + 136);
    v218 = **(_QWORD **)(a1 + 8);
    if (*(_BYTE *)(v218 + *v4 + 32) != 2)
    {
      v220 = v4 - 1;
      do
      {
        *v3 = (uint64_t)v220;
        v221 = *v220--;
        --v4;
      }
      while (*(_BYTE *)(v218 + v221 + 32) != 1);
      goto LABEL_8;
    }
    v50 = v4 + 1;
    *(_QWORD *)(a1 + 136) = v4 + 1;
    if (v4 + 1 == *(unsigned __int8 **)(a1 + 128))
    {
      do
      {
        *v3 = (uint64_t)v4;
        v219 = *v4--;
        --v50;
      }
      while (*(_BYTE *)(v218 + v219 + 32) != 1);
      goto LABEL_97;
    }
    goto LABEL_300;
  }
  if ((_DWORD)v55 != 68)
  {
LABEL_146:
    if (v52 < 1)
    {
      v141 = **(_QWORD **)(a1 + 8);
      if (*(_BYTE *)(v141 + v55 + 32) != 8)
      {
        v154 = v4 - 1;
        do
        {
          *v3 = (uint64_t)v154;
          v155 = *v154--;
          --v4;
        }
        while (*(_BYTE *)(v141 + v155 + 32) != 1);
        goto LABEL_8;
      }
      v50 = v4 + 1;
      *v3 = (uint64_t)(v4 + 1);
      if (v4 + 1 == v53)
      {
        do
        {
          *v3 = (uint64_t)v4;
          v144 = *v4--;
          --v50;
        }
        while (*(_BYTE *)(v141 + v144 + 32) != 1);
        goto LABEL_97;
      }
      v225 = v21;
      v142 = *(unsigned __int8 *)(v141 + *v50 + 32);
      if (v142 == 20)
      {
        v222 = v4 + 2;
        *v3 = (uint64_t)(v4 + 2);
        if (v4 + 2 == v53)
        {
          do
          {
            *v3 = (uint64_t)v50;
            v223 = *v50--;
            --v222;
          }
          while (*(_BYTE *)(v141 + v223 + 32) != 1);
          v12 = (const char *)&v222[-*(_QWORD *)(a1 + 120)];
          goto LABEL_9;
        }
        if ((*(unsigned __int8 *)(v141 + *v222 + 32) | 0x10) != 0x35)
        {
          v4 += 2;
          do
          {
            *v3 = (uint64_t)v50;
            v224 = *v50--;
            --v4;
          }
          while (*(_BYTE *)(v141 + v224 + 32) != 1);
          goto LABEL_8;
        }
        v32 = v18;
      }
      else
      {
        v32 = v18;
        if (v142 != 37 && v142 != 53)
        {
          v50 = v4 + 1;
          do
          {
            *v3 = (uint64_t)v4;
            v143 = *v4--;
            --v50;
          }
          while (*(_BYTE *)(v141 + v143 + 32) != 1);
          goto LABEL_97;
        }
      }
      v34 = 0;
      *v3 = (uint64_t)(v4 - 1);
LABEL_302:
      v33 = -4;
      goto LABEL_224;
    }
    boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::append_state((uint64_t *)a1, 27, 0x18uLL)[4] = v52;
    v4 = *(unsigned __int8 **)(a1 + 136);
    v117 = **(_QWORD **)(a1 + 8);
    if (*(_BYTE *)(v117 + *v4 + 32) != 2)
    {
      v145 = v4 - 1;
      do
      {
        *v3 = (uint64_t)v145;
        v146 = *v145--;
        --v4;
      }
      while (*(_BYTE *)(v117 + v146 + 32) != 1);
      goto LABEL_8;
    }
    v50 = v4 + 1;
    *(_QWORD *)(a1 + 136) = v4 + 1;
    if (v4 + 1 == *(unsigned __int8 **)(a1 + 128))
    {
      do
      {
        *v3 = (uint64_t)v4;
        v118 = *v4--;
        --v50;
      }
      while (*(_BYTE *)(v117 + v118 + 32) != 1);
      goto LABEL_97;
    }
LABEL_300:
    v225 = v21;
LABEL_301:
    v32 = v18;
    v34 = 0;
    goto LABEL_302;
  }
  for (i = 0; i != 6; ++i)
  {
    if (&v4[i] == v53 || v4[i] != (_DWORD)v55)
    {
      v53 = &v4[i];
LABEL_162:
      v126 = **(_QWORD **)(a1 + 8);
      v127 = v53 - 1;
      do
      {
        *v3 = (uint64_t)v127;
        v128 = *v127--;
        --v53;
      }
      while (*(_BYTE *)(v126 + v128 + 32) != 1);
      goto LABEL_164;
    }
    *v3 = (uint64_t)&v4[i + 1];
    LODWORD(v55) = aDefine[i + 1];
  }
  if (v4 + 6 == v53)
    goto LABEL_162;
  boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::append_state((uint64_t *)a1, 27, 0x18uLL)[4] = 9999;
  v4 = *(unsigned __int8 **)(a1 + 136);
  v107 = **(_QWORD **)(a1 + 8);
  if (*(_BYTE *)(v107 + *v4 + 32) != 2)
  {
    v210 = v4 - 1;
    do
    {
      *v3 = (uint64_t)v210;
      v211 = *v210--;
      --v4;
    }
    while (*(_BYTE *)(v107 + v211 + 32) != 1);
    goto LABEL_8;
  }
  v225 = v21;
  v50 = v4 + 1;
  *(_QWORD *)(a1 + 136) = v4 + 1;
  if (v4 + 1 != *(unsigned __int8 **)(a1 + 128))
    goto LABEL_301;
  do
  {
    *v3 = (uint64_t)v4;
    v108 = *v4--;
    --v50;
  }
  while (*(_BYTE *)(v107 + v108 + 32) != 1);
LABEL_97:
  v12 = &v50[-*(_QWORD *)(a1 + 120)];
LABEL_9:
  v13 = (std::string *)a1;
  v14 = 20;
LABEL_10:
  boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fail(v13, v14, v12);
  return 0;
}

void sub_21830CB7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse_perl_verb(uint64_t a1)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  char *v4;
  int v5;
  unsigned __int8 *v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;
  uint64_t *v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  uint64_t *v15;
  uint64_t v16;
  int v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t result;
  int v21;
  uint64_t *v22;
  uint64_t v23;
  int matched;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t *v29;
  uint64_t v30;
  _DWORD *appended;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  unsigned int v43;
  unsigned __int8 *v44;
  unsigned int v45;
  const char *v46;
  uint64_t v47;
  unsigned __int8 *v48;
  unsigned int v49;
  unsigned __int8 *v50;
  unsigned int v51;
  unsigned __int8 *v52;
  unsigned int v53;
  unsigned __int8 *v54;
  unsigned int v55;
  unsigned __int8 *v56;
  unsigned int v57;
  unsigned __int8 *v58;
  unsigned int v59;

  v3 = *(unsigned __int8 **)(a1 + 128);
  v2 = *(unsigned __int8 **)(a1 + 136);
  v4 = (char *)(v2 + 1);
  *(_QWORD *)(a1 + 136) = v2 + 1;
  if (v2 + 1 == v3)
  {
    v12 = **(_QWORD **)(a1 + 8);
    do
    {
      *(_QWORD *)(a1 + 136) = v2;
      v13 = *v2--;
      --v4;
    }
    while (*(_BYTE *)(v12 + v13 + 32) != 1);
    goto LABEL_71;
  }
  v5 = *v4;
  if (v5 > 79)
  {
    switch(v5)
    {
      case 'P':
        v6 = v2 + 2;
        *(_QWORD *)(a1 + 136) = v6;
        if (v6 == v3)
        {
          v40 = **(_QWORD **)(a1 + 8);
          do
          {
            *(_QWORD *)(a1 + 136) = v4;
            v41 = *v4--;
            --v6;
          }
          while (*(_BYTE *)(v40 + v41 + 32) != 1);
          goto LABEL_67;
        }
        matched = boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::match_verb(a1, "RUNE");
        v4 = *(char **)(a1 + 136);
        if (matched)
        {
          v25 = *(uint64_t **)(a1 + 8);
          if (v4 == *(char **)(a1 + 128))
          {
            v26 = *v25;
          }
          else
          {
            v26 = *v25;
            if (*(_BYTE *)(v26 + *v4 + 32) == 2)
            {
              *(_QWORD *)(a1 + 136) = v4 + 1;
              boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::append_state((uint64_t *)a1, 32, 0x18uLL)[4] = 0;
              goto LABEL_40;
            }
          }
          v56 = (unsigned __int8 *)(v4 - 1);
          do
          {
            *(_QWORD *)(a1 + 136) = v56;
            v57 = *v56--;
            --v4;
          }
          while (*(_BYTE *)(v26 + v57 + 32) != 1);
          goto LABEL_71;
        }
        break;
      case 'S':
        v6 = v2 + 2;
        *(_QWORD *)(a1 + 136) = v6;
        if (v6 == v3)
        {
          v42 = **(_QWORD **)(a1 + 8);
          do
          {
            *(_QWORD *)(a1 + 136) = v4;
            v43 = *v4--;
            --v6;
          }
          while (*(_BYTE *)(v42 + v43 + 32) != 1);
          goto LABEL_67;
        }
        v28 = boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::match_verb(a1, "KIP");
        v4 = *(char **)(a1 + 136);
        if (v28)
        {
          v29 = *(uint64_t **)(a1 + 8);
          if (v4 == *(char **)(a1 + 128))
          {
            v30 = *v29;
          }
          else
          {
            v30 = *v29;
            if (*(_BYTE *)(v30 + *v4 + 32) == 2)
            {
              *(_QWORD *)(a1 + 136) = v4 + 1;
              appended = boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::append_state((uint64_t *)a1, 32, 0x18uLL);
              result = 1;
              appended[4] = 1;
              v27 = *(_QWORD *)a1;
              goto LABEL_46;
            }
          }
          v58 = (unsigned __int8 *)(v4 - 1);
          do
          {
            *(_QWORD *)(a1 + 136) = v58;
            v59 = *v58--;
            --v4;
          }
          while (*(_BYTE *)(v30 + v59 + 32) != 1);
          goto LABEL_71;
        }
        break;
      case 'T':
        v6 = v2 + 2;
        *(_QWORD *)(a1 + 136) = v6;
        if (v6 == v3)
        {
          v34 = **(_QWORD **)(a1 + 8);
          do
          {
            *(_QWORD *)(a1 + 136) = v4;
            v35 = *v4--;
            --v6;
          }
          while (*(_BYTE *)(v34 + v35 + 32) != 1);
          goto LABEL_67;
        }
        v14 = boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::match_verb(a1, "HEN");
        v4 = *(char **)(a1 + 136);
        if (v14)
        {
          v15 = *(uint64_t **)(a1 + 8);
          if (v4 == *(char **)(a1 + 128))
          {
            v16 = *v15;
          }
          else
          {
            v16 = *v15;
            if (*(_BYTE *)(v16 + *v4 + 32) == 2)
            {
              *(_QWORD *)(a1 + 136) = v4 + 1;
              boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::append_state((uint64_t *)a1, 33, 0x10uLL);
LABEL_40:
              v27 = *(_QWORD *)a1;
              result = 1;
LABEL_46:
              *(_BYTE *)(v27 + 401) = 1;
              return result;
            }
          }
          v50 = (unsigned __int8 *)(v4 - 1);
          do
          {
            *(_QWORD *)(a1 + 136) = v50;
            v51 = *v50--;
            --v4;
          }
          while (*(_BYTE *)(v16 + v51 + 32) != 1);
          goto LABEL_71;
        }
        break;
    }
LABEL_69:
    v47 = **(_QWORD **)(a1 + 8);
    v48 = (unsigned __int8 *)(v4 - 1);
    do
    {
      *(_QWORD *)(a1 + 136) = v48;
      v49 = *v48--;
      --v4;
    }
    while (*(_BYTE *)(v47 + v49 + 32) != 1);
LABEL_71:
    v46 = &v4[-*(_QWORD *)(a1 + 120)];
    goto LABEL_72;
  }
  if (v5 == 65)
  {
    v6 = v2 + 2;
    *(_QWORD *)(a1 + 136) = v6;
    if (v6 != v3)
    {
      v17 = boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::match_verb(a1, "CCEPT");
      v4 = *(char **)(a1 + 136);
      if (v17)
      {
        v18 = *(uint64_t **)(a1 + 8);
        if (v4 == *(char **)(a1 + 128))
        {
          v19 = *v18;
        }
        else
        {
          v19 = *v18;
          if (*(_BYTE *)(v19 + *v4 + 32) == 2)
          {
            *(_QWORD *)(a1 + 136) = v4 + 1;
            v10 = (uint64_t *)a1;
            v11 = 31;
            goto LABEL_29;
          }
        }
        v52 = (unsigned __int8 *)(v4 - 1);
        do
        {
          *(_QWORD *)(a1 + 136) = v52;
          v53 = *v52--;
          --v4;
        }
        while (*(_BYTE *)(v19 + v53 + 32) != 1);
        goto LABEL_71;
      }
      goto LABEL_69;
    }
    v36 = **(_QWORD **)(a1 + 8);
    do
    {
      *(_QWORD *)(a1 + 136) = v4;
      v37 = *v4--;
      --v6;
    }
    while (*(_BYTE *)(v36 + v37 + 32) != 1);
    goto LABEL_67;
  }
  if (v5 == 67)
  {
    v6 = v2 + 2;
    *(_QWORD *)(a1 + 136) = v6;
    if (v6 == v3)
    {
      v38 = **(_QWORD **)(a1 + 8);
      do
      {
        *(_QWORD *)(a1 + 136) = v4;
        v39 = *v4--;
        --v6;
      }
      while (*(_BYTE *)(v38 + v39 + 32) != 1);
      goto LABEL_67;
    }
    v21 = boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::match_verb(a1, "OMMIT");
    v4 = *(char **)(a1 + 136);
    if (v21)
    {
      v22 = *(uint64_t **)(a1 + 8);
      if (v4 == *(char **)(a1 + 128))
      {
        v23 = *v22;
      }
      else
      {
        v23 = *v22;
        if (*(_BYTE *)(v23 + *v4 + 32) == 2)
        {
          *(_QWORD *)(a1 + 136) = v4 + 1;
          boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::append_state((uint64_t *)a1, 32, 0x18uLL)[4] = 2;
          goto LABEL_40;
        }
      }
      v54 = (unsigned __int8 *)(v4 - 1);
      do
      {
        *(_QWORD *)(a1 + 136) = v54;
        v55 = *v54--;
        --v4;
      }
      while (*(_BYTE *)(v23 + v55 + 32) != 1);
      goto LABEL_71;
    }
    goto LABEL_69;
  }
  if (v5 != 70)
    goto LABEL_69;
  v6 = v2 + 2;
  *(_QWORD *)(a1 + 136) = v6;
  v7 = *(uint64_t **)(a1 + 8);
  if (v6 != v3)
  {
    v8 = *v7;
    if (*(_BYTE *)(*v7 + *v6 + 32) == 2)
      goto LABEL_10;
    v9 = boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::match_verb(a1, "AIL");
    v6 = *(unsigned __int8 **)(a1 + 136);
    if (v9)
    {
      v3 = *(unsigned __int8 **)(a1 + 128);
      v8 = **(_QWORD **)(a1 + 8);
LABEL_10:
      if (v6 != v3 && *(_BYTE *)(v8 + *v6 + 32) == 2)
      {
        *(_QWORD *)(a1 + 136) = v6 + 1;
        v10 = (uint64_t *)a1;
        v11 = 30;
LABEL_29:
        boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::append_state(v10, v11, 0x10uLL);
        return 1;
      }
      v44 = v6 - 1;
      do
      {
        *(_QWORD *)(a1 + 136) = v44;
        v45 = *v44--;
        --v6;
      }
      while (*(_BYTE *)(v8 + v45 + 32) != 1);
      goto LABEL_67;
    }
    v4 = *(char **)(a1 + 136);
    goto LABEL_69;
  }
  v32 = *v7;
  do
  {
    *(_QWORD *)(a1 + 136) = v4;
    v33 = *v4--;
    --v6;
  }
  while (*(_BYTE *)(v32 + v33 + 32) != 1);
LABEL_67:
  v46 = (const char *)&v6[-*(_QWORD *)(a1 + 120)];
LABEL_72:
  boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fail((std::string *)a1, 20, v46);
  return 0;
}

void std::vector<std::pair<unsigned long,unsigned long>>::push_back[abi:ne180100](void **a1, _OWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _OWORD *v7;
  _OWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;

  v6 = (unint64_t)a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_OWORD **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    v9 = ((char *)v7 - (_BYTE *)*a1) >> 4;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 60)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v11 = v5 - (_QWORD)*a1;
    if (v11 >> 3 > v10)
      v10 = v11 >> 3;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
      v12 = 0xFFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::flexible_type>>(v4, v12);
    else
      v13 = 0;
    v14 = &v13[16 * v9];
    v15 = &v13[16 * v12];
    *(_OWORD *)v14 = *a2;
    v8 = v14 + 16;
    v17 = (char *)*a1;
    v16 = (char *)a1[1];
    if (v16 != *a1)
    {
      do
      {
        *((_OWORD *)v14 - 1) = *((_OWORD *)v16 - 1);
        v14 -= 16;
        v16 -= 16;
      }
      while (v16 != v17);
      v16 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v8;
    a1[2] = v15;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *v7 = *a2;
    v8 = v7 + 1;
  }
  a1[1] = v8;
}

void boost::re_detail_106800::named_subexpressions::set_name<char>(void **a1, char *a2, char *a3, unsigned int a4)
{
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  unint64_t *v18;
  char *v19;
  char *v20;
  char *v21;
  unint64_t v22;
  _DWORD *v23;
  _DWORD *v24;
  int v26;
  int v27;
  _DWORD *v28;
  int v29;

  if (a2 == a3)
  {
    v8 = 0x271000000000;
  }
  else
  {
    v6 = 0;
    do
    {
      v7 = *a2++;
      v6 ^= (v6 << 6) + (v6 >> 2) + 2654435769u + v7;
    }
    while (a2 != a3);
    v8 = ((v6 % 0x7FFFD8EE) << 32) + 0x271000000000;
  }
  v9 = (uint64_t)(a1 + 2);
  v10 = (unint64_t)a1[2];
  v11 = (unint64_t *)a1[1];
  if ((unint64_t)v11 >= v10)
  {
    v13 = ((char *)v11 - (_BYTE *)*a1) >> 3;
    if ((unint64_t)(v13 + 1) >> 61)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v14 = v10 - (_QWORD)*a1;
    v15 = v14 >> 2;
    if (v14 >> 2 <= (unint64_t)(v13 + 1))
      v15 = v13 + 1;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
      v16 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v16 = v15;
    if (v16)
      v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v9, v16);
    else
      v17 = 0;
    v18 = (unint64_t *)&v17[8 * v13];
    v19 = &v17[8 * v16];
    *v18 = v8 | a4;
    v12 = v18 + 1;
    v21 = (char *)*a1;
    v20 = (char *)a1[1];
    if (v20 != *a1)
    {
      do
      {
        v22 = *((_QWORD *)v20 - 1);
        v20 -= 8;
        *--v18 = v22;
      }
      while (v20 != v21);
      v20 = (char *)*a1;
    }
    *a1 = v18;
    a1[1] = v12;
    a1[2] = v19;
    if (v20)
      operator delete(v20);
  }
  else
  {
    *v11 = v8 | a4;
    v12 = v11 + 1;
  }
  a1[1] = v12;
  v23 = *a1;
  v24 = v12 - 1;
  if (*a1 != v12 && v24 != v23)
  {
    do
    {
      v26 = v24[1];
      v27 = *(v24 - 1);
      if (v26 >= v27)
        break;
      v28 = v24 - 2;
      v29 = *(v24 - 2);
      *v28 = *v24;
      *(v24 - 1) = v26;
      *v24 = v29;
      v24[1] = v27;
      v24 -= 2;
    }
    while (v28 != v23);
  }
}

uint64_t boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse_options(std::string *a1)
{
  uint64_t v1;
  char *v2;
  unsigned __int8 *v3;
  int v4;
  uint64_t v5;
  unsigned int v6;
  unsigned __int8 *v7;
  char *v9;
  char *size;
  int v11;
  uint64_t v12;
  char *v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;

  v1 = *(unsigned int *)(a1->__r_.__value_.__r.__words[0] + 40);
  v2 = (char *)a1[5].__r_.__value_.__r.__words[2];
  while (1)
  {
    v3 = (unsigned __int8 *)v2;
    v4 = *v2;
    if (v4 <= 114)
    {
      if (v4 == 105)
      {
        v1 = v1 | 0x100000;
      }
      else
      {
        if (v4 != 109)
          break;
        v1 = v1 & 0xFFFFFBFF;
      }
      goto LABEL_11;
    }
    if (v4 == 120)
    {
      v1 = v1 | 0x800;
      goto LABEL_11;
    }
    if (v4 != 115)
      break;
    v1 = v1 & 0xFFFFCFFF | 0x1000;
LABEL_11:
    v2 = (char *)(v3 + 1);
    a1[5].__r_.__value_.__r.__words[2] = (std::string::size_type)(v3 + 1);
    if (v3 + 1 == (unsigned __int8 *)a1[5].__r_.__value_.__l.__size_)
    {
      v5 = *(_QWORD *)a1->__r_.__value_.__l.__size_;
      do
      {
        a1[5].__r_.__value_.__r.__words[2] = (std::string::size_type)v3;
        v6 = *v3--;
      }
      while (*(_BYTE *)(v5 + v6 + 32) != 1);
      goto LABEL_14;
    }
  }
  if (v4 == 45)
  {
    v9 = (char *)(v3 + 1);
    a1[5].__r_.__value_.__r.__words[2] = (std::string::size_type)(v3 + 1);
    size = (char *)a1[5].__r_.__value_.__l.__size_;
    if (v3 + 1 == (unsigned __int8 *)size)
    {
      v15 = *(_QWORD *)a1->__r_.__value_.__l.__size_;
      do
      {
        a1[5].__r_.__value_.__r.__words[2] = (std::string::size_type)v3;
        v16 = *v3--;
      }
      while (*(_BYTE *)(v15 + v16 + 32) != 1);
LABEL_14:
      v7 = v3 + 1;
    }
    else
    {
      do
      {
        v11 = *v9;
        if (v11 > 114)
        {
          if (v11 == 120)
          {
            v1 = v1 & 0xFFFFF7FF;
          }
          else
          {
            if (v11 != 115)
              return v1;
            v1 = v1 & 0xFFFFCFFF | 0x2000;
          }
        }
        else if (v11 == 105)
        {
          v1 = v1 & 0xFFEFFFFF;
        }
        else
        {
          if (v11 != 109)
            return v1;
          v1 = v1 | 0x400;
        }
        a1[5].__r_.__value_.__r.__words[2] = (std::string::size_type)++v9;
      }
      while (v9 != size);
      v12 = *(_QWORD *)a1->__r_.__value_.__l.__size_;
      v13 = v9 - 1;
      do
      {
        a1[5].__r_.__value_.__r.__words[2] = (std::string::size_type)v13;
        v14 = *v13--;
      }
      while (*(_BYTE *)(v12 + v14 + 32) != 1);
      v7 = (unsigned __int8 *)(v13 + 1);
    }
    boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fail(a1, 8, (const char *)&v7[-a1[5].__r_.__value_.__r.__words[0]]);
    return 0;
  }
  return v1;
}

char *boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::insert_state(_QWORD *a1, uint64_t a2, int a3, unint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *result;

  v7 = *a1;
  v8 = *(_QWORD *)(*a1 + 352);
  v9 = (*(_QWORD *)(*a1 + 360) - v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)(*a1 + 360) = v8 + v9;
  v10 = a1[2];
  if (v10)
  {
    *(_QWORD *)(v10 + 8) = v9 - v10 + v8;
    v11 = a1[2];
    v7 = *a1;
    v8 = *(_QWORD *)(*a1 + 352);
  }
  else
  {
    v11 = 0;
  }
  v12 = v11 + a4 - v8;
  result = boost::re_detail_106800::raw_storage::insert((boost::re_detail_106800::raw_storage *)(v7 + 344), a2, a4);
  *((_QWORD *)result + 1) = a4;
  *(_DWORD *)result = a3;
  a1[2] = *(_QWORD *)(*a1 + 352) + v12;
  return result;
}

uint64_t boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::match_verb(uint64_t a1, _BYTE *a2)
{
  int v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  uint64_t v5;
  int v6;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;

  v2 = *a2;
  if (!*a2)
    return 1;
  v3 = *(unsigned __int8 **)(a1 + 136);
  v4 = a2 + 1;
  while (1)
  {
    v5 = *v3;
    if (v2 != (_DWORD)v5)
      break;
    *(_QWORD *)(a1 + 136) = v3 + 1;
    if (v3 + 1 == *(unsigned __int8 **)(a1 + 128))
    {
      v10 = **(_QWORD **)(a1 + 8);
      do
      {
        *(_QWORD *)(a1 + 136) = v3;
        v11 = *v3--;
      }
      while (*(_BYTE *)(v10 + v11 + 32) != 1);
      goto LABEL_13;
    }
    v6 = *v4++;
    v2 = v6;
    ++v3;
    if (!v6)
      return 1;
  }
  v8 = **(_QWORD **)(a1 + 8);
  if (*(_BYTE *)(v8 + v5 + 32) == 1)
    goto LABEL_14;
  --v3;
  do
  {
    *(_QWORD *)(a1 + 136) = v3;
    v9 = *v3--;
  }
  while (*(_BYTE *)(v8 + v9 + 32) != 1);
LABEL_13:
  ++v3;
LABEL_14:
  boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fail((std::string *)a1, 20, (const char *)&v3[-*(_QWORD *)(a1 + 120)]);
  return 0;
}

char *boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::append_set(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a2 + 49))
    return boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::append_set(a1, a2);
  else
    return (char *)boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::append_set(a1, a2);
}

{
  _DWORD *appended;
  _QWORD *v5;
  _QWORD *v6;
  int v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;
  std::string::value_type *v12;
  std::string::value_type *v13;
  _QWORD *v14;
  _QWORD *v15;
  int v16;
  _QWORD *v17;
  _QWORD *v18;
  int v19;
  int v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  _BYTE *v24;
  char v25;
  char v26;
  _QWORD *v27;
  _QWORD *v28;
  std::string::value_type *v29;
  std::string::value_type v30;
  std::string::value_type *v31;
  std::string::value_type v32;
  uint64_t v33;
  uint64_t v34;
  std::string::value_type v35;
  std::string::value_type v36;
  uint64_t v37;
  uint64_t v38;
  std::string::const_iterator v39;
  std::string::size_type v40;
  std::string *v41;
  std::string::const_iterator v42;
  std::string::size_type v43;
  std::string *p_p;
  std::string::const_iterator v45;
  std::string::size_type v46;
  std::string *v47;
  std::string::const_iterator v48;
  char v49;
  int v50;
  void *v51;
  std::string::size_type v52;
  std::string *v53;
  std::string::size_type v54;
  std::string *v55;
  size_t v56;
  int v57;
  BOOL v58;
  _BYTE *v59;
  _BYTE *v60;
  std::string::size_type v61;
  char v62;
  std::string::size_type v63;
  size_t v64;
  std::string *v65;
  std::string::size_type v66;
  char *v67;
  std::string::size_type v68;
  char v69;
  std::string::size_type v70;
  size_t v71;
  std::string *v72;
  _QWORD *v73;
  unsigned __int8 v74;
  std::string::value_type *v75;
  size_t v76;
  char v77;
  std::string::size_type size;
  _BYTE *v79;
  _BYTE *v80;
  std::string *v81;
  _QWORD *v82;
  _QWORD *v83;
  char *result;
  uint64_t v85;
  uint64_t v86;
  _DWORD *v87;
  std::string::size_type v88;
  std::string::size_type v89;
  uint64_t v90;
  std::string::value_type *v91;
  std::string __p;
  std::string v93;
  std::string v94;
  uint64_t v95;

  v95 = *MEMORY[0x24BDAC8D0];
  appended = boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::append_state((uint64_t *)a1, 14, 0x28uLL);
  v5 = (_QWORD *)(a2 + 8);
  v6 = *(_QWORD **)a2;
  if (*(_QWORD *)a2 == a2 + 8)
  {
    v7 = 0;
  }
  else
  {
    v7 = 0;
    v8 = *(_QWORD **)a2;
    do
    {
      v9 = (_QWORD *)v8[1];
      if (v9)
      {
        do
        {
          v10 = v9;
          v9 = (_QWORD *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          v10 = (_QWORD *)v8[2];
          v11 = *v10 == (_QWORD)v8;
          v8 = v10;
        }
        while (!v11);
      }
      ++v7;
      v8 = v10;
    }
    while (v10 != v5);
  }
  appended[4] = v7;
  v12 = *(std::string::value_type **)(a2 + 24);
  v13 = *(std::string::value_type **)(a2 + 32);
  appended[5] = ((unint64_t)(v13 - v12) >> 2) & 0x7FFFFFFF;
  v14 = *(_QWORD **)(a2 + 64);
  v15 = (_QWORD *)(a2 + 72);
  if (v14 == (_QWORD *)(a2 + 72))
  {
    v16 = 0;
  }
  else
  {
    v16 = 0;
    do
    {
      v17 = (_QWORD *)v14[1];
      if (v17)
      {
        do
        {
          v18 = v17;
          v17 = (_QWORD *)*v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          v18 = (_QWORD *)v14[2];
          v11 = *v18 == (_QWORD)v14;
          v14 = v18;
        }
        while (!v11);
      }
      ++v16;
      v14 = v18;
    }
    while (v18 != v15);
  }
  appended[6] = v16;
  v19 = *(_DWORD *)(a2 + 52);
  appended[7] = v19;
  v20 = *(_DWORD *)(a2 + 56);
  appended[8] = v20;
  v21 = *(_QWORD *)a1;
  if ((*(_BYTE *)(*(_QWORD *)a1 + 42) & 0x10) != 0)
  {
    v22 = *(_DWORD *)(a1 + 88);
    if ((v22 & ~v19) == 0 || (*(_DWORD *)(a1 + 92) & ~v19) == 0)
      appended[7] = *(_DWORD *)(a1 + 96) | v19;
    if ((v22 & ~v20) == 0 || (*(_DWORD *)(a1 + 92) & ~v20) == 0)
      appended[8] = *(_DWORD *)(a1 + 96) | v20;
  }
  *((_BYTE *)appended + 36) = *(_BYTE *)(a2 + 48);
  *((_BYTE *)appended + 37) = *(_BYTE *)(a2 + 49) ^ 1;
  v85 = *(_QWORD *)(v21 + 352);
  v86 = a2;
  v87 = appended;
  if (v6 != v5)
  {
    do
    {
      if (*((_BYTE *)v6 + 25))
      {
        if (*((_BYTE *)v6 + 26))
          v23 = 3;
        else
          v23 = 2;
      }
      else
      {
        v23 = 1;
      }
      v24 = (_BYTE *)boost::re_detail_106800::raw_storage::extend((boost::re_detail_106800::raw_storage *)(*(_QWORD *)a1 + 344), v23);
      v25 = *((_BYTE *)v6 + 25);
      if (*(_BYTE *)(a1 + 24))
        v25 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(**(_QWORD **)(a1 + 8) + 8) + 40))(*(_QWORD *)(**(_QWORD **)(a1 + 8) + 8), v25);
      *v24 = v25;
      if (*((_BYTE *)v6 + 25))
      {
        v26 = *((_BYTE *)v6 + 26);
        if (v26)
        {
          if (*(_BYTE *)(a1 + 24))
            v26 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(**(_QWORD **)(a1 + 8) + 8) + 40))(*(_QWORD *)(**(_QWORD **)(a1 + 8) + 8), v26);
          v24[1] = v26;
          v24 += 2;
        }
        else
        {
          ++v24;
        }
      }
      *v24 = 0;
      v27 = (_QWORD *)v6[1];
      if (v27)
      {
        do
        {
          v28 = v27;
          v27 = (_QWORD *)*v27;
        }
        while (v27);
      }
      else
      {
        do
        {
          v28 = (_QWORD *)v6[2];
          v11 = *v28 == (_QWORD)v6;
          v6 = v28;
        }
        while (!v11);
      }
      v6 = v28;
    }
    while (v28 != v5);
    v12 = *(std::string::value_type **)(a2 + 24);
    v13 = *(std::string::value_type **)(a2 + 32);
  }
  if (v12 == v13)
  {
LABEL_137:
    v73 = *(_QWORD **)(v86 + 64);
    if (v73 != v15)
    {
      do
      {
        memset(&v93, 0, sizeof(v93));
        v74 = *((_BYTE *)v73 + 26);
        v75 = (char *)v73 + 25;
        if (v74)
        {
          v94.__r_.__value_.__s.__data_[0] = *v75;
          *(_WORD *)((char *)&v94.__r_.__value_.__l.__data_ + 1) = v74;
          boost::re_detail_106800::cpp_regex_traits_implementation<char>::transform_primary(**(_QWORD **)(a1 + 8), (std::string::value_type *)&v94, &v94.__r_.__value_.__s.__data_[2], (uint64_t *)&__p);
        }
        else
        {
          boost::re_detail_106800::cpp_regex_traits_implementation<char>::transform_primary(**(_QWORD **)(a1 + 8), v75, (std::string::value_type *)v73 + 26, (uint64_t *)&__p);
          if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v93.__r_.__value_.__l.__data_);
        }
        v93 = __p;
        v76 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        v77 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          size = v93.__r_.__value_.__l.__size_;
          if (!v93.__r_.__value_.__l.__size_)
            goto LABEL_164;
        }
        else
        {
          if (!*((_BYTE *)&__p.__r_.__value_.__s + 23))
            return 0;
          size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        v79 = (_BYTE *)boost::re_detail_106800::raw_storage::extend((boost::re_detail_106800::raw_storage *)(*(_QWORD *)a1 + 344), size + 1);
        v80 = v79;
        if (v77 < 0)
          v76 = v93.__r_.__value_.__l.__size_;
        if (v76)
        {
          if (v77 >= 0)
            v81 = &v93;
          else
            v81 = (std::string *)v93.__r_.__value_.__r.__words[0];
          memmove(v79, v81, v76);
        }
        v80[v76] = 0;
        v82 = (_QWORD *)v73[1];
        if (v82)
        {
          do
          {
            v83 = v82;
            v82 = (_QWORD *)*v82;
          }
          while (v82);
        }
        else
        {
          do
          {
            v83 = (_QWORD *)v73[2];
            v11 = *v83 == (_QWORD)v73;
            v73 = v83;
          }
          while (!v11);
        }
        if (v77 < 0)
          operator delete(v93.__r_.__value_.__l.__data_);
        v73 = v83;
      }
      while (v83 != v15);
    }
    result = (char *)v87 + *(_QWORD *)(*(_QWORD *)a1 + 352) - v85;
    *(_QWORD *)(a1 + 16) = result;
    return result;
  }
  v29 = v12 + 3;
  v91 = v13;
  while (1)
  {
    v31 = v29 - 3;
    v30 = *(v29 - 3);
    v32 = *(v29 - 2);
    if (*(_BYTE *)(a1 + 24)
      && (v33 = *(_QWORD *)(**(_QWORD **)(a1 + 8) + 8),
          v30 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v33 + 40))(v33, v30),
          *(_BYTE *)(a1 + 24)))
    {
      v34 = *(_QWORD *)(**(_QWORD **)(a1 + 8) + 8);
      v32 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v34 + 40))(v34, v32);
      v35 = *(v29 - 1);
      v36 = *v29;
      if (*(_BYTE *)(a1 + 24))
      {
        v37 = *(_QWORD *)(**(_QWORD **)(a1 + 8) + 8);
        v35 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v37 + 40))(v37, v35);
        if (*(_BYTE *)(a1 + 24))
        {
          v38 = *(_QWORD *)(**(_QWORD **)(a1 + 8) + 8);
          v36 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v38 + 40))(v38, v36);
        }
      }
    }
    else
    {
      v35 = *(v29 - 1);
      v36 = *v29;
    }
    memset(&v93, 0, sizeof(v93));
    memset(&__p, 0, sizeof(__p));
    if ((*(_BYTE *)(*(_QWORD *)a1 + 42) & 0x20) == 0)
    {
      if (v32)
      {
        v39.__i_ = (std::__wrap_iter<const char *>::iterator_type)&v93;
        std::string::insert(&v93, v39, v30);
        v40 = HIBYTE(v93.__r_.__value_.__r.__words[2]);
        v41 = &v93;
        if ((v93.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        {
          v40 = v93.__r_.__value_.__l.__size_;
          v41 = (std::string *)v93.__r_.__value_.__r.__words[0];
        }
        v42.__i_ = (char *)v41 + v40;
        std::string::insert(&v93, v42, v32);
      }
      else
      {
        v90 &= 0xFFFFFFFFFFFF0000;
        v93.__r_.__value_.__r.__words[0] = v90 & 0xFFFFFFFFFFFFFF00 | v30;
        *((_BYTE *)&v93.__r_.__value_.__s + 23) = 1;
      }
      v43 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v43 = __p.__r_.__value_.__l.__size_;
      v45.__i_ = (char *)p_p + v43;
      if (v36)
      {
        std::string::insert(&__p, v45, v35);
        v46 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v47 = &__p;
        else
          v47 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v46 = __p.__r_.__value_.__l.__size_;
        v48.__i_ = (char *)v47 + v46;
        std::string::insert(&__p, v48, v36);
      }
      else
      {
        std::string::insert(&__p, v45, v35);
      }
      goto LABEL_92;
    }
    boost::re_detail_106800::cpp_regex_traits_implementation<char>::transform(**(_QWORD **)(a1 + 8), &v94);
    if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v93.__r_.__value_.__l.__data_);
    v93 = v94;
    boost::re_detail_106800::cpp_regex_traits_implementation<char>::transform(**(_QWORD **)(a1 + 8), &v94);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __p = v94;
    if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
    {
      if (!v93.__r_.__value_.__l.__size_)
      {
        operator delete(v93.__r_.__value_.__l.__data_);
LABEL_85:
        v89 &= 0xFFFFFFFFFFFF0000;
        v93.__r_.__value_.__r.__words[0] = v89;
        v93.__r_.__value_.__l.__size_ = v94.__r_.__value_.__r.__words[0];
        *(std::string::size_type *)((char *)&v93.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v94.__r_.__value_.__r.__words + 7);
        *((_BYTE *)&v93.__r_.__value_.__s + 23) = 1;
      }
    }
    else if (!*((_BYTE *)&v93.__r_.__value_.__s + 23))
    {
      goto LABEL_85;
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      if (__p.__r_.__value_.__l.__size_)
        goto LABEL_92;
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    else if (*((_BYTE *)&__p.__r_.__value_.__s + 23))
    {
      goto LABEL_92;
    }
    v88 &= 0xFFFFFFFFFFFF0000;
    __p.__r_.__value_.__r.__words[0] = v88;
    __p.__r_.__value_.__l.__size_ = v94.__r_.__value_.__r.__words[0];
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v94.__r_.__value_.__r.__words + 7);
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = 1;
LABEL_92:
    v49 = HIBYTE(v93.__r_.__value_.__r.__words[2]);
    v50 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    v51 = (void *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v52 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v52 = __p.__r_.__value_.__l.__size_;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v53 = &__p;
    else
      v53 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((v93.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v54 = HIBYTE(v93.__r_.__value_.__r.__words[2]);
    else
      v54 = v93.__r_.__value_.__l.__size_;
    if ((v93.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v55 = &v93;
    else
      v55 = (std::string *)v93.__r_.__value_.__r.__words[0];
    if (v54 >= v52)
      v56 = v52;
    else
      v56 = v54;
    v57 = memcmp(v53, v55, v56);
    v58 = v52 < v54;
    if (v57)
      v58 = v57 < 0;
    if (v58)
      break;
    v59 = (_BYTE *)boost::re_detail_106800::raw_storage::extend((boost::re_detail_106800::raw_storage *)(*(_QWORD *)a1 + 344), v54 + v52 + 2);
    v60 = v59;
    v61 = HIBYTE(v93.__r_.__value_.__r.__words[2]);
    v62 = HIBYTE(v93.__r_.__value_.__r.__words[2]);
    v63 = v93.__r_.__value_.__l.__size_;
    if ((v93.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v64 = HIBYTE(v93.__r_.__value_.__r.__words[2]);
    else
      v64 = v93.__r_.__value_.__l.__size_;
    if (v64)
    {
      if ((v93.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v65 = &v93;
      else
        v65 = (std::string *)v93.__r_.__value_.__r.__words[0];
      memmove(v59, v65, v64);
      v61 = HIBYTE(v93.__r_.__value_.__r.__words[2]);
      v63 = v93.__r_.__value_.__l.__size_;
      v62 = HIBYTE(v93.__r_.__value_.__r.__words[2]);
    }
    if (v62 < 0)
      v61 = v63;
    v60[v61] = 0;
    v66 = HIBYTE(v93.__r_.__value_.__r.__words[2]);
    if ((v93.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v66 = v93.__r_.__value_.__l.__size_;
    v67 = &v60[v66 + 1];
    v68 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    v69 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    v70 = __p.__r_.__value_.__l.__size_;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v71 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v71 = __p.__r_.__value_.__l.__size_;
    if (v71)
    {
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v72 = &__p;
      else
        v72 = (std::string *)__p.__r_.__value_.__r.__words[0];
      memmove(v67, v72, v71);
      v68 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      v70 = __p.__r_.__value_.__l.__size_;
      v69 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    if (v69 < 0)
      v68 = v70;
    v67[v68] = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v93.__r_.__value_.__l.__data_);
    v29 += 4;
    if (v31 + 4 == v91)
      goto LABEL_137;
  }
  if (v50 < 0)
  {
    operator delete(v51);
    if ((*((_BYTE *)&v93.__r_.__value_.__s + 23) & 0x80) != 0)
LABEL_164:
      operator delete(v93.__r_.__value_.__l.__data_);
  }
  else if (v49 < 0)
  {
    goto LABEL_164;
  }
  return 0;
}

uint64_t boost::re_detail_106800::basic_char_set<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::~basic_char_set(uint64_t a1)
{
  void *v2;

  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy(a1 + 64, *(_QWORD **)(a1 + 72));
  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy(a1, *(_QWORD **)(a1 + 8));
  return a1;
}

char *boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::append_literal(_QWORD *a1, uint64_t a2)
{
  _DWORD *v4;
  char *v5;
  char *appended;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = (_DWORD *)a1[2];
  if (v4 && *v4 == 2)
  {
    v5 = (char *)v4 - *(_QWORD *)(*a1 + 352);
    boost::re_detail_106800::raw_storage::extend((boost::re_detail_106800::raw_storage *)(*a1 + 344), 1uLL);
    appended = &v5[*(_QWORD *)(*a1 + 352)];
    a1[2] = appended;
    if (*((_BYTE *)a1 + 24))
    {
      v7 = *(_QWORD *)(*(_QWORD *)a1[1] + 8);
      LOBYTE(a2) = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 40))(v7, a2);
    }
    v8 = *((unsigned int *)appended + 4);
    appended[v8 + 24] = a2;
    *((_DWORD *)appended + 4) = v8 + 1;
  }
  else
  {
    appended = (char *)boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::append_state(a1, 2, 0x19uLL);
    *((_DWORD *)appended + 4) = 1;
    if (*((_BYTE *)a1 + 24))
    {
      v9 = *(_QWORD *)(*(_QWORD *)a1[1] + 8);
      LOBYTE(a2) = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 40))(v9, a2);
    }
    appended[24] = a2;
  }
  return appended;
}

uint64_t boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::unescape_character(std::string *a1)
{
  uint64_t *v2;
  unsigned __int8 *v3;
  unsigned __int8 *size;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  std::string::size_type v10;
  unsigned __int8 *v11;
  unsigned int v12;
  const char *v13;
  const char *v14;
  char *v15;
  unsigned __int8 *v16;
  unsigned int v17;
  const char *v18;
  unsigned int v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  unint64_t v22;
  unsigned __int8 *v23;
  uint64_t v24;
  unsigned __int8 *v25;
  unsigned int v26;
  const char *v27;
  unsigned int v28;
  const char *v29;
  char *v30;
  unsigned int v31;
  const char *v32;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  std::string::size_type v37;
  unsigned __int8 *v38;
  unsigned int v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  std::string::size_type v43;
  unsigned __int8 *v44;
  unsigned int v45;
  const char *v46;
  unsigned __int8 *v47;
  unsigned int v48;
  const char *v49;
  char v50;
  _BYTE *p_p;
  uint64_t v52;
  std::string::size_type v53;
  unsigned __int8 *v54;
  unsigned int v55;
  uint64_t v56;
  char *v57;
  unsigned int v58;
  unsigned __int8 *v59;
  void *__p;
  uint64_t v61;
  char v62;

  v2 = (uint64_t *)&a1[5].__r_.__value_.__r.__words[2];
  v3 = (unsigned __int8 *)a1[5].__r_.__value_.__r.__words[2];
  size = (unsigned __int8 *)a1[5].__r_.__value_.__l.__size_;
  if (v3 == size)
  {
    v14 = (const char *)&v3[-a1[5].__r_.__value_.__r.__words[0]];
    std::string::basic_string[abi:ne180100]<0>(&__p, "Escape sequence terminated prematurely.");
    boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fail(a1, 5, v14, (uint64_t)&__p);
LABEL_8:
    if (v62 < 0)
      operator delete(__p);
LABEL_10:
    LOBYTE(v8) = 0;
  }
  else
  {
    v5 = (uint64_t *)a1->__r_.__value_.__l.__size_;
    v6 = *v3;
    v7 = *v5;
    LOBYTE(v8) = 7;
    switch(*(_BYTE *)(*v5 + v6 + 32))
    {
      case 0x11:
        v59 = v3;
        if (boost::cpp_regex_traits<char>::toi((uint64_t)v5, (uint64_t *)&v59, v3 + 1, 8))
        {
          v9 = *(_QWORD *)a1->__r_.__value_.__l.__size_;
          v10 = a1[5].__r_.__value_.__r.__words[2];
          v11 = (unsigned __int8 *)(v10 - 1);
          do
          {
            *v2 = (uint64_t)v11;
            v12 = *v11--;
            --v10;
          }
          while (*(_BYTE *)(v9 + v12 + 32) != 12);
          v13 = (const char *)(v10 - a1[5].__r_.__value_.__r.__words[0]);
          std::string::basic_string[abi:ne180100]<0>(&__p, "Invalid octal escape sequence.");
          boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fail(a1, 5, v13, (uint64_t)&__p);
          goto LABEL_8;
        }
        v34 = size - v3;
        if (size - v3 >= 4)
          v34 = 4;
        v35 = boost::cpp_regex_traits<char>::toi(a1->__r_.__value_.__l.__size_, v2, (_BYTE *)(a1[5].__r_.__value_.__r.__words[2] + v34), 8);
        if (v35 < 0x80)
          goto LABEL_57;
        v36 = *(_QWORD *)a1->__r_.__value_.__l.__size_;
        v37 = a1[5].__r_.__value_.__r.__words[2];
        v38 = (unsigned __int8 *)(v37 - 1);
        do
        {
          *v2 = (uint64_t)v38;
          v39 = *v38--;
          --v37;
        }
        while (*(_BYTE *)(v36 + v39 + 32) != 12);
        v40 = (const char *)(v37 - a1[5].__r_.__value_.__r.__words[0]);
        std::string::basic_string[abi:ne180100]<0>(&__p, "Octal escape sequence is invalid.");
        boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fail(a1, 5, v40, (uint64_t)&__p);
        goto LABEL_8;
      case 0x12:
        LOBYTE(v8) = 8;
        goto LABEL_45;
      case 0x13:
      case 0x14:
      case 0x15:
      case 0x16:
      case 0x17:
      case 0x18:
      case 0x19:
      case 0x1A:
      case 0x1B:
      case 0x24:
      case 0x25:
        goto LABEL_21;
      case 0x1C:
        goto LABEL_45;
      case 0x1D:
        LOBYTE(v8) = 12;
        goto LABEL_45;
      case 0x1E:
        LOBYTE(v8) = 10;
        goto LABEL_45;
      case 0x1F:
        LOBYTE(v8) = 13;
        goto LABEL_45;
      case 0x20:
        LOBYTE(v8) = 9;
        goto LABEL_45;
      case 0x21:
        LOBYTE(v8) = 11;
        goto LABEL_45;
      case 0x22:
        v20 = v3 + 1;
        *v2 = (uint64_t)(v3 + 1);
        if (v3 + 1 == size)
        {
          do
          {
            *v2 = (uint64_t)v3;
            v26 = *v3--;
            --v20;
          }
          while (*(_BYTE *)(v7 + v26 + 32) != 12);
          v27 = (const char *)&v20[-a1[5].__r_.__value_.__r.__words[0]];
          std::string::basic_string[abi:ne180100]<0>(&__p, "Hexadecimal escape sequence terminated prematurely.");
          boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fail(a1, 5, v27, (uint64_t)&__p);
        }
        else if (*(_BYTE *)(v7 + *v20 + 32) == 15)
        {
          v21 = v3 + 2;
          *v2 = (uint64_t)(v3 + 2);
          if (v3 + 2 == size)
          {
            do
            {
              *v2 = (uint64_t)v20;
              v28 = *v20--;
              --v21;
            }
            while (*(_BYTE *)(v7 + v28 + 32) != 12);
            v29 = (const char *)&v21[-a1[5].__r_.__value_.__r.__words[0]];
            std::string::basic_string[abi:ne180100]<0>(&__p, "Missing } in hexadecimal escape sequence.");
            boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fail(a1, 5, v29, (uint64_t)&__p);
          }
          else
          {
            v22 = boost::cpp_regex_traits<char>::toi((uint64_t)v5, v2, size, 16);
            v23 = (unsigned __int8 *)a1[5].__r_.__value_.__r.__words[2];
            v24 = *(_QWORD *)a1->__r_.__value_.__l.__size_;
            if (v23 != (unsigned __int8 *)a1[5].__r_.__value_.__l.__size_)
            {
              LOBYTE(v8) = v22;
              if ((v22 & 0x8000000000000000) == 0 && v22 <= 0x7F && *(_BYTE *)(v24 + *v23 + 32) == 16)
              {
                v25 = v23 + 1;
                goto LABEL_46;
              }
            }
            v47 = v23 - 1;
            do
            {
              *v2 = (uint64_t)v47;
              v48 = *v47--;
              --v23;
            }
            while (*(_BYTE *)(v24 + v48 + 32) != 12);
            v49 = (const char *)&v23[-a1[5].__r_.__value_.__r.__words[0]];
            std::string::basic_string[abi:ne180100]<0>(&__p, "Hexadecimal escape sequence was invalid.");
            boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fail(a1, 10, v49, (uint64_t)&__p);
          }
        }
        else
        {
          v41 = size - v20;
          if (size - v20 >= 2)
            v41 = 2;
          v35 = boost::cpp_regex_traits<char>::toi((uint64_t)v5, v2, &v20[v41], 16);
          if (v35 < 0x100)
          {
LABEL_57:
            LOBYTE(v8) = v35;
            return (char)v8;
          }
          v42 = *(_QWORD *)a1->__r_.__value_.__l.__size_;
          v43 = a1[5].__r_.__value_.__r.__words[2];
          v44 = (unsigned __int8 *)(v43 - 1);
          do
          {
            *v2 = (uint64_t)v44;
            v45 = *v44--;
            --v43;
          }
          while (*(_BYTE *)(v42 + v45 + 32) != 12);
          v46 = (const char *)(v43 - a1[5].__r_.__value_.__r.__words[0]);
          std::string::basic_string[abi:ne180100]<0>(&__p, "Escape sequence did not encode a valid character.");
          boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fail(a1, 5, v46, (uint64_t)&__p);
        }
        goto LABEL_8;
      case 0x23:
        v30 = (char *)(v3 + 1);
        *v2 = (uint64_t)(v3 + 1);
        if (v3 + 1 != size)
        {
          v8 = *v30 - ((*v30 + ((*v30 >> 10) & 0x1F)) & 0xFFFFFFE0);
          ++v3;
          goto LABEL_45;
        }
        do
        {
          *v2 = (uint64_t)v3;
          v31 = *v3--;
          --v30;
        }
        while (*(_BYTE *)(v7 + v31 + 32) != 12);
        v32 = &v30[-a1[5].__r_.__value_.__r.__words[0]];
        std::string::basic_string[abi:ne180100]<0>(&__p, "ASCII escape sequence terminated prematurely.");
        boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fail(a1, 5, v32, (uint64_t)&__p);
        goto LABEL_8;
      case 0x26:
        LOBYTE(v8) = 27;
        goto LABEL_45;
      default:
        if (*(_BYTE *)(*v5 + v6 + 32) == 56)
        {
          v15 = (char *)(v3 + 1);
          *v2 = (uint64_t)(v3 + 1);
          if (v3 + 1 == size)
          {
            do
            {
              *v2 = (uint64_t)v3;
              v19 = *v3--;
              --v15;
            }
            while (*(_BYTE *)(v7 + v19 + 32) != 12);
            goto LABEL_81;
          }
          if (*(_BYTE *)(v7 + *v15 + 32) != 15)
          {
LABEL_79:
            v56 = *v5;
            v57 = v15 - 1;
            do
            {
              *v2 = (uint64_t)v57;
              v58 = *v57--;
              --v15;
            }
            while (*(_BYTE *)(v56 + v58 + 32) != 12);
LABEL_81:
            v18 = &v15[-a1[5].__r_.__value_.__r.__words[0]];
LABEL_82:
            boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fail(a1, 5, v18);
            goto LABEL_10;
          }
          while (*(_BYTE *)(v7 + *v15 + 32) != 16)
          {
            *v2 = (uint64_t)++v15;
            if (v15 == (char *)size)
            {
              v16 = size - 1;
              do
              {
                *v2 = (uint64_t)v16;
                v17 = *v16--;
                --size;
              }
              while (*(_BYTE *)(v7 + v17 + 32) != 12);
              v18 = (const char *)&size[-a1[5].__r_.__value_.__r.__words[0]];
              goto LABEL_82;
            }
          }
          *v2 = (uint64_t)(v15 + 1);
          boost::re_detail_106800::cpp_regex_traits_implementation<char>::lookup_collatename(*v5, (char *)v3 + 2, v15, (uint64_t)&__p);
          v50 = v62;
          if (v62 < 0)
          {
            if (v61)
            {
              if (v61 == 1)
              {
                p_p = __p;
                goto LABEL_71;
              }
              operator delete(__p);
              goto LABEL_78;
            }
          }
          else if (v62)
          {
            if (v62 == 1)
            {
              p_p = &__p;
LABEL_71:
              LOBYTE(v8) = *p_p;
              goto LABEL_75;
            }
LABEL_78:
            v5 = (uint64_t *)a1->__r_.__value_.__l.__size_;
            v15 = (char *)a1[5].__r_.__value_.__r.__words[2];
            goto LABEL_79;
          }
          v52 = *(_QWORD *)a1->__r_.__value_.__l.__size_;
          v53 = a1[5].__r_.__value_.__r.__words[2];
          v54 = (unsigned __int8 *)(v53 - 1);
          do
          {
            *v2 = (uint64_t)v54;
            v55 = *v54--;
            --v53;
          }
          while (*(_BYTE *)(v52 + v55 + 32) != 12);
          boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fail(a1, 3, (const char *)(v53 - a1[5].__r_.__value_.__r.__words[0]));
          LOBYTE(v8) = 0;
          v50 = v62;
LABEL_75:
          if (v50 < 0)
            operator delete(__p);
          return (char)v8;
        }
LABEL_21:
        LOBYTE(v8) = *v3;
LABEL_45:
        v25 = v3 + 1;
LABEL_46:
        *v2 = (uint64_t)v25;
        break;
    }
  }
  return (char)v8;
}

void sub_21830DE0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse_backref(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int v5;
  _DWORD *appended;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  unsigned int v10;
  uint64_t v11;

  v11 = *(_QWORD *)(a1 + 136);
  v2 = boost::cpp_regex_traits<char>::toi(*(_QWORD *)(a1 + 8), &v11, (_BYTE *)(v11 + 1), 10);
  if (!v2 || (*(_DWORD *)(*(_QWORD *)a1 + 40) & 0x103) == 0x100)
  {
    v3 = boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::unescape_character((std::string *)a1);
    boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::append_literal((_QWORD *)a1, v3);
    return 1;
  }
  v5 = v2;
  if (v2 >= 1 && ((*(_DWORD *)(a1 + 36) >> (v2 - 1)) & 1) != 0)
  {
    *(_QWORD *)(a1 + 136) = v11;
    appended = boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::append_state((uint64_t *)a1, 13, 0x18uLL);
    appended[4] = v5;
    *((_BYTE *)appended + 20) = (*(_DWORD *)(*(_QWORD *)a1 + 40) & 0x100000) != 0;
    return 1;
  }
  v7 = **(_QWORD **)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 136);
  v9 = (unsigned __int8 *)(v8 - 1);
  do
  {
    *(_QWORD *)(a1 + 136) = v9;
    v10 = *v9--;
    --v8;
  }
  while (*(_BYTE *)(v7 + v10 + 32) != 12);
  boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fail((std::string *)a1, 6, (const char *)(v8 - *(_QWORD *)(a1 + 120)));
  return 0;
}

uint64_t boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse_QE(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  const char *v13;
  void *__p[2];
  char v15;

  v3 = *(_QWORD *)(a1 + 128);
  v2 = *(_QWORD *)(a1 + 136);
  v4 = (char *)(v2 + 1);
  *(_QWORD *)(a1 + 136) = v2 + 1;
  v5 = 1;
  while (1)
  {
    if (v2 + v5 == v3)
      goto LABEL_10;
    v6 = **(_QWORD **)(a1 + 8);
    v7 = v5;
    while (1)
    {
      v8 = v2 + v7 + 1;
      v9 = *(unsigned __int8 *)(v6 + *(unsigned __int8 *)(v2 + v7) + 32);
      v5 = v7 + 1;
      *(_QWORD *)(a1 + 136) = v8;
      if (v9 == 12)
        break;
      ++v7;
      if (v2 + v5 == v3)
        goto LABEL_10;
    }
    if (v8 == v3)
      break;
    if (*(_BYTE *)(v6 + *(unsigned __int8 *)(v2 + v7 + 1) + 32) == 47)
    {
      *(_QWORD *)(a1 + 136) = v2 + v7 + 2;
      v5 = v7;
LABEL_10:
      v10 = v5 - 1;
      if (v5 != 1)
      {
        do
        {
          v11 = *v4++;
          boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::append_literal((_QWORD *)a1, v11);
          --v10;
        }
        while (v10);
      }
      return 1;
    }
  }
  v13 = (const char *)(v3 - *(_QWORD *)(a1 + 120));
  std::string::basic_string[abi:ne180100]<0>(__p, "Unterminated \\Q...\\E sequence.");
  boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fail((std::string *)a1, 5, v13, (uint64_t)__p);
  if (v15 < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_21830E06C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t boost::re_detail_106800::named_subexpressions::get_id(unsigned int **this, signed int a2)
{
  unsigned int *v2;
  unsigned int *v3;
  unint64_t v4;
  unint64_t v5;
  unsigned int *v6;
  signed int v7;
  unsigned int *v8;

  v2 = *this;
  v3 = this[1];
  if (v3 != *this)
  {
    v4 = ((char *)v3 - (char *)*this) >> 3;
    do
    {
      v5 = v4 >> 1;
      v6 = &v2[2 * (v4 >> 1)];
      v7 = v6[1];
      v8 = v6 + 2;
      v4 += ~(v4 >> 1);
      if (v7 < a2)
        v2 = v8;
      else
        v4 = v5;
    }
    while (v4);
  }
  if (v2 == v3 || v2[1] != a2)
    return 0xFFFFFFFFLL;
  else
    return *v2;
}

void sub_21830E99C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a28 < 0)
    operator delete(__p);
  if (a35 < 0)
    operator delete(a30);
  _Unwind_Resume(exception_object);
}

_OWORD *boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::append_set(uint64_t a1, uint64_t a2)
{
  _OWORD *appended;
  _QWORD *v5;
  _OWORD *v6;
  uint64_t i;
  uint64_t v8;
  char v9;
  char v10;
  _QWORD *v11;
  _QWORD *v12;
  BOOL v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  unsigned __int8 v16;
  uint64_t v17;
  unsigned __int8 v18;
  uint64_t v19;
  char v20;
  int v21;
  void *v22;
  std::string::size_type v23;
  std::string *v24;
  std::string::size_type v25;
  std::string *v26;
  size_t v27;
  int v28;
  BOOL v29;
  uint64_t m;
  int v31;
  void *v32;
  std::string::size_type v33;
  std::string *v34;
  std::string::size_type v35;
  std::string *v36;
  size_t v37;
  int v38;
  _BOOL4 v39;
  std::string::size_type v40;
  std::string *v41;
  size_t v42;
  int v43;
  _BOOL4 v44;
  int v45;
  int v46;
  uint64_t j;
  int v48;
  uint64_t k;
  std::string::value_type *v50;
  char v51;
  size_t size;
  uint64_t v53;
  uint64_t v54;
  size_t v55;
  const void *v56;
  std::string::size_type v57;
  int v58;
  std::string *p_p;
  std::string *v60;
  uint64_t v61;
  std::string::value_type *v62;
  std::string::value_type *v63;
  uint64_t v64;
  int8x16_t v65;
  _OWORD *result;
  int v67;
  uint64_t v68;
  unsigned __int8 *v69;
  _OWORD *v70;
  _OWORD *v71;
  std::string v72;
  std::string __p;
  std::string v74;
  unsigned __int8 v75;
  char v76;

  appended = boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::append_state((uint64_t *)a1, 15, 0x110uLL);
  v67 = *(unsigned __int8 *)(a2 + 48);
  appended[1] = 0u;
  v70 = appended + 1;
  appended[15] = 0u;
  appended[16] = 0u;
  appended[13] = 0u;
  appended[14] = 0u;
  appended[11] = 0u;
  appended[12] = 0u;
  appended[9] = 0u;
  appended[10] = 0u;
  appended[7] = 0u;
  appended[8] = 0u;
  appended[5] = 0u;
  appended[6] = 0u;
  appended[3] = 0u;
  appended[4] = 0u;
  v71 = appended;
  appended[2] = 0u;
  v5 = *(_QWORD **)a2;
  if (*(_QWORD *)a2 != a2 + 8)
  {
    v6 = appended + 1;
    do
    {
      for (i = 0; i != 256; ++i)
      {
        if (*(_BYTE *)(a1 + 24))
        {
          v8 = *(_QWORD *)(**(_QWORD **)(a1 + 8) + 8);
          v9 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 40))(v8, (char)i);
          v10 = *((_BYTE *)v5 + 25);
          if (*(_BYTE *)(a1 + 24))
            v10 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(**(_QWORD **)(a1 + 8) + 8) + 40))(*(_QWORD *)(**(_QWORD **)(a1 + 8) + 8), v10);
        }
        else
        {
          v10 = *((_BYTE *)v5 + 25);
          v9 = i;
        }
        if (v9 == v10)
          *((_BYTE *)v6 + i) = 1;
      }
      v11 = (_QWORD *)v5[1];
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (_QWORD *)v5[2];
          v13 = *v12 == (_QWORD)v5;
          v5 = v12;
        }
        while (!v13);
      }
      v5 = v12;
    }
    while (v12 != (_QWORD *)(a2 + 8));
  }
  v15 = *(unsigned __int8 **)(a2 + 24);
  v14 = *(unsigned __int8 **)(a2 + 32);
  v68 = a2;
  if (v15 == v14)
  {
LABEL_84:
    v45 = *(_DWORD *)(a2 + 52);
    v46 = *(_DWORD *)(*(_QWORD *)a1 + 40);
    if ((v46 & 0x100000) != 0 && ((*(_DWORD *)(a1 + 88) & ~v45) == 0 || (*(_DWORD *)(a1 + 92) & ~v45) == 0))
      v45 |= *(_DWORD *)(a1 + 96);
    if (v45)
    {
      for (j = 0; j != 256; ++j)
      {
        if (boost::cpp_regex_traits<char>::isctype(*(_QWORD *)(a1 + 8), (char)j, v45))
          *((_BYTE *)v71 + j + 16) = 1;
      }
      v46 = *(_DWORD *)(*(_QWORD *)a1 + 40);
    }
    v48 = *(_DWORD *)(a2 + 56);
    if ((v46 & 0x100000) != 0 && ((*(_DWORD *)(a1 + 88) & ~v48) == 0 || (*(_DWORD *)(a1 + 92) & ~v48) == 0))
      v48 |= *(_DWORD *)(a1 + 96);
    if (v48)
    {
      for (k = 0; k != 256; ++k)
      {
        if (!boost::cpp_regex_traits<char>::isctype(*(_QWORD *)(a1 + 8), (char)k, v48))
          *((_BYTE *)v71 + k + 16) = 1;
      }
    }
    v50 = *(std::string::value_type **)(a2 + 64);
    if (v50 != (std::string::value_type *)(a2 + 72))
    {
      do
      {
        memset(&v74, 0, sizeof(v74));
        boost::re_detail_106800::cpp_regex_traits_implementation<char>::transform_primary(**(_QWORD **)(a1 + 8), v50 + 25, v50 + 26, (uint64_t *)&__p);
        if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v74.__r_.__value_.__l.__data_);
        v74 = __p;
        v51 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          size = v74.__r_.__value_.__l.__size_;
          if (!v74.__r_.__value_.__l.__size_)
            goto LABEL_146;
        }
        else
        {
          if (!*((_BYTE *)&__p.__r_.__value_.__s + 23))
            return 0;
          size = v74.__r_.__value_.__l.__size_;
        }
        v53 = 0;
        v54 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v55 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v55 = size;
        v56 = (const void *)v74.__r_.__value_.__r.__words[0];
        do
        {
          LOWORD(v72.__r_.__value_.__l.__data_) = v53;
          boost::re_detail_106800::cpp_regex_traits_implementation<char>::transform_primary(**(_QWORD **)(a1 + 8), (std::string::value_type *)&v72, &v72.__r_.__value_.__s.__data_[1], (uint64_t *)&__p);
          v57 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          v58 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v57 = __p.__r_.__value_.__l.__size_;
          if (v55 == v57)
          {
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              p_p = &__p;
            else
              p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
            if (v51 < 0)
            {
              if (!memcmp(v56, p_p, size))
LABEL_126:
                *((_BYTE *)v71 + v53 + 16) = 1;
            }
            else
            {
              v60 = &v74;
              v61 = v54;
              while (v60->__r_.__value_.__s.__data_[0] == p_p->__r_.__value_.__s.__data_[0])
              {
                v60 = (std::string *)((char *)v60 + 1);
                p_p = (std::string *)((char *)p_p + 1);
                if (!--v61)
                  goto LABEL_126;
              }
            }
          }
          if (v58 < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          ++v53;
        }
        while (v53 != 256);
        v62 = (std::string::value_type *)*((_QWORD *)v50 + 1);
        v63 = v50;
        if (v62)
        {
          do
          {
            v50 = v62;
            v62 = *(std::string::value_type **)v62;
          }
          while (v62);
        }
        else
        {
          do
          {
            v50 = (std::string::value_type *)*((_QWORD *)v63 + 2);
            v13 = *(_QWORD *)v50 == (_QWORD)v63;
            v63 = v50;
          }
          while (!v13);
        }
        if (v51 < 0)
          operator delete(v74.__r_.__value_.__l.__data_);
      }
      while (v50 != (std::string::value_type *)(v68 + 72));
    }
    if (!v67)
      return v71;
    v64 = 1;
    v65.i64[0] = 0x101010101010101;
    v65.i64[1] = 0x101010101010101;
    result = v71;
    do
    {
      v71[v64] = vandq_s8(vceqzq_s8((int8x16_t)v71[v64]), v65);
      ++v64;
    }
    while (v64 != 17);
    return result;
  }
  v69 = *(unsigned __int8 **)(a2 + 32);
  while (1)
  {
    v16 = *v15;
    if (*(_BYTE *)(a1 + 24))
    {
      v17 = *(_QWORD *)(**(_QWORD **)(a1 + 8) + 8);
      v16 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v17 + 40))(v17, (char)v16);
      v18 = v15[2];
      if (*(_BYTE *)(a1 + 24))
      {
        v19 = *(_QWORD *)(**(_QWORD **)(a1 + 8) + 8);
        v18 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v19 + 40))(v19, (char)v18);
      }
    }
    else
    {
      v18 = v15[2];
    }
    if ((*(_BYTE *)(*(_QWORD *)a1 + 42) & 0x20) != 0)
      break;
    if (v18 < v16)
      return 0;
    memset((char *)v70 + v16, 1, v18 - (unint64_t)v16 + 1);
LABEL_83:
    v15 += 4;
    if (v15 == v14)
      goto LABEL_84;
  }
  v75 = v16;
  v76 = 0;
  boost::re_detail_106800::cpp_regex_traits_implementation<char>::transform(**(_QWORD **)(a1 + 8), &v74);
  v75 = v18;
  boost::re_detail_106800::cpp_regex_traits_implementation<char>::transform(**(_QWORD **)(a1 + 8), &__p);
  v20 = HIBYTE(v74.__r_.__value_.__r.__words[2]);
  v21 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  v22 = (void *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v23 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v23 = __p.__r_.__value_.__l.__size_;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v24 = &__p;
  else
    v24 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v25 = HIBYTE(v74.__r_.__value_.__r.__words[2]);
  else
    v25 = v74.__r_.__value_.__l.__size_;
  if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v26 = &v74;
  else
    v26 = (std::string *)v74.__r_.__value_.__r.__words[0];
  if (v25 >= v23)
    v27 = v23;
  else
    v27 = v25;
  v28 = memcmp(v24, v26, v27);
  v29 = v23 < v25;
  if (v28)
    v29 = v28 < 0;
  if (!v29)
  {
    for (m = 0; m != 256; ++m)
    {
      v75 = m;
      boost::re_detail_106800::cpp_regex_traits_implementation<char>::transform(**(_QWORD **)(a1 + 8), &v72);
      v31 = SHIBYTE(v72.__r_.__value_.__r.__words[2]);
      v32 = (void *)v72.__r_.__value_.__r.__words[0];
      if ((v72.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v33 = HIBYTE(v72.__r_.__value_.__r.__words[2]);
      else
        v33 = v72.__r_.__value_.__l.__size_;
      if ((v72.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v34 = &v72;
      else
        v34 = (std::string *)v72.__r_.__value_.__r.__words[0];
      if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v35 = HIBYTE(v74.__r_.__value_.__r.__words[2]);
      else
        v35 = v74.__r_.__value_.__l.__size_;
      if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v36 = &v74;
      else
        v36 = (std::string *)v74.__r_.__value_.__r.__words[0];
      if (v35 >= v33)
        v37 = v33;
      else
        v37 = v35;
      v38 = memcmp(v34, v36, v37);
      v39 = v33 >= v35;
      if (v38)
        v39 = v38 >= 0;
      if (v39)
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v40 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v40 = __p.__r_.__value_.__l.__size_;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v41 = &__p;
        else
          v41 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if (v33 >= v40)
          v42 = v40;
        else
          v42 = v33;
        v43 = memcmp(v41, v34, v42);
        v44 = v40 >= v33;
        if (v43)
          v44 = v43 >= 0;
        if (v44)
          *((_BYTE *)v71 + m + 16) = 1;
      }
      if (v31 < 0)
        operator delete(v32);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v14 = v69;
    if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v74.__r_.__value_.__l.__data_);
    goto LABEL_83;
  }
  if (v21 < 0)
  {
    operator delete(v22);
    v20 = HIBYTE(v74.__r_.__value_.__r.__words[2]);
  }
  if (v20 < 0)
LABEL_146:
    operator delete(v74.__r_.__value_.__l.__data_);
  return 0;
}

void sub_21830F0A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a29 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t boost::re_detail_106800::raw_storage::extend(boost::re_detail_106800::raw_storage *this, unint64_t a2)
{
  uint64_t v4;
  uint64_t result;

  v4 = *(_QWORD *)this;
  result = *((_QWORD *)this + 2);
  if (v4 - result < a2)
  {
    boost::re_detail_106800::raw_storage::resize(this, result + a2 - *((_QWORD *)this + 1));
    result = *((_QWORD *)this + 2);
  }
  *((_QWORD *)this + 2) = result + a2;
  return result;
}

void boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse_set_literal(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  uint64_t v6;
  const char *v7;
  std::string *v8;
  int v9;
  unsigned __int8 *v10;
  uint64_t v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  char v14[2];
  __int16 v15;

  boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::get_next_set_literal(a1, a2, (uint64_t)&v15);
  v5 = *(unsigned __int8 **)(a1 + 128);
  v4 = *(unsigned __int8 **)(a1 + 136);
  if (v5 == v4)
    goto LABEL_9;
  v6 = **(_QWORD **)(a1 + 8);
  if (*(_BYTE *)(v6 + *v4 + 32) == 14)
  {
    *(_QWORD *)(a1 + 136) = v4 + 1;
    if (v5 != v4 + 1)
    {
      if (*(_BYTE *)(v6 + v4[1] + 32) == 10)
      {
        *(_QWORD *)(a1 + 136) = v4;
        goto LABEL_6;
      }
      boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::get_next_set_literal(a1, a2, (uint64_t)v14);
      boost::re_detail_106800::basic_char_set<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::add_range(a2, (char *)&v15, v14);
      v10 = *(unsigned __int8 **)(a1 + 136);
      v11 = **(_QWORD **)(a1 + 8);
      if (*(_BYTE *)(v11 + *v10 + 32) != 14)
        return;
      v12 = *(unsigned __int8 **)(a1 + 128);
      v13 = v10 + 1;
      *(_QWORD *)(a1 + 136) = v10 + 1;
      if (v12 != v10 + 1)
      {
        if (*(_BYTE *)(v11 + *v13 + 32) == 10)
        {
          *(_QWORD *)(a1 + 136) = v10;
          return;
        }
        v7 = (const char *)&v13[-*(_QWORD *)(a1 + 120)];
        v8 = (std::string *)a1;
        v9 = 11;
        goto LABEL_11;
      }
      v7 = (const char *)&v12[-*(_QWORD *)(a1 + 120)];
LABEL_10:
      v8 = (std::string *)a1;
      v9 = 7;
LABEL_11:
      boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fail(v8, v9, v7);
      return;
    }
LABEL_9:
    v7 = (const char *)&v5[-*(_QWORD *)(a1 + 120)];
    goto LABEL_10;
  }
LABEL_6:
  std::__tree<boost::re_detail_106800::digraph<char>>::__emplace_unique_key_args<boost::re_detail_106800::digraph<char>,boost::re_detail_106800::digraph<char> const&>((uint64_t **)a2, (char *)&v15, &v15);
  if (HIBYTE(v15))
    *(_BYTE *)(a2 + 49) = 1;
  *(_BYTE *)(a2 + 60) = 0;
}

BOOL boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse_inner_set(std::string *a1, uint64_t a2)
{
  unsigned __int8 *size;
  std::string::size_type v4;
  uint64_t *v6;
  uint64_t v7;
  int v8;
  const char *v9;
  char *v11;
  char *v12;
  unsigned __int8 *v13;
  std::string::size_type v14;
  int v15;
  char *v16;
  char *v17;
  std::string::size_type v18;
  unsigned __int8 *v19;
  int v20;
  const char *v21;
  std::string::size_type v22;
  int v23;
  char *v24;
  int v25;
  std::string::size_type v26;
  char v27;
  BOOL v28;
  std::string::size_type v29;
  std::string::size_type v30;
  uint64_t v31;
  int v32;
  uint64_t *v33;
  int v34;
  char v35;
  char v36;
  void *__p;
  unint64_t v38;
  unsigned __int8 v39;

  size = (unsigned __int8 *)a1[5].__r_.__value_.__l.__size_;
  v4 = a1[5].__r_.__value_.__r.__words[2];
  a1[5].__r_.__value_.__r.__words[2] = v4 + 1;
  if (size == (unsigned __int8 *)(v4 + 1))
  {
    v9 = (const char *)&size[-a1[5].__r_.__value_.__r.__words[0]];
    std::string::basic_string[abi:ne180100]<0>(&__p, boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse_inner_set(boost::re_detail_106800::basic_char_set<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>> &)::incomplete_message[0]);
    boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fail(a1, 7, v9, (uint64_t)&__p);
    goto LABEL_6;
  }
  v6 = (uint64_t *)a1->__r_.__value_.__l.__size_;
  v7 = *v6;
  v8 = *(unsigned __int8 *)(*v6 + *(unsigned __int8 *)(v4 + 1) + 32);
  if (v8 == 37)
  {
    v11 = (char *)(v4 + 2);
    a1[5].__r_.__value_.__r.__words[2] = v4 + 2;
    if (size == (unsigned __int8 *)(v4 + 2))
      goto LABEL_25;
    a1[5].__r_.__value_.__r.__words[2] = v4 + 3;
    if (size == (unsigned __int8 *)(v4 + 3))
      goto LABEL_25;
    v12 = (char *)&__p + 1;
    v13 = (unsigned __int8 *)(v4 + 4);
    v14 = -4 - v4;
    while (1)
    {
      v15 = *(unsigned __int8 *)(v7 + *(v13 - 1) + 32);
      a1[5].__r_.__value_.__r.__words[2] = (std::string::size_type)v13;
      if (v15 == 37)
        break;
      --v14;
      v28 = v13++ == size;
      if (v28)
        goto LABEL_25;
    }
    if (v13 == size || *(_BYTE *)(v7 + *v13 + 32) != 10)
    {
      v22 = -(uint64_t)(a1[5].__r_.__value_.__r.__words[0] + v14);
      std::string::basic_string[abi:ne180100]<0>(&__p, boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse_inner_set(boost::re_detail_106800::basic_char_set<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>> &)::incomplete_message[0]);
      boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fail(a1, 7, (const char *)v22, (uint64_t)&__p);
      goto LABEL_6;
    }
    boost::re_detail_106800::cpp_regex_traits_implementation<char>::lookup_collatename(*v6, v11, (char *)v13 - 1, (uint64_t)&__p);
    if ((char)v39 < 0)
    {
      if (v38 - 3 >= 0xFFFFFFFFFFFFFFFELL)
      {
        v36 = 0;
        v35 = *(_BYTE *)__p;
        if (v38 <= 1)
        {
LABEL_59:
          v36 = 0;
          goto LABEL_60;
        }
        v12 = (char *)__p + 1;
LABEL_58:
        v36 = *v12;
LABEL_60:
        boost::re_detail_106800::basic_char_set<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::add_equivalent(a2, &v35);
        v27 = 0;
        ++a1[5].__r_.__value_.__r.__words[2];
LABEL_61:
        if ((char)v39 < 0)
          operator delete(__p);
        return (v27 & 1) == 0;
      }
    }
    else if (v39 - 3 > 0xFFFFFFFD)
    {
      v36 = 0;
      v35 = (char)__p;
      if (v39 <= 1u)
        goto LABEL_59;
      goto LABEL_58;
    }
    boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fail(a1, 3, &v11[-a1[5].__r_.__value_.__r.__words[0]]);
    v27 = 1;
    goto LABEL_61;
  }
  if (v8 == 36 && (*(_DWORD *)(a1->__r_.__value_.__r.__words[0] + 40) & 0x103) != 0x101)
  {
    v16 = (char *)(v4 + 2);
    a1[5].__r_.__value_.__r.__words[2] = v4 + 2;
    if (size != (unsigned __int8 *)(v4 + 2))
    {
      v17 = (char *)(v4 + 3);
      a1[5].__r_.__value_.__r.__words[2] = v4 + 3;
      if (size != (unsigned __int8 *)(v4 + 3))
      {
        v18 = -4 - v4;
        v19 = (unsigned __int8 *)(v4 + 4);
        while (1)
        {
          v20 = *(unsigned __int8 *)(v7 + *(v19 - 1) + 32);
          a1[5].__r_.__value_.__r.__words[2] = (std::string::size_type)v19;
          if (v20 == 36)
            break;
          --v18;
          v28 = v19++ == size;
          if (v28)
            goto LABEL_25;
        }
        if (v19 != size && *(_BYTE *)(v7 + *v19 + 32) == 10)
        {
          v23 = *(unsigned __int8 *)(v7 + *v16 + 32);
          if (v23 == 4)
            v24 = v17;
          else
            v24 = v16;
          v25 = boost::re_detail_106800::cpp_regex_traits_implementation<char>::lookup_classname(v7, v24, (char *)v19 - 1);
          if (v25)
          {
            if (v23 == 4)
              *(_DWORD *)(a2 + 56) |= v25;
            else
              *(_DWORD *)(a2 + 52) |= v25;
            *(_BYTE *)(a2 + 60) = 0;
            ++a1[5].__r_.__value_.__r.__words[2];
            return 1;
          }
          v28 = &v24[v18] != (char *)-2 || *(_BYTE *)(a2 + 60) == 0;
          if (!v28)
          {
            v30 = a1[5].__r_.__value_.__l.__size_;
            v29 = a1[5].__r_.__value_.__r.__words[2];
            a1[5].__r_.__value_.__r.__words[2] = v29 + 1;
            if (v29 + 1 != v30)
            {
              v31 = *(_QWORD *)a1->__r_.__value_.__l.__size_;
              if (*(_BYTE *)(v31 + *(unsigned __int8 *)(v29 + 1) + 32) == 10)
              {
                v32 = *(unsigned __int8 *)(v31 + *v24 + 32);
                if (v32 == 21)
                {
                  a1[5].__r_.__value_.__r.__words[2] = v29 + 2;
                  v33 = (uint64_t *)a1;
                  v34 = 10;
                  goto LABEL_69;
                }
                if (v32 == 20)
                {
                  a1[5].__r_.__value_.__r.__words[2] = v29 + 2;
                  v33 = (uint64_t *)a1;
                  v34 = 9;
LABEL_69:
                  boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::append_state(v33, v34, 0x10uLL);
                  return 0;
                }
              }
            }
          }
          boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fail(a1, 4, &v24[-a1[5].__r_.__value_.__r.__words[0]]);
          return 0;
        }
        v26 = -(uint64_t)(a1[5].__r_.__value_.__r.__words[0] + v18);
        std::string::basic_string[abi:ne180100]<0>(&__p, boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse_inner_set(boost::re_detail_106800::basic_char_set<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>> &)::incomplete_message[0]);
        boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fail(a1, 7, (const char *)v26, (uint64_t)&__p);
LABEL_6:
        if ((char)v39 < 0)
          operator delete(__p);
        return 0;
      }
    }
LABEL_25:
    v21 = (const char *)&size[-a1[5].__r_.__value_.__r.__words[0]];
    std::string::basic_string[abi:ne180100]<0>(&__p, boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse_inner_set(boost::re_detail_106800::basic_char_set<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>> &)::incomplete_message[0]);
    boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fail(a1, 7, v21, (uint64_t)&__p);
    goto LABEL_6;
  }
  a1[5].__r_.__value_.__r.__words[2] = v4;
  boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse_set_literal((uint64_t)a1, a2);
  return 1;
}

void sub_21830F7E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::get_next_set_literal(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _BYTE *v5;
  uint64_t v6;
  int v7;
  int v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  char *v11;
  unsigned __int8 *v12;
  _BYTE *v13;
  unsigned __int8 *v14;
  unsigned int v15;
  int v16;
  const char *v17;
  unsigned __int8 *v18;
  unsigned int v19;
  unint64_t v20;
  char *v21;
  void *__p;
  unint64_t v23;
  unsigned __int8 v24;

  *(_WORD *)a3 = 0;
  v5 = *(_BYTE **)(a1 + 136);
  v6 = **(_QWORD **)(a1 + 8);
  v7 = *(unsigned __int8 *)(v6 + *v5 + 32);
  if (v7 == 9)
  {
    v9 = *(unsigned __int8 **)(a1 + 128);
    v10 = v5 + 1;
    *(_QWORD *)(a1 + 136) = v5 + 1;
    if (v9 == v5 + 1)
      goto LABEL_20;
    if (*(_BYTE *)(v6 + *v10 + 32) != 5)
    {
      *(_QWORD *)(a1 + 136) = v5;
      *(_BYTE *)a3 = *v5;
      *(_QWORD *)(a1 + 136) = v10;
      return;
    }
    v11 = v5 + 2;
    *(_QWORD *)(a1 + 136) = v5 + 2;
    if (v9 == v5 + 2)
    {
LABEL_20:
      v17 = (const char *)&v9[-*(_QWORD *)(a1 + 120)];
    }
    else
    {
      v12 = v5 + 3;
      *(_QWORD *)(a1 + 136) = v5 + 3;
      if (v9 != v5 + 3)
      {
        v13 = (char *)&__p + 1;
        v14 = v5 + 3;
        while (1)
        {
          v15 = *v14++;
          v16 = *(unsigned __int8 *)(v6 + v15 + 32);
          *(_QWORD *)(a1 + 136) = v14;
          if (v16 == 5)
            break;
          v12 = v14;
          if (v14 == v9)
            goto LABEL_32;
        }
        if (v12 + 1 != v9 && *(_BYTE *)(v6 + v12[1] + 32) == 10)
        {
          *(_QWORD *)(a1 + 136) = v12 + 2;
          boost::re_detail_106800::cpp_regex_traits_implementation<char>::lookup_collatename(v6, v11, (char *)v12, (uint64_t)&__p);
          v19 = v24;
          if ((char)v24 < 0)
          {
            v20 = v23;
            if (v23 - 3 >= 0xFFFFFFFFFFFFFFFELL)
            {
              v21 = (char *)__p;
              *(_BYTE *)a3 = *(_BYTE *)__p;
              if (v20 <= 1)
              {
LABEL_40:
                *(_BYTE *)(a3 + 1) = 0;
LABEL_41:
                if ((v19 & 0x80) != 0)
                  operator delete(__p);
                return;
              }
              v13 = v21 + 1;
LABEL_39:
              *(_BYTE *)(a3 + 1) = *v13;
              goto LABEL_41;
            }
          }
          else if (v24 - 3 > 0xFFFFFFFD)
          {
            *(_BYTE *)a3 = (_BYTE)__p;
            if (v19 <= 1)
              goto LABEL_40;
            goto LABEL_39;
          }
          boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fail((std::string *)a1, 3, &v11[-*(_QWORD *)(a1 + 120)]);
          LOBYTE(v19) = v24;
          goto LABEL_41;
        }
      }
LABEL_32:
      v17 = &v11[-*(_QWORD *)(a1 + 120)];
    }
    boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fail((std::string *)a1, 3, v17);
    return;
  }
  if (v7 == 12)
  {
    v8 = *(_DWORD *)(*(_QWORD *)a1 + 40);
    *(_QWORD *)(a1 + 136) = v5 + 1;
    if ((v8 & 0x10000) == 0)
    {
      *(_BYTE *)a3 = boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::unescape_character((std::string *)a1);
LABEL_18:
      *(_BYTE *)(a3 + 1) = 0;
      return;
    }
LABEL_17:
    *(_BYTE *)a3 = *v5;
    goto LABEL_18;
  }
  if (v7 != 14)
  {
    *(_QWORD *)(a1 + 136) = v5 + 1;
    goto LABEL_17;
  }
  if (*(_BYTE *)(a2 + 60))
  {
LABEL_5:
    *(_QWORD *)(a1 + 136) = v5 + 1;
    *(_BYTE *)a3 = *v5;
    return;
  }
  v18 = v5 + 1;
  *(_QWORD *)(a1 + 136) = v5 + 1;
  if (v5 + 1 != *(_BYTE **)(a1 + 128) && *(_BYTE *)(v6 + *v18 + 32) == 10)
  {
    *(_QWORD *)(a1 + 136) = v5;
    goto LABEL_5;
  }
  boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fail((std::string *)a1, 11, (const char *)&v18[-*(_QWORD *)(a1 + 120)]);
}

void sub_21830FAAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void boost::re_detail_106800::basic_char_set<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::add_range(uint64_t a1, char *a2, char *a3)
{
  char *v6;
  char **v7;
  void **v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char v19;
  _BYTE *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  char v30;

  v7 = (char **)(a1 + 40);
  v6 = *(char **)(a1 + 40);
  v8 = (void **)(a1 + 24);
  v9 = *(char **)(a1 + 32);
  if (v9 >= v6)
  {
    v11 = (char *)*v8;
    v12 = v9 - (_BYTE *)*v8;
    if (v12 <= -3)
      goto LABEL_43;
    v13 = v12 >> 1;
    v14 = v6 - v11;
    if (v14 <= (v12 >> 1) + 1)
      v15 = v13 + 1;
    else
      v15 = v14;
    if (v14 >= 0x7FFFFFFFFFFFFFFELL)
      v16 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v16 = v15;
    if (v16)
    {
      v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<half>>((uint64_t)v7, v16);
      v11 = *(char **)(a1 + 24);
      v9 = *(char **)(a1 + 32);
    }
    else
    {
      v17 = 0;
    }
    v18 = &v17[2 * v13];
    v6 = &v17[2 * v16];
    *v18 = *a2;
    v18[1] = a2[1];
    v10 = v18 + 2;
    while (v9 != v11)
    {
      v19 = *(v9 - 2);
      v9 -= 2;
      *(v18 - 2) = v19;
      v18 -= 2;
      v18[1] = v9[1];
    }
    *(_QWORD *)(a1 + 24) = v18;
    *(_QWORD *)(a1 + 32) = v10;
    *(_QWORD *)(a1 + 40) = v6;
    if (v11)
    {
      operator delete(v11);
      v6 = *v7;
    }
  }
  else
  {
    *v9 = *a2;
    v9[1] = a2[1];
    v10 = v9 + 2;
  }
  *(_QWORD *)(a1 + 32) = v10;
  if (v10 < v6)
  {
    *v10 = *a3;
    v10[1] = a3[1];
    v20 = v10 + 2;
    goto LABEL_35;
  }
  v21 = (char *)*v8;
  v22 = v10 - (_BYTE *)*v8;
  if (v22 <= -3)
LABEL_43:
    std::vector<float>::__throw_length_error[abi:ne180100]();
  v23 = v22 >> 1;
  v24 = v6 - v21;
  if (v24 <= (v22 >> 1) + 1)
    v25 = v23 + 1;
  else
    v25 = v24;
  if (v24 >= 0x7FFFFFFFFFFFFFFELL)
    v26 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v26 = v25;
  if (v26)
  {
    v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<half>>((uint64_t)v7, v26);
    v21 = *(char **)(a1 + 24);
    v10 = *(char **)(a1 + 32);
  }
  else
  {
    v27 = 0;
  }
  v28 = &v27[2 * v23];
  v29 = &v27[2 * v26];
  *v28 = *a3;
  v28[1] = a3[1];
  v20 = v28 + 2;
  while (v10 != v21)
  {
    v30 = *(v10 - 2);
    v10 -= 2;
    *(v28 - 2) = v30;
    v28 -= 2;
    v28[1] = v10[1];
  }
  *(_QWORD *)(a1 + 24) = v28;
  *(_QWORD *)(a1 + 32) = v20;
  *(_QWORD *)(a1 + 40) = v29;
  if (v21)
    operator delete(v21);
LABEL_35:
  *(_QWORD *)(a1 + 32) = v20;
  if (a2[1])
  {
    *(_BYTE *)(a1 + 49) = 1;
    std::__tree<boost::re_detail_106800::digraph<char>>::__emplace_unique_key_args<boost::re_detail_106800::digraph<char>,boost::re_detail_106800::digraph<char> const&>((uint64_t **)a1, a2, a2);
    if (a2[1])
      *(_BYTE *)(a1 + 49) = 1;
    *(_BYTE *)(a1 + 60) = 0;
  }
  if (a3[1])
  {
    *(_BYTE *)(a1 + 49) = 1;
    std::__tree<boost::re_detail_106800::digraph<char>>::__emplace_unique_key_args<boost::re_detail_106800::digraph<char>,boost::re_detail_106800::digraph<char> const&>((uint64_t **)a1, a3, a3);
    if (a3[1])
      *(_BYTE *)(a1 + 49) = 1;
  }
  *(_BYTE *)(a1 + 60) = 0;
}

char *std::__tree<boost::re_detail_106800::digraph<char>>::__emplace_unique_key_args<boost::re_detail_106800::digraph<char>,boost::re_detail_106800::digraph<char> const&>(uint64_t **a1, char *a2, _WORD *a3)
{
  uint64_t *v5;
  char *v6;
  uint64_t **v7;
  uint64_t v9;

  v5 = std::__tree<boost::re_detail_106800::digraph<char>>::__find_equal<boost::re_detail_106800::digraph<char>>((uint64_t)a1, &v9, a2);
  v6 = (char *)*v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = (char *)operator new(0x20uLL);
    *(_WORD *)(v6 + 25) = *a3;
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v9, v7, (uint64_t *)v6);
  }
  return v6;
}

uint64_t *std::__tree<boost::re_detail_106800::digraph<char>>::__find_equal<boost::re_detail_106800::digraph<char>>(uint64_t a1, _QWORD *a2, char *a3)
{
  uint64_t *result;
  uint64_t *v4;
  uint64_t *v5;
  int v6;
  int v7;
  uint64_t *v8;
  int v9;
  int v10;

  v5 = *(uint64_t **)(a1 + 8);
  result = (uint64_t *)(a1 + 8);
  v4 = v5;
  if (v5)
  {
    v6 = *a3;
    v7 = a3[1];
    while (1)
    {
      while (1)
      {
        v8 = v4;
        v9 = *((char *)v4 + 25);
        if (v6 >= v9)
          break;
LABEL_4:
        v4 = (uint64_t *)*v8;
        result = v8;
        if (!*v8)
          goto LABEL_12;
      }
      if (v9 >= v6)
      {
        v10 = *((char *)v8 + 26);
        if (v7 < v10)
          goto LABEL_4;
        if (v10 >= v7)
          goto LABEL_12;
      }
      result = v8 + 1;
      v4 = (uint64_t *)v8[1];
      if (!v4)
        goto LABEL_12;
    }
  }
  v8 = result;
LABEL_12:
  *a2 = v8;
  return result;
}

char *boost::re_detail_106800::basic_char_set<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::add_equivalent(uint64_t a1, char *a2)
{
  char *result;

  result = std::__tree<boost::re_detail_106800::digraph<char>>::__emplace_unique_key_args<boost::re_detail_106800::digraph<char>,boost::re_detail_106800::digraph<char> const&>((uint64_t **)(a1 + 64), a2, a2);
  if (a2[1])
  {
    *(_BYTE *)(a1 + 49) = 1;
    result = std::__tree<boost::re_detail_106800::digraph<char>>::__emplace_unique_key_args<boost::re_detail_106800::digraph<char>,boost::re_detail_106800::digraph<char> const&>((uint64_t **)a1, a2, a2);
    if (a2[1])
      *(_BYTE *)(a1 + 49) = 1;
  }
  *(_BYTE *)(a1 + 60) = 0;
  return result;
}

uint64_t boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse_basic_escape(std::string *a1)
{
  std::string::size_type v2;
  std::string::size_type size;
  unsigned __int8 *v4;
  uint64_t v5;
  _BOOL8 v6;
  int v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  unint64_t v12;
  int v13;
  const char *v14;
  char *appended;
  std::string::size_type v16;
  void *__p;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int16 v23;
  int v24;
  int v25;
  char v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;

  size = a1[5].__r_.__value_.__l.__size_;
  v2 = a1[5].__r_.__value_.__r.__words[2];
  v4 = (unsigned __int8 *)(v2 + 1);
  a1[5].__r_.__value_.__r.__words[2] = v2 + 1;
  if (v2 + 1 != size)
  {
    v5 = *v4;
    v6 = 0;
    switch(*(_BYTE *)(*(_QWORD *)a1->__r_.__value_.__l.__size_ + v5 + 32))
    {
      case 1:
        return boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse_open_paren((uint64_t)a1);
      case 2:
        return v6;
      case 7:
        if ((*(_BYTE *)(a1->__r_.__value_.__r.__words[0] + 41) & 4) == 0)
          return boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse_literal((uint64_t)a1);
        a1[5].__r_.__value_.__r.__words[2] = v2 + 2;
        v9 = 1;
        v10 = -1;
        return boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse_repeat((uint64_t)a1, v9, v10);
      case 8:
        if ((*(_BYTE *)(a1->__r_.__value_.__r.__words[0] + 41) & 4) == 0)
          return boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse_literal((uint64_t)a1);
        a1[5].__r_.__value_.__r.__words[2] = v2 + 2;
        v9 = 0;
        v10 = 1;
        return boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse_repeat((uint64_t)a1, v9, v10);
      case 0xB:
        if ((*(_BYTE *)(a1->__r_.__value_.__r.__words[0] + 41) & 8) == 0)
          return boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse_literal((uint64_t)a1);
        return boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse_alt((uint64_t)a1);
      case 0xF:
        if ((*(_BYTE *)(a1->__r_.__value_.__r.__words[0] + 41) & 2) != 0)
          return boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse_literal((uint64_t)a1);
        a1[5].__r_.__value_.__r.__words[2] = v2 + 2;
        return boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse_repeat_range((uint64_t)a1, 1);
      case 0x10:
        if ((*(_BYTE *)(a1->__r_.__value_.__r.__words[0] + 41) & 2) != 0)
          return boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse_literal((uint64_t)a1);
        v11 = (const char *)&v4[-a1[5].__r_.__value_.__r.__words[0]];
        std::string::basic_string[abi:ne180100]<0>(&__p, "Found a closing repetition operator } with no corresponding {.");
        boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fail(a1, 9, v11, (uint64_t)&__p);
LABEL_36:
        if (SHIBYTE(v19) < 0)
          operator delete(__p);
        return 0;
      case 0x11:
        return boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse_backref((uint64_t)a1);
      case 0x12:
        if ((*(_BYTE *)(a1->__r_.__value_.__r.__words[0] + 41) & 0x10) == 0)
          return boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse_literal((uint64_t)a1);
        a1[5].__r_.__value_.__r.__words[2] = v2 + 2;
        v8 = 7;
        goto LABEL_30;
      case 0x13:
        if ((*(_BYTE *)(a1->__r_.__value_.__r.__words[0] + 41) & 0x10) == 0)
          return boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse_literal((uint64_t)a1);
        a1[5].__r_.__value_.__r.__words[2] = v2 + 2;
        v8 = 8;
        goto LABEL_30;
      case 0x14:
        if ((*(_BYTE *)(a1->__r_.__value_.__r.__words[0] + 41) & 0x10) == 0)
          return boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse_literal((uint64_t)a1);
        a1[5].__r_.__value_.__r.__words[2] = v2 + 2;
        v8 = 9;
        goto LABEL_30;
      case 0x15:
        if ((*(_BYTE *)(a1->__r_.__value_.__r.__words[0] + 41) & 0x10) == 0)
          return boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse_literal((uint64_t)a1);
        a1[5].__r_.__value_.__r.__words[2] = v2 + 2;
        v8 = 10;
        goto LABEL_30;
      case 0x18:
        if ((*(_BYTE *)(a1->__r_.__value_.__r.__words[0] + 41) & 0x10) == 0)
          return boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse_literal((uint64_t)a1);
        a1[5].__r_.__value_.__r.__words[2] = v2 + 2;
        v8 = 11;
        goto LABEL_30;
      case 0x19:
        if ((*(_BYTE *)(a1->__r_.__value_.__r.__words[0] + 41) & 0x10) == 0)
          return boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse_literal((uint64_t)a1);
        a1[5].__r_.__value_.__r.__words[2] = v2 + 2;
        v8 = 12;
LABEL_30:
        boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::append_state((uint64_t *)a1, v8, 0x10uLL);
        return 1;
      default:
        if ((*(_BYTE *)(a1->__r_.__value_.__r.__words[0] + 41) & 0x10) != 0)
        {
          HIDWORD(v12) = (char)v5 - 67;
          LODWORD(v12) = HIDWORD(v12);
          v13 = 1;
          switch((v12 >> 2))
          {
            case 0u:
            case 8u:
              v14 = (const char *)&v4[-a1[5].__r_.__value_.__r.__words[0]];
              std::string::basic_string[abi:ne180100]<0>(&__p, "The \\c and \\C escape sequences are not supported by POSIX basic regular expressions: try the Perl syntax instead.");
              boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fail(a1, 5, v14, (uint64_t)&__p);
              goto LABEL_36;
            case 4u:
              return boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::add_emacs_code((uint64_t)a1, v13);
            case 5u:
              __p = &v18;
              v18 = 0;
              v19 = 0;
              v20 = 0;
              v21 = 0;
              v22 = 0;
              v28 = 0;
              v29 = 0;
              v27 = &v28;
              v25 = 0;
              v23 = 1;
              goto LABEL_40;
            case 0xCu:
              v13 = 0;
              return boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::add_emacs_code((uint64_t)a1, v13);
            case 0xDu:
              __p = &v18;
              v18 = 0;
              v19 = 0;
              v20 = 0;
              v21 = 0;
              v22 = 0;
              v28 = 0;
              v29 = 0;
              v27 = &v28;
              v23 = 0;
              v25 = 0;
LABEL_40:
              v24 = a1[3].__r_.__value_.__r.__words[1];
              v26 = 0;
              appended = boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::append_set((uint64_t)a1, (uint64_t)&__p);
              v6 = appended != 0;
              v16 = a1[5].__r_.__value_.__r.__words[2];
              if (appended)
                a1[5].__r_.__value_.__r.__words[2] = v16 + 1;
              else
                boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fail(a1, 4, (const char *)(v16 - a1[5].__r_.__value_.__r.__words[0]));
              boost::re_detail_106800::basic_char_set<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::~basic_char_set((uint64_t)&__p);
              return v6;
            default:
              return boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse_literal((uint64_t)a1);
          }
        }
        return boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse_literal((uint64_t)a1);
    }
  }
  boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fail(a1, 8, (const char *)&v4[-a1[5].__r_.__value_.__r.__words[0]]);
  return 0;
}

void sub_2183101F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::add_emacs_code(uint64_t a1, int a2)
{
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  int v11;
  void *appended;
  __int16 v14;
  uint64_t *v15;
  _QWORD *v16[2];
  void *__p;
  void *v18;
  uint64_t v19;
  __int16 v20;
  int v21;
  int v22;
  char v23;
  _QWORD **v24;
  _QWORD *v25[2];

  v4 = *(unsigned __int8 **)(a1 + 128);
  v3 = *(unsigned __int8 **)(a1 + 136);
  v5 = v3 + 1;
  *(_QWORD *)(a1 + 136) = v3 + 1;
  if (v3 + 1 == v4)
  {
    v7 = **(_QWORD **)(a1 + 8);
    do
    {
      *(_QWORD *)(a1 + 136) = v3;
      v8 = *v3--;
      --v5;
    }
    while (*(_BYTE *)(v7 + v8 + 32) != 12);
    boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fail((std::string *)a1, 5, &v5[-*(_QWORD *)(a1 + 120)]);
    return 0;
  }
  v15 = (uint64_t *)v16;
  v16[0] = 0;
  v16[1] = 0;
  __p = 0;
  v18 = 0;
  v19 = 0;
  v25[0] = 0;
  v25[1] = 0;
  v24 = v25;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v23 = 1;
  if (a2)
    LOBYTE(v20) = 1;
  v6 = (char)*v5;
  if (v6 <= 59)
  {
    switch(*v5)
    {
      case ' ':
        goto LABEL_18;
      case '"':
        v14 = 34;
        std::__tree<boost::re_detail_106800::digraph<char>>::__emplace_unique_key_args<boost::re_detail_106800::digraph<char>,boost::re_detail_106800::digraph<char> const&>(&v15, (char *)&v14, &v14);
        if (HIBYTE(v14))
          HIBYTE(v20) = 1;
        v23 = 0;
        v14 = 39;
        std::__tree<boost::re_detail_106800::digraph<char>>::__emplace_unique_key_args<boost::re_detail_106800::digraph<char>,boost::re_detail_106800::digraph<char> const&>(&v15, (char *)&v14, &v14);
        if (HIBYTE(v14))
          HIBYTE(v20) = 1;
        v23 = 0;
        v14 = 96;
        std::__tree<boost::re_detail_106800::digraph<char>>::__emplace_unique_key_args<boost::re_detail_106800::digraph<char>,boost::re_detail_106800::digraph<char> const&>(&v15, (char *)&v14, &v14);
        goto LABEL_58;
      case '\'':
        v14 = 39;
        std::__tree<boost::re_detail_106800::digraph<char>>::__emplace_unique_key_args<boost::re_detail_106800::digraph<char>,boost::re_detail_106800::digraph<char> const&>(&v15, (char *)&v14, &v14);
        if (HIBYTE(v14))
          HIBYTE(v20) = 1;
        v23 = 0;
        v14 = 44;
        std::__tree<boost::re_detail_106800::digraph<char>>::__emplace_unique_key_args<boost::re_detail_106800::digraph<char>,boost::re_detail_106800::digraph<char> const&>(&v15, (char *)&v14, &v14);
        if (HIBYTE(v14))
          HIBYTE(v20) = 1;
        v23 = 0;
        v14 = 35;
        std::__tree<boost::re_detail_106800::digraph<char>>::__emplace_unique_key_args<boost::re_detail_106800::digraph<char>,boost::re_detail_106800::digraph<char> const&>(&v15, (char *)&v14, &v14);
        goto LABEL_58;
      case '(':
        v14 = 40;
        std::__tree<boost::re_detail_106800::digraph<char>>::__emplace_unique_key_args<boost::re_detail_106800::digraph<char>,boost::re_detail_106800::digraph<char> const&>(&v15, (char *)&v14, &v14);
        if (HIBYTE(v14))
          HIBYTE(v20) = 1;
        v23 = 0;
        v14 = 91;
        std::__tree<boost::re_detail_106800::digraph<char>>::__emplace_unique_key_args<boost::re_detail_106800::digraph<char>,boost::re_detail_106800::digraph<char> const&>(&v15, (char *)&v14, &v14);
        if (HIBYTE(v14))
          HIBYTE(v20) = 1;
        v23 = 0;
        v14 = 123;
        std::__tree<boost::re_detail_106800::digraph<char>>::__emplace_unique_key_args<boost::re_detail_106800::digraph<char>,boost::re_detail_106800::digraph<char> const&>(&v15, (char *)&v14, &v14);
        goto LABEL_58;
      case ')':
        v14 = 41;
        std::__tree<boost::re_detail_106800::digraph<char>>::__emplace_unique_key_args<boost::re_detail_106800::digraph<char>,boost::re_detail_106800::digraph<char> const&>(&v15, (char *)&v14, &v14);
        if (HIBYTE(v14))
          HIBYTE(v20) = 1;
        v23 = 0;
        v14 = 93;
        std::__tree<boost::re_detail_106800::digraph<char>>::__emplace_unique_key_args<boost::re_detail_106800::digraph<char>,boost::re_detail_106800::digraph<char> const&>(&v15, (char *)&v14, &v14);
        if (HIBYTE(v14))
          HIBYTE(v20) = 1;
        v23 = 0;
        v14 = 125;
        std::__tree<boost::re_detail_106800::digraph<char>>::__emplace_unique_key_args<boost::re_detail_106800::digraph<char>,boost::re_detail_106800::digraph<char> const&>(&v15, (char *)&v14, &v14);
        goto LABEL_58;
      case '.':
        v11 = boost::re_detail_106800::cpp_regex_traits_implementation<char>::lookup_classname(**(_QWORD **)(a1 + 8), "punct", "");
        v10 = v21 | v11;
        goto LABEL_56;
      default:
        goto LABEL_65;
    }
  }
  if (v6 <= 94)
  {
    if (v6 == 60)
    {
      v14 = 59;
      std::__tree<boost::re_detail_106800::digraph<char>>::__emplace_unique_key_args<boost::re_detail_106800::digraph<char>,boost::re_detail_106800::digraph<char> const&>(&v15, (char *)&v14, &v14);
    }
    else
    {
      if (v6 != 62)
        goto LABEL_65;
      v14 = 10;
      std::__tree<boost::re_detail_106800::digraph<char>>::__emplace_unique_key_args<boost::re_detail_106800::digraph<char>,boost::re_detail_106800::digraph<char> const&>(&v15, (char *)&v14, &v14);
      if (HIBYTE(v14))
        HIBYTE(v20) = 1;
      v23 = 0;
      v14 = 12;
      std::__tree<boost::re_detail_106800::digraph<char>>::__emplace_unique_key_args<boost::re_detail_106800::digraph<char>,boost::re_detail_106800::digraph<char> const&>(&v15, (char *)&v14, &v14);
    }
  }
  else
  {
    if (v6 != 95)
    {
      if (v6 == 119)
      {
        v10 = *(_DWORD *)(a1 + 80);
        goto LABEL_56;
      }
      if (v6 == 115)
      {
LABEL_18:
        v10 = *(_DWORD *)(a1 + 84);
LABEL_56:
        v21 = v10;
        goto LABEL_60;
      }
LABEL_65:
      boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fail((std::string *)a1, 4, &v5[-*(_QWORD *)(a1 + 120)]);
      v9 = 0;
      goto LABEL_66;
    }
    v14 = 36;
    std::__tree<boost::re_detail_106800::digraph<char>>::__emplace_unique_key_args<boost::re_detail_106800::digraph<char>,boost::re_detail_106800::digraph<char> const&>(&v15, (char *)&v14, &v14);
    if (HIBYTE(v14))
      HIBYTE(v20) = 1;
    v23 = 0;
    v14 = 38;
    std::__tree<boost::re_detail_106800::digraph<char>>::__emplace_unique_key_args<boost::re_detail_106800::digraph<char>,boost::re_detail_106800::digraph<char> const&>(&v15, (char *)&v14, &v14);
    if (HIBYTE(v14))
      HIBYTE(v20) = 1;
    v23 = 0;
    v14 = 42;
    std::__tree<boost::re_detail_106800::digraph<char>>::__emplace_unique_key_args<boost::re_detail_106800::digraph<char>,boost::re_detail_106800::digraph<char> const&>(&v15, (char *)&v14, &v14);
    if (HIBYTE(v14))
      HIBYTE(v20) = 1;
    v23 = 0;
    v14 = 43;
    std::__tree<boost::re_detail_106800::digraph<char>>::__emplace_unique_key_args<boost::re_detail_106800::digraph<char>,boost::re_detail_106800::digraph<char> const&>(&v15, (char *)&v14, &v14);
    if (HIBYTE(v14))
      HIBYTE(v20) = 1;
    v23 = 0;
    v14 = 45;
    std::__tree<boost::re_detail_106800::digraph<char>>::__emplace_unique_key_args<boost::re_detail_106800::digraph<char>,boost::re_detail_106800::digraph<char> const&>(&v15, (char *)&v14, &v14);
    if (HIBYTE(v14))
      HIBYTE(v20) = 1;
    v23 = 0;
    v14 = 95;
    std::__tree<boost::re_detail_106800::digraph<char>>::__emplace_unique_key_args<boost::re_detail_106800::digraph<char>,boost::re_detail_106800::digraph<char> const&>(&v15, (char *)&v14, &v14);
    if (HIBYTE(v14))
      HIBYTE(v20) = 1;
    v23 = 0;
    v14 = 60;
    std::__tree<boost::re_detail_106800::digraph<char>>::__emplace_unique_key_args<boost::re_detail_106800::digraph<char>,boost::re_detail_106800::digraph<char> const&>(&v15, (char *)&v14, &v14);
    if (HIBYTE(v14))
      HIBYTE(v20) = 1;
    v23 = 0;
    v14 = 62;
    std::__tree<boost::re_detail_106800::digraph<char>>::__emplace_unique_key_args<boost::re_detail_106800::digraph<char>,boost::re_detail_106800::digraph<char> const&>(&v15, (char *)&v14, &v14);
  }
LABEL_58:
  if (HIBYTE(v14))
    HIBYTE(v20) = 1;
LABEL_60:
  v23 = 0;
  if (HIBYTE(v20))
    appended = boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::append_set(a1, (uint64_t)&v15);
  else
    appended = boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::append_set(a1, (uint64_t)&v15);
  v5 = *(_BYTE **)(a1 + 136);
  if (!appended)
    goto LABEL_65;
  *(_QWORD *)(a1 + 136) = v5 + 1;
  v9 = 1;
LABEL_66:
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)&v24, v25[0]);
  if (__p)
  {
    v18 = __p;
    operator delete(__p);
  }
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)&v15, v16[0]);
  return v9;
}

void sub_218310784(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  boost::re_detail_106800::basic_char_set<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::~basic_char_set((uint64_t)va);
  _Unwind_Resume(a1);
}

std::string *boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fail(std::string *result, int a2, uint64_t a3, std::string *this, const char *a5)
{
  std::string *v8;
  std::string::size_type v9;
  std::string::size_type size;
  std::string::pointer data;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  const char *v16;
  const std::string::value_type *v18;
  std::runtime_error_vtbl *p_p;
  std::string::size_type imp;
  std::runtime_error_vtbl *v21;
  std::string::size_type v22;
  std::runtime_error __p;
  unsigned __int8 v24;

  v8 = result;
  v9 = result->__r_.__value_.__r.__words[0];
  if (!*(_DWORD *)(result->__r_.__value_.__r.__words[0] + 44))
    *(_DWORD *)(v9 + 44) = a2;
  data = result[5].__r_.__value_.__l.__data_;
  size = result[5].__r_.__value_.__l.__size_;
  result[5].__r_.__value_.__r.__words[2] = size;
  v12 = 10;
  if (a3 > 10)
    v12 = a3;
  v13 = v12 - 10;
  if (a5 == (const char *)a3)
    v14 = (const char *)v13;
  else
    v14 = a5;
  v15 = size - (_QWORD)data;
  if (v15 >= a3 + 10)
    v16 = (const char *)(a3 + 10);
  else
    v16 = (const char *)v15;
  if (a2 != 17)
  {
    if (v15 <= a3 + 10 && v14 == 0)
      v18 = "  The error occurred while parsing the regular expression: '";
    else
      v18 = "  The error occurred while parsing the regular expression fragment: '";
    std::string::append(this, v18);
    if (v14 != v16)
    {
      std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<char *>,std::__wrap_iter<char *>>(&__p, (char *)&v14[v8[5].__r_.__value_.__r.__words[0]], (char *)(v8[5].__r_.__value_.__r.__words[0] + a3), a3 - (_QWORD)v14);
      if ((v24 & 0x80u) == 0)
        p_p = (std::runtime_error_vtbl *)&__p;
      else
        p_p = __p.__vftable;
      if ((v24 & 0x80u) == 0)
        imp = v24;
      else
        imp = (std::string::size_type)__p.__imp_.__imp_;
      std::string::append(this, (const std::string::value_type *)p_p, imp);
      if ((char)v24 < 0)
        operator delete(__p.__vftable);
      std::string::append(this, ">>>HERE>>>");
      std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<char *>,std::__wrap_iter<char *>>(&__p, (char *)(v8[5].__r_.__value_.__r.__words[0] + a3), (char *)&v16[v8[5].__r_.__value_.__r.__words[0]], (unint64_t)&v16[-a3]);
      if ((v24 & 0x80u) == 0)
        v21 = (std::runtime_error_vtbl *)&__p;
      else
        v21 = __p.__vftable;
      if ((v24 & 0x80u) == 0)
        v22 = v24;
      else
        v22 = (std::string::size_type)__p.__imp_.__imp_;
      std::string::append(this, (const std::string::value_type *)v21, v22);
      if ((char)v24 < 0)
        operator delete(__p.__vftable);
    }
    result = std::string::append(this, "'.");
    v9 = v8->__r_.__value_.__r.__words[0];
  }
  if ((*(_BYTE *)(v9 + 42) & 4) == 0)
  {
    boost::regex_error::regex_error(&__p, this, a2, (const char *)a3);
    boost::regex_error::raise((boost::regex_error *)&__p);
  }
  return result;
}

void sub_218310990(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fixup_pointers(uint64_t result, uint64_t a2)
{
  int v2;
  uint64_t v3;

  if (a2)
  {
    while (1)
    {
      switch(*(_DWORD *)a2)
      {
        case 0x10:
          goto LABEL_5;
        case 0x11:
          goto LABEL_4;
        case 0x12:
        case 0x16:
        case 0x17:
        case 0x18:
        case 0x19:
          v2 = *(_DWORD *)(result + 28);
          *(_DWORD *)(result + 28) = v2 + 1;
          *(_DWORD *)(a2 + 304) = v2;
LABEL_4:
          *(_OWORD *)(a2 + 24) = 0uLL;
          *(_DWORD *)(a2 + 280) = 0;
          *(_OWORD *)(a2 + 248) = 0uLL;
          *(_OWORD *)(a2 + 264) = 0uLL;
          *(_OWORD *)(a2 + 216) = 0uLL;
          *(_OWORD *)(a2 + 232) = 0uLL;
          *(_OWORD *)(a2 + 184) = 0uLL;
          *(_OWORD *)(a2 + 200) = 0uLL;
          *(_OWORD *)(a2 + 152) = 0uLL;
          *(_OWORD *)(a2 + 168) = 0uLL;
          *(_OWORD *)(a2 + 120) = 0uLL;
          *(_OWORD *)(a2 + 136) = 0uLL;
          *(_OWORD *)(a2 + 88) = 0uLL;
          *(_OWORD *)(a2 + 104) = 0uLL;
          *(_OWORD *)(a2 + 56) = 0uLL;
          *(_OWORD *)(a2 + 72) = 0uLL;
          *(_OWORD *)(a2 + 40) = 0uLL;
LABEL_5:
          *(_QWORD *)(a2 + 16) += a2;
          break;
        case 0x1D:
          *(_BYTE *)(result + 48) = 1;
          break;
        default:
          break;
      }
      v3 = *(_QWORD *)(a2 + 8);
      if (!v3)
        break;
      *(_QWORD *)(a2 + 8) = a2 + v3;
      a2 += v3;
    }
    *(_QWORD *)(a2 + 8) = 0;
  }
  return result;
}

uint64_t boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fixup_recursions(uint64_t result, int *a2)
{
  unsigned int ***v3;
  int *v4;
  int v5;
  unsigned int **v6;
  uint64_t v7;
  int *v8;
  unsigned int **v9;
  int v10;
  int v11;
  std::runtime_error v12;
  std::string __p;

  if (a2)
  {
    v3 = (unsigned int ***)result;
    v4 = a2;
    do
    {
      if (*v4 == 29)
      {
        v7 = *((_QWORD *)v4 + 2);
        if (v7 >= 10001)
        {
          result = boost::re_detail_106800::named_subexpressions::get_id(*v3, v7);
          v7 = (int)result;
        }
        if ((v7 & 0x8000000000000000) == 0)
        {
          v8 = a2;
          while (*v8 || v7 != v8[4])
          {
            v8 = (int *)*((_QWORD *)v8 + 1);
            if (!v8)
              goto LABEL_18;
          }
          *((_QWORD *)v4 + 2) = v8;
          while (1)
          {
            v8 = (int *)*((_QWORD *)v8 + 1);
            if (!v8)
              goto LABEL_33;
            v10 = *v8;
            if ((*v8 - 22) >= 4)
            {
              if (v10 == 1)
              {
                if (v7 == v8[4])
                  goto LABEL_33;
                continue;
              }
              if (v10 != 18)
                continue;
            }
            v11 = v8[76];
            if (v11)
            {
              if (v11 >= 1)
                v4[6] = v11 - 1;
              goto LABEL_33;
            }
          }
        }
LABEL_18:
        v9 = *v3;
        if (!*((_DWORD *)*v3 + 11))
          *((_DWORD *)v9 + 11) = 2;
        v9[6] = 0;
        v9[7] = 0;
        if ((*((_BYTE *)v9 + 42) & 4) == 0)
        {
          std::string::basic_string[abi:ne180100]<0>(&__p, "Encountered a forward reference to a recursive sub-expression that does not exist.");
          boost::regex_error::regex_error(&v12, &__p, 2, 0);
          boost::regex_error::raise((boost::regex_error *)&v12);
        }
      }
      else if (*v4 == 27)
      {
        v5 = v4[4];
        if (v5 <= -10001)
        {
          result = boost::re_detail_106800::named_subexpressions::get_id(*v3, ~v5);
          if ((int)result <= 0)
          {
            v6 = *v3;
            if (!*((_DWORD *)*v3 + 11))
              *((_DWORD *)v6 + 11) = 2;
            v6[6] = 0;
            v6[7] = 0;
            if ((*((_BYTE *)v6 + 42) & 4) == 0)
            {
              std::string::basic_string[abi:ne180100]<0>(&__p, "Encountered a forward reference to a marked sub-expression that does not exist.");
              boost::regex_error::regex_error(&v12, &__p, 2, 0);
              boost::regex_error::raise((boost::regex_error *)&v12);
            }
          }
        }
      }
LABEL_33:
      v4 = (int *)*((_QWORD *)v4 + 1);
    }
    while (v4);
  }
  return result;
}

void sub_218310C44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  boost::regex_error::~regex_error(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::create_startmaps(uint64_t a1, int *a2, __n128 a3)
{
  char v3;
  int *v4;
  int v6;
  char v7;
  __n128 *v8;
  __n128 *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  __n128 *v16;
  __n128 *v17;
  __n128 *v18;
  int v19;
  uint64_t v20;
  __n128 *i;
  unint64_t v22;
  __n128 *v23;
  uint64_t v24;
  __n128 v25;
  unint64_t v26;
  std::runtime_error v27[2];
  std::string __p;
  __n128 *v29;
  __n128 *v30;
  char *v31;

  v3 = *(_BYTE *)(a1 + 24);
  v29 = 0;
  v30 = 0;
  v31 = 0;
  if (a2)
  {
    v4 = a2;
    do
    {
      v6 = *v4;
      if (*v4 <= 0x1C)
      {
        if (((1 << v6) & 0x3C60000) != 0)
        {
          v7 = *(_BYTE *)(a1 + 24);
          v8 = v30;
          if (v30 >= (__n128 *)v31)
          {
            v10 = v30 - v29;
            v11 = v10 + 1;
            if ((unint64_t)(v10 + 1) >> 60)
              std::vector<float>::__throw_length_error[abi:ne180100]();
            v12 = v31 - (char *)v29;
            if ((v31 - (char *)v29) >> 3 > v11)
              v11 = v12 >> 3;
            if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0)
              v13 = 0xFFFFFFFFFFFFFFFLL;
            else
              v13 = v11;
            if (v13)
              v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::flexible_type>>((uint64_t)&v31, v13);
            else
              v14 = 0;
            v15 = &v14[16 * v10];
            *v15 = v7;
            *((_QWORD *)v15 + 1) = v4;
            v17 = v29;
            v16 = v30;
            v18 = (__n128 *)v15;
            if (v30 != v29)
            {
              do
              {
                a3 = v16[-1];
                v18[-1] = a3;
                --v18;
                --v16;
              }
              while (v16 != v17);
              v16 = v29;
            }
            v9 = (__n128 *)(v15 + 16);
            v29 = v18;
            v30 = (__n128 *)(v15 + 16);
            v31 = &v14[16 * v13];
            if (v16)
              operator delete(v16);
          }
          else
          {
            v30->n128_u8[0] = v7;
            v8->n128_u64[1] = (unint64_t)v4;
            v9 = v8 + 1;
          }
          v30 = v9;
        }
        else if (v6 == 26)
        {
          v19 = boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::calculate_backstep(a1, *((_QWORD *)v4 + 1));
          v4[4] = v19;
          if (v19 < 0)
          {
            v20 = *(_QWORD *)a1;
            if (!*(_DWORD *)(*(_QWORD *)a1 + 44))
              *(_DWORD *)(v20 + 44) = 2;
            *(_QWORD *)(v20 + 48) = 0;
            *(_QWORD *)(v20 + 56) = 0;
            if ((*(_BYTE *)(v20 + 42) & 4) == 0)
            {
              std::string::basic_string[abi:ne180100]<0>(&__p, "Invalid lookbehind assertion encountered in the regular expression.");
              boost::regex_error::regex_error(v27, &__p, 2, 0);
              boost::regex_error::raise((boost::regex_error *)v27);
            }
          }
        }
        else if (v6 == 28)
        {
          *(_BYTE *)(a1 + 24) = *((_BYTE *)v4 + 16);
        }
      }
      v4 = (int *)*((_QWORD *)v4 + 1);
    }
    while (v4);
    for (i = v29; v30 != v29; i = v30)
    {
      if (*(_BYTE *)(a1 + 48))
      {
        v22 = *(_QWORD *)(*(_QWORD *)a1 + 64) + 1;
        LOBYTE(v27[0].__vftable) = 0;
        std::vector<unsigned char>::assign((char **)(a1 + 56), v22, (char *)v27);
      }
      v23 = v30 - 1;
      *(_BYTE *)(a1 + 24) = v30[-1].n128_u8[0];
      v24 = v23->n128_i64[1];
      v30 = v23;
      *(_QWORD *)(a1 + 40) = 0;
      boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::create_startmap(a1, *(_QWORD *)(v24 + 8), (char *)(v24 + 24), (_DWORD *)(v24 + 280), 1u, a3);
      *(_QWORD *)(a1 + 40) = 0;
      if (*(_BYTE *)(a1 + 48))
      {
        v26 = *(_QWORD *)(*(_QWORD *)a1 + 64) + 1;
        LOBYTE(v27[0].__vftable) = 0;
        std::vector<unsigned char>::assign((char **)(a1 + 56), v26, (char *)v27);
      }
      boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::create_startmap(a1, *(_QWORD *)(v24 + 16), (char *)(v24 + 24), (_DWORD *)(v24 + 280), 2u, v25);
      *(_DWORD *)v24 = boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::get_repeat_type(a1, (unsigned int *)v24);
    }
    *(_BYTE *)(a1 + 24) = v3;
    if (i)
    {
      v30 = i;
      operator delete(i);
    }
  }
}

void sub_218310F48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::runtime_error a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19)
{
  boost::regex_error::~regex_error(&a9);
  if (a17 < 0)
    operator delete(__p);
  if (a18)
  {
    a19 = (uint64_t)a18;
    operator delete(a18);
  }
  _Unwind_Resume(a1);
}

char *std::vector<unsigned char>::assign(char **a1, unint64_t a2, char *a3)
{
  unint64_t v4;
  unint64_t v6;
  char *result;
  uint64_t v8;
  size_t v9;
  char *v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  char *v16;
  char *v17;

  v4 = a2;
  v6 = (unint64_t)a1[2];
  result = *a1;
  if (v6 - (unint64_t)result >= a2)
  {
    v12 = a1[1] - result;
    if (v12 >= a2)
      v13 = a2;
    else
      v13 = a1[1] - result;
    for (; v13; --v13)
      *result++ = *a3;
    v14 = a2 >= v12;
    v15 = a2 - v12;
    if (v15 != 0 && v14)
    {
      v16 = a1[1];
      v17 = &v16[v15];
      do
      {
        *v16++ = *a3;
        --v15;
      }
      while (v15);
      a1[1] = v17;
    }
    else
    {
      a1[1] = &(*a1)[a2];
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      v6 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if ((v4 & 0x8000000000000000) != 0)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v8 = 2 * v6;
    if (2 * v6 <= v4)
      v8 = v4;
    if (v6 >= 0x3FFFFFFFFFFFFFFFLL)
      v9 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v9 = v8;
    result = std::vector<turi::flex_type_enum>::__vallocate[abi:ne180100](a1, v9);
    v10 = a1[1];
    v11 = &v10[v4];
    do
    {
      *v10++ = *a3;
      --v4;
    }
    while (v4);
    a1[1] = v11;
  }
  return result;
}

uint64_t boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::create_startmap(uint64_t result, uint64_t a2, char *a3, _DWORD *a4, unsigned int a5, __n128 a6)
{
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  __n128 *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  BOOL v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t ii;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  uint64_t v24;
  _DWORD *v25;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  _DWORD *v30;
  uint64_t j;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t i;
  uint64_t v41;
  uint64_t n;
  char v43;
  uint64_t m;
  uint64_t k;
  uint64_t v46;
  uint64_t v47;
  __n128 v48;
  __n128 v49;
  unsigned int v50;
  std::runtime_error v51;
  std::string __p;

  if (!a2)
    return result;
  v7 = a2;
  v8 = result;
  v9 = (__n128)vdupq_n_s8(a5);
  v50 = a5;
  while (2)
  {
    v10 = (__n128 *)(a3 + 1);
LABEL_4:
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v14 = *(_BYTE *)(v8 + 24) != 0;
    v15 = 1;
LABEL_5:
    v16 = *(_DWORD *)v7;
    switch(*(_DWORD *)v7)
    {
      case 0:
        if (*(_DWORD *)(v7 + 16) != -3)
          goto LABEL_33;
        v17 = *(_QWORD *)(*(_QWORD *)(v7 + 8) + 8);
        goto LABEL_34;
      case 1:
        v20 = *(int *)(v7 + 16);
        if ((v20 & 0x80000000) != 0)
        {
          if (!a3)
            goto LABEL_128;
          if (*a3)
          {
            for (i = 0; i != 256; i += 16)
              *(int8x16_t *)&a3[i] = vorrq_s8(*(int8x16_t *)&a3[i], (int8x16_t)v9);
            goto LABEL_126;
          }
          goto LABEL_121;
        }
        if (v13 && v12 && v12 == (_DWORD)v20)
        {
          v13 = 0;
          v17 = v11;
        }
        else
        {
          if ((_DWORD)v20)
          {
            if (*(_BYTE *)(*(_QWORD *)v8 + 400))
            {
              v22 = *(_QWORD *)(*(_QWORD *)v8 + 72);
              if (v22)
              {
                while (1)
                {
                  if (*(_DWORD *)v22 == 29)
                  {
                    v23 = *(_DWORD **)(v22 + 16);
                    if (!*v23 && v23[4] == (_DWORD)v20)
                      break;
                  }
                  v22 = *(_QWORD *)(v22 + 8);
                  if (!v22)
                    goto LABEL_33;
                }
                v24 = *(_QWORD *)(v8 + 56);
                if ((*(_BYTE *)(v24 + v20) & 2) == 0)
                {
                  *(_BYTE *)(v24 + v20) |= 2u;
                  v25 = a4;
                  v48 = v9;
                  v47 = v11;
                  result = boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::create_startmap(v8, *(_QWORD *)(v22 + 8), a3, a4, v50, a6, v9);
                  v11 = v47;
                  v9 = v48;
                  a4 = v25;
                  a5 = v50;
                }
              }
            }
          }
LABEL_33:
          v17 = *(_QWORD *)(v7 + 8);
        }
        goto LABEL_34;
      case 2:
        if (a3)
        {
          v32 = 0;
          *a3 |= 4u;
          v33 = *(unsigned __int8 *)(v7 + 24);
          do
          {
            if (v14)
            {
              v34 = *(_QWORD *)(**(_QWORD **)(v8 + 8) + 8);
              result = (*(uint64_t (**)(uint64_t, _QWORD, __n128, __n128))(*(_QWORD *)v34 + 40))(v34, (char)v32, a6, v9);
              LOBYTE(a5) = v50;
            }
            else
            {
              result = v32;
            }
            if (v33 == result)
              a3[v32] |= a5;
            ++v32;
          }
          while (v32 != 256);
        }
        return result;
      case 4:
        if (a3)
        {
          *a3 |= 4u;
          a3[10] |= a5;
          a3[13] |= a5;
          a3[12] |= a5;
          a3[133] |= a5;
        }
        if (a4)
        {
          a3 = 0;
          v7 = *(_QWORD *)(v7 + 8);
          if (v7)
            continue;
        }
        return result;
      case 5:
        goto LABEL_116;
      case 6:
      case 0x1F:
        if (!a3)
          goto LABEL_128;
        if (!*a3)
          goto LABEL_121;
        for (j = 0; j != 256; j += 16)
          *(int8x16_t *)&a3[j] = vorrq_s8(*(int8x16_t *)&a3[j], (int8x16_t)v9);
        goto LABEL_126;
      case 9:
        result = boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::create_startmap(v8, *(_QWORD *)(v7 + 8), a3, a4, v50, a6, v9);
        if (a3)
        {
          v35 = 0;
          *a3 |= 4u;
          do
          {
            result = boost::cpp_regex_traits<char>::isctype(*(_QWORD *)(v8 + 8), (char)v35, *(_DWORD *)(v8 + 80));
            if ((result & 1) == 0)
              a3[v35] &= ~(_BYTE)v50;
            ++v35;
          }
          while (v35 != 256);
        }
        return result;
      case 0xA:
        result = boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::create_startmap(v8, *(_QWORD *)(v7 + 8), a3, a4, v50, a6, v9);
        if (a3)
        {
          v36 = 0;
          *a3 |= 4u;
          do
          {
            result = boost::cpp_regex_traits<char>::isctype(*(_QWORD *)(v8 + 8), (char)v36, *(_DWORD *)(v8 + 80));
            if ((_DWORD)result)
              a3[v36] &= ~(_BYTE)v50;
            ++v36;
          }
          while (v36 != 256);
        }
        return result;
      case 0xC:
        goto LABEL_128;
      case 0xD:
        goto LABEL_114;
      case 0xE:
        if (!a3)
          return result;
        if (*(_BYTE *)(v7 + 37))
        {
          v37 = 0;
          *a3 |= 4u;
          do
          {
            LOBYTE(v51.__vftable) = v37;
            result = (uint64_t)boost::re_detail_106800::re_is_set_member<char *,char,boost::regex_traits<char,boost::cpp_regex_traits<char>>,unsigned int>((std::string::value_type *)&v51, (std::string::value_type *)&v51.__vftable + 1, v7, *(_QWORD *)v8, v14);
            if (&v51 != (std::runtime_error *)result)
              a3[v37] |= v50;
            ++v37;
          }
          while (v37 != 256);
          return result;
        }
        if (!*a3)
          goto LABEL_134;
        for (k = 0; k != 256; k += 16)
          *(int8x16_t *)&a3[k] = vorrq_s8(*(int8x16_t *)&a3[k], (int8x16_t)v9);
        goto LABEL_120;
      case 0xF:
        if (a3)
        {
          v38 = 0;
          *a3 |= 4u;
          do
          {
            if (v14)
            {
              v39 = *(_QWORD *)(**(_QWORD **)(v8 + 8) + 8);
              result = (*(uint64_t (**)(uint64_t, _QWORD, __n128, __n128))(*(_QWORD *)v39 + 40))(v39, (char)v38, a6, v9);
              LOBYTE(a5) = v50;
            }
            else
            {
              result = v38;
            }
            if (*(_BYTE *)(v7 + result + 16))
              a3[v38] |= a5;
            ++v38;
          }
          while (v38 != 256);
        }
        return result;
      case 0x10:
        v17 = *(_QWORD *)(v7 + 16);
        v15 = -1;
        goto LABEL_34;
      case 0x11:
      case 0x12:
      case 0x16:
      case 0x17:
      case 0x18:
      case 0x19:
        if ((*(_BYTE *)(v7 + 24) & 4) != 0)
        {
          if (a3)
          {
            v46 = 0;
            *a3 |= 4u;
            do
            {
              if ((*(_BYTE *)(v7 + 24 + v46) & 3) != 0)
                a3[v46] |= a5;
              ++v46;
            }
            while (v46 != 256);
          }
          if (!a4 || (*(_BYTE *)(v7 + 280) & 3) == 0)
            return result;
          goto LABEL_129;
        }
        v49 = v9;
        if ((v16 - 22) >= 4 && v16 != 18)
          goto LABEL_48;
        v27 = *(_DWORD *)(v7 + 304);
        if (v27 > 0x3F || (v28 = *(_QWORD *)(v8 + 40), v29 = 1 << v27, (v28 & v29) != 0))
        {
          if (!a3)
            goto LABEL_128;
          if (*a3)
          {
            for (m = 0; m != 256; m += 16)
              *(int8x16_t *)&a3[m] = vorrq_s8(*(int8x16_t *)&a3[m], (int8x16_t)v9);
LABEL_126:
            v43 = *a3;
LABEL_127:
            *a3 = v43 | 4;
LABEL_128:
            if (!a4)
              return result;
LABEL_129:
            *a4 |= a5;
            return result;
          }
LABEL_121:
          *((__n128 *)a3 + 15) = v9;
          *(__n128 *)(a3 + 209) = v9;
          *(__n128 *)(a3 + 225) = v9;
          *(__n128 *)(a3 + 177) = v9;
          *(__n128 *)(a3 + 193) = v9;
          *(__n128 *)(a3 + 145) = v9;
          *(__n128 *)(a3 + 161) = v9;
          *(__n128 *)(a3 + 113) = v9;
          *(__n128 *)(a3 + 129) = v9;
          *(__n128 *)(a3 + 81) = v9;
          *(__n128 *)(a3 + 97) = v9;
          *(__n128 *)(a3 + 49) = v9;
          *(__n128 *)(a3 + 65) = v9;
          *(__n128 *)(a3 + 17) = v9;
          *(__n128 *)(a3 + 33) = v9;
          *v10 = v9;
          v43 = a5;
          goto LABEL_127;
        }
        if ((v16 - 22) < 4 || v16 == 18)
          *(_QWORD *)(v8 + 40) = v28 | v29;
LABEL_48:
        v30 = a4;
        result = boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::create_startmap(v8, *(_QWORD *)(v7 + 8), a3, a4, v50, a6, v9);
        a4 = v30;
        a5 = v50;
        v9 = v49;
        if (*(_DWORD *)v7 != 17 && *(_QWORD *)(v7 + 288) && v15)
          return result;
        v7 = *(_QWORD *)(v7 + 16);
        if (!v7)
          return result;
        goto LABEL_4;
      case 0x14:
        if (a3)
        {
          *a3 |= 4u;
          a3[10] |= a5;
          a3[13] |= a5;
        }
        goto LABEL_128;
      case 0x1C:
        v14 = *(_BYTE *)(v7 + 16) != 0;
        goto LABEL_33;
      case 0x1D:
        v17 = *(_QWORD *)(v7 + 16);
        v12 = *(_DWORD *)(v17 + 16);
        v21 = *(_QWORD *)(v8 + 56);
        if ((*(_BYTE *)(v21 + v12) & 1) == 0)
        {
          if (v13)
            goto LABEL_113;
          v11 = *(_QWORD *)(v7 + 8);
          *(_BYTE *)(v21 + v12) |= 1u;
          v13 = v7;
LABEL_34:
          ++v15;
          v7 = v17;
          if (!v17)
            return result;
          goto LABEL_5;
        }
        v41 = *(_QWORD *)v8;
        if (!*(_DWORD *)(*(_QWORD *)v8 + 44))
          *(_DWORD *)(v41 + 44) = 2;
        *(_QWORD *)(v41 + 48) = 0;
        *(_QWORD *)(v41 + 56) = 0;
        if ((*(_BYTE *)(v41 + 42) & 4) == 0)
        {
          std::string::basic_string[abi:ne180100]<0>(&__p, "Encountered an infinite recursion.");
          boost::regex_error::regex_error(&v51, &__p, 2, 0);
          boost::regex_error::raise((boost::regex_error *)&v51);
        }
LABEL_113:
        *(_BYTE *)(v21 + v12) |= 1u;
LABEL_114:
        if (a4)
          *a4 |= a5;
LABEL_116:
        if (a3)
        {
          if (*a3)
          {
            for (n = 0; n != 256; n += 16)
              *(int8x16_t *)&a3[n] = vorrq_s8(*(int8x16_t *)&a3[n], (int8x16_t)v9);
LABEL_120:
            LOBYTE(a5) = *a3;
          }
          else
          {
LABEL_134:
            *((__n128 *)a3 + 15) = v9;
            *(__n128 *)(a3 + 209) = v9;
            *(__n128 *)(a3 + 225) = v9;
            *(__n128 *)(a3 + 177) = v9;
            *(__n128 *)(a3 + 193) = v9;
            *(__n128 *)(a3 + 145) = v9;
            *(__n128 *)(a3 + 161) = v9;
            *(__n128 *)(a3 + 113) = v9;
            *(__n128 *)(a3 + 129) = v9;
            *(__n128 *)(a3 + 81) = v9;
            *(__n128 *)(a3 + 97) = v9;
            *(__n128 *)(a3 + 49) = v9;
            *(__n128 *)(a3 + 65) = v9;
            *(__n128 *)(a3 + 17) = v9;
            *(__n128 *)(a3 + 33) = v9;
            *v10 = v9;
          }
          *a3 = a5 | 4;
        }
        return result;
      case 0x20:
        if (a3)
        {
          if (*a3)
          {
            for (ii = 0; ii != 256; ii += 16)
            {
              a6 = (__n128)vorrq_s8(*(int8x16_t *)&a3[ii], (int8x16_t)v9);
              *(__n128 *)&a3[ii] = a6;
            }
            v19 = *a3;
          }
          else
          {
            *((__n128 *)a3 + 15) = v9;
            *(__n128 *)(a3 + 209) = v9;
            *(__n128 *)(a3 + 225) = v9;
            *(__n128 *)(a3 + 177) = v9;
            *(__n128 *)(a3 + 193) = v9;
            *(__n128 *)(a3 + 145) = v9;
            *(__n128 *)(a3 + 161) = v9;
            *(__n128 *)(a3 + 113) = v9;
            *(__n128 *)(a3 + 129) = v9;
            *(__n128 *)(a3 + 81) = v9;
            *(__n128 *)(a3 + 97) = v9;
            *(__n128 *)(a3 + 49) = v9;
            *(__n128 *)(a3 + 65) = v9;
            *(__n128 *)(a3 + 17) = v9;
            *(__n128 *)(a3 + 33) = v9;
            v19 = a5;
            *v10 = v9;
          }
          *a3 = v19 | 4;
        }
        goto LABEL_33;
      default:
        goto LABEL_33;
    }
  }
}

void sub_218311850(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::runtime_error a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  boost::regex_error::~regex_error(&a14);
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::get_restart_type(uint64_t a1, uint64_t a2)
{
  int v2;

  if (!a2)
    return 0;
  while (1)
  {
    v2 = *(_DWORD *)a2;
    if (*(_DWORD *)a2 >= 2u)
      break;
    a2 = *(_QWORD *)(a2 + 8);
    if (!a2)
      return 0;
  }
  if (v2 > 10)
  {
    if (v2 == 11)
    {
      return 3;
    }
    else
    {
      if (v2 != 21)
        return 0;
      return 4;
    }
  }
  else
  {
    if (v2 != 3)
      return v2 == 9;
    return 2;
  }
}

uint64_t boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::probe_leading_repeat(uint64_t result, int *a2)
{
  unsigned int v2;
  unsigned int v3;
  int **v4;

  do
  {
    v2 = *a2;
    if (*a2 > 0x19)
      break;
    if (((1 << v2) & 0x201F9A) == 0)
    {
      if (v2)
      {
        if (((1 << v2) & 0x3C00000) != 0 && !*(_BYTE *)(result + 32))
          *((_BYTE *)a2 + 308) = 1;
        return result;
      }
      v3 = a2[4];
      if ((v3 & 0x80000000) != 0)
      {
        if (v3 < 0xFFFFFFFE)
        {
          if (v3 != -3)
            return result;
          v4 = (int **)(a2 + 2);
        }
        else
        {
          v4 = (int **)(*((_QWORD *)a2 + 1) + 16);
        }
        a2 = *v4;
      }
    }
    a2 = (int *)*((_QWORD *)a2 + 1);
  }
  while (a2);
  return result;
}

uint64_t boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::calculate_backstep(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t *v7;
  int repeat_type;
  uint64_t v9;
  int v11;

  if (a2)
  {
    v2 = a2;
    v4 = 0;
    while (2)
    {
      switch(*(_DWORD *)v2)
      {
        case 0:
          v5 = *(_DWORD *)(v2 + 16);
          if (v5 < 0xFFFFFFFE)
          {
            if (v5 != -3)
              goto LABEL_22;
            v6 = *(_QWORD *)(v2 + 8);
          }
          else
          {
            v6 = *(_QWORD *)(*(_QWORD *)(v2 + 8) + 16);
          }
          v7 = (uint64_t *)(v6 + 8);
          goto LABEL_15;
        case 1:
          if (*(_DWORD *)(v2 + 16) > 0xFFFFFFFD)
            return v4;
          goto LABEL_22;
        case 2:
          v4 = (*(_DWORD *)(v2 + 16) + v4);
          goto LABEL_22;
        case 5:
        case 0xF:
          goto LABEL_21;
        case 0xD:
        case 0x12:
        case 0x13:
        case 0x16:
        case 0x17:
        case 0x18:
        case 0x19:
        case 0x1A:
          repeat_type = boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::get_repeat_type(a1, (unsigned int *)v2);
          *(_DWORD *)v2 = repeat_type;
          if ((repeat_type - 22) >= 3 && (repeat_type != 25 || !*(_BYTE *)(*(_QWORD *)(v2 + 8) + 37)))
            return 0xFFFFFFFFLL;
          v9 = *(_QWORD *)(v2 + 296);
          if (v9 != *(_QWORD *)(v2 + 288))
            return 0xFFFFFFFFLL;
          v4 = (v4 + v9);
          goto LABEL_14;
        case 0xE:
          if (!*(_BYTE *)(v2 + 37))
            return 0xFFFFFFFFLL;
LABEL_21:
          v4 = (v4 + 1);
          goto LABEL_22;
        case 0x10:
LABEL_14:
          v7 = (uint64_t *)(v2 + 16);
          goto LABEL_15;
        case 0x11:
          v11 = boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::calculate_backstep(a1, *(_QWORD *)(v2 + 8));
          if (v11 != boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::calculate_backstep(a1, *(_QWORD *)(v2 + 16))|| v11 <= -1)
          {
            return 0xFFFFFFFFLL;
          }
          else
          {
            return (v11 + v4);
          }
        default:
LABEL_22:
          v7 = (uint64_t *)(v2 + 8);
LABEL_15:
          v2 = *v7;
          if (!*v7)
            return 0xFFFFFFFFLL;
          continue;
      }
    }
  }
  return 0xFFFFFFFFLL;
}

uint64_t boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::get_repeat_type(uint64_t a1, unsigned int *a2)
{
  uint64_t result;
  uint64_t v3;
  int v4;

  result = *a2;
  if ((_DWORD)result == 18)
  {
    v3 = *((_QWORD *)a2 + 1);
    if (*(_QWORD *)(*(_QWORD *)(v3 + 8) + 8) == *((_QWORD *)a2 + 2))
    {
      v4 = *(_DWORD *)v3;
      if (*(int *)v3 > 13)
      {
        if (v4 == 14)
        {
          if (*(_BYTE *)(v3 + 37))
            return 25;
        }
        else if (v4 == 15)
        {
          return 24;
        }
      }
      else if (v4 == 2)
      {
        return 23;
      }
      else if (v4 == 5)
      {
        return 22;
      }
    }
  }
  return result;
}

std::string::value_type *boost::re_detail_106800::re_is_set_member<char *,char,boost::regex_traits<char,boost::cpp_regex_traits<char>>,unsigned int>(std::string::value_type *a1, std::string::value_type *a2, uint64_t a3, uint64_t a4, int a5)
{
  std::string::value_type *v5;
  const std::string::value_type *v9;
  uint64_t *v10;
  unsigned int v12;
  int v13;
  uint64_t v14;
  std::string::value_type v15;
  const std::string::value_type *v16;
  std::string::value_type *v18;
  std::string::value_type v20;
  std::string::value_type v21;
  int v22;
  const std::string::value_type *v23;
  int v25;
  std::string *v26;
  std::string *v27;
  int v30;
  int v31;
  std::string *v32;
  char v34;
  int v35;
  std::string v37;
  std::string::value_type v38;
  std::string::value_type v39;
  std::string v40;

  v5 = a1;
  if (a1 == a2)
    return v5;
  v9 = (const std::string::value_type *)(a3 + 40);
  v10 = *(uint64_t **)(a4 + 24);
  if (*(_DWORD *)(a3 + 16))
  {
    v12 = 0;
    do
    {
      LOBYTE(v13) = *v9;
      if (*v9)
      {
        v14 = 0;
        do
        {
          v15 = v5[v14];
          if (a5)
          {
            v15 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(*v10 + 8) + 40))(*(_QWORD *)(*v10 + 8), v15);
            LOBYTE(v13) = v9[v14];
          }
          if (v15 != v13)
            break;
          v16 = &v9[v14++];
          v13 = *((unsigned __int8 *)v16 + 1);
        }
        while (v13 && &v5[v14] != a2);
        v18 = &v5[v14];
        v9 += v14;
        if (!(_BYTE)v13)
        {
          if (v18 == v5)
            v18 = v5 + 1;
          if (!*(_BYTE *)(a3 + 36))
            return v18;
          return v5;
        }
        while (*(unsigned __int8 *)v9++)
          ;
      }
      else
      {
        v20 = *v5;
        if (a5)
          v20 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(*v10 + 8) + 40))(*(_QWORD *)(*v10 + 8), v20);
        if (!v20)
          goto LABEL_94;
        ++v9;
      }
      ++v12;
    }
    while (v12 < *(_DWORD *)(a3 + 16));
  }
  v21 = *v5;
  if (a5)
    v21 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(*v10 + 8) + 40))(*(_QWORD *)(*v10 + 8), v21);
  if (!*(_DWORD *)(a3 + 20))
  {
    if (!*(_DWORD *)(a3 + 24))
      goto LABEL_90;
    memset(&v40, 0, sizeof(v40));
    goto LABEL_64;
  }
  memset(&v40, 0, sizeof(v40));
  if ((*(_BYTE *)(a4 + 42) & 0x20) != 0)
  {
    v38 = v21;
    v39 = 0;
    boost::re_detail_106800::cpp_regex_traits_implementation<char>::transform(*v10, &v37);
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v40.__r_.__value_.__l.__data_);
    v40 = v37;
  }
  else
  {
    std::string::assign(&v40, 1uLL, v21);
  }
  if (!*(_DWORD *)(a3 + 20))
  {
LABEL_64:
    if (!*(_DWORD *)(a3 + 24))
      goto LABEL_83;
    v38 = v21;
    v39 = 0;
    boost::re_detail_106800::cpp_regex_traits_implementation<char>::transform_primary(*v10, &v38, &v39, (uint64_t *)&v37);
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v40.__r_.__value_.__l.__data_);
    v40 = v37;
    if (!*(_DWORD *)(a3 + 24))
    {
LABEL_83:
      v34 = 1;
      goto LABEL_86;
    }
    v30 = 0;
    while (1)
    {
      if (!*v9)
      {
        if ((SHIBYTE(v40.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          v31 = HIBYTE(v40.__r_.__value_.__r.__words[2]);
          if (HIBYTE(v40.__r_.__value_.__r.__words[2]) == 1)
          {
            v32 = &v40;
            goto LABEL_77;
          }
          goto LABEL_78;
        }
        if (v40.__r_.__value_.__l.__size_ == 1)
        {
          v32 = (std::string *)v40.__r_.__value_.__r.__words[0];
LABEL_77:
          v31 = v32->__r_.__value_.__s.__data_[0];
LABEL_78:
          if (!v31)
            goto LABEL_84;
          goto LABEL_79;
        }
        if (!v40.__r_.__value_.__l.__size_)
          goto LABEL_84;
      }
LABEL_79:
      if (!std::string::compare(&v40, v9))
        goto LABEL_84;
      ++v9;
      while (*(unsigned __int8 *)v9++)
        ;
      if (++v30 >= *(_DWORD *)(a3 + 24))
        goto LABEL_83;
    }
  }
  v22 = 0;
  while (1)
  {
    if (!*v9)
    {
      if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
      {
        if (!v40.__r_.__value_.__l.__size_)
          goto LABEL_36;
        if (v40.__r_.__value_.__l.__size_ != 1)
          goto LABEL_35;
        v27 = (std::string *)v40.__r_.__value_.__r.__words[0];
        goto LABEL_52;
      }
      if (!*((_BYTE *)&v40.__r_.__value_.__s + 23))
        goto LABEL_36;
      if (HIBYTE(v40.__r_.__value_.__r.__words[2]) == 1)
      {
        v27 = &v40;
LABEL_52:
        if (!v27->__r_.__value_.__s.__data_[0])
          goto LABEL_36;
      }
    }
LABEL_35:
    if (std::string::compare(&v40, v9) < 0)
    {
      v23 = v9 + 1;
      while (*(unsigned __int8 *)v23++)
        ;
      goto LABEL_61;
    }
LABEL_36:
    v23 = v9 + 1;
    while (*(unsigned __int8 *)v23++)
      ;
    if (*v23)
      goto LABEL_60;
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v40.__r_.__value_.__l.__size_ != 1)
      {
        if (!v40.__r_.__value_.__l.__size_)
          break;
        goto LABEL_60;
      }
      v26 = (std::string *)v40.__r_.__value_.__r.__words[0];
    }
    else
    {
      v25 = HIBYTE(v40.__r_.__value_.__r.__words[2]);
      if (HIBYTE(v40.__r_.__value_.__r.__words[2]) != 1)
        goto LABEL_59;
      v26 = &v40;
    }
    v25 = v26->__r_.__value_.__s.__data_[0];
LABEL_59:
    if (!v25)
      break;
LABEL_60:
    if (std::string::compare(&v40, v23) <= 0)
      break;
LABEL_61:
    v9 = v23 + 1;
    while (*(unsigned __int8 *)v9++)
      ;
    if (++v22 >= *(_DWORD *)(a3 + 20))
      goto LABEL_64;
  }
LABEL_84:
  v34 = 0;
  if (!*(_BYTE *)(a3 + 36))
    ++v5;
LABEL_86:
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v40.__r_.__value_.__l.__data_);
    if ((v34 & 1) != 0)
      goto LABEL_90;
  }
  else
  {
    if ((v34 & 1) == 0)
      return v5;
LABEL_90:
    if (!boost::cpp_regex_traits<char>::isctype((uint64_t)v10, v21, *(_DWORD *)(a3 + 28)))
    {
      v35 = *(_DWORD *)(a3 + 32);
      if (!v35 || boost::cpp_regex_traits<char>::isctype((uint64_t)v10, v21, v35))
      {
        v5 += *(unsigned __int8 *)(a3 + 36);
        return v5;
      }
    }
LABEL_94:
    if (!*(_BYTE *)(a3 + 36))
      ++v5;
  }
  return v5;
}

void sub_218311F48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t _GLOBAL__sub_I_instances_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

uint64_t _GLOBAL__sub_I_posix_api_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

std::runtime_error *boost::regex_error::regex_error(std::runtime_error *a1, const std::string *a2, int a3, const char *a4)
{
  std::runtime_error *result;

  result = std::runtime_error::runtime_error(a1, a2);
  result->__vftable = (std::runtime_error_vtbl *)&off_24D9395A0;
  LODWORD(result[1].__vftable) = a3;
  result[1].__imp_.__imp_ = a4;
  return result;
}

void boost::regex_error::~regex_error(std::runtime_error *this)
{
  std::runtime_error::~runtime_error(this);
  JUMPOUT(0x219A19A08);
}

void boost::regex_error::raise(boost::regex_error *this)
{
  boost::throw_exception<boost::regex_error>((uint64_t)this);
}

void boost::throw_exception<boost::regex_error>(uint64_t a1)
{
  void *exception;
  std::runtime_error v3;
  __int128 v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  exception = __cxa_allocate_exception(0x50uLL);
  std::runtime_error::runtime_error(&v3, (const std::runtime_error *)a1);
  v4 = *(_OWORD *)(a1 + 16);
  v7 = 0;
  v8 = 0;
  v9 = -1;
  v3.__vftable = (std::runtime_error_vtbl *)&unk_24D9396F8;
  v5 = &unk_24D939720;
  v6 = 0;
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::regex_error>>::clone_impl((uint64_t)exception, (uint64_t)&v3);
}

void sub_2183120DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  void *v14;
  int v15;

  a13 = &unk_24D918C48;
  if (a14 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a14 + 32))(a14))
    a14 = 0;
  std::runtime_error::~runtime_error(&a10);
  if (v15)
    __cxa_free_exception(v14);
  _Unwind_Resume(a1);
}

void boost::re_detail_106800::raise_runtime_error(const std::runtime_error *this, const std::runtime_error *a2)
{
  boost::throw_exception<std::runtime_error>(this);
}

void boost::re_detail_106800::mem_block_cache::~mem_block_cache(boost::re_detail_106800::mem_block_cache *this)
{
  uint64_t i;
  void *v4;

  for (i = 0; i != 128; i += 8)
  {
    if (atomic_load((unint64_t *)((char *)this + i)))
    {
      v4 = (void *)atomic_load((unint64_t *)((char *)this + i));
      operator delete(v4);
    }
  }
}

void boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::regex_error>>::~clone_impl(uint64_t a1)
{
  *(_QWORD *)(a1 + 32) = &unk_24D918C48;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 40));
  std::runtime_error::~runtime_error((std::runtime_error *)a1);
}

{
  *(_QWORD *)(a1 + 32) = &unk_24D918C48;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 40));
  std::runtime_error::~runtime_error((std::runtime_error *)a1);
  JUMPOUT(0x219A19A08);
}

uint64_t boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::regex_error>>::clone_impl(uint64_t a1, uint64_t a2)
{
  std::runtime_error *v4;
  uint64_t v5;
  __int128 v6;

  *(_QWORD *)(a1 + 72) = &unk_24D918BA8;
  v4 = std::runtime_error::runtime_error((std::runtime_error *)a1, (const std::runtime_error *)a2);
  v4->__vftable = (std::runtime_error_vtbl *)&off_24D9395A0;
  v4[1] = *(std::runtime_error *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v5;
  *(_QWORD *)(a1 + 32) = &unk_24D918C48;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  v6 = *(_OWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = v6;
  *(_QWORD *)a1 = &unk_24D939658;
  *(_QWORD *)(a1 + 32) = &unk_24D939690;
  *(_QWORD *)(a1 + 72) = &unk_24D9396C8;
  boost::exception_detail::copy_boost_exception(a1 + 32, a2 + 32);
  return a1;
}

{
  std::runtime_error *v4;
  uint64_t v5;
  __int128 v6;

  *(_QWORD *)(a1 + 72) = &unk_24D918BA8;
  v4 = std::runtime_error::runtime_error((std::runtime_error *)a1, (const std::runtime_error *)a2);
  v4->__vftable = (std::runtime_error_vtbl *)&off_24D9395A0;
  v4[1] = *(std::runtime_error *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = &unk_24D918C48;
  *(_QWORD *)(a1 + 40) = v5;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  v6 = *(_OWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = v6;
  *(_QWORD *)a1 = &unk_24D939658;
  *(_QWORD *)(a1 + 32) = &unk_24D939690;
  *(_QWORD *)(a1 + 72) = &unk_24D9396C8;
  return a1;
}

void sub_218312280(_Unwind_Exception *a1)
{
  std::runtime_error *v1;

  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

char *boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::regex_error>>::clone(uint64_t a1)
{
  _QWORD *v2;

  v2 = (_QWORD *)operator new();
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::regex_error>>::clone_impl((uint64_t)v2, a1);
  return (char *)v2 + *(_QWORD *)(*v2 - 24);
}

void sub_218312344(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10F1C4036D0BA4ELL);
  _Unwind_Resume(a1);
}

void boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::regex_error>>::rethrow(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x50uLL);
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::regex_error>>::clone_impl((uint64_t)exception, a1);
}

void sub_2183123A4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::regex_error>>::~clone_impl(_QWORD *a1)
{
  std::runtime_error *v1;

  v1 = (std::runtime_error *)(a1 - 4);
  *a1 = &unk_24D918C48;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  std::runtime_error::~runtime_error(v1);
}

void `non-virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::regex_error>>::~clone_impl(uint64_t a1)
{
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::regex_error>>::~clone_impl(a1 - 32);
}

char *`virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::regex_error>>::clone(_QWORD *a1)
{
  return boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::regex_error>>::clone((uint64_t)a1 + *(_QWORD *)(*a1 - 24));
}

void `virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::regex_error>>::rethrow(_QWORD *a1)
{
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::regex_error>>::rethrow((uint64_t)a1 + *(_QWORD *)(*a1 - 32));
}

void `virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::regex_error>>::~clone_impl(_QWORD *a1)
{
  char *v1;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 40);
  *((_QWORD *)v1 + 4) = &unk_24D918C48;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)v1 + 5);
  std::runtime_error::~runtime_error((std::runtime_error *)v1);
}

{
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::regex_error>>::~clone_impl((uint64_t)a1 + *(_QWORD *)(*a1 - 40));
}

void boost::exception_detail::error_info_injector<boost::regex_error>::~error_info_injector(uint64_t a1)
{
  *(_QWORD *)(a1 + 32) = &unk_24D918C48;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 40));
  std::runtime_error::~runtime_error((std::runtime_error *)a1);
  JUMPOUT(0x219A19A08);
}

void `non-virtual thunk to'boost::exception_detail::error_info_injector<boost::regex_error>::~error_info_injector(uint64_t a1)
{
  boost::exception_detail::error_info_injector<boost::regex_error>::~error_info_injector(a1 - 32);
}

void sub_218312558(_Unwind_Exception *a1)
{
  std::runtime_error *v1;

  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

uint64_t _GLOBAL__sub_I_regex_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  return __cxa_atexit((void (*)(void *))boost::re_detail_106800::mem_block_cache::~mem_block_cache, &boost::re_detail_106800::block_cache, &dword_217E69000);
}

uint64_t _GLOBAL__sub_I_regex_debug_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void boost::re_detail_106800::raw_storage::resize(boost::re_detail_106800::raw_storage *this, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  size_t v6;
  size_t v7;
  char *v8;
  char *v9;
  void *v10;

  v3 = *((_QWORD *)this + 1);
  if (v3)
    v4 = *(_QWORD *)this - v3;
  else
    v4 = 1024;
  do
  {
    v5 = v4;
    v4 *= 2;
  }
  while (v5 < a2);
  v6 = *((_QWORD *)this + 2) - v3;
  v7 = (v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  v8 = (char *)operator new(v7);
  v9 = v8;
  v10 = (void *)*((_QWORD *)this + 1);
  if (v10)
    memcpy(v8, *((const void **)this + 1), v6);
  operator delete(v10);
  *((_QWORD *)this + 1) = v9;
  *((_QWORD *)this + 2) = &v9[v6];
  *(_QWORD *)this = &v9[v7];
}

char *boost::re_detail_106800::raw_storage::insert(boost::re_detail_106800::raw_storage *this, uint64_t a2, unint64_t a3)
{
  uint64_t v6;
  char *v7;

  v6 = *((_QWORD *)this + 2);
  if (*(_QWORD *)this - v6 < a3)
  {
    boost::re_detail_106800::raw_storage::resize(this, v6 + a3 - *((_QWORD *)this + 1));
    v6 = *((_QWORD *)this + 2);
  }
  v7 = (char *)(*((_QWORD *)this + 1) + a2);
  memmove(&v7[a3], v7, v6 - (_QWORD)v7);
  *((_QWORD *)this + 2) += a3;
  return v7;
}

uint64_t _GLOBAL__sub_I_regex_raw_buffer_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

uint64_t TCMLComputeWrapData(void *a1)
{
  void *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;

  v1 = (void *)MEMORY[0x24BDDAB68];
  v2 = objc_retainAutorelease(a1);
  v3 = objc_msgSend(v2, "bytes");
  v4 = objc_msgSend(v2, "length");

  return objc_msgSend(v1, "dataWithImmutableBytesNoCopy:length:", v3, v4);
}

uint64_t TCMLComputeWrapBuffer(void *a1)
{
  void *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;

  v1 = (void *)MEMORY[0x24BDDAB68];
  v2 = objc_retainAutorelease(a1);
  v3 = objc_msgSend(v2, "mutableBytes");
  v4 = objc_msgSend(v2, "length");

  return objc_msgSend(v1, "dataWithBytesNoCopy:length:", v3, v4);
}

const char *boost::re_detail_106800::get_default_syntax(boost::re_detail_106800 *this)
{
  if (this <= 0x3B)
    return (const char *)*((_QWORD *)&off_24D939730 + this);
  else
    return "";
}

const char *boost::re_detail_106800::get_default_error_string(int a1)
{
  if (a1 <= 21)
    return boost::re_detail_106800::get_default_error_string(boost::regex_constants::error_type)::s_default_error_messages[a1];
  else
    return "Unknown error.";
}

size_t boost::re_detail_106800::lookup_default_collate_name@<X0>(size_t result@<X0>, uint64_t a2@<X8>)
{
  size_t v2;
  const char *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  size_t v9;
  char *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  size_t v14;
  size_t v15;

  v2 = result;
  v4 = boost::re_detail_106800::def_coll_names[0];
  if (*boost::re_detail_106800::def_coll_names[0])
  {
    v5 = 0;
    v6 = *(unsigned __int8 *)(result + 23);
    v8 = *(_QWORD *)result;
    v7 = *(_QWORD *)(result + 8);
    do
    {
      result = strlen(v4);
      v9 = result;
      if ((v6 & 0x80) != 0)
      {
        if (result == v7)
        {
          result = v8;
          if (v7 == -1)
            std::string::__throw_out_of_range[abi:ne180100]();
LABEL_8:
          result = memcmp((const void *)result, v4, v9);
          if (!(_DWORD)result)
          {
            *(_BYTE *)(a2 + 23) = 1;
            *(_BYTE *)a2 = v5;
            *(_BYTE *)(a2 + 1) = 0;
            return result;
          }
        }
      }
      else
      {
        result = v2;
        if (v9 == v6)
          goto LABEL_8;
      }
      v4 = boost::re_detail_106800::def_coll_names[++v5];
    }
    while (*v4);
  }
  v10 = boost::re_detail_106800::def_multi_coll[0];
  if (!*boost::re_detail_106800::def_multi_coll[0])
  {
LABEL_19:
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    return result;
  }
  v11 = *(unsigned __int8 *)(v2 + 23);
  v12 = 1;
  v14 = *(_QWORD *)v2;
  v13 = *(_QWORD *)(v2 + 8);
  while (1)
  {
    result = strlen(v10);
    v15 = result;
    if ((v11 & 0x80) == 0)
      break;
    if (result == v13)
    {
      result = v14;
      if (v13 == -1)
        std::string::__throw_out_of_range[abi:ne180100]();
      goto LABEL_17;
    }
LABEL_18:
    v10 = boost::re_detail_106800::def_multi_coll[v12++];
    if (!*v10)
      goto LABEL_19;
  }
  result = v2;
  if (v15 != v11)
    goto LABEL_18;
LABEL_17:
  result = memcmp((const void *)result, v10, v15);
  if ((_DWORD)result)
    goto LABEL_18;
  return (size_t)std::string::basic_string[abi:ne180100]<0>((_QWORD *)a2, v10);
}

uint64_t _GLOBAL__sub_I_regex_traits_defaults_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void CoreML::validate<(MLModelType)2005>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v3;
  _DWORD *v5;
  _DWORD *v6;
  _BOOL8 v7;
  uint64_t *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  _DWORD *v13;
  void *v14;
  __int128 v15;
  uint64_t v16;
  void *v17;
  __int128 __p;
  uint64_t v19;

  if (*(_QWORD *)(a1 + 16))
    v3 = *(uint64_t **)(a1 + 16);
  else
    v3 = &CoreML::Specification::_ModelDescription_default_instance_;
  if (*(_DWORD *)(a1 + 44) != 2005)
  {
    std::string::basic_string[abi:ne180100]<0>(&v17, "Model not a word embedding.");
    CoreML::Result::Result((_DWORD *)a2, 13);
    if ((SHIBYTE(__p) & 0x80000000) == 0)
      return;
    v9 = v17;
    goto LABEL_27;
  }
  CoreML::Result::Result((CoreML::Result *)&v17);
  v5 = operator new(4uLL);
  v11 = v5;
  *v5 = 3;
  v12 = v5 + 1;
  v13 = v5 + 1;
  CoreML::validateDescriptionsContainFeatureWithTypes<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>>((uint64_t)(v3 + 2), 1, (int **)&v11, (uint64_t)&v14);
  v17 = v14;
  if (SHIBYTE(v19) < 0)
    operator delete((void *)__p);
  __p = v15;
  v19 = v16;
  HIBYTE(v16) = 0;
  LOBYTE(v15) = 0;
  if (v11)
  {
    v12 = v11;
    operator delete(v11);
  }
  if (!CoreML::Result::good((CoreML::Result *)&v17))
    goto LABEL_24;
  v6 = operator new(4uLL);
  v11 = v6;
  *v6 = 5;
  v12 = v6 + 1;
  v13 = v6 + 1;
  CoreML::validateDescriptionsContainFeatureWithTypes<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>>((uint64_t)(v3 + 5), 1, (int **)&v11, (uint64_t)&v14);
  v17 = v14;
  if (SHIBYTE(v19) < 0)
    operator delete((void *)__p);
  __p = v15;
  v19 = v16;
  HIBYTE(v16) = 0;
  LOBYTE(v15) = 0;
  if (v11)
  {
    v12 = v11;
    operator delete(v11);
  }
  v7 = CoreML::Result::good((CoreML::Result *)&v17);
  if (!v7)
    goto LABEL_24;
  if (*(_DWORD *)(a1 + 44) == 2005)
    v8 = *(uint64_t **)(a1 + 32);
  else
    v8 = CoreML::Specification::CoreMLModels::WordEmbedding::default_instance((CoreML::Specification::CoreMLModels::WordEmbedding *)v7);
  if (*((_DWORD *)v8 + 8) <= 1u)
  {
    std::string::basic_string[abi:ne180100]<0>(&v14, "Model revision number missing or invalid. Must be >= 2");
    CoreML::Result::Result((_DWORD *)a2, 13);
    goto LABEL_31;
  }
  v10 = v8[3];
  if (*(char *)(v10 + 23) < 0)
  {
    if (*(_QWORD *)(v10 + 8))
      goto LABEL_24;
LABEL_30:
    std::string::basic_string[abi:ne180100]<0>(&v14, "Model parameter data not set");
    CoreML::Result::Result((_DWORD *)a2, 13);
LABEL_31:
    if (SHIBYTE(v15) < 0)
      operator delete(v14);
    goto LABEL_25;
  }
  if (!*(_BYTE *)(v10 + 23))
    goto LABEL_30;
LABEL_24:
  *(_QWORD *)a2 = v17;
  *(_OWORD *)(a2 + 8) = __p;
  *(_QWORD *)(a2 + 24) = v19;
  __p = 0uLL;
  v19 = 0;
LABEL_25:
  if ((SHIBYTE(v19) & 0x80000000) == 0)
    return;
  v9 = (void *)__p;
LABEL_27:
  operator delete(v9);
}

void sub_218312C68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21,int a22,__int16 a23,char a24,char a25,int a26,__int16 a27,char a28,char a29)
{
  if (a18 < 0)
    operator delete(__p);
  if (a29 < 0)
    operator delete(a21);
  _Unwind_Resume(exception_object);
}

uint64_t _GLOBAL__sub_I_WordEmbeddingValidator_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

uint64_t boost::scoped_static_mutex_lock::scoped_static_mutex_lock(uint64_t a1, pthread_mutex_t *a2, int a3)
{
  *(_QWORD *)a1 = a2;
  *(_BYTE *)(a1 + 8) = 0;
  if (a3)
    *(_BYTE *)(a1 + 8) = pthread_mutex_lock(a2) == 0;
  return a1;
}

void boost::scoped_static_mutex_lock::~scoped_static_mutex_lock(pthread_mutex_t **this)
{
  if (*((_BYTE *)this + 8))
  {
    pthread_mutex_unlock(*this);
    *((_BYTE *)this + 8) = 0;
  }
}

uint64_t _GLOBAL__sub_I_static_mutex_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

uint64_t _GLOBAL__sub_I_usinstances_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

uint64_t _GLOBAL__sub_I_w32_regex_traits_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

uint64_t _GLOBAL__sub_I_wc_regex_traits_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

uint64_t _GLOBAL__sub_I_wide_posix_api_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

uint64_t _GLOBAL__sub_I_winstances_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void boost::system::detail::generic_error_category::message(int __errnum@<W1>, _QWORD *a2@<X8>)
{
  unsigned __int8 v5;
  char *p_strerrbuf;
  size_t v7;
  int v8;
  const char *v9;
  char __strerrbuf;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  if ((v5 & 1) == 0
  {
    std::string::basic_string[abi:ne180100]<0>(boost::system::detail::generic_error_category::message(int)const::unknown_err, "Unknown error");
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], boost::system::detail::generic_error_category::message(int)const::unknown_err, &dword_217E69000);
  }
  p_strerrbuf = &__strerrbuf;
  v7 = 64;
  while (1)
  {
    v8 = strerror_r(__errnum, p_strerrbuf, v7);
    if (v8 != 34)
      break;
    if (v7 >= 0x41)
      free(p_strerrbuf);
    v7 *= 2;
    p_strerrbuf = (char *)malloc_type_malloc(v7, 0x37110C92uLL);
    if (!p_strerrbuf)
    {
      std::string::basic_string[abi:ne180100]<0>(a2, "ENOMEM");
      return;
    }
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (v8 == 22)
    v9 = "Unknown error";
  else
    v9 = p_strerrbuf;
  MEMORY[0x219A19390](a2, v9);
  if (v7 >= 0x41)
    free(p_strerrbuf);
}

void sub_21831304C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t boost::system::detail::system_error_category::default_error_condition(boost::system::detail::system_error_category *this, unsigned int a2)
{
  uint64_t v2;

  v2 = a2;
  switch(a2)
  {
    case 0u:
    case 1u:
    case 2u:
    case 3u:
    case 4u:
    case 5u:
    case 6u:
    case 7u:
    case 8u:
    case 9u:
    case 0xAu:
    case 0xBu:
    case 0xCu:
    case 0xDu:
    case 0xEu:
    case 0x10u:
    case 0x11u:
    case 0x12u:
    case 0x13u:
    case 0x14u:
    case 0x15u:
    case 0x16u:
    case 0x17u:
    case 0x18u:
    case 0x19u:
    case 0x1Au:
    case 0x1Bu:
    case 0x1Cu:
    case 0x1Du:
    case 0x1Eu:
    case 0x1Fu:
    case 0x20u:
    case 0x21u:
    case 0x22u:
    case 0x23u:
    case 0x24u:
    case 0x25u:
    case 0x26u:
    case 0x27u:
    case 0x28u:
    case 0x29u:
    case 0x2Au:
    case 0x2Bu:
    case 0x2Du:
    case 0x2Fu:
    case 0x30u:
    case 0x31u:
    case 0x32u:
    case 0x33u:
    case 0x34u:
    case 0x35u:
    case 0x36u:
    case 0x37u:
    case 0x38u:
    case 0x39u:
    case 0x3Cu:
    case 0x3Du:
    case 0x3Eu:
    case 0x3Fu:
    case 0x41u:
    case 0x42u:
    case 0x4Du:
    case 0x4Eu:
    case 0x54u:
    case 0x59u:
    case 0x5Au:
    case 0x5Bu:
    case 0x5Cu:
    case 0x5Eu:
    case 0x60u:
    case 0x61u:
    case 0x62u:
    case 0x63u:
    case 0x64u:
    case 0x65u:
    case 0x66u:
    case 0x68u:
    case 0x69u:
      boost::system::detail::generic_category_ncx(this);
      break;
    default:
      boost::system::detail::system_category_ncx(this);
      break;
  }
  return v2;
}

uint64_t boost::system::detail::system_error_category::message(boost::system::detail::system_error_category *this)
{
  boost::system::detail::generic_category_ncx(this);
  return (*(uint64_t (**)(void))(boost::system::detail::generic_category_ncx(void)::generic_category_instance + 24))();
}

uint64_t *boost::system::detail::system_category_ncx(boost::system::detail *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0
  {
    qword_254FF32B8 = (uint64_t)&unk_24D938C40;
    unk_254FF32C0 = &boost::system::detail::system_category_ncx(void)::system_category_instance;
    boost::system::detail::system_category_ncx(void)::system_category_instance = (uint64_t)&off_24D939A30;
    __cxa_atexit((void (*)(void *))boost::system::detail::system_error_category::~system_error_category, &boost::system::detail::system_category_ncx(void)::system_category_instance, &dword_217E69000);
  }
  return &boost::system::detail::system_category_ncx(void)::system_category_instance;
}

void boost::system::detail::system_error_category::~system_error_category(std::error_category *this)
{
  this->__vftable = (std::error_category_vtbl *)&unk_24D938BF8;
  std::error_category::~error_category(this + 1);
}

uint64_t *boost::system::detail::generic_category_ncx(boost::system::detail *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0
  {
    qword_254FF32D8 = (uint64_t)&unk_24D938C40;
    unk_254FF32E0 = &boost::system::detail::generic_category_ncx(void)::generic_category_instance;
    boost::system::detail::generic_category_ncx(void)::generic_category_instance = (uint64_t)&off_24D9399D0;
    __cxa_atexit((void (*)(void *))boost::system::detail::system_error_category::~system_error_category, &boost::system::detail::generic_category_ncx(void)::generic_category_instance, &dword_217E69000);
  }
  return &boost::system::detail::generic_category_ncx(void)::generic_category_instance;
}

void boost::system::detail::generic_error_category::~generic_error_category(std::error_category *this)
{
  this->__vftable = (std::error_category_vtbl *)&unk_24D938BF8;
  std::error_category::~error_category(this + 1);
  JUMPOUT(0x219A19A08);
}

const char *boost::system::detail::generic_error_category::name(boost::system::detail::generic_error_category *this)
{
  return "generic";
}

const char *boost::system::detail::system_error_category::name(boost::system::detail::system_error_category *this)
{
  return "system";
}

uint64_t _GLOBAL__sub_I_error_code_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

_QWORD *boost::unit_test::output::compiler_log_formatter::log_start(boost::unit_test::runtime_config *a1, _QWORD *a2, uint64_t a3)
{
  unsigned __int8 *v6;
  uint64_t v7;
  unsigned __int8 *v8;
  uint64_t *v9;
  _QWORD *result;
  _QWORD *v11;
  _QWORD *v12;
  const char *v13;
  uint64_t v14;
  _QWORD *v15;
  unsigned __int8 *v16[2];

  if (byte_254FF9F4F >= 0)
    v6 = (unsigned __int8 *)&boost::unit_test::runtime_config::btrt_color_output;
  else
    v6 = (unsigned __int8 *)boost::unit_test::runtime_config::btrt_color_output;
  v7 = byte_254FF9F4F;
  if (byte_254FF9F4F < 0)
    v7 = unk_254FF9F40;
  v8 = &v6[v7];
  v9 = boost::unit_test::runtime_config::argument_store(a1);
  v16[0] = v6;
  v16[1] = v8;
  result = (_QWORD *)boost::runtime::arguments_store::get<BOOL>((uint64_t)v9, v16);
  *((_BYTE *)a1 + 12) = *(_BYTE *)result;
  if (a3)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Running ", 8);
    v11 = (_QWORD *)std::ostream::operator<<();
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" test ", 6);
    if (a3 == 1)
      v13 = "case";
    else
      v13 = "cases";
    if (a3 == 1)
      v14 = 4;
    else
      v14 = 5;
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v13, v14);
    return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"...\n", 4);
  }
  return result;
}

uint64_t boost::unit_test::output::compiler_log_formatter::log_finish()
{
  return std::ostream::flush();
}

uint64_t boost::unit_test::output::compiler_log_formatter::log_build_info(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  const std::locale::facet *v14;
  char v16;
  char v17;
  char v18;
  std::locale v19;

  v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Platform: ", 10);
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"Mac OS", 6);
  v16 = 10;
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)&v16, 1);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Compiler: ", 10);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Clang version 16.0.0 (clang-1600.0.25.3) [+internal-os]", 55);
  v17 = 10;
  v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)&v17, 1);
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"STL     : ", 10);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"libc++ version 180100", 21);
  v18 = 10;
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v18, 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Boost   : ", 10);
  v11 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)".", 1);
  v12 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)".", 1);
  v13 = (_QWORD *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v13 + *(_QWORD *)(*v13 - 24)));
  v14 = std::locale::use_facet(&v19, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v14->__vftable[2].~facet_0)(v14, 10);
  std::locale::~locale(&v19);
  std::ostream::put();
  return std::ostream::flush();
}

void sub_21831353C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

void boost::unit_test::output::compiler_log_formatter::test_unit_start(_BYTE *a1, _QWORD *a2, uint64_t a3)
{
  int v6;
  _QWORD *v7;
  void **v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  const std::locale::facet *v19;
  __int128 v20;
  uint64_t v21;
  void *__p[2];
  unsigned __int8 v23;

  if (a1[12])
    v6 = 4;
  else
    v6 = 9;
  boost::unit_test::utils::scope_setcolor::scope_setcolor(&v21, (uint64_t)a2, a1[12], v6, 9);
  v20 = *(_OWORD *)(a3 + 24);
  (*(void (**)(_BYTE *, _QWORD *, __int128 *, _QWORD))(*(_QWORD *)a1 + 176))(a1, a2, &v20, *(_QWORD *)(a3 + 40));
  v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Entering test ", 14);
  std::string::basic_string[abi:ne180100](__p, *(void **)(a3 + 8), *(_QWORD *)(a3 + 16) - *(_QWORD *)(a3 + 8));
  if ((v23 & 0x80u) == 0)
    v8 = __p;
  else
    v8 = (void **)__p[0];
  if ((v23 & 0x80u) == 0)
    v9 = v23;
  else
    v9 = (uint64_t)__p[1];
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v8, v9);
  if ((char)v23 < 0)
    operator delete(__p[0]);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" \"", 2);
  v13 = *(_QWORD *)(a3 + 136);
  v12 = a3 + 136;
  v11 = v13;
  v14 = *(char *)(v12 + 23);
  if (v14 >= 0)
    v15 = v12;
  else
    v15 = v11;
  if (v14 >= 0)
    v16 = *(unsigned __int8 *)(v12 + 23);
  else
    v16 = *(_QWORD *)(v12 + 8);
  v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, v15, v16);
  v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"\"", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v18 + *(_QWORD *)(*v18 - 24)));
  v19 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v19->__vftable[2].~facet_0)(v19, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  boost::unit_test::utils::scope_setcolor::~scope_setcolor((boost::unit_test::utils::scope_setcolor *)&v21);
}

void sub_2183136C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  boost::unit_test::utils::scope_setcolor::~scope_setcolor((boost::unit_test::utils::scope_setcolor *)&a11);
  _Unwind_Resume(a1);
}

void boost::unit_test::output::compiler_log_formatter::test_unit_finish(_BYTE *a1, _QWORD *a2, uint64_t a3, unint64_t a4)
{
  int v8;
  _QWORD *v9;
  void **v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  const char *v21;
  const std::locale::facet *v22;
  __int128 v23;
  uint64_t v24;
  void *__p[2];
  unsigned __int8 v26;

  if (a1[12])
    v8 = 4;
  else
    v8 = 9;
  boost::unit_test::utils::scope_setcolor::scope_setcolor(&v24, (uint64_t)a2, a1[12], v8, 9);
  v23 = *(_OWORD *)(a3 + 24);
  (*(void (**)(_BYTE *, _QWORD *, __int128 *, _QWORD))(*(_QWORD *)a1 + 176))(a1, a2, &v23, *(_QWORD *)(a3 + 40));
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Leaving test ", 13);
  std::string::basic_string[abi:ne180100](__p, *(void **)(a3 + 8), *(_QWORD *)(a3 + 16) - *(_QWORD *)(a3 + 8));
  if ((v26 & 0x80u) == 0)
    v10 = __p;
  else
    v10 = (void **)__p[0];
  if ((v26 & 0x80u) == 0)
    v11 = v26;
  else
    v11 = (uint64_t)__p[1];
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
  if ((char)v26 < 0)
    operator delete(__p[0]);
  v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" \"", 2);
  v15 = *(_QWORD *)(a3 + 136);
  v14 = a3 + 136;
  v13 = v15;
  v16 = *(char *)(v14 + 23);
  if (v16 >= 0)
    v17 = v14;
  else
    v17 = v13;
  if (v16 >= 0)
    v18 = *(unsigned __int8 *)(v14 + 23);
  else
    v18 = *(_QWORD *)(v14 + 8);
  v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, v17, v18);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"\"", 1);
  if (a4)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"; testing time: ", 16);
    v20 = (_QWORD *)std::ostream::operator<<();
    if (a4 % 0x3E8)
      v21 = "us";
    else
      v21 = "ms";
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)v21, 2);
  }
  std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)));
  v22 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v22->__vftable[2].~facet_0)(v22, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  boost::unit_test::utils::scope_setcolor::~scope_setcolor((boost::unit_test::utils::scope_setcolor *)&v24);
}

void sub_2183138F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  boost::unit_test::utils::scope_setcolor::~scope_setcolor((boost::unit_test::utils::scope_setcolor *)&a11);
  _Unwind_Resume(a1);
}

void boost::unit_test::output::compiler_log_formatter::test_unit_skipped(_BYTE *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  int v8;
  _QWORD *v9;
  void *p_p;
  uint64_t v11;
  _QWORD *v12;
  std::string *v13;
  std::string::size_type size;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  void *v18;
  uint64_t v19;
  const std::locale::facet *v20;
  std::string v21;
  __int128 v22;
  uint64_t v23;
  void *__p;
  uint64_t v25;
  unsigned __int8 v26;

  if (a1[12])
    v8 = 3;
  else
    v8 = 9;
  boost::unit_test::utils::scope_setcolor::scope_setcolor(&v23, (uint64_t)a2, a1[12], v8, 9);
  v22 = *(_OWORD *)(a3 + 24);
  (*(void (**)(_BYTE *, _QWORD *, __int128 *, _QWORD))(*(_QWORD *)a1 + 176))(a1, a2, &v22, *(_QWORD *)(a3 + 40));
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Test ", 5);
  std::string::basic_string[abi:ne180100](&__p, *(void **)(a3 + 8), *(_QWORD *)(a3 + 16) - *(_QWORD *)(a3 + 8));
  if ((v26 & 0x80u) == 0)
    p_p = &__p;
  else
    p_p = __p;
  if ((v26 & 0x80u) == 0)
    v11 = v26;
  else
    v11 = v25;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)p_p, v11);
  if ((char)v26 < 0)
    operator delete(__p);
  v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" \"", 2);
  boost::unit_test::test_unit::full_name((boost::unit_test::test_unit *)a3, &v21);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v13 = &v21;
  else
    v13 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v21.__r_.__value_.__r.__words[2]);
  else
    size = v21.__r_.__value_.__l.__size_;
  v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v13, size);
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"\"", 1);
  v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" is skipped because ", 20);
  std::string::basic_string[abi:ne180100](&__p, *(void **)a4, *(_QWORD *)(a4 + 8) - *(_QWORD *)a4);
  if ((v26 & 0x80u) == 0)
    v18 = &__p;
  else
    v18 = __p;
  if ((v26 & 0x80u) == 0)
    v19 = v26;
  else
    v19 = v25;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)v18, v19);
  if ((char)v26 < 0)
    operator delete(__p);
  std::ios_base::getloc((const std::ios_base *)((char *)v17 + *(_QWORD *)(*v17 - 24)));
  v20 = std::locale::use_facet((const std::locale *)&__p, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v20->__vftable[2].~facet_0)(v20, 10);
  std::locale::~locale((std::locale *)&__p);
  std::ostream::put();
  std::ostream::flush();
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
  boost::unit_test::utils::scope_setcolor::~scope_setcolor((boost::unit_test::utils::scope_setcolor *)&v23);
}

void sub_218313B24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  boost::unit_test::utils::scope_setcolor::~scope_setcolor((boost::unit_test::utils::scope_setcolor *)&a18);
  _Unwind_Resume(a1);
}

void boost::unit_test::output::compiler_log_formatter::log_exception_start(_BYTE *a1, _QWORD *a2, __int128 *a3, uint64_t a4)
{
  int v8;
  boost::unit_test::output::_anonymous_namespace_ *v9;
  boost::unit_test::output::_anonymous_namespace_ *v10;
  uint64_t v11;
  uint64_t v12;
  std::string *v13;
  char *v14;
  std::string::size_type size;
  void *p_p;
  uint64_t v17;
  _QWORD *v18;
  void *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  _QWORD *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  std::string v28;
  uint64_t v29;
  __int128 v30;
  void *__p;
  uint64_t v32;
  unsigned __int8 v33;

  v30 = *(_OWORD *)(a4 + 24);
  (*(void (**)(_BYTE *, _QWORD *, __int128 *, _QWORD))(*(_QWORD *)a1 + 176))(a1, a2, &v30, *(_QWORD *)(a4 + 40));
  if (a1[12])
    v8 = 1;
  else
    v8 = 9;
  boost::unit_test::utils::scope_setcolor::scope_setcolor(&v29, (uint64_t)a2, 4 * a1[12], v8, 9);
  v9 = (boost::unit_test::output::_anonymous_namespace_ *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"fatal error: in \"", 17);
  v10 = v9;
  v12 = *(_QWORD *)(a4 + 48);
  v11 = *(_QWORD *)(a4 + 56);
  if (v11 == v12)
  {
    if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v13 = &v28;
    else
      v13 = (std::string *)v28.__r_.__value_.__r.__words[0];
    size = HIBYTE(v28.__r_.__value_.__r.__words[2]);
    if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = v28.__r_.__value_.__l.__size_;
    v14 = (char *)v13 + size;
  }
  else
  {
    v13 = *(std::string **)(a4 + 48);
    v14 = *(char **)(a4 + 56);
  }
  std::string::basic_string[abi:ne180100](&__p, v13, v14 - (char *)v13);
  if ((v33 & 0x80u) == 0)
    p_p = &__p;
  else
    p_p = __p;
  if ((v33 & 0x80u) == 0)
    v17 = v33;
  else
    v17 = v32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)p_p, v17);
  if ((char)v33 < 0)
    operator delete(__p);
  v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"\": ", 3);
  std::string::basic_string[abi:ne180100](&__p, *(void **)(a4 + 8), *(_QWORD *)(a4 + 16) - *(_QWORD *)(a4 + 8));
  if ((v33 & 0x80u) == 0)
    v19 = &__p;
  else
    v19 = __p;
  if ((v33 & 0x80u) == 0)
    v20 = v33;
  else
    v20 = v32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)v19, v20);
  if ((char)v33 < 0)
    operator delete(__p);
  if (v11 == v12 && SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
  boost::unit_test::utils::scope_setcolor::~scope_setcolor((boost::unit_test::utils::scope_setcolor *)&v29);
  if (*((_QWORD *)a3 + 1) != *(_QWORD *)a3)
  {
    LOBYTE(__p) = 10;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)&__p, 1);
    v27 = *a3;
    (*(void (**)(_BYTE *, _QWORD *, __int128 *, _QWORD))(*(_QWORD *)a1 + 176))(a1, a2, &v27, *((_QWORD *)a3 + 2));
    if (a1[12])
      v21 = 6;
    else
      v21 = 9;
    boost::unit_test::utils::scope_setcolor::scope_setcolor(&__p, (uint64_t)a2, a1[12], v21, 9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"last checkpoint", 15);
    v22 = *((unsigned __int8 *)a3 + 47);
    if ((v22 & 0x80u) != 0)
      v22 = *((_QWORD *)a3 + 4);
    if (v22)
    {
      v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)": ", 2);
      v24 = *((char *)a3 + 47);
      if (v24 >= 0)
        v25 = (uint64_t)a3 + 24;
      else
        v25 = *((_QWORD *)a3 + 3);
      if (v24 >= 0)
        v26 = *((unsigned __int8 *)a3 + 47);
      else
        v26 = *((_QWORD *)a3 + 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, v25, v26);
    }
    boost::unit_test::utils::scope_setcolor::~scope_setcolor((boost::unit_test::utils::scope_setcolor *)&__p);
  }
}

void sub_218313E00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  boost::unit_test::utils::scope_setcolor::~scope_setcolor((boost::unit_test::utils::scope_setcolor *)&a17);
  _Unwind_Resume(a1);
}

void boost::unit_test::output::`anonymous namespace'::test_phase_identifier(boost::unit_test::output::_anonymous_namespace_ *this@<X0>, std::string *a2@<X8>)
{
  boost::unit_test::framework *v3;
  boost::unit_test::test_unit *v4;

  v3 = (boost::unit_test::framework *)boost::unit_test::framework::test_in_progress(this);
  if ((_DWORD)v3)
  {
    v4 = (boost::unit_test::test_unit *)boost::unit_test::framework::current_test_unit(v3);
    boost::unit_test::test_unit::full_name(v4, a2);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a2, "Test setup");
  }
}

uint64_t boost::unit_test::output::compiler_log_formatter::log_exception_finish(uint64_t a1, _QWORD *a2)
{
  const std::locale::facet *v2;
  std::locale v4;

  std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)));
  v2 = std::locale::use_facet(&v4, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v2->__vftable[2].~facet_0)(v2, 10);
  std::locale::~locale(&v4);
  std::ostream::put();
  return std::ostream::flush();
}

void sub_218313F20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

void boost::unit_test::output::compiler_log_formatter::log_entry_start(_BYTE *a1, _QWORD *a2, uint64_t *a3, int a4)
{
  int v6;
  BOOL v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  BOOL v11;
  uint64_t *v12;
  uint64_t v13;
  boost::unit_test::output::_anonymous_namespace_ *v14;
  std::string *v15;
  std::string::size_type size;
  _QWORD *v17;
  int v18;
  BOOL v19;
  uint64_t *v20;
  uint64_t v21;
  boost::unit_test::output::_anonymous_namespace_ *v22;
  std::string *v23;
  std::string::size_type v24;
  _QWORD *v25;
  int v26;
  BOOL v27;
  uint64_t *v28;
  uint64_t v29;
  boost::unit_test::output::_anonymous_namespace_ *v30;
  std::string *v31;
  std::string::size_type v32;
  _QWORD *v33;
  _QWORD v34[2];
  _QWORD v35[2];
  _QWORD v36[2];
  _QWORD v37[2];
  std::string v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  switch(a4)
  {
    case 0:
      v6 = *((char *)a3 + 23);
      v7 = v6 < 0;
      v8 = (uint64_t *)*a3;
      if (v6 >= 0)
        v8 = a3;
      v9 = *((unsigned __int8 *)a3 + 23);
      if (v7)
        v9 = a3[1];
      v37[0] = v8;
      v37[1] = (char *)v8 + v9;
      (*(void (**)(_BYTE *, _QWORD *, _QWORD *, uint64_t))(*(_QWORD *)a1 + 176))(a1, a2, v37, a3[3]);
      if (a1[12])
      {
        LODWORD(v38.__r_.__value_.__r.__words[2]) = sprintf((char *)&v38, "%c[%d;%d;%dm", 27, 1, 32, 49);
        if (a2 == (_QWORD *)MEMORY[0x24BEDB318] || a2 == (_QWORD *)MEMORY[0x24BEDB310])
          std::ostream::write();
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"info: ", 6);
      return;
    case 1:
      if (a1[12])
      {
        LODWORD(v38.__r_.__value_.__r.__words[2]) = sprintf((char *)&v38, "%c[%d;%d;%dm", 27, 1, 36, 49);
        if (a2 == (_QWORD *)MEMORY[0x24BEDB318] || a2 == (_QWORD *)MEMORY[0x24BEDB310])
          std::ostream::write();
      }
      return;
    case 2:
      v10 = *((char *)a3 + 23);
      v11 = v10 < 0;
      v12 = (uint64_t *)*a3;
      if (v10 >= 0)
        v12 = a3;
      v13 = *((unsigned __int8 *)a3 + 23);
      if (v11)
        v13 = a3[1];
      v36[0] = v12;
      v36[1] = (char *)v12 + v13;
      (*(void (**)(_BYTE *, _QWORD *, _QWORD *, uint64_t))(*(_QWORD *)a1 + 176))(a1, a2, v36, a3[3]);
      if (a1[12])
      {
        LODWORD(v38.__r_.__value_.__r.__words[2]) = sprintf((char *)&v38, "%c[%d;%d;%dm", 27, 1, 33, 49);
        if (a2 == (_QWORD *)MEMORY[0x24BEDB318] || a2 == (_QWORD *)MEMORY[0x24BEDB310])
          std::ostream::write();
      }
      v14 = (boost::unit_test::output::_anonymous_namespace_ *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"warning: in \"", 13);
      if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v15 = &v38;
      else
        v15 = (std::string *)v38.__r_.__value_.__r.__words[0];
      if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v38.__r_.__value_.__r.__words[2]);
      else
        size = v38.__r_.__value_.__l.__size_;
      v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, size);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"\": ", 3);
      goto LABEL_60;
    case 3:
      v18 = *((char *)a3 + 23);
      v19 = v18 < 0;
      v20 = (uint64_t *)*a3;
      if (v18 >= 0)
        v20 = a3;
      v21 = *((unsigned __int8 *)a3 + 23);
      if (v19)
        v21 = a3[1];
      v35[0] = v20;
      v35[1] = (char *)v20 + v21;
      (*(void (**)(_BYTE *, _QWORD *, _QWORD *, uint64_t))(*(_QWORD *)a1 + 176))(a1, a2, v35, a3[3]);
      if (a1[12])
      {
        LODWORD(v38.__r_.__value_.__r.__words[2]) = sprintf((char *)&v38, "%c[%d;%d;%dm", 27, 1, 31, 49);
        if (a2 == (_QWORD *)MEMORY[0x24BEDB318] || a2 == (_QWORD *)MEMORY[0x24BEDB310])
          std::ostream::write();
      }
      v22 = (boost::unit_test::output::_anonymous_namespace_ *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"error: in \"", 11);
      if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v23 = &v38;
      else
        v23 = (std::string *)v38.__r_.__value_.__r.__words[0];
      if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v24 = HIBYTE(v38.__r_.__value_.__r.__words[2]);
      else
        v24 = v38.__r_.__value_.__l.__size_;
      v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)v23, v24);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"\": ", 3);
      goto LABEL_60;
    case 4:
      v26 = *((char *)a3 + 23);
      v27 = v26 < 0;
      v28 = (uint64_t *)*a3;
      if (v26 >= 0)
        v28 = a3;
      v29 = *((unsigned __int8 *)a3 + 23);
      if (v27)
        v29 = a3[1];
      v34[0] = v28;
      v34[1] = (char *)v28 + v29;
      (*(void (**)(_BYTE *, _QWORD *, _QWORD *, uint64_t))(*(_QWORD *)a1 + 176))(a1, a2, v34, a3[3]);
      if (a1[12])
      {
        LODWORD(v38.__r_.__value_.__r.__words[2]) = sprintf((char *)&v38, "%c[%d;%d;%dm", 27, 4, 31, 49);
        if (a2 == (_QWORD *)MEMORY[0x24BEDB318] || a2 == (_QWORD *)MEMORY[0x24BEDB310])
          std::ostream::write();
      }
      v30 = (boost::unit_test::output::_anonymous_namespace_ *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"fatal error: in \"", 17);
      if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v31 = &v38;
      else
        v31 = (std::string *)v38.__r_.__value_.__r.__words[0];
      if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v32 = HIBYTE(v38.__r_.__value_.__r.__words[2]);
      else
        v32 = v38.__r_.__value_.__l.__size_;
      v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)v31, v32);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"\": ", 3);
LABEL_60:
      if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v38.__r_.__value_.__l.__data_);
      break;
    default:
      return;
  }
}

void sub_2183143C0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 25) < 0)
    operator delete(*(void **)(v1 - 48));
  _Unwind_Resume(exception_object);
}

void boost::unit_test::output::compiler_log_formatter::log_entry_value(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  void **v4;
  uint64_t v5;
  void *__p[2];
  unsigned __int8 v7;

  std::string::basic_string[abi:ne180100](__p, *(void **)a3, *(_QWORD *)(a3 + 8) - *(_QWORD *)a3);
  if ((v7 & 0x80u) == 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  if ((v7 & 0x80u) == 0)
    v5 = v7;
  else
    v5 = (uint64_t)__p[1];
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)v4, v5);
  if ((char)v7 < 0)
    operator delete(__p[0]);
}

void sub_218314454(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t boost::unit_test::output::compiler_log_formatter::log_entry_value(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 16))(a3);
}

uint64_t boost::unit_test::output::compiler_log_formatter::log_entry_finish(uint64_t a1, _QWORD *a2)
{
  const std::locale::facet *v4;
  std::locale v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 12))
  {
    v7 = sprintf((char *)&v6, "%c[%d;%d;%dm", 27, 0, 39, 49);
    if (a2 == (_QWORD *)MEMORY[0x24BEDB318] || a2 == (_QWORD *)MEMORY[0x24BEDB310])
      std::ostream::write();
  }
  std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)));
  v4 = std::locale::use_facet(&v6, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v4->__vftable[2].~facet_0)(v4, 10);
  std::locale::~locale(&v6);
  std::ostream::put();
  return std::ostream::flush();
}

void sub_218314580(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::locale a13)
{
  std::locale::~locale(&a13);
  _Unwind_Resume(a1);
}

void boost::unit_test::output::compiler_log_formatter::print_prefix(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  void *v4;
  size_t v5;
  void **v6;
  uint64_t v7;
  _QWORD *v8;
  void *__p[2];
  unsigned __int8 v10;

  v4 = *(void **)a3;
  v5 = *(_QWORD *)(a3 + 8) - *(_QWORD *)a3;
  if (v5)
  {
    std::string::basic_string[abi:ne180100](__p, v4, v5);
    if ((v10 & 0x80u) == 0)
      v6 = __p;
    else
      v6 = (void **)__p[0];
    if ((v10 & 0x80u) == 0)
      v7 = v10;
    else
      v7 = (uint64_t)__p[1];
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)v6, v7);
    if ((char)v10 < 0)
      operator delete(__p[0]);
    LOBYTE(__p[0]) = 58;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)__p, 1);
    v8 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)": ", 2);
  }
}

void sub_218314644(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *boost::unit_test::output::compiler_log_formatter::entry_context_start(uint64_t a1, _QWORD *a2, int a3)
{
  const char *v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;

  if (a3 == 2)
  {
    v4 = "\n[context:";
    v5 = 10;
  }
  else
  {
    if (a3)
      v6 = "\nFailure";
    else
      v6 = "\nAssertion";
    if (a3)
      v7 = 8;
    else
      v7 = 10;
    a2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)v6, v7);
    v4 = " occurred in a following context:";
    v5 = 33;
  }
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)v4, v5);
}

uint64_t boost::unit_test::output::compiler_log_formatter::entry_context_finish(uint64_t a1, _QWORD *a2, int a3)
{
  if (a3 == 2)
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"]", 1);
  return std::ostream::flush();
}

void boost::unit_test::output::compiler_log_formatter::log_entry_context(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  void **v6;
  uint64_t v7;
  void *__p[2];
  unsigned __int8 v9;

  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"\n    ", 5);
  std::string::basic_string[abi:ne180100](__p, *(void **)a4, *(_QWORD *)(a4 + 8) - *(_QWORD *)a4);
  if ((v9 & 0x80u) == 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if ((v9 & 0x80u) == 0)
    v7 = v9;
  else
    v7 = (uint64_t)__p[1];
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)v6, v7);
  if ((char)v9 < 0)
    operator delete(__p[0]);
}

void sub_21831477C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void boost::unit_test::output::compiler_log_formatter::~compiler_log_formatter(boost::unit_test::output::compiler_log_formatter *this)
{
  JUMPOUT(0x219A19A08);
}

_QWORD *boost::unit_test::unit_test_log_formatter::get_default_stream_description@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "stdout");
}

_QWORD *boost::unit_test::utils::scope_setcolor::scope_setcolor(_QWORD *a1, uint64_t a2, int a3, int a4, int a5)
{
  char v9[16];
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  *a1 = a2;
  v10 = sprintf(v9, "%c[%d;%d;%dm", 27, a3, a4 + 30, a5 + 40);
  if (a2 == MEMORY[0x24BEDB318] || a2 == MEMORY[0x24BEDB310])
    std::ostream::write();
  return a1;
}

void boost::unit_test::utils::scope_setcolor::~scope_setcolor(boost::unit_test::utils::scope_setcolor *this)
{
  uint64_t v1;
  char v3[16];
  int v4;
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  v1 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v4 = sprintf(v3, "%c[%d;%d;%dm", 27, 0, 39, 49);
    if (v1 == MEMORY[0x24BEDB318] || v1 == MEMORY[0x24BEDB310])
      std::ostream::write();
  }
}

void sub_21831491C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

uint64_t boost::runtime::arguments_store::get<BOOL>(uint64_t a1, unsigned __int8 **a2)
{
  uint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE v18[48];
  _BYTE v19[48];

  v4 = std::__tree<std::__value_type<boost::unit_test::basic_cstring<char const>,boost::shared_ptr<boost::runtime::argument>>,std::__map_value_compare<boost::unit_test::basic_cstring<char const>,std::__value_type<boost::unit_test::basic_cstring<char const>,boost::shared_ptr<boost::runtime::argument>>,std::less<boost::unit_test::basic_cstring<char const>>,true>,std::allocator<std::__value_type<boost::unit_test::basic_cstring<char const>,boost::shared_ptr<boost::runtime::argument>>>>::find<boost::unit_test::basic_cstring<char const>>(a1, a2);
  if (a1 + 8 == v4)
  {
    v14 = &boost::unit_test::basic_cstring<char const>::null_str(void)::null;
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v12 = &unk_24D939BD0;
    v13 = &boost::unit_test::basic_cstring<char const>::null_str(void)::null;
    boost::runtime::specific_param_error<boost::runtime::access_to_missing_argument,boost::runtime::init_error>::operator<<((uint64_t)&v12, "There is no argument provided for parameter ", (uint64_t)v18);
    boost::runtime::specific_param_error<boost::runtime::access_to_missing_argument,boost::runtime::init_error>::operator<<<boost::unit_test::basic_cstring<char const>>((uint64_t)v18, (uint64_t)a2, (uint64_t)v19);
    boost::unit_test::ut_detail::throw_exception<boost::runtime::access_to_missing_argument>((uint64_t)v19);
  }
  v6 = *(_QWORD *)(v4 + 48);
  v5 = *(unsigned int **)(v4 + 56);
  v11 = v5;
  if (v5)
  {
    v7 = v5 + 2;
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  if (*(_UNKNOWN **)(v6 + 8) != &boost::rtti::rtti_detail::rttid_holder<BOOL>::inst(void)::s_inst)
  {
    v14 = &boost::unit_test::basic_cstring<char const>::null_str(void)::null;
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v12 = &unk_24D939C50;
    v13 = &boost::unit_test::basic_cstring<char const>::null_str(void)::null;
    boost::runtime::specific_param_error<boost::runtime::arg_type_mismatch,boost::runtime::init_error>::operator<<((uint64_t)&v12, "Access with invalid type for argument corresponding to parameter ", (uint64_t)v18);
    boost::runtime::specific_param_error<boost::runtime::arg_type_mismatch,boost::runtime::init_error>::operator<<<boost::unit_test::basic_cstring<char const>>((uint64_t)v18, (uint64_t)a2, (uint64_t)v19);
    boost::unit_test::ut_detail::throw_exception<boost::runtime::arg_type_mismatch>((uint64_t)v19);
  }
  v9 = v6 + 16;
  boost::detail::shared_count::~shared_count(&v11);
  return v9;
}

void sub_218314A50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned int **a10, uint64_t a11, uint64_t a12, std::exception a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::exception a19)
{
  uint64_t v19;

  boost::runtime::param_error::~param_error((std::exception *)(v19 - 64));
  boost::runtime::param_error::~param_error(&a19);
  boost::runtime::param_error::~param_error(&a13);
  boost::detail::shared_count::~shared_count(a10);
  _Unwind_Resume(a1);
}

void boost::unit_test::ut_detail::throw_exception<boost::runtime::access_to_missing_argument>(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x30uLL);
  boost::runtime::access_to_missing_argument::access_to_missing_argument((uint64_t)exception, a1);
}

void sub_218314AF8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void boost::runtime::specific_param_error<boost::runtime::access_to_missing_argument,boost::runtime::init_error>::operator<<(uint64_t a1@<X0>, const std::string::value_type *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  std::string *v6;

  v5 = a1 + 24;
  std::string::append((std::string *)(a1 + 24), a2);
  *(_QWORD *)a3 = &unk_24D939BF8;
  *(_OWORD *)(a3 + 8) = *(_OWORD *)(a1 + 8);
  v6 = (std::string *)(a3 + 24);
  if (*(char *)(a1 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(a1 + 24), *(_QWORD *)(a1 + 32));
  }
  else
  {
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = *(_OWORD *)v5;
    *(_QWORD *)(a3 + 40) = *(_QWORD *)(v5 + 16);
  }
  *(_QWORD *)a3 = &unk_24D939BD0;
}

void sub_218314B90(_Unwind_Exception *a1)
{
  std::exception *v1;

  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

void boost::runtime::specific_param_error<boost::runtime::access_to_missing_argument,boost::runtime::init_error>::operator<<<boost::unit_test::basic_cstring<char const>>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  std::string *v5;
  void **v6;
  std::string::size_type v7;
  std::string *v8;
  void *__p[2];
  unsigned __int8 v10;

  v5 = (std::string *)(a1 + 24);
  boost::unit_test::utils::string_cast<boost::unit_test::basic_cstring<char const>>(a2);
  if ((v10 & 0x80u) == 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if ((v10 & 0x80u) == 0)
    v7 = v10;
  else
    v7 = (std::string::size_type)__p[1];
  std::string::append(v5, (const std::string::value_type *)v6, v7);
  if ((char)v10 < 0)
    operator delete(__p[0]);
  *(_QWORD *)a3 = &unk_24D939BF8;
  *(_OWORD *)(a3 + 8) = *(_OWORD *)(a1 + 8);
  v8 = (std::string *)(a3 + 24);
  if (*(char *)(a1 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)(a1 + 24), *(_QWORD *)(a1 + 32));
  }
  else
  {
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    *(_QWORD *)(a3 + 40) = *((_QWORD *)&v5->__r_.__value_.__l + 2);
  }
  *(_QWORD *)a3 = &unk_24D939BD0;
}

void sub_218314C68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::exception *v15;

  std::exception::~exception(v15);
  _Unwind_Resume(a1);
}

void boost::unit_test::ut_detail::throw_exception<boost::runtime::arg_type_mismatch>(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x30uLL);
  boost::runtime::arg_type_mismatch::arg_type_mismatch((uint64_t)exception, a1);
}

void sub_218314CD4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void boost::runtime::specific_param_error<boost::runtime::arg_type_mismatch,boost::runtime::init_error>::operator<<(uint64_t a1@<X0>, const std::string::value_type *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  std::string *v6;

  v5 = a1 + 24;
  std::string::append((std::string *)(a1 + 24), a2);
  *(_QWORD *)a3 = &unk_24D939BF8;
  *(_OWORD *)(a3 + 8) = *(_OWORD *)(a1 + 8);
  v6 = (std::string *)(a3 + 24);
  if (*(char *)(a1 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(a1 + 24), *(_QWORD *)(a1 + 32));
  }
  else
  {
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = *(_OWORD *)v5;
    *(_QWORD *)(a3 + 40) = *(_QWORD *)(v5 + 16);
  }
  *(_QWORD *)a3 = &unk_24D939C50;
}

void sub_218314D6C(_Unwind_Exception *a1)
{
  std::exception *v1;

  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

void boost::runtime::specific_param_error<boost::runtime::arg_type_mismatch,boost::runtime::init_error>::operator<<<boost::unit_test::basic_cstring<char const>>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  std::string *v5;
  void **v6;
  std::string::size_type v7;
  std::string *v8;
  void *__p[2];
  unsigned __int8 v10;

  v5 = (std::string *)(a1 + 24);
  boost::unit_test::utils::string_cast<boost::unit_test::basic_cstring<char const>>(a2);
  if ((v10 & 0x80u) == 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if ((v10 & 0x80u) == 0)
    v7 = v10;
  else
    v7 = (std::string::size_type)__p[1];
  std::string::append(v5, (const std::string::value_type *)v6, v7);
  if ((char)v10 < 0)
    operator delete(__p[0]);
  *(_QWORD *)a3 = &unk_24D939BF8;
  *(_OWORD *)(a3 + 8) = *(_OWORD *)(a1 + 8);
  v8 = (std::string *)(a3 + 24);
  if (*(char *)(a1 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)(a1 + 24), *(_QWORD *)(a1 + 32));
  }
  else
  {
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    *(_QWORD *)(a3 + 40) = *((_QWORD *)&v5->__r_.__value_.__l + 2);
  }
  *(_QWORD *)a3 = &unk_24D939C50;
}

void sub_218314E44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::exception *v15;

  std::exception::~exception(v15);
  _Unwind_Resume(a1);
}

uint64_t std::__tree<std::__value_type<boost::unit_test::basic_cstring<char const>,boost::shared_ptr<boost::runtime::argument>>,std::__map_value_compare<boost::unit_test::basic_cstring<char const>,std::__value_type<boost::unit_test::basic_cstring<char const>,boost::shared_ptr<boost::runtime::argument>>,std::less<boost::unit_test::basic_cstring<char const>>,true>,std::allocator<std::__value_type<boost::unit_test::basic_cstring<char const>,boost::shared_ptr<boost::runtime::argument>>>>::find<boost::unit_test::basic_cstring<char const>>(uint64_t a1, unsigned __int8 **a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _BOOL4 v7;
  uint64_t *v8;

  v2 = a1 + 8;
  v3 = *(_QWORD *)(a1 + 8);
  if (!v3)
    return v2;
  v5 = a1 + 16;
  v6 = a1 + 8;
  do
  {
    v7 = std::less<boost::unit_test::basic_cstring<char const>>::operator()[abi:ne180100](v5, (unsigned __int8 **)(v3 + 32), a2);
    v8 = (uint64_t *)(v3 + 8);
    if (!v7)
    {
      v8 = (uint64_t *)v3;
      v6 = v3;
    }
    v3 = *v8;
  }
  while (*v8);
  if (v6 == v2
    || std::less<boost::unit_test::basic_cstring<char const>>::operator()[abi:ne180100](v5, a2, (unsigned __int8 **)(v6 + 32)))
  {
    return v2;
  }
  return v6;
}

BOOL std::less<boost::unit_test::basic_cstring<char const>>::operator()[abi:ne180100](uint64_t a1, unsigned __int8 **a2, unsigned __int8 **a3)
{
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  unint64_t v5;
  unsigned __int8 *v6;
  unint64_t v7;
  unsigned __int8 *i;
  int v9;
  int v10;

  v3 = *a2;
  v4 = a2[1];
  v5 = v4 - *a2;
  v6 = *a3;
  v7 = a3[1] - *a3;
  if (v5 != v7)
    return v5 < v7;
  if (!v5)
    return 0;
  for (i = (unsigned __int8 *)(v3 - v4); ; ++i)
  {
    v9 = *v3;
    v10 = *v6;
    if (v9 != v10)
      break;
    ++v3;
    ++v6;
    if (__CFADD__(i, 1))
      return 0;
  }
  return (char)v9 < (char)v10;
}

uint64_t boost::runtime::access_to_missing_argument::access_to_missing_argument(uint64_t a1, uint64_t a2)
{
  std::string *v3;
  __int128 v4;

  *(_QWORD *)a1 = &unk_24D939BF8;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v3 = (std::string *)(a1 + 24);
  if (*(char *)(a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a2 + 24), *(_QWORD *)(a2 + 32));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 24);
    v3->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 40);
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = v4;
  }
  *(_QWORD *)a1 = &unk_24D939BD0;
  return a1;
}

void sub_218314FD8(_Unwind_Exception *a1)
{
  std::exception *v1;

  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

void boost::runtime::access_to_missing_argument::~access_to_missing_argument(std::exception *this)
{
  boost::runtime::param_error::~param_error(this);
  JUMPOUT(0x219A19A08);
}

uint64_t boost::runtime::param_error::what(boost::runtime::param_error *this)
{
  uint64_t result;

  result = (uint64_t)this + 24;
  if (*((char *)this + 47) < 0)
    return *(_QWORD *)result;
  return result;
}

void boost::runtime::param_error::~param_error(std::exception *this)
{
  this->__vftable = (std::exception_vtbl *)&unk_24D939BF8;
  if (SHIBYTE(this[5].__vftable) < 0)
    operator delete(this[3].__vftable);
  std::exception::~exception(this);
}

uint64_t boost::unit_test::utils::string_cast<boost::unit_test::basic_cstring<char const>>(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  _QWORD v5[11];
  char v6;
  uint64_t v7;
  void *__dst[2];
  unsigned __int8 v9;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v5);
  std::string::basic_string[abi:ne180100](__dst, *(void **)a1, *(_QWORD *)(a1 + 8) - *(_QWORD *)a1);
  if ((v9 & 0x80u) == 0)
    v2 = __dst;
  else
    v2 = (void **)__dst[0];
  if ((v9 & 0x80u) == 0)
    v3 = v9;
  else
    v3 = (uint64_t)__dst[1];
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)v2, v3);
  if ((char)v9 < 0)
    operator delete(__dst[0]);
  std::stringbuf::str();
  v5[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v5 + *(_QWORD *)(v5[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v5[1] = MEMORY[0x24BEDB848] + 16;
  if (v6 < 0)
    operator delete((void *)v5[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x219A198F4](&v7);
}

void sub_218315158(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  if (*(char *)(v9 - 33) < 0)
    operator delete(*(void **)(v9 - 56));
  std::ostringstream::~ostringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t boost::runtime::arg_type_mismatch::arg_type_mismatch(uint64_t a1, uint64_t a2)
{
  std::string *v3;
  __int128 v4;

  *(_QWORD *)a1 = &unk_24D939BF8;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v3 = (std::string *)(a1 + 24);
  if (*(char *)(a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a2 + 24), *(_QWORD *)(a2 + 32));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 24);
    v3->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 40);
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = v4;
  }
  *(_QWORD *)a1 = &unk_24D939C50;
  return a1;
}

void sub_2183151FC(_Unwind_Exception *a1)
{
  std::exception *v1;

  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

uint64_t _GLOBAL__sub_I_compiler_log_formatter_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

uint64_t _GLOBAL__sub_I_debug_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void boost::unit_test::ut_detail::throw_exception<boost::unit_test::framework::setup_error>(const std::runtime_error *a1)
{
  std::runtime_error *exception;
  std::runtime_error *v3;

  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  v3 = boost::unit_test::framework::setup_error::setup_error(exception, a1);
}

std::runtime_error *boost::unit_test::framework::setup_error::setup_error(std::runtime_error *a1, uint64_t a2)
{
  std::string __dst;

  std::string::basic_string[abi:ne180100](&__dst, *(void **)a2, *(_QWORD *)(a2 + 8) - *(_QWORD *)a2);
  std::runtime_error::runtime_error(a1, &__dst);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  a1->__vftable = (std::runtime_error_vtbl *)&unk_24D939C78;
  return a1;
}

void sub_218315324(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::runtime_error *boost::unit_test::framework::setup_error::setup_error(std::runtime_error *a1, const std::runtime_error *a2)
{
  std::runtime_error *result;

  result = std::runtime_error::runtime_error(a1, a2);
  result->__vftable = (std::runtime_error_vtbl *)&unk_24D939C78;
  return result;
}

uint64_t _GLOBAL__sub_I_decorator_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

uint64_t boost::execution_monitor::execution_monitor(uint64_t this)
{
  *(_WORD *)this = 1;
  *(_DWORD *)(this + 4) = 0;
  *(_BYTE *)(this + 8) = 1;
  *(_QWORD *)(this + 12) = 0;
  *(_QWORD *)(this + 28) = 0;
  *(_QWORD *)(this + 20) = 0;
  *(_DWORD *)(this + 36) = 0;
  return this;
}

uint64_t _GLOBAL__sub_I_execution_monitor_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

uint64_t *CoreML::FeatureType::FeatureType(uint64_t *a1, int a2)
{
  uint64_t v4;
  CoreML::Specification::Int64FeatureType *v5;

  _ZNSt3__115allocate_sharedB8ne180100IN6CoreML13Specification11FeatureTypeENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(a1);
  switch(a2)
  {
    case 1:
      v4 = *a1;
      if (*(_DWORD *)(*a1 + 36) != 1)
      {
        CoreML::Specification::FeatureType::clear_Type(*a1);
        *(_DWORD *)(v4 + 36) = 1;
        v5 = (CoreML::Specification::Int64FeatureType *)operator new();
        CoreML::Specification::Int64FeatureType::Int64FeatureType(v5);
        goto LABEL_16;
      }
      break;
    case 2:
      v4 = *a1;
      if (*(_DWORD *)(*a1 + 36) != 2)
      {
        CoreML::Specification::FeatureType::clear_Type(*a1);
        *(_DWORD *)(v4 + 36) = 2;
        v5 = (CoreML::Specification::Int64FeatureType *)operator new();
        CoreML::Specification::DoubleFeatureType::DoubleFeatureType(v5);
        goto LABEL_16;
      }
      break;
    case 3:
      v4 = *a1;
      if (*(_DWORD *)(*a1 + 36) != 3)
      {
        CoreML::Specification::FeatureType::clear_Type(*a1);
        *(_DWORD *)(v4 + 36) = 3;
        v5 = (CoreML::Specification::Int64FeatureType *)operator new();
        CoreML::Specification::StringFeatureType::StringFeatureType(v5);
        goto LABEL_16;
      }
      break;
    case 4:
      v4 = *a1;
      if (*(_DWORD *)(*a1 + 36) != 4)
      {
        CoreML::Specification::FeatureType::clear_Type(*a1);
        *(_DWORD *)(v4 + 36) = 4;
        v5 = (CoreML::Specification::Int64FeatureType *)operator new();
        CoreML::Specification::ImageFeatureType::ImageFeatureType(v5);
        goto LABEL_16;
      }
      break;
    case 5:
      v4 = *a1;
      if (*(_DWORD *)(*a1 + 36) != 5)
      {
        CoreML::Specification::FeatureType::clear_Type(*a1);
        *(_DWORD *)(v4 + 36) = 5;
        v5 = (CoreML::Specification::Int64FeatureType *)operator new();
        CoreML::Specification::ArrayFeatureType::ArrayFeatureType(v5);
        goto LABEL_16;
      }
      break;
    case 6:
      v4 = *a1;
      if (*(_DWORD *)(*a1 + 36) != 6)
      {
        CoreML::Specification::FeatureType::clear_Type(*a1);
        *(_DWORD *)(v4 + 36) = 6;
        v5 = (CoreML::Specification::Int64FeatureType *)operator new();
        CoreML::Specification::DictionaryFeatureType::DictionaryFeatureType(v5);
        goto LABEL_16;
      }
      break;
    case 7:
      v4 = *a1;
      if (*(_DWORD *)(*a1 + 36) != 7)
      {
        CoreML::Specification::FeatureType::clear_Type(*a1);
        *(_DWORD *)(v4 + 36) = 7;
        v5 = (CoreML::Specification::Int64FeatureType *)operator new();
        CoreML::Specification::SequenceFeatureType::SequenceFeatureType(v5);
LABEL_16:
        *(_QWORD *)(v4 + 24) = v5;
      }
      break;
    default:
      return a1;
  }
  return a1;
}

void sub_218315640(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  MEMORY[0x219A19A08](v2, 0x10A1C40EE95837BLL);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

CoreML::FeatureType *CoreML::FeatureType::FeatureType(CoreML::FeatureType *this, const CoreML::Specification::FeatureType *a2)
{
  std::allocate_shared[abi:ne180100]<CoreML::Specification::FeatureType,std::allocator<CoreML::Specification::FeatureType>,CoreML::Specification::FeatureType const&,void>(a2, this);
  return this;
}

uint64_t *CoreML::FeatureType::Int64@<X0>(uint64_t *a1@<X8>)
{
  return CoreML::FeatureType::FeatureType(a1, 1);
}

uint64_t *CoreML::FeatureType::String@<X0>(uint64_t *a1@<X8>)
{
  return CoreML::FeatureType::FeatureType(a1, 3);
}

uint64_t *CoreML::FeatureType::Double@<X0>(uint64_t *a1@<X8>)
{
  return CoreML::FeatureType::FeatureType(a1, 2);
}

void CoreML::FeatureType::Array(uint64_t **a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;

  CoreML::FeatureType::FeatureType(a3, 5);
  v6 = *a3;
  if (*(_DWORD *)(*a3 + 36) == 5)
  {
    v7 = *(_QWORD *)(v6 + 24);
  }
  else
  {
    CoreML::Specification::FeatureType::clear_Type(*a3);
    *(_DWORD *)(v6 + 36) = 5;
    v7 = operator new();
    CoreML::Specification::ArrayFeatureType::ArrayFeatureType((CoreML::Specification::ArrayFeatureType *)v7);
    *(_QWORD *)(v6 + 24) = v7;
  }
  v8 = *a1;
  v9 = a1[1];
  if (*a1 != v9)
  {
    v10 = *(_DWORD *)(v7 + 16);
    do
    {
      v11 = *v8;
      if (v10 == *(_DWORD *)(v7 + 20))
      {
        _tc_google::protobuf::RepeatedField<double>::Reserve((unsigned int *)(v7 + 16), v10 + 1);
        v10 = *(_DWORD *)(v7 + 16);
      }
      v12 = *(_QWORD *)(v7 + 24) + 8 * v10++;
      *(_DWORD *)(v7 + 16) = v10;
      *(_QWORD *)(v12 + 8) = v11;
      ++v8;
    }
    while (v8 != v9);
  }
  *(_DWORD *)(v7 + 36) = a2;
}

void sub_218315818(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  MEMORY[0x219A19A08](v2, 0x10A1C4053416F99);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void CoreML::FeatureType::Array(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  void *__p;
  void *v4;
  uint64_t v5;

  __p = 0;
  v4 = 0;
  v5 = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, *(const void **)a1, *(_QWORD *)(a1 + 8), (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3);
  CoreML::FeatureType::Array((uint64_t **)&__p, 65600, a2);
  if (__p)
  {
    v4 = __p;
    operator delete(__p);
  }
}

void sub_2183158B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *CoreML::FeatureType::Dictionary@<X0>(int a1@<W0>, uint64_t *a2@<X8>)
{
  uint64_t *result;
  uint64_t v5;
  uint64_t v6;
  std::runtime_error *exception;
  CoreML::Specification::Int64FeatureType *v8;

  result = CoreML::FeatureType::FeatureType(a2, 6);
  v5 = *a2;
  if (*(_DWORD *)(*a2 + 36) == 6)
  {
    v6 = *(_QWORD *)(v5 + 24);
  }
  else
  {
    CoreML::Specification::FeatureType::clear_Type(*a2);
    *(_DWORD *)(v5 + 36) = 6;
    v6 = operator new();
    result = (uint64_t *)CoreML::Specification::DictionaryFeatureType::DictionaryFeatureType((CoreML::Specification::DictionaryFeatureType *)v6);
    *(_QWORD *)(v5 + 24) = v6;
  }
  switch(a1)
  {
    case 1:
      if (*(_DWORD *)(v6 + 28) == 1)
        return result;
      CoreML::Specification::V5::Dimension::clear_dimension(v6);
      *(_DWORD *)(v6 + 28) = 1;
      v8 = (CoreML::Specification::Int64FeatureType *)operator new();
      result = (uint64_t *)CoreML::Specification::Int64FeatureType::Int64FeatureType(v8);
      goto LABEL_12;
    case 2:
      if (*(_DWORD *)(v6 + 28) == 2)
        return result;
      CoreML::Specification::V5::Dimension::clear_dimension(v6);
      *(_DWORD *)(v6 + 28) = 2;
      v8 = (CoreML::Specification::Int64FeatureType *)operator new();
      result = (uint64_t *)CoreML::Specification::StringFeatureType::StringFeatureType(v8);
LABEL_12:
      *(_QWORD *)(v6 + 16) = v8;
      return result;
    case 0:
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Invalid dictionary key type. Expected one of: {int64, string}.");
      __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  return result;
}

void sub_218315A18(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v3 = v2;
  MEMORY[0x219A19A08](v3, 0x1081C40622C3295);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

BOOL CoreML::FeatureType::operator==(uint64_t *a1, uint64_t *a2)
{
  return CoreML::Specification::operator==(*a1, *a2);
}

uint64_t CoreML::FeatureType::toString@<X0>(CoreML::FeatureType *this@<X0>, std::string *a2@<X8>)
{
  int v4;
  std::string *p_p;
  std::string::size_type size;
  CoreML::Specification::ImageFeatureType *v7;
  int *v8;
  int *v9;
  uint64_t *v10;
  uint64_t *v11;
  std::string *v12;
  std::string::size_type v13;
  void **v14;
  uint64_t v15;
  _QWORD *v16;
  std::string *v17;
  std::string::size_type v18;
  void **v19;
  uint64_t v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  std::string::size_type v24;
  int v25;
  char *v26;
  std::string *v27;
  std::string::size_type v28;
  _QWORD *v29;
  uint64_t *v30;
  std::string *v31;
  std::string::size_type v32;
  const std::string::value_type *v33;
  std::string *v34;
  uint64_t v35;
  void *v37;
  uint64_t v38;
  unsigned __int8 v39;
  std::string __p;
  _QWORD v41[2];
  _QWORD v42[11];
  char v43;
  uint64_t v44;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v41);
  v4 = *(_DWORD *)(*(_QWORD *)this + 36);
  CoreML::featureTypeToString(v4, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v7 = (CoreML::Specification::ImageFeatureType *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  switch(v4)
  {
    case 4:
      if (*(_DWORD *)(*(_QWORD *)this + 36) == 4)
        v8 = *(int **)(*(_QWORD *)this + 24);
      else
        v8 = (int *)CoreML::Specification::ImageFeatureType::default_instance(v7);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)" (", 2);
      CoreML::colorSpaceToString(v8[8], &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v12 = &__p;
      else
        v12 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v13 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v13 = __p.__r_.__value_.__l.__size_;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)v12, v13);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      CoreML::defaultSizeOf((CoreML *)v8, &__p);
      if (__p.__r_.__value_.__l.__size_ != __p.__r_.__value_.__r.__words[0])
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)" ", 1);
        CoreML::dimensionsToString(&__p, 0);
        v14 = (v39 & 0x80u) == 0 ? &v37 : (void **)v37;
        v15 = (v39 & 0x80u) == 0 ? v39 : v38;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)v14, v15);
        if ((char)v39 < 0)
          operator delete(v37);
      }
      goto LABEL_55;
    case 5:
      if (*(_DWORD *)(*(_QWORD *)this + 36) == 5)
        v9 = *(int **)(*(_QWORD *)this + 24);
      else
        v9 = (int *)CoreML::Specification::ArrayFeatureType::default_instance(v7);
      v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)" (", 2);
      CoreML::dataTypeToString(v9[9], &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v17 = &__p;
      else
        v17 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v18 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v18 = __p.__r_.__value_.__l.__size_;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v17, v18);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      CoreML::defaultShapeOf((CoreML *)v9, &__p.__r_.__value_.__l.__data_);
      if (__p.__r_.__value_.__l.__size_ != __p.__r_.__value_.__r.__words[0])
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)" ", 1);
        CoreML::dimensionsToString(&__p, 0);
        v19 = (v39 & 0x80u) == 0 ? &v37 : (void **)v37;
        v20 = (v39 & 0x80u) == 0 ? v39 : v38;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)v19, v20);
        if ((char)v39 < 0)
          operator delete(v37);
      }
LABEL_55:
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)")", 1);
      if (__p.__r_.__value_.__r.__words[0])
      {
        __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      break;
    case 6:
      if (*(_DWORD *)(*(_QWORD *)this + 36) == 6)
        v10 = *(uint64_t **)(*(_QWORD *)this + 24);
      else
        v10 = CoreML::Specification::DictionaryFeatureType::default_instance(v7);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)" (", 2);
      std::string::basic_string[abi:ne180100]<0>(&__p, off_24D939D38[*((int *)v10 + 7)]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v21 = &__p;
      else
        v21 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v22 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v22 = __p.__r_.__value_.__l.__size_;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)v21, v22);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)" → ", 5);
      std::string::basic_string[abi:ne180100]<0>(&__p, "Double");
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v23 = &__p;
      else
        v23 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v24 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v24 = __p.__r_.__value_.__l.__size_;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)v23, v24);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      goto LABEL_99;
    case 7:
      if (*(_DWORD *)(*(_QWORD *)this + 36) == 7)
        v11 = *(uint64_t **)(*(_QWORD *)this + 24);
      else
        v11 = CoreML::Specification::SequenceFeatureType::default_instance(v7);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)" (", 2);
      v25 = *((_DWORD *)v11 + 9);
      if (v25)
      {
        if (v25 == 1)
          v26 = "Int64";
        else
          v26 = "String";
      }
      else
      {
        v26 = "Invalid";
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, v26);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v27 = &__p;
      else
        v27 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v28 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v28 = __p.__r_.__value_.__l.__size_;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)v27, v28);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)" ", 1);
      v30 = (uint64_t *)v11[2];
      if (!v30)
        v30 = &CoreML::Specification::_SizeRange_default_instance_;
      CoreML::rangeToString((CoreML *)v30[2], v30[3], 0);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v31 = &__p;
      else
        v31 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v32 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v32 = __p.__r_.__value_.__l.__size_;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)v31, v32);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
LABEL_99:
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)")", 1);
      break;
    default:
      break;
  }
  std::stringbuf::str();
  if (*(_BYTE *)(*(_QWORD *)this + 16))
    v33 = "?";
  else
    v33 = "";
  v34 = std::string::append(&__p, v33);
  *a2 = *v34;
  v34->__r_.__value_.__l.__size_ = 0;
  v34->__r_.__value_.__r.__words[2] = 0;
  v34->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v41[0] = *MEMORY[0x24BEDB7F0];
  v35 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v41 + *(_QWORD *)(v41[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v42[0] = v35;
  v42[1] = MEMORY[0x24BEDB848] + 16;
  if (v43 < 0)
    operator delete((void *)v42[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x219A198F4](&v44);
}

void sub_218316028(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a15 < 0)
    operator delete(__p);
  if (a16)
    operator delete(a16);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a22);
  _Unwind_Resume(a1);
}

_QWORD *CoreML::featureTypeToString@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a2, off_24D939CF8[a1]);
}

_QWORD *CoreML::dataTypeToString@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  char *v2;

  if (a1 <= 65599)
  {
    if (a1 != 0x80000000 && a1)
    {
      v2 = "Float32";
      return std::string::basic_string[abi:ne180100]<0>(a2, v2);
    }
LABEL_9:
    v2 = "Invalid";
    return std::string::basic_string[abi:ne180100]<0>(a2, v2);
  }
  if (a1 == 0x7FFFFFFF)
    goto LABEL_9;
  if (a1 == 131104)
    v2 = "Int32";
  else
    v2 = "Double";
  return std::string::basic_string[abi:ne180100]<0>(a2, v2);
}

void CoreML::defaultShapeOf(CoreML *this@<X0>, char **a2@<X8>)
{
  CoreML *v3;
  CoreML *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  CoreML *v9;
  CoreML *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  int v18;
  uint64_t j;
  int *v20;
  uint64_t v21;
  unint64_t v22;
  CoreML *v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t i;
  uint64_t *v33;
  uint64_t v34;
  unint64_t v35;
  CoreML *v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;

  v3 = this;
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (*((int *)this + 4) < 1)
  {
    v18 = *((_DWORD *)this + 15);
    if (v18 == 21)
    {
      for (i = 0; ; ++i)
      {
        v33 = v18 == 21
            ? (uint64_t *)*((_QWORD *)v3 + 5)
            : CoreML::Specification::ArrayFeatureType_EnumeratedShapes::default_instance(this);
        if (i >= *(int *)(*(_QWORD *)(v33[4] + 8) + 16))
          break;
        if (*((_DWORD *)v3 + 15) == 21)
          this = (CoreML *)*((_QWORD *)v3 + 5);
        else
          this = (CoreML *)CoreML::Specification::ArrayFeatureType_EnumeratedShapes::default_instance((CoreML::Specification::ArrayFeatureType_EnumeratedShapes *)v33);
        v34 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 4) + 8) + 24) + 8 * i + 8);
        v36 = (CoreML *)a2[1];
        v35 = (unint64_t)a2[2];
        if ((unint64_t)v36 >= v35)
        {
          this = (CoreML *)*a2;
          v38 = (v36 - (CoreML *)*a2) >> 3;
          v39 = v38 + 1;
          if ((unint64_t)(v38 + 1) >> 61)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          v40 = v35 - (_QWORD)this;
          if (v40 >> 2 > v39)
            v39 = v40 >> 2;
          if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8)
            v41 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v41 = v39;
          if (v41)
          {
            v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a2 + 2), v41);
            this = (CoreML *)*a2;
            v36 = (CoreML *)a2[1];
          }
          else
          {
            v42 = 0;
          }
          v43 = &v42[8 * v38];
          *(_QWORD *)v43 = v34;
          v37 = v43 + 8;
          while (v36 != this)
          {
            v44 = *((_QWORD *)v36 - 1);
            v36 = (CoreML *)((char *)v36 - 8);
            *((_QWORD *)v43 - 1) = v44;
            v43 -= 8;
          }
          *a2 = v43;
          a2[1] = v37;
          a2[2] = &v42[8 * v41];
          if (this)
            operator delete(this);
        }
        else
        {
          *(_QWORD *)v36 = v34;
          v37 = (char *)v36 + 8;
        }
        a2[1] = v37;
        v18 = *((_DWORD *)v3 + 15);
      }
    }
    else if (v18 == 31)
    {
      for (j = 0; ; ++j)
      {
        v20 = v18 == 31
            ? (int *)*((_QWORD *)v3 + 5)
            : (int *)CoreML::Specification::ArrayFeatureType_ShapeRange::default_instance(this);
        if (j >= v20[6])
          break;
        if (*((_DWORD *)v3 + 15) == 31)
          this = (CoreML *)*((_QWORD *)v3 + 5);
        else
          this = (CoreML *)CoreML::Specification::ArrayFeatureType_ShapeRange::default_instance((CoreML::Specification::ArrayFeatureType_ShapeRange *)v20);
        v21 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 4) + 8 * j + 8) + 16);
        v23 = (CoreML *)a2[1];
        v22 = (unint64_t)a2[2];
        if ((unint64_t)v23 >= v22)
        {
          this = (CoreML *)*a2;
          v25 = (v23 - (CoreML *)*a2) >> 3;
          v26 = v25 + 1;
          if ((unint64_t)(v25 + 1) >> 61)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          v27 = v22 - (_QWORD)this;
          if (v27 >> 2 > v26)
            v26 = v27 >> 2;
          if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8)
            v28 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v28 = v26;
          if (v28)
          {
            v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a2 + 2), v28);
            this = (CoreML *)*a2;
            v23 = (CoreML *)a2[1];
          }
          else
          {
            v29 = 0;
          }
          v30 = &v29[8 * v25];
          *(_QWORD *)v30 = v21;
          v24 = v30 + 8;
          while (v23 != this)
          {
            v31 = *((_QWORD *)v23 - 1);
            v23 = (CoreML *)((char *)v23 - 8);
            *((_QWORD *)v30 - 1) = v31;
            v30 -= 8;
          }
          *a2 = v30;
          a2[1] = v24;
          a2[2] = &v29[8 * v28];
          if (this)
            operator delete(this);
        }
        else
        {
          *(_QWORD *)v23 = v21;
          v24 = (char *)v23 + 8;
        }
        a2[1] = v24;
        v18 = *((_DWORD *)v3 + 15);
      }
    }
  }
  else
  {
    v5 = 0;
    v6 = 0;
    v7 = a2 + 2;
    do
    {
      v8 = *(_QWORD *)(*((_QWORD *)v3 + 3) + 8 * v6 + 8);
      if ((unint64_t)v5 >= *v7)
      {
        v10 = (CoreML *)*a2;
        v11 = (v5 - (CoreML *)*a2) >> 3;
        v12 = v11 + 1;
        if ((unint64_t)(v11 + 1) >> 61)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v13 = *v7 - (_QWORD)v10;
        if (v13 >> 2 > v12)
          v12 = v13 >> 2;
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
          v14 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v14 = v12;
        if (v14)
        {
          v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a2 + 2), v14);
          v10 = (CoreML *)*a2;
          v5 = (CoreML *)a2[1];
        }
        else
        {
          v15 = 0;
        }
        v16 = &v15[8 * v11];
        *(_QWORD *)v16 = v8;
        v9 = (CoreML *)(v16 + 8);
        while (v5 != v10)
        {
          v17 = *((_QWORD *)v5 - 1);
          v5 = (CoreML *)((char *)v5 - 8);
          *((_QWORD *)v16 - 1) = v17;
          v16 -= 8;
        }
        *a2 = v16;
        a2[1] = (char *)v9;
        a2[2] = &v15[8 * v14];
        if (v10)
          operator delete(v10);
      }
      else
      {
        *(_QWORD *)v5 = v8;
        v9 = (CoreML *)((char *)v5 + 8);
      }
      a2[1] = (char *)v9;
      ++v6;
      v5 = v9;
    }
    while (v6 < *((int *)v3 + 4));
  }
}

void sub_2183164C8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t CoreML::dimensionsToString(_QWORD *a1, int a2)
{
  char *v4;
  unint64_t v5;
  unint64_t v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  void *__p[2];
  unsigned __int8 v12;
  _QWORD v13[2];
  _QWORD v14[11];
  char v15;
  uint64_t v16;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v13);
  if (a2)
    v4 = ", ";
  else
    v4 = " × ";
  std::string::basic_string[abi:ne180100]<0>(__p, v4);
  if (a2)
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"[", 1);
  if (a1[1] != *a1)
  {
    v5 = 0;
    do
    {
      std::ostream::operator<<();
      v6 = (uint64_t)(a1[1] - *a1) >> 3;
      if (v5 < v6 - 1)
      {
        if ((v12 & 0x80u) == 0)
          v7 = __p;
        else
          v7 = (void **)__p[0];
        if ((v12 & 0x80u) == 0)
          v8 = v12;
        else
          v8 = (uint64_t)__p[1];
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v7, v8);
        v6 = (uint64_t)(a1[1] - *a1) >> 3;
      }
      ++v5;
    }
    while (v5 < v6);
  }
  if ((a2 & 1) != 0)
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"]", 1);
  std::stringbuf::str();
  if ((char)v12 < 0)
    operator delete(__p[0]);
  v13[0] = *MEMORY[0x24BEDB7F0];
  v9 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v13 + *(_QWORD *)(v13[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v14[0] = v9;
  v14[1] = MEMORY[0x24BEDB848] + 16;
  if (v15 < 0)
    operator delete((void *)v14[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x219A198F4](&v16);
}

void sub_21831669C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

_QWORD *CoreML::colorSpaceToString@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  char *v2;

  if (a1 <= 19)
  {
    if (a1 != 0x80000000 && a1)
    {
      v2 = "Grayscale";
      return std::string::basic_string[abi:ne180100]<0>(a2, v2);
    }
LABEL_9:
    v2 = "Invalid";
    return std::string::basic_string[abi:ne180100]<0>(a2, v2);
  }
  if (a1 == 0x7FFFFFFF)
    goto LABEL_9;
  if (a1 == 30)
    v2 = "BGR";
  else
    v2 = "RGB";
  return std::string::basic_string[abi:ne180100]<0>(a2, v2);
}

void CoreML::defaultSizeOf(CoreML *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  _QWORD *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t *v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t *v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  uint64_t *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v5 = *((_QWORD *)this + 2);
  if (v5 < 1 || *((uint64_t *)this + 3) < 1)
  {
    v14 = *((_DWORD *)this + 13);
    if (v14 == 31)
    {
      v26 = *(uint64_t **)(*((_QWORD *)this + 5) + 16);
      if (!v26)
        v26 = &CoreML::Specification::_SizeRange_default_instance_;
      v27 = v26[2];
      v28 = a2 + 2;
      v29 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a2 + 2), 1uLL);
      v30 = (char *)*a2;
      v31 = (char *)a2[1];
      v33 = &v29[v32];
      *v29 = v27;
      v22 = v29 + 1;
      while (v31 != v30)
      {
        v34 = *((_QWORD *)v31 - 1);
        v31 -= 8;
        *--v29 = v34;
      }
      *a2 = v29;
      a2[1] = v22;
      a2[2] = v33;
      if (v30)
        operator delete(v30);
      a2[1] = v22;
      if (*((_DWORD *)this + 13) == 31)
      {
        v36 = (uint64_t *)*((_QWORD *)this + 5);
      }
      else
      {
        v36 = CoreML::Specification::ImageFeatureType_ImageSizeRange::default_instance((CoreML::Specification::ImageFeatureType_ImageSizeRange *)v30);
        v22 = (uint64_t *)a2[1];
      }
      v49 = (uint64_t *)v36[3];
      if (!v49)
        v49 = &CoreML::Specification::_SizeRange_default_instance_;
      v43 = v49[2];
      if ((unint64_t)v22 >= *v28)
      {
        v37 = (char *)*a2;
        v50 = ((uint64_t)v22 - *a2) >> 3;
        v51 = v50 + 1;
        if ((unint64_t)(v50 + 1) >> 61)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v52 = *v28 - (_QWORD)v37;
        if (v52 >> 2 > v51)
          v51 = v52 >> 2;
        if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFF8)
          v53 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v53 = v51;
        if (v53)
        {
          v54 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a2 + 2), v53);
          v37 = (char *)*a2;
          v22 = (uint64_t *)a2[1];
        }
        else
        {
          v54 = 0;
        }
        v55 = &v54[8 * v50];
        v56 = &v54[8 * v53];
        *(_QWORD *)v55 = v43;
        v25 = v55 + 8;
        while (v22 != (uint64_t *)v37)
        {
          v59 = *--v22;
          *((_QWORD *)v55 - 1) = v59;
          v55 -= 8;
        }
        goto LABEL_71;
      }
    }
    else
    {
      if (v14 != 21)
        return;
      v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 32) + 8) + 16);
      v16 = a2 + 2;
      v17 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a2 + 2), 1uLL);
      v18 = (char *)*a2;
      v19 = (char *)a2[1];
      v21 = &v17[v20];
      *v17 = v15;
      v22 = v17 + 1;
      while (v19 != v18)
      {
        v23 = *((_QWORD *)v19 - 1);
        v19 -= 8;
        *--v17 = v23;
      }
      *a2 = v17;
      a2[1] = v22;
      a2[2] = v21;
      if (v18)
        operator delete(v18);
      a2[1] = v22;
      if (*((_DWORD *)this + 13) == 21)
      {
        v35 = (uint64_t *)*((_QWORD *)this + 5);
      }
      else
      {
        v35 = CoreML::Specification::ImageFeatureType_EnumeratedImageSizes::default_instance((CoreML::Specification::ImageFeatureType_EnumeratedImageSizes *)v18);
        v22 = (uint64_t *)a2[1];
      }
      v43 = *(_QWORD *)(*(_QWORD *)(v35[4] + 8) + 24);
      if ((unint64_t)v22 >= *v16)
      {
        v37 = (char *)*a2;
        v44 = ((uint64_t)v22 - *a2) >> 3;
        v45 = v44 + 1;
        if ((unint64_t)(v44 + 1) >> 61)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v46 = *v16 - (_QWORD)v37;
        if (v46 >> 2 > v45)
          v45 = v46 >> 2;
        if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFF8)
          v47 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v47 = v45;
        if (v47)
        {
          v48 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a2 + 2), v47);
          v37 = (char *)*a2;
          v22 = (uint64_t *)a2[1];
        }
        else
        {
          v48 = 0;
        }
        v55 = &v48[8 * v44];
        v56 = &v48[8 * v47];
        *(_QWORD *)v55 = v43;
        v25 = v55 + 8;
        while (v22 != (uint64_t *)v37)
        {
          v58 = *--v22;
          *((_QWORD *)v55 - 1) = v58;
          v55 -= 8;
        }
        goto LABEL_71;
      }
    }
    *v22 = v43;
    v25 = v22 + 1;
    goto LABEL_73;
  }
  v6 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a2 + 2), 1uLL);
  v7 = (char *)*a2;
  v8 = (char *)a2[1];
  v10 = (char *)&v6[v9];
  *v6 = v5;
  v11 = (char *)(v6 + 1);
  v12 = v6;
  while (v8 != v7)
  {
    v13 = *((_QWORD *)v8 - 1);
    v8 -= 8;
    *--v12 = v13;
  }
  *a2 = v12;
  a2[1] = v11;
  a2[2] = v10;
  if (v7)
  {
    operator delete(v7);
    v10 = (char *)a2[2];
  }
  a2[1] = v11;
  v24 = *((_QWORD *)this + 3);
  if (v11 >= v10)
  {
    v37 = (char *)*a2;
    v38 = (uint64_t)&v11[-*a2] >> 3;
    v39 = v38 + 1;
    if ((unint64_t)(v38 + 1) >> 61)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v40 = v10 - v37;
    if (v40 >> 2 > v39)
      v39 = v40 >> 2;
    if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8)
      v41 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v41 = v39;
    if (v41)
    {
      v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a2 + 2), v41);
      v37 = (char *)*a2;
      v11 = (char *)a2[1];
    }
    else
    {
      v42 = 0;
    }
    v55 = &v42[8 * v38];
    v56 = &v42[8 * v41];
    *(_QWORD *)v55 = v24;
    v25 = v55 + 8;
    while (v11 != v37)
    {
      v57 = *((_QWORD *)v11 - 1);
      v11 -= 8;
      *((_QWORD *)v55 - 1) = v57;
      v55 -= 8;
    }
LABEL_71:
    *a2 = v55;
    a2[1] = v25;
    a2[2] = v56;
    if (v37)
      operator delete(v37);
    goto LABEL_73;
  }
  v6[1] = v24;
  v25 = v6 + 2;
LABEL_73:
  a2[1] = v25;
}

void sub_218316ADC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t CoreML::rangeToString(CoreML *this, unint64_t a2, int a3)
{
  _QWORD *v6;
  _QWORD *v7;
  const char *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD v13[2];
  _QWORD v14[11];
  char v15;
  uint64_t v16;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v13);
  if (a3)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"[", 1);
    v6 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)", ", 2);
    v7 = (_QWORD *)std::ostream::operator<<();
    v8 = "]";
    v9 = 1;
LABEL_3:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v8, v9);
    goto LABEL_8;
  }
  if (this != (CoreML *)a2)
  {
    if ((a2 & 0x8000000000000000) != 0)
    {
      v7 = (_QWORD *)std::ostream::operator<<();
      v8 = "...";
      v9 = 3;
      goto LABEL_3;
    }
    v10 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"...", 3);
  }
  std::ostream::operator<<();
LABEL_8:
  std::stringbuf::str();
  v13[0] = *MEMORY[0x24BEDB7F0];
  v11 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v13 + *(_QWORD *)(v13[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v14[0] = v11;
  v14[1] = MEMORY[0x24BEDB848] + 16;
  if (v15 < 0)
    operator delete((void *)v14[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x219A198F4](&v16);
}

void sub_218316C64(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

CoreML::Specification::FeatureType *CoreML::FeatureType::allocateCopy(const CoreML::Specification::FeatureType **this)
{
  CoreML::Specification::FeatureType *v2;

  v2 = (CoreML::Specification::FeatureType *)operator new();
  CoreML::Specification::FeatureType::FeatureType(v2, *this);
  return v2;
}

void sub_218316CBC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C40B6FDD44FLL);
  _Unwind_Resume(a1);
}

_QWORD *_ZNSt3__115allocate_sharedB8ne180100IN6CoreML13Specification11FeatureTypeENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x40uLL);
  result = _ZNSt3__120__shared_ptr_emplaceIN6CoreML13Specification11FeatureTypeENS_9allocatorIS3_EEEC2B8ne180100IJES5_Li0EEES5_DpOT_(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_218316D14(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *_ZNSt3__120__shared_ptr_emplaceIN6CoreML13Specification11FeatureTypeENS_9allocatorIS3_EEEC2B8ne180100IJES5_Li0EEES5_DpOT_(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = &unk_24D939CB8;
  a1[1] = 0;
  CoreML::Specification::FeatureType::FeatureType((CoreML::Specification::FeatureType *)(a1 + 3));
  return a1;
}

void sub_218316D60(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<CoreML::Specification::FeatureType>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D939CB8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<CoreML::Specification::FeatureType>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D939CB8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__shared_ptr_emplace<CoreML::Specification::FeatureType>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *std::allocate_shared[abi:ne180100]<CoreML::Specification::FeatureType,std::allocator<CoreML::Specification::FeatureType>,CoreML::Specification::FeatureType const&,void>@<X0>(const CoreML::Specification::FeatureType *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x40uLL);
  result = std::__shared_ptr_emplace<CoreML::Specification::FeatureType>::__shared_ptr_emplace[abi:ne180100]<CoreML::Specification::FeatureType const&,std::allocator<CoreML::Specification::FeatureType>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_218316E10(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<CoreML::Specification::FeatureType>::__shared_ptr_emplace[abi:ne180100]<CoreML::Specification::FeatureType const&,std::allocator<CoreML::Specification::FeatureType>,0>(_QWORD *a1, const CoreML::Specification::FeatureType *a2)
{
  a1[2] = 0;
  *a1 = &unk_24D939CB8;
  a1[1] = 0;
  CoreML::Specification::FeatureType::FeatureType((CoreML::Specification::FeatureType *)(a1 + 3), a2);
  return a1;
}

void sub_218316E5C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t _GLOBAL__sub_I_DataType_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

uint64_t *boost::unit_test::singleton<boost::unit_test::unit_test_log_t>::instance()
{
  unsigned __int8 v0;

  if ((v0 & 1) == 0
  {
    boost::unit_test::singleton<boost::unit_test::unit_test_log_t>::instance(void)::the_inst = (uint64_t)&unk_24D93A558;
  }
  return &boost::unit_test::singleton<boost::unit_test::unit_test_log_t>::instance(void)::the_inst;
}

void *boost::unit_test::singleton<boost::unit_test::unit_test_monitor_t>::instance()
{
  unsigned __int8 v0;

  if ((v0 & 1) == 0
  {
    boost::execution_monitor::execution_monitor((uint64_t)&boost::unit_test::singleton<boost::unit_test::unit_test_monitor_t>::instance(void)::the_inst);
    __cxa_atexit((void (*)(void *))boost::unit_test::unit_test_monitor_t::~unit_test_monitor_t, &boost::unit_test::singleton<boost::unit_test::unit_test_monitor_t>::instance(void)::the_inst, &dword_217E69000);
  }
  return &boost::unit_test::singleton<boost::unit_test::unit_test_monitor_t>::instance(void)::the_inst;
}

void sub_218316F84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t *boost::unit_test::singleton<boost::unit_test::results_collector_t>::instance()
{
  unsigned __int8 v0;

  if ((v0 & 1) == 0
  {
    boost::unit_test::singleton<boost::unit_test::results_collector_t>::instance(void)::the_inst = (uint64_t)&unk_24D93A048;
  }
  return &boost::unit_test::singleton<boost::unit_test::results_collector_t>::instance(void)::the_inst;
}

uint64_t *boost::unit_test::singleton<boost::unit_test::progress_monitor_t>::instance()
{
  unsigned __int8 v0;

  if ((v0 & 1) == 0
  {
    boost::unit_test::singleton<boost::unit_test::progress_monitor_t>::instance(void)::the_inst = (uint64_t)&unk_24D939F70;
  }
  return &boost::unit_test::singleton<boost::unit_test::progress_monitor_t>::instance(void)::the_inst;
}

uint64_t *boost::unit_test::singleton<boost::unit_test::framework_init_observer_t>::instance()
{
  unsigned __int8 v0;

  if ((v0 & 1) == 0
  {
    boost::unit_test::singleton<boost::unit_test::framework_init_observer_t>::instance(void)::the_inst = (uint64_t)&unk_24D93A268;
  }
  return &boost::unit_test::singleton<boost::unit_test::framework_init_observer_t>::instance(void)::the_inst;
}

void boost::unit_test::framework::impl::`anonymous namespace'::s_frk_state(boost::unit_test::framework::impl::_anonymous_namespace_ *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
    }
  }
}

void sub_218317130(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t boost::unit_test::framework::master_test_suite(boost::unit_test::framework *this)
{
  boost::unit_test::framework::impl::_anonymous_namespace_ *v1;
  boost::unit_test::master_test_suite_t *v2;
  boost::unit_test::framework::impl::_anonymous_namespace_ *v3;

  {
    v2 = (boost::unit_test::master_test_suite_t *)operator new();
    v3 = boost::unit_test::master_test_suite_t::master_test_suite_t(v2);
  }
}

void sub_2183171A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10F3C40041A8715);
  _Unwind_Resume(a1);
}

uint64_t boost::unit_test::framework::test_in_progress(boost::unit_test::framework *this)
{
  return byte_254FF33C8;
}

void boost::unit_test::framework::register_test_unit(boost::unit_test::framework *this, boost::unit_test::test_suite *a2)
{
  boost::unit_test::framework::impl::_anonymous_namespace_ *v3;
  std::runtime_error_vtbl *v4;
  uint64_t **v5;
  boost::unit_test::framework::impl::_anonymous_namespace_ *v6;
  _QWORD v7[2];
  _QWORD v8[2];
  std::runtime_error v9;

  if (*((_QWORD *)this + 7) != 0xFFFFFFFFLL)
  {
    v8[0] = "test suite already registered";
    v8[1] = "";
    boost::unit_test::framework::setup_error::setup_error(&v9, (uint64_t)v8);
    boost::unit_test::ut_detail::throw_exception<boost::unit_test::framework::setup_error>(&v9);
  }
  v4 = (std::runtime_error_vtbl *)qword_254FF33C0;
  if (qword_254FF33C0 == 65280)
  {
    v7[0] = "too many test suites";
    v7[1] = "";
    boost::unit_test::framework::setup_error::setup_error(&v9, (uint64_t)v7);
    boost::unit_test::ut_detail::throw_exception<boost::unit_test::framework::setup_error>(&v9);
  }
  v9.__vftable = v4;
  v9.__imp_.__imp_ = (char *)this + 8;
  v5 = std::__tree<std::__value_type<unsigned long,boost::unit_test::test_unit *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,boost::unit_test::test_unit *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,boost::unit_test::test_unit *>>>::__emplace_unique_key_args<unsigned long,std::pair<unsigned long const,boost::unit_test::test_unit *>>((uint64_t **)&unk_254FF33A0, (unint64_t *)&v9, &v9);
  ++qword_254FF33C0;
  *((_QWORD *)this + 7) = v4;
}

void sub_2183172C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::runtime_error a13)
{
  std::runtime_error::~runtime_error(&a13);
  _Unwind_Resume(a1);
}

uint64_t boost::unit_test::framework::deregister_test_unit(unint64_t *a1)
{
  return std::__tree<std::__value_type<unsigned long,turi::conditional *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,turi::conditional *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,turi::conditional *>>>::__erase_unique<unsigned long>((uint64_t)&unk_254FF33A0, a1 + 6);
}

uint64_t boost::unit_test::framework::state::clear(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;

  if (*(_QWORD *)(this + 56))
  {
    v1 = this;
    do
    {
      v2 = *(_QWORD *)(*(_QWORD *)(v1 + 40) + 40);
      if (*(_WORD *)(v2 + 50))
      {
        boost::function0<void>::~function0((uint64_t *)(v2 + 264));
        boost::unit_test::test_unit::~test_unit((boost::unit_test::test_unit *)v2);
        this = MEMORY[0x219A19A08]();
      }
      else
      {
        this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v2 - 8);
      }
    }
    while (*(_QWORD *)(v1 + 56));
  }
  return this;
}

void boost::unit_test::framework::clear_context(boost::unit_test::framework *this)
{
  int v1;
  __int128 *v2;
  uint64_t v3;
  boost::unit_test::framework::impl::_anonymous_namespace_ *v4;
  boost::unit_test::framework::impl::_anonymous_namespace_ *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t j;
  uint64_t v9;
  boost::unit_test::framework::impl::_anonymous_namespace_ *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  char v15;
  char v16;

  v1 = (int)this;
  if (v1 == -1)
  {
    if ((int)((unint64_t)(qword_254FF33F0 - qword_254FF33E8) >> 5) >= 1)
    {
      v9 = ((unint64_t)(qword_254FF33F0 - qword_254FF33E8) >> 5);
      do
      {
        if (!*(_BYTE *)(qword_254FF33E8 + 32 * (v9 - 1) + 28))
        {
          v2 = std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<boost::unit_test::framework::state::context_frame *,boost::unit_test::framework::state::context_frame *,boost::unit_test::framework::state::context_frame *>((uint64_t)&v15, (__int128 *)(qword_254FF33E8 + 32 * (v9 - 1) + 32), (__int128 *)qword_254FF33F0, qword_254FF33E8 + 32 * (v9 - 1));
          v12 = v11;
          for (i = qword_254FF33F0; i != v12; i -= 32)
          {
            if (*(char *)(i - 9) < 0)
              operator delete(*(void **)(i - 32));
          }
          qword_254FF33F0 = v12;
        }
      }
      while (v9-- > 1);
    }
  }
  else
  {
    v3 = qword_254FF33E8;
    if (v3 != qword_254FF33F0)
    {
      while (*(_DWORD *)(v3 + 24) != v1)
      {
        v3 += 32;
        if (v3 == qword_254FF33F0)
        {
          v3 = qword_254FF33F0;
          break;
        }
      }
    }
    if (v3 != qword_254FF33F0)
    {
      std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<boost::unit_test::framework::state::context_frame *,boost::unit_test::framework::state::context_frame *,boost::unit_test::framework::state::context_frame *>((uint64_t)&v16, (__int128 *)(v3 + 32), (__int128 *)qword_254FF33F0, v3);
      v7 = v6;
      for (j = qword_254FF33F0; j != v7; j -= 32)
      {
        if (*(char *)(j - 9) < 0)
          operator delete(*(void **)(j - 32));
      }
      qword_254FF33F0 = v7;
    }
  }
}

BOOL boost::unit_test::framework::context_generator::is_empty(boost::unit_test::framework::context_generator *this)
{
  return qword_254FF33E8 == qword_254FF33F0;
}

void boost::unit_test::framework::context_generator::next(boost::unit_test::framework::context_generator *this@<X0>, _QWORD *a2@<X8>)
{
  unint64_t v4;
  boost::unit_test::framework::impl::_anonymous_namespace_ *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  char *v11;

  v4 = *(unsigned int *)this;
  if (v4 >= (qword_254FF33F0 - qword_254FF33E8) >> 5)
  {
    v7 = &boost::unit_test::basic_cstring<char const>::null_str(void)::null;
    v11 = (char *)&boost::unit_test::basic_cstring<char const>::null_str(void)::null;
  }
  else
  {
    v6 = *(unsigned int *)this;
    *(_DWORD *)this = v6 + 1;
    v7 = (_QWORD *)(qword_254FF33E8 + 32 * v6);
    LODWORD(v8) = *((char *)v7 + 23);
    v9 = (int)v8 < 0;
    v10 = v7[1];
    if ((int)v8 < 0)
      v7 = (_QWORD *)*v7;
    v8 = v8;
    if (v9)
      v8 = v10;
    v11 = (char *)v7 + v8;
  }
  *a2 = v7;
  a2[1] = v11;
}

uint64_t boost::unit_test::framework::current_test_unit(boost::unit_test::framework *this)
{
  boost::unit_test::framework::impl::_anonymous_namespace_ *v1;
  uint64_t *v3;

  v3 = &qword_254FF3398;
  return std::__tree<std::__value_type<unsigned long long,turi::any::iholder * (*)(turi::iarchive_soft_fail &)>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,turi::any::iholder * (*)(turi::iarchive_soft_fail &)>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,turi::any::iholder * (*)(turi::iarchive_soft_fail &)>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t **)&unk_254FF33A0, (unint64_t *)&qword_254FF3398, (uint64_t)&std::piecewise_construct, &v3)[5];
}

uint64_t boost::unit_test::framework::current_test_case_id(boost::unit_test::framework *this)
{
  return qword_254FF3398;
}

_DWORD *boost::unit_test::framework::get(boost::unit_test::framework::impl::_anonymous_namespace_ *a1, int a2)
{
  _DWORD *result;
  _QWORD v4[2];
  std::runtime_error v5;
  boost::unit_test::framework::impl::_anonymous_namespace_ *v6;

  v6 = a1;
  v5.__vftable = (std::runtime_error_vtbl *)&v6;
  result = (_DWORD *)std::__tree<std::__value_type<unsigned long long,turi::any::iholder * (*)(turi::iarchive_soft_fail &)>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,turi::any::iholder * (*)(turi::iarchive_soft_fail &)>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,turi::any::iholder * (*)(turi::iarchive_soft_fail &)>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t **)&unk_254FF33A0, (unint64_t *)&v6, (uint64_t)&std::piecewise_construct, (uint64_t **)&v5)[5];
  if ((*result & a2) == 0)
  {
    v4[0] = "Invalid test unit type";
    v4[1] = "";
    boost::unit_test::framework::internal_error::internal_error(&v5, (uint64_t)v4);
    boost::unit_test::ut_detail::throw_exception<boost::unit_test::framework::internal_error>(&v5);
  }
  return result;
}

void sub_2183176A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::runtime_error a11)
{
  std::runtime_error::~runtime_error(&a11);
  _Unwind_Resume(a1);
}

void boost::unit_test::ut_detail::throw_exception<boost::unit_test::framework::internal_error>(const std::runtime_error *a1)
{
  std::runtime_error *exception;
  std::runtime_error *v3;

  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  v3 = boost::unit_test::framework::internal_error::internal_error(exception, a1);
}

uint64_t *boost::unit_test::lazy_ostream::instance(boost::unit_test::lazy_ostream *this)
{
  unsigned __int8 v1;

  {
    boost::unit_test::lazy_ostream::instance(void)::inst = (uint64_t)&unk_24D939D80;
    byte_254FD4688 = 1;
  }
  return &boost::unit_test::lazy_ostream::instance(void)::inst;
}

boost::unit_test::framework::state *boost::unit_test::framework::state::state(boost::unit_test::framework::state *this)
{
  uint64_t v2;

  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 4) = 0xFFFFFFFFLL;
  *((_QWORD *)this + 5) = (char *)this + 48;
  *((_QWORD *)this + 7) = 0;
  *((_OWORD *)this + 4) = xmmword_2186F2C30;
  *((_BYTE *)this + 80) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 11) = (char *)this + 96;
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 20) = 0;
  *((_QWORD *)this + 19) = 0;
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 18) = (char *)this + 152;
  *((_DWORD *)this + 34) = 0;
  boost::execution_monitor::execution_monitor((uint64_t)this + 168);
  *((_QWORD *)this + 27) = 0;
  *((_QWORD *)this + 26) = (char *)this + 216;
  *((_QWORD *)this + 28) = 0;
  *((_QWORD *)this + 29) = 0;
  v2 = MEMORY[0x24BEDB310];
  *((_QWORD *)this + 30) = 0;
  *((_QWORD *)this + 31) = v2;
  return this;
}

void sub_21831781C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v8;
  va_list va;

  va_start(va, a2);
  v6 = v5;
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy(v6, *(_QWORD **)(v2 + 152));
  std::vector<std::pair<std::string,unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy(v4, *(_QWORD **)(v2 + 96));
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy(v3, *(_QWORD **)(v2 + 48));
  v8 = *(void **)(v2 + 8);
  if (v8)
  {
    *(_QWORD *)(v2 + 16) = v8;
    operator delete(v8);
  }
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<boost::unit_test::output_format,boost::unit_test::runtime_config::stream_holder>,std::__map_value_compare<boost::unit_test::output_format,std::__value_type<boost::unit_test::output_format,boost::unit_test::runtime_config::stream_holder>,std::less<boost::unit_test::output_format>,true>,std::allocator<std::__value_type<boost::unit_test::output_format,boost::unit_test::runtime_config::stream_holder>>>::destroy(uint64_t a1, unsigned int **a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<boost::unit_test::output_format,boost::unit_test::runtime_config::stream_holder>,std::__map_value_compare<boost::unit_test::output_format,std::__value_type<boost::unit_test::output_format,boost::unit_test::runtime_config::stream_holder>,std::less<boost::unit_test::output_format>,true>,std::allocator<std::__value_type<boost::unit_test::output_format,boost::unit_test::runtime_config::stream_holder>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<boost::unit_test::output_format,boost::unit_test::runtime_config::stream_holder>,std::__map_value_compare<boost::unit_test::output_format,std::__value_type<boost::unit_test::output_format,boost::unit_test::runtime_config::stream_holder>,std::less<boost::unit_test::output_format>,true>,std::allocator<std::__value_type<boost::unit_test::output_format,boost::unit_test::runtime_config::stream_holder>>>::destroy(a1, a2[1]);
    boost::detail::shared_count::~shared_count(a2 + 6);
    operator delete(a2);
  }
}

void boost::unit_test::framework::state::~state(boost::unit_test::framework::state *this)
{
  uint64_t v2;
  void *v3;
  void **v4;

  boost::unit_test::framework::state::clear((uint64_t)this);
  boost::detail::shared_count::~shared_count((unsigned int **)this + 30);
  std::__tree<std::__value_type<boost::unit_test::output_format,boost::unit_test::runtime_config::stream_holder>,std::__map_value_compare<boost::unit_test::output_format,std::__value_type<boost::unit_test::output_format,boost::unit_test::runtime_config::stream_holder>,std::less<boost::unit_test::output_format>,true>,std::allocator<std::__value_type<boost::unit_test::output_format,boost::unit_test::runtime_config::stream_holder>>>::destroy((uint64_t)this + 208, *((unsigned int ***)this + 27));
  v2 = *((_QWORD *)this + 25);
  if (v2)
    MEMORY[0x219A199F0](v2, 0x1000C8077774924);
  boost::detail::shared_count::~shared_count((unsigned int **)this + 24);
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)this + 144, *((_QWORD **)this + 19));
  v4 = (void **)((char *)this + 112);
  std::vector<std::pair<std::string,unsigned long>>::__destroy_vector::operator()[abi:ne180100](&v4);
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)this + 88, *((_QWORD **)this + 12));
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)this + 40, *((_QWORD **)this + 6));
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
}

void boost::unit_test::lazy_ostream::~lazy_ostream(boost::unit_test::lazy_ostream *this)
{
  JUMPOUT(0x219A19A08);
}

std::runtime_error *boost::unit_test::framework::internal_error::internal_error(std::runtime_error *a1, uint64_t a2)
{
  std::string __dst;

  std::string::basic_string[abi:ne180100](&__dst, *(void **)a2, *(_QWORD *)(a2 + 8) - *(_QWORD *)a2);
  std::runtime_error::runtime_error(a1, &__dst);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  a1->__vftable = (std::runtime_error_vtbl *)&unk_24D939DA8;
  return a1;
}

void sub_2183179DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t boost::unit_test::test_case_counter::visit(uint64_t result, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 204) == 1)
    ++*(_QWORD *)(result + 8);
  return result;
}

BOOL boost::unit_test::test_case_counter::test_suite_start(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 212) == 1;
}

void boost::unit_test::unit_test_monitor_t::~unit_test_monitor_t(boost::unit_test::unit_test_monitor_t *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 4);
  if (v2)
    MEMORY[0x219A199F0](v2, 0x1000C8077774924);
  boost::detail::shared_count::~shared_count((unsigned int **)this + 3);
}

uint64_t **std::__tree<std::__value_type<unsigned long,boost::unit_test::test_unit *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,boost::unit_test::test_unit *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,boost::unit_test::test_unit *>>>::__emplace_unique_key_args<unsigned long,std::pair<unsigned long const,boost::unit_test::test_unit *>>(uint64_t **a1, unint64_t *a2, _OWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  unint64_t v7;
  uint64_t **v8;
  unint64_t v9;
  uint64_t *v10;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = v5[4];
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = (uint64_t *)operator new(0x30uLL);
    *((_OWORD *)v10 + 2) = *a3;
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, (uint64_t)v8, v6, v10);
    return (uint64_t **)v10;
  }
  return v8;
}

__int128 *std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<boost::unit_test::framework::state::context_frame *,boost::unit_test::framework::state::context_frame *,boost::unit_test::framework::state::context_frame *>(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  __int128 *v5;
  __int128 v7;
  int v8;

  v5 = a2;
  if (a2 != a3)
  {
    do
    {
      if (*(char *)(a4 + 23) < 0)
        operator delete(*(void **)a4);
      v7 = *v5;
      *(_QWORD *)(a4 + 16) = *((_QWORD *)v5 + 2);
      *(_OWORD *)a4 = v7;
      *((_BYTE *)v5 + 23) = 0;
      *(_BYTE *)v5 = 0;
      v8 = *((_DWORD *)v5 + 6);
      *(_BYTE *)(a4 + 28) = *((_BYTE *)v5 + 28);
      *(_DWORD *)(a4 + 24) = v8;
      a4 += 32;
      v5 += 2;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

std::runtime_error *boost::unit_test::framework::internal_error::internal_error(std::runtime_error *a1, const std::runtime_error *a2)
{
  std::runtime_error *result;

  result = std::runtime_error::runtime_error(a1, a2);
  result->__vftable = (std::runtime_error_vtbl *)&unk_24D939DA8;
  return result;
}

uint64_t *_GLOBAL__sub_I_framework_cpp()
{
  uint64_t *result;

  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  result = boost::unit_test::singleton<boost::unit_test::framework_init_observer_t>::instance();
  return result;
}

unsigned __int8 **boost::unit_test::output::file_basename@<X0>(unsigned __int8 **result@<X0>, unsigned __int8 **a2@<X8>)
{
  unint64_t v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  int v6;
  int v7;
  int v8;

  v3 = *result;
  v2 = (unint64_t)result[1];
  if (*result != (unsigned __int8 *)v2)
  {
    v4 = *result;
    v5 = (unsigned __int8 *)(v2 - 1);
    while (v5 != v3)
    {
      v7 = *v5--;
      v6 = v7;
      if (v7 == 47 || v6 == 92)
      {
        v4 = v5 + 1;
        goto LABEL_7;
      }
    }
    v8 = *v3;
    if (v8 != 47 && v8 != 92)
      goto LABEL_12;
LABEL_7:
    if (v4 != (unsigned __int8 *)v2)
    {
      if (v2 > (unint64_t)(v4 + 1))
        v3 = v4 + 1;
      else
        v3 = result[1];
      *result = v3;
    }
  }
LABEL_12:
  *a2 = v3;
  a2[1] = (unsigned __int8 *)v2;
  return result;
}

void boost::unit_test::output::junit_log_formatter::log_start(uint64_t a1)
{
  _QWORD *v1;

  v1 = (_QWORD *)(a1 + 24);
  std::__tree<std::__value_type<unsigned long,boost::unit_test::output::junit_impl::junit_log_helper>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,boost::unit_test::output::junit_impl::junit_log_helper>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,boost::unit_test::output::junit_impl::junit_log_helper>>>::destroy(a1 + 16, *(_QWORD **)(a1 + 24));
  *(v1 - 1) = v1;
  *v1 = 0;
  v1[1] = 0;
  std::__list_imp<unsigned long>::clear(v1 + 15);
  boost::unit_test::output::junit_impl::junit_log_helper::clear((boost::unit_test::output::junit_impl::junit_log_helper *)(v1 + 2));
}

void boost::unit_test::output::junit_impl::junit_log_helper::clear(boost::unit_test::output::junit_impl::junit_log_helper *this)
{
  uint64_t i;
  uint64_t v3;

  v3 = *((_QWORD *)this + 9);
  for (i = *((_QWORD *)this + 10);
        i != v3;
        std::allocator<boost::unit_test::output::junit_impl::junit_log_helper::assertion_entry>::destroy[abi:ne180100]((uint64_t)this + 88, i))
  {
    i -= 80;
  }
  *((_QWORD *)this + 10) = v3;
  std::__list_imp<std::string>::clear(this);
  std::__list_imp<std::string>::clear((_QWORD *)this + 3);
  if (*((char *)this + 71) < 0)
  {
    **((_BYTE **)this + 6) = 0;
    *((_QWORD *)this + 7) = 0;
  }
  else
  {
    *((_BYTE *)this + 48) = 0;
    *((_BYTE *)this + 71) = 0;
  }
  *((_BYTE *)this + 96) = 0;
}

_QWORD *boost::unit_test::output::junit_log_formatter::log_finish(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  const std::locale::facet *v5;
  _DWORD *v6;
  boost::unit_test::framework::impl::_anonymous_namespace_ *v7;
  char v8;
  _QWORD *v10;
  unint64_t v11;
  std::locale v12;
  _QWORD *v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;

  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"<?xml version=\"1.0\" encoding=\"UTF-8\"?>", 38);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(_QWORD *)(*v4 - 24)));
  v5 = std::locale::use_facet(&v12, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v12);
  std::ostream::put();
  std::ostream::flush();
  if (*(_QWORD *)(a1 + 32))
  {
    v6 = boost::unit_test::framework::get(*(boost::unit_test::framework::impl::_anonymous_namespace_ **)(*(_QWORD *)(a1 + 16) + 32), 17);
    v7 = (boost::unit_test::framework::impl::_anonymous_namespace_ *)*((_QWORD *)v6 + 7);
    if (v7 == (boost::unit_test::framework::impl::_anonymous_namespace_ *)0xFFFFFFFFLL)
      goto LABEL_3;
    while (1)
    {
      v10 = *(_QWORD **)(a1 + 24);
      if (!v10)
        goto LABEL_3;
      while (1)
      {
        v11 = v10[4];
        if ((unint64_t)v7 >= v11)
          break;
LABEL_9:
        v10 = (_QWORD *)*v10;
        if (!v10)
          goto LABEL_3;
      }
      if (v11 < (unint64_t)v7)
        break;
      v6 = boost::unit_test::framework::get(v7, 17);
      v7 = (boost::unit_test::framework::impl::_anonymous_namespace_ *)*((_QWORD *)v6 + 7);
      if (v7 == (boost::unit_test::framework::impl::_anonymous_namespace_ *)0xFFFFFFFFLL)
      {
LABEL_3:
        v8 = *(_BYTE *)(a1 + 168);
        v12.__locale_ = (std::locale::__imp *)&unk_24D939F18;
        v13 = a2;
        v14 = v6;
        v15 = a1 + 16;
        v16 = a1 + 40;
        v17 = 0;
        v18 = v8;
        return boost::unit_test::traverse_test_tree(*((boost::unit_test::framework::impl::_anonymous_namespace_ **)v6 + 6), (uint64_t)&v12, 1);
      }
    }
    ++v10;
    goto LABEL_9;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"<testsuites errors=\"1\">", 23);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"<testsuite errors=\"1\" name=\"boost-test-framework\">", 50);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"<testcase assertions=\"1\" name=\"test-setup\">", 43);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"<system-out>Incorrect setup: no test case executed</system-out>", 63);
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"</testcase></testsuite></testsuites>", 36);
}

void sub_218317F20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

uint64_t boost::unit_test::output::junit_log_formatter::log_build_info(uint64_t result)
{
  *(_BYTE *)(result + 168) = 1;
  return result;
}

void boost::unit_test::output::junit_log_formatter::test_unit_start(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  _QWORD v8[3];
  _QWORD v9[2];
  void *v10[2];
  __int128 v11;
  _BYTE v12[32];
  char v13[8];
  uint64_t v14[3];
  void *v15[5];
  char v16;
  uint64_t v17;
  void **v18;

  v5 = (uint64_t *)operator new(0x18uLL);
  v6 = *(_QWORD *)(a3 + 48);
  v7 = a1[18];
  a1 += 18;
  v5[1] = (uint64_t)a1;
  v5[2] = v6;
  *v5 = (uint64_t)v7;
  v7[1] = (uint64_t)v5;
  *a1 = v5;
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  v8[0] = v8;
  v8[1] = v8;
  v8[2] = 0;
  v9[0] = v9;
  v9[1] = v9;
  *(_OWORD *)v10 = 0u;
  v11 = 0u;
  memset(v12, 0, 25);
  std::pair<boost::unit_test::test_unit::readonly_property62,boost::unit_test::output::junit_impl::junit_log_helper>::pair[abi:ne180100]<boost::unit_test::test_unit::readonly_property62 const&,boost::unit_test::output::junit_impl::junit_log_helper,0>((uint64_t)v13, (_QWORD *)(a3 + 48), (uint64_t)v8);
  std::__tree<std::__value_type<unsigned long,boost::unit_test::output::junit_impl::junit_log_helper>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,boost::unit_test::output::junit_impl::junit_log_helper>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,boost::unit_test::output::junit_impl::junit_log_helper>>>::__emplace_unique_impl<std::pair<boost::unit_test::test_unit::readonly_property62,boost::unit_test::output::junit_impl::junit_log_helper>>(a1 - 16, (uint64_t)v13);
  v18 = (void **)&v17;
  std::vector<boost::unit_test::output::junit_impl::junit_log_helper::assertion_entry>::__destroy_vector::operator()[abi:ne180100](&v18);
  if (v16 < 0)
    operator delete(v15[3]);
  std::__list_imp<std::string>::clear(v15);
  std::__list_imp<std::string>::clear(v14);
  v18 = (void **)v12;
  std::vector<boost::unit_test::output::junit_impl::junit_log_helper::assertion_entry>::__destroy_vector::operator()[abi:ne180100](&v18);
  if (SHIBYTE(v11) < 0)
    operator delete(v10[1]);
  std::__list_imp<std::string>::clear(v9);
  std::__list_imp<std::string>::clear(v8);
}

void sub_21831805C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  std::pair<boost::unit_test::test_unit::readonly_property62,boost::unit_test::output::junit_impl::junit_log_helper>::~pair((uint64_t)&a22);
  boost::unit_test::output::junit_impl::junit_log_helper::~junit_log_helper(&a9);
  _Unwind_Resume(a1);
}

uint64_t std::pair<boost::unit_test::test_unit::readonly_property62,boost::unit_test::output::junit_impl::junit_log_helper>::~pair(uint64_t a1)
{
  void **v3;

  v3 = (void **)(a1 + 80);
  std::vector<boost::unit_test::output::junit_impl::junit_log_helper::assertion_entry>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  std::__list_imp<std::string>::clear((_QWORD *)(a1 + 32));
  std::__list_imp<std::string>::clear((_QWORD *)(a1 + 8));
  return a1;
}

void boost::unit_test::output::junit_impl::junit_log_helper::~junit_log_helper(void **this)
{
  void **v2;

  v2 = this + 9;
  std::vector<boost::unit_test::output::junit_impl::junit_log_helper::assertion_entry>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 71) < 0)
    operator delete(this[6]);
  std::__list_imp<std::string>::clear(this + 3);
  std::__list_imp<std::string>::clear(this);
}

void boost::unit_test::output::junit_log_formatter::test_unit_finish(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = *(uint64_t **)(a1 + 144);
  v2 = *v1;
  *(_QWORD *)(v2 + 8) = v1[1];
  *(_QWORD *)v1[1] = v2;
  --*(_QWORD *)(a1 + 160);
  operator delete(v1);
}

void boost::unit_test::output::junit_log_formatter::test_unit_skipped(uint64_t a1, uint64_t a2, uint64_t a3, std::string::value_type **a4)
{
  uint64_t **v5;
  _QWORD *v6;

  v6 = (_QWORD *)(a3 + 48);
  v5 = std::__tree<std::__value_type<unsigned long,boost::unit_test::output::junit_impl::junit_log_helper>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,boost::unit_test::output::junit_impl::junit_log_helper>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,boost::unit_test::output::junit_impl::junit_log_helper>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t **)(a1 + 16), (unint64_t *)(a3 + 48), (uint64_t)&std::piecewise_construct, &v6);
  std::string::__assign_trivial[abi:ne180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>((std::string *)(v5 + 11), *a4, a4[1], a4[1] - *a4);
}

uint64_t boost::unit_test::output::junit_log_formatter::log_exception_start(boost::unit_test::output::junit_log_formatter *a1, uint64_t a2, __int128 *a3, uint64_t a4)
{
  _QWORD *current_log_entry;
  int v8;
  const char *v9;
  _QWORD *v10;
  const std::locale::facet *v11;
  _QWORD *v12;
  void *locale;
  uint64_t v14;
  _QWORD *v15;
  const std::locale::facet *v16;
  _QWORD *v17;
  void *v18;
  uint64_t v19;
  const std::locale::facet *v20;
  _QWORD *v21;
  const std::locale::facet *v22;
  const std::locale::facet *v23;
  _QWORD *v24;
  void *v25;
  uint64_t v26;
  const std::locale::facet *v27;
  const std::locale::facet *v28;
  _QWORD *v29;
  const std::locale::facet *v30;
  _QWORD *v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  const std::locale::facet *v37;
  _QWORD *v38;
  void *v39;
  uint64_t v40;
  const std::locale::facet *v41;
  _QWORD *v42;
  const std::locale::facet *v43;
  unint64_t v44;
  uint64_t v45;
  __int128 v47;
  __int128 v48;
  unsigned __int8 *v49;
  uint64_t v50;
  void *v51[2];
  void *v52[2];
  __int128 v53;
  void *__p[2];
  uint64_t v55;
  int v56;
  char v57;
  _QWORD v58[11];
  char v59;
  uint64_t v60;
  std::locale __dst[2];
  uint64_t v62;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v58);
  *((_BYTE *)a1 + 169) = 0;
  current_log_entry = boost::unit_test::output::junit_log_formatter::get_current_log_entry(a1);
  v57 = 0;
  *(_OWORD *)v51 = 0u;
  *(_OWORD *)v52 = 0u;
  v53 = 0u;
  *(_OWORD *)__p = 0u;
  v55 = 0;
  MEMORY[0x219A19390](v51, "unexpected exception");
  v56 = 1;
  v8 = *(_DWORD *)a4;
  if (*(int *)a4 > 214)
  {
    switch(v8)
    {
      case 215:
        v9 = "execution timeout";
        goto LABEL_15;
      case 220:
        v9 = "user fatal error";
        goto LABEL_15;
      case 225:
        v9 = "system fatal error";
        goto LABEL_15;
    }
  }
  else
  {
    switch(v8)
    {
      case 200:
        v9 = "user, assert() or CRT error";
        goto LABEL_15;
      case 205:
        v9 = "uncaught exception";
        goto LABEL_15;
      case 210:
        v9 = "system error";
        goto LABEL_15;
    }
  }
  v9 = "no error";
LABEL_15:
  MEMORY[0x219A19390](&v52[1], v9);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)"UNCAUGHT EXCEPTION:", 19);
  std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(_QWORD *)(*v10 - 24)));
  v11 = std::locale::use_facet(__dst, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
  std::locale::~locale(__dst);
  std::ostream::put();
  std::ostream::flush();
  if (*(_QWORD *)(a4 + 56) != *(_QWORD *)(a4 + 48))
  {
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)"- function: \"", 13);
    std::string::basic_string[abi:ne180100](__dst, *(void **)(a4 + 48), *(_QWORD *)(a4 + 56) - *(_QWORD *)(a4 + 48));
    if (v62 >= 0)
      locale = __dst;
    else
      locale = __dst[0].__locale_;
    if (v62 >= 0)
      v14 = HIBYTE(v62);
    else
      v14 = (uint64_t)__dst[1].__locale_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)locale, v14);
    if (SHIBYTE(v62) < 0)
      operator delete(__dst[0].__locale_);
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"\"", 1);
    std::ios_base::getloc((const std::ios_base *)((char *)v15 + *(_QWORD *)(*v15 - 24)));
    v16 = std::locale::use_facet(__dst, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v16->__vftable[2].~facet_0)(v16, 10);
    std::locale::~locale(__dst);
    std::ostream::put();
    std::ostream::flush();
  }
  v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)"- file: ", 8);
  v48 = *(_OWORD *)(a4 + 24);
  boost::unit_test::output::file_basename((unsigned __int8 **)&v48, &v49);
  std::string::basic_string[abi:ne180100](__dst, v49, v50 - (_QWORD)v49);
  if (v62 >= 0)
    v18 = __dst;
  else
    v18 = __dst[0].__locale_;
  if (v62 >= 0)
    v19 = HIBYTE(v62);
  else
    v19 = (uint64_t)__dst[1].__locale_;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)v18, v19);
  if (SHIBYTE(v62) < 0)
    operator delete(__dst[0].__locale_);
  std::ios_base::getloc((const std::ios_base *)((char *)v17 + *(_QWORD *)(*v17 - 24)));
  v20 = std::locale::use_facet(__dst, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v20->__vftable[2].~facet_0)(v20, 10);
  std::locale::~locale(__dst);
  std::ostream::put();
  std::ostream::flush();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"- line: ", 8);
  v21 = (_QWORD *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v21 + *(_QWORD *)(*v21 - 24)));
  v22 = std::locale::use_facet(__dst, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v22->__vftable[2].~facet_0)(v22, 10);
  std::locale::~locale(__dst);
  std::ostream::put();
  std::ostream::flush();
  std::ios_base::getloc((const std::ios_base *)((char *)v21 + *(_QWORD *)(*v21 - 24)));
  v23 = std::locale::use_facet(__dst, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v23->__vftable[2].~facet_0)(v23, 10);
  std::locale::~locale(__dst);
  std::ostream::put();
  std::ostream::flush();
  v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)"\nEXCEPTION STACK TRACE: --------------\n", 39);
  std::string::basic_string[abi:ne180100](__dst, *(void **)(a4 + 8), *(_QWORD *)(a4 + 16) - *(_QWORD *)(a4 + 8));
  if (v62 >= 0)
    v25 = __dst;
  else
    v25 = __dst[0].__locale_;
  if (v62 >= 0)
    v26 = HIBYTE(v62);
  else
    v26 = (uint64_t)__dst[1].__locale_;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)v25, v26);
  if (SHIBYTE(v62) < 0)
    operator delete(__dst[0].__locale_);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"\n-------------------------------------", 38);
  if (*((_QWORD *)a3 + 1) != *(_QWORD *)a3)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)v58 + *(_QWORD *)(v58[0] - 24)));
    v27 = std::locale::use_facet(__dst, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v27->__vftable[2].~facet_0)(v27, 10);
    std::locale::~locale(__dst);
    std::ostream::put();
    std::ostream::flush();
    std::ios_base::getloc((const std::ios_base *)((char *)v58 + *(_QWORD *)(v58[0] - 24)));
    v28 = std::locale::use_facet(__dst, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v28->__vftable[2].~facet_0)(v28, 10);
    std::locale::~locale(__dst);
    std::ostream::put();
    std::ostream::flush();
    v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)"Last checkpoint:", 16);
    std::ios_base::getloc((const std::ios_base *)((char *)v29 + *(_QWORD *)(*v29 - 24)));
    v30 = std::locale::use_facet(__dst, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v30->__vftable[2].~facet_0)(v30, 10);
    std::locale::~locale(__dst);
    std::ostream::put();
    std::ostream::flush();
    v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"- message: \"", 12);
    v32 = *((char *)a3 + 47);
    if (v32 >= 0)
      v33 = (uint64_t)a3 + 24;
    else
      v33 = *((_QWORD *)a3 + 3);
    if (v32 >= 0)
      v34 = *((unsigned __int8 *)a3 + 47);
    else
      v34 = *((_QWORD *)a3 + 4);
    v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, v33, v34);
    v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"\"", 1);
    std::ios_base::getloc((const std::ios_base *)((char *)v36 + *(_QWORD *)(*v36 - 24)));
    v37 = std::locale::use_facet(__dst, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v37->__vftable[2].~facet_0)(v37, 10);
    std::locale::~locale(__dst);
    std::ostream::put();
    std::ostream::flush();
    v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"- file: ", 8);
    v47 = *a3;
    boost::unit_test::output::file_basename((unsigned __int8 **)&v47, &v49);
    std::string::basic_string[abi:ne180100](__dst, v49, v50 - (_QWORD)v49);
    if (v62 >= 0)
      v39 = __dst;
    else
      v39 = __dst[0].__locale_;
    if (v62 >= 0)
      v40 = HIBYTE(v62);
    else
      v40 = (uint64_t)__dst[1].__locale_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)v39, v40);
    if (SHIBYTE(v62) < 0)
      operator delete(__dst[0].__locale_);
    std::ios_base::getloc((const std::ios_base *)((char *)v38 + *(_QWORD *)(*v38 - 24)));
    v41 = std::locale::use_facet(__dst, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v41->__vftable[2].~facet_0)(v41, 10);
    std::locale::~locale(__dst);
    std::ostream::put();
    std::ostream::flush();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)"- line: ", 8);
    v42 = (_QWORD *)std::ostream::operator<<();
    std::ios_base::getloc((const std::ios_base *)((char *)v42 + *(_QWORD *)(*v42 - 24)));
    v43 = std::locale::use_facet(__dst, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v43->__vftable[2].~facet_0)(v43, 10);
    std::locale::~locale(__dst);
    std::ostream::put();
    std::ostream::flush();
  }
  std::stringbuf::str();
  if (SHIBYTE(v55) < 0)
    operator delete(__p[0]);
  *(_OWORD *)__p = *(_OWORD *)&__dst[0].__locale_;
  v55 = v62;
  v44 = current_log_entry[10];
  if (v44 >= current_log_entry[11])
  {
    v45 = std::vector<boost::unit_test::output::junit_impl::junit_log_helper::assertion_entry>::__push_back_slow_path<boost::unit_test::output::junit_impl::junit_log_helper::assertion_entry const&>(current_log_entry + 9, (__int128 *)v51);
  }
  else
  {
    std::allocator<boost::unit_test::output::junit_impl::junit_log_helper::assertion_entry>::construct[abi:ne180100]<boost::unit_test::output::junit_impl::junit_log_helper::assertion_entry,boost::unit_test::output::junit_impl::junit_log_helper::assertion_entry const&>((_DWORD)current_log_entry + 88, (std::string *)current_log_entry[10], (__int128 *)v51);
    v45 = v44 + 80;
    current_log_entry[10] = v44 + 80;
  }
  current_log_entry[10] = v45;
  if (SHIBYTE(v55) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v53) < 0)
    operator delete(v52[1]);
  if (SHIBYTE(v52[0]) < 0)
    operator delete(v51[0]);
  v58[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v58 + *(_QWORD *)(v58[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v58[1] = MEMORY[0x24BEDB848] + 16;
  if (v59 < 0)
    operator delete((void *)v58[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x219A198F4](&v60);
}

void sub_218318A04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  v20 = va_arg(va1, _QWORD);
  *(_QWORD *)(v7 + 80) = v8;
  std::pair<std::string const,turi::file_download_cache::file_metadata>::~pair((uint64_t)va);
  std::ostringstream::~ostringstream((uint64_t)va1);
  _Unwind_Resume(a1);
}

_QWORD *boost::unit_test::output::junit_log_formatter::get_current_log_entry(boost::unit_test::output::junit_log_formatter *this)
{
  _QWORD *v1;
  unint64_t v2;
  _QWORD *v3;
  unint64_t v4;
  BOOL v5;
  _QWORD *v6;

  if (!*((_QWORD *)this + 20))
    return (_QWORD *)((char *)this + 40);
  v1 = (_QWORD *)*((_QWORD *)this + 3);
  if (!v1)
    return (_QWORD *)((char *)this + 40);
  v2 = *(_QWORD *)(*((_QWORD *)this + 18) + 16);
  v3 = (_QWORD *)((char *)this + 24);
  do
  {
    v4 = v1[4];
    v5 = v4 >= v2;
    if (v4 >= v2)
      v6 = v1;
    else
      v6 = v1 + 1;
    if (v5)
      v3 = v1;
    v1 = (_QWORD *)*v6;
  }
  while (*v6);
  if (v3 != (_QWORD *)((char *)this + 24) && v2 >= v3[4])
    return v3 + 5;
  else
    return (_QWORD *)((char *)this + 40);
}

_QWORD *boost::unit_test::output::junit_log_formatter::log_exception_finish(boost::unit_test::output::junit_log_formatter *a1)
{
  _QWORD *result;

  result = boost::unit_test::output::junit_log_formatter::get_current_log_entry(a1);
  *(_BYTE *)(result[10] - 4) = 1;
  return result;
}

_QWORD *boost::unit_test::output::junit_log_formatter::log_entry_start(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  _QWORD *result;
  _QWORD *v8;
  const char *v9;
  const char *v10;
  size_t v11;
  _QWORD *v12;
  const std::locale::facet *v13;
  _QWORD *v14;
  int v15;
  BOOL v16;
  unsigned __int8 *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  const std::locale::facet *v21;
  _QWORD *v22;
  const std::locale::facet *v23;
  const std::string::value_type *v24;
  std::string::size_type v25;
  unint64_t v26;
  const char *v27;
  _QWORD *v28;
  const std::locale::facet *v29;
  _QWORD *v30;
  int v31;
  BOOL v32;
  unsigned __int8 *v33;
  uint64_t v34;
  void *p_dst;
  uint64_t v36;
  const std::locale::facet *v37;
  _QWORD *v38;
  const std::locale::facet *v39;
  const std::string::value_type *locale;
  std::string::size_type v41;
  uint64_t v42;
  unsigned __int8 *v43[2];
  unsigned __int8 *v44[2];
  unsigned __int8 *v45;
  uint64_t v46;
  void *v47[2];
  void *v48[2];
  __int128 v49;
  _BYTE __p[29];
  _QWORD v51[11];
  char v52;
  uint64_t v53;
  std::locale __dst;
  std::string::size_type v55;
  unsigned __int8 v56;

  result = boost::unit_test::output::junit_log_formatter::get_current_log_entry((boost::unit_test::output::junit_log_formatter *)a1);
  v8 = result;
  *((_BYTE *)result + 96) = 0;
  *(_BYTE *)(a1 + 169) = 1;
  if (a4 == 2)
  {
    if (*(int *)(a1 + 172) >= 4)
      goto LABEL_5;
  }
  else if (a4 == 1)
  {
    if (*(int *)(a1 + 172) >= 3)
      goto LABEL_5;
  }
  else
  {
    if (a4)
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v51);
      __p[28] = 0;
      *(_OWORD *)v47 = 0u;
      *(_OWORD *)v48 = 0u;
      v49 = 0u;
      memset(__p, 0, 24);
      *(_DWORD *)&__p[24] = 2;
      MEMORY[0x219A19390](v47, "failure");
      if (a4 == 3)
        v27 = "assertion error";
      else
        v27 = "fatal error";
      MEMORY[0x219A19390](&v48[1], v27);
      v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)"ASSERTION FAILURE:", 18);
      std::ios_base::getloc((const std::ios_base *)((char *)v28 + *(_QWORD *)(*v28 - 24)));
      v29 = std::locale::use_facet(&__dst, MEMORY[0x24BEDB350]);
      ((void (*)(const std::locale::facet *, uint64_t))v29->__vftable[2].~facet_0)(v29, 10);
      std::locale::~locale(&__dst);
      std::ostream::put();
      std::ostream::flush();
      v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"- file   : ", 11);
      v31 = *(char *)(a3 + 23);
      v32 = v31 < 0;
      v33 = *(unsigned __int8 **)a3;
      if (v31 >= 0)
        v33 = (unsigned __int8 *)a3;
      v34 = *(unsigned __int8 *)(a3 + 23);
      if (v32)
        v34 = *(_QWORD *)(a3 + 8);
      v43[0] = v33;
      v43[1] = &v33[v34];
      boost::unit_test::output::file_basename(v43, &v45);
      std::string::basic_string[abi:ne180100](&__dst, v45, v46 - (_QWORD)v45);
      if ((v56 & 0x80u) == 0)
        p_dst = &__dst;
      else
        p_dst = __dst.__locale_;
      if ((v56 & 0x80u) == 0)
        v36 = v56;
      else
        v36 = v55;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)p_dst, v36);
      if ((char)v56 < 0)
        operator delete(__dst.__locale_);
      std::ios_base::getloc((const std::ios_base *)((char *)v30 + *(_QWORD *)(*v30 - 24)));
      v37 = std::locale::use_facet(&__dst, MEMORY[0x24BEDB350]);
      ((void (*)(const std::locale::facet *, uint64_t))v37->__vftable[2].~facet_0)(v37, 10);
      std::locale::~locale(&__dst);
      std::ostream::put();
      std::ostream::flush();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"- line   : ", 11);
      v38 = (_QWORD *)std::ostream::operator<<();
      std::ios_base::getloc((const std::ios_base *)((char *)v38 + *(_QWORD *)(*v38 - 24)));
      v39 = std::locale::use_facet(&__dst, MEMORY[0x24BEDB350]);
      ((void (*)(const std::locale::facet *, uint64_t))v39->__vftable[2].~facet_0)(v39, 10);
      std::locale::~locale(&__dst);
      std::ostream::put();
      std::ostream::flush();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)"- message: ", 11);
      std::stringbuf::str();
      if ((v56 & 0x80u) == 0)
        locale = (const std::string::value_type *)&__dst;
      else
        locale = (const std::string::value_type *)__dst.__locale_;
      if ((v56 & 0x80u) == 0)
        v41 = v56;
      else
        v41 = v55;
      std::string::append((std::string *)__p, locale, v41);
      if ((char)v56 < 0)
        operator delete(__dst.__locale_);
      v26 = v8[10];
      if (v26 >= v8[11])
      {
        v42 = std::vector<boost::unit_test::output::junit_impl::junit_log_helper::assertion_entry>::__push_back_slow_path<boost::unit_test::output::junit_impl::junit_log_helper::assertion_entry const&>(v8 + 9, (__int128 *)v47);
        goto LABEL_64;
      }
      std::allocator<boost::unit_test::output::junit_impl::junit_log_helper::assertion_entry>::construct[abi:ne180100]<boost::unit_test::output::junit_impl::junit_log_helper::assertion_entry,boost::unit_test::output::junit_impl::junit_log_helper::assertion_entry const&>((_DWORD)v8 + 88, (std::string *)v8[10], (__int128 *)v47);
      goto LABEL_61;
    }
    if (*(int *)(a1 + 172) >= 1)
    {
LABEL_5:
      *((_BYTE *)result + 96) = 1;
      return result;
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v51);
  v49 = 0u;
  memset(__p, 0, sizeof(__p));
  *(_OWORD *)v47 = 0u;
  *(_OWORD *)v48 = 0u;
  MEMORY[0x219A19390](v47, "info");
  MEMORY[0x219A19390](&v48[1], "message");
  v9 = "INFO:";
  if (a4 == 1)
    v9 = "MESSAGE:";
  if (a4 == 2)
    v10 = "WARNING:";
  else
    v10 = v9;
  v11 = strlen(v10);
  v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)v10, v11);
  std::ios_base::getloc((const std::ios_base *)((char *)v12 + *(_QWORD *)(*v12 - 24)));
  v13 = std::locale::use_facet(&__dst, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 10);
  std::locale::~locale(&__dst);
  std::ostream::put();
  std::ostream::flush();
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"- file   : ", 11);
  v15 = *(char *)(a3 + 23);
  v16 = v15 < 0;
  v17 = *(unsigned __int8 **)a3;
  if (v15 >= 0)
    v17 = (unsigned __int8 *)a3;
  v18 = *(unsigned __int8 *)(a3 + 23);
  if (v16)
    v18 = *(_QWORD *)(a3 + 8);
  v44[0] = v17;
  v44[1] = &v17[v18];
  boost::unit_test::output::file_basename(v44, &v45);
  std::string::basic_string[abi:ne180100](&__dst, v45, v46 - (_QWORD)v45);
  if ((v56 & 0x80u) == 0)
    v19 = &__dst;
  else
    v19 = __dst.__locale_;
  if ((v56 & 0x80u) == 0)
    v20 = v56;
  else
    v20 = v55;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v19, v20);
  if ((char)v56 < 0)
    operator delete(__dst.__locale_);
  std::ios_base::getloc((const std::ios_base *)((char *)v14 + *(_QWORD *)(*v14 - 24)));
  v21 = std::locale::use_facet(&__dst, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v21->__vftable[2].~facet_0)(v21, 10);
  std::locale::~locale(&__dst);
  std::ostream::put();
  std::ostream::flush();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"- line   : ", 11);
  v22 = (_QWORD *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v22 + *(_QWORD *)(*v22 - 24)));
  v23 = std::locale::use_facet(&__dst, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v23->__vftable[2].~facet_0)(v23, 10);
  std::locale::~locale(&__dst);
  std::ostream::put();
  std::ostream::flush();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"- message: ", 11);
  std::stringbuf::str();
  if ((v56 & 0x80u) == 0)
    v24 = (const std::string::value_type *)&__dst;
  else
    v24 = (const std::string::value_type *)__dst.__locale_;
  if ((v56 & 0x80u) == 0)
    v25 = v56;
  else
    v25 = v55;
  std::string::append((std::string *)__p, v24, v25);
  if ((char)v56 < 0)
    operator delete(__dst.__locale_);
  v26 = v8[10];
  if (v26 >= v8[11])
  {
    v42 = std::vector<boost::unit_test::output::junit_impl::junit_log_helper::assertion_entry>::__push_back_slow_path<boost::unit_test::output::junit_impl::junit_log_helper::assertion_entry const&>(v8 + 9, (__int128 *)v47);
    goto LABEL_64;
  }
  std::allocator<boost::unit_test::output::junit_impl::junit_log_helper::assertion_entry>::construct[abi:ne180100]<boost::unit_test::output::junit_impl::junit_log_helper::assertion_entry,boost::unit_test::output::junit_impl::junit_log_helper::assertion_entry const&>((_DWORD)v8 + 88, (std::string *)v8[10], (__int128 *)v47);
LABEL_61:
  v42 = v26 + 80;
  v8[10] = v26 + 80;
LABEL_64:
  v8[10] = v42;
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  if (SHIBYTE(v49) < 0)
    operator delete(v48[1]);
  if (SHIBYTE(v48[0]) < 0)
    operator delete(v47[0]);
  v51[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v51 + *(_QWORD *)(v51[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v51[1] = MEMORY[0x24BEDB848] + 16;
  if (v52 < 0)
    operator delete((void *)v51[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return (_QWORD *)MEMORY[0x219A198F4](&v53);
}

void sub_2183191AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  v20 = va_arg(va1, _QWORD);
  *(_QWORD *)(v7 + 80) = v8;
  std::pair<std::string const,turi::file_download_cache::file_metadata>::~pair((uint64_t)va);
  std::ostringstream::~ostringstream((uint64_t)va1);
  _Unwind_Resume(a1);
}

std::string *boost::unit_test::output::junit_log_formatter::log_entry_value(boost::unit_test::output::junit_log_formatter *a1, uint64_t a2, char **a3)
{
  std::string *result;
  std::string::size_type *v5;
  std::string::size_type size;
  std::string::size_type v7;
  __int128 v8;
  std::string::size_type v9;

  result = (std::string *)boost::unit_test::output::junit_log_formatter::get_current_log_entry(a1);
  if (!result[4].__r_.__value_.__s.__data_[0])
  {
    v5 = (std::string::size_type *)result;
    size = result[3].__r_.__value_.__l.__size_;
    if (result[3].__r_.__value_.__r.__words[0] == size)
    {
      std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<char *>,std::__wrap_iter<char *>>(&v8, *a3, a3[1], a3[1] - *a3);
      result = (std::string *)operator new(0x28uLL);
      *(_OWORD *)&result->__r_.__value_.__r.__words[2] = v8;
      result[1].__r_.__value_.__l.__size_ = v9;
      v7 = *v5;
      result->__r_.__value_.__r.__words[0] = *v5;
      result->__r_.__value_.__l.__size_ = (std::string::size_type)v5;
      *(_QWORD *)(v7 + 8) = result;
      *v5 = (std::string::size_type)result;
      ++v5[2];
    }
    else
    {
      return std::string::append[abi:ne180100]<char const*,0>((std::string *)(size - 32), *a3, a3[1]);
    }
  }
  return result;
}

void sub_2183192D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *boost::unit_test::output::junit_log_formatter::log_entry_finish(boost::unit_test::output::junit_log_formatter *a1)
{
  _QWORD *result;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;

  result = boost::unit_test::output::junit_log_formatter::get_current_log_entry(a1);
  v2 = result;
  if (!*((_BYTE *)result + 96))
  {
    v3 = result[10];
    if (result[9] == v3)
    {
      std::string::basic_string[abi:ne180100]<0>(&v5, "\n\n");
      result = operator new(0x28uLL);
      *((_OWORD *)result + 1) = v5;
      result[4] = v6;
      v4 = *v2;
      *result = *v2;
      result[1] = v2;
      *(_QWORD *)(v4 + 8) = result;
      *v2 = result;
      ++v2[2];
    }
    else
    {
      result = std::string::append((std::string *)(v3 - 32), "\n\n");
      *(_BYTE *)(v3 - 4) = 1;
    }
  }
  *((_BYTE *)v2 + 96) = 0;
  return result;
}

void sub_218319390(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *boost::unit_test::output::junit_log_formatter::entry_context_start(boost::unit_test::output::junit_log_formatter *a1)
{
  std::string *result;
  std::string *v3;
  const std::string::value_type *v4;

  result = (std::string *)boost::unit_test::output::junit_log_formatter::get_current_log_entry(a1);
  if (!result[4].__r_.__value_.__s.__data_[0])
  {
    v3 = (std::string *)(result[3].__r_.__value_.__l.__size_ - 32);
    if (*((_BYTE *)a1 + 169))
      v4 = "\n- context:\n";
    else
      v4 = "\n\nCONTEXT:\n";
    return std::string::append(v3, v4);
  }
  return result;
}

void boost::unit_test::output::junit_log_formatter::log_entry_context(boost::unit_test::output::junit_log_formatter *a1, uint64_t a2, uint64_t a3, char **a4)
{
  uint64_t v6;
  const std::string::value_type *v7;
  std::string *v8;
  __int128 v9;
  std::string *v10;
  __int128 v11;
  void **v12;
  std::string::size_type v13;
  std::string v14;
  std::string v15;
  void *__p[2];
  int64_t v17;

  if (!*((_BYTE *)boost::unit_test::output::junit_log_formatter::get_current_log_entry(a1) + 96))
  {
    v6 = boost::unit_test::output::junit_log_formatter::get_current_log_entry(a1)[10];
    if (*((_BYTE *)a1 + 169))
      v7 = "  - '";
    else
      v7 = "- '";
    std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<char *>,std::__wrap_iter<char *>>(&v14, *a4, a4[1], a4[1] - *a4);
    v8 = std::string::insert(&v14, 0, v7);
    v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v15.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    v10 = std::string::append(&v15, "'\n");
    v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v17 = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    if (v17 >= 0)
      v12 = __p;
    else
      v12 = (void **)__p[0];
    if (v17 >= 0)
      v13 = HIBYTE(v17);
    else
      v13 = (std::string::size_type)__p[1];
    std::string::append((std::string *)(v6 - 32), (const std::string::value_type *)v12, v13);
    if (SHIBYTE(v17) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v15.__r_.__value_.__l.__data_);
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v14.__r_.__value_.__l.__data_);
  }
}

void sub_218319520(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void boost::unit_test::output::junit_log_formatter::get_default_stream_description(boost::unit_test::output::junit_log_formatter *this@<X0>, void **a2@<X8>)
{
  uint64_t v3;
  unsigned __int8 v4;
  unsigned __int8 v5;
  size_t size;
  void **v7;
  std::string *v8;
  uint64_t v9;
  size_t v10;
  std::string *v11;
  void *v12;
  void *v13;
  int v14;
  void *v15;
  void *v16;
  size_t v17;
  std::string *v18;
  std::string *v19;
  void **v20;
  std::string::size_type v21;
  std::string *v22;
  __int128 v23;
  std::string *v24;
  __int128 v25;
  int v26;
  size_t v27;
  std::string *v28;
  void *v29;
  void *v30;
  void *v31[2];
  unsigned __int8 v32;
  std::string v33;
  std::string v34;
  std::string __s;
  std::string v36;
  void *__p[2];
  uint64_t v38;
  _BYTE v39[40];
  void *v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  _QWORD v45[51];
  _QWORD v46[21];

  v46[19] = *MEMORY[0x24BDAC8D0];
  v3 = boost::unit_test::framework::master_test_suite(this);
  if (*(char *)(v3 + 167) < 0)
    std::string::__init_copy_ctor_external(&v36, *(const std::string::value_type **)(v3 + 144), *(_QWORD *)(v3 + 152));
  else
    v36 = *(std::string *)(v3 + 144);
  if ((v4 & 1) == 0
  {
    std::string::basic_string[abi:ne180100]<0>(boost::unit_test::output::junit_log_formatter::get_default_stream_description(void)const::to_replace, " ");
    std::string::basic_string[abi:ne180100]<0>(qword_254FF34B0, "\"");
    std::string::basic_string[abi:ne180100]<0>(qword_254FF34C8, "/");
    std::string::basic_string[abi:ne180100]<0>(qword_254FF34E0, "\\");
    std::string::basic_string[abi:ne180100]<0>(qword_254FF34F8, ":");
    __cxa_atexit((void (*)(void *))__cxx_global_array_dtor_1, 0, &dword_217E69000);
  }
  if ((v5 & 1) == 0
  {
    std::string::basic_string[abi:ne180100]<0>(boost::unit_test::output::junit_log_formatter::get_default_stream_description(void)const::replacement, "_");
    std::string::basic_string[abi:ne180100]<0>(qword_254FF3530, "_");
    std::string::basic_string[abi:ne180100]<0>(qword_254FF3548, "_");
    std::string::basic_string[abi:ne180100]<0>(qword_254FF3560, "_");
    std::string::basic_string[abi:ne180100]<0>(qword_254FF3578, "_");
    __cxa_atexit((void (*)(void *))__cxx_global_array_dtor_51, 0, &dword_217E69000);
  }
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__s, v36.__r_.__value_.__l.__data_, v36.__r_.__value_.__l.__size_);
  else
    __s = v36;
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v36.__r_.__value_.__l.__data_);
  *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v44;
  v36.__r_.__value_.__r.__words[2] = v45[0];
  HIBYTE(v45[0]) = 0;
  LOBYTE(v44) = 0;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s.__r_.__value_.__l.__data_);
  if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v36.__r_.__value_.__r.__words[2]);
  else
    size = v36.__r_.__value_.__l.__size_;
  v7 = __p;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, size + 4);
  if (v38 < 0)
    v7 = (void **)__p[0];
  if (size)
  {
    if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v8 = &v36;
    else
      v8 = (std::string *)v36.__r_.__value_.__r.__words[0];
    memmove(v7, v8, size);
  }
  strcpy((char *)v7 + size, ".xml");
  std::ifstream::basic_ifstream(&v44);
  if (SHIBYTE(v38) < 0)
    operator delete(__p[0]);
  v9 = MEMORY[0x24BEDB7E0];
  if ((*((_BYTE *)&v45[2] + *(_QWORD *)(v44 - 24)) & 5) != 0)
  {
    if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v10 = HIBYTE(v36.__r_.__value_.__r.__words[2]);
    else
      v10 = v36.__r_.__value_.__l.__size_;
    std::string::basic_string[abi:ne180100]((uint64_t)a2, v10 + 4);
    if (*((char *)a2 + 23) < 0)
      a2 = (void **)*a2;
    if (v10)
    {
      if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v11 = &v36;
      else
        v11 = (std::string *)v36.__r_.__value_.__r.__words[0];
      memmove(a2, v11, v10);
    }
    strcpy((char *)a2 + v10, ".xml");
    v12 = *(void **)v9;
    v13 = *(void **)(v9 + 24);
  }
  else
  {
    v14 = 0;
    v15 = (void *)*MEMORY[0x24BEDB800];
    v29 = *(void **)(MEMORY[0x24BEDB800] + 24);
    v12 = (void *)*MEMORY[0x24BEDB7E0];
    v30 = *(void **)(MEMORY[0x24BEDB7E0] + 24);
    v16 = (void *)(MEMORY[0x24BEDB848] + 16);
    while (1)
    {
      if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v17 = HIBYTE(v36.__r_.__value_.__r.__words[2]);
      else
        v17 = v36.__r_.__value_.__l.__size_;
      std::string::basic_string[abi:ne180100]((uint64_t)&v33, v17 + 1);
      if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v18 = &v33;
      else
        v18 = (std::string *)v33.__r_.__value_.__r.__words[0];
      if (v17)
      {
        if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v19 = &v36;
        else
          v19 = (std::string *)v36.__r_.__value_.__r.__words[0];
        memmove(v18, v19, v17);
      }
      *(_WORD *)((char *)&v18->__r_.__value_.__l.__data_ + v17) = 95;
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__p);
      std::ostream::operator<<();
      std::stringbuf::str();
      __p[0] = v15;
      *(void **)((char *)__p + *((_QWORD *)v15 - 3)) = v29;
      __p[1] = v16;
      if (v41 < 0)
        operator delete(v40);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x219A198F4](&v42);
      if ((v32 & 0x80u) == 0)
        v20 = v31;
      else
        v20 = (void **)v31[0];
      if ((v32 & 0x80u) == 0)
        v21 = v32;
      else
        v21 = (std::string::size_type)v31[1];
      v22 = std::string::append(&v33, (const std::string::value_type *)v20, v21);
      v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
      v34.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v23;
      v22->__r_.__value_.__l.__size_ = 0;
      v22->__r_.__value_.__r.__words[2] = 0;
      v22->__r_.__value_.__r.__words[0] = 0;
      v24 = std::string::append(&v34, ".xml");
      v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
      a2[2] = (void *)v24->__r_.__value_.__r.__words[2];
      *(_OWORD *)a2 = v25;
      v24->__r_.__value_.__l.__size_ = 0;
      v24->__r_.__value_.__r.__words[2] = 0;
      v24->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v34.__r_.__value_.__l.__data_);
      if ((char)v32 < 0)
        operator delete(v31[0]);
      if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v33.__r_.__value_.__l.__data_);
      std::ifstream::basic_ifstream(__p);
      v26 = *(_DWORD *)&v39[*((_QWORD *)__p[0] - 3)] & 5;
      __p[0] = v12;
      *(void **)((char *)__p + *((_QWORD *)v12 - 3)) = v30;
      MEMORY[0x219A1948C](&v38);
      std::istream::~istream();
      MEMORY[0x219A198F4](&v43);
      if (v26)
        break;
      if (*((char *)a2 + 23) < 0)
        operator delete(*a2);
      if (++v14 == 100)
      {
        if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v27 = HIBYTE(v36.__r_.__value_.__r.__words[2]);
        else
          v27 = v36.__r_.__value_.__l.__size_;
        std::string::basic_string[abi:ne180100]((uint64_t)a2, v27 + 4);
        if (*((char *)a2 + 23) < 0)
          a2 = (void **)*a2;
        if (v27)
        {
          if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v28 = &v36;
          else
            v28 = (std::string *)v36.__r_.__value_.__r.__words[0];
          memmove(a2, v28, v27);
        }
        strcpy((char *)a2 + v27, ".xml");
        break;
      }
    }
    v13 = v30;
  }
  *(_QWORD *)&v44 = v12;
  *(_QWORD *)((char *)&v45[-2] + *((_QWORD *)v12 - 3)) = v13;
  MEMORY[0x219A1948C](v45);
  std::istream::~istream();
  MEMORY[0x219A198F4](v46);
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v36.__r_.__value_.__l.__data_);
}

void sub_218319C18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a34 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

__n128 boost::unit_test::utils::replace_all_occurrences_of<std::string,std::string const*>@<Q0>(std::string *__s@<X0>, char *a2@<X1>, char *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  std::string *v6;
  uint64_t v7;
  char *v8;
  int64_t v9;
  std::string *v10;
  int64_t size;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int64_t v15;
  unsigned __int8 *v16;
  int v17;
  std::string *v18;
  int64_t v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  std::string::size_type v22;
  std::string::size_type v23;
  int v24;
  const std::string::value_type *v25;
  std::string::size_type v26;
  uint64_t v27;
  std::string *v28;
  std::string::size_type v29;
  char *v30;
  int64_t v31;
  char *v32;
  char *v33;
  int64_t v34;
  int v35;
  int64_t v36;
  char *v37;
  char *v38;
  __n128 result;
  uint64_t v44;

  v6 = __s;
  if (a2 != a3)
  {
    v7 = a4;
    if (a4 != a5)
    {
      v8 = a2;
      v9 = HIBYTE(__s->__r_.__value_.__r.__words[2]);
      do
      {
        v10 = v6;
        size = v9;
        if ((v9 & 0x80) != 0)
        {
          v10 = (std::string *)v6->__r_.__value_.__r.__words[0];
          size = v6->__r_.__value_.__l.__size_;
        }
        v12 = v8[23];
        v13 = *((_QWORD *)v8 + 1);
        if ((v12 & 0x80u) == 0)
          v14 = v8;
        else
          v14 = *(char **)v8;
        if ((v12 & 0x80u) == 0)
          v15 = v8[23];
        else
          v15 = *((_QWORD *)v8 + 1);
        if (!v15)
        {
          v22 = 0;
          goto LABEL_24;
        }
        if (size >= v15)
        {
          v44 = v9;
          v16 = (unsigned __int8 *)v10 + size;
          v17 = *v14;
          v18 = v10;
          while (1)
          {
            v19 = size - v15;
            if (v19 == -1 || (v20 = (unsigned __int8 *)memchr(v18, v17, v19 + 1)) == 0)
            {
LABEL_19:
              v6 = __s;
              v9 = v44;
              goto LABEL_20;
            }
            v21 = v20;
            if (!memcmp(v20, v14, v15))
              break;
            v18 = (std::string *)(v21 + 1);
            size = v16 - (v21 + 1);
            if (size < v15)
              goto LABEL_19;
          }
          v9 = v44;
          if (v21 == v16)
          {
LABEL_61:
            v6 = __s;
          }
          else
          {
            v22 = v21 - (unsigned __int8 *)v10;
            v6 = __s;
            if (v21 - (unsigned __int8 *)v10 != -1)
            {
LABEL_24:
              do
              {
                v23 = (v12 & 0x80u) == 0 ? v12 : v13;
                v24 = *(char *)(v7 + 23);
                v25 = v24 >= 0 ? (const std::string::value_type *)v7 : *(const std::string::value_type **)v7;
                v26 = v24 >= 0 ? *(unsigned __int8 *)(v7 + 23) : *(_QWORD *)(v7 + 8);
                std::string::replace(v6, v22, v23, v25, v26);
                v27 = *(char *)(v7 + 23) < 0 ? *(_QWORD *)(v7 + 8) : *(unsigned __int8 *)(v7 + 23);
                v9 = HIBYTE(v6->__r_.__value_.__r.__words[2]);
                if (SHIBYTE(v6->__r_.__value_.__r.__words[2]) < 0)
                {
                  v28 = (std::string *)v6->__r_.__value_.__r.__words[0];
                  v29 = v6->__r_.__value_.__l.__size_;
                }
                else
                {
                  v28 = v6;
                  v29 = HIBYTE(v6->__r_.__value_.__r.__words[2]);
                }
                v22 += v27;
                v12 = v8[23];
                v13 = *((_QWORD *)v8 + 1);
                v30 = (v12 & 0x80u) == 0 ? v8 : *(char **)v8;
                v31 = (v12 & 0x80u) == 0 ? v8[23] : *((_QWORD *)v8 + 1);
                if (v29 < v22)
                  break;
                if (v31)
                {
                  v32 = (char *)v28 + v22;
                  v33 = (char *)v28 + v29;
                  v34 = v29 - v22;
                  if ((uint64_t)(v29 - v22) < v31)
                    goto LABEL_61;
                  v44 = v9;
                  v35 = *v30;
                  while (1)
                  {
                    v36 = v34 - v31;
                    if (v36 == -1)
                      goto LABEL_19;
                    v37 = (char *)memchr(v32, v35, v36 + 1);
                    if (!v37)
                      goto LABEL_19;
                    v38 = v37;
                    if (!memcmp(v37, v30, v31))
                    {
                      v9 = v44;
                      if (v38 == v33)
                        goto LABEL_61;
                      v22 = v38 - (char *)v28;
                      v6 = __s;
                      break;
                    }
                    v32 = v38 + 1;
                    v34 = v33 - (v38 + 1);
                    if (v34 < v31)
                      goto LABEL_19;
                  }
                }
              }
              while (v22 != -1);
            }
          }
        }
LABEL_20:
        v8 += 24;
        if (v8 == a3)
          break;
        v7 += 24;
      }
      while (v7 != a5);
    }
  }
  result = *(__n128 *)&v6->__r_.__value_.__l.__data_;
  *(_OWORD *)a6 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  *(_QWORD *)(a6 + 16) = *((_QWORD *)&v6->__r_.__value_.__l + 2);
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  return result;
}

void boost::unit_test::output::junit_log_formatter::~junit_log_formatter(boost::unit_test::output::junit_log_formatter *this)
{
  void **v2;

  *(_QWORD *)this = off_24D939E40;
  std::__list_imp<unsigned long>::clear((_QWORD *)this + 18);
  v2 = (void **)((char *)this + 112);
  std::vector<boost::unit_test::output::junit_impl::junit_log_helper::assertion_entry>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 111) < 0)
    operator delete(*((void **)this + 11));
  std::__list_imp<std::string>::clear((_QWORD *)this + 8);
  std::__list_imp<std::string>::clear((_QWORD *)this + 5);
  std::__tree<std::__value_type<unsigned long,boost::unit_test::output::junit_impl::junit_log_helper>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,boost::unit_test::output::junit_impl::junit_log_helper>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,boost::unit_test::output::junit_impl::junit_log_helper>>>::destroy((uint64_t)this + 16, *((_QWORD **)this + 3));
}

{
  void **v2;

  *(_QWORD *)this = off_24D939E40;
  std::__list_imp<unsigned long>::clear((_QWORD *)this + 18);
  v2 = (void **)((char *)this + 112);
  std::vector<boost::unit_test::output::junit_impl::junit_log_helper::assertion_entry>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 111) < 0)
    operator delete(*((void **)this + 11));
  std::__list_imp<std::string>::clear((_QWORD *)this + 8);
  std::__list_imp<std::string>::clear((_QWORD *)this + 5);
  std::__tree<std::__value_type<unsigned long,boost::unit_test::output::junit_impl::junit_log_helper>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,boost::unit_test::output::junit_impl::junit_log_helper>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,boost::unit_test::output::junit_impl::junit_log_helper>>>::destroy((uint64_t)this + 16, *((_QWORD **)this + 3));
  MEMORY[0x219A19A08](this, 0x10B3C40071BC865);
}

uint64_t boost::unit_test::output::junit_log_formatter::set_log_level(uint64_t result, int a2)
{
  int v2;

  if (a2 >= 4)
    v2 = 4;
  else
    v2 = a2;
  if (a2 == 1)
    v2 = 0;
  *(_DWORD *)(result + 172) = v2;
  return result;
}

void std::allocator<boost::unit_test::output::junit_impl::junit_log_helper::assertion_entry>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 71) < 0)
    operator delete(*(void **)(a2 + 48));
  if (*(char *)(a2 + 47) < 0)
    operator delete(*(void **)(a2 + 24));
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

void boost::unit_test::output::junit_result_helper::visit(boost::unit_test::output::junit_result_helper *a1, unint64_t *a2)
{
  unsigned __int8 *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  BOOL v12;
  _QWORD *v13;
  _QWORD v14[3];
  _QWORD v15[2];
  void *__p[2];
  __int128 v17;
  _BYTE v18[32];
  void **v19;

  v5 = *((_QWORD *)a1 + 3);
  v8 = *(_QWORD **)(v5 + 8);
  v6 = (_QWORD *)(v5 + 8);
  v7 = v8;
  if (!v8)
    goto LABEL_12;
  v9 = a2[6];
  v10 = v6;
  do
  {
    v11 = v7[4];
    v12 = v11 >= v9;
    if (v11 >= v9)
      v13 = v7;
    else
      v13 = v7 + 1;
    if (v12)
      v10 = v7;
    v7 = (_QWORD *)*v13;
  }
  while (*v13);
  if (v10 != v6 && v9 >= v10[4])
  {
    boost::unit_test::output::junit_result_helper::output_detailed_logs(a1, (const boost::unit_test::output::junit_impl::junit_log_helper *)(v10 + 5), (const boost::unit_test::test_unit *)a2, v4[81], (const boost::unit_test::test_results *)v4);
  }
  else
  {
LABEL_12:
    v14[0] = v14;
    v14[1] = v14;
    v14[2] = 0;
    v15[0] = v15;
    v15[1] = v15;
    *(_OWORD *)__p = 0u;
    v17 = 0u;
    memset(v18, 0, 25);
    boost::unit_test::output::junit_result_helper::output_detailed_logs(a1, (const boost::unit_test::output::junit_impl::junit_log_helper *)v14, (const boost::unit_test::test_unit *)a2, 1, (const boost::unit_test::test_results *)v4);
    v19 = (void **)v18;
    std::vector<boost::unit_test::output::junit_impl::junit_log_helper::assertion_entry>::__destroy_vector::operator()[abi:ne180100](&v19);
    if (SHIBYTE(v17) < 0)
      operator delete(__p[1]);
    std::__list_imp<std::string>::clear(v15);
    std::__list_imp<std::string>::clear(v14);
  }
}

void sub_21831A228(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  boost::unit_test::output::junit_impl::junit_log_helper::~junit_log_helper(&a9);
  _Unwind_Resume(a1);
}

uint64_t boost::unit_test::output::junit_result_helper::test_suite_start(boost::unit_test::output::junit_result_helper *this, const boost::unit_test::test_suite *a2)
{
  uint64_t **v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  std::string::size_type size;
  std::string *v12;
  int v13;
  char v14;
  std::string::size_type v15;
  std::locale::__imp *v16;
  _QWORD *v17;
  _QWORD *v18;
  const std::locale::facet *v19;
  _QWORD *v20;
  const std::locale::facet *v21;
  _QWORD *v22;
  _QWORD *v23;
  const std::locale::facet *v24;
  _QWORD *v25;
  _QWORD *v26;
  const std::locale::facet *v27;
  _QWORD *v28;
  _QWORD *v29;
  const std::locale::facet *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  unint64_t v34;
  std::locale::__imp *locale;
  _QWORD *v36;
  const std::locale::facet *v37;
  _QWORD *v38;
  const std::locale::facet *v39;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  unint64_t v45;
  _QWORD *v46;
  unint64_t v47;
  BOOL v48;
  _QWORD *v49;
  std::locale v50;
  char *v51;
  unsigned __int8 v52;
  std::string __p[3];
  void *v54;
  char v55;
  uint64_t v56;
  std::string v57;
  std::locale v58;
  char *v59;

  if (*(_QWORD *)(*((_QWORD *)this + 2) + 48) == *((_QWORD *)a2 + 7))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)this + 1), (uint64_t)"<testsuite", 10);
    v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)this + 1), (uint64_t)" tests", 6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"=\"", 2);
    std::ostream::operator<<();
    __p[0].__r_.__value_.__s.__data_[0] = 34;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)__p, 1);
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)" skipped", 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"=\"", 2);
    std::ostream::operator<<();
    __p[0].__r_.__value_.__s.__data_[0] = 34;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)__p, 1);
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" errors", 7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"=\"", 2);
    std::ostream::operator<<();
    __p[0].__r_.__value_.__s.__data_[0] = 34;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)__p, 1);
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" failures", 9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"=\"", 2);
    std::ostream::operator<<();
    __p[0].__r_.__value_.__s.__data_[0] = 34;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)__p, 1);
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" id", 3);
    ++*((_QWORD *)this + 5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"=\"", 2);
    std::ostream::operator<<();
    __p[0].__r_.__value_.__s.__data_[0] = 34;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)__p, 1);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" name", 5);
    if (*((char *)a2 + 167) < 0)
      std::string::__init_copy_ctor_external(&v57, *((const std::string::value_type **)a2 + 18), *((_QWORD *)a2 + 19));
    else
      v57 = *(std::string *)((_BYTE *)a2 + 6);
    size = HIBYTE(v57.__r_.__value_.__r.__words[2]);
    v12 = &v57;
    if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    {
      size = v57.__r_.__value_.__l.__size_;
      v12 = (std::string *)v57.__r_.__value_.__r.__words[0];
    }
    if (size)
    {
      while (1)
      {
        v13 = v12->__r_.__value_.__s.__data_[0];
        if (v13 == 47)
          break;
        if (v13 == 32)
        {
          v14 = 95;
LABEL_12:
          v12->__r_.__value_.__s.__data_[0] = v14;
        }
        v12 = (std::string *)((char *)v12 + 1);
        if (!--size)
          goto LABEL_14;
      }
      v14 = 46;
      goto LABEL_12;
    }
LABEL_14:
    __p[0] = v57;
    memset(&v57, 0, sizeof(v57));
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"=\"", 2);
    v15 = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
    v16 = (std::locale::__imp *)__p;
    if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    {
      v15 = __p[0].__r_.__value_.__l.__size_;
      v16 = (std::locale::__imp *)__p[0].__r_.__value_.__r.__words[0];
    }
    v50.__locale_ = v16;
    v51 = (char *)v16 + v15;
    boost::unit_test::utils::print_escaped(v10, (char **)&v50);
    LOBYTE(v50.__locale_) = 34;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)&v50, 1);
    v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" time", 5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"=\"", 2);
    std::ostream::operator<<();
    LOBYTE(v50.__locale_) = 34;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)&v50, 1);
    v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)">", 1);
    std::ios_base::getloc((const std::ios_base *)((char *)v18 + *(_QWORD *)(*v18 - 24)));
    v19 = std::locale::use_facet(&v50, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v19->__vftable[2].~facet_0)(v19, 10);
    std::locale::~locale(&v50);
    std::ostream::put();
    std::ostream::flush();
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
    if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v57.__r_.__value_.__l.__data_);
    if (*((_BYTE *)this + 48))
    {
      v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)this + 1), (uint64_t)"<properties>", 12);
      std::ios_base::getloc((const std::ios_base *)((char *)v20 + *(_QWORD *)(*v20 - 24)));
      v21 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x24BEDB350]);
      ((void (*)(const std::locale::facet *, uint64_t))v21->__vftable[2].~facet_0)(v21, 10);
      std::locale::~locale((std::locale *)__p);
      std::ostream::put();
      std::ostream::flush();
      v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)this + 1), (uint64_t)"<property name=\"platform\" value", 31);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"=\"", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Mac OS", 6);
      __p[0].__r_.__value_.__s.__data_[0] = 34;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)__p, 1);
      v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)" />", 3);
      std::ios_base::getloc((const std::ios_base *)((char *)v23 + *(_QWORD *)(*v23 - 24)));
      v24 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x24BEDB350]);
      ((void (*)(const std::locale::facet *, uint64_t))v24->__vftable[2].~facet_0)(v24, 10);
      std::locale::~locale((std::locale *)__p);
      std::ostream::put();
      std::ostream::flush();
      v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)this + 1), (uint64_t)"<property name=\"compiler\" value", 31);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"=\"", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Clang version 16.0.0 (clang-1600.0.25.3) [+internal-os]", 55);
      __p[0].__r_.__value_.__s.__data_[0] = 34;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)__p, 1);
      v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)" />", 3);
      std::ios_base::getloc((const std::ios_base *)((char *)v26 + *(_QWORD *)(*v26 - 24)));
      v27 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x24BEDB350]);
      ((void (*)(const std::locale::facet *, uint64_t))v27->__vftable[2].~facet_0)(v27, 10);
      std::locale::~locale((std::locale *)__p);
      std::ostream::put();
      std::ostream::flush();
      v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)this + 1), (uint64_t)"<property name=\"stl\" value", 26);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"=\"", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"libc++ version 180100", 21);
      __p[0].__r_.__value_.__s.__data_[0] = 34;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)__p, 1);
      v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)" />", 3);
      std::ios_base::getloc((const std::ios_base *)((char *)v29 + *(_QWORD *)(*v29 - 24)));
      v30 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x24BEDB350]);
      ((void (*)(const std::locale::facet *, uint64_t))v30->__vftable[2].~facet_0)(v30, 10);
      std::locale::~locale((std::locale *)__p);
      std::ostream::put();
      std::ostream::flush();
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__p);
      v31 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)".", 1);
      v32 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)".", 1);
      std::ostream::operator<<();
      v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)this + 1), (uint64_t)"<property name=\"boost\" value", 28);
      std::stringbuf::str();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"=\"", 2);
      v34 = v52;
      locale = (std::locale::__imp *)&v50;
      if ((v52 & 0x80u) != 0)
      {
        locale = v50.__locale_;
        v34 = (unint64_t)v51;
      }
      v58.__locale_ = locale;
      v59 = (char *)locale + v34;
      boost::unit_test::utils::print_escaped(v33, (char **)&v58);
      LOBYTE(v58.__locale_) = 34;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)&v58, 1);
      v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)" />", 3);
      std::ios_base::getloc((const std::ios_base *)((char *)v36 + *(_QWORD *)(*v36 - 24)));
      v37 = std::locale::use_facet(&v58, MEMORY[0x24BEDB350]);
      ((void (*)(const std::locale::facet *, uint64_t))v37->__vftable[2].~facet_0)(v37, 10);
      std::locale::~locale(&v58);
      std::ostream::put();
      std::ostream::flush();
      if ((char)v52 < 0)
        operator delete(v50.__locale_);
      v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)this + 1), (uint64_t)"</properties>", 13);
      std::ios_base::getloc((const std::ios_base *)((char *)v38 + *(_QWORD *)(*v38 - 24)));
      v39 = std::locale::use_facet(&v50, MEMORY[0x24BEDB350]);
      ((void (*)(const std::locale::facet *, uint64_t))v39->__vftable[2].~facet_0)(v39, 10);
      std::locale::~locale(&v50);
      std::ostream::put();
      std::ostream::flush();
      __p[0].__r_.__value_.__r.__words[0] = *MEMORY[0x24BEDB800];
      *(std::string::size_type *)((char *)__p[0].__r_.__value_.__r.__words
                                + *(_QWORD *)(__p[0].__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
      __p[0].__r_.__value_.__l.__size_ = MEMORY[0x24BEDB848] + 16;
      if (v55 < 0)
        operator delete(v54);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x219A198F4](&v56);
    }
  }
  if (!*((_BYTE *)v4 + 81))
  {
    v41 = *((_QWORD *)this + 3);
    v44 = *(_QWORD **)(v41 + 8);
    v42 = (_QWORD *)(v41 + 8);
    v43 = v44;
    if (v44)
    {
      v45 = *((_QWORD *)a2 + 7);
      v46 = v42;
      do
      {
        v47 = v43[4];
        v48 = v47 >= v45;
        if (v47 >= v45)
          v49 = v43;
        else
          v49 = v43 + 1;
        if (v48)
          v46 = v43;
        v43 = (_QWORD *)*v49;
      }
      while (*v49);
      if (v46 != v42 && v45 >= v46[4])
        boost::unit_test::output::junit_result_helper::output_detailed_logs(this, (const boost::unit_test::output::junit_impl::junit_log_helper *)(v46 + 5), (const boost::unit_test::test_suite *)((char *)a2 + 8), 0, (const boost::unit_test::test_results *)v4);
    }
  }
  return 1;
}

void sub_21831AB50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, std::locale a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

boost::unit_test::output::junit_result_helper *boost::unit_test::output::junit_result_helper::test_suite_finish(boost::unit_test::output::junit_result_helper *this, const boost::unit_test::test_suite *a2)
{
  uint64_t v2;

  if (*(_QWORD *)(*((_QWORD *)this + 2) + 48) == *((_QWORD *)a2 + 7))
  {
    v2 = (uint64_t)this;
    boost::unit_test::output::junit_result_helper::write_testcase_system_out(this, *((const boost::unit_test::output::junit_impl::junit_log_helper **)this + 4), 0, 0);
    boost::unit_test::output::junit_result_helper::write_testcase_system_err(v2, *(const boost::unit_test::output::junit_impl::junit_log_helper **)(v2 + 32), 0, 0);
    return (boost::unit_test::output::junit_result_helper *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"</testsuite>", 12);
  }
  return this;
}

void boost::unit_test::output::junit_result_helper::~junit_result_helper(boost::unit_test::output::junit_result_helper *this)
{
  JUMPOUT(0x219A19A08);
}

boost::unit_test::output::junit_result_helper *boost::unit_test::output::junit_result_helper::output_detailed_logs(boost::unit_test::output::junit_result_helper *this, const boost::unit_test::output::junit_impl::junit_log_helper *a2, const boost::unit_test::test_unit *a3, int a4, const boost::unit_test::test_results *a5)
{
  boost::unit_test::output::junit_result_helper *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  _QWORD *v13;
  const std::locale::facet *v14;
  _QWORD *v15;
  const std::locale::facet *v16;
  char *i;
  std::locale v18;

  v9 = this;
  if (*(_DWORD *)a3 != 16)
    goto LABEL_8;
  v10 = *((_QWORD *)a2 + 9);
  v11 = *((_QWORD *)a2 + 10);
  if (v10 != v11)
  {
    v12 = 0;
    do
    {
      if (*(_DWORD *)(v10 + 72))
        ++v12;
      v10 += 80;
    }
    while (v10 != v11);
    if (v12)
    {
LABEL_8:
      boost::unit_test::output::junit_result_helper::write_testcase_header(this, a3, a5);
      if (a4)
      {
        v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)v9 + 1), (uint64_t)"<skipped/>", 10);
        std::ios_base::getloc((const std::ios_base *)((char *)v13 + *(_QWORD *)(*v13 - 24)));
        v14 = std::locale::use_facet(&v18, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v14->__vftable[2].~facet_0)(v14, 10);
        std::locale::~locale(&v18);
        std::ostream::put();
        std::ostream::flush();
      }
      else
      {
        for (i = (char *)*((_QWORD *)a2 + 9); i != *((char **)a2 + 10); i += 80)
          boost::unit_test::output::junit_result_helper::add_log_entry((uint64_t)v9, i);
      }
      boost::unit_test::output::junit_result_helper::write_testcase_system_out(v9, a2, a3, a4);
      boost::unit_test::output::junit_result_helper::write_testcase_system_err((uint64_t)v9, a2, a3, a5);
      v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)v9 + 1), (uint64_t)"</testcase>", 11);
      std::ios_base::getloc((const std::ios_base *)((char *)v15 + *(_QWORD *)(*v15 - 24)));
      v16 = std::locale::use_facet(&v18, MEMORY[0x24BEDB350]);
      ((void (*)(const std::locale::facet *, uint64_t))v16->__vftable[2].~facet_0)(v16, 10);
      std::locale::~locale(&v18);
      std::ostream::put();
      return (boost::unit_test::output::junit_result_helper *)std::ostream::flush();
    }
  }
  return this;
}

void sub_21831AE4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

void boost::unit_test::output::junit_result_helper::write_testcase_header(boost::unit_test::output::junit_result_helper *this, const boost::unit_test::test_unit *a2, const boost::unit_test::test_results *a3)
{
  std::string::size_type size;
  char v6;
  std::string *v7;
  std::string::size_type v8;
  int v9;
  char v10;
  _QWORD *v11;
  void *v12;
  _QWORD *v13;
  char *v14;
  void **v15;
  _QWORD *v16;
  std::string::size_type v17;
  std::locale::__imp *v18;
  _QWORD *v19;
  _QWORD *v20;
  const std::locale::facet *v21;
  std::string v22;
  void *__p[2];
  uint64_t v24;
  std::string v25;
  std::locale v26[2];
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  memset(&v25, 0, sizeof(v25));
  __p[0] = 0;
  __p[1] = 0;
  v24 = 0;
  if (*((_QWORD *)a2 + 6) == *(_QWORD *)(*((_QWORD *)this + 2) + 48))
  {
    MEMORY[0x219A19390](&v25, "boost_test");
    goto LABEL_22;
  }
  boost::unit_test::output::junit_result_helper::get_class_name(this, a2, (uint64_t)v26);
  if (SHIBYTE(v24) < 0)
    operator delete(__p[0]);
  *(_OWORD *)__p = *(_OWORD *)&v26[0].__locale_;
  v24 = v27;
  if (*((char *)a2 + 159) < 0)
    std::string::__init_copy_ctor_external(&v22, *((const std::string::value_type **)a2 + 17), *((_QWORD *)a2 + 18));
  else
    v22 = *(std::string *)((char *)a2 + 136);
  size = HIBYTE(v22.__r_.__value_.__r.__words[2]);
  v6 = HIBYTE(v22.__r_.__value_.__r.__words[2]);
  v7 = &v22;
  v8 = v22.__r_.__value_.__r.__words[0];
  if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
  {
    size = v22.__r_.__value_.__l.__size_;
    v7 = (std::string *)v22.__r_.__value_.__r.__words[0];
  }
  if (size)
  {
    while (1)
    {
      v9 = v7->__r_.__value_.__s.__data_[0];
      if (v9 == 47)
        break;
      if (v9 == 32)
      {
        v10 = 95;
LABEL_15:
        v7->__r_.__value_.__s.__data_[0] = v10;
      }
      v7 = (std::string *)((char *)v7 + 1);
      if (!--size)
      {
        v8 = v22.__r_.__value_.__r.__words[0];
        v6 = HIBYTE(v22.__r_.__value_.__r.__words[2]);
        goto LABEL_18;
      }
    }
    v10 = 46;
    goto LABEL_15;
  }
LABEL_18:
  v26[0] = (std::locale)v22.__r_.__value_.__r.__words[1];
  *(std::locale::__imp **)((char *)&v26[0].__locale_ + 7) = *(std::locale::__imp **)((char *)&v22.__r_.__value_.__r.__words[1]
                                                                                   + 7);
  memset(&v22, 0, sizeof(v22));
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v25.__r_.__value_.__l.__data_);
    v25.__r_.__value_.__r.__words[0] = v8;
    v25.__r_.__value_.__r.__words[1] = (std::string::size_type)v26[0];
    *(std::locale *)((char *)&v25.__r_.__value_.__r.__words[1] + 7) = *(std::locale *)((char *)&v26[0].__locale_ + 7);
    *((_BYTE *)&v25.__r_.__value_.__s + 23) = v6;
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v22.__r_.__value_.__l.__data_);
  }
  else
  {
    v25.__r_.__value_.__r.__words[0] = v8;
    v25.__r_.__value_.__r.__words[1] = (std::string::size_type)v26[0];
    *(std::locale *)((char *)&v25.__r_.__value_.__r.__words[1] + 7) = *(std::locale *)((char *)&v26[0].__locale_ + 7);
    *((_BYTE *)&v25.__r_.__value_.__s + 23) = v6;
  }
LABEL_22:
  if (*(_DWORD *)a2 == 16)
    std::string::append(&v25, "-setup-teardown");
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)this + 1), (uint64_t)"<testcase assertions", 20);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"=\"", 2);
  std::ostream::operator<<();
  LOBYTE(v26[0].__locale_) = 34;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v26, 1);
  v12 = (void *)HIBYTE(v24);
  if (v24 < 0)
    v12 = __p[1];
  if (v12)
  {
    v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)this + 1), (uint64_t)" classname", 10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"=\"", 2);
    v14 = (char *)HIBYTE(v24);
    v15 = __p;
    if (v24 < 0)
    {
      v15 = (void **)__p[0];
      v14 = (char *)__p[1];
    }
    v26[0].__locale_ = (std::locale::__imp *)v15;
    v26[1].__locale_ = (std::locale::__imp *)&v14[(_QWORD)v15];
    boost::unit_test::utils::print_escaped(v13, (char **)v26);
    LOBYTE(v26[0].__locale_) = 34;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v26, 1);
  }
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)this + 1), (uint64_t)" name", 5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"=\"", 2);
  v17 = HIBYTE(v25.__r_.__value_.__r.__words[2]);
  v18 = (std::locale::__imp *)&v25;
  if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
  {
    v17 = v25.__r_.__value_.__l.__size_;
    v18 = (std::locale::__imp *)v25.__r_.__value_.__r.__words[0];
  }
  v26[0].__locale_ = v18;
  v26[1].__locale_ = (std::locale::__imp *)((char *)v18 + v17);
  boost::unit_test::utils::print_escaped(v16, (char **)v26);
  LOBYTE(v26[0].__locale_) = 34;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v26, 1);
  v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" time", 5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"=\"", 2);
  std::ostream::operator<<();
  LOBYTE(v26[0].__locale_) = 34;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)v26, 1);
  v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)">", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v20 + *(_QWORD *)(*v20 - 24)));
  v21 = std::locale::use_facet(v26, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v21->__vftable[2].~facet_0)(v21, 10);
  std::locale::~locale(v26);
  std::ostream::put();
  std::ostream::flush();
  if (SHIBYTE(v24) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
}

void sub_21831B26C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,std::locale a25)
{
  if (a18 < 0)
    operator delete(__p);
  if (a24 < 0)
    operator delete(a19);
  _Unwind_Resume(exception_object);
}

void boost::unit_test::output::junit_result_helper::add_log_entry(uint64_t a1, char *a2)
{
  int v4;
  const char *v5;
  _QWORD *v6;
  void *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  int v11;
  BOOL v12;
  char *v13;
  uint64_t v14;
  _QWORD *v15;
  char *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  char *p_p;
  char *v21;
  _QWORD *v22;
  void *v23;
  uint64_t v24;
  _QWORD *v25;
  void *__p;
  char *v27;
  unsigned __int8 v28;
  __int128 v29;
  _QWORD *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;

  v31 = 0;
  v32 = 0;
  v33 = 0;
  v4 = *((_DWORD *)a2 + 18);
  if (v4 == 1)
  {
    v5 = "error";
  }
  else
  {
    if (v4 != 2)
      return;
    v5 = "failure";
  }
  MEMORY[0x219A19390](&v31, v5);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a1 + 8), (uint64_t)"<", 1);
  if (v33 >= 0)
    v7 = &v31;
  else
    v7 = v31;
  if (v33 >= 0)
    v8 = HIBYTE(v33);
  else
    v8 = v32;
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v7, v8);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" message", 8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"=\"", 2);
  v11 = a2[23];
  v12 = v11 < 0;
  v13 = *(char **)a2;
  if (v11 >= 0)
    v13 = a2;
  v14 = a2[23];
  if (v12)
    v14 = *((_QWORD *)a2 + 1);
  __p = v13;
  v27 = &v13[v14];
  boost::unit_test::utils::print_escaped(v10, (char **)&__p);
  LOBYTE(__p) = 34;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)&__p, 1);
  v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" type", 5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"=\"", 2);
  v16 = (char *)*((_QWORD *)a2 + 3);
  v17 = a2[47];
  if (v17 >= 0)
    v16 = a2 + 24;
  v18 = *((_QWORD *)a2 + 4);
  if (v17 >= 0)
    v18 = a2[47];
  __p = v16;
  v27 = &v16[v18];
  boost::unit_test::utils::print_escaped(v15, (char **)&__p);
  LOBYTE(__p) = 34;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)&__p, 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)">", 1);
  v19 = a2[71];
  if ((v19 & 0x80u) != 0)
    v19 = *((_QWORD *)a2 + 7);
  if (v19)
  {
    v30 = *(_QWORD **)(a1 + 8);
    std::operator+<char>();
    p_p = (char *)__p;
    if ((v28 & 0x80u) == 0)
      p_p = (char *)&__p;
    v21 = (char *)v28;
    if ((v28 & 0x80u) != 0)
      v21 = v27;
    *(_QWORD *)&v29 = p_p;
    *((_QWORD *)&v29 + 1) = &v21[(_QWORD)p_p];
    boost::unit_test::utils::operator<<(&v30, &v29);
    if ((char)v28 < 0)
      operator delete(__p);
  }
  v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a1 + 8), (uint64_t)"</", 2);
  if (v33 >= 0)
    v23 = &v31;
  else
    v23 = v31;
  if (v33 >= 0)
    v24 = HIBYTE(v33);
  else
    v24 = v32;
  v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)v23, v24);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)">", 1);
  if (SHIBYTE(v33) < 0)
    operator delete(v31);
}

void sub_21831B520(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a15 < 0)
    operator delete(__p);
  if (a24 < 0)
    operator delete(a19);
  _Unwind_Resume(exception_object);
}

void boost::unit_test::output::junit_result_helper::write_testcase_system_out(boost::unit_test::output::junit_result_helper *this, const boost::unit_test::output::junit_impl::junit_log_helper *a2, const boost::unit_test::test_unit *a3, char a4)
{
  uint64_t v8;
  const boost::unit_test::output::junit_impl::junit_log_helper *v9;
  uint64_t *i;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  std::string __p;
  uint64_t v17;
  std::string v18;
  char v19;

  v8 = *((_QWORD *)this + 1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "system-out");
  v17 = v8;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v18, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    v19 = 1;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v18 = __p;
    v19 = 1;
  }
  v9 = a2;
  if ((a4 & 1) != 0)
  {
    boost::unit_test::output::junit_result_helper::build_skipping_chain(this, a3, &v14);
    for (i = v15; i != &v14; i = (uint64_t *)i[1])
      boost::unit_test::output::junit_result_helper::conditional_cdata_helper::operator()(&v17, (uint64_t)(i + 2));
    std::__list_imp<std::string>::clear(&v14);
    v9 = a2;
  }
  while (1)
  {
    v9 = (const boost::unit_test::output::junit_impl::junit_log_helper *)*((_QWORD *)v9 + 1);
    if (v9 == a2)
      break;
    boost::unit_test::output::junit_result_helper::conditional_cdata_helper::operator()(&v17, (uint64_t)v9 + 16);
  }
  v12 = *((_QWORD *)a2 + 9);
  v11 = *((_QWORD *)a2 + 10);
  if (v12 != v11)
  {
    v13 = v12 + 48;
    do
    {
      if (!*(_DWORD *)(v13 + 24))
      {
        boost::unit_test::output::junit_result_helper::conditional_cdata_helper::operator()(&v17, v13);
        v11 = *((_QWORD *)a2 + 10);
      }
      v13 += 80;
    }
    while (v13 - 48 != v11);
  }
  boost::unit_test::output::junit_result_helper::conditional_cdata_helper::~conditional_cdata_helper((boost::unit_test::output::junit_result_helper::conditional_cdata_helper *)&v17);
}

void sub_21831B6B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t boost::unit_test::output::junit_result_helper::write_testcase_system_err(uint64_t this, const boost::unit_test::output::junit_impl::junit_log_helper *a2, const boost::unit_test::test_unit *a3, const boost::unit_test::test_results *a4)
{
  uint64_t v6;
  int v7;
  BOOL v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  _QWORD *v11;
  const std::locale::facet *v12;
  _QWORD *v13;
  std::string::size_type size;
  std::string *v15;
  unsigned __int8 *v16;
  char *v17;
  std::string *v18;
  std::string *p_dst;
  std::string::size_type v20;
  _QWORD *v21;
  std::string::size_type v22;
  std::string *v23;
  unsigned __int8 *v24;
  char *v25;
  std::string *v26;
  std::string *v27;
  std::string::size_type v28;
  _QWORD *v29;
  const std::locale::facet *v30;
  _QWORD *v31;
  int v32;
  char *v33;
  uint64_t v34;
  _QWORD *v35;
  const std::locale::facet *v36;
  _QWORD *v37;
  std::string *v38;
  std::string::size_type v39;
  const std::locale::facet *v40;
  _QWORD *v41;
  const std::locale::facet *v42;
  const std::locale::facet *v43;
  _QWORD *v44;
  const std::locale::facet *v45;
  uint64_t i;
  int v47;
  uint64_t v48;
  uint64_t v49;
  const std::locale::facet *v50;
  _QWORD *v51;
  const std::locale::facet *v52;
  std::string::size_type v53;
  void *v54[2];
  char v55;
  void *__p[2];
  uint64_t v57;
  std::string __dst;
  uint64_t v59;
  char v60;
  __int128 v61;
  std::string v62;
  std::string v63;
  _QWORD v64[11];
  char v65;
  uint64_t v66;

  v6 = this;
  if (a4 && !*((_BYTE *)a4 + 81))
  {
    this = boost::unit_test::test_results::passed(a4);
    v7 = this ^ 1;
  }
  else
  {
    v7 = 0;
  }
  if (*((_QWORD *)a2 + 5))
    v8 = 0;
  else
    v8 = v7 == 0;
  if (v8)
    return this;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v64);
  if (v7)
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)"Failures detected in:", 21);
  else
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)"ERROR STREAM:", 13);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet((const std::locale *)&__dst, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale((std::locale *)&__dst);
  std::ostream::put();
  std::ostream::flush();
  if (*(_DWORD *)a3 != 16)
  {
    v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)"- test case: ", 13);
    boost::unit_test::test_unit::full_name(a3, &v62);
    size = HIBYTE(v62.__r_.__value_.__r.__words[2]);
    if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v15 = &v62;
    else
      v15 = (std::string *)v62.__r_.__value_.__r.__words[0];
    if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = v62.__r_.__value_.__l.__size_;
    LOBYTE(v54[0]) = 10;
    v16 = std::remove[abi:ne180100]<std::__wrap_iter<char *>,char>(v15, (unsigned __int8 *)v15 + size, (unsigned __int8 *)v54);
    v17 = (char *)&v62 + HIBYTE(v62.__r_.__value_.__r.__words[2]);
    if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    {
      v18 = &v62;
    }
    else
    {
      v17 = (char *)(v62.__r_.__value_.__r.__words[0] + v62.__r_.__value_.__l.__size_);
      v18 = (std::string *)v62.__r_.__value_.__r.__words[0];
    }
    std::string::erase(&v62, v16 - (unsigned __int8 *)v18, v17 - (char *)v16);
    __dst = v62;
    memset(&v62, 0, sizeof(v62));
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_dst = &__dst;
    else
      p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v20 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    else
      v20 = __dst.__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)p_dst, v20);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
    if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v62.__r_.__value_.__l.__data_);
    if (*((char *)a3 + 183) < 0)
    {
      if (!*((_QWORD *)a3 + 21))
      {
LABEL_62:
        std::ios_base::getloc((const std::ios_base *)((char *)v64 + *(_QWORD *)(v64[0] - 24)));
        v36 = std::locale::use_facet((const std::locale *)&__dst, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v36->__vftable[2].~facet_0)(v36, 10);
        std::locale::~locale((std::locale *)&__dst);
        std::ostream::put();
        std::ostream::flush();
        v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)"- file: ", 8);
        v61 = *(_OWORD *)((char *)a3 + 24);
        boost::unit_test::output::file_basename((unsigned __int8 **)&v61, (unsigned __int8 **)v54);
        std::string::basic_string[abi:ne180100](&__dst, v54[0], (char *)v54[1] - (char *)v54[0]);
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v38 = &__dst;
        else
          v38 = (std::string *)__dst.__r_.__value_.__r.__words[0];
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v39 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
        else
          v39 = __dst.__r_.__value_.__l.__size_;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)v38, v39);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
        std::ios_base::getloc((const std::ios_base *)((char *)v37 + *(_QWORD *)(*v37 - 24)));
        v40 = std::locale::use_facet((const std::locale *)&__dst, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v40->__vftable[2].~facet_0)(v40, 10);
        std::locale::~locale((std::locale *)&__dst);
        std::ostream::put();
        std::ostream::flush();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"- line: ", 8);
        v41 = (_QWORD *)std::ostream::operator<<();
        std::ios_base::getloc((const std::ios_base *)((char *)v41 + *(_QWORD *)(*v41 - 24)));
        v42 = std::locale::use_facet((const std::locale *)&__dst, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v42->__vftable[2].~facet_0)(v42, 10);
        std::locale::~locale((std::locale *)&__dst);
        std::ostream::put();
        std::ostream::flush();
        goto LABEL_71;
      }
    }
    else if (!*((_BYTE *)a3 + 183))
    {
      goto LABEL_62;
    }
    v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)" '", 2);
    v32 = *((char *)a3 + 183);
    if (v32 >= 0)
      v33 = (char *)a3 + 160;
    else
      v33 = (char *)*((_QWORD *)a3 + 20);
    if (v32 >= 0)
      v34 = *((unsigned __int8 *)a3 + 183);
    else
      v34 = *((_QWORD *)a3 + 21);
    v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)v33, v34);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"'", 1);
    goto LABEL_62;
  }
  if (*((_QWORD *)a3 + 6) == *(_QWORD *)(*(_QWORD *)(v6 + 16) + 48))
  {
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)" boost.test global setup/teardown", 33);
    std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(_QWORD *)(*v11 - 24)));
    v12 = std::locale::use_facet((const std::locale *)&__dst, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
    std::locale::~locale((std::locale *)&__dst);
    std::ostream::put();
    std::ostream::flush();
  }
  else
  {
    v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)"- test suite: ", 14);
    boost::unit_test::test_unit::full_name(a3, &v63);
    v22 = HIBYTE(v63.__r_.__value_.__r.__words[2]);
    if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v23 = &v63;
    else
      v23 = (std::string *)v63.__r_.__value_.__r.__words[0];
    if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v22 = v63.__r_.__value_.__l.__size_;
    LOBYTE(v54[0]) = 10;
    v24 = std::remove[abi:ne180100]<std::__wrap_iter<char *>,char>(v23, (unsigned __int8 *)v23 + v22, (unsigned __int8 *)v54);
    v25 = (char *)&v63 + HIBYTE(v63.__r_.__value_.__r.__words[2]);
    if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    {
      v26 = &v63;
    }
    else
    {
      v25 = (char *)(v63.__r_.__value_.__r.__words[0] + v63.__r_.__value_.__l.__size_);
      v26 = (std::string *)v63.__r_.__value_.__r.__words[0];
    }
    std::string::erase(&v63, v24 - (unsigned __int8 *)v26, v25 - (char *)v24);
    __dst = v63;
    memset(&v63, 0, sizeof(v63));
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v27 = &__dst;
    else
      v27 = (std::string *)__dst.__r_.__value_.__r.__words[0];
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v28 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    else
      v28 = __dst.__r_.__value_.__l.__size_;
    v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v27, v28);
    std::ios_base::getloc((const std::ios_base *)((char *)v29 + *(_QWORD *)(*v29 - 24)));
    v30 = std::locale::use_facet((const std::locale *)v54, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v30->__vftable[2].~facet_0)(v30, 10);
    std::locale::~locale((std::locale *)v54);
    std::ostream::put();
    std::ostream::flush();
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
    if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v63.__r_.__value_.__l.__data_);
  }
LABEL_71:
  if (*((_QWORD *)a2 + 5))
  {
    std::ios_base::getloc((const std::ios_base *)((char *)v64 + *(_QWORD *)(v64[0] - 24)));
    v43 = std::locale::use_facet((const std::locale *)&__dst, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v43->__vftable[2].~facet_0)(v43, 10);
    std::locale::~locale((std::locale *)&__dst);
    std::ostream::put();
    std::ostream::flush();
    v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)"STDERR BEGIN: ------------", 26);
    std::ios_base::getloc((const std::ios_base *)((char *)v44 + *(_QWORD *)(*v44 - 24)));
    v45 = std::locale::use_facet((const std::locale *)&__dst, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v45->__vftable[2].~facet_0)(v45, 10);
    std::locale::~locale((std::locale *)&__dst);
    std::ostream::put();
    std::ostream::flush();
  }
  for (i = *((_QWORD *)a2 + 4);
        (const boost::unit_test::output::junit_impl::junit_log_helper *)i != (const boost::unit_test::output::junit_impl::junit_log_helper *)((char *)a2 + 24);
        i = *(_QWORD *)(i + 8))
  {
    v47 = *(char *)(i + 39);
    if (v47 >= 0)
      v48 = i + 16;
    else
      v48 = *(_QWORD *)(i + 16);
    if (v47 >= 0)
      v49 = *(unsigned __int8 *)(i + 39);
    else
      v49 = *(_QWORD *)(i + 24);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, v48, v49);
  }
  if (*((_QWORD *)a2 + 5))
  {
    std::ios_base::getloc((const std::ios_base *)((char *)v64 + *(_QWORD *)(v64[0] - 24)));
    v50 = std::locale::use_facet((const std::locale *)&__dst, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v50->__vftable[2].~facet_0)(v50, 10);
    std::locale::~locale((std::locale *)&__dst);
    std::ostream::put();
    std::ostream::flush();
    v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)"STDERR END    ------------", 26);
    std::ios_base::getloc((const std::ios_base *)((char *)v51 + *(_QWORD *)(*v51 - 24)));
    v52 = std::locale::use_facet((const std::locale *)&__dst, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v52->__vftable[2].~facet_0)(v52, 10);
    std::locale::~locale((std::locale *)&__dst);
    std::ostream::put();
    std::ostream::flush();
  }
  v53 = *(_QWORD *)(v6 + 8);
  std::string::basic_string[abi:ne180100]<0>(__p, "system-err");
  __dst.__r_.__value_.__r.__words[0] = v53;
  if (SHIBYTE(v57) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&__dst.__r_.__value_.__r.__words[1], (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    v60 = 1;
    if (SHIBYTE(v57) < 0)
      operator delete(__p[0]);
  }
  else
  {
    *(_OWORD *)&__dst.__r_.__value_.__r.__words[1] = *(_OWORD *)__p;
    v59 = v57;
    v60 = 1;
  }
  std::stringbuf::str();
  boost::unit_test::output::junit_result_helper::conditional_cdata_helper::operator()(&__dst, (uint64_t)v54);
  if (v55 < 0)
    operator delete(v54[0]);
  boost::unit_test::output::junit_result_helper::conditional_cdata_helper::~conditional_cdata_helper((boost::unit_test::output::junit_result_helper::conditional_cdata_helper *)&__dst);
  v64[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v64 + *(_QWORD *)(v64[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v64[1] = MEMORY[0x24BEDB848] + 16;
  if (v65 < 0)
    operator delete((void *)v64[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x219A198F4](&v66);
}

void sub_21831BFB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,std::locale a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,char a45)
{
  std::ostringstream::~ostringstream((uint64_t)&a45);
  _Unwind_Resume(a1);
}

std::string *boost::unit_test::output::junit_result_helper::get_class_name@<X0>(boost::unit_test::output::junit_result_helper *this@<X0>, const boost::unit_test::test_unit *a2@<X1>, uint64_t a3@<X8>)
{
  std::string *result;
  uint64_t *v7;
  _DWORD *v8;
  _DWORD *v9;
  std::string::size_type size;
  std::string *p_p;
  int v12;
  char v13;
  std::string *v14;
  __int128 v15;
  int v16;
  const std::string::value_type *v17;
  std::string::size_type v18;
  std::string *v19;
  std::string::size_type v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  std::string __p;
  std::string v25;
  std::string v26;
  _QWORD v27[3];

  v27[2] = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  result = (std::string *)*((_QWORD *)a2 + 7);
  if (result != (std::string *)0xFFFFFFFFLL && result != *(std::string **)(*((_QWORD *)this + 2) + 48))
  {
    v7 = (uint64_t *)(a3 + 8);
    do
    {
      v8 = boost::unit_test::framework::get((boost::unit_test::framework::impl::_anonymous_namespace_ *)result, 17);
      v9 = v8;
      if (*((char *)v8 + 159) < 0)
        std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)v8 + 17), *((_QWORD *)v8 + 18));
      else
        __p = *(std::string *)(v8 + 34);
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        size = __p.__r_.__value_.__l.__size_;
      if (size)
      {
        while (1)
        {
          v12 = p_p->__r_.__value_.__s.__data_[0];
          if (v12 == 47)
            break;
          if (v12 == 32)
          {
            v13 = 95;
LABEL_19:
            p_p->__r_.__value_.__s.__data_[0] = v13;
          }
          p_p = (std::string *)((char *)p_p + 1);
          if (!--size)
            goto LABEL_21;
        }
        v13 = 46;
        goto LABEL_19;
      }
LABEL_21:
      v25 = __p;
      memset(&__p, 0, sizeof(__p));
      v14 = std::string::append(&v25, ".");
      v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
      v26.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v15;
      v14->__r_.__value_.__l.__size_ = 0;
      v14->__r_.__value_.__r.__words[2] = 0;
      v14->__r_.__value_.__r.__words[0] = 0;
      v16 = *(char *)(a3 + 23);
      if (v16 >= 0)
        v17 = (const std::string::value_type *)a3;
      else
        v17 = *(const std::string::value_type **)a3;
      if (v16 >= 0)
        v18 = *(unsigned __int8 *)(a3 + 23);
      else
        v18 = *(_QWORD *)(a3 + 8);
      v19 = std::string::append(&v26, v17, v18);
      v20 = v19->__r_.__value_.__r.__words[0];
      v27[0] = v19->__r_.__value_.__l.__size_;
      *(_QWORD *)((char *)v27 + 7) = *(std::string::size_type *)((char *)&v19->__r_.__value_.__r.__words[1] + 7);
      v21 = HIBYTE(v19->__r_.__value_.__r.__words[2]);
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      if (*(char *)(a3 + 23) < 0)
        operator delete(*(void **)a3);
      *(_QWORD *)a3 = v20;
      *v7 = v27[0];
      *(_QWORD *)(a3 + 15) = *(_QWORD *)((char *)v27 + 7);
      *(_BYTE *)(a3 + 23) = v21;
      if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v26.__r_.__value_.__l.__data_);
      if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v25.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      result = (std::string *)*((_QWORD *)v9 + 7);
    }
    while (result != (std::string *)0xFFFFFFFFLL && result != *(std::string **)(*((_QWORD *)this + 2) + 48));
    if (*(char *)(a3 + 23) < 0)
    {
      v22 = *v7;
      if (!*v7)
        return result;
      v23 = *(_QWORD *)a3 + v22;
    }
    else
    {
      v22 = *(unsigned __int8 *)(a3 + 23);
      if (!*(_BYTE *)(a3 + 23))
        return result;
      v23 = a3 + v22;
    }
    if (*(_BYTE *)(v23 - 1) == 46)
      return std::string::erase((std::string *)a3, v22 - 1, 0xFFFFFFFFFFFFFFFFLL);
  }
  return result;
}

void sub_21831C330(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (*(char *)(v28 + 23) < 0)
    operator delete(*(void **)v28);
  _Unwind_Resume(exception_object);
}

void boost::unit_test::utils::print_escaped(_QWORD *a1, char **a2)
{
  unsigned __int8 v3;
  char *v4;
  char *v5;
  int v6;
  _QWORD *v7;
  _UNKNOWN **v8;
  int v9;
  BOOL v10;
  _QWORD *v11;
  _QWORD *v12;
  const char *v13;
  size_t v14;
  _QWORD *v15;
  char **v16;
  int v17;
  char v18[8];
  const char *v19;
  char v20;
  const char *v21;
  char v22;
  const char *v23;
  char v24;
  const char *v25;
  char v26;
  const char *v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  if ((v3 & 1) == 0)
  {
    v16 = a2;
    a2 = v16;
    if (v17)
    {
      v18[0] = 60;
      v19 = "lt";
      v20 = 62;
      v21 = "gt";
      v22 = 38;
      v23 = "amp";
      v24 = 39;
      v25 = "apos";
      v26 = 34;
      v27 = "quot";
      std::map<char,char const*>::map[abi:ne180100]((uint64_t)&boost::unit_test::utils::print_escaped(std::ostream &,boost::unit_test::basic_cstring<char const>)::char_type, v18, 5);
      __cxa_atexit((void (*)(void *))std::map<char,char const*>::~map[abi:ne180100], &boost::unit_test::utils::print_escaped(std::ostream &,boost::unit_test::basic_cstring<char const>)::char_type, &dword_217E69000);
      a2 = v16;
    }
  }
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      v6 = *v4;
      v7 = off_254FD4710;
      if (!off_254FD4710)
        goto LABEL_13;
      v8 = &off_254FD4710;
      do
      {
        v9 = *((char *)v7 + 32);
        v10 = v9 < v6;
        if (v9 >= v6)
          v11 = v7;
        else
          v11 = v7 + 1;
        if (!v10)
          v8 = (_UNKNOWN **)v7;
        v7 = (_QWORD *)*v11;
      }
      while (*v11);
      if (v8 != &off_254FD4710 && v6 >= *((char *)v8 + 32))
      {
        v18[0] = 38;
        v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v18, 1);
        v13 = (const char *)v8[5];
        v14 = strlen(v13);
        v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v13, v14);
        v18[0] = 59;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v18, 1);
      }
      else
      {
LABEL_13:
        v18[0] = *v4;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v18, 1);
      }
      ++v4;
    }
    while (v4 != v5);
  }
}

void sub_21831C59C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t std::map<char,char const*>::~map[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy(a1, *(_QWORD **)(a1 + 8));
  return a1;
}

uint64_t std::map<char,char const*>::map[abi:ne180100](uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 16 * a3;
    do
    {
      std::__tree<std::__value_type<char,char const*>,std::__map_value_compare<char,std::__value_type<char,char const*>,std::less<char>,true>,std::allocator<std::__value_type<char,char const*>>>::__emplace_hint_unique_key_args<char,std::pair<char const,char const*> const&>((uint64_t **)a1, v4, a2, a2);
      a2 += 16;
      v6 -= 16;
    }
    while (v6);
  }
  return a1;
}

void sub_21831C648(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<char,char const*>,std::__map_value_compare<char,std::__value_type<char,char const*>,std::less<char>,true>,std::allocator<std::__value_type<char,char const*>>>::__emplace_hint_unique_key_args<char,std::pair<char const,char const*> const&>(uint64_t **a1, uint64_t *a2, char *a3, _OWORD *a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v10;
  uint64_t *v11;

  v6 = std::__tree<std::__value_type<char,char const*>,std::__map_value_compare<char,std::__value_type<char,char const*>,std::less<char>,true>,std::allocator<std::__value_type<char,char const*>>>::__find_equal<char>(a1, a2, &v11, &v10, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = (uint64_t *)operator new(0x30uLL);
    *((_OWORD *)v7 + 2) = *a4;
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, (uint64_t)v11, v8, v7);
  }
  return v7;
}

uint64_t *std::__tree<std::__value_type<char,char const*>,std::__map_value_compare<char,std::__value_type<char,char const*>,std::less<char>,true>,std::allocator<std::__value_type<char,char const*>>>::__find_equal<char>(_QWORD *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, char *a5)
{
  uint64_t *v5;
  int v6;
  int v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  BOOL v14;
  int v15;
  uint64_t v16;
  uint64_t *v17;
  int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  int v22;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, v7 = *((char *)a2 + 32), v6 < v7))
  {
    v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (uint64_t *)*a2;
      do
      {
        v10 = v9;
        v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      v13 = a2;
      do
      {
        v10 = (uint64_t *)v13[2];
        v14 = *v10 == (_QWORD)v13;
        v13 = v10;
      }
      while (v14);
    }
    v15 = *a5;
    if (*((char *)v10 + 32) < v15)
      goto LABEL_17;
    v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v17 = (uint64_t *)v16;
          v18 = *(char *)(v16 + 32);
          if (v15 >= v18)
            break;
          v16 = *v17;
          v5 = v17;
          if (!*v17)
            goto LABEL_29;
        }
        if (v18 >= v15)
          break;
        v5 = v17 + 1;
        v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  v11 = a2[1];
  if (v11)
  {
    v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      v14 = *a4 == (_QWORD)v19;
      v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((char *)a4 + 32))
  {
    v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v21 = (uint64_t *)v20;
          v22 = *(char *)(v20 + 32);
          if (v6 >= v22)
            break;
          v20 = *v21;
          v5 = v21;
          if (!*v21)
            goto LABEL_48;
        }
        if (v22 >= v6)
          break;
        v5 = v21 + 1;
        v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

_QWORD *boost::unit_test::utils::operator<<(_QWORD **a1, __int128 *a2)
{
  _QWORD *v4;
  void *p_p;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  __int128 v12;
  void *__p;
  uint64_t v14;
  unsigned __int8 v15;

  v4 = *a1;
  std::string::basic_string[abi:ne180100](&__p, "<![CDATA[", 9uLL);
  if ((v15 & 0x80u) == 0)
    p_p = &__p;
  else
    p_p = __p;
  if ((v15 & 0x80u) == 0)
    v6 = v15;
  else
    v6 = v14;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)p_p, v6);
  if ((char)v15 < 0)
    operator delete(__p);
  v7 = *a1;
  v12 = *a2;
  boost::unit_test::utils::print_escaped_cdata(v7, (char **)&v12);
  v8 = *a1;
  std::string::basic_string[abi:ne180100](&__p, "]]>", 3uLL);
  if ((v15 & 0x80u) == 0)
    v9 = &__p;
  else
    v9 = __p;
  if ((v15 & 0x80u) == 0)
    v10 = v15;
  else
    v10 = v14;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
  if ((char)v15 < 0)
    operator delete(__p);
  return v8;
}

void sub_21831C96C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void boost::unit_test::utils::print_escaped_cdata(_QWORD *a1, char **a2)
{
  unsigned __int8 v4;
  char *v5;
  unint64_t v6;
  char *v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  void *p_p;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  void *__p;
  uint64_t v26;
  unsigned __int8 v27;

  if ((v4 & 1) == 0
  {
    boost::unit_test::utils::print_escaped_cdata(std::ostream &,boost::unit_test::basic_cstring<char const>)::cdata_end = (uint64_t)"]]>";
    unk_254FD4730 = "";
  }
  v5 = *a2;
  v6 = unk_254FD4730
     - boost::unit_test::utils::print_escaped_cdata(std::ostream &,boost::unit_test::basic_cstring<char const>)::cdata_end;
  if (unk_254FD4730 == boost::unit_test::utils::print_escaped_cdata(std::ostream &,boost::unit_test::basic_cstring<char const>)::cdata_end)
  {
    v8 = a2[1] - v5;
    goto LABEL_14;
  }
  v7 = a2[1];
  v8 = v7 - v5;
  if (v6 > v7 - v5 || v5 == &v7[-v6 + 1])
    goto LABEL_14;
  v9 = *a2;
  if (v6)
  {
    do
    {
      v10 = 0;
      while (v9[v10] == *(_BYTE *)(boost::unit_test::utils::print_escaped_cdata(std::ostream &,boost::unit_test::basic_cstring<char const>)::cdata_end
                                  + v10))
      {
        if (v6 == ++v10)
          goto LABEL_23;
      }
    }
    while (v9++ != &v7[-v6]);
    goto LABEL_14;
  }
LABEL_23:
  v14 = v9 - v5;
  if (v9 - v5 == -1)
  {
LABEL_14:
    std::string::basic_string[abi:ne180100](&__p, v5, v8);
    if ((v27 & 0x80u) == 0)
      p_p = &__p;
    else
      p_p = __p;
    if ((v27 & 0x80u) == 0)
      v13 = v27;
    else
      v13 = v26;
    goto LABEL_20;
  }
  v15 = v14 + 2;
  if (v8 >= v14 + 2)
    v7 = v9 + 2;
  std::string::basic_string[abi:ne180100](&__p, v5, v7 - v5);
  if ((v27 & 0x80u) == 0)
    v16 = &__p;
  else
    v16 = __p;
  if ((v27 & 0x80u) == 0)
    v17 = v27;
  else
    v17 = v26;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v16, v17);
  if ((char)v27 < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100](&__p, (void *)boost::unit_test::utils::print_escaped_cdata(std::ostream &,boost::unit_test::basic_cstring<char const>)::cdata_end, unk_254FD4730- boost::unit_test::utils::print_escaped_cdata(std::ostream &,boost::unit_test::basic_cstring<char const>)::cdata_end);
  if ((v27 & 0x80u) == 0)
    v18 = &__p;
  else
    v18 = __p;
  if ((v27 & 0x80u) == 0)
    v19 = v27;
  else
    v19 = v26;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v18, v19);
  if ((char)v27 < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100](&__p, "<![CDATA[", 9uLL);
  if ((v27 & 0x80u) == 0)
    v20 = &__p;
  else
    v20 = __p;
  if ((v27 & 0x80u) == 0)
    v21 = v27;
  else
    v21 = v26;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v20, v21);
  if ((char)v27 < 0)
    operator delete(__p);
  v22 = a2[1];
  v23 = (char *)(v22 - *a2);
  if (v23 == (char *)-1)
    v22 = *a2 - 1;
  if ((unint64_t)v23 >= v15)
    v24 = &(*a2)[v15];
  else
    v24 = (char *)&boost::unit_test::basic_cstring<char const>::null_str(void)::null;
  if ((unint64_t)v23 < v15)
    v22 = (char *)&boost::unit_test::basic_cstring<char const>::null_str(void)::null;
  std::string::basic_string[abi:ne180100](&__p, v24, v22 - v24);
  if ((v27 & 0x80u) == 0)
    p_p = &__p;
  else
    p_p = __p;
  if ((v27 & 0x80u) == 0)
    v13 = v27;
  else
    v13 = v26;
LABEL_20:
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)p_p, v13);
  if ((char)v27 < 0)
    operator delete(__p);
}

void sub_21831CC08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void boost::unit_test::output::junit_result_helper::build_skipping_chain(boost::unit_test::output::junit_result_helper *this@<X0>, const boost::unit_test::test_unit *a2@<X1>, uint64_t *a3@<X8>)
{
  boost::unit_test::framework::impl::_anonymous_namespace_ *v5;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  BOOL v12;
  _QWORD *v13;
  std::string *v14;
  std::string::size_type v15;
  char v16;
  _QWORD *v17;
  std::string::size_type v18;
  uint64_t v19;
  char *v20;
  _QWORD *v21;
  uint64_t v22;
  boost::unit_test::test_unit *v23;
  std::string::size_type size;
  std::string *v25;
  unsigned __int8 *v26;
  char *v27;
  std::string *v28;
  std::string *v29;
  __int128 v30;
  std::string *v31;
  std::string::size_type v32;
  char v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  std::string v40;
  std::string v41;
  unsigned __int8 v42;
  std::string v43;
  _QWORD v44[3];

  v44[2] = *MEMORY[0x24BDAC8D0];
  *a3 = (uint64_t)a3;
  a3[1] = (uint64_t)a3;
  a3[2] = 0;
  v5 = (boost::unit_test::framework::impl::_anonymous_namespace_ *)*((_QWORD *)a2 + 6);
  if (v5 == (boost::unit_test::framework::impl::_anonymous_namespace_ *)0xFFFFFFFFLL
    || v5 == *(boost::unit_test::framework::impl::_anonymous_namespace_ **)(*((_QWORD *)this + 2) + 48))
  {
    v7 = *((_QWORD *)this + 3);
    v8 = *(_QWORD **)(v7 + 8);
  }
  else
  {
    do
    {
      v23 = (boost::unit_test::test_unit *)boost::unit_test::framework::get(v5, 17);
      boost::unit_test::test_unit::full_name(v23, &v40);
      size = HIBYTE(v40.__r_.__value_.__r.__words[2]);
      if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v25 = &v40;
      else
        v25 = (std::string *)v40.__r_.__value_.__r.__words[0];
      if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        size = v40.__r_.__value_.__l.__size_;
      v42 = 10;
      v26 = std::remove[abi:ne180100]<std::__wrap_iter<char *>,char>(v25, (unsigned __int8 *)v25 + size, &v42);
      v27 = (char *)&v40 + HIBYTE(v40.__r_.__value_.__r.__words[2]);
      if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      {
        v28 = &v40;
      }
      else
      {
        v27 = (char *)(v40.__r_.__value_.__r.__words[0] + v40.__r_.__value_.__l.__size_);
        v28 = (std::string *)v40.__r_.__value_.__r.__words[0];
      }
      std::string::erase(&v40, v26 - (unsigned __int8 *)v28, v27 - (char *)v26);
      v43 = v40;
      memset(&v40, 0, sizeof(v40));
      v29 = std::string::insert(&v43, 0, "- disabled test unit: '");
      v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v41.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v41.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      v31 = std::string::append(&v41, "'\n");
      v32 = v31->__r_.__value_.__r.__words[0];
      v44[0] = v31->__r_.__value_.__l.__size_;
      *(_QWORD *)((char *)v44 + 7) = *(std::string::size_type *)((char *)&v31->__r_.__value_.__r.__words[1] + 7);
      v33 = HIBYTE(v31->__r_.__value_.__r.__words[2]);
      v31->__r_.__value_.__l.__size_ = 0;
      v31->__r_.__value_.__r.__words[2] = 0;
      v31->__r_.__value_.__r.__words[0] = 0;
      v34 = operator new(0x28uLL);
      v35 = v44[0];
      v34[2] = v32;
      v34[3] = v35;
      *(_QWORD *)((char *)v34 + 31) = *(_QWORD *)((char *)v44 + 7);
      *((_BYTE *)v34 + 39) = v33;
      v36 = *a3;
      *v34 = *a3;
      v34[1] = a3;
      *(_QWORD *)(v36 + 8) = v34;
      *a3 = (uint64_t)v34;
      ++a3[2];
      if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v41.__r_.__value_.__l.__data_);
      if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v43.__r_.__value_.__l.__data_);
      if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v40.__r_.__value_.__l.__data_);
      v7 = *((_QWORD *)this + 3);
      v8 = *(_QWORD **)(v7 + 8);
      if (v8)
      {
        v37 = *(_QWORD **)(v7 + 8);
        do
        {
          v38 = v37[4];
          if ((unint64_t)v5 >= v38)
          {
            if (v38 >= (unint64_t)v5)
              goto LABEL_7;
            ++v37;
          }
          v37 = (_QWORD *)*v37;
        }
        while (v37);
      }
      v5 = (boost::unit_test::framework::impl::_anonymous_namespace_ *)*((_QWORD *)v23 + 7);
    }
    while (v5 != (boost::unit_test::framework::impl::_anonymous_namespace_ *)0xFFFFFFFFLL
         && v5 != *(boost::unit_test::framework::impl::_anonymous_namespace_ **)(*((_QWORD *)this + 2) + 48));
  }
LABEL_7:
  if (v8)
  {
    v9 = (_QWORD *)(v7 + 8);
    v10 = (_QWORD *)(v7 + 8);
    do
    {
      v11 = v8[4];
      v12 = v11 >= (unint64_t)v5;
      if (v11 >= (unint64_t)v5)
        v13 = v8;
      else
        v13 = v8 + 1;
      if (v12)
        v10 = v8;
      v8 = (_QWORD *)*v13;
    }
    while (*v13);
    if (v10 != v9 && (unint64_t)v5 >= v10[4])
    {
      std::operator+<char>();
      v14 = std::string::append(&v41, "'");
      v15 = v14->__r_.__value_.__r.__words[0];
      v43.__r_.__value_.__r.__words[0] = v14->__r_.__value_.__l.__size_;
      *(std::string::size_type *)((char *)v43.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v14->__r_.__value_.__r.__words[1] + 7);
      v16 = HIBYTE(v14->__r_.__value_.__r.__words[2]);
      v14->__r_.__value_.__l.__size_ = 0;
      v14->__r_.__value_.__r.__words[2] = 0;
      v14->__r_.__value_.__r.__words[0] = 0;
      v17 = operator new(0x28uLL);
      v18 = v43.__r_.__value_.__r.__words[0];
      v17[2] = v15;
      v17[3] = v18;
      *(_QWORD *)((char *)v17 + 31) = *(std::string::size_type *)((char *)v43.__r_.__value_.__r.__words + 7);
      *((_BYTE *)v17 + 39) = v16;
      v19 = *a3;
      *v17 = *a3;
      v17[1] = a3;
      *(_QWORD *)(v19 + 8) = v17;
      *a3 = (uint64_t)v17;
      ++a3[2];
      if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v41.__r_.__value_.__l.__data_);
      std::string::basic_string[abi:ne180100]<0>(&v41, "Test case disabled because of the following chain of decision:\n");
      v20 = (char *)operator new(0x28uLL);
      *(std::string *)(v20 + 16) = v41;
      memset(&v41, 0, sizeof(v41));
      v21 = (_QWORD *)a3[1];
      *(_QWORD *)v20 = a3;
      *((_QWORD *)v20 + 1) = v21;
      *v21 = v20;
      v22 = a3[2] + 1;
      a3[1] = (uint64_t)v20;
      a3[2] = v22;
      if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v41.__r_.__value_.__l.__data_);
    }
  }
}

void sub_21831CF98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  _QWORD *v28;

  if (a21 < 0)
    operator delete(__p);
  std::__list_imp<std::string>::clear(v28);
  _Unwind_Resume(a1);
}

_QWORD *boost::unit_test::output::junit_result_helper::conditional_cdata_helper::operator()(_QWORD *result, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  _QWORD *v9;
  _QWORD *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  void **v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *__p[2];
  unsigned __int8 v21;

  v3 = result;
  v4 = *(unsigned __int8 *)(a2 + 23);
  v5 = v4;
  v6 = *(_QWORD *)(a2 + 8);
  if ((v4 & 0x80u) == 0)
    v7 = *(unsigned __int8 *)(a2 + 23);
  else
    v7 = *(_QWORD *)(a2 + 8);
  if (*((_BYTE *)result + 32))
    v8 = v7 == 0;
  else
    v8 = 1;
  if (v8)
  {
    if (!v7)
      return result;
  }
  else
  {
    *((_BYTE *)result + 32) = 0;
    v9 = (_QWORD *)*result;
    LOBYTE(__p[0]) = 60;
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)__p, 1);
    v11 = *((char *)v3 + 31);
    if (v11 >= 0)
      v12 = (uint64_t)(v3 + 1);
    else
      v12 = v3[1];
    if (v11 >= 0)
      v13 = *((unsigned __int8 *)v3 + 31);
    else
      v13 = v3[2];
    v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, v12, v13);
    LOBYTE(__p[0]) = 62;
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)__p, 1);
    std::string::basic_string[abi:ne180100](__p, "<![CDATA[", 9uLL);
    if ((v21 & 0x80u) == 0)
      v16 = __p;
    else
      v16 = (void **)__p[0];
    if ((v21 & 0x80u) == 0)
      v17 = v21;
    else
      v17 = (uint64_t)__p[1];
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v16, v17);
    if ((char)v21 < 0)
      operator delete(__p[0]);
    v4 = *(unsigned __int8 *)(a2 + 23);
    v6 = *(_QWORD *)(a2 + 8);
    v5 = *(_BYTE *)(a2 + 23);
  }
  if (v5 >= 0)
    v18 = a2;
  else
    v18 = *(_QWORD *)a2;
  if (v5 >= 0)
    v19 = v4;
  else
    v19 = v6;
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)*v3, v18, v19);
}

void sub_21831D164(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::remove[abi:ne180100]<std::__wrap_iter<char *>,char>(void *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *result;
  unsigned __int8 *v6;
  int v8;

  result = (unsigned __int8 *)memchr(a1, (char)*a3, a2 - (_BYTE *)a1);
  if (!result)
    result = a2;
  v6 = result + 1;
  if (result != a2 && v6 != a2)
  {
    do
    {
      v8 = *v6;
      if (v8 != *a3)
        *result++ = v8;
      ++v6;
    }
    while (v6 != a2);
  }
  return result;
}

void boost::unit_test::output::junit_result_helper::conditional_cdata_helper::~conditional_cdata_helper(boost::unit_test::output::junit_result_helper::conditional_cdata_helper *this)
{
  _QWORD *v2;
  void **v3;
  uint64_t v4;
  _QWORD *v5;
  int v6;
  char *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  const std::locale::facet *v11;
  void *__p[2];
  unsigned __int8 v13;

  if (!*((_BYTE *)this + 32))
  {
    v2 = *(_QWORD **)this;
    std::string::basic_string[abi:ne180100](__p, "]]>", 3uLL);
    if ((v13 & 0x80u) == 0)
      v3 = __p;
    else
      v3 = (void **)__p[0];
    if ((v13 & 0x80u) == 0)
      v4 = v13;
    else
      v4 = (uint64_t)__p[1];
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)v3, v4);
    if ((char)v13 < 0)
      operator delete(__p[0]);
    v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"</", 2);
    v6 = *((char *)this + 31);
    if (v6 >= 0)
      v7 = (char *)this + 8;
    else
      v7 = (char *)*((_QWORD *)this + 1);
    if (v6 >= 0)
      v8 = *((unsigned __int8 *)this + 31);
    else
      v8 = *((_QWORD *)this + 2);
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)v7, v8);
    LOBYTE(__p[0]) = 62;
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)__p, 1);
    std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(_QWORD *)(*v10 - 24)));
    v11 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
    std::locale::~locale((std::locale *)__p);
    std::ostream::put();
    std::ostream::flush();
  }
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

void sub_21831D31C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  __clang_call_terminate(a1);
}

void std::vector<boost::unit_test::output::junit_impl::junit_log_helper::assertion_entry>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 80;
        std::allocator<boost::unit_test::output::junit_impl::junit_log_helper::assertion_entry>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_QWORD *std::__list_imp<unsigned long>::clear(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  if (result[2])
  {
    v1 = result;
    result = (_QWORD *)result[1];
    v2 = *v1;
    v3 = *result;
    *(_QWORD *)(v3 + 8) = *(_QWORD *)(*v1 + 8);
    **(_QWORD **)(v2 + 8) = v3;
    v1[2] = 0;
    if (result != v1)
    {
      do
      {
        v4 = (_QWORD *)result[1];
        operator delete(result);
        result = v4;
      }
      while (v4 != v1);
    }
  }
  return result;
}

void std::__tree<std::__value_type<unsigned long,boost::unit_test::output::junit_impl::junit_log_helper>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,boost::unit_test::output::junit_impl::junit_log_helper>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,boost::unit_test::output::junit_impl::junit_log_helper>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<unsigned long,boost::unit_test::output::junit_impl::junit_log_helper>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,boost::unit_test::output::junit_impl::junit_log_helper>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,boost::unit_test::output::junit_impl::junit_log_helper>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<unsigned long,boost::unit_test::output::junit_impl::junit_log_helper>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,boost::unit_test::output::junit_impl::junit_log_helper>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,boost::unit_test::output::junit_impl::junit_log_helper>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<unsigned long const,boost::unit_test::output::junit_impl::junit_log_helper>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<unsigned long const,boost::unit_test::output::junit_impl::junit_log_helper>,0>(uint64_t a1)
{
  void **v2;

  v2 = (void **)(a1 + 80);
  std::vector<boost::unit_test::output::junit_impl::junit_log_helper::assertion_entry>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  std::__list_imp<std::string>::clear((_QWORD *)(a1 + 32));
  std::__list_imp<std::string>::clear((_QWORD *)(a1 + 8));
}

uint64_t std::pair<boost::unit_test::test_unit::readonly_property62,boost::unit_test::output::junit_impl::junit_log_helper>::pair[abi:ne180100]<boost::unit_test::test_unit::readonly_property62 const&,boost::unit_test::output::junit_impl::junit_log_helper,0>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t *v5;
  __int128 v6;

  v5 = (uint64_t *)(a1 + 8);
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = 0;
  std::list<turi::join_impl::hash_join_row_t>::splice((uint64_t)v5, v5, (_QWORD *)a3);
  *(_QWORD *)(a1 + 32) = a1 + 32;
  *(_QWORD *)(a1 + 40) = a1 + 32;
  *(_QWORD *)(a1 + 48) = 0;
  std::list<turi::join_impl::hash_join_row_t>::splice(a1 + 32, (uint64_t *)(a1 + 32), (_QWORD *)(a3 + 24));
  v6 = *(_OWORD *)(a3 + 48);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a3 + 64);
  *(_OWORD *)(a1 + 56) = v6;
  *(_QWORD *)(a3 + 56) = 0;
  *(_QWORD *)(a3 + 64) = 0;
  *(_QWORD *)(a3 + 48) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a3 + 72);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a3 + 88);
  *(_QWORD *)(a3 + 72) = 0;
  *(_QWORD *)(a3 + 80) = 0;
  *(_QWORD *)(a3 + 88) = 0;
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a3 + 96);
  return a1;
}

uint64_t **std::__tree<std::__value_type<unsigned long,boost::unit_test::output::junit_impl::junit_log_helper>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,boost::unit_test::output::junit_impl::junit_log_helper>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,boost::unit_test::output::junit_impl::junit_log_helper>>>::__emplace_unique_impl<std::pair<boost::unit_test::test_unit::readonly_property62,boost::unit_test::output::junit_impl::junit_log_helper>>(uint64_t **a1, uint64_t a2)
{
  uint64_t **v4;
  uint64_t *v5;
  unint64_t *v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t **v9;
  unint64_t v10;
  _QWORD v12[2];
  char v13;

  v4 = a1 + 1;
  v5 = (uint64_t *)operator new(0x90uLL);
  v12[0] = v5;
  v12[1] = v4;
  v6 = (unint64_t *)std::pair<unsigned long const,boost::unit_test::output::junit_impl::junit_log_helper>::pair[abi:ne180100]<boost::unit_test::test_unit::readonly_property62,boost::unit_test::output::junit_impl::junit_log_helper,0>((uint64_t)(v5 + 4), a2);
  v13 = 1;
  v7 = a1[1];
  if (v7)
  {
    v8 = *v6;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v7;
        v10 = v7[4];
        if (v8 >= v10)
          break;
        v7 = *v9;
        v4 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v7 = v9[1];
      if (!v7)
      {
        v4 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = v4;
LABEL_10:
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, (uint64_t)v9, v4, v5);
    v12[0] = 0;
    v9 = (uint64_t **)v5;
  }
  std::unique_ptr<std::__tree_node<std::__value_type<unsigned long,boost::unit_test::output::junit_impl::junit_log_helper>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned long,boost::unit_test::output::junit_impl::junit_log_helper>,void *>>>>::reset[abi:ne180100]((uint64_t)v12, 0);
  return v9;
}

uint64_t std::pair<unsigned long const,boost::unit_test::output::junit_impl::junit_log_helper>::pair[abi:ne180100]<boost::unit_test::test_unit::readonly_property62,boost::unit_test::output::junit_impl::junit_log_helper,0>(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  __int128 v5;

  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = 0;
  std::list<turi::join_impl::hash_join_row_t>::splice((uint64_t)v4, v4, (_QWORD *)(a2 + 8));
  *(_QWORD *)(a1 + 32) = a1 + 32;
  *(_QWORD *)(a1 + 40) = a1 + 32;
  *(_QWORD *)(a1 + 48) = 0;
  std::list<turi::join_impl::hash_join_row_t>::splice(a1 + 32, (uint64_t *)(a1 + 32), (_QWORD *)(a2 + 32));
  v5 = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = v5;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  return a1;
}

void std::unique_ptr<std::__tree_node<std::__value_type<unsigned long,boost::unit_test::output::junit_impl::junit_log_helper>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned long,boost::unit_test::output::junit_impl::junit_log_helper>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<unsigned long const,boost::unit_test::output::junit_impl::junit_log_helper>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

uint64_t **std::__tree<std::__value_type<unsigned long,boost::unit_test::output::junit_impl::junit_log_helper>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,boost::unit_test::output::junit_impl::junit_log_helper>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,boost::unit_test::output::junit_impl::junit_log_helper>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  uint64_t **v8;
  uint64_t **v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  _QWORD v14[2];
  char v15;

  v7 = a1 + 1;
  v6 = a1[1];
  v8 = a1 + 1;
  v9 = a1 + 1;
  if (v6)
  {
    v10 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v11 = v6[4];
        if (v10 >= v11)
          break;
        v6 = *v9;
        v8 = v9;
        if (!*v9)
          goto LABEL_9;
      }
      if (v11 >= v10)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v8 = v9 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    v12 = (char *)operator new(0x90uLL);
    v14[1] = v7;
    *((_QWORD *)v12 + 4) = **a4;
    *((_QWORD *)v12 + 5) = v12 + 40;
    *((_QWORD *)v12 + 6) = v12 + 40;
    *((_QWORD *)v12 + 7) = 0;
    *((_QWORD *)v12 + 8) = v12 + 64;
    *((_QWORD *)v12 + 9) = v12 + 64;
    *(_OWORD *)(v12 + 121) = 0u;
    *((_OWORD *)v12 + 6) = 0u;
    *((_OWORD *)v12 + 7) = 0u;
    *((_OWORD *)v12 + 5) = 0u;
    v15 = 1;
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, (uint64_t)v9, v8, (uint64_t *)v12);
    v14[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<unsigned long,boost::unit_test::output::junit_impl::junit_log_helper>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned long,boost::unit_test::output::junit_impl::junit_log_helper>,void *>>>>::reset[abi:ne180100]((uint64_t)v14, 0);
    return (uint64_t **)v12;
  }
  return v9;
}

uint64_t std::vector<boost::unit_test::output::junit_impl::junit_log_helper::assertion_entry>::__push_back_slow_path<boost::unit_test::output::junit_impl::junit_log_helper::assertion_entry const&>(uint64_t *a1, __int128 *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  void *v10;
  std::string *v11;
  std::string::value_type *v12;
  char *v13;
  uint64_t *v14;

  v3 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 4);
  v4 = v3 + 1;
  if (v3 + 1 > 0x333333333333333)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 4) > v4)
    v4 = 0x999999999999999ALL * ((a1[2] - *a1) >> 4);
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 4) >= 0x199999999999999)
    v6 = 0x333333333333333;
  else
    v6 = v4;
  v14 = a1 + 2;
  if (v6)
    v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>((uint64_t)(a1 + 2), v6);
  else
    v7 = 0;
  v10 = v7;
  v11 = (std::string *)&v7[80 * v3];
  v13 = &v7[80 * v6];
  std::allocator<boost::unit_test::output::junit_impl::junit_log_helper::assertion_entry>::construct[abi:ne180100]<boost::unit_test::output::junit_impl::junit_log_helper::assertion_entry,boost::unit_test::output::junit_impl::junit_log_helper::assertion_entry const&>((_DWORD)a1 + 16, v11, a2);
  v12 = &v11[3].__r_.__value_.__s.__data_[8];
  std::vector<boost::unit_test::output::junit_impl::junit_log_helper::assertion_entry>::__swap_out_circular_buffer(a1, &v10);
  v8 = a1[1];
  std::__split_buffer<boost::unit_test::output::junit_impl::junit_log_helper::assertion_entry>::~__split_buffer(&v10);
  return v8;
}

void sub_21831D928(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<boost::unit_test::output::junit_impl::junit_log_helper::assertion_entry>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void std::allocator<boost::unit_test::output::junit_impl::junit_log_helper::assertion_entry>::construct[abi:ne180100]<boost::unit_test::output::junit_impl::junit_log_helper::assertion_entry,boost::unit_test::output::junit_impl::junit_log_helper::assertion_entry const&>(int a1, std::string *this, __int128 *a3)
{
  __int128 v5;
  __int128 v6;
  std::string *v7;
  __int128 v8;
  int v9;

  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v5 = *a3;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  if (*((char *)a3 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *((const std::string::value_type **)a3 + 3), *((_QWORD *)a3 + 4));
  }
  else
  {
    v6 = *(__int128 *)((char *)a3 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 5);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v6;
  }
  v7 = this + 2;
  if (*((char *)a3 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *((const std::string::value_type **)a3 + 6), *((_QWORD *)a3 + 7));
  }
  else
  {
    v8 = a3[3];
    this[2].__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 8);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
  v9 = *((_DWORD *)a3 + 18);
  this[3].__r_.__value_.__s.__data_[4] = *((_BYTE *)a3 + 76);
  LODWORD(this[3].__r_.__value_.__l.__data_) = v9;
}

void sub_21831D9F8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 47) < 0)
    operator delete(*v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<boost::unit_test::output::junit_impl::junit_log_helper::assertion_entry>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<boost::unit_test::output::junit_impl::junit_log_helper::assertion_entry>,std::reverse_iterator<boost::unit_test::output::junit_impl::junit_log_helper::assertion_entry*>,std::reverse_iterator<boost::unit_test::output::junit_impl::junit_log_helper::assertion_entry*>,std::reverse_iterator<boost::unit_test::output::junit_impl::junit_log_helper::assertion_entry*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<boost::unit_test::output::junit_impl::junit_log_helper::assertion_entry>,std::reverse_iterator<boost::unit_test::output::junit_impl::junit_log_helper::assertion_entry*>,std::reverse_iterator<boost::unit_test::output::junit_impl::junit_log_helper::assertion_entry*>,std::reverse_iterator<boost::unit_test::output::junit_impl::junit_log_helper::assertion_entry*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  int v11;
  uint64_t v12;
  _QWORD v14[3];
  char v15;
  __int128 v16;
  __int128 v17;

  v7 = a7;
  *(_QWORD *)&v17 = a6;
  *((_QWORD *)&v17 + 1) = a7;
  v16 = v17;
  v14[0] = a1;
  v14[1] = &v16;
  v14[2] = &v17;
  if (a3 == a5)
  {
    v12 = a6;
  }
  else
  {
    do
    {
      v8 = *(_OWORD *)(a3 - 80);
      *(_QWORD *)(v7 - 64) = *(_QWORD *)(a3 - 64);
      *(_OWORD *)(v7 - 80) = v8;
      *(_QWORD *)(a3 - 72) = 0;
      *(_QWORD *)(a3 - 64) = 0;
      *(_QWORD *)(a3 - 80) = 0;
      v9 = *(_OWORD *)(a3 - 56);
      *(_QWORD *)(v7 - 40) = *(_QWORD *)(a3 - 40);
      *(_OWORD *)(v7 - 56) = v9;
      *(_QWORD *)(a3 - 48) = 0;
      *(_QWORD *)(a3 - 40) = 0;
      *(_QWORD *)(a3 - 56) = 0;
      v10 = *(_OWORD *)(a3 - 32);
      *(_QWORD *)(v7 - 16) = *(_QWORD *)(a3 - 16);
      *(_OWORD *)(v7 - 32) = v10;
      *(_QWORD *)(a3 - 24) = 0;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 32) = 0;
      v11 = *(_DWORD *)(a3 - 8);
      *(_BYTE *)(v7 - 4) = *(_BYTE *)(a3 - 4);
      *(_DWORD *)(v7 - 8) = v11;
      v7 = *((_QWORD *)&v17 + 1) - 80;
      *((_QWORD *)&v17 + 1) -= 80;
      a3 -= 80;
    }
    while (a3 != a5);
    v12 = v17;
  }
  v15 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<boost::unit_test::output::junit_impl::junit_log_helper::assertion_entry>,std::reverse_iterator<boost::unit_test::output::junit_impl::junit_log_helper::assertion_entry*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v14);
  return v12;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<boost::unit_test::output::junit_impl::junit_log_helper::assertion_entry>,std::reverse_iterator<boost::unit_test::output::junit_impl::junit_log_helper::assertion_entry*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<boost::unit_test::output::junit_impl::junit_log_helper::assertion_entry>,std::reverse_iterator<boost::unit_test::output::junit_impl::junit_log_helper::assertion_entry*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<boost::unit_test::output::junit_impl::junit_log_helper::assertion_entry>,std::reverse_iterator<boost::unit_test::output::junit_impl::junit_log_helper::assertion_entry*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1[2] + 8);
  v2 = *(_QWORD *)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      std::allocator<boost::unit_test::output::junit_impl::junit_log_helper::assertion_entry>::destroy[abi:ne180100](v3, v1);
      v1 += 80;
    }
    while (v1 != v2);
  }
}

void **std::__split_buffer<boost::unit_test::output::junit_impl::junit_log_helper::assertion_entry>::~__split_buffer(void **a1)
{
  std::__split_buffer<boost::unit_test::output::junit_impl::junit_log_helper::assertion_entry>::clear[abi:ne180100](a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<boost::unit_test::output::junit_impl::junit_log_helper::assertion_entry>::clear[abi:ne180100](_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 80;
    std::allocator<boost::unit_test::output::junit_impl::junit_log_helper::assertion_entry>::destroy[abi:ne180100](v4, i - 80);
  }
}

void __cxx_global_array_dtor_1()
{
  uint64_t i;

  for (i = 0; i != -120; i -= 24)
  {
    if (*((char *)&boost::unit_test::output::junit_log_formatter::get_default_stream_description(void)const::to_replace
         + i
         + 119) < 0)
      operator delete(*(void **)((char *)&boost::unit_test::output::junit_log_formatter::get_default_stream_description(void)const::to_replace
                               + i
                               + 96));
  }
}

void __cxx_global_array_dtor_51()
{
  uint64_t i;

  for (i = 0; i != -120; i -= 24)
  {
    if (*((char *)&boost::unit_test::output::junit_log_formatter::get_default_stream_description(void)const::replacement
         + i
         + 119) < 0)
      operator delete(*(void **)((char *)&boost::unit_test::output::junit_log_formatter::get_default_stream_description(void)const::replacement
                               + i
                               + 96));
  }
}

uint64_t *_GLOBAL__sub_I_junit_log_formatter_cpp()
{
  uint64_t *result;

  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  result = boost::unit_test::singleton<boost::unit_test::results_collector_t>::instance();
  return result;
}

uint64_t *_GLOBAL__sub_I_plain_report_formatter_cpp()
{
  uint64_t *result;

  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  result = boost::unit_test::singleton<boost::unit_test::results_collector_t>::instance();
  return result;
}

void boost::unit_test::progress_monitor_t::test_start(boost::unit_test::progress_monitor_t *this, uint64_t a2)
{
  unsigned __int8 *v3;
  uint64_t v4;
  unsigned __int8 *v5;
  uint64_t *v6;
  boost::unit_test::_anonymous_namespace_ *v7;
  char v8;
  boost::unit_test::_anonymous_namespace_ *v9;
  uint64_t v10;
  boost::unit_test::_anonymous_namespace_ *v11;
  int v12;
  boost::unit_test::_anonymous_namespace_ *v13;
  int v14;
  boost::unit_test::_anonymous_namespace_ *v15;
  boost::unit_test::_anonymous_namespace_ *v16;
  uint64_t v17;
  unsigned __int8 *v18[2];

  if (byte_254FF9F4F >= 0)
    v3 = (unsigned __int8 *)&boost::unit_test::runtime_config::btrt_color_output;
  else
    v3 = (unsigned __int8 *)boost::unit_test::runtime_config::btrt_color_output;
  v4 = byte_254FF9F4F;
  if (byte_254FF9F4F < 0)
    v4 = unk_254FF9F40;
  v5 = &v3[v4];
  v6 = boost::unit_test::runtime_config::argument_store(this);
  v18[0] = v3;
  v18[1] = v5;
  v7 = (boost::unit_test::_anonymous_namespace_ *)boost::runtime::arguments_store::get<BOOL>((uint64_t)v6, v18);
  v8 = *(_BYTE *)v7;
  byte_254FF35D8 = v8;
  v12 = byte_254FF35D8;
  if (byte_254FF35D8)
    v14 = 5;
  else
    v14 = 9;
  v15 = (boost::unit_test::_anonymous_namespace_ *)boost::unit_test::utils::scope_setcolor::scope_setcolor(v18, v10, v12, v14, 9);
  v16 = (boost::unit_test::_anonymous_namespace_ *)operator new();
  v17 = qword_254FF35D0;
  qword_254FF35D0 = (uint64_t)v16;
  if (v17)
    MEMORY[0x219A19A08](v17, 0x1020C406E8F4065);
  boost::unit_test::utils::scope_setcolor::~scope_setcolor((boost::unit_test::utils::scope_setcolor *)v18);
}

void sub_21831DEA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  MEMORY[0x219A19A08](v9, 0x1020C406E8F4065);
  boost::unit_test::utils::scope_setcolor::~scope_setcolor((boost::unit_test::utils::scope_setcolor *)&a9);
  _Unwind_Resume(a1);
}

void boost::unit_test::`anonymous namespace'::s_pm_impl(boost::unit_test::_anonymous_namespace_ *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      qword_254FF35D0 = 0;
      byte_254FF35D8 = 0;
    }
  }
}

void boost::unit_test::progress_monitor_t::test_aborted(boost::unit_test::progress_monitor_t *this)
{
  uint64_t v1;
  boost::unit_test::_anonymous_namespace_ *v2;
  int v3;
  boost::unit_test::_anonymous_namespace_ *v4;
  int v5;
  boost::unit_test::_anonymous_namespace_ *v6;
  uint64_t v7;
  boost::unit_test::_anonymous_namespace_ *v8;
  uint64_t v9;

  v3 = byte_254FF35D8;
  if (byte_254FF35D8)
    v5 = 5;
  else
    v5 = 9;
  v6 = (boost::unit_test::_anonymous_namespace_ *)boost::unit_test::utils::scope_setcolor::scope_setcolor(&v9, v1, v3, v5, 9);
  v7 = *(_QWORD *)(qword_254FF35D0 + 8);
  boost::unit_test::progress_display::operator+=(qword_254FF35D0, v7);
  boost::unit_test::utils::scope_setcolor::~scope_setcolor((boost::unit_test::utils::scope_setcolor *)&v9);
}

void sub_21831DFD4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  boost::unit_test::utils::scope_setcolor::~scope_setcolor((boost::unit_test::utils::scope_setcolor *)va);
  _Unwind_Resume(a1);
}

unint64_t boost::unit_test::progress_display::operator+=(uint64_t a1, uint64_t a2)
{
  unint64_t result;
  unsigned int v4;
  _QWORD *v5;
  unsigned int v6;
  unint64_t v7;
  _QWORD *v8;
  const std::locale::facet *v9;
  char v10;
  char v11;
  std::locale v12;

  result = *(_QWORD *)(a1 + 8) + a2;
  *(_QWORD *)(a1 + 8) = result;
  if (result >= *(_QWORD *)(a1 + 24))
  {
    v4 = ((double)result / (double)*(unint64_t *)(a1 + 16) * 50.0);
    do
    {
      v5 = *(_QWORD **)a1;
      v10 = 42;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)&v10, 1);
      std::ostream::flush();
      v6 = *(_DWORD *)(a1 + 32) + 1;
      *(_DWORD *)(a1 + 32) = v6;
    }
    while (v6 < v4);
    result = *(_QWORD *)(a1 + 8);
    v7 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 24) = (unint64_t)((double)v6 / 50.0 * (double)v7);
    if (result == v7)
    {
      if (v6 <= 0x32)
      {
        v8 = *(_QWORD **)a1;
        v11 = 42;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)&v11, 1);
      }
      std::ios_base::getloc((const std::ios_base *)(*(_QWORD *)a1 + *(_QWORD *)(**(_QWORD **)a1 - 24)));
      v9 = std::locale::use_facet(&v12, MEMORY[0x24BEDB350]);
      ((void (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
      std::locale::~locale(&v12);
      std::ostream::put();
      std::ostream::flush();
      return *(_QWORD *)(a1 + 8);
    }
  }
  return result;
}

void sub_21831E124(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

void boost::unit_test::progress_monitor_t::test_unit_finish(boost::unit_test::progress_monitor_t *this, const boost::unit_test::test_unit *a2)
{
  uint64_t v3;
  boost::unit_test::_anonymous_namespace_ *v4;
  int v5;
  boost::unit_test::_anonymous_namespace_ *v6;
  int v7;
  boost::unit_test::_anonymous_namespace_ *v8;
  uint64_t v9;

  v5 = byte_254FF35D8;
  if (byte_254FF35D8)
    v7 = 5;
  else
    v7 = 9;
  v8 = (boost::unit_test::_anonymous_namespace_ *)boost::unit_test::utils::scope_setcolor::scope_setcolor(&v9, v3, v5, v7, 9);
  if (*(_DWORD *)a2 == 1)
  {
    boost::unit_test::progress_display::operator+=(qword_254FF35D0, 1);
  }
  boost::unit_test::utils::scope_setcolor::~scope_setcolor((boost::unit_test::utils::scope_setcolor *)&v9);
}

void sub_21831E1D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  boost::unit_test::utils::scope_setcolor::~scope_setcolor((boost::unit_test::utils::scope_setcolor *)va);
  _Unwind_Resume(a1);
}

void boost::unit_test::progress_monitor_t::test_unit_skipped(boost::unit_test::_anonymous_namespace_ *a1, _DWORD *a2)
{
  uint64_t v3;
  boost::unit_test::_anonymous_namespace_ *v4;
  int v5;
  boost::unit_test::_anonymous_namespace_ *v6;
  int v7;
  boost::unit_test::_anonymous_namespace_ *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;

  v5 = byte_254FF35D8;
  if (byte_254FF35D8)
    v7 = 5;
  else
    v7 = 9;
  boost::unit_test::utils::scope_setcolor::scope_setcolor(&v12, v3, v5, v7, 9);
  v10 = &unk_24D939DE8;
  v11 = 0;
  if (*a2 == 1)
    v8 = (boost::unit_test::_anonymous_namespace_ *)boost::unit_test::traverse_test_tree((uint64_t)a2, (uint64_t)&v10, 0);
  else
    v8 = (boost::unit_test::_anonymous_namespace_ *)boost::unit_test::traverse_test_tree((uint64_t)(a2 - 2), (uint64_t)&v10, 0);
  v9 = v11;
  boost::unit_test::progress_display::operator+=(qword_254FF35D0, v9);
  boost::unit_test::utils::scope_setcolor::~scope_setcolor((boost::unit_test::utils::scope_setcolor *)&v12);
}

void sub_21831E2B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  boost::unit_test::utils::scope_setcolor::~scope_setcolor((boost::unit_test::utils::scope_setcolor *)va);
  _Unwind_Resume(a1);
}

uint64_t boost::unit_test::test_observer::assertion_result(uint64_t result, unsigned int a2)
{
  if (a2 <= 1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 88))(result);
  return result;
}

void boost::unit_test::`anonymous namespace'::progress_monitor_impl::~progress_monitor_impl(boost::unit_test::_anonymous_namespace_::progress_monitor_impl *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 1);
  if (v1)
    MEMORY[0x219A19A08](v1, 0x1020C406E8F4065);
}

uint64_t boost::unit_test::progress_display::progress_display(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v4;
  _QWORD *v5;
  const std::locale::facet *v6;
  std::locale v8;

  *(_QWORD *)a1 = a3;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = a2;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a3, (uint64_t)"\n0%   10   20   30   40   50   60   70   80   90   100%", 55);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"\n|----|----|----|----|----|----|----|----|----|----|", 52);
  std::ios_base::getloc((const std::ios_base *)((char *)v5 + *(_QWORD *)(*v5 - 24)));
  v6 = std::locale::use_facet(&v8, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v6->__vftable[2].~facet_0)(v6, 10);
  std::locale::~locale(&v8);
  std::ostream::put();
  std::ostream::flush();
  if (!*(_QWORD *)(a1 + 16))
    *(_QWORD *)(a1 + 16) = 1;
  return a1;
}

void sub_21831E3E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

uint64_t *_GLOBAL__sub_I_progress_monitor_cpp()
{
  uint64_t *result;

  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  result = boost::unit_test::singleton<boost::unit_test::progress_monitor_t>::instance();
  return result;
}

BOOL boost::unit_test::test_results::passed(boost::unit_test::test_results *this)
{
  return !*((_BYTE *)this + 81)
      && !*((_QWORD *)this + 6)
      && *((_QWORD *)this + 1) <= *((_QWORD *)this + 3)
      && *((_BYTE *)this + 80) == 0;
}

_QWORD *boost::unit_test::test_results::operator+=(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = result[1];
  *result += *a2;
  result[1] = v2 + a2[1];
  result[2] += a2[2];
  v3 = result[5];
  result[4] += a2[4];
  result[5] = v3 + a2[5];
  v4 = result[7];
  result[6] += a2[6];
  result[7] = v4 + a2[7];
  v5 = result[9];
  result[8] += a2[8];
  result[9] = v5 + a2[9];
  return result;
}

void boost::unit_test::results_collector_t::test_start(boost::unit_test::results_collector_t *this)
{
  qword_254FF3618 = 0;
  qword_254FF3610 = 0;
}

void boost::unit_test::`anonymous namespace'::s_rc_impl(boost::unit_test::_anonymous_namespace_ *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      qword_254FF3618 = 0;
      qword_254FF3610 = 0;
    }
  }
}

double boost::unit_test::results_collector_t::test_unit_start(boost::unit_test::results_collector_t *this, const boost::unit_test::test_unit *a2)
{
  uint64_t **v3;
  double result;
  _QWORD *v5;

  v5 = (_QWORD *)((char *)a2 + 48);
  *((_WORD *)v3 + 60) = 0;
  result = 0.0;
  *(_OWORD *)(v3 + 13) = 0u;
  *(_OWORD *)(v3 + 11) = 0u;
  *(_OWORD *)(v3 + 9) = 0u;
  *(_OWORD *)(v3 + 7) = 0u;
  *(_OWORD *)(v3 + 5) = 0u;
  v3[8] = (uint64_t *)*((_QWORD *)a2 + 24);
  return result;
}

void boost::unit_test::results_collector_t::test_unit_finish(boost::unit_test::results_collector_t *this, const boost::unit_test::test_unit *a2, uint64_t *a3)
{
  uint64_t **v4;
  uint64_t **v6;
  uint64_t **v7;
  uint64_t *v8;
  boost::unit_test::_anonymous_namespace_ *v9;
  boost::unit_test::lazy_ostream *v10;
  boost::unit_test::_anonymous_namespace_ *v11;
  boost::unit_test::lazy_ostream *v12;
  uint64_t *v13;
  std::string __p;
  void *v15;
  char v16;
  uint64_t *v17;
  const char *v18;
  _QWORD *v19;
  char v20;
  void **v21;
  std::string *p_p;
  _QWORD *v23;
  uint64_t **v24;
  const boost::unit_test::test_unit *v25;
  const char *v26;
  const char *v27;
  char *v28;
  uint64_t v29;
  char v30;

  if (*(_DWORD *)a2 == 16)
  {
    v19 = (_QWORD *)((char *)a2 + 48);
    v23 = &unk_24D93A110;
    v24 = v4 + 5;
    v25 = a2;
    if (*(_DWORD *)a2 == 1)
      boost::unit_test::traverse_test_tree((uint64_t)a2, (uint64_t)&v23, 0);
    else
      boost::unit_test::traverse_test_tree((uint64_t)a2 - 8, (uint64_t)&v23, 0);
    return;
  }
  v23 = (_QWORD *)((char *)a2 + 48);
  v6[14] = a3;
  if (*((_BYTE *)v6 + 120))
    return;
  v7 = v6;
  v8 = v6[6];
  if (v8 >= v6[8])
    goto LABEL_10;
  v27 = "boost.test framework";
  v28 = "";
  v29 = 218;
  boost::unit_test::unit_test_log_t::operator()(v9, 2, &v30);
  v16 = 0;
  v15 = &unk_24D93A168;
  v17 = boost::unit_test::lazy_ostream::instance(v10);
  v18 = "Test case ";
  boost::unit_test::test_unit::full_name(a2, &__p);
  v20 = 0;
  v19 = &unk_24D93A1A8;
  v21 = &v15;
  p_p = &__p;
  LOBYTE(v24) = 0;
  v23 = &unk_24D93A1E8;
  v25 = (const boost::unit_test::test_unit *)&v19;
  v26 = " has fewer failures than expected";
  boost::unit_test::ut_detail::entry_value_collector::operator<<((uint64_t)&v30, (uint64_t)&v23);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  boost::unit_test::ut_detail::entry_value_collector::~entry_value_collector((boost::unit_test::ut_detail::entry_value_collector *)&v30);
  if (!*((_BYTE *)v7 + 120))
  {
    v8 = v7[6];
LABEL_10:
    if (!v8 && !v7[5])
    {
      v27 = "boost.test framework";
      v28 = "";
      v29 = 222;
      boost::unit_test::unit_test_log_t::operator()(v11, 2, &v30);
      v13 = boost::unit_test::lazy_ostream::instance(v12);
      v16 = 0;
      v15 = &unk_24D93A168;
      v17 = v13;
      v18 = "Test case ";
      boost::unit_test::test_unit::full_name(a2, &__p);
      v20 = 0;
      v19 = &unk_24D93A1A8;
      v21 = &v15;
      p_p = &__p;
      LOBYTE(v24) = 0;
      v23 = &unk_24D93A228;
      v25 = (const boost::unit_test::test_unit *)&v19;
      v26 = " did not check any assertions";
      boost::unit_test::ut_detail::entry_value_collector::operator<<((uint64_t)&v30, (uint64_t)&v23);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      boost::unit_test::ut_detail::entry_value_collector::~entry_value_collector((boost::unit_test::ut_detail::entry_value_collector *)&v30);
    }
  }
}

void sub_21831E8C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  boost::unit_test::ut_detail::entry_value_collector::~entry_value_collector((boost::unit_test::ut_detail::entry_value_collector *)(v15 - 33));
  _Unwind_Resume(a1);
}

uint64_t boost::unit_test::results_collector_t::test_unit_skipped(boost::unit_test::_anonymous_namespace_ *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v5 = (_QWORD *)(a2 + 48);
  *(_WORD *)(result + 120) = 0;
  *(_OWORD *)(result + 104) = 0u;
  *(_OWORD *)(result + 88) = 0u;
  *(_OWORD *)(result + 72) = 0u;
  *(_OWORD *)(result + 56) = 0u;
  *(_OWORD *)(result + 40) = 0u;
  *(_BYTE *)(result + 121) = 1;
  if (*(_DWORD *)a2 == 16)
  {
    v4 = result;
    v5 = &unk_24D939DE8;
    v6 = 0;
    result = boost::unit_test::traverse_test_tree(a2 - 8, (uint64_t)&v5, 0);
    *(_QWORD *)(v4 + 96) = v6;
  }
  return result;
}

uint64_t **boost::unit_test::results_collector_t::assertion_result(boost::unit_test::_anonymous_namespace_ *a1, int a2)
{
  boost::unit_test::framework *v3;
  uint64_t **result;
  _QWORD *v5;
  unint64_t v6;
  uint64_t *v7;

  v6 = boost::unit_test::framework::current_test_case_id(v3);
  v7 = (uint64_t *)&v6;
  if (a2)
  {
    if (a2 == 2)
    {
      v5 = result + 7;
    }
    else
    {
      if (a2 != 1)
        return result;
      v5 = result + 5;
    }
  }
  else
  {
    v5 = result + 6;
  }
  ++*v5;
  return result;
}

uint64_t **boost::unit_test::results_collector_t::exception_caught(boost::unit_test::_anonymous_namespace_ *a1)
{
  boost::unit_test::framework *v1;
  uint64_t **result;
  unint64_t v3;
  uint64_t *v4;

  v3 = boost::unit_test::framework::current_test_case_id(v1);
  v4 = (uint64_t *)&v3;
  result[6] = (uint64_t *)((char *)result[6] + 1);
  return result;
}

uint64_t **boost::unit_test::results_collector_t::test_unit_aborted(boost::unit_test::results_collector_t *this, const boost::unit_test::test_unit *a2)
{
  uint64_t **result;
  _QWORD *v4;

  v4 = (_QWORD *)((char *)a2 + 48);
  *((_BYTE *)result + 120) = 1;
  return result;
}

uint64_t **boost::unit_test::results_collector_t::results(boost::unit_test::results_collector_t *this, unint64_t a2)
{
  unint64_t v3;
  unint64_t *v4;

  v3 = a2;
  v4 = &v3;
}

void boost::unit_test::`anonymous namespace'::results_collector_impl::~results_collector_impl(boost::unit_test::_anonymous_namespace_::results_collector_impl *this)
{
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)this, *((_QWORD **)this + 1));
}

_QWORD *boost::unit_test::results_collect_helper::visit(boost::unit_test::_anonymous_namespace_ *a1, uint64_t a2)
{
  uint64_t **v3;
  _QWORD *result;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t *v11;

  v10 = *(_QWORD *)(a2 + 48);
  v11 = &v10;
  result = boost::unit_test::test_results::operator+=(*((_QWORD **)a1 + 1), v3 + 5);
  if (*((_BYTE *)v3 + 121))
  {
    v5 = (_QWORD *)(*((_QWORD *)a1 + 1) + 56);
  }
  else if (v3[11] || v3[6] > v3[8] || *((_BYTE *)v3 + 120))
  {
    v6 = (_QWORD *)*((_QWORD *)a1 + 1);
    if (*((_BYTE *)v3 + 120))
      ++v6[8];
    v5 = v6 + 6;
  }
  else
  {
    v7 = (_QWORD *)*((_QWORD *)a1 + 1);
    v8 = v7 + 4;
    v9 = v7 + 5;
    if (v3[7])
      v5 = v9;
    else
      v5 = v8;
  }
  ++*v5;
  return result;
}

BOOL boost::unit_test::results_collect_helper::test_suite_start(boost::unit_test::results_collect_helper *this, const boost::unit_test::test_suite *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t **v5;
  unint64_t v7;
  unint64_t *v8;

  v2 = *(_QWORD *)(*((_QWORD *)this + 2) + 48);
  v3 = *((_QWORD *)a2 + 7);
  if (v2 != v3)
  {
    v7 = *((_QWORD *)a2 + 7);
    v8 = &v7;
    boost::unit_test::test_results::operator+=(*((_QWORD **)this + 1), v5 + 5);
  }
  return v2 == v3;
}

void boost::unit_test::results_collect_helper::~results_collect_helper(boost::unit_test::results_collect_helper *this)
{
  JUMPOUT(0x219A19A08);
}

uint64_t **std::__tree<std::__value_type<unsigned long,boost::unit_test::test_results>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,boost::unit_test::test_results>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,boost::unit_test::test_results>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t **v9;
  unint64_t v10;
  char *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = v6[4];
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = (char *)operator new(0x80uLL);
    *((_QWORD *)v11 + 4) = **a4;
    *((_WORD *)v11 + 60) = 0;
    *(_OWORD *)(v11 + 104) = 0u;
    *(_OWORD *)(v11 + 88) = 0u;
    *(_OWORD *)(v11 + 72) = 0u;
    *(_OWORD *)(v11 + 56) = 0u;
    *(_OWORD *)(v11 + 40) = 0u;
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

void boost::unit_test::lazy_ostream_impl<boost::unit_test::lazy_ostream,char [11],char const(&)[11]>::~lazy_ostream_impl()
{
  JUMPOUT(0x219A19A08);
}

_QWORD *boost::unit_test::lazy_ostream_impl<boost::unit_test::lazy_ostream,char [11],char const(&)[11]>::operator()(uint64_t a1)
{
  _QWORD *v2;
  const char *v3;
  size_t v4;

  v2 = (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16));
  v3 = *(const char **)(a1 + 24);
  v4 = strlen(v3);
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)v3, v4);
}

void boost::unit_test::lazy_ostream_impl<boost::unit_test::lazy_ostream_impl<boost::unit_test::lazy_ostream,char [11],char const(&)[11]>,std::string,std::string const&>::~lazy_ostream_impl()
{
  JUMPOUT(0x219A19A08);
}

_QWORD *boost::unit_test::lazy_ostream_impl<boost::unit_test::lazy_ostream_impl<boost::unit_test::lazy_ostream,char [11],char const(&)[11]>,std::string,std::string const&>::operator()(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  v2 = (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16));
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(char *)(v3 + 23);
  if (v4 >= 0)
    v5 = *(_QWORD *)(a1 + 24);
  else
    v5 = *(_QWORD *)v3;
  if (v4 >= 0)
    v6 = *(unsigned __int8 *)(v3 + 23);
  else
    v6 = *(_QWORD *)(v3 + 8);
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, v5, v6);
}

uint64_t *_GLOBAL__sub_I_results_collector_cpp()
{
  uint64_t *result;

  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  result = boost::unit_test::singleton<boost::unit_test::results_collector_t>::instance();
  return result;
}

void _GLOBAL__sub_I_TCComputeDeviceWrapper_mm()
{
  void *v0;

  v0 = (void *)MEMORY[0x219A19FE4]();
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  objc_autoreleasePoolPop(v0);
}

uint64_t *_GLOBAL__sub_I_results_reporter_cpp()
{
  uint64_t *result;

  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  result = boost::unit_test::singleton<boost::unit_test::results_collector_t>::instance();
  return result;
}

uint64_t boost::unit_test::framework_init_observer_t::test_start(boost::unit_test::framework_init_observer_t *this)
{
  uint64_t result;

  result = boost::unit_test::framework::test_in_progress(this);
  if ((result & 1) == 0)
  return result;
}

void boost::unit_test::framework_init_observer_t::assertion_result(uint64_t a1, int a2)
{
  if (!a2)
}

void boost::unit_test::framework_init_observer_t::exception_caught()
{
}

void boost::unit_test::framework_init_observer_t::test_aborted(boost::unit_test::framework_init_observer_t *this)
{
}

uint64_t boost::unit_test::test_observer::test_unit_skipped(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t *_GLOBAL__sub_I_test_framework_init_observer_cpp()
{
  uint64_t *result;

  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  result = boost::unit_test::singleton<boost::unit_test::framework_init_observer_t>::instance();
  return result;
}

uint64_t *_GLOBAL__sub_I_test_main_cpp()
{
  uint64_t *result;

  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  result = boost::unit_test::singleton<boost::unit_test::unit_test_log_t>::instance();
  return result;
}

uint64_t *_GLOBAL__sub_I_test_tools_cpp()
{
  uint64_t *result;

  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  result = boost::unit_test::singleton<boost::unit_test::unit_test_log_t>::instance();
  return result;
}

turi::neural_net::model_spec *turi::proprietary::style_transfer::MAMLCheckpoint::GetWeights@<X0>(turi::neural_net::model_spec *result@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  turi::neural_net::model_spec *v7;
  uint64_t v8;
  uint64_t v9;
  turi::neural_net::model_spec *v10;
  turi::neural_net::model_spec *v11;

  v4 = a2[2];
  if (v4)
  {
    v5 = *a2;
    v6 = a2[1];
    a3[1] = v6;
    *a3 = v5;
    a3[2] = v4;
    *(_QWORD *)(v6 + 16) = a3 + 1;
    *a2 = (uint64_t)(a2 + 1);
    a2[2] = 0;
    a2[1] = 0;
  }
  else
  {
    std::make_unique<turi::neural_net::model_spec,std::string const&>((uint64_t)result, (uint64_t *)&v11);
    v10 = v11;
    v11 = 0;
    turi::style_transfer::Checkpoint::ExtractWeights(&v10, a3);
    v7 = v10;
    v10 = 0;
    if (v7)
    {
      turi::neural_net::model_spec::~model_spec(v7);
      MEMORY[0x219A19A08](v8);
    }
    result = v11;
    v11 = 0;
    if (result)
    {
      turi::neural_net::model_spec::~model_spec(result);
      return (turi::neural_net::model_spec *)MEMORY[0x219A19A08](v9, 0x20C4093837F09);
    }
  }
  return result;
}

void sub_21831F144(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, turi::neural_net::model_spec *a9, turi::neural_net::model_spec *a10)
{
  std::unique_ptr<turi::neural_net::model_spec>::reset[abi:ne180100](&a9, 0);
  std::unique_ptr<turi::neural_net::model_spec>::reset[abi:ne180100](&a10, 0);
  _Unwind_Resume(a1);
}

uint64_t std::make_unique<turi::neural_net::model_spec,std::string const&>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  result = turi::neural_net::model_spec::model_spec(v4, a1);
  *a2 = v4;
  return result;
}

void sub_21831F1B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

uint64_t turi::proprietary::style_transfer::MAMLCheckpoint::MAMLCheckpoint(uint64_t a1, __int128 *a2, turi::neural_net::model_spec *a3, uint64_t *a4, _QWORD *a5)
{
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD **v20;
  _QWORD *v21;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;

  v26 = *a2;
  v27 = *((_QWORD *)a2 + 2);
  v8 = a4 + 1;
  v9 = (_QWORD *)a4[1];
  v20 = (_QWORD **)*a4;
  v21 = v9;
  if (a4[2])
  {
    v9[2] = &v21;
    *a4 = (uint64_t)v8;
    *v8 = 0;
    a4[2] = 0;
  }
  else
  {
    v20 = &v21;
  }
  turi::proprietary::style_transfer::MAMLCheckpoint::GetWeights(a3, (uint64_t *)&v20, &v23);
  *(_QWORD *)a1 = &unk_24D91D6E0;
  *(_OWORD *)(a1 + 8) = v26;
  v11 = v23;
  v10 = v24;
  *(_QWORD *)(a1 + 24) = v27;
  *(_QWORD *)(a1 + 32) = v11;
  *(_QWORD *)(a1 + 40) = v10;
  v12 = a1 + 40;
  v13 = v25;
  *(_QWORD *)(a1 + 48) = v25;
  if (v13)
  {
    v10[2] = v12;
    v23 = &v24;
    v24 = 0;
    v25 = 0;
    v10 = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 32) = v12;
  }
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)&v23, v10);
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)&v20, v21);
  *(_QWORD *)a1 = off_24D93A330;
  v14 = *(_OWORD *)a3;
  *(_QWORD *)(a1 + 72) = *((_QWORD *)a3 + 2);
  *(_OWORD *)(a1 + 56) = v14;
  *((_QWORD *)a3 + 1) = 0;
  *((_QWORD *)a3 + 2) = 0;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a1 + 80) = *a5;
  v15 = a5 + 1;
  v16 = a5[1];
  *(_QWORD *)(a1 + 88) = v16;
  v17 = a1 + 88;
  v18 = a5[2];
  *(_QWORD *)(a1 + 96) = v18;
  if (v18)
  {
    *(_QWORD *)(v16 + 16) = v17;
    *a5 = v15;
    *v15 = 0;
    a5[2] = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 80) = v17;
  }
  return a1;
}

void sub_21831F334(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10)
{
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)&a9, a10);
  _Unwind_Resume(a1);
}

void turi::proprietary::style_transfer::MAMLCheckpoint::CreateModelTrainer(turi::proprietary::style_transfer::MAMLCheckpoint *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  std::make_unique<turi::proprietary::style_transfer::MAMLModelTrainer,turi::style_transfer::Config const&,std::string const&,std::map<std::string,turi::neural_net::shared_float_array> const&,std::map<std::string,turi::neural_net::shared_float_array> const&>((__int128 *)((char *)this + 8), (uint64_t)this + 56, (const void ***)this + 4, (const void ***)this + 10, &v3);
  *a2 = v3;
}

void std::make_unique<turi::proprietary::style_transfer::MAMLModelTrainer,turi::style_transfer::Config const&,std::string const&,std::map<std::string,turi::neural_net::shared_float_array> const&,std::map<std::string,turi::neural_net::shared_float_array> const&>(__int128 *a1@<X0>, uint64_t a2@<X1>, const void ***a3@<X2>, const void ***a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11[3];
  uint64_t v12[3];
  std::string v13;
  __int128 v14;
  uint64_t v15;

  v10 = operator new();
  v14 = *a1;
  v15 = *((_QWORD *)a1 + 2);
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v13, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v13 = *(std::string *)a2;
  std::map<std::string,turi::neural_net::shared_float_array>::map[abi:ne180100](v12, a3);
  std::map<std::string,turi::neural_net::shared_float_array>::map[abi:ne180100](v11, a4);
  turi::proprietary::style_transfer::MAMLModelTrainer::MAMLModelTrainer(v10, (uint64_t)&v14, (__int128 *)&v13, v12, v11);
  *a5 = v10;
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)v11, (_QWORD *)v11[1]);
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)v12, (_QWORD *)v12[1]);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
}

void sub_21831F48C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;

  MEMORY[0x219A19A08](v20, 0x10B3C4048318760);
  _Unwind_Resume(a1);
}

void turi::proprietary::style_transfer::MAMLCheckpoint::ExportToCoreML(turi::proprietary::style_transfer::MAMLCheckpoint *this@<X0>, uint64_t a2@<X8>)
{
  turi::neural_net::model_spec::model_spec(a2, (char *)this + 56);
  turi::neural_net::model_spec::update_params(a2, (uint64_t)this + 32, 0);
}

void sub_21831F52C(_Unwind_Exception *a1)
{
  turi::neural_net::model_spec *v1;

  turi::neural_net::model_spec::~model_spec(v1);
  _Unwind_Resume(a1);
}

uint64_t turi::proprietary::style_transfer::MAMLModelTrainer::MAMLModelTrainer(uint64_t a1, uint64_t a2, __int128 *a3, _QWORD *a4, _QWORD *a5)
{
  uint64_t v7;
  __int128 v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;

  v7 = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)a1 = off_24D93A360;
  v8 = *a3;
  *(_QWORD *)(a1 + 48) = *((_QWORD *)a3 + 2);
  *(_OWORD *)(a1 + 32) = v8;
  *((_QWORD *)a3 + 1) = 0;
  *((_QWORD *)a3 + 2) = 0;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a1 + 56) = *a5;
  v9 = a5 + 1;
  v10 = a5[1];
  *(_QWORD *)(a1 + 64) = v10;
  v11 = a1 + 64;
  v12 = a5[2];
  *(_QWORD *)(a1 + 72) = v12;
  if (v12)
  {
    *(_QWORD *)(v10 + 16) = v11;
    *a5 = v9;
    *v9 = 0;
    a5[2] = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 56) = v11;
  }
  v13 = (char *)operator new(0x40uLL);
  *((_QWORD *)v13 + 2) = 0;
  *(_QWORD *)v13 = &unk_24D93A3E0;
  *((_QWORD *)v13 + 1) = 0;
  *((_QWORD *)v13 + 7) = 0;
  *(_OWORD *)(v13 + 24) = 0u;
  *(_OWORD *)(v13 + 40) = 0u;
  *((_QWORD *)v13 + 5) = v13 + 48;
  *(_QWORD *)(a1 + 80) = v13 + 24;
  *(_QWORD *)(a1 + 88) = v13;
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__move_assign((uint64_t)(v13 + 40), a4);
  return a1;
}

void sub_21831F63C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;

  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy(v2, *(_QWORD **)(v1 + 64));
  if (*(char *)(v1 + 55) < 0)
    operator delete(*v3);
  _Unwind_Resume(a1);
}

void turi::proprietary::style_transfer::MAMLModelTrainer::CreateInternalTrainingConfig(turi::proprietary::style_transfer::MAMLModelTrainer *this@<X0>, uint64_t **a2@<X8>)
{
  __int128 v4;
  __int128 v5;
  unint64_t i;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  turi::proprietary::style_transfer::MAMLModelTrainer *v13;
  uint64_t *v14;
  __int128 v15;
  turi::proprietary::style_transfer::MAMLModelTrainer *v16;
  turi::proprietary::style_transfer::MAMLModelTrainer *v17;
  BOOL v18;
  void **p_p;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  void *__p;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  void *v27[2];
  char v28;
  void *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _QWORD v33[3];
  void *v34;
  _OWORD v35[3];
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  turi::neural_net::shared_float_array::wrap(1.0, (uint64_t)&__p);
  std::string::basic_string[abi:ne180100]<0>(v27, "st_training");
  v29 = &unk_24D9175B8;
  v4 = v24;
  v24 = 0uLL;
  v30 = v4;
  v31 = v25;
  v32 = v26;
  turi::neural_net::shared_float_array::wrap((float)*((int *)this + 2), (uint64_t)&p_p);
  std::string::basic_string[abi:ne180100]<0>(v33, "st_num_styles");
  v34 = &unk_24D9175B8;
  v5 = v20;
  v20 = 0uLL;
  v35[0] = v5;
  v35[1] = v21;
  v35[2] = v22;
  std::map<std::string,turi::neural_net::shared_float_array>::map[abi:ne180100]((uint64_t)a2, (const void **)v27, 2);
  for (i = 0; i != 0x1FFFFFFFFFFFFFECLL; i -= 10)
  {
    *(void **)((char *)&v34 + i * 8) = &unk_24D9175B8;
    std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&v35[i / 2]);
    if (SHIBYTE(v33[i + 2]) < 0)
      operator delete((void *)v33[i]);
  }
  p_p = (void **)&unk_24D9175B8;
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v20 + 1);
  if (*((_QWORD *)&v20 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v20 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  __p = &unk_24D9175B8;
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
  if (*((_QWORD *)&v24 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(v27, "st_");
  v13 = (turi::proprietary::style_transfer::MAMLModelTrainer *)*((_QWORD *)this + 7);
  if (v13 != (turi::proprietary::style_transfer::MAMLModelTrainer *)((char *)this + 64))
  {
    do
    {
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)v27, (const void **)v13 + 4, (uint64_t)&__p);
      p_p = &__p;
      v14 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a2, (const void **)&__p, (uint64_t)&std::piecewise_construct, (__int128 **)&p_p);
      std::shared_ptr<turi::neural_net::mps_command_queue>::operator=[abi:ne180100](v14 + 8, (uint64_t *)v13 + 8);
      v15 = *((_OWORD *)v13 + 6);
      *((_OWORD *)v14 + 5) = *((_OWORD *)v13 + 5);
      *((_OWORD *)v14 + 6) = v15;
      if (SHIBYTE(v24) < 0)
        operator delete(__p);
      v16 = (turi::proprietary::style_transfer::MAMLModelTrainer *)*((_QWORD *)v13 + 1);
      if (v16)
      {
        do
        {
          v17 = v16;
          v16 = *(turi::proprietary::style_transfer::MAMLModelTrainer **)v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          v17 = (turi::proprietary::style_transfer::MAMLModelTrainer *)*((_QWORD *)v13 + 2);
          v18 = *(_QWORD *)v17 == (_QWORD)v13;
          v13 = v17;
        }
        while (!v18);
      }
      v13 = v17;
    }
    while (v17 != (turi::proprietary::style_transfer::MAMLModelTrainer *)((char *)this + 64));
  }
  if (v28 < 0)
    operator delete(v27[0]);
}

void sub_21831F8E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  uint64_t v32;

  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy(v32, *(_QWORD **)(v32 + 8));
  _Unwind_Resume(a1);
}

void turi::proprietary::style_transfer::MAMLModelTrainer::CreateInternalInferenceConfig(turi::proprietary::style_transfer::MAMLModelTrainer *this@<X0>, uint64_t **a2@<X8>)
{
  __int128 v4;
  __int128 v5;
  unint64_t i;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  turi::proprietary::style_transfer::MAMLModelTrainer *v13;
  uint64_t *v14;
  __int128 v15;
  turi::proprietary::style_transfer::MAMLModelTrainer *v16;
  turi::proprietary::style_transfer::MAMLModelTrainer *v17;
  BOOL v18;
  void **p_p;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  void *__p;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  void *v27[2];
  char v28;
  void *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _QWORD v33[3];
  void *v34;
  _OWORD v35[3];
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  turi::neural_net::shared_float_array::wrap(0.0, (uint64_t)&__p);
  std::string::basic_string[abi:ne180100]<0>(v27, "st_training");
  v29 = &unk_24D9175B8;
  v4 = v24;
  v24 = 0uLL;
  v30 = v4;
  v31 = v25;
  v32 = v26;
  turi::neural_net::shared_float_array::wrap((float)*((int *)this + 2), (uint64_t)&p_p);
  std::string::basic_string[abi:ne180100]<0>(v33, "st_num_styles");
  v34 = &unk_24D9175B8;
  v5 = v20;
  v20 = 0uLL;
  v35[0] = v5;
  v35[1] = v21;
  v35[2] = v22;
  std::map<std::string,turi::neural_net::shared_float_array>::map[abi:ne180100]((uint64_t)a2, (const void **)v27, 2);
  for (i = 0; i != 0x1FFFFFFFFFFFFFECLL; i -= 10)
  {
    *(void **)((char *)&v34 + i * 8) = &unk_24D9175B8;
    std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&v35[i / 2]);
    if (SHIBYTE(v33[i + 2]) < 0)
      operator delete((void *)v33[i]);
  }
  p_p = (void **)&unk_24D9175B8;
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v20 + 1);
  if (*((_QWORD *)&v20 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v20 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  __p = &unk_24D9175B8;
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
  if (*((_QWORD *)&v24 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(v27, "st_");
  v13 = (turi::proprietary::style_transfer::MAMLModelTrainer *)*((_QWORD *)this + 7);
  if (v13 != (turi::proprietary::style_transfer::MAMLModelTrainer *)((char *)this + 64))
  {
    do
    {
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)v27, (const void **)v13 + 4, (uint64_t)&__p);
      p_p = &__p;
      v14 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a2, (const void **)&__p, (uint64_t)&std::piecewise_construct, (__int128 **)&p_p);
      std::shared_ptr<turi::neural_net::mps_command_queue>::operator=[abi:ne180100](v14 + 8, (uint64_t *)v13 + 8);
      v15 = *((_OWORD *)v13 + 6);
      *((_OWORD *)v14 + 5) = *((_OWORD *)v13 + 5);
      *((_OWORD *)v14 + 6) = v15;
      if (SHIBYTE(v24) < 0)
        operator delete(__p);
      v16 = (turi::proprietary::style_transfer::MAMLModelTrainer *)*((_QWORD *)v13 + 1);
      if (v16)
      {
        do
        {
          v17 = v16;
          v16 = *(turi::proprietary::style_transfer::MAMLModelTrainer **)v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          v17 = (turi::proprietary::style_transfer::MAMLModelTrainer *)*((_QWORD *)v13 + 2);
          v18 = *(_QWORD *)v17 == (_QWORD)v13;
          v13 = v17;
        }
        while (!v18);
      }
      v13 = v17;
    }
    while (v17 != (turi::proprietary::style_transfer::MAMLModelTrainer *)((char *)this + 64));
  }
  if (v28 < 0)
    operator delete(v27[0]);
}

void sub_21831FC60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  uint64_t v32;

  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy(v32, *(_QWORD **)(v32 + 8));
  _Unwind_Resume(a1);
}

void turi::proprietary::style_transfer::MAMLModelTrainer::AsCheckpointPublisher(turi::proprietary::style_transfer::MAMLModelTrainer *this@<X0>, _OWORD *a2@<X8>)
{
  char *v4;
  unint64_t *v5;
  std::__shared_weak_count *v6;
  const void **v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  uint64_t v19;
  __int128 v20;
  _QWORD *v21;
  _QWORD **v22;
  std::__shared_weak_count_vtbl *v23;
  uint64_t *p_shared_weak_owners;
  __int128 v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *shared_weak_owners;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *shared_owners;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_count v59;
  std::string __p;
  __int128 v61;
  _QWORD **v62;
  _QWORD *v63;
  std::__shared_weak_count_vtbl *v64;
  __int128 v65;
  std::__shared_count v66;
  std::string v67;
  __int128 v68;
  const void **v69[3];
  const void **v70[4];
  std::__shared_weak_count *v71;
  std::string v72;
  char *v73;
  std::__shared_weak_count *v74;
  std::__shared_weak_count *v75;
  std::__shared_weak_count *v76;
  uint64_t v77;
  std::__shared_weak_count *v78;
  __int128 v79;
  uint64_t v80;
  uint64_t v81;
  std::__shared_weak_count *v82;
  _QWORD **v83;
  _QWORD *v84;
  std::__shared_weak_count_vtbl *v85;

  v4 = (char *)operator new(0x30uLL);
  *((_QWORD *)v4 + 1) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *((_QWORD *)v4 + 2) = 0;
  *(_QWORD *)v4 = &unk_24D91D760;
  *(_OWORD *)(v4 + 24) = *(_OWORD *)((char *)this + 8);
  *((_QWORD *)v4 + 5) = *((_QWORD *)this + 3);
  v73 = v4 + 24;
  v74 = (std::__shared_weak_count *)v4;
  if (*((char *)this + 55) < 0)
    std::string::__init_copy_ctor_external(&v72, *((const std::string::value_type **)this + 4), *((_QWORD *)this + 5));
  else
    v72 = *(std::string *)((char *)this + 32);
  v7 = (const void **)*((_QWORD *)this + 10);
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 11);
  v70[3] = v7;
  v71 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  std::map<std::string,turi::neural_net::shared_float_array>::map[abi:ne180100]((uint64_t *)v70, (const void ***)this + 7);
  v66.__vftable = (std::__shared_count_vtbl *)(v4 + 24);
  v66.__shared_owners_ = (uint64_t)v4;
  do
    v10 = __ldxr(v5);
  while (__stxr(v10 + 1, v5));
  if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v67, v72.__r_.__value_.__l.__data_, v72.__r_.__value_.__l.__size_);
  else
    v67 = v72;
  *(_QWORD *)&v68 = v7;
  *((_QWORD *)&v68 + 1) = v6;
  if (v6)
  {
    v11 = (unint64_t *)&v6->__shared_owners_;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  std::map<std::string,turi::neural_net::shared_float_array>::map[abi:ne180100]((uint64_t *)v69, v70);
  v59 = v66;
  if (v66.__shared_owners_)
  {
    v13 = (unint64_t *)(v66.__shared_owners_ + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v67.__r_.__value_.__l.__data_, v67.__r_.__value_.__l.__size_);
  else
    __p = v67;
  v61 = v68;
  if (*((_QWORD *)&v68 + 1))
  {
    v15 = (unint64_t *)(*((_QWORD *)&v68 + 1) + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  std::map<std::string,turi::neural_net::shared_float_array>::map[abi:ne180100]((uint64_t *)&v62, v69);
  v17 = (std::__shared_weak_count *)operator new(0x80uLL);
  v17->__shared_owners_ = 0;
  v18 = (unint64_t *)&v17->__shared_owners_;
  v17->__shared_weak_owners_ = 0;
  v17->__vftable = (std::__shared_weak_count_vtbl *)&off_24D93A430;
  v79 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  v19 = __p.__r_.__value_.__r.__words[2];
  memset(&__p, 0, sizeof(__p));
  v20 = v61;
  v61 = 0uLL;
  v22 = v62;
  v21 = v63;
  v80 = v19;
  v83 = v62;
  v84 = v63;
  v23 = v64;
  v85 = v64;
  if (v64)
  {
    v63[2] = &v84;
    v62 = &v63;
    v63 = 0;
    v64 = 0;
  }
  else
  {
    v83 = &v84;
    v22 = &v84;
  }
  v17[4].__shared_weak_owners_ = (uint64_t)v21;
  p_shared_weak_owners = &v17[4].__shared_weak_owners_;
  v17[1].__shared_owners_ = 0;
  v17[1].__shared_weak_owners_ = 0;
  v17[1].__vftable = (std::__shared_weak_count_vtbl *)off_24D93A480;
  v77 = 0;
  v78 = 0;
  v25 = v79;
  v17[2].std::__shared_count = v59;
  *(_OWORD *)&v17[2].__shared_weak_owners_ = v25;
  v17[3].__shared_owners_ = v80;
  v79 = 0uLL;
  v80 = 0;
  *(_OWORD *)&v17[3].__shared_weak_owners_ = v20;
  v81 = 0;
  v82 = 0;
  v17[4].__shared_owners_ = (uint64_t)v22;
  v17[5].__vftable = v23;
  if (v23)
  {
    v21[2] = p_shared_weak_owners;
    v21 = 0;
    v83 = &v84;
    v84 = 0;
    v85 = 0;
  }
  else
  {
    v17[4].__shared_owners_ = (uint64_t)p_shared_weak_owners;
  }
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)&v83, v21);
  v26 = v82;
  if (v82)
  {
    v27 = (unint64_t *)&v82->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = v17 + 1;
  if (SHIBYTE(v80) < 0)
    operator delete((void *)v79);
  v30 = v78;
  if (v78)
  {
    v31 = (unint64_t *)&v78->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  v75 = v17 + 1;
  v76 = v17;
  shared_weak_owners = (std::__shared_weak_count *)v17[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    if (shared_weak_owners->__shared_owners_ != -1)
      goto LABEL_55;
    do
      v34 = __ldxr(v18);
    while (__stxr(v34 + 1, v18));
    v35 = (unint64_t *)&v17->__shared_weak_owners_;
    do
      v36 = __ldxr(v35);
    while (__stxr(v36 + 1, v35));
    v17[1].__shared_owners_ = (uint64_t)v29;
    v17[1].__shared_weak_owners_ = (uint64_t)v17;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
  }
  else
  {
    do
      v37 = __ldxr(v18);
    while (__stxr(v37 + 1, v18));
    v38 = (unint64_t *)&v17->__shared_weak_owners_;
    do
      v39 = __ldxr(v38);
    while (__stxr(v39 + 1, v38));
    v17[1].__shared_owners_ = (uint64_t)v29;
    v17[1].__shared_weak_owners_ = (uint64_t)v17;
  }
  do
    v40 = __ldaxr(v18);
  while (__stlxr(v40 - 1, v18));
  if (!v40)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
LABEL_55:
  turi::neural_net::Iterator<std::unique_ptr<turi::style_transfer::Checkpoint>>::AsPublisher((uint64_t)v75, &v65);
  v41 = v76;
  if (v76)
  {
    v42 = (unint64_t *)&v76->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  *a2 = v65;
  v65 = 0uLL;
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)&v62, v63);
  v44 = (std::__shared_weak_count *)*((_QWORD *)&v61 + 1);
  if (*((_QWORD *)&v61 + 1))
  {
    v45 = (unint64_t *)(*((_QWORD *)&v61 + 1) + 8);
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)v69, v69[1]);
  v47 = (std::__shared_weak_count *)*((_QWORD *)&v68 + 1);
  if (*((_QWORD *)&v68 + 1))
  {
    v48 = (unint64_t *)(*((_QWORD *)&v68 + 1) + 8);
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v67.__r_.__value_.__l.__data_);
  shared_owners = (std::__shared_weak_count *)v66.__shared_owners_;
  if (v66.__shared_owners_)
  {
    v51 = (unint64_t *)(v66.__shared_owners_ + 8);
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))shared_owners->__on_zero_shared)(shared_owners);
      std::__shared_weak_count::__release_weak(shared_owners);
    }
  }
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)v70, v70[1]);
  v53 = v71;
  if (v71)
  {
    v54 = (unint64_t *)&v71->__shared_owners_;
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v72.__r_.__value_.__l.__data_);
  v56 = v74;
  if (v74)
  {
    v57 = (unint64_t *)&v74->__shared_owners_;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
}

void sub_218320338(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,_QWORD *a39,uint64_t a40,char a41)
{
  uint64_t v41;

  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  turi::proprietary::style_transfer::MAMLModelTrainer::AsCheckpointPublisher(void)::$_0::~$_0((uint64_t)&a25);
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)&a38, a39);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a41);
  if (*(char *)(v41 - 185) < 0)
    operator delete(*(void **)(v41 - 208));
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v41 - 176);
  _Unwind_Resume(a1);
}

void sub_2183203F8()
{
  JUMPOUT(0x2183203D0);
}

uint64_t turi::proprietary::style_transfer::MAMLModelTrainer::AsCheckpointPublisher(void)::$_0::~$_0(uint64_t a1)
{
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy(a1 + 56, *(_QWORD **)(a1 + 64));
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](a1 + 40);
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](a1);
}

void turi::proprietary::style_transfer::MAMLModelTrainer::CreateTrainingBackend(turi::proprietary::style_transfer::MAMLModelTrainer *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  const void ***v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  turi::neural_net::model_spec *v17;
  uint64_t v18;
  const void **v19;
  const void **v20;
  uint64_t v21[3];
  turi::neural_net::model_spec *v22;
  uint64_t *v23[3];

  turi::proprietary::style_transfer::MAMLModelTrainer::CreateInternalTrainingConfig(a1, v23);
  turi::style_transfer::init_vgg_16(a2, (uint64_t *)&v22);
  v8 = (const void ***)*((_QWORD *)a1 + 10);
  if (*v8)
    (*((void (**)(uint64_t *__return_ptr))**v8 + 2))(v21);
  else
    std::map<std::string,turi::neural_net::shared_float_array>::map[abi:ne180100](v21, v8 + 2);
  turi::neural_net::model_spec::export_params_view(v22, (uint64_t)&v19);
  std::map<std::string,turi::neural_net::shared_float_array>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__tree_node<std::__value_type<std::string,turi::neural_net::shared_float_array>,void *> *,long>>>(v21, v19, &v20);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t **, uint64_t *))(*(_QWORD *)a3 + 48))(&v18, a3, v23, v21);
  std::shared_ptr<turi::neural_net::model_backend>::operator=[abi:ne180100]<turi::neural_net::model_backend,std::default_delete<turi::neural_net::model_backend>,void>(*((_QWORD **)a1 + 10), &v18);
  v9 = v18;
  v18 = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = (_QWORD *)*((_QWORD *)a1 + 10);
  v11 = (_QWORD *)v10[3];
  v10 += 3;
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)(v10 - 1), v11);
  *(v10 - 1) = v10;
  *v10 = 0;
  v10[1] = 0;
  v12 = (uint64_t *)*((_QWORD *)a1 + 10);
  v14 = *v12;
  v13 = v12[1];
  *a4 = v14;
  a4[1] = v13;
  if (v13)
  {
    v15 = (unint64_t *)(v13 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)&v19, v20);
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)v21, (_QWORD *)v21[1]);
  v17 = v22;
  v22 = 0;
  if (v17)
  {
    turi::neural_net::model_spec::~model_spec(v17);
    MEMORY[0x219A19A08]();
  }
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)v23, v23[1]);
}

void sub_2183205A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v5;
  va_list va;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  va_list va1;
  _QWORD *v11;
  uint64_t v12;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD *);
  v8 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v9 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD *);
  v12 = va_arg(va2, _QWORD);
  if (a3)
    (*(void (**)(uint64_t))(*(_QWORD *)a3 + 8))(a3);
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)va, v7);
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)va1, v11);
  std::unique_ptr<turi::neural_net::model_spec>::reset[abi:ne180100]((turi::neural_net::model_spec **)va2, 0);
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy(v3 - 56, *(_QWORD **)(v3 - 48));
  _Unwind_Resume(a1);
}

void sub_218320610()
{
  JUMPOUT(0x2183205FCLL);
}

void turi::proprietary::style_transfer::MAMLModelTrainer::CreateInferenceBackend(const void ****this@<X0>, turi::neural_net::compute_context *a2@<X1>, _QWORD *a3@<X8>)
{
  const void ***v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9[3];
  uint64_t *v10[3];
  uint64_t v11;

  turi::proprietary::style_transfer::MAMLModelTrainer::CreateInternalInferenceConfig((turi::proprietary::style_transfer::MAMLModelTrainer *)this, v10);
  v6 = this[10];
  if (*v6)
    (*((void (**)(uint64_t *__return_ptr))**v6 + 2))(v9);
  else
    std::map<std::string,turi::neural_net::shared_float_array>::map[abi:ne180100](v9, v6 + 2);
  (*(void (**)(uint64_t *__return_ptr, turi::neural_net::compute_context *, uint64_t **, uint64_t *))(*(_QWORD *)a2 + 48))(&v11, a2, v10, v9);
  *a3 = v11;
  v7 = (_QWORD *)operator new();
  v8 = v11;
  *v7 = &unk_24D91A628;
  v7[1] = 0;
  v7[2] = 0;
  v7[3] = v8;
  a3[1] = v7;
  v11 = 0;
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)v9, (_QWORD *)v9[1]);
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)v10, v10[1]);
}

void sub_2183206F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11, uint64_t a12, char a13, _QWORD *a14)
{
  uint64_t v14;
  uint64_t v16;

  v16 = *(_QWORD *)(v14 - 40);
  *(_QWORD *)(v14 - 40) = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)&a10, a11);
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)&a13, a14);
  _Unwind_Resume(a1);
}

void turi::proprietary::style_transfer::MAMLCheckpoint::~MAMLCheckpoint(turi::proprietary::style_transfer::MAMLCheckpoint *this)
{
  *(_QWORD *)this = off_24D93A330;
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)this + 80, *((_QWORD **)this + 11));
  if (*((char *)this + 79) < 0)
    operator delete(*((void **)this + 7));
  *(_QWORD *)this = &unk_24D91D6E0;
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)this + 32, *((_QWORD **)this + 5));
}

{
  *(_QWORD *)this = off_24D93A330;
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)this + 80, *((_QWORD **)this + 11));
  if (*((char *)this + 79) < 0)
    operator delete(*((void **)this + 7));
  *(_QWORD *)this = &unk_24D91D6E0;
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)this + 32, *((_QWORD **)this + 5));
  JUMPOUT(0x219A19A08);
}

void turi::proprietary::style_transfer::MAMLModelTrainer::~MAMLModelTrainer(turi::proprietary::style_transfer::MAMLModelTrainer *this)
{
  *(_QWORD *)this = off_24D93A360;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)this + 80);
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)this + 56, *((_QWORD **)this + 8));
  if (*((char *)this + 55) < 0)
    operator delete(*((void **)this + 4));
}

{
  *(_QWORD *)this = off_24D93A360;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)this + 80);
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)this + 56, *((_QWORD **)this + 8));
  if (*((char *)this + 55) < 0)
    operator delete(*((void **)this + 4));
  JUMPOUT(0x219A19A08);
}

void std::__shared_ptr_emplace<turi::proprietary::style_transfer::MAMLModelTrainer::ModelState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D93A3E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::proprietary::style_transfer::MAMLModelTrainer::ModelState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D93A3E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__shared_ptr_emplace<turi::proprietary::style_transfer::MAMLModelTrainer::ModelState>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 + 24;
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy(a1 + 40, *(_QWORD **)(a1 + 48));
  return std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v1);
}

void std::__shared_ptr_emplace<turi::neural_net::CallableIterator<turi::proprietary::style_transfer::MAMLModelTrainer::AsCheckpointPublisher(void)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24D93A430;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::neural_net::CallableIterator<turi::proprietary::style_transfer::MAMLModelTrainer::AsCheckpointPublisher(void)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24D93A430;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__shared_ptr_emplace<turi::neural_net::CallableIterator<turi::proprietary::style_transfer::MAMLModelTrainer::AsCheckpointPublisher(void)::$_0>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t turi::neural_net::CallableIterator<turi::proprietary::style_transfer::MAMLModelTrainer::AsCheckpointPublisher(void)::$_0>::~CallableIterator(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *(_QWORD *)a1 = off_24D93A480;
  v2 = a1 + 24;
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy(a1 + 80, *(_QWORD **)(a1 + 88));
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](a1 + 64);
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v2);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void turi::neural_net::CallableIterator<turi::proprietary::style_transfer::MAMLModelTrainer::AsCheckpointPublisher(void)::$_0>::~CallableIterator(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *(_QWORD *)a1 = off_24D93A480;
  v2 = a1 + 24;
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy(a1 + 80, *(_QWORD **)(a1 + 88));
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](a1 + 64);
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v2);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x219A19A08);
}

uint64_t turi::neural_net::CallableIterator<turi::proprietary::style_transfer::MAMLModelTrainer::AsCheckpointPublisher(void)::$_0>::HasNext()
{
  return 1;
}

void turi::neural_net::CallableIterator<turi::proprietary::style_transfer::MAMLModelTrainer::AsCheckpointPublisher(void)::$_0>::Next(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  const void ***v6;
  uint64_t v7[3];
  uint64_t v8;

  v4 = *(_QWORD *)(a1 + 24);
  v5 = a1 + 40;
  v6 = *(const void ****)(a1 + 64);
  if (*v6)
    (*((void (**)(uint64_t *__return_ptr))**v6 + 2))(v7);
  else
    std::map<std::string,turi::neural_net::shared_float_array>::map[abi:ne180100](v7, v6 + 2);
  std::make_unique<turi::proprietary::style_transfer::MAMLCheckpoint,turi::style_transfer::Config &,std::string const&,std::map<std::string,turi::neural_net::shared_float_array>,std::map<std::string,turi::neural_net::shared_float_array> const&>(v4, v5, v7, (const void ***)(a1 + 80), &v8);
  *a2 = v8;
  v8 = 0;
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)v7, (_QWORD *)v7[1]);
}

void sub_218320B00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10)
{
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)&a9, a10);
  _Unwind_Resume(a1);
}

void std::make_unique<turi::proprietary::style_transfer::MAMLCheckpoint,turi::style_transfer::Config &,std::string const&,std::map<std::string,turi::neural_net::shared_float_array>,std::map<std::string,turi::neural_net::shared_float_array> const&>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, const void ***a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13[3];
  _QWORD **v14;
  _QWORD *v15;
  std::string v17;
  __int128 v18;
  uint64_t v19;

  v10 = operator new();
  v18 = *(_OWORD *)a1;
  v19 = *(_QWORD *)(a1 + 16);
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v17, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v17 = *(std::string *)a2;
  v11 = a3 + 1;
  v12 = (_QWORD *)a3[1];
  v14 = (_QWORD **)*a3;
  v15 = v12;
  if (a3[2])
  {
    v12[2] = &v15;
    *a3 = (uint64_t)v11;
    *v11 = 0;
    a3[2] = 0;
  }
  else
  {
    v14 = &v15;
  }
  std::map<std::string,turi::neural_net::shared_float_array>::map[abi:ne180100](v13, a4);
  turi::proprietary::style_transfer::MAMLCheckpoint::MAMLCheckpoint(v10, &v18, (turi::neural_net::model_spec *)&v17, (uint64_t *)&v14, v13);
  *a5 = v10;
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)v13, (_QWORD *)v13[1]);
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)&v14, v15);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
}

void sub_218320C38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;

  MEMORY[0x219A19A08](v20, 0x10B3C40CED99292);
  _Unwind_Resume(a1);
}

uint64_t _GLOBAL__sub_I_st_maml_model_trainer_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

uint64_t boost::unit_test::test_unit::test_unit(uint64_t a1, uint64_t a2)
{
  std::string *v3;
  void *__p[2];
  uint64_t v6;

  *(_DWORD *)a1 = 16;
  *(_QWORD *)(a1 + 8) = "module";
  *(_QWORD *)(a1 + 16) = "";
  *(_QWORD *)(a1 + 24) = &boost::unit_test::basic_cstring<char const>::null_str(void)::null;
  *(_QWORD *)(a1 + 32) = &boost::unit_test::basic_cstring<char const>::null_str(void)::null;
  *(_OWORD *)(a1 + 40) = xmmword_2186F32F0;
  *(_QWORD *)(a1 + 56) = 0xFFFFFFFFLL;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_QWORD *)(a1 + 128) = 0;
  std::string::basic_string[abi:ne180100](__p, *(void **)a2, *(_QWORD *)(a2 + 8) - *(_QWORD *)a2);
  v3 = (std::string *)(a1 + 136);
  if (SHIBYTE(v6) < 0)
  {
    std::string::__init_copy_ctor_external(v3, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    if (SHIBYTE(v6) < 0)
      operator delete(__p[0]);
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    *(_QWORD *)(a1 + 152) = v6;
  }
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 200) = 0x300000002;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_QWORD *)(a1 + 256) = 0;
  return a1;
}

void sub_218320DCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  void *v17;

  if (a15 < 0)
    operator delete(__p);
  std::vector<boost::function<boost::test_tools::assertion_result ()(unsigned long)>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  v17 = *(void **)(v15 + 88);
  if (v17)
  {
    *(_QWORD *)(v15 + 96) = v17;
    operator delete(v17);
  }
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void boost::unit_test::test_unit::~test_unit(boost::unit_test::test_unit *this)
{
  void *v2;
  void **v3;

  boost::unit_test::framework::deregister_test_unit((unint64_t *)this);
  v3 = (void **)((char *)this + 240);
  std::vector<boost::filesystem::directory_iterator>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)((char *)this + 216);
  std::vector<boost::filesystem::directory_iterator>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*((char *)this + 183) < 0)
    operator delete(*((void **)this + 20));
  if (*((char *)this + 159) < 0)
    operator delete(*((void **)this + 17));
  v3 = (void **)((char *)this + 112);
  std::vector<boost::function<boost::test_tools::assertion_result ()(unsigned long)>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v2 = (void *)*((_QWORD *)this + 11);
  if (v2)
  {
    *((_QWORD *)this + 12) = v2;
    operator delete(v2);
  }
  v3 = (void **)((char *)this + 64);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
}

void boost::unit_test::test_unit::full_name(boost::unit_test::test_unit *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v4;
  boost::unit_test::framework::impl::_anonymous_namespace_ *v5;
  boost::unit_test::test_unit *v6;
  const std::string::value_type *v7;
  char *v8;
  const std::string::value_type *v9;
  int v10;
  const std::string::value_type *v11;
  std::string::size_type v12;

  if (*((_QWORD *)this + 7) == 0xFFFFFFFFLL
    || (v4 = boost::unit_test::framework::master_test_suite(this),
        v5 = (boost::unit_test::framework::impl::_anonymous_namespace_ *)*((_QWORD *)this + 7),
        v5 == *(boost::unit_test::framework::impl::_anonymous_namespace_ **)(v4 + 56)))
  {
    if (*((char *)this + 159) < 0)
    {
      std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 17), *((_QWORD *)this + 18));
    }
    else
    {
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 136);
      a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 19);
    }
  }
  else
  {
    v6 = (boost::unit_test::test_unit *)boost::unit_test::framework::get(v5, 16);
    boost::unit_test::test_unit::full_name(v6);
    std::string::append(a2, "/");
    v9 = (const std::string::value_type *)*((_QWORD *)this + 17);
    v8 = (char *)this + 136;
    v7 = v9;
    v10 = v8[23];
    if (v10 >= 0)
      v11 = v8;
    else
      v11 = v7;
    if (v10 >= 0)
      v12 = v8[23];
    else
      v12 = *((_QWORD *)v8 + 1);
    std::string::append(a2, v11, v12);
  }
}

void sub_218320F78(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

boost::unit_test::framework *boost::unit_test::test_suite::test_suite(boost::unit_test::framework *a1, __int128 *a2)
{
  boost::unit_test::test_suite *v3;
  __int128 v5;

  v5 = *a2;
  boost::unit_test::test_unit::test_unit((uint64_t)a1 + 8, (uint64_t)&v5);
  *(_QWORD *)a1 = &unk_24D93A4C8;
  *((_QWORD *)a1 + 34) = 0;
  *((_QWORD *)a1 + 35) = 0;
  *((_QWORD *)a1 + 38) = 0;
  *((_QWORD *)a1 + 39) = 0;
  *((_QWORD *)a1 + 36) = 0;
  *((_QWORD *)a1 + 37) = (char *)a1 + 304;
  *((_QWORD *)a1 + 41) = 0;
  *((_QWORD *)a1 + 42) = 0;
  *((_QWORD *)a1 + 40) = 0;
  boost::unit_test::framework::register_test_unit(a1, v3);
  return a1;
}

void sub_218321028(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  boost::unit_test::test_unit *v4;
  uint64_t v5;
  uint64_t v6;
  void **v7;
  _QWORD **v8;
  void **v9;
  void *v11;
  va_list va;

  va_start(va, a4);
  v9 = v7;
  std::vector<std::pair<boost::shared_ptr<boost::unit_test::test_unit_generator>,std::vector<boost::shared_ptr<boost::unit_test::decorator::base>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy(v6, *v8);
  v11 = *v9;
  if (*v9)
  {
    *(_QWORD *)(v5 + 280) = v11;
    operator delete(v11);
  }
  boost::unit_test::test_unit::~test_unit(v4);
  _Unwind_Resume(a1);
}

boost::unit_test::framework *boost::unit_test::master_test_suite_t::master_test_suite_t(boost::unit_test::master_test_suite_t *this)
{
  boost::unit_test::framework *result;
  __int128 v2;

  *(_QWORD *)&v2 = "Master Test Suite";
  *((_QWORD *)&v2 + 1) = "";
  result = boost::unit_test::test_suite::test_suite(this, &v2);
  *(_QWORD *)result = &unk_24D93A4E8;
  *((_DWORD *)result + 86) = 0;
  *((_QWORD *)result + 44) = 0;
  *((_DWORD *)result + 52) = 1;
  return result;
}

uint64_t boost::unit_test::traverse_test_tree(uint64_t result, uint64_t a2, int a3)
{
  if (*(_DWORD *)(result + 204) == 1 || a3 != 0)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 8))(a2, result);
  return result;
}

uint64_t boost::unit_test::traverse_test_tree(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;

  v5 = result;
  if ((a3 & 1) != 0 || *(_DWORD *)(result + 212) == 1)
  {
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, result);
    if ((_DWORD)result)
    {
      v6 = *(_QWORD *)(v5 + 272);
      v7 = *(_QWORD *)(v5 + 280) - v6;
      if (v7)
      {
        v8 = 0;
        v9 = v7 >> 3;
        do
        {
          boost::unit_test::traverse_test_tree(*(_QWORD *)(v6 + 8 * v8), a2, a3);
          v6 = *(_QWORD *)(v5 + 272);
          v10 = (*(_QWORD *)(v5 + 280) - v6) >> 3;
          v11 = v9 > v10;
          if (v9 >= v10)
            v9 = (*(_QWORD *)(v5 + 280) - v6) >> 3;
          if (!v11)
            ++v8;
        }
        while (v8 < v9);
      }
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, v5);
    }
  }
  return result;
}

_DWORD *boost::unit_test::traverse_test_tree(boost::unit_test::framework::impl::_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3)
{
  _DWORD *result;
  _DWORD *v7;

  if ((a1 & 0xFFFF0000) != 0)
  {
    result = boost::unit_test::framework::get(a1, 1);
    if (result[51] == 1 || (_DWORD)a3 != 0)
      return (_DWORD *)(*(uint64_t (**)(uint64_t, _DWORD *))(*(_QWORD *)a2 + 8))(a2, result);
  }
  else
  {
    v7 = boost::unit_test::framework::get(a1, 16);
    return (_DWORD *)boost::unit_test::traverse_test_tree((uint64_t)(v7 - 2), a2, a3);
  }
  return result;
}

void boost::unit_test::test_suite::~test_suite(boost::unit_test::test_suite *this)
{
  boost::unit_test::test_suite::~test_suite(this);
  JUMPOUT(0x219A19A08);
}

{
  void *v2;
  void **v3;

  *(_QWORD *)this = &unk_24D93A4C8;
  v3 = (void **)((char *)this + 320);
  std::vector<std::pair<boost::shared_ptr<boost::unit_test::test_unit_generator>,std::vector<boost::shared_ptr<boost::unit_test::decorator::base>>>>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)this + 296, *((_QWORD **)this + 38));
  v2 = (void *)*((_QWORD *)this + 34);
  if (v2)
  {
    *((_QWORD *)this + 35) = v2;
    operator delete(v2);
  }
  boost::unit_test::test_unit::~test_unit((boost::unit_test::test_suite *)((char *)this + 8));
}

void boost::unit_test::master_test_suite_t::~master_test_suite_t(boost::unit_test::master_test_suite_t *this)
{
  boost::unit_test::test_suite::~test_suite(this);
  JUMPOUT(0x219A19A08);
}

void std::vector<boost::function<boost::test_tools::assertion_result ()(unsigned long)>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  uint64_t *v2;
  uint64_t *v4;
  void *v5;

  v1 = *a1;
  v2 = (uint64_t *)**a1;
  if (v2)
  {
    v4 = (uint64_t *)v1[1];
    v5 = v2;
    if (v4 != v2)
    {
      do
        v4 = boost::function0<void>::~function0(v4 - 4);
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<std::pair<boost::shared_ptr<boost::unit_test::test_unit_generator>,std::vector<boost::shared_ptr<boost::unit_test::decorator::base>>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::pair<boost::shared_ptr<boost::unit_test::test_unit_generator>,std::vector<boost::shared_ptr<boost::unit_test::decorator::base>>>>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, (uint64_t)*v2);
    operator delete(**a1);
  }
}

void std::vector<std::pair<boost::shared_ptr<boost::unit_test::test_unit_generator>,std::vector<boost::shared_ptr<boost::unit_test::decorator::base>>>>::__base_destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t i;
  void **v5;

  for (i = *(_QWORD *)(a1 + 8); i != a2; i -= 40)
  {
    v5 = (void **)(i - 24);
    std::vector<boost::filesystem::directory_iterator>::__destroy_vector::operator()[abi:ne180100](&v5);
    boost::detail::shared_count::~shared_count((unsigned int **)(i - 32));
  }
  *(_QWORD *)(a1 + 8) = a2;
}

uint64_t *_GLOBAL__sub_I_test_tree_cpp()
{
  uint64_t *result;

  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  result = boost::unit_test::singleton<boost::unit_test::results_collector_t>::instance();
  return result;
}

uint64_t boost::unit_test::ut_detail::entry_value_collector::operator<<(uint64_t a1, uint64_t a2)
{
  return a1;
}

boost::unit_test::_anonymous_namespace_ *boost::unit_test::unit_test_log_t::operator<<(boost::unit_test::_anonymous_namespace_ *a1, uint64_t a2)
{
  boost::unit_test::_anonymous_namespace_ *v4;
  uint64_t v5;
  boost::unit_test::_anonymous_namespace_ *v6;
  boost::unit_test::_anonymous_namespace_ *v7;
  uint64_t v8;
  boost::unit_test::_anonymous_namespace_ *v9;
  boost::unit_test::_anonymous_namespace_ *v10;
  boost::unit_test::_anonymous_namespace_ *v11;
  boost::unit_test::_anonymous_namespace_ *v12;
  boost::unit_test::_anonymous_namespace_ *v13;
  int v14;
  boost::unit_test::_anonymous_namespace_ *v16;
  boost::unit_test::_anonymous_namespace_ *v17;
  boost::unit_test::_anonymous_namespace_ *v18;

  v8 = qword_254FF36E8;
  while (v5 != v8)
  {
    if (*(_BYTE *)v5)
    {
      v14 = dword_254FF3718;
      v13 = (boost::unit_test::_anonymous_namespace_ *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v5 + 32) + 160))(*(_QWORD *)(v5 + 32));
      if (v14 >= (int)v13 && *(_BYTE *)(a2 + 8) == 0)
      {
        v13 = (boost::unit_test::_anonymous_namespace_ *)boost::unit_test::unit_test_log_t::log_entry_start(v13, *(_DWORD *)(v5 + 4));
        if ((_DWORD)v13)
          v13 = (boost::unit_test::_anonymous_namespace_ *)(*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v5 + 32) + 112))(*(_QWORD *)(v5 + 32), *(_QWORD *)(v5 + 8), a2);
      }
    }
    v5 += 56;
  }
  return a1;
}

boost::unit_test::_anonymous_namespace_ *boost::unit_test::unit_test_log_t::operator<<(boost::unit_test::_anonymous_namespace_ *a1, __int128 *a2)
{
  boost::unit_test::_anonymous_namespace_ *v4;
  uint64_t v5;
  boost::unit_test::_anonymous_namespace_ *v6;
  boost::unit_test::_anonymous_namespace_ *v7;
  uint64_t v8;
  boost::unit_test::_anonymous_namespace_ *v9;
  boost::unit_test::_anonymous_namespace_ *v10;
  boost::unit_test::_anonymous_namespace_ *v11;
  boost::unit_test::_anonymous_namespace_ *v12;
  boost::unit_test::_anonymous_namespace_ *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  boost::unit_test::_anonymous_namespace_ *v17;
  boost::unit_test::_anonymous_namespace_ *v18;
  boost::unit_test::_anonymous_namespace_ *v19;
  __int128 v21;

  v8 = qword_254FF36E8;
  while (v5 != v8)
  {
    if (*(_BYTE *)v5)
    {
      v14 = dword_254FF3718;
      v13 = (boost::unit_test::_anonymous_namespace_ *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v5 + 32) + 160))(*(_QWORD *)(v5 + 32));
      if (v14 >= (int)v13 && *((_QWORD *)a2 + 1) != *(_QWORD *)a2)
      {
        v13 = (boost::unit_test::_anonymous_namespace_ *)boost::unit_test::unit_test_log_t::log_entry_start(v13, *(_DWORD *)(v5 + 4));
        if ((_DWORD)v13)
        {
          v15 = *(_QWORD *)(v5 + 32);
          v16 = *(_QWORD *)(v5 + 8);
          v21 = *a2;
          v13 = (boost::unit_test::_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)v15 + 104))(v15, v16, &v21);
        }
      }
    }
    v5 += 56;
  }
  return a1;
}

void boost::unit_test::ut_detail::entry_value_collector::~entry_value_collector(boost::unit_test::ut_detail::entry_value_collector *this)
{
  if (*(_BYTE *)this)
}

boost::unit_test::_anonymous_namespace_ *boost::unit_test::unit_test_log_t::operator<<(boost::unit_test::_anonymous_namespace_ *a1)
{
  boost::unit_test::_anonymous_namespace_ *v2;
  uint64_t i;
  turi::style_transfer::ResNet16ModelTrainer *v4;
  boost::unit_test::_anonymous_namespace_ *v5;
  boost::unit_test::_anonymous_namespace_ *v6;
  uint64_t v7;
  boost::unit_test::_anonymous_namespace_ *v8;
  boost::unit_test::_anonymous_namespace_ *v9;
  uint64_t v10;
  boost::unit_test::_anonymous_namespace_ *v11;
  boost::unit_test::_anonymous_namespace_ *v12;
  boost::unit_test::_anonymous_namespace_ *v13;
  boost::unit_test::_anonymous_namespace_ *v14;
  boost::unit_test::_anonymous_namespace_ *v15;
  BOOL v16;
  boost::unit_test::_anonymous_namespace_ *v17;
  boost::unit_test::_anonymous_namespace_ *v18;
  boost::unit_test::_anonymous_namespace_ *v19;

  {
    if (*(_BYTE *)(i + 48))
    {
      boost::unit_test::unit_test_log_t::log_entry_context(v4, dword_254FF3718);
      v10 = qword_254FF36E8;
      while (v7 != v10)
      {
        if (*(_BYTE *)v7)
          v16 = *(_BYTE *)(v7 + 48) == 0;
        else
          v16 = 1;
        if (!v16)
          v15 = (boost::unit_test::_anonymous_namespace_ *)(*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v7 + 32) + 120))(*(_QWORD *)(v7 + 32), *(_QWORD *)(v7 + 8));
        *(_BYTE *)(v7 + 48) = 0;
        v7 += 56;
      }
      break;
    }
  }
  boost::unit_test::framework::clear_context((boost::unit_test::framework *)0xFFFFFFFFLL);
  return a1;
}

void boost::unit_test::unit_test_log_t::test_start(boost::unit_test::unit_test_log_t *this, uint64_t a2)
{
  boost::unit_test::_anonymous_namespace_ *v3;
  uint64_t v4;
  boost::unit_test::_anonymous_namespace_ *v5;
  boost::unit_test::_anonymous_namespace_ *v6;
  uint64_t v7;
  boost::unit_test::_anonymous_namespace_ *v8;
  boost::unit_test::_anonymous_namespace_ *v9;
  boost::unit_test::_anonymous_namespace_ *v10;
  boost::unit_test::_anonymous_namespace_ *v11;
  boost::unit_test::_anonymous_namespace_ *v12;
  boost::unit_test::runtime_config *v13;
  unsigned __int8 *v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t *v17;
  boost::unit_test::_anonymous_namespace_ *v18;
  boost::unit_test::_anonymous_namespace_ *v19;
  boost::unit_test::_anonymous_namespace_ *v20;
  unsigned __int8 *v21[2];

  v7 = qword_254FF36E8;
  while (v4 != v7)
  {
    if (*(_BYTE *)v4)
    {
      v12 = (boost::unit_test::_anonymous_namespace_ *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 32) + 160))(*(_QWORD *)(v4 + 32));
      if ((_DWORD)v12 != 8)
      {
        v13 = (boost::unit_test::runtime_config *)(*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v4 + 32) + 16))(*(_QWORD *)(v4 + 32), *(_QWORD *)(v4 + 8), a2);
        if (byte_254FF9F1F >= 0)
          v14 = (unsigned __int8 *)&boost::unit_test::runtime_config::btrt_build_info;
        else
          v14 = (unsigned __int8 *)boost::unit_test::runtime_config::btrt_build_info;
        v15 = byte_254FF9F1F;
        if (byte_254FF9F1F < 0)
          v15 = unk_254FF9F10;
        v16 = &v14[v15];
        v17 = boost::unit_test::runtime_config::argument_store(v13);
        v21[0] = v14;
        v21[1] = v16;
        v12 = (boost::unit_test::_anonymous_namespace_ *)boost::runtime::arguments_store::get<BOOL>((uint64_t)v17, v21);
        if (*(_BYTE *)v12)
          v12 = (boost::unit_test::_anonymous_namespace_ *)(*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v4 + 32) + 32))(*(_QWORD *)(v4 + 32), *(_QWORD *)(v4 + 8));
        *(_BYTE *)(v4 + 48) = 0;
      }
    }
    v4 += 56;
  }
}

void boost::unit_test::`anonymous namespace'::s_log_impl(boost::unit_test::_anonymous_namespace_ *this)
{
  unsigned __int8 v1;
  boost::unit_test::_anonymous_namespace_::unit_test_log_impl *v2;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
    }
  }
}

void sub_2183218D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void boost::unit_test::unit_test_log_t::test_finish(boost::unit_test::unit_test_log_t *this)
{
  boost::unit_test::_anonymous_namespace_ *v1;
  uint64_t v2;
  boost::unit_test::_anonymous_namespace_ *v3;
  boost::unit_test::_anonymous_namespace_ *v4;
  boost::unit_test::_anonymous_namespace_ *v5;
  uint64_t v6;
  boost::unit_test::_anonymous_namespace_ *v7;
  boost::unit_test::_anonymous_namespace_ *v8;
  boost::unit_test::_anonymous_namespace_ *v9;
  boost::unit_test::_anonymous_namespace_ *v10;
  boost::unit_test::_anonymous_namespace_ *v11;

  v6 = qword_254FF36E8;
  while (1)
  {
    if (v2 == v6)
      break;
    if (*(_BYTE *)v2)
    {
      v10 = (boost::unit_test::_anonymous_namespace_ *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 32) + 160))(*(_QWORD *)(v2 + 32));
      if ((_DWORD)v10 != 8)
      {
        (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v2 + 32) + 24))(*(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 8));
        v10 = (boost::unit_test::_anonymous_namespace_ *)std::ostream::flush();
      }
    }
    v2 += 56;
  }
}

void boost::unit_test::unit_test_log_t::test_aborted(boost::unit_test::unit_test_log_t *this)
{
  boost::unit_test::_anonymous_namespace_ *v1;
  _QWORD v2[3];
  char v3;
  __int128 v4;

  v2[0] = "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/external/boost/boost_1_68_0/boost/test/impl/"
          "unit_test_log.ipp";
  v2[1] = "";
  v2[2] = 200;
  dword_254FF3718 = 2;
  v3 = 1;
  *(_QWORD *)&v4 = "Test is aborted";
  *((_QWORD *)&v4 + 1) = "";
  boost::unit_test::ut_detail::entry_value_collector::~entry_value_collector((boost::unit_test::ut_detail::entry_value_collector *)&v3);
}

void sub_218321A08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  boost::unit_test::ut_detail::entry_value_collector::~entry_value_collector((boost::unit_test::ut_detail::entry_value_collector *)&a15);
  _Unwind_Resume(a1);
}

boost::unit_test::_anonymous_namespace_ *boost::unit_test::unit_test_log_t::operator<<(boost::unit_test::_anonymous_namespace_ *a1, _QWORD *a2)
{
  boost::unit_test::_anonymous_namespace_ *v4;
  uint64_t i;
  boost::unit_test::_anonymous_namespace_ *v6;
  uint64_t v7;
  boost::unit_test::_anonymous_namespace_ *v8;
  boost::unit_test::_anonymous_namespace_ *v9;
  boost::unit_test::_anonymous_namespace_ *v10;
  uint64_t v11;
  boost::unit_test::_anonymous_namespace_ *v12;
  boost::unit_test::_anonymous_namespace_ *v13;
  boost::unit_test::_anonymous_namespace_ *v14;
  boost::unit_test::_anonymous_namespace_ *v15;
  uint64_t *v16;
  uint64_t v17;
  boost::unit_test::_anonymous_namespace_ *v18;
  std::string *v19;
  boost::unit_test::_anonymous_namespace_ *v20;
  boost::unit_test::_anonymous_namespace_ *v21;
  uint64_t *v22;
  boost::unit_test::_anonymous_namespace_ *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  boost::unit_test::_anonymous_namespace_ *v27;
  uint64_t *v28;
  char v29;
  int v30;
  uint64_t v31;

  {
    if (*(_BYTE *)(i + 48))
    {
      v4 = boost::unit_test::unit_test_log_t::operator<<(a1);
      break;
    }
  }
  v11 = qword_254FF36E8;
  while (1)
  {
    if (v7 == v11)
      break;
    if (*(_BYTE *)v7)
    {
      v16 = *(uint64_t **)(v7 + 16);
      v17 = *v16;
      *(_OWORD *)(v17 + 16) = *((_OWORD *)v16 + 1);
      *(_DWORD *)(v17 + 8) = *((_DWORD *)v16 + 2);
    }
    v7 += 56;
  }
  v19 = std::string::erase((std::string *)&qword_254FF36F8, 0, 0xFFFFFFFFFFFFFFFFLL);
  qword_254FF3710 = 0;
  dword_254FF3718 = 8;
  v20 = (boost::unit_test::_anonymous_namespace_ *)MEMORY[0x219A1939C](&qword_254FF36F8, *a2, a2[1] - *a2);
  if (byte_254FF370F >= 0)
    v22 = &qword_254FF36F8;
  else
    v22 = (uint64_t *)qword_254FF36F8;
  v24 = byte_254FF370F;
  if (byte_254FF370F >= 0)
    v25 = &qword_254FF36F8;
  else
    v25 = (uint64_t *)qword_254FF36F8;
  if (byte_254FF370F < 0)
    v24 = unk_254FF3700;
  v26 = (uint64_t *)((char *)v25 + v24);
  if (v22 != v26)
  {
    if (byte_254FF370F >= 0)
      v28 = &qword_254FF36F8;
    else
      v28 = (uint64_t *)qword_254FF36F8;
    do
    {
      v30 = *(unsigned __int8 *)v22;
      v22 = (uint64_t *)((char *)v22 + 1);
      v29 = v30;
      if (v30 == 92)
        v29 = 47;
      *(_BYTE *)v28 = v29;
      v28 = (uint64_t *)((char *)v28 + 1);
    }
    while (v22 != v26);
  }
  v31 = a2[2];
  qword_254FF3710 = v31;
  return a1;
}

void boost::unit_test::unit_test_log_t::operator()(boost::unit_test::_anonymous_namespace_ *a1@<X0>, int a2@<W1>, _BYTE *a3@<X8>)
{
  dword_254FF3718 = a2;
  *a3 = 1;
}

void boost::unit_test::unit_test_log_t::test_unit_start(boost::unit_test::unit_test_log_t *this, const boost::unit_test::test_unit *a2)
{
  boost::unit_test::_anonymous_namespace_ *v4;
  uint64_t i;
  boost::unit_test::_anonymous_namespace_ *v6;
  uint64_t v7;
  boost::unit_test::_anonymous_namespace_ *v8;
  boost::unit_test::_anonymous_namespace_ *v9;
  boost::unit_test::_anonymous_namespace_ *v10;
  uint64_t v11;
  boost::unit_test::_anonymous_namespace_ *v12;
  boost::unit_test::_anonymous_namespace_ *v13;
  boost::unit_test::_anonymous_namespace_ *v14;
  boost::unit_test::_anonymous_namespace_ *v15;
  boost::unit_test::_anonymous_namespace_ *v16;

  {
    if (*(_BYTE *)(i + 48))
    {
      v4 = boost::unit_test::unit_test_log_t::operator<<(this);
      break;
    }
  }
  v11 = qword_254FF36E8;
  while (1)
  {
    if (v7 == v11)
      break;
    if (*(_BYTE *)v7)
    {
      v15 = (boost::unit_test::_anonymous_namespace_ *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v7 + 32) + 160))(*(_QWORD *)(v7 + 32));
      if ((int)v15 <= 1)
        v15 = (boost::unit_test::_anonymous_namespace_ *)(*(uint64_t (**)(_QWORD, _QWORD, const boost::unit_test::test_unit *))(**(_QWORD **)(v7 + 32) + 40))(*(_QWORD *)(v7 + 32), *(_QWORD *)(v7 + 8), a2);
    }
    v7 += 56;
  }
}

void boost::unit_test::unit_test_log_t::test_unit_finish(boost::unit_test::unit_test_log_t *this, const boost::unit_test::test_unit *a2, uint64_t a3)
{
  boost::unit_test::_anonymous_namespace_ *v6;
  boost::unit_test::_anonymous_namespace_ *v7;
  uint64_t i;
  boost::unit_test::_anonymous_namespace_ *v9;
  uint64_t v10;
  boost::unit_test::_anonymous_namespace_ *v11;
  boost::unit_test::_anonymous_namespace_ *v12;
  boost::unit_test::_anonymous_namespace_ *v13;
  uint64_t v14;
  boost::unit_test::_anonymous_namespace_ *v15;
  boost::unit_test::_anonymous_namespace_ *v16;
  boost::unit_test::_anonymous_namespace_ *v17;
  boost::unit_test::_anonymous_namespace_ *v18;
  boost::unit_test::_anonymous_namespace_ *v19;

  qword_254FF3720 = qword_254FF3728;
  qword_254FF3730 = 0;
  if (byte_254FF374F < 0)
    operator delete((void *)qword_254FF3738);
  qword_254FF3738 = 0;
  qword_254FF3740 = 0;
  unk_254FF3748 = 0;
  {
    if (*(_BYTE *)(i + 48))
    {
      v7 = boost::unit_test::unit_test_log_t::operator<<(this);
      break;
    }
  }
  v14 = qword_254FF36E8;
  while (1)
  {
    if (v10 == v14)
      break;
    if (*(_BYTE *)v10)
    {
      v18 = (boost::unit_test::_anonymous_namespace_ *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v10 + 32)
                                                                                         + 160))(*(_QWORD *)(v10 + 32));
      if ((int)v18 <= 1)
        v18 = (boost::unit_test::_anonymous_namespace_ *)(*(uint64_t (**)(_QWORD, _QWORD, const boost::unit_test::test_unit *, uint64_t))(**(_QWORD **)(v10 + 32) + 48))(*(_QWORD *)(v10 + 32), *(_QWORD *)(v10 + 8), a2, a3);
    }
    v10 += 56;
  }
}

void boost::unit_test::unit_test_log_t::test_unit_skipped(boost::unit_test::_anonymous_namespace_ *a1, uint64_t a2, __int128 *a3)
{
  boost::unit_test::_anonymous_namespace_ *v6;
  uint64_t i;
  boost::unit_test::_anonymous_namespace_ *v8;
  uint64_t v9;
  boost::unit_test::_anonymous_namespace_ *v10;
  boost::unit_test::_anonymous_namespace_ *v11;
  boost::unit_test::_anonymous_namespace_ *v12;
  uint64_t v13;
  boost::unit_test::_anonymous_namespace_ *v14;
  boost::unit_test::_anonymous_namespace_ *v15;
  boost::unit_test::_anonymous_namespace_ *v16;
  boost::unit_test::_anonymous_namespace_ *v17;
  uint64_t v18;
  uint64_t v19;
  boost::unit_test::_anonymous_namespace_ *v20;
  __int128 v21;

  {
    if (*(_BYTE *)(i + 48))
    {
      v6 = boost::unit_test::unit_test_log_t::operator<<(a1);
      break;
    }
  }
  v13 = qword_254FF36E8;
  while (1)
  {
    if (v9 == v13)
      break;
    if (*(_BYTE *)v9)
    {
      v17 = (boost::unit_test::_anonymous_namespace_ *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v9 + 32) + 160))(*(_QWORD *)(v9 + 32));
      if ((int)v17 <= 1)
      {
        v18 = *(_QWORD *)(v9 + 32);
        v19 = *(_QWORD *)(v9 + 8);
        v21 = *a3;
        v17 = (boost::unit_test::_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, __int128 *))(*(_QWORD *)v18 + 56))(v18, v19, a2, &v21);
      }
    }
    v9 += 56;
  }
}

void boost::unit_test::unit_test_log_t::test_unit_aborted(boost::unit_test::unit_test_log_t *this, const boost::unit_test::test_unit *a2)
{
  boost::unit_test::_anonymous_namespace_ *v4;
  uint64_t i;
  boost::unit_test::_anonymous_namespace_ *v6;
  uint64_t v7;
  boost::unit_test::_anonymous_namespace_ *v8;
  boost::unit_test::_anonymous_namespace_ *v9;
  boost::unit_test::_anonymous_namespace_ *v10;
  uint64_t v11;
  boost::unit_test::_anonymous_namespace_ *v12;
  boost::unit_test::_anonymous_namespace_ *v13;
  boost::unit_test::_anonymous_namespace_ *v14;
  boost::unit_test::_anonymous_namespace_ *v15;
  boost::unit_test::_anonymous_namespace_ *v16;

  {
    if (*(_BYTE *)(i + 48))
    {
      v4 = boost::unit_test::unit_test_log_t::operator<<(this);
      break;
    }
  }
  v11 = qword_254FF36E8;
  while (1)
  {
    if (v7 == v11)
      break;
    if (*(_BYTE *)v7)
    {
      v15 = (boost::unit_test::_anonymous_namespace_ *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v7 + 32) + 160))(*(_QWORD *)(v7 + 32));
      if ((int)v15 <= 1)
        v15 = (boost::unit_test::_anonymous_namespace_ *)(*(uint64_t (**)(_QWORD, _QWORD, const boost::unit_test::test_unit *))(**(_QWORD **)(v7 + 32) + 72))(*(_QWORD *)(v7 + 32), *(_QWORD *)(v7 + 8), a2);
    }
    v7 += 56;
  }
}

void boost::unit_test::unit_test_log_t::exception_caught(boost::unit_test::_anonymous_namespace_ *a1, int *a2)
{
  unsigned int v4;
  uint64_t v5;
  boost::unit_test::_anonymous_namespace_ *v6;
  uint64_t i;
  boost::unit_test::_anonymous_namespace_ *v8;
  uint64_t v9;
  boost::unit_test::_anonymous_namespace_ *v10;
  boost::unit_test::_anonymous_namespace_ *v11;
  uint64_t v12;
  boost::unit_test::_anonymous_namespace_ *v13;
  boost::unit_test::_anonymous_namespace_ *v14;
  boost::unit_test::_anonymous_namespace_ *v15;
  boost::unit_test::_anonymous_namespace_ *v16;
  boost::unit_test::_anonymous_namespace_ *v17;
  uint64_t v18;
  uint64_t v19;
  turi::style_transfer::ResNet16ModelTrainer *v20;
  boost::unit_test::_anonymous_namespace_ *v21;
  boost::unit_test::_anonymous_namespace_ *v22;
  boost::unit_test::_anonymous_namespace_ *v23;

  if (*a2 < 0xD8)
    v4 = 6;
  else
    v4 = 7;
  if (*a2 >= 206)
    v5 = v4;
  else
    v5 = 5;
  {
    if (*(_BYTE *)(i + 48))
    {
      v6 = boost::unit_test::unit_test_log_t::operator<<(a1);
      break;
    }
  }
  v12 = qword_254FF36E8;
  while (v9 != v12)
  {
    if (*(_BYTE *)v9)
    {
      v17 = (boost::unit_test::_anonymous_namespace_ *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v9 + 32) + 160))(*(_QWORD *)(v9 + 32));
      if ((int)v5 >= (int)v17)
      {
        v18 = *(_QWORD *)(v9 + 32);
        v19 = *(_QWORD *)(v9 + 8);
        v20 = (turi::style_transfer::ResNet16ModelTrainer *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, int *))(*(_QWORD *)v18 + 80))(v18, v19, &qword_254FF3720, a2);
        boost::unit_test::unit_test_log_t::log_entry_context(v20, v5);
        v17 = (boost::unit_test::_anonymous_namespace_ *)(*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v9 + 32) + 88))(*(_QWORD *)(v9 + 32), *(_QWORD *)(v9 + 8));
      }
    }
    v9 += 56;
  }
  boost::unit_test::framework::clear_context((boost::unit_test::framework *)0xFFFFFFFFLL);
}

void boost::unit_test::unit_test_log_t::log_entry_context(turi::style_transfer::ResNet16ModelTrainer *a1, uint64_t a2)
{
  _BOOL8 is_empty;
  boost::unit_test::_anonymous_namespace_ *v4;
  uint64_t v5;
  boost::unit_test::_anonymous_namespace_ *v6;
  boost::unit_test::_anonymous_namespace_ *v7;
  boost::unit_test::_anonymous_namespace_ *v8;
  uint64_t v9;
  boost::unit_test::_anonymous_namespace_ *v10;
  boost::unit_test::_anonymous_namespace_ *v11;
  boost::unit_test::_anonymous_namespace_ *v12;
  boost::unit_test::_anonymous_namespace_ *v13;
  boost::unit_test::_anonymous_namespace_ *v14;
  boost::unit_test::_anonymous_namespace_ *v15;
  uint64_t v16;
  boost::unit_test::_anonymous_namespace_ *v17;
  boost::unit_test::_anonymous_namespace_ *v18;
  boost::unit_test::_anonymous_namespace_ *v19;
  uint64_t v20;
  boost::unit_test::_anonymous_namespace_ *v21;
  boost::unit_test::_anonymous_namespace_ *v22;
  boost::unit_test::_anonymous_namespace_ *v23;
  boost::unit_test::_anonymous_namespace_ *v24;
  uint64_t v25;
  uint64_t v26;
  boost::unit_test::_anonymous_namespace_ *v27;
  boost::unit_test::_anonymous_namespace_ *v28;
  uint64_t v29;
  uint64_t v30;
  boost::unit_test::_anonymous_namespace_ *v31;
  uint64_t v32;
  boost::unit_test::_anonymous_namespace_ *v33;
  boost::unit_test::_anonymous_namespace_ *v34;
  boost::unit_test::_anonymous_namespace_ *v35;
  uint64_t v36;
  boost::unit_test::_anonymous_namespace_ *v37;
  boost::unit_test::_anonymous_namespace_ *v38;
  boost::unit_test::_anonymous_namespace_ *v39;
  boost::unit_test::_anonymous_namespace_ *v40;
  boost::unit_test::_anonymous_namespace_ *v41;
  _QWORD v42[2];
  uint64_t v43;
  uint64_t v44;
  int v45;

  v45 = turi::style_transfer::ResNet16ModelTrainer::SupportsLossComponents(a1);
  is_empty = boost::unit_test::framework::context_generator::is_empty((boost::unit_test::framework::context_generator *)&v45);
  if (!is_empty)
  {
    v9 = qword_254FF36E8;
    while (1)
    {
      if (v5 == v9)
        break;
      if (*(_BYTE *)v5)
        v13 = (boost::unit_test::_anonymous_namespace_ *)(*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v5 + 32) + 128))(*(_QWORD *)(v5 + 32), *(_QWORD *)(v5 + 8), a2);
      v5 += 56;
    }
    while (1)
    {
      boost::unit_test::framework::context_generator::next((boost::unit_test::framework::context_generator *)&v45, &v43);
      v29 = v43;
      v30 = v44;
      if (v44 == v43)
        break;
      v20 = qword_254FF36E8;
      while (1)
      {
        if (v16 == v20)
          break;
        if (*(_BYTE *)v16)
        {
          v25 = *(_QWORD *)(v16 + 32);
          v26 = *(_QWORD *)(v16 + 8);
          v42[0] = v29;
          v42[1] = v30;
          v24 = (boost::unit_test::_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v25 + 136))(v25, v26, a2, v42);
        }
        v16 += 56;
      }
    }
    v36 = qword_254FF36E8;
    while (1)
    {
      if (v32 == v36)
        break;
      if (*(_BYTE *)v32)
        v40 = (boost::unit_test::_anonymous_namespace_ *)(*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v32 + 32) + 144))(*(_QWORD *)(v32 + 32), *(_QWORD *)(v32 + 8), a2);
      v32 += 56;
    }
  }
}

uint64_t boost::unit_test::unit_test_log_t::log_entry_start(boost::unit_test::_anonymous_namespace_ *a1, int a2)
{
  boost::unit_test::_anonymous_namespace_ *v3;
  uint64_t v4;
  boost::unit_test::_anonymous_namespace_ *v5;
  boost::unit_test::_anonymous_namespace_ *v6;
  boost::unit_test::_anonymous_namespace_ *v7;
  uint64_t v8;
  boost::unit_test::_anonymous_namespace_ *v9;
  boost::unit_test::_anonymous_namespace_ *v10;
  boost::unit_test::_anonymous_namespace_ *v11;
  boost::unit_test::_anonymous_namespace_ *v12;
  boost::unit_test::_anonymous_namespace_ *v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v8 = qword_254FF36E8;
  while (1)
  {
    if (v4 == v8)
      return 0;
    if (*(_DWORD *)(v4 + 4) == a2)
      break;
    v4 += 56;
  }
  if (*(_BYTE *)(v4 + 48))
    return 1;
  if (!*(_BYTE *)v4)
    return 0;
  result = 0;
  switch(dword_254FF3718)
  {
    case -1:
    case 1:
    case 8:
      return result;
    case 0:
      v17 = *(_QWORD *)(v4 + 32);
      v18 = *(_QWORD *)(v4 + 8);
      (*(void (**)(uint64_t, uint64_t, uint64_t *, _QWORD))(*(_QWORD *)v17 + 96))(v17, v18, &qword_254FF36F8, 0);
      goto LABEL_15;
    case 2:
      v19 = *(_QWORD *)(v4 + 32);
      v20 = *(_QWORD *)(v4 + 8);
      (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v19 + 96))(v19, v20, &qword_254FF36F8, 1);
      goto LABEL_15;
    case 3:
      v21 = *(_QWORD *)(v4 + 32);
      v22 = *(_QWORD *)(v4 + 8);
      (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v21 + 96))(v21, v22, &qword_254FF36F8, 2);
      goto LABEL_15;
    case 4:
    case 5:
    case 6:
      v15 = *(_QWORD *)(v4 + 32);
      v16 = *(_QWORD *)(v4 + 8);
      (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v15 + 96))(v15, v16, &qword_254FF36F8, 3);
      goto LABEL_15;
    case 7:
      v23 = *(_QWORD *)(v4 + 32);
      v24 = *(_QWORD *)(v4 + 8);
      (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v23 + 96))(v23, v24, &qword_254FF36F8, 4);
      goto LABEL_15;
    default:
LABEL_15:
      result = 1;
      *(_BYTE *)(v4 + 48) = 1;
      break;
  }
  return result;
}

void std::vector<boost::unit_test::`anonymous namespace'::unit_test_log_data_helper_impl>::push_back[abi:ne180100](uint64_t a1)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;

  v2 = qword_254FF36E8;
  if (qword_254FF36E8 < (unint64_t)qword_254FF36F0)
  {
    *(_OWORD *)qword_254FF36E8 = *(_OWORD *)a1;
    *(_QWORD *)(v2 + 24) = 0;
    v3 = *(_OWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 24) = 0;
    *(_OWORD *)(v2 + 16) = v3;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(v2 + 40) = 0;
    v4 = *(_OWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 40) = 0;
    *(_OWORD *)(v2 + 32) = v4;
    *(_QWORD *)(a1 + 32) = 0;
    *(_BYTE *)(v2 + 48) = *(_BYTE *)(a1 + 48);
    v5 = v2 + 56;
    goto LABEL_17;
  }
  v7 = 0x6DB6DB6DB6DB6DB7
  v8 = v7 + 1;
  if ((unint64_t)(v7 + 1) > 0x492492492492492)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  if (0xDB6DB6DB6DB6DB6ELL
    v8 = 0xDB6DB6DB6DB6DB6ELL
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7
    v9 = 0x492492492492492;
  else
    v9 = v8;
  if (v9 > 0x492492492492492)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v10 = (char *)operator new(56 * v9);
  v11 = &v10[56 * v7];
  v12 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)v11 = *(_OWORD *)a1;
  *((_OWORD *)v11 + 1) = v12;
  *((_OWORD *)v11 + 2) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  v11[48] = *(_BYTE *)(a1 + 48);
  if (v2 == v6)
  {
    v5 = (uint64_t)(v11 + 56);
    qword_254FF36E8 = (uint64_t)(v11 + 56);
    qword_254FF36F0 = (uint64_t)&v10[56 * v9];
    if (!v2)
      goto LABEL_17;
    goto LABEL_16;
  }
  v13 = 0;
  do
  {
    v14 = &v11[v13];
    v15 = v2 + v13;
    *(_OWORD *)(v14 - 56) = *(_OWORD *)(v2 + v13 - 56);
    v16 = *(_OWORD *)(v2 + v13 - 40);
    *(_QWORD *)(v15 - 32) = 0;
    *(_OWORD *)(v14 - 40) = v16;
    *(_QWORD *)(v15 - 40) = 0;
    v17 = *(_OWORD *)(v2 + v13 - 24);
    *(_QWORD *)(v15 - 16) = 0;
    *(_OWORD *)(v14 - 24) = v17;
    *(_QWORD *)(v15 - 24) = 0;
    *(v14 - 8) = *(_BYTE *)(v2 + v13 - 8);
    v13 -= 56;
  }
  while (v2 + v13 != v6);
  v18 = qword_254FF36E8;
  v5 = (uint64_t)(v11 + 56);
  qword_254FF36E8 = (uint64_t)(v11 + 56);
  for (qword_254FF36F0 = (uint64_t)&v10[56 * v9]; v18 != v2; v18 -= 56)
  {
    boost::detail::shared_count::~shared_count((unsigned int **)(v18 - 16));
    boost::detail::shared_count::~shared_count((unsigned int **)(v18 - 32));
  }
  if (v2)
LABEL_16:
    operator delete((void *)v2);
LABEL_17:
  qword_254FF36E8 = v5;
}

uint64_t boost::unit_test::`anonymous namespace'::unit_test_log_data_helper_impl::unit_test_log_data_helper_impl(uint64_t a1, uint64_t a2, int a3, char a4)
{
  _QWORD *v6;
  uint64_t *v7;
  uint64_t v8;
  char *v9;
  __n128 v10;

  *(_BYTE *)a1 = a4;
  *(_DWORD *)(a1 + 4) = a3;
  v6 = (_QWORD *)MEMORY[0x24BEDB318];
  *(_QWORD *)(a1 + 8) = MEMORY[0x24BEDB318];
  v7 = (uint64_t *)(a1 + 16);
  v8 = operator new();
  v9 = (char *)v6 + *(_QWORD *)(*v6 - 24);
  *(_QWORD *)v8 = v9;
  *(_DWORD *)(v8 + 8) = *((_DWORD *)v9 + 2);
  *(_OWORD *)(v8 + 16) = *((_OWORD *)v9 + 1);
  boost::shared_ptr<boost::io::ios_base_all_saver>::shared_ptr<boost::io::ios_base_all_saver>(v7, v8);
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 48) = 0;
  v10 = boost::shared_ptr<boost::unit_test::unit_test_log_formatter>::reset<boost::unit_test::unit_test_log_formatter>((__int128 *)(a1 + 32), a2);
  (*(void (**)(_QWORD, uint64_t, __n128))(**(_QWORD **)(a1 + 32) + 152))(*(_QWORD *)(a1 + 32), 4, v10);
  return a1;
}

void sub_2183226A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  boost::detail::shared_count::~shared_count((unsigned int **)(v1 + 40));
  boost::detail::shared_count::~shared_count((unsigned int **)(v1 + 24));
  _Unwind_Resume(a1);
}

uint64_t boost::unit_test::unit_test_log_formatter::log_entry_value(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  _OWORD v9[4];
  void *v10[2];
  __int128 v11;
  __int128 v12;
  _OWORD v13[11];
  _QWORD v14[2];
  __int128 v15;
  uint64_t v16;

  v12 = 0u;
  memset(v13, 0, sizeof(v13));
  *(_OWORD *)v10 = 0u;
  v11 = 0u;
  memset(v9, 0, sizeof(v9));
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v9);
  memset((char *)&v13[9] + 8, 0, 24);
  (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)a3 + 16))(a3, v9);
  std::stringbuf::str();
  if (SHIBYTE(v13[10]) < 0)
    operator delete(*((void **)&v13[9] + 1));
  *((_QWORD *)&v13[10] + 1) = v16;
  *(_OWORD *)((char *)&v13[9] + 8) = v15;
  v6 = HIBYTE(v16);
  v7 = (char *)v15;
  if (v16 < 0)
    v6 = *(_QWORD *)&v13[10];
  else
    v7 = (char *)&v13[9] + 8;
  v14[0] = v7;
  v14[1] = &v7[v6];
  (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a1 + 104))(a1, a2, v14);
  if (SHIBYTE(v13[10]) < 0)
    operator delete(*((void **)&v13[9] + 1));
  *(_QWORD *)&v9[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v9 + *(_QWORD *)(*(_QWORD *)&v9[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  *((_QWORD *)&v9[0] + 1) = MEMORY[0x24BEDB848] + 16;
  if (SHIBYTE(v11) < 0)
    operator delete(v10[1]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x219A198F4](v13);
}

void sub_218322820(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  boost::basic_wrap_stringstream<char>::~basic_wrap_stringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t boost::basic_wrap_stringstream<char>::~basic_wrap_stringstream(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  if (*(char *)(a1 + 287) < 0)
    operator delete(*(void **)(a1 + 264));
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)a1 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 8) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](a1 + 112);
  return a1;
}

uint64_t boost::unit_test::unit_test_log_formatter::set_log_level(uint64_t result, int a2)
{
  *(_DWORD *)(result + 8) = a2;
  return result;
}

uint64_t boost::unit_test::unit_test_log_formatter::get_log_level(boost::unit_test::unit_test_log_formatter *this)
{
  return *((unsigned int *)this + 2);
}

void boost::unit_test::`anonymous namespace'::unit_test_log_impl::unit_test_log_impl(boost::unit_test::_anonymous_namespace_::unit_test_log_impl *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE v4[24];
  unsigned int *v5[2];
  unsigned int *v6[2];

  qword_254FF36E8 = 0;
  qword_254FF36F0 = 0;
  boost::unit_test::log_entry_data::log_entry_data((std::string *)&qword_254FF36F8);
  qword_254FF3720 = (uint64_t)&boost::unit_test::basic_cstring<char const>::null_str(void)::null;
  qword_254FF3728 = (uint64_t)&boost::unit_test::basic_cstring<char const>::null_str(void)::null;
  qword_254FF3740 = 0;
  unk_254FF3748 = 0;
  qword_254FF3738 = 0;
  v1 = operator new();
  *(_DWORD *)(v1 + 8) = 4;
  *(_QWORD *)v1 = &unk_24D939A90;
  *(_BYTE *)(v1 + 12) = 0;
  boost::detail::shared_count::~shared_count(v6);
  boost::detail::shared_count::~shared_count(v5);
  v2 = operator new();
  *(_DWORD *)(v2 + 8) = 4;
  *(_QWORD *)v2 = &unk_24D93A6F0;
  *(_QWORD *)(v2 + 16) = &boost::unit_test::basic_cstring<char const>::null_str(void)::null;
  *(_QWORD *)(v2 + 24) = &boost::unit_test::basic_cstring<char const>::null_str(void)::null;
  boost::detail::shared_count::~shared_count(v6);
  boost::detail::shared_count::~shared_count(v5);
  v3 = operator new();
  *(_QWORD *)v3 = off_24D939E40;
  *(_QWORD *)(v3 + 24) = 0;
  *(_QWORD *)(v3 + 16) = v3 + 24;
  *(_QWORD *)(v3 + 32) = 0;
  *(_QWORD *)(v3 + 40) = v3 + 40;
  *(_QWORD *)(v3 + 48) = v3 + 40;
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 64) = v3 + 64;
  *(_QWORD *)(v3 + 72) = v3 + 64;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 96) = 0u;
  *(_OWORD *)(v3 + 112) = 0u;
  *(_OWORD *)(v3 + 121) = 0u;
  *(_QWORD *)(v3 + 144) = v3 + 144;
  *(_QWORD *)(v3 + 152) = v3 + 144;
  *(_QWORD *)(v3 + 160) = 0;
  *(_BYTE *)(v3 + 168) = 0;
  *(_DWORD *)(v3 + 8) = 0;
  *(_DWORD *)(v3 + 172) = 2;
  boost::detail::shared_count::~shared_count(v6);
  boost::detail::shared_count::~shared_count(v5);
}

void sub_218322A98(_Unwind_Exception *a1)
{
  uint64_t v1;

  boost::detail::shared_count::~shared_count((unsigned int **)(v1 + 40));
  boost::detail::shared_count::~shared_count((unsigned int **)(v1 + 24));
  if (byte_254FF374F < 0)
    operator delete((void *)qword_254FF3738);
  if (byte_254FF370F < 0)
    operator delete((void *)qword_254FF36F8);
  _Unwind_Resume(a1);
}

void boost::unit_test::`anonymous namespace'::unit_test_log_impl::~unit_test_log_impl(void **this)
{
  if (*((char *)this + 111) < 0)
    operator delete(this[11]);
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
}

uint64_t *std::vector<boost::unit_test::`anonymous namespace'::unit_test_log_data_helper_impl>::~vector[abi:ne180100](uint64_t *a1)
{
  if (*a1)
  {
    operator delete((void *)*a1);
  }
  return a1;
}

std::string *boost::unit_test::log_entry_data::log_entry_data(std::string *this)
{
  this->__r_.__value_.__r.__words[0] = 0;
  this->__r_.__value_.__l.__size_ = 0;
  this->__r_.__value_.__r.__words[2] = 0;
  std::string::reserve(this, 0xC8uLL);
  return this;
}

void sub_218322BB8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void std::vector<boost::unit_test::`anonymous namespace'::unit_test_log_data_helper_impl>::__base_destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t i;

  for (i = *(_QWORD *)(a1 + 8); i != a2; i -= 56)
  {
    boost::detail::shared_count::~shared_count((unsigned int **)(i - 16));
    boost::detail::shared_count::~shared_count((unsigned int **)(i - 32));
  }
  *(_QWORD *)(a1 + 8) = a2;
}

__n128 boost::shared_ptr<boost::unit_test::unit_test_log_formatter>::reset<boost::unit_test::unit_test_log_formatter>(__int128 *a1, uint64_t a2)
{
  __int128 v3;
  __n128 result;
  __int128 v5;

  boost::shared_ptr<boost::unit_test::unit_test_log_formatter>::shared_ptr<boost::unit_test::unit_test_log_formatter>((uint64_t *)&v5, a2);
  v3 = *a1;
  *a1 = v5;
  v5 = v3;
  boost::detail::shared_count::~shared_count((unsigned int **)&v5 + 1);
  return result;
}

uint64_t *boost::shared_ptr<boost::io::ios_base_all_saver>::shared_ptr<boost::io::ios_base_all_saver>(uint64_t *a1, uint64_t a2)
{
  unsigned int *v3;
  unsigned int *v5;

  *a1 = a2;
  a1[1] = 0;
  boost::detail::shared_count::shared_count<boost::io::ios_base_all_saver>(&v5, a2);
  v3 = (unsigned int *)a1[1];
  a1[1] = (uint64_t)v5;
  v5 = v3;
  boost::detail::shared_count::~shared_count(&v5);
  return a1;
}

void sub_218322CC8(_Unwind_Exception *a1)
{
  unsigned int **v1;

  boost::detail::shared_count::~shared_count(v1);
  _Unwind_Resume(a1);
}

_QWORD *boost::detail::shared_count::shared_count<boost::io::ios_base_all_saver>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = 0;
  v4 = (_QWORD *)operator new();
  v4[1] = 0x100000001;
  *v4 = &unk_24D93A630;
  v4[2] = a2;
  *a1 = v4;
  return a1;
}

void sub_218322D3C(void *a1)
{
  uint64_t *v1;

  __cxa_begin_catch(a1);
  boost::checked_delete<boost::io::ios_base_all_saver>(v1);
  __cxa_rethrow();
}

void sub_218322D50(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t *boost::checked_delete<boost::io::ios_base_all_saver>(uint64_t *result)
{
  uint64_t v1;

  if (result)
  {
    v1 = *result;
    *(_OWORD *)(v1 + 16) = *((_OWORD *)result + 1);
    *(_DWORD *)(v1 + 8) = *((_DWORD *)result + 2);
    JUMPOUT(0x219A19A08);
  }
  return result;
}

uint64_t *boost::detail::sp_counted_impl_p<boost::io::ios_base_all_saver>::dispose(uint64_t a1)
{
  uint64_t *result;
  uint64_t v2;

  result = *(uint64_t **)(a1 + 16);
  if (result)
  {
    v2 = *result;
    *(_OWORD *)(v2 + 16) = *((_OWORD *)result + 1);
    *(_DWORD *)(v2 + 8) = *((_DWORD *)result + 2);
    JUMPOUT(0x219A19A08);
  }
  return result;
}

uint64_t *boost::shared_ptr<boost::unit_test::unit_test_log_formatter>::shared_ptr<boost::unit_test::unit_test_log_formatter>(uint64_t *a1, uint64_t a2)
{
  unsigned int *v3;
  unsigned int *v5;

  *a1 = a2;
  a1[1] = 0;
  boost::detail::shared_count::shared_count<boost::unit_test::unit_test_log_formatter>(&v5, a2);
  v3 = (unsigned int *)a1[1];
  a1[1] = (uint64_t)v5;
  v5 = v3;
  boost::detail::shared_count::~shared_count(&v5);
  return a1;
}

void sub_218322E1C(_Unwind_Exception *a1)
{
  unsigned int **v1;

  boost::detail::shared_count::~shared_count(v1);
  _Unwind_Resume(a1);
}

_QWORD *boost::detail::shared_count::shared_count<boost::unit_test::unit_test_log_formatter>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = 0;
  v4 = (_QWORD *)operator new();
  v4[1] = 0x100000001;
  *v4 = &unk_24D93A690;
  v4[2] = a2;
  *a1 = v4;
  return a1;
}

void sub_218322E90(void *a1)
{
  uint64_t v1;

  __cxa_begin_catch(a1);
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  __cxa_rethrow();
}

void sub_218322EB0(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t *_GLOBAL__sub_I_unit_test_log_cpp()
{
  uint64_t *result;

  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  result = boost::unit_test::singleton<boost::unit_test::unit_test_log_t>::instance();
  return result;
}

uint64_t *_GLOBAL__sub_I_unit_test_main_cpp()
{
  uint64_t *result;

  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  result = boost::unit_test::singleton<boost::unit_test::results_collector_t>::instance();
  return result;
}

void *_GLOBAL__sub_I_unit_test_monitor_cpp()
{
  void *result;

  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  result = boost::unit_test::singleton<boost::unit_test::unit_test_monitor_t>::instance();
  return result;
}

void boost::runtime::arguments_store::~arguments_store(unsigned int ***this)
{
  std::__tree<std::__value_type<boost::unit_test::basic_cstring<char const>,boost::shared_ptr<boost::runtime::argument>>,std::__map_value_compare<boost::unit_test::basic_cstring<char const>,std::__value_type<boost::unit_test::basic_cstring<char const>,boost::shared_ptr<boost::runtime::argument>>,std::less<boost::unit_test::basic_cstring<char const>>,true>,std::allocator<std::__value_type<boost::unit_test::basic_cstring<char const>,boost::shared_ptr<boost::runtime::argument>>>>::destroy((uint64_t)this, this[1]);
}

uint64_t *boost::unit_test::runtime_config::argument_store(boost::unit_test::runtime_config *this)
{
}

void std::__tree<std::__value_type<boost::unit_test::basic_cstring<char const>,boost::shared_ptr<boost::runtime::argument>>,std::__map_value_compare<boost::unit_test::basic_cstring<char const>,std::__value_type<boost::unit_test::basic_cstring<char const>,boost::shared_ptr<boost::runtime::argument>>,std::less<boost::unit_test::basic_cstring<char const>>,true>,std::allocator<std::__value_type<boost::unit_test::basic_cstring<char const>,boost::shared_ptr<boost::runtime::argument>>>>::destroy(uint64_t a1, unsigned int **a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<boost::unit_test::basic_cstring<char const>,boost::shared_ptr<boost::runtime::argument>>,std::__map_value_compare<boost::unit_test::basic_cstring<char const>,std::__value_type<boost::unit_test::basic_cstring<char const>,boost::shared_ptr<boost::runtime::argument>>,std::less<boost::unit_test::basic_cstring<char const>>,true>,std::allocator<std::__value_type<boost::unit_test::basic_cstring<char const>,boost::shared_ptr<boost::runtime::argument>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<boost::unit_test::basic_cstring<char const>,boost::shared_ptr<boost::runtime::argument>>,std::__map_value_compare<boost::unit_test::basic_cstring<char const>,std::__value_type<boost::unit_test::basic_cstring<char const>,boost::shared_ptr<boost::runtime::argument>>,std::less<boost::unit_test::basic_cstring<char const>>,true>,std::allocator<std::__value_type<boost::unit_test::basic_cstring<char const>,boost::shared_ptr<boost::runtime::argument>>>>::destroy(a1, a2[1]);
    boost::detail::shared_count::~shared_count(a2 + 7);
    operator delete(a2);
  }
}

_QWORD *std::istringstream::basic_istringstream[abi:ne180100](_QWORD *a1, const std::string *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::ios_base *v11;

  v6 = MEMORY[0x24BEDB868];
  v7 = MEMORY[0x24BEDB868] + 64;
  a1[15] = MEMORY[0x24BEDB868] + 64;
  v8 = (uint64_t)(a1 + 2);
  v9 = *(_QWORD *)(MEMORY[0x24BEDB7F8] + 8);
  v10 = *(_QWORD *)(MEMORY[0x24BEDB7F8] + 16);
  *a1 = v9;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v9 - 24)) = v10;
  a1[1] = 0;
  v11 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  std::ios_base::init(v11, a1 + 2);
  v11[1].__vftable = 0;
  v11[1].__fmtflags_ = -1;
  *a1 = v6 + 24;
  a1[15] = v7;
  std::stringbuf::basic_stringbuf[abi:ne180100](v8, a2, a3 | 8);
  return a1;
}

void sub_2183230D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::istream::~istream();
  MEMORY[0x219A198F4](v1);
  _Unwind_Resume(a1);
}

uint64_t _GLOBAL__sub_I_unit_test_parameters_cpp()
{
  void (*v0)(void *);

  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  boost::runtime::help_prefix = (uint64_t)"////";
  *(_QWORD *)algn_254FF37A8 = "";
  std::string::basic_string[abi:ne180100]<0>(boost::unit_test::runtime_config::btrt_auto_start_dbg, "auto_start_dbg");
  v0 = (void (*)(void *))MEMORY[0x24BEDACF0];
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], boost::unit_test::runtime_config::btrt_auto_start_dbg, &dword_217E69000);
  std::string::basic_string[abi:ne180100]<0>(boost::unit_test::runtime_config::btrt_break_exec_path, "break_exec_path");
  __cxa_atexit(v0, boost::unit_test::runtime_config::btrt_break_exec_path, &dword_217E69000);
  std::string::basic_string[abi:ne180100]<0>(&boost::unit_test::runtime_config::btrt_build_info, "build_info");
  __cxa_atexit(v0, &boost::unit_test::runtime_config::btrt_build_info, &dword_217E69000);
  std::string::basic_string[abi:ne180100]<0>(boost::unit_test::runtime_config::btrt_catch_sys_errors, "catch_system_errors");
  __cxa_atexit(v0, boost::unit_test::runtime_config::btrt_catch_sys_errors, &dword_217E69000);
  std::string::basic_string[abi:ne180100]<0>(&boost::unit_test::runtime_config::btrt_color_output, "color_output");
  __cxa_atexit(v0, &boost::unit_test::runtime_config::btrt_color_output, &dword_217E69000);
  std::string::basic_string[abi:ne180100]<0>(boost::unit_test::runtime_config::btrt_detect_fp_except, "detect_fp_exceptions");
  __cxa_atexit(v0, boost::unit_test::runtime_config::btrt_detect_fp_except, &dword_217E69000);
  std::string::basic_string[abi:ne180100]<0>(boost::unit_test::runtime_config::btrt_detect_mem_leaks, "detect_memory_leaks");
  __cxa_atexit(v0, boost::unit_test::runtime_config::btrt_detect_mem_leaks, &dword_217E69000);
  std::string::basic_string[abi:ne180100]<0>(boost::unit_test::runtime_config::btrt_list_content, "list_content");
  __cxa_atexit(v0, boost::unit_test::runtime_config::btrt_list_content, &dword_217E69000);
  std::string::basic_string[abi:ne180100]<0>(boost::unit_test::runtime_config::btrt_list_labels, "list_labels");
  __cxa_atexit(v0, boost::unit_test::runtime_config::btrt_list_labels, &dword_217E69000);
  std::string::basic_string[abi:ne180100]<0>(boost::unit_test::runtime_config::btrt_log_format, "log_format");
  __cxa_atexit(v0, boost::unit_test::runtime_config::btrt_log_format, &dword_217E69000);
  std::string::basic_string[abi:ne180100]<0>(boost::unit_test::runtime_config::btrt_log_level, "log_level");
  __cxa_atexit(v0, boost::unit_test::runtime_config::btrt_log_level, &dword_217E69000);
  std::string::basic_string[abi:ne180100]<0>(boost::unit_test::runtime_config::btrt_log_sink, "log_sink");
  __cxa_atexit(v0, boost::unit_test::runtime_config::btrt_log_sink, &dword_217E69000);
  std::string::basic_string[abi:ne180100]<0>(boost::unit_test::runtime_config::btrt_combined_logger, "logger");
  __cxa_atexit(v0, boost::unit_test::runtime_config::btrt_combined_logger, &dword_217E69000);
  std::string::basic_string[abi:ne180100]<0>(boost::unit_test::runtime_config::btrt_output_format, "output_format");
  __cxa_atexit(v0, boost::unit_test::runtime_config::btrt_output_format, &dword_217E69000);
  std::string::basic_string[abi:ne180100]<0>(boost::unit_test::runtime_config::btrt_random_seed, "random");
  __cxa_atexit(v0, boost::unit_test::runtime_config::btrt_random_seed, &dword_217E69000);
  std::string::basic_string[abi:ne180100]<0>(boost::unit_test::runtime_config::btrt_report_format, "report_format");
  __cxa_atexit(v0, boost::unit_test::runtime_config::btrt_report_format, &dword_217E69000);
  std::string::basic_string[abi:ne180100]<0>(boost::unit_test::runtime_config::btrt_report_level, "report_level");
  __cxa_atexit(v0, boost::unit_test::runtime_config::btrt_report_level, &dword_217E69000);
  std::string::basic_string[abi:ne180100]<0>(boost::unit_test::runtime_config::btrt_report_mem_leaks, "report_memory_leaks_to");
  __cxa_atexit(v0, boost::unit_test::runtime_config::btrt_report_mem_leaks, &dword_217E69000);
  std::string::basic_string[abi:ne180100]<0>(boost::unit_test::runtime_config::btrt_report_sink, "report_sink");
  __cxa_atexit(v0, boost::unit_test::runtime_config::btrt_report_sink, &dword_217E69000);
  std::string::basic_string[abi:ne180100]<0>(boost::unit_test::runtime_config::btrt_result_code, "result_code");
  __cxa_atexit(v0, boost::unit_test::runtime_config::btrt_result_code, &dword_217E69000);
  std::string::basic_string[abi:ne180100]<0>(boost::unit_test::runtime_config::btrt_run_filters, "run_test");
  __cxa_atexit(v0, boost::unit_test::runtime_config::btrt_run_filters, &dword_217E69000);
  std::string::basic_string[abi:ne180100]<0>(boost::unit_test::runtime_config::btrt_save_test_pattern, "save_pattern");
  __cxa_atexit(v0, boost::unit_test::runtime_config::btrt_save_test_pattern, &dword_217E69000);
  std::string::basic_string[abi:ne180100]<0>(boost::unit_test::runtime_config::btrt_show_progress, "show_progress");
  __cxa_atexit(v0, boost::unit_test::runtime_config::btrt_show_progress, &dword_217E69000);
  std::string::basic_string[abi:ne180100]<0>(boost::unit_test::runtime_config::btrt_use_alt_stack, "use_alt_stack");
  __cxa_atexit(v0, boost::unit_test::runtime_config::btrt_use_alt_stack, &dword_217E69000);
  std::string::basic_string[abi:ne180100]<0>(boost::unit_test::runtime_config::btrt_wait_for_debugger, "wait_for_debugger");
  __cxa_atexit(v0, boost::unit_test::runtime_config::btrt_wait_for_debugger, &dword_217E69000);
  std::string::basic_string[abi:ne180100]<0>(boost::unit_test::runtime_config::btrt_help, "help");
  __cxa_atexit(v0, boost::unit_test::runtime_config::btrt_help, &dword_217E69000);
  std::string::basic_string[abi:ne180100]<0>(boost::unit_test::runtime_config::btrt_usage, "usage");
  __cxa_atexit(v0, boost::unit_test::runtime_config::btrt_usage, &dword_217E69000);
  std::string::basic_string[abi:ne180100]<0>(boost::unit_test::runtime_config::btrt_version, "version");
  __cxa_atexit(v0, boost::unit_test::runtime_config::btrt_version, &dword_217E69000);
  qword_254FF37C0 = 0;
  qword_254FF37B8 = 0;
  qword_254FF37D8 = 0;
  qword_254FF37D0 = 0;
}

_QWORD *boost::unit_test::output::xml_log_formatter::log_start(uint64_t a1, _QWORD *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"<TestLog>", 9);
}

_QWORD *boost::unit_test::output::xml_log_formatter::log_finish(uint64_t a1, _QWORD *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"</TestLog>", 10);
}

_QWORD *boost::unit_test::output::xml_log_formatter::log_build_info(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  char v11;
  char v12;
  char v13;
  char v14;

  v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"<BuildInfo", 10);
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)" platform", 9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"=\"", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Mac OS", 6);
  v11 = 34;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)&v11, 1);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)" compiler", 9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"=\"", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Clang version 16.0.0 (clang-1600.0.25.3) [+internal-os]", 55);
  v12 = 34;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)&v12, 1);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)" stl", 4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"=\"", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"libc++ version 180100", 21);
  v13 = 34;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)&v13, 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)" boost=\"", 8);
  v6 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)".", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)".", 1);
  v8 = (_QWORD *)std::ostream::operator<<();
  v14 = 34;
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)&v14, 1);
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"/>", 2);
}

_QWORD *boost::unit_test::output::xml_log_formatter::test_unit_start(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  char *v7;
  void **v9;
  uint64_t v10;
  _QWORD *v11;
  char *v12;
  int v13;
  BOOL v14;
  uint64_t v15;
  void **v16;
  uint64_t v17;
  void **v18;
  uint64_t v19;
  char v21;
  void *__p[2];
  unsigned __int8 v23;

  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"<", 1);
  v6 = 0;
  if (*(_DWORD *)a3 == 1)
    v7 = "TestCase";
  else
    v7 = "TestSuite";
  while (v7[v6++])
    ;
  std::string::basic_string[abi:ne180100](__p, v7, v6 - 1);
  if ((v23 & 0x80u) == 0)
    v9 = __p;
  else
    v9 = (void **)__p[0];
  if ((v23 & 0x80u) == 0)
    v10 = v23;
  else
    v10 = (uint64_t)__p[1];
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)v9, v10);
  if ((char)v23 < 0)
    operator delete(__p[0]);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)" name", 5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"=\"", 2);
  v12 = *(char **)(a3 + 136);
  v13 = *(char *)(a3 + 159);
  v14 = v13 < 0;
  if (v13 >= 0)
    v12 = (char *)(a3 + 136);
  v15 = *(unsigned __int8 *)(a3 + 159);
  if (v14)
    v15 = *(_QWORD *)(a3 + 144);
  __p[0] = v12;
  __p[1] = &v12[v15];
  boost::unit_test::utils::print_escaped(v11, (char **)__p);
  LOBYTE(__p[0]) = 34;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)__p, 1);
  if (*(_QWORD *)(a3 + 32) != *(_QWORD *)(a3 + 24))
  {
    std::string::basic_string[abi:ne180100](__p, " file", 5uLL);
    if ((v23 & 0x80u) == 0)
      v16 = __p;
    else
      v16 = (void **)__p[0];
    if ((v23 & 0x80u) == 0)
      v17 = v23;
    else
      v17 = (uint64_t)__p[1];
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)v16, v17);
    if ((char)v23 < 0)
      operator delete(__p[0]);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"=\"", 2);
    *(_OWORD *)__p = *(_OWORD *)(a3 + 24);
    boost::unit_test::utils::print_escaped(a2, (char **)__p);
    v21 = 34;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)&v21, 1);
    std::string::basic_string[abi:ne180100](__p, " line", 5uLL);
    if ((v23 & 0x80u) == 0)
      v18 = __p;
    else
      v18 = (void **)__p[0];
    if ((v23 & 0x80u) == 0)
      v19 = v23;
    else
      v19 = (uint64_t)__p[1];
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)v18, v19);
    if ((char)v23 < 0)
      operator delete(__p[0]);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"=\"", 2);
    std::ostream::operator<<();
    LOBYTE(__p[0]) = 34;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)__p, 1);
  }
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)">", 1);
}

void sub_218323A2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *boost::unit_test::output::xml_log_formatter::test_unit_finish(uint64_t a1, _QWORD *a2, _DWORD *a3)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  void **v10;
  uint64_t v11;
  void *__p[2];
  unsigned __int8 v14;

  if (*a3 == 1)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"<TestingTime>", 13);
    v5 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"</TestingTime>", 14);
  }
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"</", 2);
  v7 = 0;
  if (*a3 == 1)
    v8 = "TestCase";
  else
    v8 = "TestSuite";
  while (v8[v7++])
    ;
  std::string::basic_string[abi:ne180100](__p, v8, v7 - 1);
  if ((v14 & 0x80u) == 0)
    v10 = __p;
  else
    v10 = (void **)__p[0];
  if ((v14 & 0x80u) == 0)
    v11 = v14;
  else
    v11 = (uint64_t)__p[1];
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v10, v11);
  if ((char)v14 < 0)
    operator delete(__p[0]);
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)">", 1);
}

void sub_218323B54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *boost::unit_test::output::xml_log_formatter::test_unit_skipped(uint64_t a1, _QWORD *a2, uint64_t a3, _OWORD *a4)
{
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  void **v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  void *__p[2];
  unsigned __int8 v23;
  char v24;

  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"<", 1);
  v7 = 0;
  if (*(_DWORD *)a3 == 1)
    v8 = "TestCase";
  else
    v8 = "TestSuite";
  while (v8[v7++])
    ;
  std::string::basic_string[abi:ne180100](__p, v8, v7 - 1);
  if ((v23 & 0x80u) == 0)
    v10 = __p;
  else
    v10 = (void **)__p[0];
  if ((v23 & 0x80u) == 0)
    v11 = v23;
  else
    v11 = (uint64_t)__p[1];
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v10, v11);
  if ((char)v23 < 0)
    operator delete(__p[0]);
  v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" name", 5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"=\"", 2);
  v15 = *(_QWORD *)(a3 + 136);
  v14 = a3 + 136;
  v13 = v15;
  v16 = *(char *)(v14 + 23);
  if (v16 >= 0)
    v17 = v14;
  else
    v17 = v13;
  if (v16 >= 0)
    v18 = *(unsigned __int8 *)(v14 + 23);
  else
    v18 = *(_QWORD *)(v14 + 8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, v17, v18);
  LOBYTE(__p[0]) = 34;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)__p, 1);
  v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" skipped", 8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"=\"", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"yes", 3);
  LOBYTE(__p[0]) = 34;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)__p, 1);
  v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)" reason", 7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"=\"", 2);
  *(_OWORD *)__p = *a4;
  boost::unit_test::utils::print_escaped(v20, (char **)__p);
  v24 = 34;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)&v24, 1);
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"/>", 2);
}

void sub_218323D40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *boost::unit_test::output::xml_log_formatter::log_exception_start(uint64_t a1, _QWORD *a2, __int128 *a3, uint64_t a4)
{
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *result;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  char v21;

  v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"<Exception file", 15);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"=\"", 2);
  v20 = *(_OWORD *)(a4 + 24);
  boost::unit_test::utils::print_escaped(v7, (char **)&v20);
  v21 = 34;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v21, 1);
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" line", 5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"=\"", 2);
  std::ostream::operator<<();
  LOBYTE(v20) = 34;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)&v20, 1);
  if (*(_QWORD *)(a4 + 56) != *(_QWORD *)(a4 + 48))
  {
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)" function", 9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"=\"", 2);
    v20 = *(_OWORD *)(a4 + 48);
    boost::unit_test::utils::print_escaped(v9, (char **)&v20);
    v21 = 34;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v21, 1);
  }
  *(_QWORD *)&v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)">", 1);
  v19 = *(_OWORD *)(a4 + 8);
  result = boost::unit_test::utils::operator<<((_QWORD **)&v20, &v19);
  if (*((_QWORD *)a3 + 1) != *(_QWORD *)a3)
  {
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"<LastCheckpoint file", 20);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"=\"", 2);
    v20 = *a3;
    boost::unit_test::utils::print_escaped(v11, (char **)&v20);
    v21 = 34;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)&v21, 1);
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" line", 5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"=\"", 2);
    std::ostream::operator<<();
    LOBYTE(v20) = 34;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v20, 1);
    *(_QWORD *)&v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)">", 1);
    v15 = *((_QWORD *)a3 + 3);
    v14 = (uint64_t)a3 + 24;
    v13 = v15;
    v16 = *(unsigned __int8 *)(v14 + 23);
    if ((v16 & 0x80u) != 0)
      v16 = *(_QWORD *)(v14 + 8);
    else
      v13 = v14;
    *(_QWORD *)&v18 = v13;
    *((_QWORD *)&v18 + 1) = v13 + v16;
    v17 = boost::unit_test::utils::operator<<((_QWORD **)&v20, &v18);
    return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"</LastCheckpoint>", 17);
  }
  return result;
}

_QWORD *boost::unit_test::output::xml_log_formatter::log_exception_finish(uint64_t a1, _QWORD *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"</Exception>", 12);
}

void boost::unit_test::output::xml_log_formatter::log_entry_start(uint64_t a1, _QWORD *a2, char *a3, unsigned int a4)
{
  unsigned __int8 v7;
  _QWORD *v8;
  void *p_p;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  int v13;
  BOOL v14;
  char *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  void *__p;
  char *v24;
  unsigned __int8 v25;

  if ((v7 & 1) == 0)
  {
    v22 = a4;
    a4 = v22;
    if (v21)
    {
      boost::unit_test::output::xml_log_formatter::log_entry_start(std::ostream &,boost::unit_test::log_entry_data const&,boost::unit_test::unit_test_log_formatter::log_entry_types)::xml_tags[0] = (uint64_t)"Info";
      *(_QWORD *)algn_254FF37F8 = "";
      qword_254FF3800 = (uint64_t)"Message";
      unk_254FF3808 = "";
      qword_254FF3810 = (uint64_t)"Warning";
      unk_254FF3818 = "";
      qword_254FF3820 = (uint64_t)"Error";
      unk_254FF3828 = "";
      qword_254FF3830 = (uint64_t)"FatalError";
      unk_254FF3838 = "";
      a4 = v22;
    }
  }
  *(_OWORD *)(a1 + 16) = *(_OWORD *)&boost::unit_test::output::xml_log_formatter::log_entry_start(std::ostream &,boost::unit_test::log_entry_data const&,boost::unit_test::unit_test_log_formatter::log_entry_types)::xml_tags[2 * a4];
  LOBYTE(__p) = 60;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)&__p, 1);
  std::string::basic_string[abi:ne180100](&__p, *(void **)(a1 + 16), *(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16));
  if ((v25 & 0x80u) == 0)
    p_p = &__p;
  else
    p_p = __p;
  if ((v25 & 0x80u) == 0)
    v10 = v25;
  else
    v10 = (uint64_t)v24;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)p_p, v10);
  if ((char)v25 < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100](&__p, " file", 5uLL);
  if ((v25 & 0x80u) == 0)
    v11 = &__p;
  else
    v11 = __p;
  if ((v25 & 0x80u) == 0)
    v12 = v25;
  else
    v12 = (uint64_t)v24;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v11, v12);
  if ((char)v25 < 0)
    operator delete(__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"=\"", 2);
  v13 = a3[23];
  v14 = v13 < 0;
  v15 = *(char **)a3;
  if (v13 >= 0)
    v15 = a3;
  v16 = a3[23];
  if (v14)
    v16 = *((_QWORD *)a3 + 1);
  __p = v15;
  v24 = &v15[v16];
  boost::unit_test::utils::print_escaped(v8, (char **)&__p);
  LOBYTE(__p) = 34;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)&__p, 1);
  std::string::basic_string[abi:ne180100](&__p, " line", 5uLL);
  if ((v25 & 0x80u) == 0)
    v17 = &__p;
  else
    v17 = __p;
  if ((v25 & 0x80u) == 0)
    v18 = v25;
  else
    v18 = (uint64_t)v24;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v17, v18);
  if ((char)v25 < 0)
    operator delete(__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"=\"", 2);
  std::ostream::operator<<();
  LOBYTE(__p) = 34;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)&__p, 1);
  std::string::basic_string[abi:ne180100](&__p, "><![CDATA[", 0xAuLL);
  if ((v25 & 0x80u) == 0)
    v19 = &__p;
  else
    v19 = __p;
  if ((v25 & 0x80u) == 0)
    v20 = v25;
  else
    v20 = (uint64_t)v24;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v19, v20);
  if ((char)v25 < 0)
    operator delete(__p);
  *(_BYTE *)(a1 + 32) = 0;
}

void sub_21832427C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void boost::unit_test::output::xml_log_formatter::log_entry_value(uint64_t a1, _QWORD *a2, __int128 *a3)
{
  __int128 v3;

  v3 = *a3;
  boost::unit_test::utils::print_escaped_cdata(a2, (char **)&v3);
}

void boost::unit_test::output::xml_log_formatter::log_entry_finish(uint64_t a1, _QWORD *a2)
{
  void *p_p;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *__p;
  uint64_t v13;
  unsigned __int8 v14;

  if (!*(_BYTE *)(a1 + 32))
  {
    std::string::basic_string[abi:ne180100](&__p, "]]>", 3uLL);
    if ((v14 & 0x80u) == 0)
      p_p = &__p;
    else
      p_p = __p;
    if ((v14 & 0x80u) == 0)
      v5 = v14;
    else
      v5 = v13;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)p_p, v5);
    if ((char)v14 < 0)
      operator delete(__p);
    *(_BYTE *)(a1 + 32) = 1;
  }
  std::string::basic_string[abi:ne180100](&__p, "</", 2uLL);
  if ((v14 & 0x80u) == 0)
    v6 = &__p;
  else
    v6 = __p;
  if ((v14 & 0x80u) == 0)
    v7 = v14;
  else
    v7 = v13;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)v6, v7);
  if ((char)v14 < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100](&__p, *(void **)(a1 + 16), *(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16));
  if ((v14 & 0x80u) == 0)
    v8 = &__p;
  else
    v8 = __p;
  if ((v14 & 0x80u) == 0)
    v9 = v14;
  else
    v9 = v13;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)v8, v9);
  if ((char)v14 < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100](&__p, ">", 1uLL);
  if ((v14 & 0x80u) == 0)
    v10 = &__p;
  else
    v10 = __p;
  if ((v14 & 0x80u) == 0)
    v11 = v14;
  else
    v11 = v13;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)v10, v11);
  if ((char)v14 < 0)
    operator delete(__p);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 24);
}

void sub_218324434(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void boost::unit_test::output::xml_log_formatter::entry_context_start(uint64_t a1, _QWORD *a2)
{
  void *p_p;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *__p;
  uint64_t v9;
  unsigned __int8 v10;

  if (!*(_BYTE *)(a1 + 32))
  {
    std::string::basic_string[abi:ne180100](&__p, "]]>", 3uLL);
    if ((v10 & 0x80u) == 0)
      p_p = &__p;
    else
      p_p = __p;
    if ((v10 & 0x80u) == 0)
      v5 = v10;
    else
      v5 = v9;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)p_p, v5);
    if ((char)v10 < 0)
      operator delete(__p);
    *(_BYTE *)(a1 + 32) = 1;
  }
  std::string::basic_string[abi:ne180100](&__p, "<Context>", 9uLL);
  if ((v10 & 0x80u) == 0)
    v6 = &__p;
  else
    v6 = __p;
  if ((v10 & 0x80u) == 0)
    v7 = v10;
  else
    v7 = v9;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)v6, v7);
  if ((char)v10 < 0)
    operator delete(__p);
}

void sub_21832452C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void boost::unit_test::output::xml_log_formatter::entry_context_finish(uint64_t a1, _QWORD *a2)
{
  void **v3;
  uint64_t v4;
  void *__p[2];
  unsigned __int8 v6;

  std::string::basic_string[abi:ne180100](__p, "</Context>", 0xAuLL);
  if ((v6 & 0x80u) == 0)
    v3 = __p;
  else
    v3 = (void **)__p[0];
  if ((v6 & 0x80u) == 0)
    v4 = v6;
  else
    v4 = (uint64_t)__p[1];
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)v3, v4);
  if ((char)v6 < 0)
    operator delete(__p[0]);
}

void sub_2183245B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void boost::unit_test::output::xml_log_formatter::log_entry_context(uint64_t a1, _QWORD *a2, uint64_t a3, __int128 *a4)
{
  void *p_p;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  __int128 v11;
  _QWORD *v12;
  void *__p;
  uint64_t v14;
  unsigned __int8 v15;

  std::string::basic_string[abi:ne180100](&__p, "<Frame>", 7uLL);
  if ((v15 & 0x80u) == 0)
    p_p = &__p;
  else
    p_p = __p;
  if ((v15 & 0x80u) == 0)
    v7 = v15;
  else
    v7 = v14;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)p_p, v7);
  if ((char)v15 < 0)
    operator delete(__p);
  v12 = a2;
  v11 = *a4;
  v8 = boost::unit_test::utils::operator<<(&v12, &v11);
  std::string::basic_string[abi:ne180100](&__p, "</Frame>", 8uLL);
  if ((v15 & 0x80u) == 0)
    v9 = &__p;
  else
    v9 = __p;
  if ((v15 & 0x80u) == 0)
    v10 = v15;
  else
    v10 = v14;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
  if ((char)v15 < 0)
    operator delete(__p);
}

void sub_2183246B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void boost::unit_test::output::xml_log_formatter::~xml_log_formatter(boost::unit_test::output::xml_log_formatter *this)
{
  JUMPOUT(0x219A19A08);
}

uint64_t _GLOBAL__sub_I_xml_log_formatter_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

uint64_t *_GLOBAL__sub_I_xml_report_formatter_cpp()
{
  uint64_t *result;

  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  result = boost::unit_test::singleton<boost::unit_test::results_collector_t>::instance();
  return result;
}

const char *boost::thread_detail::future_error_category::name(boost::thread_detail::future_error_category *this)
{
  return "future";
}

_QWORD *boost::thread_detail::future_error_category::message@<X0>(int a1@<W1>, _QWORD *a2@<X8>)
{
  char *v3;

  if ((a1 - 1) > 3)
    v3 = "unspecified future_errc value\n";
  else
    v3 = off_24D93A818[a1 - 1];
  return std::string::basic_string[abi:ne180100]<0>(a2, v3);
}

uint64_t _GLOBAL__sub_I_future_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  qword_254FFA180 = (uint64_t)&unk_24D938C40;
  unk_254FFA188 = &boost::thread_detail::future_error_category_var;
  boost::thread_detail::future_error_category_var = (uint64_t)&off_24D93A7C8;
  return __cxa_atexit((void (*)(void *))boost::system::detail::system_error_category::~system_error_category, &boost::thread_detail::future_error_category_var, &dword_217E69000);
}

BOOL CoreML::hasSufficientBytesInQuantizedWeightParam(CoreML *this, const CoreML::Specification::WeightParams *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  _BOOL4 v18;
  _BOOL4 v19;
  BOOL v20;
  _BOOL4 v21;

  v2 = &CoreML::Specification::_QuantizationParams_default_instance_;
  v3 = *((_QWORD *)this + 8);
  if (v3)
    v2 = (uint64_t *)*((_QWORD *)this + 8);
  v4 = *((_QWORD *)this + 5);
  LODWORD(v5) = *(unsigned __int8 *)(v4 + 23);
  if (*(char *)(v4 + 23) < 0)
    v6 = *(_QWORD *)(v4 + 8);
  else
    v6 = *(unsigned __int8 *)(v4 + 23);
  v7 = *((_QWORD *)this + 6);
  LODWORD(v8) = *(unsigned __int8 *)(v7 + 23);
  if (*(char *)(v7 + 23) < 0)
    v9 = *(_QWORD *)(v7 + 8);
  else
    v9 = *(unsigned __int8 *)(v7 + 23);
  v10 = *((_DWORD *)this + 4);
  v11 = *((_QWORD *)this + 7);
  LODWORD(v12) = *(unsigned __int8 *)(v11 + 23);
  if (*(char *)(v11 + 23) < 0)
    v13 = *(_QWORD *)(v11 + 8);
  else
    v13 = *(unsigned __int8 *)(v11 + 23);
  v14 = v2[2];
  if (v10 <= 0)
    v15 = 1;
  else
    v15 = 2;
  if (v6)
    v16 = v15;
  else
    v16 = v10 > 0;
  if (v9)
    ++v16;
  if (v13)
    ++v16;
  if (v16 > 1)
  {
LABEL_23:
    LODWORD(v5) = 0;
    return (int)v5 >= (unint64_t)(v14 * (_QWORD)a2 + 7) >> 3;
  }
  if (v10 <= 0 && v16)
  {
    if ((v5 & 0x80) != 0)
    {
      v5 = *(_QWORD *)(v4 + 8);
      if (v5)
        return (int)v5 >= (unint64_t)(v14 * (_QWORD)a2 + 7) >> 3;
    }
    else if (*(_BYTE *)(v4 + 23))
    {
      return (int)v5 >= (unint64_t)(v14 * (_QWORD)a2 + 7) >> 3;
    }
    if ((v8 & 0x80) != 0)
    {
      v18 = this != (CoreML *)&CoreML::Specification::_WeightParams_default_instance_;
      v19 = v3 != 0;
      if (!v3)
        goto LABEL_43;
      if (this == (CoreML *)&CoreML::Specification::_WeightParams_default_instance_)
        goto LABEL_43;
      v8 = *(_QWORD *)(v7 + 8);
      if (!v8)
        goto LABEL_43;
    }
    else
    {
      v18 = this != (CoreML *)&CoreML::Specification::_WeightParams_default_instance_;
      v19 = v3 != 0;
      if (!v3 || this == (CoreML *)&CoreML::Specification::_WeightParams_default_instance_ || !*(_BYTE *)(v7 + 23))
      {
LABEL_43:
        if ((v12 & 0x80) != 0)
        {
          v12 = *(_QWORD *)(v11 + 8);
          v20 = v12 == 0;
        }
        else
        {
          v20 = (_DWORD)v12 == 0;
        }
        v21 = !v20 && v18;
        if (v19 && v21)
        {
          LODWORD(v5) = v12;
          return (int)v5 >= (unint64_t)(v14 * (_QWORD)a2 + 7) >> 3;
        }
        goto LABEL_23;
      }
    }
    LODWORD(v5) = v8;
    return (int)v5 >= (unint64_t)(v14 * (_QWORD)a2 + 7) >> 3;
  }
  if (v16)
    LODWORD(v5) = 4 * v10;
  else
    LODWORD(v5) = 0;
  return (int)v5 >= (unint64_t)(v14 * (_QWORD)a2 + 7) >> 3;
}

BOOL CoreML::hasValidQuantizationParams(CoreML *this, const CoreML::Specification::WeightParams *a2)
{
  uint64_t v2;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  int v9;

  v2 = *((_QWORD *)this + 8);
  if (this == (CoreML *)&CoreML::Specification::_WeightParams_default_instance_ || v2 == 0)
    return 0;
  v4 = *(_QWORD *)(v2 + 16);
  if ((unint64_t)(v4 - 1) > 7)
    return 0;
  v5 = *(_DWORD *)(v2 + 36);
  if (v5 == 102)
    return *(_DWORD *)(*(_QWORD *)(v2 + 24) + 16) == 1 << v4;
  if (v5 != 101)
    return 0;
  v6 = *(_QWORD *)(v2 + 24);
  v7 = *(_DWORD *)(v6 + 16);
  if (v7 != 1 && v7 != (_DWORD)a2)
    return 0;
  v9 = *(_DWORD *)(v6 + 40);
  return !v9 || v9 == v7;
}

uint64_t _GLOBAL__sub_I_QuantizationValidationUtils_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

uint64_t _GLOBAL__sub_I_once_atomic_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

uint64_t boost::exception_detail::get_static_exception_object<boost::exception_detail::bad_alloc_>@<X0>(_QWORD *a1@<X8>)
{
  unsigned __int8 v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  void *v13;
  uint64_t v14;
  __int128 v15;
  int v16;
  std::bad_alloc v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  std::bad_alloc v23;

  v19 = 0;
  v20 = 0;
  v21 = 0;
  v22 = -1;
  std::bad_alloc::bad_alloc(&v23);
  v18 = &unk_24D93A848;
  v23.__vftable = (std::bad_alloc_vtbl *)&unk_24D93A868;
  boost::exception_detail::clone_impl<boost::exception_detail::bad_alloc_>::clone_impl((uint64_t)&v13, (uint64_t)&v18);
  *(_QWORD *)&v15 = "exception_ptr boost::exception_detail::get_static_exception_object() [Exception = boost::exception_d"
                    "etail::bad_alloc_]";
  *((_QWORD *)&v15 + 1) = "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/external/boost/boost_1_68_0/"
                          "boost/exception/detail/exception_ptr.hpp";
  v16 = 129;
  if ((v2 & 1) == 0
  {
    v7 = operator new();
    *(_QWORD *)(v7 + 48) = &unk_24D918BA8;
    v8 = v14;
    *(_QWORD *)v7 = &unk_24D918C48;
    *(_QWORD *)(v7 + 8) = v8;
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 24))(v8);
    *(_OWORD *)(v7 + 16) = v15;
    *(_DWORD *)(v7 + 32) = v16;
    *(_QWORD *)v7 = &unk_24D93A8D0;
    *(_QWORD *)(v7 + 40) = &unk_24D93A900;
    *(_QWORD *)(v7 + 48) = &unk_24D93A940;
    boost::shared_ptr<boost::exception_detail::clone_base const>::shared_ptr<boost::exception_detail::clone_impl<boost::exception_detail::bad_alloc_>>(&v11, (_QWORD *)v7);
    boost::exception_detail::get_static_exception_object<boost::exception_detail::bad_alloc_>(void)::ep = v11;
    unk_254FD47E0 = v12;
    if (v12)
    {
      v9 = v12 + 2;
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    boost::detail::shared_count::~shared_count(&v12);
    __cxa_atexit((void (*)(void *))boost::filesystem::directory_iterator::~directory_iterator, &boost::exception_detail::get_static_exception_object<boost::exception_detail::bad_alloc_>(void)::ep, &dword_217E69000);
  }
  v3 = unk_254FD47E0;
  *a1 = boost::exception_detail::get_static_exception_object<boost::exception_detail::bad_alloc_>(void)::ep;
  a1[1] = v3;
  if (v3)
  {
    v4 = (unsigned int *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  std::bad_alloc::~bad_alloc(&v17);
  v13 = &unk_24D918C48;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 32))(v14);
  std::bad_alloc::~bad_alloc(&v23);
  v18 = &unk_24D918C48;
  result = v19;
  if (v19)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 32))(v19);
  return result;
}

void sub_2183261B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::bad_alloc a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  std::bad_alloc *v20;
  uint64_t v21;
  uint64_t v22;

  MEMORY[0x219A19A08](v21, 0x10F1C4085500448);
  std::bad_alloc::~bad_alloc(&a17);
  if (a13)
    (*(void (**)(uint64_t))(*(_QWORD *)a13 + 32))(a13);
  std::bad_alloc::~bad_alloc(v20);
  a19 = v22 + 16;
  if (a20)
    (*(void (**)(uint64_t))(*(_QWORD *)a20 + 32))(a20);
  _Unwind_Resume(a1);
}

uint64_t boost::exception_detail::get_static_exception_object<boost::exception_detail::bad_exception_>@<X0>(_QWORD *a1@<X8>)
{
  unsigned __int8 v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  void *v13;
  uint64_t v14;
  __int128 v15;
  int v16;
  std::bad_exception v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  std::bad_exception v23;

  v20 = 0;
  v21 = 0;
  v22 = -1;
  v18 = &unk_24D93AA08;
  v19 = 0;
  v23.__vftable = (std::bad_exception_vtbl *)&unk_24D93AA28;
  boost::exception_detail::clone_impl<boost::exception_detail::bad_exception_>::clone_impl((uint64_t)&v13, (uint64_t)&v18);
  *(_QWORD *)&v15 = "exception_ptr boost::exception_detail::get_static_exception_object() [Exception = boost::exception_d"
                    "etail::bad_exception_]";
  *((_QWORD *)&v15 + 1) = "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/external/boost/boost_1_68_0/"
                          "boost/exception/detail/exception_ptr.hpp";
  v16 = 129;
  if ((v2 & 1) == 0
  {
    v7 = operator new();
    *(_QWORD *)(v7 + 48) = &unk_24D918BA8;
    v8 = v14;
    *(_QWORD *)v7 = &unk_24D918C48;
    *(_QWORD *)(v7 + 8) = v8;
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 24))(v8);
    *(_OWORD *)(v7 + 16) = v15;
    *(_DWORD *)(v7 + 32) = v16;
    *(_QWORD *)v7 = &unk_24D93AA90;
    *(_QWORD *)(v7 + 40) = &unk_24D93AAC0;
    *(_QWORD *)(v7 + 48) = &unk_24D93AB00;
    boost::shared_ptr<boost::exception_detail::clone_base const>::shared_ptr<boost::exception_detail::clone_impl<boost::exception_detail::bad_exception_>>(&v11, (_QWORD *)v7);
    boost::exception_detail::get_static_exception_object<boost::exception_detail::bad_exception_>(void)::ep = v11;
    *(_QWORD *)algn_254FD47F8 = v12;
    if (v12)
    {
      v9 = v12 + 2;
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    boost::detail::shared_count::~shared_count(&v12);
    __cxa_atexit((void (*)(void *))boost::filesystem::directory_iterator::~directory_iterator, &boost::exception_detail::get_static_exception_object<boost::exception_detail::bad_exception_>(void)::ep, &dword_217E69000);
  }
  v3 = *(_QWORD *)algn_254FD47F8;
  *a1 = boost::exception_detail::get_static_exception_object<boost::exception_detail::bad_exception_>(void)::ep;
  a1[1] = v3;
  if (v3)
  {
    v4 = (unsigned int *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  std::bad_exception::~bad_exception(&v17);
  v13 = &unk_24D918C48;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 32))(v14);
  std::bad_exception::~bad_exception(&v23);
  v18 = &unk_24D918C48;
  result = v19;
  if (v19)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 32))(v19);
  return result;
}

void sub_218326454(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::bad_exception a17, uint64_t a18, void *a19, uint64_t a20)
{
  std::bad_exception *v20;
  uint64_t v21;

  MEMORY[0x219A19A08](v21, 0x10F1C4085500448);
  std::bad_exception::~bad_exception(&a17);
  if (a13)
    (*(void (**)(uint64_t))(*(_QWORD *)a13 + 32))(a13);
  std::bad_exception::~bad_exception(v20);
  a19 = &unk_24D918C48;
  if (a20)
    (*(void (**)(uint64_t))(*(_QWORD *)a20 + 32))(a20);
  _Unwind_Resume(a1);
}

uint64_t boost::exception_detail::clone_impl<boost::exception_detail::bad_alloc_>::clone_impl(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)(a1 + 48) = &unk_24D918BA8;
  *(_QWORD *)a1 = &unk_24D918C48;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *(_OWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 40) = &unk_24D93A900;
  *(_QWORD *)a1 = &unk_24D93A8D0;
  *(_QWORD *)(a1 + 48) = &unk_24D93A940;
  boost::exception_detail::copy_boost_exception(a1, a2);
  return a1;
}

{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)(a1 + 48) = &unk_24D918BA8;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = &unk_24D918C48;
  *(_QWORD *)(a1 + 8) = v4;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *(_OWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = v5;
  *(_QWORD *)a1 = &unk_24D93A8D0;
  *(_QWORD *)(a1 + 40) = &unk_24D93A900;
  *(_QWORD *)(a1 + 48) = &unk_24D93A940;
  return a1;
}

void sub_2183265B0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t *v2;
  std::bad_alloc *v3;
  uint64_t v4;

  std::bad_alloc::~bad_alloc(v3);
  *v1 = v4 + 16;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(v2);
  _Unwind_Resume(a1);
}

uint64_t boost::exception_detail::clone_impl<boost::exception_detail::bad_alloc_>::~clone_impl(uint64_t a1)
{
  std::bad_alloc::~bad_alloc((std::bad_alloc *)(a1 + 40));
  *(_QWORD *)a1 = &unk_24D918C48;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 8));
  return a1;
}

void boost::exception_detail::bad_alloc_::~bad_alloc_(boost::exception_detail::bad_alloc_ *this)
{
  std::bad_alloc::~bad_alloc((std::bad_alloc *)this + 5);
  *(_QWORD *)this = &unk_24D918C48;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)this + 1);
  JUMPOUT(0x219A19A08);
}

void `non-virtual thunk to'boost::exception_detail::bad_alloc_::~bad_alloc_(std::bad_alloc *this)
{
  uint64_t v1;

  std::bad_alloc::~bad_alloc(this);
  *(_QWORD *)(v1 - 40) = &unk_24D918C48;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(v1 - 32));
}

void `non-virtual thunk to'boost::exception_detail::bad_alloc_::~bad_alloc_(boost::exception_detail::bad_alloc_ *this)
{
  boost::exception_detail::bad_alloc_::~bad_alloc_((boost::exception_detail::bad_alloc_ *)((char *)this - 40));
}

void boost::exception_detail::clone_impl<boost::exception_detail::bad_alloc_>::~clone_impl(uint64_t a1)
{
  std::bad_alloc::~bad_alloc((std::bad_alloc *)(a1 + 40));
  *(_QWORD *)a1 = &unk_24D918C48;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 8));
  JUMPOUT(0x219A19A08);
}

char *boost::exception_detail::clone_impl<boost::exception_detail::bad_alloc_>::clone(uint64_t a1)
{
  _QWORD *v2;

  v2 = (_QWORD *)operator new();
  boost::exception_detail::clone_impl<boost::exception_detail::bad_alloc_>::clone_impl((uint64_t)v2, a1);
  return (char *)v2 + *(_QWORD *)(*v2 - 24);
}

void sub_2183267B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10F1C4085500448);
  _Unwind_Resume(a1);
}

void boost::exception_detail::clone_impl<boost::exception_detail::bad_alloc_>::rethrow(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x38uLL);
  boost::exception_detail::clone_impl<boost::exception_detail::bad_alloc_>::clone_impl((uint64_t)exception, a1);
}

void sub_218326814(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::bad_alloc_>::~clone_impl(uint64_t a1)
{
  boost::exception_detail::clone_impl<boost::exception_detail::bad_alloc_>::~clone_impl(a1 - 40);
}

char *`virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::bad_alloc_>::clone(_QWORD *a1)
{
  return boost::exception_detail::clone_impl<boost::exception_detail::bad_alloc_>::clone((uint64_t)a1 + *(_QWORD *)(*a1 - 24));
}

void `virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::bad_alloc_>::rethrow(_QWORD *a1)
{
  boost::exception_detail::clone_impl<boost::exception_detail::bad_alloc_>::rethrow((uint64_t)a1 + *(_QWORD *)(*a1 - 32));
}

uint64_t *`virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::bad_alloc_>::~clone_impl(_QWORD *a1)
{
  char *v1;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 40);
  std::bad_alloc::~bad_alloc((std::bad_alloc *)v1 + 5);
  *(_QWORD *)v1 = &unk_24D918C48;
  return boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)v1 + 1);
}

void `virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::bad_alloc_>::~clone_impl(_QWORD *a1)
{
  boost::exception_detail::clone_impl<boost::exception_detail::bad_alloc_>::~clone_impl((uint64_t)a1 + *(_QWORD *)(*a1 - 40));
}

_QWORD *boost::shared_ptr<boost::exception_detail::clone_base const>::shared_ptr<boost::exception_detail::clone_impl<boost::exception_detail::bad_alloc_>>(_QWORD *a1, _QWORD *a2)
{
  char *v3;
  unsigned int *v4;
  unsigned int *v6;

  if (a2)
    v3 = (char *)a2 + *(_QWORD *)(*a2 - 24);
  else
    v3 = 0;
  *a1 = v3;
  a1[1] = 0;
  boost::detail::shared_count::shared_count<boost::exception_detail::clone_impl<boost::exception_detail::bad_alloc_>>(&v6, (uint64_t)a2);
  v4 = (unsigned int *)a1[1];
  a1[1] = v6;
  v6 = v4;
  boost::detail::shared_count::~shared_count(&v6);
  return a1;
}

void sub_21832690C(_Unwind_Exception *a1)
{
  unsigned int **v1;

  boost::detail::shared_count::~shared_count(v1);
  _Unwind_Resume(a1);
}

_QWORD *boost::detail::shared_count::shared_count<boost::exception_detail::clone_impl<boost::exception_detail::bad_alloc_>>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = 0;
  v4 = (_QWORD *)operator new();
  v4[1] = 0x100000001;
  *v4 = &unk_24D93A9A8;
  v4[2] = a2;
  *a1 = v4;
  return a1;
}

void sub_218326980(void *a1)
{
  uint64_t v1;

  __cxa_begin_catch(a1);
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  __cxa_rethrow();
}

void sub_2183269A0(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t boost::exception_detail::clone_impl<boost::exception_detail::bad_exception_>::clone_impl(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)(a1 + 48) = &unk_24D918BA8;
  *(_QWORD *)a1 = &unk_24D918C48;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *(_OWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 40) = &unk_24D93AAC0;
  *(_QWORD *)a1 = &unk_24D93AA90;
  *(_QWORD *)(a1 + 48) = &unk_24D93AB00;
  boost::exception_detail::copy_boost_exception(a1, a2);
  return a1;
}

{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)(a1 + 48) = &unk_24D918BA8;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = &unk_24D918C48;
  *(_QWORD *)(a1 + 8) = v4;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *(_OWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = v5;
  *(_QWORD *)a1 = &unk_24D93AA90;
  *(_QWORD *)(a1 + 40) = &unk_24D93AAC0;
  *(_QWORD *)(a1 + 48) = &unk_24D93AB00;
  return a1;
}

void sub_218326A64(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t *v2;
  std::bad_exception *v3;
  uint64_t v4;

  std::bad_exception::~bad_exception(v3);
  *v1 = v4 + 16;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(v2);
  _Unwind_Resume(a1);
}

uint64_t boost::exception_detail::clone_impl<boost::exception_detail::bad_exception_>::~clone_impl(uint64_t a1)
{
  std::bad_exception::~bad_exception((std::bad_exception *)(a1 + 40));
  *(_QWORD *)a1 = &unk_24D918C48;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 8));
  return a1;
}

void boost::exception_detail::bad_exception_::~bad_exception_(boost::exception_detail::bad_exception_ *this)
{
  std::bad_exception::~bad_exception((std::bad_exception *)this + 5);
  *(_QWORD *)this = &unk_24D918C48;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)this + 1);
  JUMPOUT(0x219A19A08);
}

void `non-virtual thunk to'boost::exception_detail::bad_exception_::~bad_exception_(std::bad_exception *this)
{
  uint64_t v1;

  std::bad_exception::~bad_exception(this);
  *(_QWORD *)(v1 - 40) = &unk_24D918C48;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(v1 - 32));
}

void `non-virtual thunk to'boost::exception_detail::bad_exception_::~bad_exception_(boost::exception_detail::bad_exception_ *this)
{
  boost::exception_detail::bad_exception_::~bad_exception_((boost::exception_detail::bad_exception_ *)((char *)this - 40));
}

void boost::exception_detail::clone_impl<boost::exception_detail::bad_exception_>::~clone_impl(uint64_t a1)
{
  std::bad_exception::~bad_exception((std::bad_exception *)(a1 + 40));
  *(_QWORD *)a1 = &unk_24D918C48;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 8));
  JUMPOUT(0x219A19A08);
}

char *boost::exception_detail::clone_impl<boost::exception_detail::bad_exception_>::clone(uint64_t a1)
{
  _QWORD *v2;

  v2 = (_QWORD *)operator new();
  boost::exception_detail::clone_impl<boost::exception_detail::bad_exception_>::clone_impl((uint64_t)v2, a1);
  return (char *)v2 + *(_QWORD *)(*v2 - 24);
}

void sub_218326C68(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10F1C4085500448);
  _Unwind_Resume(a1);
}

void boost::exception_detail::clone_impl<boost::exception_detail::bad_exception_>::rethrow(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x38uLL);
  boost::exception_detail::clone_impl<boost::exception_detail::bad_exception_>::clone_impl((uint64_t)exception, a1);
}

void sub_218326CC8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::bad_exception_>::~clone_impl(uint64_t a1)
{
  boost::exception_detail::clone_impl<boost::exception_detail::bad_exception_>::~clone_impl(a1 - 40);
}

char *`virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::bad_exception_>::clone(_QWORD *a1)
{
  return boost::exception_detail::clone_impl<boost::exception_detail::bad_exception_>::clone((uint64_t)a1 + *(_QWORD *)(*a1 - 24));
}

void `virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::bad_exception_>::rethrow(_QWORD *a1)
{
  boost::exception_detail::clone_impl<boost::exception_detail::bad_exception_>::rethrow((uint64_t)a1 + *(_QWORD *)(*a1 - 32));
}

uint64_t *`virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::bad_exception_>::~clone_impl(_QWORD *a1)
{
  char *v1;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 40);
  std::bad_exception::~bad_exception((std::bad_exception *)v1 + 5);
  *(_QWORD *)v1 = &unk_24D918C48;
  return boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)v1 + 1);
}

void `virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::bad_exception_>::~clone_impl(_QWORD *a1)
{
  boost::exception_detail::clone_impl<boost::exception_detail::bad_exception_>::~clone_impl((uint64_t)a1 + *(_QWORD *)(*a1 - 40));
}

_QWORD *boost::shared_ptr<boost::exception_detail::clone_base const>::shared_ptr<boost::exception_detail::clone_impl<boost::exception_detail::bad_exception_>>(_QWORD *a1, _QWORD *a2)
{
  char *v3;
  unsigned int *v4;
  unsigned int *v6;

  if (a2)
    v3 = (char *)a2 + *(_QWORD *)(*a2 - 24);
  else
    v3 = 0;
  *a1 = v3;
  a1[1] = 0;
  boost::detail::shared_count::shared_count<boost::exception_detail::clone_impl<boost::exception_detail::bad_exception_>>(&v6, (uint64_t)a2);
  v4 = (unsigned int *)a1[1];
  a1[1] = v6;
  v6 = v4;
  boost::detail::shared_count::~shared_count(&v6);
  return a1;
}

void sub_218326DC0(_Unwind_Exception *a1)
{
  unsigned int **v1;

  boost::detail::shared_count::~shared_count(v1);
  _Unwind_Resume(a1);
}

_QWORD *boost::detail::shared_count::shared_count<boost::exception_detail::clone_impl<boost::exception_detail::bad_exception_>>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = 0;
  v4 = (_QWORD *)operator new();
  v4[1] = 0x100000001;
  *v4 = &unk_24D93AB68;
  v4[2] = a2;
  *a1 = v4;
  return a1;
}

void sub_218326E34(void *a1)
{
  uint64_t v1;

  __cxa_begin_catch(a1);
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  __cxa_rethrow();
}

void sub_218326E54(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t __cxx_global_var_init_5_1()
{
  uint64_t result;

  {
    boost::exception_detail::get_static_exception_object<boost::exception_detail::bad_alloc_>(boost::exception_detail::exception_ptr_static_exception_object<boost::exception_detail::bad_alloc_>::e);
    return __cxa_atexit((void (*)(void *))boost::filesystem::directory_iterator::~directory_iterator, boost::exception_detail::exception_ptr_static_exception_object<boost::exception_detail::bad_alloc_>::e, &dword_217E69000);
  }
  return result;
}

uint64_t __cxx_global_var_init_6_5()
{
  uint64_t result;

  {
    boost::exception_detail::get_static_exception_object<boost::exception_detail::bad_exception_>(boost::exception_detail::exception_ptr_static_exception_object<boost::exception_detail::bad_exception_>::e);
    return __cxa_atexit((void (*)(void *))boost::filesystem::directory_iterator::~directory_iterator, boost::exception_detail::exception_ptr_static_exception_object<boost::exception_detail::bad_exception_>::e, &dword_217E69000);
  }
  return result;
}

uint64_t _GLOBAL__sub_I_thread_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

uint64_t _GLOBAL__sub_I_tss_null_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void _GLOBAL__sub_I_har_utils_mm()
{
  void *v0;

  v0 = (void *)MEMORY[0x219A19FE4]();
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  objc_autoreleasePoolPop(v0);
}

void turi::style_transfer::DataIterator::Next(turi::style_transfer::DataIterator *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v3;
  int v4;
  __int128 v5;
  uint64_t v6;
  void **v7;

  *(_QWORD *)(a2 + 8) = 0;
  v3 = (uint64_t *)(a2 + 8);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  v4 = *((_DWORD *)this + 10) + 1;
  *((_DWORD *)this + 10) = v4;
  *(_DWORD *)a2 = v4;
  (*(void (**)(__int128 *__return_ptr, _QWORD, _QWORD))(**((_QWORD **)this + 3) + 24))(&v5, *((_QWORD *)this + 3), *((_QWORD *)this + 4));
  std::vector<turi::style_transfer::st_example>::__vdeallocate(v3);
  *(_OWORD *)(a2 + 8) = v5;
  *(_QWORD *)(a2 + 24) = v6;
  v6 = 0;
  v5 = 0uLL;
  v7 = (void **)&v5;
  std::vector<turi::style_transfer::st_example>::__destroy_vector::operator()[abi:ne180100](&v7);
}

void sub_218327080(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<turi::style_transfer::st_example>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t turi::style_transfer::InferenceDataIterator::HasNext(turi::style_transfer::InferenceDataIterator *this)
{
  if (*((_QWORD *)this + 8) == *((_QWORD *)this + 6))
    return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 16))(*((_QWORD *)this + 3));
  else
    return 1;
}

_QWORD *turi::style_transfer::InferenceDataIterator::Next@<X0>(turi::style_transfer::InferenceDataIterator *this@<X0>, uint64_t a2@<X8>)
{
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  void **v13;

  v4 = (int *)*((_QWORD *)this + 8);
  if (v4 == *((int **)this + 6))
  {
    if (((*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 16))(*((_QWORD *)this + 3)) & 1) != 0)
    {
      (*(void (**)(uint64_t *__return_ptr))(**((_QWORD **)this + 3) + 24))(&v10);
      *((_DWORD *)this + 18) = v10;
      std::vector<turi::style_transfer::st_example>::__vdeallocate((uint64_t *)this + 10);
      *((_OWORD *)this + 5) = v11;
      *((_QWORD *)this + 12) = v12;
      v12 = 0;
      v11 = 0uLL;
      v13 = (void **)&v11;
      std::vector<turi::style_transfer::st_example>::__destroy_vector::operator()[abi:ne180100](&v13);
      v4 = (int *)*((_QWORD *)this + 5);
      *((_QWORD *)this + 8) = v4;
    }
    else
    {
      v4 = (int *)*((_QWORD *)this + 8);
    }
  }
  v5 = *((_QWORD *)this + 10);
  v6 = *((_QWORD *)this + 11);
  if (v4 != *((int **)this + 6))
  {
    if (v5 != v6)
    {
      v7 = *v4;
      v8 = *((_QWORD *)this + 10);
      do
      {
        *(_QWORD *)(v8 + 128) = v7;
        v8 += 136;
      }
      while (v8 != v6);
    }
    *((_QWORD *)this + 8) = v4 + 1;
  }
  *(_DWORD *)a2 = *((_DWORD *)this + 18);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  return std::vector<turi::style_transfer::st_example>::__init_with_size[abi:ne180100]<turi::style_transfer::st_example*,turi::style_transfer::st_example*>((_QWORD *)(a2 + 8), v5, v6, 0xF0F0F0F0F0F0F0F1 * ((v6 - v5) >> 3));
}

uint64_t turi::style_transfer::ProgressUpdater::Invoke(uint64_t a1, unsigned int *a2)
{
  uint64_t v4;
  uint64_t v5;
  float *v6;
  uint64_t v7;
  float *v8;
  float v9;
  float v10;
  float v11;
  float *v12;
  float v13;
  unsigned int v14;
  uint64_t v15;
  float *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  uint64_t v21;
  uint64_t v22;
  float *v23;
  uint64_t v24;
  float *v25;
  float v26;
  float v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  float *v31;
  uint64_t v32;
  float *v33;
  float v34;
  float v35;
  void *__p[2];
  char v38;

  v4 = (uint64_t)(a2 + 2);
  std::string::basic_string[abi:ne180100]<0>(__p, "loss");
  v5 = std::map<std::string,turi::neural_net::shared_float_array>::at(v4, (const void **)__p);
  v6 = (float *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
  v8 = (float *)(v7 + 4 * (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5));
  v9 = 0.0;
  while (v6 != v8)
  {
    v10 = *v6++;
    v9 = v9 + v10;
  }
  v11 = (float)(unint64_t)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  if (v38 < 0)
    operator delete(__p[0]);
  v12 = *(float **)(a1 + 8);
  v13 = v9 / v11;
  if (v12)
  {
    *(float *)&v14 = (float)(*v12 * 0.9) + (float)(v13 * 0.1);
    *v12 = *(float *)&v14;
    v15 = v14;
  }
  else
  {
    v16 = (float *)operator new();
    *v16 = v13;
    v17 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v16;
    if (v17)
    {
      MEMORY[0x219A19A08](v17, 0x1000C4052888210);
      v15 = **(unsigned int **)(a1 + 8);
    }
    else
    {
      v15 = LODWORD(v13);
    }
  }
  v18 = *a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "style_loss");
  v19 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(v4, (const void **)__p);
  if (v38 < 0)
    operator delete(__p[0]);
  v20 = a2 + 4;
  if (a2 + 4 != (unsigned int *)v19)
  {
    v22 = *(_QWORD *)(v19 + 56);
    v21 = v19 + 56;
    v23 = (float *)(*(uint64_t (**)(uint64_t))(v22 + 16))(v21);
    v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 16))(v21);
    v25 = (float *)(v24 + 4 * (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 24))(v21));
    v26 = 0.0;
    while (v23 != v25)
    {
      v27 = *v23++;
      v26 = v26 + v27;
    }
    (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 24))(v21);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "content_loss");
  v28 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(v4, (const void **)__p);
  if (v38 < 0)
    operator delete(__p[0]);
  if (v20 != (unsigned int *)v28)
  {
    v30 = *(_QWORD *)(v28 + 56);
    v29 = v28 + 56;
    v31 = (float *)(*(uint64_t (**)(uint64_t))(v30 + 16))(v29);
    v32 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 16))(v29);
    v33 = (float *)(v32 + 4 * (*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 24))(v29));
    v34 = 0.0;
    while (v31 != v33)
    {
      v35 = *v31++;
      v34 = v34 + v35;
    }
    (*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 24))(v29);
  }
  return v18 | (v15 << 32);
}

void sub_2183274B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void turi::style_transfer::Checkpoint::ExtractWeights(turi::neural_net::model_spec **a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v3;
  __int128 v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;
  void *v11;
  __int128 v12[3];

  turi::neural_net::model_spec::export_params_view(*a1, (uint64_t)a2);
  v3 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 != a2 + 1)
  {
    do
    {
      turi::neural_net::shared_float_array::copy((uint64_t)(v3 + 7), (uint64_t)&v11);
      std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)(v3 + 8), v12);
      v4 = v12[2];
      *((_OWORD *)v3 + 5) = v12[1];
      *((_OWORD *)v3 + 6) = v4;
      v11 = &unk_24D9175B8;
      v5 = (std::__shared_weak_count *)*((_QWORD *)&v12[0] + 1);
      if (*((_QWORD *)&v12[0] + 1))
      {
        v6 = (unint64_t *)(*((_QWORD *)&v12[0] + 1) + 8);
        do
          v7 = __ldaxr(v6);
        while (__stlxr(v7 - 1, v6));
        if (!v7)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
      v8 = (_QWORD *)v3[1];
      if (v8)
      {
        do
        {
          v9 = v8;
          v8 = (_QWORD *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v9 = (_QWORD *)v3[2];
          v10 = *v9 == (_QWORD)v3;
          v3 = v9;
        }
        while (!v10);
      }
      v3 = v9;
    }
    while (v9 != a2 + 1);
  }
}

void sub_2183275D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

void turi::style_transfer::ModelTrainer::AsTrainingBatchPublisher(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t *a5@<X4>, uint64_t a6@<X5>, _OWORD *a7@<X8>)
{
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  _QWORD *v19;
  __int128 v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  _QWORD *v36;
  __int128 v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  __int128 v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  uint64_t v80;
  std::__shared_weak_count *v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  uint64_t v85;
  std::__shared_weak_count *v86;
  uint64_t v87;
  std::__shared_weak_count *v88;
  uint64_t v89;
  std::__shared_weak_count *v90;
  int v91;
  _QWORD *v92;
  std::__shared_weak_count *v93;
  uint64_t v94;
  std::__shared_weak_count *v95;
  __int128 v96;
  __int128 v97;

  v91 = a4;
  std::allocate_shared[abi:ne180100]<turi::style_transfer::DataIterator,std::allocator<turi::style_transfer::DataIterator>,std::unique_ptr<turi::style_transfer::data_iterator>,int &,int &,void>(a2, (int *)(a1 + 16), &v91, &v89);
  v12 = *(_QWORD *)(a1 + 20);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 48))(&v87, a1, a3, a6);
  v85 = v87;
  v86 = v88;
  if (v88)
  {
    p_shared_owners = (unint64_t *)&v88->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  v15 = operator new(0x28uLL);
  v15[2] = 0;
  *v15 = &unk_24D93AD40;
  v15[1] = 0;
  v16 = *a5;
  *a5 = 0;
  v15[3] = &off_24D93AC78;
  v15[4] = v16;
  *(_QWORD *)&v84 = v15 + 3;
  *((_QWORD *)&v84 + 1) = v15;
  turi::neural_net::Iterator<turi::style_transfer::DataBatch>::AsPublisher(v89, &v80);
  v17 = v80;
  v18 = (std::__shared_weak_count *)operator new(0x28uLL);
  v18->__shared_owners_ = 0;
  v18->__shared_weak_owners_ = 0;
  v18->__vftable = (std::__shared_weak_count_vtbl *)&off_24D93AEF0;
  v18[1].__vftable = (std::__shared_weak_count_vtbl *)&off_24D93AF40;
  v18[1].__shared_owners_ = v12;
  v92 = &v18[1].__vftable;
  v93 = v18;
  v94 = 0;
  v95 = 0;
  std::shared_ptr<turi::neural_net::Iterator<std::unique_ptr<turi::style_transfer::Checkpoint>>>::shared_ptr[abi:ne180100]<turi::neural_net::Iterator<std::unique_ptr<turi::style_transfer::Checkpoint>>,void>(&v96, (_QWORD *)(v17 + 8));
  v19 = operator new(0x50uLL);
  v19[1] = 0;
  v19[2] = 0;
  *v19 = &unk_24D93AF90;
  v20 = v96;
  v96 = 0uLL;
  v92 = 0;
  v93 = 0;
  v19[4] = 0;
  v19[3] = &unk_24D93AFE0;
  v19[5] = 0;
  *((_OWORD *)v19 + 3) = v20;
  v19[8] = v18 + 1;
  v19[9] = v18;
  *(_QWORD *)&v97 = v19 + 3;
  *((_QWORD *)&v97 + 1) = v19;
  std::shared_ptr<turi::visualization::Plot>::__enable_weak_this[abi:ne180100]<cppipc::ipc_object_base,turi::visualization::Plot,void>((uint64_t)&v97, v19 + 4, (uint64_t)(v19 + 3));
  v82 = v97;
  v97 = 0uLL;
  v21 = (std::__shared_weak_count *)*((_QWORD *)&v96 + 1);
  if (*((_QWORD *)&v96 + 1))
  {
    v22 = (unint64_t *)(*((_QWORD *)&v96 + 1) + 8);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v24 = v93;
  if (v93)
  {
    v25 = (unint64_t *)&v93->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = v95;
  if (v95)
  {
    v28 = (unint64_t *)&v95->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  v30 = v82;
  v31 = v85;
  v32 = v86;
  v78 = v85;
  v79 = v86;
  if (v86)
  {
    v33 = (unint64_t *)&v86->__shared_owners_;
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 1, v33));
  }
  v35 = (std::__shared_weak_count *)operator new(0x30uLL);
  v35->__shared_owners_ = 0;
  v35->__shared_weak_owners_ = 0;
  v35->__vftable = (std::__shared_weak_count_vtbl *)&off_24D93B108;
  v35[1].__vftable = (std::__shared_weak_count_vtbl *)&off_24D93B158;
  v78 = 0;
  v79 = 0;
  v35[1].__shared_owners_ = v31;
  v35[1].__shared_weak_owners_ = (uint64_t)v32;
  v92 = &v35[1].__vftable;
  v93 = v35;
  v94 = 0;
  v95 = 0;
  std::shared_ptr<turi::neural_net::Iterator<std::unique_ptr<turi::style_transfer::Checkpoint>>>::shared_ptr[abi:ne180100]<turi::neural_net::Iterator<std::unique_ptr<turi::style_transfer::Checkpoint>>,void>(&v96, (_QWORD *)(v30 + 8));
  v36 = operator new(0x50uLL);
  v36[1] = 0;
  v36[2] = 0;
  *v36 = &unk_24D93B1A8;
  v37 = v96;
  v96 = 0uLL;
  v92 = 0;
  v93 = 0;
  v36[4] = 0;
  v36[3] = &unk_24D93B1F8;
  v36[5] = 0;
  *((_OWORD *)v36 + 3) = v37;
  v36[8] = v35 + 1;
  v36[9] = v35;
  *(_QWORD *)&v97 = v36 + 3;
  *((_QWORD *)&v97 + 1) = v36;
  std::shared_ptr<turi::visualization::Plot>::__enable_weak_this[abi:ne180100]<cppipc::ipc_object_base,turi::visualization::Plot,void>((uint64_t)&v97, v36 + 4, (uint64_t)(v36 + 3));
  v83 = v97;
  v97 = 0uLL;
  v38 = (std::__shared_weak_count *)*((_QWORD *)&v96 + 1);
  if (*((_QWORD *)&v96 + 1))
  {
    v39 = (unint64_t *)(*((_QWORD *)&v96 + 1) + 8);
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  v41 = v93;
  if (v93)
  {
    v42 = (unint64_t *)&v93->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  v44 = v95;
  if (v95)
  {
    v45 = (unint64_t *)&v95->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  v47 = v83;
  v77 = v84;
  if (*((_QWORD *)&v84 + 1))
  {
    v48 = (unint64_t *)(*((_QWORD *)&v84 + 1) + 8);
    do
      v49 = __ldxr(v48);
    while (__stxr(v49 + 1, v48));
  }
  turi::neural_net::Publisher<turi::style_transfer::EncodedBatch>::Map<turi::style_transfer::ProgressUpdater>(v47, &v77, a7);
  v50 = (std::__shared_weak_count *)*((_QWORD *)&v77 + 1);
  if (*((_QWORD *)&v77 + 1))
  {
    v51 = (unint64_t *)(*((_QWORD *)&v77 + 1) + 8);
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  v53 = (std::__shared_weak_count *)*((_QWORD *)&v83 + 1);
  if (*((_QWORD *)&v83 + 1))
  {
    v54 = (unint64_t *)(*((_QWORD *)&v83 + 1) + 8);
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  v56 = v79;
  if (v79)
  {
    v57 = (unint64_t *)&v79->__shared_owners_;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  v59 = (std::__shared_weak_count *)*((_QWORD *)&v82 + 1);
  if (*((_QWORD *)&v82 + 1))
  {
    v60 = (unint64_t *)(*((_QWORD *)&v82 + 1) + 8);
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  v62 = v81;
  if (v81)
  {
    v63 = (unint64_t *)&v81->__shared_owners_;
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
  v65 = (std::__shared_weak_count *)*((_QWORD *)&v84 + 1);
  if (*((_QWORD *)&v84 + 1))
  {
    v66 = (unint64_t *)(*((_QWORD *)&v84 + 1) + 8);
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  v68 = v86;
  if (v86)
  {
    v69 = (unint64_t *)&v86->__shared_owners_;
    do
      v70 = __ldaxr(v69);
    while (__stlxr(v70 - 1, v69));
    if (!v70)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
    }
  }
  v71 = v88;
  if (v88)
  {
    v72 = (unint64_t *)&v88->__shared_owners_;
    do
      v73 = __ldaxr(v72);
    while (__stlxr(v73 - 1, v72));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  v74 = v90;
  if (v90)
  {
    v75 = (unint64_t *)&v90->__shared_owners_;
    do
      v76 = __ldaxr(v75);
    while (__stlxr(v76 - 1, v75));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
      std::__shared_weak_count::__release_weak(v74);
    }
  }
}

void sub_218327BD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,char a24,uint64_t a25,char a26)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a26);
  _Unwind_Resume(a1);
}

void sub_218327C88()
{
  JUMPOUT(0x218327C60);
}

void sub_218327C90()
{
  JUMPOUT(0x218327C68);
}

void sub_218327C98()
{
  JUMPOUT(0x218327C78);
}

void turi::neural_net::Iterator<turi::style_transfer::DataBatch>::AsPublisher(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  __int128 v6;

  std::shared_ptr<turi::neural_net::Iterator<std::unique_ptr<turi::style_transfer::Checkpoint>>>::shared_ptr[abi:ne180100]<turi::neural_net::Iterator<std::unique_ptr<turi::style_transfer::Checkpoint>>,void>(&v6, (_QWORD *)(a1 + 8));
  std::allocate_shared[abi:ne180100]<turi::neural_net::IteratorPublisher<turi::style_transfer::DataBatch>,std::allocator<turi::neural_net::IteratorPublisher<turi::style_transfer::DataBatch>>,std::shared_ptr<turi::neural_net::Iterator<turi::style_transfer::DataBatch>>,void>(&v6, a2);
  v3 = (std::__shared_weak_count *)*((_QWORD *)&v6 + 1);
  if (*((_QWORD *)&v6 + 1))
  {
    v4 = (unint64_t *)(*((_QWORD *)&v6 + 1) + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_218327D18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void turi::neural_net::Publisher<turi::style_transfer::EncodedBatch>::Map<turi::style_transfer::ProgressUpdater>(uint64_t a1@<X0>, __int128 *a2@<X1>, _OWORD *a3@<X8>)
{
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  __int128 v8;
  __int128 v9;

  std::shared_ptr<turi::neural_net::Iterator<std::unique_ptr<turi::style_transfer::Checkpoint>>>::shared_ptr[abi:ne180100]<turi::neural_net::Iterator<std::unique_ptr<turi::style_transfer::Checkpoint>>,void>(&v8, (_QWORD *)(a1 + 8));
  std::allocate_shared[abi:ne180100]<turi::neural_net::MapPublisher<turi::style_transfer::EncodedBatch,turi::style_transfer::TrainingProgress>,std::allocator<turi::neural_net::MapPublisher<turi::style_transfer::EncodedBatch,turi::style_transfer::TrainingProgress>>,std::shared_ptr<turi::neural_net::Publisher<turi::style_transfer::EncodedBatch>>,std::shared_ptr<turi::style_transfer::ProgressUpdater>,void>(&v8, a2, &v9);
  *a3 = v9;
  v9 = 0uLL;
  v5 = (std::__shared_weak_count *)*((_QWORD *)&v8 + 1);
  if (*((_QWORD *)&v8 + 1))
  {
    v6 = (unint64_t *)(*((_QWORD *)&v8 + 1) + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_218327DB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void turi::style_transfer::ModelTrainer::AsInferenceBatchPublisher(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  _QWORD *v17;
  __int128 v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  _QWORD *v61;
  std::__shared_weak_count *v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  __int128 v65;
  __int128 v66;

  LODWORD(v66) = 1;
  LODWORD(v65) = 0;
  std::allocate_shared[abi:ne180100]<turi::style_transfer::DataIterator,std::allocator<turi::style_transfer::DataIterator>,std::unique_ptr<turi::style_transfer::data_iterator>,int &,int &,void>(a2, (int *)&v66, (int *)&v65, &v59);
  std::allocate_shared[abi:ne180100]<turi::style_transfer::InferenceDataIterator,std::allocator<turi::style_transfer::InferenceDataIterator>,std::shared_ptr<turi::style_transfer::DataIterator> &,std::vector<int>,void>(&v59, a3, &v57);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 56))(&v55, a1, a4);
  v9 = v55;
  v10 = v56;
  v53 = v55;
  v54 = v56;
  if (v56)
  {
    p_shared_owners = (unint64_t *)&v56->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  turi::neural_net::Iterator<turi::style_transfer::DataBatch>::AsPublisher(v57, &v49);
  turi::neural_net::Publisher<turi::style_transfer::DataBatch>::Map<turi::style_transfer::EncodedInferenceBatch (*)(turi::style_transfer::DataBatch)>(v49, (uint64_t)turi::style_transfer::EncodeInferenceBatch, &v51);
  v13 = v51;
  if (v10)
  {
    v14 = (unint64_t *)&v10->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  v16 = (std::__shared_weak_count *)operator new(0x30uLL);
  v16->__shared_owners_ = 0;
  v16->__shared_weak_owners_ = 0;
  v16->__vftable = (std::__shared_weak_count_vtbl *)&off_24D93B6A8;
  v16[1].__vftable = (std::__shared_weak_count_vtbl *)&off_24D93B6F8;
  v16[1].__shared_owners_ = v9;
  v16[1].__shared_weak_owners_ = (uint64_t)v10;
  v61 = &v16[1].__vftable;
  v62 = v16;
  v63 = 0;
  v64 = 0;
  std::shared_ptr<turi::neural_net::Iterator<std::unique_ptr<turi::style_transfer::Checkpoint>>>::shared_ptr[abi:ne180100]<turi::neural_net::Iterator<std::unique_ptr<turi::style_transfer::Checkpoint>>,void>(&v65, (_QWORD *)(v13 + 8));
  v17 = operator new(0x50uLL);
  v17[1] = 0;
  v17[2] = 0;
  *v17 = &unk_24D93B748;
  v18 = v65;
  v65 = 0uLL;
  v61 = 0;
  v62 = 0;
  v17[4] = 0;
  v17[3] = &unk_24D93B798;
  v17[5] = 0;
  *((_OWORD *)v17 + 3) = v18;
  v17[8] = v16 + 1;
  v17[9] = v16;
  *(_QWORD *)&v66 = v17 + 3;
  *((_QWORD *)&v66 + 1) = v17;
  std::shared_ptr<turi::visualization::Plot>::__enable_weak_this[abi:ne180100]<cppipc::ipc_object_base,turi::visualization::Plot,void>((uint64_t)&v66, v17 + 4, (uint64_t)(v17 + 3));
  v52 = v66;
  v66 = 0uLL;
  v19 = (std::__shared_weak_count *)*((_QWORD *)&v65 + 1);
  if (*((_QWORD *)&v65 + 1))
  {
    v20 = (unint64_t *)(*((_QWORD *)&v65 + 1) + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = v62;
  if (v62)
  {
    v23 = (unint64_t *)&v62->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = v64;
  if (v64)
  {
    v26 = (unint64_t *)&v64->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  turi::neural_net::Publisher<turi::style_transfer::EncodedInferenceBatch>::Map<turi::style_transfer::DataBatch (*)(turi::style_transfer::EncodedInferenceBatch)>(v52, (uint64_t)turi::style_transfer::DecodeInferenceBatch, a5);
  v28 = (std::__shared_weak_count *)*((_QWORD *)&v52 + 1);
  if (*((_QWORD *)&v52 + 1))
  {
    v29 = (unint64_t *)(*((_QWORD *)&v52 + 1) + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v31 = (std::__shared_weak_count *)*((_QWORD *)&v51 + 1);
  if (*((_QWORD *)&v51 + 1))
  {
    v32 = (unint64_t *)(*((_QWORD *)&v51 + 1) + 8);
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  v34 = v50;
  if (v50)
  {
    v35 = (unint64_t *)&v50->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  v37 = v54;
  if (v54)
  {
    v38 = (unint64_t *)&v54->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  v40 = v56;
  if (v56)
  {
    v41 = (unint64_t *)&v56->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  v43 = v58;
  if (v58)
  {
    v44 = (unint64_t *)&v58->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  v46 = v60;
  if (v60)
  {
    v47 = (unint64_t *)&v60->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
}

void sub_2183281EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,char a23)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  _Unwind_Resume(a1);
}

void sub_218328270()
{
  JUMPOUT(0x218328248);
}

void sub_218328278()
{
  JUMPOUT(0x218328258);
}

void sub_218328280()
{
  JUMPOUT(0x218328260);
}

void turi::neural_net::Publisher<turi::style_transfer::DataBatch>::Map<turi::style_transfer::EncodedInferenceBatch (*)(turi::style_transfer::DataBatch)>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  _QWORD *v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  __int128 v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  v6 = operator new(0x28uLL);
  v6[2] = 0;
  *v6 = &unk_24D93B4A0;
  v6[1] = 0;
  v6[4] = a2;
  *((_QWORD *)&v13 + 1) = v6;
  v14 = 0;
  v6[3] = &unk_24D93B4F0;
  *(_QWORD *)&v13 = v6 + 3;
  v15 = 0;
  turi::neural_net::Publisher<turi::style_transfer::DataBatch>::Map<turi::neural_net::CallableTransform<turi::style_transfer::DataBatch,turi::style_transfer::EncodedInferenceBatch (*)(turi::style_transfer::DataBatch)>>(a1, &v13, a3);
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v13 + 1);
  if (*((_QWORD *)&v13 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_218328378(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void turi::style_transfer::EncodeInferenceBatch(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;

  *(_QWORD *)(a2 + 16) = 0;
  v4 = a2 + 16;
  *(_QWORD *)(a2 + 8) = a2 + 16;
  v5 = (_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = -1;
  *(_DWORD *)a2 = *(_DWORD *)a1;
  turi::style_transfer::prepare_predict(*(_QWORD *)(a1 + 8), (uint64_t)&v8);
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)v5, *(_QWORD **)(a2 + 16));
  v6 = v9;
  *(_QWORD *)(a2 + 8) = v8;
  *(_QWORD *)(a2 + 16) = v6;
  v7 = v10;
  *(_QWORD *)(a2 + 24) = v10;
  if (v7)
  {
    v6[2] = v4;
    v8 = &v9;
    v9 = 0;
    v10 = 0;
    v6 = 0;
  }
  else
  {
    *v5 = v4;
  }
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)&v8, v6);
  *(_DWORD *)(a2 + 32) = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 128);
}

void sub_218328450(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD **v2;

  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy(v1, *v2);
  _Unwind_Resume(a1);
}

void turi::neural_net::Publisher<turi::style_transfer::EncodedInferenceBatch>::Map<turi::style_transfer::DataBatch (*)(turi::style_transfer::EncodedInferenceBatch)>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  _QWORD *v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  __int128 v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  v6 = operator new(0x28uLL);
  v6[2] = 0;
  *v6 = &unk_24D93B888;
  v6[1] = 0;
  v6[4] = a2;
  *((_QWORD *)&v13 + 1) = v6;
  v14 = 0;
  v6[3] = &unk_24D93B8D8;
  *(_QWORD *)&v13 = v6 + 3;
  v15 = 0;
  turi::neural_net::Publisher<turi::style_transfer::EncodedInferenceBatch>::Map<turi::neural_net::CallableTransform<turi::style_transfer::EncodedInferenceBatch,turi::style_transfer::DataBatch (*)(turi::style_transfer::EncodedInferenceBatch)>>(a1, &v13, a3);
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v13 + 1);
  if (*((_QWORD *)&v13 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_218328558(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void turi::style_transfer::DecodeInferenceBatch(_DWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[2];
  std::__shared_weak_count *v34;
  __int128 v35;
  __int128 v36;
  void *__p[2];
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  _OWORD v46[2];

  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_DWORD *)a2 = *a1;
  *(_QWORD *)(a2 + 8) = 0;
  v3 = (uint64_t *)(a2 + 8);
  std::string::basic_string[abi:ne180100]<0>(__p, "output");
  v4 = std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)(a1 + 2), (const void **)__p);
  v6 = *(_QWORD *)(v4 + 8);
  v5 = *(std::__shared_weak_count **)(v4 + 16);
  v33[0] = &unk_24D9175B8;
  v33[1] = v6;
  v34 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v9 = *(_OWORD *)(v4 + 40);
  v35 = *(_OWORD *)(v4 + 24);
  v36 = v9;
  if (SBYTE7(v38) < 0)
    operator delete(__p[0]);
  turi::style_transfer::process_output((turi::style_transfer *)v33, (const turi::neural_net::shared_float_array *)(int)a1[8], &v31);
  std::vector<turi::style_transfer::st_example>::resize(v3, 0x8E38E38E38E38E39 * ((v32 - v31) >> 3));
  v10 = v31;
  v30 = v32;
  if (v31 != v32)
  {
    v11 = *v3;
    do
    {
      LOBYTE(v40) = 0;
      v12 = 0uLL;
      v38 = 0u;
      v39 = 0u;
      *(_OWORD *)__p = 0u;
      v41 = 0u;
      v42 = 0u;
      v43 = 0u;
      LOBYTE(v44) = 0;
      *((_QWORD *)&v40 + 1) = 3;
      *((_QWORD *)&v44 + 1) = 3;
      v45 = *(_QWORD *)v10;
      v14 = *(_QWORD *)(v10 + 8);
      v13 = *(_QWORD *)(v10 + 16);
      if (v13)
      {
        v15 = (unsigned int *)(v13 + 8);
        do
          v16 = __ldxr(v15);
        while (__stxr(v16 + 1, v15));
        v12 = v41;
      }
      *(_QWORD *)&v41 = v14;
      *((_QWORD *)&v41 + 1) = v13;
      v46[0] = v12;
      boost::detail::shared_count::~shared_count((unsigned int **)v46 + 1);
      v17 = *(_OWORD *)(v10 + 24);
      v18 = *(_OWORD *)(v10 + 56);
      v43 = *(_OWORD *)(v10 + 40);
      v44 = v18;
      v42 = v17;
      v19 = *(_OWORD *)__p;
      __p[0] = 0;
      __p[1] = 0;
      v20 = *(_QWORD *)(v11 + 8);
      *(_QWORD *)&v46[0] = *(_QWORD *)v11;
      *(_OWORD *)v11 = v19;
      *((_QWORD *)&v46[0] + 1) = v20;
      boost::detail::shared_count::~shared_count((unsigned int **)v46 + 1);
      v21 = v38;
      v22 = v40;
      *(_OWORD *)(v11 + 32) = v39;
      *(_OWORD *)(v11 + 48) = v22;
      *(_OWORD *)(v11 + 16) = v21;
      v23 = v41;
      v41 = 0uLL;
      v24 = *(_OWORD *)(v11 + 64);
      *(_OWORD *)(v11 + 64) = v23;
      v46[0] = v24;
      boost::detail::shared_count::~shared_count((unsigned int **)v46 + 1);
      v25 = v42;
      v26 = v44;
      *(_OWORD *)(v11 + 96) = v43;
      *(_OWORD *)(v11 + 112) = v26;
      *(_OWORD *)(v11 + 80) = v25;
      *(_QWORD *)(v11 + 128) = v45;
      boost::detail::shared_count::~shared_count((unsigned int **)&v41 + 1);
      boost::detail::shared_count::~shared_count((unsigned int **)&__p[1]);
      v10 += 72;
      v11 += 136;
    }
    while (v10 != v30);
  }
  __p[0] = &v31;
  std::vector<std::pair<long long,turi::image_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  v33[0] = &unk_24D9175B8;
  v27 = v34;
  if (v34)
  {
    v28 = (unint64_t *)&v34->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
}

void sub_2183287F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  __p = &a11;
  std::vector<std::pair<long long,turi::image_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  a14 = &unk_24D9175B8;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::vector<turi::style_transfer::st_example>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void turi::style_transfer::EncodeTrainingBatch(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;

  *(_QWORD *)(a4 + 16) = 0;
  v5 = a4 + 16;
  *(_QWORD *)(a4 + 8) = a4 + 16;
  v6 = (_QWORD *)(a4 + 8);
  *(_QWORD *)(a4 + 24) = 0;
  *(_DWORD *)a4 = *(_DWORD *)a1;
  turi::style_transfer::prepare_batch((uint64_t *)(a1 + 8), (const turi::flexible_type *)a2, a3, 1, (uint64_t)&v9);
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)v6, *(_QWORD **)(a4 + 16));
  v7 = v10;
  *(_QWORD *)(a4 + 8) = v9;
  *(_QWORD *)(a4 + 16) = v7;
  v8 = v11;
  *(_QWORD *)(a4 + 24) = v11;
  if (v8)
  {
    v7[2] = v5;
    v9 = &v10;
    v10 = 0;
    v11 = 0;
    v7 = 0;
  }
  else
  {
    *v6 = v5;
  }
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)&v9, v7);
}

void sub_218328908(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD **v2;

  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy(v1, *v2);
  _Unwind_Resume(a1);
}

void std::vector<turi::style_transfer::st_example>::resize(uint64_t *a1, unint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;

  v2 = 0xF0F0F0F0F0F0F0F1 * ((a1[1] - *a1) >> 3);
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<turi::style_transfer::st_example>::__append(a1, v4);
  }
  else if (!v3)
  {
    std::vector<turi::style_transfer::st_example>::__base_destruct_at_end[abi:ne180100]((uint64_t)a1, *a1 + 136 * a2);
  }
}

void turi::style_transfer::DataIterator::~DataIterator(turi::style_transfer::DataIterator *this)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *(_QWORD *)this = &off_24D93ABF8;
  v2 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *(_QWORD *)this = &off_24D93ABF8;
  v2 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x219A19A08);
}

uint64_t turi::style_transfer::DataIterator::HasNext(turi::style_transfer::DataIterator *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 16))(*((_QWORD *)this + 3));
}

void turi::style_transfer::ProgressUpdater::~ProgressUpdater(turi::style_transfer::ProgressUpdater *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_24D93AC78;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    MEMORY[0x219A19A08](v2, 0x1000C4052888210);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_24D93AC78;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    MEMORY[0x219A19A08](v2, 0x1000C4052888210);
  JUMPOUT(0x219A19A08);
}

void turi::style_transfer::InferenceDataIterator::~InferenceDataIterator(turi::style_transfer::InferenceDataIterator *this)
{
  void *v2;
  std::__shared_weak_count *v3;
  void **v4;

  *(_QWORD *)this = off_24D93ABC8;
  v4 = (void **)((char *)this + 80);
  std::vector<turi::style_transfer::st_example>::__destroy_vector::operator()[abi:ne180100](&v4);
  v2 = (void *)*((_QWORD *)this + 5);
  if (v2)
  {
    *((_QWORD *)this + 6) = v2;
    operator delete(v2);
  }
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)this + 24);
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

{
  void *v2;
  std::__shared_weak_count *v3;
  void **v4;

  *(_QWORD *)this = off_24D93ABC8;
  v4 = (void **)((char *)this + 80);
  std::vector<turi::style_transfer::st_example>::__destroy_vector::operator()[abi:ne180100](&v4);
  v2 = (void *)*((_QWORD *)this + 5);
  if (v2)
  {
    *((_QWORD *)this + 6) = v2;
    operator delete(v2);
  }
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)this + 24);
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  MEMORY[0x219A19A08](this, 0x10F1C403B732CD7);
}

_QWORD *std::vector<turi::style_transfer::st_example>::__init_with_size[abi:ne180100]<turi::style_transfer::st_example*,turi::style_transfer::st_example*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<turi::style_transfer::st_example>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::style_transfer::st_example>,turi::style_transfer::st_example*,turi::style_transfer::st_example*,turi::style_transfer::st_example*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_218328C04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<turi::style_transfer::st_example>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<turi::style_transfer::st_example>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x1E1E1E1E1E1E1E2)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::toolkit_function_specification>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[136 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::style_transfer::st_example>,turi::style_transfer::st_example*,turi::style_transfer::st_example*,turi::style_transfer::st_example*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  __int128 v13;
  __int128 v14;
  _QWORD v16[3];
  char v17;
  uint64_t v18;
  uint64_t v19;

  v4 = a4;
  v19 = a4;
  v18 = a4;
  v16[0] = a1;
  v16[1] = &v18;
  v16[2] = &v19;
  if (a2 != a3)
  {
    do
    {
      *(_QWORD *)v4 = *(_QWORD *)a2;
      v5 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)(v4 + 8) = v5;
      if (v5)
      {
        v6 = (unsigned int *)(v5 + 8);
        do
          v7 = __ldxr(v6);
        while (__stxr(v7 + 1, v6));
      }
      v8 = *(_OWORD *)(a2 + 16);
      v9 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(v4 + 32) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(v4 + 48) = v9;
      *(_OWORD *)(v4 + 16) = v8;
      *(_QWORD *)(v4 + 64) = *(_QWORD *)(a2 + 64);
      v10 = *(_QWORD *)(a2 + 72);
      *(_QWORD *)(v4 + 72) = v10;
      if (v10)
      {
        v11 = (unsigned int *)(v10 + 8);
        do
          v12 = __ldxr(v11);
        while (__stxr(v12 + 1, v11));
      }
      v13 = *(_OWORD *)(a2 + 80);
      v14 = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(v4 + 96) = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(v4 + 112) = v14;
      *(_OWORD *)(v4 + 80) = v13;
      *(_QWORD *)(v4 + 128) = *(_QWORD *)(a2 + 128);
      a2 += 136;
      v4 += 136;
    }
    while (a2 != a3);
    v19 = v4;
  }
  v17 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::style_transfer::st_example>,turi::style_transfer::st_example*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v16);
  return v4;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::style_transfer::st_example>,turi::style_transfer::st_example*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<turi::style_transfer::st_example>,turi::style_transfer::st_example*>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<turi::style_transfer::st_example>,turi::style_transfer::st_example*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t i;

  v2 = *(uint64_t **)(a1 + 8);
  v1 = *(uint64_t **)(a1 + 16);
  v3 = *v1;
  for (i = *v2; v3 != i; v3 -= 136)
  {
    boost::detail::shared_count::~shared_count((unsigned int **)(v3 - 64));
    boost::detail::shared_count::~shared_count((unsigned int **)(v3 - 128));
  }
}

void std::vector<turi::style_transfer::st_example>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<turi::style_transfer::st_example>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, (uint64_t)*v2);
    operator delete(**a1);
  }
}

void std::vector<turi::style_transfer::st_example>::__base_destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t i;

  for (i = *(_QWORD *)(a1 + 8); i != a2; i -= 136)
  {
    boost::detail::shared_count::~shared_count((unsigned int **)(i - 64));
    boost::detail::shared_count::~shared_count((unsigned int **)(i - 128));
  }
  *(_QWORD *)(a1 + 8) = a2;
}

void sub_218329014(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void std::vector<turi::style_transfer::st_example>::__vdeallocate(uint64_t *a1)
{
  if (*a1)
  {
    std::vector<turi::style_transfer::st_example>::__base_destruct_at_end[abi:ne180100]((uint64_t)a1, *a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void std::allocate_shared[abi:ne180100]<turi::style_transfer::DataIterator,std::allocator<turi::style_transfer::DataIterator>,std::unique_ptr<turi::style_transfer::data_iterator>,int &,int &,void>(uint64_t *a1@<X1>, int *a2@<X2>, int *a3@<X3>, _QWORD *a4@<X8>)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;

  v8 = operator new(0x48uLL);
  v8[2] = 0;
  *v8 = &unk_24D93ACF0;
  v8[1] = 0;
  v9 = *a1;
  *a1 = 0;
  v10 = *a2;
  v11 = *a3;
  v8[3] = &off_24D93ABF8;
  v8[5] = 0;
  v8[6] = v9;
  v8[7] = v10;
  *((_DWORD *)v8 + 16) = v11;
  *a4 = v8 + 3;
  a4[1] = v8;
  v8[4] = 0;
  std::shared_ptr<turi::visualization::Plot>::__enable_weak_this[abi:ne180100]<cppipc::ipc_object_base,turi::visualization::Plot,void>((uint64_t)a4, v8 + 4, (uint64_t)(v8 + 3));
}

void std::__shared_ptr_emplace<turi::style_transfer::DataIterator>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D93ACF0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::style_transfer::DataIterator>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D93ACF0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__shared_ptr_emplace<turi::style_transfer::DataIterator>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<turi::style_transfer::ProgressUpdater>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D93AD40;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::style_transfer::ProgressUpdater>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D93AD40;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__shared_ptr_emplace<turi::style_transfer::ProgressUpdater>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::allocate_shared[abi:ne180100]<turi::neural_net::IteratorPublisher<turi::style_transfer::DataBatch>,std::allocator<turi::neural_net::IteratorPublisher<turi::style_transfer::DataBatch>>,std::shared_ptr<turi::neural_net::Iterator<turi::style_transfer::DataBatch>>,void>(__int128 *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  __int128 v5;

  v4 = operator new(0x40uLL);
  v4[2] = 0;
  *v4 = &unk_24D93AD90;
  v4[1] = 0;
  v5 = *a1;
  *(_QWORD *)a1 = 0;
  *((_QWORD *)a1 + 1) = 0;
  v4[5] = 0;
  v4[3] = &unk_24D93ADE0;
  *((_OWORD *)v4 + 3) = v5;
  *a2 = v4 + 3;
  a2[1] = v4;
  v4[4] = 0;
  std::shared_ptr<turi::visualization::Plot>::__enable_weak_this[abi:ne180100]<cppipc::ipc_object_base,turi::visualization::Plot,void>((uint64_t)a2, v4 + 4, (uint64_t)(v4 + 3));
}

void std::__shared_ptr_emplace<turi::neural_net::IteratorPublisher<turi::style_transfer::DataBatch>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D93AD90;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::neural_net::IteratorPublisher<turi::style_transfer::DataBatch>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D93AD90;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__shared_ptr_emplace<turi::neural_net::IteratorPublisher<turi::style_transfer::DataBatch>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *turi::neural_net::IteratorPublisher<turi::style_transfer::DataBatch>::~IteratorPublisher(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &unk_24D93ADE0;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 3));
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void turi::neural_net::IteratorPublisher<turi::style_transfer::DataBatch>::~IteratorPublisher(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &unk_24D93ADE0;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 3));
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  JUMPOUT(0x219A19A08);
}

void turi::neural_net::IteratorPublisher<turi::style_transfer::DataBatch>::Receive(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v10;
  __int128 v11;

  std::allocate_shared[abi:ne180100]<turi::neural_net::IteratorPublisher<turi::style_transfer::DataBatch>::IteratorSubscription,std::allocator<turi::neural_net::IteratorPublisher<turi::style_transfer::DataBatch>::IteratorSubscription>,std::shared_ptr<turi::neural_net::Subscriber<turi::style_transfer::DataBatch>> &,std::shared_ptr<turi::neural_net::Iterator<turi::style_transfer::DataBatch>> &,void>(a2, (uint64_t *)(a1 + 24), &v11);
  v3 = *a2;
  v10 = v11;
  v11 = 0uLL;
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v3 + 16))(v3, &v10);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v10 + 1);
  if (*((_QWORD *)&v10 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v10 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v11 + 1);
  if (*((_QWORD *)&v11 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_218329434(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<turi::neural_net::IteratorPublisher<turi::style_transfer::DataBatch>::IteratorSubscription,std::allocator<turi::neural_net::IteratorPublisher<turi::style_transfer::DataBatch>::IteratorSubscription>,std::shared_ptr<turi::neural_net::Subscriber<turi::style_transfer::DataBatch>> &,std::shared_ptr<turi::neural_net::Iterator<turi::style_transfer::DataBatch>> &,void>@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *result;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;

  result = operator new(0x40uLL);
  result[1] = 0;
  result[2] = 0;
  *result = &unk_24D93AE58;
  v8 = *a1;
  v7 = a1[1];
  if (v7)
  {
    v9 = (unint64_t *)(v7 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v12 = *a2;
  v11 = a2[1];
  if (v11)
  {
    v13 = (unint64_t *)(v11 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  result[3] = &unk_24D93AEA8;
  result[4] = v8;
  result[5] = v7;
  result[6] = v12;
  result[7] = v11;
  *a3 = result + 3;
  a3[1] = result;
  return result;
}

void std::__shared_ptr_emplace<turi::neural_net::IteratorPublisher<turi::style_transfer::DataBatch>::IteratorSubscription,std::allocator<turi::neural_net::IteratorPublisher<turi::style_transfer::DataBatch>::IteratorSubscription>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D93AE58;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::neural_net::IteratorPublisher<turi::style_transfer::DataBatch>::IteratorSubscription,std::allocator<turi::neural_net::IteratorPublisher<turi::style_transfer::DataBatch>::IteratorSubscription>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D93AE58;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__shared_ptr_emplace<turi::neural_net::IteratorPublisher<turi::style_transfer::DataBatch>::IteratorSubscription,std::allocator<turi::neural_net::IteratorPublisher<turi::style_transfer::DataBatch>::IteratorSubscription>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *turi::neural_net::IteratorPublisher<turi::style_transfer::DataBatch>::IteratorSubscription::~IteratorSubscription(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_24D93AEA8;
  v2 = (uint64_t)(a1 + 1);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 3));
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v2);
  return a1;
}

void turi::neural_net::IteratorPublisher<turi::style_transfer::DataBatch>::IteratorSubscription::~IteratorSubscription(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &unk_24D93AEA8;
  v1 = (uint64_t)(a1 + 1);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 3));
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v1);
  JUMPOUT(0x219A19A08);
}

void turi::neural_net::IteratorPublisher<turi::style_transfer::DataBatch>::IteratorSubscription::Request(uint64_t a1, int w1_0)
{
  int v2;
  BOOL v3;
  _QWORD *v5;
  uint64_t v6;
  std::exception_ptr *v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  __int128 v12;
  uint64_t v13;
  std::exception_ptr v14;
  std::exception_ptr v15;
  std::exception_ptr v16;
  std::exception_ptr v17;
  std::exception_ptr v18;
  _QWORD v19[5];
  std::exception_ptr v20;

  v2 = w1_0;
  v19[4] = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a1 + 8))
    v3 = w1_0 == 0;
  else
    v3 = 1;
  if (!v3)
  {
    do
    {
      v17.__ptr_ = 0;
      if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24)))
      {
        v5 = v19;
        (*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)(a1 + 24) + 24))(v19);
      }
      else
      {
        v5 = 0;
      }
      if (v17.__ptr_)
      {
        v6 = *(_QWORD *)(a1 + 8);
        std::exception_ptr::exception_ptr(&v15, &v17);
        turi::neural_net::Completion::Failure(&v15, v20, &v16);
        (*(void (**)(uint64_t, std::exception_ptr *))(*(_QWORD *)v6 + 32))(v6, &v16);
        std::exception_ptr::~exception_ptr(&v16);
        v7 = &v15;
      }
      else
      {
        v8 = *(_QWORD *)(a1 + 8);
        if (v5)
        {
          v11 = *(_DWORD *)v5;
          v12 = *(_OWORD *)(v5 + 1);
          v13 = v5[3];
          v5[1] = 0;
          v5[2] = 0;
          v5[3] = 0;
          v9 = (*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v8 + 24))(v8, &v11);
          v10 = v2 - (v2 > 0);
          v18.__ptr_ = &v12;
          std::vector<turi::style_transfer::st_example>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
          if ((v10 | v9) < 0)
            v2 = -1;
          else
            v2 = v9 + v10;
          v18.__ptr_ = v5 + 1;
          std::vector<turi::style_transfer::st_example>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
          goto LABEL_18;
        }
        v18.__ptr_ = 0;
        v7 = &v14;
        std::exception_ptr::exception_ptr(&v14, &v18);
        std::exception_ptr::~exception_ptr(&v18);
        (*(void (**)(uint64_t, std::exception_ptr *))(*(_QWORD *)v8 + 32))(v8, &v14);
      }
      std::exception_ptr::~exception_ptr(v7);
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
LABEL_18:
      std::exception_ptr::~exception_ptr(&v17);
    }
    while (*(_QWORD *)(a1 + 8) && v2);
  }
}

void sub_2183297E8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::exception_ptr a13, char a14, std::exception_ptr a15, std::exception_ptr a16, uint64_t a17)
{
  std::exception_ptr::~exception_ptr(&a13);
  std::exception_ptr::~exception_ptr(&a16);
  JUMPOUT(0x218329834);
}

void std::__shared_ptr_emplace<turi::neural_net::CallableTransform<turi::style_transfer::DataBatch,turi::style_transfer::ModelTrainer::AsTrainingBatchPublisher(std::unique_ptr<turi::style_transfer::data_iterator>,std::string const&,int,std::unique_ptr<float>,turi::neural_net::compute_context *)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24D93AEF0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::neural_net::CallableTransform<turi::style_transfer::DataBatch,turi::style_transfer::ModelTrainer::AsTrainingBatchPublisher(std::unique_ptr<turi::style_transfer::data_iterator>,std::string const&,int,std::unique_ptr<float>,turi::neural_net::compute_context *)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24D93AEF0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__shared_ptr_emplace<turi::neural_net::CallableTransform<turi::style_transfer::DataBatch,turi::style_transfer::ModelTrainer::AsTrainingBatchPublisher(std::unique_ptr<turi::style_transfer::data_iterator>,std::string const&,int,std::unique_ptr<float>,turi::neural_net::compute_context *)::$_0>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void turi::neural_net::CallableTransform<turi::style_transfer::DataBatch,turi::style_transfer::ModelTrainer::AsTrainingBatchPublisher(std::unique_ptr<turi::style_transfer::data_iterator>,std::string const&,int,std::unique_ptr<float>,turi::neural_net::compute_context *)::$_0>::~CallableTransform()
{
  JUMPOUT(0x219A19A08);
}

void turi::neural_net::CallableTransform<turi::style_transfer::DataBatch,turi::style_transfer::ModelTrainer::AsTrainingBatchPublisher(std::unique_ptr<turi::style_transfer::data_iterator>,std::string const&,int,std::unique_ptr<float>,turi::neural_net::compute_context *)::$_0>::Invoke(uint64_t a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  int v3;
  uint64_t v4;
  __int128 v5;
  _QWORD v6[3];
  void **v7;
  __int128 v8;
  uint64_t v9;
  void **v10;

  v3 = *a2;
  v4 = *((_QWORD *)a2 + 3);
  v5 = *(_OWORD *)(a2 + 2);
  *((_QWORD *)a2 + 2) = 0;
  *((_QWORD *)a2 + 3) = 0;
  *((_QWORD *)a2 + 1) = 0;
  LODWORD(v7) = v3;
  v8 = v5;
  v9 = v4;
  memset(v6, 0, sizeof(v6));
  turi::style_transfer::EncodeTrainingBatch((uint64_t)&v7, *(_DWORD *)(a1 + 12), *(_DWORD *)(a1 + 8), a3);
  v10 = (void **)&v8;
  std::vector<turi::style_transfer::st_example>::__destroy_vector::operator()[abi:ne180100](&v10);
  v7 = (void **)v6;
  std::vector<turi::style_transfer::st_example>::__destroy_vector::operator()[abi:ne180100](&v7);
}

void sub_21832992C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v4 = v1;
  *(_QWORD *)(v3 - 40) = v2;
  std::vector<turi::style_transfer::st_example>::__destroy_vector::operator()[abi:ne180100]((void ***)(v3 - 40));
  *(_QWORD *)(v3 - 40) = v4;
  std::vector<turi::style_transfer::st_example>::__destroy_vector::operator()[abi:ne180100]((void ***)(v3 - 40));
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<turi::neural_net::MapPublisher<turi::style_transfer::DataBatch,turi::style_transfer::EncodedBatch>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D93AF90;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::neural_net::MapPublisher<turi::style_transfer::DataBatch,turi::style_transfer::EncodedBatch>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D93AF90;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__shared_ptr_emplace<turi::neural_net::MapPublisher<turi::style_transfer::DataBatch,turi::style_transfer::EncodedBatch>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *turi::neural_net::MapPublisher<turi::style_transfer::DataBatch,turi::style_transfer::EncodedBatch>::~MapPublisher(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &unk_24D93AFE0;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 5));
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 3));
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void turi::neural_net::MapPublisher<turi::style_transfer::DataBatch,turi::style_transfer::EncodedBatch>::~MapPublisher(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &unk_24D93AFE0;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 5));
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 3));
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  JUMPOUT(0x219A19A08);
}

void turi::neural_net::MapPublisher<turi::style_transfer::DataBatch,turi::style_transfer::EncodedBatch>::Receive(uint64_t a1, __n128 *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v10;
  __int128 v11;

  std::allocate_shared[abi:ne180100]<turi::neural_net::MapPublisher<turi::style_transfer::DataBatch,turi::style_transfer::EncodedBatch>::MapSubscriber,std::allocator<turi::neural_net::MapPublisher<turi::style_transfer::DataBatch,turi::style_transfer::EncodedBatch>::MapSubscriber>,std::shared_ptr<turi::neural_net::Transform<turi::style_transfer::DataBatch,turi::style_transfer::EncodedBatch>> &,std::shared_ptr<turi::neural_net::Subscriber<turi::style_transfer::EncodedBatch>>,void>((unint64_t *)(a1 + 40), a2, &v11);
  v3 = *(_QWORD *)(a1 + 24);
  v10 = v11;
  v11 = 0uLL;
  turi::neural_net::Publisher<turi::style_transfer::DataBatch>::Subscribe(v3, &v10);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v10 + 1);
  if (*((_QWORD *)&v10 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v10 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v11 + 1);
  if (*((_QWORD *)&v11 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_218329B0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void turi::neural_net::Publisher<turi::style_transfer::DataBatch>::Subscribe(uint64_t a1, __int128 *a2)
{
  std::__shared_weak_count *v2;
  unint64_t *v3;
  unint64_t v4;
  __int128 v5;

  v5 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)a1 + 16))(a1, &v5);
  v2 = (std::__shared_weak_count *)*((_QWORD *)&v5 + 1);
  if (*((_QWORD *)&v5 + 1))
  {
    v3 = (unint64_t *)(*((_QWORD *)&v5 + 1) + 8);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 - 1, v3));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void sub_218329B9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

__n128 std::allocate_shared[abi:ne180100]<turi::neural_net::MapPublisher<turi::style_transfer::DataBatch,turi::style_transfer::EncodedBatch>::MapSubscriber,std::allocator<turi::neural_net::MapPublisher<turi::style_transfer::DataBatch,turi::style_transfer::EncodedBatch>::MapSubscriber>,std::shared_ptr<turi::neural_net::Transform<turi::style_transfer::DataBatch,turi::style_transfer::EncodedBatch>> &,std::shared_ptr<turi::neural_net::Subscriber<turi::style_transfer::EncodedBatch>>,void>@<Q0>(unint64_t *a1@<X1>, __n128 *a2@<X2>, _QWORD *a3@<X8>)
{
  __n128 *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  __n128 result;

  v6 = (__n128 *)operator new(0x48uLL);
  v6->n128_u64[1] = 0;
  v6[1].n128_u64[0] = 0;
  v6->n128_u64[0] = (unint64_t)&unk_24D93B058;
  v8 = *a1;
  v7 = a1[1];
  if (v7)
  {
    v9 = (unint64_t *)(v7 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  result = *a2;
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  v6[1].n128_u64[1] = (unint64_t)&unk_24D93B0A8;
  v6[2].n128_u64[0] = v8;
  v6[2].n128_u64[1] = v7;
  v6[3] = result;
  v6[4].n128_u64[0] = 0;
  *a3 = (char *)v6 + 24;
  a3[1] = v6;
  return result;
}

void std::__shared_ptr_emplace<turi::neural_net::MapPublisher<turi::style_transfer::DataBatch,turi::style_transfer::EncodedBatch>::MapSubscriber,std::allocator<turi::neural_net::MapPublisher<turi::style_transfer::DataBatch,turi::style_transfer::EncodedBatch>::MapSubscriber>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D93B058;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::neural_net::MapPublisher<turi::style_transfer::DataBatch,turi::style_transfer::EncodedBatch>::MapSubscriber,std::allocator<turi::neural_net::MapPublisher<turi::style_transfer::DataBatch,turi::style_transfer::EncodedBatch>::MapSubscriber>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D93B058;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__shared_ptr_emplace<turi::neural_net::MapPublisher<turi::style_transfer::DataBatch,turi::style_transfer::EncodedBatch>::MapSubscriber,std::allocator<turi::neural_net::MapPublisher<turi::style_transfer::DataBatch,turi::style_transfer::EncodedBatch>::MapSubscriber>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

std::exception_ptr *turi::neural_net::MapPublisher<turi::style_transfer::DataBatch,turi::style_transfer::EncodedBatch>::MapSubscriber::~MapSubscriber(std::exception_ptr *a1)
{
  uint64_t v2;

  a1->__ptr_ = &unk_24D93B0A8;
  v2 = (uint64_t)&a1[1];
  std::exception_ptr::~exception_ptr(a1 + 5);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a1[3]);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v2);
  return a1;
}

void turi::neural_net::MapPublisher<turi::style_transfer::DataBatch,turi::style_transfer::EncodedBatch>::MapSubscriber::~MapSubscriber(std::exception_ptr *a1)
{
  uint64_t v2;

  a1->__ptr_ = &unk_24D93B0A8;
  v2 = (uint64_t)&a1[1];
  std::exception_ptr::~exception_ptr(a1 + 5);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a1[3]);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v2);
  JUMPOUT(0x219A19A08);
}

void turi::neural_net::MapPublisher<turi::style_transfer::DataBatch,turi::style_transfer::EncodedBatch>::MapSubscriber::Receive(uint64_t a1, __int128 *a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  __int128 v6;

  v2 = *(_QWORD *)(a1 + 24);
  if (v2)
  {
    v6 = *a2;
    *(_QWORD *)a2 = 0;
    *((_QWORD *)a2 + 1) = 0;
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v2 + 16))(v2, &v6);
    v3 = (std::__shared_weak_count *)*((_QWORD *)&v6 + 1);
    if (*((_QWORD *)&v6 + 1))
    {
      v4 = (unint64_t *)(*((_QWORD *)&v6 + 1) + 8);
      do
        v5 = __ldaxr(v4);
      while (__stlxr(v5 - 1, v4));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
  }
}

void sub_218329DBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t turi::neural_net::MapPublisher<turi::style_transfer::DataBatch,turi::style_transfer::EncodedBatch>::MapSubscriber::Receive(_QWORD *a1, int *x1_0)
{
  uint64_t *v2;
  uint64_t v4;
  std::__shared_weak_count *v5;
  void **v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v12;
  _QWORD **v13;
  _QWORD *v14[2];
  std::exception_ptr v15;
  std::exception_ptr v16;
  void **v17[2];
  int v18;
  __int128 v19;
  uint64_t v20;
  std::exception_ptr v21;
  uint64_t v22;
  _QWORD **v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  std::exception_ptr v27;

  v26 = *MEMORY[0x24BDAC8D0];
  v2 = a1 + 3;
  if (!a1[3])
    return 0;
  v21.__ptr_ = 0;
  v4 = a1[1];
  v18 = *x1_0;
  v19 = *(_OWORD *)(x1_0 + 2);
  v20 = *((_QWORD *)x1_0 + 3);
  *((_QWORD *)x1_0 + 1) = 0;
  *((_QWORD *)x1_0 + 2) = 0;
  *((_QWORD *)x1_0 + 3) = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, int *))(*(_QWORD *)v4 + 16))(&v22, v4, &v18);
  v17[0] = (void **)&v19;
  std::vector<turi::style_transfer::st_example>::__destroy_vector::operator()[abi:ne180100](v17);
  if (v21.__ptr_)
  {
    v6 = (void **)a1[3];
    v5 = (std::__shared_weak_count *)a1[4];
    v17[0] = v6;
    v17[1] = (void **)&v5->__vftable;
    *v2 = 0;
    v2[1] = 0;
    std::exception_ptr::exception_ptr(&v15, &v21);
    turi::neural_net::Completion::Failure(&v15, v27, &v16);
    (*((void (**)(void **, std::exception_ptr *))*v6 + 4))(v6, &v16);
    std::exception_ptr::~exception_ptr(&v16);
    std::exception_ptr::~exception_ptr(&v15);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v9 = 0;
  }
  else
  {
    v10 = *v2;
    v12 = v22;
    v13 = v23;
    v14[0] = v24;
    v14[1] = v25;
    if (v25)
    {
      v24[2] = v14;
      v23 = &v24;
      v24 = 0;
      v25 = 0;
    }
    else
    {
      v13 = v14;
    }
    v9 = (*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v10 + 24))(v10, &v12);
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)&v13, v14[0]);
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)&v23, v24);
  }
  std::exception_ptr::~exception_ptr(&v21);
  return v9;
}

void sub_218329FA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, _QWORD *a11, uint64_t a12, std::exception_ptr a13, std::exception_ptr a14, char a15)
{
  uint64_t v15;
  uint64_t v16;

  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy(v15, a11);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v16 - 80));
  _Unwind_Resume(a1);
}

void sub_218329FE8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::exception_ptr a15)
{
  uint64_t v15;

  if (a2)
  {
    std::vector<turi::style_transfer::st_example>::__destroy_vector::operator()[abi:ne180100]((void ***)&a15);
    __cxa_begin_catch(a1);
    std::current_exception();
    std::exception_ptr::operator=((std::exception_ptr *)(v15 - 80), &a15);
    std::exception_ptr::~exception_ptr(&a15);
    __cxa_end_catch();
    JUMPOUT(0x218329E58);
  }
  JUMPOUT(0x218329FE0);
}

void sub_21832A02C()
{
  JUMPOUT(0x218329FD8);
}

void turi::neural_net::MapPublisher<turi::style_transfer::DataBatch,turi::style_transfer::EncodedBatch>::MapSubscriber::Receive(uint64_t a1, const std::exception_ptr *a2)
{
  uint64_t v2;
  std::exception_ptr v3;

  v2 = *(_QWORD *)(a1 + 24);
  if (v2)
  {
    std::exception_ptr::exception_ptr(&v3, a2);
    (*(void (**)(uint64_t, std::exception_ptr *))(*(_QWORD *)v2 + 32))(v2, &v3);
    std::exception_ptr::~exception_ptr(&v3);
  }
}

void sub_21832A080(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  std::exception_ptr::~exception_ptr(&a10);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<turi::neural_net::CallableTransform<turi::style_transfer::EncodedBatch,turi::style_transfer::ModelTrainer::AsTrainingBatchPublisher(std::unique_ptr<turi::style_transfer::data_iterator>,std::string const&,int,std::unique_ptr<float>,turi::neural_net::compute_context *)::$_1>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24D93B108;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::neural_net::CallableTransform<turi::style_transfer::EncodedBatch,turi::style_transfer::ModelTrainer::AsTrainingBatchPublisher(std::unique_ptr<turi::style_transfer::data_iterator>,std::string const&,int,std::unique_ptr<float>,turi::neural_net::compute_context *)::$_1>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24D93B108;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__shared_ptr_emplace<turi::neural_net::CallableTransform<turi::style_transfer::EncodedBatch,turi::style_transfer::ModelTrainer::AsTrainingBatchPublisher(std::unique_ptr<turi::style_transfer::data_iterator>,std::string const&,int,std::unique_ptr<float>,turi::neural_net::compute_context *)::$_1>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *turi::neural_net::CallableTransform<turi::style_transfer::EncodedBatch,turi::style_transfer::ModelTrainer::AsTrainingBatchPublisher(std::unique_ptr<turi::style_transfer::data_iterator>,std::string const&,int,std::unique_ptr<float>,turi::neural_net::compute_context *)::$_1>::~CallableTransform(_QWORD *a1)
{
  *a1 = &off_24D93B158;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void turi::neural_net::CallableTransform<turi::style_transfer::EncodedBatch,turi::style_transfer::ModelTrainer::AsTrainingBatchPublisher(std::unique_ptr<turi::style_transfer::data_iterator>,std::string const&,int,std::unique_ptr<float>,turi::neural_net::compute_context *)::$_1>::~CallableTransform(_QWORD *a1)
{
  *a1 = &off_24D93B158;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x219A19A08);
}

void turi::neural_net::CallableTransform<turi::style_transfer::EncodedBatch,turi::style_transfer::ModelTrainer::AsTrainingBatchPublisher(std::unique_ptr<turi::style_transfer::data_iterator>,std::string const&,int,std::unique_ptr<float>,turi::neural_net::compute_context *)::$_1>::Invoke(uint64_t a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  int v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD **v10;
  _QWORD *v11;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;

  v4 = *a2;
  v5 = a2 + 4;
  v6 = (_QWORD *)*((_QWORD *)a2 + 2);
  v10 = (_QWORD **)*((_QWORD *)a2 + 1);
  v11 = v6;
  if (*((_QWORD *)a2 + 3))
  {
    v6[2] = &v11;
    *((_QWORD *)a2 + 1) = v5;
    *v5 = 0;
    *((_QWORD *)a2 + 3) = 0;
  }
  else
  {
    v10 = &v11;
  }
  *(_QWORD *)(a3 + 16) = 0;
  v7 = a3 + 16;
  *(_QWORD *)(a3 + 8) = a3 + 16;
  *(_QWORD *)(a3 + 24) = 0;
  *(_DWORD *)a3 = v4;
  (*(void (**)(_QWORD **__return_ptr, _QWORD, _QWORD ***))(**(_QWORD **)(a1 + 8) + 40))(&v13, *(_QWORD *)(a1 + 8), &v10);
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy(a3 + 8, *(_QWORD **)(a3 + 16));
  v8 = v14;
  *(_QWORD *)(a3 + 8) = v13;
  *(_QWORD *)(a3 + 16) = v8;
  v9 = v15;
  *(_QWORD *)(a3 + 24) = v15;
  if (v9)
  {
    v8[2] = v7;
    v13 = &v14;
    v14 = 0;
    v15 = 0;
    v8 = 0;
  }
  else
  {
    *(_QWORD *)(a3 + 8) = v7;
  }
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)&v13, v8);
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)&v10, v11);
}

void sub_21832A250(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, _QWORD *a12)
{
  uint64_t v12;
  uint64_t v13;
  _QWORD **v14;

  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy(v13, *v14);
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy(v12, a12);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<turi::neural_net::MapPublisher<turi::style_transfer::EncodedBatch,turi::style_transfer::EncodedBatch>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D93B1A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::neural_net::MapPublisher<turi::style_transfer::EncodedBatch,turi::style_transfer::EncodedBatch>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D93B1A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__shared_ptr_emplace<turi::neural_net::MapPublisher<turi::style_transfer::EncodedBatch,turi::style_transfer::EncodedBatch>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *turi::neural_net::MapPublisher<turi::style_transfer::EncodedBatch,turi::style_transfer::EncodedBatch>::~MapPublisher(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &unk_24D93B1F8;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 5));
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 3));
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void turi::neural_net::MapPublisher<turi::style_transfer::EncodedBatch,turi::style_transfer::EncodedBatch>::~MapPublisher(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &unk_24D93B1F8;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 5));
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 3));
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  JUMPOUT(0x219A19A08);
}

void turi::neural_net::MapPublisher<turi::style_transfer::EncodedBatch,turi::style_transfer::EncodedBatch>::Receive(uint64_t a1, __n128 *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v10;
  __int128 v11;

  std::allocate_shared[abi:ne180100]<turi::neural_net::MapPublisher<turi::style_transfer::EncodedBatch,turi::style_transfer::EncodedBatch>::MapSubscriber,std::allocator<turi::neural_net::MapPublisher<turi::style_transfer::EncodedBatch,turi::style_transfer::EncodedBatch>::MapSubscriber>,std::shared_ptr<turi::neural_net::Transform<turi::style_transfer::EncodedBatch,turi::style_transfer::EncodedBatch>> &,std::shared_ptr<turi::neural_net::Subscriber<turi::style_transfer::EncodedBatch>>,void>((unint64_t *)(a1 + 40), a2, &v11);
  v3 = *(_QWORD *)(a1 + 24);
  v10 = v11;
  v11 = 0uLL;
  turi::neural_net::Publisher<turi::style_transfer::DataBatch>::Subscribe(v3, &v10);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v10 + 1);
  if (*((_QWORD *)&v10 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v10 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v11 + 1);
  if (*((_QWORD *)&v11 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_21832A42C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

__n128 std::allocate_shared[abi:ne180100]<turi::neural_net::MapPublisher<turi::style_transfer::EncodedBatch,turi::style_transfer::EncodedBatch>::MapSubscriber,std::allocator<turi::neural_net::MapPublisher<turi::style_transfer::EncodedBatch,turi::style_transfer::EncodedBatch>::MapSubscriber>,std::shared_ptr<turi::neural_net::Transform<turi::style_transfer::EncodedBatch,turi::style_transfer::EncodedBatch>> &,std::shared_ptr<turi::neural_net::Subscriber<turi::style_transfer::EncodedBatch>>,void>@<Q0>(unint64_t *a1@<X1>, __n128 *a2@<X2>, _QWORD *a3@<X8>)
{
  __n128 *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  __n128 result;

  v6 = (__n128 *)operator new(0x48uLL);
  v6->n128_u64[1] = 0;
  v6[1].n128_u64[0] = 0;
  v6->n128_u64[0] = (unint64_t)&unk_24D93B238;
  v8 = *a1;
  v7 = a1[1];
  if (v7)
  {
    v9 = (unint64_t *)(v7 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  result = *a2;
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  v6[1].n128_u64[1] = (unint64_t)&unk_24D93B288;
  v6[2].n128_u64[0] = v8;
  v6[2].n128_u64[1] = v7;
  v6[3] = result;
  v6[4].n128_u64[0] = 0;
  *a3 = (char *)v6 + 24;
  a3[1] = v6;
  return result;
}

void std::__shared_ptr_emplace<turi::neural_net::MapPublisher<turi::style_transfer::EncodedBatch,turi::style_transfer::EncodedBatch>::MapSubscriber,std::allocator<turi::neural_net::MapPublisher<turi::style_transfer::EncodedBatch,turi::style_transfer::EncodedBatch>::MapSubscriber>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D93B238;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::neural_net::MapPublisher<turi::style_transfer::EncodedBatch,turi::style_transfer::EncodedBatch>::MapSubscriber,std::allocator<turi::neural_net::MapPublisher<turi::style_transfer::EncodedBatch,turi::style_transfer::EncodedBatch>::MapSubscriber>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D93B238;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__shared_ptr_emplace<turi::neural_net::MapPublisher<turi::style_transfer::EncodedBatch,turi::style_transfer::EncodedBatch>::MapSubscriber,std::allocator<turi::neural_net::MapPublisher<turi::style_transfer::EncodedBatch,turi::style_transfer::EncodedBatch>::MapSubscriber>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

std::exception_ptr *turi::neural_net::MapPublisher<turi::style_transfer::EncodedBatch,turi::style_transfer::EncodedBatch>::MapSubscriber::~MapSubscriber(std::exception_ptr *a1)
{
  uint64_t v2;

  a1->__ptr_ = &unk_24D93B288;
  v2 = (uint64_t)&a1[1];
  std::exception_ptr::~exception_ptr(a1 + 5);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a1[3]);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v2);
  return a1;
}

void turi::neural_net::MapPublisher<turi::style_transfer::EncodedBatch,turi::style_transfer::EncodedBatch>::MapSubscriber::~MapSubscriber(std::exception_ptr *a1)
{
  uint64_t v2;

  a1->__ptr_ = &unk_24D93B288;
  v2 = (uint64_t)&a1[1];
  std::exception_ptr::~exception_ptr(a1 + 5);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a1[3]);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v2);
  JUMPOUT(0x219A19A08);
}

uint64_t turi::neural_net::MapPublisher<turi::style_transfer::EncodedBatch,turi::style_transfer::EncodedBatch>::MapSubscriber::Receive(_QWORD *a1, int *x1_0)
{
  uint64_t *v2;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  int v14;
  _QWORD **v15;
  _QWORD *v16[2];
  std::exception_ptr v17;
  std::exception_ptr v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  int v21;
  _QWORD **v22;
  _QWORD *v23;
  std::exception_ptr v25;
  uint64_t v26;
  _QWORD **v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  std::exception_ptr v31;

  v30 = *MEMORY[0x24BDAC8D0];
  v2 = a1 + 3;
  if (!a1[3])
    return 0;
  v25.__ptr_ = 0;
  v4 = a1[1];
  v21 = *x1_0;
  v5 = x1_0 + 4;
  v6 = (_QWORD *)*((_QWORD *)x1_0 + 2);
  v22 = (_QWORD **)*((_QWORD *)x1_0 + 1);
  v23 = v6;
  if (*((_QWORD *)x1_0 + 3))
  {
    v6[2] = &v23;
    *((_QWORD *)x1_0 + 1) = v5;
    *v5 = 0;
    *((_QWORD *)x1_0 + 3) = 0;
  }
  else
  {
    v22 = &v23;
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, int *))(*(_QWORD *)v4 + 16))(&v26, v4, &v21);
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)&v22, v23);
  if (v25.__ptr_)
  {
    v9 = a1[3];
    v8 = (std::__shared_weak_count *)a1[4];
    v19 = v9;
    v20 = v8;
    *v2 = 0;
    v2[1] = 0;
    std::exception_ptr::exception_ptr(&v17, &v25);
    turi::neural_net::Completion::Failure(&v17, v31, &v18);
    (*(void (**)(uint64_t, std::exception_ptr *))(*(_QWORD *)v9 + 32))(v9, &v18);
    std::exception_ptr::~exception_ptr(&v18);
    std::exception_ptr::~exception_ptr(&v17);
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    v7 = 0;
  }
  else
  {
    v12 = *v2;
    v14 = v26;
    v15 = v27;
    v16[0] = v28;
    v16[1] = v29;
    if (v29)
    {
      v28[2] = v16;
      v27 = &v28;
      v28 = 0;
      v29 = 0;
    }
    else
    {
      v15 = v16;
    }
    v7 = (*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v12 + 24))(v12, &v14);
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)&v15, v16[0]);
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)&v27, v28);
  }
  std::exception_ptr::~exception_ptr(&v25);
  return v7;
}

void sub_21832A7C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, _QWORD *a11, uint64_t a12, std::exception_ptr a13, std::exception_ptr a14, char a15)
{
  uint64_t v15;
  uint64_t v16;

  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy(v15, a11);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v16 - 80));
  _Unwind_Resume(a1);
}

void sub_21832A80C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::exception_ptr a15, uint64_t a16, uint64_t a17, uint64_t a18, _QWORD *a19)
{
  uint64_t v19;
  uint64_t v20;

  if (a2)
  {
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy(v19, a19);
    __cxa_begin_catch(a1);
    std::current_exception();
    std::exception_ptr::operator=((std::exception_ptr *)(v20 - 80), &a15);
    std::exception_ptr::~exception_ptr(&a15);
    __cxa_end_catch();
    JUMPOUT(0x21832A684);
  }
  JUMPOUT(0x21832A804);
}

void sub_21832A850()
{
  JUMPOUT(0x21832A7FCLL);
}

void std::allocate_shared[abi:ne180100]<turi::neural_net::MapPublisher<turi::style_transfer::EncodedBatch,turi::style_transfer::TrainingProgress>,std::allocator<turi::neural_net::MapPublisher<turi::style_transfer::EncodedBatch,turi::style_transfer::TrainingProgress>>,std::shared_ptr<turi::neural_net::Publisher<turi::style_transfer::EncodedBatch>>,std::shared_ptr<turi::style_transfer::ProgressUpdater>,void>(__int128 *a1@<X1>, __int128 *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  __int128 v7;
  __int128 v8;

  v6 = operator new(0x50uLL);
  v6[2] = 0;
  *v6 = &unk_24D93B2E8;
  v6[1] = 0;
  v7 = *a1;
  *(_QWORD *)a1 = 0;
  *((_QWORD *)a1 + 1) = 0;
  v8 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v6[5] = 0;
  v6[3] = &unk_24D93B338;
  *((_OWORD *)v6 + 3) = v7;
  *((_OWORD *)v6 + 4) = v8;
  *a3 = v6 + 3;
  a3[1] = v6;
  v6[4] = 0;
  std::shared_ptr<turi::visualization::Plot>::__enable_weak_this[abi:ne180100]<cppipc::ipc_object_base,turi::visualization::Plot,void>((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void std::__shared_ptr_emplace<turi::neural_net::MapPublisher<turi::style_transfer::EncodedBatch,turi::style_transfer::TrainingProgress>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D93B2E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::neural_net::MapPublisher<turi::style_transfer::EncodedBatch,turi::style_transfer::TrainingProgress>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D93B2E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__shared_ptr_emplace<turi::neural_net::MapPublisher<turi::style_transfer::EncodedBatch,turi::style_transfer::TrainingProgress>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *turi::neural_net::MapPublisher<turi::style_transfer::EncodedBatch,turi::style_transfer::TrainingProgress>::~MapPublisher(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &unk_24D93B338;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 5));
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 3));
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void turi::neural_net::MapPublisher<turi::style_transfer::EncodedBatch,turi::style_transfer::TrainingProgress>::~MapPublisher(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &unk_24D93B338;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 5));
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 3));
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  JUMPOUT(0x219A19A08);
}

void turi::neural_net::MapPublisher<turi::style_transfer::EncodedBatch,turi::style_transfer::TrainingProgress>::Receive(uint64_t a1, __n128 *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v10;
  __int128 v11;

  std::allocate_shared[abi:ne180100]<turi::neural_net::MapPublisher<turi::style_transfer::EncodedBatch,turi::style_transfer::TrainingProgress>::MapSubscriber,std::allocator<turi::neural_net::MapPublisher<turi::style_transfer::EncodedBatch,turi::style_transfer::TrainingProgress>::MapSubscriber>,std::shared_ptr<turi::neural_net::Transform<turi::style_transfer::EncodedBatch,turi::style_transfer::TrainingProgress>> &,std::shared_ptr<turi::neural_net::Subscriber<turi::style_transfer::TrainingProgress>>,void>((unint64_t *)(a1 + 40), a2, &v11);
  v3 = *(_QWORD *)(a1 + 24);
  v10 = v11;
  v11 = 0uLL;
  turi::neural_net::Publisher<turi::style_transfer::DataBatch>::Subscribe(v3, &v10);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v10 + 1);
  if (*((_QWORD *)&v10 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v10 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v11 + 1);
  if (*((_QWORD *)&v11 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_21832AA94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

__n128 std::allocate_shared[abi:ne180100]<turi::neural_net::MapPublisher<turi::style_transfer::EncodedBatch,turi::style_transfer::TrainingProgress>::MapSubscriber,std::allocator<turi::neural_net::MapPublisher<turi::style_transfer::EncodedBatch,turi::style_transfer::TrainingProgress>::MapSubscriber>,std::shared_ptr<turi::neural_net::Transform<turi::style_transfer::EncodedBatch,turi::style_transfer::TrainingProgress>> &,std::shared_ptr<turi::neural_net::Subscriber<turi::style_transfer::TrainingProgress>>,void>@<Q0>(unint64_t *a1@<X1>, __n128 *a2@<X2>, _QWORD *a3@<X8>)
{
  __n128 *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  __n128 result;

  v6 = (__n128 *)operator new(0x48uLL);
  v6->n128_u64[1] = 0;
  v6[1].n128_u64[0] = 0;
  v6->n128_u64[0] = (unint64_t)&unk_24D93B3B0;
  v8 = *a1;
  v7 = a1[1];
  if (v7)
  {
    v9 = (unint64_t *)(v7 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  result = *a2;
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  v6[1].n128_u64[1] = (unint64_t)&unk_24D93B400;
  v6[2].n128_u64[0] = v8;
  v6[2].n128_u64[1] = v7;
  v6[3] = result;
  v6[4].n128_u64[0] = 0;
  *a3 = (char *)v6 + 24;
  a3[1] = v6;
  return result;
}

void std::__shared_ptr_emplace<turi::neural_net::MapPublisher<turi::style_transfer::EncodedBatch,turi::style_transfer::TrainingProgress>::MapSubscriber,std::allocator<turi::neural_net::MapPublisher<turi::style_transfer::EncodedBatch,turi::style_transfer::TrainingProgress>::MapSubscriber>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D93B3B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::neural_net::MapPublisher<turi::style_transfer::EncodedBatch,turi::style_transfer::TrainingProgress>::MapSubscriber,std::allocator<turi::neural_net::MapPublisher<turi::style_transfer::EncodedBatch,turi::style_transfer::TrainingProgress>::MapSubscriber>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D93B3B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__shared_ptr_emplace<turi::neural_net::MapPublisher<turi::style_transfer::EncodedBatch,turi::style_transfer::TrainingProgress>::MapSubscriber,std::allocator<turi::neural_net::MapPublisher<turi::style_transfer::EncodedBatch,turi::style_transfer::TrainingProgress>::MapSubscriber>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

std::exception_ptr *turi::neural_net::MapPublisher<turi::style_transfer::EncodedBatch,turi::style_transfer::TrainingProgress>::MapSubscriber::~MapSubscriber(std::exception_ptr *a1)
{
  uint64_t v2;

  a1->__ptr_ = &unk_24D93B400;
  v2 = (uint64_t)&a1[1];
  std::exception_ptr::~exception_ptr(a1 + 5);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a1[3]);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v2);
  return a1;
}

void turi::neural_net::MapPublisher<turi::style_transfer::EncodedBatch,turi::style_transfer::TrainingProgress>::MapSubscriber::~MapSubscriber(std::exception_ptr *a1)
{
  uint64_t v2;

  a1->__ptr_ = &unk_24D93B400;
  v2 = (uint64_t)&a1[1];
  std::exception_ptr::~exception_ptr(a1 + 5);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a1[3]);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v2);
  JUMPOUT(0x219A19A08);
}

uint64_t turi::neural_net::MapPublisher<turi::style_transfer::EncodedBatch,turi::style_transfer::TrainingProgress>::MapSubscriber::Receive(_QWORD *a1, int *x1_0)
{
  _QWORD *v2;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::exception_ptr v14;
  std::exception_ptr v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  int v18;
  _QWORD **v19;
  _QWORD *v20;
  uint64_t v21;
  std::exception_ptr v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  std::exception_ptr v26;

  v25 = *MEMORY[0x24BDAC8D0];
  v2 = a1 + 3;
  if (!a1[3])
    return 0;
  v4 = a1[1];
  v18 = *x1_0;
  v5 = x1_0 + 4;
  v6 = (_QWORD *)*((_QWORD *)x1_0 + 2);
  v19 = (_QWORD **)*((_QWORD *)x1_0 + 1);
  v20 = v6;
  v21 = *((_QWORD *)x1_0 + 3);
  v22.__ptr_ = 0;
  if (v21)
  {
    v6[2] = &v20;
    *((_QWORD *)x1_0 + 1) = v5;
    *v5 = 0;
    *((_QWORD *)x1_0 + 3) = 0;
  }
  else
  {
    v19 = &v20;
  }
  v23 = (*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v4 + 16))(v4, &v18);
  v24 = v8;
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)&v19, v20);
  if (v22.__ptr_)
  {
    v10 = a1[3];
    v9 = (std::__shared_weak_count *)a1[4];
    v16 = v10;
    v17 = v9;
    *v2 = 0;
    v2[1] = 0;
    std::exception_ptr::exception_ptr(&v14, &v22);
    turi::neural_net::Completion::Failure(&v14, v26, &v15);
    (*(void (**)(uint64_t, std::exception_ptr *))(*(_QWORD *)v10 + 32))(v10, &v15);
    std::exception_ptr::~exception_ptr(&v15);
    std::exception_ptr::~exception_ptr(&v14);
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v7 = 0;
  }
  else
  {
    v7 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v2 + 24))(*v2, v23, v24);
  }
  std::exception_ptr::~exception_ptr(&v22);
  return v7;
}

void sub_21832ADC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::exception_ptr a17)
{
  std::exception_ptr::~exception_ptr(&a17);
  _Unwind_Resume(a1);
}

void sub_21832AE04(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::exception_ptr a11, uint64_t a12, uint64_t a13, uint64_t a14, _QWORD *a15, uint64_t a16, std::exception_ptr a17)
{
  uint64_t v17;

  if (a2)
  {
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy(v17, a15);
    __cxa_begin_catch(a1);
    std::current_exception();
    std::exception_ptr::operator=(&a17, &a11);
    std::exception_ptr::~exception_ptr(&a11);
    __cxa_end_catch();
    JUMPOUT(0x21832ACE8);
  }
  JUMPOUT(0x21832ADFCLL);
}

void std::allocate_shared[abi:ne180100]<turi::style_transfer::InferenceDataIterator,std::allocator<turi::style_transfer::InferenceDataIterator>,std::shared_ptr<turi::style_transfer::DataIterator> &,std::vector<int>,void>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;

  v6 = operator new(0x80uLL);
  std::__shared_ptr_emplace<turi::style_transfer::InferenceDataIterator>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<turi::style_transfer::DataIterator> &,std::vector<int>,std::allocator<turi::style_transfer::InferenceDataIterator>,0>((uint64_t)v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  std::shared_ptr<turi::visualization::Plot>::__enable_weak_this[abi:ne180100]<cppipc::ipc_object_base,turi::visualization::Plot,void>((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_21832AEA0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

__n128 std::__shared_ptr_emplace<turi::style_transfer::InferenceDataIterator>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<turi::style_transfer::DataIterator> &,std::vector<int>,std::allocator<turi::style_transfer::InferenceDataIterator>,0>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  __n128 result;

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &unk_24D93B450;
  v4 = *a2;
  v3 = a2[1];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = *a3;
  result = *(__n128 *)(a3 + 1);
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  *(_QWORD *)(a1 + 24) = off_24D93ABC8;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = v4;
  *(_QWORD *)(a1 + 56) = v3;
  *(_QWORD *)(a1 + 64) = v7;
  *(__n128 *)(a1 + 72) = result;
  *(_QWORD *)(a1 + 88) = result.n128_u64[0];
  *(_DWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  return result;
}

void std::__shared_ptr_emplace<turi::style_transfer::InferenceDataIterator>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D93B450;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::style_transfer::InferenceDataIterator>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D93B450;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__shared_ptr_emplace<turi::style_transfer::InferenceDataIterator>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void turi::neural_net::Publisher<turi::style_transfer::DataBatch>::Map<turi::neural_net::CallableTransform<turi::style_transfer::DataBatch,turi::style_transfer::EncodedInferenceBatch (*)(turi::style_transfer::DataBatch)>>(uint64_t a1@<X0>, __int128 *a2@<X1>, _OWORD *a3@<X8>)
{
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  __int128 v8;
  __int128 v9;

  std::shared_ptr<turi::neural_net::Iterator<std::unique_ptr<turi::style_transfer::Checkpoint>>>::shared_ptr[abi:ne180100]<turi::neural_net::Iterator<std::unique_ptr<turi::style_transfer::Checkpoint>>,void>(&v8, (_QWORD *)(a1 + 8));
  std::allocate_shared[abi:ne180100]<turi::neural_net::MapPublisher<turi::style_transfer::DataBatch,turi::style_transfer::EncodedInferenceBatch>,std::allocator<turi::neural_net::MapPublisher<turi::style_transfer::DataBatch,turi::style_transfer::EncodedInferenceBatch>>,std::shared_ptr<turi::neural_net::Publisher<turi::style_transfer::DataBatch>>,std::shared_ptr<turi::neural_net::CallableTransform<turi::style_transfer::DataBatch,turi::style_transfer::EncodedInferenceBatch (*)(turi::style_transfer::DataBatch)>>,void>(&v8, a2, &v9);
  *a3 = v9;
  v9 = 0uLL;
  v5 = (std::__shared_weak_count *)*((_QWORD *)&v8 + 1);
  if (*((_QWORD *)&v8 + 1))
  {
    v6 = (unint64_t *)(*((_QWORD *)&v8 + 1) + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_21832B004(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<turi::neural_net::CallableTransform<turi::style_transfer::DataBatch,turi::style_transfer::EncodedInferenceBatch (*)(turi::style_transfer::DataBatch)>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D93B4A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::neural_net::CallableTransform<turi::style_transfer::DataBatch,turi::style_transfer::EncodedInferenceBatch (*)(turi::style_transfer::DataBatch)>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D93B4A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__shared_ptr_emplace<turi::neural_net::CallableTransform<turi::style_transfer::DataBatch,turi::style_transfer::EncodedInferenceBatch (*)(turi::style_transfer::DataBatch)>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void turi::neural_net::CallableTransform<turi::style_transfer::DataBatch,turi::style_transfer::EncodedInferenceBatch (*)(turi::style_transfer::DataBatch)>::Invoke(uint64_t a1, int *a2)
{
  void (*v2)(int *);
  int v3;
  __int128 v4;
  uint64_t v5;
  void **v6;

  v2 = *(void (**)(int *))(a1 + 8);
  v3 = *a2;
  v4 = *(_OWORD *)(a2 + 2);
  v5 = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *((_QWORD *)a2 + 3) = 0;
  v2(&v3);
  v6 = (void **)&v4;
  std::vector<turi::style_transfer::st_example>::__destroy_vector::operator()[abi:ne180100](&v6);
}

void sub_21832B0D0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v3 = v1;
  *(_QWORD *)(v2 - 24) = v3;
  std::vector<turi::style_transfer::st_example>::__destroy_vector::operator()[abi:ne180100]((void ***)(v2 - 24));
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<turi::neural_net::MapPublisher<turi::style_transfer::DataBatch,turi::style_transfer::EncodedInferenceBatch>,std::allocator<turi::neural_net::MapPublisher<turi::style_transfer::DataBatch,turi::style_transfer::EncodedInferenceBatch>>,std::shared_ptr<turi::neural_net::Publisher<turi::style_transfer::DataBatch>>,std::shared_ptr<turi::neural_net::CallableTransform<turi::style_transfer::DataBatch,turi::style_transfer::EncodedInferenceBatch (*)(turi::style_transfer::DataBatch)>>,void>(__int128 *a1@<X1>, __int128 *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  __int128 v7;
  __int128 v8;

  v6 = operator new(0x50uLL);
  v6[2] = 0;
  *v6 = &unk_24D93B540;
  v6[1] = 0;
  v7 = *a1;
  *(_QWORD *)a1 = 0;
  *((_QWORD *)a1 + 1) = 0;
  v8 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v6[5] = 0;
  v6[3] = &unk_24D93B590;
  *((_OWORD *)v6 + 3) = v7;
  *((_OWORD *)v6 + 4) = v8;
  *a3 = v6 + 3;
  a3[1] = v6;
  v6[4] = 0;
  std::shared_ptr<turi::visualization::Plot>::__enable_weak_this[abi:ne180100]<cppipc::ipc_object_base,turi::visualization::Plot,void>((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void std::__shared_ptr_emplace<turi::neural_net::MapPublisher<turi::style_transfer::DataBatch,turi::style_transfer::EncodedInferenceBatch>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D93B540;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::neural_net::MapPublisher<turi::style_transfer::DataBatch,turi::style_transfer::EncodedInferenceBatch>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D93B540;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__shared_ptr_emplace<turi::neural_net::MapPublisher<turi::style_transfer::DataBatch,turi::style_transfer::EncodedInferenceBatch>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *turi::neural_net::MapPublisher<turi::style_transfer::DataBatch,turi::style_transfer::EncodedInferenceBatch>::~MapPublisher(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &unk_24D93B590;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 5));
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 3));
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void turi::neural_net::MapPublisher<turi::style_transfer::DataBatch,turi::style_transfer::EncodedInferenceBatch>::~MapPublisher(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &unk_24D93B590;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 5));
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 3));
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  JUMPOUT(0x219A19A08);
}

void turi::neural_net::MapPublisher<turi::style_transfer::DataBatch,turi::style_transfer::EncodedInferenceBatch>::Receive(uint64_t a1, __n128 *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v10;
  __int128 v11;

  std::allocate_shared[abi:ne180100]<turi::neural_net::MapPublisher<turi::style_transfer::DataBatch,turi::style_transfer::EncodedInferenceBatch>::MapSubscriber,std::allocator<turi::neural_net::MapPublisher<turi::style_transfer::DataBatch,turi::style_transfer::EncodedInferenceBatch>::MapSubscriber>,std::shared_ptr<turi::neural_net::Transform<turi::style_transfer::DataBatch,turi::style_transfer::EncodedInferenceBatch>> &,std::shared_ptr<turi::neural_net::Subscriber<turi::style_transfer::EncodedInferenceBatch>>,void>((unint64_t *)(a1 + 40), a2, &v11);
  v3 = *(_QWORD *)(a1 + 24);
  v10 = v11;
  v11 = 0uLL;
  turi::neural_net::Publisher<turi::style_transfer::DataBatch>::Subscribe(v3, &v10);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v10 + 1);
  if (*((_QWORD *)&v10 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v10 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v11 + 1);
  if (*((_QWORD *)&v11 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_21832B328(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

__n128 std::allocate_shared[abi:ne180100]<turi::neural_net::MapPublisher<turi::style_transfer::DataBatch,turi::style_transfer::EncodedInferenceBatch>::MapSubscriber,std::allocator<turi::neural_net::MapPublisher<turi::style_transfer::DataBatch,turi::style_transfer::EncodedInferenceBatch>::MapSubscriber>,std::shared_ptr<turi::neural_net::Transform<turi::style_transfer::DataBatch,turi::style_transfer::EncodedInferenceBatch>> &,std::shared_ptr<turi::neural_net::Subscriber<turi::style_transfer::EncodedInferenceBatch>>,void>@<Q0>(unint64_t *a1@<X1>, __n128 *a2@<X2>, _QWORD *a3@<X8>)
{
  __n128 *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  __n128 result;

  v6 = (__n128 *)operator new(0x48uLL);
  v6->n128_u64[1] = 0;
  v6[1].n128_u64[0] = 0;
  v6->n128_u64[0] = (unint64_t)&unk_24D93B608;
  v8 = *a1;
  v7 = a1[1];
  if (v7)
  {
    v9 = (unint64_t *)(v7 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  result = *a2;
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  v6[1].n128_u64[1] = (unint64_t)&unk_24D93B658;
  v6[2].n128_u64[0] = v8;
  v6[2].n128_u64[1] = v7;
  v6[3] = result;
  v6[4].n128_u64[0] = 0;
  *a3 = (char *)v6 + 24;
  a3[1] = v6;
  return result;
}

void std::__shared_ptr_emplace<turi::neural_net::MapPublisher<turi::style_transfer::DataBatch,turi::style_transfer::EncodedInferenceBatch>::MapSubscriber,std::allocator<turi::neural_net::MapPublisher<turi::style_transfer::DataBatch,turi::style_transfer::EncodedInferenceBatch>::MapSubscriber>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D93B608;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::neural_net::MapPublisher<turi::style_transfer::DataBatch,turi::style_transfer::EncodedInferenceBatch>::MapSubscriber,std::allocator<turi::neural_net::MapPublisher<turi::style_transfer::DataBatch,turi::style_transfer::EncodedInferenceBatch>::MapSubscriber>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D93B608;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__shared_ptr_emplace<turi::neural_net::MapPublisher<turi::style_transfer::DataBatch,turi::style_transfer::EncodedInferenceBatch>::MapSubscriber,std::allocator<turi::neural_net::MapPublisher<turi::style_transfer::DataBatch,turi::style_transfer::EncodedInferenceBatch>::MapSubscriber>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

std::exception_ptr *turi::neural_net::MapPublisher<turi::style_transfer::DataBatch,turi::style_transfer::EncodedInferenceBatch>::MapSubscriber::~MapSubscriber(std::exception_ptr *a1)
{
  uint64_t v2;

  a1->__ptr_ = &unk_24D93B658;
  v2 = (uint64_t)&a1[1];
  std::exception_ptr::~exception_ptr(a1 + 5);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a1[3]);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v2);
  return a1;
}

void turi::neural_net::MapPublisher<turi::style_transfer::DataBatch,turi::style_transfer::EncodedInferenceBatch>::MapSubscriber::~MapSubscriber(std::exception_ptr *a1)
{
  uint64_t v2;

  a1->__ptr_ = &unk_24D93B658;
  v2 = (uint64_t)&a1[1];
  std::exception_ptr::~exception_ptr(a1 + 5);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a1[3]);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v2);
  JUMPOUT(0x219A19A08);
}

uint64_t turi::neural_net::MapPublisher<turi::style_transfer::DataBatch,turi::style_transfer::EncodedInferenceBatch>::MapSubscriber::Receive(_QWORD *a1, int *x1_0)
{
  uint64_t *v2;
  uint64_t v4;
  std::__shared_weak_count *v5;
  void **v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v12;
  _QWORD **v13;
  _QWORD *v14[2];
  int v15;
  std::exception_ptr v16;
  std::exception_ptr v17;
  void **v18[2];
  int v19;
  __int128 v20;
  uint64_t v21;
  std::exception_ptr v22;
  uint64_t v23;
  _QWORD **v24;
  _QWORD *v25;
  _QWORD *v26;
  int v27;
  uint64_t v28;
  std::exception_ptr v29;

  v28 = *MEMORY[0x24BDAC8D0];
  v2 = a1 + 3;
  if (!a1[3])
    return 0;
  v22.__ptr_ = 0;
  v4 = a1[1];
  v19 = *x1_0;
  v20 = *(_OWORD *)(x1_0 + 2);
  v21 = *((_QWORD *)x1_0 + 3);
  *((_QWORD *)x1_0 + 1) = 0;
  *((_QWORD *)x1_0 + 2) = 0;
  *((_QWORD *)x1_0 + 3) = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, int *))(*(_QWORD *)v4 + 16))(&v23, v4, &v19);
  v18[0] = (void **)&v20;
  std::vector<turi::style_transfer::st_example>::__destroy_vector::operator()[abi:ne180100](v18);
  if (v22.__ptr_)
  {
    v6 = (void **)a1[3];
    v5 = (std::__shared_weak_count *)a1[4];
    v18[0] = v6;
    v18[1] = (void **)&v5->__vftable;
    *v2 = 0;
    v2[1] = 0;
    std::exception_ptr::exception_ptr(&v16, &v22);
    turi::neural_net::Completion::Failure(&v16, v29, &v17);
    (*((void (**)(void **, std::exception_ptr *))*v6 + 4))(v6, &v17);
    std::exception_ptr::~exception_ptr(&v17);
    std::exception_ptr::~exception_ptr(&v16);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v9 = 0;
  }
  else
  {
    v10 = *v2;
    v12 = v23;
    v13 = v24;
    v14[0] = v25;
    v14[1] = v26;
    if (v26)
    {
      v25[2] = v14;
      v24 = &v25;
      v25 = 0;
      v26 = 0;
    }
    else
    {
      v13 = v14;
    }
    v15 = v27;
    v9 = (*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v10 + 24))(v10, &v12);
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)&v13, v14[0]);
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)&v24, v25);
  }
  std::exception_ptr::~exception_ptr(&v22);
  return v9;
}

void sub_21832B6AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, _QWORD *a11, uint64_t a12, uint64_t a13, std::exception_ptr a14, std::exception_ptr a15, char a16)
{
  uint64_t v16;
  uint64_t v17;

  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy(v16, a11);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v17 - 88));
  _Unwind_Resume(a1);
}

void sub_21832B6F4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::exception_ptr a16)
{
  uint64_t v16;

  if (a2)
  {
    std::vector<turi::style_transfer::st_example>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
    __cxa_begin_catch(a1);
    std::current_exception();
    std::exception_ptr::operator=((std::exception_ptr *)(v16 - 88), &a16);
    std::exception_ptr::~exception_ptr(&a16);
    __cxa_end_catch();
    JUMPOUT(0x21832B55CLL);
  }
  JUMPOUT(0x21832B6ECLL);
}

void sub_21832B738()
{
  JUMPOUT(0x21832B6E4);
}

void std::__shared_ptr_emplace<turi::neural_net::CallableTransform<turi::style_transfer::EncodedInferenceBatch,turi::style_transfer::ModelTrainer::AsInferenceBatchPublisher(std::unique_ptr<turi::style_transfer::data_iterator>,std::vector<int>,turi::neural_net::compute_context *)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24D93B6A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::neural_net::CallableTransform<turi::style_transfer::EncodedInferenceBatch,turi::style_transfer::ModelTrainer::AsInferenceBatchPublisher(std::unique_ptr<turi::style_transfer::data_iterator>,std::vector<int>,turi::neural_net::compute_context *)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24D93B6A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__shared_ptr_emplace<turi::neural_net::CallableTransform<turi::style_transfer::EncodedInferenceBatch,turi::style_transfer::ModelTrainer::AsInferenceBatchPublisher(std::unique_ptr<turi::style_transfer::data_iterator>,std::vector<int>,turi::neural_net::compute_context *)::$_0>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *turi::neural_net::CallableTransform<turi::style_transfer::EncodedInferenceBatch,turi::style_transfer::ModelTrainer::AsInferenceBatchPublisher(std::unique_ptr<turi::style_transfer::data_iterator>,std::vector<int>,turi::neural_net::compute_context *)::$_0>::~CallableTransform(_QWORD *a1)
{
  *a1 = &off_24D93B6F8;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void turi::neural_net::CallableTransform<turi::style_transfer::EncodedInferenceBatch,turi::style_transfer::ModelTrainer::AsInferenceBatchPublisher(std::unique_ptr<turi::style_transfer::data_iterator>,std::vector<int>,turi::neural_net::compute_context *)::$_0>::~CallableTransform(_QWORD *a1)
{
  *a1 = &off_24D93B6F8;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x219A19A08);
}

void turi::neural_net::CallableTransform<turi::style_transfer::EncodedInferenceBatch,turi::style_transfer::ModelTrainer::AsInferenceBatchPublisher(std::unique_ptr<turi::style_transfer::data_iterator>,std::vector<int>,turi::neural_net::compute_context *)::$_0>::Invoke(uint64_t a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  int v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD **v10;
  _QWORD *v11;
  int v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;

  v4 = *a2;
  v5 = a2 + 4;
  v6 = (_QWORD *)*((_QWORD *)a2 + 2);
  v10 = (_QWORD **)*((_QWORD *)a2 + 1);
  v11 = v6;
  if (*((_QWORD *)a2 + 3))
  {
    v6[2] = &v11;
    *((_QWORD *)a2 + 1) = v5;
    *v5 = 0;
    *((_QWORD *)a2 + 3) = 0;
  }
  else
  {
    v10 = &v11;
  }
  v13 = a2[8];
  *(_QWORD *)(a3 + 16) = 0;
  v7 = a3 + 16;
  *(_QWORD *)(a3 + 8) = a3 + 16;
  *(_QWORD *)(a3 + 24) = 0;
  *(_DWORD *)(a3 + 32) = -1;
  *(_DWORD *)a3 = v4;
  (*(void (**)(_QWORD **__return_ptr, _QWORD, _QWORD ***))(**(_QWORD **)(a1 + 8) + 24))(&v14, *(_QWORD *)(a1 + 8), &v10);
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy(a3 + 8, *(_QWORD **)(a3 + 16));
  v8 = v15;
  *(_QWORD *)(a3 + 8) = v14;
  *(_QWORD *)(a3 + 16) = v8;
  v9 = v16;
  *(_QWORD *)(a3 + 24) = v16;
  if (v9)
  {
    v8[2] = v7;
    v14 = &v15;
    v15 = 0;
    v16 = 0;
    v8 = 0;
  }
  else
  {
    *(_QWORD *)(a3 + 8) = v7;
  }
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)&v14, v8);
  *(_DWORD *)(a3 + 32) = v13;
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)&v10, v11);
}

void sub_21832B914(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _QWORD *a11)
{
  uint64_t v11;
  uint64_t v12;
  _QWORD **v13;

  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy(v12, *v13);
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy(v11, a11);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<turi::neural_net::MapPublisher<turi::style_transfer::EncodedInferenceBatch,turi::style_transfer::EncodedInferenceBatch>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D93B748;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::neural_net::MapPublisher<turi::style_transfer::EncodedInferenceBatch,turi::style_transfer::EncodedInferenceBatch>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D93B748;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__shared_ptr_emplace<turi::neural_net::MapPublisher<turi::style_transfer::EncodedInferenceBatch,turi::style_transfer::EncodedInferenceBatch>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *turi::neural_net::MapPublisher<turi::style_transfer::EncodedInferenceBatch,turi::style_transfer::EncodedInferenceBatch>::~MapPublisher(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &unk_24D93B798;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 5));
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 3));
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void turi::neural_net::MapPublisher<turi::style_transfer::EncodedInferenceBatch,turi::style_transfer::EncodedInferenceBatch>::~MapPublisher(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &unk_24D93B798;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 5));
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 3));
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  JUMPOUT(0x219A19A08);
}

void turi::neural_net::MapPublisher<turi::style_transfer::EncodedInferenceBatch,turi::style_transfer::EncodedInferenceBatch>::Receive(uint64_t a1, __n128 *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v10;
  __int128 v11;

  std::allocate_shared[abi:ne180100]<turi::neural_net::MapPublisher<turi::style_transfer::EncodedInferenceBatch,turi::style_transfer::EncodedInferenceBatch>::MapSubscriber,std::allocator<turi::neural_net::MapPublisher<turi::style_transfer::EncodedInferenceBatch,turi::style_transfer::EncodedInferenceBatch>::MapSubscriber>,std::shared_ptr<turi::neural_net::Transform<turi::style_transfer::EncodedInferenceBatch,turi::style_transfer::EncodedInferenceBatch>> &,std::shared_ptr<turi::neural_net::Subscriber<turi::style_transfer::EncodedInferenceBatch>>,void>((unint64_t *)(a1 + 40), a2, &v11);
  v3 = *(_QWORD *)(a1 + 24);
  v10 = v11;
  v11 = 0uLL;
  turi::neural_net::Publisher<turi::style_transfer::DataBatch>::Subscribe(v3, &v10);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v10 + 1);
  if (*((_QWORD *)&v10 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v10 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v11 + 1);
  if (*((_QWORD *)&v11 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_21832BAF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

__n128 std::allocate_shared[abi:ne180100]<turi::neural_net::MapPublisher<turi::style_transfer::EncodedInferenceBatch,turi::style_transfer::EncodedInferenceBatch>::MapSubscriber,std::allocator<turi::neural_net::MapPublisher<turi::style_transfer::EncodedInferenceBatch,turi::style_transfer::EncodedInferenceBatch>::MapSubscriber>,std::shared_ptr<turi::neural_net::Transform<turi::style_transfer::EncodedInferenceBatch,turi::style_transfer::EncodedInferenceBatch>> &,std::shared_ptr<turi::neural_net::Subscriber<turi::style_transfer::EncodedInferenceBatch>>,void>@<Q0>(unint64_t *a1@<X1>, __n128 *a2@<X2>, _QWORD *a3@<X8>)
{
  __n128 *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  __n128 result;

  v6 = (__n128 *)operator new(0x48uLL);
  v6->n128_u64[1] = 0;
  v6[1].n128_u64[0] = 0;
  v6->n128_u64[0] = (unint64_t)&unk_24D93B7D8;
  v8 = *a1;
  v7 = a1[1];
  if (v7)
  {
    v9 = (unint64_t *)(v7 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  result = *a2;
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  v6[1].n128_u64[1] = (unint64_t)&unk_24D93B828;
  v6[2].n128_u64[0] = v8;
  v6[2].n128_u64[1] = v7;
  v6[3] = result;
  v6[4].n128_u64[0] = 0;
  *a3 = (char *)v6 + 24;
  a3[1] = v6;
  return result;
}

void std::__shared_ptr_emplace<turi::neural_net::MapPublisher<turi::style_transfer::EncodedInferenceBatch,turi::style_transfer::EncodedInferenceBatch>::MapSubscriber,std::allocator<turi::neural_net::MapPublisher<turi::style_transfer::EncodedInferenceBatch,turi::style_transfer::EncodedInferenceBatch>::MapSubscriber>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D93B7D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::neural_net::MapPublisher<turi::style_transfer::EncodedInferenceBatch,turi::style_transfer::EncodedInferenceBatch>::MapSubscriber,std::allocator<turi::neural_net::MapPublisher<turi::style_transfer::EncodedInferenceBatch,turi::style_transfer::EncodedInferenceBatch>::MapSubscriber>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D93B7D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__shared_ptr_emplace<turi::neural_net::MapPublisher<turi::style_transfer::EncodedInferenceBatch,turi::style_transfer::EncodedInferenceBatch>::MapSubscriber,std::allocator<turi::neural_net::MapPublisher<turi::style_transfer::EncodedInferenceBatch,turi::style_transfer::EncodedInferenceBatch>::MapSubscriber>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

std::exception_ptr *turi::neural_net::MapPublisher<turi::style_transfer::EncodedInferenceBatch,turi::style_transfer::EncodedInferenceBatch>::MapSubscriber::~MapSubscriber(std::exception_ptr *a1)
{
  uint64_t v2;

  a1->__ptr_ = &unk_24D93B828;
  v2 = (uint64_t)&a1[1];
  std::exception_ptr::~exception_ptr(a1 + 5);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a1[3]);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v2);
  return a1;
}

void turi::neural_net::MapPublisher<turi::style_transfer::EncodedInferenceBatch,turi::style_transfer::EncodedInferenceBatch>::MapSubscriber::~MapSubscriber(std::exception_ptr *a1)
{
  uint64_t v2;

  a1->__ptr_ = &unk_24D93B828;
  v2 = (uint64_t)&a1[1];
  std::exception_ptr::~exception_ptr(a1 + 5);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a1[3]);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v2);
  JUMPOUT(0x219A19A08);
}

uint64_t turi::neural_net::MapPublisher<turi::style_transfer::EncodedInferenceBatch,turi::style_transfer::EncodedInferenceBatch>::MapSubscriber::Receive(_QWORD *a1, int *x1_0)
{
  uint64_t *v2;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  int v14;
  _QWORD **v15;
  _QWORD *v16[2];
  int v17;
  std::exception_ptr v18;
  std::exception_ptr v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  int v22;
  _QWORD **v23;
  _QWORD *v24;
  int v26;
  std::exception_ptr v27;
  uint64_t v28;
  _QWORD **v29;
  _QWORD *v30;
  _QWORD *v31;
  int v32;
  uint64_t v33;
  std::exception_ptr v34;

  v33 = *MEMORY[0x24BDAC8D0];
  v2 = a1 + 3;
  if (!a1[3])
    return 0;
  v27.__ptr_ = 0;
  v4 = a1[1];
  v22 = *x1_0;
  v5 = x1_0 + 4;
  v6 = (_QWORD *)*((_QWORD *)x1_0 + 2);
  v23 = (_QWORD **)*((_QWORD *)x1_0 + 1);
  v24 = v6;
  if (*((_QWORD *)x1_0 + 3))
  {
    v6[2] = &v24;
    *((_QWORD *)x1_0 + 1) = v5;
    *v5 = 0;
    *((_QWORD *)x1_0 + 3) = 0;
  }
  else
  {
    v23 = &v24;
  }
  v26 = x1_0[8];
  (*(void (**)(uint64_t *__return_ptr, uint64_t, int *))(*(_QWORD *)v4 + 16))(&v28, v4, &v22);
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)&v23, v24);
  if (v27.__ptr_)
  {
    v9 = a1[3];
    v8 = (std::__shared_weak_count *)a1[4];
    v20 = v9;
    v21 = v8;
    *v2 = 0;
    v2[1] = 0;
    std::exception_ptr::exception_ptr(&v18, &v27);
    turi::neural_net::Completion::Failure(&v18, v34, &v19);
    (*(void (**)(uint64_t, std::exception_ptr *))(*(_QWORD *)v9 + 32))(v9, &v19);
    std::exception_ptr::~exception_ptr(&v19);
    std::exception_ptr::~exception_ptr(&v18);
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    v7 = 0;
  }
  else
  {
    v12 = *v2;
    v14 = v28;
    v15 = v29;
    v16[0] = v30;
    v16[1] = v31;
    if (v31)
    {
      v30[2] = v16;
      v29 = &v30;
      v30 = 0;
      v31 = 0;
    }
    else
    {
      v15 = v16;
    }
    v17 = v32;
    v7 = (*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v12 + 24))(v12, &v14);
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)&v15, v16[0]);
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)&v29, v30);
  }
  std::exception_ptr::~exception_ptr(&v27);
  return v7;
}

void sub_21832BE98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, _QWORD *a12, uint64_t a13, uint64_t a14, std::exception_ptr a15, std::exception_ptr a16, char a17)
{
  uint64_t v17;
  uint64_t v18;

  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy(v17, a12);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v18 - 88));
  _Unwind_Resume(a1);
}

void sub_21832BEE0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::exception_ptr a17, uint64_t a18, uint64_t a19, uint64_t a20,_QWORD *a21)
{
  uint64_t v21;
  uint64_t v22;

  if (a2)
  {
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy(v21, a21);
    __cxa_begin_catch(a1);
    std::current_exception();
    std::exception_ptr::operator=((std::exception_ptr *)(v22 - 88), &a17);
    std::exception_ptr::~exception_ptr(&a17);
    __cxa_end_catch();
    JUMPOUT(0x21832BD50);
  }
  JUMPOUT(0x21832BED8);
}

void sub_21832BF24()
{
  JUMPOUT(0x21832BED0);
}

void turi::neural_net::Publisher<turi::style_transfer::EncodedInferenceBatch>::Map<turi::neural_net::CallableTransform<turi::style_transfer::EncodedInferenceBatch,turi::style_transfer::DataBatch (*)(turi::style_transfer::EncodedInferenceBatch)>>(uint64_t a1@<X0>, __int128 *a2@<X1>, _OWORD *a3@<X8>)
{
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  __int128 v8;
  __int128 v9;

  std::shared_ptr<turi::neural_net::Iterator<std::unique_ptr<turi::style_transfer::Checkpoint>>>::shared_ptr[abi:ne180100]<turi::neural_net::Iterator<std::unique_ptr<turi::style_transfer::Checkpoint>>,void>(&v8, (_QWORD *)(a1 + 8));
  std::allocate_shared[abi:ne180100]<turi::neural_net::MapPublisher<turi::style_transfer::EncodedInferenceBatch,turi::style_transfer::DataBatch>,std::allocator<turi::neural_net::MapPublisher<turi::style_transfer::EncodedInferenceBatch,turi::style_transfer::DataBatch>>,std::shared_ptr<turi::neural_net::Publisher<turi::style_transfer::EncodedInferenceBatch>>,std::shared_ptr<turi::neural_net::CallableTransform<turi::style_transfer::EncodedInferenceBatch,turi::style_transfer::DataBatch (*)(turi::style_transfer::EncodedInferenceBatch)>>,void>(&v8, a2, &v9);
  *a3 = v9;
  v9 = 0uLL;
  v5 = (std::__shared_weak_count *)*((_QWORD *)&v8 + 1);
  if (*((_QWORD *)&v8 + 1))
  {
    v6 = (unint64_t *)(*((_QWORD *)&v8 + 1) + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_21832BFB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<turi::neural_net::CallableTransform<turi::style_transfer::EncodedInferenceBatch,turi::style_transfer::DataBatch (*)(turi::style_transfer::EncodedInferenceBatch)>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D93B888;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::neural_net::CallableTransform<turi::style_transfer::EncodedInferenceBatch,turi::style_transfer::DataBatch (*)(turi::style_transfer::EncodedInferenceBatch)>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D93B888;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__shared_ptr_emplace<turi::neural_net::CallableTransform<turi::style_transfer::EncodedInferenceBatch,turi::style_transfer::DataBatch (*)(turi::style_transfer::EncodedInferenceBatch)>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void turi::neural_net::CallableTransform<turi::style_transfer::EncodedInferenceBatch,turi::style_transfer::DataBatch (*)(turi::style_transfer::EncodedInferenceBatch)>::Invoke(uint64_t a1, int *a2)
{
  void (*v2)(int *);
  _QWORD *v3;
  _QWORD *v4;
  int v5;
  _QWORD **v6;
  _QWORD *v7;
  int v9;

  v2 = *(void (**)(int *))(a1 + 8);
  v5 = *a2;
  v3 = a2 + 4;
  v4 = (_QWORD *)*((_QWORD *)a2 + 2);
  v6 = (_QWORD **)*((_QWORD *)a2 + 1);
  v7 = v4;
  if (*((_QWORD *)a2 + 3))
  {
    v4[2] = &v7;
    *((_QWORD *)a2 + 1) = v3;
    *v3 = 0;
    *((_QWORD *)a2 + 3) = 0;
  }
  else
  {
    v6 = &v7;
  }
  v9 = a2[8];
  v2(&v5);
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)&v6, v7);
}

void sub_21832C0A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, _QWORD *a12)
{
  uint64_t v12;

  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy(v12, a12);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<turi::neural_net::MapPublisher<turi::style_transfer::EncodedInferenceBatch,turi::style_transfer::DataBatch>,std::allocator<turi::neural_net::MapPublisher<turi::style_transfer::EncodedInferenceBatch,turi::style_transfer::DataBatch>>,std::shared_ptr<turi::neural_net::Publisher<turi::style_transfer::EncodedInferenceBatch>>,std::shared_ptr<turi::neural_net::CallableTransform<turi::style_transfer::EncodedInferenceBatch,turi::style_transfer::DataBatch (*)(turi::style_transfer::EncodedInferenceBatch)>>,void>(__int128 *a1@<X1>, __int128 *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  __int128 v7;
  __int128 v8;

  v6 = operator new(0x50uLL);
  v6[2] = 0;
  *v6 = &unk_24D93B928;
  v6[1] = 0;
  v7 = *a1;
  *(_QWORD *)a1 = 0;
  *((_QWORD *)a1 + 1) = 0;
  v8 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v6[5] = 0;
  v6[3] = &unk_24D93B978;
  *((_OWORD *)v6 + 3) = v7;
  *((_OWORD *)v6 + 4) = v8;
  *a3 = v6 + 3;
  a3[1] = v6;
  v6[4] = 0;
  std::shared_ptr<turi::visualization::Plot>::__enable_weak_this[abi:ne180100]<cppipc::ipc_object_base,turi::visualization::Plot,void>((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void std::__shared_ptr_emplace<turi::neural_net::MapPublisher<turi::style_transfer::EncodedInferenceBatch,turi::style_transfer::DataBatch>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D93B928;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::neural_net::MapPublisher<turi::style_transfer::EncodedInferenceBatch,turi::style_transfer::DataBatch>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D93B928;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__shared_ptr_emplace<turi::neural_net::MapPublisher<turi::style_transfer::EncodedInferenceBatch,turi::style_transfer::DataBatch>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *turi::neural_net::MapPublisher<turi::style_transfer::EncodedInferenceBatch,turi::style_transfer::DataBatch>::~MapPublisher(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &unk_24D93B978;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 5));
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 3));
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void turi::neural_net::MapPublisher<turi::style_transfer::EncodedInferenceBatch,turi::style_transfer::DataBatch>::~MapPublisher(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &unk_24D93B978;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 5));
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 3));
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  JUMPOUT(0x219A19A08);
}

void turi::neural_net::MapPublisher<turi::style_transfer::EncodedInferenceBatch,turi::style_transfer::DataBatch>::Receive(uint64_t a1, __n128 *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v10;
  __int128 v11;

  std::allocate_shared[abi:ne180100]<turi::neural_net::MapPublisher<turi::style_transfer::EncodedInferenceBatch,turi::style_transfer::DataBatch>::MapSubscriber,std::allocator<turi::neural_net::MapPublisher<turi::style_transfer::EncodedInferenceBatch,turi::style_transfer::DataBatch>::MapSubscriber>,std::shared_ptr<turi::neural_net::Transform<turi::style_transfer::EncodedInferenceBatch,turi::style_transfer::DataBatch>> &,std::shared_ptr<turi::neural_net::Subscriber<turi::style_transfer::DataBatch>>,void>((unint64_t *)(a1 + 40), a2, &v11);
  v3 = *(_QWORD *)(a1 + 24);
  v10 = v11;
  v11 = 0uLL;
  turi::neural_net::Publisher<turi::style_transfer::DataBatch>::Subscribe(v3, &v10);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v10 + 1);
  if (*((_QWORD *)&v10 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v10 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v11 + 1);
  if (*((_QWORD *)&v11 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_21832C2FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

__n128 std::allocate_shared[abi:ne180100]<turi::neural_net::MapPublisher<turi::style_transfer::EncodedInferenceBatch,turi::style_transfer::DataBatch>::MapSubscriber,std::allocator<turi::neural_net::MapPublisher<turi::style_transfer::EncodedInferenceBatch,turi::style_transfer::DataBatch>::MapSubscriber>,std::shared_ptr<turi::neural_net::Transform<turi::style_transfer::EncodedInferenceBatch,turi::style_transfer::DataBatch>> &,std::shared_ptr<turi::neural_net::Subscriber<turi::style_transfer::DataBatch>>,void>@<Q0>(unint64_t *a1@<X1>, __n128 *a2@<X2>, _QWORD *a3@<X8>)
{
  __n128 *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  __n128 result;

  v6 = (__n128 *)operator new(0x48uLL);
  v6->n128_u64[1] = 0;
  v6[1].n128_u64[0] = 0;
  v6->n128_u64[0] = (unint64_t)&unk_24D93B9B8;
  v8 = *a1;
  v7 = a1[1];
  if (v7)
  {
    v9 = (unint64_t *)(v7 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  result = *a2;
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  v6[1].n128_u64[1] = (unint64_t)&unk_24D93BA08;
  v6[2].n128_u64[0] = v8;
  v6[2].n128_u64[1] = v7;
  v6[3] = result;
  v6[4].n128_u64[0] = 0;
  *a3 = (char *)v6 + 24;
  a3[1] = v6;
  return result;
}

void std::__shared_ptr_emplace<turi::neural_net::MapPublisher<turi::style_transfer::EncodedInferenceBatch,turi::style_transfer::DataBatch>::MapSubscriber,std::allocator<turi::neural_net::MapPublisher<turi::style_transfer::EncodedInferenceBatch,turi::style_transfer::DataBatch>::MapSubscriber>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D93B9B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::neural_net::MapPublisher<turi::style_transfer::EncodedInferenceBatch,turi::style_transfer::DataBatch>::MapSubscriber,std::allocator<turi::neural_net::MapPublisher<turi::style_transfer::EncodedInferenceBatch,turi::style_transfer::DataBatch>::MapSubscriber>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D93B9B8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__shared_ptr_emplace<turi::neural_net::MapPublisher<turi::style_transfer::EncodedInferenceBatch,turi::style_transfer::DataBatch>::MapSubscriber,std::allocator<turi::neural_net::MapPublisher<turi::style_transfer::EncodedInferenceBatch,turi::style_transfer::DataBatch>::MapSubscriber>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

std::exception_ptr *turi::neural_net::MapPublisher<turi::style_transfer::EncodedInferenceBatch,turi::style_transfer::DataBatch>::MapSubscriber::~MapSubscriber(std::exception_ptr *a1)
{
  uint64_t v2;

  a1->__ptr_ = &unk_24D93BA08;
  v2 = (uint64_t)&a1[1];
  std::exception_ptr::~exception_ptr(a1 + 5);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a1[3]);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v2);
  return a1;
}

void turi::neural_net::MapPublisher<turi::style_transfer::EncodedInferenceBatch,turi::style_transfer::DataBatch>::MapSubscriber::~MapSubscriber(std::exception_ptr *a1)
{
  uint64_t v2;

  a1->__ptr_ = &unk_24D93BA08;
  v2 = (uint64_t)&a1[1];
  std::exception_ptr::~exception_ptr(a1 + 5);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a1[3]);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v2);
  JUMPOUT(0x219A19A08);
}

uint64_t turi::neural_net::MapPublisher<turi::style_transfer::EncodedInferenceBatch,turi::style_transfer::DataBatch>::MapSubscriber::Receive(_QWORD *a1, int *x1_0)
{
  uint64_t *v2;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  void **v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  int v14;
  __int128 v15;
  uint64_t v16;
  std::exception_ptr v17;
  std::exception_ptr v18;
  void **v19[2];
  int v20;
  _QWORD **v21;
  _QWORD *v22;
  int v24;
  std::exception_ptr v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  std::exception_ptr v30;

  v29 = *MEMORY[0x24BDAC8D0];
  v2 = a1 + 3;
  if (!a1[3])
    return 0;
  v25.__ptr_ = 0;
  v4 = a1[1];
  v20 = *x1_0;
  v5 = x1_0 + 4;
  v6 = (_QWORD *)*((_QWORD *)x1_0 + 2);
  v21 = (_QWORD **)*((_QWORD *)x1_0 + 1);
  v22 = v6;
  if (*((_QWORD *)x1_0 + 3))
  {
    v6[2] = &v22;
    *((_QWORD *)x1_0 + 1) = v5;
    *v5 = 0;
    *((_QWORD *)x1_0 + 3) = 0;
  }
  else
  {
    v21 = &v22;
  }
  v24 = x1_0[8];
  (*(void (**)(uint64_t *__return_ptr, uint64_t, int *))(*(_QWORD *)v4 + 16))(&v26, v4, &v20);
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)&v21, v22);
  if (v25.__ptr_)
  {
    v9 = (void **)a1[3];
    v8 = (std::__shared_weak_count *)a1[4];
    v19[0] = v9;
    v19[1] = (void **)&v8->__vftable;
    *v2 = 0;
    v2[1] = 0;
    std::exception_ptr::exception_ptr(&v17, &v25);
    turi::neural_net::Completion::Failure(&v17, v30, &v18);
    (*((void (**)(void **, std::exception_ptr *))*v9 + 4))(v9, &v18);
    std::exception_ptr::~exception_ptr(&v18);
    std::exception_ptr::~exception_ptr(&v17);
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    v7 = 0;
  }
  else
  {
    v12 = *v2;
    v14 = v26;
    v15 = v27;
    v16 = v28;
    v27 = 0uLL;
    v28 = 0;
    v7 = (*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v12 + 24))(v12, &v14);
    v19[0] = (void **)&v15;
    std::vector<turi::style_transfer::st_example>::__destroy_vector::operator()[abi:ne180100](v19);
    v19[0] = (void **)&v27;
    std::vector<turi::style_transfer::st_example>::__destroy_vector::operator()[abi:ne180100](v19);
  }
  std::exception_ptr::~exception_ptr(&v25);
  return v7;
}

void sub_21832C680(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::exception_ptr a14, std::exception_ptr a15, uint64_t a16)
{
  uint64_t v16;

  std::vector<turi::style_transfer::st_example>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v16 - 80));
  _Unwind_Resume(a1);
}

void sub_21832C6C8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::exception_ptr a16, uint64_t a17, uint64_t a18, uint64_t a19, _QWORD *a20)
{
  uint64_t v20;
  uint64_t v21;

  if (a2)
  {
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy(v20, a20);
    __cxa_begin_catch(a1);
    std::current_exception();
    std::exception_ptr::operator=((std::exception_ptr *)(v21 - 80), &a16);
    std::exception_ptr::~exception_ptr(&a16);
    __cxa_end_catch();
    JUMPOUT(0x21832C55CLL);
  }
  JUMPOUT(0x21832C6C0);
}

void sub_21832C70C()
{
  JUMPOUT(0x21832C6B8);
}

void std::vector<std::pair<long long,turi::image_type>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  unsigned int **v2;
  unsigned int **v4;
  void *v5;
  unsigned int **v6;

  v1 = *a1;
  v2 = (unsigned int **)**a1;
  if (v2)
  {
    v4 = (unsigned int **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 9;
        boost::detail::shared_count::~shared_count(v4 - 7);
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::vector<turi::style_transfer::st_example>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  _QWORD v16[5];

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(result - 8);
  if (0xF0F0F0F0F0F0F0F1 * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = v7 + 136 * a2;
      do
      {
        *(_OWORD *)(v7 + 96) = 0uLL;
        *(_OWORD *)(v7 + 112) = 0uLL;
        *(_OWORD *)(v7 + 32) = 0uLL;
        *(_OWORD *)(v7 + 48) = 0uLL;
        *(_OWORD *)v7 = 0uLL;
        *(_OWORD *)(v7 + 16) = 0uLL;
        *(_OWORD *)(v7 + 64) = 0uLL;
        *(_OWORD *)(v7 + 80) = 0uLL;
        *(_QWORD *)(v7 + 56) = 3;
        *(_BYTE *)(v7 + 112) = 0;
        *(_QWORD *)(v7 + 120) = 3;
        *(_QWORD *)(v7 + 128) = 0;
        v7 += 136;
      }
      while (v7 != v13);
      v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xF0F0F0F0F0F0F0F1 * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0x1E1E1E1E1E1E1E1)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = 0xF0F0F0F0F0F0F0F1 * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0xF0F0F0F0F0F0F0)
      v11 = 0x1E1E1E1E1E1E1E1;
    else
      v11 = v9;
    v16[4] = result;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::toolkit_function_specification>>(result, v11);
    else
      v12 = 0;
    v14 = &v12[136 * v8];
    v16[0] = v12;
    v16[1] = v14;
    v16[3] = &v12[136 * v11];
    v15 = &v14[136 * a2];
    do
    {
      *((_OWORD *)v14 + 6) = 0uLL;
      *((_OWORD *)v14 + 7) = 0uLL;
      *((_OWORD *)v14 + 2) = 0uLL;
      *((_OWORD *)v14 + 3) = 0uLL;
      *(_OWORD *)v14 = 0uLL;
      *((_OWORD *)v14 + 1) = 0uLL;
      *((_OWORD *)v14 + 4) = 0uLL;
      *((_OWORD *)v14 + 5) = 0uLL;
      *((_QWORD *)v14 + 7) = 3;
      v14[112] = 0;
      *((_QWORD *)v14 + 15) = 3;
      *((_QWORD *)v14 + 16) = 0;
      v14 += 136;
    }
    while (v14 != v15);
    v16[2] = v15;
    std::vector<turi::style_transfer::st_example>::__swap_out_circular_buffer(a1, v16);
    return std::__split_buffer<turi::style_transfer::st_example>::~__split_buffer((uint64_t)v16);
  }
  return result;
}

void sub_21832C8EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<turi::style_transfer::st_example>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<turi::style_transfer::st_example>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::style_transfer::st_example>,std::reverse_iterator<turi::style_transfer::st_example*>,std::reverse_iterator<turi::style_transfer::st_example*>,std::reverse_iterator<turi::style_transfer::st_example*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::style_transfer::st_example>,std::reverse_iterator<turi::style_transfer::st_example*>,std::reverse_iterator<turi::style_transfer::st_example*>,std::reverse_iterator<turi::style_transfer::st_example*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  _QWORD v18[3];
  char v19;
  __int128 v20;
  __int128 v21;

  *(_QWORD *)&v21 = a6;
  *((_QWORD *)&v21 + 1) = a7;
  v20 = v21;
  v18[0] = a1;
  v18[1] = &v20;
  v18[2] = &v21;
  if (a3 == a5)
  {
    v16 = a6;
  }
  else
  {
    v7 = 0;
    do
    {
      v8 = a7 + v7;
      v9 = a3 + v7;
      *(_QWORD *)(v8 - 128) = 0;
      v10 = *(_OWORD *)(a3 + v7 - 136);
      *(_QWORD *)(v9 - 128) = 0;
      *(_OWORD *)(v8 - 136) = v10;
      *(_QWORD *)(v9 - 136) = 0;
      v11 = *(_OWORD *)(a3 + v7 - 120);
      v12 = *(_OWORD *)(a3 + v7 - 104);
      *(_OWORD *)(v8 - 88) = *(_OWORD *)(a3 + v7 - 88);
      *(_OWORD *)(v8 - 104) = v12;
      *(_OWORD *)(v8 - 120) = v11;
      *(_QWORD *)(v8 - 64) = 0;
      v13 = *(_OWORD *)(a3 + v7 - 72);
      *(_QWORD *)(v9 - 64) = 0;
      *(_OWORD *)(v8 - 72) = v13;
      *(_QWORD *)(v9 - 72) = 0;
      v14 = *(_OWORD *)(a3 + v7 - 56);
      v15 = *(_OWORD *)(a3 + v7 - 40);
      *(_OWORD *)(v8 - 24) = *(_OWORD *)(a3 + v7 - 24);
      *(_OWORD *)(v8 - 40) = v15;
      *(_OWORD *)(v8 - 56) = v14;
      *(_QWORD *)(v8 - 8) = *(_QWORD *)(a3 + v7 - 8);
      v7 -= 136;
    }
    while (a3 + v7 != a5);
    *((_QWORD *)&v21 + 1) = a7 + v7;
    v16 = v21;
  }
  v19 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::style_transfer::st_example>,std::reverse_iterator<turi::style_transfer::st_example*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v18);
  return v16;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::style_transfer::st_example>,std::reverse_iterator<turi::style_transfer::st_example*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<turi::style_transfer::st_example>,std::reverse_iterator<turi::style_transfer::st_example*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<turi::style_transfer::st_example>,std::reverse_iterator<turi::style_transfer::st_example*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    boost::detail::shared_count::~shared_count((unsigned int **)(v1 + 72));
    boost::detail::shared_count::~shared_count((unsigned int **)(v1 + 8));
    v1 += 136;
  }
}

uint64_t std::__split_buffer<turi::style_transfer::st_example>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<turi::style_transfer::st_example>::__destruct_at_end[abi:ne180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<turi::style_transfer::st_example>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t i;

  for (i = *(_QWORD *)(a1 + 16); i != a2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 136;
    boost::detail::shared_count::~shared_count((unsigned int **)(i - 64));
    boost::detail::shared_count::~shared_count((unsigned int **)(i - 128));
  }
}

void __cxx_global_var_init_7_5()
{
  uint64_t v0;
  const char *v1;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, v1, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_st_model_trainer_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void _GLOBAL__sub_I_od_scenenet_backbone_mm()
{
  void *v0;

  v0 = (void *)MEMORY[0x219A19FE4]();
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  objc_autoreleasePoolPop(v0);
}

_QWORD *_tc_google::protobuf::Arena::thread_cache(_tc_google::protobuf::Arena *this)
{
  unsigned __int8 v1;
  pthread_key_t *v3;

  if ((v1 & 1) == 0
  {
    v3 = (pthread_key_t *)operator new();
    pthread_key_create(v3, (void (__cdecl *)(void *))_tc_google::protobuf::internal::ThreadLocalStorage<_tc_google::protobuf::Arena::ThreadCache>::Delete);
    _tc_google::protobuf::Arena::thread_cache(void)::thread_cache_ = (uint64_t)v3;
  }
  return _tc_google::protobuf::internal::ThreadLocalStorage<_tc_google::protobuf::Arena::ThreadCache>::Get((pthread_key_t *)_tc_google::protobuf::Arena::thread_cache(void)::thread_cache_);
}

void sub_21832CD14(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1000C4000313F17);
  _Unwind_Resume(a1);
}

_QWORD *_tc_google::protobuf::internal::ThreadLocalStorage<_tc_google::protobuf::Arena::ThreadCache>::Get(pthread_key_t *a1)
{
  _QWORD *v2;

  v2 = pthread_getspecific(*a1);
  if (!v2)
  {
    v2 = (_QWORD *)operator new();
    *v2 = 0;
    v2[1] = 0;
    pthread_setspecific(*a1, v2);
  }
  return v2;
}

_QWORD *_tc_google::protobuf::Arena::NewBlock(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6)
{
  std::string *v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *result;
  char v14;
  std::string v15[2];

  if (a3)
  {
    if (2 * *(_QWORD *)(a3 + 24) >= a6)
      a5 = a6;
    else
      a5 = 2 * *(_QWORD *)(a3 + 24);
  }
  if (a4 >= 0xFFFFFFFFFFFFFFE0)
  {
    _tc_google::protobuf::internal::LogMessage::LogMessage((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/external/google/protobuf/arena.cc", 133);
    v10 = _tc_google::protobuf::internal::LogMessage::operator<<(v15, "CHECK failed: (n) <= (std::numeric_limits<size_t>::max() - kHeaderSize): ");
    _tc_google::protobuf::internal::LogFinisher::operator=((uint64_t)&v14, (_tc_google::protobuf::internal::LogMessage *)v10);
    _tc_google::protobuf::internal::LogMessage::~LogMessage((void **)&v15[0].__r_.__value_.__l.__data_);
  }
  v11 = a4 + 32;
  if (a5 <= a4 + 32)
    v12 = a4 + 32;
  else
    v12 = a5;
  result = (_QWORD *)(*(uint64_t (**)(unint64_t))(a1 + 96))(v12);
  result[2] = v11;
  result[3] = v12;
  *result = a2;
  return result;
}

void sub_21832CE60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _tc_google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void _tc_google::protobuf::Arena::AddBlock(uint64_t a1, _QWORD *a2)
{
  pthread_mutex_t **v4;
  uint64_t v5;

  v4 = (pthread_mutex_t **)(a1 + 48);
  _tc_google::protobuf::internal::Mutex::Lock((pthread_mutex_t **)(a1 + 48));
  a2[1] = *(_QWORD *)(a1 + 8);
  atomic_store((unint64_t)a2, (unint64_t *)(a1 + 8));
  v5 = a2[3];
  if (v5 != a2[2])
  {
    atomic_store((unint64_t)a2, (unint64_t *)(a1 + 16));
    v5 = a2[3];
  }
  *(_QWORD *)(a1 + 24) += v5;
  _tc_google::protobuf::internal::Mutex::Unlock(v4);
}

_QWORD *_tc_google::protobuf::Arena::AddListNode(_tc_google::protobuf::Arena *this, void *a2, void (*a3)(void *))
{
  _QWORD *result;
  unint64_t *v7;
  unint64_t v8;

  result = _tc_google::protobuf::Arena::AllocateAligned(this, 0, 24);
  *result = a2;
  result[1] = a3;
  v7 = (unint64_t *)((char *)this + 32);
  do
    v8 = __ldxr(v7);
  while (__stxr((unint64_t)result, v7));
  result[2] = v8;
  return result;
}

_QWORD *_tc_google::protobuf::Arena::AllocateAligned(_tc_google::protobuf::Arena *this, const std::type_info *a2, uint64_t a3)
{
  unint64_t *v3;
  unint64_t v4;
  _tc_google::protobuf::Arena *v5;
  _tc_google::protobuf::Arena *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t (*v11)(const std::type_info *, unint64_t);

  v3 = (unint64_t *)this;
  v4 = (a3 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (*((_QWORD *)this + 7))
  {
    v11 = (uint64_t (*)(const std::type_info *, unint64_t))*((_QWORD *)this + 17);
    if (v11)
      this = (_tc_google::protobuf::Arena *)v11(a2, v4);
  }
  v5 = (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::thread_cache(this);
  if (*(_QWORD *)v5 != *v3
    || (v5 = (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::thread_cache(v5), !*((_QWORD *)v5 + 1)))
  {
    v9 = _tc_google::protobuf::Arena::thread_cache(v5);
    v7 = (_QWORD *)atomic_load(v3 + 2);
    if (v7)
    {
      if ((_QWORD *)*v7 == v9)
      {
        v8 = v7[2];
        if (v7[3] - v8 >= v4)
          goto LABEL_10;
      }
    }
    return _tc_google::protobuf::Arena::SlowAlloc((_tc_google::protobuf::Arena *)v3, v4);
  }
  v6 = (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::thread_cache(v5);
  if (*(_QWORD *)(*((_QWORD *)v6 + 1) + 24) - *(_QWORD *)(*((_QWORD *)v6 + 1) + 16) < v4)
    return _tc_google::protobuf::Arena::SlowAlloc((_tc_google::protobuf::Arena *)v3, v4);
  v7 = (_QWORD *)_tc_google::protobuf::Arena::thread_cache(v6)[1];
  v8 = v7[2];
LABEL_10:
  v7[2] = v8 + v4;
  return (_QWORD *)((char *)v7 + v8);
}

_QWORD *_tc_google::protobuf::Arena::SlowAlloc(_tc_google::protobuf::Arena *this, unint64_t a2)
{
  _tc_google::protobuf::Arena *v4;
  _tc_google::protobuf::Arena **v5;
  _QWORD *v6;
  _tc_google::protobuf::Arena *v7;
  _tc_google::protobuf::Arena *v8;
  uint64_t v9;
  _tc_google::protobuf::Arena *v11;
  uint64_t v12;
  _tc_google::protobuf::Arena *v13;

  v4 = (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::thread_cache(this);
  v5 = (_tc_google::protobuf::Arena **)atomic_load((unint64_t *)this + 1);
  if (!v5)
    goto LABEL_6;
  while (*v5 != v4)
  {
    v5 = (_tc_google::protobuf::Arena **)v5[1];
    if (!v5)
      goto LABEL_6;
  }
  if (v5[3] - v5[2] >= a2)
  {
    v11 = (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::thread_cache(v4);
    *((_QWORD *)v11 + 1) = v5;
    v12 = *(_QWORD *)this;
    *_tc_google::protobuf::Arena::thread_cache(v11) = v12;
    *((_QWORD *)this + 2) = v5;
    v13 = v5[2];
    v5[2] = (_tc_google::protobuf::Arena *)((char *)v13 + a2);
    return (_QWORD *)((char *)v13 + (_QWORD)v5);
  }
  else
  {
LABEL_6:
    v6 = _tc_google::protobuf::Arena::NewBlock((uint64_t)this, (uint64_t)v4, (uint64_t)v5, a2, *((_QWORD *)this + 8), *((_QWORD *)this + 9));
    _tc_google::protobuf::Arena::AddBlock((uint64_t)this, v6);
    v8 = (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::thread_cache(v7);
    *((_QWORD *)v8 + 1) = v6;
    v9 = *(_QWORD *)this;
    *_tc_google::protobuf::Arena::thread_cache(v8) = v9;
    return v6 + 4;
  }
}

uint64_t _tc_google::protobuf::internal::ThreadLocalStorage<_tc_google::protobuf::Arena::ThreadCache>::Delete(uint64_t result)
{
  if (result)
    JUMPOUT(0x219A19A08);
  return result;
}

uint64_t _GLOBAL__sub_I_arena_cc()
{
  uint64_t result;

  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  result = __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  _tc_google::protobuf::Arena::lifecycle_id_generator_ = 0;
  return result;
}

uint64_t _GLOBAL__sub_I_arenastring_cc()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

uint64_t _GLOBAL__sub_I_extension_set_cc()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void _tc_google::protobuf::internal::DeleteEmptyString(_tc_google::protobuf::internal *this)
{
  if (byte_254FFA1B0)
  {
    byte_254FFA1B0 = 0;
    if (byte_254FFA1AF < 0)
      operator delete((void *)_tc_google::protobuf::internal::fixed_address_empty_string);
  }
}

void _tc_google::protobuf::internal::InitEmptyString(_tc_google::protobuf::internal *this, void (*a2)(void))
{
  _tc_google::protobuf::internal::fixed_address_empty_string = 0;
  qword_254FFA1A0 = 0;
  unk_254FFA1A8 = 0;
  byte_254FFA1B0 = 1;
  _tc_google::protobuf::internal::OnShutdown((_tc_google::protobuf::internal *)_tc_google::protobuf::internal::DeleteEmptyString, a2);
}

void _tc_google::protobuf::internal::InitProtobufDefaults(_tc_google::protobuf::internal *this)
{
  unint64_t v1;
  _QWORD v2[2];
  char v3;

  v1 = atomic_load(&_tc_google::protobuf::internal::empty_string_once_init_);
  if (v1 != 2)
  {
    v2[0] = &off_24D93BCB0;
    v2[1] = _tc_google::protobuf::internal::InitEmptyString;
    v3 = 0;
    _tc_google::protobuf::GoogleOnceInitImpl(&_tc_google::protobuf::internal::empty_string_once_init_, (uint64_t)v2);
    _tc_google::protobuf::internal::FunctionClosure0::~FunctionClosure0((_tc_google::protobuf::internal::FunctionClosure0 *)v2);
  }
}

void sub_21832D274(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  _tc_google::protobuf::internal::FunctionClosure0::~FunctionClosure0((_tc_google::protobuf::internal::FunctionClosure0 *)va);
  _Unwind_Resume(a1);
}

uint64_t _GLOBAL__sub_I_generated_message_util_cc()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void _tc_google::protobuf::io::CodedInputStream::~CodedInputStream(_tc_google::protobuf::io::CodedInputStream *this)
{
  if (*((_QWORD *)this + 2))
    _tc_google::protobuf::io::CodedInputStream::BackUpInputToCurrentPosition((uint64_t)this);
}

uint64_t _tc_google::protobuf::io::CodedInputStream::BackUpInputToCurrentPosition(uint64_t this)
{
  uint64_t v1;
  unsigned int v2;

  if (*(_DWORD *)(this + 28) + *(_DWORD *)(this + 44) + *(_DWORD *)(this + 8) - *(_DWORD *)this >= 1)
  {
    v1 = this;
    this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(this + 16) + 24))(*(_QWORD *)(this + 16));
    v2 = *(_DWORD *)(v1 + 24) - *(_DWORD *)(v1 + 44) + *(_QWORD *)v1 - *(_DWORD *)(v1 + 8);
    *(_QWORD *)(v1 + 8) = *(_QWORD *)v1;
    *(_DWORD *)(v1 + 44) = 0;
    *(_QWORD *)(v1 + 24) = v2;
  }
  return this;
}

uint64_t _tc_google::protobuf::io::CodedInputStream::PushLimit(_tc_google::protobuf::io::CodedInputStream *this, int a2)
{
  uint64_t result;
  int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;
  uint64_t v10;
  int v11;
  BOOL v12;
  int v13;

  result = *((unsigned int *)this + 10);
  if ((a2 & 0x80000000) == 0)
  {
    v4 = *((_DWORD *)this + 6);
    v5 = *((_QWORD *)this + 1);
    v6 = *((int *)this + 11);
    v7 = v4 - v6 + *(_DWORD *)this - v5;
    if ((v7 ^ 0x7FFFFFFF) >= a2 && (int)result - v7 > a2)
    {
      v9 = v7 + a2;
      *((_DWORD *)this + 10) = v9;
      v10 = v5 + v6;
      *((_QWORD *)this + 1) = v10;
      v11 = *((_DWORD *)this + 12);
      if (v11 >= v9)
        v11 = v9;
      v12 = __OFSUB__(v4, v11);
      v13 = v4 - v11;
      if ((v13 < 0) ^ v12 | (v13 == 0))
        v13 = 0;
      else
        *((_QWORD *)this + 1) = v10 - v13;
      *((_DWORD *)this + 11) = v13;
    }
  }
  return result;
}

uint64_t _tc_google::protobuf::io::CodedInputStream::PopLimit(uint64_t this, int a2)
{
  int v2;
  uint64_t v3;
  int v4;
  int v5;
  BOOL v6;
  int v7;

  *(_DWORD *)(this + 40) = a2;
  v2 = *(_DWORD *)(this + 48);
  v3 = *(_QWORD *)(this + 8) + *(int *)(this + 44);
  *(_QWORD *)(this + 8) = v3;
  if (v2 >= a2)
    v4 = a2;
  else
    v4 = v2;
  v5 = *(_DWORD *)(this + 24);
  v6 = __OFSUB__(v5, v4);
  v7 = v5 - v4;
  if ((v7 < 0) ^ v6 | (v7 == 0))
    v7 = 0;
  else
    *(_QWORD *)(this + 8) = v3 - v7;
  *(_DWORD *)(this + 44) = v7;
  *(_BYTE *)(this + 36) = 0;
  return this;
}

unint64_t _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(_tc_google::protobuf::io::CodedInputStream *this, int a2)
{
  unsigned int v3;
  uint64_t v4;

  v3 = _tc_google::protobuf::io::CodedInputStream::PushLimit(this, a2);
  v4 = (*((_DWORD *)this + 13) - 1);
  *((_DWORD *)this + 13) = v4;
  return v3 | (unint64_t)(v4 << 32);
}

BOOL _tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(_tc_google::protobuf::io::CodedInputStream *this, int a2)
{
  int v2;
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  BOOL v7;
  int v8;

  v2 = *((unsigned __int8 *)this + 36);
  *((_DWORD *)this + 10) = a2;
  v3 = *((_DWORD *)this + 12);
  v4 = *((_QWORD *)this + 1) + *((int *)this + 11);
  *((_QWORD *)this + 1) = v4;
  if (v3 >= a2)
    v5 = a2;
  else
    v5 = v3;
  v6 = *((_DWORD *)this + 6);
  v7 = __OFSUB__(v6, v5);
  v8 = v6 - v5;
  if ((v8 < 0) ^ v7 | (v8 == 0))
    v8 = 0;
  else
    *((_QWORD *)this + 1) = v4 - v8;
  *((_DWORD *)this + 11) = v8;
  *((_BYTE *)this + 36) = 0;
  ++*((_DWORD *)this + 13);
  return v2 != 0;
}

uint64_t _tc_google::protobuf::io::CodedInputStream::BytesUntilLimit(_tc_google::protobuf::io::CodedInputStream *this)
{
  int v1;

  v1 = *((_DWORD *)this + 10);
  if (v1 == 0x7FFFFFFF)
    return 0xFFFFFFFFLL;
  else
    return (v1 - *((_DWORD *)this + 6) + *((_DWORD *)this + 11) + *((_DWORD *)this + 2) - *(_DWORD *)this);
}

uint64_t _tc_google::protobuf::io::CodedInputStream::BytesUntilTotalBytesLimit(_tc_google::protobuf::io::CodedInputStream *this)
{
  int v1;

  v1 = *((_DWORD *)this + 12);
  if (v1 == 0x7FFFFFFF)
    return 0xFFFFFFFFLL;
  else
    return (v1 - *((_DWORD *)this + 6) + *((_DWORD *)this + 11) + *((_DWORD *)this + 2) - *(_DWORD *)this);
}

void _tc_google::protobuf::io::CodedInputStream::PrintTotalBytesLimitError(_tc_google::protobuf::io::CodedInputStream *this)
{
  std::string *v2;
  std::string *v3;
  std::string *v4;
  char v5;
  std::string v6[2];

  _tc_google::protobuf::internal::LogMessage::LogMessage((uint64_t)v6, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/external/google/protobuf/io/coded_stream.cc", 193);
  v2 = _tc_google::protobuf::internal::LogMessage::operator<<(v6, "A protocol message was rejected because it was too big (more than ");
  v3 = _tc_google::protobuf::internal::LogMessage::operator<<(v2, *((_DWORD *)this + 12));
  v4 = _tc_google::protobuf::internal::LogMessage::operator<<(v3, " bytes).  To increase the limit (or to disable these warnings), see CodedInputStream::SetTotalBytesLimit() in google/protobuf/io/coded_stream.h.");
  _tc_google::protobuf::internal::LogFinisher::operator=((uint64_t)&v5, (_tc_google::protobuf::internal::LogMessage *)v4);
  _tc_google::protobuf::internal::LogMessage::~LogMessage((void **)&v6[0].__r_.__value_.__l.__data_);
}

void sub_21832D5B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _tc_google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t _tc_google::protobuf::io::CodedInputStream::Skip(_tc_google::protobuf::io::CodedInputStream *this, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;

  if ((a2 & 0x80000000) != 0)
    return 0;
  v3 = *(_QWORD *)this;
  v4 = *((_QWORD *)this + 1) - *(_QWORD *)this;
  v5 = __OFSUB__(a2, (_DWORD)v4);
  v6 = a2 - v4;
  if ((v6 < 0) ^ v5 | (v6 == 0))
  {
    *(_QWORD *)this = v3 + a2;
    return 1;
  }
  if (*((int *)this + 11) >= 1)
  {
    v7 = 0;
    *(_QWORD *)this = v3 + (int)v4;
    return v7;
  }
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  v8 = *((_DWORD *)this + 10);
  if (*((_DWORD *)this + 12) < v8)
    v8 = *((_DWORD *)this + 12);
  v9 = *((_DWORD *)this + 6);
  v10 = (v8 - v9);
  if ((int)v10 < v6)
  {
    if ((int)v10 >= 1)
    {
      *((_DWORD *)this + 6) = v8;
      (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)this + 2) + 32))(*((_QWORD *)this + 2), v10);
    }
    return 0;
  }
  *((_DWORD *)this + 6) = v9 + v6;
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 32))(*((_QWORD *)this + 2));
}

uint64_t _tc_google::protobuf::io::CodedInputStream::Refresh(_tc_google::protobuf::io::CodedInputStream *this)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v7;
  int v8;
  uint64_t v9;
  std::string *v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  BOOL v18;
  int v19;
  char v20;
  std::string v21[2];
  int v22;
  uint64_t v23;

  v2 = *((_DWORD *)this + 11);
  if (v2 > 0 || *((int *)this + 7) > 0 || *((_DWORD *)this + 6) == *((_DWORD *)this + 10))
  {
    v3 = *((_DWORD *)this + 6) - v2;
    v4 = *((_DWORD *)this + 12);
    if (v3 >= v4 && v4 != *((_DWORD *)this + 10))
      _tc_google::protobuf::io::CodedInputStream::PrintTotalBytesLimitError(this);
    return 0;
  }
  else
  {
    v23 = 0;
    v22 = 0;
    v7 = *((_QWORD *)this + 2);
    do
    {
      v5 = (*(uint64_t (**)(uint64_t, uint64_t *, int *))(*(_QWORD *)v7 + 16))(v7, &v23, &v22);
      if (!(_DWORD)v5)
      {
        *(_QWORD *)this = 0;
        *((_QWORD *)this + 1) = 0;
        return v5;
      }
      v8 = v22;
    }
    while (!v22);
    v9 = v23 + v22;
    *(_QWORD *)this = v23;
    *((_QWORD *)this + 1) = v9;
    if (v8 < 0)
    {
      _tc_google::protobuf::internal::LogMessage::LogMessage((uint64_t)v21, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/external/google/protobuf/io/coded_stream.cc", 599);
      v10 = _tc_google::protobuf::internal::LogMessage::operator<<(v21, "CHECK failed: (buffer_size) >= (0): ");
      _tc_google::protobuf::internal::LogFinisher::operator=((uint64_t)&v20, (_tc_google::protobuf::internal::LogMessage *)v10);
      _tc_google::protobuf::internal::LogMessage::~LogMessage((void **)&v21[0].__r_.__value_.__l.__data_);
      v8 = v22;
    }
    v11 = *((_DWORD *)this + 6);
    v12 = v11 - (v8 ^ 0x7FFFFFFF);
    if (v11 <= (v8 ^ 0x7FFFFFFF))
    {
      v14 = v8 + v11;
      v13 = *((_QWORD *)this + 1);
    }
    else
    {
      *((_DWORD *)this + 7) = v12;
      v13 = *((_QWORD *)this + 1) - v12;
      *((_QWORD *)this + 1) = v13;
      v14 = 0x7FFFFFFF;
    }
    *((_DWORD *)this + 6) = v14;
    v15 = *((_DWORD *)this + 10);
    v16 = v13 + *((int *)this + 11);
    *((_QWORD *)this + 1) = v16;
    v17 = *((_DWORD *)this + 12);
    if (v17 >= v15)
      v17 = v15;
    v18 = __OFSUB__(v14, v17);
    v19 = v14 - v17;
    if ((v19 < 0) ^ v18 | (v19 == 0))
      v19 = 0;
    else
      *((_QWORD *)this + 1) = v16 - v19;
    *((_DWORD *)this + 11) = v19;
  }
  return v5;
}

void sub_21832D810(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _tc_google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

BOOL _tc_google::protobuf::io::CodedInputStream::ReadRaw(_tc_google::protobuf::io::CodedInputStream *this, char *__dst, int a3)
{
  int v6;
  const void *v7;
  uint64_t v8;
  BOOL v9;

  while (1)
  {
    v6 = a3;
    v7 = *(const void **)this;
    v8 = *((_QWORD *)this + 1) - *(_QWORD *)this;
    v9 = __OFSUB__(a3, (_DWORD)v8);
    a3 -= v8;
    if ((a3 < 0) ^ v9 | (a3 == 0))
      break;
    memcpy(__dst, v7, (int)v8);
    __dst += (int)v8;
    *(_QWORD *)this += (int)v8;
    if ((_tc_google::protobuf::io::CodedInputStream::Refresh(this) & 1) == 0)
      return v6 <= (int)v8;
  }
  memcpy(__dst, v7, v6);
  *(_QWORD *)this += v6;
  return v6 <= (int)v8;
}

BOOL _tc_google::protobuf::io::CodedInputStream::ReadStringFallback(_tc_google::protobuf::io::CodedInputStream *this, std::string *a2, std::string::size_type __requested_capacity)
{
  int v3;
  int v6;
  int v7;
  BOOL v8;
  int v10;
  const std::string::value_type *v11;
  uint64_t v12;
  BOOL v13;

  v3 = __requested_capacity;
  if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
  {
    if (a2->__r_.__value_.__l.__size_)
    {
      *a2->__r_.__value_.__l.__data_ = 0;
      a2->__r_.__value_.__l.__size_ = 0;
    }
  }
  else if (*((_BYTE *)&a2->__r_.__value_.__s + 23))
  {
    a2->__r_.__value_.__s.__data_[0] = 0;
    *((_BYTE *)&a2->__r_.__value_.__s + 23) = 0;
  }
  v6 = *((_DWORD *)this + 12);
  if (v6 >= *((_DWORD *)this + 10))
    v6 = *((_DWORD *)this + 10);
  if (v6 != 0x7FFFFFFF)
  {
    v7 = v6 - *((_DWORD *)this + 6) + *((_DWORD *)this + 11) + *((_DWORD *)this + 2) - *(_DWORD *)this;
    v8 = v7 < (int)__requested_capacity || (int)__requested_capacity < 1;
    if (!v8 && v7 >= 1)
      std::string::reserve(a2, __requested_capacity);
  }
  while (1)
  {
    v10 = v3;
    v11 = *(const std::string::value_type **)this;
    v12 = *((_QWORD *)this + 1) - *(_QWORD *)this;
    v13 = __OFSUB__(v3, (_DWORD)v12);
    v3 -= v12;
    if ((v3 < 0) ^ v13 | (v3 == 0))
      break;
    if ((_DWORD)v12)
    {
      std::string::append(a2, v11, (int)v12);
      v11 = *(const std::string::value_type **)this;
    }
    *(_QWORD *)this = &v11[(int)v12];
    if ((_tc_google::protobuf::io::CodedInputStream::Refresh(this) & 1) == 0)
      return v10 <= (int)v12;
  }
  std::string::append(a2, v11, v10);
  *(_QWORD *)this += v10;
  return v10 <= (int)v12;
}

BOOL _tc_google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(unsigned int **this, unsigned int *a2)
{
  unsigned int *v3;
  _BOOL8 result;
  char __dst[4];

  v3 = *this;
  if (((*((_DWORD *)this + 2) - *this) & 0xFFFFFFFC) != 0)
  {
    *this = v3 + 1;
  }
  else
  {
    v3 = (unsigned int *)__dst;
    result = _tc_google::protobuf::io::CodedInputStream::ReadRaw((_tc_google::protobuf::io::CodedInputStream *)this, __dst, 4);
    if (!result)
      return result;
  }
  *a2 = *v3;
  return 1;
}

BOOL _tc_google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(unint64_t **this, unint64_t *a2)
{
  unint64_t *v3;
  _BOOL8 result;
  char v5[8];
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  v3 = *this;
  if (((*((_DWORD *)this + 2) - *this) & 0xFFFFFFF8) != 0)
  {
    *this = v3 + 1;
  }
  else
  {
    v3 = (unint64_t *)v5;
    result = _tc_google::protobuf::io::CodedInputStream::ReadRaw((_tc_google::protobuf::io::CodedInputStream *)this, v5, 8);
    if (!result)
      return result;
  }
  *a2 = *v3;
  return 1;
}

unint64_t _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback(_tc_google::protobuf::io::CodedInputStream *this)
{
  unint64_t v1;
  char *v2;
  unsigned __int8 *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v9;

  v2 = *(char **)this;
  v1 = *((_QWORD *)this + 1);
  if ((int)(v1 - *(_QWORD *)this) <= 9 && (v1 <= (unint64_t)v2 || *(char *)(v1 - 1) < 0))
  {
    v9 = 0;
    _tc_google::protobuf::io::CodedInputStream::ReadVarint64Slow((char **)this, &v9);
    return v9;
  }
  else
  {
    v3 = (unsigned __int8 *)(v2 + 1);
    v4 = *v2;
    if (*v2 < 0)
    {
      v4 = v4 + (v2[1] << 7) - 128;
      if (v2[1] < 0)
      {
        v4 = v4 + (v2[2] << 14) - 0x4000;
        if (v2[2] < 0)
        {
          v4 = v4 + (v2[3] << 21) - 0x200000;
          if (v2[3] < 0)
          {
            v4 -= 0x10000000;
            v5 = v2[4];
            if (v2[4] < 0)
            {
              v5 = v5 + (v2[5] << 7) - 128;
              if (v2[5] < 0)
              {
                v5 = v5 + (v2[6] << 14) - 0x4000;
                if (v2[6] < 0)
                {
                  v5 = v5 + (v2[7] << 21) - 0x200000;
                  if (v2[7] < 0)
                  {
                    v5 -= 0x10000000;
                    v6 = v2[8];
                    if (v2[8] < 0)
                    {
                      if (v2[9] < 0)
                        return 0;
                      v3 = (unsigned __int8 *)(v2 + 10);
                      v6 = v6 + (v2[9] << 7) - 128;
                    }
                    else
                    {
                      v3 = (unsigned __int8 *)(v2 + 9);
                    }
                  }
                  else
                  {
                    v6 = 0;
                    v3 = (unsigned __int8 *)(v2 + 8);
                  }
                }
                else
                {
                  v6 = 0;
                  v3 = (unsigned __int8 *)(v2 + 7);
                }
              }
              else
              {
                v6 = 0;
                v3 = (unsigned __int8 *)(v2 + 6);
              }
            }
            else
            {
              v6 = 0;
              v3 = (unsigned __int8 *)(v2 + 5);
            }
          }
          else
          {
            v5 = 0;
            v6 = 0;
            v3 = (unsigned __int8 *)(v2 + 4);
          }
        }
        else
        {
          v5 = 0;
          v6 = 0;
          v3 = (unsigned __int8 *)(v2 + 3);
        }
      }
      else
      {
        v5 = 0;
        v6 = 0;
        v3 = (unsigned __int8 *)(v2 + 2);
      }
    }
    else
    {
      v5 = 0;
      v6 = 0;
    }
    v7 = v4 | ((unint64_t)v5 << 28) | (v6 << 56);
    *(_QWORD *)this = v3;
  }
  return v7;
}

uint64_t _tc_google::protobuf::io::CodedInputStream::ReadVarint32Fallback(_tc_google::protobuf::io::CodedInputStream *this, int a2)
{
  unint64_t v2;
  unint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t Varint64Fallback;
  char v7;
  int v8;
  uint64_t v9;

  v3 = *(_QWORD *)this;
  v2 = *((_QWORD *)this + 1);
  if ((int)(v2 - *(_QWORD *)this) <= 9 && (v2 <= v3 || *(char *)(v2 - 1) < 0))
  {
    Varint64Fallback = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this);
    if ((v7 & 1) == 0)
      return -1;
  }
  else
  {
    v4 = a2 + (*(unsigned __int8 *)(v3 + 1) << 7) - 128;
    if (*(char *)(v3 + 1) < 0)
    {
      v4 = v4 + (*(unsigned __int8 *)(v3 + 2) << 14) - 0x4000;
      if (*(char *)(v3 + 2) < 0)
      {
        v4 = v4 + (*(unsigned __int8 *)(v3 + 3) << 21) - 0x200000;
        if (*(char *)(v3 + 3) < 0)
        {
          v8 = *(char *)(v3 + 4);
          v4 = v4 + (v8 << 28) - 0x10000000;
          if (v8 < 0)
          {
            v9 = 0;
            while (*(char *)(v3 + v9 + 5) < 0)
            {
              ++v9;
              Varint64Fallback = -1;
              if ((_DWORD)v9 == 5)
                return Varint64Fallback;
            }
            v5 = v3 + v9 + 6;
          }
          else
          {
            v5 = v3 + 5;
          }
        }
        else
        {
          v5 = v3 + 4;
        }
      }
      else
      {
        v5 = v3 + 3;
      }
    }
    else
    {
      v5 = v3 + 2;
    }
    *(_QWORD *)this = v5;
    return v4;
  }
  return Varint64Fallback;
}

unint64_t _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(_tc_google::protobuf::io::CodedInputStream *this)
{
  unint64_t v1;
  char *v2;
  unsigned __int8 *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  unint64_t Varint64Fallback;
  char v8;
  unint64_t v10;

  v2 = *(char **)this;
  v1 = *((_QWORD *)this + 1);
  if ((int)(v1 - *(_QWORD *)this) > 9 || v1 > (unint64_t)v2 && (*(char *)(v1 - 1) & 0x80000000) == 0)
  {
    v3 = (unsigned __int8 *)(v2 + 1);
    v4 = *v2;
    if (*v2 < 0)
    {
      v4 = v4 + (v2[1] << 7) - 128;
      if (v2[1] < 0)
      {
        v4 = v4 + (v2[2] << 14) - 0x4000;
        if (v2[2] < 0)
        {
          v4 = v4 + (v2[3] << 21) - 0x200000;
          if (v2[3] < 0)
          {
            v4 -= 0x10000000;
            v5 = v2[4];
            if (v2[4] < 0)
            {
              v5 = v5 + (v2[5] << 7) - 128;
              if (v2[5] < 0)
              {
                v5 = v5 + (v2[6] << 14) - 0x4000;
                if (v2[6] < 0)
                {
                  v5 = v5 + (v2[7] << 21) - 0x200000;
                  if (v2[7] < 0)
                  {
                    v5 -= 0x10000000;
                    v6 = v2[8];
                    if (v2[8] < 0)
                    {
                      if (v2[9] < 0)
                        return 0xFFFFFFFFLL;
                      v3 = (unsigned __int8 *)(v2 + 10);
                      v6 = v6 + (v2[9] << 7) - 128;
                    }
                    else
                    {
                      v3 = (unsigned __int8 *)(v2 + 9);
                    }
                  }
                  else
                  {
                    v6 = 0;
                    v3 = (unsigned __int8 *)(v2 + 8);
                  }
                }
                else
                {
                  v6 = 0;
                  v3 = (unsigned __int8 *)(v2 + 7);
                }
              }
              else
              {
                v6 = 0;
                v3 = (unsigned __int8 *)(v2 + 6);
              }
            }
            else
            {
              v6 = 0;
              v3 = (unsigned __int8 *)(v2 + 5);
            }
          }
          else
          {
            v5 = 0;
            v6 = 0;
            v3 = (unsigned __int8 *)(v2 + 4);
          }
        }
        else
        {
          v5 = 0;
          v6 = 0;
          v3 = (unsigned __int8 *)(v2 + 3);
        }
      }
      else
      {
        v5 = 0;
        v6 = 0;
        v3 = (unsigned __int8 *)(v2 + 2);
      }
    }
    else
    {
      v5 = 0;
      v6 = 0;
    }
    v10 = v4 | ((unint64_t)v5 << 28);
    if (!((v10 | (v6 << 56)) >> 31))
    {
      *(_QWORD *)this = v3;
      return v10;
    }
    return 0xFFFFFFFFLL;
  }
  Varint64Fallback = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this);
  if ((Varint64Fallback & 0xFFFFFFFF80000000) != 0 || (v8 & 1) == 0)
    return 0xFFFFFFFFLL;
  else
    return Varint64Fallback;
}

unint64_t _tc_google::protobuf::io::CodedInputStream::ReadTagSlow(_tc_google::protobuf::io::CodedInputStream *this)
{
  char *v2;
  unint64_t v3;
  unint64_t result;
  char v5;
  int v6;
  BOOL v7;

  v2 = *(char **)this;
  v3 = *((_QWORD *)this + 1);
  if (*(_QWORD *)this != v3)
  {
LABEL_4:
    if ((unint64_t)v2 >= v3 || *v2 < 0)
    {
      result = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this);
      if ((v5 & 1) == 0)
        return 0;
    }
    else
    {
      result = *v2;
      *(_QWORD *)this = v2 + 1;
    }
    return result;
  }
  if (_tc_google::protobuf::io::CodedInputStream::Refresh(this))
  {
    v2 = *(char **)this;
    v3 = *((_QWORD *)this + 1);
    goto LABEL_4;
  }
  v6 = *((_DWORD *)this + 12);
  result = 0;
  v7 = *((_DWORD *)this + 6) - *((_DWORD *)this + 11) < v6 || *((_DWORD *)this + 10) == v6;
  *((_BYTE *)this + 36) = v7;
  return result;
}

unint64_t _tc_google::protobuf::io::CodedInputStream::ReadTagFallback(_tc_google::protobuf::io::CodedInputStream *this, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  int v8;
  int v9;
  int v10;
  uint64_t v11;

  v3 = *(_QWORD *)this;
  v2 = *((_QWORD *)this + 1);
  v4 = v2 - *(_QWORD *)this;
  if (v4 > 9)
  {
LABEL_4:
    if ((_DWORD)a2)
    {
      v5 = a2 + (*(unsigned __int8 *)(v3 + 1) << 7) - 128;
      if (*(char *)(v3 + 1) < 0)
      {
        v5 = v5 + (*(unsigned __int8 *)(v3 + 2) << 14) - 0x4000;
        if (*(char *)(v3 + 2) < 0)
        {
          v5 = v5 + (*(unsigned __int8 *)(v3 + 3) << 21) - 0x200000;
          if (*(char *)(v3 + 3) < 0)
          {
            v10 = *(char *)(v3 + 4);
            v5 = (v5 + (v10 << 28) - 0x10000000);
            if (v10 < 0)
            {
              v11 = 0;
              while (*(char *)(v3 + v11 + 5) < 0)
              {
                a2 = 0;
                if ((_DWORD)++v11 == 5)
                  return a2;
              }
              v6 = v3 + v11 + 6;
            }
            else
            {
              v6 = v3 + 5;
            }
          }
          else
          {
            v6 = v3 + 4;
          }
        }
        else
        {
          v6 = v3 + 3;
        }
      }
      else
      {
        v6 = v3 + 2;
      }
      *(_QWORD *)this = v6;
      return v5;
    }
    else
    {
      *(_QWORD *)this = v3 + 1;
    }
    return a2;
  }
  if (v4 >= 1)
  {
    if ((*(char *)(v2 - 1) & 0x80000000) == 0)
      goto LABEL_4;
    return _tc_google::protobuf::io::CodedInputStream::ReadTagSlow(this);
  }
  if (v4)
    return _tc_google::protobuf::io::CodedInputStream::ReadTagSlow(this);
  v8 = *((_DWORD *)this + 11);
  v9 = *((_DWORD *)this + 6);
  if (v8 <= 0 && v9 != *((_DWORD *)this + 10))
    return _tc_google::protobuf::io::CodedInputStream::ReadTagSlow(this);
  if (v9 - v8 >= *((_DWORD *)this + 12))
    return _tc_google::protobuf::io::CodedInputStream::ReadTagSlow(this);
  a2 = 0;
  *((_BYTE *)this + 36) = 1;
  return a2;
}

BOOL _tc_google::protobuf::io::CodedInputStream::ReadVarint64Slow(char **this, unint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  _BOOL8 v6;
  char *v7;
  char v8;

  v4 = 0;
  v5 = 0;
  while (1)
  {
    v6 = v4 != 10;
    if (v4 == 10)
      break;
    while (1)
    {
      v7 = *this;
      if (*this != this[1])
        break;
      if ((_tc_google::protobuf::io::CodedInputStream::Refresh((_tc_google::protobuf::io::CodedInputStream *)this) & 1) == 0)
      {
        v5 = 0;
        v6 = 0;
        goto LABEL_7;
      }
    }
    v8 = *v7;
    v5 |= (unint64_t)(*v7 & 0x7F) << (7 * v4);
    *this = v7 + 1;
    ++v4;
    if ((v8 & 0x80) == 0)
      goto LABEL_7;
  }
  v5 = 0;
LABEL_7:
  *a2 = v5;
  return v6;
}

uint64_t _tc_google::protobuf::io::CodedOutputStream::Refresh(_tc_google::protobuf::io::CodedOutputStream *this)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  v4 = 0;
  result = (*(uint64_t (**)(_QWORD, uint64_t *, char *))(**(_QWORD **)this + 16))(*(_QWORD *)this, &v4, (char *)this + 16);
  if ((_DWORD)result)
  {
    v3 = v4;
    *((_DWORD *)this + 5) += *((_DWORD *)this + 4);
  }
  else
  {
    v3 = 0;
    *((_DWORD *)this + 4) = 0;
    *((_BYTE *)this + 24) = 1;
  }
  *((_QWORD *)this + 1) = v3;
  return result;
}

uint64_t _tc_google::protobuf::io::CodedOutputStream::CodedOutputStream(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a2;
  *(_DWORD *)(a1 + 23) = 0;
  _tc_google::protobuf::io::CodedOutputStream::Refresh((_tc_google::protobuf::io::CodedOutputStream *)a1);
  *(_BYTE *)(a1 + 24) = 0;
  return a1;
}

void _tc_google::protobuf::io::CodedOutputStream::~CodedOutputStream(_tc_google::protobuf::io::CodedOutputStream *this)
{
  int v2;

  if (*((int *)this + 4) >= 1)
  {
    (*(void (**)(void))(**(_QWORD **)this + 24))();
    v2 = *((_DWORD *)this + 5) - *((_DWORD *)this + 4);
    *((_DWORD *)this + 4) = 0;
    *((_DWORD *)this + 5) = v2;
    *((_QWORD *)this + 1) = 0;
  }
}

uint64_t _tc_google::protobuf::io::CodedOutputStream::WriteRaw(_tc_google::protobuf::io::CodedOutputStream *this, char *__src, int a3)
{
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t result;

  while (1)
  {
    v6 = *((int *)this + 4);
    v7 = (void *)*((_QWORD *)this + 1);
    if ((int)v6 >= a3)
      break;
    memcpy(v7, __src, v6);
    v8 = *((int *)this + 4);
    a3 -= v8;
    __src += v8;
    result = _tc_google::protobuf::io::CodedOutputStream::Refresh(this);
    if ((result & 1) == 0)
      return result;
  }
  result = (uint64_t)memcpy(v7, __src, a3);
  *((_QWORD *)this + 1) += a3;
  *((_DWORD *)this + 4) -= a3;
  return result;
}

uint64_t _tc_google::protobuf::io::CodedOutputStream::WriteAliasedRaw(_tc_google::protobuf::io::CodedOutputStream *this, char *__src, uint64_t a3)
{
  int v6;
  uint64_t result;
  int v8;

  v6 = *((_DWORD *)this + 4);
  if (v6 > (int)a3)
    return _tc_google::protobuf::io::CodedOutputStream::WriteRaw(this, __src, a3);
  if (v6 <= 0)
  {
    v8 = *((_DWORD *)this + 5);
  }
  else
  {
    (*(void (**)(void))(**(_QWORD **)this + 24))();
    v8 = *((_DWORD *)this + 5) - *((_DWORD *)this + 4);
    *((_DWORD *)this + 4) = 0;
    *((_QWORD *)this + 1) = 0;
  }
  *((_DWORD *)this + 5) = v8 + a3;
  result = (*(uint64_t (**)(_QWORD, char *, uint64_t))(**(_QWORD **)this + 40))(*(_QWORD *)this, __src, a3);
  *((_BYTE *)this + 24) |= result ^ 1;
  return result;
}

uint64_t _tc_google::protobuf::io::CodedOutputStream::WriteLittleEndian32(uint64_t this, int a2)
{
  int __src;

  if (*(_DWORD *)(this + 16) < 4u)
  {
    __src = a2;
    return _tc_google::protobuf::io::CodedOutputStream::WriteRaw((_tc_google::protobuf::io::CodedOutputStream *)this, (char *)&__src, 4);
  }
  else
  {
    **(_DWORD **)(this + 8) = a2;
    *(_QWORD *)(this + 8) += 4;
    *(_DWORD *)(this + 16) -= 4;
  }
  return this;
}

uint64_t _tc_google::protobuf::io::CodedOutputStream::WriteLittleEndian64(uint64_t this, uint64_t a2)
{
  _QWORD v2[2];

  v2[1] = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(this + 16) < 8u)
  {
    v2[0] = a2;
    return _tc_google::protobuf::io::CodedOutputStream::WriteRaw((_tc_google::protobuf::io::CodedOutputStream *)this, (char *)v2, 8);
  }
  else
  {
    **(_QWORD **)(this + 8) = a2;
    *(_QWORD *)(this + 8) += 8;
    *(_DWORD *)(this + 16) -= 8;
  }
  return this;
}

uint64_t _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(_tc_google::protobuf::io::CodedOutputStream *this, unsigned int a2)
{
  char *v2;
  unsigned int v3;
  unsigned int v4;
  char __src[5];
  uint64_t vars0;

  v2 = __src;
  if (a2 >= 0x80)
  {
    v3 = a2;
    do
    {
      *v2++ = v3 | 0x80;
      a2 = v3 >> 7;
      v4 = v3 >> 14;
      v3 >>= 7;
    }
    while (v4);
  }
  *v2 = a2;
  return _tc_google::protobuf::io::CodedOutputStream::WriteRaw(this, __src, v2 - (&vars0 - 5) + 1);
}

uint64_t _tc_google::protobuf::io::CodedOutputStream::WriteVarint64SlowPath(_tc_google::protobuf::io::CodedOutputStream *this, unint64_t a2)
{
  char *v2;
  unint64_t v3;
  unint64_t v4;
  char __src[10];
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v2 = __src;
  if (a2 >= 0x80)
  {
    v3 = a2;
    do
    {
      *v2++ = v3 | 0x80;
      a2 = v3 >> 7;
      v4 = v3 >> 14;
      v3 >>= 7;
    }
    while (v4);
  }
  *v2 = a2;
  return _tc_google::protobuf::io::CodedOutputStream::WriteRaw(this, __src, v2 - __src + 1);
}

char *_tc_google::protobuf::io::CodedOutputStream::WriteStringWithSizeToArray(const void **a1, _BYTE *a2)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  char *v6;
  int v7;
  const void *v8;
  const void *v9;

  if (*((char *)a1 + 23) >= 0)
    v3 = *((unsigned __int8 *)a1 + 23);
  else
    v3 = *((_DWORD *)a1 + 2);
  if (v3 < 0x80)
  {
    LOBYTE(v4) = v3;
  }
  else
  {
    do
    {
      *a2++ = v3 | 0x80;
      v4 = v3 >> 7;
      v5 = v3 >> 14;
      v3 >>= 7;
    }
    while (v5);
  }
  *a2 = v4;
  v6 = a2 + 1;
  v7 = *((char *)a1 + 23);
  if (v7 >= 0)
    v8 = a1;
  else
    v8 = *a1;
  if (v7 >= 0)
    LODWORD(v9) = *((unsigned __int8 *)a1 + 23);
  else
    v9 = a1[1];
  memcpy(v6, v8, (int)v9);
  return &v6[(int)v9];
}

uint64_t _GLOBAL__sub_I_coded_stream_cc()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void sub_21832E7B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_4_14()
{
  uint64_t v0;
  const char *v1;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, v1, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_supervised_learning_tests_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

uint64_t _tc_google::protobuf::io::ZeroCopyOutputStream::WriteAliasedRaw(_tc_google::protobuf::io::ZeroCopyOutputStream *this, const void *a2)
{
  std::string *v2;
  char v4;
  std::string v5[2];

  _tc_google::protobuf::internal::LogMessage::LogMessage((uint64_t)v5, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/external/google/protobuf/io/zero_copy_stream.cc", 50);
  v2 = _tc_google::protobuf::internal::LogMessage::operator<<(v5, "This ZeroCopyOutputStream doesn't support aliasing. Reaching here usually means a ZeroCopyOutputStream implementation bug.");
  _tc_google::protobuf::internal::LogFinisher::operator=((uint64_t)&v4, (_tc_google::protobuf::internal::LogMessage *)v2);
  _tc_google::protobuf::internal::LogMessage::~LogMessage((void **)&v5[0].__r_.__value_.__l.__data_);
  return 0;
}

void sub_21832E988(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _tc_google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t _GLOBAL__sub_I_zero_copy_stream_cc()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

_QWORD *_tc_google::protobuf::io::OstreamOutputStream::OstreamOutputStream(_QWORD *a1, uint64_t a2, int a3)
{
  *a1 = &off_24D93BA68;
  a1[1] = &off_24D93BAB0;
  a1[2] = a2;
  _tc_google::protobuf::io::CopyingOutputStreamAdaptor::CopyingOutputStreamAdaptor((uint64_t)(a1 + 3), (uint64_t)(a1 + 1), a3);
  return a1;
}

void sub_21832EA30(_Unwind_Exception *a1)
{
  turi::neural_net::float_scalar *v1;
  turi::neural_net::float_scalar *v2;

  turi::neural_net::float_scalar::~float_scalar(v2);
  turi::neural_net::float_scalar::~float_scalar(v1);
  _Unwind_Resume(a1);
}

void _tc_google::protobuf::io::OstreamOutputStream::~OstreamOutputStream(_tc_google::protobuf::io::OstreamOutputStream *this)
{
  _tc_google::protobuf::io::CopyingOutputStreamAdaptor *v2;

  *(_QWORD *)this = &off_24D93BA68;
  v2 = (_tc_google::protobuf::io::OstreamOutputStream *)((char *)this + 24);
  _tc_google::protobuf::io::CopyingOutputStreamAdaptor::Flush((_tc_google::protobuf::io::OstreamOutputStream *)((char *)this + 24));
  _tc_google::protobuf::io::CopyingOutputStreamAdaptor::~CopyingOutputStreamAdaptor(v2);
  turi::neural_net::float_scalar::~float_scalar((_tc_google::protobuf::io::OstreamOutputStream *)((char *)this + 8));
  turi::neural_net::float_scalar::~float_scalar(this);
}

{
  _tc_google::protobuf::io::OstreamOutputStream::~OstreamOutputStream(this);
  JUMPOUT(0x219A19A08);
}

uint64_t _tc_google::protobuf::io::OstreamOutputStream::Next(_tc_google::protobuf::io::OstreamOutputStream *this, void **a2, int *a3)
{
  return _tc_google::protobuf::io::CopyingOutputStreamAdaptor::Next((_tc_google::protobuf::io::OstreamOutputStream *)((char *)this + 24), a2, a3);
}

void _tc_google::protobuf::io::OstreamOutputStream::BackUp(_tc_google::protobuf::io::OstreamOutputStream *this, int a2)
{
  _tc_google::protobuf::io::CopyingOutputStreamAdaptor::BackUp((_tc_google::protobuf::io::OstreamOutputStream *)((char *)this + 24), a2);
}

uint64_t _tc_google::protobuf::io::OstreamOutputStream::ByteCount(_tc_google::protobuf::io::OstreamOutputStream *this)
{
  return _tc_google::protobuf::io::CopyingOutputStreamAdaptor::ByteCount((_tc_google::protobuf::io::OstreamOutputStream *)((char *)this + 24));
}

void _tc_google::protobuf::io::OstreamOutputStream::CopyingOstreamOutputStream::~CopyingOstreamOutputStream(_tc_google::protobuf::io::OstreamOutputStream::CopyingOstreamOutputStream *this)
{
  turi::neural_net::float_scalar::~float_scalar(this);
  JUMPOUT(0x219A19A08);
}

BOOL _tc_google::protobuf::io::OstreamOutputStream::CopyingOstreamOutputStream::Write(_tc_google::protobuf::io::OstreamOutputStream::CopyingOstreamOutputStream *this, const void *a2)
{
  std::ostream::write();
  return *(_DWORD *)(*((_QWORD *)this + 1) + *(_QWORD *)(**((_QWORD **)this + 1) - 24) + 32) == 0;
}

uint64_t _GLOBAL__sub_I_zero_copy_stream_impl_cc()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

uint64_t _tc_google::protobuf::io::ArrayOutputStream::ArrayOutputStream(uint64_t this, void *a2, int a3, int a4)
{
  int v4;

  *(_QWORD *)this = &off_24D93BB08;
  *(_QWORD *)(this + 8) = a2;
  if (a4 <= 0)
    v4 = a3;
  else
    v4 = a4;
  *(_DWORD *)(this + 16) = a3;
  *(_DWORD *)(this + 20) = v4;
  *(_QWORD *)(this + 24) = 0;
  return this;
}

void _tc_google::protobuf::io::ArrayOutputStream::~ArrayOutputStream(_tc_google::protobuf::io::ArrayOutputStream *this)
{
  turi::neural_net::float_scalar::~float_scalar(this);
  JUMPOUT(0x219A19A08);
}

BOOL _tc_google::protobuf::io::ArrayOutputStream::Next(_tc_google::protobuf::io::ArrayOutputStream *this, void **a2, int *a3)
{
  uint64_t v3;
  int v4;
  int v5;

  v3 = *((int *)this + 6);
  v4 = *((_DWORD *)this + 4);
  if ((int)v3 >= v4)
  {
    *((_DWORD *)this + 7) = 0;
  }
  else
  {
    v5 = v4 - v3;
    if (v4 - (int)v3 >= *((_DWORD *)this + 5))
      v5 = *((_DWORD *)this + 5);
    *((_DWORD *)this + 7) = v5;
    *a2 = (void *)(*((_QWORD *)this + 1) + v3);
    *a3 = v5;
    *((_DWORD *)this + 6) += *((_DWORD *)this + 7);
  }
  return (int)v3 < v4;
}

void _tc_google::protobuf::io::ArrayOutputStream::BackUp(_tc_google::protobuf::io::ArrayOutputStream *this, int a2)
{
  int v4;
  std::string *v5;
  std::string *v6;
  std::string *v7;
  std::string *v8;
  char v9;
  std::string v10[2];

  v4 = *((_DWORD *)this + 7);
  if (v4 <= 0)
  {
    _tc_google::protobuf::internal::LogMessage::LogMessage((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/external/google/protobuf/io/zero_copy_stream_impl_lite.cc", 138);
    v5 = _tc_google::protobuf::internal::LogMessage::operator<<(v10, "CHECK failed: (last_returned_size_) > (0): ");
    v6 = _tc_google::protobuf::internal::LogMessage::operator<<(v5, "BackUp() can only be called after a successful Next().");
    _tc_google::protobuf::internal::LogFinisher::operator=((uint64_t)&v9, (_tc_google::protobuf::internal::LogMessage *)v6);
    _tc_google::protobuf::internal::LogMessage::~LogMessage((void **)&v10[0].__r_.__value_.__l.__data_);
    v4 = *((_DWORD *)this + 7);
  }
  if (v4 < a2)
  {
    _tc_google::protobuf::internal::LogMessage::LogMessage((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/external/google/protobuf/io/zero_copy_stream_impl_lite.cc", 140);
    v7 = _tc_google::protobuf::internal::LogMessage::operator<<(v10, "CHECK failed: (count) <= (last_returned_size_): ");
    _tc_google::protobuf::internal::LogFinisher::operator=((uint64_t)&v9, (_tc_google::protobuf::internal::LogMessage *)v7);
    _tc_google::protobuf::internal::LogMessage::~LogMessage((void **)&v10[0].__r_.__value_.__l.__data_);
  }
  if (a2 < 0)
  {
    _tc_google::protobuf::internal::LogMessage::LogMessage((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/external/google/protobuf/io/zero_copy_stream_impl_lite.cc", 141);
    v8 = _tc_google::protobuf::internal::LogMessage::operator<<(v10, "CHECK failed: (count) >= (0): ");
    _tc_google::protobuf::internal::LogFinisher::operator=((uint64_t)&v9, (_tc_google::protobuf::internal::LogMessage *)v8);
    _tc_google::protobuf::internal::LogMessage::~LogMessage((void **)&v10[0].__r_.__value_.__l.__data_);
  }
  *((_QWORD *)this + 3) = (*((_DWORD *)this + 6) - a2);
}

void sub_21832ED30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _tc_google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t _tc_google::protobuf::io::ArrayOutputStream::ByteCount(_tc_google::protobuf::io::ArrayOutputStream *this)
{
  return *((int *)this + 6);
}

uint64_t _tc_google::protobuf::io::CopyingOutputStreamAdaptor::CopyingOutputStreamAdaptor(uint64_t result, uint64_t a2, int a3)
{
  int v3;

  *(_QWORD *)result = &off_24D93BB50;
  *(_QWORD *)(result + 8) = a2;
  *(_WORD *)(result + 16) = 0;
  if (a3 <= 0)
    v3 = 0x2000;
  else
    v3 = a3;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_DWORD *)(result + 40) = v3;
  *(_DWORD *)(result + 44) = 0;
  return result;
}

void _tc_google::protobuf::io::CopyingOutputStreamAdaptor::~CopyingOutputStreamAdaptor(_tc_google::protobuf::io::CopyingOutputStreamAdaptor *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_24D93BB50;
  _tc_google::protobuf::io::CopyingOutputStreamAdaptor::WriteBuffer(this);
  if (*((_BYTE *)this + 16))
  {
    v2 = *((_QWORD *)this + 1);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  v3 = *((_QWORD *)this + 4);
  if (v3)
    MEMORY[0x219A199F0](v3, 0x1000C8077774924);
  turi::neural_net::float_scalar::~float_scalar(this);
}

{
  _tc_google::protobuf::io::CopyingOutputStreamAdaptor::~CopyingOutputStreamAdaptor(this);
  JUMPOUT(0x219A19A08);
}

uint64_t _tc_google::protobuf::io::CopyingOutputStreamAdaptor::WriteBuffer(_tc_google::protobuf::io::CopyingOutputStreamAdaptor *this)
{
  uint64_t result;

  if (*((_BYTE *)this + 17))
    return 0;
  if (!*((_DWORD *)this + 11))
    return 1;
  if ((*(unsigned int (**)(_QWORD, _QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), *((_QWORD *)this + 4)))
  {
    *((_QWORD *)this + 3) += *((int *)this + 11);
    *((_DWORD *)this + 11) = 0;
    return 1;
  }
  *((_BYTE *)this + 17) = 1;
  *((_DWORD *)this + 11) = 0;
  result = *((_QWORD *)this + 4);
  if (result)
  {
    MEMORY[0x219A199F0](result, 0x1000C8077774924);
    result = 0;
    *((_QWORD *)this + 4) = 0;
  }
  return result;
}

uint64_t _tc_google::protobuf::io::CopyingOutputStreamAdaptor::Next(_tc_google::protobuf::io::CopyingOutputStreamAdaptor *this, void **a2, int *a3)
{
  uint64_t result;
  int v7;
  uint64_t v8;

  if (*((_DWORD *)this + 11) != *((_DWORD *)this + 10)
    || (result = _tc_google::protobuf::io::CopyingOutputStreamAdaptor::WriteBuffer(this), (_DWORD)result))
  {
    _tc_google::protobuf::io::CopyingOutputStreamAdaptor::AllocateBufferIfNeeded((uint64_t)this);
    v7 = *((_DWORD *)this + 10);
    v8 = *((int *)this + 11);
    *a2 = (void *)(*((_QWORD *)this + 4) + v8);
    *a3 = v7 - v8;
    *((_DWORD *)this + 11) = *((_DWORD *)this + 10);
    return 1;
  }
  return result;
}

uint64_t _tc_google::protobuf::io::CopyingOutputStreamAdaptor::AllocateBufferIfNeeded(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;

  if (!*(_QWORD *)(this + 32))
  {
    v1 = this;
    v2 = operator new[]();
    this = *(_QWORD *)(v1 + 32);
    if (this != v2)
    {
      if (this)
        this = MEMORY[0x219A199F0](this, 0x1000C8077774924);
      *(_QWORD *)(v1 + 32) = v2;
    }
  }
  return this;
}

void _tc_google::protobuf::io::CopyingOutputStreamAdaptor::BackUp(_tc_google::protobuf::io::CopyingOutputStreamAdaptor *this, int a2)
{
  std::string *v4;
  int v5;
  std::string *v6;
  std::string *v7;
  std::string *v8;
  std::string *v9;
  char v10;
  std::string v11[2];

  if (a2 < 0)
  {
    _tc_google::protobuf::internal::LogMessage::LogMessage((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/external/google/protobuf/io/zero_copy_stream_impl_lite.cc", 390);
    v4 = _tc_google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: (count) >= (0): ");
    _tc_google::protobuf::internal::LogFinisher::operator=((uint64_t)&v10, (_tc_google::protobuf::internal::LogMessage *)v4);
    _tc_google::protobuf::internal::LogMessage::~LogMessage((void **)&v11[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_DWORD *)this + 11);
  if (v5 != *((_DWORD *)this + 10))
  {
    _tc_google::protobuf::internal::LogMessage::LogMessage((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/external/google/protobuf/io/zero_copy_stream_impl_lite.cc", 391);
    v6 = _tc_google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: (buffer_used_) == (buffer_size_): ");
    v7 = _tc_google::protobuf::internal::LogMessage::operator<<(v6, " BackUp() can only be called after Next().");
    _tc_google::protobuf::internal::LogFinisher::operator=((uint64_t)&v10, (_tc_google::protobuf::internal::LogMessage *)v7);
    _tc_google::protobuf::internal::LogMessage::~LogMessage((void **)&v11[0].__r_.__value_.__l.__data_);
    v5 = *((_DWORD *)this + 11);
  }
  if (v5 < a2)
  {
    _tc_google::protobuf::internal::LogMessage::LogMessage((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/external/google/protobuf/io/zero_copy_stream_impl_lite.cc", 393);
    v8 = _tc_google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: (count) <= (buffer_used_): ");
    v9 = _tc_google::protobuf::internal::LogMessage::operator<<(v8, " Can't back up over more bytes than were returned by the last call to Next().");
    _tc_google::protobuf::internal::LogFinisher::operator=((uint64_t)&v10, (_tc_google::protobuf::internal::LogMessage *)v9);
    _tc_google::protobuf::internal::LogMessage::~LogMessage((void **)&v11[0].__r_.__value_.__l.__data_);
    v5 = *((_DWORD *)this + 11);
  }
  *((_DWORD *)this + 11) = v5 - a2;
}

void sub_21832F0BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _tc_google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t _tc_google::protobuf::io::CopyingOutputStreamAdaptor::ByteCount(_tc_google::protobuf::io::CopyingOutputStreamAdaptor *this)
{
  return *((_QWORD *)this + 3) + *((int *)this + 11);
}

uint64_t _GLOBAL__sub_I_zero_copy_stream_impl_lite_cc()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

_QWORD *_tc_google::protobuf::MessageLite::InitializationErrorString@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "(cannot determine missing fields for lite message)");
}

BOOL _tc_google::protobuf::MessageLite::ParseFromArray(_tc_google::protobuf::MessageLite *this, char *a2, int a3)
{
  _BOOL8 v4;
  std::string *v5;
  _QWORD v7[3];
  int v8;
  uint64_t v9;
  __int16 v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  std::string __p;
  std::string v20[2];

  v7[0] = a2;
  v7[1] = &a2[a3];
  v7[2] = 0;
  v8 = a3;
  v9 = 0;
  v10 = 0;
  v11 = a3;
  v12 = 0x7FFFFFFF00000000;
  v13 = _tc_google::protobuf::io::CodedInputStream::default_recursion_limit_;
  v14 = _tc_google::protobuf::io::CodedInputStream::default_recursion_limit_;
  v15 = 1;
  v16 = 0;
  v17 = 0;
  (*(void (**)(_tc_google::protobuf::MessageLite *))(*(_QWORD *)this + 56))(this);
  if (!(*(unsigned int (**)(_tc_google::protobuf::MessageLite *, _QWORD *))(*(_QWORD *)this + 88))(this, v7))
  {
LABEL_7:
    v4 = 0;
    goto LABEL_8;
  }
  if (((*(uint64_t (**)(_tc_google::protobuf::MessageLite *))(*(_QWORD *)this + 64))(this) & 1) == 0)
  {
    _tc_google::protobuf::internal::LogMessage::LogMessage((uint64_t)v20, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/external/google/protobuf/message_lite.cc", 121);
    v5 = _tc_google::protobuf::internal::LogMessage::operator<<(v20, (const std::string::value_type *)&__p);
    _tc_google::protobuf::internal::LogFinisher::operator=((uint64_t)&v18, (_tc_google::protobuf::internal::LogMessage *)v5);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    _tc_google::protobuf::internal::LogMessage::~LogMessage((void **)&v20[0].__r_.__value_.__l.__data_);
    goto LABEL_7;
  }
  v4 = (_BYTE)v10 != 0;
LABEL_8:
  _tc_google::protobuf::io::CodedInputStream::~CodedInputStream((_tc_google::protobuf::io::CodedInputStream *)v7);
  return v4;
}

void sub_21832F254(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  uint64_t v25;

  if (a25 < 0)
    operator delete(__p);
  _tc_google::protobuf::internal::LogMessage::~LogMessage((void **)(v25 - 64));
  _tc_google::protobuf::io::CodedInputStream::~CodedInputStream((_tc_google::protobuf::io::CodedInputStream *)&a9);
  _Unwind_Resume(a1);
}

uint64_t _tc_google::protobuf::MessageLite::SerializeWithCachedSizesToArray(_tc_google::protobuf::MessageLite *this, unsigned __int8 *a2)
{
  unint64_t v2;

  v2 = atomic_load((unint64_t *)&_tc_google::protobuf::io::CodedOutputStream::default_serialization_deterministic_);
  return (*(uint64_t (**)(_tc_google::protobuf::MessageLite *, BOOL, unsigned __int8 *))(*(_QWORD *)this
                                                                                                 + 128))(this, v2 != 0, a2);
}

unsigned __int8 *_tc_google::protobuf::MessageLite::InternalSerializeWithCachedSizesToArray(_tc_google::protobuf::MessageLite *this, char a2, unsigned __int8 *a3)
{
  int v6;
  std::string *v7;
  char v9;
  std::string v10[2];
  _BYTE v11[32];
  _BYTE v12[32];

  v6 = (*(uint64_t (**)(_tc_google::protobuf::MessageLite *))(*(_QWORD *)this + 120))(this);
  _tc_google::protobuf::io::ArrayOutputStream::ArrayOutputStream((uint64_t)v12, a3, v6, -1);
  _tc_google::protobuf::io::CodedOutputStream::CodedOutputStream((uint64_t)v11, (uint64_t)v12);
  v11[26] = 1;
  v11[27] = a2;
  (*(void (**)(_tc_google::protobuf::MessageLite *, _BYTE *))(*(_QWORD *)this + 104))(this, v11);
  if (v11[24])
  {
    _tc_google::protobuf::internal::LogMessage::LogMessage((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/external/google/protobuf/message_lite.cc", 239);
    v7 = _tc_google::protobuf::internal::LogMessage::operator<<(v10, "CHECK failed: !coded_out.HadError(): ");
    _tc_google::protobuf::internal::LogFinisher::operator=((uint64_t)&v9, (_tc_google::protobuf::internal::LogMessage *)v7);
    _tc_google::protobuf::internal::LogMessage::~LogMessage((void **)&v10[0].__r_.__value_.__l.__data_);
  }
  _tc_google::protobuf::io::CodedOutputStream::~CodedOutputStream((_tc_google::protobuf::io::CodedOutputStream *)v11);
  _tc_google::protobuf::io::ArrayOutputStream::~ArrayOutputStream((_tc_google::protobuf::io::ArrayOutputStream *)v12);
  return &a3[v6];
}

void sub_21832F398(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  void *v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, void *);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  _tc_google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _tc_google::protobuf::io::CodedOutputStream::~CodedOutputStream((_tc_google::protobuf::io::CodedOutputStream *)va1);
  _tc_google::protobuf::io::ArrayOutputStream::~ArrayOutputStream((_tc_google::protobuf::io::ArrayOutputStream *)(v3 - 64));
  _Unwind_Resume(a1);
}

void _tc_google::protobuf::`anonymous namespace'::InitializationErrorMessage(_tc_google::protobuf::_anonymous_namespace_ *this@<X0>, std::string *a2@<X8>)
{
  const std::string::value_type *p_p;
  std::string::size_type v7;
  const std::string::value_type *v8;
  std::string::size_type v9;
  void *__p;
  std::string::size_type v11;
  unsigned __int8 v12;

  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  std::string::append(a2, "Can't ");
  std::string::append(a2, "parse");
  std::string::append(a2, " message of type \"");
  (*(void (**)(void **__return_ptr, _tc_google::protobuf::_anonymous_namespace_ *))(*(_QWORD *)this + 16))(&__p, this);
  if ((v12 & 0x80u) == 0)
    p_p = (const std::string::value_type *)&__p;
  else
    p_p = (const std::string::value_type *)__p;
  if ((v12 & 0x80u) == 0)
    v7 = v12;
  else
    v7 = v11;
  std::string::append(a2, p_p, v7);
  if ((char)v12 < 0)
    operator delete(__p);
  std::string::append(a2, "\" because it is missing required fields: ");
  (*(void (**)(void **__return_ptr, _tc_google::protobuf::_anonymous_namespace_ *))(*(_QWORD *)this + 72))(&__p, this);
  if ((v12 & 0x80u) == 0)
    v8 = (const std::string::value_type *)&__p;
  else
    v8 = (const std::string::value_type *)__p;
  if ((v12 & 0x80u) == 0)
    v9 = v12;
  else
    v9 = v11;
  std::string::append(a2, v8, v9);
  if ((char)v12 < 0)
    operator delete(__p);
}

void sub_21832F4DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v15 + 23) < 0)
    operator delete(*(void **)v15);
  _Unwind_Resume(exception_object);
}

uint64_t _tc_google::protobuf::MessageLite::SerializePartialToCodedStream(_tc_google::protobuf::MessageLite *this, _tc_google::protobuf::io::CodedOutputStream *a2)
{
  unint64_t v4;
  _tc_google::protobuf::_anonymous_namespace_ *v5;
  std::string *v6;
  std::string *v7;
  int v8;
  int v9;
  uint64_t v10;
  BOOL v11;
  int v12;
  int v14;
  _tc_google::protobuf::_anonymous_namespace_ *v15;
  uint64_t v16;
  _tc_google::protobuf::_anonymous_namespace_ *v17;
  const _tc_google::protobuf::MessageLite *v18;
  char v19;
  std::string v20[2];

  v4 = (*(uint64_t (**)(_tc_google::protobuf::MessageLite *))(*(_QWORD *)this + 96))(this);
  v5 = (_tc_google::protobuf::_anonymous_namespace_ *)v4;
  if (v4 >> 31)
  {
    _tc_google::protobuf::internal::LogMessage::LogMessage((uint64_t)v20, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/external/google/protobuf/message_lite.cc", 252);
    v6 = _tc_google::protobuf::internal::LogMessage::operator<<(v20, "Exceeded maximum protobuf size of 2GB: ");
    v7 = _tc_google::protobuf::internal::LogMessage::operator<<(v6, (uint64_t)v5);
    _tc_google::protobuf::internal::LogFinisher::operator=((uint64_t)&v19, (_tc_google::protobuf::internal::LogMessage *)v7);
    _tc_google::protobuf::internal::LogMessage::~LogMessage((void **)&v20[0].__r_.__value_.__l.__data_);
    return 0;
  }
  v8 = *((_DWORD *)a2 + 4);
  v9 = v8 - v4;
  if (v8 >= (int)v4)
  {
    v10 = *((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = v10 + v4;
    *((_DWORD *)a2 + 4) = v9;
    if (v10)
    {
      if (*((_BYTE *)a2 + 26))
        v11 = *((_BYTE *)a2 + 27) == 0;
      else
        v11 = _tc_google::protobuf::io::CodedOutputStream::default_serialization_deterministic_ == 0;
      v16 = !v11;
      v15 = (_tc_google::protobuf::_anonymous_namespace_ *)((*(uint64_t (**)(_tc_google::protobuf::MessageLite *, uint64_t, uint64_t))(*(_QWORD *)this + 128))(this, v16, v10)- v10);
      if (v15 == v5)
        return 1;
      goto LABEL_17;
    }
    v8 = v9;
  }
  v12 = *((_DWORD *)a2 + 5);
  (*(void (**)(_tc_google::protobuf::MessageLite *, _tc_google::protobuf::io::CodedOutputStream *))(*(_QWORD *)this + 104))(this, a2);
  if (*((_BYTE *)a2 + 24))
    return 0;
  v14 = v8 + *((_DWORD *)a2 + 5) - (v12 + *((_DWORD *)a2 + 4));
  if (v5 != (_tc_google::protobuf::_anonymous_namespace_ *)v14)
  {
    v15 = (_tc_google::protobuf::_anonymous_namespace_ *)v14;
LABEL_17:
    v17 = (_tc_google::protobuf::_anonymous_namespace_ *)(*(uint64_t (**)(_tc_google::protobuf::MessageLite *))(*(_QWORD *)this + 96))(this);
  }
  return 1;
}

void sub_21832F690(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _tc_google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void _tc_google::protobuf::`anonymous namespace'::ByteSizeConsistencyError(_tc_google::protobuf::_anonymous_namespace_ *this, _tc_google::protobuf::_anonymous_namespace_ *a2, _tc_google::protobuf::_anonymous_namespace_ *a3, uint64_t a4, const _tc_google::protobuf::MessageLite *a5)
{
  std::string *v8;
  std::string *v9;
  std::string *v10;
  std::string *v11;
  std::string *v12;
  std::string *v13;
  std::string *v14;
  std::string *v15;
  char v16;
  void *__p[2];
  char v18;
  std::string v19[2];

  if (this != a2)
  {
    _tc_google::protobuf::internal::LogMessage::LogMessage((uint64_t)v19, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/external/google/protobuf/message_lite.cc", 68);
    v8 = _tc_google::protobuf::internal::LogMessage::operator<<(v19, "CHECK failed: (byte_size_before_serialization) == (byte_size_after_serialization): ");
    (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a4 + 16))(__p, a4);
    v9 = _tc_google::protobuf::internal::LogMessage::operator<<(v8, (const std::string::value_type *)__p);
    v10 = _tc_google::protobuf::internal::LogMessage::operator<<(v9, " was modified concurrently during serialization.");
    _tc_google::protobuf::internal::LogFinisher::operator=((uint64_t)&v16, (_tc_google::protobuf::internal::LogMessage *)v10);
    if (v18 < 0)
      operator delete(__p[0]);
    _tc_google::protobuf::internal::LogMessage::~LogMessage((void **)&v19[0].__r_.__value_.__l.__data_);
  }
  if (a3 != this)
  {
    _tc_google::protobuf::internal::LogMessage::LogMessage((uint64_t)v19, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/external/google/protobuf/message_lite.cc", 71);
    v11 = _tc_google::protobuf::internal::LogMessage::operator<<(v19, "CHECK failed: (bytes_produced_by_serialization) == (byte_size_before_serialization): ");
    v12 = _tc_google::protobuf::internal::LogMessage::operator<<(v11, "Byte size calculation and serialization were inconsistent.  This may indicate a bug in protocol buffers or it may be caused by concurrent modification of ");
    (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a4 + 16))(__p, a4);
    v13 = _tc_google::protobuf::internal::LogMessage::operator<<(v12, (const std::string::value_type *)__p);
    v14 = _tc_google::protobuf::internal::LogMessage::operator<<(v13, ".");
    _tc_google::protobuf::internal::LogFinisher::operator=((uint64_t)&v16, (_tc_google::protobuf::internal::LogMessage *)v14);
    if (v18 < 0)
      operator delete(__p[0]);
    _tc_google::protobuf::internal::LogMessage::~LogMessage((void **)&v19[0].__r_.__value_.__l.__data_);
  }
  _tc_google::protobuf::internal::LogMessage::LogMessage((uint64_t)v19, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/external/google/protobuf/message_lite.cc", 75);
  v15 = _tc_google::protobuf::internal::LogMessage::operator<<(v19, "This shouldn't be called if all the sizes are equal.");
  _tc_google::protobuf::internal::LogFinisher::operator=((uint64_t)__p, (_tc_google::protobuf::internal::LogMessage *)v15);
  _tc_google::protobuf::internal::LogMessage::~LogMessage((void **)&v19[0].__r_.__value_.__l.__data_);
}

void sub_21832F82C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16)
{
  if (a15 < 0)
    operator delete(__p);
  _tc_google::protobuf::internal::LogMessage::~LogMessage(&a16);
  _Unwind_Resume(a1);
}

uint64_t _tc_google::protobuf::MessageLite::SerializeToZeroCopyStream(_tc_google::protobuf::MessageLite *this, _tc_google::protobuf::io::ZeroCopyOutputStream *a2)
{
  uint64_t v3;
  _BYTE v5[32];

  _tc_google::protobuf::io::CodedOutputStream::CodedOutputStream((uint64_t)v5, (uint64_t)a2);
  v3 = _tc_google::protobuf::MessageLite::SerializePartialToCodedStream(this, (_tc_google::protobuf::io::CodedOutputStream *)v5);
  _tc_google::protobuf::io::CodedOutputStream::~CodedOutputStream((_tc_google::protobuf::io::CodedOutputStream *)v5);
  return v3;
}

void sub_21832F8C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _tc_google::protobuf::io::CodedOutputStream::~CodedOutputStream((_tc_google::protobuf::io::CodedOutputStream *)&a9);
  _Unwind_Resume(a1);
}

uint64_t _GLOBAL__sub_I_message_lite_cc()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

unsigned int *_tc_google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend(_tc_google::protobuf::internal::RepeatedPtrFieldBase *this, int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int *v5;
  uint64_t v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int *Aligned;
  uint64_t v12;

  v2 = *((_DWORD *)this + 2);
  v3 = *((_DWORD *)this + 3);
  v4 = v2 + a2;
  v5 = (unsigned int *)*((_QWORD *)this + 2);
  if (v3 < v2 + a2)
  {
    v7 = *(_QWORD *)this;
    v8 = 2 * v3;
    if (2 * v3 <= v4)
      v8 = v4;
    if (v8 <= 4)
      v9 = 4;
    else
      v9 = v8;
    v10 = 8 * v9;
    if (v7)
      Aligned = (unsigned int *)_tc_google::protobuf::Arena::AllocateAligned(*(_tc_google::protobuf::Arena **)this, MEMORY[0x24BEDB778], v10 + 8);
    else
      Aligned = (unsigned int *)operator new(v10 + 8);
    *((_QWORD *)this + 2) = Aligned;
    *((_DWORD *)this + 3) = v9;
    if (v5 && (v12 = *v5, (int)v12 >= 1))
    {
      memcpy(Aligned + 2, v5 + 2, 8 * v12);
      Aligned = (unsigned int *)*((_QWORD *)this + 2);
      *Aligned = *v5;
      if (!v7)
        goto LABEL_15;
    }
    else
    {
      *Aligned = 0;
      if (!v7)
      {
LABEL_15:
        operator delete(v5);
        Aligned = (unsigned int *)*((_QWORD *)this + 2);
      }
    }
    v2 = *((_DWORD *)this + 2);
    v5 = Aligned;
  }
  return &v5[2 * v2 + 2];
}

unsigned int *_tc_google::protobuf::internal::RepeatedPtrFieldBase::Reserve(unsigned int *this, int a2)
{
  unsigned int v2;
  BOOL v3;
  int v4;

  v2 = this[2];
  v3 = __OFSUB__(a2, v2);
  v4 = a2 - v2;
  if (!((v4 < 0) ^ v3 | (v4 == 0)))
    return _tc_google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((_tc_google::protobuf::internal::RepeatedPtrFieldBase *)this, v4);
  return this;
}

uint64_t _GLOBAL__sub_I_repeated_field_cc()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

uint64_t _GLOBAL__sub_I_atomicops_internals_x86_gcc_cc()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

turi::neural_net::CoreImageImage *turi::neural_net::CoreImageImage::CoreImageImage(turi::neural_net::CoreImageImage *this, CIImage *a2)
{
  CIImage *v3;

  v3 = a2;
  *(_QWORD *)this = &off_24D93BBE8;
  *((_QWORD *)this + 1) = v3;
  return this;
}

_QWORD *turi::neural_net::CoreImageImage::CoreImageImage(_QWORD *a1, uint64_t *a2)
{
  void *v4;
  void *v5;
  uint64_t *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;

  *a1 = &off_24D93BBE8;
  a1[1] = 0;
  v4 = (void *)MEMORY[0x219A19FE4]();
  v5 = (void *)MEMORY[0x24BDBCF48];
  if (*((char *)a2 + 23) >= 0)
    v6 = a2;
  else
    v6 = (uint64_t *)*a2;
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "fileURLWithPath:", v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDBF660], "imageWithContentsOfURL:", v8);
  v9 = objc_claimAutoreleasedReturnValue();
  v10 = (void *)a1[1];
  a1[1] = v9;

  objc_autoreleasePoolPop(v4);
  return a1;
}

void sub_21832FB58(_Unwind_Exception *a1)
{
  id *v1;

  turi::neural_net::float_scalar::~float_scalar((turi::neural_net::float_scalar *)v1);
  _Unwind_Resume(a1);
}

void turi::neural_net::CoreImageImage::~CoreImageImage(id *this)
{

  turi::neural_net::float_scalar::~float_scalar((turi::neural_net::float_scalar *)this);
}

{

  turi::neural_net::float_scalar::~float_scalar((turi::neural_net::float_scalar *)this);
  JUMPOUT(0x219A19A08);
}

unint64_t turi::neural_net::CoreImageImage::Height(id *this)
{
  void *v2;
  double v3;
  unint64_t v4;

  v2 = (void *)MEMORY[0x219A19FE4]();
  objc_msgSend(this[1], "extent");
  v4 = (unint64_t)v3;
  objc_autoreleasePoolPop(v2);
  return v4;
}

unint64_t turi::neural_net::CoreImageImage::Width(id *this)
{
  void *v2;
  double v3;
  unint64_t v4;

  v2 = (void *)MEMORY[0x219A19FE4]();
  objc_msgSend(this[1], "extent");
  v4 = (unint64_t)v3;
  objc_autoreleasePoolPop(v2);
  return v4;
}

void turi::neural_net::CoreImageImage::WriteCHW(uint64_t a1, uint64_t a2, unint64_t a3)
{
  void *v5;
  double v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  vImage_Buffer *p_destA;
  uint64_t v16;
  vImage_Buffer *v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  void *exception;
  void *v24;
  uint64_t v25;
  _QWORD v26[3];
  _OWORD v27[2];
  __int128 v28;
  __int128 v29;
  vImage_Buffer destA;
  vImage_Buffer v31;
  vImage_Buffer v32;
  vImage_Buffer v33;
  vImage_Buffer srcARGB;
  _BYTE *v35;
  _BYTE *v36;
  _BYTE *v37;
  _BYTE *v38;
  _QWORD v39[3];
  uint64_t v40;
  unint64_t v41;

  v40 = a2;
  v41 = a3;
  v5 = (void *)MEMORY[0x219A19FE4]();
  objc_msgSend(*(id *)(a1 + 8), "extent");
  v7 = (unint64_t)v6;
  objc_msgSend(*(id *)(a1 + 8), "extent");
  v9 = (unint64_t)v8;
  v25 = v7;
  v10 = (unint64_t)v8 * v7;
  if (a3 != 3 * v10)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    memset(v39, 0, sizeof(v39));
    turi::TuriException::TuriException(exception, 4, v39);
  }
  std::vector<float>::vector(&v37, 4 * v10);
  if (v38 == v37)
    v11 = 0;
  else
    v11 = (uint64_t)v37;
  std::vector<float>::vector(&v35, v10);
  memset(&srcARGB, 0, sizeof(srcARGB));
  if (v38 == v37)
    v12 = 0;
  else
    v12 = (uint64_t)v37;
  turi::Span<float,18446744073709551615ul>::IterateSlices(&v40, v41 / 3, &v28);
  v13 = v28;
  v14 = v29;
  if (v28 == v29)
  {
    p_destA = &destA;
  }
  else
  {
    v16 = 0;
    v17 = &destA;
    while (1)
    {
      if (*((_QWORD *)&v13 + 1))
        v18 = v13 + v16;
      else
        v18 = 0;
      p_destA = v17 + 1;
      v19 = v27[1];
      *(_OWORD *)&v17->data = v27[0];
      *(_OWORD *)&v17->width = v19;
      v20 = v13 + 4 * *((_QWORD *)&v13 + 1) + v16;
      v16 += 4 * *((_QWORD *)&v13 + 1);
      ++v17;
      if (v20 == (_QWORD)v14)
      {
        v17 = p_destA;
        if (*((_QWORD *)&v13 + 1) == *((_QWORD *)&v14 + 1))
          break;
      }
    }
  }
  if (v36 == v35)
    v21 = 0;
  else
    v21 = (uint64_t)v35;
  v22 = v29;
  *(_OWORD *)&p_destA->data = v28;
  *(_OWORD *)&p_destA->width = v22;
  if (vImageConvert_ARGBFFFFtoPlanarF(&srcARGB, &destA, &v31, &v32, &v33, 0x10u))
  {
    v24 = __cxa_allocate_exception(0x40uLL);
    std::string::basic_string[abi:ne180100]<0>(v26, "unexpected error converting RGBA bitmap to planar RGB");
    turi::TuriException::TuriException(v24, 10, v26);
  }
  if (v35)
  {
    v36 = v35;
    operator delete(v35);
  }
  if (v37)
  {
    v38 = v37;
    operator delete(v37);
  }
  objc_autoreleasePoolPop(v5);
}

void sub_21832FF04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;
  int v18;
  uint64_t v19;
  void *v21;
  void *v22;

  if (a17 < 0)
  {
    operator delete(__p);
    if ((v18 & 1) == 0)
    {
LABEL_6:
      v21 = *(void **)(v19 - 184);
      if (v21)
      {
        *(_QWORD *)(v19 - 176) = v21;
        operator delete(v21);
      }
      v22 = *(void **)(v19 - 160);
      if (v22)
      {
        *(_QWORD *)(v19 - 152) = v22;
        operator delete(v22);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v18)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v17);
  goto LABEL_6;
}

void turi::neural_net::`anonymous namespace'::RenderRgba(void *a1, uint64_t a2, uint64_t a3)
{
  id v5;
  double v6;
  double v7;
  double v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *exception;
  _QWORD v15[3];
  _QWORD v16[2];
  _QWORD v17[3];

  v17[2] = *MEMORY[0x24BDAC8D0];
  v5 = a1;
  objc_msgSend(v5, "extent");
  v7 = v6;
  objc_msgSend(v5, "extent");
  v9 = (unint64_t)v8;
  if (a3 != 4 * (unint64_t)v7 * (unint64_t)v8)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    memset(v15, 0, sizeof(v15));
    turi::TuriException::TuriException(exception, 4, v15);
  }
  v10 = *MEMORY[0x24BDBF858];
  v16[0] = *MEMORY[0x24BDBF850];
  v16[1] = v10;
  v17[0] = MEMORY[0x24BDBD1C8];
  objc_msgSend(MEMORY[0x24BDBCEF8], "null");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v17[1] = v11;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v17, v16, 2);
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDBF648], "contextWithOptions:", v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v5, "extent");
  objc_msgSend(v13, "render:toBitmap:rowBytes:bounds:format:colorSpace:", v5, a2, 16 * v9, *MEMORY[0x24BDBF8B8], 0);

}

void sub_218330134(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

uint64_t turi::neural_net::`anonymous namespace'::WrapSpan@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  void *exception;
  _QWORD v7[3];

  if (a2 != a5 * a4 * a3)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    memset(v7, 0, sizeof(v7));
    turi::TuriException::TuriException(exception, 4, v7);
  }
  *a6 = result;
  a6[1] = a3;
  a6[2] = a4;
  a6[3] = 4 * a5 * a4;
  return result;
}

void sub_218330224(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
    operator delete(__p);
  if (v16)
    __cxa_free_exception(v15);
  _Unwind_Resume(exception_object);
}

void turi::neural_net::CoreImageImage::WriteHWC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  double v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  unint64_t v11;
  void *v12;
  void *v13;
  void *exception;
  void *v15;
  _QWORD v16[3];
  vImage_Buffer dest;
  vImage_Buffer src;
  void *__p;
  _BYTE *v20;
  _QWORD v21[3];

  v6 = (void *)MEMORY[0x219A19FE4]();
  objc_msgSend(*(id *)(a1 + 8), "extent");
  v8 = (unint64_t)v7;
  objc_msgSend(*(id *)(a1 + 8), "extent");
  v10 = (unint64_t)v9;
  v11 = (unint64_t)v9 * v8;
  if (a3 != 3 * v11)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    memset(v21, 0, sizeof(v21));
    turi::TuriException::TuriException(exception, 4, v21);
  }
  std::vector<float>::vector(&__p, 4 * v11);
  if (v20 == __p)
    v12 = 0;
  else
    v12 = __p;
  memset(&src, 0, sizeof(src));
  if (v20 == __p)
    v13 = 0;
  else
    v13 = __p;
  memset(&dest, 0, sizeof(dest));
  if (vImageConvert_RGBAFFFFtoRGBFFF(&src, &dest, 0x10u))
  {
    v15 = __cxa_allocate_exception(0x40uLL);
    std::string::basic_string[abi:ne180100]<0>(v16, "converting RGBA bitmap to RGB");
    turi::TuriException::TuriException(v15, 10, v16);
  }
  if (__p)
  {
    v20 = __p;
    operator delete(__p);
  }
  objc_autoreleasePoolPop(v6);
}

void sub_2183303EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  void *v25;
  int v26;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v26 & 1) == 0)
    {
LABEL_6:
      if (a24)
        operator delete(a24);
      _Unwind_Resume(a1);
    }
  }
  else if (!v26)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v25);
  goto LABEL_6;
}

void sub_218330448()
{
  void *v0;
  int v1;
  uint64_t v2;

  if (*(char *)(v2 - 49) < 0)
    operator delete(*(void **)(v2 - 72));
  if (v1)
    __cxa_free_exception(v0);
  JUMPOUT(0x218330440);
}

_QWORD *turi::Span<float,18446744073709551615ul>::IterateSlices@<X0>(_QWORD *result@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t v3;
  uint64_t v4;
  void *exception;
  _QWORD v6[3];

  v3 = result[1];
  if (v3 % a2)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    memset(v6, 0, sizeof(v6));
    turi::TuriException::TuriException(exception, 2, v6);
  }
  v4 = *result + 4 * v3;
  *a3 = *result;
  a3[1] = a2;
  a3[2] = v4;
  a3[3] = a2;
  return result;
}

void sub_2183304F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
    operator delete(__p);
  if (v16)
    __cxa_free_exception(v15);
  _Unwind_Resume(exception_object);
}

void _GLOBAL__sub_I_CoreImageImage_mm()
{
  void *v0;

  v0 = (void *)MEMORY[0x219A19FE4]();
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  objc_autoreleasePoolPop(v0);
}

uint64_t _GLOBAL__sub_I_atomicops_internals_x86_msvc_cc()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void _tc_google::protobuf::internal::VerifyVersion(_tc_google::protobuf::internal *this, _tc_google::protobuf::internal *a2, const std::string::value_type *a3, const char *a4)
{
  const std::string::value_type *v7;
  std::string::size_type v8;
  const std::string::value_type *p_p;
  std::string::size_type v10;
  const std::string::value_type *v11;
  std::string::size_type v12;
  const std::string::value_type *v13;
  std::string::size_type v14;
  void *__p;
  std::string::size_type v16;
  unsigned __int8 v17;
  void *v18;
  std::string::size_type v19;
  unsigned __int8 v20;
  int v21;
  const char *v22;
  int v23;
  std::string v24;
  char __str[127];
  char v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  if ((int)a2 > 3003000)
  {
    v21 = 3;
    v22 = "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/external/google/protobuf/stubs/common.cc";
    v23 = 67;
    memset(&v24, 0, sizeof(v24));
    std::string::append(&v24, "This program requires version ");
    _tc_google::protobuf::internal::VersionString(a2, &v18);
    if ((v20 & 0x80u) == 0)
      v7 = (const std::string::value_type *)&v18;
    else
      v7 = (const std::string::value_type *)v18;
    if ((v20 & 0x80u) == 0)
      v8 = v20;
    else
      v8 = v19;
    std::string::append(&v24, v7, v8);
    std::string::append(&v24, " of the Protocol Buffer runtime library, but the installed version is ");
    snprintf(__str, 0x80uLL, "%d.%d.%d", 3, 3, 0);
    v26 = 0;
    std::string::basic_string[abi:ne180100]<0>(&__p, __str);
    if ((v17 & 0x80u) == 0)
      p_p = (const std::string::value_type *)&__p;
    else
      p_p = (const std::string::value_type *)__p;
    if ((v17 & 0x80u) == 0)
      v10 = v17;
    else
      v10 = v16;
    std::string::append(&v24, p_p, v10);
    std::string::append(&v24, ".  Please update your library.  If you compiled the program yourself, make sure that your headers are from the same version of Protocol Buffers as your link-time library.  (Version verification failed in \"");
    std::string::append(&v24, a3);
    std::string::append(&v24, "\".)");
    _tc_google::protobuf::internal::LogMessage::Finish((_tc_google::protobuf::internal::LogMessage *)&v21);
    if ((char)v17 < 0)
      operator delete(__p);
    if ((char)v20 < 0)
      operator delete(v18);
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v24.__r_.__value_.__l.__data_);
  }
  if ((int)this < 3003000)
  {
    v21 = 3;
    v22 = "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/external/google/protobuf/stubs/common.cc";
    v23 = 78;
    memset(&v24, 0, sizeof(v24));
    std::string::append(&v24, "This program was compiled against version ");
    _tc_google::protobuf::internal::VersionString(this, &v18);
    if ((v20 & 0x80u) == 0)
      v11 = (const std::string::value_type *)&v18;
    else
      v11 = (const std::string::value_type *)v18;
    if ((v20 & 0x80u) == 0)
      v12 = v20;
    else
      v12 = v19;
    std::string::append(&v24, v11, v12);
    std::string::append(&v24, " of the Protocol Buffer runtime library, which is not compatible with the installed version (");
    snprintf(__str, 0x80uLL, "%d.%d.%d", 3, 3, 0);
    v26 = 0;
    std::string::basic_string[abi:ne180100]<0>(&__p, __str);
    if ((v17 & 0x80u) == 0)
      v13 = (const std::string::value_type *)&__p;
    else
      v13 = (const std::string::value_type *)__p;
    if ((v17 & 0x80u) == 0)
      v14 = v17;
    else
      v14 = v16;
    std::string::append(&v24, v13, v14);
    std::string::append(&v24, ").  Contact the program author for an update.  If you compiled the program yourself, make sure that your headers are from the same version of Protocol Buffers as your link-time library.  (Version verification failed in \"");
    std::string::append(&v24, a3);
    std::string::append(&v24, "\".)");
    _tc_google::protobuf::internal::LogMessage::Finish((_tc_google::protobuf::internal::LogMessage *)&v21);
    if ((char)v17 < 0)
      operator delete(__p);
    if ((char)v20 < 0)
      operator delete(v18);
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v24.__r_.__value_.__l.__data_);
  }
}

void sub_21833089C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (a32 < 0)
    operator delete(a27);
  _Unwind_Resume(exception_object);
}

uint64_t _tc_google::protobuf::internal::LogMessage::LogMessage(uint64_t result, int a2, uint64_t a3, int a4)
{
  *(_DWORD *)result = a2;
  *(_QWORD *)(result + 8) = a3;
  *(_DWORD *)(result + 16) = a4;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 24) = 0;
  return result;
}

std::string *_tc_google::protobuf::internal::LogMessage::operator<<(std::string *a1, const std::string::value_type *a2)
{
  std::string::append(a1 + 1, a2);
  return a1;
}

{
  std::string *v3;
  std::string::size_type v4;
  std::string::size_type v5;

  v3 = a1 + 1;
  v4 = *((_QWORD *)a2 + 1);
  if (a2[23] >= 0)
  {
    v5 = *((unsigned __int8 *)a2 + 23);
  }
  else
  {
    a2 = *(const std::string::value_type **)a2;
    v5 = v4;
  }
  std::string::append(v3, a2, v5);
  return a1;
}

_QWORD *_tc_google::protobuf::internal::VersionString@<X0>(_tc_google::protobuf::internal *this@<X0>, _QWORD *a2@<X8>)
{
  char __str[128];
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  snprintf(__str, 0x80uLL, "%d.%d.%d", (int)this / 1000000, (int)this / 1000 % 1000, (int)this % 1000);
  __str[127] = 0;
  return std::string::basic_string[abi:ne180100]<0>(a2, __str);
}

void _tc_google::protobuf::internal::LogFinisher::operator=(uint64_t a1, _tc_google::protobuf::internal::LogMessage *a2)
{
  _tc_google::protobuf::internal::LogMessage::Finish(a2);
}

void _tc_google::protobuf::internal::LogMessage::~LogMessage(void **this)
{
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
}

uint64_t _tc_google::protobuf::internal::DefaultLogHandler(uint64_t result, const char *a2, int a3, uint64_t a4)
{
  FILE **v4;
  const char *v5;

  if ((result & 0x80000000) == 0)
  {
    v4 = (FILE **)MEMORY[0x24BDAC8D8];
    if (*(char *)(a4 + 23) >= 0)
      v5 = (const char *)a4;
    else
      v5 = *(const char **)a4;
    fprintf((FILE *)*MEMORY[0x24BDAC8D8], "[libprotobuf %s %s:%d] %s\n", _tc_google::protobuf::internal::DefaultLogHandler(_tc_google::protobuf::LogLevel,char const*,int,std::string const&)::level_names[result], a2, a3, v5);
    return fflush(*v4);
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::DeleteLogSilencerCount(_tc_google::protobuf::internal *this)
{
  uint64_t result;

  result = _tc_google::protobuf::internal::log_silencer_count_mutex_;
  if (_tc_google::protobuf::internal::log_silencer_count_mutex_)
  {
    _tc_google::protobuf::internal::Mutex::~Mutex((pthread_mutex_t **)_tc_google::protobuf::internal::log_silencer_count_mutex_);
    result = MEMORY[0x219A19A08]();
  }
  _tc_google::protobuf::internal::log_silencer_count_mutex_ = 0;
  return result;
}

void _tc_google::protobuf::internal::InitLogSilencerCount(_tc_google::protobuf::internal *this)
{
  _QWORD *v1;
  pthread_mutex_t *v2;
  void (*v3)(void);

  v1 = (_QWORD *)operator new();
  v2 = (pthread_mutex_t *)operator new();
  *v1 = v2;
  pthread_mutex_init(v2, 0);
  _tc_google::protobuf::internal::log_silencer_count_mutex_ = (uint64_t)v1;
  _tc_google::protobuf::internal::OnShutdown((_tc_google::protobuf::internal *)_tc_google::protobuf::internal::DeleteLogSilencerCount, v3);
}

void sub_218330BA0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

void _tc_google::protobuf::internal::OnShutdown(_tc_google::protobuf::internal *this, void (*a2)(void))
{
  unint64_t v3;
  pthread_mutex_t **v4;
  void **v5;
  _QWORD *v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  _QWORD v19[2];
  char v20;

  v3 = atomic_load(&_tc_google::protobuf::internal::shutdown_functions_init);
  if (v3 != 2)
  {
    v19[0] = &off_24D93BCB0;
    v19[1] = _tc_google::protobuf::internal::InitShutdownFunctions;
    v20 = 0;
    _tc_google::protobuf::GoogleOnceInitImpl(&_tc_google::protobuf::internal::shutdown_functions_init, (uint64_t)v19);
  }
  v4 = (pthread_mutex_t **)_tc_google::protobuf::internal::shutdown_functions_mutex;
  _tc_google::protobuf::internal::Mutex::Lock((pthread_mutex_t **)_tc_google::protobuf::internal::shutdown_functions_mutex);
  v5 = (void **)_tc_google::protobuf::internal::shutdown_functions;
  v6 = *(_QWORD **)(_tc_google::protobuf::internal::shutdown_functions + 8);
  v7 = *(_QWORD *)(_tc_google::protobuf::internal::shutdown_functions + 16);
  if ((unint64_t)v6 >= v7)
  {
    v9 = ((uint64_t)v6 - *(_QWORD *)_tc_google::protobuf::internal::shutdown_functions) >> 3;
    if ((unint64_t)(v9 + 1) >> 61)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = v7 - *(_QWORD *)_tc_google::protobuf::internal::shutdown_functions;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(_tc_google::protobuf::internal::shutdown_functions + 16, v12);
    else
      v13 = 0;
    v14 = &v13[8 * v9];
    v15 = &v13[8 * v12];
    *(_QWORD *)v14 = this;
    v8 = v14 + 8;
    v17 = (char *)*v5;
    v16 = (char *)v5[1];
    if (v16 != *v5)
    {
      do
      {
        v18 = *((_QWORD *)v16 - 1);
        v16 -= 8;
        *((_QWORD *)v14 - 1) = v18;
        v14 -= 8;
      }
      while (v16 != v17);
      v16 = (char *)*v5;
    }
    *v5 = v14;
    v5[1] = v8;
    v5[2] = v15;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *v6 = this;
    v8 = v6 + 1;
  }
  v5[1] = v8;
  _tc_google::protobuf::internal::Mutex::Unlock(v4);
}

void sub_218330D00(_Unwind_Exception *a1)
{
  pthread_mutex_t **v1;

  _tc_google::protobuf::internal::Mutex::Unlock(v1);
  _Unwind_Resume(a1);
}

unint64_t *_tc_google::protobuf::internal::InitLogSilencerCountOnce(_tc_google::protobuf::internal *this)
{
  unint64_t v1;
  unint64_t *result;
  _QWORD v3[2];
  char v4;

  v1 = atomic_load(&_tc_google::protobuf::internal::log_silencer_count_init_);
  if (v1 != 2)
  {
    v3[0] = &off_24D93BCB0;
    v3[1] = _tc_google::protobuf::internal::InitLogSilencerCount;
    v4 = 0;
    return _tc_google::protobuf::GoogleOnceInitImpl(&_tc_google::protobuf::internal::log_silencer_count_init_, (uint64_t)v3);
  }
  return result;
}

std::string *_tc_google::protobuf::internal::LogMessage::operator<<(std::string *a1, int a2)
{
  char __str[128];
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  snprintf(__str, 0x80uLL, "%d", a2);
  __str[127] = 0;
  std::string::append(a1 + 1, __str);
  return a1;
}

std::string *_tc_google::protobuf::internal::LogMessage::operator<<(std::string *a1, uint64_t a2)
{
  char __str[128];
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  snprintf(__str, 0x80uLL, "%lu", a2);
  __str[127] = 0;
  std::string::append(a1 + 1, __str);
  return a1;
}

void _tc_google::protobuf::internal::LogMessage::Finish(_tc_google::protobuf::internal::LogMessage *this)
{
  uint64_t v2;
  pthread_mutex_t **v3;
  int v4;
  void *exception;

  if (*(_DWORD *)this == 3)
  {
    v2 = 3;
  }
  else
  {
    _tc_google::protobuf::internal::InitLogSilencerCountOnce(this);
    v3 = (pthread_mutex_t **)_tc_google::protobuf::internal::log_silencer_count_mutex_;
    _tc_google::protobuf::internal::Mutex::Lock((pthread_mutex_t **)_tc_google::protobuf::internal::log_silencer_count_mutex_);
    v4 = _tc_google::protobuf::internal::log_silencer_count_;
    _tc_google::protobuf::internal::Mutex::Unlock(v3);
    if (v4 > 0)
      goto LABEL_6;
    v2 = *(unsigned int *)this;
  }
  _tc_google::protobuf::internal::log_handler_(v2, *((const char **)this + 1), *((_DWORD *)this + 4), (uint64_t)this + 24);
LABEL_6:
  if (*(_DWORD *)this == 3)
  {
    exception = __cxa_allocate_exception(0x30uLL);
    _tc_google::protobuf::FatalException::FatalException(exception, *((_QWORD *)this + 1), *((unsigned int *)this + 4), (char *)this + 24);
  }
}

void sub_218330F28(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void _tc_google::protobuf::internal::FunctionClosure0::~FunctionClosure0(_tc_google::protobuf::internal::FunctionClosure0 *this)
{
  JUMPOUT(0x219A19A08);
}

void _tc_google::protobuf::internal::Mutex::~Mutex(pthread_mutex_t **this)
{
  pthread_mutex_destroy(*this);
  if (*this)
    MEMORY[0x219A19A08](*this, 0x1000C40FA0F61DDLL);
}

void _tc_google::protobuf::internal::Mutex::Lock(pthread_mutex_t **this)
{
  int v1;
  int v2;
  char *v3;
  int v4;
  const char *v5;
  int v6;
  std::string __p;

  v1 = pthread_mutex_lock(*this);
  if (v1)
  {
    v2 = v1;
    v4 = 3;
    v5 = "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/external/google/protobuf/stubs/common.cc";
    v6 = 377;
    memset(&__p, 0, sizeof(__p));
    std::string::append(&__p, "pthread_mutex_lock: ");
    v3 = strerror(v2);
    std::string::append(&__p, v3);
    _tc_google::protobuf::internal::LogMessage::Finish((_tc_google::protobuf::internal::LogMessage *)&v4);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_218331040(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void _tc_google::protobuf::internal::Mutex::Unlock(pthread_mutex_t **this)
{
  int v1;
  int v2;
  char *v3;
  int v4;
  const char *v5;
  int v6;
  std::string __p;

  v1 = pthread_mutex_unlock(*this);
  if (v1)
  {
    v2 = v1;
    v4 = 3;
    v5 = "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/external/google/protobuf/stubs/common.cc";
    v6 = 384;
    memset(&__p, 0, sizeof(__p));
    std::string::append(&__p, "pthread_mutex_unlock: ");
    v3 = strerror(v2);
    std::string::append(&__p, v3);
    _tc_google::protobuf::internal::LogMessage::Finish((_tc_google::protobuf::internal::LogMessage *)&v4);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_2183310F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t _tc_google::protobuf::internal::InitShutdownFunctions(_tc_google::protobuf::internal *this)
{
  _QWORD *v1;
  _QWORD *v2;
  pthread_mutex_t *v3;
  uint64_t result;

  v1 = (_QWORD *)operator new();
  v1[1] = 0;
  v1[2] = 0;
  *v1 = 0;
  _tc_google::protobuf::internal::shutdown_functions = (uint64_t)v1;
  v2 = (_QWORD *)operator new();
  v3 = (pthread_mutex_t *)operator new();
  *v2 = v3;
  result = pthread_mutex_init(v3, 0);
  _tc_google::protobuf::internal::shutdown_functions_mutex = (uint64_t)v2;
  return result;
}

void sub_2183311A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

void _tc_google::protobuf::FatalException::~FatalException(std::exception *this)
{
  this->__vftable = (std::exception_vtbl *)&off_24D93BC78;
  if (SHIBYTE(this[5].__vftable) < 0)
    operator delete(this[3].__vftable);
  std::exception::~exception(this);
}

{
  _tc_google::protobuf::FatalException::~FatalException(this);
  JUMPOUT(0x219A19A08);
}

uint64_t _tc_google::protobuf::FatalException::what(_tc_google::protobuf::FatalException *this)
{
  uint64_t result;

  result = (uint64_t)this + 24;
  if (*((char *)this + 47) < 0)
    return *(_QWORD *)result;
  return result;
}

uint64_t _tc_google::protobuf::internal::FunctionClosure0::Run(uint64_t (**this)(void))
{
  int v2;
  uint64_t result;

  v2 = *((unsigned __int8 *)this + 16);
  result = this[1]();
  if (this)
  {
    if (v2)
      return (*((uint64_t (**)(uint64_t (**)(void)))*this + 1))(this);
  }
  return result;
}

uint64_t _tc_google::protobuf::FatalException::FatalException(uint64_t a1, uint64_t a2, int a3, __int128 *a4)
{
  std::string *v5;
  __int128 v6;

  *(_QWORD *)a1 = &off_24D93BC78;
  *(_QWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 16) = a3;
  v5 = (std::string *)(a1 + 24);
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)a4, *((_QWORD *)a4 + 1));
  }
  else
  {
    v6 = *a4;
    v5->__r_.__value_.__r.__words[2] = *((_QWORD *)a4 + 2);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return a1;
}

void sub_2183312E0(_Unwind_Exception *a1)
{
  std::exception *v1;

  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

uint64_t _GLOBAL__sub_I_common_cc()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

_QWORD *turi::neural_net::`anonymous namespace'::create_mlc_compute_context@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  _QWORD *result;

  objc_msgSend(MEMORY[0x24BDDAAC8], "deviceWithType:", 2);
  v3 = objc_claimAutoreleasedReturnValue();
  result = (_QWORD *)operator new();
  *result = &off_24D93BCF0;
  result[1] = v3;
  *a1 = result;
  return result;
}

void sub_21833138C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

turi::neural_net::mlc_compute_context *turi::neural_net::mlc_compute_context::mlc_compute_context(turi::neural_net::mlc_compute_context *this, MLCDevice *a2)
{
  MLCDevice *v3;

  v3 = a2;
  *(_QWORD *)this = &off_24D93BCF0;
  *((_QWORD *)this + 1) = v3;
  return this;
}

void turi::neural_net::mlc_compute_context::~mlc_compute_context(id *this)
{

  turi::neural_net::float_scalar::~float_scalar((turi::neural_net::float_scalar *)this);
}

{

  turi::neural_net::float_scalar::~float_scalar((turi::neural_net::float_scalar *)this);
}

{

  turi::neural_net::float_scalar::~float_scalar((turi::neural_net::float_scalar *)this);
  JUMPOUT(0x219A19A08);
}

uint64_t turi::neural_net::mlc_compute_context::memory_budget(turi::neural_net::mlc_compute_context *this)
{
  return 0x40000000;
}

void turi::neural_net::mlc_compute_context::print_training_device_info(id *this)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  id v6;
  char *v7;
  std::vector<std::string>::pointer end;
  __int128 v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  std::string *v13;
  std::string *v14;
  __int128 v15;
  std::string *v16;
  std::vector<std::string>::pointer begin;
  std::vector<std::string>::pointer v18;
  __int128 v19;
  int *v20;
  file_logger *v21;
  file_logger *started;
  _QWORD *v23;
  unint64_t v24;
  uint64_t v25;
  void **v26;
  std::string::size_type v27;
  int *v28;
  file_logger *v29;
  pthread_key_t *v30;
  _QWORD *v31;
  unint64_t v32;
  const char *v33;
  char *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  std::string v41;
  void *__p[2];
  int64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  std::vector<std::string> v48;
  std::__split_buffer<std::string> __v;
  _BYTE v50[128];
  uint64_t v51;

  v51 = *MEMORY[0x24BDAC8D0];
  memset(&v48, 0, sizeof(v48));
  if (objc_msgSend(this[1], "type"))
  {
    v46 = 0u;
    v47 = 0u;
    v44 = 0u;
    v45 = 0u;
    objc_msgSend(this[1], "gpuDevices");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v44, v50, 16);
    if (v3)
    {
      v4 = *(_QWORD *)v45;
      do
      {
        for (i = 0; i != v3; ++i)
        {
          if (*(_QWORD *)v45 != v4)
            objc_enumerationMutation(v2);
          objc_msgSend(*(id *)(*((_QWORD *)&v44 + 1) + 8 * i), "name");
          v6 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
          v7 = (char *)objc_msgSend(v6, "cStringUsingEncoding:", 4);

          if (v7)
          {
            std::string::basic_string[abi:ne180100]<0>(__p, v7);
            end = v48.__end_;
            if (v48.__end_ >= v48.__end_cap_.__value_)
            {
              v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)v48.__end_ - (char *)v48.__begin_) >> 3);
              v11 = v10 + 1;
              if (v10 + 1 > 0xAAAAAAAAAAAAAAALL)
                std::vector<float>::__throw_length_error[abi:ne180100]();
              if (0x5555555555555556 * (((char *)v48.__end_cap_.__value_ - (char *)v48.__begin_) >> 3) > v11)
                v11 = 0x5555555555555556 * (((char *)v48.__end_cap_.__value_ - (char *)v48.__begin_) >> 3);
              if (0xAAAAAAAAAAAAAAABLL * (((char *)v48.__end_cap_.__value_ - (char *)v48.__begin_) >> 3) >= 0x555555555555555)
                v12 = 0xAAAAAAAAAAAAAAALL;
              else
                v12 = v11;
              __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v48.__end_cap_;
              if (v12)
                v13 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>((uint64_t)&v48.__end_cap_, v12);
              else
                v13 = 0;
              v14 = v13 + v10;
              __v.__first_ = v13;
              __v.__begin_ = v14;
              __v.__end_cap_.__value_ = &v13[v12];
              v15 = *(_OWORD *)__p;
              v14->__r_.__value_.__r.__words[2] = v43;
              *(_OWORD *)&v14->__r_.__value_.__l.__data_ = v15;
              __p[1] = 0;
              v43 = 0;
              __p[0] = 0;
              __v.__end_ = v14 + 1;
              std::vector<std::string>::__swap_out_circular_buffer(&v48, &__v);
              v16 = v48.__end_;
              std::__split_buffer<std::string>::~__split_buffer(&__v);
              v48.__end_ = v16;
              if (SHIBYTE(v43) < 0)
                operator delete(__p[0]);
            }
            else
            {
              v9 = *(_OWORD *)__p;
              v48.__end_->__r_.__value_.__r.__words[2] = v43;
              *(_OWORD *)&end->__r_.__value_.__l.__data_ = v9;
              v48.__end_ = end + 1;
            }
          }
        }
        v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v44, v50, 16);
      }
      while (v3);
    }

  }
  begin = v48.__begin_;
  v18 = v48.__end_;
  if (v48.__begin_ == v48.__end_)
  {
    v20 = (int *)global_logger();
    if (v20[169] <= 4)
    {
      if (cppipc::must_cancel((cppipc *)v20))
        log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
      v21 = (file_logger *)global_logger();
      started = file_logger::start_stream(v21, 4, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/ml/neural_net/mlc_compute_context.mm", "print_training_device_info", 86, 1);
      v23 = pthread_getspecific(*((_QWORD *)started + 74));
      if (v23 && *((_BYTE *)v23 + 280))
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23 + 2, (uint64_t)"Using CPU to create model", 25);
    }
  }
  else
  {
    if (SHIBYTE(v48.__begin_->__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&__v, v48.__begin_->__r_.__value_.__l.__data_, v48.__begin_->__r_.__value_.__l.__size_);
      begin = v48.__begin_;
      v18 = v48.__end_;
    }
    else
    {
      v19 = *(_OWORD *)&v48.__begin_->__r_.__value_.__l.__data_;
      __v.__end_ = (std::__split_buffer<std::string>::pointer)v48.__begin_->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__v.__first_ = v19;
    }
    if (0xAAAAAAAAAAAAAAABLL * (((char *)v18 - (char *)begin) >> 3) >= 2)
    {
      v24 = 1;
      v25 = 24;
      do
      {
        std::operator+<char>();
        if (v43 >= 0)
          v26 = __p;
        else
          v26 = (void **)__p[0];
        if (v43 >= 0)
          v27 = HIBYTE(v43);
        else
          v27 = (std::string::size_type)__p[1];
        std::string::append((std::string *)&__v, (const std::string::value_type *)v26, v27);
        if (SHIBYTE(v43) < 0)
          operator delete(__p[0]);
        ++v24;
        v25 += 24;
      }
      while (v24 < 0xAAAAAAAAAAAAAAABLL * (((char *)v48.__end_ - (char *)v48.__begin_) >> 3));
    }
    v28 = (int *)global_logger();
    if (v28[169] <= 4)
    {
      if (cppipc::must_cancel((cppipc *)v28))
        log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
      v29 = (file_logger *)global_logger();
      v30 = (pthread_key_t *)file_logger::start_stream(v29, 4, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/ml/neural_net/mlc_compute_context.mm", "print_training_device_info", 92, 1);
      v31 = pthread_getspecific(v30[74]);
      if (v31 && *((_BYTE *)v31 + 280))
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31 + 2, (uint64_t)"Using ", 6);
      v32 = 0xAAAAAAAAAAAAAAABLL * (((char *)v48.__end_ - (char *)v48.__begin_) >> 3);
      if (v32 <= 1)
        v33 = "GPU";
      else
        v33 = "GPUs";
      v34 = (char *)pthread_getspecific(v30[74]);
      if (v34 && v34[280])
      {
        v35 = v34 + 16;
        if (v32 <= 1)
          v36 = 3;
        else
          v36 = 4;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)v33, v36);
        v37 = 2;
        if (v32 > 1)
          v37 = 3;
        if (v33[v37] == 10)
          file_logger::stream_flush((file_logger *)v30);
      }
      v38 = pthread_getspecific(v30[74]);
      if (v38 && *((_BYTE *)v38 + 280))
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38 + 2, (uint64_t)" to create model (", 18);
      if (SHIBYTE(__v.__end_) < 0)
      {
        std::string::__init_copy_ctor_external(&v41, (const std::string::value_type *)__v.__first_, (std::string::size_type)__v.__begin_);
      }
      else
      {
        *(_OWORD *)&v41.__r_.__value_.__l.__data_ = *(_OWORD *)&__v.__first_;
        v41.__r_.__value_.__r.__words[2] = (std::string::size_type)__v.__end_;
      }
      v39 = file_logger::operator<<<std::string>((uint64_t)v30, (uint64_t)&v41);
      v40 = pthread_getspecific(*(_QWORD *)(v39 + 592));
      if (v40 && *((_BYTE *)v40 + 280))
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40 + 2, (uint64_t)")", 1);
      if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v41.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__v.__end_) < 0)
      operator delete(__v.__first_);
  }
  __v.__first_ = (std::__split_buffer<std::string>::pointer)&v48;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
}

void sub_218331984(_Unwind_Exception *__p, uint64_t a2, int a3, __int16 a4, char a5, char a6, void *a7, uint64_t a8, int __pa, __int16 __p_4, char __p_6, char __p_7, uint64_t a13, uint64_t a14, char *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,std::__split_buffer<std::string> *a25,uint64_t a26,char a27)
{
  a15 = &a27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a15);
  _Unwind_Resume(__p);
}

void turi::neural_net::mlc_compute_context::create_style_transfer(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

id turi::neural_net::mlc_compute_context::GetDevice(turi::neural_net::mlc_compute_context *this)
{
  void *v1;

  v1 = (void *)*((_QWORD *)this + 1);
  if (v1)
    return v1;
  objc_msgSend(MEMORY[0x24BDDAAC8], "deviceWithType:", 2);
  return (id)objc_claimAutoreleasedReturnValue();
}

void _GLOBAL__sub_I_mlc_compute_context_mm()
{
  void *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD v8[3];
  _QWORD *v9;
  _QWORD v10[3];
  _QWORD *v11;
  _BYTE v12[24];
  _BYTE *v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v0 = (void *)MEMORY[0x219A19FE4]();
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  v1 = operator new();
  v13 = 0;
  v10[0] = &unk_24D9178B8;
  v11 = v10;
  v8[0] = &unk_24D9178B8;
  v9 = v8;
  turi::neural_net::compute_context::registration::registration(v1, 0, v12, v10, v8);
  v2 = v9;
  if (v9 == v8)
  {
    v3 = 4;
    v2 = v8;
  }
  else
  {
    if (!v9)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  v4 = v11;
  if (v11 == v10)
  {
    v5 = 4;
    v4 = v10;
  }
  else
  {
    if (!v11)
      goto LABEL_11;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_11:
  v6 = v13;
  if (v13 == v12)
  {
    v7 = 4;
    v6 = v12;
    goto LABEL_15;
  }
  if (v13)
  {
    v7 = 5;
LABEL_15:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  objc_autoreleasePoolPop(v0);
}

void sub_218331C20(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  va_list v5;
  va_list v7;
  uint64_t v8;
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  va_list v13;
  uint64_t v14;
  va_list va1;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, va_list);
  va_copy(va2, va1);
  v14 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v7 = v13;
  if (v13 == v5)
  {
    v8 = 4;
    va_copy(v7, va);
  }
  else
  {
    if (!v13)
      goto LABEL_6;
    v8 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v7 + 8 * v8))();
LABEL_6:
  _GLOBAL__sub_I_mlc_compute_context_mm_cold_1(v4, (uint64_t *)va1, v3, (uint64_t *)va2);
  MEMORY[0x219A19A08](v2, 0x1020C408A2B640DLL);
  _Unwind_Resume(a1);
}

uint64_t _GLOBAL__sub_I_int128_cc()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

unint64_t *_tc_google::protobuf::GoogleOnceInitImpl(unint64_t *result, uint64_t a2)
{
  unint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = atomic_load(result);
  if (v2 != 2)
  {
    v3 = result;
    do
      v4 = __ldxr(result);
    while (!v4 && __stxr(1uLL, result));
    __dmb(0xBu);
    if (v4)
    {
      while (v4 == 1)
      {
        result = (unint64_t *)sched_yield();
        v4 = atomic_load(v3);
      }
    }
    else
    {
      result = (unint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
      atomic_store(2uLL, v3);
    }
  }
  return result;
}

uint64_t _GLOBAL__sub_I_once_cc()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void CoreML::validate<(MLModelType)2000>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v3;
  _DWORD *v5;
  _DWORD *v6;
  _BOOL8 v7;
  uint64_t *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  _DWORD *v14;
  void *v15;
  __int128 v16;
  uint64_t v17;
  void *v18;
  __int128 __p;
  uint64_t v20;

  if (*(_QWORD *)(a1 + 16))
    v3 = *(uint64_t **)(a1 + 16);
  else
    v3 = &CoreML::Specification::_ModelDescription_default_instance_;
  if (*(_DWORD *)(a1 + 44) != 2000)
  {
    std::string::basic_string[abi:ne180100]<0>(&v18, "Model not a text classifier.");
    CoreML::Result::Result((_DWORD *)a2, 13);
    if ((SHIBYTE(__p) & 0x80000000) == 0)
      return;
    v9 = v18;
    goto LABEL_34;
  }
  CoreML::Result::Result((CoreML::Result *)&v18);
  v5 = operator new(4uLL);
  v12 = v5;
  *v5 = 3;
  v13 = v5 + 1;
  v14 = v5 + 1;
  CoreML::validateDescriptionsContainFeatureWithTypes<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>>((uint64_t)(v3 + 2), 1, (int **)&v12, (uint64_t)&v15);
  v18 = v15;
  if (SHIBYTE(v20) < 0)
    operator delete((void *)__p);
  __p = v16;
  v20 = v17;
  HIBYTE(v17) = 0;
  LOBYTE(v16) = 0;
  if (v12)
  {
    v13 = v12;
    operator delete(v12);
  }
  if (!CoreML::Result::good((CoreML::Result *)&v18))
    goto LABEL_31;
  v6 = operator new(4uLL);
  v12 = v6;
  *v6 = 3;
  v13 = v6 + 1;
  v14 = v6 + 1;
  CoreML::validateDescriptionsContainFeatureWithTypes<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>>((uint64_t)(v3 + 5), 1, (int **)&v12, (uint64_t)&v15);
  v18 = v15;
  if (SHIBYTE(v20) < 0)
    operator delete((void *)__p);
  __p = v16;
  v20 = v17;
  HIBYTE(v17) = 0;
  LOBYTE(v16) = 0;
  if (v12)
  {
    v13 = v12;
    operator delete(v12);
  }
  v7 = CoreML::Result::good((CoreML::Result *)&v18);
  if (!v7)
    goto LABEL_31;
  if (*(_DWORD *)(a1 + 44) == 2000)
    v8 = *(uint64_t **)(a1 + 32);
  else
    v8 = CoreML::Specification::CoreMLModels::TextClassifier::default_instance((CoreML::Specification::CoreMLModels::TextClassifier *)v7);
  if (!*((_DWORD *)v8 + 8))
  {
    std::string::basic_string[abi:ne180100]<0>(&v15, "Model revision number not set. Must be >= 1");
    CoreML::Result::Result((_DWORD *)a2, 13);
    goto LABEL_27;
  }
  if (*((_DWORD *)v8 + 13) != 200 || *(int *)(v8[5] + 24) <= 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&v15, "Model output class label not set. Must have at least one class label");
    CoreML::Result::Result((_DWORD *)a2, 13);
    goto LABEL_27;
  }
  v10 = v8[3];
  if (*(char *)(v10 + 23) < 0)
    v11 = *(_QWORD *)(v10 + 8);
  else
    v11 = *(unsigned __int8 *)(v10 + 23);
  if (!v11)
  {
    std::string::basic_string[abi:ne180100]<0>(&v15, "Model parameter data not set");
    CoreML::Result::Result((_DWORD *)a2, 13);
LABEL_27:
    if (SHIBYTE(v16) < 0)
      operator delete(v15);
    goto LABEL_32;
  }
LABEL_31:
  *(_QWORD *)a2 = v18;
  *(_OWORD *)(a2 + 8) = __p;
  *(_QWORD *)(a2 + 24) = v20;
  __p = 0uLL;
  v20 = 0;
LABEL_32:
  if ((SHIBYTE(v20) & 0x80000000) == 0)
    return;
  v9 = (void *)__p;
LABEL_34:
  operator delete(v9);
}

void sub_218332004(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21,int a22,__int16 a23,char a24,char a25,int a26,__int16 a27,char a28,char a29)
{
  if (a18 < 0)
    operator delete(__p);
  if (a29 < 0)
    operator delete(a21);
  _Unwind_Resume(exception_object);
}

uint64_t _GLOBAL__sub_I_TextClassifierValidator_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

double turi::neural_net::TaskQueue::GetGlobalConcurrentQueue@<D0>(_OWORD *a1@<X8>)
{
  double result;
  __int128 v4;

  turi::neural_net::GrandCentralDispatchQueue::GetGlobalConcurrentQueue(&v4);
  result = *(double *)&v4;
  *a1 = v4;
  return result;
}

uint64_t _GLOBAL__sub_I_TaskQueue_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

CoreML::Result *CoreML::validate<(MLModelType)402>@<X0>(CoreML::TreeEnsembles *a1@<X0>, CoreML::Result *a2@<X8>)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v7;
  std::__shared_weak_count *v8;

  CoreML::TreeEnsembles::constructAndValidateTreeEnsembleFromSpec(a1, &v7);
  v3 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return CoreML::Result::Result(a2);
}

CoreML::Result *CoreML::validate<(MLModelType)302>@<X0>(CoreML::TreeEnsembles *a1@<X0>, CoreML::Result *a2@<X8>)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v7;
  std::__shared_weak_count *v8;

  CoreML::TreeEnsembles::constructAndValidateTreeEnsembleFromSpec(a1, &v7);
  v3 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return CoreML::Result::Result(a2);
}

uint64_t _GLOBAL__sub_I_TreeEnsembleValidator_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void _tc_google::protobuf::util::Status::~Status(void **this)
{
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

uint64_t _tc_google::protobuf::util::Status::Status(uint64_t a1, int a2, void *__src, size_t __len)
{
  uint64_t v5;
  __int128 __dst;
  uint64_t v8;

  *(_DWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  v5 = a1 + 8;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  if (a2)
  {
    if (__src)
    {
      std::string::basic_string[abi:ne180100](&__dst, __src, __len);
      if (*(char *)(a1 + 31) < 0)
        operator delete(*(void **)v5);
    }
    else
    {
      __dst = 0uLL;
      v8 = 0;
    }
    *(_OWORD *)v5 = __dst;
    *(_QWORD *)(v5 + 16) = v8;
  }
  return a1;
}

void sub_2183323F8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t _GLOBAL__sub_I_status_cc()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  _tc_google::protobuf::util::Status::OK = 0;
  qword_254FFA1F8 = 0;
  unk_254FFA200 = 0;
  qword_254FFA1F0 = 0;
  __cxa_atexit((void (*)(void *))_tc_google::protobuf::util::Status::~Status, &_tc_google::protobuf::util::Status::OK, &dword_217E69000);
  _tc_google::protobuf::util::Status::Status((uint64_t)&_tc_google::protobuf::util::Status::CANCELLED, 1, "", 0);
  __cxa_atexit((void (*)(void *))_tc_google::protobuf::util::Status::~Status, &_tc_google::protobuf::util::Status::CANCELLED, &dword_217E69000);
  _tc_google::protobuf::util::Status::Status((uint64_t)&_tc_google::protobuf::util::Status::UNKNOWN, 2, "", 0);
  return __cxa_atexit((void (*)(void *))_tc_google::protobuf::util::Status::~Status, &_tc_google::protobuf::util::Status::UNKNOWN, &dword_217E69000);
}

uint64_t _GLOBAL__sub_I_statusor_cc()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

uint64_t _GLOBAL__sub_I_stringpiece_cc()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

uint64_t _tc_google::protobuf::StringAppendV(std::string *a1, char *__format, va_list a3)
{
  uint64_t result;
  int v6;
  char *v7;
  int v8;
  char __str[1024];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  result = vsnprintf(__str, 0x400uLL, __format, a3);
  v6 = result;
  if ((int)result > 1023)
  {
    v7 = (char *)operator new[]();
    v8 = vsnprintf(v7, (v6 + 1), __format, a3);
    if ((v8 & 0x80000000) == 0 && v8 <= v6)
      std::string::append(a1, v7, v8);
    return MEMORY[0x219A199F0](v7, 0x1000C8077774924);
  }
  else if ((result & 0x80000000) == 0)
  {
    return (uint64_t)std::string::append(a1, __str, result);
  }
  return result;
}

uint64_t _tc_google::protobuf::StringPrintf@<X0>(_tc_google::protobuf *this@<X0>, std::string *a2@<X8>, ...)
{
  va_list va;

  va_start(va, a2);
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return _tc_google::protobuf::StringAppendV(a2, (char *)this, va);
}

void sub_2183326AC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t _GLOBAL__sub_I_stringprintf_cc()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

uint64_t _tc_google::protobuf::internal::UTF8GenericScan(unsigned int *a1, _BYTE *a2, int a3, _DWORD *a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  char v10;
  _DWORD *v11;
  unint64_t v12;
  _DWORD *v13;
  _DWORD *v14;
  unint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  _BYTE *v20;

  *a4 = 0;
  if (!a3)
    return 241;
  v4 = (unint64_t)&a2[a3];
  v5 = v4 - 7;
  v6 = *((_QWORD *)a1 + 4) + *a1;
  v7 = *((_QWORD *)a1 + 7);
  v8 = a2;
  while (2)
  {
    v9 = v8 & 7;
    if ((v8 & 7) != 0 && (unint64_t)v8 < v4)
    {
      v10 = (_BYTE)v8 + 1;
      while (!*(_BYTE *)(v7 + *v8))
      {
        ++v8;
        v9 = v10 & 7;
        if ((v10 & 7) != 0)
        {
          ++v10;
          if ((unint64_t)v8 < v4)
            continue;
        }
        goto LABEL_9;
      }
LABEL_17:
      v11 = v8;
      goto LABEL_18;
    }
LABEL_9:
    if (v9 || (unint64_t)v8 >= v5)
      goto LABEL_17;
    v11 = v8 + 4;
    while (1)
    {
      v12 = *(v11 - 1);
      if (((((_DWORD)v12 - a1[6]) | ((_DWORD)v12 + a1[7]) | (*v11 - a1[6]) | (*v11 + a1[7])) & 0x80808080) != 0)
        break;
LABEL_15:
      v13 = v11 + 2;
      v14 = v11 + 1;
      v11 += 2;
      if ((unint64_t)v14 >= v5)
      {
        v11 = v13 - 1;
        goto LABEL_18;
      }
    }
    if (!(*(unsigned __int8 *)(v7 + BYTE1(v12)) | *(unsigned __int8 *)(v7 + v12) | *(unsigned __int8 *)(v7 + BYTE2(v12)) | *(unsigned __int8 *)(v7 + (v12 >> 24))))
    {
      if (*(unsigned __int8 *)(v7 + BYTE1(*v11)) | *(unsigned __int8 *)(v7 + *v11) | *(unsigned __int8 *)(v7 + BYTE2(*v11)) | *(unsigned __int8 *)(v7 + ((unint64_t)*v11 >> 24)))
        goto LABEL_18;
      goto LABEL_15;
    }
    --v11;
LABEL_18:
    if ((unint64_t)v11 < v4)
    {
      v15 = v4 - (_QWORD)v11;
      v16 = (char *)v11 - 1;
      v17 = *((_QWORD *)a1 + 4) + *a1;
      v8 = v11;
      while (1)
      {
        v18 = *(unsigned __int8 *)(v17 + *v8);
        if (v18 > 0xEF)
          break;
        ++v8;
        v17 = v6 + (int)((_DWORD)v18 << a1[4]);
        ++v16;
        if (!--v15)
        {
          LODWORD(v8) = v4;
          goto LABEL_29;
        }
      }
      if (a1[1] <= (int)v17 - (int)v6)
      {
        do
        {
          v8 = v16;
          if (v16 <= a2)
            break;
          --v16;
        }
        while ((*v8 & 0xC0) == 0x80);
      }
      if ((_DWORD)v18 != 253)
        goto LABEL_39;
      continue;
    }
    break;
  }
  LODWORD(v8) = (_DWORD)v11;
  LODWORD(v17) = a1[8] + *a1;
LABEL_29:
  if (a1[1] <= (int)v17 - (int)v6)
  {
    if ((unint64_t)v11 <= v4)
      v19 = (_DWORD *)v4;
    else
      v19 = v11;
    v20 = (char *)v19 - 1;
    do
    {
      v8 = v20;
      if (v20 <= a2)
        break;
      --v20;
    }
    while ((*v8 & 0xC0) == 0x80);
    v18 = 240;
  }
  else
  {
    v18 = 241;
  }
LABEL_39:
  *a4 = (_DWORD)v8 - (_DWORD)a2;
  return v18;
}

uint64_t _tc_google::protobuf::internal::UTF8GenericScanFastAscii(unsigned int *a1, unint64_t a2, int a3, _DWORD *a4)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t result;
  int v14;

  *a4 = 0;
  if (!a3)
    return 241;
  v8 = a2 + a3;
  v14 = 0;
  v9 = a2;
  do
  {
    v10 = v9 & 7;
    if ((v9 & 7) != 0 && v9 < v8)
    {
      v11 = v9 + 1;
      while ((*(char *)v9 & 0x80000000) == 0)
      {
        ++v9;
        v10 = v11 & 7;
        if ((v11 & 7) != 0)
        {
          ++v11;
          if (v9 < v8)
            continue;
        }
        goto LABEL_9;
      }
    }
    else
    {
LABEL_9:
      if (!v10)
      {
        while (v9 < v8 - 7 && ((*(_DWORD *)(v9 + 4) | *(_DWORD *)v9) & 0x80808080) == 0)
          v9 += 8;
      }
    }
    if (v9 < v8)
    {
      v12 = v8 - v9;
      while ((*(char *)v9 & 0x80000000) == 0)
      {
        ++v9;
        if (!--v12)
        {
          v9 = v8;
          break;
        }
      }
    }
    result = _tc_google::protobuf::internal::UTF8GenericScan(a1, (_BYTE *)(a2 + (int)v9 - (int)a2), a3 - ((int)v9 - (int)a2), &v14);
    v9 += v14;
  }
  while ((_DWORD)result == 253);
  *a4 = v9 - a2;
  return result;
}

BOOL _tc_google::protobuf::internal::IsStructurallyValidUTF8(_tc_google::protobuf::internal *this, const char *a2)
{
  int v2;
  int v4;

    return 1;
  v2 = (int)a2;
  v4 = 0;
  _tc_google::protobuf::internal::UTF8GenericScanFastAscii(_tc_google::protobuf::internal::utf8acceptnonsurrogates_obj, (unint64_t)this, (int)a2, &v4);
  return v4 == v2;
}

uint64_t _GLOBAL__sub_I_structurally_valid_cc()
{
  uint64_t result;

  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  result = __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  return result;
}

std::string *std::string::append[abi:ne180100]<std::__wrap_iter<char const*>,0>(std::string *this, char *a2, char *a3)
{
  char *v4;
  unint64_t v6;
  unint64_t v7;
  std::string::size_type size;
  std::string::size_type v9;
  std::string *v10;
  unint64_t v11;
  void **v12;
  std::string::size_type v13;
  std::string *v14;
  _BYTE *v15;
  char v16;
  std::string::size_type v17;
  void *__p[2];
  unsigned __int8 v20;

  v4 = a2;
  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  v7 = a3 - a2;
  if ((v6 & 0x80000000) != 0)
  {
    if (a3 == a2)
      return this;
    size = this->__r_.__value_.__l.__size_;
    v11 = this->__r_.__value_.__r.__words[2];
    v9 = (v11 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    v10 = (std::string *)this->__r_.__value_.__r.__words[0];
    v6 = HIBYTE(v11);
  }
  else
  {
    if (a3 == a2)
      return this;
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    v9 = 22;
    v10 = this;
  }
  if (v10 > (std::string *)v4 || (char *)&v10->__r_.__value_.__l.__data_ + size + 1 <= v4)
  {
    if (v9 - size < v7)
    {
      std::string::__grow_by(this, v9, size - v9 + v7, size, size, 0, 0);
      this->__r_.__value_.__l.__size_ = size;
      LOBYTE(v6) = *((_BYTE *)&this->__r_.__value_.__s + 23);
    }
    v14 = this;
    if ((v6 & 0x80) != 0)
      v14 = (std::string *)this->__r_.__value_.__r.__words[0];
    v15 = (char *)v14 + size;
    while (v4 != a3)
    {
      v16 = *v4++;
      *v15++ = v16;
    }
    *v15 = 0;
    v17 = v7 + size;
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
      this->__r_.__value_.__l.__size_ = v17;
    else
      *((_BYTE *)&this->__r_.__value_.__s + 23) = v17 & 0x7F;
  }
  else
  {
    std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<char *>,std::__wrap_iter<char *>>(__p, v4, a3, v7);
    if ((v20 & 0x80u) == 0)
      v12 = __p;
    else
      v12 = (void **)__p[0];
    if ((v20 & 0x80u) == 0)
      v13 = v20;
    else
      v13 = (std::string::size_type)__p[1];
    std::string::append(this, (const std::string::value_type *)v12, v13);
    if ((char)v20 < 0)
      operator delete(__p[0]);
  }
  return this;
}

void sub_218332C34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t _GLOBAL__sub_I_strutil_cc()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

uint64_t _tc_google::protobuf::internal::WireFormatLite::SkipField(_tc_google::protobuf::internal::WireFormatLite *this, _tc_google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  uint64_t result;
  int v4;
  char *v6;
  uint64_t v7;
  char *v8;
  unsigned int v9;
  int v10;
  BOOL v11;
  int v12;
  char v13;
  uint64_t Varint32Fallback;
  unsigned int v15;
  unint64_t v16;

  if (a2 < 8)
    return 0;
  v4 = (int)a2;
  result = 0;
  switch(a2 & 7)
  {
    case 0:
      v6 = *(char **)this;
      if (*(_QWORD *)this < *((_QWORD *)this + 1) && (*v6 & 0x80000000) == 0)
      {
        v7 = (uint64_t)(v6 + 1);
        goto LABEL_19;
      }
      _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this);
      return v13 & 1;
    case 1:
      v16 = 0;
      if ((int)(*((_DWORD *)this + 2) - *(_QWORD *)this) >= 8)
      {
        v7 = *(_QWORD *)this + 8;
        goto LABEL_19;
      }
      return _tc_google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((unint64_t **)this, &v16);
    case 2:
      v8 = *(char **)this;
      if (*(_QWORD *)this >= *((_QWORD *)this + 1))
      {
        v9 = 0;
      }
      else
      {
        v9 = *v8;
        if ((*v8 & 0x80000000) == 0)
        {
          *(_QWORD *)this = v8 + 1;
          return _tc_google::protobuf::io::CodedInputStream::Skip(this, v9);
        }
      }
      Varint32Fallback = _tc_google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v9);
      v9 = Varint32Fallback;
      if (Varint32Fallback < 0)
        return 0;
      return _tc_google::protobuf::io::CodedInputStream::Skip(this, v9);
    case 3:
      v10 = *((_DWORD *)this + 13);
      v11 = __OFSUB__(v10--, 1);
      *((_DWORD *)this + 13) = v10;
      if (v10 < 0 != v11)
        return 0;
      result = _tc_google::protobuf::internal::WireFormatLite::SkipMessage((char **)this, a2, a3);
      if ((_DWORD)result)
      {
        v12 = *((_DWORD *)this + 13);
        if (v12 < *((_DWORD *)this + 14))
          *((_DWORD *)this + 13) = v12 + 1;
        return *((_DWORD *)this + 8) == (v4 & 0xFFFFFFF8 | 4);
      }
      return result;
    case 5:
      v15 = 0;
      if ((int)(*((_DWORD *)this + 2) - *(_QWORD *)this) < 4)
        return _tc_google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback((unsigned int **)this, &v15);
      v7 = *(_QWORD *)this + 4;
LABEL_19:
      *(_QWORD *)this = v7;
      return 1;
    default:
      return result;
  }
}

uint64_t _tc_google::protobuf::internal::WireFormatLite::SkipMessage(char **this, _tc_google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  char *v4;
  unint64_t TagFallback;
  BOOL v6;
  uint64_t v7;

  do
  {
    v4 = *this;
    if (*this >= this[1])
    {
      TagFallback = 0;
    }
    else
    {
      TagFallback = *v4;
      if ((*v4 & 0x80000000) == 0)
      {
        *((_DWORD *)this + 8) = TagFallback;
        *this = v4 + 1;
        goto LABEL_6;
      }
    }
    TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)this, TagFallback);
    *((_DWORD *)this + 8) = TagFallback;
LABEL_6:
    if ((_DWORD)TagFallback)
      v6 = (TagFallback & 7) == 4;
    else
      v6 = 1;
    v7 = v6;
  }
  while (!v6
       && (_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)this, (_tc_google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) != 0);
  return v7;
}

uint64_t _tc_google::protobuf::internal::WireFormatLite::WriteFloatArray(_tc_google::protobuf::internal::WireFormatLite *this, const float *a2, _tc_google::protobuf::io::CodedOutputStream *a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  return _tc_google::protobuf::io::CodedOutputStream::WriteRaw(a3, (char *)this, 4 * (int)a2);
}

uint64_t _tc_google::protobuf::internal::WireFormatLite::WriteDoubleArray(_tc_google::protobuf::internal::WireFormatLite *this, const double *a2, _tc_google::protobuf::io::CodedOutputStream *a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  return _tc_google::protobuf::io::CodedOutputStream::WriteRaw(a3, (char *)this, 8 * (int)a2);
}

uint64_t _tc_google::protobuf::internal::WireFormatLite::WriteBoolArray(_tc_google::protobuf::internal::WireFormatLite *this, const BOOL *a2, _tc_google::protobuf::io::CodedOutputStream *a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  return _tc_google::protobuf::io::CodedOutputStream::WriteRaw(a3, (char *)this, (int)a2);
}

uint64_t _tc_google::protobuf::internal::WireFormatLite::WriteInt32(uint64_t this, signed int a2, _tc_google::protobuf::io::CodedOutputStream *a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  unsigned int v6;
  uint64_t v7;
  _BYTE *v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  unint64_t v16;
  unint64_t v17;
  int v18;

  v6 = 8 * this;
  if (*((int *)a3 + 4) < 5)
  {
    this = _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a3, v6);
    v11 = *((_DWORD *)a3 + 4);
  }
  else
  {
    v7 = *((_QWORD *)a3 + 1);
    if (v6 < 0x80)
    {
      LOBYTE(v9) = 8 * this;
      v8 = (_BYTE *)*((_QWORD *)a3 + 1);
    }
    else
    {
      v8 = (_BYTE *)*((_QWORD *)a3 + 1);
      do
      {
        *v8++ = v6 | 0x80;
        v9 = v6 >> 7;
        v10 = v6 >> 14;
        v6 >>= 7;
      }
      while (v10);
    }
    *v8 = v9;
    v12 = (_DWORD)v8 - v7 + 1;
    *((_QWORD *)a3 + 1) += v12;
    v11 = *((_DWORD *)a3 + 4) - v12;
    *((_DWORD *)a3 + 4) = v11;
  }
  v13 = a2;
  if (v11 < 10)
    return _tc_google::protobuf::io::CodedOutputStream::WriteVarint64SlowPath(a3, a2);
  v14 = *((_QWORD *)a3 + 1);
  if (a2 < 0x80)
  {
    LOBYTE(v16) = a2;
    v15 = (_BYTE *)*((_QWORD *)a3 + 1);
  }
  else
  {
    v15 = (_BYTE *)*((_QWORD *)a3 + 1);
    do
    {
      *v15++ = v13 | 0x80;
      v16 = v13 >> 7;
      v17 = v13 >> 14;
      v13 >>= 7;
    }
    while (v17);
  }
  *v15 = v16;
  v18 = (_DWORD)v15 - v14 + 1;
  *((_QWORD *)a3 + 1) += v18;
  *((_DWORD *)a3 + 4) -= v18;
  return this;
}

uint64_t _tc_google::protobuf::internal::WireFormatLite::WriteInt64(uint64_t this, unint64_t a2, _tc_google::protobuf::io::CodedOutputStream *a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  unsigned int v6;
  uint64_t v7;
  _BYTE *v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  int v12;
  uint64_t v13;
  _BYTE *v14;
  unint64_t v15;
  unint64_t v16;
  int v17;

  v6 = 8 * this;
  if (*((int *)a3 + 4) < 5)
  {
    this = _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a3, v6);
    v11 = *((_DWORD *)a3 + 4);
  }
  else
  {
    v7 = *((_QWORD *)a3 + 1);
    if (v6 < 0x80)
    {
      LOBYTE(v9) = 8 * this;
      v8 = (_BYTE *)*((_QWORD *)a3 + 1);
    }
    else
    {
      v8 = (_BYTE *)*((_QWORD *)a3 + 1);
      do
      {
        *v8++ = v6 | 0x80;
        v9 = v6 >> 7;
        v10 = v6 >> 14;
        v6 >>= 7;
      }
      while (v10);
    }
    *v8 = v9;
    v12 = (_DWORD)v8 - v7 + 1;
    *((_QWORD *)a3 + 1) += v12;
    v11 = *((_DWORD *)a3 + 4) - v12;
    *((_DWORD *)a3 + 4) = v11;
  }
  if (v11 < 10)
    return _tc_google::protobuf::io::CodedOutputStream::WriteVarint64SlowPath(a3, a2);
  v13 = *((_QWORD *)a3 + 1);
  if (a2 < 0x80)
  {
    LOBYTE(v15) = a2;
    v14 = (_BYTE *)*((_QWORD *)a3 + 1);
  }
  else
  {
    v14 = (_BYTE *)*((_QWORD *)a3 + 1);
    do
    {
      *v14++ = a2 | 0x80;
      v15 = a2 >> 7;
      v16 = a2 >> 14;
      a2 >>= 7;
    }
    while (v16);
  }
  *v14 = v15;
  v17 = (_DWORD)v14 - v13 + 1;
  *((_QWORD *)a3 + 1) += v17;
  *((_DWORD *)a3 + 4) -= v17;
  return this;
}

uint64_t _tc_google::protobuf::internal::WireFormatLite::WriteUInt32(uint64_t this, unsigned int a2, _tc_google::protobuf::io::CodedOutputStream *a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  unsigned int v6;
  uint64_t v7;
  _BYTE *v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  int v12;
  uint64_t v13;
  _BYTE *v14;
  unsigned int v15;
  unsigned int v16;
  int v17;

  v6 = 8 * this;
  if (*((int *)a3 + 4) < 5)
  {
    this = _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a3, v6);
    v11 = *((_DWORD *)a3 + 4);
  }
  else
  {
    v7 = *((_QWORD *)a3 + 1);
    if (v6 < 0x80)
    {
      LOBYTE(v9) = 8 * this;
      v8 = (_BYTE *)*((_QWORD *)a3 + 1);
    }
    else
    {
      v8 = (_BYTE *)*((_QWORD *)a3 + 1);
      do
      {
        *v8++ = v6 | 0x80;
        v9 = v6 >> 7;
        v10 = v6 >> 14;
        v6 >>= 7;
      }
      while (v10);
    }
    *v8 = v9;
    v12 = (_DWORD)v8 - v7 + 1;
    *((_QWORD *)a3 + 1) += v12;
    v11 = *((_DWORD *)a3 + 4) - v12;
    *((_DWORD *)a3 + 4) = v11;
  }
  if (v11 < 5)
    return _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a3, a2);
  v13 = *((_QWORD *)a3 + 1);
  if (a2 < 0x80)
  {
    LOBYTE(v15) = a2;
    v14 = (_BYTE *)*((_QWORD *)a3 + 1);
  }
  else
  {
    v14 = (_BYTE *)*((_QWORD *)a3 + 1);
    do
    {
      *v14++ = a2 | 0x80;
      v15 = a2 >> 7;
      v16 = a2 >> 14;
      a2 >>= 7;
    }
    while (v16);
  }
  *v14 = v15;
  v17 = (_DWORD)v14 - v13 + 1;
  *((_QWORD *)a3 + 1) += v17;
  *((_DWORD *)a3 + 4) -= v17;
  return this;
}

uint64_t _tc_google::protobuf::internal::WireFormatLite::WriteFloat(_tc_google::protobuf::internal::WireFormatLite *this, _tc_google::protobuf::io::CodedOutputStream *a2, float a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  unsigned int v6;
  uint64_t v7;
  _BYTE *v8;
  unsigned int v9;
  unsigned int v10;
  int v11;

  v6 = (8 * (_DWORD)this) | 5;
  if (*((int *)a2 + 4) < 5)
  {
    _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, v6);
  }
  else
  {
    v7 = *((_QWORD *)a2 + 1);
    if (v6 < 0x80)
    {
      LOBYTE(v9) = (8 * (_BYTE)this) | 5;
      v8 = (_BYTE *)*((_QWORD *)a2 + 1);
    }
    else
    {
      v8 = (_BYTE *)*((_QWORD *)a2 + 1);
      do
      {
        *v8++ = v6 | 0x80;
        v9 = v6 >> 7;
        v10 = v6 >> 14;
        v6 >>= 7;
      }
      while (v10);
    }
    *v8 = v9;
    v11 = (_DWORD)v8 - v7 + 1;
    *((_QWORD *)a2 + 1) += v11;
    *((_DWORD *)a2 + 4) -= v11;
  }
  return _tc_google::protobuf::io::CodedOutputStream::WriteLittleEndian32((uint64_t)a2, SLODWORD(a3));
}

uint64_t _tc_google::protobuf::internal::WireFormatLite::WriteDouble(_tc_google::protobuf::internal::WireFormatLite *this, _tc_google::protobuf::io::CodedOutputStream *a2, double a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  unsigned int v6;
  uint64_t v7;
  _BYTE *v8;
  unsigned int v9;
  unsigned int v10;
  int v11;

  v6 = (8 * (_DWORD)this) | 1;
  if (*((int *)a2 + 4) < 5)
  {
    _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, v6);
  }
  else
  {
    v7 = *((_QWORD *)a2 + 1);
    if (v6 < 0x80)
    {
      LOBYTE(v9) = (8 * (_BYTE)this) | 1;
      v8 = (_BYTE *)*((_QWORD *)a2 + 1);
    }
    else
    {
      v8 = (_BYTE *)*((_QWORD *)a2 + 1);
      do
      {
        *v8++ = v6 | 0x80;
        v9 = v6 >> 7;
        v10 = v6 >> 14;
        v6 >>= 7;
      }
      while (v10);
    }
    *v8 = v9;
    v11 = (_DWORD)v8 - v7 + 1;
    *((_QWORD *)a2 + 1) += v11;
    *((_DWORD *)a2 + 4) -= v11;
  }
  return _tc_google::protobuf::io::CodedOutputStream::WriteLittleEndian64((uint64_t)a2, *(uint64_t *)&a3);
}

uint64_t _tc_google::protobuf::internal::WireFormatLite::WriteBool(uint64_t this, unsigned int a2, _tc_google::protobuf::io::CodedOutputStream *a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  unsigned int v6;
  uint64_t v7;
  _BYTE *v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  int v12;

  v6 = 8 * this;
  if (*((int *)a3 + 4) < 5)
  {
    this = _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a3, v6);
    v11 = *((_DWORD *)a3 + 4);
  }
  else
  {
    v7 = *((_QWORD *)a3 + 1);
    if (v6 < 0x80)
    {
      LOBYTE(v9) = 8 * this;
      v8 = (_BYTE *)*((_QWORD *)a3 + 1);
    }
    else
    {
      v8 = (_BYTE *)*((_QWORD *)a3 + 1);
      do
      {
        *v8++ = v6 | 0x80;
        v9 = v6 >> 7;
        v10 = v6 >> 14;
        v6 >>= 7;
      }
      while (v10);
    }
    *v8 = v9;
    v12 = (_DWORD)v8 - v7 + 1;
    *((_QWORD *)a3 + 1) += v12;
    v11 = *((_DWORD *)a3 + 4) - v12;
    *((_DWORD *)a3 + 4) = v11;
  }
  if (v11 < 5)
    return _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a3, a2);
  *(_BYTE *)(*((_QWORD *)a3 + 1))++ = a2;
  --*((_DWORD *)a3 + 4);
  return this;
}

uint64_t _tc_google::protobuf::internal::WireFormatLite::WriteString(int a1, uint64_t a2, _tc_google::protobuf::io::CodedOutputStream *this)
{
  unsigned int v5;
  uint64_t v6;
  _BYTE *v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  std::string *v12;
  unsigned int v13;
  uint64_t v14;
  _BYTE *v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  int v19;
  char *v20;
  int v21;
  char v23;
  std::string v24[2];

  v5 = (8 * a1) | 2;
  if (*((int *)this + 4) < 5)
  {
    _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(this, v5);
  }
  else
  {
    v6 = *((_QWORD *)this + 1);
    if (v5 < 0x80)
    {
      LOBYTE(v8) = (8 * a1) | 2;
      v7 = (_BYTE *)*((_QWORD *)this + 1);
    }
    else
    {
      v7 = (_BYTE *)*((_QWORD *)this + 1);
      do
      {
        *v7++ = v5 | 0x80;
        v8 = v5 >> 7;
        v9 = v5 >> 14;
        v5 >>= 7;
      }
      while (v9);
    }
    *v7 = v8;
    v10 = (_DWORD)v7 - v6 + 1;
    *((_QWORD *)this + 1) += v10;
    *((_DWORD *)this + 4) -= v10;
  }
  v11 = *(char *)(a2 + 23);
  if (v11 < 0 && *(_QWORD *)(a2 + 8) >> 31)
  {
    _tc_google::protobuf::internal::LogMessage::LogMessage((uint64_t)v24, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/external/google/protobuf/wire_format_lite.cc", 510);
    v12 = _tc_google::protobuf::internal::LogMessage::operator<<(v24, "CHECK failed: (value.size()) <= (kint32max): ");
    _tc_google::protobuf::internal::LogFinisher::operator=((uint64_t)&v23, (_tc_google::protobuf::internal::LogMessage *)v12);
    _tc_google::protobuf::internal::LogMessage::~LogMessage((void **)&v24[0].__r_.__value_.__l.__data_);
    LOBYTE(v11) = *(_BYTE *)(a2 + 23);
  }
  if ((v11 & 0x80u) == 0)
    v13 = v11;
  else
    v13 = *(_DWORD *)(a2 + 8);
  if (*((int *)this + 4) < 5)
  {
    _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(this, v13);
  }
  else
  {
    v14 = *((_QWORD *)this + 1);
    if (v13 < 0x80)
    {
      LOBYTE(v16) = v13;
      v15 = (_BYTE *)*((_QWORD *)this + 1);
    }
    else
    {
      v15 = (_BYTE *)*((_QWORD *)this + 1);
      do
      {
        *v15++ = v13 | 0x80;
        v16 = v13 >> 7;
        v17 = v13 >> 14;
        v13 >>= 7;
      }
      while (v17);
    }
    *v15 = v16;
    v18 = (_DWORD)v15 - v14 + 1;
    *((_QWORD *)this + 1) += v18;
    *((_DWORD *)this + 4) -= v18;
  }
  v19 = *(char *)(a2 + 23);
  if (v19 >= 0)
    v20 = (char *)a2;
  else
    v20 = *(char **)a2;
  if (v19 >= 0)
    v21 = *(unsigned __int8 *)(a2 + 23);
  else
    v21 = *(_DWORD *)(a2 + 8);
  return _tc_google::protobuf::io::CodedOutputStream::WriteRaw(this, v20, v21);
}

void sub_2183335B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _tc_google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t _tc_google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(int a1, uint64_t a2, _tc_google::protobuf::io::CodedOutputStream *this)
{
  unsigned int v5;
  uint64_t v6;
  _BYTE *v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  std::string *v12;
  unsigned int v13;
  uint64_t v14;
  _BYTE *v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  int v19;
  char *v20;
  uint64_t v21;
  char v23;
  std::string v24[2];

  v5 = (8 * a1) | 2;
  if (*((int *)this + 4) < 5)
  {
    _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(this, v5);
  }
  else
  {
    v6 = *((_QWORD *)this + 1);
    if (v5 < 0x80)
    {
      LOBYTE(v8) = (8 * a1) | 2;
      v7 = (_BYTE *)*((_QWORD *)this + 1);
    }
    else
    {
      v7 = (_BYTE *)*((_QWORD *)this + 1);
      do
      {
        *v7++ = v5 | 0x80;
        v8 = v5 >> 7;
        v9 = v5 >> 14;
        v5 >>= 7;
      }
      while (v9);
    }
    *v7 = v8;
    v10 = (_DWORD)v7 - v6 + 1;
    *((_QWORD *)this + 1) += v10;
    *((_DWORD *)this + 4) -= v10;
  }
  v11 = *(char *)(a2 + 23);
  if (v11 < 0 && *(_QWORD *)(a2 + 8) >> 31)
  {
    _tc_google::protobuf::internal::LogMessage::LogMessage((uint64_t)v24, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/external/google/protobuf/wire_format_lite.cc", 519);
    v12 = _tc_google::protobuf::internal::LogMessage::operator<<(v24, "CHECK failed: (value.size()) <= (kint32max): ");
    _tc_google::protobuf::internal::LogFinisher::operator=((uint64_t)&v23, (_tc_google::protobuf::internal::LogMessage *)v12);
    _tc_google::protobuf::internal::LogMessage::~LogMessage((void **)&v24[0].__r_.__value_.__l.__data_);
    LOBYTE(v11) = *(_BYTE *)(a2 + 23);
  }
  if ((v11 & 0x80u) == 0)
    v13 = v11;
  else
    v13 = *(_DWORD *)(a2 + 8);
  if (*((int *)this + 4) < 5)
  {
    _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(this, v13);
  }
  else
  {
    v14 = *((_QWORD *)this + 1);
    if (v13 < 0x80)
    {
      LOBYTE(v16) = v13;
      v15 = (_BYTE *)*((_QWORD *)this + 1);
    }
    else
    {
      v15 = (_BYTE *)*((_QWORD *)this + 1);
      do
      {
        *v15++ = v13 | 0x80;
        v16 = v13 >> 7;
        v17 = v13 >> 14;
        v13 >>= 7;
      }
      while (v17);
    }
    *v15 = v16;
    v18 = (_DWORD)v15 - v14 + 1;
    *((_QWORD *)this + 1) += v18;
    *((_DWORD *)this + 4) -= v18;
  }
  v19 = *(char *)(a2 + 23);
  if (v19 >= 0)
    v20 = (char *)a2;
  else
    v20 = *(char **)a2;
  if (v19 >= 0)
    v21 = *(unsigned __int8 *)(a2 + 23);
  else
    v21 = *(unsigned int *)(a2 + 8);
  if (*((_BYTE *)this + 25))
    return _tc_google::protobuf::io::CodedOutputStream::WriteAliasedRaw(this, v20, v21);
  else
    return _tc_google::protobuf::io::CodedOutputStream::WriteRaw(this, v20, v21);
}

void sub_21833377C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _tc_google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t _tc_google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(int a1, uint64_t a2, _tc_google::protobuf::io::CodedOutputStream *this)
{
  unsigned int v5;
  uint64_t v6;
  _BYTE *v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  std::string *v12;
  unsigned int v13;
  uint64_t v14;
  _BYTE *v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  int v19;
  char *v20;
  uint64_t v21;
  char v23;
  std::string v24[2];

  v5 = (8 * a1) | 2;
  if (*((int *)this + 4) < 5)
  {
    _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(this, v5);
  }
  else
  {
    v6 = *((_QWORD *)this + 1);
    if (v5 < 0x80)
    {
      LOBYTE(v8) = (8 * a1) | 2;
      v7 = (_BYTE *)*((_QWORD *)this + 1);
    }
    else
    {
      v7 = (_BYTE *)*((_QWORD *)this + 1);
      do
      {
        *v7++ = v5 | 0x80;
        v8 = v5 >> 7;
        v9 = v5 >> 14;
        v5 >>= 7;
      }
      while (v9);
    }
    *v7 = v8;
    v10 = (_DWORD)v7 - v6 + 1;
    *((_QWORD *)this + 1) += v10;
    *((_DWORD *)this + 4) -= v10;
  }
  v11 = *(char *)(a2 + 23);
  if (v11 < 0 && *(_QWORD *)(a2 + 8) >> 31)
  {
    _tc_google::protobuf::internal::LogMessage::LogMessage((uint64_t)v24, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/external/google/protobuf/wire_format_lite.cc", 534);
    v12 = _tc_google::protobuf::internal::LogMessage::operator<<(v24, "CHECK failed: (value.size()) <= (kint32max): ");
    _tc_google::protobuf::internal::LogFinisher::operator=((uint64_t)&v23, (_tc_google::protobuf::internal::LogMessage *)v12);
    _tc_google::protobuf::internal::LogMessage::~LogMessage((void **)&v24[0].__r_.__value_.__l.__data_);
    LOBYTE(v11) = *(_BYTE *)(a2 + 23);
  }
  if ((v11 & 0x80u) == 0)
    v13 = v11;
  else
    v13 = *(_DWORD *)(a2 + 8);
  if (*((int *)this + 4) < 5)
  {
    _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(this, v13);
  }
  else
  {
    v14 = *((_QWORD *)this + 1);
    if (v13 < 0x80)
    {
      LOBYTE(v16) = v13;
      v15 = (_BYTE *)*((_QWORD *)this + 1);
    }
    else
    {
      v15 = (_BYTE *)*((_QWORD *)this + 1);
      do
      {
        *v15++ = v13 | 0x80;
        v16 = v13 >> 7;
        v17 = v13 >> 14;
        v13 >>= 7;
      }
      while (v17);
    }
    *v15 = v16;
    v18 = (_DWORD)v15 - v14 + 1;
    *((_QWORD *)this + 1) += v18;
    *((_DWORD *)this + 4) -= v18;
  }
  v19 = *(char *)(a2 + 23);
  if (v19 >= 0)
    v20 = (char *)a2;
  else
    v20 = *(char **)a2;
  if (v19 >= 0)
    v21 = *(unsigned __int8 *)(a2 + 23);
  else
    v21 = *(unsigned int *)(a2 + 8);
  if (*((_BYTE *)this + 25))
    return _tc_google::protobuf::io::CodedOutputStream::WriteAliasedRaw(this, v20, v21);
  else
    return _tc_google::protobuf::io::CodedOutputStream::WriteRaw(this, v20, v21);
}

void sub_218333944(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _tc_google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t _tc_google::protobuf::internal::WireFormatLite::WriteMessage(_tc_google::protobuf::internal::WireFormatLite *this, uint64_t a2, const _tc_google::protobuf::MessageLite *a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  unsigned int v6;
  uint64_t v7;
  _BYTE *v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  _BYTE *v15;
  unsigned int v16;
  unsigned int v17;
  int v18;

  v6 = (8 * (_DWORD)this) | 2;
  if (*((int *)a3 + 4) < 5)
  {
    _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a3, v6);
  }
  else
  {
    v7 = *((_QWORD *)a3 + 1);
    if (v6 < 0x80)
    {
      LOBYTE(v9) = (8 * (_BYTE)this) | 2;
      v8 = (_BYTE *)*((_QWORD *)a3 + 1);
    }
    else
    {
      v8 = (_BYTE *)*((_QWORD *)a3 + 1);
      do
      {
        *v8++ = v6 | 0x80;
        v9 = v6 >> 7;
        v10 = v6 >> 14;
        v6 >>= 7;
      }
      while (v10);
    }
    *v8 = v9;
    v11 = (_DWORD)v8 - v7 + 1;
    *((_QWORD *)a3 + 1) += v11;
    *((_DWORD *)a3 + 4) -= v11;
  }
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 120))(a2);
  v13 = v12;
  if (*((int *)a3 + 4) < 5)
  {
    _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a3, v12);
  }
  else
  {
    v14 = *((_QWORD *)a3 + 1);
    if (v12 < 0x80)
    {
      LOBYTE(v16) = v12;
      v15 = (_BYTE *)*((_QWORD *)a3 + 1);
    }
    else
    {
      v15 = (_BYTE *)*((_QWORD *)a3 + 1);
      do
      {
        *v15++ = v13 | 0x80;
        v16 = v13 >> 7;
        v17 = v13 >> 14;
        v13 >>= 7;
      }
      while (v17);
    }
    *v15 = v16;
    v18 = (_DWORD)v15 - v14 + 1;
    *((_QWORD *)a3 + 1) += v18;
    *((_DWORD *)a3 + 4) -= v18;
  }
  return (*(uint64_t (**)(uint64_t, const _tc_google::protobuf::MessageLite *))(*(_QWORD *)a2 + 104))(a2, a3);
}

uint64_t _tc_google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(_tc_google::protobuf::internal::WireFormatLite *this, uint64_t a2, const _tc_google::protobuf::MessageLite *a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  unsigned int v6;
  uint64_t v7;
  _BYTE *v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  signed int v13;
  uint64_t v14;
  _BYTE *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  int v20;
  BOOL v21;
  int v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v26;

  v6 = (8 * (_DWORD)this) | 2;
  if (*((int *)a3 + 4) < 5)
  {
    _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a3, v6);
  }
  else
  {
    v7 = *((_QWORD *)a3 + 1);
    if (v6 < 0x80)
    {
      LOBYTE(v9) = (8 * (_BYTE)this) | 2;
      v8 = (_BYTE *)*((_QWORD *)a3 + 1);
    }
    else
    {
      v8 = (_BYTE *)*((_QWORD *)a3 + 1);
      do
      {
        *v8++ = v6 | 0x80;
        v9 = v6 >> 7;
        v10 = v6 >> 14;
        v6 >>= 7;
      }
      while (v10);
    }
    *v8 = v9;
    v11 = (_DWORD)v8 - v7 + 1;
    *((_QWORD *)a3 + 1) += v11;
    *((_DWORD *)a3 + 4) -= v11;
  }
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 120))(a2);
  v13 = v12;
  if (*((int *)a3 + 4) < 5)
  {
    _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a3, v12);
    v19 = *((_DWORD *)a3 + 4);
  }
  else
  {
    v14 = *((_QWORD *)a3 + 1);
    if (v12 < 0x80)
    {
      LOBYTE(v17) = v12;
      v15 = (_BYTE *)*((_QWORD *)a3 + 1);
    }
    else
    {
      v15 = (_BYTE *)*((_QWORD *)a3 + 1);
      v16 = v12;
      do
      {
        *v15++ = v16 | 0x80;
        v17 = v16 >> 7;
        v18 = v16 >> 14;
        v16 >>= 7;
      }
      while (v18);
    }
    *v15 = v17;
    v20 = (_DWORD)v15 - v14 + 1;
    *((_QWORD *)a3 + 1) += v20;
    v19 = *((_DWORD *)a3 + 4) - v20;
    *((_DWORD *)a3 + 4) = v19;
  }
  v21 = __OFSUB__(v19, v13);
  v22 = v19 - v13;
  if (v22 < 0 != v21)
    return (*(uint64_t (**)(uint64_t, const _tc_google::protobuf::MessageLite *))(*(_QWORD *)a2 + 104))(a2, a3);
  v23 = *((_QWORD *)a3 + 1);
  *((_QWORD *)a3 + 1) = v23 + v13;
  *((_DWORD *)a3 + 4) = v22;
  if (!v23)
    return (*(uint64_t (**)(uint64_t, const _tc_google::protobuf::MessageLite *))(*(_QWORD *)a2 + 104))(a2, a3);
  if (*((_BYTE *)a3 + 26))
    v24 = *((_BYTE *)a3 + 27) == 0;
  else
    v24 = _tc_google::protobuf::io::CodedOutputStream::default_serialization_deterministic_ == 0;
  v26 = !v24;
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, v26);
}

BOOL _tc_google::protobuf::internal::WireFormatLite::ReadBytes(char **this, std::string *a2)
{
  char *v4;
  char *v5;
  std::string::size_type v6;
  unsigned __int8 *v7;
  size_t v9;
  uint64_t Varint32Fallback;

  v5 = *this;
  v4 = this[1];
  if (*this >= v4)
  {
    LODWORD(v6) = 0;
  }
  else
  {
    v6 = *v5;
    if ((*v5 & 0x80000000) == 0)
    {
      v7 = (unsigned __int8 *)(v5 + 1);
      *this = (char *)v7;
      goto LABEL_4;
    }
  }
  Varint32Fallback = _tc_google::protobuf::io::CodedInputStream::ReadVarint32Fallback((_tc_google::protobuf::io::CodedInputStream *)this, v6);
  if ((Varint32Fallback & 0x8000000080000000) != 0)
    return 0;
  v6 = Varint32Fallback;
  v7 = (unsigned __int8 *)*this;
  v4 = this[1];
LABEL_4:
  if ((int)v6 > (int)v4 - (int)v7)
    return _tc_google::protobuf::io::CodedInputStream::ReadStringFallback((_tc_google::protobuf::io::CodedInputStream *)this, a2, v6);
  v9 = v6;
  std::string::resize(a2, v6, 0);
  if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
    a2 = (std::string *)a2->__r_.__value_.__r.__words[0];
  memcpy(a2, *this, v9);
  *this += v9;
  return 1;
}

BOOL _tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String(_tc_google::protobuf::internal *a1, const char *a2, int a3, uint64_t a4)
{
  _BOOL8 IsStructurallyValidUTF8;
  const char *v7;
  const std::string::value_type *v8;
  std::string *v9;
  std::string *v10;
  std::string *v11;
  std::string *v12;
  std::string *v13;
  std::string *v14;
  std::string *v15;
  std::string *v16;
  char v18;
  std::string v19[2];
  std::string __p;

  IsStructurallyValidUTF8 = _tc_google::protobuf::internal::IsStructurallyValidUTF8(a1, a2);
  if (!IsStructurallyValidUTF8)
  {
    v7 = "serializing";
    if (a3 != 1)
      v7 = 0;
    if (a3)
      v8 = v7;
    else
      v8 = "parsing";
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    if (a4)
    {
      _tc_google::protobuf::StringPrintf((_tc_google::protobuf *)" '%s'", v19, a4);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      __p = v19[0];
    }
    _tc_google::protobuf::internal::LogMessage::LogMessage((uint64_t)v19, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/external/google/protobuf/wire_format_lite.cc", 629);
    v9 = _tc_google::protobuf::internal::LogMessage::operator<<(v19, "String field");
    v10 = _tc_google::protobuf::internal::LogMessage::operator<<(v9, (const std::string::value_type *)&__p);
    v11 = _tc_google::protobuf::internal::LogMessage::operator<<(v10, " contains invalid ");
    v12 = _tc_google::protobuf::internal::LogMessage::operator<<(v11, "UTF-8 data when ");
    v13 = _tc_google::protobuf::internal::LogMessage::operator<<(v12, v8);
    v14 = _tc_google::protobuf::internal::LogMessage::operator<<(v13, " a protocol ");
    v15 = _tc_google::protobuf::internal::LogMessage::operator<<(v14, "buffer. Use the 'bytes' type if you intend to send raw ");
    v16 = _tc_google::protobuf::internal::LogMessage::operator<<(v15, "bytes. ");
    _tc_google::protobuf::internal::LogFinisher::operator=((uint64_t)&v18, (_tc_google::protobuf::internal::LogMessage *)v16);
    _tc_google::protobuf::internal::LogMessage::~LogMessage((void **)&v19[0].__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  return IsStructurallyValidUTF8;
}

void sub_218333E40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t _tc_google::protobuf::internal::WireFormatLite::Int32Size(unsigned int *a1)
{
  uint64_t v1;
  uint64_t result;
  int *v4;
  int v5;
  int v6;
  uint64_t v7;

  v1 = *a1;
  if ((int)v1 < 1)
    return 0;
  result = 0;
  v4 = (int *)(*((_QWORD *)a1 + 1) + 8);
  do
  {
    v6 = *v4++;
    v5 = v6;
    if (v6 < 0)
      v7 = 10;
    else
      v7 = (9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6;
    result += v7;
    --v1;
  }
  while (v1);
  return result;
}

uint64_t _GLOBAL__sub_I_wire_format_lite_cc()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

uint64_t jpeg_abort(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(result + 8);
  if (v1)
  {
    v2 = result;
    result = (*(uint64_t (**)(void))(v1 + 72))();
    if (*(_DWORD *)(v2 + 32))
    {
      *(_DWORD *)(v2 + 36) = 200;
      *(_QWORD *)(v2 + 408) = 0;
    }
    else
    {
      *(_DWORD *)(v2 + 36) = 100;
    }
  }
  return result;
}

uint64_t jpeg_destroy(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = result;
  v2 = *(_QWORD *)(result + 8);
  if (v2)
    result = (*(uint64_t (**)(uint64_t))(v2 + 80))(result);
  *(_QWORD *)(v1 + 8) = 0;
  *(_DWORD *)(v1 + 36) = 0;
  return result;
}

uint64_t jpeg_alloc_quant_table(uint64_t a1)
{
  uint64_t result;

  result = (**(uint64_t (***)(void))(a1 + 8))();
  *(_DWORD *)(result + 128) = 0;
  return result;
}

uint64_t jpeg_alloc_huff_table(uint64_t a1)
{
  uint64_t result;

  result = (**(uint64_t (***)(void))(a1 + 8))();
  *(_DWORD *)(result + 276) = 0;
  return result;
}

uint64_t jpeg_std_huff_table(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char *v8;
  void *v9;
  void *v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint8x16_t v14;
  uint16x8_t v15;
  uint16x8_t v16;
  unsigned int v17;
  size_t v18;
  void (**v19)(uint64_t);
  void (**v20)(uint64_t);

  v4 = a1 + 192;
  if (a2)
    v4 = a1 + 160;
  v5 = a1 + 264;
  if (a2)
    v5 = a1 + 232;
  if (*(_DWORD *)(a1 + 32))
    v6 = v5;
  else
    v6 = v4;
  if (a3 == 1)
  {
    v7 = a2 == 0;
    if (a2)
      v8 = (char *)&jpeg_std_huff_table_bits_dc_chrominance;
    else
      v8 = (char *)&jpeg_std_huff_table_bits_ac_chrominance;
    v9 = &jpeg_std_huff_table_val_dc_chrominance;
    v10 = &jpeg_std_huff_table_val_ac_chrominance;
LABEL_18:
    if (v7)
      v11 = v10;
    else
      v11 = v9;
    v12 = *(_QWORD *)(v6 + 8 * a3);
    if (!v12)
    {
      v13 = a3;
      v12 = (**(uint64_t (***)(uint64_t, _QWORD, uint64_t))(a1 + 8))(a1, 0, 280);
      *(_DWORD *)(v12 + 276) = 0;
      *(_QWORD *)(v6 + 8 * v13) = v12;
    }
    *(_OWORD *)v12 = *(_OWORD *)v8;
    *(_BYTE *)(v12 + 16) = v8[16];
    v14 = *(uint8x16_t *)(v8 + 1);
    v15 = vmovl_high_u8(v14);
    v16 = vmovl_u8(*(uint8x8_t *)v14.i8);
    v17 = vaddvq_s32(vaddq_s32((int32x4_t)vaddl_u16(*(uint16x4_t *)v16.i8, *(uint16x4_t *)v15.i8), (int32x4_t)vaddl_high_u16(v16, v15)));
    v18 = v17;
    if (v17 < 0x101)
    {
      if (!v17)
      {
LABEL_28:
        *(_DWORD *)(v12 + 276) = 0;
        return v12;
      }
    }
    else
    {
      v19 = *(void (***)(uint64_t))a1;
      *((_DWORD *)v19 + 10) = 9;
      (*v19)(a1);
    }
    memcpy((void *)(v12 + 17), v11, v18);
    goto LABEL_28;
  }
  if (!a3)
  {
    v7 = a2 == 0;
    if (a2)
      v8 = (char *)&jpeg_std_huff_table_bits_dc_luminance;
    else
      v8 = (char *)&jpeg_std_huff_table_bits_ac_luminance;
    v9 = &jpeg_std_huff_table_val_dc_luminance;
    v10 = &jpeg_std_huff_table_val_ac_luminance;
    goto LABEL_18;
  }
  v20 = *(void (***)(uint64_t))a1;
  *((_DWORD *)v20 + 10) = 52;
  *((_DWORD *)v20 + 11) = a3;
  (**(void (***)(uint64_t))a1)(a1);
  return 0;
}

uint64_t jpeg_CreateDecompress(char *a1, int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  *((_QWORD *)a1 + 1) = 0;
  if (a2 != 90)
  {
    *(_QWORD *)(*(_QWORD *)a1 + 40) = 0x5A0000000DLL;
    *(_DWORD *)(*(_QWORD *)a1 + 48) = a2;
    (**(void (***)(char *))a1)(a1);
  }
  if (a3 != 664)
  {
    *(_QWORD *)(*(_QWORD *)a1 + 40) = 0x29800000016;
    *(_DWORD *)(*(_QWORD *)a1 + 48) = a3;
    (**(void (***)(char *))a1)(a1);
  }
  v5 = *(_QWORD *)a1;
  v6 = *((_QWORD *)a1 + 3);
  bzero(a1, 0x298uLL);
  *(_QWORD *)a1 = v5;
  *((_QWORD *)a1 + 3) = v6;
  *((_DWORD *)a1 + 8) = 1;
  jinit_memory_mgr((turi::neural_net::float_scalar *)a1);
  *((_QWORD *)a1 + 2) = 0;
  *((_QWORD *)a1 + 5) = 0;
  *((_QWORD *)a1 + 51) = 0;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  jinit_marker_reader((uint64_t)a1);
  result = jinit_input_controller((uint64_t)a1);
  *((_DWORD *)a1 + 9) = 200;
  return result;
}

uint64_t jpeg_read_header(uint64_t a1, int a2)
{
  int v4;
  void (**v5)(_QWORD);
  uint64_t v6;
  uint64_t v7;

  v4 = *(_DWORD *)(a1 + 36);
  if ((v4 & 0xFFFFFFFE) != 0xC8)
  {
    v5 = *(void (***)(_QWORD))a1;
    *((_DWORD *)v5 + 10) = 21;
    *((_DWORD *)v5 + 11) = v4;
    (**(void (***)(uint64_t))a1)(a1);
  }
  v6 = jpeg_consume_input((uint64_t *)a1);
  if ((_DWORD)v6 == 2)
  {
    if (a2)
    {
      v7 = *(_QWORD *)a1;
      *(_DWORD *)(v7 + 40) = 53;
      (*(void (**)(uint64_t))v7)(a1);
    }
    jpeg_abort(a1);
  }
  return v6;
}

uint64_t jpeg_consume_input(uint64_t *a1)
{
  int v2;
  uint64_t result;
  int v4;
  int *v5;
  int v6;
  int v7;
  int v8;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;

  v2 = *((_DWORD *)a1 + 9);
  result = 1;
  switch(v2)
  {
    case 200:
      (*(void (**)(uint64_t *))(a1[76] + 8))(a1);
      (*(void (**)(uint64_t *))(a1[5] + 16))(a1);
      *((_DWORD *)a1 + 9) = 201;
      goto LABEL_4;
    case 201:
LABEL_4:
      result = (*(uint64_t (**)(uint64_t *))a1[76])(a1);
      if ((_DWORD)result != 1)
        return result;
      v4 = *((_DWORD *)a1 + 14);
      switch(v4)
      {
        case 1:
          v11 = 1;
          break;
        case 4:
          if (*((_DWORD *)a1 + 97) && (v13 = *((unsigned __int8 *)a1 + 392), *((_BYTE *)a1 + 392)))
          {
            if (v13 != 2)
            {
              v14 = *a1;
              *(_DWORD *)(v14 + 40) = 116;
              *(_DWORD *)(v14 + 44) = v13;
              (*(void (**)(uint64_t *, uint64_t))(*a1 + 8))(a1, 0xFFFFFFFFLL);
            }
            v11 = 4;
            v4 = 5;
          }
          else
          {
            v4 = 4;
            v11 = 4;
          }
          break;
        case 3:
          v5 = (int *)a1[38];
          v6 = *v5;
          v7 = v5[24];
          v8 = v5[48];
          if (v6 != 1 || v7 != 2 || v8 != 3)
          {
            if (v6 == 1 && v7 == 34 && v8 == 35)
            {
              v11 = 2;
              v4 = 7;
              break;
            }
            if (v6 == 82 && v7 == 71 && v8 == 66)
              goto LABEL_31;
            if (v6 == 114 && v7 == 103 && v8 == 98)
            {
              v11 = 2;
              v4 = 6;
              break;
            }
            if (!*((_DWORD *)a1 + 94))
            {
              if (*((_DWORD *)a1 + 97))
              {
                v15 = *((unsigned __int8 *)a1 + 392);
                if (!*((_BYTE *)a1 + 392))
                {
LABEL_31:
                  v4 = 2;
                  v11 = 2;
                  break;
                }
                if (v15 != 1)
                {
                  v16 = *a1;
                  *(_DWORD *)(v16 + 40) = 116;
                  *(_DWORD *)(v16 + 44) = v15;
                  (*(void (**)(uint64_t *, uint64_t))(*a1 + 8))(a1, 0xFFFFFFFFLL);
                }
              }
              else
              {
                v17 = *a1;
                *(_DWORD *)(v17 + 48) = v7;
                *(_DWORD *)(v17 + 52) = v8;
                *(_DWORD *)(v17 + 40) = 113;
                *(_DWORD *)(v17 + 44) = v6;
                (*(void (**)(uint64_t *, uint64_t))(v17 + 8))(a1, 1);
              }
            }
          }
          v11 = 2;
          v4 = 3;
          break;
        default:
          v4 = 0;
          v11 = 0;
          break;
      }
      *((_DWORD *)a1 + 15) = v4;
      *((_DWORD *)a1 + 16) = v11;
      v18 = *((_DWORD *)a1 + 139);
      *((_DWORD *)a1 + 17) = v18;
      *((_DWORD *)a1 + 18) = v18;
      a1[10] = 0x3FF0000000000000;
      *(_OWORD *)(a1 + 11) = xmmword_2186F6620;
      *(_OWORD *)(a1 + 13) = xmmword_2186F6640;
      a1[20] = 0;
      *(_OWORD *)(a1 + 15) = xmmword_2186F6650;
      result = 1;
      *((_DWORD *)a1 + 9) = 202;
      return result;
    case 202:
      return result;
    case 203:
    case 204:
    case 205:
    case 206:
    case 207:
    case 208:
    case 210:
      return (*(uint64_t (**)(uint64_t *))a1[76])(a1);
    default:
      v12 = *a1;
      *(_DWORD *)(v12 + 40) = 21;
      *(_DWORD *)(v12 + 44) = v2;
      (*(void (**)(uint64_t *))*a1)(a1);
      return 0;
  }
}

uint64_t jpeg_finish_decompress(uint64_t a1)
{
  int v2;
  void (**v3)(uint64_t);
  void (**v4)(uint64_t);
  uint64_t v5;
  uint64_t result;

  v2 = *(_DWORD *)(a1 + 36);
  if ((v2 - 205) > 1 || *(_DWORD *)(a1 + 88))
  {
    if (v2 == 210)
      goto LABEL_10;
    if (v2 != 207)
    {
      v3 = *(void (***)(uint64_t))a1;
      *((_DWORD *)v3 + 10) = 21;
      *((_DWORD *)v3 + 11) = v2;
      (**(void (***)(uint64_t))a1)(a1);
      goto LABEL_10;
    }
  }
  else
  {
    if (*(_DWORD *)(a1 + 168) < *(_DWORD *)(a1 + 140))
    {
      v4 = *(void (***)(uint64_t))a1;
      *((_DWORD *)v4 + 10) = 69;
      (*v4)(a1);
    }
    (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 576) + 8))(a1);
  }
  *(_DWORD *)(a1 + 36) = 210;
LABEL_10:
  while (1)
  {
    v5 = *(_QWORD *)(a1 + 608);
    if (*(_DWORD *)(v5 + 36))
      break;
    result = (*(uint64_t (**)(uint64_t))v5)(a1);
    if (!(_DWORD)result)
      return result;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 40) + 48))(a1);
  jpeg_abort(a1);
  return 1;
}

uint64_t jpeg_start_decompress(uint64_t a1)
{
  int v2;
  uint64_t result;
  void (**v4)(_QWORD);
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_DWORD *)(a1 + 36);
  if (v2 == 204)
    return output_pass_setup(a1);
  if (v2 != 203)
  {
    if (v2 != 202)
    {
      v4 = *(void (***)(_QWORD))a1;
      *((_DWORD *)v4 + 10) = 21;
      *((_DWORD *)v4 + 11) = v2;
      (**(void (***)(uint64_t))a1)(a1);
      return output_pass_setup(a1);
    }
    jinit_master_decompress(a1);
    if (*(_DWORD *)(a1 + 88))
    {
      *(_DWORD *)(a1 + 36) = 207;
      return 1;
    }
    *(_DWORD *)(a1 + 36) = 203;
  }
  if (!*(_DWORD *)(*(_QWORD *)(a1 + 608) + 32))
  {
LABEL_21:
    *(_DWORD *)(a1 + 180) = *(_DWORD *)(a1 + 172);
    return output_pass_setup(a1);
  }
  v5 = *(_QWORD *)(a1 + 16);
  while (1)
  {
    if (v5)
      (*(void (**)(uint64_t))v5)(a1);
    result = (**(uint64_t (***)(uint64_t))(a1 + 608))(a1);
    if (!(_DWORD)result)
      return result;
    if ((_DWORD)result == 2)
      goto LABEL_21;
    v5 = *(_QWORD *)(a1 + 16);
    if ((result & 0xFFFFFFFD) == 1 && v5 != 0)
    {
      v7 = *(_QWORD *)(v5 + 16);
      v8 = *(_QWORD *)(v5 + 8) + 1;
      *(_QWORD *)(v5 + 8) = v8;
      if (v8 >= v7)
        *(_QWORD *)(v5 + 16) = v7 + *(unsigned int *)(a1 + 432);
    }
  }
}

uint64_t output_pass_setup(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  BOOL v5;
  int v6;

  if (*(_DWORD *)(a1 + 36) != 204)
  {
    (**(void (***)(uint64_t))(a1 + 576))(a1);
    *(_DWORD *)(a1 + 168) = 0;
    *(_DWORD *)(a1 + 36) = 204;
  }
  if (*(_DWORD *)(*(_QWORD *)(a1 + 576) + 16))
  {
    v2 = *(unsigned int *)(a1 + 168);
    do
    {
      while (1)
      {
        v3 = *(unsigned int *)(a1 + 140);
        if (v2 < v3)
          break;
        (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 576) + 8))(a1);
        (**(void (***)(uint64_t))(a1 + 576))(a1);
        v2 = 0;
        *(_DWORD *)(a1 + 168) = 0;
        if (!*(_DWORD *)(*(_QWORD *)(a1 + 576) + 16))
          goto LABEL_12;
      }
      v4 = *(_QWORD *)(a1 + 16);
      if (v4)
      {
        *(_QWORD *)(v4 + 8) = v2;
        *(_QWORD *)(v4 + 16) = v3;
        (*(void (**)(uint64_t))v4)(a1);
        v2 = *(unsigned int *)(a1 + 168);
      }
      (*(void (**)(uint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)(a1 + 584) + 8))(a1, 0, a1 + 168, 0);
      v5 = *(unsigned int *)(a1 + 168) == v2;
      v2 = *(unsigned int *)(a1 + 168);
    }
    while (!v5);
    return 0;
  }
  else
  {
LABEL_12:
    if (*(_DWORD *)(a1 + 92))
      v6 = 206;
    else
      v6 = 205;
    *(_DWORD *)(a1 + 36) = v6;
    return 1;
  }
}

uint64_t jpeg_read_scanlines(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  void (**v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  void (**v12)(uint64_t);
  unsigned int v13;

  v6 = *(_DWORD *)(a1 + 36);
  if (v6 != 205)
  {
    v7 = *(void (***)(uint64_t))a1;
    *((_DWORD *)v7 + 10) = 21;
    *((_DWORD *)v7 + 11) = v6;
    (**(void (***)(uint64_t))a1)(a1);
  }
  v8 = *(unsigned int *)(a1 + 168);
  v9 = *(unsigned int *)(a1 + 140);
  if (v8 >= v9)
  {
    v12 = *(void (***)(uint64_t))a1;
    *((_DWORD *)v12 + 10) = 126;
    ((void (*)(uint64_t, uint64_t))v12[1])(a1, 0xFFFFFFFFLL);
    return 0;
  }
  else
  {
    v10 = *(_QWORD *)(a1 + 16);
    if (v10)
    {
      *(_QWORD *)(v10 + 8) = v8;
      *(_QWORD *)(v10 + 16) = v9;
      (*(void (**)(uint64_t))v10)(a1);
    }
    v13 = 0;
    (*(void (**)(uint64_t, uint64_t, unsigned int *, uint64_t))(*(_QWORD *)(a1 + 584) + 8))(a1, a2, &v13, a3);
    result = v13;
    *(_DWORD *)(a1 + 168) += v13;
  }
  return result;
}

void CoreML::NeuralNetworkSpecValidator::validateConvolutionLayer(CoreML::NeuralNetworkSpecValidator *this@<X0>, const CoreML::Specification::NeuralNetworkLayer *a2@<X1>, uint64_t a3@<X8>)
{
  _BOOL8 v6;
  const CoreML::Specification::WeightParams *v7;
  char *v8;
  uint64_t *v9;
  std::string *v10;
  __int128 v11;
  uint64_t *v12;
  std::string *v13;
  __int128 v14;
  std::string::size_type v15;
  uint64_t v16;
  void *v17;
  int v18;
  int v19;
  std::string *v20;
  __int128 v21;
  int v22;
  uint64_t v23;
  std::string *v24;
  __int128 v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  std::string *v32;
  __int128 v33;
  uint64_t *v34;
  CoreML *v35;
  const CoreML::Specification::WeightParams *v36;
  unsigned int v37;
  CoreML *v38;
  unsigned int v39;
  unsigned int v40;
  BOOL v41;
  int v42;
  std::string *v43;
  __int128 v44;
  std::string *v45;
  __int128 v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  std::string *v54;
  __int128 v55;
  unint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  unint64_t v59;
  std::string *v60;
  __int128 v61;
  std::string *v62;
  std::string::size_type size;
  std::string *v64;
  __int128 v65;
  std::string *v66;
  __int128 v67;
  std::string *v68;
  std::string::size_type v69;
  std::string *v70;
  __int128 v71;
  std::string *v72;
  __int128 v73;
  std::string *v74;
  std::string::size_type v75;
  std::string *v76;
  __int128 v77;
  std::string *v78;
  __int128 v79;
  std::string *v80;
  std::string::size_type v81;
  std::string *v82;
  __int128 v83;
  std::string *v84;
  __int128 v85;
  std::string *v86;
  std::string::size_type v87;
  std::string *v88;
  __int128 v89;
  std::string *v90;
  __int128 v91;
  uint64_t v92;
  std::string *v93;
  __int128 v94;
  std::string *v95;
  std::string::size_type v96;
  std::string *v97;
  __int128 v98;
  std::string *v99;
  __int128 v100;
  std::string *v101;
  std::string::size_type v102;
  std::string *v103;
  __int128 v104;
  std::string *v105;
  __int128 v106;
  std::string *v107;
  std::string::size_type v108;
  std::string *v109;
  __int128 v110;
  std::string *v111;
  __int128 v112;
  std::string *v113;
  std::string::size_type v114;
  std::string *v115;
  __int128 v116;
  std::string *v117;
  __int128 v118;
  std::string *v119;
  std::string::size_type v120;
  std::string *v121;
  __int128 v122;
  std::string *v123;
  __int128 v124;
  std::string *v125;
  __int128 v126;
  unint64_t v127;
  std::string *v128;
  __int128 v129;
  std::string *v130;
  std::string::size_type v131;
  std::string *v132;
  __int128 v133;
  std::string *v134;
  __int128 v135;
  std::string *v136;
  std::string::size_type v137;
  std::string *v138;
  __int128 v139;
  std::string *v140;
  __int128 v141;
  unint64_t v142;
  unint64_t v143;
  unint64_t v144;
  unint64_t __val;
  unint64_t __vala;
  unint64_t v147;
  std::string v148;
  std::string v149;
  std::string v150;
  std::string v151;
  std::string v152;
  std::string v153;
  std::string v154;
  std::string v155;
  std::string v156;
  std::string v157;
  std::string v158;
  std::string v159;
  std::string v160;
  std::string v161;
  std::string v162;
  std::string v163;
  void *v164[2];
  char v165;
  std::string v166;
  uint64_t v167;
  std::string::size_type v168;
  __int128 v169;
  uint64_t v170;

  CoreML::Result::Result((CoreML::Result *)&v168);
  CoreML::validateInputCount(a2, (const CoreML::Specification::NeuralNetworkLayer *)1, 2, (CoreML::Result *)&v166);
  v168 = v166.__r_.__value_.__r.__words[0];
  if (SHIBYTE(v170) < 0)
    operator delete((void *)v169);
  v169 = *(_OWORD *)&v166.__r_.__value_.__r.__words[1];
  v170 = v167;
  if (!CoreML::Result::good((CoreML::Result *)&v168))
    goto LABEL_61;
  CoreML::validateOutputCount(a2, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v166);
  v168 = v166.__r_.__value_.__r.__words[0];
  if (SHIBYTE(v170) < 0)
    operator delete((void *)v169);
  v169 = *(_OWORD *)&v166.__r_.__value_.__r.__words[1];
  v170 = v167;
  v6 = CoreML::Result::good((CoreML::Result *)&v168);
  if (!v6)
    goto LABEL_61;
  if (*(_BYTE *)this)
  {
    std::string::basic_string[abi:ne180100]<0>(v164, "Convolution");
    v8 = (char *)this + 32;
    CoreML::validateInputOutputRankEquality(a2, (uint64_t)v164, (uint64_t)v8, (CoreML::Result *)&v166);
    v168 = v166.__r_.__value_.__r.__words[0];
    if (SHIBYTE(v170) < 0)
      operator delete((void *)v169);
    v169 = *(_OWORD *)&v166.__r_.__value_.__r.__words[1];
    v170 = v167;
    HIBYTE(v167) = 0;
    v166.__r_.__value_.__s.__data_[8] = 0;
    if (v165 < 0)
      operator delete(v164[0]);
    if (!CoreML::Result::good((CoreML::Result *)&v168))
      goto LABEL_61;
    std::string::basic_string[abi:ne180100]<0>(&v163, "Convolution");
    CoreML::validateRankCount((uint64_t)a2, (uint64_t)&v163, 4, -1, (uint64_t)v8, (uint64_t)&v166);
    v168 = v166.__r_.__value_.__r.__words[0];
    if (SHIBYTE(v170) < 0)
      operator delete((void *)v169);
    v169 = *(_OWORD *)&v166.__r_.__value_.__r.__words[1];
    v170 = v167;
    HIBYTE(v167) = 0;
    v166.__r_.__value_.__s.__data_[8] = 0;
    if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v163.__r_.__value_.__l.__data_);
    v6 = CoreML::Result::good((CoreML::Result *)&v168);
    if (!v6)
      goto LABEL_61;
  }
  else if (*((_DWORD *)a2 + 6) != 1)
  {
    std::operator+<char>();
    v10 = std::string::append(&v163, "' does not support weight as input tensor when RANK5_ARRAY_MAPPING == true.");
    v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v166.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v166.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v163.__r_.__value_.__l.__data_);
    goto LABEL_41;
  }
  if (*((_DWORD *)a2 + 35) == 100)
    v9 = (uint64_t *)*((_QWORD *)a2 + 16);
  else
    v9 = CoreML::Specification::ConvolutionLayerParams::default_instance((CoreML::Specification::ConvolutionLayerParams *)v6);
  if (!*((_DWORD *)v9 + 43))
  {
    std::operator+<char>();
    v13 = std::string::append(&v166, "' is not set.");
    v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v163.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v163.__r_.__value_.__l.__data_ = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v166.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v166.__r_.__value_.__l.__data_);
    goto LABEL_31;
  }
  if (*((_DWORD *)a2 + 35) == 100)
    v12 = (uint64_t *)*((_QWORD *)a2 + 16);
  else
    v12 = CoreML::Specification::ConvolutionLayerParams::default_instance((CoreML::Specification::ConvolutionLayerParams *)v9);
  v18 = *((unsigned __int8 *)v12 + 152);
  v19 = *((_DWORD *)a2 + 6);
  if (*((_BYTE *)v12 + 152) && v19 != 1)
  {
    std::operator+<char>();
    v20 = std::string::append(&v163, "' does not support weight as input tensor.");
    v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v166.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v166.__r_.__value_.__l.__data_ = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v163.__r_.__value_.__l.__data_);
LABEL_41:
    CoreML::Result::Result((_DWORD *)a3, 13);
    if ((SHIBYTE(v166.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_62;
    v17 = (void *)v166.__r_.__value_.__r.__words[0];
    goto LABEL_43;
  }
  if (v19 != 1)
  {
    v22 = *((_DWORD *)v12 + 16);
    if (v22 >= 1)
    {
      v23 = v12[9];
      if (*(_QWORD *)(v23 + 8) > 1uLL || v22 >= 2 && *(_QWORD *)(v23 + 16) >= 2uLL)
      {
        std::operator+<char>();
        v24 = std::string::append(&v163, "' , dilated convolution does not support weight as input tensor.");
        v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
        v166.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v166.__r_.__value_.__l.__data_ = v25;
        v24->__r_.__value_.__l.__size_ = 0;
        v24->__r_.__value_.__r.__words[2] = 0;
        v24->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v163.__r_.__value_.__l.__data_);
        goto LABEL_41;
      }
    }
  }
  if ((unint64_t)v12[18] <= 1)
    v26 = 1;
  else
    v26 = v12[18];
  v27 = *((_DWORD *)v12 + 4);
  if (v27 < 1)
  {
    v29 = 3;
  }
  else
  {
    v28 = v12[3];
    v29 = *(_QWORD *)(v28 + 8);
    if (v27 != 1)
    {
      v30 = *(_QWORD *)(v28 + 16);
      goto LABEL_60;
    }
  }
  v30 = 3;
LABEL_60:
  if (v19 > 1)
  {
LABEL_61:
    *(_QWORD *)a3 = v168;
    *(_OWORD *)(a3 + 8) = v169;
    *(_QWORD *)(a3 + 24) = v170;
    v169 = 0uLL;
    v170 = 0;
    goto LABEL_62;
  }
  v142 = v26;
  __val = v12[17];
  v147 = v12[16];
  v31 = *((unsigned __int8 *)v12 + 153);
  if (v19 != 1 && *((_BYTE *)v12 + 153))
  {
    std::operator+<char>();
    v32 = std::string::append(&v166, "' with dynamic weight does not support static bias.");
    v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
    v163.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v163.__r_.__value_.__l.__data_ = v33;
    v32->__r_.__value_.__l.__size_ = 0;
    v32->__r_.__value_.__r.__words[2] = 0;
    v32->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v166.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v166.__r_.__value_.__l.__data_);
    CoreML::Result::Result(&v166, 13);
    v168 = v166.__r_.__value_.__r.__words[0];
    if (SHIBYTE(v170) < 0)
      operator delete((void *)v169);
    v169 = *(_OWORD *)&v166.__r_.__value_.__r.__words[1];
    v170 = v167;
    if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v163.__r_.__value_.__l.__data_);
  }
  v143 = v30;
  v144 = v29;
  v34 = &CoreML::Specification::_WeightParams_default_instance_;
  if (v12[14])
    v35 = (CoreML *)v12[14];
  else
    v35 = (CoreML *)&CoreML::Specification::_WeightParams_default_instance_;
  v37 = CoreML::valueType(v35, v7);
  if (v12[15])
    v38 = (CoreML *)v12[15];
  else
    v38 = (CoreML *)&CoreML::Specification::_WeightParams_default_instance_;
  v39 = CoreML::valueType(v38, v36);
  v40 = v39;
  if (v31)
    v41 = v39 == 4;
  else
    v41 = 0;
  v42 = v41;
  if (v37 == 4 || v42)
  {
    std::operator+<char>();
    v45 = std::string::append(&v166, "'  has invalid weights/bias fields.");
    v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
    v163.__r_.__value_.__r.__words[2] = v45->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v163.__r_.__value_.__l.__data_ = v46;
    v45->__r_.__value_.__l.__size_ = 0;
    v45->__r_.__value_.__r.__words[2] = 0;
    v45->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v166.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v166.__r_.__value_.__l.__data_);
LABEL_31:
    CoreML::Result::Result(&v166, 13);
    goto LABEL_32;
  }
  if (v31 && (v37 == 1 && !v39 || !v37 && v39 == 1))
  {
    std::operator+<char>();
    v43 = std::string::append(&v162, "has unmatched precisions of weights/bias They should either be half or full precision.");
    v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
    v163.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v163.__r_.__value_.__l.__data_ = v44;
    v43->__r_.__value_.__l.__size_ = 0;
    v43->__r_.__value_.__r.__words[2] = 0;
    v43->__r_.__value_.__r.__words[0] = 0;
    CoreML::Result::Result(&v166, 13);
LABEL_117:
    v168 = v166.__r_.__value_.__r.__words[0];
    if (SHIBYTE(v170) < 0)
      operator delete((void *)v169);
    v169 = *(_OWORD *)&v166.__r_.__value_.__r.__words[1];
    v170 = v167;
    HIBYTE(v167) = 0;
    v166.__r_.__value_.__s.__data_[8] = 0;
    if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v163.__r_.__value_.__l.__data_);
    if (SHIBYTE(v162.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v162.__r_.__value_.__l.__data_);
    goto LABEL_61;
  }
  v47 = v147;
  if (v18)
    v47 = v147 / v142;
  v48 = v143 * v144 * v47 * __val;
  if (v37 > 1)
  {
    if (v37 != 2)
    {
      std::operator+<char>();
      v54 = std::string::append(&v162, "has not specified weights.");
      v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
      v163.__r_.__value_.__r.__words[2] = v54->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v163.__r_.__value_.__l.__data_ = v55;
      v54->__r_.__value_.__l.__size_ = 0;
      v54->__r_.__value_.__r.__words[2] = 0;
      v54->__r_.__value_.__r.__words[0] = 0;
      CoreML::Result::Result(&v166, 13);
      goto LABEL_117;
    }
    __vala = v143 * v144 * v47 * __val;
    if (v12[14])
      v52 = (uint64_t *)v12[14];
    else
      v52 = &CoreML::Specification::_WeightParams_default_instance_;
    std::string::basic_string[abi:ne180100]<0>(&v163, "Convolution");
    v53 = *((_QWORD *)a2 + 14);
    std::string::basic_string[abi:ne180100]<0>(&v162, "weight");
    CoreML::validateGeneralWeightParams((uint64_t)v52, (const CoreML::Specification::WeightParams *)__vala, (const CoreML::Specification::WeightParams *)v147, (const void **)&v163.__r_.__value_.__l.__data_, v53, (uint64_t)&v162, (uint64_t)&v166);
    v168 = v166.__r_.__value_.__r.__words[0];
    if (SHIBYTE(v170) < 0)
      operator delete((void *)v169);
    v169 = *(_OWORD *)&v166.__r_.__value_.__r.__words[1];
    v170 = v167;
    HIBYTE(v167) = 0;
    v166.__r_.__value_.__s.__data_[8] = 0;
    if (SHIBYTE(v162.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v162.__r_.__value_.__l.__data_);
    if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v163.__r_.__value_.__l.__data_);
    if (!CoreML::Result::good((CoreML::Result *)&v168))
      goto LABEL_61;
  }
  else
  {
    v49 = (uint64_t *)v12[14];
    if (!v49)
      v49 = &CoreML::Specification::_WeightParams_default_instance_;
    if (v37)
    {
      v50 = v49[5];
      if (*(char *)(v50 + 23) < 0)
        v51 = *(_QWORD *)(v50 + 8);
      else
        v51 = *(unsigned __int8 *)(v50 + 23);
      v56 = v51 >> 1;
    }
    else
    {
      v56 = *((int *)v49 + 4);
    }
    if (v56 != v48)
    {
      if (v18)
      {
        std::operator+<char>();
        v60 = std::string::append(&v153, "' has weight matrix of size ");
        v61 = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
        v154.__r_.__value_.__r.__words[2] = v60->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v154.__r_.__value_.__l.__data_ = v61;
        v60->__r_.__value_.__l.__size_ = 0;
        v60->__r_.__value_.__r.__words[2] = 0;
        v60->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v152, v56);
        if ((v152.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v62 = &v152;
        else
          v62 = (std::string *)v152.__r_.__value_.__r.__words[0];
        if ((v152.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v152.__r_.__value_.__r.__words[2]);
        else
          size = v152.__r_.__value_.__l.__size_;
        v64 = std::string::append(&v154, (const std::string::value_type *)v62, size);
        v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
        v155.__r_.__value_.__r.__words[2] = v64->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v155.__r_.__value_.__l.__data_ = v65;
        v64->__r_.__value_.__l.__size_ = 0;
        v64->__r_.__value_.__r.__words[2] = 0;
        v64->__r_.__value_.__r.__words[0] = 0;
        v66 = std::string::append(&v155, " to encode a ");
        v67 = *(_OWORD *)&v66->__r_.__value_.__l.__data_;
        v156.__r_.__value_.__r.__words[2] = v66->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v156.__r_.__value_.__l.__data_ = v67;
        v66->__r_.__value_.__l.__size_ = 0;
        v66->__r_.__value_.__r.__words[2] = 0;
        v66->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v151, __val);
        if ((v151.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v68 = &v151;
        else
          v68 = (std::string *)v151.__r_.__value_.__r.__words[0];
        if ((v151.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v69 = HIBYTE(v151.__r_.__value_.__r.__words[2]);
        else
          v69 = v151.__r_.__value_.__l.__size_;
        v70 = std::string::append(&v156, (const std::string::value_type *)v68, v69);
        v71 = *(_OWORD *)&v70->__r_.__value_.__l.__data_;
        v157.__r_.__value_.__r.__words[2] = v70->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v157.__r_.__value_.__l.__data_ = v71;
        v70->__r_.__value_.__l.__size_ = 0;
        v70->__r_.__value_.__r.__words[2] = 0;
        v70->__r_.__value_.__r.__words[0] = 0;
        v72 = std::string::append(&v157, " × ");
        v73 = *(_OWORD *)&v72->__r_.__value_.__l.__data_;
        v158.__r_.__value_.__r.__words[2] = v72->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v158.__r_.__value_.__l.__data_ = v73;
        v72->__r_.__value_.__l.__size_ = 0;
        v72->__r_.__value_.__r.__words[2] = 0;
        v72->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v150, v147 / v142);
        if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v74 = &v150;
        else
          v74 = (std::string *)v150.__r_.__value_.__r.__words[0];
        if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v75 = HIBYTE(v150.__r_.__value_.__r.__words[2]);
        else
          v75 = v150.__r_.__value_.__l.__size_;
        v76 = std::string::append(&v158, (const std::string::value_type *)v74, v75);
        v77 = *(_OWORD *)&v76->__r_.__value_.__l.__data_;
        v159.__r_.__value_.__r.__words[2] = v76->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v159.__r_.__value_.__l.__data_ = v77;
        v76->__r_.__value_.__l.__size_ = 0;
        v76->__r_.__value_.__r.__words[2] = 0;
        v76->__r_.__value_.__r.__words[0] = 0;
        v78 = std::string::append(&v159, " × ");
        v79 = *(_OWORD *)&v78->__r_.__value_.__l.__data_;
        v160.__r_.__value_.__r.__words[2] = v78->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v160.__r_.__value_.__l.__data_ = v79;
        v78->__r_.__value_.__l.__size_ = 0;
        v78->__r_.__value_.__r.__words[2] = 0;
        v78->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v149, v144);
        if ((v149.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v80 = &v149;
        else
          v80 = (std::string *)v149.__r_.__value_.__r.__words[0];
        if ((v149.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v81 = HIBYTE(v149.__r_.__value_.__r.__words[2]);
        else
          v81 = v149.__r_.__value_.__l.__size_;
        v82 = std::string::append(&v160, (const std::string::value_type *)v80, v81);
        v83 = *(_OWORD *)&v82->__r_.__value_.__l.__data_;
        v161.__r_.__value_.__r.__words[2] = v82->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v161.__r_.__value_.__l.__data_ = v83;
        v82->__r_.__value_.__l.__size_ = 0;
        v82->__r_.__value_.__r.__words[2] = 0;
        v82->__r_.__value_.__r.__words[0] = 0;
        v84 = std::string::append(&v161, " × ");
        v85 = *(_OWORD *)&v84->__r_.__value_.__l.__data_;
        v162.__r_.__value_.__r.__words[2] = v84->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v162.__r_.__value_.__l.__data_ = v85;
        v84->__r_.__value_.__l.__size_ = 0;
        v84->__r_.__value_.__r.__words[2] = 0;
        v84->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v148, v143);
        if ((v148.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v86 = &v148;
        else
          v86 = (std::string *)v148.__r_.__value_.__r.__words[0];
        if ((v148.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v87 = HIBYTE(v148.__r_.__value_.__r.__words[2]);
        else
          v87 = v148.__r_.__value_.__l.__size_;
        v88 = std::string::append(&v162, (const std::string::value_type *)v86, v87);
        v89 = *(_OWORD *)&v88->__r_.__value_.__l.__data_;
        v166.__r_.__value_.__r.__words[2] = v88->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v166.__r_.__value_.__l.__data_ = v89;
        v88->__r_.__value_.__l.__size_ = 0;
        v88->__r_.__value_.__r.__words[2] = 0;
        v88->__r_.__value_.__r.__words[0] = 0;
        v90 = std::string::append(&v166, " convolution.");
        v91 = *(_OWORD *)&v90->__r_.__value_.__l.__data_;
        v163.__r_.__value_.__r.__words[2] = v90->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v163.__r_.__value_.__l.__data_ = v91;
        v90->__r_.__value_.__l.__size_ = 0;
        v90->__r_.__value_.__r.__words[2] = 0;
        v90->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v166.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v166.__r_.__value_.__l.__data_);
        if (SHIBYTE(v148.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v148.__r_.__value_.__l.__data_);
        if (SHIBYTE(v162.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v162.__r_.__value_.__l.__data_);
        if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v161.__r_.__value_.__l.__data_);
        if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v149.__r_.__value_.__l.__data_);
        if (SHIBYTE(v160.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v160.__r_.__value_.__l.__data_);
        if (SHIBYTE(v159.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v159.__r_.__value_.__l.__data_);
        if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v150.__r_.__value_.__l.__data_);
        if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v158.__r_.__value_.__l.__data_);
        if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v157.__r_.__value_.__l.__data_);
        if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v151.__r_.__value_.__l.__data_);
        if (SHIBYTE(v156.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v156.__r_.__value_.__l.__data_);
        if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v155.__r_.__value_.__l.__data_);
        if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v152.__r_.__value_.__l.__data_);
        if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v154.__r_.__value_.__l.__data_);
        if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v153.__r_.__value_.__l.__data_);
      }
      else
      {
        std::operator+<char>();
        v93 = std::string::append(&v153, "' has weight matrix of size ");
        v94 = *(_OWORD *)&v93->__r_.__value_.__l.__data_;
        v154.__r_.__value_.__r.__words[2] = v93->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v154.__r_.__value_.__l.__data_ = v94;
        v93->__r_.__value_.__l.__size_ = 0;
        v93->__r_.__value_.__r.__words[2] = 0;
        v93->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v152, v56);
        if ((v152.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v95 = &v152;
        else
          v95 = (std::string *)v152.__r_.__value_.__r.__words[0];
        if ((v152.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v96 = HIBYTE(v152.__r_.__value_.__r.__words[2]);
        else
          v96 = v152.__r_.__value_.__l.__size_;
        v97 = std::string::append(&v154, (const std::string::value_type *)v95, v96);
        v98 = *(_OWORD *)&v97->__r_.__value_.__l.__data_;
        v155.__r_.__value_.__r.__words[2] = v97->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v155.__r_.__value_.__l.__data_ = v98;
        v97->__r_.__value_.__l.__size_ = 0;
        v97->__r_.__value_.__r.__words[2] = 0;
        v97->__r_.__value_.__r.__words[0] = 0;
        v99 = std::string::append(&v155, " to encode a ");
        v100 = *(_OWORD *)&v99->__r_.__value_.__l.__data_;
        v156.__r_.__value_.__r.__words[2] = v99->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v156.__r_.__value_.__l.__data_ = v100;
        v99->__r_.__value_.__l.__size_ = 0;
        v99->__r_.__value_.__r.__words[2] = 0;
        v99->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v151, v147);
        if ((v151.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v101 = &v151;
        else
          v101 = (std::string *)v151.__r_.__value_.__r.__words[0];
        if ((v151.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v102 = HIBYTE(v151.__r_.__value_.__r.__words[2]);
        else
          v102 = v151.__r_.__value_.__l.__size_;
        v103 = std::string::append(&v156, (const std::string::value_type *)v101, v102);
        v104 = *(_OWORD *)&v103->__r_.__value_.__l.__data_;
        v157.__r_.__value_.__r.__words[2] = v103->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v157.__r_.__value_.__l.__data_ = v104;
        v103->__r_.__value_.__l.__size_ = 0;
        v103->__r_.__value_.__r.__words[2] = 0;
        v103->__r_.__value_.__r.__words[0] = 0;
        v105 = std::string::append(&v157, " × ");
        v106 = *(_OWORD *)&v105->__r_.__value_.__l.__data_;
        v158.__r_.__value_.__r.__words[2] = v105->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v158.__r_.__value_.__l.__data_ = v106;
        v105->__r_.__value_.__l.__size_ = 0;
        v105->__r_.__value_.__r.__words[2] = 0;
        v105->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v150, __val);
        if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v107 = &v150;
        else
          v107 = (std::string *)v150.__r_.__value_.__r.__words[0];
        if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v108 = HIBYTE(v150.__r_.__value_.__r.__words[2]);
        else
          v108 = v150.__r_.__value_.__l.__size_;
        v109 = std::string::append(&v158, (const std::string::value_type *)v107, v108);
        v110 = *(_OWORD *)&v109->__r_.__value_.__l.__data_;
        v159.__r_.__value_.__r.__words[2] = v109->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v159.__r_.__value_.__l.__data_ = v110;
        v109->__r_.__value_.__l.__size_ = 0;
        v109->__r_.__value_.__r.__words[2] = 0;
        v109->__r_.__value_.__r.__words[0] = 0;
        v111 = std::string::append(&v159, " × ");
        v112 = *(_OWORD *)&v111->__r_.__value_.__l.__data_;
        v160.__r_.__value_.__r.__words[2] = v111->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v160.__r_.__value_.__l.__data_ = v112;
        v111->__r_.__value_.__l.__size_ = 0;
        v111->__r_.__value_.__r.__words[2] = 0;
        v111->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v149, v144);
        if ((v149.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v113 = &v149;
        else
          v113 = (std::string *)v149.__r_.__value_.__r.__words[0];
        if ((v149.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v114 = HIBYTE(v149.__r_.__value_.__r.__words[2]);
        else
          v114 = v149.__r_.__value_.__l.__size_;
        v115 = std::string::append(&v160, (const std::string::value_type *)v113, v114);
        v116 = *(_OWORD *)&v115->__r_.__value_.__l.__data_;
        v161.__r_.__value_.__r.__words[2] = v115->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v161.__r_.__value_.__l.__data_ = v116;
        v115->__r_.__value_.__l.__size_ = 0;
        v115->__r_.__value_.__r.__words[2] = 0;
        v115->__r_.__value_.__r.__words[0] = 0;
        v117 = std::string::append(&v161, " × ");
        v118 = *(_OWORD *)&v117->__r_.__value_.__l.__data_;
        v162.__r_.__value_.__r.__words[2] = v117->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v162.__r_.__value_.__l.__data_ = v118;
        v117->__r_.__value_.__l.__size_ = 0;
        v117->__r_.__value_.__r.__words[2] = 0;
        v117->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v148, v143);
        if ((v148.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v119 = &v148;
        else
          v119 = (std::string *)v148.__r_.__value_.__r.__words[0];
        if ((v148.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v120 = HIBYTE(v148.__r_.__value_.__r.__words[2]);
        else
          v120 = v148.__r_.__value_.__l.__size_;
        v121 = std::string::append(&v162, (const std::string::value_type *)v119, v120);
        v122 = *(_OWORD *)&v121->__r_.__value_.__l.__data_;
        v166.__r_.__value_.__r.__words[2] = v121->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v166.__r_.__value_.__l.__data_ = v122;
        v121->__r_.__value_.__l.__size_ = 0;
        v121->__r_.__value_.__r.__words[2] = 0;
        v121->__r_.__value_.__r.__words[0] = 0;
        v123 = std::string::append(&v166, " convolution.");
        v124 = *(_OWORD *)&v123->__r_.__value_.__l.__data_;
        v163.__r_.__value_.__r.__words[2] = v123->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v163.__r_.__value_.__l.__data_ = v124;
        v123->__r_.__value_.__l.__size_ = 0;
        v123->__r_.__value_.__r.__words[2] = 0;
        v123->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v166.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v166.__r_.__value_.__l.__data_);
        if (SHIBYTE(v148.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v148.__r_.__value_.__l.__data_);
        if (SHIBYTE(v162.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v162.__r_.__value_.__l.__data_);
        if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v161.__r_.__value_.__l.__data_);
        if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v149.__r_.__value_.__l.__data_);
        if (SHIBYTE(v160.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v160.__r_.__value_.__l.__data_);
        if (SHIBYTE(v159.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v159.__r_.__value_.__l.__data_);
        if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v150.__r_.__value_.__l.__data_);
        if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v158.__r_.__value_.__l.__data_);
        if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v157.__r_.__value_.__l.__data_);
        if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v151.__r_.__value_.__l.__data_);
        if (SHIBYTE(v156.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v156.__r_.__value_.__l.__data_);
        if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v155.__r_.__value_.__l.__data_);
        if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v152.__r_.__value_.__l.__data_);
        if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v154.__r_.__value_.__l.__data_);
        if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v153.__r_.__value_.__l.__data_);
      }
      CoreML::Result::Result(&v166, 13);
      goto LABEL_32;
    }
  }
  if (!v31)
    goto LABEL_61;
  if (v40 > 1)
  {
    if (v40 == 2)
    {
      if (v12[15])
        v34 = (uint64_t *)v12[15];
      std::string::basic_string[abi:ne180100]<0>(&v163, "Convolution");
      v92 = *((_QWORD *)a2 + 14);
      std::string::basic_string[abi:ne180100]<0>(&v162, "bias");
      CoreML::validateGeneralWeightParams((uint64_t)v34, (const CoreML::Specification::WeightParams *)v147, (const CoreML::Specification::WeightParams *)1, (const void **)&v163.__r_.__value_.__l.__data_, v92, (uint64_t)&v162, (uint64_t)&v166);
      v168 = v166.__r_.__value_.__r.__words[0];
      if (SHIBYTE(v170) < 0)
        operator delete((void *)v169);
      v169 = *(_OWORD *)&v166.__r_.__value_.__r.__words[1];
      v170 = v167;
      HIBYTE(v167) = 0;
      v166.__r_.__value_.__s.__data_[8] = 0;
      if (SHIBYTE(v162.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v162.__r_.__value_.__l.__data_);
      if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v163.__r_.__value_.__l.__data_);
      CoreML::Result::good((CoreML::Result *)&v168);
      goto LABEL_61;
    }
    std::operator+<char>();
    v125 = std::string::append(&v162, "has not specified bias.");
    v126 = *(_OWORD *)&v125->__r_.__value_.__l.__data_;
    v163.__r_.__value_.__r.__words[2] = v125->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v163.__r_.__value_.__l.__data_ = v126;
    v125->__r_.__value_.__l.__size_ = 0;
    v125->__r_.__value_.__r.__words[2] = 0;
    v125->__r_.__value_.__r.__words[0] = 0;
    CoreML::Result::Result(&v166, 13);
    goto LABEL_117;
  }
  v57 = (uint64_t *)v12[15];
  if (!v57)
    v57 = &CoreML::Specification::_WeightParams_default_instance_;
  if (v40)
  {
    v58 = v57[5];
    if (*(char *)(v58 + 23) < 0)
      v59 = *(_QWORD *)(v58 + 8);
    else
      v59 = *(unsigned __int8 *)(v58 + 23);
    v127 = v59 >> 1;
  }
  else
  {
    v127 = *((int *)v57 + 4);
  }
  if (v127 == v147)
    goto LABEL_61;
  std::operator+<char>();
  v128 = std::string::append(&v159, "' has a bias vector of size ");
  v129 = *(_OWORD *)&v128->__r_.__value_.__l.__data_;
  v160.__r_.__value_.__r.__words[2] = v128->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v160.__r_.__value_.__l.__data_ = v129;
  v128->__r_.__value_.__l.__size_ = 0;
  v128->__r_.__value_.__r.__words[2] = 0;
  v128->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v158, v127);
  if ((v158.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v130 = &v158;
  else
    v130 = (std::string *)v158.__r_.__value_.__r.__words[0];
  if ((v158.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v131 = HIBYTE(v158.__r_.__value_.__r.__words[2]);
  else
    v131 = v158.__r_.__value_.__l.__size_;
  v132 = std::string::append(&v160, (const std::string::value_type *)v130, v131);
  v133 = *(_OWORD *)&v132->__r_.__value_.__l.__data_;
  v161.__r_.__value_.__r.__words[2] = v132->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v161.__r_.__value_.__l.__data_ = v133;
  v132->__r_.__value_.__l.__size_ = 0;
  v132->__r_.__value_.__r.__words[2] = 0;
  v132->__r_.__value_.__r.__words[0] = 0;
  v134 = std::string::append(&v161, " but should be ");
  v135 = *(_OWORD *)&v134->__r_.__value_.__l.__data_;
  v162.__r_.__value_.__r.__words[2] = v134->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v162.__r_.__value_.__l.__data_ = v135;
  v134->__r_.__value_.__l.__size_ = 0;
  v134->__r_.__value_.__r.__words[2] = 0;
  v134->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v157, v147);
  if ((v157.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v136 = &v157;
  else
    v136 = (std::string *)v157.__r_.__value_.__r.__words[0];
  if ((v157.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v137 = HIBYTE(v157.__r_.__value_.__r.__words[2]);
  else
    v137 = v157.__r_.__value_.__l.__size_;
  v138 = std::string::append(&v162, (const std::string::value_type *)v136, v137);
  v139 = *(_OWORD *)&v138->__r_.__value_.__l.__data_;
  v166.__r_.__value_.__r.__words[2] = v138->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v166.__r_.__value_.__l.__data_ = v139;
  v138->__r_.__value_.__l.__size_ = 0;
  v138->__r_.__value_.__r.__words[2] = 0;
  v138->__r_.__value_.__r.__words[0] = 0;
  v140 = std::string::append(&v166, ".");
  v141 = *(_OWORD *)&v140->__r_.__value_.__l.__data_;
  v163.__r_.__value_.__r.__words[2] = v140->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v163.__r_.__value_.__l.__data_ = v141;
  v140->__r_.__value_.__l.__size_ = 0;
  v140->__r_.__value_.__r.__words[2] = 0;
  v140->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v166.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v166.__r_.__value_.__l.__data_);
  if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v157.__r_.__value_.__l.__data_);
  if (SHIBYTE(v162.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v162.__r_.__value_.__l.__data_);
  if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v161.__r_.__value_.__l.__data_);
  if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v158.__r_.__value_.__l.__data_);
  if (SHIBYTE(v160.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v160.__r_.__value_.__l.__data_);
  if (SHIBYTE(v159.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v159.__r_.__value_.__l.__data_);
  CoreML::Result::Result(&v166, 13);
LABEL_32:
  v15 = v166.__r_.__value_.__r.__words[0];
  v168 = v166.__r_.__value_.__r.__words[0];
  if (SHIBYTE(v170) < 0)
  {
    operator delete((void *)v169);
    v15 = v168;
  }
  v169 = *(_OWORD *)&v166.__r_.__value_.__r.__words[1];
  v16 = v167;
  *(_QWORD *)a3 = v15;
  *(_OWORD *)(a3 + 8) = v169;
  *(_QWORD *)(a3 + 24) = v16;
  v169 = 0uLL;
  v170 = 0;
  if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0)
  {
    v17 = (void *)v163.__r_.__value_.__r.__words[0];
LABEL_43:
    operator delete(v17);
  }
LABEL_62:
  if (SHIBYTE(v170) < 0)
    operator delete((void *)v169);
}

void sub_218335B9C(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 - 185) < 0)
    operator delete(*(void **)(v1 - 208));
  if (*(char *)(v1 - 97) < 0)
    operator delete(*(void **)(v1 - 120));
  _Unwind_Resume(a1);
}

void CoreML::validateInputCount(CoreML *this@<X0>, const CoreML::Specification::NeuralNetworkLayer *a2@<X1>, int a3@<W2>, CoreML::Result *a4@<X8>)
{
  int v5;
  __int128 *v8;
  __int128 v9;
  __int128 *v10;
  __int128 v11;
  __int128 *v12;
  __int128 v13;
  std::string *v14;
  __int128 v15;
  std::string *v16;
  __int128 v17;
  std::string *v18;
  std::string::size_type size;
  std::string *v20;
  __int128 v21;
  std::string *v22;
  __int128 v23;
  std::string *v24;
  std::string::size_type v25;
  std::string *v26;
  __int128 v27;
  std::string *v28;
  __int128 v29;
  std::string *v30;
  std::string::size_type v31;
  std::string *v32;
  __int128 v33;
  std::string *v34;
  __int128 v35;
  std::string *v36;
  std::string::size_type v37;
  std::string *v38;
  __int128 v39;
  std::string *v40;
  __int128 v41;
  std::string *v42;
  std::string::size_type v43;
  std::string *v44;
  __int128 v45;
  std::string *v46;
  __int128 v47;
  std::string *v48;
  __int128 v49;
  std::string *v50;
  __int128 v51;
  std::string *v52;
  std::string::size_type v53;
  std::string *v54;
  __int128 v55;
  std::string *v56;
  __int128 v57;
  std::string *v58;
  std::string::size_type v59;
  std::string *v60;
  __int128 v61;
  std::string *v62;
  __int128 v63;
  std::string *v64;
  __int128 v65;
  std::string *v66;
  void *v67;
  char v68;
  std::string v69;
  std::string v70;
  std::string v71;
  std::string v72;
  std::string v73;
  std::string v74;
  std::string v75;
  std::string v76;
  std::string v77;
  std::string v78;
  std::string v79;
  void *v80;
  __int128 v81;
  _QWORD v82[3];

  v5 = (int)a2;
  v82[2] = *MEMORY[0x24BDAC8D0];
  v80 = 0;
  v81 = 0uLL;
  if (a3 >= 1 && a3 == (_DWORD)a2 && *((_DWORD *)this + 6) != a3)
  {
    v12 = (__int128 *)*((_QWORD *)this + 14);
    if (*((char *)v12 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v72, *(const std::string::value_type **)v12, *((_QWORD *)v12 + 1));
    }
    else
    {
      v13 = *v12;
      v72.__r_.__value_.__r.__words[2] = *((_QWORD *)v12 + 2);
      *(_OWORD *)&v72.__r_.__value_.__l.__data_ = v13;
    }
    v14 = std::string::insert(&v72, 0, "Layer '");
    v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v73.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v73.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    v16 = std::string::append(&v73, "' of type ");
    v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v74.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v74.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v71, *((_DWORD *)this + 35));
    if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v18 = &v71;
    else
      v18 = (std::string *)v71.__r_.__value_.__r.__words[0];
    if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v71.__r_.__value_.__r.__words[2]);
    else
      size = v71.__r_.__value_.__l.__size_;
    v20 = std::string::append(&v74, (const std::string::value_type *)v18, size);
    v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v75.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v75.__r_.__value_.__l.__data_ = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    v22 = std::string::append(&v75, " has ");
    v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    v76.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v76.__r_.__value_.__l.__data_ = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v70, *((_DWORD *)this + 6));
    if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v24 = &v70;
    else
      v24 = (std::string *)v70.__r_.__value_.__r.__words[0];
    if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v25 = HIBYTE(v70.__r_.__value_.__r.__words[2]);
    else
      v25 = v70.__r_.__value_.__l.__size_;
    v26 = std::string::append(&v76, (const std::string::value_type *)v24, v25);
    v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
    v77.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v77.__r_.__value_.__l.__data_ = v27;
    v26->__r_.__value_.__l.__size_ = 0;
    v26->__r_.__value_.__r.__words[2] = 0;
    v26->__r_.__value_.__r.__words[0] = 0;
    v28 = std::string::append(&v77, " inputs but expects exactly ");
    v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
    v78.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v78.__r_.__value_.__l.__data_ = v29;
    v28->__r_.__value_.__l.__size_ = 0;
    v28->__r_.__value_.__r.__words[2] = 0;
    v28->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v69, a3);
    if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v30 = &v69;
    else
      v30 = (std::string *)v69.__r_.__value_.__r.__words[0];
    if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v31 = HIBYTE(v69.__r_.__value_.__r.__words[2]);
    else
      v31 = v69.__r_.__value_.__l.__size_;
  }
  else if ((int)a2 < 1 || *((_DWORD *)this + 6) >= (int)a2)
  {
    if (a3 < 1 || *((_DWORD *)this + 6) <= a3)
    {
      CoreML::Result::Result(a4);
      goto LABEL_97;
    }
    v10 = (__int128 *)*((_QWORD *)this + 14);
    if (*((char *)v10 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v72, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
    }
    else
    {
      v11 = *v10;
      v72.__r_.__value_.__r.__words[2] = *((_QWORD *)v10 + 2);
      *(_OWORD *)&v72.__r_.__value_.__l.__data_ = v11;
    }
    v48 = std::string::insert(&v72, 0, "Layer '");
    v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
    v73.__r_.__value_.__r.__words[2] = v48->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v73.__r_.__value_.__l.__data_ = v49;
    v48->__r_.__value_.__l.__size_ = 0;
    v48->__r_.__value_.__r.__words[2] = 0;
    v48->__r_.__value_.__r.__words[0] = 0;
    v50 = std::string::append(&v73, "' of type ");
    v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
    v74.__r_.__value_.__r.__words[2] = v50->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v74.__r_.__value_.__l.__data_ = v51;
    v50->__r_.__value_.__l.__size_ = 0;
    v50->__r_.__value_.__r.__words[2] = 0;
    v50->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v71, *((_DWORD *)this + 35));
    if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v52 = &v71;
    else
      v52 = (std::string *)v71.__r_.__value_.__r.__words[0];
    if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v53 = HIBYTE(v71.__r_.__value_.__r.__words[2]);
    else
      v53 = v71.__r_.__value_.__l.__size_;
    v54 = std::string::append(&v74, (const std::string::value_type *)v52, v53);
    v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
    v75.__r_.__value_.__r.__words[2] = v54->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v75.__r_.__value_.__l.__data_ = v55;
    v54->__r_.__value_.__l.__size_ = 0;
    v54->__r_.__value_.__r.__words[2] = 0;
    v54->__r_.__value_.__r.__words[0] = 0;
    v56 = std::string::append(&v75, " has ");
    v57 = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
    v76.__r_.__value_.__r.__words[2] = v56->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v76.__r_.__value_.__l.__data_ = v57;
    v56->__r_.__value_.__l.__size_ = 0;
    v56->__r_.__value_.__r.__words[2] = 0;
    v56->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v70, *((_DWORD *)this + 6));
    if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v58 = &v70;
    else
      v58 = (std::string *)v70.__r_.__value_.__r.__words[0];
    if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v59 = HIBYTE(v70.__r_.__value_.__r.__words[2]);
    else
      v59 = v70.__r_.__value_.__l.__size_;
    v60 = std::string::append(&v76, (const std::string::value_type *)v58, v59);
    v61 = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
    v77.__r_.__value_.__r.__words[2] = v60->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v77.__r_.__value_.__l.__data_ = v61;
    v60->__r_.__value_.__l.__size_ = 0;
    v60->__r_.__value_.__r.__words[2] = 0;
    v60->__r_.__value_.__r.__words[0] = 0;
    v62 = std::string::append(&v77, " inputs but expects at most ");
    v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
    v78.__r_.__value_.__r.__words[2] = v62->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v78.__r_.__value_.__l.__data_ = v63;
    v62->__r_.__value_.__l.__size_ = 0;
    v62->__r_.__value_.__r.__words[2] = 0;
    v62->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v69, a3);
    if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v30 = &v69;
    else
      v30 = (std::string *)v69.__r_.__value_.__r.__words[0];
    if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v31 = HIBYTE(v69.__r_.__value_.__r.__words[2]);
    else
      v31 = v69.__r_.__value_.__l.__size_;
  }
  else
  {
    v8 = (__int128 *)*((_QWORD *)this + 14);
    if (*((char *)v8 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v72, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
    }
    else
    {
      v9 = *v8;
      v72.__r_.__value_.__r.__words[2] = *((_QWORD *)v8 + 2);
      *(_OWORD *)&v72.__r_.__value_.__l.__data_ = v9;
    }
    v32 = std::string::insert(&v72, 0, "Layer '");
    v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
    v73.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v73.__r_.__value_.__l.__data_ = v33;
    v32->__r_.__value_.__l.__size_ = 0;
    v32->__r_.__value_.__r.__words[2] = 0;
    v32->__r_.__value_.__r.__words[0] = 0;
    v34 = std::string::append(&v73, "' of type ");
    v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
    v74.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v74.__r_.__value_.__l.__data_ = v35;
    v34->__r_.__value_.__l.__size_ = 0;
    v34->__r_.__value_.__r.__words[2] = 0;
    v34->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v71, *((_DWORD *)this + 35));
    if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v36 = &v71;
    else
      v36 = (std::string *)v71.__r_.__value_.__r.__words[0];
    if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v37 = HIBYTE(v71.__r_.__value_.__r.__words[2]);
    else
      v37 = v71.__r_.__value_.__l.__size_;
    v38 = std::string::append(&v74, (const std::string::value_type *)v36, v37);
    v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
    v75.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v75.__r_.__value_.__l.__data_ = v39;
    v38->__r_.__value_.__l.__size_ = 0;
    v38->__r_.__value_.__r.__words[2] = 0;
    v38->__r_.__value_.__r.__words[0] = 0;
    v40 = std::string::append(&v75, " has ");
    v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
    v76.__r_.__value_.__r.__words[2] = v40->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v76.__r_.__value_.__l.__data_ = v41;
    v40->__r_.__value_.__l.__size_ = 0;
    v40->__r_.__value_.__r.__words[2] = 0;
    v40->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v70, *((_DWORD *)this + 6));
    if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v42 = &v70;
    else
      v42 = (std::string *)v70.__r_.__value_.__r.__words[0];
    if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v43 = HIBYTE(v70.__r_.__value_.__r.__words[2]);
    else
      v43 = v70.__r_.__value_.__l.__size_;
    v44 = std::string::append(&v76, (const std::string::value_type *)v42, v43);
    v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
    v77.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v77.__r_.__value_.__l.__data_ = v45;
    v44->__r_.__value_.__l.__size_ = 0;
    v44->__r_.__value_.__r.__words[2] = 0;
    v44->__r_.__value_.__r.__words[0] = 0;
    v46 = std::string::append(&v77, " inputs but expects at least ");
    v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
    v78.__r_.__value_.__r.__words[2] = v46->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v78.__r_.__value_.__l.__data_ = v47;
    v46->__r_.__value_.__l.__size_ = 0;
    v46->__r_.__value_.__r.__words[2] = 0;
    v46->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v69, v5);
    if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v30 = &v69;
    else
      v30 = (std::string *)v69.__r_.__value_.__r.__words[0];
    if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v31 = HIBYTE(v69.__r_.__value_.__r.__words[2]);
    else
      v31 = v69.__r_.__value_.__l.__size_;
  }
  v64 = std::string::append(&v78, (const std::string::value_type *)v30, v31);
  v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
  v79.__r_.__value_.__r.__words[2] = v64->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v79.__r_.__value_.__l.__data_ = v65;
  v64->__r_.__value_.__l.__size_ = 0;
  v64->__r_.__value_.__r.__words[2] = 0;
  v64->__r_.__value_.__r.__words[0] = 0;
  v66 = std::string::append(&v79, ".");
  v67 = (void *)v66->__r_.__value_.__r.__words[0];
  v82[0] = v66->__r_.__value_.__l.__size_;
  *(_QWORD *)((char *)v82 + 7) = *(std::string::size_type *)((char *)&v66->__r_.__value_.__r.__words[1] + 7);
  v68 = HIBYTE(v66->__r_.__value_.__r.__words[2]);
  v66->__r_.__value_.__l.__size_ = 0;
  v66->__r_.__value_.__r.__words[2] = 0;
  v66->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v81) < 0)
    operator delete(v80);
  v80 = v67;
  *(_QWORD *)&v81 = v82[0];
  *(_QWORD *)((char *)&v81 + 7) = *(_QWORD *)((char *)v82 + 7);
  HIBYTE(v81) = v68;
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v79.__r_.__value_.__l.__data_);
  if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v69.__r_.__value_.__l.__data_);
  if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v78.__r_.__value_.__l.__data_);
  if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v77.__r_.__value_.__l.__data_);
  if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v70.__r_.__value_.__l.__data_);
  if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v76.__r_.__value_.__l.__data_);
  if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v75.__r_.__value_.__l.__data_);
  if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v71.__r_.__value_.__l.__data_);
  if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v74.__r_.__value_.__l.__data_);
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v73.__r_.__value_.__l.__data_);
  if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v72.__r_.__value_.__l.__data_);
  CoreML::Result::Result(a4, 13);
LABEL_97:
  if (SHIBYTE(v81) < 0)
    operator delete(v80);
}

void sub_218336650(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,uint64_t a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  uint64_t v61;

  if (*(char *)(v61 - 73) < 0)
    operator delete(*(void **)(v61 - 96));
  _Unwind_Resume(exception_object);
}

void CoreML::validateOutputCount(CoreML *this@<X0>, const CoreML::Specification::NeuralNetworkLayer *a2@<X1>, int a3@<W2>, CoreML::Result *a4@<X8>)
{
  int v5;
  std::string *v8;
  __int128 v9;
  std::string *v10;
  std::string::size_type v11;
  std::string *v12;
  __int128 v13;
  std::string *v14;
  __int128 v15;
  std::string *v16;
  std::string::size_type v17;
  std::string *v18;
  __int128 v19;
  std::string *v20;
  __int128 v21;
  std::string *p_p;
  std::string::size_type v23;
  std::string *v24;
  __int128 v25;
  std::string *v26;
  std::string::size_type v27;
  std::string *v28;
  __int128 v29;
  std::string *v30;
  __int128 v31;
  std::string *v32;
  std::string::size_type v33;
  std::string *v34;
  __int128 v35;
  std::string *v36;
  __int128 v37;
  std::string *v38;
  __int128 v39;
  std::string *v40;
  std::string::size_type size;
  std::string *v42;
  __int128 v43;
  std::string *v44;
  __int128 v45;
  std::string *v46;
  std::string::size_type v47;
  std::string *v48;
  __int128 v49;
  std::string *v50;
  __int128 v51;
  std::string *v52;
  __int128 v53;
  std::string *v54;
  void *v55;
  char v56;
  std::string __p;
  std::string v58;
  std::string v59;
  std::string v60;
  std::string v61;
  std::string v62;
  std::string v63;
  std::string v64;
  std::string v65;
  std::string v66;
  void *v67;
  __int128 v68;
  _QWORD v69[3];

  v5 = (int)a2;
  v69[2] = *MEMORY[0x24BDAC8D0];
  v67 = 0;
  v68 = 0uLL;
  if (a3 >= 1 && a3 == (_DWORD)a2 && *((_DWORD *)this + 12) != a3)
  {
    std::operator+<char>();
    v38 = std::string::append(&v60, "' of type ");
    v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
    v61.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v39;
    v38->__r_.__value_.__l.__size_ = 0;
    v38->__r_.__value_.__r.__words[2] = 0;
    v38->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v59, *((_DWORD *)this + 35));
    if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v40 = &v59;
    else
      v40 = (std::string *)v59.__r_.__value_.__r.__words[0];
    if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v59.__r_.__value_.__r.__words[2]);
    else
      size = v59.__r_.__value_.__l.__size_;
    v42 = std::string::append(&v61, (const std::string::value_type *)v40, size);
    v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
    v62.__r_.__value_.__r.__words[2] = v42->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v43;
    v42->__r_.__value_.__l.__size_ = 0;
    v42->__r_.__value_.__r.__words[2] = 0;
    v42->__r_.__value_.__r.__words[0] = 0;
    v44 = std::string::append(&v62, " has ");
    v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
    v63.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v45;
    v44->__r_.__value_.__l.__size_ = 0;
    v44->__r_.__value_.__r.__words[2] = 0;
    v44->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v58, *((_DWORD *)this + 12));
    if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v46 = &v58;
    else
      v46 = (std::string *)v58.__r_.__value_.__r.__words[0];
    if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v47 = HIBYTE(v58.__r_.__value_.__r.__words[2]);
    else
      v47 = v58.__r_.__value_.__l.__size_;
    v48 = std::string::append(&v63, (const std::string::value_type *)v46, v47);
    v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
    v64.__r_.__value_.__r.__words[2] = v48->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v49;
    v48->__r_.__value_.__l.__size_ = 0;
    v48->__r_.__value_.__r.__words[2] = 0;
    v48->__r_.__value_.__r.__words[0] = 0;
    v50 = std::string::append(&v64, " outputs but expects exactly ");
    v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
    v65.__r_.__value_.__r.__words[2] = v50->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v51;
    v50->__r_.__value_.__l.__size_ = 0;
    v50->__r_.__value_.__r.__words[2] = 0;
    v50->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&__p, a3);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v23 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v23 = __p.__r_.__value_.__l.__size_;
  }
  else if ((int)a2 < 1 || *((_DWORD *)this + 12) >= (int)a2)
  {
    if (a3 < 1 || *((_DWORD *)this + 12) <= a3)
    {
      CoreML::Result::Result(a4);
      goto LABEL_86;
    }
    std::operator+<char>();
    v24 = std::string::append(&v60, "' of type ");
    v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    v61.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v59, *((_DWORD *)this + 35));
    if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v26 = &v59;
    else
      v26 = (std::string *)v59.__r_.__value_.__r.__words[0];
    if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v27 = HIBYTE(v59.__r_.__value_.__r.__words[2]);
    else
      v27 = v59.__r_.__value_.__l.__size_;
    v28 = std::string::append(&v61, (const std::string::value_type *)v26, v27);
    v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
    v62.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v29;
    v28->__r_.__value_.__l.__size_ = 0;
    v28->__r_.__value_.__r.__words[2] = 0;
    v28->__r_.__value_.__r.__words[0] = 0;
    v30 = std::string::append(&v62, " has ");
    v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
    v63.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v31;
    v30->__r_.__value_.__l.__size_ = 0;
    v30->__r_.__value_.__r.__words[2] = 0;
    v30->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v58, *((_DWORD *)this + 12));
    if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v32 = &v58;
    else
      v32 = (std::string *)v58.__r_.__value_.__r.__words[0];
    if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v33 = HIBYTE(v58.__r_.__value_.__r.__words[2]);
    else
      v33 = v58.__r_.__value_.__l.__size_;
    v34 = std::string::append(&v63, (const std::string::value_type *)v32, v33);
    v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
    v64.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v35;
    v34->__r_.__value_.__l.__size_ = 0;
    v34->__r_.__value_.__r.__words[2] = 0;
    v34->__r_.__value_.__r.__words[0] = 0;
    v36 = std::string::append(&v64, " outputs but expects at most ");
    v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
    v65.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v37;
    v36->__r_.__value_.__l.__size_ = 0;
    v36->__r_.__value_.__r.__words[2] = 0;
    v36->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&__p, a3);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v23 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v23 = __p.__r_.__value_.__l.__size_;
  }
  else
  {
    std::operator+<char>();
    v8 = std::string::append(&v60, "' of type ");
    v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v61.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v59, *((_DWORD *)this + 35));
    if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v10 = &v59;
    else
      v10 = (std::string *)v59.__r_.__value_.__r.__words[0];
    if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v11 = HIBYTE(v59.__r_.__value_.__r.__words[2]);
    else
      v11 = v59.__r_.__value_.__l.__size_;
    v12 = std::string::append(&v61, (const std::string::value_type *)v10, v11);
    v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v62.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    v14 = std::string::append(&v62, " has ");
    v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v63.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v58, *((_DWORD *)this + 12));
    if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v58;
    else
      v16 = (std::string *)v58.__r_.__value_.__r.__words[0];
    if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v17 = HIBYTE(v58.__r_.__value_.__r.__words[2]);
    else
      v17 = v58.__r_.__value_.__l.__size_;
    v18 = std::string::append(&v63, (const std::string::value_type *)v16, v17);
    v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v64.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    v20 = std::string::append(&v64, " outputs but expects at least ");
    v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v65.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&__p, v5);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v23 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v23 = __p.__r_.__value_.__l.__size_;
  }
  v52 = std::string::append(&v65, (const std::string::value_type *)p_p, v23);
  v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
  v66.__r_.__value_.__r.__words[2] = v52->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v66.__r_.__value_.__l.__data_ = v53;
  v52->__r_.__value_.__l.__size_ = 0;
  v52->__r_.__value_.__r.__words[2] = 0;
  v52->__r_.__value_.__r.__words[0] = 0;
  v54 = std::string::append(&v66, ".");
  v55 = (void *)v54->__r_.__value_.__r.__words[0];
  v69[0] = v54->__r_.__value_.__l.__size_;
  *(_QWORD *)((char *)v69 + 7) = *(std::string::size_type *)((char *)&v54->__r_.__value_.__r.__words[1] + 7);
  v56 = HIBYTE(v54->__r_.__value_.__r.__words[2]);
  v54->__r_.__value_.__l.__size_ = 0;
  v54->__r_.__value_.__r.__words[2] = 0;
  v54->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v68) < 0)
    operator delete(v67);
  v67 = v55;
  *(_QWORD *)&v68 = v69[0];
  *(_QWORD *)((char *)&v68 + 7) = *(_QWORD *)((char *)v69 + 7);
  HIBYTE(v68) = v56;
  if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v66.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v65.__r_.__value_.__l.__data_);
  if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v64.__r_.__value_.__l.__data_);
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v58.__r_.__value_.__l.__data_);
  if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v63.__r_.__value_.__l.__data_);
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v62.__r_.__value_.__l.__data_);
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v59.__r_.__value_.__l.__data_);
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v61.__r_.__value_.__l.__data_);
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v60.__r_.__value_.__l.__data_);
  CoreML::Result::Result(a4, 13);
LABEL_86:
  if (SHIBYTE(v68) < 0)
    operator delete(v67);
}

void sub_218336E04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  uint64_t v59;

  if (*(char *)(v59 - 105) < 0)
    operator delete(*(void **)(v59 - 128));
  if (a14 < 0)
    operator delete(__p);
  if (*(char *)(v59 - 137) < 0)
    operator delete(*(void **)(v59 - 160));
  if (a59 < 0)
    operator delete(a54);
  if (a20 < 0)
    operator delete(a15);
  if (a52 < 0)
    operator delete(a47);
  if (a45 < 0)
    operator delete(a40);
  if (a26 < 0)
    operator delete(a21);
  if (a38 < 0)
    operator delete(a33);
  if (a32 < 0)
    operator delete(a27);
  if (*(char *)(v59 - 73) < 0)
    operator delete(*(void **)(v59 - 96));
  _Unwind_Resume(exception_object);
}

void CoreML::validateInputOutputRankEquality(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, CoreML::Result *a4@<X8>)
{
  uint64_t v8;
  int v9;
  __int128 *v10;
  __int128 v11;
  std::string *v12;
  __int128 v13;
  std::string *v14;
  __int128 v15;
  int v16;
  const std::string::value_type *v17;
  std::string::size_type v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  void *v22;
  char v23;
  std::string __p;
  std::string v25;
  std::string v26;
  std::string v27;
  void *v28;
  __int128 v29;
  _QWORD v30[3];

  v30[2] = *MEMORY[0x24BDAC8D0];
  v8 = a3 + 8;
  if (a3 + 8 == std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(a3, *(const void ***)(a1[4] + 8))|| v8 == std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(a3, *(const void ***)(a1[7] + 8))|| (v9 = *(_DWORD *)std::map<std::string,turi::neural_net::shared_float_array>::at(a3, *(const void ***)(a1[4] + 8)), v9 == *(_DWORD *)std::map<std::string,turi::neural_net::shared_float_array>::at(a3, *(const void ***)(a1[7] + 8))))
  {
    CoreML::Result::Result(a4);
  }
  else
  {
    v28 = 0;
    v29 = 0uLL;
    v10 = (__int128 *)a1[14];
    if (*((char *)v10 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
    }
    else
    {
      v11 = *v10;
      __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v10 + 2);
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v11;
    }
    v12 = std::string::insert(&__p, 0, "Layer '");
    v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v25.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    v14 = std::string::append(&v25, "' of type '");
    v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v26.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    v16 = *(char *)(a2 + 23);
    if (v16 >= 0)
      v17 = (const std::string::value_type *)a2;
    else
      v17 = *(const std::string::value_type **)a2;
    if (v16 >= 0)
      v18 = *(unsigned __int8 *)(a2 + 23);
    else
      v18 = *(_QWORD *)(a2 + 8);
    v19 = std::string::append(&v26, v17, v18);
    v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v27.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    v21 = std::string::append(&v27, "' expects equal ranks for its input and output, but they are not equal.");
    v22 = (void *)v21->__r_.__value_.__r.__words[0];
    v30[0] = v21->__r_.__value_.__l.__size_;
    *(_QWORD *)((char *)v30 + 7) = *(std::string::size_type *)((char *)&v21->__r_.__value_.__r.__words[1] + 7);
    v23 = HIBYTE(v21->__r_.__value_.__r.__words[2]);
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    *(_QWORD *)((char *)&v29 + 7) = *(_QWORD *)((char *)v30 + 7);
    v28 = v22;
    *(_QWORD *)&v29 = v30[0];
    HIBYTE(v29) = v23;
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v27.__r_.__value_.__l.__data_);
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v26.__r_.__value_.__l.__data_);
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v25.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    CoreML::Result::Result(a4, 13);
    if (SHIBYTE(v29) < 0)
      operator delete(v28);
  }
}

void sub_2183371D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  _Unwind_Resume(exception_object);
}

void CoreML::validateRankCount(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  int v12;
  void **v13;
  int v14;
  void **v15;
  void *__p[2];
  char v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;

  CoreML::Result::Result((CoreML::Result *)a6);
  if (a5 + 8 != std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(a5, *(const void ***)(*(_QWORD *)(a1 + 32) + 8)))
  {
    v12 = *(_DWORD *)std::map<std::string,turi::neural_net::shared_float_array>::at(a5, *(const void ***)(*(_QWORD *)(a1 + 32) + 8));
    std::string::basic_string[abi:ne180100]<0>(__p, "input");
    CoreML::checkRank(a2, a3, a4, (uint64_t)__p, v12, (CoreML::Result *)&v18);
    *(_QWORD *)a6 = v18;
    v13 = (void **)(a6 + 8);
    if (*(char *)(a6 + 31) < 0)
      operator delete(*v13);
    *(_OWORD *)v13 = v19;
    *(_QWORD *)(a6 + 24) = v20;
    HIBYTE(v20) = 0;
    LOBYTE(v19) = 0;
    if (v17 < 0)
      operator delete(__p[0]);
  }
  if (CoreML::Result::good((CoreML::Result *)a6)
    && a5 + 8 != std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(a5, *(const void ***)(*(_QWORD *)(a1 + 56) + 8)))
  {
    v14 = *(_DWORD *)std::map<std::string,turi::neural_net::shared_float_array>::at(a5, *(const void ***)(*(_QWORD *)(a1 + 56) + 8));
    std::string::basic_string[abi:ne180100]<0>(__p, "output");
    CoreML::checkRank(a2, a3, a4, (uint64_t)__p, v14, (CoreML::Result *)&v18);
    *(_QWORD *)a6 = v18;
    v15 = (void **)(a6 + 8);
    if (*(char *)(a6 + 31) < 0)
      operator delete(*v15);
    *(_OWORD *)v15 = v19;
    *(_QWORD *)(a6 + 24) = v20;
    HIBYTE(v20) = 0;
    LOBYTE(v19) = 0;
    if (v17 < 0)
      operator delete(__p[0]);
  }
}

void sub_2183373FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v15 + 31) < 0)
    operator delete(*(void **)(v15 + 8));
  _Unwind_Resume(exception_object);
}

uint64_t CoreML::valueType(CoreML *this, const CoreML::Specification::WeightParams *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;

  v2 = *((_QWORD *)this + 5);
  if (*(char *)(v2 + 23) < 0)
    v3 = *(_QWORD *)(v2 + 8);
  else
    v3 = *(unsigned __int8 *)(v2 + 23);
  v4 = *((_QWORD *)this + 6);
  v5 = *(unsigned __int8 *)(v4 + 23);
  if (*(char *)(v4 + 23) < 0)
    v6 = *(_QWORD *)(v4 + 8);
  else
    v6 = *(unsigned __int8 *)(v4 + 23);
  v7 = *((_DWORD *)this + 4);
  v8 = *((_QWORD *)this + 7);
  v9 = *(unsigned __int8 *)(v8 + 23);
  if (*(char *)(v8 + 23) < 0)
    v10 = *(_QWORD *)(v8 + 8);
  else
    v10 = *(unsigned __int8 *)(v8 + 23);
  if (v7 <= 0)
    v11 = 1;
  else
    v11 = 2;
  if (v3)
    v12 = v11;
  else
    v12 = v7 > 0;
  if (v6)
    ++v12;
  if (v10)
    v13 = v12 + 1;
  else
    v13 = v12;
  if (v13 > 1)
    return 4;
  if (v13)
    v14 = 0;
  else
    v14 = 5;
  if (v7 <= 0 && v13)
  {
    if ((*(_BYTE *)(v2 + 23) & 0x80) != 0)
    {
      if (*(_QWORD *)(v2 + 8))
        return 1;
    }
    else if (*(_BYTE *)(v2 + 23))
    {
      return 1;
    }
    if ((v5 & 0x80) != 0)
      v5 = *(_QWORD *)(v4 + 8);
    v15 = *((_QWORD *)this + 8);
    if (this != (CoreML *)&CoreML::Specification::_WeightParams_default_instance_ && v5 && v15)
    {
      return 2;
    }
    else
    {
      if ((v9 & 0x80) != 0)
        v9 = *(_QWORD *)(v8 + 8);
      if (v15)
        v16 = v9 == 0;
      else
        v16 = 1;
      if (v16 || this == (CoreML *)&CoreML::Specification::_WeightParams_default_instance_)
        return 5;
      else
        return 3;
    }
  }
  return v14;
}

void CoreML::validateGeneralWeightParams(uint64_t a1@<X0>, const CoreML::Specification::WeightParams *a2@<X1>, const CoreML::Specification::WeightParams *a3@<X2>, const void **a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  size_t v25;
  std::string *v26;
  const void *v27;
  int v28;
  const std::string::value_type *v29;
  std::string::size_type v30;
  std::string *v31;
  __int128 v32;
  std::string *v33;
  __int128 v34;
  int v35;
  const std::string::value_type *v36;
  std::string::size_type v37;
  std::string *v38;
  __int128 v39;
  std::string *v40;
  __int128 v41;
  uint64_t v42;
  size_t v43;
  std::string *v44;
  const void *v45;
  int v46;
  const std::string::value_type *v47;
  std::string::size_type v48;
  std::string *v49;
  __int128 v50;
  std::string *v51;
  __int128 v52;
  int v53;
  const std::string::value_type *v54;
  std::string::size_type v55;
  std::string *v56;
  __int128 v57;
  std::string *v58;
  __int128 v59;
  std::string *v60;
  std::string::size_type v61;
  std::string *v62;
  __int128 v63;
  std::string *v64;
  __int128 v65;
  std::string *v66;
  std::string::size_type v67;
  std::string *v68;
  __int128 v69;
  std::string *v70;
  __int128 v71;
  size_t v72;
  std::string *v73;
  const void *v74;
  int v75;
  const std::string::value_type *v76;
  std::string::size_type v77;
  std::string *v78;
  __int128 v79;
  std::string *v80;
  __int128 v81;
  int v82;
  const std::string::value_type *v83;
  std::string::size_type v84;
  std::string *v85;
  __int128 v86;
  std::string *v87;
  __int128 v88;
  size_t v89;
  std::string *v90;
  const void *v91;
  int v92;
  const std::string::value_type *v93;
  std::string::size_type v94;
  std::string *v95;
  __int128 v96;
  std::string *v97;
  __int128 v98;
  int v99;
  const std::string::value_type *v100;
  std::string::size_type v101;
  std::string *v102;
  __int128 v103;
  std::string *v104;
  __int128 v105;
  size_t v106;
  std::string *v107;
  const void *v108;
  int v109;
  const std::string::value_type *v110;
  std::string::size_type v111;
  std::string *v112;
  __int128 v113;
  std::string *v114;
  __int128 v115;
  int v116;
  const std::string::value_type *v117;
  std::string::size_type v118;
  std::string *v119;
  __int128 v120;
  std::string *v121;
  __int128 v122;
  std::string *v123;
  std::string::size_type size;
  std::string *v125;
  __int128 v126;
  std::string *v127;
  __int128 v128;
  std::string v129;
  std::string v130;
  std::string v131;
  std::string v132;
  std::string v133;
  std::string v134;
  std::string v135;
  std::string v136;
  std::string v137;
  std::string v138;
  __int128 v139;
  std::string::size_type v140;
  uint64_t v141;
  __int128 v142;
  uint64_t v143;

  CoreML::Result::Result((CoreML::Result *)&v141);
  v14 = *(_QWORD *)(a1 + 40);
  v15 = *(unsigned __int8 *)(v14 + 23);
  if (*(char *)(v14 + 23) < 0)
    v16 = *(_QWORD *)(v14 + 8);
  else
    v16 = *(unsigned __int8 *)(v14 + 23);
  v17 = *(int *)(a1 + 16);
  v18 = *(_QWORD *)(a1 + 48);
  v19 = *(unsigned __int8 *)(v18 + 23);
  if (*(char *)(v18 + 23) < 0)
    v20 = *(_QWORD *)(v18 + 8);
  else
    v20 = *(unsigned __int8 *)(v18 + 23);
  v21 = *(_QWORD *)(a1 + 56);
  if (*(char *)(v21 + 23) < 0)
    v22 = *(_QWORD *)(v21 + 8);
  else
    v22 = *(unsigned __int8 *)(v21 + 23);
  if ((int)v17 <= 0)
    v23 = 1;
  else
    v23 = 2;
  if (v16)
    v24 = v23;
  else
    v24 = (int)v17 > 0;
  if (v20)
    ++v24;
  if (v22)
    ++v24;
  if (v24 <= 1)
  {
    if ((int)v17 <= 0 && v24)
    {
      if ((v15 & 0x80) != 0)
      {
        v15 = *(_QWORD *)(v14 + 8);
        if (v15)
          goto LABEL_56;
      }
      else if (*(_BYTE *)(v14 + 23))
      {
LABEL_56:
        v17 = v15 >> 1;
        goto LABEL_58;
      }
      if ((v19 & 0x80) != 0)
        v19 = *(_QWORD *)(v18 + 8);
      if ((uint64_t *)a1 != &CoreML::Specification::_WeightParams_default_instance_ && v19 && *(_QWORD *)(a1 + 64))
      {
        if (!CoreML::hasSufficientBytesInQuantizedWeightParam((CoreML *)a1, a2))
        {
          if (*((char *)a4 + 23) >= 0)
            v106 = *((unsigned __int8 *)a4 + 23);
          else
            v106 = (size_t)a4[1];
          v107 = &v133;
          std::string::basic_string[abi:ne180100]((uint64_t)&v133, v106 + 7);
          if ((v133.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v107 = (std::string *)v133.__r_.__value_.__r.__words[0];
          if (v106)
          {
            if (*((char *)a4 + 23) >= 0)
              v108 = a4;
            else
              v108 = *a4;
            memmove(v107, v108, v106);
          }
          strcpy((char *)v107 + v106, "Layer '");
          v109 = *(char *)(a5 + 23);
          if (v109 >= 0)
            v110 = (const std::string::value_type *)a5;
          else
            v110 = *(const std::string::value_type **)a5;
          if (v109 >= 0)
            v111 = *(unsigned __int8 *)(a5 + 23);
          else
            v111 = *(_QWORD *)(a5 + 8);
          v112 = std::string::append(&v133, v110, v111);
          v113 = *(_OWORD *)&v112->__r_.__value_.__l.__data_;
          v134.__r_.__value_.__r.__words[2] = v112->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v134.__r_.__value_.__l.__data_ = v113;
          v112->__r_.__value_.__l.__size_ = 0;
          v112->__r_.__value_.__r.__words[2] = 0;
          v112->__r_.__value_.__r.__words[0] = 0;
          v114 = std::string::append(&v134, "' has insufficient bytes for quantized ");
          v115 = *(_OWORD *)&v114->__r_.__value_.__l.__data_;
          v135.__r_.__value_.__r.__words[2] = v114->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v135.__r_.__value_.__l.__data_ = v115;
          v114->__r_.__value_.__l.__size_ = 0;
          v114->__r_.__value_.__r.__words[2] = 0;
          v114->__r_.__value_.__r.__words[0] = 0;
          v116 = *(char *)(a6 + 23);
          if (v116 >= 0)
            v117 = (const std::string::value_type *)a6;
          else
            v117 = *(const std::string::value_type **)a6;
          if (v116 >= 0)
            v118 = *(unsigned __int8 *)(a6 + 23);
          else
            v118 = *(_QWORD *)(a6 + 8);
          v119 = std::string::append(&v135, v117, v118);
          v120 = *(_OWORD *)&v119->__r_.__value_.__l.__data_;
          v136.__r_.__value_.__r.__words[2] = v119->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v136.__r_.__value_.__l.__data_ = v120;
          v119->__r_.__value_.__l.__size_ = 0;
          v119->__r_.__value_.__r.__words[2] = 0;
          v119->__r_.__value_.__r.__words[0] = 0;
          v121 = std::string::append(&v136, " with ");
          v122 = *(_OWORD *)&v121->__r_.__value_.__l.__data_;
          v137.__r_.__value_.__r.__words[2] = v121->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v137.__r_.__value_.__l.__data_ = v122;
          v121->__r_.__value_.__l.__size_ = 0;
          v121->__r_.__value_.__r.__words[2] = 0;
          v121->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v132, (unint64_t)a2);
          if ((v132.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v123 = &v132;
          else
            v123 = (std::string *)v132.__r_.__value_.__r.__words[0];
          if ((v132.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(v132.__r_.__value_.__r.__words[2]);
          else
            size = v132.__r_.__value_.__l.__size_;
          v125 = std::string::append(&v137, (const std::string::value_type *)v123, size);
          v126 = *(_OWORD *)&v125->__r_.__value_.__l.__data_;
          v138.__r_.__value_.__r.__words[2] = v125->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v138.__r_.__value_.__l.__data_ = v126;
          v125->__r_.__value_.__l.__size_ = 0;
          v125->__r_.__value_.__r.__words[2] = 0;
          v125->__r_.__value_.__r.__words[0] = 0;
          v127 = std::string::append(&v138, "units.");
          v128 = *(_OWORD *)&v127->__r_.__value_.__l.__data_;
          v140 = v127->__r_.__value_.__r.__words[2];
          v139 = v128;
          v127->__r_.__value_.__l.__size_ = 0;
          v127->__r_.__value_.__r.__words[2] = 0;
          v127->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v138.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v138.__r_.__value_.__l.__data_);
          if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v132.__r_.__value_.__l.__data_);
          if (SHIBYTE(v137.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v137.__r_.__value_.__l.__data_);
          if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v136.__r_.__value_.__l.__data_);
          if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v135.__r_.__value_.__l.__data_);
          if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v134.__r_.__value_.__l.__data_);
          if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v133.__r_.__value_.__l.__data_);
          CoreML::Result::Result((_DWORD *)a7, 13);
          goto LABEL_185;
        }
        if (!CoreML::hasValidQuantizationParams((CoreML *)a1, a3))
        {
          if (*((char *)a4 + 23) >= 0)
            v72 = *((unsigned __int8 *)a4 + 23);
          else
            v72 = (size_t)a4[1];
          v73 = &v135;
          std::string::basic_string[abi:ne180100]((uint64_t)&v135, v72 + 7);
          if ((v135.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v73 = (std::string *)v135.__r_.__value_.__r.__words[0];
          if (v72)
          {
            if (*((char *)a4 + 23) >= 0)
              v74 = a4;
            else
              v74 = *a4;
            memmove(v73, v74, v72);
          }
          strcpy((char *)v73 + v72, "Layer '");
          v75 = *(char *)(a5 + 23);
          if (v75 >= 0)
            v76 = (const std::string::value_type *)a5;
          else
            v76 = *(const std::string::value_type **)a5;
          if (v75 >= 0)
            v77 = *(unsigned __int8 *)(a5 + 23);
          else
            v77 = *(_QWORD *)(a5 + 8);
          v78 = std::string::append(&v135, v76, v77);
          v79 = *(_OWORD *)&v78->__r_.__value_.__l.__data_;
          v136.__r_.__value_.__r.__words[2] = v78->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v136.__r_.__value_.__l.__data_ = v79;
          v78->__r_.__value_.__l.__size_ = 0;
          v78->__r_.__value_.__r.__words[2] = 0;
          v78->__r_.__value_.__r.__words[0] = 0;
          v80 = std::string::append(&v136, "' has invalid quantization parameters for quantized ");
          v81 = *(_OWORD *)&v80->__r_.__value_.__l.__data_;
          v137.__r_.__value_.__r.__words[2] = v80->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v137.__r_.__value_.__l.__data_ = v81;
          v80->__r_.__value_.__l.__size_ = 0;
          v80->__r_.__value_.__r.__words[2] = 0;
          v80->__r_.__value_.__r.__words[0] = 0;
          v82 = *(char *)(a6 + 23);
          if (v82 >= 0)
            v83 = (const std::string::value_type *)a6;
          else
            v83 = *(const std::string::value_type **)a6;
          if (v82 >= 0)
            v84 = *(unsigned __int8 *)(a6 + 23);
          else
            v84 = *(_QWORD *)(a6 + 8);
          v85 = std::string::append(&v137, v83, v84);
          v86 = *(_OWORD *)&v85->__r_.__value_.__l.__data_;
          v138.__r_.__value_.__r.__words[2] = v85->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v138.__r_.__value_.__l.__data_ = v86;
          v85->__r_.__value_.__l.__size_ = 0;
          v85->__r_.__value_.__r.__words[2] = 0;
          v85->__r_.__value_.__r.__words[0] = 0;
          v87 = std::string::append(&v138, ".");
          v88 = *(_OWORD *)&v87->__r_.__value_.__l.__data_;
          v140 = v87->__r_.__value_.__r.__words[2];
          v139 = v88;
          v87->__r_.__value_.__l.__size_ = 0;
          v87->__r_.__value_.__r.__words[2] = 0;
          v87->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v138.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v138.__r_.__value_.__l.__data_);
          if (SHIBYTE(v137.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v137.__r_.__value_.__l.__data_);
          if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v136.__r_.__value_.__l.__data_);
          if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v135.__r_.__value_.__l.__data_);
          goto LABEL_184;
        }
LABEL_59:
        v42 = v143;
        *(_QWORD *)a7 = v141;
        *(_OWORD *)(a7 + 8) = v142;
        *(_QWORD *)(a7 + 24) = v42;
        v142 = 0uLL;
        v143 = 0;
        goto LABEL_187;
      }
    }
    else if (v24)
    {
LABEL_58:
      if ((const CoreML::Specification::WeightParams *)v17 != a2)
      {
        if (*((char *)a4 + 23) >= 0)
          v43 = *((unsigned __int8 *)a4 + 23);
        else
          v43 = (size_t)a4[1];
        v44 = &v131;
        std::string::basic_string[abi:ne180100]((uint64_t)&v131, v43 + 7);
        if ((v131.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v44 = (std::string *)v131.__r_.__value_.__r.__words[0];
        if (v43)
        {
          if (*((char *)a4 + 23) >= 0)
            v45 = a4;
          else
            v45 = *a4;
          memmove(v44, v45, v43);
        }
        strcpy((char *)v44 + v43, "Layer '");
        v46 = *(char *)(a5 + 23);
        if (v46 >= 0)
          v47 = (const std::string::value_type *)a5;
        else
          v47 = *(const std::string::value_type **)a5;
        if (v46 >= 0)
          v48 = *(unsigned __int8 *)(a5 + 23);
        else
          v48 = *(_QWORD *)(a5 + 8);
        v49 = std::string::append(&v131, v47, v48);
        v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
        v132.__r_.__value_.__r.__words[2] = v49->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v132.__r_.__value_.__l.__data_ = v50;
        v49->__r_.__value_.__l.__size_ = 0;
        v49->__r_.__value_.__r.__words[2] = 0;
        v49->__r_.__value_.__r.__words[0] = 0;
        v51 = std::string::append(&v132, "' has incorrect ");
        v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
        v133.__r_.__value_.__r.__words[2] = v51->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v133.__r_.__value_.__l.__data_ = v52;
        v51->__r_.__value_.__l.__size_ = 0;
        v51->__r_.__value_.__r.__words[2] = 0;
        v51->__r_.__value_.__r.__words[0] = 0;
        v53 = *(char *)(a6 + 23);
        if (v53 >= 0)
          v54 = (const std::string::value_type *)a6;
        else
          v54 = *(const std::string::value_type **)a6;
        if (v53 >= 0)
          v55 = *(unsigned __int8 *)(a6 + 23);
        else
          v55 = *(_QWORD *)(a6 + 8);
        v56 = std::string::append(&v133, v54, v55);
        v57 = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
        v134.__r_.__value_.__r.__words[2] = v56->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v134.__r_.__value_.__l.__data_ = v57;
        v56->__r_.__value_.__l.__size_ = 0;
        v56->__r_.__value_.__r.__words[2] = 0;
        v56->__r_.__value_.__r.__words[0] = 0;
        v58 = std::string::append(&v134, " size ");
        v59 = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
        v135.__r_.__value_.__r.__words[2] = v58->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v135.__r_.__value_.__l.__data_ = v59;
        v58->__r_.__value_.__l.__size_ = 0;
        v58->__r_.__value_.__r.__words[2] = 0;
        v58->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v130, v17);
        if ((v130.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v60 = &v130;
        else
          v60 = (std::string *)v130.__r_.__value_.__r.__words[0];
        if ((v130.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v61 = HIBYTE(v130.__r_.__value_.__r.__words[2]);
        else
          v61 = v130.__r_.__value_.__l.__size_;
        v62 = std::string::append(&v135, (const std::string::value_type *)v60, v61);
        v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
        v136.__r_.__value_.__r.__words[2] = v62->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v136.__r_.__value_.__l.__data_ = v63;
        v62->__r_.__value_.__l.__size_ = 0;
        v62->__r_.__value_.__r.__words[2] = 0;
        v62->__r_.__value_.__r.__words[0] = 0;
        v64 = std::string::append(&v136, " (expected ");
        v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
        v137.__r_.__value_.__r.__words[2] = v64->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v137.__r_.__value_.__l.__data_ = v65;
        v64->__r_.__value_.__l.__size_ = 0;
        v64->__r_.__value_.__r.__words[2] = 0;
        v64->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v129, (unint64_t)a2);
        if ((v129.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v66 = &v129;
        else
          v66 = (std::string *)v129.__r_.__value_.__r.__words[0];
        if ((v129.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v67 = HIBYTE(v129.__r_.__value_.__r.__words[2]);
        else
          v67 = v129.__r_.__value_.__l.__size_;
        v68 = std::string::append(&v137, (const std::string::value_type *)v66, v67);
        v69 = *(_OWORD *)&v68->__r_.__value_.__l.__data_;
        v138.__r_.__value_.__r.__words[2] = v68->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v138.__r_.__value_.__l.__data_ = v69;
        v68->__r_.__value_.__l.__size_ = 0;
        v68->__r_.__value_.__r.__words[2] = 0;
        v68->__r_.__value_.__r.__words[0] = 0;
        v70 = std::string::append(&v138, ").");
        v71 = *(_OWORD *)&v70->__r_.__value_.__l.__data_;
        v140 = v70->__r_.__value_.__r.__words[2];
        v139 = v71;
        v70->__r_.__value_.__l.__size_ = 0;
        v70->__r_.__value_.__r.__words[2] = 0;
        v70->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v138.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v138.__r_.__value_.__l.__data_);
        if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v129.__r_.__value_.__l.__data_);
        if (SHIBYTE(v137.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v137.__r_.__value_.__l.__data_);
        if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v136.__r_.__value_.__l.__data_);
        if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v130.__r_.__value_.__l.__data_);
        if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v135.__r_.__value_.__l.__data_);
        if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v134.__r_.__value_.__l.__data_);
        if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v133.__r_.__value_.__l.__data_);
        if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v132.__r_.__value_.__l.__data_);
        if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v131.__r_.__value_.__l.__data_);
        CoreML::Result::Result((_DWORD *)a7, 13);
        goto LABEL_185;
      }
      goto LABEL_59;
    }
    if (*((char *)a4 + 23) >= 0)
      v89 = *((unsigned __int8 *)a4 + 23);
    else
      v89 = (size_t)a4[1];
    v90 = &v135;
    std::string::basic_string[abi:ne180100]((uint64_t)&v135, v89 + 7);
    if ((v135.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v90 = (std::string *)v135.__r_.__value_.__r.__words[0];
    if (v89)
    {
      if (*((char *)a4 + 23) >= 0)
        v91 = a4;
      else
        v91 = *a4;
      memmove(v90, v91, v89);
    }
    strcpy((char *)v90 + v89, "Layer '");
    v92 = *(char *)(a5 + 23);
    if (v92 >= 0)
      v93 = (const std::string::value_type *)a5;
    else
      v93 = *(const std::string::value_type **)a5;
    if (v92 >= 0)
      v94 = *(unsigned __int8 *)(a5 + 23);
    else
      v94 = *(_QWORD *)(a5 + 8);
    v95 = std::string::append(&v135, v93, v94);
    v96 = *(_OWORD *)&v95->__r_.__value_.__l.__data_;
    v136.__r_.__value_.__r.__words[2] = v95->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v136.__r_.__value_.__l.__data_ = v96;
    v95->__r_.__value_.__l.__size_ = 0;
    v95->__r_.__value_.__r.__words[2] = 0;
    v95->__r_.__value_.__r.__words[0] = 0;
    v97 = std::string::append(&v136, "' has empty ");
    v98 = *(_OWORD *)&v97->__r_.__value_.__l.__data_;
    v137.__r_.__value_.__r.__words[2] = v97->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v137.__r_.__value_.__l.__data_ = v98;
    v97->__r_.__value_.__l.__size_ = 0;
    v97->__r_.__value_.__r.__words[2] = 0;
    v97->__r_.__value_.__r.__words[0] = 0;
    v99 = *(char *)(a6 + 23);
    if (v99 >= 0)
      v100 = (const std::string::value_type *)a6;
    else
      v100 = *(const std::string::value_type **)a6;
    if (v99 >= 0)
      v101 = *(unsigned __int8 *)(a6 + 23);
    else
      v101 = *(_QWORD *)(a6 + 8);
    v102 = std::string::append(&v137, v100, v101);
    v103 = *(_OWORD *)&v102->__r_.__value_.__l.__data_;
    v138.__r_.__value_.__r.__words[2] = v102->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v138.__r_.__value_.__l.__data_ = v103;
    v102->__r_.__value_.__l.__size_ = 0;
    v102->__r_.__value_.__r.__words[2] = 0;
    v102->__r_.__value_.__r.__words[0] = 0;
    v104 = std::string::append(&v138, ".");
    v105 = *(_OWORD *)&v104->__r_.__value_.__l.__data_;
    v140 = v104->__r_.__value_.__r.__words[2];
    v139 = v105;
    v104->__r_.__value_.__l.__size_ = 0;
    v104->__r_.__value_.__r.__words[2] = 0;
    v104->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v138.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v138.__r_.__value_.__l.__data_);
    if (SHIBYTE(v137.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v137.__r_.__value_.__l.__data_);
    if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v136.__r_.__value_.__l.__data_);
    if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v135.__r_.__value_.__l.__data_);
    goto LABEL_184;
  }
  if (*((char *)a4 + 23) >= 0)
    v25 = *((unsigned __int8 *)a4 + 23);
  else
    v25 = (size_t)a4[1];
  v26 = &v135;
  std::string::basic_string[abi:ne180100]((uint64_t)&v135, v25 + 7);
  if ((v135.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v26 = (std::string *)v135.__r_.__value_.__r.__words[0];
  if (v25)
  {
    if (*((char *)a4 + 23) >= 0)
      v27 = a4;
    else
      v27 = *a4;
    memmove(v26, v27, v25);
  }
  strcpy((char *)v26 + v25, "Layer '");
  v28 = *(char *)(a5 + 23);
  if (v28 >= 0)
    v29 = (const std::string::value_type *)a5;
  else
    v29 = *(const std::string::value_type **)a5;
  if (v28 >= 0)
    v30 = *(unsigned __int8 *)(a5 + 23);
  else
    v30 = *(_QWORD *)(a5 + 8);
  v31 = std::string::append(&v135, v29, v30);
  v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
  v136.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v136.__r_.__value_.__l.__data_ = v32;
  v31->__r_.__value_.__l.__size_ = 0;
  v31->__r_.__value_.__r.__words[2] = 0;
  v31->__r_.__value_.__r.__words[0] = 0;
  v33 = std::string::append(&v136, "' has unspecified ");
  v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
  v137.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v137.__r_.__value_.__l.__data_ = v34;
  v33->__r_.__value_.__l.__size_ = 0;
  v33->__r_.__value_.__r.__words[2] = 0;
  v33->__r_.__value_.__r.__words[0] = 0;
  v35 = *(char *)(a6 + 23);
  if (v35 >= 0)
    v36 = (const std::string::value_type *)a6;
  else
    v36 = *(const std::string::value_type **)a6;
  if (v35 >= 0)
    v37 = *(unsigned __int8 *)(a6 + 23);
  else
    v37 = *(_QWORD *)(a6 + 8);
  v38 = std::string::append(&v137, v36, v37);
  v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
  v138.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v138.__r_.__value_.__l.__data_ = v39;
  v38->__r_.__value_.__l.__size_ = 0;
  v38->__r_.__value_.__r.__words[2] = 0;
  v38->__r_.__value_.__r.__words[0] = 0;
  v40 = std::string::append(&v138, ".");
  v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
  v140 = v40->__r_.__value_.__r.__words[2];
  v139 = v41;
  v40->__r_.__value_.__l.__size_ = 0;
  v40->__r_.__value_.__r.__words[2] = 0;
  v40->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v138.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v138.__r_.__value_.__l.__data_);
  if (SHIBYTE(v137.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v137.__r_.__value_.__l.__data_);
  if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v136.__r_.__value_.__l.__data_);
  if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v135.__r_.__value_.__l.__data_);
LABEL_184:
  CoreML::Result::Result((_DWORD *)a7, 13);
LABEL_185:
  if (SHIBYTE(v140) < 0)
    operator delete((void *)v139);
LABEL_187:
  if (SHIBYTE(v143) < 0)
    operator delete((void *)v142);
}

void sub_21833809C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,uint64_t a55,void *__p,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  uint64_t v61;

  if (*(char *)(v61 - 121) < 0)
    operator delete(*(void **)(v61 - 144));
  if (*(char *)(v61 - 81) < 0)
    operator delete(*(void **)(v61 - 104));
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateConvolution3DLayer(CoreML::NeuralNetworkSpecValidator *this@<X0>, const CoreML::Specification::NeuralNetworkLayer *a2@<X1>, uint64_t a3@<X8>)
{
  _BOOL8 v6;
  char *v7;
  uint64_t *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  const CoreML::Specification::WeightParams *v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  CoreML *v26;
  const CoreML::Specification::WeightParams *v27;
  int v28;
  CoreML *v29;
  BOOL v30;
  int v31;
  std::string *v32;
  __int128 v33;
  std::string *v34;
  __int128 v35;
  void *v36;
  std::string *v37;
  __int128 v38;
  std::string *v39;
  __int128 v40;
  std::string *v41;
  __int128 v42;
  std::string *v43;
  __int128 v44;
  std::string *v45;
  __int128 v46;
  std::string *v47;
  __int128 v48;
  std::string *v49;
  __int128 v50;
  std::string *v51;
  __int128 v52;
  std::string *v53;
  __int128 v54;
  std::string *v55;
  __int128 v56;
  std::string *v57;
  __int128 v58;
  std::string *v59;
  __int128 v60;
  std::string *v61;
  __int128 v62;
  std::string::size_type v63;
  uint64_t v64;
  int v65;
  std::string *v66;
  __int128 v67;
  std::string *v68;
  __int128 v69;
  std::string *v70;
  __int128 v71;
  std::string *v72;
  __int128 v73;
  int v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  unint64_t v79;
  std::string *v80;
  __int128 v81;
  std::string *v82;
  __int128 v83;
  std::string *v84;
  __int128 v85;
  unint64_t v86;
  std::string *v87;
  __int128 v88;
  std::string *v89;
  std::string::size_type size;
  std::string *v91;
  __int128 v92;
  std::string *v93;
  __int128 v94;
  std::string *v95;
  std::string::size_type v96;
  std::string *v97;
  __int128 v98;
  std::string *v99;
  __int128 v100;
  uint64_t v101;
  int v102;
  int v103;
  unsigned int v104;
  int v105;
  int v106;
  std::string v107;
  std::string v108;
  std::string v109;
  std::string v110;
  std::string v111;
  std::string v112;
  std::string __p;
  void *v114[2];
  char v115;
  std::string v116;
  uint64_t v117;
  std::string::size_type v118;
  __int128 v119;
  uint64_t v120;

  CoreML::Result::Result((CoreML::Result *)&v118);
  CoreML::validateInputCount(a2, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v116);
  v118 = v116.__r_.__value_.__r.__words[0];
  if (SHIBYTE(v120) < 0)
    operator delete((void *)v119);
  v119 = *(_OWORD *)&v116.__r_.__value_.__r.__words[1];
  v120 = v117;
  if (!CoreML::Result::good((CoreML::Result *)&v118))
    goto LABEL_206;
  CoreML::validateOutputCount(a2, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v116);
  v118 = v116.__r_.__value_.__r.__words[0];
  if (SHIBYTE(v120) < 0)
    operator delete((void *)v119);
  v119 = *(_OWORD *)&v116.__r_.__value_.__r.__words[1];
  v120 = v117;
  v6 = CoreML::Result::good((CoreML::Result *)&v118);
  if (!v6)
    goto LABEL_206;
  if (*(_BYTE *)this)
  {
    std::string::basic_string[abi:ne180100]<0>(v114, "Convolution3D");
    v7 = (char *)this + 32;
    CoreML::validateInputOutputRankEquality(a2, (uint64_t)v114, (uint64_t)v7, (CoreML::Result *)&v116);
    v118 = v116.__r_.__value_.__r.__words[0];
    if (SHIBYTE(v120) < 0)
      operator delete((void *)v119);
    v119 = *(_OWORD *)&v116.__r_.__value_.__r.__words[1];
    v120 = v117;
    HIBYTE(v117) = 0;
    v116.__r_.__value_.__s.__data_[8] = 0;
    if (v115 < 0)
      operator delete(v114[0]);
    if (!CoreML::Result::good((CoreML::Result *)&v118))
      goto LABEL_206;
    std::string::basic_string[abi:ne180100]<0>(&__p, "Convolution3D");
    CoreML::validateRankCount((uint64_t)a2, (uint64_t)&__p, 5, -1, (uint64_t)v7, (uint64_t)&v116);
    v118 = v116.__r_.__value_.__r.__words[0];
    if (SHIBYTE(v120) < 0)
      operator delete((void *)v119);
    v119 = *(_OWORD *)&v116.__r_.__value_.__r.__words[1];
    v120 = v117;
    HIBYTE(v117) = 0;
    v116.__r_.__value_.__s.__data_[8] = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v6 = CoreML::Result::good((CoreML::Result *)&v118);
    if (!v6)
      goto LABEL_206;
  }
  if (*((_DWORD *)a2 + 35) == 1471)
    v8 = (uint64_t *)*((_QWORD *)a2 + 16);
  else
    v8 = CoreML::Specification::Convolution3DLayerParams::default_instance((CoreML::Specification::Convolution3DLayerParams *)v6);
  if (*((_DWORD *)a2 + 6) != 1)
  {
    std::operator+<char>();
    v34 = std::string::append(&__p, "', convolution3D does not support weight as input tensor.");
    v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
    v116.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v116.__r_.__value_.__l.__data_ = v35;
    v34->__r_.__value_.__l.__size_ = 0;
    v34->__r_.__value_.__r.__words[2] = 0;
    v34->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
LABEL_116:
    CoreML::Result::Result((_DWORD *)a3, 13);
LABEL_117:
    if ((SHIBYTE(v116.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_207;
    v36 = (void *)v116.__r_.__value_.__r.__words[0];
    goto LABEL_119;
  }
  v9 = *((_DWORD *)v8 + 14);
  v10 = *((_DWORD *)v8 + 15);
  v11 = *((_DWORD *)v8 + 16);
  std::string::basic_string[abi:ne180100]<0>(&__p, "Input Channels");
  CoreML::validatePositive(v10, (const void **)&__p.__r_.__value_.__l.__data_, (CoreML::Result *)&v116);
  v118 = v116.__r_.__value_.__r.__words[0];
  if (SHIBYTE(v120) < 0)
    operator delete((void *)v119);
  v119 = *(_OWORD *)&v116.__r_.__value_.__r.__words[1];
  v120 = v117;
  HIBYTE(v117) = 0;
  v116.__r_.__value_.__s.__data_[8] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (!CoreML::Result::good((CoreML::Result *)&v118))
    goto LABEL_206;
  std::string::basic_string[abi:ne180100]<0>(&__p, "Output Channels");
  CoreML::validatePositive(v9, (const void **)&__p.__r_.__value_.__l.__data_, (CoreML::Result *)&v116);
  v118 = v116.__r_.__value_.__r.__words[0];
  if (SHIBYTE(v120) < 0)
    operator delete((void *)v119);
  v119 = *(_OWORD *)&v116.__r_.__value_.__r.__words[1];
  v120 = v117;
  HIBYTE(v117) = 0;
  v116.__r_.__value_.__s.__data_[8] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (!CoreML::Result::good((CoreML::Result *)&v118))
    goto LABEL_206;
  std::string::basic_string[abi:ne180100]<0>(&__p, "Groups");
  CoreML::validatePositive(v11, (const void **)&__p.__r_.__value_.__l.__data_, (CoreML::Result *)&v116);
  v118 = v116.__r_.__value_.__r.__words[0];
  if (SHIBYTE(v120) < 0)
    operator delete((void *)v119);
  v119 = *(_OWORD *)&v116.__r_.__value_.__r.__words[1];
  v120 = v117;
  HIBYTE(v117) = 0;
  v116.__r_.__value_.__s.__data_[8] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (!CoreML::Result::good((CoreML::Result *)&v118))
    goto LABEL_206;
  v12 = *((_DWORD *)v8 + 17);
  v105 = *((_DWORD *)v8 + 19);
  v106 = *((_DWORD *)v8 + 18);
  std::string::basic_string[abi:ne180100]<0>(&__p, "Kernel Depth");
  CoreML::validatePositive(v12, (const void **)&__p.__r_.__value_.__l.__data_, (CoreML::Result *)&v116);
  v118 = v116.__r_.__value_.__r.__words[0];
  if (SHIBYTE(v120) < 0)
    operator delete((void *)v119);
  v119 = *(_OWORD *)&v116.__r_.__value_.__r.__words[1];
  v120 = v117;
  HIBYTE(v117) = 0;
  v116.__r_.__value_.__s.__data_[8] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (!CoreML::Result::good((CoreML::Result *)&v118))
    goto LABEL_206;
  std::string::basic_string[abi:ne180100]<0>(&__p, "Kernel Height");
  CoreML::validatePositive(v106, (const void **)&__p.__r_.__value_.__l.__data_, (CoreML::Result *)&v116);
  v118 = v116.__r_.__value_.__r.__words[0];
  if (SHIBYTE(v120) < 0)
    operator delete((void *)v119);
  v119 = *(_OWORD *)&v116.__r_.__value_.__r.__words[1];
  v120 = v117;
  HIBYTE(v117) = 0;
  v116.__r_.__value_.__s.__data_[8] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (!CoreML::Result::good((CoreML::Result *)&v118))
    goto LABEL_206;
  std::string::basic_string[abi:ne180100]<0>(&__p, "Kernel Width");
  CoreML::validatePositive(v105, (const void **)&__p.__r_.__value_.__l.__data_, (CoreML::Result *)&v116);
  v118 = v116.__r_.__value_.__r.__words[0];
  if (SHIBYTE(v120) < 0)
    operator delete((void *)v119);
  v119 = *(_OWORD *)&v116.__r_.__value_.__r.__words[1];
  v120 = v117;
  HIBYTE(v117) = 0;
  v116.__r_.__value_.__s.__data_[8] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (!CoreML::Result::good((CoreML::Result *)&v118))
    goto LABEL_206;
  v13 = *((_DWORD *)v8 + 20);
  std::string::basic_string[abi:ne180100]<0>(&__p, "Stride Depth");
  CoreML::validatePositive(v13, (const void **)&__p.__r_.__value_.__l.__data_, (CoreML::Result *)&v116);
  v118 = v116.__r_.__value_.__r.__words[0];
  if (SHIBYTE(v120) < 0)
    operator delete((void *)v119);
  v119 = *(_OWORD *)&v116.__r_.__value_.__r.__words[1];
  v120 = v117;
  HIBYTE(v117) = 0;
  v116.__r_.__value_.__s.__data_[8] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (!CoreML::Result::good((CoreML::Result *)&v118))
    goto LABEL_206;
  v14 = *((_DWORD *)v8 + 21);
  std::string::basic_string[abi:ne180100]<0>(&__p, "Stride Height");
  CoreML::validatePositive(v14, (const void **)&__p.__r_.__value_.__l.__data_, (CoreML::Result *)&v116);
  v118 = v116.__r_.__value_.__r.__words[0];
  if (SHIBYTE(v120) < 0)
    operator delete((void *)v119);
  v119 = *(_OWORD *)&v116.__r_.__value_.__r.__words[1];
  v120 = v117;
  HIBYTE(v117) = 0;
  v116.__r_.__value_.__s.__data_[8] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (!CoreML::Result::good((CoreML::Result *)&v118))
    goto LABEL_206;
  v15 = *((_DWORD *)v8 + 22);
  std::string::basic_string[abi:ne180100]<0>(&__p, "Stride Width");
  CoreML::validatePositive(v15, (const void **)&__p.__r_.__value_.__l.__data_, (CoreML::Result *)&v116);
  v118 = v116.__r_.__value_.__r.__words[0];
  if (SHIBYTE(v120) < 0)
    operator delete((void *)v119);
  v119 = *(_OWORD *)&v116.__r_.__value_.__r.__words[1];
  v120 = v117;
  HIBYTE(v117) = 0;
  v116.__r_.__value_.__s.__data_[8] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (!CoreML::Result::good((CoreML::Result *)&v118))
    goto LABEL_206;
  v16 = *((_DWORD *)v8 + 23);
  std::string::basic_string[abi:ne180100]<0>(&__p, "Dilation Depth");
  CoreML::validatePositive(v16, (const void **)&__p.__r_.__value_.__l.__data_, (CoreML::Result *)&v116);
  v118 = v116.__r_.__value_.__r.__words[0];
  if (SHIBYTE(v120) < 0)
    operator delete((void *)v119);
  v119 = *(_OWORD *)&v116.__r_.__value_.__r.__words[1];
  v120 = v117;
  HIBYTE(v117) = 0;
  v116.__r_.__value_.__s.__data_[8] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (!CoreML::Result::good((CoreML::Result *)&v118))
    goto LABEL_206;
  v17 = *((_DWORD *)v8 + 24);
  std::string::basic_string[abi:ne180100]<0>(&__p, "Dilation Height");
  CoreML::validatePositive(v17, (const void **)&__p.__r_.__value_.__l.__data_, (CoreML::Result *)&v116);
  v118 = v116.__r_.__value_.__r.__words[0];
  if (SHIBYTE(v120) < 0)
    operator delete((void *)v119);
  v119 = *(_OWORD *)&v116.__r_.__value_.__r.__words[1];
  v120 = v117;
  HIBYTE(v117) = 0;
  v116.__r_.__value_.__s.__data_[8] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (!CoreML::Result::good((CoreML::Result *)&v118))
    goto LABEL_206;
  v18 = *((_DWORD *)v8 + 25);
  std::string::basic_string[abi:ne180100]<0>(&__p, "Dilation Width");
  CoreML::validatePositive(v18, (const void **)&__p.__r_.__value_.__l.__data_, (CoreML::Result *)&v116);
  v118 = v116.__r_.__value_.__r.__words[0];
  if (SHIBYTE(v120) < 0)
    operator delete((void *)v119);
  v119 = *(_OWORD *)&v116.__r_.__value_.__r.__words[1];
  v120 = v117;
  HIBYTE(v117) = 0;
  v116.__r_.__value_.__s.__data_[8] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (!CoreML::Result::good((CoreML::Result *)&v118))
    goto LABEL_206;
  v20 = *((_DWORD *)v8 + 28);
  if (v20 < 0)
  {
    std::to_string(&v112, v20);
    v37 = std::string::insert(&v112, 0, "Custom Padding Front must be non-negative, got '");
    v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v38;
    v37->__r_.__value_.__l.__size_ = 0;
    v37->__r_.__value_.__r.__words[2] = 0;
    v37->__r_.__value_.__r.__words[0] = 0;
    v39 = std::string::append(&__p, "'.");
    v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
    v116.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v116.__r_.__value_.__l.__data_ = v40;
    v39->__r_.__value_.__l.__size_ = 0;
    v39->__r_.__value_.__r.__words[2] = 0;
    v39->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v112.__r_.__value_.__l.__data_);
    goto LABEL_149;
  }
  v21 = *((_DWORD *)v8 + 29);
  if (v21 < 0)
  {
    std::to_string(&v112, v21);
    v41 = std::string::insert(&v112, 0, "Custom Padding Back must be non-negative, got '");
    v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v42;
    v41->__r_.__value_.__l.__size_ = 0;
    v41->__r_.__value_.__r.__words[2] = 0;
    v41->__r_.__value_.__r.__words[0] = 0;
    v43 = std::string::append(&__p, "'.");
    v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
    v116.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v116.__r_.__value_.__l.__data_ = v44;
    v43->__r_.__value_.__l.__size_ = 0;
    v43->__r_.__value_.__r.__words[2] = 0;
    v43->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v112.__r_.__value_.__l.__data_);
    goto LABEL_149;
  }
  v22 = *((_DWORD *)v8 + 30);
  if (v22 < 0)
  {
    std::to_string(&v112, v22);
    v45 = std::string::insert(&v112, 0, "Custom Padding Top must be non-negative, got '");
    v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v45->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v46;
    v45->__r_.__value_.__l.__size_ = 0;
    v45->__r_.__value_.__r.__words[2] = 0;
    v45->__r_.__value_.__r.__words[0] = 0;
    v47 = std::string::append(&__p, "'.");
    v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
    v116.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v116.__r_.__value_.__l.__data_ = v48;
    v47->__r_.__value_.__l.__size_ = 0;
    v47->__r_.__value_.__r.__words[2] = 0;
    v47->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v112.__r_.__value_.__l.__data_);
    goto LABEL_149;
  }
  v23 = *((_DWORD *)v8 + 31);
  if (v23 < 0)
  {
    std::to_string(&v112, v23);
    v49 = std::string::insert(&v112, 0, "Custom Padding Bottom must be non-negative, got '");
    v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v49->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v50;
    v49->__r_.__value_.__l.__size_ = 0;
    v49->__r_.__value_.__r.__words[2] = 0;
    v49->__r_.__value_.__r.__words[0] = 0;
    v51 = std::string::append(&__p, "'.");
    v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
    v116.__r_.__value_.__r.__words[2] = v51->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v116.__r_.__value_.__l.__data_ = v52;
    v51->__r_.__value_.__l.__size_ = 0;
    v51->__r_.__value_.__r.__words[2] = 0;
    v51->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v112.__r_.__value_.__l.__data_);
    goto LABEL_149;
  }
  v24 = *((_DWORD *)v8 + 32);
  if (v24 < 0)
  {
    std::to_string(&v112, v24);
    v53 = std::string::insert(&v112, 0, "customPadding Left must be non-negative, got '");
    v54 = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v53->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v54;
    v53->__r_.__value_.__l.__size_ = 0;
    v53->__r_.__value_.__r.__words[2] = 0;
    v53->__r_.__value_.__r.__words[0] = 0;
    v55 = std::string::append(&__p, "'.");
    v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
    v116.__r_.__value_.__r.__words[2] = v55->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v116.__r_.__value_.__l.__data_ = v56;
    v55->__r_.__value_.__l.__size_ = 0;
    v55->__r_.__value_.__r.__words[2] = 0;
    v55->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v112.__r_.__value_.__l.__data_);
    goto LABEL_149;
  }
  v25 = *((_DWORD *)v8 + 33);
  if (v25 < 0)
  {
    std::to_string(&v112, v25);
    v57 = std::string::insert(&v112, 0, "customPadding Right must be non-negative, got '");
    v58 = *(_OWORD *)&v57->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v57->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v58;
    v57->__r_.__value_.__l.__size_ = 0;
    v57->__r_.__value_.__r.__words[2] = 0;
    v57->__r_.__value_.__r.__words[0] = 0;
    v59 = std::string::append(&__p, "'.");
    v60 = *(_OWORD *)&v59->__r_.__value_.__l.__data_;
    v116.__r_.__value_.__r.__words[2] = v59->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v116.__r_.__value_.__l.__data_ = v60;
    v59->__r_.__value_.__l.__size_ = 0;
    v59->__r_.__value_.__r.__words[2] = 0;
    v59->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v112.__r_.__value_.__l.__data_);
LABEL_149:
    CoreML::Result::Result((_DWORD *)a3, 13);
    goto LABEL_117;
  }
  if (v8[5])
    v26 = (CoreML *)v8[5];
  else
    v26 = (CoreML *)&CoreML::Specification::_WeightParams_default_instance_;
  v28 = CoreML::valueType(v26, v19);
  if (v8[6])
    v29 = (CoreML *)v8[6];
  else
    v29 = (CoreML *)&CoreML::Specification::_WeightParams_default_instance_;
  v104 = CoreML::valueType(v29, v27);
  v103 = *((unsigned __int8 *)v8 + 104);
  if (*((_BYTE *)v8 + 104))
    v30 = v104 == 4;
  else
    v30 = 0;
  v31 = v30;
  if (v28 == 4 || v31)
  {
    std::operator+<char>();
    v61 = std::string::append(&v116, "'  has invalid weights/bias fields.");
    v62 = *(_OWORD *)&v61->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v61->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v62;
    v61->__r_.__value_.__l.__size_ = 0;
    v61->__r_.__value_.__r.__words[2] = 0;
    v61->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v116.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v116.__r_.__value_.__l.__data_);
    CoreML::Result::Result(&v116, 13);
    goto LABEL_153;
  }
  if (*((_BYTE *)v8 + 104) && (v28 == 1 && !v104 || !v28 && v104 == 1))
  {
    std::operator+<char>();
    v32 = std::string::append(&v112, "' has unmatched precisions of weights/bias They should either be half or full precision.");
    v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v33;
    v32->__r_.__value_.__l.__size_ = 0;
    v32->__r_.__value_.__r.__words[2] = 0;
    v32->__r_.__value_.__r.__words[0] = 0;
    CoreML::Result::Result(&v116, 13);
LABEL_108:
    v118 = v116.__r_.__value_.__r.__words[0];
    if (SHIBYTE(v120) < 0)
      operator delete((void *)v119);
    v119 = *(_OWORD *)&v116.__r_.__value_.__r.__words[1];
    v120 = v117;
    HIBYTE(v117) = 0;
    v116.__r_.__value_.__s.__data_[8] = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v112.__r_.__value_.__l.__data_);
LABEL_206:
    *(_QWORD *)a3 = v118;
    *(_OWORD *)(a3 + 8) = v119;
    *(_QWORD *)(a3 + 24) = v120;
    v119 = 0uLL;
    v120 = 0;
    goto LABEL_207;
  }
  v65 = *((_DWORD *)v8 + 4);
  if (v65)
  {
    if (*((_BYTE *)v8 + 105))
    {
      if (v65 == 3)
      {
        v102 = v9;
        if (v28 != 2)
          goto LABEL_179;
LABEL_163:
        std::operator+<char>();
        v66 = std::string::append(&v112, "' has invalid weights field. Quantized ");
        v67 = *(_OWORD *)&v66->__r_.__value_.__l.__data_;
        v116.__r_.__value_.__r.__words[2] = v66->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v116.__r_.__value_.__l.__data_ = v67;
        v66->__r_.__value_.__l.__size_ = 0;
        v66->__r_.__value_.__r.__words[2] = 0;
        v66->__r_.__value_.__r.__words[0] = 0;
        v68 = std::string::append(&v116, "weights are not supported.");
        v69 = *(_OWORD *)&v68->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v68->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v69;
        v68->__r_.__value_.__l.__size_ = 0;
        v68->__r_.__value_.__r.__words[2] = 0;
        v68->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v116.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v116.__r_.__value_.__l.__data_);
        if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v112.__r_.__value_.__l.__data_);
LABEL_167:
        CoreML::Result::Result(&v116, 13);
        goto LABEL_153;
      }
      std::operator+<char>();
      v72 = std::string::append(&__p, "' , if set, output shape must be of length 3.");
      v73 = *(_OWORD *)&v72->__r_.__value_.__l.__data_;
      v116.__r_.__value_.__r.__words[2] = v72->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v116.__r_.__value_.__l.__data_ = v73;
      v72->__r_.__value_.__l.__size_ = 0;
      v72->__r_.__value_.__r.__words[2] = 0;
      v72->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    else
    {
      std::operator+<char>();
      v70 = std::string::append(&__p, "' Output Shape is supported for Deconvolution layer.");
      v71 = *(_OWORD *)&v70->__r_.__value_.__l.__data_;
      v116.__r_.__value_.__r.__words[2] = v70->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v116.__r_.__value_.__l.__data_ = v71;
      v70->__r_.__value_.__l.__size_ = 0;
      v70->__r_.__value_.__r.__words[2] = 0;
      v70->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    goto LABEL_116;
  }
  if (v28 == 2)
    goto LABEL_163;
  if (*((_BYTE *)v8 + 105))
    v74 = v9;
  else
    v74 = v10;
  v102 = v74;
  if (!*((_BYTE *)v8 + 105))
    v10 = v9;
LABEL_179:
  v75 = (uint64_t *)v8[5];
  if (!v75)
    v75 = &CoreML::Specification::_WeightParams_default_instance_;
  v101 = (uint64_t)v75;
  std::string::basic_string[abi:ne180100]<0>(&__p, "Convolution3D ");
  v76 = *((_QWORD *)a2 + 14);
  std::string::basic_string[abi:ne180100]<0>(&v112, "weights");
  CoreML::validateGeneralWeightParams(v101, (const CoreML::Specification::WeightParams *)(v106 * v12 * v105 * v102 / v11 * v10), (const CoreML::Specification::WeightParams *)v9, (const void **)&__p.__r_.__value_.__l.__data_, v76, (uint64_t)&v112, (uint64_t)&v116);
  v118 = v116.__r_.__value_.__r.__words[0];
  if (SHIBYTE(v120) < 0)
    operator delete((void *)v119);
  v119 = *(_OWORD *)&v116.__r_.__value_.__r.__words[1];
  v120 = v117;
  HIBYTE(v117) = 0;
  v116.__r_.__value_.__s.__data_[8] = 0;
  if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v112.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (!CoreML::Result::good((CoreML::Result *)&v118) || !v103)
    goto LABEL_206;
  if (v104 > 1)
  {
    if (v104 != 2)
    {
      std::operator+<char>();
      v84 = std::string::append(&v112, "has not specified bias.");
      v85 = *(_OWORD *)&v84->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v84->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v85;
      v84->__r_.__value_.__l.__size_ = 0;
      v84->__r_.__value_.__r.__words[2] = 0;
      v84->__r_.__value_.__r.__words[0] = 0;
      CoreML::Result::Result(&v116, 13);
      goto LABEL_108;
    }
    std::operator+<char>();
    v80 = std::string::append(&v112, "' has invalid bias field. Quantized ");
    v81 = *(_OWORD *)&v80->__r_.__value_.__l.__data_;
    v116.__r_.__value_.__r.__words[2] = v80->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v116.__r_.__value_.__l.__data_ = v81;
    v80->__r_.__value_.__l.__size_ = 0;
    v80->__r_.__value_.__r.__words[2] = 0;
    v80->__r_.__value_.__r.__words[0] = 0;
    v82 = std::string::append(&v116, "bias is not supported.");
    v83 = *(_OWORD *)&v82->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v82->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v83;
    v82->__r_.__value_.__l.__size_ = 0;
    v82->__r_.__value_.__r.__words[2] = 0;
    v82->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v116.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v116.__r_.__value_.__l.__data_);
    if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v112.__r_.__value_.__l.__data_);
    goto LABEL_167;
  }
  v77 = (uint64_t *)v8[6];
  if (!v77)
    v77 = &CoreML::Specification::_WeightParams_default_instance_;
  if (v104)
  {
    v78 = v77[5];
    if (*(char *)(v78 + 23) < 0)
      v79 = *(_QWORD *)(v78 + 8);
    else
      v79 = *(unsigned __int8 *)(v78 + 23);
    v86 = v79 >> 1;
  }
  else
  {
    LODWORD(v86) = *((_DWORD *)v77 + 4);
  }
  if ((_DWORD)v86 == v9)
    goto LABEL_206;
  std::operator+<char>();
  v87 = std::string::append(&v109, "' has a bias vector of size ");
  v88 = *(_OWORD *)&v87->__r_.__value_.__l.__data_;
  v110.__r_.__value_.__r.__words[2] = v87->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v110.__r_.__value_.__l.__data_ = v88;
  v87->__r_.__value_.__l.__size_ = 0;
  v87->__r_.__value_.__r.__words[2] = 0;
  v87->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v108, v86);
  if ((v108.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v89 = &v108;
  else
    v89 = (std::string *)v108.__r_.__value_.__r.__words[0];
  if ((v108.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v108.__r_.__value_.__r.__words[2]);
  else
    size = v108.__r_.__value_.__l.__size_;
  v91 = std::string::append(&v110, (const std::string::value_type *)v89, size);
  v92 = *(_OWORD *)&v91->__r_.__value_.__l.__data_;
  v111.__r_.__value_.__r.__words[2] = v91->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v111.__r_.__value_.__l.__data_ = v92;
  v91->__r_.__value_.__l.__size_ = 0;
  v91->__r_.__value_.__r.__words[2] = 0;
  v91->__r_.__value_.__r.__words[0] = 0;
  v93 = std::string::append(&v111, " but should be ");
  v94 = *(_OWORD *)&v93->__r_.__value_.__l.__data_;
  v112.__r_.__value_.__r.__words[2] = v93->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v112.__r_.__value_.__l.__data_ = v94;
  v93->__r_.__value_.__l.__size_ = 0;
  v93->__r_.__value_.__r.__words[2] = 0;
  v93->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v107, v9);
  if ((v107.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v95 = &v107;
  else
    v95 = (std::string *)v107.__r_.__value_.__r.__words[0];
  if ((v107.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v96 = HIBYTE(v107.__r_.__value_.__r.__words[2]);
  else
    v96 = v107.__r_.__value_.__l.__size_;
  v97 = std::string::append(&v112, (const std::string::value_type *)v95, v96);
  v98 = *(_OWORD *)&v97->__r_.__value_.__l.__data_;
  v116.__r_.__value_.__r.__words[2] = v97->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v116.__r_.__value_.__l.__data_ = v98;
  v97->__r_.__value_.__l.__size_ = 0;
  v97->__r_.__value_.__r.__words[2] = 0;
  v97->__r_.__value_.__r.__words[0] = 0;
  v99 = std::string::append(&v116, ".");
  v100 = *(_OWORD *)&v99->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v99->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v100;
  v99->__r_.__value_.__l.__size_ = 0;
  v99->__r_.__value_.__r.__words[2] = 0;
  v99->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v116.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v116.__r_.__value_.__l.__data_);
  if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v107.__r_.__value_.__l.__data_);
  if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v112.__r_.__value_.__l.__data_);
  if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v111.__r_.__value_.__l.__data_);
  if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v108.__r_.__value_.__l.__data_);
  if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v110.__r_.__value_.__l.__data_);
  if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v109.__r_.__value_.__l.__data_);
  CoreML::Result::Result(&v116, 13);
LABEL_153:
  v63 = v116.__r_.__value_.__r.__words[0];
  v118 = v116.__r_.__value_.__r.__words[0];
  if (SHIBYTE(v120) < 0)
  {
    operator delete((void *)v119);
    v63 = v118;
  }
  v119 = *(_OWORD *)&v116.__r_.__value_.__r.__words[1];
  v64 = v117;
  *(_QWORD *)a3 = v63;
  *(_OWORD *)(a3 + 8) = v119;
  *(_QWORD *)(a3 + 24) = v64;
  v119 = 0uLL;
  v120 = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    v36 = (void *)__p.__r_.__value_.__r.__words[0];
LABEL_119:
    operator delete(v36);
  }
LABEL_207:
  if (SHIBYTE(v120) < 0)
    operator delete((void *)v119);
}

void sub_2183395B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52,void *__p,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  uint64_t v58;

  if (a58 < 0)
    operator delete(__p);
  if (*(char *)(v58 - 97) < 0)
    operator delete(*(void **)(v58 - 120));
  _Unwind_Resume(exception_object);
}

void CoreML::validatePositive(int a1@<W0>, const void **a2@<X1>, CoreML::Result *a3@<X8>)
{
  size_t v6;
  std::string *v7;
  const void *v8;
  std::string *p_p;
  std::string::size_type size;
  std::string *v11;
  __int128 v12;
  std::string *v13;
  __int128 v14;
  std::string __p;
  std::string v16;
  std::string v17;
  void *v18[2];
  std::string::size_type v19;

  if (a1 <= 0)
  {
    if (*((char *)a2 + 23) >= 0)
      v6 = *((unsigned __int8 *)a2 + 23);
    else
      v6 = (size_t)a2[1];
    v7 = &v16;
    std::string::basic_string[abi:ne180100]((uint64_t)&v16, v6 + 23);
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v7 = (std::string *)v16.__r_.__value_.__r.__words[0];
    if (v6)
    {
      if (*((char *)a2 + 23) >= 0)
        v8 = a2;
      else
        v8 = *a2;
      memmove(v7, v8, v6);
    }
    strcpy((char *)v7 + v6, " must be positive, got ");
    std::to_string(&__p, a1);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    v11 = std::string::append(&v16, (const std::string::value_type *)p_p, size);
    v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    v13 = std::string::append(&v17, ".");
    v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v19 = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)v18 = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v17.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v16.__r_.__value_.__l.__data_);
    CoreML::Result::Result(a3, 13);
    if (SHIBYTE(v19) < 0)
      operator delete(v18[0]);
  }
  else
  {
    CoreML::Result::Result(a3);
  }
}

void sub_2183399EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a33 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double CoreML::NeuralNetworkSpecValidator::validateInnerProductLayer@<D0>(CoreML::NeuralNetworkSpecValidator *this@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X8>)
{
  void **v6;
  _BOOL8 v7;
  double result;
  char *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  const CoreML::Specification::WeightParams *v13;
  const CoreML::Specification::WeightParams *v14;
  void *v15[2];
  char v16;
  void *__p[2];
  char v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;

  CoreML::Result::Result((CoreML::Result *)a3);
  CoreML::validateInputCount((CoreML *)a2, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v19);
  *(_QWORD *)a3 = v19;
  v6 = (void **)(a3 + 8);
  if (*(char *)(a3 + 31) < 0)
    operator delete(*v6);
  *(_OWORD *)v6 = v20;
  *(_QWORD *)(a3 + 24) = v21;
  if (CoreML::Result::good((CoreML::Result *)a3))
  {
    CoreML::validateOutputCount((CoreML *)a2, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v19);
    *(_QWORD *)a3 = v19;
    if (*(char *)(a3 + 31) < 0)
      operator delete(*v6);
    *(_OWORD *)v6 = v20;
    *(_QWORD *)(a3 + 24) = v21;
  }
  v7 = CoreML::Result::good((CoreML::Result *)a3);
  if (v7)
  {
    if (!*(_BYTE *)this)
      goto LABEL_19;
    std::string::basic_string[abi:ne180100]<0>(__p, "InnerProduct");
    v9 = (char *)this + 32;
    CoreML::validateInputOutputRankEquality(a2, (uint64_t)__p, (uint64_t)v9, (CoreML::Result *)&v19);
    *(_QWORD *)a3 = v19;
    if (*(char *)(a3 + 31) < 0)
      operator delete(*v6);
    *(_OWORD *)v6 = v20;
    *(_QWORD *)(a3 + 24) = v21;
    HIBYTE(v21) = 0;
    LOBYTE(v20) = 0;
    if (v18 < 0)
      operator delete(__p[0]);
    if (CoreML::Result::good((CoreML::Result *)a3))
    {
      std::string::basic_string[abi:ne180100]<0>(v15, "InnerProduct");
      CoreML::validateRankCount((uint64_t)a2, (uint64_t)v15, 1, 5, (uint64_t)v9, (uint64_t)&v19);
      *(_QWORD *)a3 = v19;
      if (*(char *)(a3 + 31) < 0)
        operator delete(*v6);
      *(_OWORD *)v6 = v20;
      *(_QWORD *)(a3 + 24) = v21;
      HIBYTE(v21) = 0;
      LOBYTE(v20) = 0;
      if (v16 < 0)
        operator delete(v15[0]);
      v7 = CoreML::Result::good((CoreML::Result *)a3);
      if (v7)
      {
LABEL_19:
        if (*((_DWORD *)a2 + 35) == 140)
          v10 = a2[16];
        else
          v10 = CoreML::Specification::InnerProductLayerParams::default_instance((CoreML::Specification::InnerProductLayerParams *)v7);
        if (!*((_BYTE *)v10 + 49))
          goto LABEL_42;
        v11 = (uint64_t *)v10[2];
        std::string::basic_string[abi:ne180100]<0>(v15, "InnerProduct");
        if (v11)
          v12 = v11;
        else
          v12 = &CoreML::Specification::_WeightParams_default_instance_;
        CoreML::validateInt8Requirements((uint64_t)v12, (uint64_t)v15, (CoreML::Result *)&v19);
        *(_QWORD *)a3 = v19;
        if (*(char *)(a3 + 31) < 0)
          operator delete(*v6);
        *(_OWORD *)v6 = v20;
        *(_QWORD *)(a3 + 24) = v21;
        HIBYTE(v21) = 0;
        LOBYTE(v20) = 0;
        if (v16 < 0)
          operator delete(v15[0]);
        if (CoreML::Result::good((CoreML::Result *)a3))
        {
LABEL_42:
          if (v10[2])
            v13 = (const CoreML::Specification::WeightParams *)v10[2];
          else
            v13 = (const CoreML::Specification::WeightParams *)&CoreML::Specification::_WeightParams_default_instance_;
          if (v10[3])
            v14 = (const CoreML::Specification::WeightParams *)v10[3];
          else
            v14 = (const CoreML::Specification::WeightParams *)&CoreML::Specification::_WeightParams_default_instance_;
          validateInnerProductWeightsBias((const CoreML::Specification::NeuralNetworkLayer *)a2, v13, v14, (uint64_t)&v19);
          *(_QWORD *)a3 = v19;
          if (*(char *)(a3 + 31) < 0)
            operator delete(*v6);
          result = *(double *)&v20;
          *(_OWORD *)v6 = v20;
          *(_QWORD *)(a3 + 24) = v21;
        }
      }
    }
  }
  return result;
}

void sub_218339D04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;

  if (a14 < 0)
    operator delete(__p);
  if (*(char *)(v20 + 31) < 0)
    operator delete(*(void **)(v20 + 8));
  _Unwind_Resume(exception_object);
}

void CoreML::validateInt8Requirements(uint64_t a1@<X0>, uint64_t a2@<X1>, CoreML::Result *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  std::string *v18;
  __int128 v19;
  int v20;
  const std::string::value_type *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  std::string *v25;
  __int128 v26;
  std::string *v27;
  __int128 v28;
  int v29;
  const std::string::value_type *v30;
  std::string::size_type v31;
  std::string *v32;
  __int128 v33;
  std::string *v34;
  __int128 v35;
  std::string *v36;
  __int128 v37;
  int v38;
  const std::string::value_type *v39;
  std::string::size_type v40;
  std::string *v41;
  __int128 v42;
  std::string *v43;
  __int128 v44;
  std::string *v45;
  __int128 v46;
  int v47;
  const std::string::value_type *v48;
  std::string::size_type v49;
  std::string *v50;
  __int128 v51;
  std::string *v52;
  __int128 v53;
  std::string *v54;
  __int128 v55;
  int v56;
  const std::string::value_type *v57;
  std::string::size_type v58;
  std::string *v59;
  __int128 v60;
  std::string *v61;
  __int128 v62;
  std::string v63;
  std::string v64;
  std::string v65;
  __int128 v66;
  std::string::size_type v67;

  v5 = *(_QWORD *)(a1 + 40);
  if (*(char *)(v5 + 23) < 0)
    v6 = *(_QWORD *)(v5 + 8);
  else
    v6 = *(unsigned __int8 *)(v5 + 23);
  v7 = *(_QWORD *)(a1 + 48);
  v8 = *(unsigned __int8 *)(v7 + 23);
  if (*(char *)(v7 + 23) < 0)
    v9 = *(_QWORD *)(v7 + 8);
  else
    v9 = *(unsigned __int8 *)(v7 + 23);
  v10 = *(_DWORD *)(a1 + 16);
  v11 = *(_QWORD *)(a1 + 56);
  v12 = *(unsigned __int8 *)(v11 + 23);
  if (*(char *)(v11 + 23) < 0)
    v13 = *(_QWORD *)(v11 + 8);
  else
    v13 = *(unsigned __int8 *)(v11 + 23);
  if (v10 <= 0)
    v14 = 1;
  else
    v14 = 2;
  if (v6)
    v15 = v14;
  else
    v15 = v10 > 0;
  if (v9)
    ++v15;
  if (v13)
    ++v15;
  if (v10 > 0 || v15 != 1)
    goto LABEL_47;
  if ((*(_BYTE *)(v5 + 23) & 0x80) != 0)
  {
    if (!*(_QWORD *)(v5 + 8))
      goto LABEL_26;
LABEL_47:
    std::operator+<char>();
    v27 = std::string::append(&v63, "' of type '");
    v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
    v64.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v28;
    v27->__r_.__value_.__l.__size_ = 0;
    v27->__r_.__value_.__r.__words[2] = 0;
    v27->__r_.__value_.__r.__words[0] = 0;
    v29 = *(char *)(a2 + 23);
    if (v29 >= 0)
      v30 = (const std::string::value_type *)a2;
    else
      v30 = *(const std::string::value_type **)a2;
    if (v29 >= 0)
      v31 = *(unsigned __int8 *)(a2 + 23);
    else
      v31 = *(_QWORD *)(a2 + 8);
    v32 = std::string::append(&v64, v30, v31);
    v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
    v65.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v33;
    v32->__r_.__value_.__l.__size_ = 0;
    v32->__r_.__value_.__r.__words[2] = 0;
    v32->__r_.__value_.__r.__words[0] = 0;
    v34 = std::string::append(&v65, " :                            when flag 'int8DynamicQuantize' is set to true, weights must be stored in the int8 format.");
    v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
    v67 = v34->__r_.__value_.__r.__words[2];
    v66 = v35;
    v34->__r_.__value_.__l.__size_ = 0;
    v34->__r_.__value_.__r.__words[2] = 0;
    v34->__r_.__value_.__r.__words[0] = 0;
    CoreML::Result::Result(a3, 13);
    goto LABEL_54;
  }
  if (*(_BYTE *)(v5 + 23))
    goto LABEL_47;
LABEL_26:
  if ((v8 & 0x80) != 0)
    v8 = *(_QWORD *)(v7 + 8);
  v16 = *(_QWORD *)(a1 + 64);
  if ((uint64_t *)a1 != &CoreML::Specification::_WeightParams_default_instance_ && v8 && v16)
    goto LABEL_47;
  if ((v12 & 0x80) != 0)
    v12 = *(_QWORD *)(v11 + 8);
  if ((uint64_t *)a1 == &CoreML::Specification::_WeightParams_default_instance_ || !v12 || !v16)
    goto LABEL_47;
  if (*(_QWORD *)(v16 + 16) == 8)
  {
    if (*(_DWORD *)(v16 + 36) == 101)
    {
      v17 = *(_QWORD *)(v16 + 24);
      if (*(_DWORD *)(v17 + 16) == 1)
      {
        if (!*(_DWORD *)(v17 + 40))
        {
          CoreML::Result::Result(a3);
          return;
        }
        std::operator+<char>();
        v18 = std::string::append(&v63, "' of type '");
        v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
        v64.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v19;
        v18->__r_.__value_.__l.__size_ = 0;
        v18->__r_.__value_.__r.__words[2] = 0;
        v18->__r_.__value_.__r.__words[0] = 0;
        v20 = *(char *)(a2 + 23);
        if (v20 >= 0)
          v21 = (const std::string::value_type *)a2;
        else
          v21 = *(const std::string::value_type **)a2;
        if (v20 >= 0)
          v22 = *(unsigned __int8 *)(a2 + 23);
        else
          v22 = *(_QWORD *)(a2 + 8);
        v23 = std::string::append(&v64, v21, v22);
        v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
        v65.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v24;
        v23->__r_.__value_.__l.__size_ = 0;
        v23->__r_.__value_.__r.__words[2] = 0;
        v23->__r_.__value_.__r.__words[0] = 0;
        v25 = std::string::append(&v65, " :                           Linear quantization bias must be empty when flag 'int8DynamicQuantize' is set to true.");
        v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
        v67 = v25->__r_.__value_.__r.__words[2];
        v66 = v26;
        v25->__r_.__value_.__l.__size_ = 0;
        v25->__r_.__value_.__r.__words[2] = 0;
        v25->__r_.__value_.__r.__words[0] = 0;
        CoreML::Result::Result(a3, 13);
      }
      else
      {
        std::operator+<char>();
        v54 = std::string::append(&v63, "' of type '");
        v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
        v64.__r_.__value_.__r.__words[2] = v54->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v55;
        v54->__r_.__value_.__l.__size_ = 0;
        v54->__r_.__value_.__r.__words[2] = 0;
        v54->__r_.__value_.__r.__words[0] = 0;
        v56 = *(char *)(a2 + 23);
        if (v56 >= 0)
          v57 = (const std::string::value_type *)a2;
        else
          v57 = *(const std::string::value_type **)a2;
        if (v56 >= 0)
          v58 = *(unsigned __int8 *)(a2 + 23);
        else
          v58 = *(_QWORD *)(a2 + 8);
        v59 = std::string::append(&v64, v57, v58);
        v60 = *(_OWORD *)&v59->__r_.__value_.__l.__data_;
        v65.__r_.__value_.__r.__words[2] = v59->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v60;
        v59->__r_.__value_.__l.__size_ = 0;
        v59->__r_.__value_.__r.__words[2] = 0;
        v59->__r_.__value_.__r.__words[0] = 0;
        v61 = std::string::append(&v65, " :                           Linear quantization scale must be size 1 when flag 'int8DynamicQuantize' is set to true.");
        v62 = *(_OWORD *)&v61->__r_.__value_.__l.__data_;
        v67 = v61->__r_.__value_.__r.__words[2];
        v66 = v62;
        v61->__r_.__value_.__l.__size_ = 0;
        v61->__r_.__value_.__r.__words[2] = 0;
        v61->__r_.__value_.__r.__words[0] = 0;
        CoreML::Result::Result(a3, 13);
      }
    }
    else
    {
      std::operator+<char>();
      v45 = std::string::append(&v63, "' of type '");
      v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
      v64.__r_.__value_.__r.__words[2] = v45->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v46;
      v45->__r_.__value_.__l.__size_ = 0;
      v45->__r_.__value_.__r.__words[2] = 0;
      v45->__r_.__value_.__r.__words[0] = 0;
      v47 = *(char *)(a2 + 23);
      if (v47 >= 0)
        v48 = (const std::string::value_type *)a2;
      else
        v48 = *(const std::string::value_type **)a2;
      if (v47 >= 0)
        v49 = *(unsigned __int8 *)(a2 + 23);
      else
        v49 = *(_QWORD *)(a2 + 8);
      v50 = std::string::append(&v64, v48, v49);
      v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
      v65.__r_.__value_.__r.__words[2] = v50->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v51;
      v50->__r_.__value_.__l.__size_ = 0;
      v50->__r_.__value_.__r.__words[2] = 0;
      v50->__r_.__value_.__r.__words[0] = 0;
      v52 = std::string::append(&v65, " :                           Linear quantization must be used when flag 'int8DynamicQuantize' is set to true.");
      v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
      v67 = v52->__r_.__value_.__r.__words[2];
      v66 = v53;
      v52->__r_.__value_.__l.__size_ = 0;
      v52->__r_.__value_.__r.__words[2] = 0;
      v52->__r_.__value_.__r.__words[0] = 0;
      CoreML::Result::Result(a3, 13);
    }
  }
  else
  {
    std::operator+<char>();
    v36 = std::string::append(&v63, "' of type '");
    v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
    v64.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v37;
    v36->__r_.__value_.__l.__size_ = 0;
    v36->__r_.__value_.__r.__words[2] = 0;
    v36->__r_.__value_.__r.__words[0] = 0;
    v38 = *(char *)(a2 + 23);
    if (v38 >= 0)
      v39 = (const std::string::value_type *)a2;
    else
      v39 = *(const std::string::value_type **)a2;
    if (v38 >= 0)
      v40 = *(unsigned __int8 *)(a2 + 23);
    else
      v40 = *(_QWORD *)(a2 + 8);
    v41 = std::string::append(&v64, v39, v40);
    v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
    v65.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v42;
    v41->__r_.__value_.__l.__size_ = 0;
    v41->__r_.__value_.__r.__words[2] = 0;
    v41->__r_.__value_.__r.__words[0] = 0;
    v43 = std::string::append(&v65, " :                           Number of bits must equal 8 when flag 'int8DynamicQuantize' is set to true.");
    v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
    v67 = v43->__r_.__value_.__r.__words[2];
    v66 = v44;
    v43->__r_.__value_.__l.__size_ = 0;
    v43->__r_.__value_.__r.__words[2] = 0;
    v43->__r_.__value_.__r.__words[0] = 0;
    CoreML::Result::Result(a3, 13);
  }
LABEL_54:
  if (SHIBYTE(v67) < 0)
    operator delete((void *)v66);
  if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v65.__r_.__value_.__l.__data_);
  if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v64.__r_.__value_.__l.__data_);
  if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v63.__r_.__value_.__l.__data_);
}

void sub_21833A264(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (*(char *)(v28 - 25) < 0)
    operator delete(*(void **)(v28 - 48));
  if (a28 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void validateInnerProductWeightsBias(const CoreML::Specification::NeuralNetworkLayer *a1@<X0>, const CoreML::Specification::WeightParams *a2@<X1>, const CoreML::Specification::WeightParams *a3@<X2>, uint64_t a4@<X8>)
{
  int v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  BOOL v44;
  BOOL v46;
  int v47;
  size_t v48;
  std::string *v49;
  void **v50;
  uint64_t v51;
  int v52;
  const std::string::value_type *v53;
  std::string::size_type v54;
  std::string *v55;
  __int128 v56;
  std::string *v57;
  __int128 v58;
  size_t v59;
  std::string *v60;
  void **v61;
  uint64_t v62;
  int v63;
  const std::string::value_type *v64;
  std::string::size_type v65;
  std::string *v66;
  __int128 v67;
  std::string *v68;
  __int128 v69;
  void **v70;
  void *v71;
  std::string *v72;
  __int128 v73;
  std::string *v74;
  std::string::size_type v75;
  std::string *v76;
  __int128 v77;
  std::string *v78;
  __int128 v79;
  std::string *v80;
  std::string::size_type v81;
  std::string *v82;
  __int128 v83;
  std::string *v84;
  __int128 v85;
  std::string *p_p;
  std::string::size_type v87;
  std::string *v88;
  __int128 v89;
  std::string *v90;
  __int128 v91;
  const std::string::value_type *v92;
  std::string::size_type v93;
  std::string *v94;
  __int128 v95;
  std::string *v96;
  __int128 v97;
  void **v98;
  uint64_t v99;
  void **v100;
  BOOL v101;
  BOOL v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  void **v106;
  unint64_t v107;
  std::string *v108;
  __int128 v109;
  std::string *v110;
  std::string::size_type size;
  std::string *v112;
  __int128 v113;
  std::string *v114;
  __int128 v115;
  std::string *v116;
  std::string::size_type v117;
  std::string *v118;
  __int128 v119;
  std::string *v120;
  __int128 v121;
  void **v122;
  std::string __p;
  std::string v124;
  std::string v125;
  std::string v126;
  std::string v127;
  std::string v128;
  std::string v129;
  std::string v130;
  std::string v131;
  std::string v132;
  std::string v133;
  std::string v134;
  __int128 v135;
  std::string::size_type v136;
  std::string v137;
  uint64_t v138;
  void **v139;
  size_t v140;
  uint64_t v141;

  CoreML::Result::Result((CoreML::Result *)a4);
  v139 = 0;
  v140 = 0;
  v141 = 0;
  v8 = *((_DWORD *)a1 + 35);
  if (v8 == 1045)
  {
    v13 = *((_QWORD *)a1 + 16);
    v11 = *(_QWORD *)(v13 + 32);
    v10 = *(_QWORD *)(v13 + 40);
    v12 = *(unsigned __int8 *)(v13 + 50);
    MEMORY[0x219A19390](&v139, "BatchedMatMul");
  }
  else
  {
    if (v8 != 140)
      goto LABEL_156;
    v9 = *((_QWORD *)a1 + 16);
    v11 = *(_QWORD *)(v9 + 32);
    v10 = *(_QWORD *)(v9 + 40);
    v12 = *(unsigned __int8 *)(v9 + 48);
    MEMORY[0x219A19390](&v139, "Inner product");
  }
  v14 = *((_QWORD *)a2 + 5);
  v15 = *(unsigned __int8 *)(v14 + 23);
  if (*(char *)(v14 + 23) < 0)
    v16 = *(_QWORD *)(v14 + 8);
  else
    v16 = *(unsigned __int8 *)(v14 + 23);
  v17 = *((int *)a2 + 4);
  v18 = *((_QWORD *)a2 + 6);
  v19 = *(unsigned __int8 *)(v18 + 23);
  if (*(char *)(v18 + 23) < 0)
    v20 = *(_QWORD *)(v18 + 8);
  else
    v20 = *(unsigned __int8 *)(v18 + 23);
  v21 = *((_QWORD *)a2 + 7);
  v22 = *(unsigned __int8 *)(v21 + 23);
  if (*(char *)(v21 + 23) < 0)
    v23 = *(_QWORD *)(v21 + 8);
  else
    v23 = *(unsigned __int8 *)(v21 + 23);
  if ((int)v17 <= 0)
    v24 = 1;
  else
    v24 = 2;
  if (v16)
    v25 = v24;
  else
    v25 = (int)v17 > 0;
  if (v20)
    ++v25;
  if (v23)
    v26 = v25 + 1;
  else
    v26 = v25;
  if (v26 > 1)
  {
    v27 = 4;
    goto LABEL_53;
  }
  if (v26)
    v27 = 0;
  else
    v27 = 5;
  if ((int)v17 <= 0 && v26)
  {
    if ((v15 & 0x80) != 0)
    {
      if (*(_QWORD *)(v14 + 8))
        goto LABEL_34;
    }
    else if (*(_BYTE *)(v14 + 23))
    {
LABEL_34:
      v27 = 1;
      goto LABEL_53;
    }
    if ((v19 & 0x80) != 0)
      v19 = *(_QWORD *)(v18 + 8);
    v28 = *((_QWORD *)a2 + 8);
    if (a2 != (const CoreML::Specification::WeightParams *)&CoreML::Specification::_WeightParams_default_instance_
      && v19
      && v28)
    {
      v27 = 2;
    }
    else
    {
      if ((v22 & 0x80) != 0)
        v22 = *(_QWORD *)(v21 + 8);
      if (v28)
        v29 = v22 == 0;
      else
        v29 = 1;
      if (v29
        || a2 == (const CoreML::Specification::WeightParams *)&CoreML::Specification::_WeightParams_default_instance_)
      {
        v27 = 5;
      }
      else
      {
        v27 = 3;
      }
    }
  }
LABEL_53:
  v31 = *((_QWORD *)a3 + 5);
  if (*(char *)(v31 + 23) < 0)
    v32 = *(_QWORD *)(v31 + 8);
  else
    v32 = *(unsigned __int8 *)(v31 + 23);
  v33 = *((_QWORD *)a3 + 6);
  v34 = *(unsigned __int8 *)(v33 + 23);
  if (*(char *)(v33 + 23) < 0)
    v35 = *(_QWORD *)(v33 + 8);
  else
    v35 = *(unsigned __int8 *)(v33 + 23);
  v36 = *((_DWORD *)a3 + 4);
  v37 = *((_QWORD *)a3 + 7);
  v38 = *(unsigned __int8 *)(v37 + 23);
  if (*(char *)(v37 + 23) < 0)
    v39 = *(_QWORD *)(v37 + 8);
  else
    v39 = *(unsigned __int8 *)(v37 + 23);
  if (v36 <= 0)
    v40 = 1;
  else
    v40 = 2;
  if (v32)
    v41 = v40;
  else
    v41 = v36 > 0;
  if (v35)
    ++v41;
  if (v39)
    ++v41;
  if (v41 > 1)
  {
    v42 = 4;
    goto LABEL_100;
  }
  if (v41)
    v42 = 0;
  else
    v42 = 5;
  if (v36 <= 0 && v41)
  {
    if ((*(_BYTE *)(v31 + 23) & 0x80) != 0)
    {
      if (*(_QWORD *)(v31 + 8))
        goto LABEL_81;
    }
    else if (*(_BYTE *)(v31 + 23))
    {
LABEL_81:
      v42 = 1;
      goto LABEL_100;
    }
    if ((v34 & 0x80) != 0)
      v34 = *(_QWORD *)(v33 + 8);
    v43 = *((_QWORD *)a3 + 8);
    if (a3 != (const CoreML::Specification::WeightParams *)&CoreML::Specification::_WeightParams_default_instance_
      && v34
      && v43)
    {
      v42 = 2;
    }
    else
    {
      if ((v38 & 0x80) != 0)
        v38 = *(_QWORD *)(v37 + 8);
      if (v43)
        v44 = v38 == 0;
      else
        v44 = 1;
      if (v44
        || a3 == (const CoreML::Specification::WeightParams *)&CoreML::Specification::_WeightParams_default_instance_)
      {
        v42 = 5;
      }
      else
      {
        v42 = 3;
      }
    }
  }
LABEL_100:
  if (v12)
    v46 = v42 == 4;
  else
    v46 = 0;
  v47 = v46;
  if (v27 == 4 || v47)
  {
    if (v141 >= 0)
      v59 = HIBYTE(v141);
    else
      v59 = v140;
    v60 = &v133;
    std::string::basic_string[abi:ne180100]((uint64_t)&v133, v59 + 8);
    if ((v133.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v60 = (std::string *)v133.__r_.__value_.__r.__words[0];
    if (v59)
    {
      if (v141 >= 0)
        v61 = (void **)&v139;
      else
        v61 = v139;
      memmove(v60, v61, v59);
    }
    strcpy((char *)v60 + v59, " layer '");
    v62 = *((_QWORD *)a1 + 14);
    v63 = *(char *)(v62 + 23);
    if (v63 >= 0)
      v64 = (const std::string::value_type *)*((_QWORD *)a1 + 14);
    else
      v64 = *(const std::string::value_type **)v62;
    if (v63 >= 0)
      v65 = *(unsigned __int8 *)(v62 + 23);
    else
      v65 = *(_QWORD *)(v62 + 8);
    v66 = std::string::append(&v133, v64, v65);
    v67 = *(_OWORD *)&v66->__r_.__value_.__l.__data_;
    v134.__r_.__value_.__r.__words[2] = v66->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v134.__r_.__value_.__l.__data_ = v67;
    v66->__r_.__value_.__l.__size_ = 0;
    v66->__r_.__value_.__r.__words[2] = 0;
    v66->__r_.__value_.__r.__words[0] = 0;
    v68 = std::string::append(&v134, "' has invalid weights/bias fields.");
    v69 = *(_OWORD *)&v68->__r_.__value_.__l.__data_;
    v136 = v68->__r_.__value_.__r.__words[2];
    v135 = v69;
    v68->__r_.__value_.__l.__size_ = 0;
    v68->__r_.__value_.__r.__words[2] = 0;
    v68->__r_.__value_.__r.__words[0] = 0;
    CoreML::Result::Result(&v137, 13);
LABEL_147:
    *(_QWORD *)a4 = v137.__r_.__value_.__r.__words[0];
    v70 = (void **)(a4 + 8);
    if (*(char *)(a4 + 31) < 0)
      operator delete(*v70);
    *(_OWORD *)v70 = *(_OWORD *)&v137.__r_.__value_.__r.__words[1];
    *(_QWORD *)(a4 + 24) = v138;
    HIBYTE(v138) = 0;
    v137.__r_.__value_.__s.__data_[8] = 0;
    if (SHIBYTE(v136) < 0)
      operator delete((void *)v135);
    if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v134.__r_.__value_.__l.__data_);
    if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
    {
      v71 = (void *)v133.__r_.__value_.__r.__words[0];
LABEL_155:
      operator delete(v71);
      goto LABEL_156;
    }
    goto LABEL_156;
  }
  if (v12 && (v27 == 1 && !v42 || !v27 && v42 == 1))
  {
    if (v141 >= 0)
      v48 = HIBYTE(v141);
    else
      v48 = v140;
    v49 = &v133;
    std::string::basic_string[abi:ne180100]((uint64_t)&v133, v48 + 8);
    if ((v133.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v49 = (std::string *)v133.__r_.__value_.__r.__words[0];
    if (v48)
    {
      if (v141 >= 0)
        v50 = (void **)&v139;
      else
        v50 = v139;
      memmove(v49, v50, v48);
    }
    strcpy((char *)v49 + v48, " layer '");
    v51 = *((_QWORD *)a1 + 14);
    v52 = *(char *)(v51 + 23);
    if (v52 >= 0)
      v53 = (const std::string::value_type *)*((_QWORD *)a1 + 14);
    else
      v53 = *(const std::string::value_type **)v51;
    if (v52 >= 0)
      v54 = *(unsigned __int8 *)(v51 + 23);
    else
      v54 = *(_QWORD *)(v51 + 8);
    v55 = std::string::append(&v133, v53, v54);
    v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
    v134.__r_.__value_.__r.__words[2] = v55->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v134.__r_.__value_.__l.__data_ = v56;
    v55->__r_.__value_.__l.__size_ = 0;
    v55->__r_.__value_.__r.__words[2] = 0;
    v55->__r_.__value_.__r.__words[0] = 0;
    v57 = std::string::append(&v134, "has unmatched precisions of weights/bias They should either be half or full precision.");
    v58 = *(_OWORD *)&v57->__r_.__value_.__l.__data_;
    v136 = v57->__r_.__value_.__r.__words[2];
    v135 = v58;
    v57->__r_.__value_.__l.__size_ = 0;
    v57->__r_.__value_.__r.__words[2] = 0;
    v57->__r_.__value_.__r.__words[0] = 0;
    CoreML::Result::Result(&v137, 13);
    goto LABEL_147;
  }
  if (v27 > 1)
  {
    if (v27 == 2)
    {
      v99 = *((_QWORD *)a1 + 14);
      std::string::basic_string[abi:ne180100]<0>(&v135, "weight");
      CoreML::validateGeneralWeightParams((uint64_t)a2, (const CoreML::Specification::WeightParams *)(v10 * v11), (const CoreML::Specification::WeightParams *)v10, (const void **)&v139, v99, (uint64_t)&v135, (uint64_t)&v137);
      *(_QWORD *)a4 = v137.__r_.__value_.__r.__words[0];
      v100 = (void **)(a4 + 8);
      if (*(char *)(a4 + 31) < 0)
        operator delete(*v100);
      *(_OWORD *)v100 = *(_OWORD *)&v137.__r_.__value_.__r.__words[1];
      *(_QWORD *)(a4 + 24) = v138;
      HIBYTE(v138) = 0;
      v137.__r_.__value_.__s.__data_[8] = 0;
      if (SHIBYTE(v136) < 0)
        operator delete((void *)v135);
      v101 = CoreML::Result::good((CoreML::Result *)a4);
      if (v12)
        v102 = v101;
      else
        v102 = 0;
      if (!v102)
        goto LABEL_156;
      goto LABEL_228;
    }
LABEL_227:
    if (!v12)
      goto LABEL_156;
LABEL_228:
    if (v42 > 1)
    {
      if (v42 == 2)
      {
        v105 = *((_QWORD *)a1 + 14);
        std::string::basic_string[abi:ne180100]<0>(&v135, "bias");
        CoreML::validateGeneralWeightParams((uint64_t)a3, (const CoreML::Specification::WeightParams *)v10, (const CoreML::Specification::WeightParams *)1, (const void **)&v139, v105, (uint64_t)&v135, (uint64_t)&v137);
        *(_QWORD *)a4 = v137.__r_.__value_.__r.__words[0];
        v106 = (void **)(a4 + 8);
        if (*(char *)(a4 + 31) < 0)
          operator delete(*v106);
        *(_OWORD *)v106 = *(_OWORD *)&v137.__r_.__value_.__r.__words[1];
        *(_QWORD *)(a4 + 24) = v138;
        HIBYTE(v138) = 0;
        v137.__r_.__value_.__s.__data_[8] = 0;
        if (SHIBYTE(v136) < 0)
          operator delete((void *)v135);
        CoreML::Result::good((CoreML::Result *)a4);
      }
    }
    else
    {
      if (v42)
      {
        v103 = *((_QWORD *)a3 + 5);
        if (*(char *)(v103 + 23) < 0)
          v104 = *(_QWORD *)(v103 + 8);
        else
          v104 = *(unsigned __int8 *)(v103 + 23);
        v107 = v104 >> 1;
      }
      else
      {
        v107 = *((int *)a3 + 4);
      }
      if (v107 != v10)
      {
        std::operator+<char>();
        v108 = std::string::append(&v131, "' has incorrect bias vector size ");
        v109 = *(_OWORD *)&v108->__r_.__value_.__l.__data_;
        v132.__r_.__value_.__r.__words[2] = v108->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v132.__r_.__value_.__l.__data_ = v109;
        v108->__r_.__value_.__l.__size_ = 0;
        v108->__r_.__value_.__r.__words[2] = 0;
        v108->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v130, v107);
        if ((v130.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v110 = &v130;
        else
          v110 = (std::string *)v130.__r_.__value_.__r.__words[0];
        if ((v130.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v130.__r_.__value_.__r.__words[2]);
        else
          size = v130.__r_.__value_.__l.__size_;
        v112 = std::string::append(&v132, (const std::string::value_type *)v110, size);
        v113 = *(_OWORD *)&v112->__r_.__value_.__l.__data_;
        v133.__r_.__value_.__r.__words[2] = v112->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v133.__r_.__value_.__l.__data_ = v113;
        v112->__r_.__value_.__l.__size_ = 0;
        v112->__r_.__value_.__r.__words[2] = 0;
        v112->__r_.__value_.__r.__words[0] = 0;
        v114 = std::string::append(&v133, " (expected ");
        v115 = *(_OWORD *)&v114->__r_.__value_.__l.__data_;
        v134.__r_.__value_.__r.__words[2] = v114->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v134.__r_.__value_.__l.__data_ = v115;
        v114->__r_.__value_.__l.__size_ = 0;
        v114->__r_.__value_.__r.__words[2] = 0;
        v114->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v129, v10);
        if ((v129.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v116 = &v129;
        else
          v116 = (std::string *)v129.__r_.__value_.__r.__words[0];
        if ((v129.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v117 = HIBYTE(v129.__r_.__value_.__r.__words[2]);
        else
          v117 = v129.__r_.__value_.__l.__size_;
        v118 = std::string::append(&v134, (const std::string::value_type *)v116, v117);
        v119 = *(_OWORD *)&v118->__r_.__value_.__l.__data_;
        v137.__r_.__value_.__r.__words[2] = v118->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v137.__r_.__value_.__l.__data_ = v119;
        v118->__r_.__value_.__l.__size_ = 0;
        v118->__r_.__value_.__r.__words[2] = 0;
        v118->__r_.__value_.__r.__words[0] = 0;
        v120 = std::string::append(&v137, ").");
        v121 = *(_OWORD *)&v120->__r_.__value_.__l.__data_;
        v136 = v120->__r_.__value_.__r.__words[2];
        v135 = v121;
        v120->__r_.__value_.__l.__size_ = 0;
        v120->__r_.__value_.__r.__words[2] = 0;
        v120->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v137.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v137.__r_.__value_.__l.__data_);
        if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v129.__r_.__value_.__l.__data_);
        if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v134.__r_.__value_.__l.__data_);
        if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v133.__r_.__value_.__l.__data_);
        if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v130.__r_.__value_.__l.__data_);
        if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v132.__r_.__value_.__l.__data_);
        if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v131.__r_.__value_.__l.__data_);
        CoreML::Result::Result(&v137, 13);
        *(_QWORD *)a4 = v137.__r_.__value_.__r.__words[0];
        v122 = (void **)(a4 + 8);
        if (*(char *)(a4 + 31) < 0)
          operator delete(*v122);
        *(_OWORD *)v122 = *(_OWORD *)&v137.__r_.__value_.__r.__words[1];
        *(_QWORD *)(a4 + 24) = v138;
        if (SHIBYTE(v136) < 0)
        {
          v71 = (void *)v135;
          goto LABEL_155;
        }
      }
    }
    goto LABEL_156;
  }
  if (v27)
  {
    if ((v15 & 0x80) != 0)
      v15 = *(_QWORD *)(v14 + 8);
    v17 = v15 >> 1;
  }
  if (v10 * v11 == v17)
    goto LABEL_227;
  std::operator+<char>();
  v72 = std::string::append(&v126, " has incorrect weight matrix size ");
  v73 = *(_OWORD *)&v72->__r_.__value_.__l.__data_;
  v127.__r_.__value_.__r.__words[2] = v72->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v127.__r_.__value_.__l.__data_ = v73;
  v72->__r_.__value_.__l.__size_ = 0;
  v72->__r_.__value_.__r.__words[2] = 0;
  v72->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v125, v17);
  if ((v125.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v74 = &v125;
  else
    v74 = (std::string *)v125.__r_.__value_.__r.__words[0];
  if ((v125.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v75 = HIBYTE(v125.__r_.__value_.__r.__words[2]);
  else
    v75 = v125.__r_.__value_.__l.__size_;
  v76 = std::string::append(&v127, (const std::string::value_type *)v74, v75);
  v77 = *(_OWORD *)&v76->__r_.__value_.__l.__data_;
  v128.__r_.__value_.__r.__words[2] = v76->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v128.__r_.__value_.__l.__data_ = v77;
  v76->__r_.__value_.__l.__size_ = 0;
  v76->__r_.__value_.__r.__words[2] = 0;
  v76->__r_.__value_.__r.__words[0] = 0;
  v78 = std::string::append(&v128, " to encode a ");
  v79 = *(_OWORD *)&v78->__r_.__value_.__l.__data_;
  v129.__r_.__value_.__r.__words[2] = v78->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v129.__r_.__value_.__l.__data_ = v79;
  v78->__r_.__value_.__l.__size_ = 0;
  v78->__r_.__value_.__r.__words[2] = 0;
  v78->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v124, v11);
  if ((v124.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v80 = &v124;
  else
    v80 = (std::string *)v124.__r_.__value_.__r.__words[0];
  if ((v124.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v81 = HIBYTE(v124.__r_.__value_.__r.__words[2]);
  else
    v81 = v124.__r_.__value_.__l.__size_;
  v82 = std::string::append(&v129, (const std::string::value_type *)v80, v81);
  v83 = *(_OWORD *)&v82->__r_.__value_.__l.__data_;
  v130.__r_.__value_.__r.__words[2] = v82->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v130.__r_.__value_.__l.__data_ = v83;
  v82->__r_.__value_.__l.__size_ = 0;
  v82->__r_.__value_.__r.__words[2] = 0;
  v82->__r_.__value_.__r.__words[0] = 0;
  v84 = std::string::append(&v130, " × ");
  v85 = *(_OWORD *)&v84->__r_.__value_.__l.__data_;
  v131.__r_.__value_.__r.__words[2] = v84->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v131.__r_.__value_.__l.__data_ = v85;
  v84->__r_.__value_.__l.__size_ = 0;
  v84->__r_.__value_.__r.__words[2] = 0;
  v84->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&__p, v10);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v87 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v87 = __p.__r_.__value_.__l.__size_;
  v88 = std::string::append(&v131, (const std::string::value_type *)p_p, v87);
  v89 = *(_OWORD *)&v88->__r_.__value_.__l.__data_;
  v132.__r_.__value_.__r.__words[2] = v88->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v132.__r_.__value_.__l.__data_ = v89;
  v88->__r_.__value_.__l.__size_ = 0;
  v88->__r_.__value_.__r.__words[2] = 0;
  v88->__r_.__value_.__r.__words[0] = 0;
  v90 = std::string::append(&v132, " ");
  v91 = *(_OWORD *)&v90->__r_.__value_.__l.__data_;
  v133.__r_.__value_.__r.__words[2] = v90->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v133.__r_.__value_.__l.__data_ = v91;
  v90->__r_.__value_.__l.__size_ = 0;
  v90->__r_.__value_.__r.__words[2] = 0;
  v90->__r_.__value_.__r.__words[0] = 0;
  if (v141 >= 0)
    v92 = (const std::string::value_type *)&v139;
  else
    v92 = (const std::string::value_type *)v139;
  if (v141 >= 0)
    v93 = HIBYTE(v141);
  else
    v93 = v140;
  v94 = std::string::append(&v133, v92, v93);
  v95 = *(_OWORD *)&v94->__r_.__value_.__l.__data_;
  v134.__r_.__value_.__r.__words[2] = v94->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v134.__r_.__value_.__l.__data_ = v95;
  v94->__r_.__value_.__l.__size_ = 0;
  v94->__r_.__value_.__r.__words[2] = 0;
  v94->__r_.__value_.__r.__words[0] = 0;
  v96 = std::string::append(&v134, ".");
  v97 = *(_OWORD *)&v96->__r_.__value_.__l.__data_;
  v136 = v96->__r_.__value_.__r.__words[2];
  v135 = v97;
  v96->__r_.__value_.__l.__size_ = 0;
  v96->__r_.__value_.__r.__words[2] = 0;
  v96->__r_.__value_.__r.__words[0] = 0;
  CoreML::Result::Result(&v137, 13);
  *(_QWORD *)a4 = v137.__r_.__value_.__r.__words[0];
  v98 = (void **)(a4 + 8);
  if (*(char *)(a4 + 31) < 0)
    operator delete(*v98);
  *(_OWORD *)v98 = *(_OWORD *)&v137.__r_.__value_.__r.__words[1];
  *(_QWORD *)(a4 + 24) = v138;
  HIBYTE(v138) = 0;
  v137.__r_.__value_.__s.__data_[8] = 0;
  if (SHIBYTE(v136) < 0)
    operator delete((void *)v135);
  if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v134.__r_.__value_.__l.__data_);
  if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v133.__r_.__value_.__l.__data_);
  if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v132.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v131.__r_.__value_.__l.__data_);
  if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v130.__r_.__value_.__l.__data_);
  if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v124.__r_.__value_.__l.__data_);
  if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v129.__r_.__value_.__l.__data_);
  if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v128.__r_.__value_.__l.__data_);
  if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v125.__r_.__value_.__l.__data_);
  if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v127.__r_.__value_.__l.__data_);
  if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0)
  {
    v71 = (void *)v126.__r_.__value_.__r.__words[0];
    goto LABEL_155;
  }
LABEL_156:
  if (SHIBYTE(v141) < 0)
    operator delete(v139);
}

void sub_21833AEBC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  if (*(char *)(v2 - 169) < 0)
    operator delete(*(void **)(v2 - 192));
  if (*(char *)(v2 - 97) < 0)
    operator delete(*(void **)(v2 - 120));
  if (*(char *)(v1 + 31) < 0)
    operator delete(*(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

void CoreML::NeuralNetworkSpecValidator::validateBatchnormLayer(CoreML::NeuralNetworkSpecValidator *this@<X0>, const CoreML::Specification::NeuralNetworkLayer *a2@<X1>, uint64_t a3@<X8>)
{
  _BOOL8 v6;
  char *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  int v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  int v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  int v53;
  _BOOL4 v54;
  uint64_t *v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  int v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  int v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  int v87;
  _BOOL4 v88;
  uint64_t *v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  BOOL v98;
  _BOOL4 v99;
  int v100;
  unsigned int v101;
  uint64_t *v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  _BOOL4 v111;
  int v112;
  unsigned int v113;
  uint64_t *v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  int v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  int v128;
  uint64_t v129;
  uint64_t v130;
  int v131;
  uint64_t v132;
  uint64_t v133;
  _BOOL4 v134;
  int v135;
  unsigned int v136;
  std::string *v137;
  __int128 v138;
  uint64_t *v139;
  uint64_t *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  int v145;
  uint64_t v146;
  uint64_t v147;
  _BOOL4 v148;
  int v149;
  unsigned int v150;
  uint64_t *v151;
  const CoreML::Specification::WeightParams *v152;
  uint64_t *v153;
  uint64_t *v154;
  uint64_t v155;
  _BOOL8 v156;
  uint64_t *v157;
  uint64_t *v158;
  uint64_t v159;
  _BOOL8 v160;
  const CoreML::Specification::WeightParams *v161;
  uint64_t *v162;
  uint64_t *v163;
  CoreML *v164;
  CoreML::Specification::BatchnormLayerParams *v165;
  const CoreML::Specification::WeightParams *v166;
  uint64_t *v167;
  CoreML *v168;
  CoreML::Specification::BatchnormLayerParams *v169;
  std::string *v170;
  __int128 v171;
  uint64_t *v172;
  uint64_t *v173;
  uint64_t v174;
  _BOOL8 v175;
  uint64_t *v176;
  uint64_t *v177;
  uint64_t v178;
  void *v179[2];
  char v180;
  std::string v181;
  void *__p[2];
  char v183;
  _BYTE v184[24];
  uint64_t v185;
  uint64_t v186;
  __int128 v187;
  uint64_t v188;

  CoreML::Result::Result((CoreML::Result *)&v186);
  CoreML::validateInputCount(a2, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)v184);
  v186 = *(_QWORD *)v184;
  if (SHIBYTE(v188) < 0)
    operator delete((void *)v187);
  v187 = *(_OWORD *)&v184[8];
  v188 = v185;
  if (CoreML::Result::good((CoreML::Result *)&v186))
  {
    CoreML::validateOutputCount(a2, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)v184);
    v186 = *(_QWORD *)v184;
    if (SHIBYTE(v188) < 0)
      operator delete((void *)v187);
    v187 = *(_OWORD *)&v184[8];
    v188 = v185;
  }
  v6 = CoreML::Result::good((CoreML::Result *)&v186);
  if (!v6)
    goto LABEL_396;
  if (*(_BYTE *)this)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "Batchnorm");
    v7 = (char *)this + 32;
    CoreML::validateInputOutputRankEquality(a2, (uint64_t)__p, (uint64_t)v7, (CoreML::Result *)v184);
    v186 = *(_QWORD *)v184;
    if (SHIBYTE(v188) < 0)
      operator delete((void *)v187);
    v187 = *(_OWORD *)&v184[8];
    v188 = v185;
    HIBYTE(v185) = 0;
    v184[8] = 0;
    if (v183 < 0)
      operator delete(__p[0]);
    if (!CoreML::Result::good((CoreML::Result *)&v186))
      goto LABEL_396;
    std::string::basic_string[abi:ne180100]<0>(&v181, "Batchnorm");
    CoreML::validateRankCount((uint64_t)a2, (uint64_t)&v181, 3, -1, (uint64_t)v7, (uint64_t)v184);
    v186 = *(_QWORD *)v184;
    if (SHIBYTE(v188) < 0)
      operator delete((void *)v187);
    v187 = *(_OWORD *)&v184[8];
    v188 = v185;
    HIBYTE(v185) = 0;
    v184[8] = 0;
    if (SHIBYTE(v181.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v181.__r_.__value_.__l.__data_);
    v6 = CoreML::Result::good((CoreML::Result *)&v186);
    if (!v6)
      goto LABEL_396;
  }
  if (*((_DWORD *)a2 + 35) == 160)
    v8 = (uint64_t *)*((_QWORD *)a2 + 16);
  else
    v8 = CoreML::Specification::BatchnormLayerParams::default_instance((CoreML::Specification::BatchnormLayerParams *)v6);
  if (v8[2])
    v9 = (uint64_t *)v8[2];
  else
    v9 = &CoreML::Specification::_WeightParams_default_instance_;
  v10 = v9[5];
  if (*(char *)(v10 + 23) < 0)
    v11 = *(_QWORD *)(v10 + 8);
  else
    v11 = *(unsigned __int8 *)(v10 + 23);
  v12 = v9[6];
  if (*(char *)(v12 + 23) < 0)
    v13 = *(_QWORD *)(v12 + 8);
  else
    v13 = *(unsigned __int8 *)(v12 + 23);
  v14 = *((_DWORD *)v9 + 4);
  v15 = v9[7];
  if (*(char *)(v15 + 23) < 0)
    v16 = *(_QWORD *)(v15 + 8);
  else
    v16 = *(unsigned __int8 *)(v15 + 23);
  v17 = 1;
  if (v14 <= 0)
    v18 = 1;
  else
    v18 = 2;
  if (v11)
    v19 = v18;
  else
    v19 = v14 > 0;
  if (v13)
    ++v19;
  if (v16)
    v20 = v19 + 1;
  else
    v20 = v19;
  v21 = *((_DWORD *)a2 + 35);
  if (v14 < 1 || v20 != 1)
  {
    if (v21 == 160)
      v8 = (uint64_t *)*((_QWORD *)a2 + 16);
    else
      v8 = CoreML::Specification::BatchnormLayerParams::default_instance((CoreML::Specification::BatchnormLayerParams *)v8);
    if (v8[3])
      v22 = (uint64_t *)v8[3];
    else
      v22 = &CoreML::Specification::_WeightParams_default_instance_;
    v23 = v22[5];
    if (*(char *)(v23 + 23) < 0)
      v24 = *(_QWORD *)(v23 + 8);
    else
      v24 = *(unsigned __int8 *)(v23 + 23);
    v25 = v22[6];
    if (*(char *)(v25 + 23) < 0)
      v26 = *(_QWORD *)(v25 + 8);
    else
      v26 = *(unsigned __int8 *)(v25 + 23);
    v27 = *((_DWORD *)v22 + 4);
    v28 = v22[7];
    if (*(char *)(v28 + 23) < 0)
      v29 = *(_QWORD *)(v28 + 8);
    else
      v29 = *(unsigned __int8 *)(v28 + 23);
    if (v27 <= 0)
      v30 = 1;
    else
      v30 = 2;
    if (v24)
      v31 = v30;
    else
      v31 = v27 > 0;
    if (v26)
      ++v31;
    if (v29)
      v32 = v31 + 1;
    else
      v32 = v31;
    v21 = *((_DWORD *)a2 + 35);
    if (v27 < 1 || v32 != 1)
    {
      if (v21 == 160)
        v8 = (uint64_t *)*((_QWORD *)a2 + 16);
      else
        v8 = CoreML::Specification::BatchnormLayerParams::default_instance((CoreML::Specification::BatchnormLayerParams *)v8);
      if (v8[4])
        v33 = (uint64_t *)v8[4];
      else
        v33 = &CoreML::Specification::_WeightParams_default_instance_;
      v34 = v33[5];
      if (*(char *)(v34 + 23) < 0)
        v35 = *(_QWORD *)(v34 + 8);
      else
        v35 = *(unsigned __int8 *)(v34 + 23);
      v36 = v33[6];
      if (*(char *)(v36 + 23) < 0)
        v37 = *(_QWORD *)(v36 + 8);
      else
        v37 = *(unsigned __int8 *)(v36 + 23);
      v38 = *((_DWORD *)v33 + 4);
      v39 = v33[7];
      if (*(char *)(v39 + 23) < 0)
        v40 = *(_QWORD *)(v39 + 8);
      else
        v40 = *(unsigned __int8 *)(v39 + 23);
      if (v38 <= 0)
        v41 = 1;
      else
        v41 = 2;
      if (v35)
        v42 = v41;
      else
        v42 = v38 > 0;
      if (v37)
        ++v42;
      if (v40)
        v43 = v42 + 1;
      else
        v43 = v42;
      v21 = *((_DWORD *)a2 + 35);
      if (v38 < 1 || v43 != 1)
      {
        if (v21 == 160)
          v8 = (uint64_t *)*((_QWORD *)a2 + 16);
        else
          v8 = CoreML::Specification::BatchnormLayerParams::default_instance((CoreML::Specification::BatchnormLayerParams *)v8);
        if (v8[5])
          v44 = (uint64_t *)v8[5];
        else
          v44 = &CoreML::Specification::_WeightParams_default_instance_;
        v45 = v44[5];
        if (*(char *)(v45 + 23) < 0)
          v46 = *(_QWORD *)(v45 + 8);
        else
          v46 = *(unsigned __int8 *)(v45 + 23);
        v47 = v44[6];
        if (*(char *)(v47 + 23) < 0)
          v48 = *(_QWORD *)(v47 + 8);
        else
          v48 = *(unsigned __int8 *)(v47 + 23);
        v49 = *((_DWORD *)v44 + 4);
        v50 = v44[7];
        if (*(char *)(v50 + 23) < 0)
          v51 = *(_QWORD *)(v50 + 8);
        else
          v51 = *(unsigned __int8 *)(v50 + 23);
        if (v49 <= 0)
          v52 = 1;
        else
          v52 = 2;
        if (v46)
          v53 = v52;
        else
          v53 = v49 > 0;
        if (v48)
          ++v53;
        if (v51)
          ++v53;
        v54 = v53 == 1;
        v17 = v49 > 0 && v54;
        v21 = *((_DWORD *)a2 + 35);
      }
    }
  }
  if (v21 == 160)
    v55 = (uint64_t *)*((_QWORD *)a2 + 16);
  else
    v55 = CoreML::Specification::BatchnormLayerParams::default_instance((CoreML::Specification::BatchnormLayerParams *)v8);
  if (v55[2])
    v56 = (uint64_t *)v55[2];
  else
    v56 = &CoreML::Specification::_WeightParams_default_instance_;
  v57 = v56[5];
  if (*(char *)(v57 + 23) < 0)
    v58 = *(_QWORD *)(v57 + 8);
  else
    v58 = *(unsigned __int8 *)(v57 + 23);
  v59 = v56[6];
  if (*(char *)(v59 + 23) < 0)
    v60 = *(_QWORD *)(v59 + 8);
  else
    v60 = *(unsigned __int8 *)(v59 + 23);
  v61 = *((_DWORD *)v56 + 4);
  v62 = v56[7];
  if (*(char *)(v62 + 23) < 0)
    v63 = *(_QWORD *)(v62 + 8);
  else
    v63 = *(unsigned __int8 *)(v62 + 23);
  if (v61 <= 0)
    v64 = 1;
  else
    v64 = 2;
  if (v58)
    v65 = v64;
  else
    v65 = v61 > 0;
  if (v60)
    ++v65;
  if (v63)
    ++v65;
  if (v61 <= 0 && v65 == 1)
  {
    if ((*(_BYTE *)(v57 + 23) & 0x80) != 0)
    {
      if (!*(_QWORD *)(v57 + 8))
        goto LABEL_163;
    }
    else if (!*(_BYTE *)(v57 + 23))
    {
      goto LABEL_163;
    }
LABEL_223:
    v88 = 1;
    goto LABEL_224;
  }
LABEL_163:
  if (*((_DWORD *)a2 + 35) == 160)
    v55 = (uint64_t *)*((_QWORD *)a2 + 16);
  else
    v55 = CoreML::Specification::BatchnormLayerParams::default_instance((CoreML::Specification::BatchnormLayerParams *)v55);
  if (v55[3])
    v66 = (uint64_t *)v55[3];
  else
    v66 = &CoreML::Specification::_WeightParams_default_instance_;
  v67 = v66[5];
  v68 = *(unsigned __int8 *)(v67 + 23);
  if (*(char *)(v67 + 23) < 0)
    v69 = *(_QWORD *)(v67 + 8);
  else
    v69 = *(unsigned __int8 *)(v67 + 23);
  v70 = v66[6];
  if (*(char *)(v70 + 23) < 0)
    v71 = *(_QWORD *)(v70 + 8);
  else
    v71 = *(unsigned __int8 *)(v70 + 23);
  v72 = *((_DWORD *)v66 + 4);
  v73 = v66[7];
  if (*(char *)(v73 + 23) < 0)
    v74 = *(_QWORD *)(v73 + 8);
  else
    v74 = *(unsigned __int8 *)(v73 + 23);
  if (v72 <= 0)
    v75 = 1;
  else
    v75 = 2;
  if (v69)
    v76 = v75;
  else
    v76 = v72 > 0;
  if (v71)
    ++v76;
  if (v74)
    ++v76;
  if (v72 <= 0 && v76 == 1)
  {
    if ((v68 & 0x80) != 0)
      v68 = *(_QWORD *)(v67 + 8);
    if (v68)
      goto LABEL_223;
  }
  if (*((_DWORD *)a2 + 35) == 160)
    v55 = (uint64_t *)*((_QWORD *)a2 + 16);
  else
    v55 = CoreML::Specification::BatchnormLayerParams::default_instance((CoreML::Specification::BatchnormLayerParams *)v55);
  if (v55[4])
    v77 = (uint64_t *)v55[4];
  else
    v77 = &CoreML::Specification::_WeightParams_default_instance_;
  v78 = v77[5];
  v79 = *(unsigned __int8 *)(v78 + 23);
  if (*(char *)(v78 + 23) < 0)
    v80 = *(_QWORD *)(v78 + 8);
  else
    v80 = *(unsigned __int8 *)(v78 + 23);
  v81 = v77[6];
  if (*(char *)(v81 + 23) < 0)
    v82 = *(_QWORD *)(v81 + 8);
  else
    v82 = *(unsigned __int8 *)(v81 + 23);
  v83 = *((_DWORD *)v77 + 4);
  v84 = v77[7];
  if (*(char *)(v84 + 23) < 0)
    v85 = *(_QWORD *)(v84 + 8);
  else
    v85 = *(unsigned __int8 *)(v84 + 23);
  if (v83 <= 0)
    v86 = 1;
  else
    v86 = 2;
  if (v80)
    v87 = v86;
  else
    v87 = v83 > 0;
  if (v82)
    ++v87;
  if (v85)
    ++v87;
  if (v83 <= 0 && v87 == 1)
  {
    if ((v79 & 0x80) != 0)
      v79 = *(_QWORD *)(v78 + 8);
    if (v79)
      goto LABEL_223;
  }
  if (*((_DWORD *)a2 + 35) == 160)
    v55 = (uint64_t *)*((_QWORD *)a2 + 16);
  else
    v55 = CoreML::Specification::BatchnormLayerParams::default_instance((CoreML::Specification::BatchnormLayerParams *)v55);
  if (v55[5])
    v115 = (uint64_t *)v55[5];
  else
    v115 = &CoreML::Specification::_WeightParams_default_instance_;
  v116 = v115[5];
  v117 = *(unsigned __int8 *)(v116 + 23);
  if (*(char *)(v116 + 23) < 0)
    v118 = *(_QWORD *)(v116 + 8);
  else
    v118 = *(unsigned __int8 *)(v116 + 23);
  v122 = v115[6];
  if (*(char *)(v122 + 23) < 0)
    v123 = *(_QWORD *)(v122 + 8);
  else
    v123 = *(unsigned __int8 *)(v122 + 23);
  v124 = *((_DWORD *)v115 + 4);
  v125 = v115[7];
  if (*(char *)(v125 + 23) < 0)
    v126 = *(_QWORD *)(v125 + 8);
  else
    v126 = *(unsigned __int8 *)(v125 + 23);
  v88 = 0;
  if (v124 <= 0)
    v127 = 1;
  else
    v127 = 2;
  if (v118)
    v128 = v127;
  else
    v128 = v124 > 0;
  if (v123)
    ++v128;
  if (v126)
    ++v128;
  if (v124 <= 0 && v128 == 1)
  {
    if ((v117 & 0x80) != 0)
      v117 = *(_QWORD *)(v116 + 8);
    v88 = v117 != 0;
  }
LABEL_224:
  if (*((_DWORD *)a2 + 35) == 160)
    v89 = (uint64_t *)*((_QWORD *)a2 + 16);
  else
    v89 = CoreML::Specification::BatchnormLayerParams::default_instance((CoreML::Specification::BatchnormLayerParams *)v55);
  if (v89[2])
    v90 = (uint64_t *)v89[2];
  else
    v90 = &CoreML::Specification::_WeightParams_default_instance_;
  v91 = v90[5];
  if (*(char *)(v91 + 23) < 0)
    v92 = *(_QWORD *)(v91 + 8);
  else
    v92 = *(unsigned __int8 *)(v91 + 23);
  v93 = v90[6];
  if (*(char *)(v93 + 23) < 0)
    v94 = *(_QWORD *)(v93 + 8);
  else
    v94 = *(unsigned __int8 *)(v93 + 23);
  v95 = *((_DWORD *)v90 + 4);
  v96 = v90[7];
  if (*(char *)(v96 + 23) < 0)
    v97 = *(_QWORD *)(v96 + 8);
  else
    v97 = *(unsigned __int8 *)(v96 + 23);
  v98 = v95 <= 0;
  v99 = v95 > 0;
  if (v98)
    v100 = 1;
  else
    v100 = 2;
  if (v92)
    v101 = v100;
  else
    v101 = v99;
  if (v94)
    ++v101;
  if (v97)
    ++v101;
  if (v101 > 1)
    goto LABEL_332;
  if (*((_DWORD *)a2 + 35) == 160)
    v102 = (uint64_t *)*((_QWORD *)a2 + 16);
  else
    v102 = CoreML::Specification::BatchnormLayerParams::default_instance((CoreML::Specification::BatchnormLayerParams *)v89);
  if (v102[3])
    v103 = (uint64_t *)v102[3];
  else
    v103 = &CoreML::Specification::_WeightParams_default_instance_;
  v104 = v103[5];
  if (*(char *)(v104 + 23) < 0)
    v105 = *(_QWORD *)(v104 + 8);
  else
    v105 = *(unsigned __int8 *)(v104 + 23);
  v106 = v103[6];
  if (*(char *)(v106 + 23) < 0)
    v107 = *(_QWORD *)(v106 + 8);
  else
    v107 = *(unsigned __int8 *)(v106 + 23);
  v108 = *((_DWORD *)v103 + 4);
  v109 = v103[7];
  if (*(char *)(v109 + 23) < 0)
    v110 = *(_QWORD *)(v109 + 8);
  else
    v110 = *(unsigned __int8 *)(v109 + 23);
  v98 = v108 <= 0;
  v111 = v108 > 0;
  if (v98)
    v112 = 1;
  else
    v112 = 2;
  if (v105)
    v113 = v112;
  else
    v113 = v111;
  if (v107)
    ++v113;
  if (v110)
    ++v113;
  if (v113 > 1)
    goto LABEL_332;
  if (*((_DWORD *)a2 + 35) == 160)
    v114 = (uint64_t *)*((_QWORD *)a2 + 16);
  else
    v114 = CoreML::Specification::BatchnormLayerParams::default_instance((CoreML::Specification::BatchnormLayerParams *)v102);
  if (v114[4])
    v119 = (uint64_t *)v114[4];
  else
    v119 = &CoreML::Specification::_WeightParams_default_instance_;
  v120 = v119[5];
  if (*(char *)(v120 + 23) < 0)
    v121 = *(_QWORD *)(v120 + 8);
  else
    v121 = *(unsigned __int8 *)(v120 + 23);
  v129 = v119[6];
  if (*(char *)(v129 + 23) < 0)
    v130 = *(_QWORD *)(v129 + 8);
  else
    v130 = *(unsigned __int8 *)(v129 + 23);
  v131 = *((_DWORD *)v119 + 4);
  v132 = v119[7];
  if (*(char *)(v132 + 23) < 0)
    v133 = *(_QWORD *)(v132 + 8);
  else
    v133 = *(unsigned __int8 *)(v132 + 23);
  v98 = v131 <= 0;
  v134 = v131 > 0;
  if (v98)
    v135 = 1;
  else
    v135 = 2;
  if (v121)
    v136 = v135;
  else
    v136 = v134;
  if (v130)
    ++v136;
  if (v133)
    ++v136;
  if (v136 > 1)
    goto LABEL_332;
  if (*((_DWORD *)a2 + 35) == 160)
    v139 = (uint64_t *)*((_QWORD *)a2 + 16);
  else
    v139 = CoreML::Specification::BatchnormLayerParams::default_instance((CoreML::Specification::BatchnormLayerParams *)v114);
  if (v139[5])
    v140 = (uint64_t *)v139[5];
  else
    v140 = &CoreML::Specification::_WeightParams_default_instance_;
  v141 = v140[5];
  if (*(char *)(v141 + 23) < 0)
    v142 = *(_QWORD *)(v141 + 8);
  else
    v142 = *(unsigned __int8 *)(v141 + 23);
  v143 = v140[6];
  if (*(char *)(v143 + 23) < 0)
    v144 = *(_QWORD *)(v143 + 8);
  else
    v144 = *(unsigned __int8 *)(v143 + 23);
  v145 = *((_DWORD *)v140 + 4);
  v146 = v140[7];
  if (*(char *)(v146 + 23) < 0)
    v147 = *(_QWORD *)(v146 + 8);
  else
    v147 = *(unsigned __int8 *)(v146 + 23);
  v98 = v145 <= 0;
  v148 = v145 > 0;
  if (v98)
    v149 = 1;
  else
    v149 = 2;
  if (v142)
    v150 = v149;
  else
    v150 = v148;
  if (v144)
    ++v150;
  if (v147)
    ++v150;
  if (v150 > 1 || (v17 & v88) != 0)
  {
LABEL_332:
    std::operator+<char>();
    v137 = std::string::append(&v181, "' parameters have values for both full and half precision. Parameters should either be specified in half or full precision, mixed parameters are not supported.");
    v138 = *(_OWORD *)&v137->__r_.__value_.__l.__data_;
    *(_QWORD *)&v184[16] = *((_QWORD *)&v137->__r_.__value_.__l + 2);
    *(_OWORD *)v184 = v138;
    v137->__r_.__value_.__l.__size_ = 0;
    v137->__r_.__value_.__r.__words[2] = 0;
    v137->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v181.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v181.__r_.__value_.__l.__data_);
    CoreML::Result::Result((_DWORD *)a3, 13);
  }
  else
  {
    if (*((_DWORD *)a2 + 35) == 160)
    {
      v151 = (uint64_t *)*((_QWORD *)a2 + 16);
      v152 = (const CoreML::Specification::WeightParams *)v151[6];
    }
    else
    {
      v153 = CoreML::Specification::BatchnormLayerParams::default_instance((CoreML::Specification::BatchnormLayerParams *)v139);
      v152 = (const CoreML::Specification::WeightParams *)v153[6];
      if (*((_DWORD *)a2 + 35) == 160)
        v151 = (uint64_t *)*((_QWORD *)a2 + 16);
      else
        v151 = CoreML::Specification::BatchnormLayerParams::default_instance((CoreML::Specification::BatchnormLayerParams *)v153);
    }
    if (v151[2])
      v154 = (uint64_t *)v151[2];
    else
      v154 = &CoreML::Specification::_WeightParams_default_instance_;
    std::string::basic_string[abi:ne180100]<0>(&v181, "BatchNorm");
    v155 = *((_QWORD *)a2 + 14);
    std::string::basic_string[abi:ne180100]<0>(v179, "gamma");
    CoreML::validateGeneralWeightParams((uint64_t)v154, v152, (const CoreML::Specification::WeightParams *)1, (const void **)&v181.__r_.__value_.__l.__data_, v155, (uint64_t)v179, (uint64_t)v184);
    v186 = *(_QWORD *)v184;
    if (SHIBYTE(v188) < 0)
      operator delete((void *)v187);
    v187 = *(_OWORD *)&v184[8];
    v188 = v185;
    HIBYTE(v185) = 0;
    v184[8] = 0;
    if (v180 < 0)
      operator delete(v179[0]);
    if (SHIBYTE(v181.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v181.__r_.__value_.__l.__data_);
    v156 = CoreML::Result::good((CoreML::Result *)&v186);
    if (!v156)
      goto LABEL_396;
    if (*((_DWORD *)a2 + 35) == 160)
      v157 = (uint64_t *)*((_QWORD *)a2 + 16);
    else
      v157 = CoreML::Specification::BatchnormLayerParams::default_instance((CoreML::Specification::BatchnormLayerParams *)v156);
    if (v157[3])
      v158 = (uint64_t *)v157[3];
    else
      v158 = &CoreML::Specification::_WeightParams_default_instance_;
    std::string::basic_string[abi:ne180100]<0>(&v181, "BatchNorm");
    v159 = *((_QWORD *)a2 + 14);
    std::string::basic_string[abi:ne180100]<0>(v179, "beta");
    CoreML::validateGeneralWeightParams((uint64_t)v158, v152, (const CoreML::Specification::WeightParams *)1, (const void **)&v181.__r_.__value_.__l.__data_, v159, (uint64_t)v179, (uint64_t)v184);
    v186 = *(_QWORD *)v184;
    if (SHIBYTE(v188) < 0)
      operator delete((void *)v187);
    v187 = *(_OWORD *)&v184[8];
    v188 = v185;
    HIBYTE(v185) = 0;
    v184[8] = 0;
    if (v180 < 0)
      operator delete(v179[0]);
    if (SHIBYTE(v181.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v181.__r_.__value_.__l.__data_);
    v160 = CoreML::Result::good((CoreML::Result *)&v186);
    if (!v160)
      goto LABEL_396;
    v162 = *((_DWORD *)a2 + 35) == 160
         ? (uint64_t *)*((_QWORD *)a2 + 16)
         : CoreML::Specification::BatchnormLayerParams::default_instance((CoreML::Specification::BatchnormLayerParams *)v160);
    if (*((_BYTE *)v162 + 56))
      goto LABEL_396;
    if (*((_DWORD *)a2 + 35) == 160)
      v163 = (uint64_t *)*((_QWORD *)a2 + 16);
    else
      v163 = CoreML::Specification::BatchnormLayerParams::default_instance((CoreML::Specification::BatchnormLayerParams *)v162);
    if (v163[4])
      v164 = (CoreML *)v163[4];
    else
      v164 = (CoreML *)&CoreML::Specification::_WeightParams_default_instance_;
    v165 = (CoreML::Specification::BatchnormLayerParams *)CoreML::valueType(v164, v161);
    if ((_DWORD)v165 != 5)
    {
      v167 = *((_DWORD *)a2 + 35) == 160
           ? (uint64_t *)*((_QWORD *)a2 + 16)
           : CoreML::Specification::BatchnormLayerParams::default_instance(v165);
      v168 = v167[4] ? (CoreML *)v167[4] : (CoreML *)&CoreML::Specification::_WeightParams_default_instance_;
      v169 = (CoreML::Specification::BatchnormLayerParams *)CoreML::valueType(v168, v166);
      if ((_DWORD)v169 != 5)
      {
        if (*((_DWORD *)a2 + 35) == 160)
          v172 = (uint64_t *)*((_QWORD *)a2 + 16);
        else
          v172 = CoreML::Specification::BatchnormLayerParams::default_instance(v169);
        if (v172[4])
          v173 = (uint64_t *)v172[4];
        else
          v173 = &CoreML::Specification::_WeightParams_default_instance_;
        std::string::basic_string[abi:ne180100]<0>(&v181, "BatchNorm");
        v174 = *((_QWORD *)a2 + 14);
        std::string::basic_string[abi:ne180100]<0>(v179, "mean");
        CoreML::validateGeneralWeightParams((uint64_t)v173, v152, (const CoreML::Specification::WeightParams *)1, (const void **)&v181.__r_.__value_.__l.__data_, v174, (uint64_t)v179, (uint64_t)v184);
        v186 = *(_QWORD *)v184;
        if (SHIBYTE(v188) < 0)
          operator delete((void *)v187);
        v187 = *(_OWORD *)&v184[8];
        v188 = v185;
        HIBYTE(v185) = 0;
        v184[8] = 0;
        if (v180 < 0)
          operator delete(v179[0]);
        if (SHIBYTE(v181.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v181.__r_.__value_.__l.__data_);
        v175 = CoreML::Result::good((CoreML::Result *)&v186);
        if (v175)
        {
          if (*((_DWORD *)a2 + 35) == 160)
            v176 = (uint64_t *)*((_QWORD *)a2 + 16);
          else
            v176 = CoreML::Specification::BatchnormLayerParams::default_instance((CoreML::Specification::BatchnormLayerParams *)v175);
          if (v176[5])
            v177 = (uint64_t *)v176[5];
          else
            v177 = &CoreML::Specification::_WeightParams_default_instance_;
          std::string::basic_string[abi:ne180100]<0>(&v181, "BatchNorm");
          v178 = *((_QWORD *)a2 + 14);
          std::string::basic_string[abi:ne180100]<0>(v179, "variance");
          CoreML::validateGeneralWeightParams((uint64_t)v177, v152, (const CoreML::Specification::WeightParams *)1, (const void **)&v181.__r_.__value_.__l.__data_, v178, (uint64_t)v179, (uint64_t)v184);
          v186 = *(_QWORD *)v184;
          if (SHIBYTE(v188) < 0)
            operator delete((void *)v187);
          v187 = *(_OWORD *)&v184[8];
          v188 = v185;
          HIBYTE(v185) = 0;
          v184[8] = 0;
          if (v180 < 0)
            operator delete(v179[0]);
          if (SHIBYTE(v181.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v181.__r_.__value_.__l.__data_);
          CoreML::Result::good((CoreML::Result *)&v186);
        }
LABEL_396:
        *(_QWORD *)a3 = v186;
        *(_OWORD *)(a3 + 8) = v187;
        *(_QWORD *)(a3 + 24) = v188;
        v187 = 0uLL;
        v188 = 0;
        goto LABEL_397;
      }
    }
    std::operator+<char>();
    v170 = std::string::append(&v181, "' is missing mean and variance.");
    v171 = *(_OWORD *)&v170->__r_.__value_.__l.__data_;
    *(_QWORD *)&v184[16] = *((_QWORD *)&v170->__r_.__value_.__l + 2);
    *(_OWORD *)v184 = v171;
    v170->__r_.__value_.__l.__size_ = 0;
    v170->__r_.__value_.__r.__words[2] = 0;
    v170->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v181.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v181.__r_.__value_.__l.__data_);
    CoreML::Result::Result((_DWORD *)a3, 13);
  }
  if ((v184[23] & 0x80000000) != 0)
    operator delete(*(void **)v184);
LABEL_397:
  if (SHIBYTE(v188) < 0)
    operator delete((void *)v187);
}

void sub_21833BFFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;

  if (*(char *)(v33 - 65) < 0)
    operator delete(*(void **)(v33 - 88));
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateActivation(CoreML::NeuralNetworkSpecValidator *this@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X8>)
{
  CoreML::Specification::ActivationParams *v6;
  uint64_t *v7;
  char *v8;
  uint64_t *v9;
  void *v10[2];
  char v11;
  void *v12[2];
  char v13;
  void *__p[2];
  char v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;

  CoreML::Result::Result((CoreML::Result *)&v19);
  CoreML::validateInputCount((CoreML *)a2, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v16);
  v19 = v16;
  if (SHIBYTE(v21) < 0)
    operator delete((void *)v20);
  v20 = v17;
  v21 = v18;
  if (CoreML::Result::good((CoreML::Result *)&v19))
  {
    CoreML::validateOutputCount((CoreML *)a2, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v16);
    v19 = v16;
    if (SHIBYTE(v21) < 0)
      operator delete((void *)v20);
    v20 = v17;
    v21 = v18;
  }
  v6 = (CoreML::Specification::ActivationParams *)CoreML::Result::good((CoreML::Result *)&v19);
  if ((v6 & 1) == 0)
    goto LABEL_39;
  if (!*(_BYTE *)this)
    goto LABEL_37;
  v7 = *((_DWORD *)a2 + 35) == 130 ? a2[16] : CoreML::Specification::ActivationParams::default_instance(v6);
  if (*((_DWORD *)v7 + 7) == 25)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "ActivationPReLU");
    CoreML::validateInputOutputRankEquality(a2, (uint64_t)__p, (uint64_t)this + 32, (CoreML::Result *)&v16);
    v19 = v16;
    if (SHIBYTE(v21) < 0)
      operator delete((void *)v20);
    v20 = v17;
    v21 = v18;
    HIBYTE(v18) = 0;
    LOBYTE(v17) = 0;
    if (v15 < 0)
      operator delete(__p[0]);
    if (!CoreML::Result::good((CoreML::Result *)&v19))
      goto LABEL_39;
    std::string::basic_string[abi:ne180100]<0>(v12, "ActivationPReLU");
    CoreML::validateRankCount((uint64_t)a2, (uint64_t)v12, 3, -1, (uint64_t)this + 32, (uint64_t)&v16);
    v19 = v16;
    if (SHIBYTE(v21) < 0)
      operator delete((void *)v20);
    v20 = v17;
    v21 = v18;
    HIBYTE(v18) = 0;
    LOBYTE(v17) = 0;
    if (v13 < 0)
      operator delete(v12[0]);
    v7 = (uint64_t *)CoreML::Result::good((CoreML::Result *)&v19);
    if ((v7 & 1) == 0)
      goto LABEL_39;
  }
  v6 = (CoreML::Specification::ActivationParams *)(*((_DWORD *)a2 + 35) == 130
                                                 ? a2[16]
                                                 : CoreML::Specification::ActivationParams::default_instance((CoreML::Specification::ActivationParams *)v7));
  if (*((_DWORD *)v6 + 7) != 71)
    goto LABEL_37;
  std::string::basic_string[abi:ne180100]<0>(v10, "ActivationParametricSoftplus");
  v8 = (char *)this + 32;
  CoreML::validateInputOutputRankEquality(a2, (uint64_t)v10, (uint64_t)v8, (CoreML::Result *)&v16);
  v19 = v16;
  if (SHIBYTE(v21) < 0)
    operator delete((void *)v20);
  v20 = v17;
  v21 = v18;
  HIBYTE(v18) = 0;
  LOBYTE(v17) = 0;
  if (v11 < 0)
    operator delete(v10[0]);
  if (!CoreML::Result::good((CoreML::Result *)&v19))
    goto LABEL_39;
  std::string::basic_string[abi:ne180100]<0>(v12, "ActivationParametricSoftplus");
  CoreML::validateRankCount((uint64_t)a2, (uint64_t)v12, 3, -1, (uint64_t)v8, (uint64_t)&v16);
  v19 = v16;
  if (SHIBYTE(v21) < 0)
    operator delete((void *)v20);
  v20 = v17;
  v21 = v18;
  HIBYTE(v18) = 0;
  LOBYTE(v17) = 0;
  if (v13 < 0)
    operator delete(v12[0]);
  v6 = (CoreML::Specification::ActivationParams *)CoreML::Result::good((CoreML::Result *)&v19);
  if ((v6 & 1) != 0)
  {
LABEL_37:
    if (*((_DWORD *)a2 + 35) == 130)
      v9 = a2[16];
    else
      v9 = CoreML::Specification::ActivationParams::default_instance(v6);
    CoreML::validateActivationParams((CoreML *)v9, (CoreML::Result *)a3);
    if (SHIBYTE(v21) < 0)
      operator delete((void *)v20);
  }
  else
  {
LABEL_39:
    *(_QWORD *)a3 = v19;
    *(_OWORD *)(a3 + 8) = v20;
    *(_QWORD *)(a3 + 24) = v21;
  }
}

void sub_21833C430(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;

  if (a21 < 0)
    operator delete(__p);
  if (*(char *)(v27 - 49) < 0)
    operator delete(*(void **)(v27 - 72));
  _Unwind_Resume(exception_object);
}

CoreML::Result *CoreML::validateActivationParams@<X0>(CoreML *this@<X0>, CoreML::Result *a2@<X8>)
{
  int v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  size_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  _BOOL4 v30;
  int v31;
  unsigned int v32;
  unsigned int v33;
  int v34;
  uint64_t v36;
  BOOL v37;
  _BOOL4 v38;
  int v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  uint64_t v44;
  BOOL v45;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  unsigned int v59;
  unsigned int v60;
  int v61;
  uint64_t v62;
  BOOL v63;
  BOOL v64;
  unsigned int v65;
  const char *v66;
  size_t v67;
  uint64_t v68;
  void *__p;
  char v70;
  _QWORD v71[2];
  _QWORD v72[11];
  char v73;
  uint64_t v74;

  v5 = *((_DWORD *)this + 7);
  v6 = (v5 - 10);
  if (v6 <= 0x3D)
  {
    if (((1 << (v5 - 10)) & 0x10040100C0300421) != 0)
      return CoreML::Result::Result(a2);
    if (v6 == 15)
    {
      v15 = &CoreML::Specification::_WeightParams_default_instance_;
      if (*(_QWORD *)(*((_QWORD *)this + 2) + 16))
        v15 = *(uint64_t **)(*((_QWORD *)this + 2) + 16);
      v16 = v15[5];
      if (*(char *)(v16 + 23) < 0)
        v17 = *(_QWORD *)(v16 + 8);
      else
        v17 = *(unsigned __int8 *)(v16 + 23);
      v21 = v15[6];
      if (*(char *)(v21 + 23) < 0)
        v22 = *(_QWORD *)(v21 + 8);
      else
        v22 = *(unsigned __int8 *)(v21 + 23);
      v27 = *((_DWORD *)v15 + 4);
      v28 = v15[7];
      if (*(char *)(v28 + 23) < 0)
        v29 = *(_QWORD *)(v28 + 8);
      else
        v29 = *(unsigned __int8 *)(v28 + 23);
      v37 = v27 <= 0;
      v38 = v27 > 0;
      if (v37)
        v39 = 1;
      else
        v39 = 2;
      if (v17)
        v40 = v39;
      else
        v40 = v38;
      if (v22)
        ++v40;
      if (v29)
        ++v40;
      if (v40 < 2)
        return CoreML::Result::Result(a2);
      goto LABEL_152;
    }
    if (v6 == 61)
    {
      v8 = *((_QWORD *)this + 2);
      if (*(_QWORD *)(v8 + 16))
        v9 = *(uint64_t **)(v8 + 16);
      else
        v9 = &CoreML::Specification::_WeightParams_default_instance_;
      v10 = v9[5];
      v11 = *(unsigned __int8 *)(v10 + 23);
      if (*(char *)(v10 + 23) < 0)
        v12 = *(_QWORD *)(v10 + 8);
      else
        v12 = *(unsigned __int8 *)(v10 + 23);
      v18 = v9[6];
      v19 = *(unsigned __int8 *)(v18 + 23);
      if (*(char *)(v18 + 23) < 0)
        v20 = *(_QWORD *)(v18 + 8);
      else
        v20 = *(unsigned __int8 *)(v18 + 23);
      v23 = *((_DWORD *)v9 + 4);
      v24 = v9[7];
      v25 = *(unsigned __int8 *)(v24 + 23);
      if (*(char *)(v24 + 23) < 0)
        v26 = *(_QWORD *)(v24 + 8);
      else
        v26 = *(unsigned __int8 *)(v24 + 23);
      v30 = v23 > 0;
      if (v23 <= 0)
        v31 = 1;
      else
        v31 = 2;
      if (v12)
        v32 = v31;
      else
        v32 = v23 > 0;
      if (v20)
        ++v32;
      if (v26)
        v33 = v32 + 1;
      else
        v33 = v32;
      if (v33 <= 1)
      {
        if (v33)
          v34 = 0;
        else
          v34 = 5;
        if (v23 <= 0 && v33 != 0)
        {
          if ((v11 & 0x80) != 0)
            v36 = *(_QWORD *)(v10 + 8);
          else
            v36 = *(unsigned __int8 *)(v10 + 23);
          if (v36)
          {
            v34 = 1;
          }
          else
          {
            if ((v19 & 0x80) != 0)
              v41 = *(_QWORD *)(v18 + 8);
            else
              v41 = *(unsigned __int8 *)(v18 + 23);
            v42 = v9[8];
            if (v9 == &CoreML::Specification::_WeightParams_default_instance_
              || (v41 ? (v43 = v42 == 0) : (v43 = 1), v43))
            {
              if ((v25 & 0x80) != 0)
                v44 = *(_QWORD *)(v24 + 8);
              else
                v44 = *(unsigned __int8 *)(v24 + 23);
              if (v42)
                v45 = v44 == 0;
              else
                v45 = 1;
              if (v45 || v9 == &CoreML::Specification::_WeightParams_default_instance_)
                v34 = 5;
              else
                v34 = 3;
            }
            else
            {
              v34 = 2;
            }
          }
        }
      }
      else
      {
        v34 = 4;
      }
      v47 = *(uint64_t **)(v8 + 24);
      if (!v47)
        v47 = &CoreML::Specification::_WeightParams_default_instance_;
      v48 = v47[5];
      v49 = *(unsigned __int8 *)(v48 + 23);
      if (*(char *)(v48 + 23) < 0)
        v50 = *(_QWORD *)(v48 + 8);
      else
        v50 = *(unsigned __int8 *)(v48 + 23);
      v51 = v47[6];
      v52 = *(unsigned __int8 *)(v51 + 23);
      if (*(char *)(v51 + 23) < 0)
        v53 = *(_QWORD *)(v51 + 8);
      else
        v53 = *(unsigned __int8 *)(v51 + 23);
      v54 = *((_DWORD *)v47 + 4);
      v55 = v47[7];
      v56 = *(unsigned __int8 *)(v55 + 23);
      if (*(char *)(v55 + 23) < 0)
        v57 = *(_QWORD *)(v55 + 8);
      else
        v57 = *(unsigned __int8 *)(v55 + 23);
      if (v54 <= 0)
        v58 = 1;
      else
        v58 = 2;
      if (v50)
        v59 = v58;
      else
        v59 = v54 > 0;
      if (v53)
        ++v59;
      if (v57)
        v60 = v59 + 1;
      else
        v60 = v59;
      if (v60 <= 1)
      {
        if (v60)
          v61 = 0;
        else
          v61 = 5;
        if (v54 <= 0 && v60)
        {
          if ((v49 & 0x80) != 0)
            v49 = *(_QWORD *)(v48 + 8);
          if (v49)
          {
            v61 = 1;
          }
          else
          {
            if ((v52 & 0x80) != 0)
              v52 = *(_QWORD *)(v51 + 8);
            v62 = v47[8];
            if (v47 != &CoreML::Specification::_WeightParams_default_instance_ && v52 && v62)
            {
              v61 = 2;
            }
            else
            {
              if ((v56 & 0x80) != 0)
                v56 = *(_QWORD *)(v55 + 8);
              if (v62)
                v63 = v56 == 0;
              else
                v63 = 1;
              v64 = v63 || v47 == &CoreML::Specification::_WeightParams_default_instance_;
              v56 = 3;
              if (v64)
                v61 = 5;
              else
                v61 = 3;
            }
          }
        }
      }
      else
      {
        v61 = 4;
      }
      if (v34 == v61)
      {
        if ((v11 & 0x80) != 0)
        {
          v11 = *(_QWORD *)(v10 + 8);
          if ((v19 & 0x80) == 0)
          {
LABEL_142:
            if ((v25 & 0x80) == 0)
              goto LABEL_143;
LABEL_160:
            v25 = *(_QWORD *)(v24 + 8);
LABEL_143:
            if (v11)
              v65 = v31;
            else
              v65 = v30;
            if (v19)
              ++v65;
            if (v25)
              ++v65;
            if (v65 <= 1
              && CoreML::valueType((CoreML *)v47, (const CoreML::Specification::WeightParams *)v56) != 4)
            {
              return CoreML::Result::Result(a2);
            }
            goto LABEL_152;
          }
        }
        else if ((v19 & 0x80) == 0)
        {
          goto LABEL_142;
        }
        v19 = *(_QWORD *)(v18 + 8);
        if ((v25 & 0x80) == 0)
          goto LABEL_143;
        goto LABEL_160;
      }
LABEL_152:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v71);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)"Nonlinearity type ", 18);
      v66 = MLActivationParamsNonlinearityType_Name(*((_DWORD *)this + 7));
      v67 = strlen(v66);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)v66, v67);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)" has inconsistent weight parameter types.", 41);
      std::stringbuf::str();
      CoreML::Result::Result(a2, 13);
      goto LABEL_153;
    }
  }
  if (v5 == 5)
    return CoreML::Result::Result(a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v71);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)"Nonlinearity type ", 18);
  v13 = MLActivationParamsNonlinearityType_Name(*((_DWORD *)this + 7));
  v14 = strlen(v13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)v13, v14);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)" is not supported in this version of CoreML.", 44);
  std::stringbuf::str();
  CoreML::Result::Result(a2, 13);
LABEL_153:
  if (v70 < 0)
    operator delete(__p);
  v71[0] = *MEMORY[0x24BEDB7F0];
  v68 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v71 + *(_QWORD *)(v71[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v72[0] = v68;
  v72[1] = MEMORY[0x24BEDB848] + 16;
  if (v73 < 0)
    operator delete((void *)v72[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return (CoreML::Result *)MEMORY[0x219A198F4](&v74);
}

void sub_21833CA64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void CoreML::NeuralNetworkSpecValidator::validatePoolingLayer(CoreML::NeuralNetworkSpecValidator *this@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X8>)
{
  void **v6;
  _BOOL8 v7;
  char *v8;
  uint64_t *v9;
  std::string *v10;
  __int128 v11;
  void *v12[2];
  std::string::size_type v13;
  void *__p[2];
  char v15;
  std::string v16;
  uint64_t v17;

  CoreML::Result::Result((CoreML::Result *)a3);
  CoreML::validateInputCount((CoreML *)a2, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v16);
  *(_QWORD *)a3 = v16.__r_.__value_.__r.__words[0];
  v6 = (void **)(a3 + 8);
  if (*(char *)(a3 + 31) < 0)
    operator delete(*v6);
  *(_OWORD *)v6 = *(_OWORD *)&v16.__r_.__value_.__r.__words[1];
  *(_QWORD *)(a3 + 24) = v17;
  if (CoreML::Result::good((CoreML::Result *)a3))
  {
    CoreML::validateOutputCount((CoreML *)a2, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v16);
    *(_QWORD *)a3 = v16.__r_.__value_.__r.__words[0];
    if (*(char *)(a3 + 31) < 0)
      operator delete(*v6);
    *(_OWORD *)v6 = *(_OWORD *)&v16.__r_.__value_.__r.__words[1];
    *(_QWORD *)(a3 + 24) = v17;
    v7 = CoreML::Result::good((CoreML::Result *)a3);
    if (v7)
    {
      if (!*(_BYTE *)this)
        goto LABEL_18;
      std::string::basic_string[abi:ne180100]<0>(__p, "Pooling");
      v8 = (char *)this + 32;
      CoreML::validateInputOutputRankEquality(a2, (uint64_t)__p, (uint64_t)v8, (CoreML::Result *)&v16);
      *(_QWORD *)a3 = v16.__r_.__value_.__r.__words[0];
      if (*(char *)(a3 + 31) < 0)
        operator delete(*v6);
      *(_OWORD *)v6 = *(_OWORD *)&v16.__r_.__value_.__r.__words[1];
      *(_QWORD *)(a3 + 24) = v17;
      HIBYTE(v17) = 0;
      v16.__r_.__value_.__s.__data_[8] = 0;
      if (v15 < 0)
        operator delete(__p[0]);
      if (CoreML::Result::good((CoreML::Result *)a3))
      {
        std::string::basic_string[abi:ne180100]<0>(v12, "Pooling");
        CoreML::validateRankCount((uint64_t)a2, (uint64_t)v12, 4, -1, (uint64_t)v8, (uint64_t)&v16);
        *(_QWORD *)a3 = v16.__r_.__value_.__r.__words[0];
        if (*(char *)(a3 + 31) < 0)
          operator delete(*v6);
        *(_OWORD *)v6 = *(_OWORD *)&v16.__r_.__value_.__r.__words[1];
        *(_QWORD *)(a3 + 24) = v17;
        HIBYTE(v17) = 0;
        v16.__r_.__value_.__s.__data_[8] = 0;
        if (SHIBYTE(v13) < 0)
          operator delete(v12[0]);
        v7 = CoreML::Result::good((CoreML::Result *)a3);
        if (v7)
        {
LABEL_18:
          if (*((_DWORD *)a2 + 35) == 120)
            v9 = a2[16];
          else
            v9 = CoreML::Specification::PoolingLayerParams::default_instance((CoreML::Specification::PoolingLayerParams *)v7);
          if (!*((_DWORD *)v9 + 21))
          {
            std::operator+<char>();
            v10 = std::string::append(&v16, "' is not set.");
            v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
            v13 = v10->__r_.__value_.__r.__words[2];
            *(_OWORD *)v12 = v11;
            v10->__r_.__value_.__l.__size_ = 0;
            v10->__r_.__value_.__r.__words[2] = 0;
            v10->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v16.__r_.__value_.__l.__data_);
            CoreML::Result::Result(&v16, 13);
            *(_QWORD *)a3 = v16.__r_.__value_.__r.__words[0];
            if (*(char *)(a3 + 31) < 0)
              operator delete(*v6);
            *(_OWORD *)v6 = *(_OWORD *)&v16.__r_.__value_.__r.__words[1];
            *(_QWORD *)(a3 + 24) = v17;
            if (SHIBYTE(v13) < 0)
              operator delete(v12[0]);
          }
        }
      }
    }
  }
}

void sub_21833CD24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;

  if (a14 < 0)
    operator delete(__p);
  if (*(char *)(v26 + 31) < 0)
    operator delete(*(void **)(v26 + 8));
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validatePooling3dLayer(CoreML::NeuralNetworkSpecValidator *this@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X8>)
{
  void **v6;
  _BOOL8 v7;
  char *v8;
  uint64_t *v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  void *v23[2];
  char v24;
  void *__p;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  void *v41[2];
  char v42;

  CoreML::Result::Result((CoreML::Result *)a3);
  CoreML::validateInputCount((CoreML *)a2, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v28);
  *(_QWORD *)a3 = v28;
  v6 = (void **)(a3 + 8);
  if (*(char *)(a3 + 31) < 0)
    operator delete(*v6);
  *(_OWORD *)v6 = v29;
  *(_QWORD *)(a3 + 24) = v30;
  if (CoreML::Result::good((CoreML::Result *)a3))
  {
    CoreML::validateOutputCount((CoreML *)a2, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v28);
    *(_QWORD *)a3 = v28;
    if (*(char *)(a3 + 31) < 0)
      operator delete(*v6);
    *(_OWORD *)v6 = v29;
    *(_QWORD *)(a3 + 24) = v30;
    v7 = CoreML::Result::good((CoreML::Result *)a3);
    if (v7)
    {
      if (!*(_BYTE *)this)
        goto LABEL_18;
      std::string::basic_string[abi:ne180100]<0>(v41, "Pooling3d");
      v8 = (char *)this + 32;
      CoreML::validateInputOutputRankEquality(a2, (uint64_t)v41, (uint64_t)v8, (CoreML::Result *)&v28);
      *(_QWORD *)a3 = v28;
      if (*(char *)(a3 + 31) < 0)
        operator delete(*v6);
      *(_OWORD *)v6 = v29;
      *(_QWORD *)(a3 + 24) = v30;
      HIBYTE(v30) = 0;
      LOBYTE(v29) = 0;
      if (v42 < 0)
        operator delete(v41[0]);
      if (CoreML::Result::good((CoreML::Result *)a3))
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, "Pooling3d");
        CoreML::validateRankCount((uint64_t)a2, (uint64_t)&__p, 5, -1, (uint64_t)v8, (uint64_t)&v28);
        *(_QWORD *)a3 = v28;
        if (*(char *)(a3 + 31) < 0)
          operator delete(*v6);
        *(_OWORD *)v6 = v29;
        *(_QWORD *)(a3 + 24) = v30;
        HIBYTE(v30) = 0;
        LOBYTE(v29) = 0;
        if (SHIBYTE(v26) < 0)
          operator delete(__p);
        v7 = CoreML::Result::good((CoreML::Result *)a3);
        if (v7)
        {
LABEL_18:
          if (*((_DWORD *)a2 + 35) == 1465)
            v9 = a2[16];
          else
            v9 = CoreML::Specification::Pooling3DLayerParams::default_instance((CoreML::Specification::Pooling3DLayerParams *)v7);
          CoreML::Specification::Pooling3DLayerParams::Pooling3DLayerParams((CoreML::Specification::Pooling3DLayerParams *)&v28, (const CoreML::Specification::Pooling3DLayerParams *)v9);
          v10 = HIDWORD(v29);
          std::string::basic_string[abi:ne180100]<0>(v23, "Kernel Depth");
          CoreML::validatePositive(v10, (const void **)v23, (CoreML::Result *)&__p);
          *(_QWORD *)a3 = __p;
          if (*(char *)(a3 + 31) < 0)
            operator delete(*v6);
          *(_OWORD *)v6 = v26;
          *(_QWORD *)(a3 + 24) = v27;
          HIBYTE(v27) = 0;
          LOBYTE(v26) = 0;
          if (v24 < 0)
            operator delete(v23[0]);
          if (CoreML::Result::good((CoreML::Result *)a3))
          {
            v11 = v30;
            std::string::basic_string[abi:ne180100]<0>(v23, "Kernel Height");
            CoreML::validatePositive(v11, (const void **)v23, (CoreML::Result *)&__p);
            *(_QWORD *)a3 = __p;
            if (*(char *)(a3 + 31) < 0)
              operator delete(*v6);
            *(_OWORD *)v6 = v26;
            *(_QWORD *)(a3 + 24) = v27;
            HIBYTE(v27) = 0;
            LOBYTE(v26) = 0;
            if (v24 < 0)
              operator delete(v23[0]);
            if (CoreML::Result::good((CoreML::Result *)a3))
            {
              v12 = HIDWORD(v30);
              std::string::basic_string[abi:ne180100]<0>(v23, "Kernel Width");
              CoreML::validatePositive(v12, (const void **)v23, (CoreML::Result *)&__p);
              *(_QWORD *)a3 = __p;
              if (*(char *)(a3 + 31) < 0)
                operator delete(*v6);
              *(_OWORD *)v6 = v26;
              *(_QWORD *)(a3 + 24) = v27;
              HIBYTE(v27) = 0;
              LOBYTE(v26) = 0;
              if (v24 < 0)
                operator delete(v23[0]);
              if (CoreML::Result::good((CoreML::Result *)a3))
              {
                v13 = v31;
                std::string::basic_string[abi:ne180100]<0>(v23, "Stride Depth");
                CoreML::validatePositive(v13, (const void **)v23, (CoreML::Result *)&__p);
                *(_QWORD *)a3 = __p;
                if (*(char *)(a3 + 31) < 0)
                  operator delete(*v6);
                *(_OWORD *)v6 = v26;
                *(_QWORD *)(a3 + 24) = v27;
                HIBYTE(v27) = 0;
                LOBYTE(v26) = 0;
                if (v24 < 0)
                  operator delete(v23[0]);
                if (CoreML::Result::good((CoreML::Result *)a3))
                {
                  v14 = v32;
                  std::string::basic_string[abi:ne180100]<0>(v23, "Stride Height");
                  CoreML::validatePositive(v14, (const void **)v23, (CoreML::Result *)&__p);
                  *(_QWORD *)a3 = __p;
                  if (*(char *)(a3 + 31) < 0)
                    operator delete(*v6);
                  *(_OWORD *)v6 = v26;
                  *(_QWORD *)(a3 + 24) = v27;
                  HIBYTE(v27) = 0;
                  LOBYTE(v26) = 0;
                  if (v24 < 0)
                    operator delete(v23[0]);
                  if (CoreML::Result::good((CoreML::Result *)a3))
                  {
                    v15 = v33;
                    std::string::basic_string[abi:ne180100]<0>(v23, "Stride Width");
                    CoreML::validatePositive(v15, (const void **)v23, (CoreML::Result *)&__p);
                    *(_QWORD *)a3 = __p;
                    if (*(char *)(a3 + 31) < 0)
                      operator delete(*v6);
                    *(_OWORD *)v6 = v26;
                    *(_QWORD *)(a3 + 24) = v27;
                    HIBYTE(v27) = 0;
                    LOBYTE(v26) = 0;
                    if (v24 < 0)
                      operator delete(v23[0]);
                    if (CoreML::Result::good((CoreML::Result *)a3))
                    {
                      v16 = v40;
                      v17 = v34;
                      std::string::basic_string[abi:ne180100]<0>(v23, "Front");
                      CoreML::validatePooling3dPadding(v16, v17, (CoreML::Result *)&__p);
                      *(_QWORD *)a3 = __p;
                      if (*(char *)(a3 + 31) < 0)
                        operator delete(*v6);
                      *(_OWORD *)v6 = v26;
                      *(_QWORD *)(a3 + 24) = v27;
                      HIBYTE(v27) = 0;
                      LOBYTE(v26) = 0;
                      if (v24 < 0)
                        operator delete(v23[0]);
                      if (CoreML::Result::good((CoreML::Result *)a3))
                      {
                        v18 = v35;
                        std::string::basic_string[abi:ne180100]<0>(v23, "Back");
                        CoreML::validatePooling3dPadding(v16, v18, (CoreML::Result *)&__p);
                        *(_QWORD *)a3 = __p;
                        if (*(char *)(a3 + 31) < 0)
                          operator delete(*v6);
                        *(_OWORD *)v6 = v26;
                        *(_QWORD *)(a3 + 24) = v27;
                        HIBYTE(v27) = 0;
                        LOBYTE(v26) = 0;
                        if (v24 < 0)
                          operator delete(v23[0]);
                        if (CoreML::Result::good((CoreML::Result *)a3))
                        {
                          v19 = v36;
                          std::string::basic_string[abi:ne180100]<0>(v23, "Top");
                          CoreML::validatePooling3dPadding(v16, v19, (CoreML::Result *)&__p);
                          *(_QWORD *)a3 = __p;
                          if (*(char *)(a3 + 31) < 0)
                            operator delete(*v6);
                          *(_OWORD *)v6 = v26;
                          *(_QWORD *)(a3 + 24) = v27;
                          HIBYTE(v27) = 0;
                          LOBYTE(v26) = 0;
                          if (v24 < 0)
                            operator delete(v23[0]);
                          if (CoreML::Result::good((CoreML::Result *)a3))
                          {
                            v20 = v37;
                            std::string::basic_string[abi:ne180100]<0>(v23, "Bottom");
                            CoreML::validatePooling3dPadding(v16, v20, (CoreML::Result *)&__p);
                            *(_QWORD *)a3 = __p;
                            if (*(char *)(a3 + 31) < 0)
                              operator delete(*v6);
                            *(_OWORD *)v6 = v26;
                            *(_QWORD *)(a3 + 24) = v27;
                            HIBYTE(v27) = 0;
                            LOBYTE(v26) = 0;
                            if (v24 < 0)
                              operator delete(v23[0]);
                            if (CoreML::Result::good((CoreML::Result *)a3))
                            {
                              v21 = v38;
                              std::string::basic_string[abi:ne180100]<0>(v23, "Left");
                              CoreML::validatePooling3dPadding(v16, v21, (CoreML::Result *)&__p);
                              *(_QWORD *)a3 = __p;
                              if (*(char *)(a3 + 31) < 0)
                                operator delete(*v6);
                              *(_OWORD *)v6 = v26;
                              *(_QWORD *)(a3 + 24) = v27;
                              HIBYTE(v27) = 0;
                              LOBYTE(v26) = 0;
                              if (v24 < 0)
                                operator delete(v23[0]);
                              if (CoreML::Result::good((CoreML::Result *)a3))
                              {
                                v22 = v39;
                                std::string::basic_string[abi:ne180100]<0>(v23, "Right");
                                CoreML::validatePooling3dPadding(v16, v22, (CoreML::Result *)&__p);
                                *(_QWORD *)a3 = __p;
                                if (*(char *)(a3 + 31) < 0)
                                  operator delete(*v6);
                                *(_OWORD *)v6 = v26;
                                *(_QWORD *)(a3 + 24) = v27;
                                HIBYTE(v27) = 0;
                                LOBYTE(v26) = 0;
                                if (v24 < 0)
                                  operator delete(v23[0]);
                                CoreML::Result::good((CoreML::Result *)a3);
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          CoreML::Specification::Pooling3DLayerParams::~Pooling3DLayerParams((CoreML::Specification::Pooling3DLayerParams *)&v28);
        }
      }
    }
  }
}

void sub_21833D4E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,char a22)
{
  uint64_t v22;

  if (a14 < 0)
    operator delete(__p);
  CoreML::Specification::Pooling3DLayerParams::~Pooling3DLayerParams((CoreML::Specification::Pooling3DLayerParams *)&a22);
  if (*(char *)(v22 + 31) < 0)
    operator delete(*(void **)(v22 + 8));
  _Unwind_Resume(a1);
}

void CoreML::validatePooling3dPadding(int a1@<W0>, int a2@<W1>, CoreML::Result *a3@<X8>)
{
  std::string *v6;
  __int128 v7;
  std::string *v8;
  std::string::size_type v9;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  __int128 v13;
  std::string *v14;
  std::string::size_type v15;
  std::string *v16;
  __int128 v17;
  std::string *v18;
  __int128 v19;
  std::string *v20;
  __int128 v21;
  std::string *v22;
  std::string::size_type size;
  std::string *v24;
  __int128 v25;
  std::string *v26;
  __int128 v27;
  std::string v28;
  std::string v29;
  std::string v30;
  std::string v31;
  std::string v32;
  std::string v33;
  std::string v34;
  __int128 v35;
  std::string::size_type v36;

  if (!a1)
  {
    if (a2 < 0)
    {
      std::operator+<char>();
      v20 = std::string::append(&v32, " must be non-negative, got ");
      v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
      v33.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v21;
      v20->__r_.__value_.__l.__size_ = 0;
      v20->__r_.__value_.__r.__words[2] = 0;
      v20->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v31, a2);
      if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v22 = &v31;
      else
        v22 = (std::string *)v31.__r_.__value_.__r.__words[0];
      if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v31.__r_.__value_.__r.__words[2]);
      else
        size = v31.__r_.__value_.__l.__size_;
      v24 = std::string::append(&v33, (const std::string::value_type *)v22, size);
      v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
      v34.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v25;
      v24->__r_.__value_.__l.__size_ = 0;
      v24->__r_.__value_.__r.__words[2] = 0;
      v24->__r_.__value_.__r.__words[0] = 0;
      v26 = std::string::append(&v34, ".");
      v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
      v36 = v26->__r_.__value_.__r.__words[2];
      v35 = v27;
      v26->__r_.__value_.__l.__size_ = 0;
      v26->__r_.__value_.__r.__words[2] = 0;
      v26->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v34.__r_.__value_.__l.__data_);
      if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v31.__r_.__value_.__l.__data_);
      if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v33.__r_.__value_.__l.__data_);
      if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v32.__r_.__value_.__l.__data_);
      CoreML::Result::Result(a3, 13);
      goto LABEL_47;
    }
LABEL_31:
    CoreML::Result::Result(a3);
    return;
  }
  if (!a2)
    goto LABEL_31;
  std::operator+<char>();
  v6 = std::string::append(&v30, " cannot be non-zero (got ");
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v31.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v29, a2);
  if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v8 = &v29;
  else
    v8 = (std::string *)v29.__r_.__value_.__r.__words[0];
  if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v9 = HIBYTE(v29.__r_.__value_.__r.__words[2]);
  else
    v9 = v29.__r_.__value_.__l.__size_;
  v10 = std::string::append(&v31, (const std::string::value_type *)v8, v9);
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v32.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  v12 = std::string::append(&v32, ") unless padding type is CUSTOM (got ");
  v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v33.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v28, a1);
  if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v14 = &v28;
  else
    v14 = (std::string *)v28.__r_.__value_.__r.__words[0];
  if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v15 = HIBYTE(v28.__r_.__value_.__r.__words[2]);
  else
    v15 = v28.__r_.__value_.__l.__size_;
  v16 = std::string::append(&v33, (const std::string::value_type *)v14, v15);
  v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v34.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  v18 = std::string::append(&v34, ").");
  v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v36 = v18->__r_.__value_.__r.__words[2];
  v35 = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v34.__r_.__value_.__l.__data_);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31.__r_.__value_.__l.__data_);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
  CoreML::Result::Result(a3, 13);
LABEL_47:
  if (SHIBYTE(v36) < 0)
    operator delete((void *)v35);
}

void sub_21833D8D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  uint64_t v47;

  if (*(char *)(v47 - 57) < 0)
    operator delete(*(void **)(v47 - 80));
  _Unwind_Resume(exception_object);
}

BOOL CoreML::NeuralNetworkSpecValidator::validateGlobalPooling3dLayer@<W0>(CoreML::NeuralNetworkSpecValidator *this@<X0>, const CoreML::Specification::NeuralNetworkLayer *a2@<X1>, uint64_t a3@<X8>)
{
  void **v6;
  _BOOL8 result;
  char *v8;
  void *v9[2];
  char v10;
  void *__p[2];
  char v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;

  CoreML::Result::Result((CoreML::Result *)a3);
  CoreML::validateInputCount(a2, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v13);
  *(_QWORD *)a3 = v13;
  v6 = (void **)(a3 + 8);
  if (*(char *)(a3 + 31) < 0)
    operator delete(*v6);
  *(_OWORD *)v6 = v14;
  *(_QWORD *)(a3 + 24) = v15;
  result = CoreML::Result::good((CoreML::Result *)a3);
  if (result)
  {
    CoreML::validateOutputCount(a2, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v13);
    *(_QWORD *)a3 = v13;
    if (*(char *)(a3 + 31) < 0)
      operator delete(*v6);
    *(_OWORD *)v6 = v14;
    *(_QWORD *)(a3 + 24) = v15;
    result = CoreML::Result::good((CoreML::Result *)a3);
    if (result && *(_BYTE *)this)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "Pooling3d");
      v8 = (char *)this + 32;
      CoreML::validateInputOutputRankEquality(a2, (uint64_t)__p, (uint64_t)v8, (CoreML::Result *)&v13);
      *(_QWORD *)a3 = v13;
      if (*(char *)(a3 + 31) < 0)
        operator delete(*v6);
      *(_OWORD *)v6 = v14;
      *(_QWORD *)(a3 + 24) = v15;
      HIBYTE(v15) = 0;
      LOBYTE(v14) = 0;
      if (v12 < 0)
        operator delete(__p[0]);
      result = CoreML::Result::good((CoreML::Result *)a3);
      if (result)
      {
        std::string::basic_string[abi:ne180100]<0>(v9, "Pooling3d");
        CoreML::validateRankCount((uint64_t)a2, (uint64_t)v9, 5, -1, (uint64_t)v8, (uint64_t)&v13);
        *(_QWORD *)a3 = v13;
        if (*(char *)(a3 + 31) < 0)
          operator delete(*v6);
        *(_OWORD *)v6 = v14;
        *(_QWORD *)(a3 + 24) = v15;
        HIBYTE(v15) = 0;
        LOBYTE(v14) = 0;
        if (v10 < 0)
          operator delete(v9[0]);
        return CoreML::Result::good((CoreML::Result *)a3);
      }
    }
  }
  return result;
}

void sub_21833DBB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;

  if (a14 < 0)
    operator delete(__p);
  if (*(char *)(v20 + 31) < 0)
    operator delete(*(void **)(v20 + 8));
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validatePaddingLayer(CoreML::NeuralNetworkSpecValidator *this@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X8>)
{
  void **v6;
  _BOOL8 v7;
  char *v8;
  uint64_t *v9;
  uint64_t *v10;
  std::string *v11;
  __int128 v12;
  std::string *v13;
  __int128 v14;
  uint64_t *v15;
  std::string *v16;
  std::string::size_type size;
  std::string *v18;
  __int128 v19;
  std::string *v20;
  __int128 v21;
  std::string v22;
  std::string v23;
  std::string v24;
  void *v25[2];
  std::string::size_type v26;
  void *__p[2];
  char v28;
  std::string v29;
  uint64_t v30;

  CoreML::Result::Result((CoreML::Result *)a3);
  CoreML::validateInputCount((CoreML *)a2, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v29);
  *(_QWORD *)a3 = v29.__r_.__value_.__r.__words[0];
  v6 = (void **)(a3 + 8);
  if (*(char *)(a3 + 31) < 0)
    operator delete(*v6);
  *(_OWORD *)v6 = *(_OWORD *)&v29.__r_.__value_.__r.__words[1];
  *(_QWORD *)(a3 + 24) = v30;
  if (CoreML::Result::good((CoreML::Result *)a3))
  {
    CoreML::validateOutputCount((CoreML *)a2, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v29);
    *(_QWORD *)a3 = v29.__r_.__value_.__r.__words[0];
    if (*(char *)(a3 + 31) < 0)
      operator delete(*v6);
    *(_OWORD *)v6 = *(_OWORD *)&v29.__r_.__value_.__r.__words[1];
    *(_QWORD *)(a3 + 24) = v30;
  }
  v7 = CoreML::Result::good((CoreML::Result *)a3);
  if (v7)
  {
    if (!*(_BYTE *)this)
      goto LABEL_19;
    std::string::basic_string[abi:ne180100]<0>(__p, "Padding");
    v8 = (char *)this + 32;
    CoreML::validateInputOutputRankEquality(a2, (uint64_t)__p, (uint64_t)v8, (CoreML::Result *)&v29);
    *(_QWORD *)a3 = v29.__r_.__value_.__r.__words[0];
    if (*(char *)(a3 + 31) < 0)
      operator delete(*v6);
    *(_OWORD *)v6 = *(_OWORD *)&v29.__r_.__value_.__r.__words[1];
    *(_QWORD *)(a3 + 24) = v30;
    HIBYTE(v30) = 0;
    v29.__r_.__value_.__s.__data_[8] = 0;
    if (v28 < 0)
      operator delete(__p[0]);
    if (CoreML::Result::good((CoreML::Result *)a3))
    {
      std::string::basic_string[abi:ne180100]<0>(v25, "Padding");
      CoreML::validateRankCount((uint64_t)a2, (uint64_t)v25, 2, -1, (uint64_t)v8, (uint64_t)&v29);
      *(_QWORD *)a3 = v29.__r_.__value_.__r.__words[0];
      if (*(char *)(a3 + 31) < 0)
        operator delete(*v6);
      *(_OWORD *)v6 = *(_OWORD *)&v29.__r_.__value_.__r.__words[1];
      *(_QWORD *)(a3 + 24) = v30;
      HIBYTE(v30) = 0;
      v29.__r_.__value_.__s.__data_[8] = 0;
      if (SHIBYTE(v26) < 0)
        operator delete(v25[0]);
      v7 = CoreML::Result::good((CoreML::Result *)a3);
      if (v7)
      {
LABEL_19:
        if (*((_DWORD *)a2 + 35) == 200)
          v9 = a2[16];
        else
          v9 = CoreML::Specification::PaddingLayerParams::default_instance((CoreML::Specification::PaddingLayerParams *)v7);
        v10 = (uint64_t *)v9[2];
        if (!v10)
          v10 = &CoreML::Specification::_BorderAmounts_default_instance_;
        if ((*((_DWORD *)v10 + 6) | 2) == 2)
        {
          if (*((_DWORD *)v9 + 9))
            return;
          std::operator+<char>();
          v11 = std::string::append(&v29, " padding type is not set.");
          v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
          v26 = v11->__r_.__value_.__r.__words[2];
          *(_OWORD *)v25 = v12;
          v11->__r_.__value_.__l.__size_ = 0;
          v11->__r_.__value_.__r.__words[2] = 0;
          v11->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v29.__r_.__value_.__l.__data_);
          CoreML::Result::Result(&v29, 13);
        }
        else
        {
          std::operator+<char>();
          v13 = std::string::append(&v23, " specifies ");
          v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
          v24.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v14;
          v13->__r_.__value_.__l.__size_ = 0;
          v13->__r_.__value_.__r.__words[2] = 0;
          v13->__r_.__value_.__r.__words[0] = 0;
          v15 = (uint64_t *)v9[2];
          if (!v15)
            v15 = &CoreML::Specification::_BorderAmounts_default_instance_;
          std::to_string(&v22, *((_DWORD *)v15 + 6));
          if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v16 = &v22;
          else
            v16 = (std::string *)v22.__r_.__value_.__r.__words[0];
          if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(v22.__r_.__value_.__r.__words[2]);
          else
            size = v22.__r_.__value_.__l.__size_;
          v18 = std::string::append(&v24, (const std::string::value_type *)v16, size);
          v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
          v29.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v19;
          v18->__r_.__value_.__l.__size_ = 0;
          v18->__r_.__value_.__r.__words[2] = 0;
          v18->__r_.__value_.__r.__words[0] = 0;
          v20 = std::string::append(&v29, " padding amounts but it must either specify 2 (for x and y axes), or 0 for the default values.");
          v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
          v26 = v20->__r_.__value_.__r.__words[2];
          *(_OWORD *)v25 = v21;
          v20->__r_.__value_.__l.__size_ = 0;
          v20->__r_.__value_.__r.__words[2] = 0;
          v20->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v29.__r_.__value_.__l.__data_);
          if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v22.__r_.__value_.__l.__data_);
          if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v24.__r_.__value_.__l.__data_);
          if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v23.__r_.__value_.__l.__data_);
          CoreML::Result::Result(&v29, 13);
        }
        *(_QWORD *)a3 = v29.__r_.__value_.__r.__words[0];
        if (*(char *)(a3 + 31) < 0)
          operator delete(*v6);
        *(_OWORD *)v6 = *(_OWORD *)&v29.__r_.__value_.__r.__words[1];
        *(_QWORD *)(a3 + 24) = v30;
        if (SHIBYTE(v26) < 0)
          operator delete(v25[0]);
      }
    }
  }
}

void sub_21833DFC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  uint64_t v39;

  if (a33 < 0)
    operator delete(__p);
  if (*(char *)(v39 + 31) < 0)
    operator delete(*(void **)(v39 + 8));
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateLRNLayer(CoreML::NeuralNetworkSpecValidator *this@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X8>)
{
  void **v6;
  _BOOL8 v7;
  char *v8;
  uint64_t *v9;
  std::string *v10;
  __int128 v11;
  void *v12[2];
  std::string::size_type v13;
  void *__p[2];
  char v15;
  std::string v16;
  uint64_t v17;

  CoreML::Result::Result((CoreML::Result *)a3);
  CoreML::validateInputCount((CoreML *)a2, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v16);
  *(_QWORD *)a3 = v16.__r_.__value_.__r.__words[0];
  v6 = (void **)(a3 + 8);
  if (*(char *)(a3 + 31) < 0)
    operator delete(*v6);
  *(_OWORD *)v6 = *(_OWORD *)&v16.__r_.__value_.__r.__words[1];
  *(_QWORD *)(a3 + 24) = v17;
  if (CoreML::Result::good((CoreML::Result *)a3))
  {
    CoreML::validateOutputCount((CoreML *)a2, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v16);
    *(_QWORD *)a3 = v16.__r_.__value_.__r.__words[0];
    if (*(char *)(a3 + 31) < 0)
      operator delete(*v6);
    *(_OWORD *)v6 = *(_OWORD *)&v16.__r_.__value_.__r.__words[1];
    *(_QWORD *)(a3 + 24) = v17;
  }
  v7 = CoreML::Result::good((CoreML::Result *)a3);
  if (v7)
  {
    if (!*(_BYTE *)this)
      goto LABEL_19;
    std::string::basic_string[abi:ne180100]<0>(__p, "LRNLayer");
    v8 = (char *)this + 32;
    CoreML::validateInputOutputRankEquality(a2, (uint64_t)__p, (uint64_t)v8, (CoreML::Result *)&v16);
    *(_QWORD *)a3 = v16.__r_.__value_.__r.__words[0];
    if (*(char *)(a3 + 31) < 0)
      operator delete(*v6);
    *(_OWORD *)v6 = *(_OWORD *)&v16.__r_.__value_.__r.__words[1];
    *(_QWORD *)(a3 + 24) = v17;
    HIBYTE(v17) = 0;
    v16.__r_.__value_.__s.__data_[8] = 0;
    if (v15 < 0)
      operator delete(__p[0]);
    if (CoreML::Result::good((CoreML::Result *)a3))
    {
      std::string::basic_string[abi:ne180100]<0>(v12, "LRNLayer");
      CoreML::validateRankCount((uint64_t)a2, (uint64_t)v12, 3, -1, (uint64_t)v8, (uint64_t)&v16);
      *(_QWORD *)a3 = v16.__r_.__value_.__r.__words[0];
      if (*(char *)(a3 + 31) < 0)
        operator delete(*v6);
      *(_OWORD *)v6 = *(_OWORD *)&v16.__r_.__value_.__r.__words[1];
      *(_QWORD *)(a3 + 24) = v17;
      HIBYTE(v17) = 0;
      v16.__r_.__value_.__s.__data_[8] = 0;
      if (SHIBYTE(v13) < 0)
        operator delete(v12[0]);
      v7 = CoreML::Result::good((CoreML::Result *)a3);
      if (v7)
      {
LABEL_19:
        if (*((_DWORD *)a2 + 35) == 180)
          v9 = a2[16];
        else
          v9 = CoreML::Specification::LRNLayerParams::default_instance((CoreML::Specification::LRNLayerParams *)v7);
        if (*((float *)v9 + 8) < 0.0)
        {
          std::operator+<char>();
          v10 = std::string::append(&v16, "' must be positive.");
          v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
          v13 = v10->__r_.__value_.__r.__words[2];
          *(_OWORD *)v12 = v11;
          v10->__r_.__value_.__l.__size_ = 0;
          v10->__r_.__value_.__r.__words[2] = 0;
          v10->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v16.__r_.__value_.__l.__data_);
          CoreML::Result::Result(&v16, 13);
          *(_QWORD *)a3 = v16.__r_.__value_.__r.__words[0];
          if (*(char *)(a3 + 31) < 0)
            operator delete(*v6);
          *(_OWORD *)v6 = *(_OWORD *)&v16.__r_.__value_.__r.__words[1];
          *(_QWORD *)(a3 + 24) = v17;
          if (SHIBYTE(v13) < 0)
            operator delete(v12[0]);
        }
      }
    }
  }
}

void sub_21833E320(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;

  if (a14 < 0)
    operator delete(__p);
  if (*(char *)(v26 + 31) < 0)
    operator delete(*(void **)(v26 + 8));
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateSplitLayer(CoreML::NeuralNetworkSpecValidator *this@<X0>, const CoreML::Specification::NeuralNetworkLayer *a2@<X1>, uint64_t a3@<X8>)
{
  char *v6;
  char *v7;
  int *v8;
  uint64_t v9;
  const void ***v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  const void **v14;
  __int128 *v15;
  __int128 v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  void *v20;
  char v21;
  std::string v22;
  std::string v23;
  void *v24[2];
  char v25;
  void *v26;
  __int128 v27;
  uint64_t v28;
  void *v29;
  __int128 __p;
  uint64_t v31;
  _QWORD v32[5];

  v32[2] = *MEMORY[0x24BDAC8D0];
  CoreML::Result::Result((CoreML::Result *)&v29);
  CoreML::validateInputCount(a2, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v26);
  v29 = v26;
  if (SHIBYTE(v31) < 0)
    operator delete((void *)__p);
  __p = v27;
  v31 = v28;
  if (CoreML::Result::good((CoreML::Result *)&v29))
  {
    CoreML::validateOutputCount(a2, (const CoreML::Specification::NeuralNetworkLayer *)2, -1, (CoreML::Result *)&v26);
    v29 = v26;
    if (SHIBYTE(v31) < 0)
      operator delete((void *)__p);
    __p = v27;
    v31 = v28;
  }
  if (!CoreML::Result::good((CoreML::Result *)&v29) || !*(_BYTE *)this)
    goto LABEL_28;
  std::string::basic_string[abi:ne180100]<0>(v24, "Split");
  v6 = (char *)this + 32;
  CoreML::validateInputOutputRankEquality(a2, (uint64_t)v24, (uint64_t)this + 32, (CoreML::Result *)&v26);
  v29 = v26;
  if (SHIBYTE(v31) < 0)
    operator delete((void *)__p);
  __p = v27;
  v31 = v28;
  HIBYTE(v28) = 0;
  LOBYTE(v27) = 0;
  if (v25 < 0)
    operator delete(v24[0]);
  if (!CoreML::Result::good((CoreML::Result *)&v29))
    goto LABEL_28;
  std::string::basic_string[abi:ne180100]<0>(&v23, "Split");
  CoreML::validateRankCount((uint64_t)a2, (uint64_t)&v23, 3, -1, (uint64_t)this + 32, (uint64_t)&v26);
  v29 = v26;
  if (SHIBYTE(v31) < 0)
    operator delete((void *)__p);
  __p = v27;
  v31 = v28;
  HIBYTE(v28) = 0;
  LOBYTE(v27) = 0;
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  if (CoreML::Result::good((CoreML::Result *)&v29)
    && (v7 = (char *)this + 40,
        (CoreML::NeuralNetworkSpecValidator *)((char *)this + 40) != (CoreML::NeuralNetworkSpecValidator *)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>((uint64_t)this + 32, *(const void ***)(*((_QWORD *)a2 + 7) + 8)))
    && ((v8 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)this + 32, *(const void ***)(*((_QWORD *)a2 + 7) + 8)), (v9 = *((_QWORD *)a2 + 7)) != 0)? (v10 = (const void ***)(v9 + 8)): (v10 = 0), v11 = *((int *)a2 + 12), (_DWORD)v11))
  {
    v12 = *v8;
    v13 = 8 * v11;
    while (1)
    {
      v14 = *v10;
      if (v7 != (char *)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>((uint64_t)v6, *v10)&& v12 != *(_DWORD *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)v6, v14))
      {
        break;
      }
      ++v10;
      v13 -= 8;
      if (!v13)
        goto LABEL_28;
    }
    v15 = (__int128 *)*((_QWORD *)a2 + 14);
    if (*((char *)v15 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v22, *(const std::string::value_type **)v15, *((_QWORD *)v15 + 1));
    }
    else
    {
      v16 = *v15;
      v22.__r_.__value_.__r.__words[2] = *((_QWORD *)v15 + 2);
      *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v16;
    }
    v17 = std::string::insert(&v22, 0, "Layer '");
    v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v23.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    v19 = std::string::append(&v23, "' of type 'Split' must have equal ranks for its outputs, but they are not equal.");
    v20 = (void *)v19->__r_.__value_.__r.__words[0];
    v32[0] = v19->__r_.__value_.__l.__size_;
    *(_QWORD *)((char *)v32 + 7) = *(std::string::size_type *)((char *)&v19->__r_.__value_.__r.__words[1] + 7);
    v21 = HIBYTE(v19->__r_.__value_.__r.__words[2]);
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    *(_QWORD *)((char *)&v27 + 7) = *(_QWORD *)((char *)v32 + 7);
    v26 = v20;
    *(_QWORD *)&v27 = v32[0];
    HIBYTE(v27) = v21;
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v23.__r_.__value_.__l.__data_);
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v22.__r_.__value_.__l.__data_);
    CoreML::Result::Result((_DWORD *)a3, 13);
    if (SHIBYTE(v27) < 0)
      operator delete(v26);
    if (SHIBYTE(v31) < 0)
      operator delete((void *)__p);
  }
  else
  {
LABEL_28:
    *(_QWORD *)a3 = v29;
    *(_OWORD *)(a3 + 8) = __p;
    *(_QWORD *)(a3 + 24) = v31;
  }
}

void sub_21833E730(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (a42 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double CoreML::NeuralNetworkSpecValidator::validateAddLayer@<D0>(const CoreML::Specification::NeuralNetworkLayer *a1@<X1>, uint64_t a2@<X8>)
{
  void **v5;
  double result;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;

  CoreML::Result::Result((CoreML::Result *)a2);
  CoreML::validateInputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, -1, (CoreML::Result *)&v7);
  *(_QWORD *)a2 = v7;
  v5 = (void **)(a2 + 8);
  if (*(char *)(a2 + 31) < 0)
    operator delete(*v5);
  *(_OWORD *)v5 = v8;
  *(_QWORD *)(a2 + 24) = v9;
  if (CoreML::Result::good((CoreML::Result *)a2))
  {
    CoreML::validateOutputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v7);
    *(_QWORD *)a2 = v7;
    if (*(char *)(a2 + 31) < 0)
      operator delete(*v5);
    result = *(double *)&v8;
    *(_OWORD *)v5 = v8;
    *(_QWORD *)(a2 + 24) = v9;
  }
  return result;
}

void sub_21833E8A4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*(void **)(v1 + 8));
  _Unwind_Resume(exception_object);
}

double CoreML::NeuralNetworkSpecValidator::validateMultiplyLayer@<D0>(const CoreML::Specification::NeuralNetworkLayer *a1@<X1>, uint64_t a2@<X8>)
{
  void **v5;
  double result;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;

  CoreML::Result::Result((CoreML::Result *)a2);
  CoreML::validateInputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, -1, (CoreML::Result *)&v7);
  *(_QWORD *)a2 = v7;
  v5 = (void **)(a2 + 8);
  if (*(char *)(a2 + 31) < 0)
    operator delete(*v5);
  *(_OWORD *)v5 = v8;
  *(_QWORD *)(a2 + 24) = v9;
  if (CoreML::Result::good((CoreML::Result *)a2))
  {
    CoreML::validateOutputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v7);
    *(_QWORD *)a2 = v7;
    if (*(char *)(a2 + 31) < 0)
      operator delete(*v5);
    result = *(double *)&v8;
    *(_OWORD *)v5 = v8;
    *(_QWORD *)(a2 + 24) = v9;
  }
  return result;
}

void sub_21833E988(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*(void **)(v1 + 8));
  _Unwind_Resume(exception_object);
}

BOOL CoreML::NeuralNetworkSpecValidator::validateUnaryFunctionLayer@<W0>(CoreML::NeuralNetworkSpecValidator *this@<X0>, const CoreML::Specification::NeuralNetworkLayer *a2@<X1>, uint64_t a3@<X8>)
{
  void **v6;
  _BOOL8 result;
  void *__p[2];
  char v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;

  CoreML::Result::Result((CoreML::Result *)a3);
  CoreML::validateInputCount(a2, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v10);
  *(_QWORD *)a3 = v10;
  v6 = (void **)(a3 + 8);
  if (*(char *)(a3 + 31) < 0)
    operator delete(*v6);
  *(_OWORD *)v6 = v11;
  *(_QWORD *)(a3 + 24) = v12;
  if (CoreML::Result::good((CoreML::Result *)a3))
  {
    CoreML::validateOutputCount(a2, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v10);
    *(_QWORD *)a3 = v10;
    if (*(char *)(a3 + 31) < 0)
      operator delete(*v6);
    *(_OWORD *)v6 = v11;
    *(_QWORD *)(a3 + 24) = v12;
  }
  result = CoreML::Result::good((CoreML::Result *)a3);
  if (result && *(_BYTE *)this)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "Unary");
    CoreML::validateInputOutputRankEquality(a2, (uint64_t)__p, (uint64_t)this + 32, (CoreML::Result *)&v10);
    *(_QWORD *)a3 = v10;
    if (*(char *)(a3 + 31) < 0)
      operator delete(*v6);
    *(_OWORD *)v6 = v11;
    *(_QWORD *)(a3 + 24) = v12;
    HIBYTE(v12) = 0;
    LOBYTE(v11) = 0;
    if (v9 < 0)
      operator delete(__p[0]);
    return CoreML::Result::good((CoreML::Result *)a3);
  }
  return result;
}

void sub_21833EAF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v15 + 31) < 0)
    operator delete(*(void **)(v15 + 8));
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateUpsampleLayer(CoreML::NeuralNetworkSpecValidator *this@<X0>, int **a2@<X1>, uint64_t a3@<X8>)
{
  void **v6;
  _BOOL8 v7;
  char *v8;
  int *v9;
  int v10;
  int v11;
  std::string *v12;
  __int128 v13;
  std::string *v14;
  __int128 v15;
  std::string *v16;
  __int128 v17;
  std::string *v18;
  std::string::size_type size;
  std::string *v20;
  __int128 v21;
  std::string *v22;
  __int128 v23;
  std::string *v24;
  std::string::size_type v25;
  std::string *v26;
  __int128 v27;
  std::string v28;
  std::string v29;
  std::string v30;
  std::string v31;
  std::string v32;
  __int128 v33;
  std::string::size_type v34;
  void *v35[2];
  char v36;
  std::string v37;
  uint64_t v38;

  CoreML::Result::Result((CoreML::Result *)a3);
  CoreML::validateInputCount((CoreML *)a2, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v37);
  *(_QWORD *)a3 = v37.__r_.__value_.__r.__words[0];
  v6 = (void **)(a3 + 8);
  if (*(char *)(a3 + 31) < 0)
    operator delete(*v6);
  *(_OWORD *)v6 = *(_OWORD *)&v37.__r_.__value_.__r.__words[1];
  *(_QWORD *)(a3 + 24) = v38;
  if (CoreML::Result::good((CoreML::Result *)a3))
  {
    CoreML::validateOutputCount((CoreML *)a2, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v37);
    *(_QWORD *)a3 = v37.__r_.__value_.__r.__words[0];
    if (*(char *)(a3 + 31) < 0)
      operator delete(*v6);
    *(_OWORD *)v6 = *(_OWORD *)&v37.__r_.__value_.__r.__words[1];
    *(_QWORD *)(a3 + 24) = v38;
  }
  v7 = CoreML::Result::good((CoreML::Result *)a3);
  if (v7)
  {
    if (!*(_BYTE *)this)
      goto LABEL_19;
    std::string::basic_string[abi:ne180100]<0>(v35, "Upsample");
    v8 = (char *)this + 32;
    CoreML::validateInputOutputRankEquality(a2, (uint64_t)v35, (uint64_t)v8, (CoreML::Result *)&v37);
    *(_QWORD *)a3 = v37.__r_.__value_.__r.__words[0];
    if (*(char *)(a3 + 31) < 0)
      operator delete(*v6);
    *(_OWORD *)v6 = *(_OWORD *)&v37.__r_.__value_.__r.__words[1];
    *(_QWORD *)(a3 + 24) = v38;
    HIBYTE(v38) = 0;
    v37.__r_.__value_.__s.__data_[8] = 0;
    if (v36 < 0)
      operator delete(v35[0]);
    if (CoreML::Result::good((CoreML::Result *)a3))
    {
      std::string::basic_string[abi:ne180100]<0>(&v33, "Upsample");
      CoreML::validateRankCount((uint64_t)a2, (uint64_t)&v33, 3, -1, (uint64_t)v8, (uint64_t)&v37);
      *(_QWORD *)a3 = v37.__r_.__value_.__r.__words[0];
      if (*(char *)(a3 + 31) < 0)
        operator delete(*v6);
      *(_OWORD *)v6 = *(_OWORD *)&v37.__r_.__value_.__r.__words[1];
      *(_QWORD *)(a3 + 24) = v38;
      HIBYTE(v38) = 0;
      v37.__r_.__value_.__s.__data_[8] = 0;
      if (SHIBYTE(v34) < 0)
        operator delete((void *)v33);
      v7 = CoreML::Result::good((CoreML::Result *)a3);
      if (v7)
      {
LABEL_19:
        if (*((_DWORD *)a2 + 35) == 210)
          v9 = a2[16];
        else
          v9 = (int *)CoreML::Specification::UpsampleLayerParams::default_instance((CoreML::Specification::UpsampleLayerParams *)v7);
        v10 = v9[4];
        v11 = v9[10];
        if (v10)
        {
          if (v10 != 2 || v11)
          {
LABEL_38:
            std::operator+<char>();
            v16 = std::string::append(&v30, "'. Only one of scalingFactor and fractionalScalingFactor can be set, and if set, must be of size 2. Found scalingFactor of size ");
            v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
            v31.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v17;
            v16->__r_.__value_.__l.__size_ = 0;
            v16->__r_.__value_.__r.__words[2] = 0;
            v16->__r_.__value_.__r.__words[0] = 0;
            std::to_string(&v29, v9[4]);
            if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v18 = &v29;
            else
              v18 = (std::string *)v29.__r_.__value_.__r.__words[0];
            if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              size = HIBYTE(v29.__r_.__value_.__r.__words[2]);
            else
              size = v29.__r_.__value_.__l.__size_;
            v20 = std::string::append(&v31, (const std::string::value_type *)v18, size);
            v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
            v32.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v21;
            v20->__r_.__value_.__l.__size_ = 0;
            v20->__r_.__value_.__r.__words[2] = 0;
            v20->__r_.__value_.__r.__words[0] = 0;
            v22 = std::string::append(&v32, " and fractionalScalingFactor of size ");
            v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
            v37.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v23;
            v22->__r_.__value_.__l.__size_ = 0;
            v22->__r_.__value_.__r.__words[2] = 0;
            v22->__r_.__value_.__r.__words[0] = 0;
            std::to_string(&v28, v9[10]);
            if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v24 = &v28;
            else
              v24 = (std::string *)v28.__r_.__value_.__r.__words[0];
            if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v25 = HIBYTE(v28.__r_.__value_.__r.__words[2]);
            else
              v25 = v28.__r_.__value_.__l.__size_;
            v26 = std::string::append(&v37, (const std::string::value_type *)v24, v25);
            v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
            v34 = v26->__r_.__value_.__r.__words[2];
            v33 = v27;
            v26->__r_.__value_.__l.__size_ = 0;
            v26->__r_.__value_.__r.__words[2] = 0;
            v26->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v28.__r_.__value_.__l.__data_);
            if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v37.__r_.__value_.__l.__data_);
            if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v32.__r_.__value_.__l.__data_);
            if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v29.__r_.__value_.__l.__data_);
            if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v31.__r_.__value_.__l.__data_);
            if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v30.__r_.__value_.__l.__data_);
            CoreML::Result::Result(&v37, 13);
            goto LABEL_63;
          }
        }
        else if (v11)
        {
          if (v11 != 2)
            goto LABEL_38;
          if (!v9[15] || !v9[16])
          {
            std::operator+<char>();
            v12 = std::string::append(&v37, "'. Fractional upsample only compatible with align_corners=true or align_corners=false");
            v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
            v34 = v12->__r_.__value_.__r.__words[2];
            v33 = v13;
            v12->__r_.__value_.__l.__size_ = 0;
            v12->__r_.__value_.__r.__words[2] = 0;
            v12->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v37.__r_.__value_.__l.__data_);
LABEL_32:
            CoreML::Result::Result(&v37, 13);
LABEL_63:
            *(_QWORD *)a3 = v37.__r_.__value_.__r.__words[0];
            if (*(char *)(a3 + 31) < 0)
              operator delete(*v6);
            *(_OWORD *)v6 = *(_OWORD *)&v37.__r_.__value_.__r.__words[1];
            *(_QWORD *)(a3 + 24) = v38;
            if (SHIBYTE(v34) < 0)
              operator delete((void *)v33);
            return;
          }
LABEL_34:
          if (v9[15])
            return;
          std::operator+<char>();
          v14 = std::string::append(&v37, "' of type Upsample uses Nearest Neighbors but uses linear upsampling mode other than DEFAULT.");
          v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
          v34 = v14->__r_.__value_.__r.__words[2];
          v33 = v15;
          v14->__r_.__value_.__l.__size_ = 0;
          v14->__r_.__value_.__r.__words[2] = 0;
          v14->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v37.__r_.__value_.__l.__data_);
          goto LABEL_32;
        }
        if (!v9[16])
          return;
        goto LABEL_34;
      }
    }
  }
}

void sub_21833EFC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  uint64_t v40;
  uint64_t v41;

  if (*(char *)(v41 - 105) < 0)
    operator delete(*(void **)(v41 - 128));
  if (*(char *)(v40 + 31) < 0)
    operator delete(*(void **)(v40 + 8));
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateBiasLayer(CoreML::NeuralNetworkSpecValidator *this@<X0>, const CoreML::Specification::NeuralNetworkLayer *a2@<X1>, uint64_t a3@<X8>)
{
  _BOOL8 v6;
  char *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  _BOOL4 v18;
  int v19;
  unsigned int v20;
  std::string *v21;
  __int128 v22;
  std::string::size_type v23;
  uint64_t v24;
  void *v25;
  int v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const CoreML::Specification::WeightParams *v31;
  uint64_t v32;
  uint64_t v33;
  std::string *v34;
  __int128 v35;
  std::string *v36;
  std::string::size_type size;
  std::string *v38;
  __int128 v39;
  std::string *v40;
  __int128 v41;
  std::string v42;
  std::string v43;
  std::string v44;
  std::string v45;
  void *__p[2];
  char v47;
  std::string v48;
  uint64_t v49;
  std::string::size_type v50;
  __int128 v51;
  uint64_t v52;

  CoreML::Result::Result((CoreML::Result *)&v50);
  CoreML::validateInputCount(a2, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v48);
  v50 = v48.__r_.__value_.__r.__words[0];
  if (SHIBYTE(v52) < 0)
    operator delete((void *)v51);
  v51 = *(_OWORD *)&v48.__r_.__value_.__r.__words[1];
  v52 = v49;
  if (CoreML::Result::good((CoreML::Result *)&v50))
  {
    CoreML::validateOutputCount(a2, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v48);
    v50 = v48.__r_.__value_.__r.__words[0];
    if (SHIBYTE(v52) < 0)
      operator delete((void *)v51);
    v51 = *(_OWORD *)&v48.__r_.__value_.__r.__words[1];
    v52 = v49;
  }
  v6 = CoreML::Result::good((CoreML::Result *)&v50);
  if (!v6)
    goto LABEL_64;
  if (*(_BYTE *)this)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "Bias");
    v7 = (char *)this + 32;
    CoreML::validateInputOutputRankEquality(a2, (uint64_t)__p, (uint64_t)v7, (CoreML::Result *)&v48);
    v50 = v48.__r_.__value_.__r.__words[0];
    if (SHIBYTE(v52) < 0)
      operator delete((void *)v51);
    v51 = *(_OWORD *)&v48.__r_.__value_.__r.__words[1];
    v52 = v49;
    HIBYTE(v49) = 0;
    v48.__r_.__value_.__s.__data_[8] = 0;
    if (v47 < 0)
      operator delete(__p[0]);
    if (!CoreML::Result::good((CoreML::Result *)&v50))
      goto LABEL_64;
    std::string::basic_string[abi:ne180100]<0>(&v45, "Bias");
    CoreML::validateRankCount((uint64_t)a2, (uint64_t)&v45, 3, -1, (uint64_t)v7, (uint64_t)&v48);
    v50 = v48.__r_.__value_.__r.__words[0];
    if (SHIBYTE(v52) < 0)
      operator delete((void *)v51);
    v51 = *(_OWORD *)&v48.__r_.__value_.__r.__words[1];
    v52 = v49;
    HIBYTE(v49) = 0;
    v48.__r_.__value_.__s.__data_[8] = 0;
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v45.__r_.__value_.__l.__data_);
    v6 = CoreML::Result::good((CoreML::Result *)&v50);
    if (!v6)
      goto LABEL_64;
  }
  if (*((_DWORD *)a2 + 35) == 250)
    v8 = (uint64_t *)*((_QWORD *)a2 + 16);
  else
    v8 = CoreML::Specification::BiasLayerParams::default_instance((CoreML::Specification::BiasLayerParams *)v6);
  if (v8[5])
    v9 = (uint64_t *)v8[5];
  else
    v9 = &CoreML::Specification::_WeightParams_default_instance_;
  v10 = v9[5];
  if (*(char *)(v10 + 23) < 0)
    v11 = *(_QWORD *)(v10 + 8);
  else
    v11 = *(unsigned __int8 *)(v10 + 23);
  v12 = v9[6];
  if (*(char *)(v12 + 23) < 0)
    v13 = *(_QWORD *)(v12 + 8);
  else
    v13 = *(unsigned __int8 *)(v12 + 23);
  v14 = *((_DWORD *)v9 + 4);
  v15 = v9[7];
  if (*(char *)(v15 + 23) < 0)
    v16 = *(_QWORD *)(v15 + 8);
  else
    v16 = *(unsigned __int8 *)(v15 + 23);
  v17 = v14 <= 0;
  v18 = v14 > 0;
  if (v17)
    v19 = 1;
  else
    v19 = 2;
  if (v11)
    v20 = v19;
  else
    v20 = v18;
  if (v13)
    ++v20;
  if (v16)
    ++v20;
  if (v20 > 1)
  {
    std::operator+<char>();
    v21 = std::string::append(&v48, "' has both full precision and half precision weights and/or bias fields populated");
    v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    v45.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v48.__r_.__value_.__l.__data_);
    CoreML::Result::Result(&v48, 13);
    v23 = v48.__r_.__value_.__r.__words[0];
    v50 = v48.__r_.__value_.__r.__words[0];
    if (SHIBYTE(v52) < 0)
    {
      operator delete((void *)v51);
      v23 = v50;
    }
    v51 = *(_OWORD *)&v48.__r_.__value_.__r.__words[1];
    v24 = v49;
    *(_QWORD *)a3 = v23;
    *(_OWORD *)(a3 + 8) = v51;
    *(_QWORD *)(a3 + 24) = v24;
    v51 = 0uLL;
    v52 = 0;
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    {
      v25 = (void *)v45.__r_.__value_.__r.__words[0];
LABEL_84:
      operator delete(v25);
      goto LABEL_65;
    }
    goto LABEL_65;
  }
  v26 = *((_DWORD *)v8 + 4);
  if ((v26 | 2) == 3)
  {
    v27 = (uint64_t *)(v8[3] + 8);
    v28 = 1;
    v29 = *((unsigned int *)v8 + 4);
    do
    {
      v30 = *v27++;
      v28 *= v30;
      --v29;
    }
    while (v29);
    if (v26 == 3 && (v31 = *(const CoreML::Specification::WeightParams **)(v8[3] + 8), (unint64_t)v31 >= 2))
    {
      std::string::basic_string[abi:ne180100]<0>(&v45, "Bias");
      v32 = *((_QWORD *)a2 + 14);
      std::string::basic_string[abi:ne180100]<0>(&v44, "bias");
      CoreML::validateGeneralWeightParams((uint64_t)v9, (const CoreML::Specification::WeightParams *)v28, v31, (const void **)&v45.__r_.__value_.__l.__data_, v32, (uint64_t)&v44, (uint64_t)&v48);
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&v45, "Bias");
      v33 = *((_QWORD *)a2 + 14);
      std::string::basic_string[abi:ne180100]<0>(&v44, "bias");
      CoreML::validateGeneralWeightParams((uint64_t)v9, (const CoreML::Specification::WeightParams *)v28, (const CoreML::Specification::WeightParams *)1, (const void **)&v45.__r_.__value_.__l.__data_, v33, (uint64_t)&v44, (uint64_t)&v48);
    }
    v50 = v48.__r_.__value_.__r.__words[0];
    if (SHIBYTE(v52) < 0)
      operator delete((void *)v51);
    v51 = *(_OWORD *)&v48.__r_.__value_.__r.__words[1];
    v52 = v49;
    HIBYTE(v49) = 0;
    v48.__r_.__value_.__s.__data_[8] = 0;
    if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v44.__r_.__value_.__l.__data_);
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v45.__r_.__value_.__l.__data_);
LABEL_64:
    *(_QWORD *)a3 = v50;
    *(_OWORD *)(a3 + 8) = v51;
    *(_QWORD *)(a3 + 24) = v52;
    v51 = 0uLL;
    v52 = 0;
    goto LABEL_65;
  }
  std::operator+<char>();
  v34 = std::string::append(&v43, "' cannot be ");
  v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
  v44.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v35;
  v34->__r_.__value_.__l.__size_ = 0;
  v34->__r_.__value_.__r.__words[2] = 0;
  v34->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v42, *((_DWORD *)v8 + 4));
  if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v36 = &v42;
  else
    v36 = (std::string *)v42.__r_.__value_.__r.__words[0];
  if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v42.__r_.__value_.__r.__words[2]);
  else
    size = v42.__r_.__value_.__l.__size_;
  v38 = std::string::append(&v44, (const std::string::value_type *)v36, size);
  v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
  v45.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v39;
  v38->__r_.__value_.__l.__size_ = 0;
  v38->__r_.__value_.__r.__words[2] = 0;
  v38->__r_.__value_.__r.__words[0] = 0;
  v40 = std::string::append(&v45, " dimensional. Must be 1D or 3D.");
  v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
  v48.__r_.__value_.__r.__words[2] = v40->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v41;
  v40->__r_.__value_.__l.__size_ = 0;
  v40->__r_.__value_.__r.__words[2] = 0;
  v40->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v42.__r_.__value_.__l.__data_);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v44.__r_.__value_.__l.__data_);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v43.__r_.__value_.__l.__data_);
  CoreML::Result::Result((_DWORD *)a3, 13);
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
  {
    v25 = (void *)v48.__r_.__value_.__r.__words[0];
    goto LABEL_84;
  }
LABEL_65:
  if (SHIBYTE(v52) < 0)
    operator delete((void *)v51);
}

void sub_21833F678(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  uint64_t v45;

  if (a26 < 0)
    operator delete(__p);
  if (a33 < 0)
    operator delete(a28);
  if (*(char *)(v45 - 65) < 0)
    operator delete(*(void **)(v45 - 88));
  _Unwind_Resume(exception_object);
}

BOOL CoreML::NeuralNetworkSpecValidator::validateL2NormLayer@<W0>(CoreML::NeuralNetworkSpecValidator *this@<X0>, const CoreML::Specification::NeuralNetworkLayer *a2@<X1>, uint64_t a3@<X8>)
{
  void **v6;
  _BOOL8 result;
  char *v8;
  void *v9[2];
  char v10;
  void *__p[2];
  char v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;

  CoreML::Result::Result((CoreML::Result *)a3);
  CoreML::validateInputCount(a2, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v13);
  *(_QWORD *)a3 = v13;
  v6 = (void **)(a3 + 8);
  if (*(char *)(a3 + 31) < 0)
    operator delete(*v6);
  *(_OWORD *)v6 = v14;
  *(_QWORD *)(a3 + 24) = v15;
  if (CoreML::Result::good((CoreML::Result *)a3))
  {
    CoreML::validateOutputCount(a2, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v13);
    *(_QWORD *)a3 = v13;
    if (*(char *)(a3 + 31) < 0)
      operator delete(*v6);
    *(_OWORD *)v6 = v14;
    *(_QWORD *)(a3 + 24) = v15;
  }
  result = CoreML::Result::good((CoreML::Result *)a3);
  if (result && *(_BYTE *)this)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "L2Normalize");
    v8 = (char *)this + 32;
    CoreML::validateInputOutputRankEquality(a2, (uint64_t)__p, (uint64_t)v8, (CoreML::Result *)&v13);
    *(_QWORD *)a3 = v13;
    if (*(char *)(a3 + 31) < 0)
      operator delete(*v6);
    *(_OWORD *)v6 = v14;
    *(_QWORD *)(a3 + 24) = v15;
    HIBYTE(v15) = 0;
    LOBYTE(v14) = 0;
    if (v12 < 0)
      operator delete(__p[0]);
    result = CoreML::Result::good((CoreML::Result *)a3);
    if (result)
    {
      std::string::basic_string[abi:ne180100]<0>(v9, "L2Normalize");
      CoreML::validateRankCount((uint64_t)a2, (uint64_t)v9, 3, -1, (uint64_t)v8, (uint64_t)&v13);
      *(_QWORD *)a3 = v13;
      if (*(char *)(a3 + 31) < 0)
        operator delete(*v6);
      *(_OWORD *)v6 = v14;
      *(_QWORD *)(a3 + 24) = v15;
      HIBYTE(v15) = 0;
      LOBYTE(v14) = 0;
      if (v10 < 0)
        operator delete(v9[0]);
      return CoreML::Result::good((CoreML::Result *)a3);
    }
  }
  return result;
}

void sub_21833F940(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;

  if (a14 < 0)
    operator delete(__p);
  if (*(char *)(v20 + 31) < 0)
    operator delete(*(void **)(v20 + 8));
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateReshapeLayer(CoreML::NeuralNetworkSpecValidator *this@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X8>)
{
  void **v6;
  _BOOL8 v7;
  char *v8;
  uint64_t *v9;
  std::string *v10;
  __int128 v11;
  void *v12[2];
  std::string::size_type v13;
  void *__p[2];
  char v15;
  std::string v16;
  uint64_t v17;

  CoreML::Result::Result((CoreML::Result *)a3);
  CoreML::validateInputCount((CoreML *)a2, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v16);
  *(_QWORD *)a3 = v16.__r_.__value_.__r.__words[0];
  v6 = (void **)(a3 + 8);
  if (*(char *)(a3 + 31) < 0)
    operator delete(*v6);
  *(_OWORD *)v6 = *(_OWORD *)&v16.__r_.__value_.__r.__words[1];
  *(_QWORD *)(a3 + 24) = v17;
  if (CoreML::Result::good((CoreML::Result *)a3))
  {
    CoreML::validateOutputCount((CoreML *)a2, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v16);
    *(_QWORD *)a3 = v16.__r_.__value_.__r.__words[0];
    if (*(char *)(a3 + 31) < 0)
      operator delete(*v6);
    *(_OWORD *)v6 = *(_OWORD *)&v16.__r_.__value_.__r.__words[1];
    *(_QWORD *)(a3 + 24) = v17;
  }
  v7 = CoreML::Result::good((CoreML::Result *)a3);
  if (v7)
  {
    if (!*(_BYTE *)this)
      goto LABEL_19;
    std::string::basic_string[abi:ne180100]<0>(__p, "Reshape");
    v8 = (char *)this + 32;
    CoreML::validateInputOutputRankEquality(a2, (uint64_t)__p, (uint64_t)v8, (CoreML::Result *)&v16);
    *(_QWORD *)a3 = v16.__r_.__value_.__r.__words[0];
    if (*(char *)(a3 + 31) < 0)
      operator delete(*v6);
    *(_OWORD *)v6 = *(_OWORD *)&v16.__r_.__value_.__r.__words[1];
    *(_QWORD *)(a3 + 24) = v17;
    HIBYTE(v17) = 0;
    v16.__r_.__value_.__s.__data_[8] = 0;
    if (v15 < 0)
      operator delete(__p[0]);
    if (CoreML::Result::good((CoreML::Result *)a3))
    {
      std::string::basic_string[abi:ne180100]<0>(v12, "Reshape");
      CoreML::validateRankCount((uint64_t)a2, (uint64_t)v12, 5, 5, (uint64_t)v8, (uint64_t)&v16);
      *(_QWORD *)a3 = v16.__r_.__value_.__r.__words[0];
      if (*(char *)(a3 + 31) < 0)
        operator delete(*v6);
      *(_OWORD *)v6 = *(_OWORD *)&v16.__r_.__value_.__r.__words[1];
      *(_QWORD *)(a3 + 24) = v17;
      HIBYTE(v17) = 0;
      v16.__r_.__value_.__s.__data_[8] = 0;
      if (SHIBYTE(v13) < 0)
        operator delete(v12[0]);
      v7 = CoreML::Result::good((CoreML::Result *)a3);
      if (v7)
      {
LABEL_19:
        if (*((_DWORD *)a2 + 35) == 300)
          v9 = a2[16];
        else
          v9 = CoreML::Specification::ReshapeLayerParams::default_instance((CoreML::Specification::ReshapeLayerParams *)v7);
        if ((*((_DWORD *)v9 + 4) - 3) >= 2)
        {
          std::operator+<char>();
          v10 = std::string::append(&v16, "' target shape must be 3D or 4D.");
          v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
          v13 = v10->__r_.__value_.__r.__words[2];
          *(_OWORD *)v12 = v11;
          v10->__r_.__value_.__l.__size_ = 0;
          v10->__r_.__value_.__r.__words[2] = 0;
          v10->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v16.__r_.__value_.__l.__data_);
          CoreML::Result::Result(&v16, 13);
          *(_QWORD *)a3 = v16.__r_.__value_.__r.__words[0];
          if (*(char *)(a3 + 31) < 0)
            operator delete(*v6);
          *(_OWORD *)v6 = *(_OWORD *)&v16.__r_.__value_.__r.__words[1];
          *(_QWORD *)(a3 + 24) = v17;
          if (SHIBYTE(v13) < 0)
            operator delete(v12[0]);
        }
      }
    }
  }
}

void sub_21833FC18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;

  if (a14 < 0)
    operator delete(__p);
  if (*(char *)(v26 + 31) < 0)
    operator delete(*(void **)(v26 + 8));
  _Unwind_Resume(exception_object);
}

BOOL CoreML::NeuralNetworkSpecValidator::validateFlattenLayer@<W0>(CoreML::NeuralNetworkSpecValidator *this@<X0>, const CoreML::Specification::NeuralNetworkLayer *a2@<X1>, uint64_t a3@<X8>)
{
  void **v6;
  _BOOL8 result;
  char *v8;
  void *v9[2];
  char v10;
  void *__p[2];
  char v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;

  CoreML::Result::Result((CoreML::Result *)a3);
  CoreML::validateInputCount(a2, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v13);
  *(_QWORD *)a3 = v13;
  v6 = (void **)(a3 + 8);
  if (*(char *)(a3 + 31) < 0)
    operator delete(*v6);
  *(_OWORD *)v6 = v14;
  *(_QWORD *)(a3 + 24) = v15;
  if (CoreML::Result::good((CoreML::Result *)a3))
  {
    CoreML::validateOutputCount(a2, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v13);
    *(_QWORD *)a3 = v13;
    if (*(char *)(a3 + 31) < 0)
      operator delete(*v6);
    *(_OWORD *)v6 = v14;
    *(_QWORD *)(a3 + 24) = v15;
  }
  result = CoreML::Result::good((CoreML::Result *)a3);
  if (result && *(_BYTE *)this)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "Flatten");
    v8 = (char *)this + 32;
    CoreML::validateInputOutputRankEquality(a2, (uint64_t)__p, (uint64_t)v8, (CoreML::Result *)&v13);
    *(_QWORD *)a3 = v13;
    if (*(char *)(a3 + 31) < 0)
      operator delete(*v6);
    *(_OWORD *)v6 = v14;
    *(_QWORD *)(a3 + 24) = v15;
    HIBYTE(v15) = 0;
    LOBYTE(v14) = 0;
    if (v12 < 0)
      operator delete(__p[0]);
    result = CoreML::Result::good((CoreML::Result *)a3);
    if (result)
    {
      std::string::basic_string[abi:ne180100]<0>(v9, "Flatten");
      CoreML::validateRankCount((uint64_t)a2, (uint64_t)v9, 3, -1, (uint64_t)v8, (uint64_t)&v13);
      *(_QWORD *)a3 = v13;
      if (*(char *)(a3 + 31) < 0)
        operator delete(*v6);
      *(_OWORD *)v6 = v14;
      *(_QWORD *)(a3 + 24) = v15;
      HIBYTE(v15) = 0;
      LOBYTE(v14) = 0;
      if (v10 < 0)
        operator delete(v9[0]);
      return CoreML::Result::good((CoreML::Result *)a3);
    }
  }
  return result;
}

void sub_21833FE50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;

  if (a14 < 0)
    operator delete(__p);
  if (*(char *)(v20 + 31) < 0)
    operator delete(*(void **)(v20 + 8));
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validatePermuteLayer(CoreML::NeuralNetworkSpecValidator *this@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X8>)
{
  void **v6;
  _BOOL8 v7;
  char *v8;
  uint64_t *v9;
  std::string *v10;
  __int128 v11;
  void *v12[2];
  std::string::size_type v13;
  void *__p[2];
  char v15;
  std::string v16;
  uint64_t v17;

  CoreML::Result::Result((CoreML::Result *)a3);
  CoreML::validateInputCount((CoreML *)a2, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v16);
  *(_QWORD *)a3 = v16.__r_.__value_.__r.__words[0];
  v6 = (void **)(a3 + 8);
  if (*(char *)(a3 + 31) < 0)
    operator delete(*v6);
  *(_OWORD *)v6 = *(_OWORD *)&v16.__r_.__value_.__r.__words[1];
  *(_QWORD *)(a3 + 24) = v17;
  if (CoreML::Result::good((CoreML::Result *)a3))
  {
    CoreML::validateOutputCount((CoreML *)a2, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v16);
    *(_QWORD *)a3 = v16.__r_.__value_.__r.__words[0];
    if (*(char *)(a3 + 31) < 0)
      operator delete(*v6);
    *(_OWORD *)v6 = *(_OWORD *)&v16.__r_.__value_.__r.__words[1];
    *(_QWORD *)(a3 + 24) = v17;
  }
  v7 = CoreML::Result::good((CoreML::Result *)a3);
  if (v7)
  {
    if (!*(_BYTE *)this)
      goto LABEL_19;
    std::string::basic_string[abi:ne180100]<0>(__p, "Permute");
    v8 = (char *)this + 32;
    CoreML::validateInputOutputRankEquality(a2, (uint64_t)__p, (uint64_t)v8, (CoreML::Result *)&v16);
    *(_QWORD *)a3 = v16.__r_.__value_.__r.__words[0];
    if (*(char *)(a3 + 31) < 0)
      operator delete(*v6);
    *(_OWORD *)v6 = *(_OWORD *)&v16.__r_.__value_.__r.__words[1];
    *(_QWORD *)(a3 + 24) = v17;
    HIBYTE(v17) = 0;
    v16.__r_.__value_.__s.__data_[8] = 0;
    if (v15 < 0)
      operator delete(__p[0]);
    if (CoreML::Result::good((CoreML::Result *)a3))
    {
      std::string::basic_string[abi:ne180100]<0>(v12, "Permute");
      CoreML::validateRankCount((uint64_t)a2, (uint64_t)v12, 5, 5, (uint64_t)v8, (uint64_t)&v16);
      *(_QWORD *)a3 = v16.__r_.__value_.__r.__words[0];
      if (*(char *)(a3 + 31) < 0)
        operator delete(*v6);
      *(_OWORD *)v6 = *(_OWORD *)&v16.__r_.__value_.__r.__words[1];
      *(_QWORD *)(a3 + 24) = v17;
      HIBYTE(v17) = 0;
      v16.__r_.__value_.__s.__data_[8] = 0;
      if (SHIBYTE(v13) < 0)
        operator delete(v12[0]);
      v7 = CoreML::Result::good((CoreML::Result *)a3);
      if (v7)
      {
LABEL_19:
        if (*((_DWORD *)a2 + 35) == 310)
          v9 = a2[16];
        else
          v9 = CoreML::Specification::PermuteLayerParams::default_instance((CoreML::Specification::PermuteLayerParams *)v7);
        if (*((_DWORD *)v9 + 4) != 4)
        {
          std::operator+<char>();
          v10 = std::string::append(&v16, "' must have 4D axis parameters.");
          v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
          v13 = v10->__r_.__value_.__r.__words[2];
          *(_OWORD *)v12 = v11;
          v10->__r_.__value_.__l.__size_ = 0;
          v10->__r_.__value_.__r.__words[2] = 0;
          v10->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v16.__r_.__value_.__l.__data_);
          CoreML::Result::Result(&v16, 13);
          *(_QWORD *)a3 = v16.__r_.__value_.__r.__words[0];
          if (*(char *)(a3 + 31) < 0)
            operator delete(*v6);
          *(_OWORD *)v6 = *(_OWORD *)&v16.__r_.__value_.__r.__words[1];
          *(_QWORD *)(a3 + 24) = v17;
          if (SHIBYTE(v13) < 0)
            operator delete(v12[0]);
        }
      }
    }
  }
}

void sub_218340124(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;

  if (a14 < 0)
    operator delete(__p);
  if (*(char *)(v26 + 31) < 0)
    operator delete(*(void **)(v26 + 8));
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateReduceLayer(CoreML::NeuralNetworkSpecValidator *this@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X8>)
{
  _BOOL8 v6;
  int v7;
  uint64_t *v8;
  int v9;
  uint64_t *v10;
  __int128 v11;
  uint64_t *v12;
  __int128 v13;
  std::string *v14;
  __int128 v15;
  std::string *v16;
  std::string *v17;
  __int128 v18;
  void *v19;
  char v20;
  std::string v21;
  std::string v22;
  void *__p[2];
  char v24;
  void *v25;
  __int128 v26;
  uint64_t v27;
  void *v28;
  __int128 v29;
  uint64_t v30;
  _QWORD v31[3];

  v31[2] = *MEMORY[0x24BDAC8D0];
  CoreML::Result::Result((CoreML::Result *)&v28);
  CoreML::validateInputCount((CoreML *)a2, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v25);
  v28 = v25;
  if (SHIBYTE(v30) < 0)
    operator delete((void *)v29);
  v29 = v26;
  v30 = v27;
  if (CoreML::Result::good((CoreML::Result *)&v28))
  {
    CoreML::validateOutputCount((CoreML *)a2, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v25);
    v28 = v25;
    if (SHIBYTE(v30) < 0)
      operator delete((void *)v29);
    v29 = v26;
    v30 = v27;
  }
  if (!*(_BYTE *)this || *((int *)a2 + 18) < 1)
    goto LABEL_30;
  std::string::basic_string[abi:ne180100]<0>(__p, "Reduce");
  CoreML::validateInputOutputRankEquality(a2, (uint64_t)__p, (uint64_t)this + 32, (CoreML::Result *)&v25);
  v28 = v25;
  if (SHIBYTE(v30) < 0)
    operator delete((void *)v29);
  v29 = v26;
  v30 = v27;
  HIBYTE(v27) = 0;
  LOBYTE(v26) = 0;
  if (v24 < 0)
    operator delete(__p[0]);
  v6 = CoreML::Result::good((CoreML::Result *)&v28);
  if (v6)
  {
    v7 = *(_DWORD *)(a2[10][1] + 36);
    v25 = 0;
    v26 = 0uLL;
    if (*((_DWORD *)a2 + 35) == 280)
      v8 = a2[16];
    else
      v8 = CoreML::Specification::ReduceLayerParams::default_instance((CoreML::Specification::ReduceLayerParams *)v6);
    v9 = *((_DWORD *)v8 + 6);
    switch(v9)
    {
      case 0:
        if (v7 > 2)
          goto LABEL_28;
        goto LABEL_25;
      case 1:
        if (v7 > 1)
          goto LABEL_28;
        goto LABEL_25;
      case 2:
      case 3:
      case 4:
        if (v7 > 0)
          goto LABEL_28;
LABEL_25:
        v12 = a2[14];
        if (*((char *)v12 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v21, (const std::string::value_type *)*v12, v12[1]);
        }
        else
        {
          v13 = *(_OWORD *)v12;
          v21.__r_.__value_.__r.__words[2] = v12[2];
          *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v13;
        }
        v14 = std::string::insert(&v21, 0, "Reduce layer '");
        v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
        v22.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v15;
        v14->__r_.__value_.__l.__size_ = 0;
        v14->__r_.__value_.__r.__words[2] = 0;
        v14->__r_.__value_.__r.__words[0] = 0;
        v16 = std::string::append(&v22, "': input's rank is smaller than the dimensions provided in the axis parameter");
        goto LABEL_36;
      default:
        if (v9 != 0x80000000 && v9 != 0x7FFFFFFF)
        {
LABEL_28:
          if (SHIBYTE(v26) < 0)
            operator delete(v25);
          goto LABEL_30;
        }
        v10 = a2[14];
        if (*((char *)v10 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v21, (const std::string::value_type *)*v10, v10[1]);
        }
        else
        {
          v11 = *(_OWORD *)v10;
          v21.__r_.__value_.__r.__words[2] = v10[2];
          *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v11;
        }
        v17 = std::string::insert(&v21, 0, "Reduce layer: '");
        v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
        v22.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v18;
        v17->__r_.__value_.__l.__size_ = 0;
        v17->__r_.__value_.__r.__words[2] = 0;
        v17->__r_.__value_.__r.__words[0] = 0;
        v16 = std::string::append(&v22, "': unknown value for parameter 'axis'.");
LABEL_36:
        v19 = (void *)v16->__r_.__value_.__r.__words[0];
        v31[0] = v16->__r_.__value_.__l.__size_;
        *(_QWORD *)((char *)v31 + 7) = *(std::string::size_type *)((char *)&v16->__r_.__value_.__r.__words[1] + 7);
        v20 = HIBYTE(v16->__r_.__value_.__r.__words[2]);
        v16->__r_.__value_.__l.__size_ = 0;
        v16->__r_.__value_.__r.__words[2] = 0;
        v16->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v26) < 0)
          operator delete(v25);
        v25 = v19;
        *(_QWORD *)&v26 = v31[0];
        *(_QWORD *)((char *)&v26 + 7) = *(_QWORD *)((char *)v31 + 7);
        HIBYTE(v26) = v20;
        if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v22.__r_.__value_.__l.__data_);
        if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v21.__r_.__value_.__l.__data_);
        CoreML::Result::Result((_DWORD *)a3, 13);
        if (SHIBYTE(v26) < 0)
          operator delete(v25);
        if (SHIBYTE(v30) < 0)
          operator delete((void *)v29);
        break;
    }
  }
  else
  {
LABEL_30:
    *(_QWORD *)a3 = v28;
    *(_OWORD *)(a3 + 8) = v29;
    *(_QWORD *)(a3 + 24) = v30;
  }
}

void sub_218340534(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  uint64_t v34;

  if (a34 < 0)
    operator delete(__p);
  if (*(char *)(v34 - 73) < 0)
    operator delete(*(void **)(v34 - 96));
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateReorganizeDataLayer(CoreML::NeuralNetworkSpecValidator *this@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X8>)
{
  void **v6;
  _BOOL8 v7;
  char *v8;
  uint64_t *v9;
  std::string *v10;
  __int128 v11;
  void *v12[2];
  std::string::size_type v13;
  void *__p[2];
  char v15;
  std::string v16;
  uint64_t v17;

  CoreML::Result::Result((CoreML::Result *)a3);
  CoreML::validateInputCount((CoreML *)a2, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v16);
  *(_QWORD *)a3 = v16.__r_.__value_.__r.__words[0];
  v6 = (void **)(a3 + 8);
  if (*(char *)(a3 + 31) < 0)
    operator delete(*v6);
  *(_OWORD *)v6 = *(_OWORD *)&v16.__r_.__value_.__r.__words[1];
  *(_QWORD *)(a3 + 24) = v17;
  if (CoreML::Result::good((CoreML::Result *)a3))
  {
    CoreML::validateOutputCount((CoreML *)a2, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v16);
    *(_QWORD *)a3 = v16.__r_.__value_.__r.__words[0];
    if (*(char *)(a3 + 31) < 0)
      operator delete(*v6);
    *(_OWORD *)v6 = *(_OWORD *)&v16.__r_.__value_.__r.__words[1];
    *(_QWORD *)(a3 + 24) = v17;
  }
  v7 = CoreML::Result::good((CoreML::Result *)a3);
  if (v7)
  {
    if (!*(_BYTE *)this)
      goto LABEL_19;
    std::string::basic_string[abi:ne180100]<0>(__p, "ReorganizeData");
    v8 = (char *)this + 32;
    CoreML::validateInputOutputRankEquality(a2, (uint64_t)__p, (uint64_t)v8, (CoreML::Result *)&v16);
    *(_QWORD *)a3 = v16.__r_.__value_.__r.__words[0];
    if (*(char *)(a3 + 31) < 0)
      operator delete(*v6);
    *(_OWORD *)v6 = *(_OWORD *)&v16.__r_.__value_.__r.__words[1];
    *(_QWORD *)(a3 + 24) = v17;
    HIBYTE(v17) = 0;
    v16.__r_.__value_.__s.__data_[8] = 0;
    if (v15 < 0)
      operator delete(__p[0]);
    if (CoreML::Result::good((CoreML::Result *)a3))
    {
      std::string::basic_string[abi:ne180100]<0>(v12, "ReorganizeData");
      CoreML::validateRankCount((uint64_t)a2, (uint64_t)v12, 3, -1, (uint64_t)v8, (uint64_t)&v16);
      *(_QWORD *)a3 = v16.__r_.__value_.__r.__words[0];
      if (*(char *)(a3 + 31) < 0)
        operator delete(*v6);
      *(_OWORD *)v6 = *(_OWORD *)&v16.__r_.__value_.__r.__words[1];
      *(_QWORD *)(a3 + 24) = v17;
      HIBYTE(v17) = 0;
      v16.__r_.__value_.__s.__data_[8] = 0;
      if (SHIBYTE(v13) < 0)
        operator delete(v12[0]);
      v7 = CoreML::Result::good((CoreML::Result *)a3);
      if (v7)
      {
LABEL_19:
        if (*((_DWORD *)a2 + 35) == 345)
          v9 = a2[16];
        else
          v9 = CoreML::Specification::ReorganizeDataLayerParams::default_instance((CoreML::Specification::ReorganizeDataLayerParams *)v7);
        if (*((int *)v9 + 4) <= 1)
        {
          std::operator+<char>();
          v10 = std::string::append(&v16, "' must be > 1.");
          v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
          v13 = v10->__r_.__value_.__r.__words[2];
          *(_OWORD *)v12 = v11;
          v10->__r_.__value_.__l.__size_ = 0;
          v10->__r_.__value_.__r.__words[2] = 0;
          v10->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v16.__r_.__value_.__l.__data_);
          CoreML::Result::Result(&v16, 13);
          *(_QWORD *)a3 = v16.__r_.__value_.__r.__words[0];
          if (*(char *)(a3 + 31) < 0)
            operator delete(*v6);
          *(_OWORD *)v6 = *(_OWORD *)&v16.__r_.__value_.__r.__words[1];
          *(_QWORD *)(a3 + 24) = v17;
          if (SHIBYTE(v13) < 0)
            operator delete(v12[0]);
        }
      }
    }
  }
}

void sub_21834084C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;

  if (a14 < 0)
    operator delete(__p);
  if (*(char *)(v26 + 31) < 0)
    operator delete(*(void **)(v26 + 8));
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateSliceLayer(CoreML::NeuralNetworkSpecValidator *this@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v6;
  _BOOL8 v7;
  int v8;
  int v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  std::string *v13;
  __int128 v14;
  std::string *v15;
  __int128 v16;
  std::string::size_type v17;
  uint64_t v18;
  void *v19;
  uint64_t *v20;
  __int128 v21;
  uint64_t *v22;
  __int128 v23;
  std::string *v24;
  __int128 v25;
  std::string *v26;
  std::string *v27;
  __int128 v28;
  std::string::size_type v29;
  char v30;
  std::string v31;
  std::string v32;
  void *__p[2];
  char v34;
  std::string v35;
  uint64_t v36;
  std::string::size_type v37;
  __int128 v38;
  uint64_t v39;
  _QWORD v40[3];

  v40[2] = *MEMORY[0x24BDAC8D0];
  CoreML::Result::Result((CoreML::Result *)&v37);
  CoreML::validateInputCount((CoreML *)a2, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v35);
  v37 = v35.__r_.__value_.__r.__words[0];
  if (SHIBYTE(v39) < 0)
    operator delete((void *)v38);
  v38 = *(_OWORD *)&v35.__r_.__value_.__r.__words[1];
  v39 = v36;
  v6 = (uint64_t *)CoreML::Result::good((CoreML::Result *)&v37);
  if ((_DWORD)v6)
  {
    CoreML::validateOutputCount((CoreML *)a2, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v35);
    v37 = v35.__r_.__value_.__r.__words[0];
    if (SHIBYTE(v39) < 0)
      operator delete((void *)v38);
    v38 = *(_OWORD *)&v35.__r_.__value_.__r.__words[1];
    v39 = v36;
  }
  if (!*(_BYTE *)this || *((int *)a2 + 18) < 1)
    goto LABEL_23;
  std::string::basic_string[abi:ne180100]<0>(__p, "Slice");
  CoreML::validateInputOutputRankEquality(a2, (uint64_t)__p, (uint64_t)this + 32, (CoreML::Result *)&v35);
  v37 = v35.__r_.__value_.__r.__words[0];
  if (SHIBYTE(v39) < 0)
    operator delete((void *)v38);
  v38 = *(_OWORD *)&v35.__r_.__value_.__r.__words[1];
  v39 = v36;
  HIBYTE(v36) = 0;
  v35.__r_.__value_.__s.__data_[8] = 0;
  if (v34 < 0)
    operator delete(__p[0]);
  v7 = CoreML::Result::good((CoreML::Result *)&v37);
  if (!v7)
    goto LABEL_35;
  v8 = *(_DWORD *)(a2[10][1] + 36);
  memset(&v35, 0, sizeof(v35));
  if (*((_DWORD *)a2 + 35) == 350)
    v6 = a2[16];
  else
    v6 = CoreML::Specification::SliceLayerParams::default_instance((CoreML::Specification::SliceLayerParams *)v7);
  v9 = *((_DWORD *)v6 + 10);
  switch(v9)
  {
    case 0:
      if (v8 <= 2)
        goto LABEL_45;
      goto LABEL_21;
    case 1:
      if (v8 <= 1)
      {
LABEL_45:
        v20 = a2[14];
        if (*((char *)v20 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v31, (const std::string::value_type *)*v20, v20[1]);
        }
        else
        {
          v21 = *(_OWORD *)v20;
          v31.__r_.__value_.__r.__words[2] = v20[2];
          *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v21;
        }
        v24 = std::string::insert(&v31, 0, "Slice layer '");
        v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
        v32.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v25;
        v24->__r_.__value_.__l.__size_ = 0;
        v24->__r_.__value_.__r.__words[2] = 0;
        v24->__r_.__value_.__r.__words[0] = 0;
        v26 = std::string::append(&v32, "': input's rank is smaller than the dimension provided in the axis parameter");
        goto LABEL_53;
      }
LABEL_21:
      if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v35.__r_.__value_.__l.__data_);
LABEL_23:
      if (*((_DWORD *)a2 + 35) == 350)
        v10 = a2[16];
      else
        v10 = CoreML::Specification::SliceLayerParams::default_instance((CoreML::Specification::SliceLayerParams *)v6);
      if (*((int *)v10 + 8) <= 0)
      {
        std::operator+<char>();
        v15 = std::string::append(&v35, "' must be > 1.");
        v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
        v32.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v16;
        v15->__r_.__value_.__l.__size_ = 0;
        v15->__r_.__value_.__r.__words[2] = 0;
        v15->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v35.__r_.__value_.__l.__data_);
LABEL_38:
        CoreML::Result::Result(&v35, 13);
        v17 = v35.__r_.__value_.__r.__words[0];
        v37 = v35.__r_.__value_.__r.__words[0];
        if (SHIBYTE(v39) < 0)
        {
          operator delete((void *)v38);
          v17 = v37;
        }
        v38 = *(_OWORD *)&v35.__r_.__value_.__r.__words[1];
        v18 = v36;
        *(_QWORD *)a3 = v17;
        *(_OWORD *)(a3 + 8) = v38;
        *(_QWORD *)(a3 + 24) = v18;
        v38 = 0uLL;
        v39 = 0;
        if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
        {
          v19 = (void *)v32.__r_.__value_.__r.__words[0];
LABEL_61:
          operator delete(v19);
          goto LABEL_62;
        }
        goto LABEL_62;
      }
      v11 = v10[2];
      v12 = v10[3];
      if (v12 >= 1 && v12 < v11 || v12 < 0 && v11 < 0 && v12 < v11)
      {
        std::operator+<char>();
        v13 = std::string::append(&v35, " has an end index before the start index.");
        v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
        v32.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v14;
        v13->__r_.__value_.__l.__size_ = 0;
        v13->__r_.__value_.__r.__words[2] = 0;
        v13->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v35.__r_.__value_.__l.__data_);
        goto LABEL_38;
      }
LABEL_35:
      *(_QWORD *)a3 = v37;
      *(_OWORD *)(a3 + 8) = v38;
      *(_QWORD *)(a3 + 24) = v39;
      v38 = 0uLL;
      v39 = 0;
      goto LABEL_62;
    case 2:
      if (v8 > 0)
        goto LABEL_21;
      goto LABEL_45;
  }
  v22 = a2[14];
  if (*((char *)v22 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v31, (const std::string::value_type *)*v22, v22[1]);
  }
  else
  {
    v23 = *(_OWORD *)v22;
    v31.__r_.__value_.__r.__words[2] = v22[2];
    *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v23;
  }
  v27 = std::string::insert(&v31, 0, "Slice layer: '");
  v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
  v32.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v28;
  v27->__r_.__value_.__l.__size_ = 0;
  v27->__r_.__value_.__r.__words[2] = 0;
  v27->__r_.__value_.__r.__words[0] = 0;
  v26 = std::string::append(&v32, "': unknown value for parameter 'axis'.");
LABEL_53:
  v29 = v26->__r_.__value_.__r.__words[0];
  v40[0] = v26->__r_.__value_.__l.__size_;
  *(_QWORD *)((char *)v40 + 7) = *(std::string::size_type *)((char *)&v26->__r_.__value_.__r.__words[1] + 7);
  v30 = HIBYTE(v26->__r_.__value_.__r.__words[2]);
  v26->__r_.__value_.__l.__size_ = 0;
  v26->__r_.__value_.__r.__words[2] = 0;
  v26->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v35.__r_.__value_.__l.__data_);
  v35.__r_.__value_.__r.__words[0] = v29;
  v35.__r_.__value_.__l.__size_ = v40[0];
  *(std::string::size_type *)((char *)&v35.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v40 + 7);
  *((_BYTE *)&v35.__r_.__value_.__s + 23) = v30;
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31.__r_.__value_.__l.__data_);
  CoreML::Result::Result((_DWORD *)a3, 13);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
  {
    v19 = (void *)v35.__r_.__value_.__r.__words[0];
    goto LABEL_61;
  }
LABEL_62:
  if (SHIBYTE(v39) < 0)
    operator delete((void *)v38);
}

void sub_218340D9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  uint64_t v34;

  if (a34 < 0)
    operator delete(__p);
  if (*(char *)(v34 - 73) < 0)
    operator delete(*(void **)(v34 - 96));
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateLoadConstantLayer(CoreML::NeuralNetworkSpecValidator *this@<X0>, const CoreML::Specification::NeuralNetworkLayer *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  int v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  _BOOL4 v18;
  int v19;
  unsigned int v20;
  std::string *v21;
  __int128 v22;
  std::string::size_type v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t i;
  const CoreML::Specification::WeightParams *v29;
  uint64_t v30;
  std::string *v31;
  __int128 v32;
  void *__p[2];
  char v34;
  std::string v35;
  std::string v36;
  uint64_t v37;
  std::string::size_type v38;
  __int128 v39;
  uint64_t v40;

  CoreML::Result::Result((CoreML::Result *)&v38);
  CoreML::Result::Result((CoreML::Result *)&v36);
  v38 = v36.__r_.__value_.__r.__words[0];
  if (SHIBYTE(v40) < 0)
    operator delete((void *)v39);
  v39 = *(_OWORD *)&v36.__r_.__value_.__r.__words[1];
  v40 = v37;
  if (CoreML::Result::good((CoreML::Result *)&v38))
  {
    CoreML::validateOutputCount(a2, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v36);
    v38 = v36.__r_.__value_.__r.__words[0];
    if (SHIBYTE(v40) < 0)
      operator delete((void *)v39);
    v39 = *(_OWORD *)&v36.__r_.__value_.__r.__words[1];
    v40 = v37;
  }
  v6 = CoreML::Result::good((CoreML::Result *)&v38);
  if ((v6 & 1) == 0)
    goto LABEL_68;
  if (*(_BYTE *)this)
  {
    v6 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>((uint64_t)this + 32, *(const void ***)(*((_QWORD *)a2 + 7) + 8));
    if ((CoreML::NeuralNetworkSpecValidator *)((char *)this + 40) != (CoreML::NeuralNetworkSpecValidator *)v6)
    {
      v7 = *(_DWORD *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)this + 32, *(const void ***)(*((_QWORD *)a2 + 7) + 8));
      std::string::basic_string[abi:ne180100]<0>(&v35, "LoadConstant");
      std::string::basic_string[abi:ne180100]<0>(__p, "output");
      CoreML::checkRank((uint64_t)&v35, 5, 5, (uint64_t)__p, v7, (CoreML::Result *)&v36);
      v38 = v36.__r_.__value_.__r.__words[0];
      if (SHIBYTE(v40) < 0)
        operator delete((void *)v39);
      v39 = *(_OWORD *)&v36.__r_.__value_.__r.__words[1];
      v40 = v37;
      HIBYTE(v37) = 0;
      v36.__r_.__value_.__s.__data_[8] = 0;
      if (v34 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v35.__r_.__value_.__l.__data_);
      v6 = CoreML::Result::good((CoreML::Result *)&v38);
      if ((v6 & 1) == 0)
      {
LABEL_68:
        *(_QWORD *)a3 = v38;
        *(_OWORD *)(a3 + 8) = v39;
        *(_QWORD *)(a3 + 24) = v40;
        v39 = 0uLL;
        v40 = 0;
        goto LABEL_69;
      }
    }
  }
  if (*((_DWORD *)a2 + 35) == 290)
    v8 = (uint64_t *)*((_QWORD *)a2 + 16);
  else
    v8 = CoreML::Specification::LoadConstantLayerParams::default_instance((CoreML::Specification::LoadConstantLayerParams *)v6);
  if (v8[5])
    v9 = (uint64_t *)v8[5];
  else
    v9 = &CoreML::Specification::_WeightParams_default_instance_;
  v10 = v9[5];
  if (*(char *)(v10 + 23) < 0)
    v11 = *(_QWORD *)(v10 + 8);
  else
    v11 = *(unsigned __int8 *)(v10 + 23);
  v12 = v9[6];
  if (*(char *)(v12 + 23) < 0)
    v13 = *(_QWORD *)(v12 + 8);
  else
    v13 = *(unsigned __int8 *)(v12 + 23);
  v14 = *((_DWORD *)v9 + 4);
  v15 = v9[7];
  if (*(char *)(v15 + 23) < 0)
    v16 = *(_QWORD *)(v15 + 8);
  else
    v16 = *(unsigned __int8 *)(v15 + 23);
  v17 = v14 <= 0;
  v18 = v14 > 0;
  if (v17)
    v19 = 1;
  else
    v19 = 2;
  if (v11)
    v20 = v19;
  else
    v20 = v18;
  if (v13)
    ++v20;
  if (v16)
    ++v20;
  if (v20 > 1)
  {
    std::operator+<char>();
    v21 = std::string::append(&v36, "' has both full precision and half precision weight fields populated");
    v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    v35.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v36.__r_.__value_.__l.__data_);
    CoreML::Result::Result(&v36, 13);
    v23 = v36.__r_.__value_.__r.__words[0];
    v38 = v36.__r_.__value_.__r.__words[0];
    if (SHIBYTE(v40) < 0)
    {
      operator delete((void *)v39);
      v23 = v38;
    }
    v39 = *(_OWORD *)&v36.__r_.__value_.__r.__words[1];
    v24 = v37;
    *(_QWORD *)a3 = v23;
    *(_OWORD *)(a3 + 8) = v39;
    *(_QWORD *)(a3 + 24) = v24;
    v39 = 0uLL;
    v40 = 0;
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    {
      v25 = (void *)v35.__r_.__value_.__r.__words[0];
LABEL_58:
      operator delete(v25);
      goto LABEL_69;
    }
    goto LABEL_69;
  }
  if (*((_DWORD *)v8 + 4) == 3)
  {
    v26 = v8[3];
    v27 = 1;
    for (i = 8; i != 32; i += 8)
      v27 *= *(_QWORD *)(v26 + i);
    v29 = *(const CoreML::Specification::WeightParams **)(v26 + 8);
    std::string::basic_string[abi:ne180100]<0>(&v35, "LoadConstant");
    v30 = *((_QWORD *)a2 + 14);
    std::string::basic_string[abi:ne180100]<0>(__p, "constants");
    if ((unint64_t)v29 < 2)
      CoreML::validateGeneralWeightParams((uint64_t)v9, (const CoreML::Specification::WeightParams *)v27, (const CoreML::Specification::WeightParams *)1, (const void **)&v35.__r_.__value_.__l.__data_, v30, (uint64_t)__p, (uint64_t)&v36);
    else
      CoreML::validateGeneralWeightParams((uint64_t)v9, (const CoreML::Specification::WeightParams *)v27, v29, (const void **)&v35.__r_.__value_.__l.__data_, v30, (uint64_t)__p, (uint64_t)&v36);
    v38 = v36.__r_.__value_.__r.__words[0];
    if (SHIBYTE(v40) < 0)
      operator delete((void *)v39);
    v39 = *(_OWORD *)&v36.__r_.__value_.__r.__words[1];
    v40 = v37;
    HIBYTE(v37) = 0;
    v36.__r_.__value_.__s.__data_[8] = 0;
    if (v34 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v35.__r_.__value_.__l.__data_);
    if (CoreML::Result::good((CoreML::Result *)&v38))
    {
      CoreML::Result::Result((CoreML::Result *)a3);
      goto LABEL_69;
    }
    goto LABEL_68;
  }
  std::operator+<char>();
  v31 = std::string::append(&v35, "' must be a 3D constant.");
  v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
  v36.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v32;
  v31->__r_.__value_.__l.__size_ = 0;
  v31->__r_.__value_.__r.__words[2] = 0;
  v31->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v35.__r_.__value_.__l.__data_);
  CoreML::Result::Result((_DWORD *)a3, 13);
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
  {
    v25 = (void *)v36.__r_.__value_.__r.__words[0];
    goto LABEL_58;
  }
LABEL_69:
  if (SHIBYTE(v40) < 0)
    operator delete((void *)v39);
}

void sub_218341334(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v28 - 49) < 0)
    operator delete(*(void **)(v28 - 72));
  _Unwind_Resume(exception_object);
}

void CoreML::checkRank(uint64_t a1@<X1>, int a2@<W2>, int a3@<W3>, uint64_t a4@<X4>, int a5@<W5>, CoreML::Result *a6@<X8>)
{
  std::string *v12;
  __int128 v13;
  int v14;
  const std::string::value_type *v15;
  std::string::size_type v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  int v21;
  const std::string::value_type *v22;
  std::string::size_type v23;
  std::string *v24;
  __int128 v25;
  std::string *v26;
  __int128 v27;
  std::string *v28;
  std::string::size_type v29;
  std::string *v30;
  __int128 v31;
  std::string *v32;
  __int128 v33;
  std::string *v34;
  std::string::size_type v35;
  std::string *v36;
  __int128 v37;
  int v38;
  const std::string::value_type *v39;
  std::string::size_type v40;
  std::string *v41;
  __int128 v42;
  std::string *v43;
  __int128 v44;
  int v45;
  const std::string::value_type *v46;
  std::string::size_type v47;
  std::string *v48;
  __int128 v49;
  std::string *v50;
  __int128 v51;
  std::string *v52;
  std::string::size_type v53;
  std::string *v54;
  __int128 v55;
  std::string *v56;
  __int128 v57;
  std::string *v58;
  __int128 v59;
  int v60;
  const std::string::value_type *v61;
  std::string::size_type v62;
  std::string *v63;
  __int128 v64;
  std::string *v65;
  __int128 v66;
  int v67;
  const std::string::value_type *v68;
  std::string::size_type v69;
  std::string *v70;
  __int128 v71;
  std::string *v72;
  __int128 v73;
  std::string *v74;
  std::string::size_type size;
  std::string *v76;
  __int128 v77;
  std::string *v78;
  __int128 v79;
  std::string *v80;
  __int128 v81;
  std::string *v82;
  void *v83;
  char v84;
  std::string v85;
  std::string v86;
  std::string v87;
  std::string v88;
  std::string v89;
  std::string v90;
  std::string v91;
  std::string v92;
  std::string v93;
  std::string v94;
  std::string v95;
  void *v96;
  __int128 v97;
  _QWORD v98[3];

  v98[2] = *MEMORY[0x24BDAC8D0];
  v96 = 0;
  v97 = 0uLL;
  if (a3 < 1 || a3 != a2 || a5 == a3)
  {
    if (a2 < 1 || a5 >= a2)
    {
      if (a3 < 1 || a5 <= a3)
      {
        CoreML::Result::Result(a6);
        goto LABEL_105;
      }
      std::operator+<char>();
      v58 = std::string::append(&v87, "' of type '");
      v59 = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
      v88.__r_.__value_.__r.__words[2] = v58->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v59;
      v58->__r_.__value_.__l.__size_ = 0;
      v58->__r_.__value_.__r.__words[2] = 0;
      v58->__r_.__value_.__r.__words[0] = 0;
      v60 = *(char *)(a1 + 23);
      if (v60 >= 0)
        v61 = (const std::string::value_type *)a1;
      else
        v61 = *(const std::string::value_type **)a1;
      if (v60 >= 0)
        v62 = *(unsigned __int8 *)(a1 + 23);
      else
        v62 = *(_QWORD *)(a1 + 8);
      v63 = std::string::append(&v88, v61, v62);
      v64 = *(_OWORD *)&v63->__r_.__value_.__l.__data_;
      v89.__r_.__value_.__r.__words[2] = v63->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v89.__r_.__value_.__l.__data_ = v64;
      v63->__r_.__value_.__l.__size_ = 0;
      v63->__r_.__value_.__r.__words[2] = 0;
      v63->__r_.__value_.__r.__words[0] = 0;
      v65 = std::string::append(&v89, "' has ");
      v66 = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
      v90.__r_.__value_.__r.__words[2] = v65->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v90.__r_.__value_.__l.__data_ = v66;
      v65->__r_.__value_.__l.__size_ = 0;
      v65->__r_.__value_.__r.__words[2] = 0;
      v65->__r_.__value_.__r.__words[0] = 0;
      v67 = *(char *)(a4 + 23);
      if (v67 >= 0)
        v68 = (const std::string::value_type *)a4;
      else
        v68 = *(const std::string::value_type **)a4;
      if (v67 >= 0)
        v69 = *(unsigned __int8 *)(a4 + 23);
      else
        v69 = *(_QWORD *)(a4 + 8);
      v70 = std::string::append(&v90, v68, v69);
      v71 = *(_OWORD *)&v70->__r_.__value_.__l.__data_;
      v91.__r_.__value_.__r.__words[2] = v70->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v91.__r_.__value_.__l.__data_ = v71;
      v70->__r_.__value_.__l.__size_ = 0;
      v70->__r_.__value_.__r.__words[2] = 0;
      v70->__r_.__value_.__r.__words[0] = 0;
      v72 = std::string::append(&v91, " rank ");
      v73 = *(_OWORD *)&v72->__r_.__value_.__l.__data_;
      v92.__r_.__value_.__r.__words[2] = v72->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v92.__r_.__value_.__l.__data_ = v73;
      v72->__r_.__value_.__l.__size_ = 0;
      v72->__r_.__value_.__r.__words[2] = 0;
      v72->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v86, a5);
      if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v74 = &v86;
      else
        v74 = (std::string *)v86.__r_.__value_.__r.__words[0];
      if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v86.__r_.__value_.__r.__words[2]);
      else
        size = v86.__r_.__value_.__l.__size_;
      v76 = std::string::append(&v92, (const std::string::value_type *)v74, size);
      v77 = *(_OWORD *)&v76->__r_.__value_.__l.__data_;
      v93.__r_.__value_.__r.__words[2] = v76->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v93.__r_.__value_.__l.__data_ = v77;
      v76->__r_.__value_.__l.__size_ = 0;
      v76->__r_.__value_.__r.__words[2] = 0;
      v76->__r_.__value_.__r.__words[0] = 0;
      v78 = std::string::append(&v93, " but expects rank at most ");
      v79 = *(_OWORD *)&v78->__r_.__value_.__l.__data_;
      v94.__r_.__value_.__r.__words[2] = v78->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v94.__r_.__value_.__l.__data_ = v79;
      v78->__r_.__value_.__l.__size_ = 0;
      v78->__r_.__value_.__r.__words[2] = 0;
      v78->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v85, a3);
      if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v34 = &v85;
      else
        v34 = (std::string *)v85.__r_.__value_.__r.__words[0];
      if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v35 = HIBYTE(v85.__r_.__value_.__r.__words[2]);
      else
        v35 = v85.__r_.__value_.__l.__size_;
    }
    else
    {
      std::operator+<char>();
      v36 = std::string::append(&v87, "' of type '");
      v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
      v88.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v37;
      v36->__r_.__value_.__l.__size_ = 0;
      v36->__r_.__value_.__r.__words[2] = 0;
      v36->__r_.__value_.__r.__words[0] = 0;
      v38 = *(char *)(a1 + 23);
      if (v38 >= 0)
        v39 = (const std::string::value_type *)a1;
      else
        v39 = *(const std::string::value_type **)a1;
      if (v38 >= 0)
        v40 = *(unsigned __int8 *)(a1 + 23);
      else
        v40 = *(_QWORD *)(a1 + 8);
      v41 = std::string::append(&v88, v39, v40);
      v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
      v89.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v89.__r_.__value_.__l.__data_ = v42;
      v41->__r_.__value_.__l.__size_ = 0;
      v41->__r_.__value_.__r.__words[2] = 0;
      v41->__r_.__value_.__r.__words[0] = 0;
      v43 = std::string::append(&v89, "' has ");
      v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
      v90.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v90.__r_.__value_.__l.__data_ = v44;
      v43->__r_.__value_.__l.__size_ = 0;
      v43->__r_.__value_.__r.__words[2] = 0;
      v43->__r_.__value_.__r.__words[0] = 0;
      v45 = *(char *)(a4 + 23);
      if (v45 >= 0)
        v46 = (const std::string::value_type *)a4;
      else
        v46 = *(const std::string::value_type **)a4;
      if (v45 >= 0)
        v47 = *(unsigned __int8 *)(a4 + 23);
      else
        v47 = *(_QWORD *)(a4 + 8);
      v48 = std::string::append(&v90, v46, v47);
      v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
      v91.__r_.__value_.__r.__words[2] = v48->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v91.__r_.__value_.__l.__data_ = v49;
      v48->__r_.__value_.__l.__size_ = 0;
      v48->__r_.__value_.__r.__words[2] = 0;
      v48->__r_.__value_.__r.__words[0] = 0;
      v50 = std::string::append(&v91, " rank ");
      v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
      v92.__r_.__value_.__r.__words[2] = v50->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v92.__r_.__value_.__l.__data_ = v51;
      v50->__r_.__value_.__l.__size_ = 0;
      v50->__r_.__value_.__r.__words[2] = 0;
      v50->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v86, a5);
      if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v52 = &v86;
      else
        v52 = (std::string *)v86.__r_.__value_.__r.__words[0];
      if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v53 = HIBYTE(v86.__r_.__value_.__r.__words[2]);
      else
        v53 = v86.__r_.__value_.__l.__size_;
      v54 = std::string::append(&v92, (const std::string::value_type *)v52, v53);
      v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
      v93.__r_.__value_.__r.__words[2] = v54->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v93.__r_.__value_.__l.__data_ = v55;
      v54->__r_.__value_.__l.__size_ = 0;
      v54->__r_.__value_.__r.__words[2] = 0;
      v54->__r_.__value_.__r.__words[0] = 0;
      v56 = std::string::append(&v93, " but expects rank at least ");
      v57 = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
      v94.__r_.__value_.__r.__words[2] = v56->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v94.__r_.__value_.__l.__data_ = v57;
      v56->__r_.__value_.__l.__size_ = 0;
      v56->__r_.__value_.__r.__words[2] = 0;
      v56->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v85, a2);
      if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v34 = &v85;
      else
        v34 = (std::string *)v85.__r_.__value_.__r.__words[0];
      if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v35 = HIBYTE(v85.__r_.__value_.__r.__words[2]);
      else
        v35 = v85.__r_.__value_.__l.__size_;
    }
  }
  else
  {
    std::operator+<char>();
    v12 = std::string::append(&v87, "' of type '");
    v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v88.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    v14 = *(char *)(a1 + 23);
    if (v14 >= 0)
      v15 = (const std::string::value_type *)a1;
    else
      v15 = *(const std::string::value_type **)a1;
    if (v14 >= 0)
      v16 = *(unsigned __int8 *)(a1 + 23);
    else
      v16 = *(_QWORD *)(a1 + 8);
    v17 = std::string::append(&v88, v15, v16);
    v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v89.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v89.__r_.__value_.__l.__data_ = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    v19 = std::string::append(&v89, "' has ");
    v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v90.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v90.__r_.__value_.__l.__data_ = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    v21 = *(char *)(a4 + 23);
    if (v21 >= 0)
      v22 = (const std::string::value_type *)a4;
    else
      v22 = *(const std::string::value_type **)a4;
    if (v21 >= 0)
      v23 = *(unsigned __int8 *)(a4 + 23);
    else
      v23 = *(_QWORD *)(a4 + 8);
    v24 = std::string::append(&v90, v22, v23);
    v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    v91.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v91.__r_.__value_.__l.__data_ = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    v26 = std::string::append(&v91, " rank ");
    v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
    v92.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v92.__r_.__value_.__l.__data_ = v27;
    v26->__r_.__value_.__l.__size_ = 0;
    v26->__r_.__value_.__r.__words[2] = 0;
    v26->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v86, a5);
    if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v28 = &v86;
    else
      v28 = (std::string *)v86.__r_.__value_.__r.__words[0];
    if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v29 = HIBYTE(v86.__r_.__value_.__r.__words[2]);
    else
      v29 = v86.__r_.__value_.__l.__size_;
    v30 = std::string::append(&v92, (const std::string::value_type *)v28, v29);
    v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
    v93.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v93.__r_.__value_.__l.__data_ = v31;
    v30->__r_.__value_.__l.__size_ = 0;
    v30->__r_.__value_.__r.__words[2] = 0;
    v30->__r_.__value_.__r.__words[0] = 0;
    v32 = std::string::append(&v93, " but expects rank exactly ");
    v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
    v94.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v94.__r_.__value_.__l.__data_ = v33;
    v32->__r_.__value_.__l.__size_ = 0;
    v32->__r_.__value_.__r.__words[2] = 0;
    v32->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v85, a3);
    if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v34 = &v85;
    else
      v34 = (std::string *)v85.__r_.__value_.__r.__words[0];
    if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v35 = HIBYTE(v85.__r_.__value_.__r.__words[2]);
    else
      v35 = v85.__r_.__value_.__l.__size_;
  }
  v80 = std::string::append(&v94, (const std::string::value_type *)v34, v35);
  v81 = *(_OWORD *)&v80->__r_.__value_.__l.__data_;
  v95.__r_.__value_.__r.__words[2] = v80->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v95.__r_.__value_.__l.__data_ = v81;
  v80->__r_.__value_.__l.__size_ = 0;
  v80->__r_.__value_.__r.__words[2] = 0;
  v80->__r_.__value_.__r.__words[0] = 0;
  v82 = std::string::append(&v95, ".");
  v83 = (void *)v82->__r_.__value_.__r.__words[0];
  v98[0] = v82->__r_.__value_.__l.__size_;
  *(_QWORD *)((char *)v98 + 7) = *(std::string::size_type *)((char *)&v82->__r_.__value_.__r.__words[1] + 7);
  v84 = HIBYTE(v82->__r_.__value_.__r.__words[2]);
  v82->__r_.__value_.__l.__size_ = 0;
  v82->__r_.__value_.__r.__words[2] = 0;
  v82->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v97) < 0)
    operator delete(v96);
  v96 = v83;
  *(_QWORD *)&v97 = v98[0];
  *(_QWORD *)((char *)&v97 + 7) = *(_QWORD *)((char *)v98 + 7);
  HIBYTE(v97) = v84;
  if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v95.__r_.__value_.__l.__data_);
  if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v85.__r_.__value_.__l.__data_);
  if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v94.__r_.__value_.__l.__data_);
  if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v93.__r_.__value_.__l.__data_);
  if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v86.__r_.__value_.__l.__data_);
  if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v92.__r_.__value_.__l.__data_);
  if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v91.__r_.__value_.__l.__data_);
  if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v90.__r_.__value_.__l.__data_);
  if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v89.__r_.__value_.__l.__data_);
  if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v88.__r_.__value_.__l.__data_);
  if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v87.__r_.__value_.__l.__data_);
  CoreML::Result::Result(a6, 13);
LABEL_105:
  if (SHIBYTE(v97) < 0)
    operator delete(v96);
}

void sub_218341B0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,uint64_t a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  uint64_t v61;

  if (*(char *)(v61 - 121) < 0)
    operator delete(*(void **)(v61 - 144));
  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v61 - 153) < 0)
    operator delete(*(void **)(v61 - 176));
  if (*(char *)(v61 - 185) < 0)
    operator delete(*(void **)(v61 - 208));
  if (a21 < 0)
    operator delete(a16);
  if (a61 < 0)
    operator delete(a56);
  if (a54 < 0)
    operator delete(a49);
  if (a47 < 0)
    operator delete(a42);
  if (a40 < 0)
    operator delete(a35);
  if (a33 < 0)
    operator delete(a28);
  if (a27 < 0)
    operator delete(a22);
  if (*(char *)(v61 - 89) < 0)
    operator delete(*(void **)(v61 - 112));
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateScaleLayer(CoreML::NeuralNetworkSpecValidator *this@<X0>, const CoreML::Specification::NeuralNetworkLayer *a2@<X1>, uint64_t a3@<X8>)
{
  _BOOL8 v6;
  char *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  uint64_t v25;
  BOOL v26;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  unsigned int v40;
  unsigned int v41;
  int v42;
  uint64_t v43;
  BOOL v44;
  BOOL v46;
  int v47;
  std::string *v48;
  __int128 v49;
  std::string *v50;
  __int128 v51;
  std::string::size_type v52;
  uint64_t v53;
  void *v54;
  int v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  const CoreML::Specification::WeightParams *v60;
  uint64_t v61;
  int v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  const CoreML::Specification::WeightParams *v67;
  uint64_t *v68;
  uint64_t v69;
  std::string *v70;
  __int128 v71;
  std::string *v72;
  std::string::size_type v73;
  std::string *v74;
  __int128 v75;
  std::string *v76;
  __int128 v77;
  uint64_t *v78;
  uint64_t v79;
  std::string *v80;
  __int128 v81;
  std::string *v82;
  std::string::size_type size;
  std::string *v84;
  __int128 v85;
  std::string *v86;
  __int128 v87;
  uint64_t v88;
  std::string v89;
  std::string v90;
  std::string v91;
  std::string v92;
  void *__p[2];
  char v94;
  std::string v95;
  uint64_t v96;
  std::string::size_type v97;
  __int128 v98;
  uint64_t v99;

  CoreML::Result::Result((CoreML::Result *)&v97);
  CoreML::validateInputCount(a2, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v95);
  v97 = v95.__r_.__value_.__r.__words[0];
  if (SHIBYTE(v99) < 0)
    operator delete((void *)v98);
  v98 = *(_OWORD *)&v95.__r_.__value_.__r.__words[1];
  v99 = v96;
  if (CoreML::Result::good((CoreML::Result *)&v97))
  {
    CoreML::validateOutputCount(a2, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v95);
    v97 = v95.__r_.__value_.__r.__words[0];
    if (SHIBYTE(v99) < 0)
      operator delete((void *)v98);
    v98 = *(_OWORD *)&v95.__r_.__value_.__r.__words[1];
    v99 = v96;
  }
  v6 = CoreML::Result::good((CoreML::Result *)&v97);
  if (!v6)
    goto LABEL_198;
  if (*(_BYTE *)this)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "Scale");
    v7 = (char *)this + 32;
    CoreML::validateInputOutputRankEquality(a2, (uint64_t)__p, (uint64_t)v7, (CoreML::Result *)&v95);
    v97 = v95.__r_.__value_.__r.__words[0];
    if (SHIBYTE(v99) < 0)
      operator delete((void *)v98);
    v98 = *(_OWORD *)&v95.__r_.__value_.__r.__words[1];
    v99 = v96;
    HIBYTE(v96) = 0;
    v95.__r_.__value_.__s.__data_[8] = 0;
    if (v94 < 0)
      operator delete(__p[0]);
    if (!CoreML::Result::good((CoreML::Result *)&v97))
      goto LABEL_198;
    std::string::basic_string[abi:ne180100]<0>(&v92, "Scale");
    CoreML::validateRankCount((uint64_t)a2, (uint64_t)&v92, 3, -1, (uint64_t)v7, (uint64_t)&v95);
    v97 = v95.__r_.__value_.__r.__words[0];
    if (SHIBYTE(v99) < 0)
      operator delete((void *)v98);
    v98 = *(_OWORD *)&v95.__r_.__value_.__r.__words[1];
    v99 = v96;
    HIBYTE(v96) = 0;
    v95.__r_.__value_.__s.__data_[8] = 0;
    if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v92.__r_.__value_.__l.__data_);
    v6 = CoreML::Result::good((CoreML::Result *)&v97);
    if (!v6)
      goto LABEL_198;
  }
  if (*((_DWORD *)a2 + 35) == 245)
    v8 = (uint64_t *)*((_QWORD *)a2 + 16);
  else
    v8 = CoreML::Specification::ScaleLayerParams::default_instance((CoreML::Specification::ScaleLayerParams *)v6);
  if (v8[8])
    v9 = (uint64_t *)v8[8];
  else
    v9 = &CoreML::Specification::_WeightParams_default_instance_;
  v10 = v9[5];
  v11 = *(unsigned __int8 *)(v10 + 23);
  if (*(char *)(v10 + 23) < 0)
    v12 = *(_QWORD *)(v10 + 8);
  else
    v12 = *(unsigned __int8 *)(v10 + 23);
  v13 = v9[6];
  v14 = *(unsigned __int8 *)(v13 + 23);
  if (*(char *)(v13 + 23) < 0)
    v15 = *(_QWORD *)(v13 + 8);
  else
    v15 = *(unsigned __int8 *)(v13 + 23);
  v16 = *((_DWORD *)v9 + 4);
  v17 = v9[7];
  v18 = *(unsigned __int8 *)(v17 + 23);
  if (*(char *)(v17 + 23) < 0)
    v19 = *(_QWORD *)(v17 + 8);
  else
    v19 = *(unsigned __int8 *)(v17 + 23);
  v20 = *((unsigned __int8 *)v8 + 80);
  if (v16 <= 0)
    v21 = 1;
  else
    v21 = 2;
  if (v12)
    v22 = v21;
  else
    v22 = v16 > 0;
  if (v15)
    ++v22;
  if (v19)
    v23 = v22 + 1;
  else
    v23 = v22;
  if (v23 <= 1)
  {
    if (v23)
      v24 = 0;
    else
      v24 = 5;
    if (v16 <= 0 && v23)
    {
      if ((v11 & 0x80) != 0)
        v11 = *(_QWORD *)(v10 + 8);
      if (v11)
      {
        v24 = 1;
      }
      else
      {
        if ((v14 & 0x80) != 0)
          v14 = *(_QWORD *)(v13 + 8);
        v25 = v9[8];
        if (v9 != &CoreML::Specification::_WeightParams_default_instance_ && v14 && v25)
        {
          v24 = 2;
        }
        else
        {
          if ((v18 & 0x80) != 0)
            v18 = *(_QWORD *)(v17 + 8);
          if (v25)
            v26 = v18 == 0;
          else
            v26 = 1;
          if (v26 || v9 == &CoreML::Specification::_WeightParams_default_instance_)
            v24 = 5;
          else
            v24 = 3;
        }
      }
    }
  }
  else
  {
    v24 = 4;
  }
  v28 = (uint64_t *)v8[9];
  if (!v28)
    v28 = &CoreML::Specification::_WeightParams_default_instance_;
  v29 = v28[5];
  v30 = *(unsigned __int8 *)(v29 + 23);
  if (*(char *)(v29 + 23) < 0)
    v31 = *(_QWORD *)(v29 + 8);
  else
    v31 = *(unsigned __int8 *)(v29 + 23);
  v32 = v28[6];
  v33 = *(unsigned __int8 *)(v32 + 23);
  if (*(char *)(v32 + 23) < 0)
    v34 = *(_QWORD *)(v32 + 8);
  else
    v34 = *(unsigned __int8 *)(v32 + 23);
  v35 = *((_DWORD *)v28 + 4);
  v36 = v28[7];
  v37 = *(unsigned __int8 *)(v36 + 23);
  if (*(char *)(v36 + 23) < 0)
    v38 = *(_QWORD *)(v36 + 8);
  else
    v38 = *(unsigned __int8 *)(v36 + 23);
  if (v35 <= 0)
    v39 = 1;
  else
    v39 = 2;
  if (v31)
    v40 = v39;
  else
    v40 = v35 > 0;
  if (v34)
    ++v40;
  if (v38)
    v41 = v40 + 1;
  else
    v41 = v40;
  if (v41 <= 1)
  {
    if (v41)
      v42 = 0;
    else
      v42 = 5;
    if (v35 <= 0 && v41)
    {
      if ((v30 & 0x80) != 0)
        v30 = *(_QWORD *)(v29 + 8);
      if (v30)
      {
        v42 = 1;
      }
      else
      {
        if ((v33 & 0x80) != 0)
          v33 = *(_QWORD *)(v32 + 8);
        v43 = v28[8];
        if (v28 != &CoreML::Specification::_WeightParams_default_instance_ && v33 && v43)
        {
          v42 = 2;
        }
        else
        {
          if ((v37 & 0x80) != 0)
            v37 = *(_QWORD *)(v36 + 8);
          if (v43)
            v44 = v37 == 0;
          else
            v44 = 1;
          if (v44 || v28 == &CoreML::Specification::_WeightParams_default_instance_)
            v42 = 5;
          else
            v42 = 3;
        }
      }
    }
  }
  else
  {
    v42 = 4;
  }
  if (*((_BYTE *)v8 + 80))
    v46 = v42 == 4;
  else
    v46 = 0;
  v47 = v46;
  if (v24 == 4 || v47)
  {
    std::operator+<char>();
    v50 = std::string::append(&v95, "' has invalid scale/bias fields.");
    v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
    v92.__r_.__value_.__r.__words[2] = v50->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v92.__r_.__value_.__l.__data_ = v51;
    v50->__r_.__value_.__l.__size_ = 0;
    v50->__r_.__value_.__r.__words[2] = 0;
    v50->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v95.__r_.__value_.__l.__data_);
LABEL_141:
    CoreML::Result::Result(&v95, 13);
    v52 = v95.__r_.__value_.__r.__words[0];
    v97 = v95.__r_.__value_.__r.__words[0];
    if (SHIBYTE(v99) < 0)
    {
      operator delete((void *)v98);
      v52 = v97;
    }
    v98 = *(_OWORD *)&v95.__r_.__value_.__r.__words[1];
    v53 = v96;
    *(_QWORD *)a3 = v52;
    *(_OWORD *)(a3 + 8) = v98;
    *(_QWORD *)(a3 + 24) = v53;
    v98 = 0uLL;
    v99 = 0;
    if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
    {
      v54 = (void *)v92.__r_.__value_.__r.__words[0];
LABEL_145:
      operator delete(v54);
      goto LABEL_199;
    }
    goto LABEL_199;
  }
  if (*((_BYTE *)v8 + 80) && (v24 == 1 && !v42 || !v24 && v42 == 1))
  {
    std::operator+<char>();
    v48 = std::string::append(&v95, "' has invalid scale/bias fields. Field value types should match and should either be half or full precision.");
    v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
    v92.__r_.__value_.__r.__words[2] = v48->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v92.__r_.__value_.__l.__data_ = v49;
    v48->__r_.__value_.__l.__size_ = 0;
    v48->__r_.__value_.__r.__words[2] = 0;
    v48->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v95.__r_.__value_.__l.__data_);
    goto LABEL_141;
  }
  v55 = *((_DWORD *)v8 + 4);
  if ((v55 | 2) == 3)
  {
    v56 = (uint64_t *)(v8[3] + 8);
    v57 = 1;
    v58 = *((unsigned int *)v8 + 4);
    do
    {
      v59 = *v56++;
      v57 *= v59;
      --v58;
    }
    while (v58);
    if (v55 == 3 && (v60 = *(const CoreML::Specification::WeightParams **)(v8[3] + 8), (unint64_t)v60 >= 2))
    {
      std::string::basic_string[abi:ne180100]<0>(&v92, "Scale");
      v88 = *((_QWORD *)a2 + 14);
      std::string::basic_string[abi:ne180100]<0>(&v91, "scale");
      CoreML::validateGeneralWeightParams((uint64_t)v9, (const CoreML::Specification::WeightParams *)v57, v60, (const void **)&v92.__r_.__value_.__l.__data_, v88, (uint64_t)&v91, (uint64_t)&v95);
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&v92, "Scale");
      v61 = *((_QWORD *)a2 + 14);
      std::string::basic_string[abi:ne180100]<0>(&v91, "scale");
      CoreML::validateGeneralWeightParams((uint64_t)v9, (const CoreML::Specification::WeightParams *)v57, (const CoreML::Specification::WeightParams *)1, (const void **)&v92.__r_.__value_.__l.__data_, v61, (uint64_t)&v91, (uint64_t)&v95);
    }
    v97 = v95.__r_.__value_.__r.__words[0];
    if (SHIBYTE(v99) < 0)
      operator delete((void *)v98);
    v98 = *(_OWORD *)&v95.__r_.__value_.__r.__words[1];
    v99 = v96;
    HIBYTE(v96) = 0;
    v95.__r_.__value_.__s.__data_[8] = 0;
    if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v91.__r_.__value_.__l.__data_);
    if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v92.__r_.__value_.__l.__data_);
    if (!CoreML::Result::good((CoreML::Result *)&v97))
      goto LABEL_198;
    if (!v20)
    {
LABEL_197:
      CoreML::Result::Result((CoreML::Result *)a3);
      goto LABEL_199;
    }
    v62 = *((_DWORD *)v8 + 10);
    if ((v62 | 2) == 3)
    {
      v63 = (uint64_t *)(v8[6] + 8);
      v64 = 1;
      v65 = *((unsigned int *)v8 + 10);
      do
      {
        v66 = *v63++;
        v64 *= v66;
        --v65;
      }
      while (v65);
      if (v62 == 3 && (v67 = *(const CoreML::Specification::WeightParams **)(v8[6] + 8), (unint64_t)v67 >= 2))
      {
        if (v8[9])
          v68 = (uint64_t *)v8[9];
        else
          v68 = &CoreML::Specification::_WeightParams_default_instance_;
        std::string::basic_string[abi:ne180100]<0>(&v92, "Scale");
        v69 = *((_QWORD *)a2 + 14);
        std::string::basic_string[abi:ne180100]<0>(&v91, "bias");
        CoreML::validateGeneralWeightParams((uint64_t)v68, (const CoreML::Specification::WeightParams *)v64, v67, (const void **)&v92.__r_.__value_.__l.__data_, v69, (uint64_t)&v91, (uint64_t)&v95);
      }
      else
      {
        if (v8[9])
          v78 = (uint64_t *)v8[9];
        else
          v78 = &CoreML::Specification::_WeightParams_default_instance_;
        std::string::basic_string[abi:ne180100]<0>(&v92, "Scale");
        v79 = *((_QWORD *)a2 + 14);
        std::string::basic_string[abi:ne180100]<0>(&v91, "bias");
        CoreML::validateGeneralWeightParams((uint64_t)v78, (const CoreML::Specification::WeightParams *)v64, (const CoreML::Specification::WeightParams *)1, (const void **)&v92.__r_.__value_.__l.__data_, v79, (uint64_t)&v91, (uint64_t)&v95);
      }
      v97 = v95.__r_.__value_.__r.__words[0];
      if (SHIBYTE(v99) < 0)
        operator delete((void *)v98);
      v98 = *(_OWORD *)&v95.__r_.__value_.__r.__words[1];
      v99 = v96;
      HIBYTE(v96) = 0;
      v95.__r_.__value_.__s.__data_[8] = 0;
      if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v91.__r_.__value_.__l.__data_);
      if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v92.__r_.__value_.__l.__data_);
      if (CoreML::Result::good((CoreML::Result *)&v97))
        goto LABEL_197;
LABEL_198:
      *(_QWORD *)a3 = v97;
      *(_OWORD *)(a3 + 8) = v98;
      *(_QWORD *)(a3 + 24) = v99;
      v98 = 0uLL;
      v99 = 0;
      goto LABEL_199;
    }
    std::operator+<char>();
    v80 = std::string::append(&v90, "' is ");
    v81 = *(_OWORD *)&v80->__r_.__value_.__l.__data_;
    v91.__r_.__value_.__r.__words[2] = v80->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v91.__r_.__value_.__l.__data_ = v81;
    v80->__r_.__value_.__l.__size_ = 0;
    v80->__r_.__value_.__r.__words[2] = 0;
    v80->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v89, *((_DWORD *)v8 + 10));
    if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v82 = &v89;
    else
      v82 = (std::string *)v89.__r_.__value_.__r.__words[0];
    if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v89.__r_.__value_.__r.__words[2]);
    else
      size = v89.__r_.__value_.__l.__size_;
    v84 = std::string::append(&v91, (const std::string::value_type *)v82, size);
    v85 = *(_OWORD *)&v84->__r_.__value_.__l.__data_;
    v92.__r_.__value_.__r.__words[2] = v84->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v92.__r_.__value_.__l.__data_ = v85;
    v84->__r_.__value_.__l.__size_ = 0;
    v84->__r_.__value_.__r.__words[2] = 0;
    v84->__r_.__value_.__r.__words[0] = 0;
    v86 = std::string::append(&v92, " dimensional but should be either 1D or 3D.");
    v87 = *(_OWORD *)&v86->__r_.__value_.__l.__data_;
    v95.__r_.__value_.__r.__words[2] = v86->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v95.__r_.__value_.__l.__data_ = v87;
    v86->__r_.__value_.__l.__size_ = 0;
    v86->__r_.__value_.__r.__words[2] = 0;
    v86->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v92.__r_.__value_.__l.__data_);
    if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v89.__r_.__value_.__l.__data_);
    if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v91.__r_.__value_.__l.__data_);
    if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v90.__r_.__value_.__l.__data_);
  }
  else
  {
    std::operator+<char>();
    v70 = std::string::append(&v90, "' is ");
    v71 = *(_OWORD *)&v70->__r_.__value_.__l.__data_;
    v91.__r_.__value_.__r.__words[2] = v70->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v91.__r_.__value_.__l.__data_ = v71;
    v70->__r_.__value_.__l.__size_ = 0;
    v70->__r_.__value_.__r.__words[2] = 0;
    v70->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v89, *((_DWORD *)v8 + 4));
    if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v72 = &v89;
    else
      v72 = (std::string *)v89.__r_.__value_.__r.__words[0];
    if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v73 = HIBYTE(v89.__r_.__value_.__r.__words[2]);
    else
      v73 = v89.__r_.__value_.__l.__size_;
    v74 = std::string::append(&v91, (const std::string::value_type *)v72, v73);
    v75 = *(_OWORD *)&v74->__r_.__value_.__l.__data_;
    v92.__r_.__value_.__r.__words[2] = v74->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v92.__r_.__value_.__l.__data_ = v75;
    v74->__r_.__value_.__l.__size_ = 0;
    v74->__r_.__value_.__r.__words[2] = 0;
    v74->__r_.__value_.__r.__words[0] = 0;
    v76 = std::string::append(&v92, " dimensional but should be 1D or 3D.");
    v77 = *(_OWORD *)&v76->__r_.__value_.__l.__data_;
    v95.__r_.__value_.__r.__words[2] = v76->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v95.__r_.__value_.__l.__data_ = v77;
    v76->__r_.__value_.__l.__size_ = 0;
    v76->__r_.__value_.__r.__words[2] = 0;
    v76->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v92.__r_.__value_.__l.__data_);
    if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v89.__r_.__value_.__l.__data_);
    if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v91.__r_.__value_.__l.__data_);
    if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v90.__r_.__value_.__l.__data_);
  }
  CoreML::Result::Result((_DWORD *)a3, 13);
  if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
  {
    v54 = (void *)v95.__r_.__value_.__r.__words[0];
    goto LABEL_145;
  }
LABEL_199:
  if (SHIBYTE(v99) < 0)
    operator delete((void *)v98);
}

void sub_2183426CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  uint64_t v47;

  if (a28 < 0)
    operator delete(__p);
  if (a35 < 0)
    operator delete(a30);
  if (*(char *)(v47 - 97) < 0)
    operator delete(*(void **)(v47 - 120));
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateSimpleRecurrentLayer(CoreML::NeuralNetworkSpecValidator *this@<X0>, const CoreML::Specification::NeuralNetworkLayer *a2@<X1>, uint64_t a3@<X8>)
{
  _BOOL8 v6;
  char *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  uint64_t v25;
  BOOL v26;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  unsigned int v40;
  unsigned int v41;
  int v42;
  uint64_t v43;
  BOOL v44;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  unsigned int v58;
  unsigned int v59;
  int v60;
  uint64_t v61;
  BOOL v62;
  BOOL v64;
  int v65;
  std::string *v66;
  __int128 v67;
  std::string *v68;
  __int128 v69;
  std::string::size_type v70;
  uint64_t v71;
  const CoreML::Specification::WeightParams *v72;
  uint64_t v73;
  uint64_t v74;
  const CoreML::Specification::WeightParams *v75;
  uint64_t *v76;
  uint64_t v77;
  _BOOL8 v78;
  uint64_t *v79;
  const CoreML::Specification::WeightParams *v80;
  uint64_t v81;
  uint64_t *v82;
  CoreML *v83;
  void *v84[2];
  char v85;
  void *v86[2];
  std::string::size_type v87;
  void *v88[2];
  char v89;
  std::string v90;
  uint64_t v91;
  std::string::size_type v92;
  __int128 __p;
  uint64_t v94;

  CoreML::Result::Result((CoreML::Result *)&v92);
  CoreML::validateInputCount(a2, (const CoreML::Specification::NeuralNetworkLayer *)2, 2, (CoreML::Result *)&v90);
  v92 = v90.__r_.__value_.__r.__words[0];
  if (SHIBYTE(v94) < 0)
    operator delete((void *)__p);
  __p = *(_OWORD *)&v90.__r_.__value_.__r.__words[1];
  v94 = v91;
  if (CoreML::Result::good((CoreML::Result *)&v92))
  {
    CoreML::validateOutputCount(a2, (const CoreML::Specification::NeuralNetworkLayer *)2, 2, (CoreML::Result *)&v90);
    v92 = v90.__r_.__value_.__r.__words[0];
    if (SHIBYTE(v94) < 0)
      operator delete((void *)__p);
    __p = *(_OWORD *)&v90.__r_.__value_.__r.__words[1];
    v94 = v91;
  }
  if (!CoreML::Result::good((CoreML::Result *)&v92))
    goto LABEL_229;
  v6 = CoreML::Result::good((CoreML::Result *)&v92);
  if (!v6)
    goto LABEL_229;
  if (*(_BYTE *)this)
  {
    std::string::basic_string[abi:ne180100]<0>(v88, "SimpleRecurrent");
    v7 = (char *)this + 32;
    CoreML::validateInputOutputRankEquality(a2, (uint64_t)v88, (uint64_t)v7, (CoreML::Result *)&v90);
    v92 = v90.__r_.__value_.__r.__words[0];
    if (SHIBYTE(v94) < 0)
      operator delete((void *)__p);
    __p = *(_OWORD *)&v90.__r_.__value_.__r.__words[1];
    v94 = v91;
    HIBYTE(v91) = 0;
    v90.__r_.__value_.__s.__data_[8] = 0;
    if (v89 < 0)
      operator delete(v88[0]);
    if (!CoreML::Result::good((CoreML::Result *)&v92))
      goto LABEL_229;
    std::string::basic_string[abi:ne180100]<0>(v86, "SimpleRecurrent");
    CoreML::validateRankCount((uint64_t)a2, (uint64_t)v86, 5, 5, (uint64_t)v7, (uint64_t)&v90);
    v92 = v90.__r_.__value_.__r.__words[0];
    if (SHIBYTE(v94) < 0)
      operator delete((void *)__p);
    __p = *(_OWORD *)&v90.__r_.__value_.__r.__words[1];
    v94 = v91;
    HIBYTE(v91) = 0;
    v90.__r_.__value_.__s.__data_[8] = 0;
    if (SHIBYTE(v87) < 0)
      operator delete(v86[0]);
    v6 = CoreML::Result::good((CoreML::Result *)&v92);
    if (!v6)
      goto LABEL_229;
  }
  if (*((_DWORD *)a2 + 35) == 400)
    v8 = (uint64_t *)*((_QWORD *)a2 + 16);
  else
    v8 = CoreML::Specification::SimpleRecurrentLayerParams::default_instance((CoreML::Specification::SimpleRecurrentLayerParams *)v6);
  if (v8[3])
    v9 = (uint64_t *)v8[3];
  else
    v9 = &CoreML::Specification::_WeightParams_default_instance_;
  v10 = v9[5];
  v11 = *(unsigned __int8 *)(v10 + 23);
  if (*(char *)(v10 + 23) < 0)
    v12 = *(_QWORD *)(v10 + 8);
  else
    v12 = *(unsigned __int8 *)(v10 + 23);
  v13 = v9[6];
  v14 = *(unsigned __int8 *)(v13 + 23);
  if (*(char *)(v13 + 23) < 0)
    v15 = *(_QWORD *)(v13 + 8);
  else
    v15 = *(unsigned __int8 *)(v13 + 23);
  v16 = *((_DWORD *)v9 + 4);
  v17 = v9[7];
  v18 = *(unsigned __int8 *)(v17 + 23);
  if (*(char *)(v17 + 23) < 0)
    v19 = *(_QWORD *)(v17 + 8);
  else
    v19 = *(unsigned __int8 *)(v17 + 23);
  v20 = *((unsigned __int8 *)v8 + 65);
  if (v16 <= 0)
    v21 = 1;
  else
    v21 = 2;
  if (v12)
    v22 = v21;
  else
    v22 = v16 > 0;
  if (v15)
    ++v22;
  if (v19)
    v23 = v22 + 1;
  else
    v23 = v22;
  if (v23 <= 1)
  {
    if (v23)
      v24 = 0;
    else
      v24 = 5;
    if (v16 <= 0 && v23)
    {
      if ((v11 & 0x80) != 0)
        v11 = *(_QWORD *)(v10 + 8);
      if (v11)
      {
        v24 = 1;
      }
      else
      {
        if ((v14 & 0x80) != 0)
          v14 = *(_QWORD *)(v13 + 8);
        v25 = v9[8];
        if (v9 != &CoreML::Specification::_WeightParams_default_instance_ && v14 && v25)
        {
          v24 = 2;
        }
        else
        {
          if ((v18 & 0x80) != 0)
            v18 = *(_QWORD *)(v17 + 8);
          if (v25)
            v26 = v18 == 0;
          else
            v26 = 1;
          if (v26 || v9 == &CoreML::Specification::_WeightParams_default_instance_)
            v24 = 5;
          else
            v24 = 3;
        }
      }
    }
  }
  else
  {
    v24 = 4;
  }
  if (v8[4])
    v28 = (uint64_t *)v8[4];
  else
    v28 = &CoreML::Specification::_WeightParams_default_instance_;
  v29 = v28[5];
  v30 = *(unsigned __int8 *)(v29 + 23);
  if (*(char *)(v29 + 23) < 0)
    v31 = *(_QWORD *)(v29 + 8);
  else
    v31 = *(unsigned __int8 *)(v29 + 23);
  v32 = v28[6];
  v33 = *(unsigned __int8 *)(v32 + 23);
  if (*(char *)(v32 + 23) < 0)
    v34 = *(_QWORD *)(v32 + 8);
  else
    v34 = *(unsigned __int8 *)(v32 + 23);
  v35 = *((_DWORD *)v28 + 4);
  v36 = v28[7];
  v37 = *(unsigned __int8 *)(v36 + 23);
  if (*(char *)(v36 + 23) < 0)
    v38 = *(_QWORD *)(v36 + 8);
  else
    v38 = *(unsigned __int8 *)(v36 + 23);
  if (v35 <= 0)
    v39 = 1;
  else
    v39 = 2;
  if (v31)
    v40 = v39;
  else
    v40 = v35 > 0;
  if (v34)
    ++v40;
  if (v38)
    v41 = v40 + 1;
  else
    v41 = v40;
  if (v41 <= 1)
  {
    if (v41)
      v42 = 0;
    else
      v42 = 5;
    if (v35 <= 0 && v41)
    {
      if ((v30 & 0x80) != 0)
        v30 = *(_QWORD *)(v29 + 8);
      if (v30)
      {
        v42 = 1;
      }
      else
      {
        if ((v33 & 0x80) != 0)
          v33 = *(_QWORD *)(v32 + 8);
        v43 = v28[8];
        if (v28 != &CoreML::Specification::_WeightParams_default_instance_ && v33 && v43)
        {
          v42 = 2;
        }
        else
        {
          if ((v37 & 0x80) != 0)
            v37 = *(_QWORD *)(v36 + 8);
          if (v43)
            v44 = v37 == 0;
          else
            v44 = 1;
          if (v44 || v28 == &CoreML::Specification::_WeightParams_default_instance_)
            v42 = 5;
          else
            v42 = 3;
        }
      }
    }
  }
  else
  {
    v42 = 4;
  }
  v46 = (uint64_t *)v8[5];
  if (!v46)
    v46 = &CoreML::Specification::_WeightParams_default_instance_;
  v47 = v46[5];
  v48 = *(unsigned __int8 *)(v47 + 23);
  if (*(char *)(v47 + 23) < 0)
    v49 = *(_QWORD *)(v47 + 8);
  else
    v49 = *(unsigned __int8 *)(v47 + 23);
  v50 = v46[6];
  v51 = *(unsigned __int8 *)(v50 + 23);
  if (*(char *)(v50 + 23) < 0)
    v52 = *(_QWORD *)(v50 + 8);
  else
    v52 = *(unsigned __int8 *)(v50 + 23);
  v53 = *((_DWORD *)v46 + 4);
  v54 = v46[7];
  v55 = *(unsigned __int8 *)(v54 + 23);
  if (*(char *)(v54 + 23) < 0)
    v56 = *(_QWORD *)(v54 + 8);
  else
    v56 = *(unsigned __int8 *)(v54 + 23);
  if (v53 <= 0)
    v57 = 1;
  else
    v57 = 2;
  if (v49)
    v58 = v57;
  else
    v58 = v53 > 0;
  if (v52)
    ++v58;
  if (v56)
    v59 = v58 + 1;
  else
    v59 = v58;
  if (v59 <= 1)
  {
    if (v59)
      v60 = 0;
    else
      v60 = 5;
    if (v53 <= 0 && v59)
    {
      if ((v48 & 0x80) != 0)
        v48 = *(_QWORD *)(v47 + 8);
      if (v48)
      {
        v60 = 1;
      }
      else
      {
        if ((v51 & 0x80) != 0)
          v51 = *(_QWORD *)(v50 + 8);
        v61 = v46[8];
        if (v46 != &CoreML::Specification::_WeightParams_default_instance_ && v51 && v61)
        {
          v60 = 2;
        }
        else
        {
          if ((v55 & 0x80) != 0)
            v55 = *(_QWORD *)(v54 + 8);
          if (v61)
            v62 = v55 == 0;
          else
            v62 = 1;
          if (v62 || v46 == &CoreML::Specification::_WeightParams_default_instance_)
            v60 = 5;
          else
            v60 = 3;
        }
      }
    }
  }
  else
  {
    v60 = 4;
  }
  if (*((_BYTE *)v8 + 65))
    v64 = v60 == 4;
  else
    v64 = 0;
  v65 = v64;
  if (v24 == 4 || v42 == 4 || v65)
  {
    std::operator+<char>();
    v68 = std::string::append(&v90, "' has invalid weightMatrix/recusionMatrix/Bias fields.");
    v69 = *(_OWORD *)&v68->__r_.__value_.__l.__data_;
    v87 = v68->__r_.__value_.__r.__words[2];
    *(_OWORD *)v86 = v69;
    v68->__r_.__value_.__l.__size_ = 0;
    v68->__r_.__value_.__r.__words[2] = 0;
    v68->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v90.__r_.__value_.__l.__data_);
    goto LABEL_195;
  }
  if (v24 == 2 || v42 == 2 || v24 == v42 && (!*((_BYTE *)v8 + 65) || v60 == 2 || v24 == v60))
  {
    v73 = v8[6];
    v72 = (const CoreML::Specification::WeightParams *)v8[7];
    std::string::basic_string[abi:ne180100]<0>(v86, "SimpleRNN");
    v74 = *((_QWORD *)a2 + 14);
    std::string::basic_string[abi:ne180100]<0>(v84, "WeightMatrix");
    CoreML::validateGeneralWeightParams((uint64_t)v9, (const CoreML::Specification::WeightParams *)((_QWORD)v72 * v73), v72, (const void **)v86, v74, (uint64_t)v84, (uint64_t)&v90);
    v92 = v90.__r_.__value_.__r.__words[0];
    if (SHIBYTE(v94) < 0)
      operator delete((void *)__p);
    __p = *(_OWORD *)&v90.__r_.__value_.__r.__words[1];
    v94 = v91;
    HIBYTE(v91) = 0;
    v90.__r_.__value_.__s.__data_[8] = 0;
    if (v85 < 0)
      operator delete(v84[0]);
    if (SHIBYTE(v87) < 0)
      operator delete(v86[0]);
    if (CoreML::Result::good((CoreML::Result *)&v92))
    {
      v75 = (const CoreML::Specification::WeightParams *)v8[7];
      if (v8[4])
        v76 = (uint64_t *)v8[4];
      else
        v76 = &CoreML::Specification::_WeightParams_default_instance_;
      std::string::basic_string[abi:ne180100]<0>(v86, "SimpleRNN");
      v77 = *((_QWORD *)a2 + 14);
      std::string::basic_string[abi:ne180100]<0>(v84, "RecursionMatrix");
      CoreML::validateGeneralWeightParams((uint64_t)v76, (const CoreML::Specification::WeightParams *)((_QWORD)v75 * (_QWORD)v75), v75, (const void **)v86, v77, (uint64_t)v84, (uint64_t)&v90);
      v92 = v90.__r_.__value_.__r.__words[0];
      if (SHIBYTE(v94) < 0)
        operator delete((void *)__p);
      __p = *(_OWORD *)&v90.__r_.__value_.__r.__words[1];
      v94 = v91;
      HIBYTE(v91) = 0;
      v90.__r_.__value_.__s.__data_[8] = 0;
      if (v85 < 0)
        operator delete(v84[0]);
      if (SHIBYTE(v87) < 0)
        operator delete(v86[0]);
      v78 = CoreML::Result::good((CoreML::Result *)&v92);
      if (v78)
      {
        if (!v20)
          goto LABEL_227;
        if (v8[5])
          v79 = (uint64_t *)v8[5];
        else
          v79 = &CoreML::Specification::_WeightParams_default_instance_;
        v80 = (const CoreML::Specification::WeightParams *)v8[7];
        std::string::basic_string[abi:ne180100]<0>(v86, "SimpleRNN");
        v81 = *((_QWORD *)a2 + 14);
        std::string::basic_string[abi:ne180100]<0>(v84, "BiasVector");
        CoreML::validateGeneralWeightParams((uint64_t)v79, v80, (const CoreML::Specification::WeightParams *)1, (const void **)v86, v81, (uint64_t)v84, (uint64_t)&v90);
        v92 = v90.__r_.__value_.__r.__words[0];
        if (SHIBYTE(v94) < 0)
          operator delete((void *)__p);
        __p = *(_OWORD *)&v90.__r_.__value_.__r.__words[1];
        v94 = v91;
        HIBYTE(v91) = 0;
        v90.__r_.__value_.__s.__data_[8] = 0;
        if (v85 < 0)
          operator delete(v84[0]);
        if (SHIBYTE(v87) < 0)
          operator delete(v86[0]);
        v78 = CoreML::Result::good((CoreML::Result *)&v92);
        if (v78)
        {
LABEL_227:
          if (*((_DWORD *)a2 + 35) == 400)
            v82 = (uint64_t *)*((_QWORD *)a2 + 16);
          else
            v82 = CoreML::Specification::SimpleRecurrentLayerParams::default_instance((CoreML::Specification::SimpleRecurrentLayerParams *)v78);
          if (v82[2])
            v83 = (CoreML *)v82[2];
          else
            v83 = (CoreML *)&CoreML::Specification::_ActivationParams_default_instance_;
          CoreML::validateRecurrentActivationParams(v83, (CoreML::Result *)a3);
          goto LABEL_230;
        }
      }
    }
LABEL_229:
    *(_QWORD *)a3 = v92;
    *(_OWORD *)(a3 + 8) = __p;
    *(_QWORD *)(a3 + 24) = v94;
    __p = 0uLL;
    v94 = 0;
    goto LABEL_230;
  }
  std::operator+<char>();
  v66 = std::string::append(&v90, "' has invalid weightMatrix/recusionMatrix/Bias fields. Field value types should match and should either be half or full precision.");
  v67 = *(_OWORD *)&v66->__r_.__value_.__l.__data_;
  v87 = v66->__r_.__value_.__r.__words[2];
  *(_OWORD *)v86 = v67;
  v66->__r_.__value_.__l.__size_ = 0;
  v66->__r_.__value_.__r.__words[2] = 0;
  v66->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v90.__r_.__value_.__l.__data_);
LABEL_195:
  CoreML::Result::Result(&v90, 13);
  v70 = v90.__r_.__value_.__r.__words[0];
  v92 = v90.__r_.__value_.__r.__words[0];
  if (SHIBYTE(v94) < 0)
  {
    operator delete((void *)__p);
    v70 = v92;
  }
  __p = *(_OWORD *)&v90.__r_.__value_.__r.__words[1];
  v71 = v91;
  *(_QWORD *)a3 = v70;
  *(_OWORD *)(a3 + 8) = __p;
  *(_QWORD *)(a3 + 24) = v71;
  __p = 0uLL;
  v94 = 0;
  if (SHIBYTE(v87) < 0)
    operator delete(v86[0]);
LABEL_230:
  if (SHIBYTE(v94) < 0)
    operator delete((void *)__p);
}

void sub_218343124(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a41 < 0)
    operator delete(a36);
  _Unwind_Resume(exception_object);
}

CoreML::Result *CoreML::validateRecurrentActivationParams@<X0>(CoreML *this@<X0>, CoreML::Result *a2@<X8>)
{
  unsigned int v4;
  BOOL v5;
  uint64_t v6;
  const char *v10;
  size_t v11;
  uint64_t v12;
  void *__p;
  char v14;
  _QWORD v15[2];
  _QWORD v16[11];
  char v17;
  uint64_t v18;

  v4 = *((_DWORD *)this + 7);
  v5 = v4 > 0x29;
  v6 = (1 << v4) & 0x300C0000420;
  if (!v5 && v6 != 0)
    return CoreML::Result::Result(a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v15);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Recurrent non-linearity type ", 29);
  v10 = MLActivationParamsNonlinearityType_Name(*((_DWORD *)this + 7));
  v11 = strlen(v10);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v10, v11);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" is not supported in this version of CoreML.", 44);
  std::stringbuf::str();
  CoreML::Result::Result(a2, 13);
  if (v14 < 0)
    operator delete(__p);
  v15[0] = *MEMORY[0x24BEDB7F0];
  v12 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v15 + *(_QWORD *)(v15[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v16[0] = v12;
  v16[1] = MEMORY[0x24BEDB848] + 16;
  if (v17 < 0)
    operator delete((void *)v16[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return (CoreML::Result *)MEMORY[0x219A198F4](&v18);
}

void sub_218343340(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void CoreML::NeuralNetworkSpecValidator::validateGRULayer(CoreML::NeuralNetworkSpecValidator *this@<X0>, const CoreML::Specification::NeuralNetworkLayer *a2@<X1>, uint64_t a3@<X8>)
{
  _BOOL8 v6;
  char *v7;
  uint64_t *v8;
  int v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  int v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v27;
  _DWORD *v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  int v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  unsigned int v46;
  int v47;
  uint64_t v49;
  BOOL v50;
  BOOL v51;
  int *v53;
  char *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  int *v60;
  char *v61;
  int v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  unsigned int v75;
  int v76;
  uint64_t v78;
  BOOL v79;
  BOOL v80;
  int *v82;
  int *v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  char *v88;
  int *v89;
  char *v90;
  int v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  unsigned int v104;
  int v105;
  uint64_t v107;
  BOOL v108;
  BOOL v109;
  int *v111;
  int *v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  unint64_t v116;
  char *v117;
  int *v118;
  char *v119;
  int v120;
  uint64_t *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  int v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  int v132;
  unsigned int v133;
  int v134;
  uint64_t v136;
  BOOL v137;
  BOOL v138;
  int *v140;
  int *v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  unint64_t v145;
  char *v146;
  int *v147;
  char *v148;
  int v149;
  uint64_t *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  int v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  int v161;
  unsigned int v162;
  int v163;
  uint64_t v165;
  BOOL v166;
  BOOL v167;
  int *v169;
  int *v170;
  uint64_t v171;
  unint64_t v172;
  uint64_t v173;
  unint64_t v174;
  char *v175;
  int *v176;
  char *v177;
  int v178;
  uint64_t *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  int v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  int v190;
  unsigned int v191;
  int v192;
  uint64_t v194;
  BOOL v195;
  BOOL v196;
  int *v198;
  int *v199;
  uint64_t v200;
  unint64_t v201;
  uint64_t v202;
  unint64_t v203;
  char *v204;
  int *v205;
  char *v206;
  int v207;
  uint64_t *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  int v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  int v219;
  unsigned int v220;
  int v221;
  uint64_t v223;
  BOOL v224;
  BOOL v225;
  int *v227;
  int *v228;
  uint64_t v229;
  unint64_t v230;
  uint64_t v231;
  unint64_t v232;
  char *v233;
  int *v234;
  char *v235;
  int v236;
  uint64_t *v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  int v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  int v248;
  unsigned int v249;
  int v250;
  uint64_t v252;
  BOOL v253;
  BOOL v254;
  int *v256;
  uint64_t v257;
  unint64_t v258;
  uint64_t v259;
  unint64_t v260;
  char *v261;
  int *v262;
  char *v263;
  int v264;
  _DWORD *v265;
  int v266;
  int v267;
  int v268;
  const CoreML::Specification::WeightParams *v269;
  uint64_t v270;
  uint64_t *v271;
  uint64_t v272;
  const CoreML::Specification::WeightParams *v273;
  uint64_t *v274;
  uint64_t v275;
  uint64_t *v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t *v279;
  uint64_t v280;
  const CoreML::Specification::WeightParams *v281;
  uint64_t *v282;
  uint64_t v283;
  uint64_t *v284;
  uint64_t v285;
  const CoreML::Specification::WeightParams *v286;
  uint64_t *v287;
  uint64_t v288;
  uint64_t *v289;
  uint64_t v290;
  uint64_t *v291;
  uint64_t v292;
  uint64_t v293;
  CoreML **v294;
  uint64_t v295;
  uint64_t v296;
  BOOL v297;
  BOOL v298;
  std::string *v299;
  __int128 v300;
  void *v301[2];
  char v302;
  std::string v303;
  void *v304;
  char *v305;
  int *v306;
  void *__p[2];
  char v308;
  _BYTE v309[24];
  uint64_t v310;
  uint64_t v311;
  __int128 v312;
  uint64_t v313;

  CoreML::Result::Result((CoreML::Result *)&v311);
  CoreML::validateInputCount(a2, (const CoreML::Specification::NeuralNetworkLayer *)1, 2, (CoreML::Result *)v309);
  v311 = *(_QWORD *)v309;
  if (SHIBYTE(v313) < 0)
    operator delete((void *)v312);
  v312 = *(_OWORD *)&v309[8];
  v313 = v310;
  if (CoreML::Result::good((CoreML::Result *)&v311))
  {
    CoreML::validateOutputCount(a2, (const CoreML::Specification::NeuralNetworkLayer *)2, 2, (CoreML::Result *)v309);
    v311 = *(_QWORD *)v309;
    if (SHIBYTE(v313) < 0)
      operator delete((void *)v312);
    v312 = *(_OWORD *)&v309[8];
    v313 = v310;
  }
  if (!CoreML::Result::good((CoreML::Result *)&v311))
    goto LABEL_22;
  v6 = CoreML::Result::good((CoreML::Result *)&v311);
  if (!v6)
    goto LABEL_22;
  if (!*(_BYTE *)this)
    goto LABEL_20;
  std::string::basic_string[abi:ne180100]<0>(__p, "GRU");
  v7 = (char *)this + 32;
  CoreML::validateInputOutputRankEquality(a2, (uint64_t)__p, (uint64_t)v7, (CoreML::Result *)v309);
  v311 = *(_QWORD *)v309;
  if (SHIBYTE(v313) < 0)
    operator delete((void *)v312);
  v312 = *(_OWORD *)&v309[8];
  v313 = v310;
  HIBYTE(v310) = 0;
  v309[8] = 0;
  if (v308 < 0)
    operator delete(__p[0]);
  if (!CoreML::Result::good((CoreML::Result *)&v311))
    goto LABEL_22;
  std::string::basic_string[abi:ne180100]<0>(&v304, "GRU");
  CoreML::validateRankCount((uint64_t)a2, (uint64_t)&v304, 5, 5, (uint64_t)v7, (uint64_t)v309);
  v311 = *(_QWORD *)v309;
  if (SHIBYTE(v313) < 0)
    operator delete((void *)v312);
  v312 = *(_OWORD *)&v309[8];
  v313 = v310;
  HIBYTE(v310) = 0;
  v309[8] = 0;
  if (SHIBYTE(v306) < 0)
    operator delete(v304);
  v6 = CoreML::Result::good((CoreML::Result *)&v311);
  if (v6)
  {
LABEL_20:
    if (*((_DWORD *)a2 + 35) == 410)
      v8 = (uint64_t *)*((_QWORD *)a2 + 16);
    else
      v8 = CoreML::Specification::GRULayerParams::default_instance((CoreML::Specification::GRULayerParams *)v6);
    v9 = *((unsigned __int8 *)v8 + 129);
    v305 = 0;
    v306 = 0;
    v304 = 0;
    v10 = (uint64_t *)v8[5];
    if (!v10)
      v10 = &CoreML::Specification::_WeightParams_default_instance_;
    v11 = v10[5];
    v12 = *(unsigned __int8 *)(v11 + 23);
    if (*(char *)(v11 + 23) < 0)
      v13 = *(_QWORD *)(v11 + 8);
    else
      v13 = *(unsigned __int8 *)(v11 + 23);
    v14 = v10[6];
    v15 = *(unsigned __int8 *)(v14 + 23);
    if (*(char *)(v14 + 23) < 0)
      v16 = *(_QWORD *)(v14 + 8);
    else
      v16 = *(unsigned __int8 *)(v14 + 23);
    v17 = *((_DWORD *)v10 + 4);
    v18 = v10[7];
    v19 = *(unsigned __int8 *)(v18 + 23);
    if (*(char *)(v18 + 23) < 0)
      v20 = *(_QWORD *)(v18 + 8);
    else
      v20 = *(unsigned __int8 *)(v18 + 23);
    if (v17 <= 0)
      v21 = 1;
    else
      v21 = 2;
    if (v13)
      v22 = v21;
    else
      v22 = v17 > 0;
    if (v16)
      ++v22;
    if (v20)
      ++v22;
    if (v22 <= 1)
    {
      if (v22)
        v23 = 0;
      else
        v23 = 5;
      if (v17 <= 0 && v22)
      {
        if ((v12 & 0x80) != 0)
          v12 = *(_QWORD *)(v11 + 8);
        if (v12)
        {
          v23 = 1;
        }
        else
        {
          if ((v15 & 0x80) != 0)
            v15 = *(_QWORD *)(v14 + 8);
          v24 = v10[8];
          if (v10 != &CoreML::Specification::_WeightParams_default_instance_ && v15 && v24)
          {
            v23 = 2;
          }
          else
          {
            if ((v19 & 0x80) != 0)
              v19 = *(_QWORD *)(v18 + 8);
            if (v24)
              v25 = v19 == 0;
            else
              v25 = 1;
            if (v25 || v10 == &CoreML::Specification::_WeightParams_default_instance_)
              v23 = 5;
            else
              v23 = 3;
          }
        }
      }
    }
    else
    {
      v23 = 4;
    }
    v28 = std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v306, 1uLL);
    v29 = (char *)v304;
    v30 = v305;
    *v28 = v23;
    v31 = (char *)(v28 + 1);
    v32 = (char *)v28;
    while (v30 != v29)
    {
      v33 = *((_DWORD *)v30 - 1);
      v30 -= 4;
      *((_DWORD *)v32 - 1) = v33;
      v32 -= 4;
    }
    v304 = v32;
    v305 = (char *)(v28 + 1);
    v306 = &v28[v27];
    if (v29)
      operator delete(v29);
    v305 = (char *)(v28 + 1);
    v34 = (uint64_t *)v8[8];
    if (!v34)
      v34 = &CoreML::Specification::_WeightParams_default_instance_;
    v35 = v34[5];
    v36 = *(unsigned __int8 *)(v35 + 23);
    if (*(char *)(v35 + 23) < 0)
      v37 = *(_QWORD *)(v35 + 8);
    else
      v37 = *(unsigned __int8 *)(v35 + 23);
    v38 = v34[6];
    v39 = *(unsigned __int8 *)(v38 + 23);
    if (*(char *)(v38 + 23) < 0)
      v40 = *(_QWORD *)(v38 + 8);
    else
      v40 = *(unsigned __int8 *)(v38 + 23);
    v41 = *((_DWORD *)v34 + 4);
    v42 = v34[7];
    v43 = *(unsigned __int8 *)(v42 + 23);
    if (*(char *)(v42 + 23) < 0)
      v44 = *(_QWORD *)(v42 + 8);
    else
      v44 = *(unsigned __int8 *)(v42 + 23);
    if (v41 <= 0)
      v45 = 1;
    else
      v45 = 2;
    if (v37)
      v46 = v45;
    else
      v46 = v41 > 0;
    if (v40)
      ++v46;
    if (v44)
      ++v46;
    if (v46 <= 1)
    {
      if (v46)
        v47 = 0;
      else
        v47 = 5;
      if (v41 <= 0 && v46 != 0)
      {
        if ((v36 & 0x80) != 0)
          v36 = *(_QWORD *)(v35 + 8);
        if (v36)
        {
          v47 = 1;
        }
        else
        {
          if ((v39 & 0x80) != 0)
            v39 = *(_QWORD *)(v38 + 8);
          v49 = v34[8];
          if (v34 == &CoreML::Specification::_WeightParams_default_instance_
            || (v39 ? (v50 = v49 == 0) : (v50 = 1), v50))
          {
            if ((v43 & 0x80) != 0)
              v43 = *(_QWORD *)(v42 + 8);
            if (v49)
              v51 = v43 == 0;
            else
              v51 = 1;
            if (v51 || v34 == &CoreML::Specification::_WeightParams_default_instance_)
              v47 = 5;
            else
              v47 = 3;
          }
          else
          {
            v47 = 2;
          }
        }
      }
    }
    else
    {
      v47 = 4;
    }
    if (v31 >= (char *)v306)
    {
      v54 = (char *)v304;
      v55 = (v31 - (_BYTE *)v304) >> 2;
      v56 = v55 + 1;
      if ((unint64_t)(v55 + 1) >> 62)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      v57 = (char *)v306 - (_BYTE *)v304;
      if (((char *)v306 - (_BYTE *)v304) >> 1 > v56)
        v56 = v57 >> 1;
      if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFFCLL)
        v58 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v58 = v56;
      if (v58)
      {
        v59 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v306, v58);
        v54 = (char *)v304;
        v31 = v305;
      }
      else
      {
        v59 = 0;
      }
      v60 = (int *)&v59[4 * v55];
      v61 = &v59[4 * v58];
      *v60 = v47;
      v53 = v60 + 1;
      while (v31 != v54)
      {
        v62 = *((_DWORD *)v31 - 1);
        v31 -= 4;
        *--v60 = v62;
      }
      v304 = v60;
      v305 = (char *)v53;
      v306 = (int *)v61;
      if (v54)
        operator delete(v54);
    }
    else
    {
      v28[1] = v47;
      v53 = v28 + 2;
    }
    v305 = (char *)v53;
    v63 = (uint64_t *)v8[6];
    if (!v63)
      v63 = &CoreML::Specification::_WeightParams_default_instance_;
    v64 = v63[5];
    v65 = *(unsigned __int8 *)(v64 + 23);
    if (*(char *)(v64 + 23) < 0)
      v66 = *(_QWORD *)(v64 + 8);
    else
      v66 = *(unsigned __int8 *)(v64 + 23);
    v67 = v63[6];
    v68 = *(unsigned __int8 *)(v67 + 23);
    if (*(char *)(v67 + 23) < 0)
      v69 = *(_QWORD *)(v67 + 8);
    else
      v69 = *(unsigned __int8 *)(v67 + 23);
    v70 = *((_DWORD *)v63 + 4);
    v71 = v63[7];
    v72 = *(unsigned __int8 *)(v71 + 23);
    if (*(char *)(v71 + 23) < 0)
      v73 = *(_QWORD *)(v71 + 8);
    else
      v73 = *(unsigned __int8 *)(v71 + 23);
    if (v70 <= 0)
      v74 = 1;
    else
      v74 = 2;
    if (v66)
      v75 = v74;
    else
      v75 = v70 > 0;
    if (v69)
      ++v75;
    if (v73)
      ++v75;
    if (v75 <= 1)
    {
      if (v75)
        v76 = 0;
      else
        v76 = 5;
      if (v70 <= 0 && v75 != 0)
      {
        if ((v65 & 0x80) != 0)
          v65 = *(_QWORD *)(v64 + 8);
        if (v65)
        {
          v76 = 1;
        }
        else
        {
          if ((v68 & 0x80) != 0)
            v68 = *(_QWORD *)(v67 + 8);
          v78 = v63[8];
          if (v63 == &CoreML::Specification::_WeightParams_default_instance_
            || (v68 ? (v79 = v78 == 0) : (v79 = 1), v79))
          {
            if ((v72 & 0x80) != 0)
              v72 = *(_QWORD *)(v71 + 8);
            if (v78)
              v80 = v72 == 0;
            else
              v80 = 1;
            if (v80 || v63 == &CoreML::Specification::_WeightParams_default_instance_)
              v76 = 5;
            else
              v76 = 3;
          }
          else
          {
            v76 = 2;
          }
        }
      }
    }
    else
    {
      v76 = 4;
    }
    if (v53 >= v306)
    {
      v83 = (int *)v304;
      v84 = ((char *)v53 - (_BYTE *)v304) >> 2;
      v85 = v84 + 1;
      if ((unint64_t)(v84 + 1) >> 62)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      v86 = (char *)v306 - (_BYTE *)v304;
      if (((char *)v306 - (_BYTE *)v304) >> 1 > v85)
        v85 = v86 >> 1;
      if ((unint64_t)v86 >= 0x7FFFFFFFFFFFFFFCLL)
        v87 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v87 = v85;
      if (v87)
      {
        v88 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v306, v87);
        v83 = (int *)v304;
        v53 = (int *)v305;
      }
      else
      {
        v88 = 0;
      }
      v89 = (int *)&v88[4 * v84];
      v90 = &v88[4 * v87];
      *v89 = v76;
      v82 = v89 + 1;
      while (v53 != v83)
      {
        v91 = *--v53;
        *--v89 = v91;
      }
      v304 = v89;
      v305 = (char *)v82;
      v306 = (int *)v90;
      if (v83)
        operator delete(v83);
    }
    else
    {
      *v53 = v76;
      v82 = v53 + 1;
    }
    v305 = (char *)v82;
    v92 = (uint64_t *)v8[9];
    if (!v92)
      v92 = &CoreML::Specification::_WeightParams_default_instance_;
    v93 = v92[5];
    v94 = *(unsigned __int8 *)(v93 + 23);
    if (*(char *)(v93 + 23) < 0)
      v95 = *(_QWORD *)(v93 + 8);
    else
      v95 = *(unsigned __int8 *)(v93 + 23);
    v96 = v92[6];
    v97 = *(unsigned __int8 *)(v96 + 23);
    if (*(char *)(v96 + 23) < 0)
      v98 = *(_QWORD *)(v96 + 8);
    else
      v98 = *(unsigned __int8 *)(v96 + 23);
    v99 = *((_DWORD *)v92 + 4);
    v100 = v92[7];
    v101 = *(unsigned __int8 *)(v100 + 23);
    if (*(char *)(v100 + 23) < 0)
      v102 = *(_QWORD *)(v100 + 8);
    else
      v102 = *(unsigned __int8 *)(v100 + 23);
    if (v99 <= 0)
      v103 = 1;
    else
      v103 = 2;
    if (v95)
      v104 = v103;
    else
      v104 = v99 > 0;
    if (v98)
      ++v104;
    if (v102)
      ++v104;
    if (v104 <= 1)
    {
      if (v104)
        v105 = 0;
      else
        v105 = 5;
      if (v99 <= 0 && v104 != 0)
      {
        if ((v94 & 0x80) != 0)
          v94 = *(_QWORD *)(v93 + 8);
        if (v94)
        {
          v105 = 1;
        }
        else
        {
          if ((v97 & 0x80) != 0)
            v97 = *(_QWORD *)(v96 + 8);
          v107 = v92[8];
          if (v92 == &CoreML::Specification::_WeightParams_default_instance_
            || (v97 ? (v108 = v107 == 0) : (v108 = 1), v108))
          {
            if ((v101 & 0x80) != 0)
              v101 = *(_QWORD *)(v100 + 8);
            if (v107)
              v109 = v101 == 0;
            else
              v109 = 1;
            if (v109 || v92 == &CoreML::Specification::_WeightParams_default_instance_)
              v105 = 5;
            else
              v105 = 3;
          }
          else
          {
            v105 = 2;
          }
        }
      }
    }
    else
    {
      v105 = 4;
    }
    if (v82 >= v306)
    {
      v112 = (int *)v304;
      v113 = ((char *)v82 - (_BYTE *)v304) >> 2;
      v114 = v113 + 1;
      if ((unint64_t)(v113 + 1) >> 62)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      v115 = (char *)v306 - (_BYTE *)v304;
      if (((char *)v306 - (_BYTE *)v304) >> 1 > v114)
        v114 = v115 >> 1;
      if ((unint64_t)v115 >= 0x7FFFFFFFFFFFFFFCLL)
        v116 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v116 = v114;
      if (v116)
      {
        v117 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v306, v116);
        v112 = (int *)v304;
        v82 = (int *)v305;
      }
      else
      {
        v117 = 0;
      }
      v118 = (int *)&v117[4 * v113];
      v119 = &v117[4 * v116];
      *v118 = v105;
      v111 = v118 + 1;
      while (v82 != v112)
      {
        v120 = *--v82;
        *--v118 = v120;
      }
      v304 = v118;
      v305 = (char *)v111;
      v306 = (int *)v119;
      if (v112)
        operator delete(v112);
    }
    else
    {
      *v82 = v105;
      v111 = v82 + 1;
    }
    v305 = (char *)v111;
    v121 = (uint64_t *)v8[7];
    if (!v121)
      v121 = &CoreML::Specification::_WeightParams_default_instance_;
    v122 = v121[5];
    v123 = *(unsigned __int8 *)(v122 + 23);
    if (*(char *)(v122 + 23) < 0)
      v124 = *(_QWORD *)(v122 + 8);
    else
      v124 = *(unsigned __int8 *)(v122 + 23);
    v125 = v121[6];
    v126 = *(unsigned __int8 *)(v125 + 23);
    if (*(char *)(v125 + 23) < 0)
      v127 = *(_QWORD *)(v125 + 8);
    else
      v127 = *(unsigned __int8 *)(v125 + 23);
    v128 = *((_DWORD *)v121 + 4);
    v129 = v121[7];
    v130 = *(unsigned __int8 *)(v129 + 23);
    if (*(char *)(v129 + 23) < 0)
      v131 = *(_QWORD *)(v129 + 8);
    else
      v131 = *(unsigned __int8 *)(v129 + 23);
    if (v128 <= 0)
      v132 = 1;
    else
      v132 = 2;
    if (v124)
      v133 = v132;
    else
      v133 = v128 > 0;
    if (v127)
      ++v133;
    if (v131)
      ++v133;
    if (v133 <= 1)
    {
      if (v133)
        v134 = 0;
      else
        v134 = 5;
      if (v128 <= 0 && v133 != 0)
      {
        if ((v123 & 0x80) != 0)
          v123 = *(_QWORD *)(v122 + 8);
        if (v123)
        {
          v134 = 1;
        }
        else
        {
          if ((v126 & 0x80) != 0)
            v126 = *(_QWORD *)(v125 + 8);
          v136 = v121[8];
          if (v121 == &CoreML::Specification::_WeightParams_default_instance_
            || (v126 ? (v137 = v136 == 0) : (v137 = 1), v137))
          {
            if ((v130 & 0x80) != 0)
              v130 = *(_QWORD *)(v129 + 8);
            if (v136)
              v138 = v130 == 0;
            else
              v138 = 1;
            if (v138 || v121 == &CoreML::Specification::_WeightParams_default_instance_)
              v134 = 5;
            else
              v134 = 3;
          }
          else
          {
            v134 = 2;
          }
        }
      }
    }
    else
    {
      v134 = 4;
    }
    if (v111 >= v306)
    {
      v141 = (int *)v304;
      v142 = ((char *)v111 - (_BYTE *)v304) >> 2;
      v143 = v142 + 1;
      if ((unint64_t)(v142 + 1) >> 62)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      v144 = (char *)v306 - (_BYTE *)v304;
      if (((char *)v306 - (_BYTE *)v304) >> 1 > v143)
        v143 = v144 >> 1;
      if ((unint64_t)v144 >= 0x7FFFFFFFFFFFFFFCLL)
        v145 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v145 = v143;
      if (v145)
      {
        v146 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v306, v145);
        v141 = (int *)v304;
        v111 = (int *)v305;
      }
      else
      {
        v146 = 0;
      }
      v147 = (int *)&v146[4 * v142];
      v148 = &v146[4 * v145];
      *v147 = v134;
      v140 = v147 + 1;
      while (v111 != v141)
      {
        v149 = *--v111;
        *--v147 = v149;
      }
      v304 = v147;
      v305 = (char *)v140;
      v306 = (int *)v148;
      if (v141)
        operator delete(v141);
    }
    else
    {
      *v111 = v134;
      v140 = v111 + 1;
    }
    v305 = (char *)v140;
    v150 = (uint64_t *)v8[10];
    if (!v150)
      v150 = &CoreML::Specification::_WeightParams_default_instance_;
    v151 = v150[5];
    v152 = *(unsigned __int8 *)(v151 + 23);
    if (*(char *)(v151 + 23) < 0)
      v153 = *(_QWORD *)(v151 + 8);
    else
      v153 = *(unsigned __int8 *)(v151 + 23);
    v154 = v150[6];
    v155 = *(unsigned __int8 *)(v154 + 23);
    if (*(char *)(v154 + 23) < 0)
      v156 = *(_QWORD *)(v154 + 8);
    else
      v156 = *(unsigned __int8 *)(v154 + 23);
    v157 = *((_DWORD *)v150 + 4);
    v158 = v150[7];
    v159 = *(unsigned __int8 *)(v158 + 23);
    if (*(char *)(v158 + 23) < 0)
      v160 = *(_QWORD *)(v158 + 8);
    else
      v160 = *(unsigned __int8 *)(v158 + 23);
    if (v157 <= 0)
      v161 = 1;
    else
      v161 = 2;
    if (v153)
      v162 = v161;
    else
      v162 = v157 > 0;
    if (v156)
      ++v162;
    if (v160)
      ++v162;
    if (v162 <= 1)
    {
      if (v162)
        v163 = 0;
      else
        v163 = 5;
      if (v157 <= 0 && v162 != 0)
      {
        if ((v152 & 0x80) != 0)
          v152 = *(_QWORD *)(v151 + 8);
        if (v152)
        {
          v163 = 1;
        }
        else
        {
          if ((v155 & 0x80) != 0)
            v155 = *(_QWORD *)(v154 + 8);
          v165 = v150[8];
          if (v150 == &CoreML::Specification::_WeightParams_default_instance_
            || (v155 ? (v166 = v165 == 0) : (v166 = 1), v166))
          {
            if ((v159 & 0x80) != 0)
              v159 = *(_QWORD *)(v158 + 8);
            if (v165)
              v167 = v159 == 0;
            else
              v167 = 1;
            if (v167 || v150 == &CoreML::Specification::_WeightParams_default_instance_)
              v163 = 5;
            else
              v163 = 3;
          }
          else
          {
            v163 = 2;
          }
        }
      }
    }
    else
    {
      v163 = 4;
    }
    if (v140 >= v306)
    {
      v170 = (int *)v304;
      v171 = ((char *)v140 - (_BYTE *)v304) >> 2;
      v172 = v171 + 1;
      if ((unint64_t)(v171 + 1) >> 62)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      v173 = (char *)v306 - (_BYTE *)v304;
      if (((char *)v306 - (_BYTE *)v304) >> 1 > v172)
        v172 = v173 >> 1;
      if ((unint64_t)v173 >= 0x7FFFFFFFFFFFFFFCLL)
        v174 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v174 = v172;
      if (v174)
      {
        v175 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v306, v174);
        v170 = (int *)v304;
        v140 = (int *)v305;
      }
      else
      {
        v175 = 0;
      }
      v176 = (int *)&v175[4 * v171];
      v177 = &v175[4 * v174];
      *v176 = v163;
      v169 = v176 + 1;
      while (v140 != v170)
      {
        v178 = *--v140;
        *--v176 = v178;
      }
      v304 = v176;
      v305 = (char *)v169;
      v306 = (int *)v177;
      if (v170)
        operator delete(v170);
    }
    else
    {
      *v140 = v163;
      v169 = v140 + 1;
    }
    v305 = (char *)v169;
    if (v9)
    {
      v179 = (uint64_t *)v8[11];
      if (!v179)
        v179 = &CoreML::Specification::_WeightParams_default_instance_;
      v180 = v179[5];
      v181 = *(unsigned __int8 *)(v180 + 23);
      if (*(char *)(v180 + 23) < 0)
        v182 = *(_QWORD *)(v180 + 8);
      else
        v182 = *(unsigned __int8 *)(v180 + 23);
      v183 = v179[6];
      v184 = *(unsigned __int8 *)(v183 + 23);
      if (*(char *)(v183 + 23) < 0)
        v185 = *(_QWORD *)(v183 + 8);
      else
        v185 = *(unsigned __int8 *)(v183 + 23);
      v186 = *((_DWORD *)v179 + 4);
      v187 = v179[7];
      v188 = *(unsigned __int8 *)(v187 + 23);
      if (*(char *)(v187 + 23) < 0)
        v189 = *(_QWORD *)(v187 + 8);
      else
        v189 = *(unsigned __int8 *)(v187 + 23);
      if (v186 <= 0)
        v190 = 1;
      else
        v190 = 2;
      if (v182)
        v191 = v190;
      else
        v191 = v186 > 0;
      if (v185)
        ++v191;
      if (v189)
        ++v191;
      if (v191 <= 1)
      {
        if (v191)
          v192 = 0;
        else
          v192 = 5;
        if (v186 <= 0 && v191 != 0)
        {
          if ((v181 & 0x80) != 0)
            v181 = *(_QWORD *)(v180 + 8);
          if (v181)
          {
            v192 = 1;
          }
          else
          {
            if ((v184 & 0x80) != 0)
              v184 = *(_QWORD *)(v183 + 8);
            v194 = v179[8];
            if (v179 == &CoreML::Specification::_WeightParams_default_instance_
              || (v184 ? (v195 = v194 == 0) : (v195 = 1), v195))
            {
              if ((v188 & 0x80) != 0)
                v188 = *(_QWORD *)(v187 + 8);
              if (v194)
                v196 = v188 == 0;
              else
                v196 = 1;
              if (v196 || v179 == &CoreML::Specification::_WeightParams_default_instance_)
                v192 = 5;
              else
                v192 = 3;
            }
            else
            {
              v192 = 2;
            }
          }
        }
      }
      else
      {
        v192 = 4;
      }
      if (v169 >= v306)
      {
        v199 = (int *)v304;
        v200 = ((char *)v169 - (_BYTE *)v304) >> 2;
        v201 = v200 + 1;
        if ((unint64_t)(v200 + 1) >> 62)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v202 = (char *)v306 - (_BYTE *)v304;
        if (((char *)v306 - (_BYTE *)v304) >> 1 > v201)
          v201 = v202 >> 1;
        if ((unint64_t)v202 >= 0x7FFFFFFFFFFFFFFCLL)
          v203 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v203 = v201;
        if (v203)
        {
          v204 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v306, v203);
          v199 = (int *)v304;
          v169 = (int *)v305;
        }
        else
        {
          v204 = 0;
        }
        v205 = (int *)&v204[4 * v200];
        v206 = &v204[4 * v203];
        *v205 = v192;
        v198 = v205 + 1;
        while (v169 != v199)
        {
          v207 = *--v169;
          *--v205 = v207;
        }
        v304 = v205;
        v305 = (char *)v198;
        v306 = (int *)v206;
        if (v199)
          operator delete(v199);
      }
      else
      {
        *v169 = v192;
        v198 = v169 + 1;
      }
      v305 = (char *)v198;
      v208 = (uint64_t *)v8[12];
      if (!v208)
        v208 = &CoreML::Specification::_WeightParams_default_instance_;
      v209 = v208[5];
      v210 = *(unsigned __int8 *)(v209 + 23);
      if (*(char *)(v209 + 23) < 0)
        v211 = *(_QWORD *)(v209 + 8);
      else
        v211 = *(unsigned __int8 *)(v209 + 23);
      v212 = v208[6];
      v213 = *(unsigned __int8 *)(v212 + 23);
      if (*(char *)(v212 + 23) < 0)
        v214 = *(_QWORD *)(v212 + 8);
      else
        v214 = *(unsigned __int8 *)(v212 + 23);
      v215 = *((_DWORD *)v208 + 4);
      v216 = v208[7];
      v217 = *(unsigned __int8 *)(v216 + 23);
      if (*(char *)(v216 + 23) < 0)
        v218 = *(_QWORD *)(v216 + 8);
      else
        v218 = *(unsigned __int8 *)(v216 + 23);
      if (v215 <= 0)
        v219 = 1;
      else
        v219 = 2;
      if (v211)
        v220 = v219;
      else
        v220 = v215 > 0;
      if (v214)
        ++v220;
      if (v218)
        ++v220;
      if (v220 <= 1)
      {
        if (v220)
          v221 = 0;
        else
          v221 = 5;
        if (v215 <= 0 && v220 != 0)
        {
          if ((v210 & 0x80) != 0)
            v210 = *(_QWORD *)(v209 + 8);
          if (v210)
          {
            v221 = 1;
          }
          else
          {
            if ((v213 & 0x80) != 0)
              v213 = *(_QWORD *)(v212 + 8);
            v223 = v208[8];
            if (v208 == &CoreML::Specification::_WeightParams_default_instance_
              || (v213 ? (v224 = v223 == 0) : (v224 = 1), v224))
            {
              if ((v217 & 0x80) != 0)
                v217 = *(_QWORD *)(v216 + 8);
              if (v223)
                v225 = v217 == 0;
              else
                v225 = 1;
              if (v225 || v208 == &CoreML::Specification::_WeightParams_default_instance_)
                v221 = 5;
              else
                v221 = 3;
            }
            else
            {
              v221 = 2;
            }
          }
        }
      }
      else
      {
        v221 = 4;
      }
      if (v198 >= v306)
      {
        v228 = (int *)v304;
        v229 = ((char *)v198 - (_BYTE *)v304) >> 2;
        v230 = v229 + 1;
        if ((unint64_t)(v229 + 1) >> 62)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v231 = (char *)v306 - (_BYTE *)v304;
        if (((char *)v306 - (_BYTE *)v304) >> 1 > v230)
          v230 = v231 >> 1;
        if ((unint64_t)v231 >= 0x7FFFFFFFFFFFFFFCLL)
          v232 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v232 = v230;
        if (v232)
        {
          v233 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v306, v232);
          v228 = (int *)v304;
          v198 = (int *)v305;
        }
        else
        {
          v233 = 0;
        }
        v234 = (int *)&v233[4 * v229];
        v235 = &v233[4 * v232];
        *v234 = v221;
        v227 = v234 + 1;
        while (v198 != v228)
        {
          v236 = *--v198;
          *--v234 = v236;
        }
        v304 = v234;
        v305 = (char *)v227;
        v306 = (int *)v235;
        if (v228)
          operator delete(v228);
      }
      else
      {
        *v198 = v221;
        v227 = v198 + 1;
      }
      v305 = (char *)v227;
      v237 = (uint64_t *)v8[13];
      if (!v237)
        v237 = &CoreML::Specification::_WeightParams_default_instance_;
      v238 = v237[5];
      v239 = *(unsigned __int8 *)(v238 + 23);
      if (*(char *)(v238 + 23) < 0)
        v240 = *(_QWORD *)(v238 + 8);
      else
        v240 = *(unsigned __int8 *)(v238 + 23);
      v241 = v237[6];
      v242 = *(unsigned __int8 *)(v241 + 23);
      if (*(char *)(v241 + 23) < 0)
        v243 = *(_QWORD *)(v241 + 8);
      else
        v243 = *(unsigned __int8 *)(v241 + 23);
      v244 = *((_DWORD *)v237 + 4);
      v245 = v237[7];
      v246 = *(unsigned __int8 *)(v245 + 23);
      if (*(char *)(v245 + 23) < 0)
        v247 = *(_QWORD *)(v245 + 8);
      else
        v247 = *(unsigned __int8 *)(v245 + 23);
      if (v244 <= 0)
        v248 = 1;
      else
        v248 = 2;
      if (v240)
        v249 = v248;
      else
        v249 = v244 > 0;
      if (v243)
        ++v249;
      if (v247)
        ++v249;
      if (v249 <= 1)
      {
        if (v249)
          v250 = 0;
        else
          v250 = 5;
        if (v244 <= 0 && v249 != 0)
        {
          if ((v239 & 0x80) != 0)
            v239 = *(_QWORD *)(v238 + 8);
          if (v239)
          {
            v250 = 1;
          }
          else
          {
            if ((v242 & 0x80) != 0)
              v242 = *(_QWORD *)(v241 + 8);
            v252 = v237[8];
            if (v237 == &CoreML::Specification::_WeightParams_default_instance_
              || (v242 ? (v253 = v252 == 0) : (v253 = 1), v253))
            {
              if ((v246 & 0x80) != 0)
                v246 = *(_QWORD *)(v245 + 8);
              if (v252)
                v254 = v246 == 0;
              else
                v254 = 1;
              if (v254 || v237 == &CoreML::Specification::_WeightParams_default_instance_)
                v250 = 5;
              else
                v250 = 3;
            }
            else
            {
              v250 = 2;
            }
          }
        }
      }
      else
      {
        v250 = 4;
      }
      if (v227 >= v306)
      {
        v256 = (int *)v304;
        v257 = ((char *)v227 - (_BYTE *)v304) >> 2;
        v258 = v257 + 1;
        if ((unint64_t)(v257 + 1) >> 62)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v259 = (char *)v306 - (_BYTE *)v304;
        if (((char *)v306 - (_BYTE *)v304) >> 1 > v258)
          v258 = v259 >> 1;
        if ((unint64_t)v259 >= 0x7FFFFFFFFFFFFFFCLL)
          v260 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v260 = v258;
        if (v260)
        {
          v261 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v306, v260);
          v256 = (int *)v304;
          v227 = (int *)v305;
        }
        else
        {
          v261 = 0;
        }
        v262 = (int *)&v261[4 * v257];
        v263 = &v261[4 * v260];
        *v262 = v250;
        v169 = v262 + 1;
        while (v227 != v256)
        {
          v264 = *--v227;
          *--v262 = v264;
        }
        v304 = v262;
        v305 = (char *)v169;
        v306 = (int *)v263;
        if (v256)
          operator delete(v256);
      }
      else
      {
        *v227 = v250;
        v169 = v227 + 1;
      }
      v305 = (char *)v169;
    }
    v265 = v304;
    if (v304 == v169)
    {
LABEL_643:
      v270 = v8[14];
      v269 = (const CoreML::Specification::WeightParams *)v8[15];
      if (v8[5])
        v271 = (uint64_t *)v8[5];
      else
        v271 = &CoreML::Specification::_WeightParams_default_instance_;
      std::string::basic_string[abi:ne180100]<0>(&v303, "GRU");
      v272 = *((_QWORD *)a2 + 14);
      std::string::basic_string[abi:ne180100]<0>(v301, "update gate weight matrix");
      v273 = (const CoreML::Specification::WeightParams *)((_QWORD)v269 * v270);
      CoreML::validateGeneralWeightParams((uint64_t)v271, v273, v269, (const void **)&v303.__r_.__value_.__l.__data_, v272, (uint64_t)v301, (uint64_t)v309);
      v311 = *(_QWORD *)v309;
      if (SHIBYTE(v313) < 0)
        operator delete((void *)v312);
      v312 = *(_OWORD *)&v309[8];
      v313 = v310;
      HIBYTE(v310) = 0;
      v309[8] = 0;
      if (v302 < 0)
        operator delete(v301[0]);
      if (SHIBYTE(v303.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v303.__r_.__value_.__l.__data_);
      if (CoreML::Result::good((CoreML::Result *)&v311))
      {
        if (v8[6])
          v274 = (uint64_t *)v8[6];
        else
          v274 = &CoreML::Specification::_WeightParams_default_instance_;
        std::string::basic_string[abi:ne180100]<0>(&v303, "GRU");
        v275 = *((_QWORD *)a2 + 14);
        std::string::basic_string[abi:ne180100]<0>(v301, "reset gate weight matrix");
        CoreML::validateGeneralWeightParams((uint64_t)v274, v273, v269, (const void **)&v303.__r_.__value_.__l.__data_, v275, (uint64_t)v301, (uint64_t)v309);
        v311 = *(_QWORD *)v309;
        if (SHIBYTE(v313) < 0)
          operator delete((void *)v312);
        v312 = *(_OWORD *)&v309[8];
        v313 = v310;
        HIBYTE(v310) = 0;
        v309[8] = 0;
        if (v302 < 0)
          operator delete(v301[0]);
        if (SHIBYTE(v303.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v303.__r_.__value_.__l.__data_);
        if (CoreML::Result::good((CoreML::Result *)&v311))
        {
          if (v8[7])
            v276 = (uint64_t *)v8[7];
          else
            v276 = &CoreML::Specification::_WeightParams_default_instance_;
          std::string::basic_string[abi:ne180100]<0>(&v303, "GRU");
          v277 = *((_QWORD *)a2 + 14);
          std::string::basic_string[abi:ne180100]<0>(v301, "output gate weight matrix");
          CoreML::validateGeneralWeightParams((uint64_t)v276, v273, v269, (const void **)&v303.__r_.__value_.__l.__data_, v277, (uint64_t)v301, (uint64_t)v309);
          v311 = *(_QWORD *)v309;
          if (SHIBYTE(v313) < 0)
            operator delete((void *)v312);
          v312 = *(_OWORD *)&v309[8];
          v313 = v310;
          HIBYTE(v310) = 0;
          v309[8] = 0;
          if (v302 < 0)
            operator delete(v301[0]);
          if (SHIBYTE(v303.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v303.__r_.__value_.__l.__data_);
          if (CoreML::Result::good((CoreML::Result *)&v311))
          {
            v278 = v8[15];
            if (v8[8])
              v279 = (uint64_t *)v8[8];
            else
              v279 = &CoreML::Specification::_WeightParams_default_instance_;
            std::string::basic_string[abi:ne180100]<0>(&v303, "GRU");
            v280 = *((_QWORD *)a2 + 14);
            std::string::basic_string[abi:ne180100]<0>(v301, "update gate recursion matrix");
            v281 = (const CoreML::Specification::WeightParams *)(v278 * v278);
            CoreML::validateGeneralWeightParams((uint64_t)v279, v281, v269, (const void **)&v303.__r_.__value_.__l.__data_, v280, (uint64_t)v301, (uint64_t)v309);
            v311 = *(_QWORD *)v309;
            if (SHIBYTE(v313) < 0)
              operator delete((void *)v312);
            v312 = *(_OWORD *)&v309[8];
            v313 = v310;
            HIBYTE(v310) = 0;
            v309[8] = 0;
            if (v302 < 0)
              operator delete(v301[0]);
            if (SHIBYTE(v303.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v303.__r_.__value_.__l.__data_);
            if (CoreML::Result::good((CoreML::Result *)&v311))
            {
              if (v8[9])
                v282 = (uint64_t *)v8[9];
              else
                v282 = &CoreML::Specification::_WeightParams_default_instance_;
              std::string::basic_string[abi:ne180100]<0>(&v303, "GRU");
              v283 = *((_QWORD *)a2 + 14);
              std::string::basic_string[abi:ne180100]<0>(v301, "reset gate recursion matrix");
              CoreML::validateGeneralWeightParams((uint64_t)v282, v281, v269, (const void **)&v303.__r_.__value_.__l.__data_, v283, (uint64_t)v301, (uint64_t)v309);
              v311 = *(_QWORD *)v309;
              if (SHIBYTE(v313) < 0)
                operator delete((void *)v312);
              v312 = *(_OWORD *)&v309[8];
              v313 = v310;
              HIBYTE(v310) = 0;
              v309[8] = 0;
              if (v302 < 0)
                operator delete(v301[0]);
              if (SHIBYTE(v303.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v303.__r_.__value_.__l.__data_);
              if (CoreML::Result::good((CoreML::Result *)&v311))
              {
                if (v8[10])
                  v284 = (uint64_t *)v8[10];
                else
                  v284 = &CoreML::Specification::_WeightParams_default_instance_;
                std::string::basic_string[abi:ne180100]<0>(&v303, "GRU");
                v285 = *((_QWORD *)a2 + 14);
                std::string::basic_string[abi:ne180100]<0>(v301, "output gate recursion matrix");
                CoreML::validateGeneralWeightParams((uint64_t)v284, v281, v269, (const void **)&v303.__r_.__value_.__l.__data_, v285, (uint64_t)v301, (uint64_t)v309);
                v311 = *(_QWORD *)v309;
                if (SHIBYTE(v313) < 0)
                  operator delete((void *)v312);
                v312 = *(_OWORD *)&v309[8];
                v313 = v310;
                HIBYTE(v310) = 0;
                v309[8] = 0;
                if (v302 < 0)
                  operator delete(v301[0]);
                if (SHIBYTE(v303.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v303.__r_.__value_.__l.__data_);
                if (CoreML::Result::good((CoreML::Result *)&v311))
                {
                  if (!v9)
                    goto LABEL_734;
                  v286 = (const CoreML::Specification::WeightParams *)v8[15];
                  if (v8[11])
                    v287 = (uint64_t *)v8[11];
                  else
                    v287 = &CoreML::Specification::_WeightParams_default_instance_;
                  std::string::basic_string[abi:ne180100]<0>(&v303, "GRU");
                  v288 = *((_QWORD *)a2 + 14);
                  std::string::basic_string[abi:ne180100]<0>(v301, "update gate bias vector");
                  CoreML::validateGeneralWeightParams((uint64_t)v287, v286, (const CoreML::Specification::WeightParams *)1, (const void **)&v303.__r_.__value_.__l.__data_, v288, (uint64_t)v301, (uint64_t)v309);
                  v311 = *(_QWORD *)v309;
                  if (SHIBYTE(v313) < 0)
                    operator delete((void *)v312);
                  v312 = *(_OWORD *)&v309[8];
                  v313 = v310;
                  HIBYTE(v310) = 0;
                  v309[8] = 0;
                  if (v302 < 0)
                    operator delete(v301[0]);
                  if (SHIBYTE(v303.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v303.__r_.__value_.__l.__data_);
                  if (CoreML::Result::good((CoreML::Result *)&v311))
                  {
                    if (v8[12])
                      v289 = (uint64_t *)v8[12];
                    else
                      v289 = &CoreML::Specification::_WeightParams_default_instance_;
                    std::string::basic_string[abi:ne180100]<0>(&v303, "GRU");
                    v290 = *((_QWORD *)a2 + 14);
                    std::string::basic_string[abi:ne180100]<0>(v301, "reset gate bias vector");
                    CoreML::validateGeneralWeightParams((uint64_t)v289, v286, (const CoreML::Specification::WeightParams *)1, (const void **)&v303.__r_.__value_.__l.__data_, v290, (uint64_t)v301, (uint64_t)v309);
                    v311 = *(_QWORD *)v309;
                    if (SHIBYTE(v313) < 0)
                      operator delete((void *)v312);
                    v312 = *(_OWORD *)&v309[8];
                    v313 = v310;
                    HIBYTE(v310) = 0;
                    v309[8] = 0;
                    if (v302 < 0)
                      operator delete(v301[0]);
                    if (SHIBYTE(v303.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v303.__r_.__value_.__l.__data_);
                    if (CoreML::Result::good((CoreML::Result *)&v311))
                    {
                      if (v8[13])
                        v291 = (uint64_t *)v8[13];
                      else
                        v291 = &CoreML::Specification::_WeightParams_default_instance_;
                      std::string::basic_string[abi:ne180100]<0>(&v303, "GRU");
                      v292 = *((_QWORD *)a2 + 14);
                      std::string::basic_string[abi:ne180100]<0>(v301, "output gate bias vector");
                      CoreML::validateGeneralWeightParams((uint64_t)v291, v286, (const CoreML::Specification::WeightParams *)1, (const void **)&v303.__r_.__value_.__l.__data_, v292, (uint64_t)v301, (uint64_t)v309);
                      v311 = *(_QWORD *)v309;
                      if (SHIBYTE(v313) < 0)
                        operator delete((void *)v312);
                      v312 = *(_OWORD *)&v309[8];
                      v313 = v310;
                      HIBYTE(v310) = 0;
                      v309[8] = 0;
                      if (v302 < 0)
                        operator delete(v301[0]);
                      if (SHIBYTE(v303.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(v303.__r_.__value_.__l.__data_);
                      if (CoreML::Result::good((CoreML::Result *)&v311))
                      {
LABEL_734:
                        v293 = v8[4];
                        if (v293)
                          v294 = (CoreML **)(v293 + 8);
                        else
                          v294 = 0;
                        v295 = *((int *)v8 + 6);
                        if ((_DWORD)v295)
                        {
                          v296 = 8 * v295 - 8;
                          do
                          {
                            CoreML::validateRecurrentActivationParams(*v294, (CoreML::Result *)v309);
                            v311 = *(_QWORD *)v309;
                            if (SHIBYTE(v313) < 0)
                              operator delete((void *)v312);
                            v312 = *(_OWORD *)&v309[8];
                            v313 = v310;
                            v297 = CoreML::Result::good((CoreML::Result *)&v311);
                            ++v294;
                            if (v296)
                              v298 = v297;
                            else
                              v298 = 0;
                            v296 -= 8;
                          }
                          while (v298);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      *(_QWORD *)a3 = v311;
      *(_OWORD *)(a3 + 8) = v312;
      *(_QWORD *)(a3 + 24) = v313;
      v312 = 0uLL;
      v313 = 0;
    }
    else
    {
      v266 = 0;
      v267 = 0;
      while (1)
      {
        v268 = *v265 ? v266 : v266 + 1;
        if (*v265 == 1)
          ++v267;
        else
          v266 = v268;
        if (v266 * v267 >= 1)
          break;
        if (++v265 == v169)
          goto LABEL_643;
      }
      std::operator+<char>();
      v299 = std::string::append(&v303, "' has invalid weight/recursion matrix or bias fields. Field value types should match and should be either half or full precision");
      v300 = *(_OWORD *)&v299->__r_.__value_.__l.__data_;
      *(_QWORD *)&v309[16] = *((_QWORD *)&v299->__r_.__value_.__l + 2);
      *(_OWORD *)v309 = v300;
      v299->__r_.__value_.__l.__size_ = 0;
      v299->__r_.__value_.__r.__words[2] = 0;
      v299->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v303.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v303.__r_.__value_.__l.__data_);
      CoreML::Result::Result((_DWORD *)a3, 13);
      if ((v309[23] & 0x80000000) != 0)
        operator delete(*(void **)v309);
    }
    if (v304)
    {
      v305 = (char *)v304;
      operator delete(v304);
    }
    if (SHIBYTE(v313) < 0)
      operator delete((void *)v312);
  }
  else
  {
LABEL_22:
    *(_QWORD *)a3 = v311;
    *(_OWORD *)(a3 + 8) = v312;
    *(_QWORD *)(a3 + 24) = v313;
  }
}

void sub_218344C9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  uint64_t v38;

  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a21)
    operator delete(a21);
  if (*(char *)(v38 - 89) < 0)
    operator delete(*(void **)(v38 - 112));
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateUniDirectionalLSTMLayer(CoreML::NeuralNetworkSpecValidator *this@<X0>, const CoreML::Specification::NeuralNetworkLayer *a2@<X1>, uint64_t a3@<X8>)
{
  _BOOL8 v6;
  char *v7;
  uint64_t *v8;
  uint64_t v9;
  CoreML **v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  const CoreML::Specification::LSTMParams *v17;
  _BOOL8 v18;
  uint64_t *v19;
  const CoreML::Specification::WeightParams *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  const CoreML::Specification::WeightParams *v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t *v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t *v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t *v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t *v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t *v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t *v82;
  uint64_t *v83;
  uint64_t v84;
  std::string *v85;
  __int128 v86;
  void *v87[2];
  char v88;
  _BYTE __p[24];
  uint64_t v90;
  std::string v91;
  uint64_t v92;
  __int128 v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t *v96;
  uint64_t v97;
  const CoreML::Specification::WeightParams *v98;
  _BYTE v99[32];
  void *v100[2];
  char v101;
  uint64_t v102;
  __int128 v103;
  uint64_t v104;

  CoreML::Result::Result((CoreML::Result *)&v102);
  CoreML::validateInputCount(a2, (const CoreML::Specification::NeuralNetworkLayer *)1, 3, (CoreML::Result *)&v92);
  v102 = v92;
  if (SHIBYTE(v104) < 0)
    operator delete((void *)v103);
  v103 = v93;
  v104 = v94;
  if (CoreML::Result::good((CoreML::Result *)&v102))
  {
    CoreML::validateOutputCount(a2, (const CoreML::Specification::NeuralNetworkLayer *)3, 3, (CoreML::Result *)&v92);
    v102 = v92;
    if (SHIBYTE(v104) < 0)
      operator delete((void *)v103);
    v103 = v93;
    v104 = v94;
  }
  if (!CoreML::Result::good((CoreML::Result *)&v102))
    goto LABEL_52;
  v6 = CoreML::Result::good((CoreML::Result *)&v102);
  if (!v6)
    goto LABEL_52;
  if (*(_BYTE *)this)
  {
    std::string::basic_string[abi:ne180100]<0>(v100, "UniDirectionalLSTM");
    v7 = (char *)this + 32;
    CoreML::validateInputOutputRankEquality(a2, (uint64_t)v100, (uint64_t)v7, (CoreML::Result *)&v92);
    v102 = v92;
    if (SHIBYTE(v104) < 0)
      operator delete((void *)v103);
    v103 = v93;
    v104 = v94;
    HIBYTE(v94) = 0;
    LOBYTE(v93) = 0;
    if (v101 < 0)
      operator delete(v100[0]);
    if (!CoreML::Result::good((CoreML::Result *)&v102))
      goto LABEL_52;
    std::string::basic_string[abi:ne180100]<0>(__p, "UniDirectionalLSTM");
    CoreML::validateRankCount((uint64_t)a2, (uint64_t)__p, 5, 5, (uint64_t)v7, (uint64_t)&v92);
    v102 = v92;
    if (SHIBYTE(v104) < 0)
      operator delete((void *)v103);
    v103 = v93;
    v104 = v94;
    HIBYTE(v94) = 0;
    LOBYTE(v93) = 0;
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    v6 = CoreML::Result::good((CoreML::Result *)&v102);
    if (!v6)
      goto LABEL_52;
  }
  if (*((_DWORD *)a2 + 35) == 420)
    v8 = (uint64_t *)*((_QWORD *)a2 + 16);
  else
    v8 = CoreML::Specification::UniDirectionalLSTMLayerParams::default_instance((CoreML::Specification::UniDirectionalLSTMLayerParams *)v6);
  v9 = v8[4];
  if (v9)
    v10 = (CoreML **)(v9 + 8);
  else
    v10 = 0;
  v11 = *((int *)v8 + 6);
  if ((_DWORD)v11)
  {
    v12 = 8 * v11 - 8;
    do
    {
      CoreML::validateRecurrentActivationParams(*v10, (CoreML::Result *)&v92);
      v102 = v92;
      if (SHIBYTE(v104) < 0)
        operator delete((void *)v103);
      v103 = v93;
      v104 = v94;
      v8 = (uint64_t *)CoreML::Result::good((CoreML::Result *)&v102);
      ++v10;
      if (v12)
        v13 = (char)v8;
      else
        v13 = 0;
      v12 -= 8;
    }
    while ((v13 & 1) != 0);
  }
  if (*((_DWORD *)a2 + 35) == 420)
  {
    v14 = (uint64_t *)*((_QWORD *)a2 + 16);
    if (v14[6])
      v15 = (uint64_t *)v14[6];
    else
      v15 = &CoreML::Specification::_LSTMWeightParams_default_instance_;
  }
  else
  {
    v16 = CoreML::Specification::UniDirectionalLSTMLayerParams::default_instance((CoreML::Specification::UniDirectionalLSTMLayerParams *)v8);
    if (v16[6])
      v15 = (uint64_t *)v16[6];
    else
      v15 = &CoreML::Specification::_LSTMWeightParams_default_instance_;
    if (*((_DWORD *)a2 + 35) == 420)
      v14 = (uint64_t *)*((_QWORD *)a2 + 16);
    else
      v14 = CoreML::Specification::UniDirectionalLSTMLayerParams::default_instance((CoreML::Specification::UniDirectionalLSTMLayerParams *)v16);
  }
  if (v14[5])
    v17 = (const CoreML::Specification::LSTMParams *)v14[5];
  else
    v17 = (const CoreML::Specification::LSTMParams *)&CoreML::Specification::_LSTMParams_default_instance_;
  CoreML::Specification::LSTMParams::LSTMParams((CoreML::Specification::LSTMParams *)v99, v17);
  CoreML::validateLSTMWeightParams(v15, (uint64_t)v99, (CoreML::Result *)&v92);
  v102 = v92;
  if (SHIBYTE(v104) < 0)
    operator delete((void *)v103);
  v103 = v93;
  v104 = v94;
  HIBYTE(v94) = 0;
  LOBYTE(v93) = 0;
  CoreML::Specification::LSTMParams::~LSTMParams((CoreML::Specification::LSTMParams *)v99);
  v18 = CoreML::Result::good((CoreML::Result *)&v102);
  if (!v18)
  {
LABEL_52:
    *(_QWORD *)a3 = v102;
    *(_OWORD *)(a3 + 8) = v103;
    *(_QWORD *)(a3 + 24) = v104;
    return;
  }
  if (*((_DWORD *)a2 + 35) == 420)
    v19 = (uint64_t *)*((_QWORD *)a2 + 16);
  else
    v19 = CoreML::Specification::UniDirectionalLSTMLayerParams::default_instance((CoreML::Specification::UniDirectionalLSTMLayerParams *)v18);
  CoreML::Specification::UniDirectionalLSTMLayerParams::UniDirectionalLSTMLayerParams((CoreML::Specification::UniDirectionalLSTMLayerParams *)&v92, (const CoreML::Specification::UniDirectionalLSTMLayerParams *)v19);
  if ((_DWORD)v94 != 3)
  {
    std::operator+<char>();
    v85 = std::string::append(&v91, " must provide 3 activations");
    v86 = *(_OWORD *)&v85->__r_.__value_.__l.__data_;
    *(_QWORD *)&__p[16] = *((_QWORD *)&v85->__r_.__value_.__l + 2);
    *(_OWORD *)__p = v86;
    v85->__r_.__value_.__l.__size_ = 0;
    v85->__r_.__value_.__r.__words[2] = 0;
    v85->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v91.__r_.__value_.__l.__data_);
    CoreML::Result::Result((_DWORD *)a3, 13);
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    goto LABEL_249;
  }
  v21 = v97;
  v20 = v98;
  v22 = v96;
  if (!v96)
    v22 = &CoreML::Specification::_LSTMWeightParams_default_instance_;
  v23 = (uint64_t *)v22[2];
  if (v23)
    v24 = v23;
  else
    v24 = &CoreML::Specification::_WeightParams_default_instance_;
  std::string::basic_string[abi:ne180100]<0>(&v91, "Unidirectional LSTM");
  v25 = *((_QWORD *)a2 + 14);
  std::string::basic_string[abi:ne180100]<0>(v87, "input gate weight matrix");
  v26 = (const CoreML::Specification::WeightParams *)(v21 * (_QWORD)v20);
  CoreML::validateGeneralWeightParams((uint64_t)v24, v26, v20, (const void **)&v91.__r_.__value_.__l.__data_, v25, (uint64_t)v87, (uint64_t)__p);
  v102 = *(_QWORD *)__p;
  if (SHIBYTE(v104) < 0)
    operator delete((void *)v103);
  v103 = *(_OWORD *)&__p[8];
  v104 = v90;
  HIBYTE(v90) = 0;
  __p[8] = 0;
  if (v88 < 0)
    operator delete(v87[0]);
  if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v91.__r_.__value_.__l.__data_);
  if (CoreML::Result::good((CoreML::Result *)&v102))
  {
    v27 = v96;
    if (!v96)
      v27 = &CoreML::Specification::_LSTMWeightParams_default_instance_;
    v28 = (uint64_t *)v27[3];
    if (v28)
      v29 = v28;
    else
      v29 = &CoreML::Specification::_WeightParams_default_instance_;
    std::string::basic_string[abi:ne180100]<0>(&v91, "Unidirectional LSTM");
    v30 = *((_QWORD *)a2 + 14);
    std::string::basic_string[abi:ne180100]<0>(v87, "forget gate weight matrix");
    CoreML::validateGeneralWeightParams((uint64_t)v29, v26, v20, (const void **)&v91.__r_.__value_.__l.__data_, v30, (uint64_t)v87, (uint64_t)__p);
    v102 = *(_QWORD *)__p;
    if (SHIBYTE(v104) < 0)
      operator delete((void *)v103);
    v103 = *(_OWORD *)&__p[8];
    v104 = v90;
    HIBYTE(v90) = 0;
    __p[8] = 0;
    if (v88 < 0)
      operator delete(v87[0]);
    if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v91.__r_.__value_.__l.__data_);
    if (CoreML::Result::good((CoreML::Result *)&v102))
    {
      v31 = v96;
      if (!v96)
        v31 = &CoreML::Specification::_LSTMWeightParams_default_instance_;
      v32 = (uint64_t *)v31[4];
      if (v32)
        v33 = v32;
      else
        v33 = &CoreML::Specification::_WeightParams_default_instance_;
      std::string::basic_string[abi:ne180100]<0>(&v91, "Unidirectional LSTM");
      v34 = *((_QWORD *)a2 + 14);
      std::string::basic_string[abi:ne180100]<0>(v87, "block input gate weight matrix");
      CoreML::validateGeneralWeightParams((uint64_t)v33, v26, v20, (const void **)&v91.__r_.__value_.__l.__data_, v34, (uint64_t)v87, (uint64_t)__p);
      v102 = *(_QWORD *)__p;
      if (SHIBYTE(v104) < 0)
        operator delete((void *)v103);
      v103 = *(_OWORD *)&__p[8];
      v104 = v90;
      HIBYTE(v90) = 0;
      __p[8] = 0;
      if (v88 < 0)
        operator delete(v87[0]);
      if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v91.__r_.__value_.__l.__data_);
      if (CoreML::Result::good((CoreML::Result *)&v102))
      {
        v35 = v96;
        if (!v96)
          v35 = &CoreML::Specification::_LSTMWeightParams_default_instance_;
        v36 = (uint64_t *)v35[5];
        if (v36)
          v37 = v36;
        else
          v37 = &CoreML::Specification::_WeightParams_default_instance_;
        std::string::basic_string[abi:ne180100]<0>(&v91, "Unidirectional LSTM");
        v38 = *((_QWORD *)a2 + 14);
        std::string::basic_string[abi:ne180100]<0>(v87, "output gate weight matrix");
        CoreML::validateGeneralWeightParams((uint64_t)v37, v26, v20, (const void **)&v91.__r_.__value_.__l.__data_, v38, (uint64_t)v87, (uint64_t)__p);
        v102 = *(_QWORD *)__p;
        if (SHIBYTE(v104) < 0)
          operator delete((void *)v103);
        v103 = *(_OWORD *)&__p[8];
        v104 = v90;
        HIBYTE(v90) = 0;
        __p[8] = 0;
        if (v88 < 0)
          operator delete(v87[0]);
        if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v91.__r_.__value_.__l.__data_);
        if (CoreML::Result::good((CoreML::Result *)&v102))
        {
          v39 = v96;
          if (!v96)
            v39 = &CoreML::Specification::_LSTMWeightParams_default_instance_;
          v40 = (uint64_t *)v39[6];
          if (v40)
            v41 = v40;
          else
            v41 = &CoreML::Specification::_WeightParams_default_instance_;
          std::string::basic_string[abi:ne180100]<0>(&v91, "Unidirectional LSTM");
          v42 = *((_QWORD *)a2 + 14);
          std::string::basic_string[abi:ne180100]<0>(v87, "input gate recursion matrix");
          CoreML::validateGeneralWeightParams((uint64_t)v41, (const CoreML::Specification::WeightParams *)((_QWORD)v20 * (_QWORD)v20), v20, (const void **)&v91.__r_.__value_.__l.__data_, v42, (uint64_t)v87, (uint64_t)__p);
          v102 = *(_QWORD *)__p;
          if (SHIBYTE(v104) < 0)
            operator delete((void *)v103);
          v103 = *(_OWORD *)&__p[8];
          v104 = v90;
          HIBYTE(v90) = 0;
          __p[8] = 0;
          if (v88 < 0)
            operator delete(v87[0]);
          if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v91.__r_.__value_.__l.__data_);
          if (CoreML::Result::good((CoreML::Result *)&v102))
          {
            v43 = v96;
            if (!v96)
              v43 = &CoreML::Specification::_LSTMWeightParams_default_instance_;
            v44 = (uint64_t *)v43[7];
            if (v44)
              v45 = v44;
            else
              v45 = &CoreML::Specification::_WeightParams_default_instance_;
            std::string::basic_string[abi:ne180100]<0>(&v91, "Unidirectional LSTM");
            v46 = *((_QWORD *)a2 + 14);
            std::string::basic_string[abi:ne180100]<0>(v87, "forget gate recursion matrix");
            CoreML::validateGeneralWeightParams((uint64_t)v45, (const CoreML::Specification::WeightParams *)((_QWORD)v20 * (_QWORD)v20), v20, (const void **)&v91.__r_.__value_.__l.__data_, v46, (uint64_t)v87, (uint64_t)__p);
            v102 = *(_QWORD *)__p;
            if (SHIBYTE(v104) < 0)
              operator delete((void *)v103);
            v103 = *(_OWORD *)&__p[8];
            v104 = v90;
            HIBYTE(v90) = 0;
            __p[8] = 0;
            if (v88 < 0)
              operator delete(v87[0]);
            if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v91.__r_.__value_.__l.__data_);
            if (CoreML::Result::good((CoreML::Result *)&v102))
            {
              v47 = v96;
              if (!v96)
                v47 = &CoreML::Specification::_LSTMWeightParams_default_instance_;
              v48 = (uint64_t *)v47[8];
              if (v48)
                v49 = v48;
              else
                v49 = &CoreML::Specification::_WeightParams_default_instance_;
              std::string::basic_string[abi:ne180100]<0>(&v91, "Unidirectional LSTM");
              v50 = *((_QWORD *)a2 + 14);
              std::string::basic_string[abi:ne180100]<0>(v87, "block input gate recursion matrix");
              CoreML::validateGeneralWeightParams((uint64_t)v49, (const CoreML::Specification::WeightParams *)((_QWORD)v20 * (_QWORD)v20), v20, (const void **)&v91.__r_.__value_.__l.__data_, v50, (uint64_t)v87, (uint64_t)__p);
              v102 = *(_QWORD *)__p;
              if (SHIBYTE(v104) < 0)
                operator delete((void *)v103);
              v103 = *(_OWORD *)&__p[8];
              v104 = v90;
              HIBYTE(v90) = 0;
              __p[8] = 0;
              if (v88 < 0)
                operator delete(v87[0]);
              if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v91.__r_.__value_.__l.__data_);
              if (CoreML::Result::good((CoreML::Result *)&v102))
              {
                v51 = v96;
                if (!v96)
                  v51 = &CoreML::Specification::_LSTMWeightParams_default_instance_;
                v52 = (uint64_t *)v51[9];
                if (v52)
                  v53 = v52;
                else
                  v53 = &CoreML::Specification::_WeightParams_default_instance_;
                std::string::basic_string[abi:ne180100]<0>(&v91, "Unidirectional LSTM");
                v54 = *((_QWORD *)a2 + 14);
                std::string::basic_string[abi:ne180100]<0>(v87, "output gate recursion matrix");
                CoreML::validateGeneralWeightParams((uint64_t)v53, (const CoreML::Specification::WeightParams *)((_QWORD)v20 * (_QWORD)v20), v20, (const void **)&v91.__r_.__value_.__l.__data_, v54, (uint64_t)v87, (uint64_t)__p);
                v102 = *(_QWORD *)__p;
                if (SHIBYTE(v104) < 0)
                  operator delete((void *)v103);
                v103 = *(_OWORD *)&__p[8];
                v104 = v90;
                HIBYTE(v90) = 0;
                __p[8] = 0;
                if (v88 < 0)
                  operator delete(v87[0]);
                if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v91.__r_.__value_.__l.__data_);
                if (CoreML::Result::good((CoreML::Result *)&v102))
                {
                  v55 = v95;
                  if (v95)
                    v56 = v95;
                  else
                    v56 = &CoreML::Specification::_LSTMParams_default_instance_;
                  if (*((_BYTE *)v56 + 21))
                  {
                    v57 = v96;
                    if (!v96)
                      v57 = &CoreML::Specification::_LSTMWeightParams_default_instance_;
                    v58 = (uint64_t *)v57[10];
                    if (v58)
                      v59 = v58;
                    else
                      v59 = &CoreML::Specification::_WeightParams_default_instance_;
                    std::string::basic_string[abi:ne180100]<0>(&v91, "Unidirectional LSTM");
                    v60 = *((_QWORD *)a2 + 14);
                    std::string::basic_string[abi:ne180100]<0>(v87, "input gate bias vector");
                    CoreML::validateGeneralWeightParams((uint64_t)v59, v20, (const CoreML::Specification::WeightParams *)1, (const void **)&v91.__r_.__value_.__l.__data_, v60, (uint64_t)v87, (uint64_t)__p);
                    v102 = *(_QWORD *)__p;
                    if (SHIBYTE(v104) < 0)
                      operator delete((void *)v103);
                    v103 = *(_OWORD *)&__p[8];
                    v104 = v90;
                    HIBYTE(v90) = 0;
                    __p[8] = 0;
                    if (v88 < 0)
                      operator delete(v87[0]);
                    if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v91.__r_.__value_.__l.__data_);
                    if (!CoreML::Result::good((CoreML::Result *)&v102))
                      goto LABEL_244;
                    v61 = v96;
                    if (!v96)
                      v61 = &CoreML::Specification::_LSTMWeightParams_default_instance_;
                    v62 = (uint64_t *)v61[11];
                    if (v62)
                      v63 = v62;
                    else
                      v63 = &CoreML::Specification::_WeightParams_default_instance_;
                    std::string::basic_string[abi:ne180100]<0>(&v91, "Unidirectional LSTM");
                    v64 = *((_QWORD *)a2 + 14);
                    std::string::basic_string[abi:ne180100]<0>(v87, "forget gate bias vector");
                    CoreML::validateGeneralWeightParams((uint64_t)v63, v20, (const CoreML::Specification::WeightParams *)1, (const void **)&v91.__r_.__value_.__l.__data_, v64, (uint64_t)v87, (uint64_t)__p);
                    v102 = *(_QWORD *)__p;
                    if (SHIBYTE(v104) < 0)
                      operator delete((void *)v103);
                    v103 = *(_OWORD *)&__p[8];
                    v104 = v90;
                    HIBYTE(v90) = 0;
                    __p[8] = 0;
                    if (v88 < 0)
                      operator delete(v87[0]);
                    if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v91.__r_.__value_.__l.__data_);
                    if (!CoreML::Result::good((CoreML::Result *)&v102))
                      goto LABEL_244;
                    v65 = v96;
                    if (!v96)
                      v65 = &CoreML::Specification::_LSTMWeightParams_default_instance_;
                    v66 = (uint64_t *)v65[12];
                    if (v66)
                      v67 = v66;
                    else
                      v67 = &CoreML::Specification::_WeightParams_default_instance_;
                    std::string::basic_string[abi:ne180100]<0>(&v91, "Unidirectional LSTM");
                    v68 = *((_QWORD *)a2 + 14);
                    std::string::basic_string[abi:ne180100]<0>(v87, "block input bias vector");
                    CoreML::validateGeneralWeightParams((uint64_t)v67, v20, (const CoreML::Specification::WeightParams *)1, (const void **)&v91.__r_.__value_.__l.__data_, v68, (uint64_t)v87, (uint64_t)__p);
                    v102 = *(_QWORD *)__p;
                    if (SHIBYTE(v104) < 0)
                      operator delete((void *)v103);
                    v103 = *(_OWORD *)&__p[8];
                    v104 = v90;
                    HIBYTE(v90) = 0;
                    __p[8] = 0;
                    if (v88 < 0)
                      operator delete(v87[0]);
                    if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v91.__r_.__value_.__l.__data_);
                    if (!CoreML::Result::good((CoreML::Result *)&v102))
                      goto LABEL_244;
                    v69 = v96;
                    if (!v96)
                      v69 = &CoreML::Specification::_LSTMWeightParams_default_instance_;
                    v70 = (uint64_t *)v69[13];
                    if (v70)
                      v71 = v70;
                    else
                      v71 = &CoreML::Specification::_WeightParams_default_instance_;
                    std::string::basic_string[abi:ne180100]<0>(&v91, "Unidirectional LSTM");
                    v72 = *((_QWORD *)a2 + 14);
                    std::string::basic_string[abi:ne180100]<0>(v87, "output gate bias vector");
                    CoreML::validateGeneralWeightParams((uint64_t)v71, v20, (const CoreML::Specification::WeightParams *)1, (const void **)&v91.__r_.__value_.__l.__data_, v72, (uint64_t)v87, (uint64_t)__p);
                    v102 = *(_QWORD *)__p;
                    if (SHIBYTE(v104) < 0)
                      operator delete((void *)v103);
                    v103 = *(_OWORD *)&__p[8];
                    v104 = v90;
                    HIBYTE(v90) = 0;
                    __p[8] = 0;
                    if (v88 < 0)
                      operator delete(v87[0]);
                    if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v91.__r_.__value_.__l.__data_);
                    if (!CoreML::Result::good((CoreML::Result *)&v102))
                      goto LABEL_244;
                    v55 = v95;
                  }
                  if (!v55)
                    v55 = &CoreML::Specification::_LSTMParams_default_instance_;
                  if (*((_BYTE *)v55 + 23))
                  {
                    v73 = v96;
                    if (!v96)
                      v73 = &CoreML::Specification::_LSTMWeightParams_default_instance_;
                    v74 = (uint64_t *)v73[14];
                    if (v74)
                      v75 = v74;
                    else
                      v75 = &CoreML::Specification::_WeightParams_default_instance_;
                    std::string::basic_string[abi:ne180100]<0>(&v91, "Unidirectional LSTM");
                    v76 = *((_QWORD *)a2 + 14);
                    std::string::basic_string[abi:ne180100]<0>(v87, "input gate peep hole vector");
                    CoreML::validateGeneralWeightParams((uint64_t)v75, v20, (const CoreML::Specification::WeightParams *)1, (const void **)&v91.__r_.__value_.__l.__data_, v76, (uint64_t)v87, (uint64_t)__p);
                    v102 = *(_QWORD *)__p;
                    if (SHIBYTE(v104) < 0)
                      operator delete((void *)v103);
                    v103 = *(_OWORD *)&__p[8];
                    v104 = v90;
                    HIBYTE(v90) = 0;
                    __p[8] = 0;
                    if (v88 < 0)
                      operator delete(v87[0]);
                    if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v91.__r_.__value_.__l.__data_);
                    if (CoreML::Result::good((CoreML::Result *)&v102))
                    {
                      v77 = v96;
                      if (!v96)
                        v77 = &CoreML::Specification::_LSTMWeightParams_default_instance_;
                      v78 = (uint64_t *)v77[15];
                      if (v78)
                        v79 = v78;
                      else
                        v79 = &CoreML::Specification::_WeightParams_default_instance_;
                      std::string::basic_string[abi:ne180100]<0>(&v91, "Unidirectional LSTM");
                      v80 = *((_QWORD *)a2 + 14);
                      std::string::basic_string[abi:ne180100]<0>(v87, "forget gate peep hole vector");
                      CoreML::validateGeneralWeightParams((uint64_t)v79, v20, (const CoreML::Specification::WeightParams *)1, (const void **)&v91.__r_.__value_.__l.__data_, v80, (uint64_t)v87, (uint64_t)__p);
                      v102 = *(_QWORD *)__p;
                      if (SHIBYTE(v104) < 0)
                        operator delete((void *)v103);
                      v103 = *(_OWORD *)&__p[8];
                      v104 = v90;
                      HIBYTE(v90) = 0;
                      __p[8] = 0;
                      if (v88 < 0)
                        operator delete(v87[0]);
                      if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(v91.__r_.__value_.__l.__data_);
                      if (CoreML::Result::good((CoreML::Result *)&v102))
                      {
                        v81 = v96;
                        if (!v96)
                          v81 = &CoreML::Specification::_LSTMWeightParams_default_instance_;
                        v82 = (uint64_t *)v81[16];
                        if (v82)
                          v83 = v82;
                        else
                          v83 = &CoreML::Specification::_WeightParams_default_instance_;
                        std::string::basic_string[abi:ne180100]<0>(&v91, "Unidirectional LSTM");
                        v84 = *((_QWORD *)a2 + 14);
                        std::string::basic_string[abi:ne180100]<0>(v87, "output gate peep hole vector");
                        CoreML::validateGeneralWeightParams((uint64_t)v83, v20, (const CoreML::Specification::WeightParams *)1, (const void **)&v91.__r_.__value_.__l.__data_, v84, (uint64_t)v87, (uint64_t)__p);
                        v102 = *(_QWORD *)__p;
                        if (SHIBYTE(v104) < 0)
                          operator delete((void *)v103);
                        v103 = *(_OWORD *)&__p[8];
                        v104 = v90;
                        HIBYTE(v90) = 0;
                        __p[8] = 0;
                        if (v88 < 0)
                          operator delete(v87[0]);
                        if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
                          operator delete(v91.__r_.__value_.__l.__data_);
                        CoreML::Result::good((CoreML::Result *)&v102);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_244:
  *(_QWORD *)a3 = v102;
  *(_OWORD *)(a3 + 8) = v103;
  *(_QWORD *)(a3 + 24) = v104;
  v103 = 0uLL;
  v104 = 0;
LABEL_249:
  CoreML::Specification::UniDirectionalLSTMLayerParams::~UniDirectionalLSTMLayerParams((CoreML::Specification::UniDirectionalLSTMLayerParams *)&v92);
  if (SHIBYTE(v104) < 0)
    operator delete((void *)v103);
}

void sub_218345D30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  uint64_t v40;

  if (a15 < 0)
    operator delete(__p);
  if (a29 < 0)
    operator delete(a24);
  CoreML::Specification::UniDirectionalLSTMLayerParams::~UniDirectionalLSTMLayerParams((CoreML::Specification::UniDirectionalLSTMLayerParams *)&a30);
  if (*(char *)(v40 - 89) < 0)
    operator delete(*(void **)(v40 - 112));
  _Unwind_Resume(a1);
}

void CoreML::validateLSTMWeightParams(_QWORD *a1@<X0>, uint64_t a2@<X1>, CoreML::Result *a3@<X8>)
{
  int v5;
  int v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  int v19;
  uint64_t v21;
  BOOL v22;
  BOOL v23;
  _DWORD *v25;
  uint64_t v26;
  char *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  unsigned int v39;
  int v40;
  uint64_t v42;
  BOOL v43;
  BOOL v44;
  int *v46;
  char *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  int *v53;
  char *v54;
  int v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  unsigned int v67;
  int v68;
  uint64_t v70;
  BOOL v71;
  BOOL v72;
  int *v74;
  int *v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  char *v80;
  int *v81;
  char *v82;
  int v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  unsigned int v95;
  int v96;
  uint64_t v98;
  BOOL v99;
  BOOL v100;
  int *v102;
  int *v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  unint64_t v107;
  char *v108;
  int *v109;
  char *v110;
  int v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  int v122;
  unsigned int v123;
  int v124;
  uint64_t v126;
  BOOL v127;
  BOOL v128;
  int *v130;
  int *v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  unint64_t v135;
  char *v136;
  int *v137;
  char *v138;
  int v139;
  uint64_t *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  int v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  int v150;
  unsigned int v151;
  int v152;
  uint64_t v154;
  BOOL v155;
  BOOL v156;
  int *v158;
  int *v159;
  uint64_t v160;
  unint64_t v161;
  uint64_t v162;
  unint64_t v163;
  char *v164;
  int *v165;
  char *v166;
  int v167;
  uint64_t *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  int v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  int v178;
  unsigned int v179;
  int v180;
  uint64_t v182;
  BOOL v183;
  BOOL v184;
  int *v186;
  int *v187;
  uint64_t v188;
  unint64_t v189;
  uint64_t v190;
  unint64_t v191;
  char *v192;
  int *v193;
  char *v194;
  int v195;
  uint64_t *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  int v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  int v206;
  unsigned int v207;
  int v208;
  uint64_t v210;
  BOOL v211;
  BOOL v212;
  int *v214;
  int *v215;
  uint64_t v216;
  unint64_t v217;
  uint64_t v218;
  unint64_t v219;
  char *v220;
  int *v221;
  char *v222;
  int v223;
  uint64_t *v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  int v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  int v234;
  unsigned int v235;
  int v236;
  uint64_t v238;
  BOOL v239;
  BOOL v240;
  int *v242;
  int *v243;
  uint64_t v244;
  unint64_t v245;
  uint64_t v246;
  unint64_t v247;
  char *v248;
  int *v249;
  char *v250;
  int v251;
  uint64_t *v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  int v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  int v262;
  unsigned int v263;
  int v264;
  uint64_t v266;
  BOOL v267;
  BOOL v268;
  int *v270;
  int *v271;
  uint64_t v272;
  unint64_t v273;
  uint64_t v274;
  unint64_t v275;
  char *v276;
  int *v277;
  char *v278;
  int v279;
  uint64_t *v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  int v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  int v290;
  unsigned int v291;
  int v292;
  uint64_t v294;
  BOOL v295;
  BOOL v296;
  int *v298;
  int *v299;
  uint64_t v300;
  unint64_t v301;
  uint64_t v302;
  unint64_t v303;
  char *v304;
  int *v305;
  char *v306;
  int v307;
  uint64_t *v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  int v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  int v318;
  unsigned int v319;
  int v320;
  uint64_t v322;
  BOOL v323;
  BOOL v324;
  int *v326;
  uint64_t v327;
  unint64_t v328;
  uint64_t v329;
  unint64_t v330;
  char *v331;
  int *v332;
  char *v333;
  int v334;
  uint64_t *v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  int v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  int v345;
  unsigned int v346;
  int v347;
  uint64_t v348;
  BOOL v349;
  int *v351;
  int *v352;
  uint64_t v353;
  unint64_t v354;
  uint64_t v355;
  unint64_t v356;
  char *v357;
  int *v358;
  char *v359;
  int v360;
  uint64_t *v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  int v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  int v371;
  unsigned int v372;
  int v373;
  uint64_t v375;
  BOOL v376;
  BOOL v377;
  int *v379;
  int *v380;
  uint64_t v381;
  unint64_t v382;
  uint64_t v383;
  unint64_t v384;
  char *v385;
  int *v386;
  char *v387;
  int v388;
  uint64_t *v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  int v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  int v399;
  unsigned int v400;
  int v401;
  uint64_t v403;
  BOOL v404;
  BOOL v405;
  int *v407;
  uint64_t v408;
  unint64_t v409;
  uint64_t v410;
  unint64_t v411;
  char *v412;
  int *v413;
  char *v414;
  int v415;
  _DWORD *v416;
  int v417;
  int v418;
  int v419;
  void *v420;
  char v421;
  void *__p;
  char *v423;
  int *v424;

  v5 = *(unsigned __int8 *)(a2 + 23);
  v6 = *(unsigned __int8 *)(a2 + 21);
  v423 = 0;
  v424 = 0;
  __p = 0;
  v7 = (uint64_t *)a1[2];
  if (!v7)
    v7 = &CoreML::Specification::_WeightParams_default_instance_;
  v8 = v7[5];
  if (*(char *)(v8 + 23) < 0)
    v9 = *(_QWORD *)(v8 + 8);
  else
    v9 = *(unsigned __int8 *)(v8 + 23);
  v10 = v7[6];
  v11 = *(unsigned __int8 *)(v10 + 23);
  if (*(char *)(v10 + 23) < 0)
    v12 = *(_QWORD *)(v10 + 8);
  else
    v12 = *(unsigned __int8 *)(v10 + 23);
  v13 = *((_DWORD *)v7 + 4);
  v14 = v7[7];
  v15 = *(unsigned __int8 *)(v14 + 23);
  if (*(char *)(v14 + 23) < 0)
    v16 = *(_QWORD *)(v14 + 8);
  else
    v16 = *(unsigned __int8 *)(v14 + 23);
  if (v13 <= 0)
    v17 = 1;
  else
    v17 = 2;
  if (v9)
    v18 = v17;
  else
    v18 = v13 > 0;
  if (v12)
    ++v18;
  if (v16)
    ++v18;
  if (v18 > 1)
  {
    v19 = 4;
    goto LABEL_54;
  }
  if (v18)
    v19 = 0;
  else
    v19 = 5;
  if (v13 <= 0 && v18 != 0)
  {
    if ((*(_BYTE *)(v8 + 23) & 0x80) != 0)
    {
      if (*(_QWORD *)(v8 + 8))
        goto LABEL_33;
    }
    else if (*(_BYTE *)(v8 + 23))
    {
LABEL_33:
      v19 = 1;
      goto LABEL_54;
    }
    if ((v11 & 0x80) != 0)
      v11 = *(_QWORD *)(v10 + 8);
    v21 = v7[8];
    if (v7 == &CoreML::Specification::_WeightParams_default_instance_ || (v11 ? (v22 = v21 == 0) : (v22 = 1), v22))
    {
      if ((v15 & 0x80) != 0)
        v15 = *(_QWORD *)(v14 + 8);
      if (v21)
        v23 = v15 == 0;
      else
        v23 = 1;
      if (v23 || v7 == &CoreML::Specification::_WeightParams_default_instance_)
        v19 = 5;
      else
        v19 = 3;
    }
    else
    {
      v19 = 2;
    }
  }
LABEL_54:
  v25 = std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v424, 1uLL);
  *v25 = v19;
  v27 = (char *)(v25 + 1);
  __p = v25;
  v424 = &v25[v26];
  v423 = (char *)(v25 + 1);
  v28 = (uint64_t *)a1[3];
  if (!v28)
    v28 = &CoreML::Specification::_WeightParams_default_instance_;
  v29 = v28[5];
  if (*(char *)(v29 + 23) < 0)
    v30 = *(_QWORD *)(v29 + 8);
  else
    v30 = *(unsigned __int8 *)(v29 + 23);
  v31 = v28[6];
  v32 = *(unsigned __int8 *)(v31 + 23);
  if (*(char *)(v31 + 23) < 0)
    v33 = *(_QWORD *)(v31 + 8);
  else
    v33 = *(unsigned __int8 *)(v31 + 23);
  v34 = *((_DWORD *)v28 + 4);
  v35 = v28[7];
  v36 = *(unsigned __int8 *)(v35 + 23);
  if (*(char *)(v35 + 23) < 0)
    v37 = *(_QWORD *)(v35 + 8);
  else
    v37 = *(unsigned __int8 *)(v35 + 23);
  if (v34 <= 0)
    v38 = 1;
  else
    v38 = 2;
  if (v30)
    v39 = v38;
  else
    v39 = v34 > 0;
  if (v33)
    ++v39;
  if (v37)
    ++v39;
  if (v39 > 1)
  {
    v40 = 4;
    goto LABEL_107;
  }
  if (v39)
    v40 = 0;
  else
    v40 = 5;
  if (v34 <= 0 && v39 != 0)
  {
    if ((*(_BYTE *)(v29 + 23) & 0x80) != 0)
    {
      if (*(_QWORD *)(v29 + 8))
        goto LABEL_86;
    }
    else if (*(_BYTE *)(v29 + 23))
    {
LABEL_86:
      v40 = 1;
      goto LABEL_107;
    }
    if ((v32 & 0x80) != 0)
      v32 = *(_QWORD *)(v31 + 8);
    v42 = v28[8];
    if (v28 == &CoreML::Specification::_WeightParams_default_instance_ || (v32 ? (v43 = v42 == 0) : (v43 = 1), v43))
    {
      if ((v36 & 0x80) != 0)
        v36 = *(_QWORD *)(v35 + 8);
      if (v42)
        v44 = v36 == 0;
      else
        v44 = 1;
      if (v44 || v28 == &CoreML::Specification::_WeightParams_default_instance_)
        v40 = 5;
      else
        v40 = 3;
    }
    else
    {
      v40 = 2;
    }
  }
LABEL_107:
  if (v27 >= (char *)v424)
  {
    v47 = (char *)__p;
    v48 = (v27 - (_BYTE *)__p) >> 2;
    v49 = v48 + 1;
    if ((unint64_t)(v48 + 1) >> 62)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v50 = (char *)v424 - (_BYTE *)__p;
    if (((char *)v424 - (_BYTE *)__p) >> 1 > v49)
      v49 = v50 >> 1;
    if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFFCLL)
      v51 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v51 = v49;
    if (v51)
    {
      v52 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v424, v51);
      v47 = (char *)__p;
      v27 = v423;
    }
    else
    {
      v52 = 0;
    }
    v53 = (int *)&v52[4 * v48];
    v54 = &v52[4 * v51];
    *v53 = v40;
    v46 = v53 + 1;
    while (v27 != v47)
    {
      v55 = *((_DWORD *)v27 - 1);
      v27 -= 4;
      *--v53 = v55;
    }
    __p = v53;
    v423 = (char *)v46;
    v424 = (int *)v54;
    if (v47)
      operator delete(v47);
  }
  else
  {
    v25[1] = v40;
    v46 = v25 + 2;
  }
  v423 = (char *)v46;
  v56 = (uint64_t *)a1[4];
  if (!v56)
    v56 = &CoreML::Specification::_WeightParams_default_instance_;
  v57 = v56[5];
  if (*(char *)(v57 + 23) < 0)
    v58 = *(_QWORD *)(v57 + 8);
  else
    v58 = *(unsigned __int8 *)(v57 + 23);
  v59 = v56[6];
  v60 = *(unsigned __int8 *)(v59 + 23);
  if (*(char *)(v59 + 23) < 0)
    v61 = *(_QWORD *)(v59 + 8);
  else
    v61 = *(unsigned __int8 *)(v59 + 23);
  v62 = *((_DWORD *)v56 + 4);
  v63 = v56[7];
  v64 = *(unsigned __int8 *)(v63 + 23);
  if (*(char *)(v63 + 23) < 0)
    v65 = *(_QWORD *)(v63 + 8);
  else
    v65 = *(unsigned __int8 *)(v63 + 23);
  if (v62 <= 0)
    v66 = 1;
  else
    v66 = 2;
  if (v58)
    v67 = v66;
  else
    v67 = v62 > 0;
  if (v61)
    ++v67;
  if (v65)
    ++v67;
  if (v67 > 1)
  {
    v68 = 4;
    goto LABEL_176;
  }
  if (v67)
    v68 = 0;
  else
    v68 = 5;
  if (v62 <= 0 && v67 != 0)
  {
    if ((*(_BYTE *)(v57 + 23) & 0x80) != 0)
    {
      if (*(_QWORD *)(v57 + 8))
        goto LABEL_155;
    }
    else if (*(_BYTE *)(v57 + 23))
    {
LABEL_155:
      v68 = 1;
      goto LABEL_176;
    }
    if ((v60 & 0x80) != 0)
      v60 = *(_QWORD *)(v59 + 8);
    v70 = v56[8];
    if (v56 == &CoreML::Specification::_WeightParams_default_instance_ || (v60 ? (v71 = v70 == 0) : (v71 = 1), v71))
    {
      if ((v64 & 0x80) != 0)
        v64 = *(_QWORD *)(v63 + 8);
      if (v70)
        v72 = v64 == 0;
      else
        v72 = 1;
      if (v72 || v56 == &CoreML::Specification::_WeightParams_default_instance_)
        v68 = 5;
      else
        v68 = 3;
    }
    else
    {
      v68 = 2;
    }
  }
LABEL_176:
  if (v46 >= v424)
  {
    v75 = (int *)__p;
    v76 = ((char *)v46 - (_BYTE *)__p) >> 2;
    v77 = v76 + 1;
    if ((unint64_t)(v76 + 1) >> 62)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v78 = (char *)v424 - (_BYTE *)__p;
    if (((char *)v424 - (_BYTE *)__p) >> 1 > v77)
      v77 = v78 >> 1;
    if ((unint64_t)v78 >= 0x7FFFFFFFFFFFFFFCLL)
      v79 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v79 = v77;
    if (v79)
    {
      v80 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v424, v79);
      v75 = (int *)__p;
      v46 = (int *)v423;
    }
    else
    {
      v80 = 0;
    }
    v81 = (int *)&v80[4 * v76];
    v82 = &v80[4 * v79];
    *v81 = v68;
    v74 = v81 + 1;
    while (v46 != v75)
    {
      v83 = *--v46;
      *--v81 = v83;
    }
    __p = v81;
    v423 = (char *)v74;
    v424 = (int *)v82;
    if (v75)
      operator delete(v75);
  }
  else
  {
    *v46 = v68;
    v74 = v46 + 1;
  }
  v423 = (char *)v74;
  v84 = (uint64_t *)a1[5];
  if (!v84)
    v84 = &CoreML::Specification::_WeightParams_default_instance_;
  v85 = v84[5];
  if (*(char *)(v85 + 23) < 0)
    v86 = *(_QWORD *)(v85 + 8);
  else
    v86 = *(unsigned __int8 *)(v85 + 23);
  v87 = v84[6];
  v88 = *(unsigned __int8 *)(v87 + 23);
  if (*(char *)(v87 + 23) < 0)
    v89 = *(_QWORD *)(v87 + 8);
  else
    v89 = *(unsigned __int8 *)(v87 + 23);
  v90 = *((_DWORD *)v84 + 4);
  v91 = v84[7];
  v92 = *(unsigned __int8 *)(v91 + 23);
  if (*(char *)(v91 + 23) < 0)
    v93 = *(_QWORD *)(v91 + 8);
  else
    v93 = *(unsigned __int8 *)(v91 + 23);
  if (v90 <= 0)
    v94 = 1;
  else
    v94 = 2;
  if (v86)
    v95 = v94;
  else
    v95 = v90 > 0;
  if (v89)
    ++v95;
  if (v93)
    ++v95;
  if (v95 > 1)
  {
    v96 = 4;
    goto LABEL_245;
  }
  if (v95)
    v96 = 0;
  else
    v96 = 5;
  if (v90 <= 0 && v95 != 0)
  {
    if ((*(_BYTE *)(v85 + 23) & 0x80) != 0)
    {
      if (*(_QWORD *)(v85 + 8))
        goto LABEL_224;
    }
    else if (*(_BYTE *)(v85 + 23))
    {
LABEL_224:
      v96 = 1;
      goto LABEL_245;
    }
    if ((v88 & 0x80) != 0)
      v88 = *(_QWORD *)(v87 + 8);
    v98 = v84[8];
    if (v84 == &CoreML::Specification::_WeightParams_default_instance_ || (v88 ? (v99 = v98 == 0) : (v99 = 1), v99))
    {
      if ((v92 & 0x80) != 0)
        v92 = *(_QWORD *)(v91 + 8);
      if (v98)
        v100 = v92 == 0;
      else
        v100 = 1;
      if (v100 || v84 == &CoreML::Specification::_WeightParams_default_instance_)
        v96 = 5;
      else
        v96 = 3;
    }
    else
    {
      v96 = 2;
    }
  }
LABEL_245:
  if (v74 >= v424)
  {
    v103 = (int *)__p;
    v104 = ((char *)v74 - (_BYTE *)__p) >> 2;
    v105 = v104 + 1;
    if ((unint64_t)(v104 + 1) >> 62)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v106 = (char *)v424 - (_BYTE *)__p;
    if (((char *)v424 - (_BYTE *)__p) >> 1 > v105)
      v105 = v106 >> 1;
    if ((unint64_t)v106 >= 0x7FFFFFFFFFFFFFFCLL)
      v107 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v107 = v105;
    if (v107)
    {
      v108 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v424, v107);
      v103 = (int *)__p;
      v74 = (int *)v423;
    }
    else
    {
      v108 = 0;
    }
    v109 = (int *)&v108[4 * v104];
    v110 = &v108[4 * v107];
    *v109 = v96;
    v102 = v109 + 1;
    while (v74 != v103)
    {
      v111 = *--v74;
      *--v109 = v111;
    }
    __p = v109;
    v423 = (char *)v102;
    v424 = (int *)v110;
    if (v103)
      operator delete(v103);
  }
  else
  {
    *v74 = v96;
    v102 = v74 + 1;
  }
  v423 = (char *)v102;
  v112 = (uint64_t *)a1[6];
  if (!v112)
    v112 = &CoreML::Specification::_WeightParams_default_instance_;
  v113 = v112[5];
  if (*(char *)(v113 + 23) < 0)
    v114 = *(_QWORD *)(v113 + 8);
  else
    v114 = *(unsigned __int8 *)(v113 + 23);
  v115 = v112[6];
  v116 = *(unsigned __int8 *)(v115 + 23);
  if (*(char *)(v115 + 23) < 0)
    v117 = *(_QWORD *)(v115 + 8);
  else
    v117 = *(unsigned __int8 *)(v115 + 23);
  v118 = *((_DWORD *)v112 + 4);
  v119 = v112[7];
  v120 = *(unsigned __int8 *)(v119 + 23);
  if (*(char *)(v119 + 23) < 0)
    v121 = *(_QWORD *)(v119 + 8);
  else
    v121 = *(unsigned __int8 *)(v119 + 23);
  if (v118 <= 0)
    v122 = 1;
  else
    v122 = 2;
  if (v114)
    v123 = v122;
  else
    v123 = v118 > 0;
  if (v117)
    ++v123;
  if (v121)
    ++v123;
  if (v123 > 1)
  {
    v124 = 4;
    goto LABEL_314;
  }
  if (v123)
    v124 = 0;
  else
    v124 = 5;
  if (v118 <= 0 && v123 != 0)
  {
    if ((*(_BYTE *)(v113 + 23) & 0x80) != 0)
    {
      if (*(_QWORD *)(v113 + 8))
        goto LABEL_293;
    }
    else if (*(_BYTE *)(v113 + 23))
    {
LABEL_293:
      v124 = 1;
      goto LABEL_314;
    }
    if ((v116 & 0x80) != 0)
      v116 = *(_QWORD *)(v115 + 8);
    v126 = v112[8];
    if (v112 == &CoreML::Specification::_WeightParams_default_instance_
      || (v116 ? (v127 = v126 == 0) : (v127 = 1), v127))
    {
      if ((v120 & 0x80) != 0)
        v120 = *(_QWORD *)(v119 + 8);
      if (v126)
        v128 = v120 == 0;
      else
        v128 = 1;
      if (v128 || v112 == &CoreML::Specification::_WeightParams_default_instance_)
        v124 = 5;
      else
        v124 = 3;
    }
    else
    {
      v124 = 2;
    }
  }
LABEL_314:
  if (v102 >= v424)
  {
    v131 = (int *)__p;
    v132 = ((char *)v102 - (_BYTE *)__p) >> 2;
    v133 = v132 + 1;
    if ((unint64_t)(v132 + 1) >> 62)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v134 = (char *)v424 - (_BYTE *)__p;
    if (((char *)v424 - (_BYTE *)__p) >> 1 > v133)
      v133 = v134 >> 1;
    if ((unint64_t)v134 >= 0x7FFFFFFFFFFFFFFCLL)
      v135 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v135 = v133;
    if (v135)
    {
      v136 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v424, v135);
      v131 = (int *)__p;
      v102 = (int *)v423;
    }
    else
    {
      v136 = 0;
    }
    v137 = (int *)&v136[4 * v132];
    v138 = &v136[4 * v135];
    *v137 = v124;
    v130 = v137 + 1;
    while (v102 != v131)
    {
      v139 = *--v102;
      *--v137 = v139;
    }
    __p = v137;
    v423 = (char *)v130;
    v424 = (int *)v138;
    if (v131)
      operator delete(v131);
  }
  else
  {
    *v102 = v124;
    v130 = v102 + 1;
  }
  v423 = (char *)v130;
  v140 = (uint64_t *)a1[7];
  if (!v140)
    v140 = &CoreML::Specification::_WeightParams_default_instance_;
  v141 = v140[5];
  if (*(char *)(v141 + 23) < 0)
    v142 = *(_QWORD *)(v141 + 8);
  else
    v142 = *(unsigned __int8 *)(v141 + 23);
  v143 = v140[6];
  v144 = *(unsigned __int8 *)(v143 + 23);
  if (*(char *)(v143 + 23) < 0)
    v145 = *(_QWORD *)(v143 + 8);
  else
    v145 = *(unsigned __int8 *)(v143 + 23);
  v146 = *((_DWORD *)v140 + 4);
  v147 = v140[7];
  v148 = *(unsigned __int8 *)(v147 + 23);
  if (*(char *)(v147 + 23) < 0)
    v149 = *(_QWORD *)(v147 + 8);
  else
    v149 = *(unsigned __int8 *)(v147 + 23);
  if (v146 <= 0)
    v150 = 1;
  else
    v150 = 2;
  if (v142)
    v151 = v150;
  else
    v151 = v146 > 0;
  if (v145)
    ++v151;
  if (v149)
    ++v151;
  if (v151 > 1)
  {
    v152 = 4;
    goto LABEL_383;
  }
  if (v151)
    v152 = 0;
  else
    v152 = 5;
  if (v146 <= 0 && v151 != 0)
  {
    if ((*(_BYTE *)(v141 + 23) & 0x80) != 0)
    {
      if (*(_QWORD *)(v141 + 8))
        goto LABEL_362;
    }
    else if (*(_BYTE *)(v141 + 23))
    {
LABEL_362:
      v152 = 1;
      goto LABEL_383;
    }
    if ((v144 & 0x80) != 0)
      v144 = *(_QWORD *)(v143 + 8);
    v154 = v140[8];
    if (v140 == &CoreML::Specification::_WeightParams_default_instance_
      || (v144 ? (v155 = v154 == 0) : (v155 = 1), v155))
    {
      if ((v148 & 0x80) != 0)
        v148 = *(_QWORD *)(v147 + 8);
      if (v154)
        v156 = v148 == 0;
      else
        v156 = 1;
      if (v156 || v140 == &CoreML::Specification::_WeightParams_default_instance_)
        v152 = 5;
      else
        v152 = 3;
    }
    else
    {
      v152 = 2;
    }
  }
LABEL_383:
  if (v130 >= v424)
  {
    v159 = (int *)__p;
    v160 = ((char *)v130 - (_BYTE *)__p) >> 2;
    v161 = v160 + 1;
    if ((unint64_t)(v160 + 1) >> 62)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v162 = (char *)v424 - (_BYTE *)__p;
    if (((char *)v424 - (_BYTE *)__p) >> 1 > v161)
      v161 = v162 >> 1;
    if ((unint64_t)v162 >= 0x7FFFFFFFFFFFFFFCLL)
      v163 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v163 = v161;
    if (v163)
    {
      v164 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v424, v163);
      v159 = (int *)__p;
      v130 = (int *)v423;
    }
    else
    {
      v164 = 0;
    }
    v165 = (int *)&v164[4 * v160];
    v166 = &v164[4 * v163];
    *v165 = v152;
    v158 = v165 + 1;
    while (v130 != v159)
    {
      v167 = *--v130;
      *--v165 = v167;
    }
    __p = v165;
    v423 = (char *)v158;
    v424 = (int *)v166;
    if (v159)
      operator delete(v159);
  }
  else
  {
    *v130 = v152;
    v158 = v130 + 1;
  }
  v423 = (char *)v158;
  v168 = (uint64_t *)a1[8];
  if (!v168)
    v168 = &CoreML::Specification::_WeightParams_default_instance_;
  v169 = v168[5];
  if (*(char *)(v169 + 23) < 0)
    v170 = *(_QWORD *)(v169 + 8);
  else
    v170 = *(unsigned __int8 *)(v169 + 23);
  v171 = v168[6];
  v172 = *(unsigned __int8 *)(v171 + 23);
  if (*(char *)(v171 + 23) < 0)
    v173 = *(_QWORD *)(v171 + 8);
  else
    v173 = *(unsigned __int8 *)(v171 + 23);
  v174 = *((_DWORD *)v168 + 4);
  v175 = v168[7];
  v176 = *(unsigned __int8 *)(v175 + 23);
  if (*(char *)(v175 + 23) < 0)
    v177 = *(_QWORD *)(v175 + 8);
  else
    v177 = *(unsigned __int8 *)(v175 + 23);
  if (v174 <= 0)
    v178 = 1;
  else
    v178 = 2;
  if (v170)
    v179 = v178;
  else
    v179 = v174 > 0;
  if (v173)
    ++v179;
  if (v177)
    ++v179;
  if (v179 > 1)
  {
    v180 = 4;
    goto LABEL_452;
  }
  if (v179)
    v180 = 0;
  else
    v180 = 5;
  if (v174 <= 0 && v179 != 0)
  {
    if ((*(_BYTE *)(v169 + 23) & 0x80) != 0)
    {
      if (*(_QWORD *)(v169 + 8))
        goto LABEL_431;
    }
    else if (*(_BYTE *)(v169 + 23))
    {
LABEL_431:
      v180 = 1;
      goto LABEL_452;
    }
    if ((v172 & 0x80) != 0)
      v172 = *(_QWORD *)(v171 + 8);
    v182 = v168[8];
    if (v168 == &CoreML::Specification::_WeightParams_default_instance_
      || (v172 ? (v183 = v182 == 0) : (v183 = 1), v183))
    {
      if ((v176 & 0x80) != 0)
        v176 = *(_QWORD *)(v175 + 8);
      if (v182)
        v184 = v176 == 0;
      else
        v184 = 1;
      if (v184 || v168 == &CoreML::Specification::_WeightParams_default_instance_)
        v180 = 5;
      else
        v180 = 3;
    }
    else
    {
      v180 = 2;
    }
  }
LABEL_452:
  if (v158 >= v424)
  {
    v187 = (int *)__p;
    v188 = ((char *)v158 - (_BYTE *)__p) >> 2;
    v189 = v188 + 1;
    if ((unint64_t)(v188 + 1) >> 62)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v190 = (char *)v424 - (_BYTE *)__p;
    if (((char *)v424 - (_BYTE *)__p) >> 1 > v189)
      v189 = v190 >> 1;
    if ((unint64_t)v190 >= 0x7FFFFFFFFFFFFFFCLL)
      v191 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v191 = v189;
    if (v191)
    {
      v192 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v424, v191);
      v187 = (int *)__p;
      v158 = (int *)v423;
    }
    else
    {
      v192 = 0;
    }
    v193 = (int *)&v192[4 * v188];
    v194 = &v192[4 * v191];
    *v193 = v180;
    v186 = v193 + 1;
    while (v158 != v187)
    {
      v195 = *--v158;
      *--v193 = v195;
    }
    __p = v193;
    v423 = (char *)v186;
    v424 = (int *)v194;
    if (v187)
      operator delete(v187);
  }
  else
  {
    *v158 = v180;
    v186 = v158 + 1;
  }
  v423 = (char *)v186;
  v196 = (uint64_t *)a1[9];
  if (!v196)
    v196 = &CoreML::Specification::_WeightParams_default_instance_;
  v197 = v196[5];
  if (*(char *)(v197 + 23) < 0)
    v198 = *(_QWORD *)(v197 + 8);
  else
    v198 = *(unsigned __int8 *)(v197 + 23);
  v199 = v196[6];
  v200 = *(unsigned __int8 *)(v199 + 23);
  if (*(char *)(v199 + 23) < 0)
    v201 = *(_QWORD *)(v199 + 8);
  else
    v201 = *(unsigned __int8 *)(v199 + 23);
  v202 = *((_DWORD *)v196 + 4);
  v203 = v196[7];
  v204 = *(unsigned __int8 *)(v203 + 23);
  if (*(char *)(v203 + 23) < 0)
    v205 = *(_QWORD *)(v203 + 8);
  else
    v205 = *(unsigned __int8 *)(v203 + 23);
  if (v202 <= 0)
    v206 = 1;
  else
    v206 = 2;
  if (v198)
    v207 = v206;
  else
    v207 = v202 > 0;
  if (v201)
    ++v207;
  if (v205)
    ++v207;
  if (v207 > 1)
  {
    v208 = 4;
    goto LABEL_521;
  }
  if (v207)
    v208 = 0;
  else
    v208 = 5;
  if (v202 <= 0 && v207 != 0)
  {
    if ((*(_BYTE *)(v197 + 23) & 0x80) != 0)
    {
      if (*(_QWORD *)(v197 + 8))
        goto LABEL_500;
    }
    else if (*(_BYTE *)(v197 + 23))
    {
LABEL_500:
      v208 = 1;
      goto LABEL_521;
    }
    if ((v200 & 0x80) != 0)
      v200 = *(_QWORD *)(v199 + 8);
    v210 = v196[8];
    if (v196 == &CoreML::Specification::_WeightParams_default_instance_
      || (v200 ? (v211 = v210 == 0) : (v211 = 1), v211))
    {
      if ((v204 & 0x80) != 0)
        v204 = *(_QWORD *)(v203 + 8);
      if (v210)
        v212 = v204 == 0;
      else
        v212 = 1;
      if (v212 || v196 == &CoreML::Specification::_WeightParams_default_instance_)
        v208 = 5;
      else
        v208 = 3;
    }
    else
    {
      v208 = 2;
    }
  }
LABEL_521:
  if (v186 >= v424)
  {
    v215 = (int *)__p;
    v216 = ((char *)v186 - (_BYTE *)__p) >> 2;
    v217 = v216 + 1;
    if ((unint64_t)(v216 + 1) >> 62)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v218 = (char *)v424 - (_BYTE *)__p;
    if (((char *)v424 - (_BYTE *)__p) >> 1 > v217)
      v217 = v218 >> 1;
    if ((unint64_t)v218 >= 0x7FFFFFFFFFFFFFFCLL)
      v219 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v219 = v217;
    if (v219)
    {
      v220 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v424, v219);
      v215 = (int *)__p;
      v186 = (int *)v423;
    }
    else
    {
      v220 = 0;
    }
    v221 = (int *)&v220[4 * v216];
    v222 = &v220[4 * v219];
    *v221 = v208;
    v214 = v221 + 1;
    while (v186 != v215)
    {
      v223 = *--v186;
      *--v221 = v223;
    }
    __p = v221;
    v423 = (char *)v214;
    v424 = (int *)v222;
    if (v215)
      operator delete(v215);
  }
  else
  {
    *v186 = v208;
    v214 = v186 + 1;
  }
  v423 = (char *)v214;
  if (v6)
  {
    v224 = (uint64_t *)a1[10];
    if (!v224)
      v224 = &CoreML::Specification::_WeightParams_default_instance_;
    v225 = v224[5];
    if (*(char *)(v225 + 23) < 0)
      v226 = *(_QWORD *)(v225 + 8);
    else
      v226 = *(unsigned __int8 *)(v225 + 23);
    v227 = v224[6];
    v228 = *(unsigned __int8 *)(v227 + 23);
    if (*(char *)(v227 + 23) < 0)
      v229 = *(_QWORD *)(v227 + 8);
    else
      v229 = *(unsigned __int8 *)(v227 + 23);
    v230 = *((_DWORD *)v224 + 4);
    v231 = v224[7];
    v232 = *(unsigned __int8 *)(v231 + 23);
    if (*(char *)(v231 + 23) < 0)
      v233 = *(_QWORD *)(v231 + 8);
    else
      v233 = *(unsigned __int8 *)(v231 + 23);
    if (v230 <= 0)
      v234 = 1;
    else
      v234 = 2;
    if (v226)
      v235 = v234;
    else
      v235 = v230 > 0;
    if (v229)
      ++v235;
    if (v233)
      ++v235;
    if (v235 > 1)
    {
      v236 = 4;
      goto LABEL_591;
    }
    if (v235)
      v236 = 0;
    else
      v236 = 5;
    if (v230 <= 0 && v235 != 0)
    {
      if ((*(_BYTE *)(v225 + 23) & 0x80) != 0)
      {
        if (*(_QWORD *)(v225 + 8))
          goto LABEL_570;
      }
      else if (*(_BYTE *)(v225 + 23))
      {
LABEL_570:
        v236 = 1;
        goto LABEL_591;
      }
      if ((v228 & 0x80) != 0)
        v228 = *(_QWORD *)(v227 + 8);
      v238 = v224[8];
      if (v224 == &CoreML::Specification::_WeightParams_default_instance_
        || (v228 ? (v239 = v238 == 0) : (v239 = 1), v239))
      {
        if ((v232 & 0x80) != 0)
          v232 = *(_QWORD *)(v231 + 8);
        if (v238)
          v240 = v232 == 0;
        else
          v240 = 1;
        if (v240 || v224 == &CoreML::Specification::_WeightParams_default_instance_)
          v236 = 5;
        else
          v236 = 3;
      }
      else
      {
        v236 = 2;
      }
    }
LABEL_591:
    if (v214 >= v424)
    {
      v243 = (int *)__p;
      v244 = ((char *)v214 - (_BYTE *)__p) >> 2;
      v245 = v244 + 1;
      if ((unint64_t)(v244 + 1) >> 62)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      v246 = (char *)v424 - (_BYTE *)__p;
      if (((char *)v424 - (_BYTE *)__p) >> 1 > v245)
        v245 = v246 >> 1;
      if ((unint64_t)v246 >= 0x7FFFFFFFFFFFFFFCLL)
        v247 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v247 = v245;
      if (v247)
      {
        v248 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v424, v247);
        v243 = (int *)__p;
        v214 = (int *)v423;
      }
      else
      {
        v248 = 0;
      }
      v249 = (int *)&v248[4 * v244];
      v250 = &v248[4 * v247];
      *v249 = v236;
      v242 = v249 + 1;
      while (v214 != v243)
      {
        v251 = *--v214;
        *--v249 = v251;
      }
      __p = v249;
      v423 = (char *)v242;
      v424 = (int *)v250;
      if (v243)
        operator delete(v243);
    }
    else
    {
      *v214 = v236;
      v242 = v214 + 1;
    }
    v423 = (char *)v242;
    v252 = (uint64_t *)a1[11];
    if (!v252)
      v252 = &CoreML::Specification::_WeightParams_default_instance_;
    v253 = v252[5];
    if (*(char *)(v253 + 23) < 0)
      v254 = *(_QWORD *)(v253 + 8);
    else
      v254 = *(unsigned __int8 *)(v253 + 23);
    v255 = v252[6];
    v256 = *(unsigned __int8 *)(v255 + 23);
    if (*(char *)(v255 + 23) < 0)
      v257 = *(_QWORD *)(v255 + 8);
    else
      v257 = *(unsigned __int8 *)(v255 + 23);
    v258 = *((_DWORD *)v252 + 4);
    v259 = v252[7];
    v260 = *(unsigned __int8 *)(v259 + 23);
    if (*(char *)(v259 + 23) < 0)
      v261 = *(_QWORD *)(v259 + 8);
    else
      v261 = *(unsigned __int8 *)(v259 + 23);
    if (v258 <= 0)
      v262 = 1;
    else
      v262 = 2;
    if (v254)
      v263 = v262;
    else
      v263 = v258 > 0;
    if (v257)
      ++v263;
    if (v261)
      ++v263;
    if (v263 > 1)
    {
      v264 = 4;
      goto LABEL_660;
    }
    if (v263)
      v264 = 0;
    else
      v264 = 5;
    if (v258 <= 0 && v263 != 0)
    {
      if ((*(_BYTE *)(v253 + 23) & 0x80) != 0)
      {
        if (*(_QWORD *)(v253 + 8))
          goto LABEL_639;
      }
      else if (*(_BYTE *)(v253 + 23))
      {
LABEL_639:
        v264 = 1;
        goto LABEL_660;
      }
      if ((v256 & 0x80) != 0)
        v256 = *(_QWORD *)(v255 + 8);
      v266 = v252[8];
      if (v252 == &CoreML::Specification::_WeightParams_default_instance_
        || (v256 ? (v267 = v266 == 0) : (v267 = 1), v267))
      {
        if ((v260 & 0x80) != 0)
          v260 = *(_QWORD *)(v259 + 8);
        if (v266)
          v268 = v260 == 0;
        else
          v268 = 1;
        if (v268 || v252 == &CoreML::Specification::_WeightParams_default_instance_)
          v264 = 5;
        else
          v264 = 3;
      }
      else
      {
        v264 = 2;
      }
    }
LABEL_660:
    if (v242 >= v424)
    {
      v271 = (int *)__p;
      v272 = ((char *)v242 - (_BYTE *)__p) >> 2;
      v273 = v272 + 1;
      if ((unint64_t)(v272 + 1) >> 62)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      v274 = (char *)v424 - (_BYTE *)__p;
      if (((char *)v424 - (_BYTE *)__p) >> 1 > v273)
        v273 = v274 >> 1;
      if ((unint64_t)v274 >= 0x7FFFFFFFFFFFFFFCLL)
        v275 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v275 = v273;
      if (v275)
      {
        v276 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v424, v275);
        v271 = (int *)__p;
        v242 = (int *)v423;
      }
      else
      {
        v276 = 0;
      }
      v277 = (int *)&v276[4 * v272];
      v278 = &v276[4 * v275];
      *v277 = v264;
      v270 = v277 + 1;
      while (v242 != v271)
      {
        v279 = *--v242;
        *--v277 = v279;
      }
      __p = v277;
      v423 = (char *)v270;
      v424 = (int *)v278;
      if (v271)
        operator delete(v271);
    }
    else
    {
      *v242 = v264;
      v270 = v242 + 1;
    }
    v423 = (char *)v270;
    v280 = (uint64_t *)a1[12];
    if (!v280)
      v280 = &CoreML::Specification::_WeightParams_default_instance_;
    v281 = v280[5];
    if (*(char *)(v281 + 23) < 0)
      v282 = *(_QWORD *)(v281 + 8);
    else
      v282 = *(unsigned __int8 *)(v281 + 23);
    v283 = v280[6];
    v284 = *(unsigned __int8 *)(v283 + 23);
    if (*(char *)(v283 + 23) < 0)
      v285 = *(_QWORD *)(v283 + 8);
    else
      v285 = *(unsigned __int8 *)(v283 + 23);
    v286 = *((_DWORD *)v280 + 4);
    v287 = v280[7];
    v288 = *(unsigned __int8 *)(v287 + 23);
    if (*(char *)(v287 + 23) < 0)
      v289 = *(_QWORD *)(v287 + 8);
    else
      v289 = *(unsigned __int8 *)(v287 + 23);
    if (v286 <= 0)
      v290 = 1;
    else
      v290 = 2;
    if (v282)
      v291 = v290;
    else
      v291 = v286 > 0;
    if (v285)
      ++v291;
    if (v289)
      ++v291;
    if (v291 > 1)
    {
      v292 = 4;
      goto LABEL_729;
    }
    if (v291)
      v292 = 0;
    else
      v292 = 5;
    if (v286 <= 0 && v291 != 0)
    {
      if ((*(_BYTE *)(v281 + 23) & 0x80) != 0)
      {
        if (*(_QWORD *)(v281 + 8))
          goto LABEL_708;
      }
      else if (*(_BYTE *)(v281 + 23))
      {
LABEL_708:
        v292 = 1;
        goto LABEL_729;
      }
      if ((v284 & 0x80) != 0)
        v284 = *(_QWORD *)(v283 + 8);
      v294 = v280[8];
      if (v280 == &CoreML::Specification::_WeightParams_default_instance_
        || (v284 ? (v295 = v294 == 0) : (v295 = 1), v295))
      {
        if ((v288 & 0x80) != 0)
          v288 = *(_QWORD *)(v287 + 8);
        if (v294)
          v296 = v288 == 0;
        else
          v296 = 1;
        if (v296 || v280 == &CoreML::Specification::_WeightParams_default_instance_)
          v292 = 5;
        else
          v292 = 3;
      }
      else
      {
        v292 = 2;
      }
    }
LABEL_729:
    if (v270 >= v424)
    {
      v299 = (int *)__p;
      v300 = ((char *)v270 - (_BYTE *)__p) >> 2;
      v301 = v300 + 1;
      if ((unint64_t)(v300 + 1) >> 62)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      v302 = (char *)v424 - (_BYTE *)__p;
      if (((char *)v424 - (_BYTE *)__p) >> 1 > v301)
        v301 = v302 >> 1;
      if ((unint64_t)v302 >= 0x7FFFFFFFFFFFFFFCLL)
        v303 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v303 = v301;
      if (v303)
      {
        v304 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v424, v303);
        v299 = (int *)__p;
        v270 = (int *)v423;
      }
      else
      {
        v304 = 0;
      }
      v305 = (int *)&v304[4 * v300];
      v306 = &v304[4 * v303];
      *v305 = v292;
      v298 = v305 + 1;
      while (v270 != v299)
      {
        v307 = *--v270;
        *--v305 = v307;
      }
      __p = v305;
      v423 = (char *)v298;
      v424 = (int *)v306;
      if (v299)
        operator delete(v299);
    }
    else
    {
      *v270 = v292;
      v298 = v270 + 1;
    }
    v423 = (char *)v298;
    v308 = (uint64_t *)a1[13];
    if (!v308)
      v308 = &CoreML::Specification::_WeightParams_default_instance_;
    v309 = v308[5];
    if (*(char *)(v309 + 23) < 0)
      v310 = *(_QWORD *)(v309 + 8);
    else
      v310 = *(unsigned __int8 *)(v309 + 23);
    v311 = v308[6];
    v312 = *(unsigned __int8 *)(v311 + 23);
    if (*(char *)(v311 + 23) < 0)
      v313 = *(_QWORD *)(v311 + 8);
    else
      v313 = *(unsigned __int8 *)(v311 + 23);
    v314 = *((_DWORD *)v308 + 4);
    v315 = v308[7];
    v316 = *(unsigned __int8 *)(v315 + 23);
    if (*(char *)(v315 + 23) < 0)
      v317 = *(_QWORD *)(v315 + 8);
    else
      v317 = *(unsigned __int8 *)(v315 + 23);
    if (v314 <= 0)
      v318 = 1;
    else
      v318 = 2;
    if (v310)
      v319 = v318;
    else
      v319 = v314 > 0;
    if (v313)
      ++v319;
    if (v317)
      ++v319;
    if (v319 > 1)
    {
      v320 = 4;
LABEL_798:
      if (v298 >= v424)
      {
        v326 = (int *)__p;
        v327 = ((char *)v298 - (_BYTE *)__p) >> 2;
        v328 = v327 + 1;
        if ((unint64_t)(v327 + 1) >> 62)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v329 = (char *)v424 - (_BYTE *)__p;
        if (((char *)v424 - (_BYTE *)__p) >> 1 > v328)
          v328 = v329 >> 1;
        if ((unint64_t)v329 >= 0x7FFFFFFFFFFFFFFCLL)
          v330 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v330 = v328;
        if (v330)
        {
          v331 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v424, v330);
          v326 = (int *)__p;
          v298 = (int *)v423;
        }
        else
        {
          v331 = 0;
        }
        v332 = (int *)&v331[4 * v327];
        v333 = &v331[4 * v330];
        *v332 = v320;
        v214 = v332 + 1;
        while (v298 != v326)
        {
          v334 = *--v298;
          *--v332 = v334;
        }
        __p = v332;
        v423 = (char *)v214;
        v424 = (int *)v333;
        if (v326)
          operator delete(v326);
      }
      else
      {
        *v298 = v320;
        v214 = v298 + 1;
      }
      v423 = (char *)v214;
      goto LABEL_815;
    }
    if (v319)
      v320 = 0;
    else
      v320 = 5;
    if (v314 > 0 || v319 == 0)
      goto LABEL_798;
    if ((*(_BYTE *)(v309 + 23) & 0x80) != 0)
    {
      if (*(_QWORD *)(v309 + 8))
        goto LABEL_777;
    }
    else if (*(_BYTE *)(v309 + 23))
    {
LABEL_777:
      v320 = 1;
      goto LABEL_798;
    }
    if ((v312 & 0x80) != 0)
      v312 = *(_QWORD *)(v311 + 8);
    v322 = v308[8];
    if (v308 == &CoreML::Specification::_WeightParams_default_instance_
      || (v312 ? (v323 = v322 == 0) : (v323 = 1), v323))
    {
      if ((v316 & 0x80) != 0)
        v316 = *(_QWORD *)(v315 + 8);
      if (v322)
        v324 = v316 == 0;
      else
        v324 = 1;
      if (v324 || v308 == &CoreML::Specification::_WeightParams_default_instance_)
        v320 = 5;
      else
        v320 = 3;
    }
    else
    {
      v320 = 2;
    }
    goto LABEL_798;
  }
LABEL_815:
  if (!v5)
    goto LABEL_1020;
  v335 = (uint64_t *)a1[14];
  if (!v335)
    v335 = &CoreML::Specification::_WeightParams_default_instance_;
  v336 = v335[5];
  if (*(char *)(v336 + 23) < 0)
    v337 = *(_QWORD *)(v336 + 8);
  else
    v337 = *(unsigned __int8 *)(v336 + 23);
  v338 = v335[6];
  v339 = *(unsigned __int8 *)(v338 + 23);
  if (*(char *)(v338 + 23) < 0)
    v340 = *(_QWORD *)(v338 + 8);
  else
    v340 = *(unsigned __int8 *)(v338 + 23);
  v341 = *((_DWORD *)v335 + 4);
  v342 = v335[7];
  v343 = *(unsigned __int8 *)(v342 + 23);
  if (*(char *)(v342 + 23) < 0)
    v344 = *(_QWORD *)(v342 + 8);
  else
    v344 = *(unsigned __int8 *)(v342 + 23);
  if (v341 <= 0)
    v345 = 1;
  else
    v345 = 2;
  if (v337)
    v346 = v345;
  else
    v346 = v341 > 0;
  if (v340)
    ++v346;
  if (v344)
    ++v346;
  if (v346 > 1)
  {
    v347 = 4;
    goto LABEL_865;
  }
  if (v346)
    v347 = 0;
  else
    v347 = 5;
  if (v341 <= 0 && v346)
  {
    if ((*(_BYTE *)(v336 + 23) & 0x80) != 0)
    {
      if (*(_QWORD *)(v336 + 8))
        goto LABEL_846;
    }
    else if (*(_BYTE *)(v336 + 23))
    {
LABEL_846:
      v347 = 1;
      goto LABEL_865;
    }
    if ((v339 & 0x80) != 0)
      v339 = *(_QWORD *)(v338 + 8);
    v348 = v335[8];
    if (v335 != &CoreML::Specification::_WeightParams_default_instance_ && v339 && v348)
    {
      v347 = 2;
    }
    else
    {
      if ((v343 & 0x80) != 0)
        v343 = *(_QWORD *)(v342 + 8);
      if (v348)
        v349 = v343 == 0;
      else
        v349 = 1;
      if (v349 || v335 == &CoreML::Specification::_WeightParams_default_instance_)
        v347 = 5;
      else
        v347 = 3;
    }
  }
LABEL_865:
  if (v214 >= v424)
  {
    v352 = (int *)__p;
    v353 = ((char *)v214 - (_BYTE *)__p) >> 2;
    v354 = v353 + 1;
    if ((unint64_t)(v353 + 1) >> 62)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v355 = (char *)v424 - (_BYTE *)__p;
    if (((char *)v424 - (_BYTE *)__p) >> 1 > v354)
      v354 = v355 >> 1;
    if ((unint64_t)v355 >= 0x7FFFFFFFFFFFFFFCLL)
      v356 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v356 = v354;
    if (v356)
    {
      v357 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v424, v356);
      v352 = (int *)__p;
      v214 = (int *)v423;
    }
    else
    {
      v357 = 0;
    }
    v358 = (int *)&v357[4 * v353];
    v359 = &v357[4 * v356];
    *v358 = v347;
    v351 = v358 + 1;
    while (v214 != v352)
    {
      v360 = *--v214;
      *--v358 = v360;
    }
    __p = v358;
    v423 = (char *)v351;
    v424 = (int *)v359;
    if (v352)
      operator delete(v352);
  }
  else
  {
    *v214 = v347;
    v351 = v214 + 1;
  }
  v423 = (char *)v351;
  v361 = (uint64_t *)a1[15];
  if (!v361)
    v361 = &CoreML::Specification::_WeightParams_default_instance_;
  v362 = v361[5];
  if (*(char *)(v362 + 23) < 0)
    v363 = *(_QWORD *)(v362 + 8);
  else
    v363 = *(unsigned __int8 *)(v362 + 23);
  v364 = v361[6];
  v365 = *(unsigned __int8 *)(v364 + 23);
  if (*(char *)(v364 + 23) < 0)
    v366 = *(_QWORD *)(v364 + 8);
  else
    v366 = *(unsigned __int8 *)(v364 + 23);
  v367 = *((_DWORD *)v361 + 4);
  v368 = v361[7];
  v369 = *(unsigned __int8 *)(v368 + 23);
  if (*(char *)(v368 + 23) < 0)
    v370 = *(_QWORD *)(v368 + 8);
  else
    v370 = *(unsigned __int8 *)(v368 + 23);
  if (v367 <= 0)
    v371 = 1;
  else
    v371 = 2;
  if (v363)
    v372 = v371;
  else
    v372 = v367 > 0;
  if (v366)
    ++v372;
  if (v370)
    ++v372;
  if (v372 > 1)
  {
    v373 = 4;
    goto LABEL_934;
  }
  if (v372)
    v373 = 0;
  else
    v373 = 5;
  if (v367 <= 0 && v372 != 0)
  {
    if ((*(_BYTE *)(v362 + 23) & 0x80) != 0)
    {
      if (*(_QWORD *)(v362 + 8))
        goto LABEL_913;
    }
    else if (*(_BYTE *)(v362 + 23))
    {
LABEL_913:
      v373 = 1;
      goto LABEL_934;
    }
    if ((v365 & 0x80) != 0)
      v365 = *(_QWORD *)(v364 + 8);
    v375 = v361[8];
    if (v361 == &CoreML::Specification::_WeightParams_default_instance_
      || (v365 ? (v376 = v375 == 0) : (v376 = 1), v376))
    {
      if ((v369 & 0x80) != 0)
        v369 = *(_QWORD *)(v368 + 8);
      if (v375)
        v377 = v369 == 0;
      else
        v377 = 1;
      if (v377 || v361 == &CoreML::Specification::_WeightParams_default_instance_)
        v373 = 5;
      else
        v373 = 3;
    }
    else
    {
      v373 = 2;
    }
  }
LABEL_934:
  if (v351 >= v424)
  {
    v380 = (int *)__p;
    v381 = ((char *)v351 - (_BYTE *)__p) >> 2;
    v382 = v381 + 1;
    if ((unint64_t)(v381 + 1) >> 62)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v383 = (char *)v424 - (_BYTE *)__p;
    if (((char *)v424 - (_BYTE *)__p) >> 1 > v382)
      v382 = v383 >> 1;
    if ((unint64_t)v383 >= 0x7FFFFFFFFFFFFFFCLL)
      v384 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v384 = v382;
    if (v384)
    {
      v385 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v424, v384);
      v380 = (int *)__p;
      v351 = (int *)v423;
    }
    else
    {
      v385 = 0;
    }
    v386 = (int *)&v385[4 * v381];
    v387 = &v385[4 * v384];
    *v386 = v373;
    v379 = v386 + 1;
    while (v351 != v380)
    {
      v388 = *--v351;
      *--v386 = v388;
    }
    __p = v386;
    v423 = (char *)v379;
    v424 = (int *)v387;
    if (v380)
      operator delete(v380);
  }
  else
  {
    *v351 = v373;
    v379 = v351 + 1;
  }
  v423 = (char *)v379;
  v389 = (uint64_t *)a1[16];
  if (!v389)
    v389 = &CoreML::Specification::_WeightParams_default_instance_;
  v390 = v389[5];
  if (*(char *)(v390 + 23) < 0)
    v391 = *(_QWORD *)(v390 + 8);
  else
    v391 = *(unsigned __int8 *)(v390 + 23);
  v392 = v389[6];
  v393 = *(unsigned __int8 *)(v392 + 23);
  if (*(char *)(v392 + 23) < 0)
    v394 = *(_QWORD *)(v392 + 8);
  else
    v394 = *(unsigned __int8 *)(v392 + 23);
  v395 = *((_DWORD *)v389 + 4);
  v396 = v389[7];
  v397 = *(unsigned __int8 *)(v396 + 23);
  if (*(char *)(v396 + 23) < 0)
    v398 = *(_QWORD *)(v396 + 8);
  else
    v398 = *(unsigned __int8 *)(v396 + 23);
  if (v395 <= 0)
    v399 = 1;
  else
    v399 = 2;
  if (v391)
    v400 = v399;
  else
    v400 = v395 > 0;
  if (v394)
    ++v400;
  if (v398)
    ++v400;
  if (v400 <= 1)
  {
    if (v400)
      v401 = 0;
    else
      v401 = 5;
    if (v395 > 0 || v400 == 0)
      goto LABEL_1003;
    if ((*(_BYTE *)(v390 + 23) & 0x80) != 0)
    {
      if (*(_QWORD *)(v390 + 8))
        goto LABEL_982;
    }
    else if (*(_BYTE *)(v390 + 23))
    {
LABEL_982:
      v401 = 1;
      goto LABEL_1003;
    }
    if ((v393 & 0x80) != 0)
      v393 = *(_QWORD *)(v392 + 8);
    v403 = v389[8];
    if (v389 == &CoreML::Specification::_WeightParams_default_instance_
      || (v393 ? (v404 = v403 == 0) : (v404 = 1), v404))
    {
      if ((v397 & 0x80) != 0)
        v397 = *(_QWORD *)(v396 + 8);
      if (v403)
        v405 = v397 == 0;
      else
        v405 = 1;
      if (v405 || v389 == &CoreML::Specification::_WeightParams_default_instance_)
        v401 = 5;
      else
        v401 = 3;
    }
    else
    {
      v401 = 2;
    }
    goto LABEL_1003;
  }
  v401 = 4;
LABEL_1003:
  if (v379 >= v424)
  {
    v407 = (int *)__p;
    v408 = ((char *)v379 - (_BYTE *)__p) >> 2;
    v409 = v408 + 1;
    if ((unint64_t)(v408 + 1) >> 62)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v410 = (char *)v424 - (_BYTE *)__p;
    if (((char *)v424 - (_BYTE *)__p) >> 1 > v409)
      v409 = v410 >> 1;
    if ((unint64_t)v410 >= 0x7FFFFFFFFFFFFFFCLL)
      v411 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v411 = v409;
    if (v411)
    {
      v412 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v424, v411);
      v407 = (int *)__p;
      v379 = (int *)v423;
    }
    else
    {
      v412 = 0;
    }
    v413 = (int *)&v412[4 * v408];
    v414 = &v412[4 * v411];
    *v413 = v401;
    v214 = v413 + 1;
    while (v379 != v407)
    {
      v415 = *--v379;
      *--v413 = v415;
    }
    __p = v413;
    v423 = (char *)v214;
    v424 = (int *)v414;
    if (v407)
      operator delete(v407);
  }
  else
  {
    *v379 = v401;
    v214 = v379 + 1;
  }
  v423 = (char *)v214;
LABEL_1020:
  v416 = __p;
  if (__p == v214)
  {
LABEL_1030:
    CoreML::Result::Result(a3);
  }
  else
  {
    v417 = 0;
    v418 = 0;
    while (1)
    {
      v419 = *v416 ? v417 : v417 + 1;
      if (*v416 == 1)
        ++v418;
      else
        v417 = v419;
      if (v417 * v418 >= 1)
        break;
      if (++v416 == v214)
        goto LABEL_1030;
    }
    std::string::basic_string[abi:ne180100]<0>(&v420, "LSTM weight parameters have inconsistent field value types. Types should match and should be either half or full precision");
    CoreML::Result::Result(a3, 13);
    if (v421 < 0)
      operator delete(v420);
  }
  if (__p)
  {
    v423 = (char *)__p;
    operator delete(__p);
  }
}

void sub_2183479C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateBiDirectionalLSTMLayer(CoreML::NeuralNetworkSpecValidator *this@<X0>, const CoreML::Specification::NeuralNetworkLayer *a2@<X1>, uint64_t a3@<X8>)
{
  _BOOL8 v6;
  char *v7;
  uint64_t *v8;
  uint64_t v9;
  CoreML **v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t *v14;
  uint64_t v15;
  CoreML **v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  const CoreML::Specification::LSTMParams *v23;
  _BOOL8 v24;
  uint64_t *v25;
  const CoreML::Specification::LSTMParams *v26;
  const CoreML::Specification::WeightParams *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t *v30;
  uint64_t v31;
  const CoreML::Specification::WeightParams *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  std::string *v93;
  void *v94;
  char v95;
  _QWORD *v96;
  void *v97[2];
  char v98;
  std::string v99;
  uint64_t v100;
  void *v101;
  __int128 v102;
  void *__p[2];
  char v104;
  std::string::size_type v105;
  __int128 v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  const CoreML::Specification::LSTMParams *v110;
  uint64_t v111;
  const CoreML::Specification::WeightParams *v112;
  _BYTE v113[32];
  void *v114[2];
  char v115;
  std::string::size_type v116;
  __int128 v117;
  uint64_t v118;
  _BYTE v119[15];
  char v120;
  uint64_t v121;

  v121 = *MEMORY[0x24BDAC8D0];
  CoreML::Result::Result((CoreML::Result *)&v116);
  CoreML::validateInputCount(a2, (const CoreML::Specification::NeuralNetworkLayer *)1, 5, (CoreML::Result *)&v105);
  v116 = v105;
  if (SHIBYTE(v118) < 0)
    operator delete((void *)v117);
  v117 = v106;
  v118 = v107;
  if (CoreML::Result::good((CoreML::Result *)&v116))
  {
    CoreML::validateOutputCount(a2, (const CoreML::Specification::NeuralNetworkLayer *)5, 5, (CoreML::Result *)&v105);
    v116 = v105;
    if (SHIBYTE(v118) < 0)
      operator delete((void *)v117);
    v117 = v106;
    v118 = v107;
  }
  if (!CoreML::Result::good((CoreML::Result *)&v116))
    goto LABEL_66;
  v6 = CoreML::Result::good((CoreML::Result *)&v116);
  if (!v6)
    goto LABEL_66;
  if (*(_BYTE *)this)
  {
    std::string::basic_string[abi:ne180100]<0>(v114, "BiDirectionalLSTM");
    v7 = (char *)this + 32;
    CoreML::validateInputOutputRankEquality(a2, (uint64_t)v114, (uint64_t)v7, (CoreML::Result *)&v105);
    v116 = v105;
    if (SHIBYTE(v118) < 0)
      operator delete((void *)v117);
    v117 = v106;
    v118 = v107;
    HIBYTE(v107) = 0;
    LOBYTE(v106) = 0;
    if (v115 < 0)
      operator delete(v114[0]);
    if (!CoreML::Result::good((CoreML::Result *)&v116))
      goto LABEL_66;
    std::string::basic_string[abi:ne180100]<0>(__p, "BiDirectionalLSTM");
    CoreML::validateRankCount((uint64_t)a2, (uint64_t)__p, 5, 5, (uint64_t)v7, (uint64_t)&v105);
    v116 = v105;
    if (SHIBYTE(v118) < 0)
      operator delete((void *)v117);
    v117 = v106;
    v118 = v107;
    HIBYTE(v107) = 0;
    LOBYTE(v106) = 0;
    if (v104 < 0)
      operator delete(__p[0]);
    v6 = CoreML::Result::good((CoreML::Result *)&v116);
    if (!v6)
      goto LABEL_66;
  }
  if (*((_DWORD *)a2 + 35) == 430)
    v8 = (uint64_t *)*((_QWORD *)a2 + 16);
  else
    v8 = CoreML::Specification::BiDirectionalLSTMLayerParams::default_instance((CoreML::Specification::BiDirectionalLSTMLayerParams *)v6);
  v9 = v8[4];
  if (v9)
    v10 = (CoreML **)(v9 + 8);
  else
    v10 = 0;
  v11 = *((int *)v8 + 6);
  if ((_DWORD)v11)
  {
    v12 = 8 * v11 - 8;
    do
    {
      CoreML::validateRecurrentActivationParams(*v10, (CoreML::Result *)&v105);
      v116 = v105;
      if (SHIBYTE(v118) < 0)
        operator delete((void *)v117);
      v117 = v106;
      v118 = v107;
      v8 = (uint64_t *)CoreML::Result::good((CoreML::Result *)&v116);
      ++v10;
      if (v12)
        v13 = (char)v8;
      else
        v13 = 0;
      v12 -= 8;
    }
    while ((v13 & 1) != 0);
  }
  if (*((_DWORD *)a2 + 35) == 430)
    v14 = (uint64_t *)*((_QWORD *)a2 + 16);
  else
    v14 = CoreML::Specification::BiDirectionalLSTMLayerParams::default_instance((CoreML::Specification::BiDirectionalLSTMLayerParams *)v8);
  v15 = v14[7];
  if (v15)
    v16 = (CoreML **)(v15 + 8);
  else
    v16 = 0;
  v17 = *((int *)v14 + 12);
  if ((_DWORD)v17)
  {
    v18 = 8 * v17 - 8;
    do
    {
      CoreML::validateRecurrentActivationParams(*v16, (CoreML::Result *)&v105);
      v116 = v105;
      if (SHIBYTE(v118) < 0)
        operator delete((void *)v117);
      v117 = v106;
      v118 = v107;
      v14 = (uint64_t *)CoreML::Result::good((CoreML::Result *)&v116);
      ++v16;
      if (v18)
        v19 = (char)v14;
      else
        v19 = 0;
      v18 -= 8;
    }
    while ((v19 & 1) != 0);
  }
  if (*((_DWORD *)a2 + 35) == 420)
  {
    v20 = (uint64_t *)*((_QWORD *)a2 + 16);
    if (v20[6])
      v21 = (uint64_t *)v20[6];
    else
      v21 = &CoreML::Specification::_LSTMWeightParams_default_instance_;
  }
  else
  {
    v22 = CoreML::Specification::UniDirectionalLSTMLayerParams::default_instance((CoreML::Specification::UniDirectionalLSTMLayerParams *)v14);
    if (v22[6])
      v21 = (uint64_t *)v22[6];
    else
      v21 = &CoreML::Specification::_LSTMWeightParams_default_instance_;
    if (*((_DWORD *)a2 + 35) == 420)
      v20 = (uint64_t *)*((_QWORD *)a2 + 16);
    else
      v20 = CoreML::Specification::UniDirectionalLSTMLayerParams::default_instance((CoreML::Specification::UniDirectionalLSTMLayerParams *)v22);
  }
  if (v20[5])
    v23 = (const CoreML::Specification::LSTMParams *)v20[5];
  else
    v23 = (const CoreML::Specification::LSTMParams *)&CoreML::Specification::_LSTMParams_default_instance_;
  CoreML::Specification::LSTMParams::LSTMParams((CoreML::Specification::LSTMParams *)v113, v23);
  CoreML::validateLSTMWeightParams(v21, (uint64_t)v113, (CoreML::Result *)&v105);
  v116 = v105;
  if (SHIBYTE(v118) < 0)
    operator delete((void *)v117);
  v117 = v106;
  v118 = v107;
  HIBYTE(v107) = 0;
  LOBYTE(v106) = 0;
  CoreML::Specification::LSTMParams::~LSTMParams((CoreML::Specification::LSTMParams *)v113);
  v24 = CoreML::Result::good((CoreML::Result *)&v116);
  if (!v24)
  {
LABEL_66:
    *(_QWORD *)a3 = v116;
    *(_OWORD *)(a3 + 8) = v117;
    *(_QWORD *)(a3 + 24) = v118;
    return;
  }
  if (*((_DWORD *)a2 + 35) == 430)
    v25 = (uint64_t *)*((_QWORD *)a2 + 16);
  else
    v25 = CoreML::Specification::BiDirectionalLSTMLayerParams::default_instance((CoreML::Specification::BiDirectionalLSTMLayerParams *)v24);
  CoreML::Specification::BiDirectionalLSTMLayerParams::BiDirectionalLSTMLayerParams((CoreML::Specification::BiDirectionalLSTMLayerParams *)&v105, (const CoreML::Specification::BiDirectionalLSTMLayerParams *)v25);
  if (v110)
    v26 = v110;
  else
    v26 = (const CoreML::Specification::LSTMParams *)&CoreML::Specification::_LSTMParams_default_instance_;
  CoreML::Specification::LSTMParams::LSTMParams((CoreML::Specification::LSTMParams *)__p, v26);
  v101 = 0;
  v102 = 0uLL;
  if ((_DWORD)v107 != 3)
  {
    std::operator+<char>();
    v93 = std::string::append(&v99, " forward lstm must provide 3 activations");
LABEL_385:
    v94 = (void *)v93->__r_.__value_.__r.__words[0];
    *(_QWORD *)v119 = v93->__r_.__value_.__l.__size_;
    *(_QWORD *)&v119[7] = *(std::string::size_type *)((char *)&v93->__r_.__value_.__r.__words[1] + 7);
    v95 = HIBYTE(v93->__r_.__value_.__r.__words[2]);
    v93->__r_.__value_.__l.__size_ = 0;
    v93->__r_.__value_.__r.__words[2] = 0;
    v93->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v102) < 0)
      operator delete(v101);
    v101 = v94;
    *(_QWORD *)&v102 = *(_QWORD *)v119;
    *(_QWORD *)((char *)&v102 + 7) = *(_QWORD *)&v119[7];
    HIBYTE(v102) = v95;
    if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v99.__r_.__value_.__l.__data_);
    CoreML::Result::Result((_DWORD *)a3, 13);
    goto LABEL_390;
  }
  if (v108 != 3)
  {
    std::operator+<char>();
    v93 = std::string::append(&v99, " backward lstm must provide 3 activations");
    goto LABEL_385;
  }
  v28 = v111;
  v27 = v112;
  v29 = *(_QWORD **)(v109 + 8);
  v96 = *(_QWORD **)(v109 + 16);
  if (v29[2])
    v30 = (uint64_t *)v29[2];
  else
    v30 = &CoreML::Specification::_WeightParams_default_instance_;
  std::string::basic_string[abi:ne180100]<0>(v119, "Bidirectional LSTM");
  v31 = *((_QWORD *)a2 + 14);
  std::string::basic_string[abi:ne180100]<0>(v97, "forward input gate weight matrix");
  v32 = (const CoreML::Specification::WeightParams *)(v28 * (_QWORD)v27);
  CoreML::validateGeneralWeightParams((uint64_t)v30, v32, v27, (const void **)v119, v31, (uint64_t)v97, (uint64_t)&v99);
  v116 = v99.__r_.__value_.__r.__words[0];
  if (SHIBYTE(v118) < 0)
    operator delete((void *)v117);
  v117 = *(_OWORD *)&v99.__r_.__value_.__r.__words[1];
  v118 = v100;
  HIBYTE(v100) = 0;
  v99.__r_.__value_.__s.__data_[8] = 0;
  if (v98 < 0)
    operator delete(v97[0]);
  if (v120 < 0)
    operator delete(*(void **)v119);
  if (!CoreML::Result::good((CoreML::Result *)&v116))
    goto LABEL_382;
  if (v29[3])
    v33 = (uint64_t *)v29[3];
  else
    v33 = &CoreML::Specification::_WeightParams_default_instance_;
  std::string::basic_string[abi:ne180100]<0>(v119, "Bidirectional LSTM");
  v34 = *((_QWORD *)a2 + 14);
  std::string::basic_string[abi:ne180100]<0>(v97, "forward forget gate weight matrix");
  CoreML::validateGeneralWeightParams((uint64_t)v33, v32, v27, (const void **)v119, v34, (uint64_t)v97, (uint64_t)&v99);
  v116 = v99.__r_.__value_.__r.__words[0];
  if (SHIBYTE(v118) < 0)
    operator delete((void *)v117);
  v117 = *(_OWORD *)&v99.__r_.__value_.__r.__words[1];
  v118 = v100;
  HIBYTE(v100) = 0;
  v99.__r_.__value_.__s.__data_[8] = 0;
  if (v98 < 0)
    operator delete(v97[0]);
  if (v120 < 0)
    operator delete(*(void **)v119);
  if (!CoreML::Result::good((CoreML::Result *)&v116))
    goto LABEL_382;
  if (v29[4])
    v35 = (uint64_t *)v29[4];
  else
    v35 = &CoreML::Specification::_WeightParams_default_instance_;
  std::string::basic_string[abi:ne180100]<0>(v119, "Bidirectional LSTM");
  v36 = *((_QWORD *)a2 + 14);
  std::string::basic_string[abi:ne180100]<0>(v97, "forward block input gate weight matrix");
  CoreML::validateGeneralWeightParams((uint64_t)v35, v32, v27, (const void **)v119, v36, (uint64_t)v97, (uint64_t)&v99);
  v116 = v99.__r_.__value_.__r.__words[0];
  if (SHIBYTE(v118) < 0)
    operator delete((void *)v117);
  v117 = *(_OWORD *)&v99.__r_.__value_.__r.__words[1];
  v118 = v100;
  HIBYTE(v100) = 0;
  v99.__r_.__value_.__s.__data_[8] = 0;
  if (v98 < 0)
    operator delete(v97[0]);
  if (v120 < 0)
    operator delete(*(void **)v119);
  if (!CoreML::Result::good((CoreML::Result *)&v116))
    goto LABEL_382;
  if (v29[5])
    v37 = (uint64_t *)v29[5];
  else
    v37 = &CoreML::Specification::_WeightParams_default_instance_;
  std::string::basic_string[abi:ne180100]<0>(v119, "Bidirectional LSTM");
  v38 = *((_QWORD *)a2 + 14);
  std::string::basic_string[abi:ne180100]<0>(v97, "forward output gate weight matrix");
  CoreML::validateGeneralWeightParams((uint64_t)v37, v32, v27, (const void **)v119, v38, (uint64_t)v97, (uint64_t)&v99);
  v116 = v99.__r_.__value_.__r.__words[0];
  if (SHIBYTE(v118) < 0)
    operator delete((void *)v117);
  v117 = *(_OWORD *)&v99.__r_.__value_.__r.__words[1];
  v118 = v100;
  HIBYTE(v100) = 0;
  v99.__r_.__value_.__s.__data_[8] = 0;
  if (v98 < 0)
    operator delete(v97[0]);
  if (v120 < 0)
    operator delete(*(void **)v119);
  if (!CoreML::Result::good((CoreML::Result *)&v116))
    goto LABEL_382;
  if (v29[6])
    v39 = (uint64_t *)v29[6];
  else
    v39 = &CoreML::Specification::_WeightParams_default_instance_;
  std::string::basic_string[abi:ne180100]<0>(v119, "Bidirectional LSTM");
  v40 = *((_QWORD *)a2 + 14);
  std::string::basic_string[abi:ne180100]<0>(v97, "forward input gate recursion matrix");
  CoreML::validateGeneralWeightParams((uint64_t)v39, (const CoreML::Specification::WeightParams *)((_QWORD)v27 * (_QWORD)v27), v27, (const void **)v119, v40, (uint64_t)v97, (uint64_t)&v99);
  v116 = v99.__r_.__value_.__r.__words[0];
  if (SHIBYTE(v118) < 0)
    operator delete((void *)v117);
  v117 = *(_OWORD *)&v99.__r_.__value_.__r.__words[1];
  v118 = v100;
  HIBYTE(v100) = 0;
  v99.__r_.__value_.__s.__data_[8] = 0;
  if (v98 < 0)
    operator delete(v97[0]);
  if (v120 < 0)
    operator delete(*(void **)v119);
  if (!CoreML::Result::good((CoreML::Result *)&v116))
    goto LABEL_382;
  if (v29[7])
    v41 = (uint64_t *)v29[7];
  else
    v41 = &CoreML::Specification::_WeightParams_default_instance_;
  std::string::basic_string[abi:ne180100]<0>(v119, "Bidirectional LSTM");
  v42 = *((_QWORD *)a2 + 14);
  std::string::basic_string[abi:ne180100]<0>(v97, "forward forget gate recursion matrix");
  CoreML::validateGeneralWeightParams((uint64_t)v41, (const CoreML::Specification::WeightParams *)((_QWORD)v27 * (_QWORD)v27), v27, (const void **)v119, v42, (uint64_t)v97, (uint64_t)&v99);
  v116 = v99.__r_.__value_.__r.__words[0];
  if (SHIBYTE(v118) < 0)
    operator delete((void *)v117);
  v117 = *(_OWORD *)&v99.__r_.__value_.__r.__words[1];
  v118 = v100;
  HIBYTE(v100) = 0;
  v99.__r_.__value_.__s.__data_[8] = 0;
  if (v98 < 0)
    operator delete(v97[0]);
  if (v120 < 0)
    operator delete(*(void **)v119);
  if (!CoreML::Result::good((CoreML::Result *)&v116))
    goto LABEL_382;
  if (v29[8])
    v43 = (uint64_t *)v29[8];
  else
    v43 = &CoreML::Specification::_WeightParams_default_instance_;
  std::string::basic_string[abi:ne180100]<0>(v119, "Bidirectional LSTM");
  v44 = *((_QWORD *)a2 + 14);
  std::string::basic_string[abi:ne180100]<0>(v97, "forward block input gate recursion matrix");
  CoreML::validateGeneralWeightParams((uint64_t)v43, (const CoreML::Specification::WeightParams *)((_QWORD)v27 * (_QWORD)v27), v27, (const void **)v119, v44, (uint64_t)v97, (uint64_t)&v99);
  v116 = v99.__r_.__value_.__r.__words[0];
  if (SHIBYTE(v118) < 0)
    operator delete((void *)v117);
  v117 = *(_OWORD *)&v99.__r_.__value_.__r.__words[1];
  v118 = v100;
  HIBYTE(v100) = 0;
  v99.__r_.__value_.__s.__data_[8] = 0;
  if (v98 < 0)
    operator delete(v97[0]);
  if (v120 < 0)
    operator delete(*(void **)v119);
  if (!CoreML::Result::good((CoreML::Result *)&v116))
    goto LABEL_382;
  if (v29[9])
    v45 = (uint64_t *)v29[9];
  else
    v45 = &CoreML::Specification::_WeightParams_default_instance_;
  std::string::basic_string[abi:ne180100]<0>(v119, "Bidirectional LSTM");
  v46 = *((_QWORD *)a2 + 14);
  std::string::basic_string[abi:ne180100]<0>(v97, "forward output gate recursion matrix");
  CoreML::validateGeneralWeightParams((uint64_t)v45, (const CoreML::Specification::WeightParams *)((_QWORD)v27 * (_QWORD)v27), v27, (const void **)v119, v46, (uint64_t)v97, (uint64_t)&v99);
  v116 = v99.__r_.__value_.__r.__words[0];
  if (SHIBYTE(v118) < 0)
    operator delete((void *)v117);
  v117 = *(_OWORD *)&v99.__r_.__value_.__r.__words[1];
  v118 = v100;
  HIBYTE(v100) = 0;
  v99.__r_.__value_.__s.__data_[8] = 0;
  if (v98 < 0)
    operator delete(v97[0]);
  if (v120 < 0)
    operator delete(*(void **)v119);
  if (!CoreML::Result::good((CoreML::Result *)&v116))
    goto LABEL_382;
  if (v96[2])
    v47 = (uint64_t *)v96[2];
  else
    v47 = &CoreML::Specification::_WeightParams_default_instance_;
  std::string::basic_string[abi:ne180100]<0>(v119, "Bidirectional LSTM");
  v48 = *((_QWORD *)a2 + 14);
  std::string::basic_string[abi:ne180100]<0>(v97, "backward input gate weight matrix");
  CoreML::validateGeneralWeightParams((uint64_t)v47, v32, v27, (const void **)v119, v48, (uint64_t)v97, (uint64_t)&v99);
  v116 = v99.__r_.__value_.__r.__words[0];
  if (SHIBYTE(v118) < 0)
    operator delete((void *)v117);
  v117 = *(_OWORD *)&v99.__r_.__value_.__r.__words[1];
  v118 = v100;
  HIBYTE(v100) = 0;
  v99.__r_.__value_.__s.__data_[8] = 0;
  if (v98 < 0)
    operator delete(v97[0]);
  if (v120 < 0)
    operator delete(*(void **)v119);
  if (!CoreML::Result::good((CoreML::Result *)&v116))
    goto LABEL_382;
  if (v96[3])
    v49 = (uint64_t *)v96[3];
  else
    v49 = &CoreML::Specification::_WeightParams_default_instance_;
  std::string::basic_string[abi:ne180100]<0>(v119, "Bidirectional LSTM");
  v50 = *((_QWORD *)a2 + 14);
  std::string::basic_string[abi:ne180100]<0>(v97, "backward forget gate weight matrix");
  CoreML::validateGeneralWeightParams((uint64_t)v49, v32, v27, (const void **)v119, v50, (uint64_t)v97, (uint64_t)&v99);
  v116 = v99.__r_.__value_.__r.__words[0];
  if (SHIBYTE(v118) < 0)
    operator delete((void *)v117);
  v117 = *(_OWORD *)&v99.__r_.__value_.__r.__words[1];
  v118 = v100;
  HIBYTE(v100) = 0;
  v99.__r_.__value_.__s.__data_[8] = 0;
  if (v98 < 0)
    operator delete(v97[0]);
  if (v120 < 0)
    operator delete(*(void **)v119);
  if (!CoreML::Result::good((CoreML::Result *)&v116))
    goto LABEL_382;
  if (v96[4])
    v51 = (uint64_t *)v96[4];
  else
    v51 = &CoreML::Specification::_WeightParams_default_instance_;
  std::string::basic_string[abi:ne180100]<0>(v119, "Bidirectional LSTM");
  v52 = *((_QWORD *)a2 + 14);
  std::string::basic_string[abi:ne180100]<0>(v97, "backward block input gate weight matrix");
  CoreML::validateGeneralWeightParams((uint64_t)v51, v32, v27, (const void **)v119, v52, (uint64_t)v97, (uint64_t)&v99);
  v116 = v99.__r_.__value_.__r.__words[0];
  if (SHIBYTE(v118) < 0)
    operator delete((void *)v117);
  v117 = *(_OWORD *)&v99.__r_.__value_.__r.__words[1];
  v118 = v100;
  HIBYTE(v100) = 0;
  v99.__r_.__value_.__s.__data_[8] = 0;
  if (v98 < 0)
    operator delete(v97[0]);
  if (v120 < 0)
    operator delete(*(void **)v119);
  if (!CoreML::Result::good((CoreML::Result *)&v116))
    goto LABEL_382;
  if (v96[5])
    v53 = (uint64_t *)v96[5];
  else
    v53 = &CoreML::Specification::_WeightParams_default_instance_;
  std::string::basic_string[abi:ne180100]<0>(v119, "Bidirectional LSTM");
  v54 = *((_QWORD *)a2 + 14);
  std::string::basic_string[abi:ne180100]<0>(v97, "backward output gate weight matrix");
  CoreML::validateGeneralWeightParams((uint64_t)v53, v32, v27, (const void **)v119, v54, (uint64_t)v97, (uint64_t)&v99);
  v116 = v99.__r_.__value_.__r.__words[0];
  if (SHIBYTE(v118) < 0)
    operator delete((void *)v117);
  v117 = *(_OWORD *)&v99.__r_.__value_.__r.__words[1];
  v118 = v100;
  HIBYTE(v100) = 0;
  v99.__r_.__value_.__s.__data_[8] = 0;
  if (v98 < 0)
    operator delete(v97[0]);
  if (v120 < 0)
    operator delete(*(void **)v119);
  if (!CoreML::Result::good((CoreML::Result *)&v116))
    goto LABEL_382;
  if (v96[6])
    v55 = (uint64_t *)v96[6];
  else
    v55 = &CoreML::Specification::_WeightParams_default_instance_;
  std::string::basic_string[abi:ne180100]<0>(v119, "Bidirectional LSTM");
  v56 = *((_QWORD *)a2 + 14);
  std::string::basic_string[abi:ne180100]<0>(v97, "backward input gate recursion matrix");
  CoreML::validateGeneralWeightParams((uint64_t)v55, (const CoreML::Specification::WeightParams *)((_QWORD)v27 * (_QWORD)v27), v27, (const void **)v119, v56, (uint64_t)v97, (uint64_t)&v99);
  v116 = v99.__r_.__value_.__r.__words[0];
  if (SHIBYTE(v118) < 0)
    operator delete((void *)v117);
  v117 = *(_OWORD *)&v99.__r_.__value_.__r.__words[1];
  v118 = v100;
  HIBYTE(v100) = 0;
  v99.__r_.__value_.__s.__data_[8] = 0;
  if (v98 < 0)
    operator delete(v97[0]);
  if (v120 < 0)
    operator delete(*(void **)v119);
  if (!CoreML::Result::good((CoreML::Result *)&v116))
    goto LABEL_382;
  if (v96[7])
    v57 = (uint64_t *)v96[7];
  else
    v57 = &CoreML::Specification::_WeightParams_default_instance_;
  std::string::basic_string[abi:ne180100]<0>(v119, "Bidirectional LSTM");
  v58 = *((_QWORD *)a2 + 14);
  std::string::basic_string[abi:ne180100]<0>(v97, "backward forget gate recursion matrix");
  CoreML::validateGeneralWeightParams((uint64_t)v57, (const CoreML::Specification::WeightParams *)((_QWORD)v27 * (_QWORD)v27), v27, (const void **)v119, v58, (uint64_t)v97, (uint64_t)&v99);
  v116 = v99.__r_.__value_.__r.__words[0];
  if (SHIBYTE(v118) < 0)
    operator delete((void *)v117);
  v117 = *(_OWORD *)&v99.__r_.__value_.__r.__words[1];
  v118 = v100;
  HIBYTE(v100) = 0;
  v99.__r_.__value_.__s.__data_[8] = 0;
  if (v98 < 0)
    operator delete(v97[0]);
  if (v120 < 0)
    operator delete(*(void **)v119);
  if (!CoreML::Result::good((CoreML::Result *)&v116))
    goto LABEL_382;
  if (v96[8])
    v59 = (uint64_t *)v96[8];
  else
    v59 = &CoreML::Specification::_WeightParams_default_instance_;
  std::string::basic_string[abi:ne180100]<0>(v119, "Bidirectional LSTM");
  v60 = *((_QWORD *)a2 + 14);
  std::string::basic_string[abi:ne180100]<0>(v97, "backward block input gate recursion matrix");
  CoreML::validateGeneralWeightParams((uint64_t)v59, (const CoreML::Specification::WeightParams *)((_QWORD)v27 * (_QWORD)v27), v27, (const void **)v119, v60, (uint64_t)v97, (uint64_t)&v99);
  v116 = v99.__r_.__value_.__r.__words[0];
  if (SHIBYTE(v118) < 0)
    operator delete((void *)v117);
  v117 = *(_OWORD *)&v99.__r_.__value_.__r.__words[1];
  v118 = v100;
  HIBYTE(v100) = 0;
  v99.__r_.__value_.__s.__data_[8] = 0;
  if (v98 < 0)
    operator delete(v97[0]);
  if (v120 < 0)
    operator delete(*(void **)v119);
  if (!CoreML::Result::good((CoreML::Result *)&v116))
    goto LABEL_382;
  if (v96[9])
    v61 = (uint64_t *)v96[9];
  else
    v61 = &CoreML::Specification::_WeightParams_default_instance_;
  std::string::basic_string[abi:ne180100]<0>(v119, "Bidirectional LSTM");
  v62 = *((_QWORD *)a2 + 14);
  std::string::basic_string[abi:ne180100]<0>(v97, "backward output gate recursion matrix");
  CoreML::validateGeneralWeightParams((uint64_t)v61, (const CoreML::Specification::WeightParams *)((_QWORD)v27 * (_QWORD)v27), v27, (const void **)v119, v62, (uint64_t)v97, (uint64_t)&v99);
  v116 = v99.__r_.__value_.__r.__words[0];
  if (SHIBYTE(v118) < 0)
    operator delete((void *)v117);
  v117 = *(_OWORD *)&v99.__r_.__value_.__r.__words[1];
  v118 = v100;
  HIBYTE(v100) = 0;
  v99.__r_.__value_.__s.__data_[8] = 0;
  if (v98 < 0)
    operator delete(v97[0]);
  if (v120 < 0)
    operator delete(*(void **)v119);
  if (!CoreML::Result::good((CoreML::Result *)&v116))
    goto LABEL_382;
  v63 = (uint64_t *)v110;
  if (v110)
    v64 = (uint64_t *)v110;
  else
    v64 = &CoreML::Specification::_LSTMParams_default_instance_;
  if (*((_BYTE *)v64 + 21))
  {
    if (v29[10])
      v65 = (uint64_t *)v29[10];
    else
      v65 = &CoreML::Specification::_WeightParams_default_instance_;
    std::string::basic_string[abi:ne180100]<0>(v119, "Bidirectional LSTM");
    v66 = *((_QWORD *)a2 + 14);
    std::string::basic_string[abi:ne180100]<0>(v97, "forward input gate bias vector");
    CoreML::validateGeneralWeightParams((uint64_t)v65, v27, (const CoreML::Specification::WeightParams *)1, (const void **)v119, v66, (uint64_t)v97, (uint64_t)&v99);
    v116 = v99.__r_.__value_.__r.__words[0];
    if (SHIBYTE(v118) < 0)
      operator delete((void *)v117);
    v117 = *(_OWORD *)&v99.__r_.__value_.__r.__words[1];
    v118 = v100;
    HIBYTE(v100) = 0;
    v99.__r_.__value_.__s.__data_[8] = 0;
    if (v98 < 0)
      operator delete(v97[0]);
    if (v120 < 0)
      operator delete(*(void **)v119);
    if (!CoreML::Result::good((CoreML::Result *)&v116))
      goto LABEL_382;
    if (v29[11])
      v67 = (uint64_t *)v29[11];
    else
      v67 = &CoreML::Specification::_WeightParams_default_instance_;
    std::string::basic_string[abi:ne180100]<0>(v119, "Bidirectional LSTM");
    v68 = *((_QWORD *)a2 + 14);
    std::string::basic_string[abi:ne180100]<0>(v97, "forward forget gate bias vector");
    CoreML::validateGeneralWeightParams((uint64_t)v67, v27, (const CoreML::Specification::WeightParams *)1, (const void **)v119, v68, (uint64_t)v97, (uint64_t)&v99);
    v116 = v99.__r_.__value_.__r.__words[0];
    if (SHIBYTE(v118) < 0)
      operator delete((void *)v117);
    v117 = *(_OWORD *)&v99.__r_.__value_.__r.__words[1];
    v118 = v100;
    HIBYTE(v100) = 0;
    v99.__r_.__value_.__s.__data_[8] = 0;
    if (v98 < 0)
      operator delete(v97[0]);
    if (v120 < 0)
      operator delete(*(void **)v119);
    if (!CoreML::Result::good((CoreML::Result *)&v116))
      goto LABEL_382;
    if (v29[12])
      v69 = (uint64_t *)v29[12];
    else
      v69 = &CoreML::Specification::_WeightParams_default_instance_;
    std::string::basic_string[abi:ne180100]<0>(v119, "Bidirectional LSTM");
    v70 = *((_QWORD *)a2 + 14);
    std::string::basic_string[abi:ne180100]<0>(v97, "forward block input bias vector");
    CoreML::validateGeneralWeightParams((uint64_t)v69, v27, (const CoreML::Specification::WeightParams *)1, (const void **)v119, v70, (uint64_t)v97, (uint64_t)&v99);
    v116 = v99.__r_.__value_.__r.__words[0];
    if (SHIBYTE(v118) < 0)
      operator delete((void *)v117);
    v117 = *(_OWORD *)&v99.__r_.__value_.__r.__words[1];
    v118 = v100;
    HIBYTE(v100) = 0;
    v99.__r_.__value_.__s.__data_[8] = 0;
    if (v98 < 0)
      operator delete(v97[0]);
    if (v120 < 0)
      operator delete(*(void **)v119);
    if (!CoreML::Result::good((CoreML::Result *)&v116))
      goto LABEL_382;
    if (v29[13])
      v71 = (uint64_t *)v29[13];
    else
      v71 = &CoreML::Specification::_WeightParams_default_instance_;
    std::string::basic_string[abi:ne180100]<0>(v119, "Bidirectional LSTM");
    v72 = *((_QWORD *)a2 + 14);
    std::string::basic_string[abi:ne180100]<0>(v97, "forward output gate bias vector");
    CoreML::validateGeneralWeightParams((uint64_t)v71, v27, (const CoreML::Specification::WeightParams *)1, (const void **)v119, v72, (uint64_t)v97, (uint64_t)&v99);
    v116 = v99.__r_.__value_.__r.__words[0];
    if (SHIBYTE(v118) < 0)
      operator delete((void *)v117);
    v117 = *(_OWORD *)&v99.__r_.__value_.__r.__words[1];
    v118 = v100;
    HIBYTE(v100) = 0;
    v99.__r_.__value_.__s.__data_[8] = 0;
    if (v98 < 0)
      operator delete(v97[0]);
    if (v120 < 0)
      operator delete(*(void **)v119);
    if (!CoreML::Result::good((CoreML::Result *)&v116))
      goto LABEL_382;
    if (v96[10])
      v73 = (uint64_t *)v96[10];
    else
      v73 = &CoreML::Specification::_WeightParams_default_instance_;
    std::string::basic_string[abi:ne180100]<0>(v119, "Bidirectional LSTM");
    v74 = *((_QWORD *)a2 + 14);
    std::string::basic_string[abi:ne180100]<0>(v97, "backward input gate bias vector");
    CoreML::validateGeneralWeightParams((uint64_t)v73, v27, (const CoreML::Specification::WeightParams *)1, (const void **)v119, v74, (uint64_t)v97, (uint64_t)&v99);
    v116 = v99.__r_.__value_.__r.__words[0];
    if (SHIBYTE(v118) < 0)
      operator delete((void *)v117);
    v117 = *(_OWORD *)&v99.__r_.__value_.__r.__words[1];
    v118 = v100;
    HIBYTE(v100) = 0;
    v99.__r_.__value_.__s.__data_[8] = 0;
    if (v98 < 0)
      operator delete(v97[0]);
    if (v120 < 0)
      operator delete(*(void **)v119);
    if (!CoreML::Result::good((CoreML::Result *)&v116))
      goto LABEL_382;
    if (v96[11])
      v75 = (uint64_t *)v96[11];
    else
      v75 = &CoreML::Specification::_WeightParams_default_instance_;
    std::string::basic_string[abi:ne180100]<0>(v119, "Bidirectional LSTM");
    v76 = *((_QWORD *)a2 + 14);
    std::string::basic_string[abi:ne180100]<0>(v97, "backward forget gate bias vector");
    CoreML::validateGeneralWeightParams((uint64_t)v75, v27, (const CoreML::Specification::WeightParams *)1, (const void **)v119, v76, (uint64_t)v97, (uint64_t)&v99);
    v116 = v99.__r_.__value_.__r.__words[0];
    if (SHIBYTE(v118) < 0)
      operator delete((void *)v117);
    v117 = *(_OWORD *)&v99.__r_.__value_.__r.__words[1];
    v118 = v100;
    HIBYTE(v100) = 0;
    v99.__r_.__value_.__s.__data_[8] = 0;
    if (v98 < 0)
      operator delete(v97[0]);
    if (v120 < 0)
      operator delete(*(void **)v119);
    if (!CoreML::Result::good((CoreML::Result *)&v116))
      goto LABEL_382;
    if (v96[12])
      v77 = (uint64_t *)v96[12];
    else
      v77 = &CoreML::Specification::_WeightParams_default_instance_;
    std::string::basic_string[abi:ne180100]<0>(v119, "Bidirectional LSTM");
    v78 = *((_QWORD *)a2 + 14);
    std::string::basic_string[abi:ne180100]<0>(v97, "backward block input bias vector");
    CoreML::validateGeneralWeightParams((uint64_t)v77, v27, (const CoreML::Specification::WeightParams *)1, (const void **)v119, v78, (uint64_t)v97, (uint64_t)&v99);
    v116 = v99.__r_.__value_.__r.__words[0];
    if (SHIBYTE(v118) < 0)
      operator delete((void *)v117);
    v117 = *(_OWORD *)&v99.__r_.__value_.__r.__words[1];
    v118 = v100;
    HIBYTE(v100) = 0;
    v99.__r_.__value_.__s.__data_[8] = 0;
    if (v98 < 0)
      operator delete(v97[0]);
    if (v120 < 0)
      operator delete(*(void **)v119);
    if (!CoreML::Result::good((CoreML::Result *)&v116))
      goto LABEL_382;
    if (v96[13])
      v79 = (uint64_t *)v96[13];
    else
      v79 = &CoreML::Specification::_WeightParams_default_instance_;
    std::string::basic_string[abi:ne180100]<0>(v119, "Bidirectional LSTM");
    v80 = *((_QWORD *)a2 + 14);
    std::string::basic_string[abi:ne180100]<0>(v97, "backward output gate bias vector");
    CoreML::validateGeneralWeightParams((uint64_t)v79, v27, (const CoreML::Specification::WeightParams *)1, (const void **)v119, v80, (uint64_t)v97, (uint64_t)&v99);
    v116 = v99.__r_.__value_.__r.__words[0];
    if (SHIBYTE(v118) < 0)
      operator delete((void *)v117);
    v117 = *(_OWORD *)&v99.__r_.__value_.__r.__words[1];
    v118 = v100;
    HIBYTE(v100) = 0;
    v99.__r_.__value_.__s.__data_[8] = 0;
    if (v98 < 0)
      operator delete(v97[0]);
    if (v120 < 0)
      operator delete(*(void **)v119);
    if (!CoreML::Result::good((CoreML::Result *)&v116))
      goto LABEL_382;
    v63 = (uint64_t *)v110;
  }
  if (!v63)
    v63 = &CoreML::Specification::_LSTMParams_default_instance_;
  if (*((_BYTE *)v63 + 23))
  {
    if (v29[14])
      v81 = (uint64_t *)v29[14];
    else
      v81 = &CoreML::Specification::_WeightParams_default_instance_;
    std::string::basic_string[abi:ne180100]<0>(v119, "Bidirectional LSTM");
    v82 = *((_QWORD *)a2 + 14);
    std::string::basic_string[abi:ne180100]<0>(v97, "forward input gate peephole vector");
    CoreML::validateGeneralWeightParams((uint64_t)v81, v27, (const CoreML::Specification::WeightParams *)1, (const void **)v119, v82, (uint64_t)v97, (uint64_t)&v99);
    v116 = v99.__r_.__value_.__r.__words[0];
    if (SHIBYTE(v118) < 0)
      operator delete((void *)v117);
    v117 = *(_OWORD *)&v99.__r_.__value_.__r.__words[1];
    v118 = v100;
    HIBYTE(v100) = 0;
    v99.__r_.__value_.__s.__data_[8] = 0;
    if (v98 < 0)
      operator delete(v97[0]);
    if (v120 < 0)
      operator delete(*(void **)v119);
    if (CoreML::Result::good((CoreML::Result *)&v116))
    {
      if (v29[15])
        v83 = (uint64_t *)v29[15];
      else
        v83 = &CoreML::Specification::_WeightParams_default_instance_;
      std::string::basic_string[abi:ne180100]<0>(v119, "Bidirectional LSTM");
      v84 = *((_QWORD *)a2 + 14);
      std::string::basic_string[abi:ne180100]<0>(v97, "forward forget gate peephole vector");
      CoreML::validateGeneralWeightParams((uint64_t)v83, v27, (const CoreML::Specification::WeightParams *)1, (const void **)v119, v84, (uint64_t)v97, (uint64_t)&v99);
      v116 = v99.__r_.__value_.__r.__words[0];
      if (SHIBYTE(v118) < 0)
        operator delete((void *)v117);
      v117 = *(_OWORD *)&v99.__r_.__value_.__r.__words[1];
      v118 = v100;
      HIBYTE(v100) = 0;
      v99.__r_.__value_.__s.__data_[8] = 0;
      if (v98 < 0)
        operator delete(v97[0]);
      if (v120 < 0)
        operator delete(*(void **)v119);
      if (CoreML::Result::good((CoreML::Result *)&v116))
      {
        if (v29[16])
          v85 = (uint64_t *)v29[16];
        else
          v85 = &CoreML::Specification::_WeightParams_default_instance_;
        std::string::basic_string[abi:ne180100]<0>(v119, "Bidirectional LSTM");
        v86 = *((_QWORD *)a2 + 14);
        std::string::basic_string[abi:ne180100]<0>(v97, "forward output gate peephole vector");
        CoreML::validateGeneralWeightParams((uint64_t)v85, v27, (const CoreML::Specification::WeightParams *)1, (const void **)v119, v86, (uint64_t)v97, (uint64_t)&v99);
        v116 = v99.__r_.__value_.__r.__words[0];
        if (SHIBYTE(v118) < 0)
          operator delete((void *)v117);
        v117 = *(_OWORD *)&v99.__r_.__value_.__r.__words[1];
        v118 = v100;
        HIBYTE(v100) = 0;
        v99.__r_.__value_.__s.__data_[8] = 0;
        if (v98 < 0)
          operator delete(v97[0]);
        if (v120 < 0)
          operator delete(*(void **)v119);
        if (CoreML::Result::good((CoreML::Result *)&v116))
        {
          if (v96[14])
            v87 = (uint64_t *)v96[14];
          else
            v87 = &CoreML::Specification::_WeightParams_default_instance_;
          std::string::basic_string[abi:ne180100]<0>(v119, "Bidirectional LSTM");
          v88 = *((_QWORD *)a2 + 14);
          std::string::basic_string[abi:ne180100]<0>(v97, "backward input gate peephole vector");
          CoreML::validateGeneralWeightParams((uint64_t)v87, v27, (const CoreML::Specification::WeightParams *)1, (const void **)v119, v88, (uint64_t)v97, (uint64_t)&v99);
          v116 = v99.__r_.__value_.__r.__words[0];
          if (SHIBYTE(v118) < 0)
            operator delete((void *)v117);
          v117 = *(_OWORD *)&v99.__r_.__value_.__r.__words[1];
          v118 = v100;
          HIBYTE(v100) = 0;
          v99.__r_.__value_.__s.__data_[8] = 0;
          if (v98 < 0)
            operator delete(v97[0]);
          if (v120 < 0)
            operator delete(*(void **)v119);
          if (CoreML::Result::good((CoreML::Result *)&v116))
          {
            if (v96[15])
              v89 = (uint64_t *)v96[15];
            else
              v89 = &CoreML::Specification::_WeightParams_default_instance_;
            std::string::basic_string[abi:ne180100]<0>(v119, "Bidirectional LSTM");
            v90 = *((_QWORD *)a2 + 14);
            std::string::basic_string[abi:ne180100]<0>(v97, "backward forget gate peephole vector");
            CoreML::validateGeneralWeightParams((uint64_t)v89, v27, (const CoreML::Specification::WeightParams *)1, (const void **)v119, v90, (uint64_t)v97, (uint64_t)&v99);
            v116 = v99.__r_.__value_.__r.__words[0];
            if (SHIBYTE(v118) < 0)
              operator delete((void *)v117);
            v117 = *(_OWORD *)&v99.__r_.__value_.__r.__words[1];
            v118 = v100;
            HIBYTE(v100) = 0;
            v99.__r_.__value_.__s.__data_[8] = 0;
            if (v98 < 0)
              operator delete(v97[0]);
            if (v120 < 0)
              operator delete(*(void **)v119);
            if (CoreML::Result::good((CoreML::Result *)&v116))
            {
              if (v96[16])
                v91 = (uint64_t *)v96[16];
              else
                v91 = &CoreML::Specification::_WeightParams_default_instance_;
              std::string::basic_string[abi:ne180100]<0>(v119, "Bidirectional LSTM");
              v92 = *((_QWORD *)a2 + 14);
              std::string::basic_string[abi:ne180100]<0>(v97, "backward output gate peephole vector");
              CoreML::validateGeneralWeightParams((uint64_t)v91, v27, (const CoreML::Specification::WeightParams *)1, (const void **)v119, v92, (uint64_t)v97, (uint64_t)&v99);
              v116 = v99.__r_.__value_.__r.__words[0];
              if (SHIBYTE(v118) < 0)
                operator delete((void *)v117);
              v117 = *(_OWORD *)&v99.__r_.__value_.__r.__words[1];
              v118 = v100;
              HIBYTE(v100) = 0;
              v99.__r_.__value_.__s.__data_[8] = 0;
              if (v98 < 0)
                operator delete(v97[0]);
              if (v120 < 0)
                operator delete(*(void **)v119);
              CoreML::Result::good((CoreML::Result *)&v116);
            }
          }
        }
      }
    }
  }
LABEL_382:
  *(_QWORD *)a3 = v116;
  *(_OWORD *)(a3 + 8) = v117;
  *(_QWORD *)(a3 + 24) = v118;
  v117 = 0uLL;
  v118 = 0;
LABEL_390:
  if (SHIBYTE(v102) < 0)
    operator delete(v101);
  CoreML::Specification::LSTMParams::~LSTMParams((CoreML::Specification::LSTMParams *)__p);
  CoreML::Specification::BiDirectionalLSTMLayerParams::~BiDirectionalLSTMLayerParams((CoreML::Specification::BiDirectionalLSTMLayerParams *)&v105);
  if (SHIBYTE(v118) < 0)
    operator delete((void *)v117);
}

void sub_218349544(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,char a36)
{
  uint64_t v36;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v36 - 97) < 0)
    operator delete(*(void **)(v36 - 120));
  if (a28 < 0)
    operator delete(a23);
  CoreML::Specification::LSTMParams::~LSTMParams((CoreML::Specification::LSTMParams *)&a29);
  CoreML::Specification::BiDirectionalLSTMLayerParams::~BiDirectionalLSTMLayerParams((CoreML::Specification::BiDirectionalLSTMLayerParams *)&a36);
  if (*(char *)(v36 - 121) < 0)
    operator delete(*(void **)(v36 - 144));
  _Unwind_Resume(a1);
}

void CoreML::NeuralNetworkSpecValidator::validateCropLayer(CoreML::NeuralNetworkSpecValidator *this@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  char *v7;
  char *v8;
  int v9;
  int v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  std::string *v14;
  __int128 v15;
  uint64_t *v16;
  std::string *v17;
  __int128 v18;
  uint64_t *v19;
  uint64_t *v20;
  std::string *v21;
  std::string::size_type size;
  std::string *v23;
  __int128 v24;
  std::string *v25;
  __int128 v26;
  std::string *v27;
  std::string::size_type v28;
  std::string *v29;
  __int128 v30;
  std::string *v31;
  __int128 v32;
  std::string::size_type v33;
  uint64_t v34;
  void *v35;
  uint64_t *v36;
  __int128 v37;
  std::string *v38;
  __int128 v39;
  std::string *v40;
  std::string::size_type v41;
  char v42;
  std::string v43;
  std::string v44;
  std::string v45;
  void *__p[2];
  char v47;
  std::string v48;
  uint64_t v49;
  std::string::size_type v50;
  __int128 v51;
  uint64_t v52;
  std::string v53;
  uint64_t v54;

  v54 = *MEMORY[0x24BDAC8D0];
  CoreML::Result::Result((CoreML::Result *)&v50);
  CoreML::validateInputCount((CoreML *)a2, (const CoreML::Specification::NeuralNetworkLayer *)1, 2, (CoreML::Result *)&v48);
  v50 = v48.__r_.__value_.__r.__words[0];
  if (SHIBYTE(v52) < 0)
    operator delete((void *)v51);
  v51 = *(_OWORD *)&v48.__r_.__value_.__r.__words[1];
  v52 = v49;
  if (CoreML::Result::good((CoreML::Result *)&v50))
  {
    CoreML::validateOutputCount((CoreML *)a2, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v48);
    v50 = v48.__r_.__value_.__r.__words[0];
    if (SHIBYTE(v52) < 0)
      operator delete((void *)v51);
    v51 = *(_OWORD *)&v48.__r_.__value_.__r.__words[1];
    v52 = v49;
  }
  v6 = CoreML::Result::good((CoreML::Result *)&v50);
  if ((v6 & 1) == 0)
    goto LABEL_36;
  if (!*(_BYTE *)this)
    goto LABEL_23;
  std::string::basic_string[abi:ne180100]<0>(__p, "Crop");
  v7 = (char *)this + 32;
  CoreML::validateInputOutputRankEquality(a2, (uint64_t)__p, (uint64_t)this + 32, (CoreML::Result *)&v48);
  v50 = v48.__r_.__value_.__r.__words[0];
  if (SHIBYTE(v52) < 0)
    operator delete((void *)v51);
  v51 = *(_OWORD *)&v48.__r_.__value_.__r.__words[1];
  v52 = v49;
  HIBYTE(v49) = 0;
  v48.__r_.__value_.__s.__data_[8] = 0;
  if (v47 < 0)
    operator delete(__p[0]);
  if (!CoreML::Result::good((CoreML::Result *)&v50))
    goto LABEL_36;
  std::string::basic_string[abi:ne180100]<0>(&v45, "Crop");
  CoreML::validateRankCount((uint64_t)a2, (uint64_t)&v45, 3, -1, (uint64_t)this + 32, (uint64_t)&v48);
  v50 = v48.__r_.__value_.__r.__words[0];
  if (SHIBYTE(v52) < 0)
    operator delete((void *)v51);
  v51 = *(_OWORD *)&v48.__r_.__value_.__r.__words[1];
  v52 = v49;
  HIBYTE(v49) = 0;
  v48.__r_.__value_.__s.__data_[8] = 0;
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  v6 = CoreML::Result::good((CoreML::Result *)&v50);
  if ((v6 & 1) == 0)
    goto LABEL_36;
  if (*((int *)a2 + 6) < 2
    || (v6 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>((uint64_t)this + 32, (const void **)a2[4][1]), v8 = (char *)this + 40, v8 == (char *)v6)|| (v6 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>((uint64_t)v7, (const void **)a2[4][2]), v8 == (char *)v6)|| (v9 = *(_DWORD *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)v7, (const void **)a2[4][1]), v6 = std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)v7, (const void **)a2[4][2]), v9 == *(_DWORD *)v6))
  {
LABEL_23:
    v10 = *((_DWORD *)a2 + 35);
    if (*((_DWORD *)a2 + 6) == 1)
    {
      if (v10 == 190)
        v11 = a2[16];
      else
        v11 = CoreML::Specification::CropLayerParams::default_instance((CoreML::Specification::CropLayerParams *)v6);
      v13 = (uint64_t *)v11[5];
      if (!v13)
        v13 = &CoreML::Specification::_BorderAmounts_default_instance_;
      if (*((_DWORD *)v13 + 6) != 2)
      {
        std::operator+<char>();
        v14 = std::string::append(&v53, "' is of length ");
        v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
        v44.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v15;
        v14->__r_.__value_.__l.__size_ = 0;
        v14->__r_.__value_.__r.__words[2] = 0;
        v14->__r_.__value_.__r.__words[0] = 0;
        if (*((_DWORD *)a2 + 35) == 190)
          v16 = a2[16];
        else
          v16 = CoreML::Specification::CropLayerParams::default_instance((CoreML::Specification::CropLayerParams *)v14);
        v20 = (uint64_t *)v16[5];
        if (!v20)
          v20 = &CoreML::Specification::_BorderAmounts_default_instance_;
        std::to_string(&v43, *((_DWORD *)v20 + 6));
        if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v21 = &v43;
        else
          v21 = (std::string *)v43.__r_.__value_.__r.__words[0];
        if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v43.__r_.__value_.__r.__words[2]);
        else
          size = v43.__r_.__value_.__l.__size_;
        v23 = std::string::append(&v44, (const std::string::value_type *)v21, size);
        v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
        v48.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v24;
        v23->__r_.__value_.__l.__size_ = 0;
        v23->__r_.__value_.__r.__words[2] = 0;
        v23->__r_.__value_.__r.__words[0] = 0;
        v25 = std::string::append(&v48, " but requires exactly two crop constraints (for X,Y axes).");
        v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
        v45.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v26;
        v25->__r_.__value_.__l.__size_ = 0;
        v25->__r_.__value_.__r.__words[2] = 0;
        v25->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v48.__r_.__value_.__l.__data_);
        if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v43.__r_.__value_.__l.__data_);
        if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v44.__r_.__value_.__l.__data_);
        if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v53.__r_.__value_.__l.__data_);
        goto LABEL_75;
      }
    }
    else
    {
      if (v10 == 190)
        v12 = a2[16];
      else
        v12 = CoreML::Specification::CropLayerParams::default_instance((CoreML::Specification::CropLayerParams *)v6);
      if (*((_DWORD *)v12 + 4) != 2)
      {
        std::operator+<char>();
        v17 = std::string::append(&v53, "' is of length ");
        v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
        v44.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v18;
        v17->__r_.__value_.__l.__size_ = 0;
        v17->__r_.__value_.__r.__words[2] = 0;
        v17->__r_.__value_.__r.__words[0] = 0;
        if (*((_DWORD *)a2 + 35) == 190)
          v19 = a2[16];
        else
          v19 = CoreML::Specification::CropLayerParams::default_instance((CoreML::Specification::CropLayerParams *)v17);
        std::to_string(&v43, *((_DWORD *)v19 + 4));
        if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v27 = &v43;
        else
          v27 = (std::string *)v43.__r_.__value_.__r.__words[0];
        if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v28 = HIBYTE(v43.__r_.__value_.__r.__words[2]);
        else
          v28 = v43.__r_.__value_.__l.__size_;
        v29 = std::string::append(&v44, (const std::string::value_type *)v27, v28);
        v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
        v48.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v30;
        v29->__r_.__value_.__l.__size_ = 0;
        v29->__r_.__value_.__r.__words[2] = 0;
        v29->__r_.__value_.__r.__words[0] = 0;
        v31 = std::string::append(&v48, " but requires exactly two offsets (for X,Y axes).");
        v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
        v45.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v32;
        v31->__r_.__value_.__l.__size_ = 0;
        v31->__r_.__value_.__r.__words[2] = 0;
        v31->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v48.__r_.__value_.__l.__data_);
        if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v43.__r_.__value_.__l.__data_);
        if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v44.__r_.__value_.__l.__data_);
        if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v53.__r_.__value_.__l.__data_);
LABEL_75:
        CoreML::Result::Result(&v48, 13);
        v33 = v48.__r_.__value_.__r.__words[0];
        v50 = v48.__r_.__value_.__r.__words[0];
        if (SHIBYTE(v52) < 0)
        {
          operator delete((void *)v51);
          v33 = v50;
        }
        v51 = *(_OWORD *)&v48.__r_.__value_.__r.__words[1];
        v34 = v49;
        *(_QWORD *)a3 = v33;
        *(_OWORD *)(a3 + 8) = v51;
        *(_QWORD *)(a3 + 24) = v34;
        v51 = 0uLL;
        v52 = 0;
        if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
        {
          v35 = (void *)v45.__r_.__value_.__r.__words[0];
LABEL_79:
          operator delete(v35);
          goto LABEL_37;
        }
        goto LABEL_37;
      }
    }
LABEL_36:
    *(_QWORD *)a3 = v50;
    *(_OWORD *)(a3 + 8) = v51;
    *(_QWORD *)(a3 + 24) = v52;
    v51 = 0uLL;
    v52 = 0;
    goto LABEL_37;
  }
  v36 = a2[14];
  if (*((char *)v36 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v44, (const std::string::value_type *)*v36, v36[1]);
  }
  else
  {
    v37 = *(_OWORD *)v36;
    v44.__r_.__value_.__r.__words[2] = v36[2];
    *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v37;
  }
  v38 = std::string::insert(&v44, 0, "Layer '");
  v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
  v45.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v39;
  v38->__r_.__value_.__l.__size_ = 0;
  v38->__r_.__value_.__r.__words[2] = 0;
  v38->__r_.__value_.__r.__words[0] = 0;
  v40 = std::string::append(&v45, "' of type 'Crop' expects equal ranks for its inputs, but they are not equal.");
  v41 = v40->__r_.__value_.__r.__words[0];
  v53.__r_.__value_.__r.__words[0] = v40->__r_.__value_.__l.__size_;
  *(std::string::size_type *)((char *)v53.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v40->__r_.__value_.__r.__words[1] + 7);
  v42 = HIBYTE(v40->__r_.__value_.__r.__words[2]);
  v40->__r_.__value_.__l.__size_ = 0;
  v40->__r_.__value_.__r.__words[2] = 0;
  v40->__r_.__value_.__r.__words[0] = 0;
  *(std::string::size_type *)((char *)&v48.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v53.__r_.__value_.__r.__words + 7);
  v48.__r_.__value_.__r.__words[0] = v41;
  v48.__r_.__value_.__l.__size_ = v53.__r_.__value_.__r.__words[0];
  *((_BYTE *)&v48.__r_.__value_.__s + 23) = v42;
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v44.__r_.__value_.__l.__data_);
  CoreML::Result::Result((_DWORD *)a3, 13);
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
  {
    v35 = (void *)v48.__r_.__value_.__r.__words[0];
    goto LABEL_79;
  }
LABEL_37:
  if (SHIBYTE(v52) < 0)
    operator delete((void *)v51);
}

void sub_218349E28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  uint64_t v40;

  if (*(char *)(v40 - 81) < 0)
    operator delete(*(void **)(v40 - 104));
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateDotLayer(CoreML::NeuralNetworkSpecValidator *this@<X0>, const CoreML::Specification::NeuralNetworkLayer *a2@<X1>, uint64_t a3@<X8>)
{
  char *v6;
  uint64_t v7;
  char *v8;
  int v9;
  __int128 *v10;
  __int128 v11;
  std::string *v12;
  __int128 v13;
  std::string *v14;
  void *v15;
  char v16;
  std::string v17;
  std::string v18;
  void *__p[2];
  char v20;
  void *v21;
  __int128 v22;
  uint64_t v23;
  void *v24;
  __int128 v25;
  uint64_t v26;
  _QWORD v27[3];

  v27[2] = *MEMORY[0x24BDAC8D0];
  CoreML::Result::Result((CoreML::Result *)&v24);
  CoreML::validateInputCount(a2, (const CoreML::Specification::NeuralNetworkLayer *)2, 2, (CoreML::Result *)&v21);
  v24 = v21;
  if (SHIBYTE(v26) < 0)
    operator delete((void *)v25);
  v25 = v22;
  v26 = v23;
  if (CoreML::Result::good((CoreML::Result *)&v24))
  {
    CoreML::validateOutputCount(a2, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v21);
    v24 = v21;
    if (SHIBYTE(v26) < 0)
      operator delete((void *)v25);
    v25 = v22;
    v26 = v23;
  }
  if (!CoreML::Result::good((CoreML::Result *)&v24) || !*(_BYTE *)this)
    goto LABEL_22;
  std::string::basic_string[abi:ne180100]<0>(__p, "DotProduct");
  v6 = (char *)this + 32;
  CoreML::validateInputOutputRankEquality(a2, (uint64_t)__p, (uint64_t)this + 32, (CoreML::Result *)&v21);
  v24 = v21;
  if (SHIBYTE(v26) < 0)
    operator delete((void *)v25);
  v25 = v22;
  v26 = v23;
  HIBYTE(v23) = 0;
  LOBYTE(v22) = 0;
  if (v20 < 0)
    operator delete(__p[0]);
  if (!CoreML::Result::good((CoreML::Result *)&v24))
    goto LABEL_22;
  std::string::basic_string[abi:ne180100]<0>(&v18, "DotProduct");
  CoreML::validateRankCount((uint64_t)a2, (uint64_t)&v18, 3, -1, (uint64_t)this + 32, (uint64_t)&v21);
  v24 = v21;
  if (SHIBYTE(v26) < 0)
    operator delete((void *)v25);
  v25 = v22;
  v26 = v23;
  HIBYTE(v23) = 0;
  LOBYTE(v22) = 0;
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  if (CoreML::Result::good((CoreML::Result *)&v24)
    && (v7 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>((uint64_t)this + 32, *(const void ***)(*((_QWORD *)a2 + 4) + 8)), v8 = (char *)this + 40, v8 != (char *)v7)&& v8 != (char *)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>((uint64_t)v6, *(const void ***)(*((_QWORD *)a2 + 4) + 16))&& (v9 = *(_DWORD *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)v6, *(const void ***)(*((_QWORD *)a2 + 4) + 8)), v9 != *(_DWORD *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)v6, *(const void ***)(*((_QWORD *)a2 + 4) + 16))))
  {
    v10 = (__int128 *)*((_QWORD *)a2 + 14);
    if (*((char *)v10 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v17, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
    }
    else
    {
      v11 = *v10;
      v17.__r_.__value_.__r.__words[2] = *((_QWORD *)v10 + 2);
      *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v11;
    }
    v12 = std::string::insert(&v17, 0, "Layer '");
    v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    v14 = std::string::append(&v18, "' of type 'DotProduct' expects equal ranks for its inputs, but they are not equal.");
    v15 = (void *)v14->__r_.__value_.__r.__words[0];
    v27[0] = v14->__r_.__value_.__l.__size_;
    *(_QWORD *)((char *)v27 + 7) = *(std::string::size_type *)((char *)&v14->__r_.__value_.__r.__words[1] + 7);
    v16 = HIBYTE(v14->__r_.__value_.__r.__words[2]);
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    *(_QWORD *)((char *)&v22 + 7) = *(_QWORD *)((char *)v27 + 7);
    v21 = v15;
    *(_QWORD *)&v22 = v27[0];
    HIBYTE(v22) = v16;
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v18.__r_.__value_.__l.__data_);
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v17.__r_.__value_.__l.__data_);
    CoreML::Result::Result((_DWORD *)a3, 13);
    if (SHIBYTE(v22) < 0)
      operator delete(v21);
    if (SHIBYTE(v26) < 0)
      operator delete((void *)v25);
  }
  else
  {
LABEL_22:
    *(_QWORD *)a3 = v24;
    *(_OWORD *)(a3 + 8) = v25;
    *(_QWORD *)(a3 + 24) = v26;
  }
}

void sub_21834A2B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  uint64_t v34;

  if (*(char *)(v34 - 73) < 0)
    operator delete(*(void **)(v34 - 96));
  _Unwind_Resume(exception_object);
}

BOOL CoreML::NeuralNetworkSpecValidator::validateMvnLayer@<W0>(CoreML::NeuralNetworkSpecValidator *this@<X0>, const CoreML::Specification::NeuralNetworkLayer *a2@<X1>, uint64_t a3@<X8>)
{
  void **v6;
  _BOOL8 result;
  char *v8;
  void *v9[2];
  char v10;
  void *__p[2];
  char v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;

  CoreML::Result::Result((CoreML::Result *)a3);
  CoreML::validateInputCount(a2, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v13);
  *(_QWORD *)a3 = v13;
  v6 = (void **)(a3 + 8);
  if (*(char *)(a3 + 31) < 0)
    operator delete(*v6);
  *(_OWORD *)v6 = v14;
  *(_QWORD *)(a3 + 24) = v15;
  if (CoreML::Result::good((CoreML::Result *)a3))
  {
    CoreML::validateOutputCount(a2, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v13);
    *(_QWORD *)a3 = v13;
    if (*(char *)(a3 + 31) < 0)
      operator delete(*v6);
    *(_OWORD *)v6 = v14;
    *(_QWORD *)(a3 + 24) = v15;
  }
  result = CoreML::Result::good((CoreML::Result *)a3);
  if (result && *(_BYTE *)this)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "MeanVarianceNormalize");
    v8 = (char *)this + 32;
    CoreML::validateInputOutputRankEquality(a2, (uint64_t)__p, (uint64_t)v8, (CoreML::Result *)&v13);
    *(_QWORD *)a3 = v13;
    if (*(char *)(a3 + 31) < 0)
      operator delete(*v6);
    *(_OWORD *)v6 = v14;
    *(_QWORD *)(a3 + 24) = v15;
    HIBYTE(v15) = 0;
    LOBYTE(v14) = 0;
    if (v12 < 0)
      operator delete(__p[0]);
    result = CoreML::Result::good((CoreML::Result *)a3);
    if (result)
    {
      std::string::basic_string[abi:ne180100]<0>(v9, "MeanVarianceNormalize");
      CoreML::validateRankCount((uint64_t)a2, (uint64_t)v9, 3, -1, (uint64_t)v8, (uint64_t)&v13);
      *(_QWORD *)a3 = v13;
      if (*(char *)(a3 + 31) < 0)
        operator delete(*v6);
      *(_OWORD *)v6 = v14;
      *(_QWORD *)(a3 + 24) = v15;
      HIBYTE(v15) = 0;
      LOBYTE(v14) = 0;
      if (v10 < 0)
        operator delete(v9[0]);
      return CoreML::Result::good((CoreML::Result *)a3);
    }
  }
  return result;
}

void sub_21834A524(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;

  if (a14 < 0)
    operator delete(__p);
  if (*(char *)(v20 + 31) < 0)
    operator delete(*(void **)(v20 + 8));
  _Unwind_Resume(exception_object);
}

double CoreML::NeuralNetworkSpecValidator::validateEmbeddingLayer@<D0>(CoreML::NeuralNetworkSpecValidator *this@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X8>)
{
  void **v6;
  _BOOL8 v7;
  double result;
  char *v9;
  uint64_t *v10;
  const CoreML::Specification::WeightParams *v11;
  const CoreML::Specification::WeightParams *v12;
  void *v13[2];
  char v14;
  void *__p[2];
  char v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;

  CoreML::Result::Result((CoreML::Result *)a3);
  CoreML::validateInputCount((CoreML *)a2, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v17);
  *(_QWORD *)a3 = v17;
  v6 = (void **)(a3 + 8);
  if (*(char *)(a3 + 31) < 0)
    operator delete(*v6);
  *(_OWORD *)v6 = v18;
  *(_QWORD *)(a3 + 24) = v19;
  if (CoreML::Result::good((CoreML::Result *)a3))
  {
    CoreML::validateOutputCount((CoreML *)a2, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v17);
    *(_QWORD *)a3 = v17;
    if (*(char *)(a3 + 31) < 0)
      operator delete(*v6);
    *(_OWORD *)v6 = v18;
    *(_QWORD *)(a3 + 24) = v19;
  }
  v7 = CoreML::Result::good((CoreML::Result *)a3);
  if (v7)
  {
    if (!*(_BYTE *)this)
      goto LABEL_19;
    std::string::basic_string[abi:ne180100]<0>(__p, "Embedding");
    v9 = (char *)this + 32;
    CoreML::validateInputOutputRankEquality(a2, (uint64_t)__p, (uint64_t)v9, (CoreML::Result *)&v17);
    *(_QWORD *)a3 = v17;
    if (*(char *)(a3 + 31) < 0)
      operator delete(*v6);
    *(_OWORD *)v6 = v18;
    *(_QWORD *)(a3 + 24) = v19;
    HIBYTE(v19) = 0;
    LOBYTE(v18) = 0;
    if (v16 < 0)
      operator delete(__p[0]);
    if (CoreML::Result::good((CoreML::Result *)a3))
    {
      std::string::basic_string[abi:ne180100]<0>(v13, "Embedding");
      CoreML::validateRankCount((uint64_t)a2, (uint64_t)v13, 4, -1, (uint64_t)v9, (uint64_t)&v17);
      *(_QWORD *)a3 = v17;
      if (*(char *)(a3 + 31) < 0)
        operator delete(*v6);
      *(_OWORD *)v6 = v18;
      *(_QWORD *)(a3 + 24) = v19;
      HIBYTE(v19) = 0;
      LOBYTE(v18) = 0;
      if (v14 < 0)
        operator delete(v13[0]);
      v7 = CoreML::Result::good((CoreML::Result *)a3);
      if (v7)
      {
LABEL_19:
        if (*((_DWORD *)a2 + 35) == 150)
          v10 = a2[16];
        else
          v10 = CoreML::Specification::EmbeddingLayerParams::default_instance((CoreML::Specification::EmbeddingLayerParams *)v7);
        if (v10[2])
          v11 = (const CoreML::Specification::WeightParams *)v10[2];
        else
          v11 = (const CoreML::Specification::WeightParams *)&CoreML::Specification::_WeightParams_default_instance_;
        if (v10[3])
          v12 = (const CoreML::Specification::WeightParams *)v10[3];
        else
          v12 = (const CoreML::Specification::WeightParams *)&CoreML::Specification::_WeightParams_default_instance_;
        validateEmbeddingWeightsBias((const CoreML::Specification::NeuralNetworkLayer *)a2, v11, v12, (uint64_t)&v17);
        *(_QWORD *)a3 = v17;
        if (*(char *)(a3 + 31) < 0)
          operator delete(*v6);
        result = *(double *)&v18;
        *(_OWORD *)v6 = v18;
        *(_QWORD *)(a3 + 24) = v19;
      }
    }
  }
  return result;
}

void sub_21834A7A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;

  if (*(char *)(v20 + 31) < 0)
    operator delete(*(void **)(v20 + 8));
  _Unwind_Resume(exception_object);
}

void validateEmbeddingWeightsBias(const CoreML::Specification::NeuralNetworkLayer *a1@<X0>, const CoreML::Specification::WeightParams *a2@<X1>, const CoreML::Specification::WeightParams *a3@<X2>, uint64_t a4@<X8>)
{
  int v8;
  uint64_t v9;
  const CoreML::Specification::WeightParams *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  unsigned int v40;
  unsigned int v41;
  int v42;
  uint64_t v43;
  BOOL v44;
  BOOL v46;
  int v47;
  size_t v48;
  std::string *v49;
  void **v50;
  uint64_t v51;
  int v52;
  const std::string::value_type *v53;
  std::string::size_type v54;
  std::string *v55;
  __int128 v56;
  std::string *v57;
  __int128 v58;
  void **v59;
  void *v60;
  size_t v61;
  std::string *v62;
  void **v63;
  uint64_t v64;
  int v65;
  const std::string::value_type *v66;
  std::string::size_type v67;
  std::string *v68;
  __int128 v69;
  std::string *v70;
  __int128 v71;
  void **v72;
  uint64_t v73;
  void **v74;
  BOOL v75;
  BOOL v76;
  uint64_t v77;
  std::string v78;
  std::string v79;
  uint64_t v80;
  std::string v81;
  void *__p[2];
  std::string::size_type v83;
  void **v84;
  size_t v85;
  uint64_t v86;

  CoreML::Result::Result((CoreML::Result *)a4);
  v84 = 0;
  v85 = 0;
  v86 = 0;
  v8 = *((_DWORD *)a1 + 35);
  if (v8 == 1040)
  {
    v13 = *((_QWORD *)a1 + 16);
    v11 = *(_QWORD *)(v13 + 32);
    v10 = *(const CoreML::Specification::WeightParams **)(v13 + 40);
    v12 = *(unsigned __int8 *)(v13 + 48);
    MEMORY[0x219A19390](&v84, "EmbeddingND");
  }
  else
  {
    if (v8 != 150)
      goto LABEL_176;
    v9 = *((_QWORD *)a1 + 16);
    v11 = *(_QWORD *)(v9 + 32);
    v10 = *(const CoreML::Specification::WeightParams **)(v9 + 40);
    v12 = *(unsigned __int8 *)(v9 + 48);
    MEMORY[0x219A19390](&v84, "Embedding");
  }
  v14 = *((_QWORD *)a2 + 5);
  if (*(char *)(v14 + 23) < 0)
    v15 = *(_QWORD *)(v14 + 8);
  else
    v15 = *(unsigned __int8 *)(v14 + 23);
  v16 = *((_QWORD *)a2 + 6);
  v17 = *(unsigned __int8 *)(v16 + 23);
  if (*(char *)(v16 + 23) < 0)
    v18 = *(_QWORD *)(v16 + 8);
  else
    v18 = *(unsigned __int8 *)(v16 + 23);
  v19 = *((_DWORD *)a2 + 4);
  v20 = *((_QWORD *)a2 + 7);
  v21 = *(unsigned __int8 *)(v20 + 23);
  if (*(char *)(v20 + 23) < 0)
    v22 = *(_QWORD *)(v20 + 8);
  else
    v22 = *(unsigned __int8 *)(v20 + 23);
  if (v19 <= 0)
    v23 = 1;
  else
    v23 = 2;
  if (v15)
    v24 = v23;
  else
    v24 = v19 > 0;
  if (v18)
    ++v24;
  if (v22)
    v25 = v24 + 1;
  else
    v25 = v24;
  if (v25 > 1)
  {
    v26 = 4;
    goto LABEL_53;
  }
  if (v25)
    v26 = 0;
  else
    v26 = 5;
  if (v19 <= 0 && v25)
  {
    if ((*(_BYTE *)(v14 + 23) & 0x80) != 0)
    {
      if (*(_QWORD *)(v14 + 8))
        goto LABEL_34;
    }
    else if (*(_BYTE *)(v14 + 23))
    {
LABEL_34:
      v26 = 1;
      goto LABEL_53;
    }
    if ((v17 & 0x80) != 0)
      v17 = *(_QWORD *)(v16 + 8);
    v27 = *((_QWORD *)a2 + 8);
    if (a2 != (const CoreML::Specification::WeightParams *)&CoreML::Specification::_WeightParams_default_instance_
      && v17
      && v27)
    {
      v26 = 2;
    }
    else
    {
      if ((v21 & 0x80) != 0)
        v21 = *(_QWORD *)(v20 + 8);
      if (v27)
        v28 = v21 == 0;
      else
        v28 = 1;
      if (v28
        || a2 == (const CoreML::Specification::WeightParams *)&CoreML::Specification::_WeightParams_default_instance_)
      {
        v26 = 5;
      }
      else
      {
        v26 = 3;
      }
    }
  }
LABEL_53:
  v30 = *((_QWORD *)a3 + 5);
  if (*(char *)(v30 + 23) < 0)
    v31 = *(_QWORD *)(v30 + 8);
  else
    v31 = *(unsigned __int8 *)(v30 + 23);
  v32 = *((_QWORD *)a3 + 6);
  v33 = *(unsigned __int8 *)(v32 + 23);
  if (*(char *)(v32 + 23) < 0)
    v34 = *(_QWORD *)(v32 + 8);
  else
    v34 = *(unsigned __int8 *)(v32 + 23);
  v35 = *((_DWORD *)a3 + 4);
  v36 = *((_QWORD *)a3 + 7);
  v37 = *(unsigned __int8 *)(v36 + 23);
  if (*(char *)(v36 + 23) < 0)
    v38 = *(_QWORD *)(v36 + 8);
  else
    v38 = *(unsigned __int8 *)(v36 + 23);
  if (v35 <= 0)
    v39 = 1;
  else
    v39 = 2;
  if (v31)
    v40 = v39;
  else
    v40 = v35 > 0;
  if (v34)
    ++v40;
  if (v38)
    v41 = v40 + 1;
  else
    v41 = v40;
  if (v41 > 1)
  {
    v42 = 4;
    goto LABEL_101;
  }
  if (v41)
    v42 = 0;
  else
    v42 = 5;
  if (v35 <= 0 && v41)
  {
    if ((*(_BYTE *)(v30 + 23) & 0x80) != 0)
    {
      if (*(_QWORD *)(v30 + 8))
        goto LABEL_82;
    }
    else if (*(_BYTE *)(v30 + 23))
    {
LABEL_82:
      v42 = 1;
      goto LABEL_101;
    }
    if ((v33 & 0x80) != 0)
      v33 = *(_QWORD *)(v32 + 8);
    v43 = *((_QWORD *)a3 + 8);
    if (a3 != (const CoreML::Specification::WeightParams *)&CoreML::Specification::_WeightParams_default_instance_
      && v33
      && v43)
    {
      v42 = 2;
    }
    else
    {
      if ((v37 & 0x80) != 0)
        v37 = *(_QWORD *)(v36 + 8);
      if (v43)
        v44 = v37 == 0;
      else
        v44 = 1;
      if (v44
        || a3 == (const CoreML::Specification::WeightParams *)&CoreML::Specification::_WeightParams_default_instance_)
      {
        v42 = 5;
      }
      else
      {
        v42 = 3;
      }
    }
  }
LABEL_101:
  if (v12)
    v46 = v42 == 4;
  else
    v46 = 0;
  v47 = v46;
  if (v26 == 4 || v47)
  {
    if (v86 >= 0)
      v61 = HIBYTE(v86);
    else
      v61 = v85;
    v62 = &v81;
    std::string::basic_string[abi:ne180100]((uint64_t)&v81, v61 + 2);
    if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v62 = (std::string *)v81.__r_.__value_.__r.__words[0];
    if (v61)
    {
      if (v86 >= 0)
        v63 = (void **)&v84;
      else
        v63 = v84;
      memmove(v62, v63, v61);
    }
    strcpy((char *)v62 + v61, " '");
    v64 = *((_QWORD *)a1 + 14);
    v65 = *(char *)(v64 + 23);
    if (v65 >= 0)
      v66 = (const std::string::value_type *)*((_QWORD *)a1 + 14);
    else
      v66 = *(const std::string::value_type **)v64;
    if (v65 >= 0)
      v67 = *(unsigned __int8 *)(v64 + 23);
    else
      v67 = *(_QWORD *)(v64 + 8);
    v68 = std::string::append(&v81, v66, v67);
    v69 = *(_OWORD *)&v68->__r_.__value_.__l.__data_;
    v79.__r_.__value_.__r.__words[2] = v68->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v79.__r_.__value_.__l.__data_ = v69;
    v68->__r_.__value_.__l.__size_ = 0;
    v68->__r_.__value_.__r.__words[2] = 0;
    v68->__r_.__value_.__r.__words[0] = 0;
    v70 = std::string::append(&v79, "' has invalid weights/bias fields. Field value types should match and should either be half or full precision.");
    v71 = *(_OWORD *)&v70->__r_.__value_.__l.__data_;
    v83 = v70->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v71;
    v70->__r_.__value_.__l.__size_ = 0;
    v70->__r_.__value_.__r.__words[2] = 0;
    v70->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v79.__r_.__value_.__l.__data_);
    if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v81.__r_.__value_.__l.__data_);
    CoreML::Result::Result(&v79, 13);
    *(_QWORD *)a4 = v79.__r_.__value_.__r.__words[0];
    v72 = (void **)(a4 + 8);
    if (*(char *)(a4 + 31) < 0)
      operator delete(*v72);
    *(_OWORD *)v72 = *(_OWORD *)&v79.__r_.__value_.__r.__words[1];
    *(_QWORD *)(a4 + 24) = v80;
    if (SHIBYTE(v83) < 0)
    {
      v60 = __p[0];
      goto LABEL_162;
    }
  }
  else if (v12 && (v26 == 1 && !v42 || !v26 && v42 == 1))
  {
    if (v86 >= 0)
      v48 = HIBYTE(v86);
    else
      v48 = v85;
    v49 = &v78;
    std::string::basic_string[abi:ne180100]((uint64_t)&v78, v48 + 8);
    if ((v78.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v49 = (std::string *)v78.__r_.__value_.__r.__words[0];
    if (v48)
    {
      if (v86 >= 0)
        v50 = (void **)&v84;
      else
        v50 = v84;
      memmove(v49, v50, v48);
    }
    strcpy((char *)v49 + v48, " layer '");
    v51 = *((_QWORD *)a1 + 14);
    v52 = *(char *)(v51 + 23);
    if (v52 >= 0)
      v53 = (const std::string::value_type *)*((_QWORD *)a1 + 14);
    else
      v53 = *(const std::string::value_type **)v51;
    if (v52 >= 0)
      v54 = *(unsigned __int8 *)(v51 + 23);
    else
      v54 = *(_QWORD *)(v51 + 8);
    v55 = std::string::append(&v78, v53, v54);
    v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
    v81.__r_.__value_.__r.__words[2] = v55->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v81.__r_.__value_.__l.__data_ = v56;
    v55->__r_.__value_.__l.__size_ = 0;
    v55->__r_.__value_.__r.__words[2] = 0;
    v55->__r_.__value_.__r.__words[0] = 0;
    v57 = std::string::append(&v81, "has unmatched precisions of weights/bias They should either be half or full precision.");
    v58 = *(_OWORD *)&v57->__r_.__value_.__l.__data_;
    v83 = v57->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v58;
    v57->__r_.__value_.__l.__size_ = 0;
    v57->__r_.__value_.__r.__words[2] = 0;
    v57->__r_.__value_.__r.__words[0] = 0;
    CoreML::Result::Result(&v79, 13);
    *(_QWORD *)a4 = v79.__r_.__value_.__r.__words[0];
    v59 = (void **)(a4 + 8);
    if (*(char *)(a4 + 31) < 0)
      operator delete(*v59);
    *(_OWORD *)v59 = *(_OWORD *)&v79.__r_.__value_.__r.__words[1];
    *(_QWORD *)(a4 + 24) = v80;
    HIBYTE(v80) = 0;
    v79.__r_.__value_.__s.__data_[8] = 0;
    if (SHIBYTE(v83) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v81.__r_.__value_.__l.__data_);
    if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
    {
      v60 = (void *)v78.__r_.__value_.__r.__words[0];
LABEL_162:
      operator delete(v60);
    }
  }
  else
  {
    v73 = *((_QWORD *)a1 + 14);
    std::string::basic_string[abi:ne180100]<0>(__p, "weight");
    CoreML::validateGeneralWeightParams((uint64_t)a2, (const CoreML::Specification::WeightParams *)((_QWORD)v10 * v11), v10, (const void **)&v84, v73, (uint64_t)__p, (uint64_t)&v79);
    *(_QWORD *)a4 = v79.__r_.__value_.__r.__words[0];
    v74 = (void **)(a4 + 8);
    if (*(char *)(a4 + 31) < 0)
      operator delete(*v74);
    *(_OWORD *)v74 = *(_OWORD *)&v79.__r_.__value_.__r.__words[1];
    *(_QWORD *)(a4 + 24) = v80;
    HIBYTE(v80) = 0;
    v79.__r_.__value_.__s.__data_[8] = 0;
    if (SHIBYTE(v83) < 0)
      operator delete(__p[0]);
    v75 = CoreML::Result::good((CoreML::Result *)a4);
    if (v12)
      v76 = v75;
    else
      v76 = 0;
    if (v76)
    {
      v77 = *((_QWORD *)a1 + 14);
      std::string::basic_string[abi:ne180100]<0>(__p, "bias");
      CoreML::validateGeneralWeightParams((uint64_t)a3, v10, (const CoreML::Specification::WeightParams *)1, (const void **)&v84, v77, (uint64_t)__p, (uint64_t)&v79);
      *(_QWORD *)a4 = v79.__r_.__value_.__r.__words[0];
      if (*(char *)(a4 + 31) < 0)
        operator delete(*v74);
      *(_OWORD *)v74 = *(_OWORD *)&v79.__r_.__value_.__r.__words[1];
      *(_QWORD *)(a4 + 24) = v80;
      HIBYTE(v80) = 0;
      v79.__r_.__value_.__s.__data_[8] = 0;
      if (SHIBYTE(v83) < 0)
        operator delete(__p[0]);
      CoreML::Result::good((CoreML::Result *)a4);
    }
  }
LABEL_176:
  if (SHIBYTE(v86) < 0)
    operator delete(v84);
}

void sub_21834AEA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  uint64_t v35;
  uint64_t v36;

  if (a35 < 0)
    operator delete(__p);
  if (*(char *)(v36 - 73) < 0)
    operator delete(*(void **)(v36 - 96));
  if (*(char *)(v35 + 31) < 0)
    operator delete(*(void **)(v35 + 8));
  _Unwind_Resume(exception_object);
}

double CoreML::NeuralNetworkSpecValidator::validateEmbeddingNDLayer@<D0>(CoreML::NeuralNetworkSpecValidator *this@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X8>)
{
  void **v6;
  _BOOL8 v7;
  double result;
  char *v9;
  uint64_t *v10;
  const CoreML::Specification::WeightParams *v11;
  const CoreML::Specification::WeightParams *v12;
  void *v13[2];
  char v14;
  void *__p[2];
  char v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;

  CoreML::Result::Result((CoreML::Result *)a3);
  CoreML::validateInputCount((CoreML *)a2, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v17);
  *(_QWORD *)a3 = v17;
  v6 = (void **)(a3 + 8);
  if (*(char *)(a3 + 31) < 0)
    operator delete(*v6);
  *(_OWORD *)v6 = v18;
  *(_QWORD *)(a3 + 24) = v19;
  if (CoreML::Result::good((CoreML::Result *)a3))
  {
    CoreML::validateOutputCount((CoreML *)a2, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v17);
    *(_QWORD *)a3 = v17;
    if (*(char *)(a3 + 31) < 0)
      operator delete(*v6);
    *(_OWORD *)v6 = v18;
    *(_QWORD *)(a3 + 24) = v19;
  }
  v7 = CoreML::Result::good((CoreML::Result *)a3);
  if (v7)
  {
    if (!*(_BYTE *)this)
      goto LABEL_19;
    std::string::basic_string[abi:ne180100]<0>(__p, "EmbeddingND");
    v9 = (char *)this + 32;
    CoreML::validateInputOutputRankEquality(a2, (uint64_t)__p, (uint64_t)v9, (CoreML::Result *)&v17);
    *(_QWORD *)a3 = v17;
    if (*(char *)(a3 + 31) < 0)
      operator delete(*v6);
    *(_OWORD *)v6 = v18;
    *(_QWORD *)(a3 + 24) = v19;
    HIBYTE(v19) = 0;
    LOBYTE(v18) = 0;
    if (v16 < 0)
      operator delete(__p[0]);
    if (CoreML::Result::good((CoreML::Result *)a3))
    {
      std::string::basic_string[abi:ne180100]<0>(v13, "EmbeddingND");
      CoreML::validateRankCount((uint64_t)a2, (uint64_t)v13, 2, 5, (uint64_t)v9, (uint64_t)&v17);
      *(_QWORD *)a3 = v17;
      if (*(char *)(a3 + 31) < 0)
        operator delete(*v6);
      *(_OWORD *)v6 = v18;
      *(_QWORD *)(a3 + 24) = v19;
      HIBYTE(v19) = 0;
      LOBYTE(v18) = 0;
      if (v14 < 0)
        operator delete(v13[0]);
      v7 = CoreML::Result::good((CoreML::Result *)a3);
      if (v7)
      {
LABEL_19:
        if (*((_DWORD *)a2 + 35) == 1040)
          v10 = a2[16];
        else
          v10 = CoreML::Specification::EmbeddingNDLayerParams::default_instance((CoreML::Specification::EmbeddingNDLayerParams *)v7);
        if (v10[2])
          v11 = (const CoreML::Specification::WeightParams *)v10[2];
        else
          v11 = (const CoreML::Specification::WeightParams *)&CoreML::Specification::_WeightParams_default_instance_;
        if (v10[3])
          v12 = (const CoreML::Specification::WeightParams *)v10[3];
        else
          v12 = (const CoreML::Specification::WeightParams *)&CoreML::Specification::_WeightParams_default_instance_;
        validateEmbeddingWeightsBias((const CoreML::Specification::NeuralNetworkLayer *)a2, v11, v12, (uint64_t)&v17);
        *(_QWORD *)a3 = v17;
        if (*(char *)(a3 + 31) < 0)
          operator delete(*v6);
        result = *(double *)&v18;
        *(_OWORD *)v6 = v18;
        *(_QWORD *)(a3 + 24) = v19;
      }
    }
  }
  return result;
}

void sub_21834B1A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;

  if (*(char *)(v20 + 31) < 0)
    operator delete(*(void **)(v20 + 8));
  _Unwind_Resume(exception_object);
}

double CoreML::NeuralNetworkSpecValidator::validateAverageLayer@<D0>(const CoreML::Specification::NeuralNetworkLayer *a1@<X1>, uint64_t a2@<X8>)
{
  void **v5;
  double result;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;

  CoreML::Result::Result((CoreML::Result *)a2);
  CoreML::validateInputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, -1, (CoreML::Result *)&v7);
  *(_QWORD *)a2 = v7;
  v5 = (void **)(a2 + 8);
  if (*(char *)(a2 + 31) < 0)
    operator delete(*v5);
  *(_OWORD *)v5 = v8;
  *(_QWORD *)(a2 + 24) = v9;
  if (CoreML::Result::good((CoreML::Result *)a2))
  {
    CoreML::validateOutputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v7);
    *(_QWORD *)a2 = v7;
    if (*(char *)(a2 + 31) < 0)
      operator delete(*v5);
    result = *(double *)&v8;
    *(_OWORD *)v5 = v8;
    *(_QWORD *)(a2 + 24) = v9;
  }
  return result;
}

void sub_21834B2C4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*(void **)(v1 + 8));
  _Unwind_Resume(exception_object);
}

double CoreML::NeuralNetworkSpecValidator::validateMaxLayer@<D0>(const CoreML::Specification::NeuralNetworkLayer *a1@<X1>, uint64_t a2@<X8>)
{
  void **v5;
  double result;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;

  CoreML::Result::Result((CoreML::Result *)a2);
  CoreML::validateInputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, -1, (CoreML::Result *)&v7);
  *(_QWORD *)a2 = v7;
  v5 = (void **)(a2 + 8);
  if (*(char *)(a2 + 31) < 0)
    operator delete(*v5);
  *(_OWORD *)v5 = v8;
  *(_QWORD *)(a2 + 24) = v9;
  if (CoreML::Result::good((CoreML::Result *)a2))
  {
    CoreML::validateOutputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v7);
    *(_QWORD *)a2 = v7;
    if (*(char *)(a2 + 31) < 0)
      operator delete(*v5);
    result = *(double *)&v8;
    *(_OWORD *)v5 = v8;
    *(_QWORD *)(a2 + 24) = v9;
  }
  return result;
}

void sub_21834B3A8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*(void **)(v1 + 8));
  _Unwind_Resume(exception_object);
}

double CoreML::NeuralNetworkSpecValidator::validateMinLayer@<D0>(const CoreML::Specification::NeuralNetworkLayer *a1@<X1>, uint64_t a2@<X8>)
{
  void **v5;
  double result;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;

  CoreML::Result::Result((CoreML::Result *)a2);
  CoreML::validateInputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, -1, (CoreML::Result *)&v7);
  *(_QWORD *)a2 = v7;
  v5 = (void **)(a2 + 8);
  if (*(char *)(a2 + 31) < 0)
    operator delete(*v5);
  *(_OWORD *)v5 = v8;
  *(_QWORD *)(a2 + 24) = v9;
  if (CoreML::Result::good((CoreML::Result *)a2))
  {
    CoreML::validateOutputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v7);
    *(_QWORD *)a2 = v7;
    if (*(char *)(a2 + 31) < 0)
      operator delete(*v5);
    result = *(double *)&v8;
    *(_OWORD *)v5 = v8;
    *(_QWORD *)(a2 + 24) = v9;
  }
  return result;
}

void sub_21834B48C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*(void **)(v1 + 8));
  _Unwind_Resume(exception_object);
}

BOOL CoreML::NeuralNetworkSpecValidator::validateSequenceRepeatLayer@<W0>(CoreML::NeuralNetworkSpecValidator *this@<X0>, const CoreML::Specification::NeuralNetworkLayer *a2@<X1>, uint64_t a3@<X8>)
{
  void **v6;
  _BOOL8 result;
  char *v8;
  void *v9[2];
  char v10;
  void *__p[2];
  char v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;

  CoreML::Result::Result((CoreML::Result *)a3);
  CoreML::validateInputCount(a2, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v13);
  *(_QWORD *)a3 = v13;
  v6 = (void **)(a3 + 8);
  if (*(char *)(a3 + 31) < 0)
    operator delete(*v6);
  *(_OWORD *)v6 = v14;
  *(_QWORD *)(a3 + 24) = v15;
  if (CoreML::Result::good((CoreML::Result *)a3))
  {
    CoreML::validateOutputCount(a2, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v13);
    *(_QWORD *)a3 = v13;
    if (*(char *)(a3 + 31) < 0)
      operator delete(*v6);
    *(_OWORD *)v6 = v14;
    *(_QWORD *)(a3 + 24) = v15;
  }
  result = CoreML::Result::good((CoreML::Result *)a3);
  if (result && *(_BYTE *)this)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "SequenceRepeat");
    v8 = (char *)this + 32;
    CoreML::validateInputOutputRankEquality(a2, (uint64_t)__p, (uint64_t)v8, (CoreML::Result *)&v13);
    *(_QWORD *)a3 = v13;
    if (*(char *)(a3 + 31) < 0)
      operator delete(*v6);
    *(_OWORD *)v6 = v14;
    *(_QWORD *)(a3 + 24) = v15;
    HIBYTE(v15) = 0;
    LOBYTE(v14) = 0;
    if (v12 < 0)
      operator delete(__p[0]);
    result = CoreML::Result::good((CoreML::Result *)a3);
    if (result)
    {
      std::string::basic_string[abi:ne180100]<0>(v9, "SequenceRepeat");
      CoreML::validateRankCount((uint64_t)a2, (uint64_t)v9, 5, -1, (uint64_t)v8, (uint64_t)&v13);
      *(_QWORD *)a3 = v13;
      if (*(char *)(a3 + 31) < 0)
        operator delete(*v6);
      *(_OWORD *)v6 = v14;
      *(_QWORD *)(a3 + 24) = v15;
      HIBYTE(v15) = 0;
      LOBYTE(v14) = 0;
      if (v10 < 0)
        operator delete(v9[0]);
      return CoreML::Result::good((CoreML::Result *)a3);
    }
  }
  return result;
}

void sub_21834B670(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;

  if (a14 < 0)
    operator delete(__p);
  if (*(char *)(v20 + 31) < 0)
    operator delete(*(void **)(v20 + 8));
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateSoftmaxLayer(CoreML::NeuralNetworkSpecValidator *this@<X0>, const CoreML::Specification::NeuralNetworkLayer *a2@<X1>, uint64_t a3@<X8>)
{
  void **v6;
  char *v7;
  void *v8[2];
  char v9;
  void *__p[2];
  char v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;

  CoreML::Result::Result((CoreML::Result *)a3);
  CoreML::validateInputCount(a2, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v12);
  *(_QWORD *)a3 = v12;
  v6 = (void **)(a3 + 8);
  if (*(char *)(a3 + 31) < 0)
    operator delete(*v6);
  *(_OWORD *)v6 = v13;
  *(_QWORD *)(a3 + 24) = v14;
  if (CoreML::Result::good((CoreML::Result *)a3))
  {
    CoreML::validateOutputCount(a2, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v12);
    *(_QWORD *)a3 = v12;
    if (*(char *)(a3 + 31) < 0)
      operator delete(*v6);
    *(_OWORD *)v6 = v13;
    *(_QWORD *)(a3 + 24) = v14;
    if (CoreML::Result::good((CoreML::Result *)a3) && *(_BYTE *)this)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "Softmax");
      v7 = (char *)this + 32;
      CoreML::validateInputOutputRankEquality(a2, (uint64_t)__p, (uint64_t)v7, (CoreML::Result *)&v12);
      *(_QWORD *)a3 = v12;
      if (*(char *)(a3 + 31) < 0)
        operator delete(*v6);
      *(_OWORD *)v6 = v13;
      *(_QWORD *)(a3 + 24) = v14;
      HIBYTE(v14) = 0;
      LOBYTE(v13) = 0;
      if (v11 < 0)
        operator delete(__p[0]);
      if (CoreML::Result::good((CoreML::Result *)a3))
      {
        std::string::basic_string[abi:ne180100]<0>(v8, "Softmax");
        CoreML::validateRankCount((uint64_t)a2, (uint64_t)v8, 3, -1, (uint64_t)v7, (uint64_t)&v12);
        *(_QWORD *)a3 = v12;
        if (*(char *)(a3 + 31) < 0)
          operator delete(*v6);
        *(_OWORD *)v6 = v13;
        *(_QWORD *)(a3 + 24) = v14;
        HIBYTE(v14) = 0;
        LOBYTE(v13) = 0;
        if (v9 < 0)
          operator delete(v8[0]);
      }
    }
  }
}

void sub_21834B880(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;

  if (a14 < 0)
    operator delete(__p);
  if (*(char *)(v20 + 31) < 0)
    operator delete(*(void **)(v20 + 8));
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateConcatLayer(CoreML::NeuralNetworkSpecValidator *this@<X0>, const CoreML::Specification::NeuralNetworkLayer *a2@<X1>, uint64_t a3@<X8>)
{
  char *v6;
  _BOOL8 v7;
  uint64_t *v8;
  char *v9;
  int *v10;
  uint64_t v11;
  const void ***v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  const void **v16;
  __int128 *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  void *v22;
  char v23;
  std::string v24;
  std::string v25;
  void *v26[2];
  char v27;
  void *v28;
  __int128 v29;
  uint64_t v30;
  void *v31;
  __int128 __p;
  uint64_t v33;
  _QWORD v34[5];

  v34[2] = *MEMORY[0x24BDAC8D0];
  CoreML::Result::Result((CoreML::Result *)&v31);
  CoreML::validateInputCount(a2, (const CoreML::Specification::NeuralNetworkLayer *)2, -1, (CoreML::Result *)&v28);
  v31 = v28;
  if (SHIBYTE(v33) < 0)
    operator delete((void *)__p);
  __p = v29;
  v33 = v30;
  if (CoreML::Result::good((CoreML::Result *)&v31))
  {
    CoreML::validateOutputCount(a2, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v28);
    v31 = v28;
    if (SHIBYTE(v33) < 0)
      operator delete((void *)__p);
    __p = v29;
    v33 = v30;
  }
  if (!CoreML::Result::good((CoreML::Result *)&v31) || !*(_BYTE *)this)
    goto LABEL_37;
  std::string::basic_string[abi:ne180100]<0>(v26, "Concat");
  v6 = (char *)this + 32;
  CoreML::validateInputOutputRankEquality(a2, (uint64_t)v26, (uint64_t)this + 32, (CoreML::Result *)&v28);
  v31 = v28;
  if (SHIBYTE(v33) < 0)
    operator delete((void *)__p);
  __p = v29;
  v33 = v30;
  HIBYTE(v30) = 0;
  LOBYTE(v29) = 0;
  if (v27 < 0)
    operator delete(v26[0]);
  v7 = CoreML::Result::good((CoreML::Result *)&v31);
  if (!v7)
    goto LABEL_37;
  v8 = *((_DWORD *)a2 + 35) == 320
     ? (uint64_t *)*((_QWORD *)a2 + 16)
     : CoreML::Specification::ConcatLayerParams::default_instance((CoreML::Specification::ConcatLayerParams *)v7);
  if (*((_BYTE *)v8 + 16))
  {
    std::string::basic_string[abi:ne180100]<0>(&v25, "Concat");
    CoreML::validateRankCount((uint64_t)a2, (uint64_t)&v25, 5, -1, (uint64_t)this + 32, (uint64_t)&v28);
    v31 = v28;
    if (SHIBYTE(v33) < 0)
      operator delete((void *)__p);
    __p = v29;
    v33 = v30;
    HIBYTE(v30) = 0;
    LOBYTE(v29) = 0;
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v25.__r_.__value_.__l.__data_);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v25, "Concat");
    CoreML::validateRankCount((uint64_t)a2, (uint64_t)&v25, 3, -1, (uint64_t)this + 32, (uint64_t)&v28);
    v31 = v28;
    if (SHIBYTE(v33) < 0)
      operator delete((void *)__p);
    __p = v29;
    v33 = v30;
    HIBYTE(v30) = 0;
    LOBYTE(v29) = 0;
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v25.__r_.__value_.__l.__data_);
  }
  if (CoreML::Result::good((CoreML::Result *)&v31)
    && (v9 = (char *)this + 40,
        (CoreML::NeuralNetworkSpecValidator *)((char *)this + 40) != (CoreML::NeuralNetworkSpecValidator *)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>((uint64_t)this + 32, *(const void ***)(*((_QWORD *)a2 + 4) + 8)))
    && ((v10 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)this + 32, *(const void ***)(*((_QWORD *)a2 + 4) + 8)), (v11 = *((_QWORD *)a2 + 4)) != 0)? (v12 = (const void ***)(v11 + 8)): (v12 = 0), v13 = *((int *)a2 + 6), (_DWORD)v13))
  {
    v14 = *v10;
    v15 = 8 * v13;
    while (1)
    {
      v16 = *v12;
      if (v9 != (char *)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>((uint64_t)v6, *v12)&& v14 != *(_DWORD *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)v6, v16))
      {
        break;
      }
      ++v12;
      v15 -= 8;
      if (!v15)
        goto LABEL_37;
    }
    v17 = (__int128 *)*((_QWORD *)a2 + 14);
    if (*((char *)v17 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v24, *(const std::string::value_type **)v17, *((_QWORD *)v17 + 1));
    }
    else
    {
      v18 = *v17;
      v24.__r_.__value_.__r.__words[2] = *((_QWORD *)v17 + 2);
      *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v18;
    }
    v19 = std::string::insert(&v24, 0, "Layer '");
    v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v25.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    v21 = std::string::append(&v25, "' of type 'Concat' expects equal ranks for its inputs, but they are not equal.");
    v22 = (void *)v21->__r_.__value_.__r.__words[0];
    v34[0] = v21->__r_.__value_.__l.__size_;
    *(_QWORD *)((char *)v34 + 7) = *(std::string::size_type *)((char *)&v21->__r_.__value_.__r.__words[1] + 7);
    v23 = HIBYTE(v21->__r_.__value_.__r.__words[2]);
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    *(_QWORD *)((char *)&v29 + 7) = *(_QWORD *)((char *)v34 + 7);
    v28 = v22;
    *(_QWORD *)&v29 = v34[0];
    HIBYTE(v29) = v23;
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v25.__r_.__value_.__l.__data_);
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v24.__r_.__value_.__l.__data_);
    CoreML::Result::Result((_DWORD *)a3, 13);
    if (SHIBYTE(v29) < 0)
      operator delete(v28);
    if (SHIBYTE(v33) < 0)
      operator delete((void *)__p);
  }
  else
  {
LABEL_37:
    *(_QWORD *)a3 = v31;
    *(_OWORD *)(a3 + 8) = __p;
    *(_QWORD *)(a3 + 24) = v33;
  }
}

void sub_21834BD0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (a42 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

__n128 CoreML::NeuralNetworkSpecValidator::validateCustomLayer@<Q0>(CoreML::Specification::CustomLayerParams **a1@<X1>, uint64_t a2@<X8>)
{
  _BOOL8 v5;
  CoreML::Specification::CustomLayerParams *v6;
  uint64_t v7;
  CoreML::Specification::CustomLayerParams *v8;
  std::string *v9;
  __int128 v10;
  __n128 result;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  BOOL v24;
  int v25;
  int v26;
  std::string *v27;
  __int128 v28;
  std::string v29;
  std::string v30;
  uint64_t v31;
  std::string::size_type v32;
  __n128 __p;
  uint64_t v34;

  CoreML::Result::Result((CoreML::Result *)&v32);
  CoreML::validateInputCount((CoreML *)a1, (const CoreML::Specification::NeuralNetworkLayer *)1, -1, (CoreML::Result *)&v30);
  v32 = v30.__r_.__value_.__r.__words[0];
  if (SHIBYTE(v34) < 0)
    operator delete((void *)__p.n128_u64[0]);
  __p = *(__n128 *)&v30.__r_.__value_.__r.__words[1];
  v34 = v31;
  v5 = CoreML::Result::good((CoreML::Result *)&v32);
  if (v5)
  {
    CoreML::validateOutputCount((CoreML *)a1, (const CoreML::Specification::NeuralNetworkLayer *)1, -1, (CoreML::Result *)&v30);
    v32 = v30.__r_.__value_.__r.__words[0];
    if (SHIBYTE(v34) < 0)
      operator delete((void *)__p.n128_u64[0]);
    __p = *(__n128 *)&v30.__r_.__value_.__r.__words[1];
    v34 = v31;
  }
  if (*((_DWORD *)a1 + 35) == 500)
    v6 = a1[16];
  else
    v6 = (CoreML::Specification::CustomLayerParams *)CoreML::Specification::CustomLayerParams::default_instance((CoreML::Specification::CustomLayerParams *)v5);
  v7 = *((_QWORD *)v6 + 9);
  if (*(char *)(v7 + 23) < 0)
  {
    if (*(_QWORD *)(v7 + 8))
      goto LABEL_12;
  }
  else if (*(_BYTE *)(v7 + 23))
  {
LABEL_12:
    if (*((_DWORD *)a1 + 35) == 500)
      v8 = a1[16];
    else
      v8 = (CoreML::Specification::CustomLayerParams *)CoreML::Specification::CustomLayerParams::default_instance(v6);
    v12 = *((_QWORD *)v8 + 4);
    if (v12)
      v13 = (uint64_t *)(v12 + 8);
    else
      v13 = 0;
    v14 = *((int *)v8 + 6);
    if ((_DWORD)v14)
    {
      v15 = 8 * v14;
      do
      {
        v16 = *v13;
        v17 = *(_QWORD *)(*v13 + 40);
        if (*(char *)(v17 + 23) < 0)
          v18 = *(_QWORD *)(v17 + 8);
        else
          v18 = *(unsigned __int8 *)(v17 + 23);
        v19 = *(_QWORD *)(v16 + 48);
        if (*(char *)(v19 + 23) < 0)
          v20 = *(_QWORD *)(v19 + 8);
        else
          v20 = *(unsigned __int8 *)(v19 + 23);
        v21 = *(_QWORD *)(v16 + 56);
        if (*(char *)(v21 + 23) < 0)
          v22 = *(_QWORD *)(v21 + 8);
        else
          v22 = *(unsigned __int8 *)(v21 + 23);
        v23 = *(_DWORD *)(v16 + 16);
        v24 = v23 <= 0;
        v25 = v23 > 0;
        if (v24)
          v26 = 1;
        else
          v26 = 2;
        if (v18)
          v25 = v26;
        if (v20)
          ++v25;
        if (v22)
          ++v25;
        if (v25 != 1)
        {
          std::operator+<char>();
          v27 = std::string::append(&v30, " has a weights parameter with multiple types filled in.  The WeightParams message should be treated as a oneof.");
          v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
          v29.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v28;
          v27->__r_.__value_.__l.__size_ = 0;
          v27->__r_.__value_.__r.__words[2] = 0;
          v27->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v30.__r_.__value_.__l.__data_);
          CoreML::Result::Result(&v30, 13);
          v32 = v30.__r_.__value_.__r.__words[0];
          if (SHIBYTE(v34) < 0)
            operator delete((void *)__p.n128_u64[0]);
          __p = *(__n128 *)&v30.__r_.__value_.__r.__words[1];
          v34 = v31;
          if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v29.__r_.__value_.__l.__data_);
        }
        ++v13;
        v15 -= 8;
      }
      while (v15);
    }
    *(_QWORD *)a2 = v32;
    result = __p;
    *(__n128 *)(a2 + 8) = __p;
    *(_QWORD *)(a2 + 24) = v34;
    return result;
  }
  std::operator+<char>();
  v9 = std::string::append(&v29, " has an empty 'className' field. This field is required in order for Core ML to link to the implementation for this custom class.");
  v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v30.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  CoreML::Result::Result((_DWORD *)a2, 13);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
  if (SHIBYTE(v34) < 0)
    operator delete((void *)__p.n128_u64[0]);
  return result;
}

void sub_21834C0D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a29 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateResizeBilinearLayer(CoreML::NeuralNetworkSpecValidator *this@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X8>)
{
  void **v6;
  _BOOL8 v7;
  char *v8;
  uint64_t *v9;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  std::string::size_type size;
  std::string *v14;
  __int128 v15;
  std::string *v16;
  __int128 v17;
  std::string v18;
  std::string v19;
  std::string v20;
  void *v21[2];
  std::string::size_type v22;
  void *__p[2];
  char v24;
  std::string v25;
  uint64_t v26;

  CoreML::Result::Result((CoreML::Result *)a3);
  CoreML::validateInputCount((CoreML *)a2, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v25);
  *(_QWORD *)a3 = v25.__r_.__value_.__r.__words[0];
  v6 = (void **)(a3 + 8);
  if (*(char *)(a3 + 31) < 0)
    operator delete(*v6);
  *(_OWORD *)v6 = *(_OWORD *)&v25.__r_.__value_.__r.__words[1];
  *(_QWORD *)(a3 + 24) = v26;
  if (CoreML::Result::good((CoreML::Result *)a3))
  {
    CoreML::validateOutputCount((CoreML *)a2, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v25);
    *(_QWORD *)a3 = v25.__r_.__value_.__r.__words[0];
    if (*(char *)(a3 + 31) < 0)
      operator delete(*v6);
    *(_OWORD *)v6 = *(_OWORD *)&v25.__r_.__value_.__r.__words[1];
    *(_QWORD *)(a3 + 24) = v26;
  }
  v7 = CoreML::Result::good((CoreML::Result *)a3);
  if (v7)
  {
    if (!*(_BYTE *)this)
      goto LABEL_19;
    std::string::basic_string[abi:ne180100]<0>(__p, "ResizeBilinear");
    v8 = (char *)this + 32;
    CoreML::validateInputOutputRankEquality(a2, (uint64_t)__p, (uint64_t)v8, (CoreML::Result *)&v25);
    *(_QWORD *)a3 = v25.__r_.__value_.__r.__words[0];
    if (*(char *)(a3 + 31) < 0)
      operator delete(*v6);
    *(_OWORD *)v6 = *(_OWORD *)&v25.__r_.__value_.__r.__words[1];
    *(_QWORD *)(a3 + 24) = v26;
    HIBYTE(v26) = 0;
    v25.__r_.__value_.__s.__data_[8] = 0;
    if (v24 < 0)
      operator delete(__p[0]);
    if (CoreML::Result::good((CoreML::Result *)a3))
    {
      std::string::basic_string[abi:ne180100]<0>(v21, "ResizeBilinear");
      CoreML::validateRankCount((uint64_t)a2, (uint64_t)v21, 3, -1, (uint64_t)v8, (uint64_t)&v25);
      *(_QWORD *)a3 = v25.__r_.__value_.__r.__words[0];
      if (*(char *)(a3 + 31) < 0)
        operator delete(*v6);
      *(_OWORD *)v6 = *(_OWORD *)&v25.__r_.__value_.__r.__words[1];
      *(_QWORD *)(a3 + 24) = v26;
      HIBYTE(v26) = 0;
      v25.__r_.__value_.__s.__data_[8] = 0;
      if (SHIBYTE(v22) < 0)
        operator delete(v21[0]);
      v7 = CoreML::Result::good((CoreML::Result *)a3);
      if (v7)
      {
LABEL_19:
        if (*((_DWORD *)a2 + 35) == 211)
          v9 = a2[16];
        else
          v9 = CoreML::Specification::ResizeBilinearLayerParams::default_instance((CoreML::Specification::ResizeBilinearLayerParams *)v7);
        if ((*((_DWORD *)v9 + 4) | 2) != 2)
        {
          std::operator+<char>();
          v10 = std::string::append(&v19, "' must be a vector of size 2 (i.e height, width) but is a vector of size ");
          v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
          v20.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v11;
          v10->__r_.__value_.__l.__size_ = 0;
          v10->__r_.__value_.__r.__words[2] = 0;
          v10->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v18, *((_DWORD *)v9 + 4));
          if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v12 = &v18;
          else
            v12 = (std::string *)v18.__r_.__value_.__r.__words[0];
          if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(v18.__r_.__value_.__r.__words[2]);
          else
            size = v18.__r_.__value_.__l.__size_;
          v14 = std::string::append(&v20, (const std::string::value_type *)v12, size);
          v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
          v25.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v15;
          v14->__r_.__value_.__l.__size_ = 0;
          v14->__r_.__value_.__r.__words[2] = 0;
          v14->__r_.__value_.__r.__words[0] = 0;
          v16 = std::string::append(&v25, ".");
          v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
          v22 = v16->__r_.__value_.__r.__words[2];
          *(_OWORD *)v21 = v17;
          v16->__r_.__value_.__l.__size_ = 0;
          v16->__r_.__value_.__r.__words[2] = 0;
          v16->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v25.__r_.__value_.__l.__data_);
          if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v18.__r_.__value_.__l.__data_);
          if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v20.__r_.__value_.__l.__data_);
          if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v19.__r_.__value_.__l.__data_);
          CoreML::Result::Result(&v25, 13);
          *(_QWORD *)a3 = v25.__r_.__value_.__r.__words[0];
          if (*(char *)(a3 + 31) < 0)
            operator delete(*v6);
          *(_OWORD *)v6 = *(_OWORD *)&v25.__r_.__value_.__r.__words[1];
          *(_QWORD *)(a3 + 24) = v26;
          if (SHIBYTE(v22) < 0)
            operator delete(v21[0]);
        }
      }
    }
  }
}

void sub_21834C468(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  uint64_t v39;

  if (a33 < 0)
    operator delete(__p);
  if (*(char *)(v39 + 31) < 0)
    operator delete(*(void **)(v39 + 8));
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateCropResizeLayer(CoreML::NeuralNetworkSpecValidator *this@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  char *v7;
  char *v8;
  int v9;
  uint64_t *v10;
  std::string *v11;
  __int128 v12;
  std::string *v13;
  std::string::size_type size;
  std::string *v15;
  __int128 v16;
  std::string *v17;
  __int128 v18;
  std::string::size_type v19;
  uint64_t v20;
  void *v21;
  uint64_t *v22;
  __int128 v23;
  std::string *v24;
  __int128 v25;
  std::string *v26;
  std::string::size_type v27;
  char v28;
  std::string v29;
  std::string v30;
  std::string v31;
  void *__p[2];
  char v33;
  std::string v34;
  uint64_t v35;
  std::string::size_type v36;
  __int128 v37;
  uint64_t v38;
  std::string v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  CoreML::Result::Result((CoreML::Result *)&v36);
  CoreML::validateInputCount((CoreML *)a2, (const CoreML::Specification::NeuralNetworkLayer *)2, 2, (CoreML::Result *)&v34);
  v36 = v34.__r_.__value_.__r.__words[0];
  if (SHIBYTE(v38) < 0)
    operator delete((void *)v37);
  v37 = *(_OWORD *)&v34.__r_.__value_.__r.__words[1];
  v38 = v35;
  if (CoreML::Result::good((CoreML::Result *)&v36))
  {
    CoreML::validateOutputCount((CoreML *)a2, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v34);
    v36 = v34.__r_.__value_.__r.__words[0];
    if (SHIBYTE(v38) < 0)
      operator delete((void *)v37);
    v37 = *(_OWORD *)&v34.__r_.__value_.__r.__words[1];
    v38 = v35;
  }
  v6 = CoreML::Result::good((CoreML::Result *)&v36);
  if ((v6 & 1) == 0)
    goto LABEL_26;
  if (!*(_BYTE *)this)
    goto LABEL_22;
  std::string::basic_string[abi:ne180100]<0>(__p, "CropResize");
  v7 = (char *)this + 32;
  CoreML::validateInputOutputRankEquality(a2, (uint64_t)__p, (uint64_t)this + 32, (CoreML::Result *)&v34);
  v36 = v34.__r_.__value_.__r.__words[0];
  if (SHIBYTE(v38) < 0)
    operator delete((void *)v37);
  v37 = *(_OWORD *)&v34.__r_.__value_.__r.__words[1];
  v38 = v35;
  HIBYTE(v35) = 0;
  v34.__r_.__value_.__s.__data_[8] = 0;
  if (v33 < 0)
    operator delete(__p[0]);
  if (!CoreML::Result::good((CoreML::Result *)&v36))
    goto LABEL_26;
  std::string::basic_string[abi:ne180100]<0>(&v31, "CropResize");
  CoreML::validateRankCount((uint64_t)a2, (uint64_t)&v31, 5, -1, (uint64_t)this + 32, (uint64_t)&v34);
  v36 = v34.__r_.__value_.__r.__words[0];
  if (SHIBYTE(v38) < 0)
    operator delete((void *)v37);
  v37 = *(_OWORD *)&v34.__r_.__value_.__r.__words[1];
  v38 = v35;
  HIBYTE(v35) = 0;
  v34.__r_.__value_.__s.__data_[8] = 0;
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31.__r_.__value_.__l.__data_);
  if (!CoreML::Result::good((CoreML::Result *)&v36))
    goto LABEL_26;
  v6 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>((uint64_t)this + 32, (const void **)a2[4][1]);
  v8 = (char *)this + 40;
  if (v8 == (char *)v6
    || (v6 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>((uint64_t)v7, (const void **)a2[4][2]), v8 == (char *)v6)|| (v9 = *(_DWORD *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)v7, (const void **)a2[4][1]), v6 = std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)v7, (const void **)a2[4][2]), v9 == *(_DWORD *)v6))
  {
LABEL_22:
    if (*((_DWORD *)a2 + 35) == 212)
      v10 = a2[16];
    else
      v10 = CoreML::Specification::CropResizeLayerParams::default_instance((CoreML::Specification::CropResizeLayerParams *)v6);
    if ((*((_DWORD *)v10 + 4) | 2) == 2)
    {
LABEL_26:
      *(_QWORD *)a3 = v36;
      *(_OWORD *)(a3 + 8) = v37;
      *(_QWORD *)(a3 + 24) = v38;
      v37 = 0uLL;
      v38 = 0;
      goto LABEL_27;
    }
    std::operator+<char>();
    v11 = std::string::append(&v39, "' must be a vector of size 2 (i.e height, width) but is a vector of size ");
    v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v30.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v29, *((_DWORD *)v10 + 4));
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v13 = &v29;
    else
      v13 = (std::string *)v29.__r_.__value_.__r.__words[0];
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v29.__r_.__value_.__r.__words[2]);
    else
      size = v29.__r_.__value_.__l.__size_;
    v15 = std::string::append(&v30, (const std::string::value_type *)v13, size);
    v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v34.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    v17 = std::string::append(&v34, ".");
    v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v31.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v34.__r_.__value_.__l.__data_);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v30.__r_.__value_.__l.__data_);
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v39.__r_.__value_.__l.__data_);
    CoreML::Result::Result(&v34, 13);
    v19 = v34.__r_.__value_.__r.__words[0];
    v36 = v34.__r_.__value_.__r.__words[0];
    if (SHIBYTE(v38) < 0)
    {
      operator delete((void *)v37);
      v19 = v36;
    }
    v37 = *(_OWORD *)&v34.__r_.__value_.__r.__words[1];
    v20 = v35;
    *(_QWORD *)a3 = v19;
    *(_OWORD *)(a3 + 8) = v37;
    *(_QWORD *)(a3 + 24) = v20;
    v37 = 0uLL;
    v38 = 0;
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    {
      v21 = (void *)v31.__r_.__value_.__r.__words[0];
LABEL_48:
      operator delete(v21);
    }
  }
  else
  {
    v22 = a2[14];
    if (*((char *)v22 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v30, (const std::string::value_type *)*v22, v22[1]);
    }
    else
    {
      v23 = *(_OWORD *)v22;
      v30.__r_.__value_.__r.__words[2] = v22[2];
      *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v23;
    }
    v24 = std::string::insert(&v30, 0, "Layer '");
    v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    v31.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    v26 = std::string::append(&v31, "' of type 'CropResize' expects equal ranks for its inputs, but they are not equal.");
    v27 = v26->__r_.__value_.__r.__words[0];
    v39.__r_.__value_.__r.__words[0] = v26->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v39.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v26->__r_.__value_.__r.__words[1] + 7);
    v28 = HIBYTE(v26->__r_.__value_.__r.__words[2]);
    v26->__r_.__value_.__l.__size_ = 0;
    v26->__r_.__value_.__r.__words[2] = 0;
    v26->__r_.__value_.__r.__words[0] = 0;
    *(std::string::size_type *)((char *)&v34.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v39.__r_.__value_.__r.__words + 7);
    v34.__r_.__value_.__r.__words[0] = v27;
    v34.__r_.__value_.__l.__size_ = v39.__r_.__value_.__r.__words[0];
    *((_BYTE *)&v34.__r_.__value_.__s + 23) = v28;
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v31.__r_.__value_.__l.__data_);
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v30.__r_.__value_.__l.__data_);
    CoreML::Result::Result((_DWORD *)a3, 13);
    if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
    {
      v21 = (void *)v34.__r_.__value_.__r.__words[0];
      goto LABEL_48;
    }
  }
LABEL_27:
  if (SHIBYTE(v38) < 0)
    operator delete((void *)v37);
}

void sub_21834CA18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  uint64_t v40;

  if (*(char *)(v40 - 81) < 0)
    operator delete(*(void **)(v40 - 104));
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateBranchLayer(CoreML::NeuralNetworkSpecValidator *this@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X8>)
{
  _BOOL8 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t *v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t *v16;
  int v17;
  BOOL v18;
  uint64_t *v20;
  uint64_t *v21;
  const void **v22;
  uint64_t *v23;
  uint64_t *v24;
  const void **v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *v28;
  BOOL v29;
  uint64_t *v30;
  __int128 v31;
  uint64_t *v32;
  __int128 v33;
  uint64_t *v34;
  __int128 v35;
  std::string *v36;
  __int128 v37;
  std::string *v38;
  __int128 v39;
  std::string *v40;
  std::string::size_type size;
  std::string *v42;
  __int128 v43;
  std::string *v44;
  __int128 v45;
  std::string *v46;
  __int128 v47;
  std::string *v48;
  __int128 v49;
  void *v50;
  std::string *v51;
  __int128 v52;
  std::string *v53;
  __int128 v54;
  BOOL v55;
  uint64_t v56;
  std::string v57;
  uint64_t v58;
  std::string v59;
  uint64_t v60;
  char *v61[3];
  uint64_t *v62;
  _QWORD *v63;
  _BYTE __p[24];
  uint64_t v65;
  char *v66[3];
  uint64_t *v67;
  _QWORD *v68[4];
  std::string v69;
  std::string v70;
  std::string v71;
  std::string::size_type v72;
  __int128 v73;
  uint64_t v74;

  CoreML::Result::Result((CoreML::Result *)&v72);
  CoreML::validateInputCount((CoreML *)a2, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)__p);
  v72 = *(_QWORD *)__p;
  if (SHIBYTE(v74) < 0)
    operator delete((void *)v73);
  v73 = *(_OWORD *)&__p[8];
  v74 = v65;
  if (CoreML::Result::good((CoreML::Result *)&v72))
  {
    CoreML::Result::Result((CoreML::Result *)__p);
    v72 = *(_QWORD *)__p;
    if (SHIBYTE(v74) < 0)
      operator delete((void *)v73);
    v73 = *(_OWORD *)&__p[8];
    v74 = v65;
  }
  v6 = CoreML::Result::good((CoreML::Result *)&v72);
  if (!v6)
  {
    *(_QWORD *)a3 = v72;
    *(_OWORD *)(a3 + 8) = v73;
    *(_QWORD *)(a3 + 24) = v74;
    v73 = 0uLL;
    v74 = 0;
    goto LABEL_95;
  }
  if (!*((_DWORD *)a2 + 18) || (v7 = a2[10][1], v8 = *(unsigned int *)(v7 + 16), (int)v8 < 1))
  {
LABEL_13:
    v11 = a2[4][1];
    if (*(char *)(v11 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v71, *(const std::string::value_type **)v11, *(_QWORD *)(v11 + 8));
    }
    else
    {
      v12 = *(_OWORD *)v11;
      v71.__r_.__value_.__r.__words[2] = *(_QWORD *)(v11 + 16);
      *(_OWORD *)&v71.__r_.__value_.__l.__data_ = v12;
    }
    if (*((_DWORD *)a2 + 35) == 605)
      v13 = a2[16];
    else
      v13 = CoreML::Specification::BranchLayerParams::default_instance((CoreML::Specification::BranchLayerParams *)v6);
    v14 = (uint64_t **)((char *)this + 56);
    if ((CoreML::NeuralNetworkSpecValidator *)((char *)this + 64) == (CoreML::NeuralNetworkSpecValidator *)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>((uint64_t)this + 56, (const void **)&v71.__r_.__value_.__l.__data_))
    {
      v30 = a2[14];
      if (*((char *)v30 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v69, (const std::string::value_type *)*v30, v30[1]);
      }
      else
      {
        v31 = *(_OWORD *)v30;
        v69.__r_.__value_.__r.__words[2] = v30[2];
        *(_OWORD *)&v69.__r_.__value_.__l.__data_ = v31;
      }
      v36 = std::string::insert(&v69, 0, "Branch Layer '");
      v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
      v70.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v70.__r_.__value_.__l.__data_ = v37;
      v36->__r_.__value_.__l.__size_ = 0;
      v36->__r_.__value_.__r.__words[2] = 0;
      v36->__r_.__value_.__r.__words[0] = 0;
      v38 = std::string::append(&v70, "' requires the condition blob '");
      v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
      v57.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v39;
      v38->__r_.__value_.__l.__size_ = 0;
      v38->__r_.__value_.__r.__words[2] = 0;
      v38->__r_.__value_.__r.__words[0] = 0;
      if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v40 = &v71;
      else
        v40 = (std::string *)v71.__r_.__value_.__r.__words[0];
      if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v71.__r_.__value_.__r.__words[2]);
      else
        size = v71.__r_.__value_.__l.__size_;
      v42 = std::string::append(&v57, (const std::string::value_type *)v40, size);
      v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
      v59.__r_.__value_.__r.__words[2] = v42->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v43;
      v42->__r_.__value_.__l.__size_ = 0;
      v42->__r_.__value_.__r.__words[2] = 0;
      v42->__r_.__value_.__r.__words[0] = 0;
      v44 = std::string::append(&v59, "' which is not present in the network prior to this layer.");
      v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
      *(_QWORD *)&__p[16] = *((_QWORD *)&v44->__r_.__value_.__l + 2);
      *(_OWORD *)__p = v45;
      v44->__r_.__value_.__l.__size_ = 0;
      v44->__r_.__value_.__r.__words[2] = 0;
      v44->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v59.__r_.__value_.__l.__data_);
      if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v57.__r_.__value_.__l.__data_);
      if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v70.__r_.__value_.__l.__data_);
      if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v69.__r_.__value_.__l.__data_);
    }
    else
    {
      if (v13[2])
        v15 = (uint64_t *)v13[2];
      else
        v15 = &CoreML::Specification::_NeuralNetwork_default_instance_;
      if (v13[3])
        v16 = (uint64_t *)v13[3];
      else
        v16 = &CoreML::Specification::_NeuralNetwork_default_instance_;
      if (*((_DWORD *)v15 + 6))
      {
        v17 = *((_DWORD *)v16 + 6);
        CoreML::NeuralNetworkSpecValidator::NeuralNetworkSpecValidator(__p, (char *)this + 56, (char *)this + 8, *(unsigned __int8 *)this, *((unsigned int *)this + 20), (char *)this + 32);
        CoreML::NeuralNetworkSpecValidator::validateNeuralNetwork<CoreML::Specification::NeuralNetworkClassifier>(&v59, __p, v15);
        v72 = v59.__r_.__value_.__r.__words[0];
        if (SHIBYTE(v74) < 0)
          operator delete((void *)v73);
        v73 = *(_OWORD *)&v59.__r_.__value_.__r.__words[1];
        v74 = v60;
        v18 = CoreML::Result::good((CoreML::Result *)&v72);
        if (v17 <= 0 || !v18)
          goto LABEL_76;
        CoreML::NeuralNetworkSpecValidator::NeuralNetworkSpecValidator(&v59, (char *)this + 56, (char *)this + 8, *(unsigned __int8 *)this, *((unsigned int *)this + 20), (char *)this + 32);
        CoreML::NeuralNetworkSpecValidator::validateNeuralNetwork<CoreML::Specification::NeuralNetworkClassifier>(&v57, &v59, v16);
        v72 = v57.__r_.__value_.__r.__words[0];
        if (SHIBYTE(v74) < 0)
          operator delete((void *)v73);
        v73 = *(_OWORD *)&v57.__r_.__value_.__r.__words[1];
        v74 = v58;
        v56 = a3;
        v55 = CoreML::Result::good((CoreML::Result *)&v72);
        if (v55)
        {
          v20 = v67;
          if (v67 != (uint64_t *)v68)
          {
            do
            {
              if (*((char *)v20 + 55) < 0)
                std::string::__init_copy_ctor_external(&v57, (const std::string::value_type *)v20[4], v20[5]);
              else
                v57 = *(std::string *)(v20 + 4);
              if (&v63 != (_QWORD **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>((uint64_t)&v62, (const void **)&v57.__r_.__value_.__l.__data_))
              {
                v70.__r_.__value_.__r.__words[0] = (std::string::size_type)&v57;
                v21 = std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v14, (const void **)&v57.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&v70);
                v70.__r_.__value_.__r.__words[0] = (std::string::size_type)&v57;
                v22 = (const void **)std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v67, (const void **)&v57.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&v70)[7];
                v70.__r_.__value_.__r.__words[0] = (std::string::size_type)&v57;
                v23 = std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v67, (const void **)&v57.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&v70);
                std::set<std::string>::insert[abi:ne180100]<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>(v21 + 7, v22, (const void ***)v23 + 8);
                v70.__r_.__value_.__r.__words[0] = (std::string::size_type)&v57;
                v24 = std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v14, (const void **)&v57.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&v70);
                v70.__r_.__value_.__r.__words[0] = (std::string::size_type)&v57;
                v25 = (const void **)std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v62, (const void **)&v57.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&v70)[7];
                v70.__r_.__value_.__r.__words[0] = (std::string::size_type)&v57;
                v26 = std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v62, (const void **)&v57.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&v70);
                std::set<std::string>::insert[abi:ne180100]<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>(v24 + 7, v25, (const void ***)v26 + 8);
              }
              if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v57.__r_.__value_.__l.__data_);
              v27 = (uint64_t *)v20[1];
              if (v27)
              {
                do
                {
                  v28 = v27;
                  v27 = (uint64_t *)*v27;
                }
                while (v27);
              }
              else
              {
                do
                {
                  v28 = (uint64_t *)v20[2];
                  v29 = *v28 == (_QWORD)v20;
                  v20 = v28;
                }
                while (!v29);
              }
              v20 = v28;
            }
            while (v28 != (uint64_t *)v68);
          }
        }
        else
        {
          *(_QWORD *)a3 = v72;
          *(_OWORD *)(a3 + 8) = v73;
          *(_QWORD *)(a3 + 24) = v74;
          v73 = 0uLL;
          v74 = 0;
        }
        std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::destroy((uint64_t)&v62, v63);
        std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)v61, v61[1]);
        std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)&v59.__r_.__value_.__l.__size_, (char *)v59.__r_.__value_.__r.__words[2]);
        a3 = v56;
        if (v55)
        {
LABEL_76:
          *(_QWORD *)a3 = v72;
          *(_OWORD *)(a3 + 8) = v73;
          *(_QWORD *)(a3 + 24) = v74;
          v73 = 0uLL;
          v74 = 0;
        }
        std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::destroy((uint64_t)&v67, v68[0]);
        std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)v66, v66[1]);
        std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)&__p[8], *(char **)&__p[16]);
LABEL_92:
        if ((SHIBYTE(v71.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_95;
        v50 = (void *)v71.__r_.__value_.__r.__words[0];
        goto LABEL_94;
      }
      v34 = a2[14];
      if (*((char *)v34 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v57, (const std::string::value_type *)*v34, v34[1]);
      }
      else
      {
        v35 = *(_OWORD *)v34;
        v57.__r_.__value_.__r.__words[2] = v34[2];
        *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v35;
      }
      v51 = std::string::insert(&v57, 0, "Branch Layer '");
      v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
      v59.__r_.__value_.__r.__words[2] = v51->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v52;
      v51->__r_.__value_.__l.__size_ = 0;
      v51->__r_.__value_.__r.__words[2] = 0;
      v51->__r_.__value_.__r.__words[0] = 0;
      v53 = std::string::append(&v59, "' has an empty If branch");
      v54 = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
      *(_QWORD *)&__p[16] = *((_QWORD *)&v53->__r_.__value_.__l + 2);
      *(_OWORD *)__p = v54;
      v53->__r_.__value_.__l.__size_ = 0;
      v53->__r_.__value_.__r.__words[2] = 0;
      v53->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v59.__r_.__value_.__l.__data_);
      if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v57.__r_.__value_.__l.__data_);
    }
    CoreML::Result::Result((_DWORD *)a3, 13);
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    goto LABEL_92;
  }
  v9 = (uint64_t *)(*(_QWORD *)(v7 + 24) + 8);
  while (1)
  {
    v10 = *v9++;
    if (v10 >= 2)
      break;
    if (!--v8)
      goto LABEL_13;
  }
  v32 = a2[14];
  if (*((char *)v32 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v57, (const std::string::value_type *)*v32, v32[1]);
  }
  else
  {
    v33 = *(_OWORD *)v32;
    v57.__r_.__value_.__r.__words[2] = v32[2];
    *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v33;
  }
  v46 = std::string::insert(&v57, 0, "Branch Layer '");
  v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
  v59.__r_.__value_.__r.__words[2] = v46->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v47;
  v46->__r_.__value_.__l.__size_ = 0;
  v46->__r_.__value_.__r.__words[2] = 0;
  v46->__r_.__value_.__r.__words[0] = 0;
  v48 = std::string::append(&v59, "' input's length cannot be more than 1");
  v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
  *(_QWORD *)&__p[16] = *((_QWORD *)&v48->__r_.__value_.__l + 2);
  *(_OWORD *)__p = v49;
  v48->__r_.__value_.__l.__size_ = 0;
  v48->__r_.__value_.__r.__words[2] = 0;
  v48->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v59.__r_.__value_.__l.__data_);
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v57.__r_.__value_.__l.__data_);
  CoreML::Result::Result((_DWORD *)a3, 13);
  if ((__p[23] & 0x80000000) != 0)
  {
    v50 = *(void **)__p;
LABEL_94:
    operator delete(v50);
  }
LABEL_95:
  if (SHIBYTE(v74) < 0)
    operator delete((void *)v73);
}

void sub_21834D2F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  uint64_t v40;

  if (*(char *)(v40 - 137) < 0)
    operator delete(*(void **)(v40 - 160));
  if (*(char *)(v40 - 97) < 0)
    operator delete(*(void **)(v40 - 120));
  _Unwind_Resume(exception_object);
}

uint64_t *std::set<std::string>::insert[abi:ne180100]<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>(uint64_t *result, const void **a2, const void ***a3)
{
  const void **v4;
  uint64_t **v5;
  uint64_t *v6;
  const void **v7;
  const void ***v8;
  BOOL v9;

  if (a2 != (const void **)a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = std::__tree<std::string>::__emplace_hint_unique_key_args<std::string,std::string const&>(v5, v6, v4 + 4, (uint64_t)(v4 + 4));
      v7 = (const void **)v4[1];
      if (v7)
      {
        do
        {
          v8 = (const void ***)v7;
          v7 = (const void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (const void ***)v4[2];
          v9 = *v8 == v4;
          v4 = (const void **)v8;
        }
        while (!v9);
      }
      v4 = (const void **)v8;
    }
    while (v8 != a3);
  }
  return result;
}

void CoreML::NeuralNetworkSpecValidator::~NeuralNetworkSpecValidator(CoreML::NeuralNetworkSpecValidator *this)
{
  std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::destroy((uint64_t)this + 56, *((_QWORD **)this + 8));
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)this + 32, *((char **)this + 5));
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)this + 8, *((char **)this + 2));
}

void CoreML::NeuralNetworkSpecValidator::validateTransposeLayer(uint64_t **a1@<X1>, uint64_t a2@<X8>)
{
  _BOOL8 v5;
  uint64_t *v6;
  std::string *v7;
  __int128 v8;
  std::string v9;
  _BYTE v10[24];
  uint64_t v11;
  uint64_t v12;
  __int128 __p;
  uint64_t v14;

  CoreML::Result::Result((CoreML::Result *)&v12);
  CoreML::validateInputCount((CoreML *)a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)v10);
  v12 = *(_QWORD *)v10;
  if (SHIBYTE(v14) < 0)
    operator delete((void *)__p);
  __p = *(_OWORD *)&v10[8];
  v14 = v11;
  v5 = CoreML::Result::good((CoreML::Result *)&v12);
  if (v5)
  {
    CoreML::validateOutputCount((CoreML *)a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)v10);
    v12 = *(_QWORD *)v10;
    if (SHIBYTE(v14) < 0)
      operator delete((void *)__p);
    __p = *(_OWORD *)&v10[8];
    v14 = v11;
  }
  if (*((_DWORD *)a1 + 35) == 985)
    v6 = a1[16];
  else
    v6 = CoreML::Specification::TransposeLayerParams::default_instance((CoreML::Specification::TransposeLayerParams *)v5);
  if (*((_DWORD *)v6 + 4))
  {
    *(_QWORD *)a2 = v12;
    *(_OWORD *)(a2 + 8) = __p;
    *(_QWORD *)(a2 + 24) = v14;
  }
  else
  {
    std::operator+<char>();
    v7 = std::string::append(&v9, "' layer.");
    v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    *(_QWORD *)&v10[16] = *((_QWORD *)&v7->__r_.__value_.__l + 2);
    *(_OWORD *)v10 = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v9.__r_.__value_.__l.__data_);
    CoreML::Result::Result((_DWORD *)a2, 13);
    if ((v10[23] & 0x80000000) != 0)
      operator delete(*(void **)v10);
    if (SHIBYTE(v14) < 0)
      operator delete((void *)__p);
  }
}

void sub_21834D6B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a21 < 0)
    operator delete(__p);
  if (a29 < 0)
    operator delete(a24);
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateCopyLayer(const CoreML::Specification::NeuralNetworkLayer *a1@<X1>, uint64_t a2@<X8>)
{
  unsigned __int8 *v5;
  unsigned __int8 **v6;
  uint64_t v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  int v10;
  unsigned __int8 *v11;
  std::string *v12;
  __int128 v13;
  std::string v14;
  _BYTE v15[24];
  uint64_t v16;
  uint64_t v17;
  __int128 __p;
  uint64_t v19;

  CoreML::Result::Result((CoreML::Result *)&v17);
  CoreML::validateInputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)v15);
  v17 = *(_QWORD *)v15;
  if (SHIBYTE(v19) < 0)
    operator delete((void *)__p);
  __p = *(_OWORD *)&v15[8];
  v19 = v16;
  if (CoreML::Result::good((CoreML::Result *)&v17))
  {
    CoreML::validateOutputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)v15);
    v17 = *(_QWORD *)v15;
    if (SHIBYTE(v19) < 0)
      operator delete((void *)__p);
    __p = *(_OWORD *)&v15[8];
    v19 = v16;
  }
  v5 = *(unsigned __int8 **)(*((_QWORD *)a1 + 4) + 8);
  v6 = *(unsigned __int8 ***)(*((_QWORD *)a1 + 7) + 8);
  v7 = v5[23];
  if ((v7 & 0x80u) == 0)
    v8 = (unsigned __int8 *)v5[23];
  else
    v8 = (unsigned __int8 *)*((_QWORD *)v5 + 1);
  v9 = (unsigned __int8 *)*((unsigned __int8 *)v6 + 23);
  v10 = (char)v9;
  if ((char)v9 < 0)
    v9 = v6[1];
  if (v8 != v9)
    goto LABEL_22;
  if (v10 >= 0)
    v11 = *(unsigned __int8 **)(*((_QWORD *)a1 + 7) + 8);
  else
    v11 = *v6;
  if ((v7 & 0x80) != 0)
  {
    if (!memcmp(*(const void **)v5, v11, *((_QWORD *)v5 + 1)))
      goto LABEL_24;
LABEL_22:
    *(_QWORD *)a2 = v17;
    *(_OWORD *)(a2 + 8) = __p;
    *(_QWORD *)(a2 + 24) = v19;
    return;
  }
  if (v5[23])
  {
    while (*v5 == *v11)
    {
      ++v5;
      ++v11;
      if (!--v7)
        goto LABEL_24;
    }
    goto LABEL_22;
  }
LABEL_24:
  std::operator+<char>();
  v12 = std::string::append(&v14, "' has identical input and output names.");
  v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  *(_QWORD *)&v15[16] = *((_QWORD *)&v12->__r_.__value_.__l + 2);
  *(_OWORD *)v15 = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  CoreML::Result::Result((_DWORD *)a2, 13);
  if ((v15[23] & 0x80000000) != 0)
    operator delete(*(void **)v15);
  if (SHIBYTE(v19) < 0)
    operator delete((void *)__p);
}

void sub_21834D8F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a21 < 0)
    operator delete(__p);
  if (a29 < 0)
    operator delete(a24);
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateBatchedMatmulLayer(const CoreML::Specification::NeuralNetworkLayer *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t *v5;
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  std::string *v11;
  __int128 v12;
  std::string *v13;
  __int128 v14;
  std::string *v15;
  __int128 v16;
  std::string *v17;
  __int128 v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;
  const CoreML::Specification::WeightParams *v24;
  const CoreML::Specification::WeightParams *v25;
  std::string v26;
  _BYTE v27[24];
  uint64_t v28;
  uint64_t v29;
  __int128 __p;
  uint64_t v31;

  CoreML::Result::Result((CoreML::Result *)&v29);
  CoreML::validateInputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 2, (CoreML::Result *)v27);
  v29 = *(_QWORD *)v27;
  if (SHIBYTE(v31) < 0)
    operator delete((void *)__p);
  __p = *(_OWORD *)&v27[8];
  v31 = v28;
  v5 = (uint64_t *)CoreML::Result::good((CoreML::Result *)&v29);
  if ((_DWORD)v5)
  {
    CoreML::validateOutputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)v27);
    v29 = *(_QWORD *)v27;
    if (SHIBYTE(v31) < 0)
      operator delete((void *)__p);
    __p = *(_OWORD *)&v27[8];
    v31 = v28;
    v5 = (uint64_t *)CoreML::Result::good((CoreML::Result *)&v29);
    if ((v5 & 1) == 0)
      goto LABEL_70;
  }
  v6 = *((_DWORD *)a1 + 6);
  v7 = *((_DWORD *)a1 + 18);
  if (v6 != 2)
  {
    if (v6 == 1 && v7 == 1 && *((_DWORD *)a1 + 24) == 1)
    {
      if (*(_DWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 13) + 8) + 36) != *(_DWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 10)
                                                                                                + 8)
                                                                                    + 36))
      {
        std::operator+<char>();
        v13 = std::string::append(&v26, "': has one input, in this case, output and input ranks must be equal but they are not.");
        v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
        *(_QWORD *)&v27[16] = *((_QWORD *)&v13->__r_.__value_.__l + 2);
        *(_OWORD *)v27 = v14;
        v13->__r_.__value_.__l.__size_ = 0;
        v13->__r_.__value_.__r.__words[2] = 0;
        v13->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v26.__r_.__value_.__l.__data_);
        goto LABEL_32;
      }
    }
    else if (v6 >= 2)
    {
LABEL_26:
      if (*((_DWORD *)a1 + 35) == 1045)
        v5 = (uint64_t *)*((_QWORD *)a1 + 16);
      else
        v5 = CoreML::Specification::BatchedMatMulLayerParams::default_instance((CoreML::Specification::BatchedMatMulLayerParams *)v5);
      if (*((_BYTE *)v5 + 50))
      {
        std::operator+<char>();
        v15 = std::string::append(&v26, "': has two inputs and 'hasBias' flag is set to True.However, bias is only supported when the layer has 1 input.");
        v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
        *(_QWORD *)&v27[16] = *((_QWORD *)&v15->__r_.__value_.__l + 2);
        *(_OWORD *)v27 = v16;
        v15->__r_.__value_.__l.__size_ = 0;
        v15->__r_.__value_.__r.__words[2] = 0;
        v15->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v26.__r_.__value_.__l.__data_);
        goto LABEL_32;
      }
      if (*((int *)a1 + 6) >= 2)
      {
        v5 = *((_DWORD *)a1 + 35) == 1045
           ? (uint64_t *)*((_QWORD *)a1 + 16)
           : CoreML::Specification::BatchedMatMulLayerParams::default_instance((CoreML::Specification::BatchedMatMulLayerParams *)v5);
        if (*((_BYTE *)v5 + 51))
        {
          std::operator+<char>();
          v17 = std::string::append(&v26, "': cannot use dynamic quantization with 2 inputs.");
          v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
          *(_QWORD *)&v27[16] = *((_QWORD *)&v17->__r_.__value_.__l + 2);
          *(_OWORD *)v27 = v18;
          v17->__r_.__value_.__l.__size_ = 0;
          v17->__r_.__value_.__r.__words[2] = 0;
          v17->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v26.__r_.__value_.__l.__data_);
          goto LABEL_32;
        }
      }
    }
    if (*((_DWORD *)a1 + 35) == 1045)
      v19 = (uint64_t *)*((_QWORD *)a1 + 16);
    else
      v19 = CoreML::Specification::BatchedMatMulLayerParams::default_instance((CoreML::Specification::BatchedMatMulLayerParams *)v5);
    if (!*((_BYTE *)v19 + 51))
      goto LABEL_57;
    if (*((_DWORD *)a1 + 35) == 1045)
      v20 = (uint64_t *)*((_QWORD *)a1 + 16);
    else
      v20 = CoreML::Specification::BatchedMatMulLayerParams::default_instance((CoreML::Specification::BatchedMatMulLayerParams *)v19);
    v21 = (uint64_t *)v20[2];
    std::string::basic_string[abi:ne180100]<0>(&v26, "BatchedMatMul");
    if (v21)
      v22 = v21;
    else
      v22 = &CoreML::Specification::_WeightParams_default_instance_;
    CoreML::validateInt8Requirements((uint64_t)v22, (uint64_t)&v26, (CoreML::Result *)v27);
    v29 = *(_QWORD *)v27;
    if (SHIBYTE(v31) < 0)
      operator delete((void *)__p);
    __p = *(_OWORD *)&v27[8];
    v31 = v28;
    HIBYTE(v28) = 0;
    v27[8] = 0;
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v26.__r_.__value_.__l.__data_);
    v19 = (uint64_t *)CoreML::Result::good((CoreML::Result *)&v29);
    if ((v19 & 1) != 0)
    {
LABEL_57:
      if (*((_DWORD *)a1 + 6) == 1)
      {
        if (*((_DWORD *)a1 + 35) == 1045)
          v23 = (uint64_t *)*((_QWORD *)a1 + 16);
        else
          v23 = CoreML::Specification::BatchedMatMulLayerParams::default_instance((CoreML::Specification::BatchedMatMulLayerParams *)v19);
        if (v23[2])
          v24 = (const CoreML::Specification::WeightParams *)v23[2];
        else
          v24 = (const CoreML::Specification::WeightParams *)&CoreML::Specification::_WeightParams_default_instance_;
        if (v23[3])
          v25 = (const CoreML::Specification::WeightParams *)v23[3];
        else
          v25 = (const CoreML::Specification::WeightParams *)&CoreML::Specification::_WeightParams_default_instance_;
        validateInnerProductWeightsBias(a1, v24, v25, (uint64_t)v27);
        v29 = *(_QWORD *)v27;
        if (SHIBYTE(v31) < 0)
          operator delete((void *)__p);
        __p = *(_OWORD *)&v27[8];
        v31 = v28;
      }
    }
LABEL_70:
    *(_QWORD *)a2 = v29;
    *(_OWORD *)(a2 + 8) = __p;
    *(_QWORD *)(a2 + 24) = v31;
    __p = 0uLL;
    v31 = 0;
    goto LABEL_71;
  }
  if (v7 != 2 || *((_DWORD *)a1 + 24) != 1)
    goto LABEL_26;
  v8 = *((_QWORD *)a1 + 10);
  v9 = *(_DWORD *)(*(_QWORD *)(v8 + 8) + 36);
  v10 = *(_DWORD *)(*(_QWORD *)(v8 + 16) + 36);
  if (v9 > v10)
    v10 = v9;
  if (v10 <= 2)
    v10 = 2;
  if (*(_DWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 13) + 8) + 36) == v10)
    goto LABEL_26;
  std::operator+<char>();
  v11 = std::string::append(&v26, "': given ranks of the two inputs, rank of the output is incorrect.");
  v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  *(_QWORD *)&v27[16] = *((_QWORD *)&v11->__r_.__value_.__l + 2);
  *(_OWORD *)v27 = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
LABEL_32:
  CoreML::Result::Result((_DWORD *)a2, 13);
  if ((v27[23] & 0x80000000) != 0)
    operator delete(*(void **)v27);
LABEL_71:
  if (SHIBYTE(v31) < 0)
    operator delete((void *)__p);
}

void sub_21834DDEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a21 < 0)
    operator delete(__p);
  if (a29 < 0)
    operator delete(a24);
  _Unwind_Resume(exception_object);
}

__n128 CoreML::NeuralNetworkSpecValidator::validateConcatNDLayer@<Q0>(uint64_t **a1@<X1>, uint64_t a2@<X8>)
{
  _BOOL8 v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  std::string *v10;
  __int128 v11;
  __n128 result;
  std::string v13;
  _BYTE v14[24];
  uint64_t v15;
  uint64_t v16;
  __n128 __p;
  uint64_t v18;

  CoreML::Result::Result((CoreML::Result *)&v16);
  CoreML::validateInputCount((CoreML *)a1, (const CoreML::Specification::NeuralNetworkLayer *)2, -1, (CoreML::Result *)v14);
  v16 = *(_QWORD *)v14;
  if (SHIBYTE(v18) < 0)
    operator delete((void *)__p.n128_u64[0]);
  __p = *(__n128 *)&v14[8];
  v18 = v15;
  v5 = CoreML::Result::good((CoreML::Result *)&v16);
  if (v5)
  {
    CoreML::validateOutputCount((CoreML *)a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)v14);
    v16 = *(_QWORD *)v14;
    if (SHIBYTE(v18) < 0)
      operator delete((void *)__p.n128_u64[0]);
    __p = *(__n128 *)&v14[8];
    v18 = v15;
  }
  if (*((_DWORD *)a1 + 35) == 980)
    v6 = a1[16];
  else
    v6 = CoreML::Specification::ConcatNDLayerParams::default_instance((CoreML::Specification::ConcatNDLayerParams *)v5);
  if (*((int *)a1 + 18) < 1 || ((v7 = *(int *)(a1[10][1] + 36), v8 = v6[2], v8 >= -v7) ? (v9 = v8 < v7) : (v9 = 0), v9))
  {
    *(_QWORD *)a2 = v16;
    result = __p;
    *(__n128 *)(a2 + 8) = __p;
    *(_QWORD *)(a2 + 24) = v18;
  }
  else
  {
    std::operator+<char>();
    v10 = std::string::append(&v13, "' layer.");
    v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    *(_QWORD *)&v14[16] = *((_QWORD *)&v10->__r_.__value_.__l + 2);
    *(_OWORD *)v14 = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v13.__r_.__value_.__l.__data_);
    CoreML::Result::Result((_DWORD *)a2, 13);
    if ((v14[23] & 0x80000000) != 0)
      operator delete(*(void **)v14);
    if (SHIBYTE(v18) < 0)
      operator delete((void *)__p.n128_u64[0]);
  }
  return result;
}

void sub_21834E018(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a21 < 0)
    operator delete(__p);
  if (a29 < 0)
    operator delete(a24);
  _Unwind_Resume(exception_object);
}

__n128 CoreML::NeuralNetworkSpecValidator::validateSoftmaxNDLayer@<Q0>(uint64_t **a1@<X1>, uint64_t a2@<X8>)
{
  _BOOL8 v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  std::string *v10;
  __int128 v11;
  __n128 result;
  std::string v13;
  _BYTE v14[24];
  uint64_t v15;
  uint64_t v16;
  __n128 __p;
  uint64_t v18;

  CoreML::Result::Result((CoreML::Result *)&v16);
  CoreML::validateInputCount((CoreML *)a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)v14);
  v16 = *(_QWORD *)v14;
  if (SHIBYTE(v18) < 0)
    operator delete((void *)__p.n128_u64[0]);
  __p = *(__n128 *)&v14[8];
  v18 = v15;
  v5 = CoreML::Result::good((CoreML::Result *)&v16);
  if (v5)
  {
    CoreML::validateOutputCount((CoreML *)a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)v14);
    v16 = *(_QWORD *)v14;
    if (SHIBYTE(v18) < 0)
      operator delete((void *)__p.n128_u64[0]);
    __p = *(__n128 *)&v14[8];
    v18 = v15;
  }
  if (*((_DWORD *)a1 + 35) == 950)
    v6 = a1[16];
  else
    v6 = CoreML::Specification::SoftmaxNDLayerParams::default_instance((CoreML::Specification::SoftmaxNDLayerParams *)v5);
  if (*((int *)a1 + 18) < 1 || ((v7 = *(int *)(a1[10][1] + 36), v8 = v6[2], v8 >= -v7) ? (v9 = v8 < v7) : (v9 = 0), v9))
  {
    *(_QWORD *)a2 = v16;
    result = __p;
    *(__n128 *)(a2 + 8) = __p;
    *(_QWORD *)(a2 + 24) = v18;
  }
  else
  {
    std::operator+<char>();
    v10 = std::string::append(&v13, "' layer.");
    v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    *(_QWORD *)&v14[16] = *((_QWORD *)&v10->__r_.__value_.__l + 2);
    *(_OWORD *)v14 = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v13.__r_.__value_.__l.__data_);
    CoreML::Result::Result((_DWORD *)a2, 13);
    if ((v14[23] & 0x80000000) != 0)
      operator delete(*(void **)v14);
    if (SHIBYTE(v18) < 0)
      operator delete((void *)__p.n128_u64[0]);
  }
  return result;
}

void sub_21834E210(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a21 < 0)
    operator delete(__p);
  if (a29 < 0)
    operator delete(a24);
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateReverseLayer(uint64_t **a1@<X1>, uint64_t a2@<X8>)
{
  _BOOL8 v5;
  uint64_t *v6;
  std::string *v7;
  __int128 v8;
  std::string v9;
  _BYTE v10[24];
  uint64_t v11;
  uint64_t v12;
  __int128 __p;
  uint64_t v14;

  CoreML::Result::Result((CoreML::Result *)&v12);
  CoreML::validateInputCount((CoreML *)a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)v10);
  v12 = *(_QWORD *)v10;
  if (SHIBYTE(v14) < 0)
    operator delete((void *)__p);
  __p = *(_OWORD *)&v10[8];
  v14 = v11;
  v5 = CoreML::Result::good((CoreML::Result *)&v12);
  if (v5)
  {
    CoreML::validateOutputCount((CoreML *)a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)v10);
    v12 = *(_QWORD *)v10;
    if (SHIBYTE(v14) < 0)
      operator delete((void *)__p);
    __p = *(_OWORD *)&v10[8];
    v14 = v11;
  }
  if (*((_DWORD *)a1 + 35) == 960)
    v6 = a1[16];
  else
    v6 = CoreML::Specification::ReverseLayerParams::default_instance((CoreML::Specification::ReverseLayerParams *)v5);
  if (*((int *)a1 + 18) < 1 || *((_DWORD *)v6 + 4) == *(_DWORD *)(a1[10][1] + 36))
  {
    *(_QWORD *)a2 = v12;
    *(_OWORD *)(a2 + 8) = __p;
    *(_QWORD *)(a2 + 24) = v14;
  }
  else
  {
    std::operator+<char>();
    v7 = std::string::append(&v9, "' layer.");
    v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    *(_QWORD *)&v10[16] = *((_QWORD *)&v7->__r_.__value_.__l + 2);
    *(_OWORD *)v10 = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v9.__r_.__value_.__l.__data_);
    CoreML::Result::Result((_DWORD *)a2, 13);
    if ((v10[23] & 0x80000000) != 0)
      operator delete(*(void **)v10);
    if (SHIBYTE(v14) < 0)
      operator delete((void *)__p);
  }
}

void sub_21834E400(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a21 < 0)
    operator delete(__p);
  if (a29 < 0)
    operator delete(a24);
  _Unwind_Resume(exception_object);
}

double CoreML::NeuralNetworkSpecValidator::validateBooleanElementwiseLayer@<D0>(const CoreML::Specification::NeuralNetworkLayer *a1@<X1>, uint64_t a2@<X8>)
{
  int v5;
  void **v6;
  double result;
  void **v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;

  CoreML::Result::Result((CoreML::Result *)a2);
  v5 = *((_DWORD *)a1 + 35);
  if (v5 > 849)
  {
    if (v5 != 855)
    {
      if (v5 == 850)
      {
        CoreML::validateInputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v9);
        goto LABEL_10;
      }
      goto LABEL_9;
    }
LABEL_8:
    CoreML::validateInputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)2, 2, (CoreML::Result *)&v9);
    goto LABEL_10;
  }
  if (v5 == 840 || v5 == 845)
    goto LABEL_8;
LABEL_9:
  CoreML::validateInputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 2, (CoreML::Result *)&v9);
LABEL_10:
  *(_QWORD *)a2 = v9;
  v6 = (void **)(a2 + 8);
  if (*(char *)(a2 + 31) < 0)
    operator delete(*v6);
  *(_OWORD *)v6 = v10;
  *(_QWORD *)(a2 + 24) = v11;
  if (CoreML::Result::good((CoreML::Result *)a2))
  {
    CoreML::validateOutputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v9);
    *(_QWORD *)a2 = v9;
    v8 = (void **)(a2 + 8);
    if (*(char *)(a2 + 31) < 0)
      operator delete(*v8);
    result = *(double *)&v10;
    *(_OWORD *)v8 = v10;
    *(_QWORD *)(a2 + 24) = v11;
  }
  return result;
}

void sub_21834E57C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*(void **)(v1 + 8));
  _Unwind_Resume(exception_object);
}

double CoreML::NeuralNetworkSpecValidator::validateFillLikeLayer@<D0>(const CoreML::Specification::NeuralNetworkLayer *a1@<X1>, uint64_t a2@<X8>)
{
  void **v5;
  double result;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;

  CoreML::Result::Result((CoreML::Result *)a2);
  CoreML::validateInputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v7);
  *(_QWORD *)a2 = v7;
  v5 = (void **)(a2 + 8);
  if (*(char *)(a2 + 31) < 0)
    operator delete(*v5);
  *(_OWORD *)v5 = v8;
  *(_QWORD *)(a2 + 24) = v9;
  if (CoreML::Result::good((CoreML::Result *)a2))
  {
    CoreML::validateOutputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v7);
    *(_QWORD *)a2 = v7;
    if (*(char *)(a2 + 31) < 0)
      operator delete(*v5);
    result = *(double *)&v8;
    *(_OWORD *)v5 = v8;
    *(_QWORD *)(a2 + 24) = v9;
  }
  return result;
}

void sub_21834E668(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*(void **)(v1 + 8));
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateFillStaticLayer(uint64_t **a1@<X1>, uint64_t a2@<X8>)
{
  _BOOL8 v5;
  uint64_t *v6;
  std::string *v7;
  __int128 v8;
  std::string v9;
  _BYTE v10[24];
  uint64_t v11;
  uint64_t v12;
  __int128 __p;
  uint64_t v14;

  CoreML::Result::Result((CoreML::Result *)&v12);
  CoreML::Result::Result((CoreML::Result *)v10);
  v12 = *(_QWORD *)v10;
  if (SHIBYTE(v14) < 0)
    operator delete((void *)__p);
  __p = *(_OWORD *)&v10[8];
  v14 = v11;
  v5 = CoreML::Result::good((CoreML::Result *)&v12);
  if (v5)
  {
    CoreML::validateOutputCount((CoreML *)a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)v10);
    v12 = *(_QWORD *)v10;
    if (SHIBYTE(v14) < 0)
      operator delete((void *)__p);
    __p = *(_OWORD *)&v10[8];
    v14 = v11;
  }
  if (*((_DWORD *)a1 + 35) == 1085)
    v6 = a1[16];
  else
    v6 = CoreML::Specification::FillStaticLayerParams::default_instance((CoreML::Specification::FillStaticLayerParams *)v5);
  if (*((_DWORD *)v6 + 4))
  {
    *(_QWORD *)a2 = v12;
    *(_OWORD *)(a2 + 8) = __p;
    *(_QWORD *)(a2 + 24) = v14;
  }
  else
  {
    std::operator+<char>();
    v7 = std::string::append(&v9, "' layer.");
    v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    *(_QWORD *)&v10[16] = *((_QWORD *)&v7->__r_.__value_.__l + 2);
    *(_OWORD *)v10 = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v9.__r_.__value_.__l.__data_);
    CoreML::Result::Result((_DWORD *)a2, 13);
    if ((v10[23] & 0x80000000) != 0)
      operator delete(*(void **)v10);
    if (SHIBYTE(v14) < 0)
      operator delete((void *)__p);
  }
}

void sub_21834E7FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a21 < 0)
    operator delete(__p);
  if (a29 < 0)
    operator delete(a24);
  _Unwind_Resume(exception_object);
}

double CoreML::NeuralNetworkSpecValidator::validateFillDynamicLayer@<D0>(const CoreML::Specification::NeuralNetworkLayer *a1@<X1>, uint64_t a2@<X8>)
{
  void **v5;
  double result;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;

  CoreML::Result::Result((CoreML::Result *)a2);
  CoreML::validateInputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v7);
  *(_QWORD *)a2 = v7;
  v5 = (void **)(a2 + 8);
  if (*(char *)(a2 + 31) < 0)
    operator delete(*v5);
  *(_OWORD *)v5 = v8;
  *(_QWORD *)(a2 + 24) = v9;
  if (CoreML::Result::good((CoreML::Result *)a2))
  {
    CoreML::validateOutputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v7);
    *(_QWORD *)a2 = v7;
    if (*(char *)(a2 + 31) < 0)
      operator delete(*v5);
    result = *(double *)&v8;
    *(_OWORD *)v5 = v8;
    *(_QWORD *)(a2 + 24) = v9;
  }
  return result;
}

void sub_21834E914(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*(void **)(v1 + 8));
  _Unwind_Resume(exception_object);
}

double CoreML::NeuralNetworkSpecValidator::validateReshapeLikeLayer@<D0>(const CoreML::Specification::NeuralNetworkLayer *a1@<X1>, uint64_t a2@<X8>)
{
  void **v5;
  double result;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;

  CoreML::Result::Result((CoreML::Result *)a2);
  CoreML::validateInputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)2, 2, (CoreML::Result *)&v7);
  *(_QWORD *)a2 = v7;
  v5 = (void **)(a2 + 8);
  if (*(char *)(a2 + 31) < 0)
    operator delete(*v5);
  *(_OWORD *)v5 = v8;
  *(_QWORD *)(a2 + 24) = v9;
  if (CoreML::Result::good((CoreML::Result *)a2))
  {
    CoreML::validateOutputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v7);
    *(_QWORD *)a2 = v7;
    if (*(char *)(a2 + 31) < 0)
      operator delete(*v5);
    result = *(double *)&v8;
    *(_OWORD *)v5 = v8;
    *(_QWORD *)(a2 + 24) = v9;
  }
  return result;
}

void sub_21834E9F8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*(void **)(v1 + 8));
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateReshapeStaticLayer(uint64_t **a1@<X1>, uint64_t a2@<X8>)
{
  _BOOL8 v5;
  uint64_t *v6;
  std::string *v7;
  __int128 v8;
  std::string v9;
  _BYTE v10[24];
  uint64_t v11;
  uint64_t v12;
  __int128 __p;
  uint64_t v14;

  CoreML::Result::Result((CoreML::Result *)&v12);
  CoreML::validateInputCount((CoreML *)a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)v10);
  v12 = *(_QWORD *)v10;
  if (SHIBYTE(v14) < 0)
    operator delete((void *)__p);
  __p = *(_OWORD *)&v10[8];
  v14 = v11;
  v5 = CoreML::Result::good((CoreML::Result *)&v12);
  if (v5)
  {
    CoreML::validateOutputCount((CoreML *)a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)v10);
    v12 = *(_QWORD *)v10;
    if (SHIBYTE(v14) < 0)
      operator delete((void *)__p);
    __p = *(_OWORD *)&v10[8];
    v14 = v11;
  }
  if (*((_DWORD *)a1 + 35) == 1140)
    v6 = a1[16];
  else
    v6 = CoreML::Specification::ReshapeStaticLayerParams::default_instance((CoreML::Specification::ReshapeStaticLayerParams *)v5);
  if (*((_DWORD *)v6 + 4))
  {
    *(_QWORD *)a2 = v12;
    *(_OWORD *)(a2 + 8) = __p;
    *(_QWORD *)(a2 + 24) = v14;
  }
  else
  {
    std::operator+<char>();
    v7 = std::string::append(&v9, "' layer.");
    v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    *(_QWORD *)&v10[16] = *((_QWORD *)&v7->__r_.__value_.__l + 2);
    *(_OWORD *)v10 = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v9.__r_.__value_.__l.__data_);
    CoreML::Result::Result((_DWORD *)a2, 13);
    if ((v10[23] & 0x80000000) != 0)
      operator delete(*(void **)v10);
    if (SHIBYTE(v14) < 0)
      operator delete((void *)__p);
  }
}

void sub_21834EB98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a21 < 0)
    operator delete(__p);
  if (a29 < 0)
    operator delete(a24);
  _Unwind_Resume(exception_object);
}

double CoreML::NeuralNetworkSpecValidator::validateReshapeDynamicLayer@<D0>(const CoreML::Specification::NeuralNetworkLayer *a1@<X1>, uint64_t a2@<X8>)
{
  void **v5;
  double result;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;

  CoreML::Result::Result((CoreML::Result *)a2);
  CoreML::validateInputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)2, 2, (CoreML::Result *)&v7);
  *(_QWORD *)a2 = v7;
  v5 = (void **)(a2 + 8);
  if (*(char *)(a2 + 31) < 0)
    operator delete(*v5);
  *(_OWORD *)v5 = v8;
  *(_QWORD *)(a2 + 24) = v9;
  if (CoreML::Result::good((CoreML::Result *)a2))
  {
    CoreML::validateOutputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v7);
    *(_QWORD *)a2 = v7;
    if (*(char *)(a2 + 31) < 0)
      operator delete(*v5);
    result = *(double *)&v8;
    *(_OWORD *)v5 = v8;
    *(_QWORD *)(a2 + 24) = v9;
  }
  return result;
}

void sub_21834ECB0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*(void **)(v1 + 8));
  _Unwind_Resume(exception_object);
}

double CoreML::NeuralNetworkSpecValidator::validateWhereLayer@<D0>(const CoreML::Specification::NeuralNetworkLayer *a1@<X1>, uint64_t a2@<X8>)
{
  void **v5;
  double result;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;

  CoreML::Result::Result((CoreML::Result *)a2);
  CoreML::validateInputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)3, 3, (CoreML::Result *)&v7);
  *(_QWORD *)a2 = v7;
  v5 = (void **)(a2 + 8);
  if (*(char *)(a2 + 31) < 0)
    operator delete(*v5);
  *(_OWORD *)v5 = v8;
  *(_QWORD *)(a2 + 24) = v9;
  if (CoreML::Result::good((CoreML::Result *)a2))
  {
    CoreML::validateOutputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v7);
    *(_QWORD *)a2 = v7;
    if (*(char *)(a2 + 31) < 0)
      operator delete(*v5);
    result = *(double *)&v8;
    *(_OWORD *)v5 = v8;
    *(_QWORD *)(a2 + 24) = v9;
  }
  return result;
}

void sub_21834ED94(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*(void **)(v1 + 8));
  _Unwind_Resume(exception_object);
}

double CoreML::NeuralNetworkSpecValidator::validateTrigonometryLayer@<D0>(const CoreML::Specification::NeuralNetworkLayer *a1@<X1>, uint64_t a2@<X8>)
{
  void **v5;
  double result;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;

  CoreML::Result::Result((CoreML::Result *)a2);
  CoreML::validateInputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v7);
  *(_QWORD *)a2 = v7;
  v5 = (void **)(a2 + 8);
  if (*(char *)(a2 + 31) < 0)
    operator delete(*v5);
  *(_OWORD *)v5 = v8;
  *(_QWORD *)(a2 + 24) = v9;
  if (CoreML::Result::good((CoreML::Result *)a2))
  {
    CoreML::validateOutputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v7);
    *(_QWORD *)a2 = v7;
    if (*(char *)(a2 + 31) < 0)
      operator delete(*v5);
    result = *(double *)&v8;
    *(_OWORD *)v5 = v8;
    *(_QWORD *)(a2 + 24) = v9;
  }
  return result;
}

void sub_21834EE78(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*(void **)(v1 + 8));
  _Unwind_Resume(exception_object);
}

double CoreML::NeuralNetworkSpecValidator::validatePowBroadcastableLayer@<D0>(const CoreML::Specification::NeuralNetworkLayer *a1@<X1>, uint64_t a2@<X8>)
{
  void **v5;
  double result;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;

  CoreML::Result::Result((CoreML::Result *)a2);
  CoreML::validateInputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)2, 2, (CoreML::Result *)&v7);
  *(_QWORD *)a2 = v7;
  v5 = (void **)(a2 + 8);
  if (*(char *)(a2 + 31) < 0)
    operator delete(*v5);
  *(_OWORD *)v5 = v8;
  *(_QWORD *)(a2 + 24) = v9;
  if (CoreML::Result::good((CoreML::Result *)a2))
  {
    CoreML::validateOutputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v7);
    *(_QWORD *)a2 = v7;
    if (*(char *)(a2 + 31) < 0)
      operator delete(*v5);
    result = *(double *)&v8;
    *(_OWORD *)v5 = v8;
    *(_QWORD *)(a2 + 24) = v9;
  }
  return result;
}

void sub_21834EF5C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*(void **)(v1 + 8));
  _Unwind_Resume(exception_object);
}

double CoreML::NeuralNetworkSpecValidator::validateExp2Layer@<D0>(const CoreML::Specification::NeuralNetworkLayer *a1@<X1>, uint64_t a2@<X8>)
{
  void **v5;
  double result;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;

  CoreML::Result::Result((CoreML::Result *)a2);
  CoreML::validateInputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v7);
  *(_QWORD *)a2 = v7;
  v5 = (void **)(a2 + 8);
  if (*(char *)(a2 + 31) < 0)
    operator delete(*v5);
  *(_OWORD *)v5 = v8;
  *(_QWORD *)(a2 + 24) = v9;
  if (CoreML::Result::good((CoreML::Result *)a2))
  {
    CoreML::validateOutputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v7);
    *(_QWORD *)a2 = v7;
    if (*(char *)(a2 + 31) < 0)
      operator delete(*v5);
    result = *(double *)&v8;
    *(_OWORD *)v5 = v8;
    *(_QWORD *)(a2 + 24) = v9;
  }
  return result;
}

void sub_21834F040(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*(void **)(v1 + 8));
  _Unwind_Resume(exception_object);
}

double CoreML::NeuralNetworkSpecValidator::validateUpperTriangularLayer@<D0>(const CoreML::Specification::NeuralNetworkLayer *a1@<X1>, uint64_t a2@<X8>)
{
  void **v5;
  double result;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;

  CoreML::Result::Result((CoreML::Result *)a2);
  CoreML::validateInputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v7);
  *(_QWORD *)a2 = v7;
  v5 = (void **)(a2 + 8);
  if (*(char *)(a2 + 31) < 0)
    operator delete(*v5);
  *(_OWORD *)v5 = v8;
  *(_QWORD *)(a2 + 24) = v9;
  if (CoreML::Result::good((CoreML::Result *)a2))
  {
    CoreML::validateOutputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v7);
    *(_QWORD *)a2 = v7;
    if (*(char *)(a2 + 31) < 0)
      operator delete(*v5);
    result = *(double *)&v8;
    *(_OWORD *)v5 = v8;
    *(_QWORD *)(a2 + 24) = v9;
  }
  return result;
}

void sub_21834F124(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*(void **)(v1 + 8));
  _Unwind_Resume(exception_object);
}

double CoreML::NeuralNetworkSpecValidator::validateLowerTriangularLayer@<D0>(const CoreML::Specification::NeuralNetworkLayer *a1@<X1>, uint64_t a2@<X8>)
{
  void **v5;
  double result;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;

  CoreML::Result::Result((CoreML::Result *)a2);
  CoreML::validateInputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v7);
  *(_QWORD *)a2 = v7;
  v5 = (void **)(a2 + 8);
  if (*(char *)(a2 + 31) < 0)
    operator delete(*v5);
  *(_OWORD *)v5 = v8;
  *(_QWORD *)(a2 + 24) = v9;
  if (CoreML::Result::good((CoreML::Result *)a2))
  {
    CoreML::validateOutputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v7);
    *(_QWORD *)a2 = v7;
    if (*(char *)(a2 + 31) < 0)
      operator delete(*v5);
    result = *(double *)&v8;
    *(_OWORD *)v5 = v8;
    *(_QWORD *)(a2 + 24) = v9;
  }
  return result;
}

void sub_21834F208(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*(void **)(v1 + 8));
  _Unwind_Resume(exception_object);
}

double CoreML::NeuralNetworkSpecValidator::validateMatrixBandPartLayer@<D0>(const CoreML::Specification::NeuralNetworkLayer *a1@<X1>, uint64_t a2@<X8>)
{
  void **v5;
  double result;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;

  CoreML::Result::Result((CoreML::Result *)a2);
  CoreML::validateInputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v7);
  *(_QWORD *)a2 = v7;
  v5 = (void **)(a2 + 8);
  if (*(char *)(a2 + 31) < 0)
    operator delete(*v5);
  *(_OWORD *)v5 = v8;
  *(_QWORD *)(a2 + 24) = v9;
  if (CoreML::Result::good((CoreML::Result *)a2))
  {
    CoreML::validateOutputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v7);
    *(_QWORD *)a2 = v7;
    if (*(char *)(a2 + 31) < 0)
      operator delete(*v5);
    result = *(double *)&v8;
    *(_OWORD *)v5 = v8;
    *(_QWORD *)(a2 + 24) = v9;
  }
  return result;
}

void sub_21834F2EC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*(void **)(v1 + 8));
  _Unwind_Resume(exception_object);
}

double CoreML::NeuralNetworkSpecValidator::validateBroadcastToLikeLayer@<D0>(const CoreML::Specification::NeuralNetworkLayer *a1@<X1>, uint64_t a2@<X8>)
{
  void **v5;
  double result;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;

  CoreML::Result::Result((CoreML::Result *)a2);
  CoreML::validateInputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)2, 2, (CoreML::Result *)&v7);
  *(_QWORD *)a2 = v7;
  v5 = (void **)(a2 + 8);
  if (*(char *)(a2 + 31) < 0)
    operator delete(*v5);
  *(_OWORD *)v5 = v8;
  *(_QWORD *)(a2 + 24) = v9;
  if (CoreML::Result::good((CoreML::Result *)a2))
  {
    CoreML::validateOutputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v7);
    *(_QWORD *)a2 = v7;
    if (*(char *)(a2 + 31) < 0)
      operator delete(*v5);
    result = *(double *)&v8;
    *(_OWORD *)v5 = v8;
    *(_QWORD *)(a2 + 24) = v9;
  }
  return result;
}

void sub_21834F3D0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*(void **)(v1 + 8));
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateBroadcastToStaticLayer(uint64_t **a1@<X1>, uint64_t a2@<X8>)
{
  _BOOL8 v5;
  uint64_t *v6;
  std::string *v7;
  __int128 v8;
  std::string v9;
  _BYTE v10[24];
  uint64_t v11;
  uint64_t v12;
  __int128 __p;
  uint64_t v14;

  CoreML::Result::Result((CoreML::Result *)&v12);
  CoreML::validateInputCount((CoreML *)a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)v10);
  v12 = *(_QWORD *)v10;
  if (SHIBYTE(v14) < 0)
    operator delete((void *)__p);
  __p = *(_OWORD *)&v10[8];
  v14 = v11;
  v5 = CoreML::Result::good((CoreML::Result *)&v12);
  if (v5)
  {
    CoreML::validateOutputCount((CoreML *)a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)v10);
    v12 = *(_QWORD *)v10;
    if (SHIBYTE(v14) < 0)
      operator delete((void *)__p);
    __p = *(_OWORD *)&v10[8];
    v14 = v11;
  }
  if (*((_DWORD *)a1 + 35) == 1105)
    v6 = a1[16];
  else
    v6 = CoreML::Specification::BroadcastToStaticLayerParams::default_instance((CoreML::Specification::BroadcastToStaticLayerParams *)v5);
  if (*((_DWORD *)v6 + 4))
  {
    *(_QWORD *)a2 = v12;
    *(_OWORD *)(a2 + 8) = __p;
    *(_QWORD *)(a2 + 24) = v14;
  }
  else
  {
    std::operator+<char>();
    v7 = std::string::append(&v9, "' layer.");
    v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    *(_QWORD *)&v10[16] = *((_QWORD *)&v7->__r_.__value_.__l + 2);
    *(_OWORD *)v10 = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v9.__r_.__value_.__l.__data_);
    CoreML::Result::Result((_DWORD *)a2, 13);
    if ((v10[23] & 0x80000000) != 0)
      operator delete(*(void **)v10);
    if (SHIBYTE(v14) < 0)
      operator delete((void *)__p);
  }
}

void sub_21834F570(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a21 < 0)
    operator delete(__p);
  if (a29 < 0)
    operator delete(a24);
  _Unwind_Resume(exception_object);
}

double CoreML::NeuralNetworkSpecValidator::validateBroadcastToDynamicLayer@<D0>(const CoreML::Specification::NeuralNetworkLayer *a1@<X1>, uint64_t a2@<X8>)
{
  void **v5;
  double result;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;

  CoreML::Result::Result((CoreML::Result *)a2);
  CoreML::validateInputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)2, 2, (CoreML::Result *)&v7);
  *(_QWORD *)a2 = v7;
  v5 = (void **)(a2 + 8);
  if (*(char *)(a2 + 31) < 0)
    operator delete(*v5);
  *(_OWORD *)v5 = v8;
  *(_QWORD *)(a2 + 24) = v9;
  if (CoreML::Result::good((CoreML::Result *)a2))
  {
    CoreML::validateOutputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v7);
    *(_QWORD *)a2 = v7;
    if (*(char *)(a2 + 31) < 0)
      operator delete(*v5);
    result = *(double *)&v8;
    *(_OWORD *)v5 = v8;
    *(_QWORD *)(a2 + 24) = v9;
  }
  return result;
}

void sub_21834F688(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*(void **)(v1 + 8));
  _Unwind_Resume(exception_object);
}

BOOL CoreML::NeuralNetworkSpecValidator::validateAddBroadcastableLayer@<W0>(const CoreML::Specification::NeuralNetworkLayer *a1@<X1>, uint64_t a2@<X8>)
{
  void **v5;
  _BOOL8 result;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;

  CoreML::Result::Result((CoreML::Result *)a2);
  CoreML::validateInputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)2, 2, (CoreML::Result *)&v7);
  *(_QWORD *)a2 = v7;
  v5 = (void **)(a2 + 8);
  if (*(char *)(a2 + 31) < 0)
    operator delete(*v5);
  *(_OWORD *)v5 = v8;
  *(_QWORD *)(a2 + 24) = v9;
  result = CoreML::Result::good((CoreML::Result *)a2);
  if (result)
  {
    CoreML::validateOutputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v7);
    *(_QWORD *)a2 = v7;
    if (*(char *)(a2 + 31) < 0)
      operator delete(*v5);
    *(_OWORD *)v5 = v8;
    *(_QWORD *)(a2 + 24) = v9;
    return CoreML::Result::good((CoreML::Result *)a2);
  }
  return result;
}

void sub_21834F774(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*(void **)(v1 + 8));
  _Unwind_Resume(exception_object);
}

BOOL CoreML::NeuralNetworkSpecValidator::validateSubtractBroadcastableLayer@<W0>(const CoreML::Specification::NeuralNetworkLayer *a1@<X1>, uint64_t a2@<X8>)
{
  void **v5;
  _BOOL8 result;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;

  CoreML::Result::Result((CoreML::Result *)a2);
  CoreML::validateInputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)2, 2, (CoreML::Result *)&v7);
  *(_QWORD *)a2 = v7;
  v5 = (void **)(a2 + 8);
  if (*(char *)(a2 + 31) < 0)
    operator delete(*v5);
  *(_OWORD *)v5 = v8;
  *(_QWORD *)(a2 + 24) = v9;
  result = CoreML::Result::good((CoreML::Result *)a2);
  if (result)
  {
    CoreML::validateOutputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v7);
    *(_QWORD *)a2 = v7;
    if (*(char *)(a2 + 31) < 0)
      operator delete(*v5);
    *(_OWORD *)v5 = v8;
    *(_QWORD *)(a2 + 24) = v9;
    return CoreML::Result::good((CoreML::Result *)a2);
  }
  return result;
}

void sub_21834F860(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*(void **)(v1 + 8));
  _Unwind_Resume(exception_object);
}

BOOL CoreML::NeuralNetworkSpecValidator::validateMultiplyBroadcastableLayer@<W0>(const CoreML::Specification::NeuralNetworkLayer *a1@<X1>, uint64_t a2@<X8>)
{
  void **v5;
  _BOOL8 result;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;

  CoreML::Result::Result((CoreML::Result *)a2);
  CoreML::validateInputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)2, 2, (CoreML::Result *)&v7);
  *(_QWORD *)a2 = v7;
  v5 = (void **)(a2 + 8);
  if (*(char *)(a2 + 31) < 0)
    operator delete(*v5);
  *(_OWORD *)v5 = v8;
  *(_QWORD *)(a2 + 24) = v9;
  result = CoreML::Result::good((CoreML::Result *)a2);
  if (result)
  {
    CoreML::validateOutputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v7);
    *(_QWORD *)a2 = v7;
    if (*(char *)(a2 + 31) < 0)
      operator delete(*v5);
    *(_OWORD *)v5 = v8;
    *(_QWORD *)(a2 + 24) = v9;
    return CoreML::Result::good((CoreML::Result *)a2);
  }
  return result;
}

void sub_21834F94C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*(void **)(v1 + 8));
  _Unwind_Resume(exception_object);
}

BOOL CoreML::NeuralNetworkSpecValidator::validateDivideBroadcastableLayer@<W0>(const CoreML::Specification::NeuralNetworkLayer *a1@<X1>, uint64_t a2@<X8>)
{
  void **v5;
  _BOOL8 result;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;

  CoreML::Result::Result((CoreML::Result *)a2);
  CoreML::validateInputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)2, 2, (CoreML::Result *)&v7);
  *(_QWORD *)a2 = v7;
  v5 = (void **)(a2 + 8);
  if (*(char *)(a2 + 31) < 0)
    operator delete(*v5);
  *(_OWORD *)v5 = v8;
  *(_QWORD *)(a2 + 24) = v9;
  result = CoreML::Result::good((CoreML::Result *)a2);
  if (result)
  {
    CoreML::validateOutputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v7);
    *(_QWORD *)a2 = v7;
    if (*(char *)(a2 + 31) < 0)
      operator delete(*v5);
    *(_OWORD *)v5 = v8;
    *(_QWORD *)(a2 + 24) = v9;
    return CoreML::Result::good((CoreML::Result *)a2);
  }
  return result;
}

void sub_21834FA38(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*(void **)(v1 + 8));
  _Unwind_Resume(exception_object);
}

BOOL CoreML::NeuralNetworkSpecValidator::validateMaxBroadcastableLayer@<W0>(const CoreML::Specification::NeuralNetworkLayer *a1@<X1>, uint64_t a2@<X8>)
{
  void **v5;
  _BOOL8 result;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;

  CoreML::Result::Result((CoreML::Result *)a2);
  CoreML::validateInputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)2, 2, (CoreML::Result *)&v7);
  *(_QWORD *)a2 = v7;
  v5 = (void **)(a2 + 8);
  if (*(char *)(a2 + 31) < 0)
    operator delete(*v5);
  *(_OWORD *)v5 = v8;
  *(_QWORD *)(a2 + 24) = v9;
  result = CoreML::Result::good((CoreML::Result *)a2);
  if (result)
  {
    CoreML::validateOutputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v7);
    *(_QWORD *)a2 = v7;
    if (*(char *)(a2 + 31) < 0)
      operator delete(*v5);
    *(_OWORD *)v5 = v8;
    *(_QWORD *)(a2 + 24) = v9;
    return CoreML::Result::good((CoreML::Result *)a2);
  }
  return result;
}

void sub_21834FB24(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*(void **)(v1 + 8));
  _Unwind_Resume(exception_object);
}

BOOL CoreML::NeuralNetworkSpecValidator::validateMinBroadcastableLayer@<W0>(const CoreML::Specification::NeuralNetworkLayer *a1@<X1>, uint64_t a2@<X8>)
{
  void **v5;
  _BOOL8 result;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;

  CoreML::Result::Result((CoreML::Result *)a2);
  CoreML::validateInputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)2, 2, (CoreML::Result *)&v7);
  *(_QWORD *)a2 = v7;
  v5 = (void **)(a2 + 8);
  if (*(char *)(a2 + 31) < 0)
    operator delete(*v5);
  *(_OWORD *)v5 = v8;
  *(_QWORD *)(a2 + 24) = v9;
  result = CoreML::Result::good((CoreML::Result *)a2);
  if (result)
  {
    CoreML::validateOutputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v7);
    *(_QWORD *)a2 = v7;
    if (*(char *)(a2 + 31) < 0)
      operator delete(*v5);
    *(_OWORD *)v5 = v8;
    *(_QWORD *)(a2 + 24) = v9;
    return CoreML::Result::good((CoreML::Result *)a2);
  }
  return result;
}

void sub_21834FC10(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*(void **)(v1 + 8));
  _Unwind_Resume(exception_object);
}

BOOL CoreML::NeuralNetworkSpecValidator::validateFloorDivBroadcastableLayer@<W0>(const CoreML::Specification::NeuralNetworkLayer *a1@<X1>, uint64_t a2@<X8>)
{
  void **v5;
  _BOOL8 result;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;

  CoreML::Result::Result((CoreML::Result *)a2);
  CoreML::validateInputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)2, 2, (CoreML::Result *)&v7);
  *(_QWORD *)a2 = v7;
  v5 = (void **)(a2 + 8);
  if (*(char *)(a2 + 31) < 0)
    operator delete(*v5);
  *(_OWORD *)v5 = v8;
  *(_QWORD *)(a2 + 24) = v9;
  result = CoreML::Result::good((CoreML::Result *)a2);
  if (result)
  {
    CoreML::validateOutputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v7);
    *(_QWORD *)a2 = v7;
    if (*(char *)(a2 + 31) < 0)
      operator delete(*v5);
    *(_OWORD *)v5 = v8;
    *(_QWORD *)(a2 + 24) = v9;
    return CoreML::Result::good((CoreML::Result *)a2);
  }
  return result;
}

void sub_21834FCFC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*(void **)(v1 + 8));
  _Unwind_Resume(exception_object);
}

BOOL CoreML::NeuralNetworkSpecValidator::validateModBroadcastableLayer@<W0>(const CoreML::Specification::NeuralNetworkLayer *a1@<X1>, uint64_t a2@<X8>)
{
  void **v5;
  _BOOL8 result;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;

  CoreML::Result::Result((CoreML::Result *)a2);
  CoreML::validateInputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)2, 2, (CoreML::Result *)&v7);
  *(_QWORD *)a2 = v7;
  v5 = (void **)(a2 + 8);
  if (*(char *)(a2 + 31) < 0)
    operator delete(*v5);
  *(_OWORD *)v5 = v8;
  *(_QWORD *)(a2 + 24) = v9;
  result = CoreML::Result::good((CoreML::Result *)a2);
  if (result)
  {
    CoreML::validateOutputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v7);
    *(_QWORD *)a2 = v7;
    if (*(char *)(a2 + 31) < 0)
      operator delete(*v5);
    *(_OWORD *)v5 = v8;
    *(_QWORD *)(a2 + 24) = v9;
    return CoreML::Result::good((CoreML::Result *)a2);
  }
  return result;
}

void sub_21834FDE8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*(void **)(v1 + 8));
  _Unwind_Resume(exception_object);
}

double CoreML::NeuralNetworkSpecValidator::validateGatherLayer@<D0>(const CoreML::Specification::NeuralNetworkLayer *a1@<X1>, uint64_t a2@<X8>)
{
  void **v5;
  double result;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;

  CoreML::Result::Result((CoreML::Result *)a2);
  CoreML::validateInputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)2, 2, (CoreML::Result *)&v7);
  *(_QWORD *)a2 = v7;
  v5 = (void **)(a2 + 8);
  if (*(char *)(a2 + 31) < 0)
    operator delete(*v5);
  *(_OWORD *)v5 = v8;
  *(_QWORD *)(a2 + 24) = v9;
  if (CoreML::Result::good((CoreML::Result *)a2))
  {
    CoreML::validateOutputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v7);
    *(_QWORD *)a2 = v7;
    if (*(char *)(a2 + 31) < 0)
      operator delete(*v5);
    result = *(double *)&v8;
    *(_OWORD *)v5 = v8;
    *(_QWORD *)(a2 + 24) = v9;
  }
  return result;
}

void sub_21834FECC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*(void **)(v1 + 8));
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateScatterLayer(CoreML::NeuralNetworkSpecValidator *this@<X0>, const CoreML::Specification::NeuralNetworkLayer *a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  _QWORD *v7;
  int v8;
  int v9;
  __int128 *v10;
  __int128 v11;
  std::string *v12;
  __int128 v13;
  std::string *v14;
  void *v15;
  char v16;
  __int128 *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string v22;
  void *v23;
  __int128 v24;
  uint64_t v25;
  void *v26;
  __int128 __p;
  uint64_t v28;
  _QWORD v29[3];

  v29[2] = *MEMORY[0x24BDAC8D0];
  CoreML::Result::Result((CoreML::Result *)&v26);
  CoreML::validateInputCount(a2, (const CoreML::Specification::NeuralNetworkLayer *)3, 3, (CoreML::Result *)&v23);
  v26 = v23;
  if (SHIBYTE(v28) < 0)
    operator delete((void *)__p);
  __p = v24;
  v28 = v25;
  if (CoreML::Result::good((CoreML::Result *)&v26))
  {
    CoreML::validateOutputCount(a2, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v23);
    v26 = v23;
    if (SHIBYTE(v28) < 0)
      operator delete((void *)__p);
    __p = v24;
    v28 = v25;
  }
  if (!*(_BYTE *)this)
    goto LABEL_16;
  v23 = 0;
  v24 = 0uLL;
  v6 = *((_DWORD *)a2 + 18);
  if (v6 < 1)
    goto LABEL_16;
  if (v6 == 3)
  {
    v7 = (_QWORD *)*((_QWORD *)a2 + 10);
    v8 = *(_DWORD *)(v7[1] + 36);
    if (v8 == *(_DWORD *)(v7[3] + 36) && *(_DWORD *)(v7[2] + 36) == 1)
    {
      v9 = *((_DWORD *)a2 + 24);
      if (v9 < 1)
        goto LABEL_16;
      if (v9 != 1)
      {
        std::string::basic_string[abi:ne180100]<0>(&v22, "Scatter layer must have 1 output tensor fields filled");
        CoreML::Result::Result((_DWORD *)a3, 13);
        goto LABEL_18;
      }
      if (v8 == *(_DWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 13) + 8) + 36))
      {
LABEL_16:
        *(_QWORD *)a3 = v26;
        *(_OWORD *)(a3 + 8) = __p;
        *(_QWORD *)(a3 + 24) = v28;
        return;
      }
      v17 = (__int128 *)*((_QWORD *)a2 + 14);
      if (*((char *)v17 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v21, *(const std::string::value_type **)v17, *((_QWORD *)v17 + 1));
      }
      else
      {
        v18 = *v17;
        v21.__r_.__value_.__r.__words[2] = *((_QWORD *)v17 + 2);
        *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v18;
      }
      v19 = std::string::insert(&v21, 0, "Output rank of Scatter layer '");
      v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v22.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      v14 = std::string::append(&v22, "' does not match container input.");
    }
    else
    {
      v10 = (__int128 *)*((_QWORD *)a2 + 14);
      if (*((char *)v10 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v21, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
      }
      else
      {
        v11 = *v10;
        v21.__r_.__value_.__r.__words[2] = *((_QWORD *)v10 + 2);
        *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v11;
      }
      v12 = std::string::insert(&v21, 0, "Input ranks of Scatter layer '");
      v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
      v22.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v13;
      v12->__r_.__value_.__l.__size_ = 0;
      v12->__r_.__value_.__r.__words[2] = 0;
      v12->__r_.__value_.__r.__words[0] = 0;
      v14 = std::string::append(&v22, "' are invalid.");
    }
    v15 = (void *)v14->__r_.__value_.__r.__words[0];
    v29[0] = v14->__r_.__value_.__l.__size_;
    *(_QWORD *)((char *)v29 + 7) = *(std::string::size_type *)((char *)&v14->__r_.__value_.__r.__words[1] + 7);
    v16 = HIBYTE(v14->__r_.__value_.__r.__words[2]);
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v24) < 0)
      operator delete(v23);
    v23 = v15;
    *(_QWORD *)&v24 = v29[0];
    *(_QWORD *)((char *)&v24 + 7) = *(_QWORD *)((char *)v29 + 7);
    HIBYTE(v24) = v16;
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v22.__r_.__value_.__l.__data_);
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v21.__r_.__value_.__l.__data_);
    CoreML::Result::Result((_DWORD *)a3, 13);
    goto LABEL_31;
  }
  std::string::basic_string[abi:ne180100]<0>(&v22, "Scatter layer must have 3 input tensor fields filled");
  CoreML::Result::Result((_DWORD *)a3, 13);
LABEL_18:
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
LABEL_31:
  if (SHIBYTE(v24) < 0)
    operator delete(v23);
  if (SHIBYTE(v28) < 0)
    operator delete((void *)__p);
}

void sub_218350230(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a27 < 0)
    operator delete(__p);
  if (a35 < 0)
    operator delete(a30);
  _Unwind_Resume(exception_object);
}

double CoreML::NeuralNetworkSpecValidator::validateGatherNDLayer@<D0>(const CoreML::Specification::NeuralNetworkLayer *a1@<X1>, uint64_t a2@<X8>)
{
  void **v5;
  double result;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;

  CoreML::Result::Result((CoreML::Result *)a2);
  CoreML::validateInputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)2, 2, (CoreML::Result *)&v7);
  *(_QWORD *)a2 = v7;
  v5 = (void **)(a2 + 8);
  if (*(char *)(a2 + 31) < 0)
    operator delete(*v5);
  *(_OWORD *)v5 = v8;
  *(_QWORD *)(a2 + 24) = v9;
  if (CoreML::Result::good((CoreML::Result *)a2))
  {
    CoreML::validateOutputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v7);
    *(_QWORD *)a2 = v7;
    if (*(char *)(a2 + 31) < 0)
      operator delete(*v5);
    result = *(double *)&v8;
    *(_OWORD *)v5 = v8;
    *(_QWORD *)(a2 + 24) = v9;
  }
  return result;
}

void sub_218350394(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*(void **)(v1 + 8));
  _Unwind_Resume(exception_object);
}

double CoreML::NeuralNetworkSpecValidator::validateScatterNDLayer@<D0>(const CoreML::Specification::NeuralNetworkLayer *a1@<X1>, uint64_t a2@<X8>)
{
  void **v5;
  double result;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;

  CoreML::Result::Result((CoreML::Result *)a2);
  CoreML::validateInputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)3, 3, (CoreML::Result *)&v7);
  *(_QWORD *)a2 = v7;
  v5 = (void **)(a2 + 8);
  if (*(char *)(a2 + 31) < 0)
    operator delete(*v5);
  *(_OWORD *)v5 = v8;
  *(_QWORD *)(a2 + 24) = v9;
  if (CoreML::Result::good((CoreML::Result *)a2))
  {
    CoreML::validateOutputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v7);
    *(_QWORD *)a2 = v7;
    if (*(char *)(a2 + 31) < 0)
      operator delete(*v5);
    result = *(double *)&v8;
    *(_OWORD *)v5 = v8;
    *(_QWORD *)(a2 + 24) = v9;
  }
  return result;
}

void sub_218350478(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*(void **)(v1 + 8));
  _Unwind_Resume(exception_object);
}

double CoreML::NeuralNetworkSpecValidator::validateGatherAlongAxisLayer@<D0>(const CoreML::Specification::NeuralNetworkLayer *a1@<X1>, uint64_t a2@<X8>)
{
  void **v5;
  double result;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;

  CoreML::Result::Result((CoreML::Result *)a2);
  CoreML::validateInputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)2, 2, (CoreML::Result *)&v7);
  *(_QWORD *)a2 = v7;
  v5 = (void **)(a2 + 8);
  if (*(char *)(a2 + 31) < 0)
    operator delete(*v5);
  *(_OWORD *)v5 = v8;
  *(_QWORD *)(a2 + 24) = v9;
  if (CoreML::Result::good((CoreML::Result *)a2))
  {
    CoreML::validateOutputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v7);
    *(_QWORD *)a2 = v7;
    if (*(char *)(a2 + 31) < 0)
      operator delete(*v5);
    result = *(double *)&v8;
    *(_OWORD *)v5 = v8;
    *(_QWORD *)(a2 + 24) = v9;
  }
  return result;
}

void sub_21835055C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*(void **)(v1 + 8));
  _Unwind_Resume(exception_object);
}

double CoreML::NeuralNetworkSpecValidator::validateScatterAlongAxisLayer@<D0>(const CoreML::Specification::NeuralNetworkLayer *a1@<X1>, uint64_t a2@<X8>)
{
  void **v5;
  double result;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;

  CoreML::Result::Result((CoreML::Result *)a2);
  CoreML::validateInputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)3, 3, (CoreML::Result *)&v7);
  *(_QWORD *)a2 = v7;
  v5 = (void **)(a2 + 8);
  if (*(char *)(a2 + 31) < 0)
    operator delete(*v5);
  *(_OWORD *)v5 = v8;
  *(_QWORD *)(a2 + 24) = v9;
  if (CoreML::Result::good((CoreML::Result *)a2))
  {
    CoreML::validateOutputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v7);
    *(_QWORD *)a2 = v7;
    if (*(char *)(a2 + 31) < 0)
      operator delete(*v5);
    result = *(double *)&v8;
    *(_OWORD *)v5 = v8;
    *(_QWORD *)(a2 + 24) = v9;
  }
  return result;
}

void sub_218350640(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*(void **)(v1 + 8));
  _Unwind_Resume(exception_object);
}

double CoreML::NeuralNetworkSpecValidator::validateWhereNonZeroLayer@<D0>(const CoreML::Specification::NeuralNetworkLayer *a1@<X1>, uint64_t a2@<X8>)
{
  void **v5;
  double result;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;

  CoreML::Result::Result((CoreML::Result *)a2);
  CoreML::validateInputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v7);
  *(_QWORD *)a2 = v7;
  v5 = (void **)(a2 + 8);
  if (*(char *)(a2 + 31) < 0)
    operator delete(*v5);
  *(_OWORD *)v5 = v8;
  *(_QWORD *)(a2 + 24) = v9;
  if (CoreML::Result::good((CoreML::Result *)a2))
  {
    CoreML::validateOutputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v7);
    *(_QWORD *)a2 = v7;
    if (*(char *)(a2 + 31) < 0)
      operator delete(*v5);
    result = *(double *)&v8;
    *(_OWORD *)v5 = v8;
    *(_QWORD *)(a2 + 24) = v9;
  }
  return result;
}

void sub_218350724(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*(void **)(v1 + 8));
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateStackLayer(uint64_t **a1@<X1>, uint64_t a2@<X8>)
{
  _BOOL8 v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  std::string *v14;
  __int128 v15;
  std::string *v16;
  __int128 v17;
  std::string v18;
  _BYTE v19[24];
  uint64_t v20;
  uint64_t v21;
  __int128 __p;
  uint64_t v23;

  CoreML::Result::Result((CoreML::Result *)&v21);
  CoreML::validateInputCount((CoreML *)a1, (const CoreML::Specification::NeuralNetworkLayer *)2, -1, (CoreML::Result *)v19);
  v21 = *(_QWORD *)v19;
  if (SHIBYTE(v23) < 0)
    operator delete((void *)__p);
  __p = *(_OWORD *)&v19[8];
  v23 = v20;
  v5 = CoreML::Result::good((CoreML::Result *)&v21);
  if (v5)
  {
    CoreML::validateOutputCount((CoreML *)a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)v19);
    v21 = *(_QWORD *)v19;
    if (SHIBYTE(v23) < 0)
      operator delete((void *)__p);
    __p = *(_OWORD *)&v19[8];
    v23 = v20;
  }
  if (*((_DWORD *)a1 + 35) == 925)
    v6 = a1[16];
  else
    v6 = CoreML::Specification::StackLayerParams::default_instance((CoreML::Specification::StackLayerParams *)v5);
  if (*((int *)a1 + 18) < 1)
    goto LABEL_19;
  v7 = a1[10];
  v8 = v7[2];
  v9 = *(int *)(v7[1] + 36);
  if ((_DWORD)v9 != *(_DWORD *)(v8 + 36))
  {
    std::operator+<char>();
    v16 = std::string::append(&v18, "' layer.");
    v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    *(_QWORD *)&v19[16] = *((_QWORD *)&v16->__r_.__value_.__l + 2);
    *(_OWORD *)v19 = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v18.__r_.__value_.__l.__data_);
    goto LABEL_22;
  }
  v10 = v6[2];
  v11 = ~(_DWORD)v9;
  v12 = v9 + 1;
  if (v10 >= v11 && v10 < v12)
  {
LABEL_19:
    *(_QWORD *)a2 = v21;
    *(_OWORD *)(a2 + 8) = __p;
    *(_QWORD *)(a2 + 24) = v23;
    __p = 0uLL;
    v23 = 0;
    goto LABEL_24;
  }
  std::operator+<char>();
  v14 = std::string::append(&v18, "' layer.");
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  *(_QWORD *)&v19[16] = *((_QWORD *)&v14->__r_.__value_.__l + 2);
  *(_OWORD *)v19 = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
LABEL_22:
  CoreML::Result::Result((_DWORD *)a2, 13);
  if ((v19[23] & 0x80000000) != 0)
    operator delete(*(void **)v19);
LABEL_24:
  if (SHIBYTE(v23) < 0)
    operator delete((void *)__p);
}

void sub_218350960(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a21 < 0)
    operator delete(__p);
  if (a29 < 0)
    operator delete(a24);
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateSplitNDLayer(uint64_t **a1@<X1>, uint64_t a2@<X8>)
{
  _BOOL8 v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  std::string *v11;
  __int128 v12;
  std::string *v13;
  __int128 v14;
  std::string *v15;
  __int128 v16;
  std::string v17;
  _BYTE v18[24];
  uint64_t v19;
  uint64_t v20;
  __int128 __p;
  uint64_t v22;

  CoreML::Result::Result((CoreML::Result *)&v20);
  CoreML::validateInputCount((CoreML *)a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)v18);
  v20 = *(_QWORD *)v18;
  if (SHIBYTE(v22) < 0)
    operator delete((void *)__p);
  __p = *(_OWORD *)&v18[8];
  v22 = v19;
  v5 = CoreML::Result::good((CoreML::Result *)&v20);
  if (v5)
  {
    CoreML::validateOutputCount((CoreML *)a1, (const CoreML::Specification::NeuralNetworkLayer *)2, -1, (CoreML::Result *)v18);
    v20 = *(_QWORD *)v18;
    if (SHIBYTE(v22) < 0)
      operator delete((void *)__p);
    __p = *(_OWORD *)&v18[8];
    v22 = v19;
  }
  if (*((_DWORD *)a1 + 35) == 975)
    v6 = a1[16];
  else
    v6 = CoreML::Specification::SplitNDLayerParams::default_instance((CoreML::Specification::SplitNDLayerParams *)v5);
  v7 = *((unsigned int *)v6 + 4);
  if ((int)v7 >= 1 || (v7 = v6[6]) != 0)
  {
    if (*((int *)a1 + 18) < 1
      || ((v8 = *(int *)(a1[10][1] + 36), v9 = v6[5], v9 >= -v8) ? (v10 = v9 < v8) : (v10 = 0), v10))
    {
      if (v7 == *((_DWORD *)a1 + 12))
      {
        *(_QWORD *)a2 = v20;
        *(_OWORD *)(a2 + 8) = __p;
        *(_QWORD *)(a2 + 24) = v22;
        __p = 0uLL;
        v22 = 0;
        goto LABEL_29;
      }
      std::operator+<char>();
      v13 = std::string::append(&v17, "' layer.");
      v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
      *(_QWORD *)&v18[16] = *((_QWORD *)&v13->__r_.__value_.__l + 2);
      *(_OWORD *)v18 = v14;
      v13->__r_.__value_.__l.__size_ = 0;
      v13->__r_.__value_.__r.__words[2] = 0;
      v13->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v17.__r_.__value_.__l.__data_);
    }
    else
    {
      std::operator+<char>();
      v11 = std::string::append(&v17, "' layer.");
      v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
      *(_QWORD *)&v18[16] = *((_QWORD *)&v11->__r_.__value_.__l + 2);
      *(_OWORD *)v18 = v12;
      v11->__r_.__value_.__l.__size_ = 0;
      v11->__r_.__value_.__r.__words[2] = 0;
      v11->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v17.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    std::operator+<char>();
    v15 = std::string::append(&v17, "' layer.");
    v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    *(_QWORD *)&v18[16] = *((_QWORD *)&v15->__r_.__value_.__l + 2);
    *(_OWORD *)v18 = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v17.__r_.__value_.__l.__data_);
  }
  CoreML::Result::Result((_DWORD *)a2, 13);
  if ((v18[23] & 0x80000000) != 0)
    operator delete(*(void **)v18);
LABEL_29:
  if (SHIBYTE(v22) < 0)
    operator delete((void *)__p);
}

void sub_218350C4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a21 < 0)
    operator delete(__p);
  if (a29 < 0)
    operator delete(a24);
  _Unwind_Resume(exception_object);
}

double CoreML::NeuralNetworkSpecValidator::validateCeilLayer@<D0>(const CoreML::Specification::NeuralNetworkLayer *a1@<X1>, uint64_t a2@<X8>)
{
  void **v5;
  double result;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;

  CoreML::Result::Result((CoreML::Result *)a2);
  CoreML::validateInputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v7);
  *(_QWORD *)a2 = v7;
  v5 = (void **)(a2 + 8);
  if (*(char *)(a2 + 31) < 0)
    operator delete(*v5);
  *(_OWORD *)v5 = v8;
  *(_QWORD *)(a2 + 24) = v9;
  if (CoreML::Result::good((CoreML::Result *)a2))
  {
    CoreML::validateOutputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v7);
    *(_QWORD *)a2 = v7;
    if (*(char *)(a2 + 31) < 0)
      operator delete(*v5);
    result = *(double *)&v8;
    *(_OWORD *)v5 = v8;
    *(_QWORD *)(a2 + 24) = v9;
  }
  return result;
}

void sub_218350D7C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*(void **)(v1 + 8));
  _Unwind_Resume(exception_object);
}

double CoreML::NeuralNetworkSpecValidator::validateFloorLayer@<D0>(const CoreML::Specification::NeuralNetworkLayer *a1@<X1>, uint64_t a2@<X8>)
{
  void **v5;
  double result;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;

  CoreML::Result::Result((CoreML::Result *)a2);
  CoreML::validateInputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v7);
  *(_QWORD *)a2 = v7;
  v5 = (void **)(a2 + 8);
  if (*(char *)(a2 + 31) < 0)
    operator delete(*v5);
  *(_OWORD *)v5 = v8;
  *(_QWORD *)(a2 + 24) = v9;
  if (CoreML::Result::good((CoreML::Result *)a2))
  {
    CoreML::validateOutputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v7);
    *(_QWORD *)a2 = v7;
    if (*(char *)(a2 + 31) < 0)
      operator delete(*v5);
    result = *(double *)&v8;
    *(_OWORD *)v5 = v8;
    *(_QWORD *)(a2 + 24) = v9;
  }
  return result;
}

void sub_218350E60(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*(void **)(v1 + 8));
  _Unwind_Resume(exception_object);
}

double CoreML::NeuralNetworkSpecValidator::validateRoundLayer@<D0>(const CoreML::Specification::NeuralNetworkLayer *a1@<X1>, uint64_t a2@<X8>)
{
  void **v5;
  double result;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;

  CoreML::Result::Result((CoreML::Result *)a2);
  CoreML::validateInputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v7);
  *(_QWORD *)a2 = v7;
  v5 = (void **)(a2 + 8);
  if (*(char *)(a2 + 31) < 0)
    operator delete(*v5);
  *(_OWORD *)v5 = v8;
  *(_QWORD *)(a2 + 24) = v9;
  if (CoreML::Result::good((CoreML::Result *)a2))
  {
    CoreML::validateOutputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v7);
    *(_QWORD *)a2 = v7;
    if (*(char *)(a2 + 31) < 0)
      operator delete(*v5);
    result = *(double *)&v8;
    *(_OWORD *)v5 = v8;
    *(_QWORD *)(a2 + 24) = v9;
  }
  return result;
}

void sub_218350F44(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*(void **)(v1 + 8));
  _Unwind_Resume(exception_object);
}

double CoreML::NeuralNetworkSpecValidator::validateSignLayer@<D0>(const CoreML::Specification::NeuralNetworkLayer *a1@<X1>, uint64_t a2@<X8>)
{
  void **v5;
  double result;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;

  CoreML::Result::Result((CoreML::Result *)a2);
  CoreML::validateInputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v7);
  *(_QWORD *)a2 = v7;
  v5 = (void **)(a2 + 8);
  if (*(char *)(a2 + 31) < 0)
    operator delete(*v5);
  *(_OWORD *)v5 = v8;
  *(_QWORD *)(a2 + 24) = v9;
  if (CoreML::Result::good((CoreML::Result *)a2))
  {
    CoreML::validateOutputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v7);
    *(_QWORD *)a2 = v7;
    if (*(char *)(a2 + 31) < 0)
      operator delete(*v5);
    result = *(double *)&v8;
    *(_OWORD *)v5 = v8;
    *(_QWORD *)(a2 + 24) = v9;
  }
  return result;
}

void sub_218351028(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*(void **)(v1 + 8));
  _Unwind_Resume(exception_object);
}

__n128 CoreML::NeuralNetworkSpecValidator::validateClipLayer@<Q0>(uint64_t **a1@<X1>, uint64_t a2@<X8>)
{
  _BOOL8 v5;
  uint64_t *v6;
  std::string *v7;
  __int128 v8;
  __n128 result;
  std::string v10;
  _BYTE v11[24];
  uint64_t v12;
  uint64_t v13;
  __n128 __p;
  uint64_t v15;

  CoreML::Result::Result((CoreML::Result *)&v13);
  CoreML::validateInputCount((CoreML *)a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)v11);
  v13 = *(_QWORD *)v11;
  if (SHIBYTE(v15) < 0)
    operator delete((void *)__p.n128_u64[0]);
  __p = *(__n128 *)&v11[8];
  v15 = v12;
  v5 = CoreML::Result::good((CoreML::Result *)&v13);
  if (v5)
  {
    CoreML::validateOutputCount((CoreML *)a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)v11);
    v13 = *(_QWORD *)v11;
    if (SHIBYTE(v15) < 0)
      operator delete((void *)__p.n128_u64[0]);
    __p = *(__n128 *)&v11[8];
    v15 = v12;
  }
  if (*((_DWORD *)a1 + 35) == 660)
    v6 = a1[16];
  else
    v6 = CoreML::Specification::ClipLayerParams::default_instance((CoreML::Specification::ClipLayerParams *)v5);
  if (*((float *)v6 + 4) <= *((float *)v6 + 5))
  {
    *(_QWORD *)a2 = v13;
    result = __p;
    *(__n128 *)(a2 + 8) = __p;
    *(_QWORD *)(a2 + 24) = v15;
  }
  else
  {
    std::operator+<char>();
    v7 = std::string::append(&v10, "' layer.");
    v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    *(_QWORD *)&v11[16] = *((_QWORD *)&v7->__r_.__value_.__l + 2);
    *(_OWORD *)v11 = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v10.__r_.__value_.__l.__data_);
    CoreML::Result::Result((_DWORD *)a2, 13);
    if ((v11[23] & 0x80000000) != 0)
      operator delete(*(void **)v11);
    if (SHIBYTE(v15) < 0)
      operator delete((void *)__p.n128_u64[0]);
  }
  return result;
}

void sub_2183511CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a21 < 0)
    operator delete(__p);
  if (a29 < 0)
    operator delete(a24);
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateSliceStaticLayer(uint64_t **a1@<X1>, uint64_t a2@<X8>)
{
  _BOOL8 v5;
  uint64_t *v6;
  std::string *v7;
  __int128 v8;
  std::string *v9;
  __int128 v10;
  std::string *v11;
  __int128 v12;
  std::string *v13;
  __int128 v14;
  std::string *v15;
  __int128 v16;
  std::string v17;
  _BYTE v18[24];
  uint64_t v19;
  uint64_t v20;
  __int128 __p;
  uint64_t v22;

  CoreML::Result::Result((CoreML::Result *)&v20);
  CoreML::validateInputCount((CoreML *)a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)v18);
  v20 = *(_QWORD *)v18;
  if (SHIBYTE(v22) < 0)
    operator delete((void *)__p);
  __p = *(_OWORD *)&v18[8];
  v22 = v19;
  v5 = CoreML::Result::good((CoreML::Result *)&v20);
  if (v5)
  {
    CoreML::validateOutputCount((CoreML *)a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)v18);
    v20 = *(_QWORD *)v18;
    if (SHIBYTE(v22) < 0)
      operator delete((void *)__p);
    __p = *(_OWORD *)&v18[8];
    v22 = v19;
  }
  if (*((_DWORD *)a1 + 35) == 995)
    v6 = a1[16];
  else
    v6 = CoreML::Specification::SliceStaticLayerParams::default_instance((CoreML::Specification::SliceStaticLayerParams *)v5);
  if (*((_DWORD *)v6 + 4))
  {
    if (*((_DWORD *)v6 + 16))
    {
      if (*((_DWORD *)v6 + 28))
      {
        if (*((_DWORD *)v6 + 10))
        {
          if (*((_DWORD *)v6 + 22))
          {
            *(_QWORD *)a2 = v20;
            *(_OWORD *)(a2 + 8) = __p;
            *(_QWORD *)(a2 + 24) = v22;
            __p = 0uLL;
            v22 = 0;
            goto LABEL_32;
          }
          std::operator+<char>();
          v15 = std::string::append(&v17, "' layer.");
          v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
          *(_QWORD *)&v18[16] = *((_QWORD *)&v15->__r_.__value_.__l + 2);
          *(_OWORD *)v18 = v16;
          v15->__r_.__value_.__l.__size_ = 0;
          v15->__r_.__value_.__r.__words[2] = 0;
          v15->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v17.__r_.__value_.__l.__data_);
        }
        else
        {
          std::operator+<char>();
          v13 = std::string::append(&v17, "' layer.");
          v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
          *(_QWORD *)&v18[16] = *((_QWORD *)&v13->__r_.__value_.__l + 2);
          *(_OWORD *)v18 = v14;
          v13->__r_.__value_.__l.__size_ = 0;
          v13->__r_.__value_.__r.__words[2] = 0;
          v13->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v17.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        std::operator+<char>();
        v11 = std::string::append(&v17, "' layer.");
        v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
        *(_QWORD *)&v18[16] = *((_QWORD *)&v11->__r_.__value_.__l + 2);
        *(_OWORD *)v18 = v12;
        v11->__r_.__value_.__l.__size_ = 0;
        v11->__r_.__value_.__r.__words[2] = 0;
        v11->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v17.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      std::operator+<char>();
      v9 = std::string::append(&v17, "' layer.");
      v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
      *(_QWORD *)&v18[16] = *((_QWORD *)&v9->__r_.__value_.__l + 2);
      *(_OWORD *)v18 = v10;
      v9->__r_.__value_.__l.__size_ = 0;
      v9->__r_.__value_.__r.__words[2] = 0;
      v9->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v17.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    std::operator+<char>();
    v7 = std::string::append(&v17, "' layer.");
    v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    *(_QWORD *)&v18[16] = *((_QWORD *)&v7->__r_.__value_.__l + 2);
    *(_OWORD *)v18 = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v17.__r_.__value_.__l.__data_);
  }
  CoreML::Result::Result((_DWORD *)a2, 13);
  if ((v18[23] & 0x80000000) != 0)
    operator delete(*(void **)v18);
LABEL_32:
  if (SHIBYTE(v22) < 0)
    operator delete((void *)__p);
}

void sub_218351548(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a21 < 0)
    operator delete(__p);
  if (a29 < 0)
    operator delete(a24);
  _Unwind_Resume(exception_object);
}

double CoreML::NeuralNetworkSpecValidator::validateSliceDynamicLayer@<D0>(const CoreML::Specification::NeuralNetworkLayer *a1@<X1>, uint64_t a2@<X8>)
{
  void **v5;
  double result;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;

  CoreML::Result::Result((CoreML::Result *)a2);
  CoreML::validateInputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)2, 7, (CoreML::Result *)&v7);
  *(_QWORD *)a2 = v7;
  v5 = (void **)(a2 + 8);
  if (*(char *)(a2 + 31) < 0)
    operator delete(*v5);
  *(_OWORD *)v5 = v8;
  *(_QWORD *)(a2 + 24) = v9;
  if (CoreML::Result::good((CoreML::Result *)a2))
  {
    CoreML::validateOutputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v7);
    *(_QWORD *)a2 = v7;
    if (*(char *)(a2 + 31) < 0)
      operator delete(*v5);
    result = *(double *)&v8;
    *(_OWORD *)v5 = v8;
    *(_QWORD *)(a2 + 24) = v9;
  }
  return result;
}

void sub_218351690(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*(void **)(v1 + 8));
  _Unwind_Resume(exception_object);
}

double CoreML::NeuralNetworkSpecValidator::validateTileLayer@<D0>(const CoreML::Specification::NeuralNetworkLayer *a1@<X1>, uint64_t a2@<X8>)
{
  void **v5;
  double result;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;

  CoreML::Result::Result((CoreML::Result *)a2);
  CoreML::validateInputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 2, (CoreML::Result *)&v7);
  *(_QWORD *)a2 = v7;
  v5 = (void **)(a2 + 8);
  if (*(char *)(a2 + 31) < 0)
    operator delete(*v5);
  *(_OWORD *)v5 = v8;
  *(_QWORD *)(a2 + 24) = v9;
  if (CoreML::Result::good((CoreML::Result *)a2))
  {
    CoreML::validateOutputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v7);
    *(_QWORD *)a2 = v7;
    if (*(char *)(a2 + 31) < 0)
      operator delete(*v5);
    result = *(double *)&v8;
    *(_OWORD *)v5 = v8;
    *(_QWORD *)(a2 + 24) = v9;
  }
  return result;
}

void sub_218351774(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*(void **)(v1 + 8));
  _Unwind_Resume(exception_object);
}

__n128 CoreML::NeuralNetworkSpecValidator::validateSlidingWindowsLayer@<Q0>(uint64_t **a1@<X1>, uint64_t a2@<X8>)
{
  _BOOL8 v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  std::string *v10;
  __int128 v11;
  __n128 result;
  std::string v13;
  _BYTE v14[24];
  uint64_t v15;
  uint64_t v16;
  __n128 __p;
  uint64_t v18;

  CoreML::Result::Result((CoreML::Result *)&v16);
  CoreML::validateInputCount((CoreML *)a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)v14);
  v16 = *(_QWORD *)v14;
  if (SHIBYTE(v18) < 0)
    operator delete((void *)__p.n128_u64[0]);
  __p = *(__n128 *)&v14[8];
  v18 = v15;
  v5 = CoreML::Result::good((CoreML::Result *)&v16);
  if (v5)
  {
    CoreML::validateOutputCount((CoreML *)a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)v14);
    v16 = *(_QWORD *)v14;
    if (SHIBYTE(v18) < 0)
      operator delete((void *)__p.n128_u64[0]);
    __p = *(__n128 *)&v14[8];
    v18 = v15;
  }
  if (*((_DWORD *)a1 + 35) == 1005)
    v6 = a1[16];
  else
    v6 = CoreML::Specification::SlidingWindowsLayerParams::default_instance((CoreML::Specification::SlidingWindowsLayerParams *)v5);
  if (*((int *)a1 + 18) < 1 || ((v7 = *(int *)(a1[10][1] + 36), v8 = v6[2], v8 >= -v7) ? (v9 = v8 < v7) : (v9 = 0), v9))
  {
    *(_QWORD *)a2 = v16;
    result = __p;
    *(__n128 *)(a2 + 8) = __p;
    *(_QWORD *)(a2 + 24) = v18;
  }
  else
  {
    std::operator+<char>();
    v10 = std::string::append(&v13, "' layer.");
    v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    *(_QWORD *)&v14[16] = *((_QWORD *)&v10->__r_.__value_.__l + 2);
    *(_OWORD *)v14 = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v13.__r_.__value_.__l.__data_);
    CoreML::Result::Result((_DWORD *)a2, 13);
    if ((v14[23] & 0x80000000) != 0)
      operator delete(*(void **)v14);
    if (SHIBYTE(v18) < 0)
      operator delete((void *)__p.n128_u64[0]);
  }
  return result;
}

void sub_218351938(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a21 < 0)
    operator delete(__p);
  if (a29 < 0)
    operator delete(a24);
  _Unwind_Resume(exception_object);
}

double CoreML::NeuralNetworkSpecValidator::validateReverseSeqLayer@<D0>(const CoreML::Specification::NeuralNetworkLayer *a1@<X1>, uint64_t a2@<X8>)
{
  void **v5;
  double result;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;

  CoreML::Result::Result((CoreML::Result *)a2);
  CoreML::validateInputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)2, 2, (CoreML::Result *)&v7);
  *(_QWORD *)a2 = v7;
  v5 = (void **)(a2 + 8);
  if (*(char *)(a2 + 31) < 0)
    operator delete(*v5);
  *(_OWORD *)v5 = v8;
  *(_QWORD *)(a2 + 24) = v9;
  if (CoreML::Result::good((CoreML::Result *)a2))
  {
    CoreML::validateOutputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v7);
    *(_QWORD *)a2 = v7;
    if (*(char *)(a2 + 31) < 0)
      operator delete(*v5);
    result = *(double *)&v8;
    *(_OWORD *)v5 = v8;
    *(_QWORD *)(a2 + 24) = v9;
  }
  return result;
}

void sub_218351A50(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*(void **)(v1 + 8));
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateReductionTypeLayer(const CoreML::Specification::NeuralNetworkLayer *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v5;
  std::string *v6;
  __int128 v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  std::string v59;
  _BYTE v60[24];
  uint64_t v61;
  uint64_t v62;
  __int128 __p;
  uint64_t v64;

  CoreML::Result::Result((CoreML::Result *)&v62);
  CoreML::validateInputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)v60);
  v62 = *(_QWORD *)v60;
  if (SHIBYTE(v64) < 0)
    operator delete((void *)__p);
  __p = *(_OWORD *)&v60[8];
  v64 = v61;
  if (CoreML::Result::good((CoreML::Result *)&v62))
  {
    CoreML::validateOutputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)v60);
    v62 = *(_QWORD *)v60;
    if (SHIBYTE(v64) < 0)
      operator delete((void *)__p);
    __p = *(_OWORD *)&v60[8];
    v64 = v61;
  }
  if (*((int *)a1 + 18) < 1)
    goto LABEL_164;
  v5 = *(int *)(*(_QWORD *)(*((_QWORD *)a1 + 10) + 8) + 36);
  std::operator+<char>();
  v6 = std::string::append(&v59, "' layer.");
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  *(_QWORD *)&v60[16] = *((_QWORD *)&v6->__r_.__value_.__l + 2);
  *(_OWORD *)v60 = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v59.__r_.__value_.__l.__data_);
  v8 = *((_DWORD *)a1 + 35);
  if (v8 > 1274)
  {
    if (v8 <= 1284)
    {
      if (v8 == 1275)
      {
        v45 = *((_QWORD *)a1 + 16);
        v46 = *(_QWORD *)(v45 + 24);
        if (v46)
          v47 = (_QWORD *)(v46 + 8);
        else
          v47 = 0;
        if (v46)
          v48 = v46 + 8 + 8 * *(int *)(v45 + 16);
        else
          v48 = 0;
        if (v47 != (_QWORD *)v48)
        {
          while (*v47 >= -(int)v5 && *v47 < v5)
          {
            if (++v47 == (_QWORD *)v48)
              goto LABEL_162;
          }
          goto LABEL_160;
        }
      }
      else if (v8 == 1280)
      {
        v21 = *((_QWORD *)a1 + 16);
        v22 = *(_QWORD *)(v21 + 24);
        v23 = v22 ? (_QWORD *)(v22 + 8) : 0;
        v24 = v22 ? v22 + 8 + 8 * *(int *)(v21 + 16) : 0;
        if (v23 != (_QWORD *)v24)
        {
          while (*v23 >= -(int)v5 && *v23 < v5)
          {
            if (++v23 == (_QWORD *)v24)
              goto LABEL_162;
          }
          goto LABEL_160;
        }
      }
    }
    else
    {
      switch(v8)
      {
        case 1285:
          v33 = *((_QWORD *)a1 + 16);
          v34 = *(_QWORD *)(v33 + 24);
          if (v34)
            v35 = (_QWORD *)(v34 + 8);
          else
            v35 = 0;
          if (v34)
            v36 = v34 + 8 + 8 * *(int *)(v33 + 16);
          else
            v36 = 0;
          if (v35 != (_QWORD *)v36)
          {
            while (*v35 >= -(int)v5 && *v35 < v5)
            {
              if (++v35 == (_QWORD *)v36)
                goto LABEL_162;
            }
            goto LABEL_160;
          }
          break;
        case 1290:
          v37 = *((_QWORD *)a1 + 16);
          v38 = *(_QWORD *)(v37 + 24);
          if (v38)
            v39 = (_QWORD *)(v38 + 8);
          else
            v39 = 0;
          if (v38)
            v40 = v38 + 8 + 8 * *(int *)(v37 + 16);
          else
            v40 = 0;
          if (v39 != (_QWORD *)v40)
          {
            while (*v39 >= -(int)v5 && *v39 < v5)
            {
              if (++v39 == (_QWORD *)v40)
                goto LABEL_162;
            }
            goto LABEL_160;
          }
          break;
        case 1295:
          v13 = *((_QWORD *)a1 + 16);
          v14 = *(_QWORD *)(v13 + 24);
          v15 = v14 ? (_QWORD *)(v14 + 8) : 0;
          v16 = v14 ? v14 + 8 + 8 * *(int *)(v13 + 16) : 0;
          if (v15 != (_QWORD *)v16)
          {
            while (*v15 >= -(int)v5 && *v15 < v5)
            {
              if (++v15 == (_QWORD *)v16)
                goto LABEL_162;
            }
            goto LABEL_160;
          }
          break;
      }
    }
    goto LABEL_162;
  }
  if (v8 <= 1259)
  {
    if (v8 == 1250)
    {
      v41 = *((_QWORD *)a1 + 16);
      v42 = *(_QWORD *)(v41 + 24);
      if (v42)
        v43 = (_QWORD *)(v42 + 8);
      else
        v43 = 0;
      if (v42)
        v44 = v42 + 8 + 8 * *(int *)(v41 + 16);
      else
        v44 = 0;
      if (v43 != (_QWORD *)v44)
      {
        while (*v43 >= -v5 && *v43 < v5)
        {
          if (++v43 == (_QWORD *)v44)
            goto LABEL_162;
        }
        goto LABEL_160;
      }
    }
    else if (v8 == 1255)
    {
      v17 = *((_QWORD *)a1 + 16);
      v18 = *(_QWORD *)(v17 + 24);
      v19 = v18 ? (_QWORD *)(v18 + 8) : 0;
      v20 = v18 ? v18 + 8 + 8 * *(int *)(v17 + 16) : 0;
      if (v19 != (_QWORD *)v20)
      {
        while (*v19 >= -v5 && *v19 < v5)
        {
          if (++v19 == (_QWORD *)v20)
            goto LABEL_162;
        }
        goto LABEL_160;
      }
    }
    goto LABEL_162;
  }
  if (v8 == 1260)
  {
    v25 = *((_QWORD *)a1 + 16);
    v26 = *(_QWORD *)(v25 + 24);
    if (v26)
      v27 = (_QWORD *)(v26 + 8);
    else
      v27 = 0;
    if (v26)
      v28 = v26 + 8 + 8 * *(int *)(v25 + 16);
    else
      v28 = 0;
    if (v27 != (_QWORD *)v28)
    {
      while (*v27 >= -v5 && *v27 < v5)
      {
        if (++v27 == (_QWORD *)v28)
          goto LABEL_162;
      }
      goto LABEL_160;
    }
    goto LABEL_162;
  }
  if (v8 == 1265)
  {
    v29 = *((_QWORD *)a1 + 16);
    v30 = *(_QWORD *)(v29 + 24);
    if (v30)
      v31 = (_QWORD *)(v30 + 8);
    else
      v31 = 0;
    if (v30)
      v32 = v30 + 8 + 8 * *(int *)(v29 + 16);
    else
      v32 = 0;
    if (v31 != (_QWORD *)v32)
    {
      while (*v31 >= -v5 && *v31 < v5)
      {
        if (++v31 == (_QWORD *)v32)
          goto LABEL_162;
      }
      goto LABEL_160;
    }
    goto LABEL_162;
  }
  if (v8 != 1270
    || ((v9 = *((_QWORD *)a1 + 16), (v10 = *(_QWORD *)(v9 + 24)) != 0) ? (v11 = (_QWORD *)(v10 + 8)) : (v11 = 0),
        !v10 ? (v12 = 0) : (v12 = v10 + 8 + 8 * *(int *)(v9 + 16)),
        v11 == (_QWORD *)v12))
  {
LABEL_162:
    if ((v60[23] & 0x80000000) != 0)
      operator delete(*(void **)v60);
LABEL_164:
    *(_QWORD *)a2 = v62;
    *(_OWORD *)(a2 + 8) = __p;
    *(_QWORD *)(a2 + 24) = v64;
    return;
  }
  while (*v11 >= -(int)v5 && *v11 < v5)
  {
    if (++v11 == (_QWORD *)v12)
      goto LABEL_162;
  }
LABEL_160:
  CoreML::Result::Result((_DWORD *)a2, 13);
  if ((v60[23] & 0x80000000) != 0)
    operator delete(*(void **)v60);
  if (SHIBYTE(v64) < 0)
    operator delete((void *)__p);
}

void sub_218352074(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a21 < 0)
    operator delete(__p);
  if (a29 < 0)
    operator delete(a24);
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateLoopLayer(CoreML::NeuralNetworkSpecValidator *this@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X8>)
{
  _BOOL8 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  __int128 v14;
  uint64_t *v15;
  int v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  __int128 v21;
  uint64_t *v22;
  __int128 v23;
  uint64_t *v24;
  __int128 v25;
  uint64_t *v26;
  __int128 v27;
  std::string *v28;
  __int128 v29;
  std::string *v30;
  __int128 v31;
  std::string *v32;
  __int128 v33;
  std::string *v34;
  __int128 v35;
  std::string *v36;
  __int128 v37;
  std::string *v38;
  __int128 v39;
  void *v40;
  uint64_t *v41;
  __int128 v42;
  uint64_t *v43;
  __int128 v44;
  uint64_t *v45;
  uint64_t *v46;
  const void **v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t *v50;
  BOOL v51;
  uint64_t *v52;
  uint64_t *v53;
  const void **v54;
  uint64_t *v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t *v58;
  uint64_t *v59;
  const void **v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t *v63;
  std::string *v64;
  __int128 v65;
  std::string *v66;
  __int128 v67;
  std::string *v68;
  __int128 v69;
  std::string *v70;
  __int128 v71;
  std::string *v72;
  std::string::size_type v73;
  std::string *v74;
  __int128 v75;
  std::string *v76;
  __int128 v77;
  std::string *v78;
  __int128 v79;
  std::string *v80;
  __int128 v81;
  std::string *v82;
  std::string::size_type size;
  std::string *v84;
  __int128 v85;
  std::string *v86;
  __int128 v87;
  uint64_t v88;
  int v89;
  uint64_t **v90;
  std::string v91;
  uint64_t v92;
  std::string v93;
  uint64_t v94;
  char *v95[3];
  uint64_t *v96;
  _QWORD *v97[4];
  std::string v98;
  std::string v99;
  std::string v100;
  std::string v101;
  std::string __p;
  _BYTE v103[24];
  uint64_t v104;
  char *v105[3];
  uint64_t *v106;
  _QWORD *v107[4];
  std::string v108;
  std::string::size_type v109;
  __int128 v110;
  uint64_t v111;

  CoreML::Result::Result((CoreML::Result *)&v109);
  CoreML::validateInputCount((CoreML *)a2, 0, 1, (CoreML::Result *)v103);
  v109 = *(_QWORD *)v103;
  if (SHIBYTE(v111) < 0)
    operator delete((void *)v110);
  v110 = *(_OWORD *)&v103[8];
  v111 = v104;
  if (CoreML::Result::good((CoreML::Result *)&v109))
  {
    CoreML::Result::Result((CoreML::Result *)v103);
    v109 = *(_QWORD *)v103;
    if (SHIBYTE(v111) < 0)
      operator delete((void *)v110);
    v110 = *(_OWORD *)&v103[8];
    v111 = v104;
  }
  v6 = CoreML::Result::good((CoreML::Result *)&v109);
  if (!v6)
  {
    *(_QWORD *)a3 = v109;
    *(_OWORD *)(a3 + 8) = v110;
    *(_QWORD *)(a3 + 24) = v111;
    v110 = 0uLL;
    v111 = 0;
    goto LABEL_123;
  }
  if (!*((_DWORD *)a2 + 18) || (v7 = a2[10][1], v8 = *(unsigned int *)(v7 + 16), (int)v8 < 1))
  {
LABEL_13:
    if (*((_DWORD *)a2 + 35) == 615)
      v11 = a2[16];
    else
      v11 = CoreML::Specification::LoopLayerParams::default_instance((CoreML::Specification::LoopLayerParams *)v6);
    v12 = v11[2];
    if (v11[3])
      v13 = (uint64_t *)v11[3];
    else
      v13 = &CoreML::Specification::_NeuralNetwork_default_instance_;
    if (*(char *)(v12 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v108, *(const std::string::value_type **)v12, *(_QWORD *)(v12 + 8));
    }
    else
    {
      v14 = *(_OWORD *)v12;
      v108.__r_.__value_.__r.__words[2] = *(_QWORD *)(v12 + 16);
      *(_OWORD *)&v108.__r_.__value_.__l.__data_ = v14;
    }
    if (v11[4])
      v15 = (uint64_t *)v11[4];
    else
      v15 = &CoreML::Specification::_NeuralNetwork_default_instance_;
    if (!*((_DWORD *)v15 + 6))
    {
      v22 = a2[14];
      if (*((char *)v22 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v91, (const std::string::value_type *)*v22, v22[1]);
      }
      else
      {
        v23 = *(_OWORD *)v22;
        v91.__r_.__value_.__r.__words[2] = v22[2];
        *(_OWORD *)&v91.__r_.__value_.__l.__data_ = v23;
      }
      v28 = std::string::insert(&v91, 0, "Loop Layer '");
      v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
      v93.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v93.__r_.__value_.__l.__data_ = v29;
      v28->__r_.__value_.__l.__size_ = 0;
      v28->__r_.__value_.__r.__words[2] = 0;
      v28->__r_.__value_.__r.__words[0] = 0;
      v30 = std::string::append(&v93, "' has an empty body network");
      v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
      *(_QWORD *)&v103[16] = *((_QWORD *)&v30->__r_.__value_.__l + 2);
      *(_OWORD *)v103 = v31;
      v30->__r_.__value_.__l.__size_ = 0;
      v30->__r_.__value_.__r.__words[2] = 0;
      v30->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v93.__r_.__value_.__l.__data_);
      if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v91.__r_.__value_.__l.__data_);
      goto LABEL_57;
    }
    v16 = *((_DWORD *)v13 + 6);
    if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v108.__r_.__value_.__l.__size_)
      {
LABEL_29:
        if (v16 > 0)
          goto LABEL_30;
        goto LABEL_44;
      }
    }
    else if (*((_BYTE *)&v108.__r_.__value_.__s + 23))
    {
      goto LABEL_29;
    }
    if (v16 < 1)
    {
      if (v11[5] || *((_DWORD *)a2 + 6))
      {
LABEL_30:
        v90 = (uint64_t **)((char *)this + 56);
        v17 = CoreML::NeuralNetworkSpecValidator::NeuralNetworkSpecValidator(v103, (char *)this + 56, (char *)this + 8, *(unsigned __int8 *)this, *((unsigned int *)this + 20), (char *)this + 32);
        v89 = v16;
        v88 = a3;
        if (v16 >= 1)
        {
          CoreML::NeuralNetworkSpecValidator::validateNeuralNetwork<CoreML::Specification::NeuralNetworkClassifier>(&v93, v17, v13);
          v109 = v93.__r_.__value_.__r.__words[0];
          if (SHIBYTE(v111) < 0)
            operator delete((void *)v110);
          v110 = *(_OWORD *)&v93.__r_.__value_.__r.__words[1];
          v111 = v94;
          if (!CoreML::Result::good((CoreML::Result *)&v109))
          {
            *(_QWORD *)a3 = v109;
            *(_OWORD *)(a3 + 8) = v110;
            *(_QWORD *)(a3 + 24) = v111;
            v110 = 0uLL;
            v111 = 0;
LABEL_119:
            std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::destroy((uint64_t)&v106, v107[0]);
            std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)v105, v105[1]);
            std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)&v103[8], *(char **)&v103[16]);
LABEL_120:
            if ((SHIBYTE(v108.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_123;
            v40 = (void *)v108.__r_.__value_.__r.__words[0];
            goto LABEL_122;
          }
          if ((CoreML::NeuralNetworkSpecValidator *)((char *)this + 64) == (CoreML::NeuralNetworkSpecValidator *)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>((uint64_t)v90, (const void **)&v108.__r_.__value_.__l.__data_))
          {
            if (v107 == (_QWORD **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>((uint64_t)&v106, (const void **)&v108.__r_.__value_.__l.__data_))
            {
              v43 = a2[14];
              if (*((char *)v43 + 23) < 0)
              {
                std::string::__init_copy_ctor_external(&v100, (const std::string::value_type *)*v43, v43[1]);
              }
              else
              {
                v44 = *(_OWORD *)v43;
                v100.__r_.__value_.__r.__words[2] = v43[2];
                *(_OWORD *)&v100.__r_.__value_.__l.__data_ = v44;
              }
              v78 = std::string::insert(&v100, 0, "Loop Layer '");
              v79 = *(_OWORD *)&v78->__r_.__value_.__l.__data_;
              v101.__r_.__value_.__r.__words[2] = v78->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v101.__r_.__value_.__l.__data_ = v79;
              v78->__r_.__value_.__l.__size_ = 0;
              v78->__r_.__value_.__r.__words[2] = 0;
              v78->__r_.__value_.__r.__words[0] = 0;
              v80 = std::string::append(&v101, "': has conditionVar named '");
              v81 = *(_OWORD *)&v80->__r_.__value_.__l.__data_;
              __p.__r_.__value_.__r.__words[2] = v80->__r_.__value_.__r.__words[2];
              *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v81;
              v80->__r_.__value_.__l.__size_ = 0;
              v80->__r_.__value_.__r.__words[2] = 0;
              v80->__r_.__value_.__r.__words[0] = 0;
              if ((v108.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v82 = &v108;
              else
                v82 = (std::string *)v108.__r_.__value_.__r.__words[0];
              if ((v108.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                size = HIBYTE(v108.__r_.__value_.__r.__words[2]);
              else
                size = v108.__r_.__value_.__l.__size_;
              v84 = std::string::append(&__p, (const std::string::value_type *)v82, size);
              v85 = *(_OWORD *)&v84->__r_.__value_.__l.__data_;
              v91.__r_.__value_.__r.__words[2] = v84->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v91.__r_.__value_.__l.__data_ = v85;
              v84->__r_.__value_.__l.__size_ = 0;
              v84->__r_.__value_.__r.__words[2] = 0;
              v84->__r_.__value_.__r.__words[0] = 0;
              v86 = std::string::append(&v91, "' which is not produced by the condition network");
              v87 = *(_OWORD *)&v86->__r_.__value_.__l.__data_;
              v93.__r_.__value_.__r.__words[2] = v86->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v93.__r_.__value_.__l.__data_ = v87;
              v86->__r_.__value_.__l.__size_ = 0;
              v86->__r_.__value_.__r.__words[2] = 0;
              v86->__r_.__value_.__r.__words[0] = 0;
              if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v91.__r_.__value_.__l.__data_);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
              if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v101.__r_.__value_.__l.__data_);
              if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v100.__r_.__value_.__l.__data_);
              CoreML::Result::Result((_DWORD *)a3, 13);
              if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v93.__r_.__value_.__l.__data_);
              goto LABEL_119;
            }
          }
          else
          {
            v91.__r_.__value_.__r.__words[0] = (std::string::size_type)&v108;
            v18 = std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v90, (const void **)&v108.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&v91);
            std::set<std::string>::set[abi:ne180100]((uint64_t *)&v93, (const void ***)v18 + 7);
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v108;
            v19 = std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v106, (const void **)&v108.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&__p);
            std::set<std::string>::set[abi:ne180100]((uint64_t *)&v91, (const void ***)v19 + 7);
            if (std::operator==[abi:ne180100]<std::string,std::less<std::string>,std::allocator<std::string>>(&v93, (unsigned __int8 **)&v91))
            {
              v20 = a2[14];
              if (*((char *)v20 + 23) < 0)
              {
                std::string::__init_copy_ctor_external(&v98, (const std::string::value_type *)*v20, v20[1]);
              }
              else
              {
                v21 = *(_OWORD *)v20;
                v98.__r_.__value_.__r.__words[2] = v20[2];
                *(_OWORD *)&v98.__r_.__value_.__l.__data_ = v21;
              }
              v68 = std::string::insert(&v98, 0, "Loop Layer '");
              v69 = *(_OWORD *)&v68->__r_.__value_.__l.__data_;
              v99.__r_.__value_.__r.__words[2] = v68->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v99.__r_.__value_.__l.__data_ = v69;
              v68->__r_.__value_.__l.__size_ = 0;
              v68->__r_.__value_.__r.__words[2] = 0;
              v68->__r_.__value_.__r.__words[0] = 0;
              v70 = std::string::append(&v99, "': has conditionVar named '");
              v71 = *(_OWORD *)&v70->__r_.__value_.__l.__data_;
              v100.__r_.__value_.__r.__words[2] = v70->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v100.__r_.__value_.__l.__data_ = v71;
              v70->__r_.__value_.__l.__size_ = 0;
              v70->__r_.__value_.__r.__words[2] = 0;
              v70->__r_.__value_.__r.__words[0] = 0;
              if ((v108.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v72 = &v108;
              else
                v72 = (std::string *)v108.__r_.__value_.__r.__words[0];
              if ((v108.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v73 = HIBYTE(v108.__r_.__value_.__r.__words[2]);
              else
                v73 = v108.__r_.__value_.__l.__size_;
              v74 = std::string::append(&v100, (const std::string::value_type *)v72, v73);
              v75 = *(_OWORD *)&v74->__r_.__value_.__l.__data_;
              v101.__r_.__value_.__r.__words[2] = v74->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v101.__r_.__value_.__l.__data_ = v75;
              v74->__r_.__value_.__l.__size_ = 0;
              v74->__r_.__value_.__r.__words[2] = 0;
              v74->__r_.__value_.__r.__words[0] = 0;
              v76 = std::string::append(&v101, "' which is not produced by the condition network");
              v77 = *(_OWORD *)&v76->__r_.__value_.__l.__data_;
              __p.__r_.__value_.__r.__words[2] = v76->__r_.__value_.__r.__words[2];
              *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v77;
              v76->__r_.__value_.__l.__size_ = 0;
              v76->__r_.__value_.__r.__words[2] = 0;
              v76->__r_.__value_.__r.__words[0] = 0;
              if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v101.__r_.__value_.__l.__data_);
              if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v100.__r_.__value_.__l.__data_);
              if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v99.__r_.__value_.__l.__data_);
              if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v98.__r_.__value_.__l.__data_);
              CoreML::Result::Result((_DWORD *)a3, 13);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
              std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)&v91, (char *)v91.__r_.__value_.__l.__size_);
              std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)&v93, (char *)v93.__r_.__value_.__l.__size_);
              goto LABEL_119;
            }
            std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)&v91, (char *)v91.__r_.__value_.__l.__size_);
            std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)&v93, (char *)v93.__r_.__value_.__l.__size_);
          }
          v45 = v106;
          if (v106 != (uint64_t *)v107)
          {
            do
            {
              if (*((char *)v45 + 55) < 0)
                std::string::__init_copy_ctor_external(&v93, (const std::string::value_type *)v45[4], v45[5]);
              else
                v93 = *(std::string *)(v45 + 4);
              v91.__r_.__value_.__r.__words[0] = (std::string::size_type)&v93;
              v46 = std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v90, (const void **)&v93.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&v91);
              v91.__r_.__value_.__r.__words[0] = (std::string::size_type)&v93;
              v47 = (const void **)std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v106, (const void **)&v93.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&v91)[7];
              v91.__r_.__value_.__r.__words[0] = (std::string::size_type)&v93;
              v48 = std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v106, (const void **)&v93.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&v91);
              std::set<std::string>::insert[abi:ne180100]<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>(v46 + 7, v47, (const void ***)v48 + 8);
              if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v93.__r_.__value_.__l.__data_);
              v49 = (uint64_t *)v45[1];
              if (v49)
              {
                do
                {
                  v50 = v49;
                  v49 = (uint64_t *)*v49;
                }
                while (v49);
              }
              else
              {
                do
                {
                  v50 = (uint64_t *)v45[2];
                  v51 = *v50 == (_QWORD)v45;
                  v45 = v50;
                }
                while (!v51);
              }
              v45 = v50;
            }
            while (v50 != (uint64_t *)v107);
          }
        }
        CoreML::NeuralNetworkSpecValidator::NeuralNetworkSpecValidator(&v93, v90, (char *)this + 8, *(unsigned __int8 *)this, (*((_DWORD *)this + 20) + 1), (char *)this + 32);
        CoreML::NeuralNetworkSpecValidator::validateNeuralNetwork<CoreML::Specification::NeuralNetworkClassifier>(&v91, &v93, v15);
        v109 = v91.__r_.__value_.__r.__words[0];
        if (SHIBYTE(v111) < 0)
          operator delete((void *)v110);
        v110 = *(_OWORD *)&v91.__r_.__value_.__r.__words[1];
        v111 = v92;
        if (CoreML::Result::good((CoreML::Result *)&v109))
        {
          if (v89 <= 0)
          {
            v58 = v96;
            if (v96 != (uint64_t *)v97)
            {
              do
              {
                if (*((char *)v58 + 55) < 0)
                  std::string::__init_copy_ctor_external(&v91, (const std::string::value_type *)v58[4], v58[5]);
                else
                  v91 = *(std::string *)(v58 + 4);
                __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v91;
                v59 = std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v90, (const void **)&v91.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&__p);
                __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v91;
                v60 = (const void **)std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v96, (const void **)&v91.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&__p)[7];
                __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v91;
                v61 = std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v96, (const void **)&v91.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&__p);
                std::set<std::string>::insert[abi:ne180100]<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>(v59 + 7, v60, (const void ***)v61 + 8);
                if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v91.__r_.__value_.__l.__data_);
                v62 = (uint64_t *)v58[1];
                if (v62)
                {
                  do
                  {
                    v63 = v62;
                    v62 = (uint64_t *)*v62;
                  }
                  while (v62);
                }
                else
                {
                  do
                  {
                    v63 = (uint64_t *)v58[2];
                    v51 = *v63 == (_QWORD)v58;
                    v58 = v63;
                  }
                  while (!v51);
                }
                v58 = v63;
              }
              while (v63 != (uint64_t *)v97);
            }
          }
          else
          {
            v52 = v106;
            if (v106 != (uint64_t *)v107)
            {
              do
              {
                if (*((char *)v52 + 55) < 0)
                  std::string::__init_copy_ctor_external(&v91, (const std::string::value_type *)v52[4], v52[5]);
                else
                  v91 = *(std::string *)(v52 + 4);
                if (v97 != (_QWORD **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>((uint64_t)&v96, (const void **)&v91.__r_.__value_.__l.__data_))
                {
                  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v91;
                  v53 = std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v90, (const void **)&v91.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&__p);
                  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v91;
                  v54 = (const void **)std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v96, (const void **)&v91.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&__p)[7];
                  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v91;
                  v55 = std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v96, (const void **)&v91.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&__p);
                  std::set<std::string>::insert[abi:ne180100]<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>(v53 + 7, v54, (const void ***)v55 + 8);
                }
                if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v91.__r_.__value_.__l.__data_);
                v56 = (uint64_t *)v52[1];
                if (v56)
                {
                  do
                  {
                    v57 = v56;
                    v56 = (uint64_t *)*v56;
                  }
                  while (v56);
                }
                else
                {
                  do
                  {
                    v57 = (uint64_t *)v52[2];
                    v51 = *v57 == (_QWORD)v52;
                    v52 = v57;
                  }
                  while (!v51);
                }
                v52 = v57;
              }
              while (v57 != (uint64_t *)v107);
            }
          }
        }
        *(_QWORD *)v88 = v109;
        *(_OWORD *)(v88 + 8) = v110;
        *(_QWORD *)(v88 + 24) = v111;
        v110 = 0uLL;
        v111 = 0;
        std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::destroy((uint64_t)&v96, v97[0]);
        std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)v95, v95[1]);
        std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)&v93.__r_.__value_.__l.__size_, (char *)v93.__r_.__value_.__r.__words[2]);
        goto LABEL_119;
      }
      v41 = a2[14];
      if (*((char *)v41 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v91, (const std::string::value_type *)*v41, v41[1]);
      }
      else
      {
        v42 = *(_OWORD *)v41;
        v91.__r_.__value_.__r.__words[2] = v41[2];
        *(_OWORD *)&v91.__r_.__value_.__l.__data_ = v42;
      }
      v64 = std::string::insert(&v91, 0, "Loop Layer '");
      v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
      v93.__r_.__value_.__r.__words[2] = v64->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v93.__r_.__value_.__l.__data_ = v65;
      v64->__r_.__value_.__l.__size_ = 0;
      v64->__r_.__value_.__r.__words[2] = 0;
      v64->__r_.__value_.__r.__words[0] = 0;
      v66 = std::string::append(&v93, "': has no input, no condition network and max loop iterations is 0.");
      v67 = *(_OWORD *)&v66->__r_.__value_.__l.__data_;
      *(_QWORD *)&v103[16] = *((_QWORD *)&v66->__r_.__value_.__l + 2);
      *(_OWORD *)v103 = v67;
      v66->__r_.__value_.__l.__size_ = 0;
      v66->__r_.__value_.__r.__words[2] = 0;
      v66->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v93.__r_.__value_.__l.__data_);
      if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v91.__r_.__value_.__l.__data_);
LABEL_57:
      CoreML::Result::Result((_DWORD *)a3, 13);
      if ((v103[23] & 0x80000000) != 0)
        operator delete(*(void **)v103);
      goto LABEL_120;
    }
LABEL_44:
    v26 = a2[14];
    if (*((char *)v26 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v91, (const std::string::value_type *)*v26, v26[1]);
    }
    else
    {
      v27 = *(_OWORD *)v26;
      v91.__r_.__value_.__r.__words[2] = v26[2];
      *(_OWORD *)&v91.__r_.__value_.__l.__data_ = v27;
    }
    v32 = std::string::insert(&v91, 0, "Loop Layer '");
    v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
    v93.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v93.__r_.__value_.__l.__data_ = v33;
    v32->__r_.__value_.__l.__size_ = 0;
    v32->__r_.__value_.__r.__words[2] = 0;
    v32->__r_.__value_.__r.__words[0] = 0;
    v34 = std::string::append(&v93, "': condition variable must be provided if condition network exists and vice versa.");
    v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
    *(_QWORD *)&v103[16] = *((_QWORD *)&v34->__r_.__value_.__l + 2);
    *(_OWORD *)v103 = v35;
    v34->__r_.__value_.__l.__size_ = 0;
    v34->__r_.__value_.__r.__words[2] = 0;
    v34->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v93.__r_.__value_.__l.__data_);
    if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v91.__r_.__value_.__l.__data_);
    goto LABEL_57;
  }
  v9 = (uint64_t *)(*(_QWORD *)(v7 + 24) + 8);
  while (1)
  {
    v10 = *v9++;
    if (v10 >= 2)
      break;
    if (!--v8)
      goto LABEL_13;
  }
  v24 = a2[14];
  if (*((char *)v24 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v91, (const std::string::value_type *)*v24, v24[1]);
  }
  else
  {
    v25 = *(_OWORD *)v24;
    v91.__r_.__value_.__r.__words[2] = v24[2];
    *(_OWORD *)&v91.__r_.__value_.__l.__data_ = v25;
  }
  v36 = std::string::insert(&v91, 0, "Loop Layer '");
  v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
  v93.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v93.__r_.__value_.__l.__data_ = v37;
  v36->__r_.__value_.__l.__size_ = 0;
  v36->__r_.__value_.__r.__words[2] = 0;
  v36->__r_.__value_.__r.__words[0] = 0;
  v38 = std::string::append(&v93, "' input's length cannot be more than 1");
  v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
  *(_QWORD *)&v103[16] = *((_QWORD *)&v38->__r_.__value_.__l + 2);
  *(_OWORD *)v103 = v39;
  v38->__r_.__value_.__l.__size_ = 0;
  v38->__r_.__value_.__r.__words[2] = 0;
  v38->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v93.__r_.__value_.__l.__data_);
  if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v91.__r_.__value_.__l.__data_);
  CoreML::Result::Result((_DWORD *)a3, 13);
  if ((v103[23] & 0x80000000) != 0)
  {
    v40 = *(void **)v103;
LABEL_122:
    operator delete(v40);
  }
LABEL_123:
  if (SHIBYTE(v111) < 0)
    operator delete((void *)v110);
}

void sub_218352DF4(_Unwind_Exception *a1)
{
  uint64_t v1;

  CoreML::NeuralNetworkSpecValidator::~NeuralNetworkSpecValidator((CoreML::NeuralNetworkSpecValidator *)(v1 - 256));
  if (*(char *)(v1 - 137) < 0)
    operator delete(*(void **)(v1 - 160));
  if (*(char *)(v1 - 97) < 0)
    operator delete(*(void **)(v1 - 120));
  _Unwind_Resume(a1);
}

uint64_t std::operator==[abi:ne180100]<std::string,std::less<std::string>,std::allocator<std::string>>(_QWORD *a1, unsigned __int8 **a2)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  uint64_t result;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  BOOL v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  char v11;

  if ((unsigned __int8 *)a1[2] != a2[2])
    return 0;
  v2 = (unsigned __int8 *)(a1 + 1);
  v3 = (unsigned __int8 *)*a1;
  if ((_QWORD *)*a1 == a1 + 1)
    return 1;
  v4 = *a2;
  do
  {
    result = std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)&v11, v3 + 32, v4 + 32);
    if (!(_DWORD)result)
      break;
    v6 = (unsigned __int8 *)*((_QWORD *)v3 + 1);
    v7 = v3;
    if (v6)
    {
      do
      {
        v3 = v6;
        v6 = *(unsigned __int8 **)v6;
      }
      while (v6);
    }
    else
    {
      do
      {
        v3 = (unsigned __int8 *)*((_QWORD *)v7 + 2);
        v8 = *(_QWORD *)v3 == (_QWORD)v7;
        v7 = v3;
      }
      while (!v8);
    }
    v9 = (unsigned __int8 *)*((_QWORD *)v4 + 1);
    if (v9)
    {
      do
      {
        v10 = v9;
        v9 = *(unsigned __int8 **)v9;
      }
      while (v9);
    }
    else
    {
      do
      {
        v10 = (unsigned __int8 *)*((_QWORD *)v4 + 2);
        v8 = *(_QWORD *)v10 == (_QWORD)v4;
        v4 = v10;
      }
      while (!v8);
    }
    v4 = v10;
  }
  while (v3 != v2);
  return result;
}

void CoreML::NeuralNetworkSpecValidator::validateLoopContinueBreakLayer(CoreML::NeuralNetworkSpecValidator *this@<X0>, const CoreML::Specification::NeuralNetworkLayer *a2@<X1>, uint64_t a3@<X8>)
{
  __int128 *v6;
  __int128 v7;
  __int128 *v8;
  __int128 v9;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  std::string *v13;
  __int128 v14;
  void *v15;
  char v16;
  std::string v17;
  std::string v18;
  void *v19;
  __int128 v20;
  uint64_t v21;
  void *v22;
  __int128 __p;
  uint64_t v24;
  _QWORD v25[3];

  v25[2] = *MEMORY[0x24BDAC8D0];
  CoreML::Result::Result((CoreML::Result *)&v22);
  CoreML::Result::Result((CoreML::Result *)&v19);
  v22 = v19;
  if (SHIBYTE(v24) < 0)
    operator delete((void *)__p);
  __p = v20;
  v24 = v21;
  if (CoreML::Result::good((CoreML::Result *)&v22))
  {
    CoreML::Result::Result((CoreML::Result *)&v19);
    v22 = v19;
    if (SHIBYTE(v24) < 0)
      operator delete((void *)__p);
    __p = v20;
    v24 = v21;
  }
  if (CoreML::Result::good((CoreML::Result *)&v22) && !*((_DWORD *)this + 20))
  {
    v19 = 0;
    v20 = 0uLL;
    if (*((_DWORD *)a2 + 35) == 620)
    {
      v6 = (__int128 *)*((_QWORD *)a2 + 14);
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v17, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
      }
      else
      {
        v7 = *v6;
        v17.__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
        *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v7;
      }
      v10 = std::string::insert(&v17, 0, "Loop Break Layer '");
      v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
      v18.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v11;
      v10->__r_.__value_.__l.__size_ = 0;
      v10->__r_.__value_.__r.__words[2] = 0;
      v10->__r_.__value_.__r.__words[0] = 0;
      v12 = std::string::append(&v18, "' must be inside the bodyNetwork of a loop layer.");
    }
    else
    {
      v8 = (__int128 *)*((_QWORD *)a2 + 14);
      if (*((char *)v8 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v17, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
      }
      else
      {
        v9 = *v8;
        v17.__r_.__value_.__r.__words[2] = *((_QWORD *)v8 + 2);
        *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v9;
      }
      v13 = std::string::insert(&v17, 0, "Loop Continue Layer '");
      v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
      v18.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v14;
      v13->__r_.__value_.__l.__size_ = 0;
      v13->__r_.__value_.__r.__words[2] = 0;
      v13->__r_.__value_.__r.__words[0] = 0;
      v12 = std::string::append(&v18, "' must be inside the bodyNetwork of a loop layer.");
    }
    v15 = (void *)v12->__r_.__value_.__r.__words[0];
    v25[0] = v12->__r_.__value_.__l.__size_;
    *(_QWORD *)((char *)v25 + 7) = *(std::string::size_type *)((char *)&v12->__r_.__value_.__r.__words[1] + 7);
    v16 = HIBYTE(v12->__r_.__value_.__r.__words[2]);
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    *(_QWORD *)((char *)&v20 + 7) = *(_QWORD *)((char *)v25 + 7);
    v19 = v15;
    *(_QWORD *)&v20 = v25[0];
    HIBYTE(v20) = v16;
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v18.__r_.__value_.__l.__data_);
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v17.__r_.__value_.__l.__data_);
    CoreML::Result::Result((_DWORD *)a3, 13);
    if (SHIBYTE(v20) < 0)
      operator delete(v19);
    if (SHIBYTE(v24) < 0)
      operator delete((void *)__p);
  }
  else
  {
    *(_QWORD *)a3 = v22;
    *(_OWORD *)(a3 + 8) = __p;
    *(_QWORD *)(a3 + 24) = v24;
  }
}

void sub_2183533B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a35 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double CoreML::NeuralNetworkSpecValidator::validateActivationLayers@<D0>(const CoreML::Specification::NeuralNetworkLayer *a1@<X1>, uint64_t a2@<X8>)
{
  void **v5;
  double result;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;

  CoreML::Result::Result((CoreML::Result *)a2);
  CoreML::validateInputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v7);
  *(_QWORD *)a2 = v7;
  v5 = (void **)(a2 + 8);
  if (*(char *)(a2 + 31) < 0)
    operator delete(*v5);
  *(_OWORD *)v5 = v8;
  *(_QWORD *)(a2 + 24) = v9;
  if (CoreML::Result::good((CoreML::Result *)a2))
  {
    CoreML::validateOutputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v7);
    *(_QWORD *)a2 = v7;
    if (*(char *)(a2 + 31) < 0)
      operator delete(*v5);
    result = *(double *)&v8;
    *(_OWORD *)v5 = v8;
    *(_QWORD *)(a2 + 24) = v9;
  }
  return result;
}

void sub_2183534F0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*(void **)(v1 + 8));
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateRankPreservingReshapeLayer(uint64_t **a1@<X1>, uint64_t a2@<X8>)
{
  _BOOL8 v5;
  uint64_t *v6;
  int v7;
  int v8;
  std::string *v9;
  __int128 v10;
  uint64_t *v11;
  __int128 v12;
  uint64_t *v13;
  __int128 v14;
  std::string *v15;
  __int128 v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  __int128 v22;
  std::string __p;
  std::string v24;
  _BYTE v25[24];
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;

  CoreML::Result::Result((CoreML::Result *)&v27);
  CoreML::validateInputCount((CoreML *)a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)v25);
  v27 = *(_QWORD *)v25;
  if (SHIBYTE(v29) < 0)
    operator delete((void *)v28);
  v28 = *(_OWORD *)&v25[8];
  v29 = v26;
  if (CoreML::Result::good((CoreML::Result *)&v27))
  {
    CoreML::validateOutputCount((CoreML *)a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)v25);
    v27 = *(_QWORD *)v25;
    if (SHIBYTE(v29) < 0)
      operator delete((void *)v28);
    v28 = *(_OWORD *)&v25[8];
    v29 = v26;
    if (!CoreML::Result::good((CoreML::Result *)&v27))
      goto LABEL_16;
  }
  CoreML::validateRankExists((CoreML *)a1, (CoreML::Result *)v25);
  v27 = *(_QWORD *)v25;
  if (SHIBYTE(v29) < 0)
    operator delete((void *)v28);
  v28 = *(_OWORD *)&v25[8];
  v29 = v26;
  v5 = CoreML::Result::good((CoreML::Result *)&v27);
  if (!v5)
    goto LABEL_16;
  if (*((_DWORD *)a1 + 35) == 1150)
    v6 = a1[16];
  else
    v6 = CoreML::Specification::RankPreservingReshapeLayerParams::default_instance((CoreML::Specification::RankPreservingReshapeLayerParams *)v5);
  v7 = *((_DWORD *)v6 + 4);
  if (v7)
  {
    v8 = *(_DWORD *)(a1[10][1] + 36);
    if (v8 == *(_DWORD *)(a1[13][1] + 36))
    {
      if (v8 == v7)
      {
LABEL_16:
        *(_QWORD *)a2 = v27;
        *(_OWORD *)(a2 + 8) = v28;
        *(_QWORD *)(a2 + 24) = v29;
        v28 = 0uLL;
        v29 = 0;
        goto LABEL_38;
      }
      v13 = a1[14];
      if (*((char *)v13 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)*v13, v13[1]);
      }
      else
      {
        v14 = *(_OWORD *)v13;
        __p.__r_.__value_.__r.__words[2] = v13[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v14;
      }
      v19 = std::string::insert(&__p, 0, "RankPreservingReshape Layer '");
      v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v24.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      v21 = std::string::append(&v24, "': input rank must be same as the length of the target shape property.");
      v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
      *(_QWORD *)&v25[16] = *((_QWORD *)&v21->__r_.__value_.__l + 2);
      *(_OWORD *)v25 = v22;
      v21->__r_.__value_.__l.__size_ = 0;
      v21->__r_.__value_.__r.__words[2] = 0;
      v21->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v24.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    else
    {
      v11 = a1[14];
      if (*((char *)v11 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)*v11, v11[1]);
      }
      else
      {
        v12 = *(_OWORD *)v11;
        __p.__r_.__value_.__r.__words[2] = v11[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v12;
      }
      v15 = std::string::insert(&__p, 0, "RankPreservingReshape Layer '");
      v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
      v24.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v16;
      v15->__r_.__value_.__l.__size_ = 0;
      v15->__r_.__value_.__r.__words[2] = 0;
      v15->__r_.__value_.__r.__words[0] = 0;
      v17 = std::string::append(&v24, "': input and output rank must be equal.");
      v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      *(_QWORD *)&v25[16] = *((_QWORD *)&v17->__r_.__value_.__l + 2);
      *(_OWORD *)v25 = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v24.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    CoreML::Result::Result((_DWORD *)a2, 13);
  }
  else
  {
    std::operator+<char>();
    v9 = std::string::append(&v24, "' layer.");
    v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    *(_QWORD *)&v25[16] = *((_QWORD *)&v9->__r_.__value_.__l + 2);
    *(_OWORD *)v25 = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v24.__r_.__value_.__l.__data_);
    CoreML::Result::Result((_DWORD *)a2, 13);
  }
  if ((v25[23] & 0x80000000) != 0)
    operator delete(*(void **)v25);
LABEL_38:
  if (SHIBYTE(v29) < 0)
    operator delete((void *)v28);
}

void sub_218353874(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (*(char *)(v28 - 33) < 0)
    operator delete(*(void **)(v28 - 56));
  _Unwind_Resume(exception_object);
}

