void sub_21814D780(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void **p_p)
{
  unint64_t **v12;
  uint64_t v13;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t *v34;
  uint64_t v35;
  unint64_t *v36;
  void *v37;
  unint64_t *v38;
  unint64_t *v39;
  unsigned int v40;

  MEMORY[0x219A19A08](v13, 0x1030C407B73B9F7);
  switch(*((_BYTE *)v12 + 12))
  {
    case 2:
      v15 = *v12;
      do
      {
        v16 = __ldaxr(v15);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, v15));
      if (v17)
        goto LABEL_46;
      v33 = *v12;
      if (!*v12)
        goto LABEL_45;
      if (*((char *)v33 + 31) < 0)
        operator delete((void *)v33[1]);
      v34 = v33;
      v35 = 0x1012C404EF22A49;
      goto LABEL_44;
    case 3:
      v18 = *v12;
      do
      {
        v19 = __ldaxr(v18);
        v20 = v19 - 1;
      }
      while (__stlxr(v20, v18));
      if (v20)
        goto LABEL_46;
      v36 = *v12;
      if (!*v12)
        goto LABEL_45;
      v37 = (void *)v36[1];
      if (v37)
      {
        v36[2] = (unint64_t)v37;
        operator delete(v37);
      }
      v34 = v36;
      v35 = 0x1080C409938AC02;
      goto LABEL_44;
    case 4:
      v21 = *v12;
      do
      {
        v22 = __ldaxr(v21);
        v23 = v22 - 1;
      }
      while (__stlxr(v23, v21));
      if (v23)
        goto LABEL_46;
      v38 = *v12;
      if (!*v12)
        goto LABEL_45;
      p_p = (void **)(v38 + 1);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&p_p);
      goto LABEL_36;
    case 5:
      v24 = *v12;
      do
      {
        v25 = __ldaxr(v24);
        v26 = v25 - 1;
      }
      while (__stlxr(v26, v24));
      if (v26)
        goto LABEL_46;
      v38 = *v12;
      if (!*v12)
        goto LABEL_45;
      p_p = (void **)(v38 + 1);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&p_p);
LABEL_36:
      v34 = v38;
      v35 = 0x1020C405E66F15BLL;
      goto LABEL_44;
    case 8:
      v27 = *v12;
      do
      {
        v28 = __ldaxr(v27);
        v29 = v28 - 1;
      }
      while (__stlxr(v29, v27));
      if (v29)
        goto LABEL_46;
      v39 = *v12;
      if (!*v12)
        goto LABEL_45;
      boost::detail::shared_count::~shared_count((unsigned int **)v39 + 2);
      v34 = v39;
      v40 = -235920773;
      goto LABEL_43;
    case 9:
      v30 = *v12;
      do
      {
        v31 = __ldaxr(v30);
        v32 = v31 - 1;
      }
      while (__stlxr(v32, v30));
      if (v32)
        goto LABEL_46;
      if (!*v12)
        goto LABEL_45;
      v34 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*v12);
      v40 = 2071181815;
LABEL_43:
      v35 = v40 | 0x1030C4000000000;
LABEL_44:
      MEMORY[0x219A19A08](v34, v35);
LABEL_45:
      *v12 = 0;
LABEL_46:
      *v12 = 0;
      *((_DWORD *)v12 + 2) = 0;
      *((_BYTE *)v12 + 12) = 0;
      p_p = &__p;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&p_p);
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_46;
  }
}

uint64_t turi::groupby_operators::zip_list::set_input_types(uint64_t a1, _BYTE **a2)
{
  BOOL v2;

  v2 = **a2 == 1;
  *(_BYTE *)(a1 + 33) = v2;
  if (v2)
    return 3;
  else
    return 4;
}

_QWORD *turi::groupby_operators::zip_list::name@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "List");
}

uint64_t turi::groupby_operators::zip_list::save(turi::groupby_operators::zip_list *this, turi::oarchive *a2)
{
  _BYTE *v4;
  unint64_t v5;
  _BYTE *v6;
  unint64_t v7;
  _BYTE *v8;
  size_t v10;
  _QWORD *v11;
  size_t v12;
  BOOL v13;
  std::vector<char>::size_type v14;
  size_t v15;
  _QWORD *v16;
  size_t v17;
  BOOL v18;
  std::vector<char>::size_type v19;

  v4 = (char *)this + 32;
  if (*(_QWORD *)a2)
  {
    std::ostream::write();
  }
  else
  {
    v5 = *((_QWORD *)a2 + 5);
    if (*((_QWORD *)a2 + 4) + 1 > v5)
    {
      v10 = 2 * v5 + 2;
      *((_QWORD *)a2 + 5) = v10;
      v11 = (_QWORD *)*((_QWORD *)a2 + 2);
      if (v11)
      {
        v6 = (_BYTE *)*v11;
        v12 = v11[1] - *v11;
        v13 = v10 >= v12;
        v14 = v10 - v12;
        if (v14 != 0 && v13)
        {
          std::vector<char>::__append(*((std::vector<char> **)a2 + 2), v14);
          v6 = (_BYTE *)**((_QWORD **)a2 + 2);
        }
        else if (!v13)
        {
          v11[1] = &v6[v10];
        }
      }
      else
      {
        v6 = malloc_type_realloc(*((void **)a2 + 3), v10, 0xF6EA6B1uLL);
      }
      *((_QWORD *)a2 + 3) = v6;
    }
    else
    {
      v6 = (_BYTE *)*((_QWORD *)a2 + 3);
    }
    v6[(*((_QWORD *)a2 + 4))++] = *v4;
  }
  if (*(_QWORD *)a2)
  {
    std::ostream::write();
  }
  else
  {
    v7 = *((_QWORD *)a2 + 5);
    if (*((_QWORD *)a2 + 4) + 1 > v7)
    {
      v15 = 2 * v7 + 2;
      *((_QWORD *)a2 + 5) = v15;
      v16 = (_QWORD *)*((_QWORD *)a2 + 2);
      if (v16)
      {
        v8 = (_BYTE *)*v16;
        v17 = v16[1] - *v16;
        v18 = v15 >= v17;
        v19 = v15 - v17;
        if (v19 != 0 && v18)
        {
          std::vector<char>::__append(*((std::vector<char> **)a2 + 2), v19);
          v8 = (_BYTE *)**((_QWORD **)a2 + 2);
        }
        else if (!v18)
        {
          v16[1] = &v8[v15];
        }
      }
      else
      {
        v8 = malloc_type_realloc(*((void **)a2 + 3), v15, 0xF6EA6B1uLL);
      }
      *((_QWORD *)a2 + 3) = v8;
    }
    else
    {
      v8 = (_BYTE *)*((_QWORD *)a2 + 3);
    }
    v8[(*((_QWORD *)a2 + 4))++] = *((_BYTE *)this + 33);
  }
  return turi::archive_detail::vector_serialize_impl<turi::oarchive,turi::flexible_type,false>::exec((uint64_t)a2, (uint64_t *)this + 1);
}

void turi::groupby_operators::zip_list::load(turi::groupby_operators::zip_list *this, turi::iarchive *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *((_QWORD *)a2 + 2);
  if (v4)
    *((_BYTE *)this + 32) = *(_BYTE *)(v4 + (*((_QWORD *)a2 + 3))++);
  else
    std::istream::read();
  v5 = *((_QWORD *)a2 + 2);
  if (v5)
    *((_BYTE *)this + 33) = *(_BYTE *)(v5 + (*((_QWORD *)a2 + 3))++);
  else
    std::istream::read();
  turi::archive_detail::vector_deserialize_impl<turi::iarchive,turi::flexible_type,false>::exec(a2, (uint64_t *)this + 1);
}

void turi::groupby_operators::zip_list::~zip_list(turi::groupby_operators::zip_list *this)
{
  void **v1;

  *(_QWORD *)this = &unk_24D9306F0;
  v1 = (void **)((char *)this + 8);
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v1);
}

{
  void **v2;

  *(_QWORD *)this = &unk_24D9306F0;
  v2 = (void **)((char *)this + 8);
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v2);
  MEMORY[0x219A19A08](this, 0x10A1C405B464BD3);
}

void turi::groupby_operators::zip_list::set_input_type()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = "set_input_type is not supported for zip_list";
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

void std::vector<double>::__init_with_size[abi:ne180100]<std::__wrap_iter<turi::flexible_type const*>,std::__wrap_iter<turi::flexible_type const*>>(_QWORD *a1, int *a2, int *a3, unint64_t a4)
{
  if (a4)
  {
    std::vector<unsigned long>::__vallocate[abi:ne180100](a1, a4);
    std::vector<double>::__construct_at_end<std::__wrap_iter<turi::flexible_type const*>,std::__wrap_iter<turi::flexible_type const*>>((uint64_t)a1, a2, a3);
  }
}

void sub_21814E2DC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<double>::__construct_at_end<std::__wrap_iter<turi::flexible_type const*>,std::__wrap_iter<turi::flexible_type const*>>(uint64_t a1, int *a2, int *a3)
{
  int *v5;
  double *v6;

  if (a2 == a3)
  {
    v6 = *(double **)(a1 + 8);
  }
  else
  {
    v5 = a2;
    v6 = *(double **)(a1 + 8);
    do
    {
      std::allocator<double>::construct[abi:ne180100]<double,turi::flexible_type const&>(a1 + 16, v6, v5);
      v5 += 4;
      ++v6;
    }
    while (v5 != a3);
  }
  *(_QWORD *)(a1 + 8) = v6;
}

void sub_21814E36C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::allocator<double>::construct[abi:ne180100]<double,turi::flexible_type const&>(uint64_t a1, double *a2, int *a3)
{
  double v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  char **v10;
  char *v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  __int128 v20;
  __int128 v21;
  float v22;
  std::runtime_error *exception;
  std::string *v24;
  __int128 v25;
  void *__p[2];
  void *v27[2];
  __int128 v28;
  __int128 v29;
  std::string v30;
  size_t __idx;

  v4 = 0.0;
  switch(*((_BYTE *)a3 + 12))
  {
    case 0:
      v4 = (double)*(uint64_t *)a3;
      break;
    case 1:
      v4 = *(double *)a3;
      break;
    case 2:
      v9 = *(_QWORD *)a3;
      v10 = (char **)(*(_QWORD *)a3 + 8);
      __idx = 0;
      v11 = (char *)v10;
      if (*(char *)(v9 + 31) < 0)
        v11 = *v10;
      std::string::basic_string[abi:ne180100]<0>(__p, v11);
      v12 = std::stod((const std::string *)__p, &__idx);
      if (SHIBYTE(v27[0]) < 0)
        operator delete(__p[0]);
      if (*(char *)(v9 + 31) < 0)
        v13 = *(_QWORD *)(v9 + 16);
      else
        v13 = *(unsigned __int8 *)(v9 + 31);
      if (__idx != v13)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        v24 = std::string::append(&v30, " cannot be interpreted as a float");
        v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
        v27[0] = (void *)v24->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v25;
        v24->__r_.__value_.__l.__size_ = 0;
        v24->__r_.__value_.__r.__words[2] = 0;
        v24->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, (const std::string *)__p);
        __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
      }
      v22 = v12;
      v4 = v22;
      break;
    case 3:
      v5 = *(_QWORD *)a3;
      __p[1] = 0;
      v27[0] = 0;
      __p[0] = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v5 + 8), *(_QWORD *)(v5 + 16), (uint64_t)(*(_QWORD *)(v5 + 16) - *(_QWORD *)(v5 + 8)) >> 3);
      turi::flexible_type_fail(0);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      break;
    case 4:
      v14 = *(_QWORD *)a3;
      __p[1] = 0;
      v27[0] = 0;
      __p[0] = 0;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v14 + 8), *(uint64_t **)(v14 + 16), (uint64_t)(*(_QWORD *)(v14 + 16) - *(_QWORD *)(v14 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v30.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v30);
      break;
    case 5:
      v15 = *(_QWORD *)a3;
      __p[1] = 0;
      v27[0] = 0;
      __p[0] = 0;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v15 + 8), *(uint64_t **)(v15 + 16), (uint64_t)(*(_QWORD *)(v15 + 16) - *(_QWORD *)(v15 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v30.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v30);
      break;
    case 6:
      v4 = (double)a3[2] / 1000000.0 + (double)((uint64_t)(*(_QWORD *)a3 << 8) >> 8);
      break;
    case 7:
      break;
    case 8:
      v16 = *(_QWORD *)a3;
      v17 = *(unsigned int **)(*(_QWORD *)a3 + 16);
      __p[0] = *(void **)(*(_QWORD *)a3 + 8);
      __p[1] = v17;
      if (v17)
      {
        v18 = v17 + 2;
        do
          v19 = __ldxr(v18);
        while (__stxr(v19 + 1, v18));
      }
      v20 = *(_OWORD *)(v16 + 24);
      v21 = *(_OWORD *)(v16 + 56);
      v28 = *(_OWORD *)(v16 + 40);
      v29 = v21;
      *(_OWORD *)v27 = v20;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count((unsigned int **)&__p[1]);
      break;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(_QWORD *)a3 + 8);
      turi::flexible_type_fail(0);
      if (*((_QWORD *)&v28 + 1))
      {
        *(_QWORD *)&v29 = *((_QWORD *)&v28 + 1);
        operator delete(*((void **)&v28 + 1));
      }
      if (v27[0])
      {
        v27[1] = v27[0];
        operator delete(v27[0]);
      }
      v6 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v7 = (unint64_t *)((char *)__p[1] + 8);
        do
          v8 = __ldaxr(v7);
        while (__stlxr(v8 - 1, v7));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      break;
    default:
      turi::apply_binary_op_ff();
  }
  *a2 = v4;
}

void sub_21814E674(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  void *v27;
  int v28;

  if (a14 < 0)
    operator delete(__p);
  if (a27 < 0)
  {
    operator delete(a22);
    if ((v28 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v28)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v27);
  goto LABEL_8;
}

_QWORD *_ZNSt3__115allocate_sharedB8ne180100IN4turi17groupby_operators8quantileENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0xC8uLL);
  result = _ZNSt3__120__shared_ptr_emplaceIN4turi17groupby_operators8quantileENS_9allocatorIS3_EEEC2B8ne180100IJES5_Li0EEES5_DpOT_(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_21814E77C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *_ZNSt3__120__shared_ptr_emplaceIN4turi17groupby_operators8quantileENS_9allocatorIS3_EEEC2B8ne180100IJES5_Li0EEES5_DpOT_(_QWORD *a1)
{
  char v3;

  a1[2] = 0;
  *a1 = &unk_24D930790;
  a1[1] = 0;
  std::allocator<turi::groupby_operators::quantile>::construct[abi:ne180100]<turi::groupby_operators::quantile>((uint64_t)&v3, (uint64_t)(a1 + 3));
  return a1;
}

void sub_21814E7D8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<turi::groupby_operators::quantile>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D930790;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::groupby_operators::quantile>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D930790;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__shared_ptr_emplace<turi::groupby_operators::quantile>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 88))(a1 + 24);
}

uint64_t std::allocator<turi::groupby_operators::quantile>::construct[abi:ne180100]<turi::groupby_operators::quantile>(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a2 + 144) = 0u;
  *(_OWORD *)(a2 + 160) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 128) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_QWORD *)a2 = &unk_24D9307E0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  return turi::sketches::streaming_quantile_sketch<double,std::less<double>>::streaming_quantile_sketch(a2 + 32, 0.005);
}

void sub_21814E8B0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;

  v3 = v2;
  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 16) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

uint64_t turi::groupby_operators::quantile::new_instance(turi::groupby_operators::quantile *this)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = &unk_24D9307E0;
  *(_QWORD *)(v2 + 8) = 0;
  *(_QWORD *)(v2 + 16) = 0;
  *(_QWORD *)(v2 + 24) = 0;
  turi::sketches::streaming_quantile_sketch<double,std::less<double>>::streaming_quantile_sketch(v2 + 32, 0.005);
  if ((turi::groupby_operators::quantile *)v2 != this)
    std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((char *)(v2 + 8), *((char **)this + 1), *((_QWORD *)this + 2), (uint64_t)(*((_QWORD *)this + 2) - *((_QWORD *)this + 1)) >> 3);
  return v2;
}

void sub_21814E968(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 16) = v4;
    operator delete(v4);
  }
  MEMORY[0x219A19A08](v1, 0x10A1C40473C5AE8);
  _Unwind_Resume(a1);
}

void turi::groupby_operators::quantile::add_element_simple(turi::groupby_operators::quantile *this, const turi::flexible_type *a2, __n128 a3)
{
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  _QWORD *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  uint64_t *v30;
  uint64_t *v31;
  int64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  double v44;
  unsigned int v45;
  double v47;
  char v48;
  size_t v49;
  unsigned int v50;
  double *v51;
  double *v52;
  unint64_t v53;
  double *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  double v58;
  double v59;
  unsigned int v60;
  double v61;
  uint64_t v62;
  unsigned int v63;
  unsigned int v64;
  double v66;
  double v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  double v71;
  char **v72;
  char *v73;
  double v74;
  uint64_t v75;
  double v76;
  double v77;
  double v78;
  unsigned int *v79;
  unsigned int *v80;
  unsigned int v81;
  __int128 v82;
  __int128 v83;
  float v84;
  double v85;
  double v86;
  uint64_t v87;
  unsigned __int8 *v88;
  unsigned __int8 *v89;
  std::runtime_error *exception;
  std::string *v91;
  __int128 v92;
  void *__p[2];
  void *v94[2];
  __int128 v95;
  __int128 v96;
  std::string v97;
  size_t __idx;

  switch(byte_254FF06EC)
  {
    case 0:
      switch(*((_BYTE *)a2 + 12))
      {
        case 0:
          if (*(_QWORD *)a2 == turi::FLEX_UNDEFINED)
            return;
          goto LABEL_81;
        case 1:
          v61 = *(double *)a2;
          v62 = turi::FLEX_UNDEFINED;
          goto LABEL_124;
        case 2:
        case 3:
        case 4:
        case 5:
        case 7:
        case 8:
        case 9:
          goto LABEL_81;
        case 6:
          if (turi::FLEX_UNDEFINED == (uint64_t)(*(_QWORD *)a2 << 8) >> 8 && !*((_DWORD *)a2 + 2))
            return;
          goto LABEL_81;
        default:
          turi::apply_binary_op_ff();
      }
    case 1:
      switch(*((_BYTE *)a2 + 12))
      {
        case 0:
          v61 = *(double *)&turi::FLEX_UNDEFINED;
          v62 = *(_QWORD *)a2;
LABEL_124:
          v86 = (double)v62;
          goto LABEL_125;
        case 1:
          v61 = *(double *)a2;
          v86 = *(double *)&turi::FLEX_UNDEFINED;
LABEL_125:
          if (v61 != v86)
            goto LABEL_81;
          return;
        case 2:
        case 3:
        case 4:
        case 5:
        case 7:
        case 8:
        case 9:
          goto LABEL_81;
        case 6:
          v85 = vabdd_f64((double)*((int *)a2 + 2) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)a2 << 8) >> 8), *(double *)&turi::FLEX_UNDEFINED);
          goto LABEL_129;
        default:
          turi::apply_binary_op_ff();
      }
    case 2:
      v45 = *((unsigned __int8 *)a2 + 12);
      if (v45 - 3 < 7 || v45 < 2)
        goto LABEL_81;
      if (v45 != 2)
        turi::apply_binary_op_ff();
      v47 = *(double *)a2;
      v48 = *(_BYTE *)(*(_QWORD *)a2 + 31);
      v49 = v48 < 0 ? *(_QWORD *)(*(_QWORD *)&v47 + 16) : *(unsigned __int8 *)(*(_QWORD *)a2 + 31);
      v87 = *(char *)(turi::FLEX_UNDEFINED + 31) < 0
          ? *(_QWORD *)(turi::FLEX_UNDEFINED + 16)
          : *(unsigned __int8 *)(turi::FLEX_UNDEFINED + 31);
      if (v49 != v87)
        goto LABEL_81;
      v88 = (unsigned __int8 *)(*(_QWORD *)&v47 + 8);
      if ((*(_BYTE *)(*(_QWORD *)a2 + 31) & 0x80) != 0)
        v88 = *(unsigned __int8 **)v88;
      v89 = (unsigned __int8 *)(turi::FLEX_UNDEFINED + 8);
      if ((*(_BYTE *)(turi::FLEX_UNDEFINED + 31) & 0x80) != 0)
        v89 = *(unsigned __int8 **)v89;
      if (v48 < 0)
      {
        if (memcmp(v88, v89, v49))
          goto LABEL_81;
      }
      else
      {
        if (!v49)
          return;
        do
        {
          if (*v88 != *v89)
            goto LABEL_81;
          ++v88;
          ++v89;
          --v49;
        }
        while (v49);
      }
      return;
    case 3:
      v50 = *((unsigned __int8 *)a2 + 12);
      if (v50 > 9)
        turi::apply_binary_op_ff();
      if (v50 == 3)
      {
        v51 = *(double **)(*(_QWORD *)a2 + 8);
        v52 = *(double **)(*(_QWORD *)a2 + 16);
        v53 = v52 - v51;
        v54 = *(double **)(turi::FLEX_UNDEFINED + 8);
        if (v53 == (uint64_t)(*(_QWORD *)(turi::FLEX_UNDEFINED + 16) - (_QWORD)v54) >> 3)
        {
          if (v52 == v51)
            return;
          v55 = v53 <= 1 ? 1 : v52 - v51;
          if (*v51 == *v54)
          {
            v56 = 1;
            do
            {
              v57 = v56;
              if (v55 == v56)
                break;
              v58 = v51[v56];
              v59 = v54[v56++];
            }
            while (v58 == v59);
            if (v57 >= v53)
              return;
          }
        }
      }
      goto LABEL_81;
    case 4:
      v5 = *((unsigned __int8 *)a2 + 12);
      if (v5 > 9)
        turi::apply_binary_op_ff();
      if (v5 == 4
        && (turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&__idx, (uint64_t *)(*(_QWORD *)a2 + 8), (_QWORD *)(turi::FLEX_UNDEFINED + 8)) & 1) != 0)
      {
        return;
      }
      goto LABEL_81;
    case 5:
      v63 = *((unsigned __int8 *)a2 + 12);
      if (v63 > 9)
        turi::apply_binary_op_ff();
      if (v63 == 5
        && turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&__idx, (uint64_t **)(*(_QWORD *)a2 + 8), (uint64_t **)(turi::FLEX_UNDEFINED + 8)))
      {
        return;
      }
      goto LABEL_81;
    case 6:
      switch(*((_BYTE *)a2 + 12))
      {
        case 0:
          if (*(_QWORD *)a2 == turi::FLEX_UNDEFINED << 8 >> 8 && !dword_254FF06E8)
            return;
          goto LABEL_81;
        case 1:
          v85 = vabdd_f64(*(double *)a2, (double)dword_254FF06E8 / 1000000.0 + (double)(turi::FLEX_UNDEFINED << 8 >> 8));
LABEL_129:
          if (v85 < 0.0000005)
            return;
          goto LABEL_81;
        case 2:
        case 3:
        case 4:
        case 5:
        case 7:
        case 8:
        case 9:
          goto LABEL_81;
        case 6:
          if (((turi::FLEX_UNDEFINED ^ *(_QWORD *)a2) & 0xFFFFFFFFFFFFFFLL) == 0
            && *((_DWORD *)a2 + 2) == dword_254FF06E8)
          {
            return;
          }
          goto LABEL_81;
        default:
          turi::apply_binary_op_ff();
      }
    case 7:
      v60 = *((unsigned __int8 *)a2 + 12);
      if (v60 < 7 || v60 - 8 < 2)
        goto LABEL_81;
      if (v60 != 7)
        turi::apply_binary_op_ff();
      return;
    case 8:
      v64 = *((unsigned __int8 *)a2 + 12);
      if (v64 >= 8 && v64 != 9)
      {
        if (v64 != 8)
          turi::apply_binary_op_ff();
        if (turi::image_type::operator==(*(_QWORD *)a2 + 8, turi::FLEX_UNDEFINED + 8))
          return;
      }
      goto LABEL_81;
    case 9:
      v6 = *((unsigned __int8 *)a2 + 12);
      if (v6 < 9)
        goto LABEL_81;
      if (v6 != 9)
        turi::apply_binary_op_ff();
      v7 = turi::FLEX_UNDEFINED;
      v8 = *(_QWORD **)a2;
      if (turi::FLEX_UNDEFINED == *(_QWORD *)a2)
        return;
      if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)(v8 + 1), turi::FLEX_UNDEFINED + 8))
        goto LABEL_81;
      v10 = (char *)v8[3];
      v9 = (char *)v8[4];
      v11 = v9 - v10;
      if (v9 == v10)
        return;
      if (!v8[1])
        return;
      v12 = 1;
      do
      {
        v13 = *(_QWORD *)v10;
        v10 += 8;
        v12 *= v13;
      }
      while (v10 != v9);
      if (!v12)
        return;
      v97.__r_.__value_.__r.__words[0] = 0;
      std::vector<unsigned long>::vector(__p, v11 >> 3, &v97);
      v14 = (uint64_t *)__p[0];
      v15 = (uint64_t *)__p[1];
      v16 = **(_QWORD **)(v7 + 8);
      v17 = (char *)__p[1] - (char *)__p[0];
      v18 = ((char *)__p[1] - (char *)__p[0]) >> 3;
      v19 = v18 - 1;
      if (v18 <= 1)
        v20 = 1;
      else
        v20 = ((char *)__p[1] - (char *)__p[0]) >> 3;
      break;
    default:
      turi::apply_binary_op_ff();
  }
  do
  {
    if (v15 == v14)
    {
      v28 = 0;
      v29 = *(double *)(*(_QWORD *)v8[1] + 8 * v8[9]);
    }
    else
    {
      v21 = 0;
      v22 = (uint64_t *)v8[6];
      v23 = v14;
      v24 = v20;
      do
      {
        v26 = *v23++;
        v25 = v26;
        v27 = *v22++;
        v21 += v27 * v25;
        --v24;
      }
      while (v24);
      v28 = 0;
      v29 = *(double *)(*(_QWORD *)v8[1] + 8 * (v8[9] + v21));
      v30 = *(uint64_t **)(v7 + 48);
      v31 = v14;
      v32 = v20;
      do
      {
        v34 = *v31++;
        v33 = v34;
        v35 = *v30++;
        v28 += v35 * v33;
        --v32;
      }
      while (v32);
    }
    v36 = *(double *)(v16 + 8 * (*(_QWORD *)(v7 + 72) + v28));
    if (v29 != v36)
      break;
    v37 = v18;
    v38 = v18 - 1;
    if (v17 >= 1)
    {
      v39 = v8[3];
      v40 = v14[v19] + 1;
      v14[v19] = v40;
      v41 = (v17 & 0xFFFFFFFFFFFFFFF8) - 16;
      v38 = v18 - 1;
      if (v40 >= *(_QWORD *)(v39 + 8 * v19))
      {
        while (1)
        {
          *(uint64_t *)((char *)v14 + v41 + 8) = 0;
          if (v38 <= 0)
            break;
          --v38;
          v42 = *(uint64_t *)((char *)v14 + v41) + 1;
          *(uint64_t *)((char *)v14 + v41) = v42;
          v43 = *(_QWORD *)(v39 + v41);
          v41 -= 8;
          if (v42 < v43)
          {
            v37 = 1;
            goto LABEL_36;
          }
        }
        __p[1] = v14;
        operator delete(v14);
        return;
      }
      v37 = 1;
      v38 = v18 - 1;
    }
LABEL_36:
    ;
  }
  while ((v38 & 0x8000000000000000) == 0 && v37);
  if (v14)
  {
    __p[1] = v14;
    v44 = v36;
    operator delete(v14);
    if (v29 == v44)
      return;
  }
  else if (v29 == v36)
  {
    return;
  }
LABEL_81:
  v66 = 0.0;
  switch(*((_BYTE *)a2 + 12))
  {
    case 0:
      v66 = (double)*(uint64_t *)a2;
      break;
    case 1:
      v66 = *(double *)a2;
      break;
    case 2:
      v71 = *(double *)a2;
      v72 = (char **)(*(_QWORD *)a2 + 8);
      __idx = 0;
      v73 = (char *)v72;
      if (*(char *)(*(_QWORD *)&v71 + 31) < 0)
        v73 = *v72;
      std::string::basic_string[abi:ne180100]<0>(__p, v73);
      v74 = std::stod((const std::string *)__p, &__idx);
      if (SHIBYTE(v94[0]) < 0)
        operator delete(__p[0]);
      if (*(char *)(*(_QWORD *)&v71 + 31) < 0)
        v75 = *(_QWORD *)(*(_QWORD *)&v71 + 16);
      else
        v75 = *(unsigned __int8 *)(*(_QWORD *)&v71 + 31);
      if (__idx != v75)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        v91 = std::string::append(&v97, " cannot be interpreted as a float");
        v92 = *(_OWORD *)&v91->__r_.__value_.__l.__data_;
        v94[0] = (void *)v91->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v92;
        v91->__r_.__value_.__l.__size_ = 0;
        v91->__r_.__value_.__r.__words[2] = 0;
        v91->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, (const std::string *)__p);
        __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
      }
      v84 = v74;
      v66 = v84;
      break;
    case 3:
      v67 = *(double *)a2;
      __p[1] = 0;
      v94[0] = 0;
      __p[0] = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(*(_QWORD *)&v67 + 8), *(_QWORD *)(*(_QWORD *)&v67 + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v67 + 16) - *(_QWORD *)(*(_QWORD *)&v67 + 8)) >> 3);
      turi::flexible_type_fail(0);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      break;
    case 4:
      v76 = *(double *)a2;
      __p[1] = 0;
      v94[0] = 0;
      __p[0] = 0;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(*(_QWORD *)&v76 + 8), *(uint64_t **)(*(_QWORD *)&v76 + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v76 + 16) - *(_QWORD *)(*(_QWORD *)&v76 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v97.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v97);
      break;
    case 5:
      v77 = *(double *)a2;
      __p[1] = 0;
      v94[0] = 0;
      __p[0] = 0;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(*(_QWORD *)&v77 + 8), *(uint64_t **)(*(_QWORD *)&v77 + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v77 + 16) - *(_QWORD *)(*(_QWORD *)&v77 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v97.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v97);
      break;
    case 6:
      v66 = (double)*((int *)a2 + 2) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)a2 << 8) >> 8);
      break;
    case 7:
      break;
    case 8:
      v78 = *(double *)a2;
      v79 = *(unsigned int **)(*(_QWORD *)a2 + 16);
      __p[0] = *(void **)(*(_QWORD *)a2 + 8);
      __p[1] = v79;
      if (v79)
      {
        v80 = v79 + 2;
        do
          v81 = __ldxr(v80);
        while (__stxr(v81 + 1, v80));
      }
      v82 = *(_OWORD *)(*(_QWORD *)&v78 + 24);
      v83 = *(_OWORD *)(*(_QWORD *)&v78 + 56);
      v95 = *(_OWORD *)(*(_QWORD *)&v78 + 40);
      v96 = v83;
      *(_OWORD *)v94 = v82;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count((unsigned int **)&__p[1]);
      break;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(_QWORD *)a2 + 8);
      turi::flexible_type_fail(0);
      if (*((_QWORD *)&v95 + 1))
      {
        *(_QWORD *)&v96 = *((_QWORD *)&v95 + 1);
        operator delete(*((void **)&v95 + 1));
      }
      if (v94[0])
      {
        v94[1] = v94[0];
        operator delete(v94[0]);
      }
      v68 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v69 = (unint64_t *)((char *)__p[1] + 8);
        do
          v70 = __ldaxr(v69);
        while (__stlxr(v70 - 1, v69));
        if (!v70)
        {
          ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
          std::__shared_weak_count::__release_weak(v68);
        }
      }
      break;
    default:
      turi::apply_binary_op_ff();
  }
  a3.n128_f64[0] = v66;
  turi::sketches::streaming_quantile_sketch<double,std::less<double>>::add((uint64_t)this + 32, a3);
}

void sub_21814F2A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  void *v27;
  int v28;

  if (a14 < 0)
    operator delete(__p);
  if (a27 < 0)
  {
    operator delete(a22);
    if ((v28 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v28)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v27);
  goto LABEL_8;
}

void turi::groupby_operators::quantile::partial_finalize(turi::groupby_operators::quantile *this)
{
  turi::sketches::streaming_quantile_sketch<double,std::less<double>>::substream_finalize((uint64_t)this + 32);
}

void turi::groupby_operators::quantile::combine(uint64_t a1, void *lpsrc)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  _QWORD v9[3];
  __int128 v10;
  __int128 v11;
  void *v12[3];
  void *__p;
  void *v14;
  uint64_t v15;
  char v16;
  void **v17;

  if (!v3)
    __cxa_bad_cast();
  v4 = v3;
  v7 = *((_OWORD *)v3 + 2);
  v5 = v3[7];
  v8 = v3[6];
  memset(v9, 0, sizeof(v9));
  std::vector<turi::sketches::quantile_sketch<double,std::less<double>>>::__init_with_size[abi:ne180100]<turi::sketches::quantile_sketch<double,std::less<double>>*,turi::sketches::quantile_sketch<double,std::less<double>>*>(v9, v5, v3[8], 0x2E8BA2E8BA2E8BA3 * ((v3[8] - v5) >> 3));
  v6 = *((_OWORD *)v4 + 6);
  v10 = *((_OWORD *)v4 + 5);
  v11 = v6;
  memset(v12, 0, sizeof(v12));
  std::vector<std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>>::__init_with_size[abi:ne180100]<std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>*,std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>*>(v12, v4[14], v4[15], 0xAAAAAAAAAAAAAAABLL * ((v4[15] - v4[14]) >> 3));
  __p = 0;
  v14 = 0;
  v15 = 0;
  std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>::__init_with_size[abi:ne180100]<turi::sketches::quantile_sketch<double,std::less<double>>::element*,turi::sketches::quantile_sketch<double,std::less<double>>::element*>(&__p, (const void *)v4[17], v4[18], 0xAAAAAAAAAAAAAAABLL * ((v4[18] - v4[17]) >> 3));
  v16 = *((_BYTE *)v4 + 160);
  turi::sketches::streaming_quantile_sketch<double,std::less<double>>::combine(a1 + 32, (uint64_t)&v7);
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
  v17 = v12;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v17);
  v17 = (void **)v9;
  std::vector<turi::sketches::quantile_sketch<double,std::less<double>>>::__destroy_vector::operator()[abi:ne180100](&v17);
}

void sub_21814F4B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  turi::sketches::streaming_quantile_sketch<double,std::less<double>>::~streaming_quantile_sketch((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void turi::groupby_operators::quantile::emit(turi::groupby_operators::quantile *this@<X0>, uint64_t *a2@<X8>)
{
  char *v4;
  double v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  _QWORD *v15;
  std::string *v16;
  void **v17;
  __int128 v18;
  unint64_t *v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t v26;
  void *v27;
  void *v28;
  unint64_t *v29;
  unsigned int v30;
  _QWORD *v31;
  unint64_t v32;
  unint64_t v33;
  void *v34;
  uint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t *v39;
  uint64_t v40;
  unint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  __int128 v44;
  __int128 v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  char *v51;
  _QWORD *v52;
  _QWORD *v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  char *v67;
  char *v68;
  char *v69;
  uint64_t v70;
  void *v71[6];

  v4 = (char *)this + 80;
  v5 = ceil(1.0 / (*((double *)this + 4) / 3.0) + 1.0 / (*((double *)this + 4) / 3.0)) + 1.0;
  if ((unint64_t)v5 <= 2)
    v6 = 2;
  else
    v6 = (unint64_t)v5;
  turi::sketches::quantile_sketch<double,std::less<double>>::compress_to_size((uint64_t)this + 80, (uint64_t *)this + 17, v6);
  *((_QWORD *)this + 12) = *((_QWORD *)this + 5);
  *((_QWORD *)this + 13) = *((_QWORD *)this + 4);
  *(uint64_t *)((char *)a2 + 5) = 0;
  *a2 = 0;
  *((_BYTE *)a2 + 12) = 3;
  v7 = (_QWORD *)operator new();
  *v7 = 0;
  v7[2] = 0;
  v7[3] = 0;
  v7[1] = 0;
  *a2 = (uint64_t)v7;
  *v7 = 1;
  v8 = *((_QWORD *)this + 1);
  if (*((_QWORD *)this + 2) != v8)
  {
    v9 = 0;
    while (2)
    {
      v10 = *(double *)(v8 + 8 * v9);
      if (v10 < 0.0)
        v10 = 0.0;
      if (v10 > 1.0)
        v10 = 1.0;
      turi::sketches::quantile_sketch<double,std::less<double>>::query((uint64_t)v4, (unint64_t)(v10 * (double)*((unint64_t *)this + 12)));
      v12 = v11;
      v13 = *((unsigned __int8 *)a2 + 12);
      switch(*((_BYTE *)a2 + 12))
      {
        case 2:
          v14 = *a2;
          if (*(_QWORD *)*a2 == 1)
            goto LABEL_64;
          v15 = (_QWORD *)operator new();
          *v15 = *(_QWORD *)v14;
          v16 = (std::string *)(v15 + 1);
          v17 = (void **)(v14 + 8);
          if (*(char *)(v14 + 31) < 0)
          {
            std::string::__init_copy_ctor_external(v16, *(const std::string::value_type **)(v14 + 8), *(_QWORD *)(v14 + 16));
          }
          else
          {
            v18 = *(_OWORD *)v17;
            v15[3] = *(_QWORD *)(v14 + 24);
            *(_OWORD *)&v16->__r_.__value_.__l.__data_ = v18;
          }
          *a2 = (uint64_t)v15;
          *v15 = 1;
          do
          {
            v48 = __ldaxr((unint64_t *)v14);
            v49 = v48 - 1;
          }
          while (__stlxr(v49, (unint64_t *)v14));
          if (v49)
            goto LABEL_58;
          if (*(char *)(v14 + 31) < 0)
            operator delete(*v17);
          v29 = (unint64_t *)v14;
          v35 = 0x1012C404EF22A49;
          goto LABEL_57;
        case 3:
          v19 = (unint64_t *)*a2;
          if (*(_QWORD *)*a2 == 1)
            goto LABEL_62;
          v31 = (_QWORD *)operator new();
          *v31 = *v19;
          v31[2] = 0;
          v31[3] = 0;
          v31[1] = 0;
          std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v31 + 1, (const void *)v19[1], v19[2], (uint64_t)(v19[2] - v19[1]) >> 3);
          *a2 = (uint64_t)v31;
          *v31 = 1;
          do
          {
            v32 = __ldaxr(v19);
            v33 = v32 - 1;
          }
          while (__stlxr(v33, v19));
          if (v33)
            goto LABEL_58;
          v34 = (void *)v19[1];
          if (v34)
          {
            v19[2] = (unint64_t)v34;
            operator delete(v34);
          }
          v29 = v19;
          v35 = 0x1080C409938AC02;
          goto LABEL_57;
        case 4:
          v19 = (unint64_t *)*a2;
          if (*(_QWORD *)*a2 == 1)
            goto LABEL_66;
          v20 = (_QWORD *)operator new();
          *v20 = *v19;
          v20[2] = 0;
          v20[3] = 0;
          v20[1] = 0;
          std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v20 + 1, (uint64_t *)v19[1], (uint64_t *)v19[2], (uint64_t)(v19[2] - v19[1]) >> 4);
          *a2 = (uint64_t)v20;
          *v20 = 1;
          do
          {
            v21 = __ldaxr(v19);
            v22 = v21 - 1;
          }
          while (__stlxr(v22, v19));
          if (v22)
            goto LABEL_58;
          v71[0] = v19 + 1;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v71);
          goto LABEL_40;
        case 5:
          v19 = (unint64_t *)*a2;
          if (*(_QWORD *)*a2 == 1)
            goto LABEL_64;
          v36 = (_QWORD *)operator new();
          *v36 = *v19;
          v36[2] = 0;
          v36[3] = 0;
          v36[1] = 0;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v36 + 1, (uint64_t *)v19[1], (uint64_t *)v19[2], (uint64_t)(v19[2] - v19[1]) >> 5);
          *a2 = (uint64_t)v36;
          *v36 = 1;
          do
          {
            v37 = __ldaxr(v19);
            v38 = v37 - 1;
          }
          while (__stlxr(v38, v19));
          if (v38)
            goto LABEL_58;
          v71[0] = v19 + 1;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v71);
LABEL_40:
          v29 = v19;
          v35 = 0x1020C405E66F15BLL;
          goto LABEL_57;
        case 8:
          v39 = (unint64_t *)*a2;
          if (*(_QWORD *)*a2 == 1)
            goto LABEL_64;
          v40 = operator new();
          *(_QWORD *)v40 = *v39;
          v41 = v39[2];
          *(_QWORD *)(v40 + 8) = v39[1];
          *(_QWORD *)(v40 + 16) = v41;
          if (v41)
          {
            v42 = (unsigned int *)(v41 + 8);
            do
              v43 = __ldxr(v42);
            while (__stxr(v43 + 1, v42));
          }
          v44 = *(_OWORD *)(v39 + 3);
          v45 = *(_OWORD *)(v39 + 5);
          *(_OWORD *)(v40 + 56) = *(_OWORD *)(v39 + 7);
          *(_OWORD *)(v40 + 40) = v45;
          *(_OWORD *)(v40 + 24) = v44;
          *a2 = v40;
          *(_QWORD *)v40 = 1;
          do
          {
            v46 = __ldaxr(v39);
            v47 = v46 - 1;
          }
          while (__stlxr(v47, v39));
          if (v47)
            goto LABEL_58;
          boost::detail::shared_count::~shared_count((unsigned int **)v39 + 2);
          v29 = v39;
          v30 = -235920773;
          goto LABEL_49;
        case 9:
          v23 = (unint64_t *)*a2;
          if (*(_QWORD *)*a2 == 1)
            goto LABEL_64;
          v24 = (_QWORD *)operator new();
          *v24 = *v23;
          turi::flexible_type_impl::ndarray<double>::ndarray(v24 + 1, (uint64_t)(v23 + 1));
          *a2 = (uint64_t)v24;
          *v24 = 1;
          do
          {
            v25 = __ldaxr(v23);
            v26 = v25 - 1;
          }
          while (__stlxr(v26, v23));
          if (v26)
            goto LABEL_58;
          v27 = (void *)v23[6];
          if (v27)
          {
            v23[7] = (unint64_t)v27;
            operator delete(v27);
          }
          v28 = (void *)v23[3];
          if (v28)
          {
            v23[4] = (unint64_t)v28;
            operator delete(v28);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v23 + 1));
          v29 = v23;
          v30 = 2071181815;
LABEL_49:
          v35 = v30 | 0x1030C4000000000;
LABEL_57:
          MEMORY[0x219A19A08](v29, v35);
LABEL_58:
          v13 = *((unsigned __int8 *)a2 + 12);
LABEL_59:
          if (v13 == 4)
          {
            v19 = (unint64_t *)*a2;
LABEL_66:
            v54 = v19[3];
            v55 = v19[2];
            if (v55 >= v54)
            {
              v56 = v19[1];
              v57 = (uint64_t)(v55 - v56) >> 4;
              v58 = v57 + 1;
              if ((unint64_t)(v57 + 1) >> 60)
                std::vector<float>::__throw_length_error[abi:ne180100]();
              v59 = v54 - v56;
              if (v59 >> 3 > v58)
                v58 = v59 >> 3;
              if ((unint64_t)v59 >= 0x7FFFFFFFFFFFFFF0)
                v60 = 0xFFFFFFFFFFFFFFFLL;
              else
                v60 = v58;
              v71[4] = v19 + 3;
              if (v60)
                v61 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::flexible_type>>((uint64_t)(v19 + 3), v60);
              else
                v61 = 0;
              v68 = &v61[16 * v57];
              v71[0] = v61;
              v71[1] = v68;
              v71[3] = &v61[16 * v60];
              *(_QWORD *)v68 = v12;
              *((_DWORD *)v68 + 2) = 0;
              v68[12] = 1;
              v71[2] = v68 + 16;
              std::vector<turi::flexible_type>::__swap_out_circular_buffer((uint64_t *)v19 + 1, v71);
              v53 = (_QWORD *)v19[2];
              std::__split_buffer<turi::flexible_type>::~__split_buffer(v71);
            }
            else
            {
              *(_QWORD *)v55 = v12;
              *(_DWORD *)(v55 + 8) = 0;
              *(_BYTE *)(v55 + 12) = 1;
              v53 = (_QWORD *)(v55 + 16);
              v19[2] = v55 + 16;
            }
          }
          else
          {
            if (v13 != 3)
            {
LABEL_64:
              turi::flexible_type_fail(0);
              goto LABEL_93;
            }
            v19 = (unint64_t *)*a2;
LABEL_62:
            v50 = v19[3];
            v51 = (char *)v19[2];
            if ((unint64_t)v51 >= v50)
            {
              v62 = (char *)v19[1];
              v63 = (v51 - v62) >> 3;
              if ((unint64_t)(v63 + 1) >> 61)
                std::vector<float>::__throw_length_error[abi:ne180100]();
              v64 = v50 - (_QWORD)v62;
              v65 = (uint64_t)(v50 - (_QWORD)v62) >> 2;
              if (v65 <= v63 + 1)
                v65 = v63 + 1;
              if (v64 >= 0x7FFFFFFFFFFFFFF8)
                v66 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v66 = v65;
              if (v66)
              {
                v67 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(v19 + 3), v66);
                v62 = (char *)v19[1];
                v51 = (char *)v19[2];
              }
              else
              {
                v67 = 0;
              }
              v69 = &v67[8 * v63];
              *(_QWORD *)v69 = v12;
              v53 = v69 + 8;
              while (v51 != v62)
              {
                v70 = *((_QWORD *)v51 - 1);
                v51 -= 8;
                *((_QWORD *)v69 - 1) = v70;
                v69 -= 8;
              }
              v19[1] = (unint64_t)v69;
              v19[2] = (unint64_t)v53;
              v19[3] = (unint64_t)&v67[8 * v66];
              if (v62)
                operator delete(v62);
            }
            else
            {
              *(_QWORD *)v51 = v12;
              v52 = v51 + 8;
              v19[2] = (unint64_t)v52;
              v53 = v52;
            }
          }
          v19[2] = (unint64_t)v53;
LABEL_93:
          ++v9;
          v8 = *((_QWORD *)this + 1);
          if (v9 >= (*((_QWORD *)this + 2) - v8) >> 3)
            return;
          continue;
        default:
          goto LABEL_59;
      }
    }
  }
}

void sub_21814FB8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14)
{
  unint64_t **v14;
  uint64_t v15;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  unsigned int v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t *v34;
  void *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t *v42;

  MEMORY[0x219A19A08](v15, 0x1012C404EF22A49);
  switch(*((_BYTE *)v14 + 12))
  {
    case 2:
      v17 = *v14;
      do
      {
        v18 = __ldaxr(v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v17));
      if (v19)
        goto LABEL_40;
      v20 = *v14;
      if (!*v14)
        goto LABEL_39;
      if (*((char *)v20 + 31) < 0)
        operator delete((void *)v20[1]);
      v21 = v20;
      v22 = 0x1012C404EF22A49;
      goto LABEL_38;
    case 3:
      v31 = *v14;
      do
      {
        v32 = __ldaxr(v31);
        v33 = v32 - 1;
      }
      while (__stlxr(v33, v31));
      if (v33)
        goto LABEL_40;
      v34 = *v14;
      if (!*v14)
        goto LABEL_39;
      v35 = (void *)v34[1];
      if (v35)
      {
        v34[2] = (unint64_t)v35;
        operator delete(v35);
      }
      v21 = v34;
      v22 = 0x1080C409938AC02;
      goto LABEL_38;
    case 4:
      v23 = *v14;
      do
      {
        v24 = __ldaxr(v23);
        v25 = v24 - 1;
      }
      while (__stlxr(v25, v23));
      if (v25)
        goto LABEL_40;
      v26 = *v14;
      if (!*v14)
        goto LABEL_39;
      a14 = (void **)(v26 + 1);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a14);
      goto LABEL_31;
    case 5:
      v36 = *v14;
      do
      {
        v37 = __ldaxr(v36);
        v38 = v37 - 1;
      }
      while (__stlxr(v38, v36));
      if (v38)
        goto LABEL_40;
      v26 = *v14;
      if (!*v14)
        goto LABEL_39;
      a14 = (void **)(v26 + 1);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&a14);
LABEL_31:
      v21 = v26;
      v22 = 0x1020C405E66F15BLL;
      goto LABEL_38;
    case 8:
      v39 = *v14;
      do
      {
        v40 = __ldaxr(v39);
        v41 = v40 - 1;
      }
      while (__stlxr(v41, v39));
      if (v41)
        goto LABEL_40;
      v42 = *v14;
      if (!*v14)
        goto LABEL_39;
      boost::detail::shared_count::~shared_count((unsigned int **)v42 + 2);
      v21 = v42;
      v30 = -235920773;
      goto LABEL_37;
    case 9:
      v27 = *v14;
      do
      {
        v28 = __ldaxr(v27);
        v29 = v28 - 1;
      }
      while (__stlxr(v29, v27));
      if (v29)
        goto LABEL_40;
      if (!*v14)
        goto LABEL_39;
      v21 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*v14);
      v30 = 2071181815;
LABEL_37:
      v22 = v30 | 0x1030C4000000000;
LABEL_38:
      MEMORY[0x219A19A08](v21, v22);
LABEL_39:
      *v14 = 0;
LABEL_40:
      *v14 = 0;
      *((_DWORD *)v14 + 2) = 0;
      *((_BYTE *)v14 + 12) = 0;
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_40;
  }
}

_QWORD *turi::groupby_operators::quantile::name@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "Quantiles");
}

void *turi::groupby_operators::quantile::save(const void **this, turi::oarchive *a2)
{
  turi::archive_detail::vector_serialize_impl<turi::oarchive,double,true>::exec((uint64_t)a2, this + 1);
  return turi::sketches::streaming_quantile_sketch<double,std::less<double>>::save(this + 4, (uint64_t)a2);
}

void *turi::groupby_operators::quantile::load(turi::groupby_operators::quantile *this, turi::iarchive *a2)
{
  turi::archive_detail::vector_deserialize_impl<turi::iarchive,double,true>::exec((uint64_t)a2, (_QWORD *)this + 1);
  return turi::sketches::streaming_quantile_sketch<double,std::less<double>>::load((_QWORD *)this + 4, (uint64_t)a2);
}

void turi::groupby_operators::quantile::~quantile(turi::groupby_operators::quantile *this)
{
  void *v2;
  void *v3;
  void **v4;

  *(_QWORD *)this = &unk_24D9307E0;
  v2 = (void *)*((_QWORD *)this + 17);
  if (v2)
  {
    *((_QWORD *)this + 18) = v2;
    operator delete(v2);
  }
  v4 = (void **)((char *)this + 112);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v4);
  v4 = (void **)((char *)this + 56);
  std::vector<turi::sketches::quantile_sketch<double,std::less<double>>>::__destroy_vector::operator()[abi:ne180100](&v4);
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
}

{
  void *v2;
  void *v3;
  void **v4;

  *(_QWORD *)this = &unk_24D9307E0;
  v2 = (void *)*((_QWORD *)this + 17);
  if (v2)
  {
    *((_QWORD *)this + 18) = v2;
    operator delete(v2);
  }
  v4 = (void **)((char *)this + 112);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v4);
  v4 = (void **)((char *)this + 56);
  std::vector<turi::sketches::quantile_sketch<double,std::less<double>>>::__destroy_vector::operator()[abi:ne180100](&v4);
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
  MEMORY[0x219A19A08](this, 0x10A1C40473C5AE8);
}

uint64_t turi::sketches::streaming_quantile_sketch<double,std::less<double>>::streaming_quantile_sketch(uint64_t a1, double a2)
{
  *(_QWORD *)a1 = 0x3F847AE147AE147BLL;
  *(_OWORD *)(a1 + 8) = xmmword_2186D80E0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)(a1 + 72) = 0x3F847AE147AE147BLL;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  turi::sketches::streaming_quantile_sketch<double,std::less<double>>::init(a1, a2);
  return a1;
}

void sub_21814FFD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  void **v11;
  void **v12;

  v12 = v11;
  turi::sketches::quantile_sketch<double,std::less<double>>::~quantile_sketch(v10 + 48);
  a10 = v12;
  std::vector<turi::sketches::quantile_sketch<double,std::less<double>>>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

void turi::sketches::streaming_quantile_sketch<double,std::less<double>>::init(uint64_t a1, double a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t i;
  double v6;
  double v7;
  unint64_t v8;

  *(double *)a1 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  v3 = (uint64_t *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 24);
  for (i = *(_QWORD *)(a1 + 32);
        i != v4;
        std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>>::destroy[abi:ne180100](a1 + 40, i))
  {
    i -= 88;
  }
  *(_QWORD *)(a1 + 32) = v4;
  std::vector<turi::sketches::quantile_sketch<double,std::less<double>>>::resize(v3, 1uLL);
  v6 = *(double *)a1;
  v7 = 1.0 / *(double *)a1;
  if ((unint64_t)v7 <= 1)
    v8 = 1;
  else
    v8 = (unint64_t)v7;
  *(_QWORD *)(a1 + 16) = v8;
  turi::sketches::quantile_sketch<double,std::less<double>>::init(*(_QWORD *)(a1 + 24), v8, v6 / 3.0);
  turi::sketches::quantile_sketch<double,std::less<double>>::init(a1 + 48, *(_QWORD *)(a1 + 16), *(double *)a1);
}

uint64_t turi::sketches::quantile_sketch<double,std::less<double>>::~quantile_sketch(uint64_t a1)
{
  void *v2;
  void **v4;

  v2 = *(void **)(a1 + 56);
  if (v2)
  {
    *(_QWORD *)(a1 + 64) = v2;
    operator delete(v2);
  }
  v4 = (void **)(a1 + 32);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v4);
  return a1;
}

void std::vector<turi::sketches::quantile_sketch<double,std::less<double>>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;

  v3 = a1[1];
  v4 = 0x2E8BA2E8BA2E8BA3 * ((v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<turi::sketches::quantile_sketch<double,std::less<double>>>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 88 * a2;
    while (v3 != v7)
    {
      v3 -= 88;
      std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>>::destroy[abi:ne180100]((uint64_t)(a1 + 2), v3);
    }
    a1[1] = v7;
  }
}

void turi::sketches::quantile_sketch<double,std::less<double>>::init(uint64_t a1, unint64_t a2, double a3)
{
  unint64_t v6;
  double v7;
  unint64_t v8;

  v6 = (unint64_t)((double)a2 * a3);
  *(_QWORD *)a1 = a2;
  if (!v6)
    v6 = 2;
  v7 = floor(log2((double)v6) / a3);
  v8 = (unint64_t)(v7 + v7);
  *(double *)(a1 + 24) = a3;
  if (!v8)
    v8 = a2;
  *(_QWORD *)(a1 + 8) = v8;
  *(_QWORD *)(a1 + 16) = 0;
  std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)(a1 + 32));
  std::vector<std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>>::resize((uint64_t *)(a1 + 32), 1uLL);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a1 + 56);
}

void std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v3;
  void **v4;

  v3 = *(void **)(a2 + 56);
  if (v3)
  {
    *(_QWORD *)(a2 + 64) = v3;
    operator delete(v3);
  }
  v4 = (void **)(a2 + 32);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v4);
}

void **std::vector<turi::sketches::quantile_sketch<double,std::less<double>>>::__append(uint64_t *a1, unint64_t a2)
{
  void **result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  void *v16[5];

  v6 = a1[2];
  result = (void **)(a1 + 2);
  v5 = v6;
  v7 = (uint64_t)*(result - 1);
  if (0x2E8BA2E8BA2E8BA3 * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = v7 + 88 * a2;
      do
      {
        *(_QWORD *)v7 = 0;
        *(_QWORD *)(v7 + 8) = 0;
        *(_QWORD *)(v7 + 16) = 0;
        *(_QWORD *)(v7 + 24) = 0x3F847AE147AE147BLL;
        *(_OWORD *)(v7 + 32) = 0uLL;
        *(_OWORD *)(v7 + 48) = 0uLL;
        *(_OWORD *)(v7 + 64) = 0uLL;
        v7 += 88;
      }
      while (v7 != v13);
      v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0x2E8BA2E8BA2E8BA3 * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0x2E8BA2E8BA2E8BALL)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = 0x2E8BA2E8BA2E8BA3 * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x1745D1745D1745DLL)
      v11 = 0x2E8BA2E8BA2E8BALL;
    else
      v11 = v9;
    v16[4] = result;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>>>((uint64_t)result, v11);
    else
      v12 = 0;
    v14 = &v12[88 * v8];
    v16[0] = v12;
    v16[1] = v14;
    v16[3] = &v12[88 * v11];
    v15 = &v14[88 * a2];
    do
    {
      *(_QWORD *)v14 = 0;
      *((_QWORD *)v14 + 1) = 0;
      *((_QWORD *)v14 + 2) = 0;
      *((_QWORD *)v14 + 3) = 0x3F847AE147AE147BLL;
      *((_OWORD *)v14 + 2) = 0uLL;
      *((_OWORD *)v14 + 3) = 0uLL;
      *((_OWORD *)v14 + 4) = 0uLL;
      v14 += 88;
    }
    while (v14 != v15);
    v16[2] = v15;
    std::vector<turi::sketches::quantile_sketch<double,std::less<double>>>::__swap_out_circular_buffer(a1, v16);
    return std::__split_buffer<turi::sketches::quantile_sketch<double,std::less<double>>>::~__split_buffer(v16);
  }
  return result;
}

void sub_2181503E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<turi::sketches::quantile_sketch<double,std::less<double>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<turi::sketches::quantile_sketch<double,std::less<double>>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>>,std::reverse_iterator<turi::sketches::quantile_sketch<double,std::less<double>>*>,std::reverse_iterator<turi::sketches::quantile_sketch<double,std::less<double>>*>,std::reverse_iterator<turi::sketches::quantile_sketch<double,std::less<double>>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x2E8BA2E8BA2E8BBLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(88 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>>,std::reverse_iterator<turi::sketches::quantile_sketch<double,std::less<double>>*>,std::reverse_iterator<turi::sketches::quantile_sketch<double,std::less<double>>*>,std::reverse_iterator<turi::sketches::quantile_sketch<double,std::less<double>>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      v8 = *(_OWORD *)(a3 - 88);
      *(_OWORD *)(v7 - 72) = *(_OWORD *)(a3 - 72);
      *(_OWORD *)(v7 - 88) = v8;
      *(_QWORD *)(v7 - 48) = 0;
      *(_QWORD *)(v7 - 40) = 0;
      *(_QWORD *)(v7 - 56) = 0;
      *(_OWORD *)(v7 - 56) = *(_OWORD *)(a3 - 56);
      *(_QWORD *)(v7 - 40) = *(_QWORD *)(a3 - 40);
      *(_QWORD *)(a3 - 56) = 0;
      *(_QWORD *)(a3 - 48) = 0;
      *(_QWORD *)(a3 - 40) = 0;
      *(_QWORD *)(v7 - 32) = 0;
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_OWORD *)(v7 - 32) = *(_OWORD *)(a3 - 32);
      *(_QWORD *)(v7 - 16) = *(_QWORD *)(a3 - 16);
      *(_QWORD *)(a3 - 32) = 0;
      *(_QWORD *)(a3 - 24) = 0;
      *(_QWORD *)(a3 - 16) = 0;
      *(_BYTE *)(v7 - 8) = *(_BYTE *)(a3 - 8);
      v7 = *((_QWORD *)&v14 + 1) - 88;
      *((_QWORD *)&v14 + 1) -= 88;
      a3 -= 88;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>>,std::reverse_iterator<turi::sketches::quantile_sketch<double,std::less<double>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>>,std::reverse_iterator<turi::sketches::quantile_sketch<double,std::less<double>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>>,std::reverse_iterator<turi::sketches::quantile_sketch<double,std::less<double>>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>>,std::reverse_iterator<turi::sketches::quantile_sketch<double,std::less<double>>*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1[2] + 8);
  v2 = *(_QWORD *)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>>::destroy[abi:ne180100](v3, v1);
      v1 += 88;
    }
    while (v1 != v2);
  }
}

void **std::__split_buffer<turi::sketches::quantile_sketch<double,std::less<double>>>::~__split_buffer(void **a1)
{
  std::__split_buffer<turi::sketches::quantile_sketch<double,std::less<double>>>::clear[abi:ne180100](a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<turi::sketches::quantile_sketch<double,std::less<double>>>::clear[abi:ne180100](_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 88;
    std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>>::destroy[abi:ne180100](v4, i - 88);
  }
}

void std::vector<std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;

  v3 = a1[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 24 * a2;
    if (v3 != v7)
    {
      v8 = a1[1];
      do
      {
        v10 = *(void **)(v8 - 24);
        v8 -= 24;
        v9 = v10;
        if (v10)
        {
          *(_QWORD *)(v3 - 16) = v9;
          operator delete(v9);
        }
        v3 = v8;
      }
      while (v8 != v7);
    }
    a1[1] = v7;
  }
}

void std::vector<std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  size_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    v19 = v4;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>(v4, v11);
    else
      v12 = 0;
    v15 = v12;
    v16 = &v12[24 * v8];
    v18 = &v12[24 * v11];
    v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    v17 = &v16[v14];
    std::vector<std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)&v15);
  }
}

void sub_21815086C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>>,std::reverse_iterator<std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>*>,std::reverse_iterator<std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>*>,std::reverse_iterator<std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>>,std::reverse_iterator<std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>*>,std::reverse_iterator<std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>*>,std::reverse_iterator<std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>>,std::reverse_iterator<std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>>,std::reverse_iterator<std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::vector<turi::sketches::quantile_sketch<double,std::less<double>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 88;
        std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void turi::sketches::streaming_quantile_sketch<double,std::less<double>>::add(uint64_t a1, __n128 a2)
{
  unint64_t v2;
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  void *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  void *__p[2];
  __int128 v15;
  void **v16;

  v2 = a2.n128_u64[0];
  v6 = *(_QWORD *)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 32);
  v4 = (uint64_t *)(a1 + 24);
  v7 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v5 - v6) >> 3);
  if (*(_QWORD *)(v6 + 88 * (v7 - 1) + 16) >= (unint64_t)(*(v4 - 1) << (v7 - 1)))
  {
    v11 = 0uLL;
    *(_QWORD *)&v12 = 0;
    *((_QWORD *)&v12 + 1) = 0x3F847AE147AE147BLL;
    v13 = 0u;
    *(_OWORD *)__p = 0u;
    v15 = 0u;
    if (v5 >= *(_QWORD *)(a1 + 40))
    {
      v9 = std::vector<turi::sketches::quantile_sketch<double,std::less<double>>>::__push_back_slow_path<turi::sketches::quantile_sketch<double,std::less<double>>>(v4, (uint64_t)&v11);
      v10 = __p[1];
      *(_QWORD *)(a1 + 32) = v9;
      if (v10)
      {
        *(_QWORD *)&v15 = v10;
        operator delete(v10);
      }
    }
    else
    {
      v8 = v12;
      *(_OWORD *)v5 = v11;
      *(_OWORD *)(v5 + 16) = v8;
      *(_QWORD *)(v5 + 48) = 0;
      *(_QWORD *)(v5 + 56) = 0;
      *(_QWORD *)(v5 + 32) = 0;
      *(_QWORD *)(v5 + 40) = 0;
      v13 = 0uLL;
      __p[0] = 0;
      *(_QWORD *)(v5 + 64) = 0;
      *(_QWORD *)(v5 + 72) = 0;
      v15 = 0uLL;
      __p[1] = 0;
      *(_QWORD *)(a1 + 32) = v5 + 88;
    }
    v16 = (void **)&v13;
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v16);
    turi::sketches::quantile_sketch<double,std::less<double>>::init(*(_QWORD *)(a1 + 24) + 88 * v7, *(_QWORD *)(a1 + 16) << v7, *(double *)a1 / 3.0);
    v6 = *(_QWORD *)(a1 + 24);
  }
  else
  {
    --v7;
  }
  a2.n128_u64[0] = v2;
  turi::sketches::quantile_sketch<double,std::less<double>>::add(v6 + 88 * v7, a2);
  ++*(_QWORD *)(a1 + 8);
}

void sub_218150BA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  turi::sketches::quantile_sketch<double,std::less<double>>::~quantile_sketch((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void turi::sketches::quantile_sketch<double,std::less<double>>::add(uint64_t a1, __n128 a2)
{
  unint64_t v2;
  void **v4;
  _QWORD *v5;
  unint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  unint64_t *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  double v18;
  double v19;
  unint64_t v20;
  uint64_t v21;
  void *__p[2];
  uint64_t v23;

  v2 = a2.n128_u64[0];
  v4 = *(void ***)(a1 + 32);
  v5 = v4[1];
  v6 = (unint64_t)v4[2];
  if ((unint64_t)v5 >= v6)
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (_BYTE *)*v4) >> 3);
    v9 = v8 + 1;
    if (v8 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - (_QWORD)*v4) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>((uint64_t)(v4 + 2), v11);
    else
      v12 = 0;
    v13 = (unint64_t *)&v12[24 * v8];
    v14 = &v12[24 * v11];
    *v13 = v2;
    v13[1] = -1;
    v13[2] = -1;
    v7 = v13 + 3;
    v16 = (char *)*v4;
    v15 = (char *)v4[1];
    if (v15 != *v4)
    {
      do
      {
        a2 = *(__n128 *)(v15 - 24);
        *(v13 - 1) = *((_QWORD *)v15 - 1);
        *(__n128 *)(v13 - 3) = a2;
        v13 -= 3;
        v15 -= 24;
      }
      while (v15 != v16);
      v15 = (char *)*v4;
    }
    *v4 = v13;
    v4[1] = v7;
    v4[2] = v14;
    if (v15)
      operator delete(v15);
  }
  else
  {
    *v5 = a2.n128_u64[0];
    v5[1] = -1;
    v5[2] = -1;
    v7 = v5 + 3;
  }
  v4[1] = v7;
  v17 = *(_QWORD *)(a1 + 8);
  ++*(_QWORD *)(a1 + 16);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) - **(_QWORD **)(a1 + 32)) >> 3) == v17)
  {
    turi::sketches::quantile_sketch<double,std::less<double>>::sort_level_0(a1, a2);
    v18 = 1.0 / (1.0 / (double)*(unint64_t *)(a1 + 8));
    v19 = ceil(v18 + v18) + 1.0;
    if ((unint64_t)v19 <= 2)
      v20 = 2;
    else
      v20 = (unint64_t)v19;
    turi::sketches::quantile_sketch<double,std::less<double>>::compress_to_size(a1, *(uint64_t **)(a1 + 32), v20);
    v21 = *(_QWORD *)(a1 + 32);
    *(_OWORD *)__p = *(_OWORD *)v21;
    v23 = *(_QWORD *)(v21 + 16);
    *(_QWORD *)v21 = 0;
    *(_QWORD *)(v21 + 8) = 0;
    *(_QWORD *)(v21 + 16) = 0;
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) = **(_QWORD **)(a1 + 32);
    turi::sketches::quantile_sketch<double,std::less<double>>::compact((unint64_t *)a1, (__n128 *)__p, 1uLL);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
}

void sub_218150DA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<turi::sketches::quantile_sketch<double,std::less<double>>>::__push_back_slow_path<turi::sketches::quantile_sketch<double,std::less<double>>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  void *v16[5];

  v3 = *a1;
  v4 = 0x2E8BA2E8BA2E8BA3 * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x2E8BA2E8BA2E8BALL)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x2E8BA2E8BA2E8BA3 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x1745D1745D1745DLL)
    v9 = 0x2E8BA2E8BA2E8BALL;
  else
    v9 = v5;
  v16[4] = a1 + 2;
  v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>>>(v7, v9);
  v11 = &v10[88 * v4];
  v16[0] = v10;
  v16[1] = v11;
  v16[3] = &v10[88 * v12];
  v13 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v11 = *(_OWORD *)a2;
  *((_OWORD *)v11 + 1) = v13;
  *((_QWORD *)v11 + 5) = 0;
  *((_QWORD *)v11 + 6) = 0;
  *((_QWORD *)v11 + 4) = 0;
  *((_OWORD *)v11 + 2) = *(_OWORD *)(a2 + 32);
  *((_QWORD *)v11 + 6) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *((_QWORD *)v11 + 8) = 0;
  *((_QWORD *)v11 + 9) = 0;
  *((_QWORD *)v11 + 7) = 0;
  *(_OWORD *)(v11 + 56) = *(_OWORD *)(a2 + 56);
  *((_QWORD *)v11 + 9) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  v11[80] = *(_BYTE *)(a2 + 80);
  v16[2] = v11 + 88;
  std::vector<turi::sketches::quantile_sketch<double,std::less<double>>>::__swap_out_circular_buffer(a1, v16);
  v14 = a1[1];
  std::__split_buffer<turi::sketches::quantile_sketch<double,std::less<double>>>::~__split_buffer(v16);
  return v14;
}

void sub_218150F00(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<turi::sketches::quantile_sketch<double,std::less<double>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

int64x2_t turi::sketches::quantile_sketch<double,std::less<double>>::sort_level_0(uint64_t a1, __n128 a2)
{
  uint64_t *v3;
  uint64_t v4;
  __n128 *v5;
  unint64_t v6;
  uint64_t v7;
  int64x2_t result;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64x2_t *v14;
  char v15;

  v3 = *(uint64_t **)(a1 + 32);
  v4 = *v3;
  v5 = (__n128 *)v3[1];
  v6 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v5 - *v3) >> 3));
  v15 = *(_BYTE *)(a1 + 80);
  if (v5 == (__n128 *)v4)
    v7 = 0;
  else
    v7 = v6;
  std::__introsort<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<double,std::less<double>>::element_less_than &,turi::sketches::quantile_sketch<double,std::less<double>>::element *,false>(v4, v5, (uint64_t)&v15, v7, 1, a2);
  v9 = *(uint64_t **)(a1 + 32);
  v10 = *v9;
  v11 = v9[1] - *v9;
  if (v11)
  {
    v12 = 0;
    v13 = v11 / 24;
    if (v13 <= 1)
      v13 = 1;
    v14 = (int64x2_t *)(v10 + 8);
    do
    {
      result = vdupq_n_s64(++v12);
      *v14 = result;
      v14 = (int64x2_t *)((char *)v14 + 24);
    }
    while (v13 != v12);
  }
  return result;
}

void turi::sketches::quantile_sketch<double,std::less<double>>::compact(unint64_t *a1, __n128 *__c, unint64_t a3)
{
  unint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  double **v10;
  int *v11;
  double v12;
  double v13;
  unint64_t v14;
  uint64_t v15;
  __n128 v16;
  int *v17;

  v5 = a1[4];
  v7 = a1[5];
  v6 = (uint64_t *)(a1 + 4);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - v5) >> 3) <= a3)
  {
LABEL_10:
    if (v7 >= a1[6])
    {
      v15 = std::vector<std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>>::__push_back_slow_path<std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>> const&>(v6, (uint64_t)__c);
    }
    else
    {
      std::vector<std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>>::__construct_one_at_end[abi:ne180100]<std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>> const&>((uint64_t)v6, (uint64_t)__c);
      v15 = v7 + 24;
    }
    a1[5] = v15;
  }
  else
  {
    v8 = a3;
    v9 = 24 * a3;
    while (1)
    {
      v10 = (double **)(v5 + v9);
      if (*(_QWORD *)(v5 + v9 + 8) == *(_QWORD *)(v5 + v9))
        break;
      turi::sketches::quantile_sketch<double,std::less<double>>::merge((uint64_t)__c, v10, &v16);
      v11 = (int *)__c->n128_u64[0];
      if (__c->n128_u64[0])
      {
        __c->n128_u64[1] = (unint64_t)v11;
        operator delete(v11);
      }
      *__c = v16;
      __c[1].n128_u64[0] = (unint64_t)v17;
      v12 = 1.0 / (1.0 / (double)a1[1]);
      v13 = ceil(v12 + v12) + 1.0;
      if ((unint64_t)v13 <= 2)
        v14 = 2;
      else
        v14 = (unint64_t)v13;
      turi::sketches::quantile_sketch<double,std::less<double>>::compress_to_size((uint64_t)a1, (uint64_t *)__c, v14);
      v5 = a1[4];
      *(_QWORD *)(v5 + v9 + 8) = *(_QWORD *)(v5 + v9);
      ++v8;
      v7 = a1[5];
      v9 += 24;
      if (v8 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - v5) >> 3))
        goto LABEL_10;
    }
    _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE13__move_assignERS4_NS_17integral_constantIbLb1EEE((uint64_t)v10, __c);
  }
}

void std::__introsort<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<double,std::less<double>>::element_less_than &,turi::sketches::quantile_sketch<double,std::less<double>>::element *,false>(uint64_t a1, __n128 *a2, uint64_t a3, uint64_t a4, char a5, __n128 a6)
{
  double *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  double *v16;
  uint64_t v17;
  __int128 *v18;
  __int128 *v19;
  __int128 *v20;
  __int128 v21;
  uint64_t v22;
  char v23;
  BOOL v24;
  double *v25;
  double v26;
  __int128 v27;
  double *v28;
  uint64_t v29;
  double v30;
  double v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;

uint64_t std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<double,std::less<double>>::element_less_than &,turi::sketches::quantile_sketch<double,std::less<double>>::element *>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;

  if (result != a2)
  {
    v2 = result + 24;
    if (result + 24 != a2)
    {
      v3 = 0;
      v4 = result;
      do
      {
        v5 = v2;
        v6 = *(double *)(v4 + 24);
        if (v6 < *(double *)v4)
        {
          v10 = *(_OWORD *)(v4 + 32);
          v7 = v3;
          while (1)
          {
            v8 = result + v7;
            *(_OWORD *)(v8 + 24) = *(_OWORD *)(result + v7);
            *(_QWORD *)(v8 + 40) = *(_QWORD *)(result + v7 + 16);
            if (!v7)
              break;
            v7 -= 24;
            if (v6 >= *(double *)(v8 - 24))
            {
              v9 = result + v7 + 24;
              goto LABEL_10;
            }
          }
          v9 = result;
LABEL_10:
          *(double *)v9 = v6;
          *(_OWORD *)(v9 + 8) = v10;
        }
        v2 = v5 + 24;
        v3 += 24;
        v4 = v5;
      }
      while (v5 + 24 != a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<double,std::less<double>>::element_less_than &,turi::sketches::quantile_sketch<double,std::less<double>>::element *>(__int128 *a1, __int128 *a2, __int128 *a3)
{
  double v3;
  double v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;

  v3 = *(double *)a2;
  v4 = *(double *)a3;
  if (*(double *)a2 < *(double *)a1)
  {
    if (v4 < v3)
    {
      v5 = *((_QWORD *)a1 + 2);
      v6 = *a1;
      v7 = *((_QWORD *)a3 + 2);
      *a1 = *a3;
      *((_QWORD *)a1 + 2) = v7;
      *a3 = v6;
      *((_QWORD *)a3 + 2) = v5;
      return 1;
    }
    v14 = *((_QWORD *)a1 + 2);
    v15 = *a1;
    v16 = *((_QWORD *)a2 + 2);
    *a1 = *a2;
    *((_QWORD *)a1 + 2) = v16;
    *a2 = v15;
    *((_QWORD *)a2 + 2) = v14;
    if (*(double *)a3 >= *(double *)a2)
      return 1;
    v17 = *((_QWORD *)a2 + 2);
    v18 = *a2;
    v19 = *((_QWORD *)a3 + 2);
    *a2 = *a3;
    *((_QWORD *)a2 + 2) = v19;
    *a3 = v18;
    *((_QWORD *)a3 + 2) = v17;
    return 2;
  }
  if (v4 < v3)
  {
    v8 = *((_QWORD *)a2 + 2);
    v9 = *a2;
    v10 = *((_QWORD *)a3 + 2);
    *a2 = *a3;
    *((_QWORD *)a2 + 2) = v10;
    *a3 = v9;
    *((_QWORD *)a3 + 2) = v8;
    if (*(double *)a2 >= *(double *)a1)
      return 1;
    v11 = *((_QWORD *)a1 + 2);
    v12 = *a1;
    v13 = *((_QWORD *)a2 + 2);
    *a1 = *a2;
    *((_QWORD *)a1 + 2) = v13;
    *a2 = v12;
    *((_QWORD *)a2 + 2) = v11;
    return 2;
  }
  return 0;
}

double *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<double,std::less<double>>::element *,turi::sketches::quantile_sketch<double,std::less<double>>::element_less_than &>(double *a1, double *a2)
{
  double v2;
  double *v3;
  double v4;
  __int128 *v5;
  double v6;
  __int128 v7;
  double v8;
  double v9;
  __int128 v10;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  v2 = *a1;
  if (*a1 >= *(a2 - 3))
  {
    v5 = (__int128 *)(a1 + 3);
    do
    {
      v3 = (double *)v5;
      if (v5 >= (__int128 *)a2)
        break;
      v5 = (__int128 *)((char *)v5 + 24);
    }
    while (v2 >= *v3);
  }
  else
  {
    v3 = a1;
    do
    {
      v4 = v3[3];
      v3 += 3;
    }
    while (v2 >= v4);
  }
  if (v3 < a2)
  {
    do
    {
      v6 = *(a2 - 3);
      a2 -= 3;
    }
    while (v2 < v6);
  }
  while (v3 < a2)
  {
    v14 = *((_QWORD *)v3 + 2);
    v13 = *(_OWORD *)v3;
    v7 = *(_OWORD *)a2;
    v3[2] = a2[2];
    *(_OWORD *)v3 = v7;
    *((_QWORD *)a2 + 2) = v14;
    *(_OWORD *)a2 = v13;
    do
    {
      v8 = v3[3];
      v3 += 3;
    }
    while (v2 >= v8);
    do
    {
      v9 = *(a2 - 3);
      a2 -= 3;
    }
    while (v2 < v9);
  }
  if (v3 - 3 != a1)
  {
    v10 = *(_OWORD *)(v3 - 3);
    a1[2] = *(v3 - 1);
    *(_OWORD *)a1 = v10;
  }
  *(v3 - 3) = v2;
  *((_OWORD *)v3 - 1) = v12;
  return v3;
}

uint64_t std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<double,std::less<double>>::element *,turi::sketches::quantile_sketch<double,std::less<double>>::element_less_than &>(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  double v3;
  double v4;
  unint64_t v5;
  double v6;
  double v7;
  __int128 *v8;
  unint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  double v14;
  __int128 v15;
  __int128 v17;

  v2 = 0;
  v3 = *(double *)a1;
  do
  {
    v4 = *(double *)(a1 + v2 + 24);
    v2 += 24;
  }
  while (v4 < v3);
  v5 = a1 + v2;
  if (v2 == 24)
  {
    do
    {
      if (v5 >= a2)
        break;
      v7 = *(double *)(a2 - 24);
      a2 -= 24;
    }
    while (v7 >= v3);
  }
  else
  {
    do
    {
      v6 = *(double *)(a2 - 24);
      a2 -= 24;
    }
    while (v6 >= v3);
  }
  v8 = (__int128 *)(a1 + v2);
  if (v5 < a2)
  {
    v9 = a2;
    do
    {
      v10 = *v8;
      v11 = *((_QWORD *)v8 + 2);
      v12 = *(_QWORD *)(v9 + 16);
      *v8 = *(_OWORD *)v9;
      *((_QWORD *)v8 + 2) = v12;
      *(_QWORD *)(v9 + 16) = v11;
      *(_OWORD *)v9 = v10;
      do
      {
        v13 = *((double *)v8 + 3);
        v8 = (__int128 *)((char *)v8 + 24);
      }
      while (v13 < v3);
      do
      {
        v14 = *(double *)(v9 - 24);
        v9 -= 24;
      }
      while (v14 >= v3);
    }
    while ((unint64_t)v8 < v9);
  }
  if ((__int128 *)((char *)v8 - 24) != (__int128 *)a1)
  {
    v15 = *(__int128 *)((char *)v8 - 24);
    *(_QWORD *)(a1 + 16) = *((_QWORD *)v8 - 1);
    *(_OWORD *)a1 = v15;
  }
  *((double *)v8 - 3) = v3;
  *(v8 - 1) = v17;
  return (uint64_t)v8 - 24;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<double,std::less<double>>::element_less_than &,turi::sketches::quantile_sketch<double,std::less<double>>::element *>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  __int128 *v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  double *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;

  v4 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = (__int128 *)(a2 - 24);
      if (*(double *)(a2 - 24) < *(double *)a1)
      {
        v7 = *(_QWORD *)(a1 + 16);
        v8 = *(_OWORD *)a1;
        v9 = *(_QWORD *)(a2 - 8);
        *(_OWORD *)a1 = *v6;
        *(_QWORD *)(a1 + 16) = v9;
        *v6 = v8;
        *(_QWORD *)(a2 - 8) = v7;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<double,std::less<double>>::element_less_than &,turi::sketches::quantile_sketch<double,std::less<double>>::element *>((__int128 *)a1, (__int128 *)(a1 + 24), (__int128 *)(a2 - 24));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<double,std::less<double>>::element_less_than &,turi::sketches::quantile_sketch<double,std::less<double>>::element *>(a1, a1 + 24, a1 + 48, (unint64_t *)(a2 - 24));
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<double,std::less<double>>::element_less_than &,turi::sketches::quantile_sketch<double,std::less<double>>::element *>((__n128 *)a1, (__n128 *)(a1 + 24), (__n128 *)(a1 + 48), (unint64_t *)(a1 + 72), (unint64_t *)(a2 - 24));
      return 1;
    default:
      v10 = (double *)(a1 + 48);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<double,std::less<double>>::element_less_than &,turi::sketches::quantile_sketch<double,std::less<double>>::element *>((__int128 *)a1, (__int128 *)(a1 + 24), (__int128 *)(a1 + 48));
      v11 = a1 + 72;
      if (a1 + 72 == a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
  while (1)
  {
    v14 = *(double *)v11;
    if (*(double *)v11 < *v10)
    {
      v18 = *(_OWORD *)(v11 + 8);
      v15 = v12;
      while (1)
      {
        v16 = a1 + v15;
        *(_OWORD *)(v16 + 72) = *(_OWORD *)(a1 + v15 + 48);
        *(_QWORD *)(v16 + 88) = *(_QWORD *)(a1 + v15 + 64);
        if (v15 == -48)
          break;
        v15 -= 24;
        if (v14 >= *(double *)(v16 + 24))
        {
          v17 = a1 + v15 + 72;
          goto LABEL_12;
        }
      }
      v17 = a1;
LABEL_12:
      *(double *)v17 = v14;
      *(_OWORD *)(v17 + 8) = v18;
      if (++v13 == 8)
        return v11 + 24 == a2;
    }
    v10 = (double *)v11;
    v12 += 24;
    v11 += 24;
    if (v11 == a2)
      return 1;
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<double,std::less<double>>::element_less_than &,turi::sketches::quantile_sketch<double,std::less<double>>::element *>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  __n128 result;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<double,std::less<double>>::element_less_than &,turi::sketches::quantile_sketch<double,std::less<double>>::element *>((__int128 *)a1, (__int128 *)a2, (__int128 *)a3);
  result.n128_u64[0] = *a4;
  if (*(double *)a4 < *(double *)a3)
  {
    v9 = *(_QWORD *)(a3 + 16);
    result = *(__n128 *)a3;
    v10 = a4[2];
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_QWORD *)(a3 + 16) = v10;
    *(__n128 *)a4 = result;
    a4[2] = v9;
    result.n128_u64[0] = *(_QWORD *)a3;
    if (*(double *)a3 < *(double *)a2)
    {
      v11 = *(_QWORD *)(a2 + 16);
      result = *(__n128 *)a2;
      v12 = *(_QWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_QWORD *)(a2 + 16) = v12;
      *(__n128 *)a3 = result;
      *(_QWORD *)(a3 + 16) = v11;
      result.n128_u64[0] = *(_QWORD *)a2;
      if (*(double *)a2 < *(double *)a1)
      {
        v13 = *(_QWORD *)(a1 + 16);
        result = *(__n128 *)a1;
        v14 = *(_QWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_QWORD *)(a1 + 16) = v14;
        *(__n128 *)a2 = result;
        *(_QWORD *)(a2 + 16) = v13;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<double,std::less<double>>::element_less_than &,turi::sketches::quantile_sketch<double,std::less<double>>::element *>(__n128 *a1, __n128 *a2, __n128 *a3, unint64_t *a4, unint64_t *a5)
{
  __n128 result;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;

  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<double,std::less<double>>::element_less_than &,turi::sketches::quantile_sketch<double,std::less<double>>::element *>((uint64_t)a1, (uint64_t)a2, (uint64_t)a3, a4);
  result.n128_u64[0] = *a5;
  if (*(double *)a5 < *(double *)a4)
  {
    v11 = a4[2];
    result = *(__n128 *)a4;
    v12 = a5[2];
    *(_OWORD *)a4 = *(_OWORD *)a5;
    a4[2] = v12;
    *(__n128 *)a5 = result;
    a5[2] = v11;
    result.n128_u64[0] = *a4;
    if (*(double *)a4 < a3->n128_f64[0])
    {
      v13 = a3[1].n128_u64[0];
      result = *a3;
      v14 = a4[2];
      *a3 = *(__n128 *)a4;
      a3[1].n128_u64[0] = v14;
      *(__n128 *)a4 = result;
      a4[2] = v13;
      result.n128_u64[0] = a3->n128_u64[0];
      if (a3->n128_f64[0] < a2->n128_f64[0])
      {
        v15 = a2[1].n128_u64[0];
        result = *a2;
        v16 = a3[1].n128_u64[0];
        *a2 = *a3;
        a2[1].n128_u64[0] = v16;
        *a3 = result;
        a3[1].n128_u64[0] = v15;
        result.n128_u64[0] = a2->n128_u64[0];
        if (a2->n128_f64[0] < a1->n128_f64[0])
        {
          v17 = a1[1].n128_u64[0];
          result = *a1;
          v18 = a2[1].n128_u64[0];
          *a1 = *a2;
          a1[1].n128_u64[0] = v18;
          *a2 = result;
          a2[1].n128_u64[0] = v17;
        }
      }
    }
  }
  return result;
}

__n128 *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<double,std::less<double>>::element_less_than &,turi::sketches::quantile_sketch<double,std::less<double>>::element *,turi::sketches::quantile_sketch<double,std::less<double>>::element *>(uint64_t a1, __n128 *a2, __n128 *a3, uint64_t a4, __n128 a5)
{
  __n128 *v7;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  __int128 *v13;
  __n128 *v14;
  __n128 *v15;
  unint64_t v16;
  __n128 v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int64_t v24;
  __int128 v25;
  __n128 v26;
  __n128 v29;
  unint64_t v30;

  if ((__n128 *)a1 != a2)
  {
    v7 = a2;
    v9 = (uint64_t)a2 - a1;
    v10 = ((uint64_t)a2 - a1) / 24;
    if ((uint64_t)a2 - a1 >= 25)
    {
      v11 = (unint64_t)(v10 - 2) >> 1;
      v12 = v11 + 1;
      v13 = (__int128 *)(a1 + 24 * v11);
      do
      {
        a5 = std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<double,std::less<double>>::element_less_than &,turi::sketches::quantile_sketch<double,std::less<double>>::element *>(a1, a5, a4, v10, v13);
        v13 = (__int128 *)((char *)v13 - 24);
        --v12;
      }
      while (v12);
    }
    v14 = v7;
    if (v7 != a3)
    {
      v15 = v7;
      do
      {
        if (v15->n128_f64[0] < *(double *)a1)
        {
          v16 = v15[1].n128_u64[0];
          v17 = *v15;
          v18 = *(_QWORD *)(a1 + 16);
          *v15 = *(__n128 *)a1;
          v15[1].n128_u64[0] = v18;
          *(__n128 *)a1 = v17;
          *(_QWORD *)(a1 + 16) = v16;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<double,std::less<double>>::element_less_than &,turi::sketches::quantile_sketch<double,std::less<double>>::element *>(a1, v17, a4, v10, (__int128 *)a1);
        }
        v15 = (__n128 *)((char *)v15 + 24);
      }
      while (v15 != a3);
      v14 = a3;
    }
    if (v9 >= 25)
    {
      v19 = v9 / 0x18uLL;
      do
      {
        v20 = 0;
        v29 = *(__n128 *)a1;
        v30 = *(_QWORD *)(a1 + 16);
        v21 = a1;
        do
        {
          v22 = v21;
          v21 += 24 * v20 + 24;
          v23 = 2 * v20;
          v20 = (2 * v20) | 1;
          v24 = v23 + 2;
          if (v24 < v19 && *(double *)v21 < *(double *)(v21 + 24))
          {
            v21 += 24;
            v20 = v24;
          }
          v25 = *(_OWORD *)v21;
          *(_QWORD *)(v22 + 16) = *(_QWORD *)(v21 + 16);
          *(_OWORD *)v22 = v25;
        }
        while (v20 <= (uint64_t)((unint64_t)(v19 - 2) >> 1));
        v7 = (__n128 *)((char *)v7 - 24);
        if ((__n128 *)v21 == v7)
        {
          *(_QWORD *)(v21 + 16) = v30;
          *(__n128 *)v21 = v29;
        }
        else
        {
          v26 = *v7;
          *(_QWORD *)(v21 + 16) = v7[1].n128_u64[0];
          *(__n128 *)v21 = v26;
          *v7 = v29;
          v7[1].n128_u64[0] = v30;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<double,std::less<double>>::element_less_than &,turi::sketches::quantile_sketch<double,std::less<double>>::element *>(a1, v21 + 24, v29, a4, 0xAAAAAAAAAAAAAAABLL * ((v21 + 24 - a1) >> 3));
        }
      }
      while (v19-- > 2);
    }
    return v14;
  }
  return a3;
}

__n128 std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<double,std::less<double>>::element_less_than &,turi::sketches::quantile_sketch<double,std::less<double>>::element *>(uint64_t a1, __n128 result, uint64_t a3, uint64_t a4, __int128 *a5)
{
  int64_t v5;
  uint64_t v6;
  __int128 *v7;
  __int128 *v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;

  if (a4 >= 2)
  {
    v5 = (unint64_t)(a4 - 2) >> 1;
    if (v5 >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)a5 - a1) >> 3)))
    {
      v6 = (0x5555555555555556 * (((uint64_t)a5 - a1) >> 3)) | 1;
      v7 = (__int128 *)(a1 + 24 * v6);
      if (0x5555555555555556 * (((uint64_t)a5 - a1) >> 3) + 2 < a4 && *(double *)v7 < *((double *)v7 + 3))
      {
        v7 = (__int128 *)((char *)v7 + 24);
        v6 = 0x5555555555555556 * (((uint64_t)a5 - a1) >> 3) + 2;
      }
      result.n128_u64[0] = *(_QWORD *)a5;
      if (*(double *)v7 >= *(double *)a5)
      {
        v12 = *(__n128 *)((char *)a5 + 8);
        do
        {
          v8 = a5;
          a5 = v7;
          v9 = *v7;
          *((_QWORD *)v8 + 2) = *((_QWORD *)v7 + 2);
          *v8 = v9;
          if (v5 < v6)
            break;
          v10 = 2 * v6;
          v6 = (2 * v6) | 1;
          v7 = (__int128 *)(a1 + 24 * v6);
          v11 = v10 + 2;
          if (v11 < a4 && *(double *)v7 < *((double *)v7 + 3))
          {
            v7 = (__int128 *)((char *)v7 + 24);
            v6 = v11;
          }
        }
        while (*(double *)v7 >= result.n128_f64[0]);
        *(_QWORD *)a5 = result.n128_u64[0];
        result = v12;
        *(__int128 *)((char *)a5 + 8) = (__int128)v12;
      }
    }
  }
  return result;
}

__n128 std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<double,std::less<double>>::element_less_than &,turi::sketches::quantile_sketch<double,std::less<double>>::element *>(uint64_t a1, uint64_t a2, __n128 result, uint64_t a4, uint64_t a5)
{
  unint64_t v5;
  __int128 *v6;
  __int128 *v7;
  __int128 *v8;
  __int128 v9;
  __n128 v10;

  if (a5 >= 2)
  {
    v5 = (unint64_t)(a5 - 2) >> 1;
    v6 = (__int128 *)(a1 + 24 * v5);
    v7 = (__int128 *)(a2 - 24);
    result.n128_u64[0] = *(_QWORD *)(a2 - 24);
    if (*(double *)v6 < result.n128_f64[0])
    {
      v10 = *(__n128 *)(a2 - 16);
      do
      {
        v8 = v7;
        v7 = v6;
        v9 = *v6;
        *((_QWORD *)v8 + 2) = *((_QWORD *)v6 + 2);
        *v8 = v9;
        if (!v5)
          break;
        v5 = (v5 - 1) >> 1;
        v6 = (__int128 *)(a1 + 24 * v5);
      }
      while (*(double *)v6 < result.n128_f64[0]);
      *(_QWORD *)v7 = result.n128_u64[0];
      result = v10;
      *(__int128 *)((char *)v7 + 8) = (__int128)v10;
    }
  }
  return result;
}

__n128 turi::sketches::quantile_sketch<double,std::less<double>>::compress_to_size(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  __int128 *v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  __n128 result;

  v3 = *a2;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3);
  if (v4 > a3)
  {
    v5 = a3 - 1;
    if (a3 != 1)
    {
      v6 = 0;
      v7 = 0;
      do
      {
        v8 = (unint64_t)((double)v4 / (double)a3 * (double)v7);
        v9 = *a2;
        v10 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3);
        if (v10 <= v8)
          v8 = v10 - 1;
        v11 = (__int128 *)(v9 + 24 * v8);
        v12 = v9 + v6;
        v13 = *v11;
        *(_QWORD *)(v12 + 16) = *((_QWORD *)v11 + 2);
        *(_OWORD *)v12 = v13;
        ++v7;
        v6 += 24;
      }
      while (v5 != v7);
      v3 = *a2;
      v4 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3);
    }
    v14 = v3 + 24 * v4;
    v15 = *(_OWORD *)(v14 - 24);
    v16 = v3 + 24 * v5;
    *(_QWORD *)(v16 + 16) = *(_QWORD *)(v14 - 8);
    *(_OWORD *)v16 = v15;
    std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>::resize((uint64_t)a2, a3);
  }
  return result;
}

void std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;

  v2 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3);
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>::__append((void **)a1, v4);
  }
  else if (!v3)
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 24 * a2;
  }
}

void std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>::__append(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  void *v13;
  uint64_t v14;
  _QWORD *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  _QWORD *v19;
  char *v20;
  char *v21;
  char *v22;
  __int128 v23;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v6[-v7] >> 3) >= a2)
  {
    if (a2)
    {
      v13 = (void *)(v7 + 24 * a2);
      v14 = 24 * a2;
      v15 = (_QWORD *)(v7 + 8);
      do
      {
        *v15 = -1;
        v15[1] = -1;
        v15 += 3;
        v14 -= 24;
      }
      while (v14);
    }
    else
    {
      v13 = *(void **)(v4 - 8);
    }
    a1[1] = v13;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (uint64_t)*a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (_BYTE *)*a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>(v4, v11);
    else
      v12 = 0;
    v16 = &v12[24 * v8];
    v17 = &v16[24 * a2];
    v18 = 24 * a2;
    v19 = v16 + 8;
    do
    {
      *v19 = -1;
      v19[1] = -1;
      v19 += 3;
      v18 -= 24;
    }
    while (v18);
    v20 = &v12[24 * v11];
    v22 = (char *)*a1;
    v21 = (char *)a1[1];
    if (v21 != *a1)
    {
      do
      {
        v23 = *(_OWORD *)(v21 - 24);
        *((_QWORD *)v16 - 1) = *((_QWORD *)v21 - 1);
        *(_OWORD *)(v16 - 24) = v23;
        v16 -= 24;
        v21 -= 24;
      }
      while (v21 != v22);
      v21 = (char *)*a1;
    }
    *a1 = v16;
    a1[1] = v17;
    a1[2] = v20;
    if (v21)
      operator delete(v21);
  }
}

double turi::sketches::quantile_sketch<double,std::less<double>>::merge@<D0>(uint64_t a1@<X1>, double **a2@<X2>, _QWORD *a3@<X8>)
{
  double *v6;
  uint64_t v7;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  double result;
  double *v13;
  uint64_t v14;
  double *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  double v22;
  double v23;
  uint64_t v24;
  double v25;
  double v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  double v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  double *v37;
  uint64_t v38;
  int64x2_t v39;
  double *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  int64x2_t v46;

  v6 = *(double **)a1;
  v7 = *(_QWORD *)(a1 + 8);
  if ((double *)v7 == v6)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    v6 = *a2;
    v7 = (uint64_t)a2[1];
    v9 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (uint64_t)*a2) >> 3);
LABEL_24:
    std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>::__init_with_size[abi:ne180100]<turi::sketches::quantile_sketch<double,std::less<double>>::element*,turi::sketches::quantile_sketch<double,std::less<double>>::element*>(a3, v6, v7, v9);
    return result;
  }
  v9 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (uint64_t)v6) >> 3);
  v10 = (char *)a2[1] - (char *)*a2;
  if (!v10)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    goto LABEL_24;
  }
  v11 = std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>::vector(a3, v9 - 0x5555555555555555 * (v10 >> 3));
  v13 = *(double **)a1;
  v14 = *(_QWORD *)(a1 + 8);
  if (v14 == *(_QWORD *)a1)
  {
    v17 = 0;
    v18 = 0;
    v20 = 0;
    v13 = *(double **)(a1 + 8);
  }
  else
  {
    v15 = *a2;
    if (a2[1] == *a2)
    {
      v17 = 0;
      v18 = 0;
      v20 = 0;
    }
    else
    {
      v16 = 0;
      v17 = 0;
      v18 = 0;
      v19 = 1;
      do
      {
        v20 = v19;
        result = v13[3 * v17];
        v21 = v15[3 * v18];
        if (result <= v21)
        {
          if (v18)
            v23 = v15[3 * v18 - 2];
          else
            v23 = 0.0;
          v30 = *(_QWORD *)&v23 + *(_QWORD *)&v13[3 * v17 + 1];
          v31 = v13[3 * v17 + 2];
          v32 = v15[3 * v18 + 2];
          v27 = *(_QWORD *)&v32 != 0;
          v33 = *(_QWORD *)&v32 - 1;
          if (!v27)
            v33 = 0;
          v34 = *v11 + v16;
          *(double *)v34 = result;
          *(_QWORD *)(v34 + 8) = v30;
          *(_QWORD *)(v34 + 16) = v33 + *(_QWORD *)&v31;
          ++v17;
        }
        else
        {
          if (v17)
            v22 = v13[3 * v17 - 2];
          else
            v22 = 0.0;
          v24 = *(_QWORD *)&v22 + *(_QWORD *)&v15[3 * v18 + 1];
          v25 = v15[3 * v18 + 2];
          v26 = v13[3 * v17 + 2];
          v27 = *(_QWORD *)&v26 != 0;
          v28 = *(_QWORD *)&v26 - 1;
          if (!v27)
            v28 = 0;
          v29 = *v11 + v16;
          *(double *)v29 = v21;
          *(_QWORD *)(v29 + 8) = v24;
          *(_QWORD *)(v29 + 16) = v28 + *(_QWORD *)&v25;
          ++v18;
        }
        v13 = *(double **)a1;
        v14 = *(_QWORD *)(a1 + 8);
        if (v17 >= 0xAAAAAAAAAAAAAAABLL * ((v14 - *(_QWORD *)a1) >> 3))
          break;
        v15 = *a2;
        v16 += 24;
        v19 = v20 + 1;
      }
      while (v18 < 0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2));
    }
  }
  if (v17 < 0xAAAAAAAAAAAAAAABLL * ((v14 - (uint64_t)v13) >> 3))
  {
    v35 = 24 * v20;
    v36 = 3 * v17;
    do
    {
      v37 = &v13[v36];
      result = *v37;
      v38 = *v11 + v35;
      v39 = vaddq_s64(*(int64x2_t *)&(*a2)[3 * v18 - 2], *(int64x2_t *)(v37 + 1));
      *(double *)v38 = *v37;
      *(int64x2_t *)(v38 + 8) = v39;
      ++v17;
      ++v20;
      v13 = *(double **)a1;
      v35 += 24;
      v36 += 3;
    }
    while (v17 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3));
  }
  v40 = *a2;
  if (v18 < 0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2))
  {
    v41 = v17 - 1;
    v42 = 24 * v20;
    v43 = 3 * v18;
    do
    {
      v44 = (char *)&v40[v43];
      result = *(double *)v44;
      v45 = *v11 + v42;
      v46 = vaddq_s64(*(int64x2_t *)(*(_QWORD *)a1 + 24 * v41 + 8), *(int64x2_t *)(v44 + 8));
      *(_QWORD *)v45 = *(_QWORD *)v44;
      *(int64x2_t *)(v45 + 8) = v46;
      ++v18;
      v40 = *a2;
      v42 += 24;
      v43 += 3;
    }
    while (v18 < 0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2));
  }
  return result;
}

_QWORD *std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>::__init_with_size[abi:ne180100]<turi::sketches::quantile_sketch<double,std::less<double>>::element*,turi::sketches::quantile_sketch<double,std::less<double>>::element*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_21815258C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>::vector(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::string>::__vallocate[abi:ne180100](a1, a2);
    v4 = a1[1];
    v5 = v4 + 24 * a2;
    v6 = 24 * a2;
    v7 = (_QWORD *)(v4 + 8);
    do
    {
      *v7 = -1;
      v7[1] = -1;
      v7 += 3;
      v6 -= 24;
    }
    while (v6);
    a1[1] = v5;
  }
  return a1;
}

void sub_218152608(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>>::__construct_one_at_end[abi:ne180100]<std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>> const&>(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *result;

  v3 = *(_QWORD **)(a1 + 8);
  *v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  result = std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>::__init_with_size[abi:ne180100]<turi::sketches::quantile_sketch<double,std::less<double>>::element*,turi::sketches::quantile_sketch<double,std::less<double>>::element*>(v3, *(const void **)a2, *(_QWORD *)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3));
  *(_QWORD *)(a1 + 8) = v3 + 3;
  return result;
}

void sub_218152678(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>>::__push_back_slow_path<std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[24 * v9];
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>::__init_with_size[abi:ne180100]<turi::sketches::quantile_sketch<double,std::less<double>>::element*,turi::sketches::quantile_sketch<double,std::less<double>>::element*>(v11, *(const void **)a2, *(_QWORD *)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3));
  v15 += 24;
  std::vector<std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_21815278C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void turi::sketches::streaming_quantile_sketch<double,std::less<double>>::substream_finalize(uint64_t a1)
{
  uint64_t v2;
  __n128 v3;
  __n128 v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  void **v10;
  uint64_t v11;
  void *v12;
  double v13;
  unint64_t v14;
  uint64_t i;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;

  v2 = a1 + 48;
  turi::sketches::quantile_sketch<double,std::less<double>>::init(a1 + 48, *(_QWORD *)(a1 + 8), *(double *)a1 / 3.0);
  turi::sketches::quantile_sketch<double,std::less<double>>::finalize(v2, v3);
  v5 = *(_QWORD *)(a1 + 24);
  if (*(_QWORD *)(a1 + 32) != v5)
  {
    v6 = 0;
    v7 = 0;
    do
    {
      turi::sketches::quantile_sketch<double,std::less<double>>::finalize(v5 + v6, v4);
      ++v7;
      v5 = *(_QWORD *)(a1 + 24);
      v8 = *(_QWORD *)(a1 + 32);
      v6 += 88;
    }
    while (v7 < 0x2E8BA2E8BA2E8BA3 * ((v8 - v5) >> 3));
    if (v8 != v5)
    {
      v9 = 0;
      v10 = (void **)(a1 + 104);
      v11 = 56;
      do
      {
        turi::sketches::quantile_sketch<double,std::less<double>>::merge(a1 + 104, (double **)(v5 + v11), &v17);
        v12 = *v10;
        if (*v10)
        {
          *(_QWORD *)(a1 + 112) = v12;
          operator delete(v12);
        }
        *(_OWORD *)(a1 + 104) = v17;
        *(_QWORD *)(a1 + 120) = v18;
        ++v9;
        v5 = *(_QWORD *)(a1 + 24);
        v11 += 88;
      }
      while (v9 < 0x2E8BA2E8BA2E8BA3 * ((*(_QWORD *)(a1 + 32) - v5) >> 3));
    }
  }
  v13 = ceil(1.0 / (*(double *)a1 / 3.0) + 1.0 / (*(double *)a1 / 3.0)) + 1.0;
  if ((unint64_t)v13 <= 2)
    v14 = 2;
  else
    v14 = (unint64_t)v13;
  turi::sketches::quantile_sketch<double,std::less<double>>::compress_to_size(v2, (uint64_t *)(a1 + 104), v14);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a1 + 8);
  v16 = *(_QWORD *)(a1 + 24);
  for (i = *(_QWORD *)(a1 + 32);
        i != v16;
        std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>>::destroy[abi:ne180100](a1 + 40, i))
  {
    i -= 88;
  }
  *(_QWORD *)(a1 + 32) = v16;
}

void turi::sketches::quantile_sketch<double,std::less<double>>::finalize(uint64_t a1, __n128 a2)
{
  void *v3;
  double v4;
  unint64_t v5;
  __n128 v6;
  uint64_t v7;
  __int128 *v8;
  unint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;

  turi::sketches::quantile_sketch<double,std::less<double>>::sort_level_0(a1, a2);
  turi::sketches::quantile_sketch<double,std::less<double>>::recursive_merge_of_all_levels(a1, 0, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32)) >> 3), &v11);
  v3 = *(void **)(a1 + 56);
  if (v3)
  {
    *(_QWORD *)(a1 + 64) = v3;
    operator delete(v3);
  }
  *(_OWORD *)(a1 + 56) = v11;
  *(_QWORD *)(a1 + 72) = v12;
  v4 = ceil(1.0 / (*(double *)(a1 + 24) * 0.5) + 1.0 / (*(double *)(a1 + 24) * 0.5)) + 1.0;
  if ((unint64_t)v4 <= 2)
    v5 = 2;
  else
    v5 = (unint64_t)v4;
  v6 = turi::sketches::quantile_sketch<double,std::less<double>>::compress_to_size(a1, (uint64_t *)(a1 + 56), v5);
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *(__int128 **)(a1 + 64);
  v9 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v8 - v7) >> 3));
  *(_QWORD *)&v11 = turi::sketches::quantile_sketch<double,std::less<double>>::rank_center_comparator;
  if (v8 == (__int128 *)v7)
    v10 = 0;
  else
    v10 = v9;
  std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(turi::sketches::quantile_sketch<double,std::less<double>>::element const&,turi::sketches::quantile_sketch<double,std::less<double>>::element const&),turi::sketches::quantile_sketch<double,std::less<double>>::element*,false>(v7, v8, (uint64_t (**)(__int128 *, __int128 *))&v11, v10, 1, v6);
  std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)(a1 + 32));
  *(_QWORD *)a1 = *(_QWORD *)(a1 + 16);
}

void turi::sketches::quantile_sketch<double,std::less<double>>::recursive_merge_of_all_levels(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v6;
  void *__p[3];
  void *v8[3];

  if (a3 - a2 == 2)
  {
    turi::sketches::quantile_sketch<double,std::less<double>>::merge(*(_QWORD *)(a1 + 32) + 24 * a2, (double **)(*(_QWORD *)(a1 + 32) + 24 * a2 + 24), a4);
  }
  else if (a3 - a2 == 1)
  {
    v6 = *(_QWORD *)(a1 + 32) + 24 * a2;
    a4[1] = 0;
    a4[2] = 0;
    *a4 = 0;
    *(_OWORD *)a4 = *(_OWORD *)v6;
    a4[2] = *(_QWORD *)(v6 + 16);
    *(_QWORD *)v6 = 0;
    *(_QWORD *)(v6 + 8) = 0;
    *(_QWORD *)(v6 + 16) = 0;
  }
  else
  {
    turi::sketches::quantile_sketch<double,std::less<double>>::recursive_merge_of_all_levels(v8, a1);
    turi::sketches::quantile_sketch<double,std::less<double>>::recursive_merge_of_all_levels(__p, a1);
    turi::sketches::quantile_sketch<double,std::less<double>>::merge((uint64_t)v8, (double **)__p, a4);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (v8[0])
    {
      v8[1] = v8[0];
      operator delete(v8[0]);
    }
  }
}

void sub_218152B40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

BOOL turi::sketches::quantile_sketch<double,std::less<double>>::rank_center_comparator(uint64_t a1, uint64_t a2)
{
  return (float)((float)((float)*(unint64_t *)(a1 + 8) + (float)*(unint64_t *)(a1 + 16)) * 0.5) < (float)((float)((float)*(unint64_t *)(a2 + 8) + (float)*(unint64_t *)(a2 + 16)) * 0.5);
}

void std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(turi::sketches::quantile_sketch<double,std::less<double>>::element const&,turi::sketches::quantile_sketch<double,std::less<double>>::element const&),turi::sketches::quantile_sketch<double,std::less<double>>::element*,false>(uint64_t a1, __int128 *a2, uint64_t (**a3)(__int128 *, __int128 *), uint64_t a4, char a5, __n128 a6)
{
  __int128 *v10;
  __int128 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  __int128 *v17;
  uint64_t v18;
  __int128 *v19;
  __int128 *v20;
  __int128 *v21;
  __int128 v22;
  uint64_t v23;
  char v24;
  BOOL v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;

uint64_t std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(turi::sketches::quantile_sketch<double,std::less<double>>::element const&,turi::sketches::quantile_sketch<double,std::less<double>>::element const&),turi::sketches::quantile_sketch<double,std::less<double>>::element*>(uint64_t result, uint64_t a2, uint64_t (**a3)(uint64_t, uint64_t))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (result != a2)
  {
    v17 = v3;
    v18 = v4;
    v6 = result;
    v7 = result + 24;
    if (result + 24 != a2)
    {
      v9 = 0;
      v10 = result;
      do
      {
        v11 = v10;
        v10 = v7;
        result = (*a3)(v7, v11);
        if ((_DWORD)result)
        {
          v15 = *(_OWORD *)v10;
          v16 = *(_QWORD *)(v10 + 16);
          v12 = v9;
          while (1)
          {
            v13 = v6 + v12;
            *(_OWORD *)(v13 + 24) = *(_OWORD *)(v6 + v12);
            *(_QWORD *)(v13 + 40) = *(_QWORD *)(v6 + v12 + 16);
            if (!v12)
              break;
            v12 -= 24;
            result = (*a3)((uint64_t)&v15, v12 + v6);
            if ((result & 1) == 0)
            {
              v14 = v6 + v12 + 24;
              goto LABEL_10;
            }
          }
          v14 = v6;
LABEL_10:
          *(_OWORD *)v14 = v15;
          *(_QWORD *)(v14 + 16) = v16;
        }
        v7 = v10 + 24;
        v9 += 24;
      }
      while (v10 + 24 != a2);
    }
  }
  return result;
}

uint64_t std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(turi::sketches::quantile_sketch<double,std::less<double>>::element const&,turi::sketches::quantile_sketch<double,std::less<double>>::element const&),turi::sketches::quantile_sketch<double,std::less<double>>::element*>(uint64_t result, uint64_t a2, uint64_t (**a3)(uint64_t, uint64_t))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (result != a2)
  {
    v14 = v3;
    v15 = v4;
    v6 = result;
    v7 = result + 24;
    if (result + 24 != a2)
    {
      v9 = result - 24;
      do
      {
        v10 = v6;
        v6 = v7;
        result = (*a3)(v7, v10);
        if ((_DWORD)result)
        {
          v12 = *(_OWORD *)v6;
          v13 = *(_QWORD *)(v6 + 16);
          v11 = v9;
          do
          {
            *(_OWORD *)(v11 + 48) = *(_OWORD *)(v11 + 24);
            *(_QWORD *)(v11 + 64) = *(_QWORD *)(v11 + 40);
            result = (*a3)((uint64_t)&v12, v11);
            v11 -= 24;
          }
          while ((result & 1) != 0);
          *(_OWORD *)(v11 + 48) = v12;
          *(_QWORD *)(v11 + 64) = v13;
        }
        v7 = v6 + 24;
        v9 += 24;
      }
      while (v6 + 24 != a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(turi::sketches::quantile_sketch<double,std::less<double>>::element const&,turi::sketches::quantile_sketch<double,std::less<double>>::element const&),turi::sketches::quantile_sketch<double,std::less<double>>::element*>(__int128 *a1, __int128 *a2, __int128 *a3, uint64_t (**a4)(__int128 *, __int128 *))
{
  char v8;
  uint64_t result;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  v8 = (*a4)(a2, a1);
  result = (*a4)(a3, a2);
  if ((v8 & 1) == 0)
  {
    if (!(_DWORD)result)
      return result;
    v13 = *((_QWORD *)a2 + 2);
    v14 = *a2;
    v15 = *((_QWORD *)a3 + 2);
    *a2 = *a3;
    *((_QWORD *)a2 + 2) = v15;
    *a3 = v14;
    *((_QWORD *)a3 + 2) = v13;
    if (!(*a4)(a2, a1))
      return 1;
    v16 = *((_QWORD *)a1 + 2);
    v17 = *a1;
    v18 = *((_QWORD *)a2 + 2);
    *a1 = *a2;
    *((_QWORD *)a1 + 2) = v18;
    *a2 = v17;
    *((_QWORD *)a2 + 2) = v16;
    return 2;
  }
  if (!(_DWORD)result)
  {
    v19 = *((_QWORD *)a1 + 2);
    v20 = *a1;
    v21 = *((_QWORD *)a2 + 2);
    *a1 = *a2;
    *((_QWORD *)a1 + 2) = v21;
    *a2 = v20;
    *((_QWORD *)a2 + 2) = v19;
    if (!(*a4)(a3, a2))
      return 1;
    v22 = *((_QWORD *)a2 + 2);
    v23 = *a2;
    v24 = *((_QWORD *)a3 + 2);
    *a2 = *a3;
    *((_QWORD *)a2 + 2) = v24;
    *a3 = v23;
    *((_QWORD *)a3 + 2) = v22;
    return 2;
  }
  v10 = *((_QWORD *)a1 + 2);
  v11 = *a1;
  v12 = *((_QWORD *)a3 + 2);
  *a1 = *a3;
  *((_QWORD *)a1 + 2) = v12;
  *a3 = v11;
  *((_QWORD *)a3 + 2) = v10;
  return 1;
}

__int128 *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<double,std::less<double>>::element *,BOOL (*&)(turi::sketches::quantile_sketch<double,std::less<double>>::element const&,turi::sketches::quantile_sketch<double,std::less<double>>::element const&)>(__int128 *a1, __int128 *a2, uint64_t (**a3)(__int128 *, __int128 *))
{
  __int128 *v4;
  __int128 *v6;
  __int128 *v7;
  int v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 *v12;
  __int128 v13;
  __int128 v14;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;

  v4 = a2;
  v16 = *a1;
  v17 = *((_QWORD *)a1 + 2);
  if (((*a3)(&v16, (__int128 *)((char *)a2 - 24)) & 1) != 0)
  {
    v6 = a1;
    do
      v6 = (__int128 *)((char *)v6 + 24);
    while (((*a3)(&v16, v6) & 1) == 0);
  }
  else
  {
    v7 = (__int128 *)((char *)a1 + 24);
    do
    {
      v6 = v7;
      if (v7 >= v4)
        break;
      v8 = (*a3)(&v16, v7);
      v7 = (__int128 *)((char *)v6 + 24);
    }
    while (!v8);
  }
  if (v6 < v4)
  {
    do
      v4 = (__int128 *)((char *)v4 - 24);
    while (((*a3)(&v16, v4) & 1) != 0);
  }
  while (v6 < v4)
  {
    v9 = *v6;
    v19 = *((_QWORD *)v6 + 2);
    v18 = v9;
    v10 = *v4;
    *((_QWORD *)v6 + 2) = *((_QWORD *)v4 + 2);
    *v6 = v10;
    v11 = v18;
    *((_QWORD *)v4 + 2) = v19;
    *v4 = v11;
    do
      v6 = (__int128 *)((char *)v6 + 24);
    while (!(*a3)(&v16, v6));
    do
      v4 = (__int128 *)((char *)v4 - 24);
    while (((*a3)(&v16, v4) & 1) != 0);
  }
  v12 = (__int128 *)((char *)v6 - 24);
  if ((__int128 *)((char *)v6 - 24) != a1)
  {
    v13 = *v12;
    *((_QWORD *)a1 + 2) = *((_QWORD *)v6 - 1);
    *a1 = v13;
  }
  v14 = v16;
  *((_QWORD *)v6 - 1) = v17;
  *v12 = v14;
  return v6;
}

uint64_t std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<double,std::less<double>>::element *,BOOL (*&)(turi::sketches::quantile_sketch<double,std::less<double>>::element const&,turi::sketches::quantile_sketch<double,std::less<double>>::element const&)>(__int128 *a1, unint64_t a2, uint64_t (**a3)(char *, __int128 *))
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  __int128 *v9;
  unint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;

  v6 = 0;
  v17 = *a1;
  v18 = *((_QWORD *)a1 + 2);
  do
    v6 += 24;
  while (((*a3)((char *)a1 + v6, &v17) & 1) != 0);
  v7 = (unint64_t)a1 + v6;
  v8 = (uint64_t)a1 + v6 - 24;
  if (v6 == 24)
  {
    do
    {
      if (v7 >= a2)
        break;
      a2 -= 24;
    }
    while (((*a3)((char *)a2, &v17) & 1) == 0);
  }
  else
  {
    do
      a2 -= 24;
    while (!(*a3)((char *)a2, &v17));
  }
  if (v7 < a2)
  {
    v9 = (__int128 *)((char *)a1 + v6);
    v10 = a2;
    do
    {
      v19 = *v9;
      v11 = v19;
      v20 = *((_QWORD *)v9 + 2);
      v12 = v20;
      v13 = *(_QWORD *)(v10 + 16);
      *v9 = *(_OWORD *)v10;
      *((_QWORD *)v9 + 2) = v13;
      *(_QWORD *)(v10 + 16) = v12;
      *(_OWORD *)v10 = v11;
      do
        v9 = (__int128 *)((char *)v9 + 24);
      while (((*a3)((char *)v9, &v17) & 1) != 0);
      do
        v10 -= 24;
      while (!(*a3)((char *)v10, &v17));
    }
    while ((unint64_t)v9 < v10);
    v8 = (uint64_t)v9 - 24;
  }
  if ((__int128 *)v8 != a1)
  {
    v14 = *(_OWORD *)v8;
    *((_QWORD *)a1 + 2) = *(_QWORD *)(v8 + 16);
    *a1 = v14;
  }
  v15 = v17;
  *(_QWORD *)(v8 + 16) = v18;
  *(_OWORD *)v8 = v15;
  return v8;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(turi::sketches::quantile_sketch<double,std::less<double>>::element const&,turi::sketches::quantile_sketch<double,std::less<double>>::element const&),turi::sketches::quantile_sketch<double,std::less<double>>::element*>(uint64_t a1, uint64_t a2, uint64_t (**a3)(__int128 *, __int128 *))
{
  unint64_t v6;
  _BOOL8 result;
  __int128 *v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;

  v6 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v8 = (__int128 *)(a2 - 24);
      if ((*a3)((__int128 *)(a2 - 24), (__int128 *)a1))
      {
        v9 = *(_QWORD *)(a1 + 16);
        v10 = *(_OWORD *)a1;
        v11 = *(_QWORD *)(a2 - 8);
        *(_OWORD *)a1 = *v8;
        *(_QWORD *)(a1 + 16) = v11;
        *v8 = v10;
        *(_QWORD *)(a2 - 8) = v9;
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(turi::sketches::quantile_sketch<double,std::less<double>>::element const&,turi::sketches::quantile_sketch<double,std::less<double>>::element const&),turi::sketches::quantile_sketch<double,std::less<double>>::element*>((__int128 *)a1, (__int128 *)(a1 + 24), (__int128 *)(a2 - 24), a3);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(turi::sketches::quantile_sketch<double,std::less<double>>::element const&,turi::sketches::quantile_sketch<double,std::less<double>>::element const&),turi::sketches::quantile_sketch<double,std::less<double>>::element*>(a1, a1 + 24, a1 + 48, a2 - 24, a3);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(turi::sketches::quantile_sketch<double,std::less<double>>::element const&,turi::sketches::quantile_sketch<double,std::less<double>>::element const&),turi::sketches::quantile_sketch<double,std::less<double>>::element*>((__n128 *)a1, a1 + 24, a1 + 48, a1 + 72, a2 - 24, a3);
      return 1;
    default:
      v12 = (__int128 *)(a1 + 48);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(turi::sketches::quantile_sketch<double,std::less<double>>::element const&,turi::sketches::quantile_sketch<double,std::less<double>>::element const&),turi::sketches::quantile_sketch<double,std::less<double>>::element*>((__int128 *)a1, (__int128 *)(a1 + 24), (__int128 *)(a1 + 48), a3);
      v13 = a1 + 72;
      if (a1 + 72 == a2)
        return 1;
      v14 = 0;
      v15 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)((__int128 *)v13, v12))
    {
      v19 = *(_OWORD *)v13;
      v20 = *(_QWORD *)(v13 + 16);
      v16 = v14;
      while (1)
      {
        v17 = a1 + v16;
        *(_OWORD *)(v17 + 72) = *(_OWORD *)(a1 + v16 + 48);
        *(_QWORD *)(v17 + 88) = *(_QWORD *)(a1 + v16 + 64);
        if (v16 == -48)
          break;
        v16 -= 24;
        if (((*a3)(&v19, (__int128 *)(v17 + 24)) & 1) == 0)
        {
          v18 = a1 + v16 + 72;
          goto LABEL_12;
        }
      }
      v18 = a1;
LABEL_12:
      *(_OWORD *)v18 = v19;
      *(_QWORD *)(v18 + 16) = v20;
      if (++v15 == 8)
        return v13 + 24 == a2;
    }
    v12 = (__int128 *)v13;
    v14 += 24;
    v13 += 24;
    if (v13 == a2)
      return 1;
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(turi::sketches::quantile_sketch<double,std::less<double>>::element const&,turi::sketches::quantile_sketch<double,std::less<double>>::element const&),turi::sketches::quantile_sketch<double,std::less<double>>::element*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (**a5)(__int128 *, __int128 *))
{
  __n128 result;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(turi::sketches::quantile_sketch<double,std::less<double>>::element const&,turi::sketches::quantile_sketch<double,std::less<double>>::element const&),turi::sketches::quantile_sketch<double,std::less<double>>::element*>((__int128 *)a1, (__int128 *)a2, (__int128 *)a3, a5);
  if ((*a5)((__int128 *)a4, (__int128 *)a3))
  {
    v11 = *(_QWORD *)(a3 + 16);
    v12 = *(_OWORD *)a3;
    v13 = *(_QWORD *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_QWORD *)(a3 + 16) = v13;
    *(_OWORD *)a4 = v12;
    *(_QWORD *)(a4 + 16) = v11;
    if ((*a5)((__int128 *)a3, (__int128 *)a2))
    {
      v14 = *(_QWORD *)(a2 + 16);
      v15 = *(_OWORD *)a2;
      v16 = *(_QWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_QWORD *)(a2 + 16) = v16;
      *(_OWORD *)a3 = v15;
      *(_QWORD *)(a3 + 16) = v14;
      if ((*a5)((__int128 *)a2, (__int128 *)a1))
      {
        v17 = *(_QWORD *)(a1 + 16);
        result = *(__n128 *)a1;
        v18 = *(_QWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_QWORD *)(a1 + 16) = v18;
        *(__n128 *)a2 = result;
        *(_QWORD *)(a2 + 16) = v17;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(turi::sketches::quantile_sketch<double,std::less<double>>::element const&,turi::sketches::quantile_sketch<double,std::less<double>>::element const&),turi::sketches::quantile_sketch<double,std::less<double>>::element*>(__n128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (**a6)(__int128 *, __int128 *))
{
  __n128 v12;
  __n128 result;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;

  v12 = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(turi::sketches::quantile_sketch<double,std::less<double>>::element const&,turi::sketches::quantile_sketch<double,std::less<double>>::element const&),turi::sketches::quantile_sketch<double,std::less<double>>::element*>((uint64_t)a1, a2, a3, a4, a6);
  if (((unsigned int (*)(uint64_t, uint64_t, __n128))*a6)(a5, a4, v12))
  {
    v14 = *(_QWORD *)(a4 + 16);
    v15 = *(_OWORD *)a4;
    v16 = *(_QWORD *)(a5 + 16);
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(_QWORD *)(a4 + 16) = v16;
    *(_OWORD *)a5 = v15;
    *(_QWORD *)(a5 + 16) = v14;
    if ((*a6)((__int128 *)a4, (__int128 *)a3))
    {
      v17 = *(_QWORD *)(a3 + 16);
      v18 = *(_OWORD *)a3;
      v19 = *(_QWORD *)(a4 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_QWORD *)(a3 + 16) = v19;
      *(_OWORD *)a4 = v18;
      *(_QWORD *)(a4 + 16) = v17;
      if ((*a6)((__int128 *)a3, (__int128 *)a2))
      {
        v20 = *(_QWORD *)(a2 + 16);
        v21 = *(__n128 *)a2;
        v22 = *(_QWORD *)(a3 + 16);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(_QWORD *)(a2 + 16) = v22;
        *(__n128 *)a3 = v21;
        *(_QWORD *)(a3 + 16) = v20;
        if ((*a6)((__int128 *)a2, (__int128 *)a1))
        {
          v23 = a1[1].n128_u64[0];
          result = *a1;
          v24 = *(_QWORD *)(a2 + 16);
          *a1 = *(__n128 *)a2;
          a1[1].n128_u64[0] = v24;
          *(__n128 *)a2 = result;
          *(_QWORD *)(a2 + 16) = v23;
        }
      }
    }
  }
  return result;
}

__n128 *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(turi::sketches::quantile_sketch<double,std::less<double>>::element const&,turi::sketches::quantile_sketch<double,std::less<double>>::element const&),turi::sketches::quantile_sketch<double,std::less<double>>::element*,turi::sketches::quantile_sketch<double,std::less<double>>::element*>(__n128 *a1, __n128 *a2, __n128 *a3, unsigned int (**a4)(uint64_t, __int8 *), __n128 a5)
{
  __n128 *v7;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  __n128 *v13;
  __n128 *v14;
  __n128 *v15;
  unint64_t v16;
  __n128 v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __n128 v26;
  __n128 *v29;
  __n128 *v30;
  __n128 v31;
  unint64_t v32;

  if (a1 != a2)
  {
    v7 = a2;
    v9 = (char *)a2 - (char *)a1;
    v10 = ((char *)a2 - (char *)a1) / 24;
    if ((char *)a2 - (char *)a1 >= 25)
    {
      v11 = (unint64_t)(v10 - 2) >> 1;
      v12 = v11 + 1;
      v13 = (__n128 *)((char *)a1 + 24 * v11);
      do
      {
        a5 = std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(turi::sketches::quantile_sketch<double,std::less<double>>::element const&,turi::sketches::quantile_sketch<double,std::less<double>>::element const&),turi::sketches::quantile_sketch<double,std::less<double>>::element*>((uint64_t)a1, a4, v10, v13);
        v13 = (__n128 *)((char *)v13 - 24);
        --v12;
      }
      while (v12);
    }
    v14 = v7;
    if (v7 != a3)
    {
      v15 = v7;
      do
      {
        if (((unsigned int (*)(__n128 *, __n128 *, __n128))*a4)(v15, a1, a5))
        {
          v16 = v15[1].n128_u64[0];
          v17 = *v15;
          v18 = a1[1].n128_u64[0];
          *v15 = *a1;
          v15[1].n128_u64[0] = v18;
          *a1 = v17;
          a1[1].n128_u64[0] = v16;
          a5 = std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(turi::sketches::quantile_sketch<double,std::less<double>>::element const&,turi::sketches::quantile_sketch<double,std::less<double>>::element const&),turi::sketches::quantile_sketch<double,std::less<double>>::element*>((uint64_t)a1, a4, v10, a1);
        }
        v15 = (__n128 *)((char *)v15 + 24);
      }
      while (v15 != a3);
      v14 = a3;
    }
    if (v9 < 25)
    {
      return v14;
    }
    else
    {
      v29 = v14;
      v19 = v9 / 0x18uLL;
      do
      {
        v30 = v7;
        v20 = 0;
        v31 = *a1;
        v32 = a1[1].n128_u64[0];
        v21 = (uint64_t)a1;
        do
        {
          v22 = v21 + 24 * v20 + 24;
          v23 = (2 * v20) | 1;
          v24 = 2 * v20 + 2;
          if (v24 < v19 && (*a4)(v21 + 24 * v20 + 24, (__int8 *)(v21 + 24 * v20 + 48)))
          {
            v22 += 24;
            v23 = v24;
          }
          v25 = *(_OWORD *)v22;
          *(_QWORD *)(v21 + 16) = *(_QWORD *)(v22 + 16);
          *(_OWORD *)v21 = v25;
          v21 = v22;
          v20 = v23;
        }
        while (v23 <= (uint64_t)((unint64_t)(v19 - 2) >> 1));
        v7 = (__n128 *)((char *)v30 - 24);
        if ((__int8 *)v22 == &v30[-2].n128_i8[8])
        {
          *(_QWORD *)(v22 + 16) = v32;
          *(__n128 *)v22 = v31;
        }
        else
        {
          v26 = *v7;
          *(_QWORD *)(v22 + 16) = v30[-1].n128_u64[1];
          *(__n128 *)v22 = v26;
          *v7 = v31;
          v30[-1].n128_u64[1] = v32;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(turi::sketches::quantile_sketch<double,std::less<double>>::element const&,turi::sketches::quantile_sketch<double,std::less<double>>::element const&),turi::sketches::quantile_sketch<double,std::less<double>>::element*>((uint64_t)a1, v22 + 24, (uint64_t (**)(__int128 *, __int128 *))a4, 0xAAAAAAAAAAAAAAABLL * ((v22 + 24 - (uint64_t)a1) >> 3));
        }
      }
      while (v19-- > 2);
      return v29;
    }
  }
  return a3;
}

__n128 std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(turi::sketches::quantile_sketch<double,std::less<double>>::element const&,turi::sketches::quantile_sketch<double,std::less<double>>::element const&),turi::sketches::quantile_sketch<double,std::less<double>>::element*>(uint64_t a1, unsigned int (**a2)(uint64_t, __int8 *), uint64_t a3, __n128 *a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  __n128 *v7;
  uint64_t v9;
  uint64_t v12;
  __n128 *v13;
  uint64_t v14;
  __n128 result;
  __n128 *v16;
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v6 = a3 - 2;
  if (a3 >= 2)
  {
    v22 = v4;
    v23 = v5;
    v7 = a4;
    v9 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)a4 - a1) >> 3)))
    {
      v12 = (0x5555555555555556 * (((uint64_t)a4 - a1) >> 3)) | 1;
      v13 = (__n128 *)(a1 + 24 * v12);
      v14 = 0x5555555555555556 * (((uint64_t)a4 - a1) >> 3) + 2;
      if (v14 < a3 && (*a2)(a1 + 24 * v12, &v13[1].n128_i8[8]))
      {
        v13 = (__n128 *)((char *)v13 + 24);
        v12 = v14;
      }
      if ((((uint64_t (*)(__n128 *, __n128 *))*a2)(v13, v7) & 1) == 0)
      {
        v20 = *v7;
        v21 = v7[1].n128_u64[0];
        do
        {
          v16 = v13;
          v17 = *v13;
          v7[1].n128_u64[0] = v13[1].n128_u64[0];
          *v7 = v17;
          if (v9 < v12)
            break;
          v18 = (2 * v12) | 1;
          v13 = (__n128 *)(a1 + 24 * v18);
          v19 = 2 * v12 + 2;
          if (v19 < a3)
          {
            if ((*a2)(a1 + 24 * v18, &v13[1].n128_i8[8]))
            {
              v13 = (__n128 *)((char *)v13 + 24);
              v18 = v19;
            }
          }
          v7 = v16;
          v12 = v18;
        }
        while (!(*a2)((uint64_t)v13, (__int8 *)&v20));
        result = v20;
        v16[1].n128_u64[0] = v21;
        *v16 = result;
      }
    }
  }
  return result;
}

double std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(turi::sketches::quantile_sketch<double,std::less<double>>::element const&,turi::sketches::quantile_sketch<double,std::less<double>>::element const&),turi::sketches::quantile_sketch<double,std::less<double>>::element*>(uint64_t a1, uint64_t a2, uint64_t (**a3)(__int128 *, __int128 *), uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v9;
  __int128 *v10;
  __int128 *v11;
  double result;
  __int128 *v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = a4 - 2;
  if (a4 >= 2)
  {
    v17 = v4;
    v18 = v5;
    v9 = v6 >> 1;
    v10 = (__int128 *)(a1 + 24 * (v6 >> 1));
    v11 = (__int128 *)(a2 - 24);
    if ((*a3)(v10, (__int128 *)(a2 - 24)))
    {
      v15 = *v11;
      v16 = *((_QWORD *)v11 + 2);
      do
      {
        v13 = v10;
        v14 = *v10;
        *((_QWORD *)v11 + 2) = *((_QWORD *)v10 + 2);
        *v11 = v14;
        if (!v9)
          break;
        v9 = (v9 - 1) >> 1;
        v10 = (__int128 *)(a1 + 24 * v9);
        v11 = v13;
      }
      while (((*a3)(v10, &v15) & 1) != 0);
      result = *(double *)&v15;
      *v13 = v15;
      *((_QWORD *)v13 + 2) = v16;
    }
  }
  return result;
}

void turi::sketches::streaming_quantile_sketch<double,std::less<double>>::combine(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _OWORD *v5;
  void *v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = (_OWORD *)(a1 + 48);
  if (v4)
  {
    turi::sketches::quantile_sketch<double,std::less<double>>::merge(a1 + 104, (double **)(a2 + 104), &v8);
    v6 = *(void **)(a1 + 104);
    if (v6)
    {
      *(_QWORD *)(a1 + 112) = v6;
      operator delete(v6);
    }
    *(_OWORD *)(a1 + 104) = v8;
    *(_QWORD *)(a1 + 120) = v9;
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 64);
    *v5 = *(_OWORD *)(a2 + 48);
    v5[1] = v7;
    if (a1 != a2)
    {
      std::vector<std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>>::__assign_with_size[abi:ne180100]<std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>*,std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>*>(a1 + 80, *(_QWORD *)(a2 + 80), *(_QWORD *)(a2 + 88), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 88) - *(_QWORD *)(a2 + 80)) >> 3));
      std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>::__assign_with_size[abi:ne180100]<turi::sketches::quantile_sketch<double,std::less<double>>::element*,turi::sketches::quantile_sketch<double,std::less<double>>::element*>((char *)(a1 + 104), *(char **)(a2 + 104), *(_QWORD *)(a2 + 112), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 112) - *(_QWORD *)(a2 + 104)) >> 3));
    }
    *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  }
  *(_QWORD *)(a1 + 8) += *(_QWORD *)(a2 + 8);
}

uint64_t turi::sketches::streaming_quantile_sketch<double,std::less<double>>::~streaming_quantile_sketch(uint64_t a1)
{
  void *v2;
  void **v4;

  v2 = *(void **)(a1 + 104);
  if (v2)
  {
    *(_QWORD *)(a1 + 112) = v2;
    operator delete(v2);
  }
  v4 = (void **)(a1 + 80);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v4);
  v4 = (void **)(a1 + 24);
  std::vector<turi::sketches::quantile_sketch<double,std::less<double>>>::__destroy_vector::operator()[abi:ne180100](&v4);
  return a1;
}

void std::vector<std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>>::__assign_with_size[abi:ne180100]<std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>*,std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>*>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  char v20;
  char v21;

  v8 = a1 + 16;
  v9 = *(char **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a4)
  {
    std::vector<std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>>::__vdeallocate((uint64_t *)a1);
    if (a4 > 0xAAAAAAAAAAAAAAALL)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3);
    if (v10 <= a4)
      v10 = a4;
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v10;
    std::vector<std::string>::__vallocate[abi:ne180100]((_QWORD *)a1, v11);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>>,std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>*,std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>*,std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>*>(v8, a2, a3, *(_QWORD **)(a1 + 8));
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3) < a4)
  {
    v13 = a2 + 8 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3);
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>> *,std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>> *,std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>> *>((int)&v20, a2, v13, v9);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>>,std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>*,std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>*,std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>*>(v8, v13, a3, *(_QWORD **)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = v12;
    return;
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>> *,std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>> *,std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>> *>((int)&v21, a2, a3, v9);
  v15 = v14;
  v16 = *(_QWORD *)(a1 + 8);
  if (v16 != v14)
  {
    v17 = *(_QWORD *)(a1 + 8);
    do
    {
      v19 = *(void **)(v17 - 24);
      v17 -= 24;
      v18 = v19;
      if (v19)
      {
        *(_QWORD *)(v16 - 16) = v18;
        operator delete(v18);
      }
      v16 = v17;
    }
    while (v17 != v15);
  }
  *(_QWORD *)(a1 + 8) = v15;
}

void sub_218154008(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_218154010(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>>::__vdeallocate(uint64_t *a1)
{
  if (*a1)
  {
    std::vector<std::vector<float>>::__clear[abi:ne180100](a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

_QWORD *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>>,std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>*,std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>*,std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>*>(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  _QWORD *v10;
  _QWORD *v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>::__init_with_size[abi:ne180100]<turi::sketches::quantile_sketch<double,std::less<double>>::element*,turi::sketches::quantile_sketch<double,std::less<double>>::element*>(v4, *(const void **)v6, *(_QWORD *)(v6 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v6 + 8) - *(_QWORD *)v6) >> 3));
      v4 = v11 + 3;
      v11 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>>,std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_2181540F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>>,std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>>,std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned long>>,std::vector<unsigned long>*>::operator()[abi:ne180100](a1);
  return a1;
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>> *,std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>> *,std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>> *>(int a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v5;

  v5 = a2;
  if (a2 != a3)
  {
    do
    {
      if ((char *)v5 != a4)
        std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>::__assign_with_size[abi:ne180100]<turi::sketches::quantile_sketch<double,std::less<double>>::element*,turi::sketches::quantile_sketch<double,std::less<double>>::element*>(a4, *(char **)v5, *(_QWORD *)(v5 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v5 + 8) - *(_QWORD *)v5) >> 3));
      v5 += 24;
      a4 += 24;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

char *std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>::__assign_with_size[abi:ne180100]<turi::sketches::quantile_sketch<double,std::less<double>>::element*,turi::sketches::quantile_sketch<double,std::less<double>>::element*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void **v13;
  char *v14;
  _BYTE *v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *(_QWORD *)result) >> 3) < a4)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 > 0xAAAAAAAAAAAAAAALL)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    v11 = 2 * v10;
    if (2 * v10 <= a4)
      v11 = a4;
    if (v10 >= 0x555555555555555)
      v12 = 0xAAAAAAAAAAAAAAALL;
    else
      v12 = v11;
    result = std::vector<std::string>::__vallocate[abi:ne180100](v7, v12);
    v14 = (char *)v7[1];
    v13 = (void **)(v7 + 1);
    v9 = v14;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v13 = (void **)(result + 8);
  v15 = (_BYTE *)*((_QWORD *)result + 1);
  if (0xAAAAAAAAAAAAAAABLL * ((v15 - v9) >> 3) >= a4)
    goto LABEL_16;
  v16 = &__src[8 * ((v15 - v9) >> 3)];
  if (v15 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v15 - v9);
    v9 = (char *)*v13;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v13 = &v9[v17];
  return result;
}

_QWORD *std::vector<turi::sketches::quantile_sketch<double,std::less<double>>>::__init_with_size[abi:ne180100]<turi::sketches::quantile_sketch<double,std::less<double>>*,turi::sketches::quantile_sketch<double,std::less<double>>*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<turi::sketches::quantile_sketch<double,std::less<double>>>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>>,turi::sketches::quantile_sketch<double,std::less<double>>*,turi::sketches::quantile_sketch<double,std::less<double>>*,turi::sketches::quantile_sketch<double,std::less<double>>*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_218154354(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<turi::sketches::quantile_sketch<double,std::less<double>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<turi::sketches::quantile_sketch<double,std::less<double>>>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x2E8BA2E8BA2E8BBLL)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[88 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>>,turi::sketches::quantile_sketch<double,std::less<double>>*,turi::sketches::quantile_sketch<double,std::less<double>>*,turi::sketches::quantile_sketch<double,std::less<double>>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v9[3];
  char v10;
  uint64_t v11;
  uint64_t v12;

  v4 = a4;
  v11 = a4;
  v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>>::construct[abi:ne180100]<turi::sketches::quantile_sketch<double,std::less<double>>,turi::sketches::quantile_sketch<double,std::less<double>>&>(a1, v4, v6);
      v6 += 88;
      v4 = v12 + 88;
      v12 += 88;
    }
    while (v6 != a3);
  }
  v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>>,turi::sketches::quantile_sketch<double,std::less<double>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_21815445C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>>,turi::sketches::quantile_sketch<double,std::less<double>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>>::construct[abi:ne180100]<turi::sketches::quantile_sketch<double,std::less<double>>,turi::sketches::quantile_sketch<double,std::less<double>>&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v5;
  _QWORD *result;

  v5 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_OWORD *)(a2 + 16) = v5;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  std::vector<std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>>::__init_with_size[abi:ne180100]<std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>*,std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>*>((_QWORD *)(a2 + 32), *(_QWORD *)(a3 + 32), *(_QWORD *)(a3 + 40), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a3 + 40) - *(_QWORD *)(a3 + 32)) >> 3));
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  result = std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>::__init_with_size[abi:ne180100]<turi::sketches::quantile_sketch<double,std::less<double>>::element*,turi::sketches::quantile_sketch<double,std::less<double>>::element*>((_QWORD *)(a2 + 56), *(const void **)(a3 + 56), *(_QWORD *)(a3 + 64), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a3 + 64) - *(_QWORD *)(a3 + 56)) >> 3));
  *(_BYTE *)(a2 + 80) = *(_BYTE *)(a3 + 80);
  return result;
}

void sub_2181544FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>>,turi::sketches::quantile_sketch<double,std::less<double>>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>>,turi::sketches::quantile_sketch<double,std::less<double>>*>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>>,turi::sketches::quantile_sketch<double,std::less<double>>*>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (uint64_t *)a1[1];
  v1 = (uint64_t *)a1[2];
  v3 = *v1;
  v4 = *v2;
  if (*v1 != *v2)
  {
    v5 = *a1;
    do
    {
      v3 -= 88;
      std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>>::destroy[abi:ne180100](v5, v3);
    }
    while (v3 != v4);
  }
}

_QWORD *std::vector<std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>>::__init_with_size[abi:ne180100]<std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>*,std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>>,std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>*,std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>*,std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>*>((uint64_t)(v6 + 2), a2, a3, (_QWORD *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_2181545FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t turi::sketches::quantile_sketch<double,std::less<double>>::query(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  double v8;
  unint64_t v9;
  int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double v23;

  v4 = a1 + 56;
  result = *(_QWORD *)(a1 + 56);
  v5 = *(_QWORD *)(v4 + 8) - result;
  if (!v5)
    return result;
  v6 = a2 + 1;
  if ((unint64_t)(a2 + 1) < 2)
    return result;
  v7 = *(_QWORD *)(a1 + 16);
  if (v6 >= v7)
    return result + 8 * (v5 >> 3) - 24;
  v8 = *(double *)(a1 + 24);
  result = turi::sketches::quantile_sketch<double,std::less<double>>::fast_query_iterator((_QWORD *)a1, a2);
  v9 = *(_QWORD *)(result + 8);
  if ((v9 & 0x8000000000000000) != 0)
    goto LABEL_24;
  v10 = (int)((double)(int)v6 + (double)v7 * v8);
  v11 = (int)((double)(int)v6 - (double)v7 * v8) & ~((int)((double)(int)v6 - (double)v7 * v8) >> 31);
  if (v9 >= v11)
  {
    v12 = *(_QWORD *)(result + 16);
    if ((v12 & 0x8000000000000000) == 0)
    {
      if (v12 <= v10)
        return result;
      goto LABEL_8;
    }
LABEL_24:
    truncate_check_impl<long long,unsigned long,0>::operator()(unsigned long)::{lambda(void)#1}::operator()();
  }
LABEL_8:
  v13 = *(_QWORD *)(a1 + 56);
  v14 = *(_QWORD *)(a1 + 64);
  v15 = v14 - v13;
  if (v14 != v13)
  {
    v16 = 0;
    v17 = v15 / 24;
    if (v17 <= 1)
      v17 = 1;
    v18 = (uint64_t *)(v13 + 16);
    v19 = -1;
    v20 = -1;
    do
    {
      v21 = *(v18 - 1);
      if (v21 < 0)
        goto LABEL_24;
      if (v21 >= (uint64_t)v11)
      {
        v22 = *v18;
        if (*v18 < 0)
          goto LABEL_24;
        if (v22 <= v10)
        {
          v23 = (double)(((unint64_t)(v21 + v22) >> 1) - v6);
          if (v23 < (double)v19)
          {
            v19 = (unint64_t)v23;
            v20 = v16;
          }
        }
      }
      v18 += 3;
      ++v16;
    }
    while (v17 != v16);
    if (v20 != -1)
      return v13 + 24 * v20;
  }
  return result;
}

uint64_t turi::sketches::quantile_sketch<double,std::less<double>>::fast_query_iterator(_QWORD *a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  uint64_t v11;

  v2 = a2 + 1;
  if ((unint64_t)(a2 + 1) <= 1)
    return a1[7];
  v4 = a1[8];
  if (v2 >= a1[2])
    return v4 - 24;
  result = a1[7];
  v5 = result;
  if (v4 != result)
  {
    v6 = 0xAAAAAAAAAAAAAAABLL * ((v4 - result) >> 3);
    v5 = result;
    do
    {
      v7 = v6 >> 1;
      v8 = v5 + 24 * (v6 >> 1);
      v9 = (float)((float)*(unint64_t *)(v8 + 8) + (float)*(unint64_t *)(v8 + 16)) * 0.5;
      v10 = v8 + 24;
      v6 += ~(v6 >> 1);
      if (v9 < (float)((float)((float)v2 + (float)v2) * 0.5))
        v5 = v10;
      else
        v6 = v7;
    }
    while (v6);
  }
  if (v5 == v4)
    return v4 - 24;
  if (v5 != result)
  {
    if (vabds_f32((float)((float)*(unint64_t *)(v5 - 16) + (float)*(unint64_t *)(v5 - 8)) * 0.5, (float)v2) >= vabds_f32((float)((float)*(unint64_t *)(v5 + 8) + (float)*(unint64_t *)(v5 + 16)) * 0.5, (float)v2))v11 = 0;
    else
      v11 = -1;
    return v5 + 24 * v11;
  }
  return result;
}

void *turi::sketches::streaming_quantile_sketch<double,std::less<double>>::save(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  char *v5;
  unint64_t v6;
  char *v7;
  unint64_t v8;
  char *v9;
  size_t v11;
  char **v12;
  size_t v13;
  BOOL v14;
  std::vector<char>::size_type v15;
  size_t v16;
  char **v17;
  size_t v18;
  BOOL v19;
  std::vector<char>::size_type v20;
  size_t v21;
  char **v22;
  size_t v23;
  BOOL v24;
  std::vector<char>::size_type v25;

  if (*(_QWORD *)a2)
  {
    std::ostream::write();
  }
  else
  {
    v4 = *(_QWORD *)(a2 + 40);
    if (*(_QWORD *)(a2 + 32) + 8 > v4)
    {
      v11 = 2 * v4 + 16;
      *(_QWORD *)(a2 + 40) = v11;
      v12 = *(char ***)(a2 + 16);
      if (v12)
      {
        v5 = *v12;
        v13 = v12[1] - *v12;
        v14 = v11 >= v13;
        v15 = v11 - v13;
        if (v15 != 0 && v14)
        {
          std::vector<char>::__append(*(std::vector<char> **)(a2 + 16), v15);
          v5 = **(char ***)(a2 + 16);
        }
        else if (!v14)
        {
          v12[1] = &v5[v11];
        }
      }
      else
      {
        v5 = (char *)malloc_type_realloc(*(void **)(a2 + 24), v11, 0xF6EA6B1uLL);
      }
      *(_QWORD *)(a2 + 24) = v5;
    }
    else
    {
      v5 = *(char **)(a2 + 24);
    }
    *(_QWORD *)&v5[*(_QWORD *)(a2 + 32)] = *a1;
    *(_QWORD *)(a2 + 32) += 8;
  }
  if (*(_QWORD *)a2)
  {
    std::ostream::write();
  }
  else
  {
    v6 = *(_QWORD *)(a2 + 40);
    if (*(_QWORD *)(a2 + 32) + 8 > v6)
    {
      v16 = 2 * v6 + 16;
      *(_QWORD *)(a2 + 40) = v16;
      v17 = *(char ***)(a2 + 16);
      if (v17)
      {
        v7 = *v17;
        v18 = v17[1] - *v17;
        v19 = v16 >= v18;
        v20 = v16 - v18;
        if (v20 != 0 && v19)
        {
          std::vector<char>::__append(*(std::vector<char> **)(a2 + 16), v20);
          v7 = **(char ***)(a2 + 16);
        }
        else if (!v19)
        {
          v17[1] = &v7[v16];
        }
      }
      else
      {
        v7 = (char *)malloc_type_realloc(*(void **)(a2 + 24), v16, 0xF6EA6B1uLL);
      }
      *(_QWORD *)(a2 + 24) = v7;
    }
    else
    {
      v7 = *(char **)(a2 + 24);
    }
    *(_QWORD *)&v7[*(_QWORD *)(a2 + 32)] = a1[1];
    *(_QWORD *)(a2 + 32) += 8;
  }
  if (*(_QWORD *)a2)
  {
    std::ostream::write();
  }
  else
  {
    v8 = *(_QWORD *)(a2 + 40);
    if (*(_QWORD *)(a2 + 32) + 8 > v8)
    {
      v21 = 2 * v8 + 16;
      *(_QWORD *)(a2 + 40) = v21;
      v22 = *(char ***)(a2 + 16);
      if (v22)
      {
        v9 = *v22;
        v23 = v22[1] - *v22;
        v24 = v21 >= v23;
        v25 = v21 - v23;
        if (v25 != 0 && v24)
        {
          std::vector<char>::__append(*(std::vector<char> **)(a2 + 16), v25);
          v9 = **(char ***)(a2 + 16);
        }
        else if (!v24)
        {
          v22[1] = &v9[v21];
        }
      }
      else
      {
        v9 = (char *)malloc_type_realloc(*(void **)(a2 + 24), v21, 0xF6EA6B1uLL);
      }
      *(_QWORD *)(a2 + 24) = v9;
    }
    else
    {
      v9 = *(char **)(a2 + 24);
    }
    *(_QWORD *)&v9[*(_QWORD *)(a2 + 32)] = a1[2];
    *(_QWORD *)(a2 + 32) += 8;
  }
  turi::archive_detail::vector_serialize_impl<turi::oarchive,turi::sketches::quantile_sketch<double,std::less<double>>,false>::exec(a2, a1 + 3);
  return turi::sketches::quantile_sketch<double,std::less<double>>::save((uint64_t)(a1 + 6), a2);
}

void *turi::sketches::quantile_sketch<double,std::less<double>>::save(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  char *v5;
  unint64_t v6;
  char *v7;
  unint64_t v8;
  char *v9;
  unint64_t v10;
  char *v11;
  size_t v13;
  char **v14;
  size_t v15;
  BOOL v16;
  std::vector<char>::size_type v17;
  size_t v18;
  char **v19;
  size_t v20;
  BOOL v21;
  std::vector<char>::size_type v22;
  size_t v23;
  char **v24;
  size_t v25;
  BOOL v26;
  std::vector<char>::size_type v27;
  size_t v28;
  char **v29;
  size_t v30;
  BOOL v31;
  std::vector<char>::size_type v32;

  if (*(_QWORD *)a2)
  {
    std::ostream::write();
  }
  else
  {
    v4 = *(_QWORD *)(a2 + 40);
    if (*(_QWORD *)(a2 + 32) + 8 > v4)
    {
      v13 = 2 * v4 + 16;
      *(_QWORD *)(a2 + 40) = v13;
      v14 = *(char ***)(a2 + 16);
      if (v14)
      {
        v5 = *v14;
        v15 = v14[1] - *v14;
        v16 = v13 >= v15;
        v17 = v13 - v15;
        if (v17 != 0 && v16)
        {
          std::vector<char>::__append(*(std::vector<char> **)(a2 + 16), v17);
          v5 = **(char ***)(a2 + 16);
        }
        else if (!v16)
        {
          v14[1] = &v5[v13];
        }
      }
      else
      {
        v5 = (char *)malloc_type_realloc(*(void **)(a2 + 24), v13, 0xF6EA6B1uLL);
      }
      *(_QWORD *)(a2 + 24) = v5;
    }
    else
    {
      v5 = *(char **)(a2 + 24);
    }
    *(_QWORD *)&v5[*(_QWORD *)(a2 + 32)] = *(_QWORD *)a1;
    *(_QWORD *)(a2 + 32) += 8;
  }
  if (*(_QWORD *)a2)
  {
    std::ostream::write();
  }
  else
  {
    v6 = *(_QWORD *)(a2 + 40);
    if (*(_QWORD *)(a2 + 32) + 8 > v6)
    {
      v18 = 2 * v6 + 16;
      *(_QWORD *)(a2 + 40) = v18;
      v19 = *(char ***)(a2 + 16);
      if (v19)
      {
        v7 = *v19;
        v20 = v19[1] - *v19;
        v21 = v18 >= v20;
        v22 = v18 - v20;
        if (v22 != 0 && v21)
        {
          std::vector<char>::__append(*(std::vector<char> **)(a2 + 16), v22);
          v7 = **(char ***)(a2 + 16);
        }
        else if (!v21)
        {
          v19[1] = &v7[v18];
        }
      }
      else
      {
        v7 = (char *)malloc_type_realloc(*(void **)(a2 + 24), v18, 0xF6EA6B1uLL);
      }
      *(_QWORD *)(a2 + 24) = v7;
    }
    else
    {
      v7 = *(char **)(a2 + 24);
    }
    *(_QWORD *)&v7[*(_QWORD *)(a2 + 32)] = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a2 + 32) += 8;
  }
  if (*(_QWORD *)a2)
  {
    std::ostream::write();
  }
  else
  {
    v8 = *(_QWORD *)(a2 + 40);
    if (*(_QWORD *)(a2 + 32) + 8 > v8)
    {
      v23 = 2 * v8 + 16;
      *(_QWORD *)(a2 + 40) = v23;
      v24 = *(char ***)(a2 + 16);
      if (v24)
      {
        v9 = *v24;
        v25 = v24[1] - *v24;
        v26 = v23 >= v25;
        v27 = v23 - v25;
        if (v27 != 0 && v26)
        {
          std::vector<char>::__append(*(std::vector<char> **)(a2 + 16), v27);
          v9 = **(char ***)(a2 + 16);
        }
        else if (!v26)
        {
          v24[1] = &v9[v23];
        }
      }
      else
      {
        v9 = (char *)malloc_type_realloc(*(void **)(a2 + 24), v23, 0xF6EA6B1uLL);
      }
      *(_QWORD *)(a2 + 24) = v9;
    }
    else
    {
      v9 = *(char **)(a2 + 24);
    }
    *(_QWORD *)&v9[*(_QWORD *)(a2 + 32)] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a2 + 32) += 8;
  }
  if (*(_QWORD *)a2)
  {
    std::ostream::write();
  }
  else
  {
    v10 = *(_QWORD *)(a2 + 40);
    if (*(_QWORD *)(a2 + 32) + 8 > v10)
    {
      v28 = 2 * v10 + 16;
      *(_QWORD *)(a2 + 40) = v28;
      v29 = *(char ***)(a2 + 16);
      if (v29)
      {
        v11 = *v29;
        v30 = v29[1] - *v29;
        v31 = v28 >= v30;
        v32 = v28 - v30;
        if (v32 != 0 && v31)
        {
          std::vector<char>::__append(*(std::vector<char> **)(a2 + 16), v32);
          v11 = **(char ***)(a2 + 16);
        }
        else if (!v31)
        {
          v29[1] = &v11[v28];
        }
      }
      else
      {
        v11 = (char *)malloc_type_realloc(*(void **)(a2 + 24), v28, 0xF6EA6B1uLL);
      }
      *(_QWORD *)(a2 + 24) = v11;
    }
    else
    {
      v11 = *(char **)(a2 + 24);
    }
    *(_QWORD *)&v11[*(_QWORD *)(a2 + 32)] = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a2 + 32) += 8;
  }
  turi::archive_detail::vector_serialize_impl<turi::oarchive,std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>,false>::exec(a2, (uint64_t *)(a1 + 32));
  return turi::archive_detail::vector_serialize_impl<turi::oarchive,turi::sketches::quantile_sketch<double,std::less<double>>::element,true>::exec(a2, (const void **)(a1 + 56));
}

void *turi::archive_detail::vector_serialize_impl<turi::oarchive,turi::sketches::quantile_sketch<double,std::less<double>>::element,true>::exec(uint64_t a1, const void **a2)
{
  unint64_t v4;
  unint64_t v5;
  char *v6;
  const void *v7;
  size_t v8;
  void *result;
  size_t v10;
  char *v11;
  size_t v12;
  char **v13;
  size_t v14;
  BOOL v15;
  std::vector<char>::size_type v16;
  size_t v17;
  char **v18;
  size_t v19;
  BOOL v20;
  std::vector<char>::size_type v21;

  v4 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a2[1] - (_BYTE *)*a2) >> 3);
  if (*(_QWORD *)a1)
  {
    std::ostream::write();
  }
  else
  {
    v5 = *(_QWORD *)(a1 + 40);
    if (*(_QWORD *)(a1 + 32) + 8 > v5)
    {
      v12 = 2 * v5 + 16;
      *(_QWORD *)(a1 + 40) = v12;
      v13 = *(char ***)(a1 + 16);
      if (v13)
      {
        v6 = *v13;
        v14 = v13[1] - *v13;
        v15 = v12 >= v14;
        v16 = v12 - v14;
        if (v16 != 0 && v15)
        {
          std::vector<char>::__append(*(std::vector<char> **)(a1 + 16), v16);
          v6 = **(char ***)(a1 + 16);
        }
        else if (!v15)
        {
          v13[1] = &v6[v12];
        }
      }
      else
      {
        v6 = (char *)malloc_type_realloc(*(void **)(a1 + 24), v12, 0xF6EA6B1uLL);
      }
      *(_QWORD *)(a1 + 24) = v6;
    }
    else
    {
      v6 = *(char **)(a1 + 24);
    }
    *(_QWORD *)&v6[*(_QWORD *)(a1 + 32)] = v4;
    *(_QWORD *)(a1 + 32) += 8;
  }
  v7 = *a2;
  v8 = (_BYTE *)a2[1] - (_BYTE *)*a2;
  if (*(_QWORD *)a1)
    return (void *)std::ostream::write();
  v10 = *(_QWORD *)(a1 + 40);
  if (*(_QWORD *)(a1 + 32) + v8 > v10)
  {
    v17 = 2 * (v10 + v8);
    *(_QWORD *)(a1 + 40) = v17;
    v18 = *(char ***)(a1 + 16);
    if (v18)
    {
      v11 = *v18;
      v19 = v18[1] - *v18;
      v20 = v17 >= v19;
      v21 = v17 - v19;
      if (v21 != 0 && v20)
      {
        std::vector<char>::__append(*(std::vector<char> **)(a1 + 16), v21);
        v11 = **(char ***)(a1 + 16);
      }
      else if (!v20)
      {
        v18[1] = &v11[v17];
      }
    }
    else
    {
      v11 = (char *)malloc_type_realloc(*(void **)(a1 + 24), v17, 0xF6EA6B1uLL);
    }
    *(_QWORD *)(a1 + 24) = v11;
  }
  else
  {
    v11 = *(char **)(a1 + 24);
  }
  result = memcpy(&v11[*(_QWORD *)(a1 + 32)], v7, v8);
  *(_QWORD *)(a1 + 32) += v8;
  return result;
}

uint64_t turi::archive_detail::vector_serialize_impl<turi::oarchive,std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>,false>::exec(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  uint64_t result;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  size_t v10;
  uint64_t *v11;
  size_t v12;
  BOOL v13;
  std::vector<char>::size_type v14;

  v4 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3);
  if (*(_QWORD *)a1)
  {
    result = std::ostream::write();
  }
  else
  {
    v6 = *(_QWORD *)(a1 + 40);
    if (*(_QWORD *)(a1 + 32) + 8 > v6)
    {
      v10 = 2 * v6 + 16;
      *(_QWORD *)(a1 + 40) = v10;
      v11 = *(uint64_t **)(a1 + 16);
      if (v11)
      {
        result = *v11;
        v12 = v11[1] - *v11;
        v13 = v10 >= v12;
        v14 = v10 - v12;
        if (v14 != 0 && v13)
        {
          std::vector<char>::__append(*(std::vector<char> **)(a1 + 16), v14);
          result = **(_QWORD **)(a1 + 16);
        }
        else if (!v13)
        {
          v11[1] = result + v10;
        }
      }
      else
      {
        result = (uint64_t)malloc_type_realloc(*(void **)(a1 + 24), v10, 0xF6EA6B1uLL);
      }
      *(_QWORD *)(a1 + 24) = result;
    }
    else
    {
      result = *(_QWORD *)(a1 + 24);
    }
    *(_QWORD *)(result + *(_QWORD *)(a1 + 32)) = v4;
    *(_QWORD *)(a1 + 32) += 8;
  }
  v7 = *a2;
  if (a2[1] != *a2)
  {
    v8 = 0;
    v9 = 0;
    do
    {
      result = (uint64_t)turi::archive_detail::vector_serialize_impl<turi::oarchive,turi::sketches::quantile_sketch<double,std::less<double>>::element,true>::exec(a1, (const void **)(v7 + v8));
      ++v9;
      v7 = *a2;
      v8 += 24;
    }
    while (v9 < 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  }
  return result;
}

uint64_t turi::archive_detail::vector_serialize_impl<turi::oarchive,turi::sketches::quantile_sketch<double,std::less<double>>,false>::exec(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t result;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  size_t v10;
  uint64_t *v11;
  size_t v12;
  BOOL v13;
  std::vector<char>::size_type v14;

  v4 = 0x2E8BA2E8BA2E8BA3 * ((a2[1] - *a2) >> 3);
  if (*(_QWORD *)a1)
  {
    result = std::ostream::write();
  }
  else
  {
    v6 = *(_QWORD *)(a1 + 40);
    if (*(_QWORD *)(a1 + 32) + 8 > v6)
    {
      v10 = 2 * v6 + 16;
      *(_QWORD *)(a1 + 40) = v10;
      v11 = *(uint64_t **)(a1 + 16);
      if (v11)
      {
        result = *v11;
        v12 = v11[1] - *v11;
        v13 = v10 >= v12;
        v14 = v10 - v12;
        if (v14 != 0 && v13)
        {
          std::vector<char>::__append(*(std::vector<char> **)(a1 + 16), v14);
          result = **(_QWORD **)(a1 + 16);
        }
        else if (!v13)
        {
          v11[1] = result + v10;
        }
      }
      else
      {
        result = (uint64_t)malloc_type_realloc(*(void **)(a1 + 24), v10, 0xF6EA6B1uLL);
      }
      *(_QWORD *)(a1 + 24) = result;
    }
    else
    {
      result = *(_QWORD *)(a1 + 24);
    }
    *(_QWORD *)(result + *(_QWORD *)(a1 + 32)) = v4;
    *(_QWORD *)(a1 + 32) += 8;
  }
  v7 = *a2;
  if (a2[1] != *a2)
  {
    v8 = 0;
    v9 = 0;
    do
    {
      result = (uint64_t)turi::sketches::quantile_sketch<double,std::less<double>>::save(v7 + v8, a1);
      ++v9;
      v7 = *a2;
      v8 += 88;
    }
    while (v9 < 0x2E8BA2E8BA2E8BA3 * ((a2[1] - *a2) >> 3));
  }
  return result;
}

void *turi::sketches::streaming_quantile_sketch<double,std::less<double>>::load(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(a2 + 16);
  if (v4)
  {
    *a1 = *(_QWORD *)(v4 + *(_QWORD *)(a2 + 24));
    *(_QWORD *)(a2 + 24) += 8;
  }
  else
  {
    std::istream::read();
  }
  v5 = *(_QWORD *)(a2 + 16);
  if (v5)
  {
    a1[1] = *(_QWORD *)(v5 + *(_QWORD *)(a2 + 24));
    *(_QWORD *)(a2 + 24) += 8;
  }
  else
  {
    std::istream::read();
  }
  v6 = *(_QWORD *)(a2 + 16);
  if (v6)
  {
    a1[2] = *(_QWORD *)(v6 + *(_QWORD *)(a2 + 24));
    *(_QWORD *)(a2 + 24) += 8;
  }
  else
  {
    std::istream::read();
  }
  turi::archive_detail::vector_deserialize_impl<turi::iarchive,turi::sketches::quantile_sketch<double,std::less<double>>,false>::exec(a2, a1 + 3);
  return turi::sketches::quantile_sketch<double,std::less<double>>::load(a1 + 6, a2);
}

void *turi::sketches::quantile_sketch<double,std::less<double>>::load(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a2 + 16);
  if (v4)
  {
    *a1 = *(_QWORD *)(v4 + *(_QWORD *)(a2 + 24));
    *(_QWORD *)(a2 + 24) += 8;
  }
  else
  {
    std::istream::read();
  }
  v5 = *(_QWORD *)(a2 + 16);
  if (v5)
  {
    a1[1] = *(_QWORD *)(v5 + *(_QWORD *)(a2 + 24));
    *(_QWORD *)(a2 + 24) += 8;
  }
  else
  {
    std::istream::read();
  }
  v6 = *(_QWORD *)(a2 + 16);
  if (v6)
  {
    a1[2] = *(_QWORD *)(v6 + *(_QWORD *)(a2 + 24));
    *(_QWORD *)(a2 + 24) += 8;
  }
  else
  {
    std::istream::read();
  }
  v7 = *(_QWORD *)(a2 + 16);
  if (v7)
  {
    a1[3] = *(_QWORD *)(v7 + *(_QWORD *)(a2 + 24));
    *(_QWORD *)(a2 + 24) += 8;
  }
  else
  {
    std::istream::read();
  }
  turi::archive_detail::vector_deserialize_impl<turi::iarchive,std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>,false>::exec(a2, a1 + 4);
  return turi::archive_detail::vector_deserialize_impl<turi::iarchive,turi::sketches::quantile_sketch<double,std::less<double>>::element,true>::exec(a2, a1 + 7);
}

void *turi::archive_detail::vector_deserialize_impl<turi::iarchive,turi::sketches::quantile_sketch<double,std::less<double>>::element,true>::exec(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  void *v7;
  size_t v8;
  uint64_t v9;
  void *result;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
  {
    v5 = *(_QWORD *)(a1 + 24);
    v6 = *(_QWORD *)(v4 + v5);
    *(_QWORD *)(a1 + 24) = v5 + 8;
  }
  else
  {
    std::istream::read();
    v6 = 0;
  }
  a2[1] = *a2;
  std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>::resize((uint64_t)a2, v6);
  v7 = (void *)*a2;
  v8 = a2[1] - *a2;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
    return (void *)std::istream::read();
  result = memcpy(v7, (const void *)(v9 + *(_QWORD *)(a1 + 24)), v8);
  *(_QWORD *)(a1 + 24) += v8;
  return result;
}

void turi::archive_detail::vector_deserialize_impl<turi::iarchive,std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>,false>::exec(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t i;
  unint64_t v8;

  v8 = 0;
  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
  {
    v5 = *(_QWORD *)(a1 + 24);
    v8 = *(_QWORD *)(v4 + v5);
    *(_QWORD *)(a1 + 24) = v5 + 8;
  }
  else
  {
    std::istream::read();
  }
  std::vector<std::vector<float>>::__clear[abi:ne180100](a2);
  std::vector<std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>>::resize(a2, v8);
  if (v8)
  {
    v6 = 0;
    for (i = 0; i < v8; ++i)
    {
      turi::archive_detail::vector_deserialize_impl<turi::iarchive,turi::sketches::quantile_sketch<double,std::less<double>>::element,true>::exec(a1, (_QWORD *)(*a2 + v6));
      v6 += 24;
    }
  }
}

void turi::archive_detail::vector_deserialize_impl<turi::iarchive,turi::sketches::quantile_sketch<double,std::less<double>>,false>::exec(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t i;
  unint64_t v10;

  v10 = 0;
  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
  {
    v5 = *(_QWORD *)(a1 + 24);
    v10 = *(_QWORD *)(v4 + v5);
    *(_QWORD *)(a1 + 24) = v5 + 8;
  }
  else
  {
    std::istream::read();
  }
  v7 = *a2;
  v6 = a2[1];
  if (v6 != *a2)
  {
    do
    {
      v6 -= 88;
      std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>>::destroy[abi:ne180100]((uint64_t)(a2 + 2), v6);
    }
    while (v6 != v7);
  }
  a2[1] = v7;
  std::vector<turi::sketches::quantile_sketch<double,std::less<double>>>::resize(a2, v10);
  if (v10)
  {
    v8 = 0;
    for (i = 0; i < v10; ++i)
    {
      turi::sketches::quantile_sketch<double,std::less<double>>::load((_QWORD *)(*a2 + v8), a1);
      v8 += 88;
    }
  }
}

void std::__shared_ptr_emplace<turi::groupby_operators::count_distinct>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D930880;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::groupby_operators::count_distinct>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D930880;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__shared_ptr_emplace<turi::groupby_operators::count_distinct>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 88))(a1 + 24);
}

double turi::groupby_operators::count_distinct::new_instance(turi::groupby_operators::count_distinct *this)
{
  uint64_t v1;
  double result;

  v1 = operator new();
  *(_QWORD *)v1 = &unk_24D9308D0;
  result = 0.0;
  *(_OWORD *)(v1 + 8) = 0u;
  *(_OWORD *)(v1 + 24) = 0u;
  *(_DWORD *)(v1 + 40) = 1065353216;
  return result;
}

unsigned __int8 *turi::groupby_operators::count_distinct::add_element_simple(turi::groupby_operators::count_distinct *this, const turi::flexible_type *a2)
{
  return std::__hash_table<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,std::allocator<turi::flexible_type>>::__emplace_unique_key_args<turi::flexible_type,turi::flexible_type const&>((uint64_t)this + 8, (unsigned __int8 *)a2, (char *)a2);
}

_QWORD *turi::groupby_operators::count_distinct::combine(uint64_t a1, void *lpsrc)
{
  _QWORD *result;
  unsigned __int8 *v4;
  uint64_t v5;

  if (!result)
    __cxa_bad_cast();
  v4 = (unsigned __int8 *)result[3];
  if (v4)
  {
    v5 = a1 + 8;
    do
    {
      result = std::__hash_table<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,std::allocator<turi::flexible_type>>::__emplace_unique_key_args<turi::flexible_type,turi::flexible_type const&>(v5, v4 + 16, (char *)v4 + 16);
      v4 = *(unsigned __int8 **)v4;
    }
    while (v4);
  }
  return result;
}

uint64_t turi::groupby_operators::count_distinct::emit@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(this + 32);
  *(_DWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 12) = 0;
  *(_QWORD *)a2 = v2;
  return this;
}

_QWORD *turi::groupby_operators::count_distinct::name@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "Count Distinct");
}

void turi::groupby_operators::count_distinct::save(turi::groupby_operators::count_distinct *this, turi::oarchive *a2)
{
  turi::serialize_iterator<turi::oarchive,std::__hash_const_iterator<std::__hash_node<turi::flexible_type,void *> *>>((uint64_t)a2, *((_QWORD **)this + 3), 0, *((_QWORD *)this + 4));
}

void turi::groupby_operators::count_distinct::load(turi::groupby_operators::count_distinct *this, turi::iarchive *a2)
{
  turi::archive_detail::deserialize_impl<turi::iarchive,std::unordered_set<turi::flexible_type>,false,void>::exec(a2, (uint64_t)this + 8);
}

void turi::groupby_operators::count_distinct::~count_distinct(turi::groupby_operators::count_distinct *this)
{
  *(_QWORD *)this = &unk_24D9308D0;
  std::__hash_table<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,std::allocator<turi::flexible_type>>::~__hash_table((uint64_t)this + 8);
}

{
  *(_QWORD *)this = &unk_24D9308D0;
  std::__hash_table<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,std::allocator<turi::flexible_type>>::~__hash_table((uint64_t)this + 8);
  JUMPOUT(0x219A19A08);
}

unsigned __int8 *std::__hash_table<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,std::allocator<turi::flexible_type>>::__emplace_unique_key_args<turi::flexible_type,turi::flexible_type const&>(uint64_t a1, unsigned __int8 *a2, char *a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  unsigned __int8 **v12;
  unsigned __int8 *i;
  unint64_t v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  _QWORD *v21;
  unint64_t v22;
  _QWORD v24[3];

  v7 = turi::flexible_type::apply_visitor<turi::flexible_type_impl::city_hash_visitor>(a2);
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v9)
        v3 = v7 % v9;
    }
    else
    {
      v3 = (v9 - 1) & v7;
    }
    v12 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      for (i = *v12; i; i = *(unsigned __int8 **)i)
      {
        v14 = *((_QWORD *)i + 1);
        if (v14 == v8)
        {
          if ((std::equal_to<turi::flexible_type>::operator()[abi:ne180100](a1 + 32, i + 16, (uint64_t)a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v11 > 1)
          {
            if (v14 >= v9)
              v14 %= v9;
          }
          else
          {
            v14 &= v9 - 1;
          }
          if (v14 != v3)
            break;
        }
      }
    }
  }
  std::__hash_table<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,std::allocator<turi::flexible_type>>::__construct_node_hash<turi::flexible_type const&>(a1, v8, a3, (uint64_t)v24);
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    v17 = 1;
    if (v9 >= 3)
      v17 = (v9 & (v9 - 1)) != 0;
    v18 = v17 | (2 * v9);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::__rehash<true>(a1, v20);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v21)
  {
    *(_QWORD *)v24[0] = *v21;
    *v21 = v24[0];
  }
  else
  {
    *(_QWORD *)v24[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v24[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v24[0])
    {
      v22 = *(_QWORD *)(*(_QWORD *)v24[0] + 8);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v22 >= v9)
          v22 %= v9;
      }
      else
      {
        v22 &= v9 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v22) = v24[0];
    }
  }
  i = (unsigned __int8 *)v24[0];
  v24[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<turi::flexible_type,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<turi::flexible_type,void *>>>>::reset[abi:ne180100]((uint64_t)v24, 0);
  return i;
}

void sub_218155A48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<turi::flexible_type,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<turi::flexible_type,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,std::allocator<turi::flexible_type>>::__construct_node_hash<turi::flexible_type const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *result;
  unint64_t **v9;
  unsigned int v10;
  unint64_t *v11;
  unint64_t v12;

  v7 = a1 + 16;
  result = operator new(0x20uLL);
  *(_QWORD *)a4 = result;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *result = 0;
  result[1] = a2;
  result[2] = 0;
  v9 = (unint64_t **)(result + 2);
  *((_DWORD *)result + 6) = 0;
  *((_BYTE *)result + 28) = 0;
  if (result + 2 != (_QWORD *)a3)
  {
    *(_QWORD *)((char *)result + 21) = *(_QWORD *)(a3 + 5);
    *v9 = *(unint64_t **)a3;
    v10 = a3[12];
    *((_BYTE *)result + 28) = v10;
    if (v10 <= 9 && ((1 << v10) & 0x33C) != 0)
    {
      v11 = *v9;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 + 1, v11));
    }
  }
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void std::unique_ptr<std::__hash_node<turi::flexible_type,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<turi::flexible_type,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<turi::flexible_type,0>((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

void turi::serialize_iterator<turi::oarchive,std::__hash_const_iterator<std::__hash_node<turi::flexible_type,void *> *>>(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t a4)
{
  unint64_t v8;
  char *v9;
  uint64_t v10;
  size_t v11;
  char **v12;
  size_t v13;
  BOOL v14;
  std::vector<char>::size_type v15;

  if (*(_QWORD *)a1)
  {
    std::ostream::write();
  }
  else
  {
    v8 = *(_QWORD *)(a1 + 40);
    if (*(_QWORD *)(a1 + 32) + 8 > v8)
    {
      v11 = 2 * v8 + 16;
      *(_QWORD *)(a1 + 40) = v11;
      v12 = *(char ***)(a1 + 16);
      if (v12)
      {
        v9 = *v12;
        v13 = v12[1] - *v12;
        v14 = v11 >= v13;
        v15 = v11 - v13;
        if (v15 != 0 && v14)
        {
          std::vector<char>::__append(*(std::vector<char> **)(a1 + 16), v15);
          v9 = **(char ***)(a1 + 16);
        }
        else if (!v14)
        {
          v12[1] = &v9[v11];
        }
      }
      else
      {
        v9 = (char *)malloc_type_realloc(*(void **)(a1 + 24), v11, 0xF6EA6B1uLL);
      }
      *(_QWORD *)(a1 + 24) = v9;
    }
    else
    {
      v9 = *(char **)(a1 + 24);
    }
    *(_QWORD *)&v9[*(_QWORD *)(a1 + 32)] = a4;
    *(_QWORD *)(a1 + 32) += 8;
  }
  if (a2 == a3)
  {
    v10 = 0;
  }
  else
  {
    v10 = 0;
    do
    {
      turi::archive_detail::serialize_hard_or_soft_fail<turi::oarchive,turi::flexible_type>::exec(a1, a2 + 2);
      ++v10;
      a2 = (_QWORD *)*a2;
    }
    while (a2 != a3);
  }
  if (v10 != a4)
    turi::serialize_iterator<turi::oarchive,std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>(turi::oarchive &,std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>,std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>,unsigned long)::{lambda(void)#1}::operator()();
}

void turi::archive_detail::deserialize_impl<turi::iarchive,std::unordered_set<turi::flexible_type>,false,void>::exec(turi::iarchive *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t i;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  void *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  unsigned int v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  void *v34;
  void *v35;
  unint64_t v36;
  void **v37;
  _QWORD *v38;
  int v39;
  char v40;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  std::__hash_table<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,std::allocator<turi::flexible_type>>::clear(a2);
  v4 = *((_QWORD *)a1 + 2);
  if (v4)
  {
    v5 = *((_QWORD *)a1 + 3);
    v36 = *(_QWORD *)(v4 + v5);
    *((_QWORD *)a1 + 3) = v5 + 8;
    if (v36)
    {
      for (i = 0; i < v36; ++i)
      {
        v38 = 0;
        v39 = 0;
        v40 = 0;
        turi::archive_detail::deserialize_hard_or_soft_fail<turi::iarchive,turi::flexible_type>::exec(a1, &v38);
        std::__hash_table<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,std::allocator<turi::flexible_type>>::__emplace_unique_key_args<turi::flexible_type,turi::flexible_type const&>(a2, (unsigned __int8 *)&v38, (char *)&v38);
        switch(v40)
        {
          case 2:
            v7 = v38;
            do
            {
              v8 = __ldaxr(v7);
              v9 = v8 - 1;
            }
            while (__stlxr(v9, v7));
            if (!v9)
            {
              v10 = v38;
              if (v38)
              {
                if (*((char *)v38 + 31) < 0)
                  operator delete((void *)v38[1]);
                v11 = v10;
                v12 = 0x1012C404EF22A49;
                goto LABEL_47;
              }
            }
            break;
          case 3:
            v13 = v38;
            do
            {
              v14 = __ldaxr(v13);
              v15 = v14 - 1;
            }
            while (__stlxr(v15, v13));
            if (!v15)
            {
              v16 = v38;
              if (v38)
              {
                v17 = (void *)v38[1];
                if (v17)
                {
                  v38[2] = v17;
                  operator delete(v17);
                }
                v11 = v16;
                v12 = 0x1080C409938AC02;
                goto LABEL_47;
              }
            }
            break;
          case 4:
            v18 = v38;
            do
            {
              v19 = __ldaxr(v18);
              v20 = v19 - 1;
            }
            while (__stlxr(v20, v18));
            if (!v20)
            {
              v21 = v38;
              if (v38)
              {
                v37 = (void **)(v38 + 1);
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v37);
                goto LABEL_31;
              }
            }
            break;
          case 5:
            v22 = v38;
            do
            {
              v23 = __ldaxr(v22);
              v24 = v23 - 1;
            }
            while (__stlxr(v24, v22));
            if (!v24)
            {
              v21 = v38;
              if (v38)
              {
                v37 = (void **)(v38 + 1);
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v37);
LABEL_31:
                v11 = v21;
                v12 = 0x1020C405E66F15BLL;
                goto LABEL_47;
              }
            }
            break;
          case 8:
            v25 = v38;
            do
            {
              v26 = __ldaxr(v25);
              v27 = v26 - 1;
            }
            while (__stlxr(v27, v25));
            if (!v27)
            {
              v28 = v38;
              if (v38)
              {
                boost::detail::shared_count::~shared_count((unsigned int **)v38 + 2);
                v11 = v28;
                v29 = -235920773;
                goto LABEL_46;
              }
            }
            break;
          case 9:
            v30 = v38;
            do
            {
              v31 = __ldaxr(v30);
              v32 = v31 - 1;
            }
            while (__stlxr(v32, v30));
            if (!v32)
            {
              v33 = v38;
              if (v38)
              {
                v34 = (void *)v38[6];
                if (v34)
                {
                  v38[7] = v34;
                  operator delete(v34);
                }
                v35 = (void *)v33[3];
                if (v35)
                {
                  v33[4] = v35;
                  operator delete(v35);
                }
                std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v33 + 1));
                v11 = v33;
                v29 = 2071181815;
LABEL_46:
                v12 = v29 | 0x1030C4000000000;
LABEL_47:
                MEMORY[0x219A19A08](v11, v12);
              }
            }
            break;
          default:
            continue;
        }
      }
    }
  }
  else
  {
    std::istream::read();
  }
}

void sub_218155F3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, unint64_t *a12, int a13, char a14)
{
  switch(a14)
  {
    case 2:
      turi::gl_sarray::clip(&a12);
      break;
    case 3:
      turi::gl_sarray::clip(&a12);
      break;
    case 4:
      tc_init_set_config_parameter_cold_4(&a12);
      break;
    case 5:
      tc_init_set_config_parameter_cold_5(&a12);
      break;
    case 8:
      turi::gl_sarray::clip(&a12);
      break;
    case 9:
      turi::full_type_name<turi::flexible_type>(&a12);
      break;
    default:
      break;
  }
  _Unwind_Resume(exception_object);
}

void std::__hash_table<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,std::allocator<turi::flexible_type>>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  if (*(_QWORD *)(a1 + 24))
  {
    std::__hash_table<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,std::allocator<turi::flexible_type>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
}

void std::__hash_table<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,std::allocator<turi::flexible_type>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<turi::flexible_type,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

uint64_t std::__hash_table<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,std::allocator<turi::flexible_type>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,std::allocator<turi::flexible_type>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__shared_ptr_emplace<turi::groupby_operators::distinct>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D930970;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::groupby_operators::distinct>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D930970;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__shared_ptr_emplace<turi::groupby_operators::distinct>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 88))(a1 + 24);
}

double turi::groupby_operators::distinct::new_instance(turi::groupby_operators::distinct *this)
{
  uint64_t v1;
  double result;

  v1 = operator new();
  result = 0.0;
  *(_OWORD *)(v1 + 8) = 0u;
  *(_OWORD *)(v1 + 24) = 0u;
  *(_DWORD *)(v1 + 40) = 1065353216;
  *(_QWORD *)v1 = &unk_24D9309C0;
  return result;
}

void turi::groupby_operators::distinct::emit(turi::groupby_operators::distinct *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  void *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  unsigned int v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t *v33;
  void *v34;
  void *v35;
  uint64_t v36;
  BOOL v37;
  int v38;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  void **v50;

  std::vector<turi::flexible_type>::vector(&v48, *((_QWORD *)this + 4));
  v4 = (uint64_t *)*((_QWORD *)this + 3);
  if (v4)
  {
    v5 = 0;
    do
    {
      v6 = v48 + 16 * v5;
      if (v4 + 2 != (uint64_t *)v6)
      {
        switch(*(_BYTE *)(v6 + 12))
        {
          case 2:
            v7 = *(unint64_t **)v6;
            do
            {
              v8 = __ldaxr(v7);
              v9 = v8 - 1;
            }
            while (__stlxr(v9, v7));
            if (!v9)
            {
              v10 = *(unint64_t **)v6;
              if (!*(_QWORD *)v6)
                goto LABEL_46;
              if (*((char *)v10 + 31) < 0)
                operator delete((void *)v10[1]);
              v11 = v10;
              v12 = 0x1012C404EF22A49;
              goto LABEL_45;
            }
            break;
          case 3:
            v13 = *(unint64_t **)v6;
            do
            {
              v14 = __ldaxr(v13);
              v15 = v14 - 1;
            }
            while (__stlxr(v15, v13));
            if (!v15)
            {
              v16 = *(unint64_t **)v6;
              if (!*(_QWORD *)v6)
                goto LABEL_46;
              v17 = (void *)v16[1];
              if (v17)
              {
                v16[2] = (unint64_t)v17;
                operator delete(v17);
              }
              v11 = v16;
              v12 = 0x1080C409938AC02;
              goto LABEL_45;
            }
            break;
          case 4:
            v18 = *(unint64_t **)v6;
            do
            {
              v19 = __ldaxr(v18);
              v20 = v19 - 1;
            }
            while (__stlxr(v20, v18));
            if (!v20)
            {
              v21 = *(unint64_t **)v6;
              if (!*(_QWORD *)v6)
                goto LABEL_46;
              v50 = (void **)(v21 + 1);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v50);
              goto LABEL_29;
            }
            break;
          case 5:
            v22 = *(unint64_t **)v6;
            do
            {
              v23 = __ldaxr(v22);
              v24 = v23 - 1;
            }
            while (__stlxr(v24, v22));
            if (!v24)
            {
              v21 = *(unint64_t **)v6;
              if (!*(_QWORD *)v6)
                goto LABEL_46;
              v50 = (void **)(v21 + 1);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v50);
LABEL_29:
              v11 = v21;
              v12 = 0x1020C405E66F15BLL;
              goto LABEL_45;
            }
            break;
          case 8:
            v25 = *(unint64_t **)v6;
            do
            {
              v26 = __ldaxr(v25);
              v27 = v26 - 1;
            }
            while (__stlxr(v27, v25));
            if (!v27)
            {
              v28 = *(unint64_t **)v6;
              if (!*(_QWORD *)v6)
                goto LABEL_46;
              boost::detail::shared_count::~shared_count((unsigned int **)v28 + 2);
              v11 = v28;
              v29 = -235920773;
              goto LABEL_44;
            }
            break;
          case 9:
            v30 = *(unint64_t **)v6;
            do
            {
              v31 = __ldaxr(v30);
              v32 = v31 - 1;
            }
            while (__stlxr(v32, v30));
            if (!v32)
            {
              v33 = *(unint64_t **)v6;
              if (*(_QWORD *)v6)
              {
                v34 = (void *)v33[6];
                if (v34)
                {
                  v33[7] = (unint64_t)v34;
                  operator delete(v34);
                }
                v35 = (void *)v33[3];
                if (v35)
                {
                  v33[4] = (unint64_t)v35;
                  operator delete(v35);
                }
                std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v33 + 1));
                v11 = v33;
                v29 = 2071181815;
LABEL_44:
                v12 = v29 | 0x1030C4000000000;
LABEL_45:
                MEMORY[0x219A19A08](v11, v12);
              }
LABEL_46:
              *(_QWORD *)v6 = 0;
            }
            break;
          default:
            break;
        }
        v36 = v4[2];
        *(_QWORD *)(v6 + 5) = *(uint64_t *)((char *)v4 + 21);
        *(_QWORD *)v6 = v36;
        LODWORD(v36) = *((unsigned __int8 *)v4 + 28);
        *(_BYTE *)(v6 + 12) = v36;
        v37 = v36 > 9;
        v38 = (1 << v36) & 0x33C;
        if (!v37 && v38 != 0)
        {
          v40 = *(unint64_t **)v6;
          do
            v41 = __ldaxr(v40);
          while (__stlxr(v41 + 1, v40));
        }
      }
      ++v5;
      v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  *(uint64_t *)((char *)a2 + 5) = 0;
  *a2 = 0;
  *((_BYTE *)a2 + 12) = 4;
  v42 = operator new();
  *(_QWORD *)v42 = 0;
  *(_QWORD *)(v42 + 8) = 0;
  *(_QWORD *)(v42 + 16) = 0;
  *(_QWORD *)(v42 + 24) = 0;
  *a2 = v42;
  *(_QWORD *)v42 = 1;
  if (*(_QWORD *)v42 != 1)
  {
    v43 = (_QWORD *)operator new();
    v44 = *(uint64_t **)(v42 + 8);
    *v43 = *(_QWORD *)v42;
    v43[2] = 0;
    v43[3] = 0;
    v43[1] = 0;
    std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v43 + 1, v44, *(uint64_t **)(v42 + 16), (uint64_t)(*(_QWORD *)(v42 + 16) - (_QWORD)v44) >> 4);
    *a2 = (uint64_t)v43;
    *v43 = 1;
    do
    {
      v45 = __ldaxr((unint64_t *)v42);
      v46 = v45 - 1;
    }
    while (__stlxr(v46, (unint64_t *)v42));
    if (!v46)
    {
      v50 = (void **)(v42 + 8);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v50);
      MEMORY[0x219A19A08](v42, 0x1020C405E66F15BLL);
    }
  }
  v47 = *a2;
  std::vector<turi::flexible_type>::__vdeallocate((void **)(v47 + 8));
  *(_OWORD *)(v47 + 8) = v48;
  *(_QWORD *)(v47 + 24) = v49;
  v48 = 0uLL;
  v49 = 0;
  v50 = (void **)&v48;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v50);
}

void sub_2181564CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  uint64_t *v12;
  unint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;

  v15 = v14;
  MEMORY[0x219A19A08](v15, 0x1020C405E66F15BLL);
  do
  {
    v17 = __ldaxr(v13);
    v18 = v17 - 1;
  }
  while (__stlxr(v18, v13));
  if (!v18)
  {
    v19 = *v12;
    if (*v12)
    {
      a12 = (void **)(v19 + 8);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a12);
      MEMORY[0x219A19A08](v19, 0x1020C405E66F15BLL);
    }
    *v12 = 0;
  }
  *v12 = 0;
  *((_DWORD *)v12 + 2) = 0;
  *((_BYTE *)v12 + 12) = 0;
  a12 = (void **)&a9;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

_QWORD *turi::groupby_operators::distinct::name@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "Distinct");
}

void std::__shared_ptr_emplace<turi::groupby_operators::frequency_count>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D930A60;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::groupby_operators::frequency_count>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D930A60;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__shared_ptr_emplace<turi::groupby_operators::frequency_count>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 88))(a1 + 24);
}

double turi::groupby_operators::frequency_count::new_instance(turi::groupby_operators::frequency_count *this)
{
  uint64_t v1;
  double result;

  v1 = operator new();
  *(_QWORD *)v1 = &unk_24D930AB0;
  result = 0.0;
  *(_OWORD *)(v1 + 8) = 0u;
  *(_OWORD *)(v1 + 24) = 0u;
  *(_DWORD *)(v1 + 40) = 1065353216;
  return result;
}

unsigned __int8 *turi::groupby_operators::frequency_count::add_element_simple(turi::groupby_operators::frequency_count *this, const turi::flexible_type *a2)
{
  unsigned __int8 *result;
  void *v3;

  v3 = a2;
  result = std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::__emplace_unique_key_args<turi::flexible_type,std::piecewise_construct_t const&,std::tuple<turi::flexible_type const&>,std::tuple<>>((uint64_t)this + 8, (unsigned __int8 *)a2, (uint64_t)&std::piecewise_construct, &v3);
  ++*((_QWORD *)result + 4);
  return result;
}

_QWORD *turi::groupby_operators::frequency_count::combine(uint64_t a1, void *lpsrc)
{
  _QWORD *result;
  unsigned __int8 *v4;
  _QWORD *v5;
  uint64_t v6;
  void *v7;

  if (!result)
    __cxa_bad_cast();
  v4 = (unsigned __int8 *)result[3];
  if (v4)
  {
    v5 = (_QWORD *)(a1 + 8);
    do
    {
      if (std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::find<turi::flexible_type>(v5, v4 + 16))
      {
        v6 = *((_QWORD *)v4 + 4);
        v7 = v4 + 16;
        result = std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::__emplace_unique_key_args<turi::flexible_type,std::piecewise_construct_t const&,std::tuple<turi::flexible_type const&>,std::tuple<>>((uint64_t)v5, v4 + 16, (uint64_t)&std::piecewise_construct, &v7);
        result[4] += v6;
      }
      else
      {
        result = std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::__emplace_unique_key_args<turi::flexible_type,std::pair<turi::flexible_type const,unsigned long> const&>((uint64_t)v5, v4 + 16, (_QWORD *)v4 + 2);
      }
      v4 = *(unsigned __int8 **)v4;
    }
    while (v4);
  }
  return result;
}

void turi::groupby_operators::frequency_count::emit(turi::groupby_operators::frequency_count *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v4;
  uint64_t v5;
  void **v6;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  void **v18[3];
  int v19;
  char v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::vector(&v16, *((_QWORD *)this + 4));
  v4 = (uint64_t *)*((_QWORD *)this + 3);
  if (v4)
  {
    v5 = 0;
    do
    {
      v6 = (void **)v4[4];
      memset(v18, 0, 13);
      if (v4 + 2 != (uint64_t *)v18)
      {
        *(void ***)((char *)v18 + 5) = *(void ***)((char *)v4 + 21);
        v18[0] = (void **)v4[2];
        BYTE4(v18[1]) = *((_BYTE *)v4 + 28);
        if (BYTE4(v18[1]) <= 9u && ((1 << SBYTE4(v18[1])) & 0x33C) != 0)
        {
          v8 = (unint64_t *)v18[0];
          do
            v9 = __ldaxr(v8);
          while (__stlxr(v9 + 1, v8));
        }
      }
      v20 = 0;
      v19 = 0;
      v18[2] = v6;
      std::pair<turi::flexible_type,turi::flexible_type>::operator=[abi:ne180100](v16 + 32 * v5, (uint64_t *)v18);
      std::pair<turi::flexible_type,turi::flexible_type>::~pair((uint64_t)v18);
      ++v5;
      v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  *(uint64_t *)((char *)a2 + 5) = 0;
  *a2 = 0;
  *((_BYTE *)a2 + 12) = 5;
  v10 = operator new();
  *(_QWORD *)v10 = 0;
  *(_QWORD *)(v10 + 8) = 0;
  *(_QWORD *)(v10 + 16) = 0;
  *(_QWORD *)(v10 + 24) = 0;
  *a2 = v10;
  *(_QWORD *)v10 = 1;
  if (*(_QWORD *)v10 != 1)
  {
    v11 = (_QWORD *)operator new();
    v12 = *(uint64_t **)(v10 + 8);
    *v11 = *(_QWORD *)v10;
    v11[2] = 0;
    v11[3] = 0;
    v11[1] = 0;
    std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v11 + 1, v12, *(uint64_t **)(v10 + 16), (uint64_t)(*(_QWORD *)(v10 + 16) - (_QWORD)v12) >> 5);
    *a2 = (uint64_t)v11;
    *v11 = 1;
    do
    {
      v13 = __ldaxr((unint64_t *)v10);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, (unint64_t *)v10));
    if (!v14)
    {
      v18[0] = (void **)(v10 + 8);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v18);
      MEMORY[0x219A19A08](v10, 0x1020C405E66F15BLL);
    }
  }
  v15 = *a2;
  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__vdeallocate((void **)(v15 + 8));
  *(_OWORD *)(v15 + 8) = v16;
  *(_QWORD *)(v15 + 24) = v17;
  v16 = 0uLL;
  v17 = 0;
  v18[0] = (void **)&v16;
  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v18);
}

void sub_218156950(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  uint64_t *v12;
  unint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;

  v15 = v14;
  MEMORY[0x219A19A08](v15, 0x1020C405E66F15BLL);
  do
  {
    v17 = __ldaxr(v13);
    v18 = v17 - 1;
  }
  while (__stlxr(v18, v13));
  if (!v18)
  {
    v19 = *v12;
    if (*v12)
    {
      a12 = (void **)(v19 + 8);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&a12);
      MEMORY[0x219A19A08](v19, 0x1020C405E66F15BLL);
    }
    *v12 = 0;
  }
  *v12 = 0;
  *((_DWORD *)v12 + 2) = 0;
  *((_BYTE *)v12 + 12) = 0;
  a12 = (void **)&a9;
  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

BOOL turi::groupby_operators::frequency_count::support_type(uint64_t a1, char a2)
{
  return (a2 & 0xFD) == 0;
}

_QWORD *turi::groupby_operators::frequency_count::name@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "Frequency Count");
}

uint64_t turi::groupby_operators::frequency_count::save(turi::groupby_operators::frequency_count *this, turi::oarchive *a2)
{
  return turi::serialize_iterator<turi::oarchive,std::__hash_map_const_iterator<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<turi::flexible_type,unsigned long>,void *> *>>>((uint64_t)a2, *((_QWORD **)this + 3), 0, *((_QWORD *)this + 4));
}

void turi::groupby_operators::frequency_count::load(turi::groupby_operators::frequency_count *this, turi::iarchive *a2)
{
  turi::archive_detail::deserialize_impl<turi::iarchive,std::unordered_map<turi::flexible_type,unsigned long>,false,void>::exec(a2, (uint64_t)this + 8);
}

void turi::groupby_operators::frequency_count::~frequency_count(turi::groupby_operators::frequency_count *this)
{
  *(_QWORD *)this = &unk_24D930AB0;
  std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::~__hash_table((uint64_t)this + 8);
}

{
  *(_QWORD *)this = &unk_24D930AB0;
  std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::~__hash_table((uint64_t)this + 8);
  JUMPOUT(0x219A19A08);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::__emplace_unique_key_args<turi::flexible_type,std::piecewise_construct_t const&,std::tuple<turi::flexible_type const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, void **a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD v25[3];

  v8 = turi::flexible_type::apply_visitor<turi::flexible_type_impl::city_hash_visitor>(a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v4 = v8;
      if (v8 >= v10)
        v4 = v8 % v10;
    }
    else
    {
      v4 = (v10 - 1) & v8;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((std::equal_to<turi::flexible_type>::operator()[abi:ne180100](a1 + 32, i + 16, (uint64_t)a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v4)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<turi::flexible_type const&>,std::tuple<>>(a1, v9, a4, (uint64_t)v25);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::__rehash<true>(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v4 = v9 % v10;
      else
        v4 = v9;
    }
    else
    {
      v4 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v22)
  {
    *(_QWORD *)v25[0] = *v22;
    *v22 = v25[0];
  }
  else
  {
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v25[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10)
          v23 %= v10;
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25[0];
    }
  }
  i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<turi::flexible_type,unsigned long>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<turi::flexible_type,unsigned long>,void *>>>>::reset[abi:ne180100]((uint64_t)v25, 0);
  return i;
}

void sub_218156D20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<turi::flexible_type,unsigned long>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<turi::flexible_type,unsigned long>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<turi::flexible_type const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *result;
  unint64_t **v9;
  _QWORD *v10;
  unint64_t *v11;
  unsigned int v12;
  BOOL v13;
  int v14;
  unint64_t *v16;
  unint64_t v17;

  v7 = a1 + 16;
  result = operator new(0x28uLL);
  *(_QWORD *)a4 = result;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *result = 0;
  result[1] = a2;
  result[2] = 0;
  v9 = (unint64_t **)(result + 2);
  v10 = *a3;
  *((_DWORD *)result + 6) = 0;
  *((_BYTE *)result + 28) = 0;
  if (v10 != result + 2)
  {
    v11 = (unint64_t *)*v10;
    *(_QWORD *)((char *)result + 21) = *(_QWORD *)((char *)v10 + 5);
    *v9 = v11;
    v12 = *((unsigned __int8 *)v10 + 12);
    *((_BYTE *)result + 28) = v12;
    v13 = v12 > 9;
    v14 = (1 << v12) & 0x33C;
    if (!v13 && v14 != 0)
    {
      v16 = *v9;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 + 1, v16));
    }
  }
  result[4] = 0;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<turi::flexible_type,unsigned long>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<turi::flexible_type,unsigned long>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::pair<turi::flexible_type const,unsigned long>::~pair((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

uint64_t std::pair<turi::flexible_type const,unsigned long>::~pair(uint64_t a1)
{
  unint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t *v5;
  unint64_t *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  void *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unsigned int v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  void *v29;
  void *v30;
  void **v32;

  switch(*(_BYTE *)(a1 + 12))
  {
    case 2:
      v2 = *(unint64_t **)a1;
      do
      {
        v3 = __ldaxr(v2);
        v4 = v3 - 1;
      }
      while (__stlxr(v4, v2));
      if (!v4)
      {
        v5 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          if (*((char *)v5 + 31) < 0)
            operator delete((void *)v5[1]);
          v6 = v5;
          v7 = 0x1012C404EF22A49;
          goto LABEL_42;
        }
      }
      break;
    case 3:
      v8 = *(unint64_t **)a1;
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        v11 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          v12 = (void *)v11[1];
          if (v12)
          {
            v11[2] = (unint64_t)v12;
            operator delete(v12);
          }
          v6 = v11;
          v7 = 0x1080C409938AC02;
          goto LABEL_42;
        }
      }
      break;
    case 4:
      v13 = *(unint64_t **)a1;
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        v16 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          v32 = (void **)(v16 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v32);
          goto LABEL_26;
        }
      }
      break;
    case 5:
      v17 = *(unint64_t **)a1;
      do
      {
        v18 = __ldaxr(v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v17));
      if (!v19)
      {
        v16 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          v32 = (void **)(v16 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v32);
LABEL_26:
          v6 = v16;
          v7 = 0x1020C405E66F15BLL;
          goto LABEL_42;
        }
      }
      break;
    case 8:
      v20 = *(unint64_t **)a1;
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (!v22)
      {
        v23 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)v23 + 2);
          v6 = v23;
          v24 = -235920773;
          goto LABEL_41;
        }
      }
      break;
    case 9:
      v25 = *(unint64_t **)a1;
      do
      {
        v26 = __ldaxr(v25);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, v25));
      if (!v27)
      {
        v28 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          v29 = (void *)v28[6];
          if (v29)
          {
            v28[7] = (unint64_t)v29;
            operator delete(v29);
          }
          v30 = (void *)v28[3];
          if (v30)
          {
            v28[4] = (unint64_t)v30;
            operator delete(v30);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v28 + 1));
          v6 = v28;
          v24 = 2071181815;
LABEL_41:
          v7 = v24 | 0x1030C4000000000;
LABEL_42:
          MEMORY[0x219A19A08](v6, v7);
        }
      }
      break;
    default:
      break;
  }
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 12) = 0;
  return a1;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::find<turi::flexible_type>(_QWORD *a1, unsigned __int8 *a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned __int8 **v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unint64_t v13;

  v4 = turi::flexible_type::apply_visitor<turi::flexible_type_impl::city_hash_visitor>(a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  v11 = *v10;
  if (*v10)
  {
    v12 = (uint64_t)(a1 + 4);
    do
    {
      v13 = *((_QWORD *)v11 + 1);
      if (v13 == v6)
      {
        if ((std::equal_to<turi::flexible_type>::operator()[abi:ne180100](v12, v11 + 16, (uint64_t)a2) & 1) != 0)
          return v11;
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(_QWORD *)&v5)
            v13 %= *(_QWORD *)&v5;
        }
        else
        {
          v13 &= *(_QWORD *)&v5 - 1;
        }
        if (v13 != v9)
          return 0;
      }
      v11 = *(unsigned __int8 **)v11;
    }
    while (v11);
  }
  return v11;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::__emplace_unique_key_args<turi::flexible_type,std::pair<turi::flexible_type const,unsigned long> const&>(uint64_t a1, unsigned __int8 *a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  unsigned __int8 **v12;
  unsigned __int8 *i;
  unint64_t v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  _QWORD *v21;
  unint64_t v22;
  _QWORD v24[3];

  v7 = turi::flexible_type::apply_visitor<turi::flexible_type_impl::city_hash_visitor>(a2);
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v9)
        v3 = v7 % v9;
    }
    else
    {
      v3 = (v9 - 1) & v7;
    }
    v12 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      for (i = *v12; i; i = *(unsigned __int8 **)i)
      {
        v14 = *((_QWORD *)i + 1);
        if (v14 == v8)
        {
          if ((std::equal_to<turi::flexible_type>::operator()[abi:ne180100](a1 + 32, i + 16, (uint64_t)a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v11 > 1)
          {
            if (v14 >= v9)
              v14 %= v9;
          }
          else
          {
            v14 &= v9 - 1;
          }
          if (v14 != v3)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::__construct_node_hash<std::pair<turi::flexible_type const,unsigned long> const&>(a1, v8, a3, (uint64_t)v24);
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    v17 = 1;
    if (v9 >= 3)
      v17 = (v9 & (v9 - 1)) != 0;
    v18 = v17 | (2 * v9);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::__rehash<true>(a1, v20);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v21)
  {
    *(_QWORD *)v24[0] = *v21;
    *v21 = v24[0];
  }
  else
  {
    *(_QWORD *)v24[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v24[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v24[0])
    {
      v22 = *(_QWORD *)(*(_QWORD *)v24[0] + 8);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v22 >= v9)
          v22 %= v9;
      }
      else
      {
        v22 &= v9 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v22) = v24[0];
    }
  }
  i = (unsigned __int8 *)v24[0];
  v24[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<turi::flexible_type,unsigned long>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<turi::flexible_type,unsigned long>,void *>>>>::reset[abi:ne180100]((uint64_t)v24, 0);
  return i;
}

void sub_21815738C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<turi::flexible_type,unsigned long>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<turi::flexible_type,unsigned long>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::__construct_node_hash<std::pair<turi::flexible_type const,unsigned long> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *result;
  unint64_t **v9;
  unsigned int v10;
  unint64_t *v11;
  unint64_t v12;

  v7 = a1 + 16;
  result = operator new(0x28uLL);
  *(_QWORD *)a4 = result;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *result = 0;
  result[1] = a2;
  result[2] = 0;
  v9 = (unint64_t **)(result + 2);
  *((_DWORD *)result + 6) = 0;
  *((_BYTE *)result + 28) = 0;
  if (result + 2 != a3)
  {
    *(_QWORD *)((char *)result + 21) = *(_QWORD *)((char *)a3 + 5);
    *v9 = (unint64_t *)*a3;
    v10 = *((unsigned __int8 *)a3 + 12);
    *((_BYTE *)result + 28) = v10;
    if (v10 <= 9 && ((1 << v10) & 0x33C) != 0)
    {
      v11 = *v9;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 + 1, v11));
    }
  }
  result[4] = a3[2];
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

_QWORD *std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::vector(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__vallocate[abi:ne180100](a1, a2);
    v4 = a1[1];
    v5 = v4 + 32 * a2;
    do
    {
      *(_QWORD *)v4 = 0;
      *(_DWORD *)(v4 + 8) = 0;
      *(_BYTE *)(v4 + 12) = 0;
      *(_QWORD *)(v4 + 16) = 0;
      *(_DWORD *)(v4 + 24) = 0;
      *(_BYTE *)(v4 + 28) = 0;
      v4 += 32;
    }
    while (v4 != v5);
    a1[1] = v5;
  }
  return a1;
}

void sub_2181574D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t turi::serialize_iterator<turi::oarchive,std::__hash_map_const_iterator<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<turi::flexible_type,unsigned long>,void *> *>>>(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v9;
  uint64_t v10;
  size_t v11;
  uint64_t *v12;
  size_t v13;
  BOOL v14;
  std::vector<char>::size_type v15;

  if (*(_QWORD *)a1)
  {
    result = std::ostream::write();
  }
  else
  {
    v9 = *(_QWORD *)(a1 + 40);
    if (*(_QWORD *)(a1 + 32) + 8 > v9)
    {
      v11 = 2 * v9 + 16;
      *(_QWORD *)(a1 + 40) = v11;
      v12 = *(uint64_t **)(a1 + 16);
      if (v12)
      {
        result = *v12;
        v13 = v12[1] - *v12;
        v14 = v11 >= v13;
        v15 = v11 - v13;
        if (v15 != 0 && v14)
        {
          std::vector<char>::__append(*(std::vector<char> **)(a1 + 16), v15);
          result = **(_QWORD **)(a1 + 16);
        }
        else if (!v14)
        {
          v12[1] = result + v11;
        }
      }
      else
      {
        result = (uint64_t)malloc_type_realloc(*(void **)(a1 + 24), v11, 0xF6EA6B1uLL);
      }
      *(_QWORD *)(a1 + 24) = result;
    }
    else
    {
      result = *(_QWORD *)(a1 + 24);
    }
    *(_QWORD *)(result + *(_QWORD *)(a1 + 32)) = a4;
    *(_QWORD *)(a1 + 32) += 8;
  }
  if (a2 == a3)
  {
    v10 = 0;
  }
  else
  {
    v10 = 0;
    do
    {
      result = (uint64_t)turi::archive_detail::serialize_impl<turi::oarchive,std::pair<turi::flexible_type const,unsigned long>,false,void>::exec(a1, a2 + 2);
      ++v10;
      a2 = (_QWORD *)*a2;
    }
    while (a2 != a3);
  }
  if (v10 != a4)
    turi::serialize_iterator<turi::oarchive,std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>(turi::oarchive &,std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>,std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>,unsigned long)::{lambda(void)#1}::operator()();
  return result;
}

char *turi::archive_detail::serialize_impl<turi::oarchive,std::pair<turi::flexible_type const,unsigned long>,false,void>::exec(uint64_t a1, uint64_t *a2)
{
  _QWORD *v4;
  char *result;
  unint64_t v6;
  size_t v7;
  char **v8;
  size_t v9;
  BOOL v10;
  std::vector<char>::size_type v11;

  turi::archive_detail::serialize_hard_or_soft_fail<turi::oarchive,turi::flexible_type>::exec(a1, a2);
  v4 = a2 + 2;
  if (*(_QWORD *)a1)
    return (char *)std::ostream::write();
  v6 = *(_QWORD *)(a1 + 40);
  if (*(_QWORD *)(a1 + 32) + 8 > v6)
  {
    v7 = 2 * v6 + 16;
    *(_QWORD *)(a1 + 40) = v7;
    v8 = *(char ***)(a1 + 16);
    if (v8)
    {
      result = *v8;
      v9 = v8[1] - *v8;
      v10 = v7 >= v9;
      v11 = v7 - v9;
      if (v11 != 0 && v10)
      {
        std::vector<char>::__append(*(std::vector<char> **)(a1 + 16), v11);
        result = **(char ***)(a1 + 16);
      }
      else if (!v10)
      {
        v8[1] = &result[v7];
      }
    }
    else
    {
      result = (char *)malloc_type_realloc(*(void **)(a1 + 24), v7, 0xF6EA6B1uLL);
    }
    *(_QWORD *)(a1 + 24) = result;
  }
  else
  {
    result = *(char **)(a1 + 24);
  }
  *(_QWORD *)&result[*(_QWORD *)(a1 + 32)] = *v4;
  *(_QWORD *)(a1 + 32) += 8;
  return result;
}

void turi::archive_detail::deserialize_impl<turi::iarchive,std::unordered_map<turi::flexible_type,unsigned long>,false,void>::exec(turi::iarchive *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t i;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  char v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::clear(a2);
  v4 = *((_QWORD *)a1 + 2);
  if (v4)
  {
    v5 = *((_QWORD *)a1 + 3);
    v8 = *(_QWORD *)(v4 + v5);
    *((_QWORD *)a1 + 3) = v5 + 8;
    if (v8)
    {
      for (i = 0; i < v8; ++i)
      {
        v10 = 0;
        v11 = 0;
        v12 = 0;
        v13 = 0;
        turi::archive_detail::deserialize_impl<turi::iarchive,std::pair<turi::flexible_type,unsigned long>,false,void>::exec(a1, (uint64_t)&v10);
        v7 = v13;
        v9 = &v10;
        *((_QWORD *)std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::__emplace_unique_key_args<turi::flexible_type,std::piecewise_construct_t const&,std::tuple<turi::flexible_type const&>,std::tuple<>>(a2, (unsigned __int8 *)&v10, (uint64_t)&std::piecewise_construct, (void **)&v9)+ 4) = v7;
        std::pair<turi::flexible_type,unsigned long>::~pair((uint64_t)&v10);
      }
    }
  }
  else
  {
    std::istream::read();
  }
}

void sub_218157804(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  if (*(_QWORD *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
}

void std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::pair<turi::flexible_type const,unsigned long>::~pair((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void turi::archive_detail::deserialize_impl<turi::iarchive,std::pair<turi::flexible_type,unsigned long>,false,void>::exec(turi::iarchive *a1, uint64_t a2)
{
  uint64_t v4;

  turi::archive_detail::deserialize_hard_or_soft_fail<turi::iarchive,turi::flexible_type>::exec(a1, (_QWORD **)a2);
  v4 = *((_QWORD *)a1 + 2);
  if (v4)
  {
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(v4 + *((_QWORD *)a1 + 3));
    *((_QWORD *)a1 + 3) += 8;
  }
  else
  {
    std::istream::read();
  }
}

uint64_t std::pair<turi::flexible_type,unsigned long>::~pair(uint64_t a1)
{
  unint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t *v5;
  unint64_t *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  void *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unsigned int v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  void *v29;
  void *v30;
  void **v32;

  switch(*(_BYTE *)(a1 + 12))
  {
    case 2:
      v2 = *(unint64_t **)a1;
      do
      {
        v3 = __ldaxr(v2);
        v4 = v3 - 1;
      }
      while (__stlxr(v4, v2));
      if (!v4)
      {
        v5 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          if (*((char *)v5 + 31) < 0)
            operator delete((void *)v5[1]);
          v6 = v5;
          v7 = 0x1012C404EF22A49;
          goto LABEL_42;
        }
      }
      break;
    case 3:
      v8 = *(unint64_t **)a1;
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        v11 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          v12 = (void *)v11[1];
          if (v12)
          {
            v11[2] = (unint64_t)v12;
            operator delete(v12);
          }
          v6 = v11;
          v7 = 0x1080C409938AC02;
          goto LABEL_42;
        }
      }
      break;
    case 4:
      v13 = *(unint64_t **)a1;
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        v16 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          v32 = (void **)(v16 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v32);
          goto LABEL_26;
        }
      }
      break;
    case 5:
      v17 = *(unint64_t **)a1;
      do
      {
        v18 = __ldaxr(v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v17));
      if (!v19)
      {
        v16 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          v32 = (void **)(v16 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v32);
LABEL_26:
          v6 = v16;
          v7 = 0x1020C405E66F15BLL;
          goto LABEL_42;
        }
      }
      break;
    case 8:
      v20 = *(unint64_t **)a1;
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (!v22)
      {
        v23 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)v23 + 2);
          v6 = v23;
          v24 = -235920773;
          goto LABEL_41;
        }
      }
      break;
    case 9:
      v25 = *(unint64_t **)a1;
      do
      {
        v26 = __ldaxr(v25);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, v25));
      if (!v27)
      {
        v28 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          v29 = (void *)v28[6];
          if (v29)
          {
            v28[7] = (unint64_t)v29;
            operator delete(v29);
          }
          v30 = (void *)v28[3];
          if (v30)
          {
            v28[4] = (unint64_t)v30;
            operator delete(v30);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v28 + 1));
          v6 = v28;
          v24 = 2071181815;
LABEL_41:
          v7 = v24 | 0x1030C4000000000;
LABEL_42:
          MEMORY[0x219A19A08](v6, v7);
        }
      }
      break;
    default:
      break;
  }
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 12) = 0;
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

uint64_t _GLOBAL__sub_I_group_aggregate_value_cpp()
{
  uint64_t result;

  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  result = __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  boost::spirit::lit = 0;
  boost::spirit::bin = 0;
  boost::spirit::oct = 0;
  boost::spirit::hex = 0;
  boost::spirit::BOOL_ = 0;
  boost::spirit::ushort_ = 0;
  boost::spirit::ulong_ = 0;
  boost::spirit::uint_ = 0;
  boost::spirit::short_ = 0;
  boost::spirit::long_ = 0;
  boost::spirit::int_ = 0;
  boost::spirit::ulong_long = 0;
  boost::spirit::long_long = 0;
  boost::spirit::float_ = 0;
  boost::spirit::double_ = 0;
  boost::spirit::long_double = 0;
  boost::spirit::repeat = 0;
  boost::spirit::eps = 0;
  boost::spirit::pad = 0;
  boost::spirit::byte_ = 0;
  boost::spirit::word = 0;
  boost::spirit::big_word = 0;
  boost::spirit::little_word = 0;
  boost::spirit::dword = 0;
  boost::spirit::big_dword = 0;
  boost::spirit::little_dword = 0;
  boost::spirit::qword = 0;
  boost::spirit::big_qword = 0;
  boost::spirit::little_qword = 0;
  boost::spirit::bin_float = 0;
  boost::spirit::big_bin_float = 0;
  boost::spirit::little_bin_float = 0;
  boost::spirit::bin_double = 0;
  boost::spirit::big_bin_double = 0;
  boost::spirit::little_bin_double = 0;
  boost::spirit::skip = 0;
  boost::spirit::delimit = 0;
  boost::spirit::stream = 0;
  boost::spirit::wstream = 0;
  boost::spirit::left_align = 0;
  boost::spirit::right_align = 0;
  boost::spirit::center = 0;
  boost::spirit::maxwidth = 0;
  boost::spirit::set_state = 0;
  boost::spirit::in_state = 0;
  boost::spirit::token = 0;
  boost::spirit::tokenid = 0;
  boost::spirit::raw_token = 0;
  boost::spirit::tokenid_mask = 0;
  boost::spirit::attr = 0;
  boost::spirit::columns = 0;
  boost::spirit::auto_ = 0;
  boost::spirit::ascii::char_ = 0;
  boost::spirit::ascii::string = 0;
  boost::spirit::iso8859_1::char_ = 0;
  boost::spirit::iso8859_1::string = 0;
  boost::spirit::standard::char_ = 0;
  boost::spirit::standard::string = 0;
  boost::spirit::standard_wide::char_ = 0;
  boost::spirit::standard_wide::string = 0;
  parser_impl::restricted_string = 0;
  return result;
}

void **std::vector<std::vector<turi::flexible_type>>::reserve(uint64_t *a1, unint64_t a2)
{
  void **result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7[5];

  v4 = a1[2];
  result = (void **)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    v7[2] = (char *)v7[0] + v5;
    v7[3] = (char *)v7[0] + 24 * v6;
    std::vector<std::vector<turi::flexible_type>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<std::vector<turi::flexible_type>>::~__split_buffer(v7);
  }
  return result;
}

void sub_218157E04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<turi::flexible_type>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void turi::sarray<std::string>::get_reader(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;

  assert_msg(*(unsigned __int8 *)(a1 + 248), "Invalid SArray");
  assert_msg(*(_BYTE *)(a1 + 249) == 0, "Cannot open an SArraying which is still writing.");
  v4 = operator new();
  *(_OWORD *)v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 128) = 0u;
  *(_OWORD *)(v4 + 144) = 0u;
  *(_OWORD *)(v4 + 160) = 0u;
  *(_QWORD *)(v4 + 176) = 0;
  turi::sarray_reader<std::string>::sarray_reader(v4);
  *a2 = v4;
  turi::sarray_reader<std::string>::init(v4, a1, 0xFFFFFFFFFFFFFFFFLL);
}

void sub_218157EBC(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  *v1 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<turi::flexible_type,unsigned long>>::push_back[abi:ne180100](uint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[5];

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(result - 8);
  if (v7 >= v6)
  {
    v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *a1) >> 3);
    v11 = v10 + 1;
    if (v10 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v12 > v11)
      v11 = 2 * v12;
    if (v12 >= 0x555555555555555)
      v13 = 0xAAAAAAAAAAAAAAALL;
    else
      v13 = v11;
    v18[4] = result;
    v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>(result, v13);
    v15 = &v14[24 * v10];
    v18[0] = v14;
    v18[1] = v15;
    v18[3] = &v14[24 * v16];
    *(_QWORD *)v15 = 0;
    *((_DWORD *)v15 + 2) = 0;
    v15[12] = 0;
    v17 = *a2;
    *(_QWORD *)(v15 + 5) = *(uint64_t *)((char *)a2 + 5);
    *(_QWORD *)v15 = v17;
    v15[12] = *((_BYTE *)a2 + 12);
    *((_BYTE *)a2 + 12) = 0;
    *((_QWORD *)v15 + 2) = a2[2];
    v18[2] = v15 + 24;
    std::vector<std::pair<turi::flexible_type,unsigned long>>::__swap_out_circular_buffer(a1, v18);
    v9 = a1[1];
    result = std::__split_buffer<std::pair<turi::flexible_type,unsigned long>>::~__split_buffer((uint64_t)v18);
  }
  else
  {
    *(_QWORD *)v7 = 0;
    *(_DWORD *)(v7 + 8) = 0;
    *(_BYTE *)(v7 + 12) = 0;
    v8 = *a2;
    *(_QWORD *)(v7 + 5) = *(uint64_t *)((char *)a2 + 5);
    *(_QWORD *)v7 = v8;
    *(_BYTE *)(v7 + 12) = *((_BYTE *)a2 + 12);
    *((_BYTE *)a2 + 12) = 0;
    *(_QWORD *)(v7 + 16) = a2[2];
    v9 = v7 + 24;
    a1[1] = v7 + 24;
  }
  a1[1] = v9;
  return result;
}

void sub_218158044(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::pair<turi::flexible_type,unsigned long>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t turi::sarray_reader_buffer<std::string>::next(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = a1[6];
  v3 = *a1;
  if (v2 == 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3))
  {
    v4 = a1[8];
    if (a1[10] >= (unint64_t)(a1[9] - v4))
      v5 = a1[9] - v4;
    else
      v5 = a1[10];
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1[5] + 48))(a1[5], v4, v5 + v4, a1);
    v2 = 0;
    a1[8] += v5;
    v3 = *a1;
  }
  ++a1[11];
  a1[6] = v2 + 1;
  return v3 + 24 * v2;
}

uint64_t **std::tuple<turi::flexible_type &,unsigned long &>::operator=[abi:ne180100]<turi::flexible_type,unsigned long,0>(uint64_t **a1, uint64_t *a2)
{
  uint64_t *v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  void *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  unsigned int v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  void *v32;
  void *v33;
  uint64_t v34;
  BOOL v35;
  int v36;
  unint64_t *v38;
  unint64_t v39;
  void **v41;

  v4 = *a1;
  if (*a1 != a2)
  {
    switch(*((_BYTE *)v4 + 12))
    {
      case 2:
        v5 = (unint64_t *)*v4;
        do
        {
          v6 = __ldaxr(v5);
          v7 = v6 - 1;
        }
        while (__stlxr(v7, v5));
        if (!v7)
        {
          v8 = (unint64_t *)*v4;
          if (!*v4)
            goto LABEL_44;
          if (*((char *)v8 + 31) < 0)
            operator delete((void *)v8[1]);
          v9 = v8;
          v10 = 0x1012C404EF22A49;
          goto LABEL_43;
        }
        break;
      case 3:
        v11 = (unint64_t *)*v4;
        do
        {
          v12 = __ldaxr(v11);
          v13 = v12 - 1;
        }
        while (__stlxr(v13, v11));
        if (!v13)
        {
          v14 = (unint64_t *)*v4;
          if (!*v4)
            goto LABEL_44;
          v15 = (void *)v14[1];
          if (v15)
          {
            v14[2] = (unint64_t)v15;
            operator delete(v15);
          }
          v9 = v14;
          v10 = 0x1080C409938AC02;
          goto LABEL_43;
        }
        break;
      case 4:
        v16 = (unint64_t *)*v4;
        do
        {
          v17 = __ldaxr(v16);
          v18 = v17 - 1;
        }
        while (__stlxr(v18, v16));
        if (!v18)
        {
          v19 = (unint64_t *)*v4;
          if (!*v4)
            goto LABEL_44;
          v41 = (void **)(v19 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v41);
          goto LABEL_27;
        }
        break;
      case 5:
        v20 = (unint64_t *)*v4;
        do
        {
          v21 = __ldaxr(v20);
          v22 = v21 - 1;
        }
        while (__stlxr(v22, v20));
        if (!v22)
        {
          v19 = (unint64_t *)*v4;
          if (!*v4)
            goto LABEL_44;
          v41 = (void **)(v19 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v41);
LABEL_27:
          v9 = v19;
          v10 = 0x1020C405E66F15BLL;
          goto LABEL_43;
        }
        break;
      case 8:
        v23 = (unint64_t *)*v4;
        do
        {
          v24 = __ldaxr(v23);
          v25 = v24 - 1;
        }
        while (__stlxr(v25, v23));
        if (!v25)
        {
          v26 = (unint64_t *)*v4;
          if (!*v4)
            goto LABEL_44;
          boost::detail::shared_count::~shared_count((unsigned int **)v26 + 2);
          v9 = v26;
          v27 = -235920773;
          goto LABEL_42;
        }
        break;
      case 9:
        v28 = (unint64_t *)*v4;
        do
        {
          v29 = __ldaxr(v28);
          v30 = v29 - 1;
        }
        while (__stlxr(v30, v28));
        if (!v30)
        {
          v31 = (unint64_t *)*v4;
          if (*v4)
          {
            v32 = (void *)v31[6];
            if (v32)
            {
              v31[7] = (unint64_t)v32;
              operator delete(v32);
            }
            v33 = (void *)v31[3];
            if (v33)
            {
              v31[4] = (unint64_t)v33;
              operator delete(v33);
            }
            std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v31 + 1));
            v9 = v31;
            v27 = 2071181815;
LABEL_42:
            v10 = v27 | 0x1030C4000000000;
LABEL_43:
            MEMORY[0x219A19A08](v9, v10);
          }
LABEL_44:
          *v4 = 0;
        }
        break;
      default:
        break;
    }
    v34 = *a2;
    *(uint64_t *)((char *)v4 + 5) = *(uint64_t *)((char *)a2 + 5);
    *v4 = v34;
    LODWORD(v34) = *((unsigned __int8 *)a2 + 12);
    *((_BYTE *)v4 + 12) = v34;
    v35 = v34 > 9;
    v36 = (1 << v34) & 0x33C;
    if (!v35 && v36 != 0)
    {
      v38 = (unint64_t *)*v4;
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 + 1, v38));
    }
  }
  *a1[1] = a2[2];
  return a1;
}

void sub_2181584EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void turi::sarray<std::string>::open_for_write(uint64_t a1, uint64_t a2, char a3)
{
  turi::fileio::fixed_size_cache_manager *v6;
  uint64_t instance;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  void *v13[2];
  char v14;
  std::string v15;
  void *__p[2];
  char v17;
  std::string __str;

  v6 = (turi::fileio::fixed_size_cache_manager *)assert_msg(*(_BYTE *)(a1 + 248) == 0, "Attempting to init an SArray which has already been inited");
  instance = turi::fileio::fixed_size_cache_manager::get_instance(v6);
  std::string::basic_string[abi:ne180100]<0>(__p, ".sidx");
  turi::fileio::fixed_size_cache_manager::get_temp_cache_id(instance, (uint64_t)__p, &__str);
  if (v17 < 0)
    operator delete(__p[0]);
  std::string::operator=((std::string *)(a1 + 152), &__str);
  v8 = operator new();
  *(_QWORD *)v8 = &unk_24D92C818;
  *(_BYTE *)(v8 + 8) = 0;
  v9 = pthread_mutex_init((pthread_mutex_t *)(v8 + 24), 0);
  assert_msg(v9 == 0, "Mutex create error %d", v9);
  *(_QWORD *)(v8 + 160) = 0;
  *(_OWORD *)(v8 + 128) = 0u;
  *(_OWORD *)(v8 + 144) = 0u;
  *(_OWORD *)(v8 + 96) = 0u;
  *(_OWORD *)(v8 + 112) = 0u;
  *(_QWORD *)(v8 + 88) = 128;
  *(_OWORD *)(v8 + 168) = 0u;
  *(_OWORD *)(v8 + 184) = 0u;
  *(_OWORD *)(v8 + 200) = 0u;
  *(_OWORD *)(v8 + 216) = 0u;
  *(_OWORD *)(v8 + 232) = 0u;
  *(_OWORD *)(v8 + 248) = 0u;
  *(_BYTE *)(v8 + 376) = 0;
  *(_OWORD *)(v8 + 280) = 0u;
  *(_OWORD *)(v8 + 296) = 0u;
  *(_OWORD *)(v8 + 312) = 0u;
  *(_OWORD *)(v8 + 328) = 0u;
  *(_OWORD *)(v8 + 344) = 0u;
  *(_OWORD *)(v8 + 360) = 0u;
  *(_QWORD *)(v8 + 384) = 0;
  *(_QWORD *)(v8 + 392) = 0;
  *(_QWORD *)(v8 + 400) = 0;
  *(_QWORD *)(a1 + 176) = v8;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v15, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
  else
    v15 = __str;
  (*(void (**)(uint64_t, std::string *, uint64_t, uint64_t))(*(_QWORD *)v8 + 16))(v8, &v15, a2, 1);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v15.__r_.__value_.__l.__data_);
    if ((a3 & 1) == 0)
      goto LABEL_12;
  }
  else if ((a3 & 1) == 0)
  {
    goto LABEL_12;
  }
  v10 = *(_QWORD *)(a1 + 176);
  std::string::basic_string[abi:ne180100]<0>(v13, "disable_padding");
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v10 + 24))(v10, v13, 1);
  if (v14 < 0)
    operator delete(v13[0]);
LABEL_12:
  *(_WORD *)(a1 + 248) = 257;
  v11 = *(_QWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 176) + 32))(*(_QWORD *)(a1 + 176)) + 64);
  std::string::operator=((std::string *)(a1 + 8), (const std::string *)v11);
  v12 = *(_OWORD *)(v11 + 24);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(v11 + 40);
  *(_OWORD *)(a1 + 32) = v12;
  std::string::operator=((std::string *)(a1 + 56), (const std::string *)(v11 + 48));
  if (a1 + 8 != v11)
  {
    std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((char *)(a1 + 80), *(char **)(v11 + 72), *(_QWORD *)(v11 + 80), (uint64_t)(*(_QWORD *)(v11 + 80) - *(_QWORD *)(v11 + 72)) >> 3);
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)(a1 + 104), *(std::string **)(v11 + 96), *(__int128 **)(v11 + 104), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v11 + 104) - *(_QWORD *)(v11 + 96)) >> 3));
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>((uint64_t **)(a1 + 128), *(__int128 **)(v11 + 120), (__int128 *)(v11 + 128));
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_2181587F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v28 - 33) < 0)
    operator delete(*(void **)(v28 - 56));
  _Unwind_Resume(exception_object);
}

uint64_t turi::sarray<std::string>::sarray(uint64_t a1)
{
  int v2;

  *(_QWORD *)a1 = &unk_24D92C7B0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = -1;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = a1 + 136;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  v2 = pthread_mutex_init((pthread_mutex_t *)(a1 + 184), 0);
  assert_msg(v2 == 0, "Mutex create error %d", v2);
  *(_WORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  return a1;
}

void sub_218158938(_Unwind_Exception *a1)
{
  uint64_t v1;
  turi::index_file_information *v2;
  void **v3;

  if (*(char *)(v1 + 175) < 0)
    operator delete(*v3);
  turi::index_file_information::~index_file_information(v2);
  _Unwind_Resume(a1);
}

_QWORD *turi::sframe_iterator::operator*(_QWORD *a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  void *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  unsigned int v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  void *v32;
  void *v33;
  uint64_t v34;
  BOOL v35;
  int v36;
  unint64_t *v38;
  unint64_t v39;
  void **v41;

  if (*(_QWORD *)(*a1 + 8) != *(_QWORD *)*a1)
  {
    v2 = 0;
    do
    {
      v3 = a1[1] + 48 * v2 + 16;
      v4 = a1[7] + 16 * v2;
      if (v3 != v4)
      {
        switch(*(_BYTE *)(v4 + 12))
        {
          case 2:
            v5 = *(unint64_t **)v4;
            do
            {
              v6 = __ldaxr(v5);
              v7 = v6 - 1;
            }
            while (__stlxr(v7, v5));
            if (!v7)
            {
              v8 = *(unint64_t **)v4;
              if (!*(_QWORD *)v4)
                goto LABEL_46;
              if (*((char *)v8 + 31) < 0)
                operator delete((void *)v8[1]);
              v9 = v8;
              v10 = 0x1012C404EF22A49;
              goto LABEL_45;
            }
            break;
          case 3:
            v11 = *(unint64_t **)v4;
            do
            {
              v12 = __ldaxr(v11);
              v13 = v12 - 1;
            }
            while (__stlxr(v13, v11));
            if (!v13)
            {
              v14 = *(unint64_t **)v4;
              if (!*(_QWORD *)v4)
                goto LABEL_46;
              v15 = (void *)v14[1];
              if (v15)
              {
                v14[2] = (unint64_t)v15;
                operator delete(v15);
              }
              v9 = v14;
              v10 = 0x1080C409938AC02;
              goto LABEL_45;
            }
            break;
          case 4:
            v16 = *(unint64_t **)v4;
            do
            {
              v17 = __ldaxr(v16);
              v18 = v17 - 1;
            }
            while (__stlxr(v18, v16));
            if (!v18)
            {
              v19 = *(unint64_t **)v4;
              if (!*(_QWORD *)v4)
                goto LABEL_46;
              v41 = (void **)(v19 + 1);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v41);
              goto LABEL_29;
            }
            break;
          case 5:
            v20 = *(unint64_t **)v4;
            do
            {
              v21 = __ldaxr(v20);
              v22 = v21 - 1;
            }
            while (__stlxr(v22, v20));
            if (!v22)
            {
              v19 = *(unint64_t **)v4;
              if (!*(_QWORD *)v4)
                goto LABEL_46;
              v41 = (void **)(v19 + 1);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v41);
LABEL_29:
              v9 = v19;
              v10 = 0x1020C405E66F15BLL;
              goto LABEL_45;
            }
            break;
          case 8:
            v23 = *(unint64_t **)v4;
            do
            {
              v24 = __ldaxr(v23);
              v25 = v24 - 1;
            }
            while (__stlxr(v25, v23));
            if (!v25)
            {
              v26 = *(unint64_t **)v4;
              if (!*(_QWORD *)v4)
                goto LABEL_46;
              boost::detail::shared_count::~shared_count((unsigned int **)v26 + 2);
              v9 = v26;
              v27 = -235920773;
              goto LABEL_44;
            }
            break;
          case 9:
            v28 = *(unint64_t **)v4;
            do
            {
              v29 = __ldaxr(v28);
              v30 = v29 - 1;
            }
            while (__stlxr(v30, v28));
            if (!v30)
            {
              v31 = *(unint64_t **)v4;
              if (*(_QWORD *)v4)
              {
                v32 = (void *)v31[6];
                if (v32)
                {
                  v31[7] = (unint64_t)v32;
                  operator delete(v32);
                }
                v33 = (void *)v31[3];
                if (v33)
                {
                  v31[4] = (unint64_t)v33;
                  operator delete(v33);
                }
                std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v31 + 1));
                v9 = v31;
                v27 = 2071181815;
LABEL_44:
                v10 = v27 | 0x1030C4000000000;
LABEL_45:
                MEMORY[0x219A19A08](v9, v10);
              }
LABEL_46:
              *(_QWORD *)v4 = 0;
            }
            break;
          default:
            break;
        }
        v34 = *(_QWORD *)v3;
        *(_QWORD *)(v4 + 5) = *(_QWORD *)(v3 + 5);
        *(_QWORD *)v4 = v34;
        LODWORD(v34) = *(unsigned __int8 *)(v3 + 12);
        *(_BYTE *)(v4 + 12) = v34;
        v35 = v34 > 9;
        v36 = (1 << v34) & 0x33C;
        if (!v35 && v36 != 0)
        {
          v38 = *(unint64_t **)v4;
          do
            v39 = __ldaxr(v38);
          while (__stlxr(v39 + 1, v38));
        }
      }
      ++v2;
    }
    while (v2 < (uint64_t)(*(_QWORD *)(*a1 + 8) - *(_QWORD *)*a1) >> 4);
  }
  return a1 + 7;
}

void turi::sframe_iterator::~sframe_iterator(turi::sframe_iterator *this)
{
  void **v2;

  v2 = (void **)((char *)this + 56);
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = (void **)((char *)this + 8);
  std::vector<turi::sarray_iterator<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v2);
}

void std::vector<turi::sarray_iterator<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = turi::sarray_iterator<turi::flexible_type>::~sarray_iterator(v4 - 48);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,std::function<BOOL ()(turi::flexible_type const&,turi::flexible_type const&)> &,turi::flexible_type*,false>(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  unint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  char v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;

  v8 = result;
LABEL_2:
  v9 = a2 - 2;
  v10 = v8;
  while (2)
  {
    v11 = 1 - a4;
LABEL_4:
    v8 = v10;
    v12 = v11;
    v13 = (uint64_t)a2 - v10;
    v14 = (uint64_t)((uint64_t)a2 - v10) >> 4;
    switch(v14)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v22 = *(_QWORD *)(a3 + 24);
        if (!v22)
          goto LABEL_34;
        result = (*(uint64_t (**)(uint64_t, uint64_t *, unint64_t))(*(_QWORD *)v22 + 48))(v22, a2 - 2, v10);
        if ((_DWORD)result)
        {
          v25 = *(_OWORD *)v10;
          v23 = *v9;
          *(_QWORD *)(v10 + 5) = *(uint64_t *)((char *)a2 - 11);
          *(_QWORD *)v10 = v23;
          *v9 = v25;
          *(uint64_t *)((char *)a2 - 11) = *(_QWORD *)((char *)&v25 + 5);
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(turi::flexible_type const&,turi::flexible_type const&)> &,turi::flexible_type*>((__int128 *)v10, (__int128 *)(v10 + 16), a2 - 2, a3);
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(turi::flexible_type const&,turi::flexible_type const&)> &,turi::flexible_type*>(v10, v10 + 16, (_QWORD *)(v10 + 32), a2 - 2, a3);
      case 5uLL:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(turi::flexible_type const&,turi::flexible_type const&)> &,turi::flexible_type*>(v10, v10 + 16, (_QWORD *)(v10 + 32), (_QWORD *)(v10 + 48), a2 - 2, a3);
      default:
        if (v13 <= 383)
        {
          if ((a5 & 1) != 0)
            return std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(turi::flexible_type const&,turi::flexible_type const&)> &,turi::flexible_type*>(v10, a2, a3);
          else
            return std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(turi::flexible_type const&,turi::flexible_type const&)> &,turi::flexible_type*>(v10, a2, a3);
        }
        if (v12 != 1)
        {
          v15 = v14 >> 1;
          v16 = v10 + 16 * (v14 >> 1);
          if ((unint64_t)v13 < 0x801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(turi::flexible_type const&,turi::flexible_type const&)> &,turi::flexible_type*>((__int128 *)(v10 + 16 * (v14 >> 1)), (__int128 *)v10, a2 - 2, a3);
            if ((a5 & 1) != 0)
              goto LABEL_13;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(turi::flexible_type const&,turi::flexible_type const&)> &,turi::flexible_type*>((__int128 *)v10, (__int128 *)(v10 + 16 * (v14 >> 1)), a2 - 2, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(turi::flexible_type const&,turi::flexible_type const&)> &,turi::flexible_type*>((__int128 *)(v10 + 16), (__int128 *)(v16 - 16), a2 - 4, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(turi::flexible_type const&,turi::flexible_type const&)> &,turi::flexible_type*>((__int128 *)(v10 + 32), (__int128 *)(v10 + 16 + 16 * v15), a2 - 6, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(turi::flexible_type const&,turi::flexible_type const&)> &,turi::flexible_type*>((__int128 *)(v16 - 16), (__int128 *)v16, (_QWORD *)(v10 + 16 + 16 * v15), a3);
            v24 = *(_OWORD *)v10;
            v17 = *(_QWORD *)v16;
            *(_QWORD *)(v10 + 5) = *(_QWORD *)(v16 + 5);
            *(_QWORD *)v10 = v17;
            *(_QWORD *)(v16 + 5) = *(_QWORD *)((char *)&v24 + 5);
            *(_QWORD *)v16 = v24;
            if ((a5 & 1) != 0)
              goto LABEL_13;
          }
          v18 = *(_QWORD *)(a3 + 24);
          if (!v18)
LABEL_34:
            std::__throw_bad_function_call[abi:ne180100]();
          if (((*(uint64_t (**)(uint64_t, unint64_t, unint64_t))(*(_QWORD *)v18 + 48))(v18, v10 - 16, v10) & 1) == 0)
          {
            result = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,turi::flexible_type *,std::function<BOOL ()(turi::flexible_type const&,turi::flexible_type const&)> &>(v10, a2, a3);
            v10 = result;
LABEL_18:
            a5 = 0;
            a4 = -v12;
            continue;
          }
LABEL_13:
          v19 = (uint64_t *)std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,turi::flexible_type *,std::function<BOOL ()(turi::flexible_type const&,turi::flexible_type const&)> &>(v10, a2, a3);
          if ((v20 & 1) == 0)
            goto LABEL_16;
          v21 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(turi::flexible_type const&,turi::flexible_type const&)> &,turi::flexible_type*>(v10, (uint64_t)v19, a3);
          v10 = (unint64_t)(v19 + 2);
          result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(turi::flexible_type const&,turi::flexible_type const&)> &,turi::flexible_type*>((uint64_t)(v19 + 2), (uint64_t)a2, a3);
          if (!(_DWORD)result)
          {
            v11 = v12 + 1;
            if (!v21)
            {
LABEL_16:
              result = std::__introsort<std::_ClassicAlgPolicy,std::function<BOOL ()(turi::flexible_type const&,turi::flexible_type const&)> &,turi::flexible_type*,false>(v8, v19, a3, -v12, a5 & 1);
              v10 = (unint64_t)(v19 + 2);
              goto LABEL_18;
            }
            goto LABEL_4;
          }
          a4 = -v12;
          a2 = v19;
          if (v21)
            return result;
          goto LABEL_2;
        }
        if ((uint64_t *)v10 != a2)
          return std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(turi::flexible_type const&,turi::flexible_type const&)> &,turi::flexible_type*,turi::flexible_type*>((char *)v10, (char *)a2, (uint64_t)a2, a3);
        return result;
    }
  }
}

uint64_t std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(turi::flexible_type const&,turi::flexible_type const&)> &,turi::flexible_type*>(uint64_t result, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t *v25;
  void *v26;
  void *v27;
  unsigned int v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t *v32;
  void *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t *v40;
  uint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t *v46;
  uint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t *v55;
  void *v56;
  void *v57;
  unsigned int v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t *v62;
  void *v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t *v70;
  uint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t *v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t *v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  void *v86;
  void *v87;
  unsigned int v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  void *v93;
  unint64_t *v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t *v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  void **v101;
  _BYTE v102[13];
  uint64_t v103;

  v103 = *MEMORY[0x24BDAC8D0];
  if ((_QWORD *)result != a2)
  {
    v4 = result;
    v5 = (_QWORD *)(result + 16);
    if ((_QWORD *)(result + 16) != a2)
    {
      v7 = (_QWORD *)result;
      do
      {
        v8 = *(_QWORD *)(a3 + 24);
        if (!v8)
          std::__throw_bad_function_call[abi:ne180100]();
        v9 = v5;
        result = (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *))(*(_QWORD *)v8 + 48))(v8, v5, v7);
        if ((_DWORD)result)
        {
          *(_QWORD *)&v102[5] = *(_QWORD *)((char *)v9 + 5);
          *(_QWORD *)v102 = *v9;
          v102[12] = *((_BYTE *)v7 + 28);
          *((_BYTE *)v7 + 28) = 0;
          v10 = v9;
          while (1)
          {
            v11 = v7;
            switch(*((_BYTE *)v10 + 12))
            {
              case 2:
                v12 = (unint64_t *)*v10;
                do
                {
                  v13 = __ldaxr(v12);
                  v14 = v13 - 1;
                }
                while (__stlxr(v14, v12));
                if (!v14)
                {
                  v15 = (unint64_t *)*v10;
                  if (!*v10)
                    goto LABEL_49;
                  if (*((char *)v15 + 31) < 0)
                    operator delete((void *)v15[1]);
                  v16 = v15;
                  v17 = 0x1012C404EF22A49;
                  goto LABEL_48;
                }
                break;
              case 3:
                v29 = (unint64_t *)*v10;
                do
                {
                  v30 = __ldaxr(v29);
                  v31 = v30 - 1;
                }
                while (__stlxr(v31, v29));
                if (!v31)
                {
                  v32 = (unint64_t *)*v10;
                  if (!*v10)
                    goto LABEL_49;
                  v33 = (void *)v32[1];
                  if (v33)
                  {
                    v32[2] = (unint64_t)v33;
                    operator delete(v33);
                  }
                  v16 = v32;
                  v17 = 0x1080C409938AC02;
                  goto LABEL_48;
                }
                break;
              case 4:
                v18 = (unint64_t *)*v10;
                do
                {
                  v19 = __ldaxr(v18);
                  v20 = v19 - 1;
                }
                while (__stlxr(v20, v18));
                if (!v20)
                {
                  v21 = (unint64_t *)*v10;
                  if (!*v10)
                    goto LABEL_49;
                  v101 = (void **)(v21 + 1);
                  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v101);
                  goto LABEL_41;
                }
                break;
              case 5:
                v34 = (unint64_t *)*v10;
                do
                {
                  v35 = __ldaxr(v34);
                  v36 = v35 - 1;
                }
                while (__stlxr(v36, v34));
                if (!v36)
                {
                  v21 = (unint64_t *)*v10;
                  if (!*v10)
                    goto LABEL_49;
                  v101 = (void **)(v21 + 1);
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v101);
LABEL_41:
                  v16 = v21;
                  v17 = 0x1020C405E66F15BLL;
                  goto LABEL_48;
                }
                break;
              case 8:
                v37 = (unint64_t *)*v10;
                do
                {
                  v38 = __ldaxr(v37);
                  v39 = v38 - 1;
                }
                while (__stlxr(v39, v37));
                if (!v39)
                {
                  v40 = (unint64_t *)*v10;
                  if (!*v10)
                    goto LABEL_49;
                  boost::detail::shared_count::~shared_count((unsigned int **)v40 + 2);
                  v16 = v40;
                  v28 = -235920773;
                  goto LABEL_47;
                }
                break;
              case 9:
                v22 = (unint64_t *)*v10;
                do
                {
                  v23 = __ldaxr(v22);
                  v24 = v23 - 1;
                }
                while (__stlxr(v24, v22));
                if (!v24)
                {
                  v25 = (unint64_t *)*v10;
                  if (*v10)
                  {
                    v26 = (void *)v25[6];
                    if (v26)
                    {
                      v25[7] = (unint64_t)v26;
                      operator delete(v26);
                    }
                    v27 = (void *)v25[3];
                    if (v27)
                    {
                      v25[4] = (unint64_t)v27;
                      operator delete(v27);
                    }
                    std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v25 + 1));
                    v16 = v25;
                    v28 = 2071181815;
LABEL_47:
                    v17 = v28 | 0x1030C4000000000;
LABEL_48:
                    result = MEMORY[0x219A19A08](v16, v17);
                  }
LABEL_49:
                  *v10 = 0;
                }
                break;
              default:
                break;
            }
            *v10 = *v11;
            *(_QWORD *)((char *)v10 + 5) = *(_QWORD *)((char *)v11 + 5);
            *((_BYTE *)v10 + 12) = *((_BYTE *)v11 + 12);
            *((_BYTE *)v11 + 12) = 0;
            if (v11 == (_QWORD *)v4)
              break;
            v41 = *(_QWORD *)(a3 + 24);
            if (!v41)
              std::__throw_bad_function_call[abi:ne180100]();
            v7 = v11 - 2;
            result = (*(uint64_t (**)(uint64_t, _BYTE *, _QWORD *))(*(_QWORD *)v41 + 48))(v41, v102, v11 - 2);
            v10 = v11;
            if ((result & 1) == 0)
              goto LABEL_55;
          }
          v11 = (_QWORD *)v4;
LABEL_55:
          if (v102 == (_BYTE *)v11)
          {
            switch(v102[12])
            {
              case 2:
                v72 = *(unint64_t **)v102;
                do
                {
                  v73 = __ldaxr(v72);
                  v74 = v73 - 1;
                }
                while (__stlxr(v74, v72));
                if (!v74)
                {
                  v75 = *(_QWORD *)v102;
                  if (*(_QWORD *)v102)
                  {
                    if (*(char *)(*(_QWORD *)v102 + 31) < 0)
                      operator delete(*(void **)(*(_QWORD *)v102 + 8));
                    v76 = v75;
                    v77 = 0x1012C404EF22A49;
                    goto LABEL_143;
                  }
                }
                break;
              case 3:
                v89 = *(unint64_t **)v102;
                do
                {
                  v90 = __ldaxr(v89);
                  v91 = v90 - 1;
                }
                while (__stlxr(v91, v89));
                if (!v91)
                {
                  v92 = *(_QWORD *)v102;
                  if (*(_QWORD *)v102)
                  {
                    v93 = *(void **)(*(_QWORD *)v102 + 8);
                    if (v93)
                    {
                      *(_QWORD *)(*(_QWORD *)v102 + 16) = v93;
                      operator delete(v93);
                    }
                    v76 = v92;
                    v77 = 0x1080C409938AC02;
                    goto LABEL_143;
                  }
                }
                break;
              case 4:
                v78 = *(unint64_t **)v102;
                do
                {
                  v79 = __ldaxr(v78);
                  v80 = v79 - 1;
                }
                while (__stlxr(v80, v78));
                if (!v80)
                {
                  v81 = *(_QWORD *)v102;
                  if (*(_QWORD *)v102)
                  {
                    v101 = (void **)(*(_QWORD *)v102 + 8);
                    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v101);
                    goto LABEL_136;
                  }
                }
                break;
              case 5:
                v94 = *(unint64_t **)v102;
                do
                {
                  v95 = __ldaxr(v94);
                  v96 = v95 - 1;
                }
                while (__stlxr(v96, v94));
                if (!v96)
                {
                  v81 = *(_QWORD *)v102;
                  if (*(_QWORD *)v102)
                  {
                    v101 = (void **)(*(_QWORD *)v102 + 8);
                    std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v101);
LABEL_136:
                    v76 = v81;
                    v77 = 0x1020C405E66F15BLL;
                    goto LABEL_143;
                  }
                }
                break;
              case 8:
                v97 = *(unint64_t **)v102;
                do
                {
                  v98 = __ldaxr(v97);
                  v99 = v98 - 1;
                }
                while (__stlxr(v99, v97));
                if (!v99)
                {
                  v100 = *(_QWORD *)v102;
                  if (*(_QWORD *)v102)
                  {
                    boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)v102 + 16));
                    v76 = v100;
                    v88 = -235920773;
                    goto LABEL_142;
                  }
                }
                break;
              case 9:
                v82 = *(unint64_t **)v102;
                do
                {
                  v83 = __ldaxr(v82);
                  v84 = v83 - 1;
                }
                while (__stlxr(v84, v82));
                if (!v84)
                {
                  v85 = *(_QWORD *)v102;
                  if (*(_QWORD *)v102)
                  {
                    v86 = *(void **)(*(_QWORD *)v102 + 48);
                    if (v86)
                    {
                      *(_QWORD *)(*(_QWORD *)v102 + 56) = v86;
                      operator delete(v86);
                    }
                    v87 = *(void **)(v85 + 24);
                    if (v87)
                    {
                      *(_QWORD *)(v85 + 32) = v87;
                      operator delete(v87);
                    }
                    std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v85 + 8);
                    v76 = v85;
                    v88 = 2071181815;
LABEL_142:
                    v77 = v88 | 0x1030C4000000000;
LABEL_143:
                    result = MEMORY[0x219A19A08](v76, v77);
                  }
                }
                break;
              default:
                break;
            }
          }
          else
          {
            switch(*((_BYTE *)v11 + 12))
            {
              case 2:
                v42 = (unint64_t *)*v11;
                do
                {
                  v43 = __ldaxr(v42);
                  v44 = v43 - 1;
                }
                while (__stlxr(v44, v42));
                if (!v44)
                {
                  v45 = (unint64_t *)*v11;
                  if (!*v11)
                    goto LABEL_98;
                  if (*((char *)v45 + 31) < 0)
                    operator delete((void *)v45[1]);
                  v46 = v45;
                  v47 = 0x1012C404EF22A49;
                  goto LABEL_97;
                }
                break;
              case 3:
                v59 = (unint64_t *)*v11;
                do
                {
                  v60 = __ldaxr(v59);
                  v61 = v60 - 1;
                }
                while (__stlxr(v61, v59));
                if (!v61)
                {
                  v62 = (unint64_t *)*v11;
                  if (!*v11)
                    goto LABEL_98;
                  v63 = (void *)v62[1];
                  if (v63)
                  {
                    v62[2] = (unint64_t)v63;
                    operator delete(v63);
                  }
                  v46 = v62;
                  v47 = 0x1080C409938AC02;
                  goto LABEL_97;
                }
                break;
              case 4:
                v48 = (unint64_t *)*v11;
                do
                {
                  v49 = __ldaxr(v48);
                  v50 = v49 - 1;
                }
                while (__stlxr(v50, v48));
                if (!v50)
                {
                  v51 = (unint64_t *)*v11;
                  if (!*v11)
                    goto LABEL_98;
                  v101 = (void **)(v51 + 1);
                  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v101);
                  goto LABEL_90;
                }
                break;
              case 5:
                v64 = (unint64_t *)*v11;
                do
                {
                  v65 = __ldaxr(v64);
                  v66 = v65 - 1;
                }
                while (__stlxr(v66, v64));
                if (!v66)
                {
                  v51 = (unint64_t *)*v11;
                  if (!*v11)
                    goto LABEL_98;
                  v101 = (void **)(v51 + 1);
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v101);
LABEL_90:
                  v46 = v51;
                  v47 = 0x1020C405E66F15BLL;
                  goto LABEL_97;
                }
                break;
              case 8:
                v67 = (unint64_t *)*v11;
                do
                {
                  v68 = __ldaxr(v67);
                  v69 = v68 - 1;
                }
                while (__stlxr(v69, v67));
                if (!v69)
                {
                  v70 = (unint64_t *)*v11;
                  if (!*v11)
                    goto LABEL_98;
                  boost::detail::shared_count::~shared_count((unsigned int **)v70 + 2);
                  v46 = v70;
                  v58 = -235920773;
                  goto LABEL_96;
                }
                break;
              case 9:
                v52 = (unint64_t *)*v11;
                do
                {
                  v53 = __ldaxr(v52);
                  v54 = v53 - 1;
                }
                while (__stlxr(v54, v52));
                if (!v54)
                {
                  v55 = (unint64_t *)*v11;
                  if (*v11)
                  {
                    v56 = (void *)v55[6];
                    if (v56)
                    {
                      v55[7] = (unint64_t)v56;
                      operator delete(v56);
                    }
                    v57 = (void *)v55[3];
                    if (v57)
                    {
                      v55[4] = (unint64_t)v57;
                      operator delete(v57);
                    }
                    std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v55 + 1));
                    v46 = v55;
                    v58 = 2071181815;
LABEL_96:
                    v47 = v58 | 0x1030C4000000000;
LABEL_97:
                    result = MEMORY[0x219A19A08](v46, v47);
                  }
LABEL_98:
                  *v11 = 0;
                }
                break;
              default:
                break;
            }
            v71 = *(_QWORD *)v102;
            *(_QWORD *)((char *)v11 + 5) = *(_QWORD *)&v102[5];
            *v11 = v71;
            *((_BYTE *)v11 + 12) = v102[12];
          }
        }
        v5 = v9 + 2;
        v7 = v9;
      }
      while (v9 + 2 != a2);
    }
  }
  return result;
}

void sub_2181597FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, char a12)
{
  _Unwind_Resume(exception_object);
}

uint64_t std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(turi::flexible_type const&,turi::flexible_type const&)> &,turi::flexible_type*>(uint64_t result, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  void *v25;
  void *v26;
  unsigned int v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  void *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t *v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t *v45;
  uint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t *v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t *v54;
  void *v55;
  void *v56;
  unsigned int v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t *v61;
  void *v62;
  unint64_t *v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t *v69;
  uint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t *v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t *v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  void *v85;
  void *v86;
  unsigned int v87;
  unint64_t *v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  void *v92;
  unint64_t *v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t *v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  void **v100;
  _BYTE v101[13];
  uint64_t v102;

  v102 = *MEMORY[0x24BDAC8D0];
  if ((_QWORD *)result != a2)
  {
    v4 = (_QWORD *)result;
    v5 = (_QWORD *)(result + 16);
    if ((_QWORD *)(result + 16) != a2)
    {
      do
      {
        v7 = *(_QWORD *)(a3 + 24);
        if (!v7)
          std::__throw_bad_function_call[abi:ne180100]();
        v8 = v5;
        result = (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *))(*(_QWORD *)v7 + 48))(v7, v5, v4);
        if ((_DWORD)result)
        {
          *(_QWORD *)&v101[5] = *(_QWORD *)((char *)v8 + 5);
          *(_QWORD *)v101 = *v8;
          v101[12] = *((_BYTE *)v4 + 28);
          *((_BYTE *)v4 + 28) = 0;
          v9 = v8;
          do
          {
            v10 = v4;
            switch(*((_BYTE *)v9 + 12))
            {
              case 2:
                v11 = (unint64_t *)*v9;
                do
                {
                  v12 = __ldaxr(v11);
                  v13 = v12 - 1;
                }
                while (__stlxr(v13, v11));
                if (!v13)
                {
                  v14 = (unint64_t *)*v9;
                  if (!*v9)
                    goto LABEL_48;
                  if (*((char *)v14 + 31) < 0)
                    operator delete((void *)v14[1]);
                  v15 = v14;
                  v16 = 0x1012C404EF22A49;
                  goto LABEL_47;
                }
                break;
              case 3:
                v28 = (unint64_t *)*v9;
                do
                {
                  v29 = __ldaxr(v28);
                  v30 = v29 - 1;
                }
                while (__stlxr(v30, v28));
                if (!v30)
                {
                  v31 = (unint64_t *)*v9;
                  if (!*v9)
                    goto LABEL_48;
                  v32 = (void *)v31[1];
                  if (v32)
                  {
                    v31[2] = (unint64_t)v32;
                    operator delete(v32);
                  }
                  v15 = v31;
                  v16 = 0x1080C409938AC02;
                  goto LABEL_47;
                }
                break;
              case 4:
                v17 = (unint64_t *)*v9;
                do
                {
                  v18 = __ldaxr(v17);
                  v19 = v18 - 1;
                }
                while (__stlxr(v19, v17));
                if (!v19)
                {
                  v20 = (unint64_t *)*v9;
                  if (!*v9)
                    goto LABEL_48;
                  v100 = (void **)(v20 + 1);
                  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v100);
                  goto LABEL_40;
                }
                break;
              case 5:
                v33 = (unint64_t *)*v9;
                do
                {
                  v34 = __ldaxr(v33);
                  v35 = v34 - 1;
                }
                while (__stlxr(v35, v33));
                if (!v35)
                {
                  v20 = (unint64_t *)*v9;
                  if (!*v9)
                    goto LABEL_48;
                  v100 = (void **)(v20 + 1);
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v100);
LABEL_40:
                  v15 = v20;
                  v16 = 0x1020C405E66F15BLL;
                  goto LABEL_47;
                }
                break;
              case 8:
                v36 = (unint64_t *)*v9;
                do
                {
                  v37 = __ldaxr(v36);
                  v38 = v37 - 1;
                }
                while (__stlxr(v38, v36));
                if (!v38)
                {
                  v39 = (unint64_t *)*v9;
                  if (!*v9)
                    goto LABEL_48;
                  boost::detail::shared_count::~shared_count((unsigned int **)v39 + 2);
                  v15 = v39;
                  v27 = -235920773;
                  goto LABEL_46;
                }
                break;
              case 9:
                v21 = (unint64_t *)*v9;
                do
                {
                  v22 = __ldaxr(v21);
                  v23 = v22 - 1;
                }
                while (__stlxr(v23, v21));
                if (!v23)
                {
                  v24 = (unint64_t *)*v9;
                  if (*v9)
                  {
                    v25 = (void *)v24[6];
                    if (v25)
                    {
                      v24[7] = (unint64_t)v25;
                      operator delete(v25);
                    }
                    v26 = (void *)v24[3];
                    if (v26)
                    {
                      v24[4] = (unint64_t)v26;
                      operator delete(v26);
                    }
                    std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v24 + 1));
                    v15 = v24;
                    v27 = 2071181815;
LABEL_46:
                    v16 = v27 | 0x1030C4000000000;
LABEL_47:
                    MEMORY[0x219A19A08](v15, v16);
                  }
LABEL_48:
                  *v9 = 0;
                }
                break;
              default:
                break;
            }
            *v9 = *v10;
            *(_QWORD *)((char *)v9 + 5) = *(_QWORD *)((char *)v10 + 5);
            *((_BYTE *)v9 + 12) = *((_BYTE *)v10 + 12);
            *((_BYTE *)v10 + 12) = 0;
            v40 = *(_QWORD *)(a3 + 24);
            if (!v40)
              std::__throw_bad_function_call[abi:ne180100]();
            v4 = v10 - 2;
            result = (*(uint64_t (**)(uint64_t, _BYTE *, _QWORD *))(*(_QWORD *)v40 + 48))(v40, v101, v10 - 2);
            v9 = v10;
          }
          while ((result & 1) != 0);
          if (v101 == (_BYTE *)v10)
          {
            switch(v101[12])
            {
              case 2:
                v71 = *(unint64_t **)v101;
                do
                {
                  v72 = __ldaxr(v71);
                  v73 = v72 - 1;
                }
                while (__stlxr(v73, v71));
                if (!v73)
                {
                  v74 = *(_QWORD *)v101;
                  if (*(_QWORD *)v101)
                  {
                    if (*(char *)(*(_QWORD *)v101 + 31) < 0)
                      operator delete(*(void **)(*(_QWORD *)v101 + 8));
                    v75 = v74;
                    v76 = 0x1012C404EF22A49;
                    goto LABEL_139;
                  }
                }
                break;
              case 3:
                v88 = *(unint64_t **)v101;
                do
                {
                  v89 = __ldaxr(v88);
                  v90 = v89 - 1;
                }
                while (__stlxr(v90, v88));
                if (!v90)
                {
                  v91 = *(_QWORD *)v101;
                  if (*(_QWORD *)v101)
                  {
                    v92 = *(void **)(*(_QWORD *)v101 + 8);
                    if (v92)
                    {
                      *(_QWORD *)(*(_QWORD *)v101 + 16) = v92;
                      operator delete(v92);
                    }
                    v75 = v91;
                    v76 = 0x1080C409938AC02;
                    goto LABEL_139;
                  }
                }
                break;
              case 4:
                v77 = *(unint64_t **)v101;
                do
                {
                  v78 = __ldaxr(v77);
                  v79 = v78 - 1;
                }
                while (__stlxr(v79, v77));
                if (!v79)
                {
                  v80 = *(_QWORD *)v101;
                  if (*(_QWORD *)v101)
                  {
                    v100 = (void **)(*(_QWORD *)v101 + 8);
                    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v100);
                    goto LABEL_132;
                  }
                }
                break;
              case 5:
                v93 = *(unint64_t **)v101;
                do
                {
                  v94 = __ldaxr(v93);
                  v95 = v94 - 1;
                }
                while (__stlxr(v95, v93));
                if (!v95)
                {
                  v80 = *(_QWORD *)v101;
                  if (*(_QWORD *)v101)
                  {
                    v100 = (void **)(*(_QWORD *)v101 + 8);
                    std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v100);
LABEL_132:
                    v75 = v80;
                    v76 = 0x1020C405E66F15BLL;
                    goto LABEL_139;
                  }
                }
                break;
              case 8:
                v96 = *(unint64_t **)v101;
                do
                {
                  v97 = __ldaxr(v96);
                  v98 = v97 - 1;
                }
                while (__stlxr(v98, v96));
                if (!v98)
                {
                  v99 = *(_QWORD *)v101;
                  if (*(_QWORD *)v101)
                  {
                    boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)v101 + 16));
                    v75 = v99;
                    v87 = -235920773;
                    goto LABEL_138;
                  }
                }
                break;
              case 9:
                v81 = *(unint64_t **)v101;
                do
                {
                  v82 = __ldaxr(v81);
                  v83 = v82 - 1;
                }
                while (__stlxr(v83, v81));
                if (!v83)
                {
                  v84 = *(_QWORD *)v101;
                  if (*(_QWORD *)v101)
                  {
                    v85 = *(void **)(*(_QWORD *)v101 + 48);
                    if (v85)
                    {
                      *(_QWORD *)(*(_QWORD *)v101 + 56) = v85;
                      operator delete(v85);
                    }
                    v86 = *(void **)(v84 + 24);
                    if (v86)
                    {
                      *(_QWORD *)(v84 + 32) = v86;
                      operator delete(v86);
                    }
                    std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v84 + 8);
                    v75 = v84;
                    v87 = 2071181815;
LABEL_138:
                    v76 = v87 | 0x1030C4000000000;
LABEL_139:
                    result = MEMORY[0x219A19A08](v75, v76);
                  }
                }
                break;
              default:
                break;
            }
          }
          else
          {
            switch(*((_BYTE *)v10 + 12))
            {
              case 2:
                v41 = (unint64_t *)*v10;
                do
                {
                  v42 = __ldaxr(v41);
                  v43 = v42 - 1;
                }
                while (__stlxr(v43, v41));
                if (!v43)
                {
                  v44 = (unint64_t *)*v10;
                  if (!*v10)
                    goto LABEL_94;
                  if (*((char *)v44 + 31) < 0)
                    operator delete((void *)v44[1]);
                  v45 = v44;
                  v46 = 0x1012C404EF22A49;
                  goto LABEL_93;
                }
                break;
              case 3:
                v58 = (unint64_t *)*v10;
                do
                {
                  v59 = __ldaxr(v58);
                  v60 = v59 - 1;
                }
                while (__stlxr(v60, v58));
                if (!v60)
                {
                  v61 = (unint64_t *)*v10;
                  if (!*v10)
                    goto LABEL_94;
                  v62 = (void *)v61[1];
                  if (v62)
                  {
                    v61[2] = (unint64_t)v62;
                    operator delete(v62);
                  }
                  v45 = v61;
                  v46 = 0x1080C409938AC02;
                  goto LABEL_93;
                }
                break;
              case 4:
                v47 = (unint64_t *)*v10;
                do
                {
                  v48 = __ldaxr(v47);
                  v49 = v48 - 1;
                }
                while (__stlxr(v49, v47));
                if (!v49)
                {
                  v50 = (unint64_t *)*v10;
                  if (!*v10)
                    goto LABEL_94;
                  v100 = (void **)(v50 + 1);
                  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v100);
                  goto LABEL_86;
                }
                break;
              case 5:
                v63 = (unint64_t *)*v10;
                do
                {
                  v64 = __ldaxr(v63);
                  v65 = v64 - 1;
                }
                while (__stlxr(v65, v63));
                if (!v65)
                {
                  v50 = (unint64_t *)*v10;
                  if (!*v10)
                    goto LABEL_94;
                  v100 = (void **)(v50 + 1);
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v100);
LABEL_86:
                  v45 = v50;
                  v46 = 0x1020C405E66F15BLL;
                  goto LABEL_93;
                }
                break;
              case 8:
                v66 = (unint64_t *)*v10;
                do
                {
                  v67 = __ldaxr(v66);
                  v68 = v67 - 1;
                }
                while (__stlxr(v68, v66));
                if (!v68)
                {
                  v69 = (unint64_t *)*v10;
                  if (!*v10)
                    goto LABEL_94;
                  boost::detail::shared_count::~shared_count((unsigned int **)v69 + 2);
                  v45 = v69;
                  v57 = -235920773;
                  goto LABEL_92;
                }
                break;
              case 9:
                v51 = (unint64_t *)*v10;
                do
                {
                  v52 = __ldaxr(v51);
                  v53 = v52 - 1;
                }
                while (__stlxr(v53, v51));
                if (!v53)
                {
                  v54 = (unint64_t *)*v10;
                  if (*v10)
                  {
                    v55 = (void *)v54[6];
                    if (v55)
                    {
                      v54[7] = (unint64_t)v55;
                      operator delete(v55);
                    }
                    v56 = (void *)v54[3];
                    if (v56)
                    {
                      v54[4] = (unint64_t)v56;
                      operator delete(v56);
                    }
                    std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v54 + 1));
                    v45 = v54;
                    v57 = 2071181815;
LABEL_92:
                    v46 = v57 | 0x1030C4000000000;
LABEL_93:
                    result = MEMORY[0x219A19A08](v45, v46);
                  }
LABEL_94:
                  *v10 = 0;
                }
                break;
              default:
                break;
            }
            v70 = *(_QWORD *)v101;
            *(_QWORD *)((char *)v10 + 5) = *(_QWORD *)&v101[5];
            *v10 = v70;
            *((_BYTE *)v10 + 12) = v101[12];
          }
        }
        v5 = v8 + 2;
        v4 = v8;
      }
      while (v8 + 2 != a2);
    }
  }
  return result;
}

void sub_21815A088(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, char a12)
{
  _Unwind_Resume(exception_object);
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(turi::flexible_type const&,turi::flexible_type const&)> &,turi::flexible_type*>(__int128 *a1, __int128 *a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v5;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;

  v5 = *(_QWORD *)(a4 + 24);
  if (!v5)
    goto LABEL_17;
  v9 = (*(uint64_t (**)(uint64_t, __int128 *, __int128 *))(*(_QWORD *)v5 + 48))(v5, a2, a1);
  v10 = *(_QWORD *)(a4 + 24);
  if ((v9 & 1) == 0)
  {
    if (v10)
    {
      result = (*(uint64_t (**)(uint64_t, _QWORD *, __int128 *))(*(_QWORD *)v10 + 48))(v10, a3, a2);
      if (!(_DWORD)result)
        return result;
      v20 = *a2;
      v13 = *(_QWORD *)((char *)a3 + 5);
      *(_QWORD *)a2 = *a3;
      *(_QWORD *)((char *)a2 + 5) = v13;
      *(_QWORD *)((char *)a3 + 5) = *(_QWORD *)((char *)&v20 + 5);
      *a3 = v20;
      v14 = *(_QWORD *)(a4 + 24);
      if (v14)
      {
        if (!(*(unsigned int (**)(uint64_t, __int128 *, __int128 *))(*(_QWORD *)v14 + 48))(v14, a2, a1))
          return 1;
        v21 = *a1;
        v15 = *(_QWORD *)((char *)a2 + 5);
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_QWORD *)((char *)a1 + 5) = v15;
        *(_QWORD *)((char *)a2 + 5) = *(_QWORD *)((char *)&v21 + 5);
        *(_QWORD *)a2 = v21;
        return 2;
      }
    }
LABEL_17:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  if (!v10)
    goto LABEL_17;
  if (!(*(unsigned int (**)(uint64_t, _QWORD *, __int128 *))(*(_QWORD *)v10 + 48))(v10, a3, a2))
  {
    v22 = *a1;
    v16 = *(_QWORD *)((char *)a2 + 5);
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)((char *)a1 + 5) = v16;
    *(_QWORD *)((char *)a2 + 5) = *(_QWORD *)((char *)&v22 + 5);
    *(_QWORD *)a2 = v22;
    v17 = *(_QWORD *)(a4 + 24);
    if (v17)
    {
      if (!(*(unsigned int (**)(uint64_t, _QWORD *, __int128 *))(*(_QWORD *)v17 + 48))(v17, a3, a2))
        return 1;
      v23 = *a2;
      v18 = *(_QWORD *)((char *)a3 + 5);
      *(_QWORD *)a2 = *a3;
      *(_QWORD *)((char *)a2 + 5) = v18;
      *(_QWORD *)((char *)a3 + 5) = *(_QWORD *)((char *)&v23 + 5);
      *a3 = v23;
      return 2;
    }
    goto LABEL_17;
  }
  v19 = *a1;
  v11 = *(_QWORD *)((char *)a3 + 5);
  *(_QWORD *)a1 = *a3;
  *(_QWORD *)((char *)a1 + 5) = v11;
  *(_QWORD *)((char *)a3 + 5) = *(_QWORD *)((char *)&v19 + 5);
  *a3 = v19;
  return 1;
}

unint64_t std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,turi::flexible_type *,std::function<BOOL ()(turi::flexible_type const&,turi::flexible_type const&)> &>(unint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t *v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  void *v32;
  void *v33;
  unsigned int v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t *v38;
  void *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t *v46;
  uint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  _QWORD *v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t v60;
  _QWORD *v61;
  void *v62;
  void *v63;
  unsigned int v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t v67;
  _QWORD *v68;
  void *v69;
  unint64_t *v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t *v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t *v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t *v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  void *v93;
  void *v94;
  unsigned int v95;
  unint64_t *v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  void *v100;
  unint64_t *v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t *v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  _BYTE v108[13];
  __int128 v109;
  uint64_t v110;

  v110 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v108[5] = *(_QWORD *)(a1 + 5);
  *(_QWORD *)v108 = *(_QWORD *)a1;
  v108[12] = *(_BYTE *)(a1 + 12);
  *(_BYTE *)(a1 + 12) = 0;
  v4 = *(_QWORD *)(a3 + 24);
  if (!v4)
    goto LABEL_112;
  v6 = a2;
  if (((*(uint64_t (**)(uint64_t, _BYTE *, uint64_t *))(*(_QWORD *)v4 + 48))(v4, v108, a2 - 2) & 1) != 0)
  {
    v7 = a1;
    while (1)
    {
      v8 = *(_QWORD *)(a3 + 24);
      if (!v8)
        break;
      v7 += 16;
      if (((*(uint64_t (**)(uint64_t, _BYTE *, unint64_t))(*(_QWORD *)v8 + 48))(v8, v108, v7) & 1) != 0)
        goto LABEL_11;
    }
LABEL_112:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  v9 = a1 + 16;
  do
  {
    v7 = v9;
    if (v9 >= (unint64_t)v6)
      break;
    v10 = *(_QWORD *)(a3 + 24);
    if (!v10)
      goto LABEL_112;
    v11 = (*(uint64_t (**)(uint64_t, _BYTE *, unint64_t))(*(_QWORD *)v10 + 48))(v10, v108, v9);
    v9 = v7 + 16;
  }
  while (!v11);
LABEL_11:
  if (v7 < (unint64_t)v6)
  {
    do
    {
      v12 = *(_QWORD *)(a3 + 24);
      if (!v12)
        goto LABEL_112;
      v6 -= 2;
    }
    while (((*(uint64_t (**)(uint64_t, _BYTE *, uint64_t *))(*(_QWORD *)v12 + 48))(v12, v108, v6) & 1) != 0);
  }
LABEL_20:
  if (v7 < (unint64_t)v6)
  {
    v109 = *(_OWORD *)v7;
    v13 = *v6;
    *(_QWORD *)(v7 + 5) = *(uint64_t *)((char *)v6 + 5);
    *(_QWORD *)v7 = v13;
    v14 = v109;
    *(uint64_t *)((char *)v6 + 5) = *(_QWORD *)((char *)&v109 + 5);
    *v6 = v14;
    do
    {
      v15 = *(_QWORD *)(a3 + 24);
      if (!v15)
        goto LABEL_112;
      v7 += 16;
    }
    while (!(*(unsigned int (**)(uint64_t, _BYTE *, unint64_t))(*(_QWORD *)v15 + 48))(v15, v108, v7));
    while (1)
    {
      v16 = *(_QWORD *)(a3 + 24);
      if (!v16)
        goto LABEL_112;
      v6 -= 2;
      if (((*(uint64_t (**)(uint64_t, _BYTE *, uint64_t *))(*(_QWORD *)v16 + 48))(v16, v108, v6) & 1) == 0)
        goto LABEL_20;
    }
  }
  v17 = (_BYTE *)(v7 - 16);
  if (v7 - 16 != a1)
  {
    switch(*(_BYTE *)(a1 + 12))
    {
      case 2:
        v18 = *(unint64_t **)a1;
        do
        {
          v19 = __ldaxr(v18);
          v20 = v19 - 1;
        }
        while (__stlxr(v20, v18));
        if (!v20)
        {
          v21 = *(unint64_t **)a1;
          if (!*(_QWORD *)a1)
            goto LABEL_64;
          if (*((char *)v21 + 31) < 0)
            operator delete((void *)v21[1]);
          v22 = v21;
          v23 = 0x1012C404EF22A49;
          goto LABEL_63;
        }
        break;
      case 3:
        v35 = *(unint64_t **)a1;
        do
        {
          v36 = __ldaxr(v35);
          v37 = v36 - 1;
        }
        while (__stlxr(v37, v35));
        if (!v37)
        {
          v38 = *(unint64_t **)a1;
          if (!*(_QWORD *)a1)
            goto LABEL_64;
          v39 = (void *)v38[1];
          if (v39)
          {
            v38[2] = (unint64_t)v39;
            operator delete(v39);
          }
          v22 = v38;
          v23 = 0x1080C409938AC02;
          goto LABEL_63;
        }
        break;
      case 4:
        v24 = *(unint64_t **)a1;
        do
        {
          v25 = __ldaxr(v24);
          v26 = v25 - 1;
        }
        while (__stlxr(v26, v24));
        if (!v26)
        {
          v27 = *(unint64_t **)a1;
          if (!*(_QWORD *)a1)
            goto LABEL_64;
          *(_QWORD *)&v109 = v27 + 1;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v109);
          goto LABEL_56;
        }
        break;
      case 5:
        v40 = *(unint64_t **)a1;
        do
        {
          v41 = __ldaxr(v40);
          v42 = v41 - 1;
        }
        while (__stlxr(v42, v40));
        if (!v42)
        {
          v27 = *(unint64_t **)a1;
          if (!*(_QWORD *)a1)
            goto LABEL_64;
          *(_QWORD *)&v109 = v27 + 1;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v109);
LABEL_56:
          v22 = v27;
          v23 = 0x1020C405E66F15BLL;
          goto LABEL_63;
        }
        break;
      case 8:
        v43 = *(unint64_t **)a1;
        do
        {
          v44 = __ldaxr(v43);
          v45 = v44 - 1;
        }
        while (__stlxr(v45, v43));
        if (!v45)
        {
          v46 = *(unint64_t **)a1;
          if (!*(_QWORD *)a1)
            goto LABEL_64;
          boost::detail::shared_count::~shared_count((unsigned int **)v46 + 2);
          v22 = v46;
          v34 = -235920773;
          goto LABEL_62;
        }
        break;
      case 9:
        v28 = *(unint64_t **)a1;
        do
        {
          v29 = __ldaxr(v28);
          v30 = v29 - 1;
        }
        while (__stlxr(v30, v28));
        if (!v30)
        {
          v31 = *(unint64_t **)a1;
          if (*(_QWORD *)a1)
          {
            v32 = (void *)v31[6];
            if (v32)
            {
              v31[7] = (unint64_t)v32;
              operator delete(v32);
            }
            v33 = (void *)v31[3];
            if (v33)
            {
              v31[4] = (unint64_t)v33;
              operator delete(v33);
            }
            std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v31 + 1));
            v22 = v31;
            v34 = 2071181815;
LABEL_62:
            v23 = v34 | 0x1030C4000000000;
LABEL_63:
            MEMORY[0x219A19A08](v22, v23);
          }
LABEL_64:
          *(_QWORD *)a1 = 0;
        }
        break;
      default:
        break;
    }
    v47 = *(_QWORD *)v17;
    *(_QWORD *)(a1 + 5) = *(_QWORD *)(v7 - 11);
    *(_QWORD *)a1 = v47;
    *(_BYTE *)(a1 + 12) = *(_BYTE *)(v7 - 4);
    *(_BYTE *)(v7 - 4) = 0;
  }
  if (v108 == v17)
  {
    switch(v108[12])
    {
      case 2:
        v79 = *(unint64_t **)v108;
        do
        {
          v80 = __ldaxr(v79);
          v81 = v80 - 1;
        }
        while (__stlxr(v81, v79));
        if (!v81)
        {
          v82 = *(_QWORD *)v108;
          if (*(_QWORD *)v108)
          {
            if (*(char *)(*(_QWORD *)v108 + 31) < 0)
              operator delete(*(void **)(*(_QWORD *)v108 + 8));
            v83 = v82;
            v84 = 0x1012C404EF22A49;
            goto LABEL_154;
          }
        }
        break;
      case 3:
        v96 = *(unint64_t **)v108;
        do
        {
          v97 = __ldaxr(v96);
          v98 = v97 - 1;
        }
        while (__stlxr(v98, v96));
        if (!v98)
        {
          v99 = *(_QWORD *)v108;
          if (*(_QWORD *)v108)
          {
            v100 = *(void **)(*(_QWORD *)v108 + 8);
            if (v100)
            {
              *(_QWORD *)(*(_QWORD *)v108 + 16) = v100;
              operator delete(v100);
            }
            v83 = v99;
            v84 = 0x1080C409938AC02;
            goto LABEL_154;
          }
        }
        break;
      case 4:
        v85 = *(unint64_t **)v108;
        do
        {
          v86 = __ldaxr(v85);
          v87 = v86 - 1;
        }
        while (__stlxr(v87, v85));
        if (!v87)
        {
          v88 = *(_QWORD *)v108;
          if (*(_QWORD *)v108)
          {
            *(_QWORD *)&v109 = *(_QWORD *)v108 + 8;
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v109);
            goto LABEL_147;
          }
        }
        break;
      case 5:
        v101 = *(unint64_t **)v108;
        do
        {
          v102 = __ldaxr(v101);
          v103 = v102 - 1;
        }
        while (__stlxr(v103, v101));
        if (!v103)
        {
          v88 = *(_QWORD *)v108;
          if (*(_QWORD *)v108)
          {
            *(_QWORD *)&v109 = *(_QWORD *)v108 + 8;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v109);
LABEL_147:
            v83 = v88;
            v84 = 0x1020C405E66F15BLL;
            goto LABEL_154;
          }
        }
        break;
      case 8:
        v104 = *(unint64_t **)v108;
        do
        {
          v105 = __ldaxr(v104);
          v106 = v105 - 1;
        }
        while (__stlxr(v106, v104));
        if (!v106)
        {
          v107 = *(_QWORD *)v108;
          if (*(_QWORD *)v108)
          {
            boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)v108 + 16));
            v83 = v107;
            v95 = -235920773;
            goto LABEL_153;
          }
        }
        break;
      case 9:
        v89 = *(unint64_t **)v108;
        do
        {
          v90 = __ldaxr(v89);
          v91 = v90 - 1;
        }
        while (__stlxr(v91, v89));
        if (!v91)
        {
          v92 = *(_QWORD *)v108;
          if (*(_QWORD *)v108)
          {
            v93 = *(void **)(*(_QWORD *)v108 + 48);
            if (v93)
            {
              *(_QWORD *)(*(_QWORD *)v108 + 56) = v93;
              operator delete(v93);
            }
            v94 = *(void **)(v92 + 24);
            if (v94)
            {
              *(_QWORD *)(v92 + 32) = v94;
              operator delete(v94);
            }
            std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v92 + 8);
            v83 = v92;
            v95 = 2071181815;
LABEL_153:
            v84 = v95 | 0x1030C4000000000;
LABEL_154:
            MEMORY[0x219A19A08](v83, v84);
          }
        }
        break;
      default:
        return v7;
    }
  }
  else
  {
    switch(*(_BYTE *)(v7 - 4))
    {
      case 2:
        v48 = *(unint64_t **)v17;
        do
        {
          v49 = __ldaxr(v48);
          v50 = v49 - 1;
        }
        while (__stlxr(v50, v48));
        if (!v50)
        {
          v51 = *(_QWORD *)v17;
          if (!*(_QWORD *)v17)
            goto LABEL_109;
          if (*(char *)(v51 + 31) < 0)
            operator delete(*(void **)(v51 + 8));
          v52 = (_QWORD *)v51;
          v53 = 0x1012C404EF22A49;
          goto LABEL_108;
        }
        break;
      case 3:
        v65 = *(unint64_t **)v17;
        do
        {
          v66 = __ldaxr(v65);
          v67 = v66 - 1;
        }
        while (__stlxr(v67, v65));
        if (!v67)
        {
          v68 = *(_QWORD **)v17;
          if (!*(_QWORD *)v17)
            goto LABEL_109;
          v69 = (void *)v68[1];
          if (v69)
          {
            v68[2] = v69;
            operator delete(v69);
          }
          v52 = v68;
          v53 = 0x1080C409938AC02;
          goto LABEL_108;
        }
        break;
      case 4:
        v54 = *(unint64_t **)v17;
        do
        {
          v55 = __ldaxr(v54);
          v56 = v55 - 1;
        }
        while (__stlxr(v56, v54));
        if (!v56)
        {
          v57 = *(_QWORD **)v17;
          if (!*(_QWORD *)v17)
            goto LABEL_109;
          *(_QWORD *)&v109 = v57 + 1;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v109);
          goto LABEL_101;
        }
        break;
      case 5:
        v70 = *(unint64_t **)v17;
        do
        {
          v71 = __ldaxr(v70);
          v72 = v71 - 1;
        }
        while (__stlxr(v72, v70));
        if (!v72)
        {
          v57 = *(_QWORD **)v17;
          if (!*(_QWORD *)v17)
            goto LABEL_109;
          *(_QWORD *)&v109 = v57 + 1;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v109);
LABEL_101:
          v52 = v57;
          v53 = 0x1020C405E66F15BLL;
          goto LABEL_108;
        }
        break;
      case 8:
        v73 = *(unint64_t **)v17;
        do
        {
          v74 = __ldaxr(v73);
          v75 = v74 - 1;
        }
        while (__stlxr(v75, v73));
        if (!v75)
        {
          v76 = *(_QWORD *)v17;
          if (!*(_QWORD *)v17)
            goto LABEL_109;
          boost::detail::shared_count::~shared_count((unsigned int **)(v76 + 16));
          v52 = (_QWORD *)v76;
          v64 = -235920773;
          goto LABEL_107;
        }
        break;
      case 9:
        v58 = *(unint64_t **)v17;
        do
        {
          v59 = __ldaxr(v58);
          v60 = v59 - 1;
        }
        while (__stlxr(v60, v58));
        if (!v60)
        {
          v61 = *(_QWORD **)v17;
          if (*(_QWORD *)v17)
          {
            v62 = (void *)v61[6];
            if (v62)
            {
              v61[7] = v62;
              operator delete(v62);
            }
            v63 = (void *)v61[3];
            if (v63)
            {
              v61[4] = v63;
              operator delete(v63);
            }
            std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v61 + 1));
            v52 = v61;
            v64 = 2071181815;
LABEL_107:
            v53 = v64 | 0x1030C4000000000;
LABEL_108:
            MEMORY[0x219A19A08](v52, v53);
          }
LABEL_109:
          *(_QWORD *)v17 = 0;
        }
        break;
      default:
        break;
    }
    v77 = *(_QWORD *)v108;
    *(_QWORD *)(v7 - 11) = *(_QWORD *)&v108[5];
    *(_QWORD *)v17 = v77;
    *(_BYTE *)(v7 - 4) = v108[12];
  }
  return v7;
}

void sub_21815AB90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, char a11, uint64_t a12)
{
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  unint64_t v23;
  unint64_t v24;
  void *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;

  switch(a11)
  {
    case 2:
      do
      {
        v13 = __ldaxr((unint64_t *)a9);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, (unint64_t *)a9));
      if (v14 || !a9)
        goto LABEL_33;
      if (*(char *)(a9 + 31) < 0)
        operator delete(*(void **)(a9 + 8));
      v15 = (_QWORD *)a9;
      v16 = 0x1012C404EF22A49;
      goto LABEL_32;
    case 3:
      do
      {
        v23 = __ldaxr((unint64_t *)a9);
        v24 = v23 - 1;
      }
      while (__stlxr(v24, (unint64_t *)a9));
      if (v24 || !a9)
        goto LABEL_33;
      v25 = *(void **)(a9 + 8);
      if (v25)
      {
        *(_QWORD *)(a9 + 16) = v25;
        operator delete(v25);
      }
      v15 = (_QWORD *)a9;
      v16 = 0x1080C409938AC02;
      goto LABEL_32;
    case 4:
      do
      {
        v17 = __ldaxr((unint64_t *)a9);
        v18 = v17 - 1;
      }
      while (__stlxr(v18, (unint64_t *)a9));
      if (v18)
        goto LABEL_33;
      v19 = a9;
      if (!a9)
        goto LABEL_33;
      a12 = a9 + 8;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
      goto LABEL_26;
    case 5:
      do
      {
        v26 = __ldaxr((unint64_t *)a9);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, (unint64_t *)a9));
      if (v27)
        goto LABEL_33;
      v19 = a9;
      if (!a9)
        goto LABEL_33;
      a12 = a9 + 8;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
LABEL_26:
      v15 = (_QWORD *)v19;
      v16 = 0x1020C405E66F15BLL;
      goto LABEL_32;
    case 8:
      do
      {
        v28 = __ldaxr((unint64_t *)a9);
        v29 = v28 - 1;
      }
      while (__stlxr(v29, (unint64_t *)a9));
      if (v29 || !a9)
        goto LABEL_33;
      boost::detail::shared_count::~shared_count((unsigned int **)(a9 + 16));
      v15 = (_QWORD *)a9;
      v22 = -235920773;
      goto LABEL_31;
    case 9:
      do
      {
        v20 = __ldaxr((unint64_t *)a9);
        v21 = v20 - 1;
      }
      while (__stlxr(v21, (unint64_t *)a9));
      if (v21 || !a9)
        goto LABEL_33;
      v15 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)a9);
      v22 = 2071181815;
LABEL_31:
      v16 = v22 | 0x1030C4000000000;
LABEL_32:
      MEMORY[0x219A19A08](v15, v16);
LABEL_33:
      _Unwind_Resume(exception_object);
      return;
    default:
      goto LABEL_33;
  }
}

_BYTE *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,turi::flexible_type *,std::function<BOOL ()(turi::flexible_type const&,turi::flexible_type const&)> &>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t *v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t *v32;
  void *v33;
  void *v34;
  unsigned int v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t *v39;
  void *v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t *v47;
  uint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  _QWORD *v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t v61;
  _QWORD *v62;
  void *v63;
  void *v64;
  unsigned int v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t v68;
  _QWORD *v69;
  void *v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t *v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t *v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  void *v94;
  void *v95;
  unsigned int v96;
  unint64_t *v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  void *v101;
  unint64_t *v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t *v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  _BYTE v109[13];
  __int128 v110;
  uint64_t v111;

  v6 = 0;
  v111 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v109[5] = *(_QWORD *)(a1 + 5);
  *(_QWORD *)v109 = *(_QWORD *)a1;
  v109[12] = *(_BYTE *)(a1 + 12);
  *(_BYTE *)(a1 + 12) = 0;
  do
  {
    v7 = *(_QWORD *)(a3 + 24);
    if (!v7)
      goto LABEL_153;
    v8 = (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v7 + 48))(v7, a1 + v6 + 16, v109);
    v6 += 16;
  }
  while ((v8 & 1) != 0);
  v9 = a1 + v6;
  if (v6 != 16)
  {
    while (1)
    {
      v10 = *(_QWORD *)(a3 + 24);
      if (!v10)
        break;
      a2 -= 2;
      if ((*(unsigned int (**)(uint64_t, uint64_t *, _BYTE *))(*(_QWORD *)v10 + 48))(v10, a2, v109))
        goto LABEL_11;
    }
LABEL_153:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  do
  {
    if (v9 >= (unint64_t)a2)
      break;
    v11 = *(_QWORD *)(a3 + 24);
    if (!v11)
      goto LABEL_153;
    a2 -= 2;
  }
  while (((*(uint64_t (**)(uint64_t, uint64_t *, _BYTE *))(*(_QWORD *)v11 + 48))(v11, a2, v109) & 1) == 0);
LABEL_11:
  v12 = a1 + v6;
  if (v9 < (unint64_t)a2)
  {
    v13 = a2;
    do
    {
      v110 = *(_OWORD *)v12;
      v14 = *v13;
      *(_QWORD *)(v12 + 5) = *(uint64_t *)((char *)v13 + 5);
      *(_QWORD *)v12 = v14;
      v15 = v110;
      *(uint64_t *)((char *)v13 + 5) = *(_QWORD *)((char *)&v110 + 5);
      *v13 = v15;
      do
      {
        v16 = *(_QWORD *)(a3 + 24);
        if (!v16)
LABEL_110:
          std::__throw_bad_function_call[abi:ne180100]();
        v12 += 16;
      }
      while (((*(uint64_t (**)(uint64_t, unint64_t, _BYTE *))(*(_QWORD *)v16 + 48))(v16, v12, v109) & 1) != 0);
      do
      {
        v17 = *(_QWORD *)(a3 + 24);
        if (!v17)
          goto LABEL_110;
        v13 -= 2;
      }
      while (!(*(unsigned int (**)(uint64_t, uint64_t *, _BYTE *))(*(_QWORD *)v17 + 48))(v17, v13, v109));
    }
    while (v12 < (unint64_t)v13);
  }
  v18 = (_BYTE *)(v12 - 16);
  if (v12 - 16 != a1)
  {
    switch(*(_BYTE *)(a1 + 12))
    {
      case 2:
        v19 = *(unint64_t **)a1;
        do
        {
          v20 = __ldaxr(v19);
          v21 = v20 - 1;
        }
        while (__stlxr(v21, v19));
        if (!v21)
        {
          v22 = *(unint64_t **)a1;
          if (!*(_QWORD *)a1)
            goto LABEL_62;
          if (*((char *)v22 + 31) < 0)
            operator delete((void *)v22[1]);
          v23 = v22;
          v24 = 0x1012C404EF22A49;
          goto LABEL_61;
        }
        break;
      case 3:
        v36 = *(unint64_t **)a1;
        do
        {
          v37 = __ldaxr(v36);
          v38 = v37 - 1;
        }
        while (__stlxr(v38, v36));
        if (!v38)
        {
          v39 = *(unint64_t **)a1;
          if (!*(_QWORD *)a1)
            goto LABEL_62;
          v40 = (void *)v39[1];
          if (v40)
          {
            v39[2] = (unint64_t)v40;
            operator delete(v40);
          }
          v23 = v39;
          v24 = 0x1080C409938AC02;
          goto LABEL_61;
        }
        break;
      case 4:
        v25 = *(unint64_t **)a1;
        do
        {
          v26 = __ldaxr(v25);
          v27 = v26 - 1;
        }
        while (__stlxr(v27, v25));
        if (!v27)
        {
          v28 = *(unint64_t **)a1;
          if (!*(_QWORD *)a1)
            goto LABEL_62;
          *(_QWORD *)&v110 = v28 + 1;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v110);
          goto LABEL_54;
        }
        break;
      case 5:
        v41 = *(unint64_t **)a1;
        do
        {
          v42 = __ldaxr(v41);
          v43 = v42 - 1;
        }
        while (__stlxr(v43, v41));
        if (!v43)
        {
          v28 = *(unint64_t **)a1;
          if (!*(_QWORD *)a1)
            goto LABEL_62;
          *(_QWORD *)&v110 = v28 + 1;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v110);
LABEL_54:
          v23 = v28;
          v24 = 0x1020C405E66F15BLL;
          goto LABEL_61;
        }
        break;
      case 8:
        v44 = *(unint64_t **)a1;
        do
        {
          v45 = __ldaxr(v44);
          v46 = v45 - 1;
        }
        while (__stlxr(v46, v44));
        if (!v46)
        {
          v47 = *(unint64_t **)a1;
          if (!*(_QWORD *)a1)
            goto LABEL_62;
          boost::detail::shared_count::~shared_count((unsigned int **)v47 + 2);
          v23 = v47;
          v35 = -235920773;
          goto LABEL_60;
        }
        break;
      case 9:
        v29 = *(unint64_t **)a1;
        do
        {
          v30 = __ldaxr(v29);
          v31 = v30 - 1;
        }
        while (__stlxr(v31, v29));
        if (!v31)
        {
          v32 = *(unint64_t **)a1;
          if (*(_QWORD *)a1)
          {
            v33 = (void *)v32[6];
            if (v33)
            {
              v32[7] = (unint64_t)v33;
              operator delete(v33);
            }
            v34 = (void *)v32[3];
            if (v34)
            {
              v32[4] = (unint64_t)v34;
              operator delete(v34);
            }
            std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v32 + 1));
            v23 = v32;
            v35 = 2071181815;
LABEL_60:
            v24 = v35 | 0x1030C4000000000;
LABEL_61:
            MEMORY[0x219A19A08](v23, v24);
          }
LABEL_62:
          *(_QWORD *)a1 = 0;
        }
        break;
      default:
        break;
    }
    v48 = *(_QWORD *)v18;
    *(_QWORD *)(a1 + 5) = *(_QWORD *)(v12 - 11);
    *(_QWORD *)a1 = v48;
    *(_BYTE *)(a1 + 12) = *(_BYTE *)(v12 - 4);
    *(_BYTE *)(v12 - 4) = 0;
  }
  if (v109 == v18)
  {
    switch(v109[12])
    {
      case 2:
        v80 = *(unint64_t **)v109;
        do
        {
          v81 = __ldaxr(v80);
          v82 = v81 - 1;
        }
        while (__stlxr(v82, v80));
        if (!v82)
        {
          v83 = *(_QWORD *)v109;
          if (*(_QWORD *)v109)
          {
            if (*(char *)(*(_QWORD *)v109 + 31) < 0)
              operator delete(*(void **)(*(_QWORD *)v109 + 8));
            v84 = v83;
            v85 = 0x1012C404EF22A49;
            goto LABEL_152;
          }
        }
        break;
      case 3:
        v97 = *(unint64_t **)v109;
        do
        {
          v98 = __ldaxr(v97);
          v99 = v98 - 1;
        }
        while (__stlxr(v99, v97));
        if (!v99)
        {
          v100 = *(_QWORD *)v109;
          if (*(_QWORD *)v109)
          {
            v101 = *(void **)(*(_QWORD *)v109 + 8);
            if (v101)
            {
              *(_QWORD *)(*(_QWORD *)v109 + 16) = v101;
              operator delete(v101);
            }
            v84 = v100;
            v85 = 0x1080C409938AC02;
            goto LABEL_152;
          }
        }
        break;
      case 4:
        v86 = *(unint64_t **)v109;
        do
        {
          v87 = __ldaxr(v86);
          v88 = v87 - 1;
        }
        while (__stlxr(v88, v86));
        if (!v88)
        {
          v89 = *(_QWORD *)v109;
          if (*(_QWORD *)v109)
          {
            *(_QWORD *)&v110 = *(_QWORD *)v109 + 8;
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v110);
            goto LABEL_145;
          }
        }
        break;
      case 5:
        v102 = *(unint64_t **)v109;
        do
        {
          v103 = __ldaxr(v102);
          v104 = v103 - 1;
        }
        while (__stlxr(v104, v102));
        if (!v104)
        {
          v89 = *(_QWORD *)v109;
          if (*(_QWORD *)v109)
          {
            *(_QWORD *)&v110 = *(_QWORD *)v109 + 8;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v110);
LABEL_145:
            v84 = v89;
            v85 = 0x1020C405E66F15BLL;
            goto LABEL_152;
          }
        }
        break;
      case 8:
        v105 = *(unint64_t **)v109;
        do
        {
          v106 = __ldaxr(v105);
          v107 = v106 - 1;
        }
        while (__stlxr(v107, v105));
        if (!v107)
        {
          v108 = *(_QWORD *)v109;
          if (*(_QWORD *)v109)
          {
            boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)v109 + 16));
            v84 = v108;
            v96 = -235920773;
            goto LABEL_151;
          }
        }
        break;
      case 9:
        v90 = *(unint64_t **)v109;
        do
        {
          v91 = __ldaxr(v90);
          v92 = v91 - 1;
        }
        while (__stlxr(v92, v90));
        if (!v92)
        {
          v93 = *(_QWORD *)v109;
          if (*(_QWORD *)v109)
          {
            v94 = *(void **)(*(_QWORD *)v109 + 48);
            if (v94)
            {
              *(_QWORD *)(*(_QWORD *)v109 + 56) = v94;
              operator delete(v94);
            }
            v95 = *(void **)(v93 + 24);
            if (v95)
            {
              *(_QWORD *)(v93 + 32) = v95;
              operator delete(v95);
            }
            std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v93 + 8);
            v84 = v93;
            v96 = 2071181815;
LABEL_151:
            v85 = v96 | 0x1030C4000000000;
LABEL_152:
            MEMORY[0x219A19A08](v84, v85);
          }
        }
        break;
      default:
        return v18;
    }
  }
  else
  {
    switch(*(_BYTE *)(v12 - 4))
    {
      case 2:
        v49 = *(unint64_t **)v18;
        do
        {
          v50 = __ldaxr(v49);
          v51 = v50 - 1;
        }
        while (__stlxr(v51, v49));
        if (!v51)
        {
          v52 = *(_QWORD *)v18;
          if (!*(_QWORD *)v18)
            goto LABEL_107;
          if (*(char *)(v52 + 31) < 0)
            operator delete(*(void **)(v52 + 8));
          v53 = (_QWORD *)v52;
          v54 = 0x1012C404EF22A49;
          goto LABEL_106;
        }
        break;
      case 3:
        v66 = *(unint64_t **)v18;
        do
        {
          v67 = __ldaxr(v66);
          v68 = v67 - 1;
        }
        while (__stlxr(v68, v66));
        if (!v68)
        {
          v69 = *(_QWORD **)v18;
          if (!*(_QWORD *)v18)
            goto LABEL_107;
          v70 = (void *)v69[1];
          if (v70)
          {
            v69[2] = v70;
            operator delete(v70);
          }
          v53 = v69;
          v54 = 0x1080C409938AC02;
          goto LABEL_106;
        }
        break;
      case 4:
        v55 = *(unint64_t **)v18;
        do
        {
          v56 = __ldaxr(v55);
          v57 = v56 - 1;
        }
        while (__stlxr(v57, v55));
        if (!v57)
        {
          v58 = *(_QWORD **)v18;
          if (!*(_QWORD *)v18)
            goto LABEL_107;
          *(_QWORD *)&v110 = v58 + 1;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v110);
          goto LABEL_99;
        }
        break;
      case 5:
        v71 = *(unint64_t **)v18;
        do
        {
          v72 = __ldaxr(v71);
          v73 = v72 - 1;
        }
        while (__stlxr(v73, v71));
        if (!v73)
        {
          v58 = *(_QWORD **)v18;
          if (!*(_QWORD *)v18)
            goto LABEL_107;
          *(_QWORD *)&v110 = v58 + 1;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v110);
LABEL_99:
          v53 = v58;
          v54 = 0x1020C405E66F15BLL;
          goto LABEL_106;
        }
        break;
      case 8:
        v74 = *(unint64_t **)v18;
        do
        {
          v75 = __ldaxr(v74);
          v76 = v75 - 1;
        }
        while (__stlxr(v76, v74));
        if (!v76)
        {
          v77 = *(_QWORD *)v18;
          if (!*(_QWORD *)v18)
            goto LABEL_107;
          boost::detail::shared_count::~shared_count((unsigned int **)(v77 + 16));
          v53 = (_QWORD *)v77;
          v65 = -235920773;
          goto LABEL_105;
        }
        break;
      case 9:
        v59 = *(unint64_t **)v18;
        do
        {
          v60 = __ldaxr(v59);
          v61 = v60 - 1;
        }
        while (__stlxr(v61, v59));
        if (!v61)
        {
          v62 = *(_QWORD **)v18;
          if (*(_QWORD *)v18)
          {
            v63 = (void *)v62[6];
            if (v63)
            {
              v62[7] = v63;
              operator delete(v63);
            }
            v64 = (void *)v62[3];
            if (v64)
            {
              v62[4] = v64;
              operator delete(v64);
            }
            std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v62 + 1));
            v53 = v62;
            v65 = 2071181815;
LABEL_105:
            v54 = v65 | 0x1030C4000000000;
LABEL_106:
            MEMORY[0x219A19A08](v53, v54);
          }
LABEL_107:
          *(_QWORD *)v18 = 0;
        }
        break;
      default:
        break;
    }
    v78 = *(_QWORD *)v109;
    *(_QWORD *)(v12 - 11) = *(_QWORD *)&v109[5];
    *(_QWORD *)v18 = v78;
    *(_BYTE *)(v12 - 4) = v109[12];
  }
  return v18;
}

void sub_21815B4C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, char a11, uint64_t a12)
{
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  unint64_t v23;
  unint64_t v24;
  void *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;

  switch(a11)
  {
    case 2:
      do
      {
        v13 = __ldaxr((unint64_t *)a9);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, (unint64_t *)a9));
      if (v14 || !a9)
        goto LABEL_33;
      if (*(char *)(a9 + 31) < 0)
        operator delete(*(void **)(a9 + 8));
      v15 = (_QWORD *)a9;
      v16 = 0x1012C404EF22A49;
      goto LABEL_32;
    case 3:
      do
      {
        v23 = __ldaxr((unint64_t *)a9);
        v24 = v23 - 1;
      }
      while (__stlxr(v24, (unint64_t *)a9));
      if (v24 || !a9)
        goto LABEL_33;
      v25 = *(void **)(a9 + 8);
      if (v25)
      {
        *(_QWORD *)(a9 + 16) = v25;
        operator delete(v25);
      }
      v15 = (_QWORD *)a9;
      v16 = 0x1080C409938AC02;
      goto LABEL_32;
    case 4:
      do
      {
        v17 = __ldaxr((unint64_t *)a9);
        v18 = v17 - 1;
      }
      while (__stlxr(v18, (unint64_t *)a9));
      if (v18)
        goto LABEL_33;
      v19 = a9;
      if (!a9)
        goto LABEL_33;
      a12 = a9 + 8;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
      goto LABEL_26;
    case 5:
      do
      {
        v26 = __ldaxr((unint64_t *)a9);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, (unint64_t *)a9));
      if (v27)
        goto LABEL_33;
      v19 = a9;
      if (!a9)
        goto LABEL_33;
      a12 = a9 + 8;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
LABEL_26:
      v15 = (_QWORD *)v19;
      v16 = 0x1020C405E66F15BLL;
      goto LABEL_32;
    case 8:
      do
      {
        v28 = __ldaxr((unint64_t *)a9);
        v29 = v28 - 1;
      }
      while (__stlxr(v29, (unint64_t *)a9));
      if (v29 || !a9)
        goto LABEL_33;
      boost::detail::shared_count::~shared_count((unsigned int **)(a9 + 16));
      v15 = (_QWORD *)a9;
      v22 = -235920773;
      goto LABEL_31;
    case 9:
      do
      {
        v20 = __ldaxr((unint64_t *)a9);
        v21 = v20 - 1;
      }
      while (__stlxr(v21, (unint64_t *)a9));
      if (v21 || !a9)
        goto LABEL_33;
      v15 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)a9);
      v22 = 2071181815;
LABEL_31:
      v16 = v22 | 0x1030C4000000000;
LABEL_32:
      MEMORY[0x219A19A08](v15, v16);
LABEL_33:
      _Unwind_Resume(exception_object);
      return;
    default:
      goto LABEL_33;
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(turi::flexible_type const&,turi::flexible_type const&)> &,turi::flexible_type*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t *v30;
  void *v31;
  void *v32;
  unsigned int v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t *v37;
  void *v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t *v45;
  uint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t *v50;
  unint64_t *v51;
  uint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t *v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t *v60;
  void *v61;
  void *v62;
  unsigned int v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t *v67;
  void *v68;
  unint64_t *v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t *v75;
  uint64_t v76;
  unint64_t *v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t *v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t *v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  void *v91;
  void *v92;
  unsigned int v93;
  unint64_t *v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  void *v98;
  unint64_t *v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t *v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  void **v106;
  __int128 v107;
  uint64_t v108;

  v108 = *MEMORY[0x24BDAC8D0];
  v6 = (a2 - a1) >> 4;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *(_QWORD *)(a3 + 24);
      if (!v8)
        std::__throw_bad_function_call[abi:ne180100]();
      v9 = (_QWORD *)(a2 - 16);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8 + 48))(v8, a2 - 16, a1))
      {
        v107 = *(_OWORD *)a1;
        v10 = *(_QWORD *)((char *)v9 + 5);
        *(_QWORD *)a1 = *v9;
        *(_QWORD *)(a1 + 5) = v10;
        *(_QWORD *)((char *)v9 + 5) = *(_QWORD *)((char *)&v107 + 5);
        *v9 = v107;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(turi::flexible_type const&,turi::flexible_type const&)> &,turi::flexible_type*>((__int128 *)a1, (__int128 *)(a1 + 16), (_QWORD *)(a2 - 16), a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(turi::flexible_type const&,turi::flexible_type const&)> &,turi::flexible_type*>(a1, a1 + 16, (_QWORD *)(a1 + 32), (_QWORD *)(a2 - 16), a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(turi::flexible_type const&,turi::flexible_type const&)> &,turi::flexible_type*>(a1, a1 + 16, (_QWORD *)(a1 + 32), (_QWORD *)(a1 + 48), (_QWORD *)(a2 - 16), a3);
      return 1;
    default:
      v11 = a1 + 32;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(turi::flexible_type const&,turi::flexible_type const&)> &,turi::flexible_type*>((__int128 *)a1, (__int128 *)(a1 + 16), (_QWORD *)(a1 + 32), a3);
      v12 = a1 + 48;
      if (a1 + 48 == a2)
        return 1;
      v13 = 0;
      break;
  }
  while (1)
  {
    v14 = *(_QWORD *)(a3 + 24);
    if (!v14)
      std::__throw_bad_function_call[abi:ne180100]();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v14 + 48))(v14, v12, v11))
    {
      *(_QWORD *)((char *)&v107 + 5) = *(_QWORD *)(v12 + 5);
      *(_QWORD *)&v107 = *(_QWORD *)v12;
      BYTE12(v107) = *(_BYTE *)(v12 + 12);
      *(_BYTE *)(v12 + 12) = 0;
      v15 = v12;
      while (1)
      {
        v16 = v11;
        if (v11 != v15)
        {
          switch(*(_BYTE *)(v15 + 12))
          {
            case 2:
              v17 = *(unint64_t **)v15;
              do
              {
                v18 = __ldaxr(v17);
                v19 = v18 - 1;
              }
              while (__stlxr(v19, v17));
              if (!v19)
              {
                v20 = *(unint64_t **)v15;
                if (!*(_QWORD *)v15)
                  goto LABEL_55;
                if (*((char *)v20 + 31) < 0)
                  operator delete((void *)v20[1]);
                v21 = v20;
                v22 = 0x1012C404EF22A49;
                goto LABEL_54;
              }
              break;
            case 3:
              v34 = *(unint64_t **)v15;
              do
              {
                v35 = __ldaxr(v34);
                v36 = v35 - 1;
              }
              while (__stlxr(v36, v34));
              if (!v36)
              {
                v37 = *(unint64_t **)v15;
                if (!*(_QWORD *)v15)
                  goto LABEL_55;
                v38 = (void *)v37[1];
                if (v38)
                {
                  v37[2] = (unint64_t)v38;
                  operator delete(v38);
                }
                v21 = v37;
                v22 = 0x1080C409938AC02;
                goto LABEL_54;
              }
              break;
            case 4:
              v23 = *(unint64_t **)v15;
              do
              {
                v24 = __ldaxr(v23);
                v25 = v24 - 1;
              }
              while (__stlxr(v25, v23));
              if (!v25)
              {
                v26 = *(unint64_t **)v15;
                if (!*(_QWORD *)v15)
                  goto LABEL_55;
                v106 = (void **)(v26 + 1);
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v106);
                goto LABEL_47;
              }
              break;
            case 5:
              v39 = *(unint64_t **)v15;
              do
              {
                v40 = __ldaxr(v39);
                v41 = v40 - 1;
              }
              while (__stlxr(v41, v39));
              if (!v41)
              {
                v26 = *(unint64_t **)v15;
                if (!*(_QWORD *)v15)
                  goto LABEL_55;
                v106 = (void **)(v26 + 1);
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v106);
LABEL_47:
                v21 = v26;
                v22 = 0x1020C405E66F15BLL;
                goto LABEL_54;
              }
              break;
            case 8:
              v42 = *(unint64_t **)v15;
              do
              {
                v43 = __ldaxr(v42);
                v44 = v43 - 1;
              }
              while (__stlxr(v44, v42));
              if (!v44)
              {
                v45 = *(unint64_t **)v15;
                if (!*(_QWORD *)v15)
                  goto LABEL_55;
                boost::detail::shared_count::~shared_count((unsigned int **)v45 + 2);
                v21 = v45;
                v33 = -235920773;
                goto LABEL_53;
              }
              break;
            case 9:
              v27 = *(unint64_t **)v15;
              do
              {
                v28 = __ldaxr(v27);
                v29 = v28 - 1;
              }
              while (__stlxr(v29, v27));
              if (!v29)
              {
                v30 = *(unint64_t **)v15;
                if (*(_QWORD *)v15)
                {
                  v31 = (void *)v30[6];
                  if (v31)
                  {
                    v30[7] = (unint64_t)v31;
                    operator delete(v31);
                  }
                  v32 = (void *)v30[3];
                  if (v32)
                  {
                    v30[4] = (unint64_t)v32;
                    operator delete(v32);
                  }
                  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v30 + 1));
                  v21 = v30;
                  v33 = 2071181815;
LABEL_53:
                  v22 = v33 | 0x1030C4000000000;
LABEL_54:
                  MEMORY[0x219A19A08](v21, v22);
                }
LABEL_55:
                *(_QWORD *)v15 = 0;
              }
              break;
            default:
              break;
          }
          *(_QWORD *)v15 = *(_QWORD *)v16;
          *(_QWORD *)(v15 + 5) = *(_QWORD *)(v16 + 5);
          *(_BYTE *)(v15 + 12) = *(_BYTE *)(v16 + 12);
          *(_BYTE *)(v16 + 12) = 0;
        }
        if (v16 == a1)
          break;
        v46 = *(_QWORD *)(a3 + 24);
        if (!v46)
          std::__throw_bad_function_call[abi:ne180100]();
        v11 = v16 - 16;
        v15 = v16;
        if (((*(uint64_t (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)v46 + 48))(v46, &v107, v16 - 16) & 1) == 0)
          goto LABEL_62;
      }
      v16 = a1;
LABEL_62:
      if (&v107 == (__int128 *)v16)
      {
        ++v13;
        switch(BYTE12(v107))
        {
          case 2:
            v77 = (unint64_t *)v107;
            do
            {
              v78 = __ldaxr(v77);
              v79 = v78 - 1;
            }
            while (__stlxr(v79, v77));
            if (!v79)
            {
              v80 = v107;
              if ((_QWORD)v107)
              {
                if (*(char *)(v107 + 31) < 0)
                  operator delete(*(void **)(v107 + 8));
                v81 = v80;
                v82 = 0x1012C404EF22A49;
                goto LABEL_151;
              }
            }
            break;
          case 3:
            v94 = (unint64_t *)v107;
            do
            {
              v95 = __ldaxr(v94);
              v96 = v95 - 1;
            }
            while (__stlxr(v96, v94));
            if (!v96)
            {
              v97 = v107;
              if ((_QWORD)v107)
              {
                v98 = *(void **)(v107 + 8);
                if (v98)
                {
                  *(_QWORD *)(v107 + 16) = v98;
                  operator delete(v98);
                }
                v81 = v97;
                v82 = 0x1080C409938AC02;
                goto LABEL_151;
              }
            }
            break;
          case 4:
            v83 = (unint64_t *)v107;
            do
            {
              v84 = __ldaxr(v83);
              v85 = v84 - 1;
            }
            while (__stlxr(v85, v83));
            if (!v85)
            {
              v86 = v107;
              if ((_QWORD)v107)
              {
                v106 = (void **)(v107 + 8);
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v106);
                goto LABEL_144;
              }
            }
            break;
          case 5:
            v99 = (unint64_t *)v107;
            do
            {
              v100 = __ldaxr(v99);
              v101 = v100 - 1;
            }
            while (__stlxr(v101, v99));
            if (!v101)
            {
              v86 = v107;
              if ((_QWORD)v107)
              {
                v106 = (void **)(v107 + 8);
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v106);
LABEL_144:
                v81 = v86;
                v82 = 0x1020C405E66F15BLL;
                goto LABEL_151;
              }
            }
            break;
          case 8:
            v102 = (unint64_t *)v107;
            do
            {
              v103 = __ldaxr(v102);
              v104 = v103 - 1;
            }
            while (__stlxr(v104, v102));
            if (!v104)
            {
              v105 = v107;
              if ((_QWORD)v107)
              {
                boost::detail::shared_count::~shared_count((unsigned int **)(v107 + 16));
                v81 = v105;
                v93 = -235920773;
                goto LABEL_150;
              }
            }
            break;
          case 9:
            v87 = (unint64_t *)v107;
            do
            {
              v88 = __ldaxr(v87);
              v89 = v88 - 1;
            }
            while (__stlxr(v89, v87));
            if (!v89)
            {
              v90 = v107;
              if ((_QWORD)v107)
              {
                v91 = *(void **)(v107 + 48);
                if (v91)
                {
                  *(_QWORD *)(v107 + 56) = v91;
                  operator delete(v91);
                }
                v92 = *(void **)(v90 + 24);
                if (v92)
                {
                  *(_QWORD *)(v90 + 32) = v92;
                  operator delete(v92);
                }
                std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v90 + 8);
                v81 = v90;
                v93 = 2071181815;
LABEL_150:
                v82 = v93 | 0x1030C4000000000;
LABEL_151:
                MEMORY[0x219A19A08](v81, v82);
              }
            }
            break;
          default:
            break;
        }
      }
      else
      {
        switch(*(_BYTE *)(v16 + 12))
        {
          case 2:
            v47 = *(unint64_t **)v16;
            do
            {
              v48 = __ldaxr(v47);
              v49 = v48 - 1;
            }
            while (__stlxr(v49, v47));
            if (!v49)
            {
              v50 = *(unint64_t **)v16;
              if (!*(_QWORD *)v16)
                goto LABEL_105;
              if (*((char *)v50 + 31) < 0)
                operator delete((void *)v50[1]);
              v51 = v50;
              v52 = 0x1012C404EF22A49;
              goto LABEL_104;
            }
            break;
          case 3:
            v64 = *(unint64_t **)v16;
            do
            {
              v65 = __ldaxr(v64);
              v66 = v65 - 1;
            }
            while (__stlxr(v66, v64));
            if (!v66)
            {
              v67 = *(unint64_t **)v16;
              if (!*(_QWORD *)v16)
                goto LABEL_105;
              v68 = (void *)v67[1];
              if (v68)
              {
                v67[2] = (unint64_t)v68;
                operator delete(v68);
              }
              v51 = v67;
              v52 = 0x1080C409938AC02;
              goto LABEL_104;
            }
            break;
          case 4:
            v53 = *(unint64_t **)v16;
            do
            {
              v54 = __ldaxr(v53);
              v55 = v54 - 1;
            }
            while (__stlxr(v55, v53));
            if (!v55)
            {
              v56 = *(unint64_t **)v16;
              if (!*(_QWORD *)v16)
                goto LABEL_105;
              v106 = (void **)(v56 + 1);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v106);
              goto LABEL_97;
            }
            break;
          case 5:
            v69 = *(unint64_t **)v16;
            do
            {
              v70 = __ldaxr(v69);
              v71 = v70 - 1;
            }
            while (__stlxr(v71, v69));
            if (!v71)
            {
              v56 = *(unint64_t **)v16;
              if (!*(_QWORD *)v16)
                goto LABEL_105;
              v106 = (void **)(v56 + 1);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v106);
LABEL_97:
              v51 = v56;
              v52 = 0x1020C405E66F15BLL;
              goto LABEL_104;
            }
            break;
          case 8:
            v72 = *(unint64_t **)v16;
            do
            {
              v73 = __ldaxr(v72);
              v74 = v73 - 1;
            }
            while (__stlxr(v74, v72));
            if (!v74)
            {
              v75 = *(unint64_t **)v16;
              if (!*(_QWORD *)v16)
                goto LABEL_105;
              boost::detail::shared_count::~shared_count((unsigned int **)v75 + 2);
              v51 = v75;
              v63 = -235920773;
              goto LABEL_103;
            }
            break;
          case 9:
            v57 = *(unint64_t **)v16;
            do
            {
              v58 = __ldaxr(v57);
              v59 = v58 - 1;
            }
            while (__stlxr(v59, v57));
            if (!v59)
            {
              v60 = *(unint64_t **)v16;
              if (*(_QWORD *)v16)
              {
                v61 = (void *)v60[6];
                if (v61)
                {
                  v60[7] = (unint64_t)v61;
                  operator delete(v61);
                }
                v62 = (void *)v60[3];
                if (v62)
                {
                  v60[4] = (unint64_t)v62;
                  operator delete(v62);
                }
                std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v60 + 1));
                v51 = v60;
                v63 = 2071181815;
LABEL_103:
                v52 = v63 | 0x1030C4000000000;
LABEL_104:
                MEMORY[0x219A19A08](v51, v52);
              }
LABEL_105:
              *(_QWORD *)v16 = 0;
            }
            break;
          default:
            break;
        }
        v76 = v107;
        *(_QWORD *)(v16 + 5) = *(_QWORD *)((char *)&v107 + 5);
        *(_QWORD *)v16 = v76;
        *(_BYTE *)(v16 + 12) = BYTE12(v107);
        ++v13;
      }
      if (v13 == 8)
        return v12 + 16 == a2;
    }
    v11 = v12;
    v12 += 16;
    if (v12 == a2)
      return 1;
  }
}

void sub_21815BE7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, char a13)
{
  _Unwind_Resume(exception_object);
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(turi::flexible_type const&,turi::flexible_type const&)> &,turi::flexible_type*>(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(turi::flexible_type const&,turi::flexible_type const&)> &,turi::flexible_type*>((__int128 *)a1, (__int128 *)a2, a3, a5);
  v10 = *(_QWORD *)(a5 + 24);
  if (!v10)
    goto LABEL_9;
  result = (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *))(*(_QWORD *)v10 + 48))(v10, a4, a3);
  if (!(_DWORD)result)
    return result;
  v17 = *(_OWORD *)a3;
  v12 = *(_QWORD *)((char *)a4 + 5);
  *a3 = *a4;
  *(_QWORD *)((char *)a3 + 5) = v12;
  *(_QWORD *)((char *)a4 + 5) = *(_QWORD *)((char *)&v17 + 5);
  *a4 = v17;
  v13 = *(_QWORD *)(a5 + 24);
  if (!v13)
    goto LABEL_9;
  result = (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v13 + 48))(v13, a3, a2);
  if (!(_DWORD)result)
    return result;
  v18 = *(_OWORD *)a2;
  v14 = *(_QWORD *)((char *)a3 + 5);
  *(_QWORD *)a2 = *a3;
  *(_QWORD *)(a2 + 5) = v14;
  *(_QWORD *)((char *)a3 + 5) = *(_QWORD *)((char *)&v18 + 5);
  *a3 = v18;
  v15 = *(_QWORD *)(a5 + 24);
  if (!v15)
LABEL_9:
    std::__throw_bad_function_call[abi:ne180100]();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v15 + 48))(v15, a2, a1);
  if ((_DWORD)result)
  {
    v19 = *(_OWORD *)a1;
    v16 = *(_QWORD *)(a2 + 5);
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 5) = v16;
    *(_QWORD *)(a2 + 5) = *(_QWORD *)((char *)&v19 + 5);
    *(_QWORD *)a2 = v19;
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(turi::flexible_type const&,turi::flexible_type const&)> &,turi::flexible_type*>(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, _QWORD *a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;

  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(turi::flexible_type const&,turi::flexible_type const&)> &,turi::flexible_type*>(a1, a2, a3, a4, a6);
  v12 = *(_QWORD *)(a6 + 24);
  if (!v12)
    goto LABEL_11;
  result = (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *))(*(_QWORD *)v12 + 48))(v12, a5, a4);
  if (!(_DWORD)result)
    return result;
  v21 = *(_OWORD *)a4;
  v14 = *(_QWORD *)((char *)a5 + 5);
  *a4 = *a5;
  *(_QWORD *)((char *)a4 + 5) = v14;
  *(_QWORD *)((char *)a5 + 5) = *(_QWORD *)((char *)&v21 + 5);
  *a5 = v21;
  v15 = *(_QWORD *)(a6 + 24);
  if (!v15)
    goto LABEL_11;
  result = (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *))(*(_QWORD *)v15 + 48))(v15, a4, a3);
  if (!(_DWORD)result)
    return result;
  v22 = *(_OWORD *)a3;
  v16 = *(_QWORD *)((char *)a4 + 5);
  *a3 = *a4;
  *(_QWORD *)((char *)a3 + 5) = v16;
  *(_QWORD *)((char *)a4 + 5) = *(_QWORD *)((char *)&v22 + 5);
  *a4 = v22;
  v17 = *(_QWORD *)(a6 + 24);
  if (!v17)
    goto LABEL_11;
  result = (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v17 + 48))(v17, a3, a2);
  if (!(_DWORD)result)
    return result;
  v23 = *(_OWORD *)a2;
  v18 = *(_QWORD *)((char *)a3 + 5);
  *(_QWORD *)a2 = *a3;
  *(_QWORD *)(a2 + 5) = v18;
  *(_QWORD *)((char *)a3 + 5) = *(_QWORD *)((char *)&v23 + 5);
  *a3 = v23;
  v19 = *(_QWORD *)(a6 + 24);
  if (!v19)
LABEL_11:
    std::__throw_bad_function_call[abi:ne180100]();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v19 + 48))(v19, a2, a1);
  if ((_DWORD)result)
  {
    v24 = *(_OWORD *)a1;
    v20 = *(_QWORD *)(a2 + 5);
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 5) = v20;
    *(_QWORD *)(a2 + 5) = *(_QWORD *)((char *)&v24 + 5);
    *(_QWORD *)a2 = v24;
  }
  return result;
}

uint64_t std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(turi::flexible_type const&,turi::flexible_type const&)> &,turi::flexible_type*,turi::flexible_type*>(char *a1, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  __int128 v20;

  if (a1 != a2)
  {
    v6 = (uint64_t)a2;
    v8 = a2 - a1;
    v9 = (a2 - a1) >> 4;
    if (a2 - a1 >= 17)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = (uint64_t)&a1[16 * v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(turi::flexible_type const&,turi::flexible_type const&)> &,turi::flexible_type*>((uint64_t)a1, a4, v9, v12);
        v12 -= 16;
        --v11;
      }
      while (v11);
    }
    v13 = v6;
    if (v6 != a3)
    {
      v14 = v6;
      do
      {
        v15 = *(_QWORD *)(a4 + 24);
        if (!v15)
          std::__throw_bad_function_call[abi:ne180100]();
        if ((*(unsigned int (**)(uint64_t, uint64_t, char *))(*(_QWORD *)v15 + 48))(v15, v14, a1))
        {
          v20 = *(_OWORD *)v14;
          v16 = *(_QWORD *)(a1 + 5);
          *(_QWORD *)v14 = *(_QWORD *)a1;
          *(_QWORD *)(v14 + 5) = v16;
          *(_QWORD *)(a1 + 5) = *(_QWORD *)((char *)&v20 + 5);
          *(_QWORD *)a1 = v20;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(turi::flexible_type const&,turi::flexible_type const&)> &,turi::flexible_type*>((uint64_t)a1, a4, v9, (uint64_t)a1);
        }
        v14 += 16;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 17)
    {
      v17 = (unint64_t)v8 >> 4;
      do
      {
        std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(turi::flexible_type const&,turi::flexible_type const&)>,turi::flexible_type*>((uint64_t)a1, v6, a4, v17);
        v6 -= 16;
      }
      while (v17-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(turi::flexible_type const&,turi::flexible_type const&)> &,turi::flexible_type*>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t *v30;
  void *v31;
  void *v32;
  unsigned int v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t *v37;
  void *v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t *v54;
  uint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t *v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t v62;
  unsigned int v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t *v67;
  void *v68;
  unint64_t *v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t *v75;
  uint64_t v76;
  unint64_t *v77;
  unint64_t v78;
  unint64_t v79;
  _QWORD *v80;
  _QWORD *v81;
  uint64_t v82;
  unint64_t *v83;
  unint64_t v84;
  unint64_t v85;
  _QWORD *v86;
  unint64_t *v87;
  unint64_t v88;
  unint64_t v89;
  unsigned int v90;
  unint64_t *v91;
  unint64_t v92;
  unint64_t v93;
  _QWORD *v94;
  void *v95;
  unint64_t *v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t *v99;
  unint64_t v100;
  unint64_t v101;
  _QWORD *v102;
  void **v103;
  _BYTE v104[13];
  uint64_t v105;

  v105 = *MEMORY[0x24BDAC8D0];
  v4 = a3 - 2;
  if (a3 < 2)
    return result;
  v5 = a4;
  v6 = result;
  v7 = v4 >> 1;
  if ((uint64_t)(v4 >> 1) < (a4 - result) >> 4)
    return result;
  v10 = (a4 - result) >> 3;
  v11 = v10 + 1;
  v12 = result + 16 * (v10 + 1);
  v13 = v10 + 2;
  if (v10 + 2 < a3)
  {
    v14 = *(_QWORD *)(a2 + 24);
    if (!v14)
      goto LABEL_145;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v14 + 48))(v14, v12, v12 + 16))
    {
      v12 += 16;
      v11 = v13;
    }
  }
  v15 = *(_QWORD *)(a2 + 24);
  if (!v15)
LABEL_145:
    std::__throw_bad_function_call[abi:ne180100]();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v15 + 48))(v15, v12, v5);
  if ((result & 1) == 0)
  {
    *(_QWORD *)&v104[5] = *(_QWORD *)(v5 + 5);
    *(_QWORD *)v104 = *(_QWORD *)v5;
    v104[12] = *(_BYTE *)(v5 + 12);
    *(_BYTE *)(v5 + 12) = 0;
    do
    {
      v16 = v12;
      if (v12 != v5)
      {
        switch(*(_BYTE *)(v5 + 12))
        {
          case 2:
            v17 = *(unint64_t **)v5;
            do
            {
              v18 = __ldaxr(v17);
              v19 = v18 - 1;
            }
            while (__stlxr(v19, v17));
            if (!v19)
            {
              v20 = *(unint64_t **)v5;
              if (!*(_QWORD *)v5)
                goto LABEL_53;
              if (*((char *)v20 + 31) < 0)
                operator delete((void *)v20[1]);
              v21 = v20;
              v22 = 0x1012C404EF22A49;
              goto LABEL_52;
            }
            break;
          case 3:
            v34 = *(unint64_t **)v5;
            do
            {
              v35 = __ldaxr(v34);
              v36 = v35 - 1;
            }
            while (__stlxr(v36, v34));
            if (!v36)
            {
              v37 = *(unint64_t **)v5;
              if (!*(_QWORD *)v5)
                goto LABEL_53;
              v38 = (void *)v37[1];
              if (v38)
              {
                v37[2] = (unint64_t)v38;
                operator delete(v38);
              }
              v21 = v37;
              v22 = 0x1080C409938AC02;
              goto LABEL_52;
            }
            break;
          case 4:
            v23 = *(unint64_t **)v5;
            do
            {
              v24 = __ldaxr(v23);
              v25 = v24 - 1;
            }
            while (__stlxr(v25, v23));
            if (!v25)
            {
              v26 = *(unint64_t **)v5;
              if (!*(_QWORD *)v5)
                goto LABEL_53;
              v103 = (void **)(v26 + 1);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v103);
              goto LABEL_45;
            }
            break;
          case 5:
            v39 = *(unint64_t **)v5;
            do
            {
              v40 = __ldaxr(v39);
              v41 = v40 - 1;
            }
            while (__stlxr(v41, v39));
            if (!v41)
            {
              v26 = *(unint64_t **)v5;
              if (!*(_QWORD *)v5)
                goto LABEL_53;
              v103 = (void **)(v26 + 1);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v103);
LABEL_45:
              v21 = v26;
              v22 = 0x1020C405E66F15BLL;
              goto LABEL_52;
            }
            break;
          case 8:
            v42 = *(unint64_t **)v5;
            do
            {
              v43 = __ldaxr(v42);
              v44 = v43 - 1;
            }
            while (__stlxr(v44, v42));
            if (!v44)
            {
              v45 = *(unint64_t **)v5;
              if (!*(_QWORD *)v5)
                goto LABEL_53;
              boost::detail::shared_count::~shared_count((unsigned int **)v45 + 2);
              v21 = v45;
              v33 = -235920773;
              goto LABEL_51;
            }
            break;
          case 9:
            v27 = *(unint64_t **)v5;
            do
            {
              v28 = __ldaxr(v27);
              v29 = v28 - 1;
            }
            while (__stlxr(v29, v27));
            if (!v29)
            {
              v30 = *(unint64_t **)v5;
              if (*(_QWORD *)v5)
              {
                v31 = (void *)v30[6];
                if (v31)
                {
                  v30[7] = (unint64_t)v31;
                  operator delete(v31);
                }
                v32 = (void *)v30[3];
                if (v32)
                {
                  v30[4] = (unint64_t)v32;
                  operator delete(v32);
                }
                std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v30 + 1));
                v21 = v30;
                v33 = 2071181815;
LABEL_51:
                v22 = v33 | 0x1030C4000000000;
LABEL_52:
                result = MEMORY[0x219A19A08](v21, v22);
              }
LABEL_53:
              *(_QWORD *)v5 = 0;
            }
            break;
          default:
            break;
        }
        v46 = *(unint64_t **)v16;
        *(_QWORD *)(v5 + 5) = *(_QWORD *)(v16 + 5);
        *(_QWORD *)v5 = v46;
        *(_BYTE *)(v5 + 12) = *(_BYTE *)(v16 + 12);
        *(_BYTE *)(v16 + 12) = 0;
      }
      if (v7 < v11)
        break;
      v47 = (2 * v11) | 1;
      v12 = v6 + 16 * v47;
      v11 = 2 * v11 + 2;
      if (v11 >= a3)
      {
        v11 = v47;
      }
      else
      {
        v48 = *(_QWORD *)(a2 + 24);
        if (!v48)
          goto LABEL_144;
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v48 + 48))(v48, v6 + 16 * v47, v12 + 16))
        {
          v12 += 16;
        }
        else
        {
          v11 = v47;
        }
      }
      v49 = *(_QWORD *)(a2 + 24);
      if (!v49)
LABEL_144:
        std::__throw_bad_function_call[abi:ne180100]();
      result = (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v49 + 48))(v49, v12, v104);
      v5 = v16;
    }
    while (!(_DWORD)result);
    if (v104 == (_BYTE *)v16)
    {
      switch(v104[12])
      {
        case 2:
          v77 = *(unint64_t **)v104;
          do
          {
            v78 = __ldaxr(v77);
            v79 = v78 - 1;
          }
          while (__stlxr(v79, v77));
          if (!v79)
          {
            v80 = *(_QWORD **)v104;
            if (*(_QWORD *)v104)
            {
              if (*(char *)(*(_QWORD *)v104 + 31) < 0)
                operator delete(*(void **)(*(_QWORD *)v104 + 8));
              v81 = v80;
              v82 = 0x1012C404EF22A49;
              goto LABEL_143;
            }
          }
          break;
        case 3:
          v91 = *(unint64_t **)v104;
          do
          {
            v92 = __ldaxr(v91);
            v93 = v92 - 1;
          }
          while (__stlxr(v93, v91));
          if (!v93)
          {
            v94 = *(_QWORD **)v104;
            if (*(_QWORD *)v104)
            {
              v95 = *(void **)(*(_QWORD *)v104 + 8);
              if (v95)
              {
                *(_QWORD *)(*(_QWORD *)v104 + 16) = v95;
                operator delete(v95);
              }
              v81 = v94;
              v82 = 0x1080C409938AC02;
              goto LABEL_143;
            }
          }
          break;
        case 4:
          v83 = *(unint64_t **)v104;
          do
          {
            v84 = __ldaxr(v83);
            v85 = v84 - 1;
          }
          while (__stlxr(v85, v83));
          if (!v85)
          {
            v86 = *(_QWORD **)v104;
            if (*(_QWORD *)v104)
            {
              v103 = (void **)(*(_QWORD *)v104 + 8);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v103);
              goto LABEL_136;
            }
          }
          break;
        case 5:
          v96 = *(unint64_t **)v104;
          do
          {
            v97 = __ldaxr(v96);
            v98 = v97 - 1;
          }
          while (__stlxr(v98, v96));
          if (!v98)
          {
            v86 = *(_QWORD **)v104;
            if (*(_QWORD *)v104)
            {
              v103 = (void **)(*(_QWORD *)v104 + 8);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v103);
LABEL_136:
              v81 = v86;
              v82 = 0x1020C405E66F15BLL;
              goto LABEL_143;
            }
          }
          break;
        case 8:
          v99 = *(unint64_t **)v104;
          do
          {
            v100 = __ldaxr(v99);
            v101 = v100 - 1;
          }
          while (__stlxr(v101, v99));
          if (!v101)
          {
            v102 = *(_QWORD **)v104;
            if (*(_QWORD *)v104)
            {
              boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)v104 + 16));
              v81 = v102;
              v90 = -235920773;
              goto LABEL_142;
            }
          }
          break;
        case 9:
          v87 = *(unint64_t **)v104;
          do
          {
            v88 = __ldaxr(v87);
            v89 = v88 - 1;
          }
          while (__stlxr(v89, v87));
          if (!v89)
          {
            result = *(_QWORD *)v104;
            if (*(_QWORD *)v104)
            {
              v81 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*(_QWORD **)v104);
              v90 = 2071181815;
LABEL_142:
              v82 = v90 | 0x1030C4000000000;
LABEL_143:
              result = MEMORY[0x219A19A08](v81, v82);
            }
          }
          break;
        default:
          return result;
      }
    }
    else
    {
      switch(*(_BYTE *)(v16 + 12))
      {
        case 2:
          v50 = *(unint64_t **)v16;
          do
          {
            v51 = __ldaxr(v50);
            v52 = v51 - 1;
          }
          while (__stlxr(v52, v50));
          if (!v52)
          {
            v53 = *(unint64_t **)v16;
            if (!*(_QWORD *)v16)
              goto LABEL_103;
            if (*((char *)v53 + 31) < 0)
              operator delete((void *)v53[1]);
            v54 = v53;
            v55 = 0x1012C404EF22A49;
            goto LABEL_102;
          }
          break;
        case 3:
          v64 = *(unint64_t **)v16;
          do
          {
            v65 = __ldaxr(v64);
            v66 = v65 - 1;
          }
          while (__stlxr(v66, v64));
          if (!v66)
          {
            v67 = *(unint64_t **)v16;
            if (!*(_QWORD *)v16)
              goto LABEL_103;
            v68 = (void *)v67[1];
            if (v68)
            {
              v67[2] = (unint64_t)v68;
              operator delete(v68);
            }
            v54 = v67;
            v55 = 0x1080C409938AC02;
            goto LABEL_102;
          }
          break;
        case 4:
          v56 = *(unint64_t **)v16;
          do
          {
            v57 = __ldaxr(v56);
            v58 = v57 - 1;
          }
          while (__stlxr(v58, v56));
          if (!v58)
          {
            v59 = *(unint64_t **)v16;
            if (!*(_QWORD *)v16)
              goto LABEL_103;
            v103 = (void **)(v59 + 1);
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v103);
            goto LABEL_95;
          }
          break;
        case 5:
          v69 = *(unint64_t **)v16;
          do
          {
            v70 = __ldaxr(v69);
            v71 = v70 - 1;
          }
          while (__stlxr(v71, v69));
          if (!v71)
          {
            v59 = *(unint64_t **)v16;
            if (!*(_QWORD *)v16)
              goto LABEL_103;
            v103 = (void **)(v59 + 1);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v103);
LABEL_95:
            v54 = v59;
            v55 = 0x1020C405E66F15BLL;
            goto LABEL_102;
          }
          break;
        case 8:
          v72 = *(unint64_t **)v16;
          do
          {
            v73 = __ldaxr(v72);
            v74 = v73 - 1;
          }
          while (__stlxr(v74, v72));
          if (!v74)
          {
            v75 = *(unint64_t **)v16;
            if (!*(_QWORD *)v16)
              goto LABEL_103;
            boost::detail::shared_count::~shared_count((unsigned int **)v75 + 2);
            v54 = v75;
            v63 = -235920773;
            goto LABEL_101;
          }
          break;
        case 9:
          v60 = *(unint64_t **)v16;
          do
          {
            v61 = __ldaxr(v60);
            v62 = v61 - 1;
          }
          while (__stlxr(v62, v60));
          if (!v62)
          {
            result = *(_QWORD *)v16;
            if (*(_QWORD *)v16)
            {
              v54 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)result);
              v63 = 2071181815;
LABEL_101:
              v55 = v63 | 0x1030C4000000000;
LABEL_102:
              result = MEMORY[0x219A19A08](v54, v55);
            }
LABEL_103:
            *(_QWORD *)v16 = 0;
          }
          break;
        default:
          break;
      }
      v76 = *(_QWORD *)v104;
      *(_QWORD *)(v16 + 5) = *(_QWORD *)&v104[5];
      *(_QWORD *)v16 = v76;
      *(_BYTE *)(v16 + 12) = v104[12];
    }
  }
  return result;
}

uint64_t std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(turi::flexible_type const&,turi::flexible_type const&)>,turi::flexible_type*>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unint64_t *v7;
  int v8;
  char v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  void *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t *v38;
  unsigned int v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t *v43;
  uint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t *v48;
  void *v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t *v60;
  unsigned int v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t v64;
  void **v65;

  if (a4 >= 2)
  {
    v6 = result;
    v7 = *(unint64_t **)result;
    v8 = *(_DWORD *)(result + 8);
    v9 = *(_BYTE *)(result + 12);
    *(_BYTE *)(result + 12) = 0;
    result = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(turi::flexible_type const&,turi::flexible_type const&)> &,turi::flexible_type*>(result, a3, a4);
    v10 = result;
    if (result == a2 - 16)
    {
      switch(*(_BYTE *)(result + 12))
      {
        case 2:
          v17 = *(unint64_t **)result;
          do
          {
            v18 = __ldaxr(v17);
            v19 = v18 - 1;
          }
          while (__stlxr(v19, v17));
          if (!v19)
          {
            v20 = *(unint64_t **)result;
            if (!*(_QWORD *)result)
              goto LABEL_81;
            if (*((char *)v20 + 31) < 0)
              operator delete((void *)v20[1]);
            v21 = v20;
            v22 = 0x1012C404EF22A49;
            goto LABEL_80;
          }
          break;
        case 3:
          v45 = *(unint64_t **)result;
          do
          {
            v46 = __ldaxr(v45);
            v47 = v46 - 1;
          }
          while (__stlxr(v47, v45));
          if (!v47)
          {
            v48 = *(unint64_t **)result;
            if (!*(_QWORD *)result)
              goto LABEL_81;
            v49 = (void *)v48[1];
            if (v49)
            {
              v48[2] = (unint64_t)v49;
              operator delete(v49);
            }
            v21 = v48;
            v22 = 0x1080C409938AC02;
            goto LABEL_80;
          }
          break;
        case 4:
          v50 = *(unint64_t **)result;
          do
          {
            v51 = __ldaxr(v50);
            v52 = v51 - 1;
          }
          while (__stlxr(v52, v50));
          if (!v52)
          {
            v53 = *(unint64_t **)result;
            if (!*(_QWORD *)result)
              goto LABEL_81;
            v65 = (void **)(v53 + 1);
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v65);
            goto LABEL_68;
          }
          break;
        case 5:
          v54 = *(unint64_t **)result;
          do
          {
            v55 = __ldaxr(v54);
            v56 = v55 - 1;
          }
          while (__stlxr(v56, v54));
          if (!v56)
          {
            v53 = *(unint64_t **)result;
            if (!*(_QWORD *)result)
              goto LABEL_81;
            v65 = (void **)(v53 + 1);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v65);
LABEL_68:
            v21 = v53;
            v22 = 0x1020C405E66F15BLL;
            goto LABEL_80;
          }
          break;
        case 8:
          v57 = *(unint64_t **)result;
          do
          {
            v58 = __ldaxr(v57);
            v59 = v58 - 1;
          }
          while (__stlxr(v59, v57));
          if (!v59)
          {
            v60 = *(unint64_t **)result;
            if (!*(_QWORD *)result)
              goto LABEL_81;
            boost::detail::shared_count::~shared_count((unsigned int **)v60 + 2);
            v21 = v60;
            v61 = -235920773;
            goto LABEL_79;
          }
          break;
        case 9:
          v62 = *(unint64_t **)result;
          do
          {
            v63 = __ldaxr(v62);
            v64 = v63 - 1;
          }
          while (__stlxr(v64, v62));
          if (!v64)
          {
            result = *(_QWORD *)result;
            if (*(_QWORD *)v10)
            {
              v21 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)result);
              v61 = 2071181815;
LABEL_79:
              v22 = v61 | 0x1030C4000000000;
LABEL_80:
              result = MEMORY[0x219A19A08](v21, v22);
            }
LABEL_81:
            *(_QWORD *)v10 = 0;
          }
          break;
        default:
          break;
      }
      *(_QWORD *)v10 = v7;
      *(_DWORD *)(v10 + 8) = v8;
      *(_BYTE *)(v10 + 12) = v9;
    }
    else
    {
      switch(*(_BYTE *)(result + 12))
      {
        case 2:
          v11 = *(unint64_t **)result;
          do
          {
            v12 = __ldaxr(v11);
            v13 = v12 - 1;
          }
          while (__stlxr(v13, v11));
          if (!v13)
          {
            v14 = *(unint64_t **)result;
            if (!*(_QWORD *)result)
              goto LABEL_49;
            if (*((char *)v14 + 31) < 0)
              operator delete((void *)v14[1]);
            v15 = v14;
            v16 = 0x1012C404EF22A49;
            goto LABEL_48;
          }
          break;
        case 3:
          v23 = *(unint64_t **)result;
          do
          {
            v24 = __ldaxr(v23);
            v25 = v24 - 1;
          }
          while (__stlxr(v25, v23));
          if (!v25)
          {
            v26 = *(unint64_t **)result;
            if (!*(_QWORD *)result)
              goto LABEL_49;
            v27 = (void *)v26[1];
            if (v27)
            {
              v26[2] = (unint64_t)v27;
              operator delete(v27);
            }
            v15 = v26;
            v16 = 0x1080C409938AC02;
            goto LABEL_48;
          }
          break;
        case 4:
          v28 = *(unint64_t **)result;
          do
          {
            v29 = __ldaxr(v28);
            v30 = v29 - 1;
          }
          while (__stlxr(v30, v28));
          if (!v30)
          {
            v31 = *(unint64_t **)result;
            if (!*(_QWORD *)result)
              goto LABEL_49;
            v65 = (void **)(v31 + 1);
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v65);
            goto LABEL_36;
          }
          break;
        case 5:
          v32 = *(unint64_t **)result;
          do
          {
            v33 = __ldaxr(v32);
            v34 = v33 - 1;
          }
          while (__stlxr(v34, v32));
          if (!v34)
          {
            v31 = *(unint64_t **)result;
            if (!*(_QWORD *)result)
              goto LABEL_49;
            v65 = (void **)(v31 + 1);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v65);
LABEL_36:
            v15 = v31;
            v16 = 0x1020C405E66F15BLL;
            goto LABEL_48;
          }
          break;
        case 8:
          v35 = *(unint64_t **)result;
          do
          {
            v36 = __ldaxr(v35);
            v37 = v36 - 1;
          }
          while (__stlxr(v37, v35));
          if (!v37)
          {
            v38 = *(unint64_t **)result;
            if (!*(_QWORD *)result)
              goto LABEL_49;
            boost::detail::shared_count::~shared_count((unsigned int **)v38 + 2);
            v15 = v38;
            v39 = -235920773;
            goto LABEL_47;
          }
          break;
        case 9:
          v40 = *(unint64_t **)result;
          do
          {
            v41 = __ldaxr(v40);
            v42 = v41 - 1;
          }
          while (__stlxr(v42, v40));
          if (!v42)
          {
            v43 = *(unint64_t **)result;
            if (*(_QWORD *)v10)
            {
              v15 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v43);
              v39 = 2071181815;
LABEL_47:
              v16 = v39 | 0x1030C4000000000;
LABEL_48:
              MEMORY[0x219A19A08](v15, v16);
            }
LABEL_49:
            *(_QWORD *)v10 = 0;
          }
          break;
        default:
          break;
      }
      v44 = *(_QWORD *)(a2 - 16);
      *(_QWORD *)(v10 + 5) = *(_QWORD *)(a2 - 11);
      *(_QWORD *)v10 = v44;
      *(_BYTE *)(v10 + 12) = *(_BYTE *)(a2 - 4);
      *(_QWORD *)(a2 - 16) = v7;
      *(_DWORD *)(a2 - 8) = v8;
      *(_BYTE *)(a2 - 4) = v9;
      return std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(turi::flexible_type const&,turi::flexible_type const&)> &,turi::flexible_type*>(v6, v10 + 16, a3, (v10 + 16 - v6) >> 4);
    }
  }
  return result;
}

void sub_21815D174(_Unwind_Exception *exception_object)
{
  unint64_t *v1;
  int v2;

  switch(v2)
  {
    case 2:
      std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(turi::flexible_type const&,turi::flexible_type const&)>,turi::flexible_type*>((uint64_t)v1);
      break;
    case 3:
      std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(turi::flexible_type const&,turi::flexible_type const&)>,turi::flexible_type*>(v1);
      break;
    case 4:
      std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(turi::flexible_type const&,turi::flexible_type const&)>,turi::flexible_type*>(v1);
      break;
    case 5:
      std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(turi::flexible_type const&,turi::flexible_type const&)>,turi::flexible_type*>((uint64_t)v1);
      break;
    case 8:
      std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(turi::flexible_type const&,turi::flexible_type const&)>,turi::flexible_type*>(v1);
      break;
    case 9:
      std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(turi::flexible_type const&,turi::flexible_type const&)>,turi::flexible_type*>(v1);
      break;
    default:
      break;
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(turi::flexible_type const&,turi::flexible_type const&)> &,turi::flexible_type*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  void *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t *v34;
  unsigned int v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t *v39;
  void *v40;
  void *v41;
  uint64_t v42;
  void **v44;

  v6 = 0;
  v7 = a3 - 2;
  if (a3 < 2)
    v7 = a3 - 1;
  v8 = v7 >> 1;
  do
  {
    v9 = a1 + 16 * v6 + 16;
    v10 = 2 * v6;
    v6 = (2 * v6) | 1;
    v11 = v10 + 2;
    if (v10 + 2 < a3)
    {
      v12 = *(_QWORD *)(a2 + 24);
      if (!v12)
        std::__throw_bad_function_call[abi:ne180100]();
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v12 + 48))(v12, v9, v9 + 16))
      {
        v9 += 16;
        v6 = v11;
      }
    }
    if (v9 != a1)
    {
      switch(*(_BYTE *)(a1 + 12))
      {
        case 2:
          v13 = *(unint64_t **)a1;
          do
          {
            v14 = __ldaxr(v13);
            v15 = v14 - 1;
          }
          while (__stlxr(v15, v13));
          if (!v15)
          {
            v16 = *(unint64_t **)a1;
            if (!*(_QWORD *)a1)
              goto LABEL_51;
            if (*((char *)v16 + 31) < 0)
              operator delete((void *)v16[1]);
            v17 = v16;
            v18 = 0x1012C404EF22A49;
            goto LABEL_50;
          }
          break;
        case 3:
          v19 = *(unint64_t **)a1;
          do
          {
            v20 = __ldaxr(v19);
            v21 = v20 - 1;
          }
          while (__stlxr(v21, v19));
          if (!v21)
          {
            v22 = *(unint64_t **)a1;
            if (!*(_QWORD *)a1)
              goto LABEL_51;
            v23 = (void *)v22[1];
            if (v23)
            {
              v22[2] = (unint64_t)v23;
              operator delete(v23);
            }
            v17 = v22;
            v18 = 0x1080C409938AC02;
            goto LABEL_50;
          }
          break;
        case 4:
          v24 = *(unint64_t **)a1;
          do
          {
            v25 = __ldaxr(v24);
            v26 = v25 - 1;
          }
          while (__stlxr(v26, v24));
          if (!v26)
          {
            v27 = *(unint64_t **)a1;
            if (!*(_QWORD *)a1)
              goto LABEL_51;
            v44 = (void **)(v27 + 1);
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v44);
            goto LABEL_34;
          }
          break;
        case 5:
          v28 = *(unint64_t **)a1;
          do
          {
            v29 = __ldaxr(v28);
            v30 = v29 - 1;
          }
          while (__stlxr(v30, v28));
          if (!v30)
          {
            v27 = *(unint64_t **)a1;
            if (!*(_QWORD *)a1)
              goto LABEL_51;
            v44 = (void **)(v27 + 1);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v44);
LABEL_34:
            v17 = v27;
            v18 = 0x1020C405E66F15BLL;
            goto LABEL_50;
          }
          break;
        case 8:
          v31 = *(unint64_t **)a1;
          do
          {
            v32 = __ldaxr(v31);
            v33 = v32 - 1;
          }
          while (__stlxr(v33, v31));
          if (!v33)
          {
            v34 = *(unint64_t **)a1;
            if (!*(_QWORD *)a1)
              goto LABEL_51;
            boost::detail::shared_count::~shared_count((unsigned int **)v34 + 2);
            v17 = v34;
            v35 = -235920773;
            goto LABEL_49;
          }
          break;
        case 9:
          v36 = *(unint64_t **)a1;
          do
          {
            v37 = __ldaxr(v36);
            v38 = v37 - 1;
          }
          while (__stlxr(v38, v36));
          if (!v38)
          {
            v39 = *(unint64_t **)a1;
            if (*(_QWORD *)a1)
            {
              v40 = (void *)v39[6];
              if (v40)
              {
                v39[7] = (unint64_t)v40;
                operator delete(v40);
              }
              v41 = (void *)v39[3];
              if (v41)
              {
                v39[4] = (unint64_t)v41;
                operator delete(v41);
              }
              std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v39 + 1));
              v17 = v39;
              v35 = 2071181815;
LABEL_49:
              v18 = v35 | 0x1030C4000000000;
LABEL_50:
              MEMORY[0x219A19A08](v17, v18);
            }
LABEL_51:
            *(_QWORD *)a1 = 0;
          }
          break;
        default:
          break;
      }
      v42 = *(_QWORD *)v9;
      *(_QWORD *)(a1 + 5) = *(_QWORD *)(v9 + 5);
      *(_QWORD *)a1 = v42;
      *(_BYTE *)(a1 + 12) = *(_BYTE *)(v9 + 12);
      *(_BYTE *)(v9 + 12) = 0;
    }
    a1 = v9;
  }
  while (v6 <= v8);
  return v9;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(turi::flexible_type const&,turi::flexible_type const&)> &,turi::flexible_type*>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  void *v27;
  void *v28;
  unsigned int v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t *v33;
  void *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t *v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t *v47;
  unint64_t *v48;
  uint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  unsigned int v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t *v61;
  void *v62;
  unint64_t *v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t *v69;
  unint64_t *v70;
  unint64_t v71;
  unint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  uint64_t v75;
  unint64_t *v76;
  unint64_t v77;
  unint64_t v78;
  _QWORD *v79;
  unint64_t *v80;
  unint64_t v81;
  unint64_t v82;
  unsigned int v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t v86;
  _QWORD *v87;
  void *v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t *v92;
  unint64_t v93;
  unint64_t v94;
  _QWORD *v95;
  void **v96;
  _BYTE v97[13];
  uint64_t v98;

  v98 = *MEMORY[0x24BDAC8D0];
  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v6 = result;
    v7 = *(_QWORD *)(a3 + 24);
    if (!v7)
      std::__throw_bad_function_call[abi:ne180100]();
    v9 = v4 >> 1;
    v10 = v6 + 16 * (v4 >> 1);
    v11 = a2 - 16;
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 48))(v7, v10, a2 - 16);
    if ((_DWORD)result)
    {
      *(_QWORD *)&v97[5] = *(_QWORD *)(v11 + 5);
      *(_QWORD *)v97 = *(_QWORD *)v11;
      v97[12] = *(_BYTE *)(a2 - 4);
      *(_BYTE *)(a2 - 4) = 0;
      do
      {
        v12 = v10;
        if (v10 != v11)
        {
          switch(*(_BYTE *)(v11 + 12))
          {
            case 2:
              v13 = *(unint64_t **)v11;
              do
              {
                v14 = __ldaxr(v13);
                v15 = v14 - 1;
              }
              while (__stlxr(v15, v13));
              if (!v15)
              {
                v16 = *(unint64_t **)v11;
                if (!*(_QWORD *)v11)
                  goto LABEL_48;
                if (*((char *)v16 + 31) < 0)
                  operator delete((void *)v16[1]);
                v17 = v16;
                v18 = 0x1012C404EF22A49;
                goto LABEL_47;
              }
              break;
            case 3:
              v30 = *(unint64_t **)v11;
              do
              {
                v31 = __ldaxr(v30);
                v32 = v31 - 1;
              }
              while (__stlxr(v32, v30));
              if (!v32)
              {
                v33 = *(unint64_t **)v11;
                if (!*(_QWORD *)v11)
                  goto LABEL_48;
                v34 = (void *)v33[1];
                if (v34)
                {
                  v33[2] = (unint64_t)v34;
                  operator delete(v34);
                }
                v17 = v33;
                v18 = 0x1080C409938AC02;
                goto LABEL_47;
              }
              break;
            case 4:
              v19 = *(unint64_t **)v11;
              do
              {
                v20 = __ldaxr(v19);
                v21 = v20 - 1;
              }
              while (__stlxr(v21, v19));
              if (!v21)
              {
                v22 = *(unint64_t **)v11;
                if (!*(_QWORD *)v11)
                  goto LABEL_48;
                v96 = (void **)(v22 + 1);
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v96);
                goto LABEL_40;
              }
              break;
            case 5:
              v35 = *(unint64_t **)v11;
              do
              {
                v36 = __ldaxr(v35);
                v37 = v36 - 1;
              }
              while (__stlxr(v37, v35));
              if (!v37)
              {
                v22 = *(unint64_t **)v11;
                if (!*(_QWORD *)v11)
                  goto LABEL_48;
                v96 = (void **)(v22 + 1);
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v96);
LABEL_40:
                v17 = v22;
                v18 = 0x1020C405E66F15BLL;
                goto LABEL_47;
              }
              break;
            case 8:
              v38 = *(unint64_t **)v11;
              do
              {
                v39 = __ldaxr(v38);
                v40 = v39 - 1;
              }
              while (__stlxr(v40, v38));
              if (!v40)
              {
                v41 = *(unint64_t **)v11;
                if (!*(_QWORD *)v11)
                  goto LABEL_48;
                boost::detail::shared_count::~shared_count((unsigned int **)v41 + 2);
                v17 = v41;
                v29 = -235920773;
                goto LABEL_46;
              }
              break;
            case 9:
              v23 = *(unint64_t **)v11;
              do
              {
                v24 = __ldaxr(v23);
                v25 = v24 - 1;
              }
              while (__stlxr(v25, v23));
              if (!v25)
              {
                v26 = *(unint64_t **)v11;
                if (*(_QWORD *)v11)
                {
                  v27 = (void *)v26[6];
                  if (v27)
                  {
                    v26[7] = (unint64_t)v27;
                    operator delete(v27);
                  }
                  v28 = (void *)v26[3];
                  if (v28)
                  {
                    v26[4] = (unint64_t)v28;
                    operator delete(v28);
                  }
                  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v26 + 1));
                  v17 = v26;
                  v29 = 2071181815;
LABEL_46:
                  v18 = v29 | 0x1030C4000000000;
LABEL_47:
                  result = MEMORY[0x219A19A08](v17, v18);
                }
LABEL_48:
                *(_QWORD *)v11 = 0;
              }
              break;
            default:
              break;
          }
          v42 = *(unint64_t **)v12;
          *(_QWORD *)(v11 + 5) = *(_QWORD *)(v12 + 5);
          *(_QWORD *)v11 = v42;
          *(_BYTE *)(v11 + 12) = *(_BYTE *)(v12 + 12);
          *(_BYTE *)(v12 + 12) = 0;
        }
        if (!v9)
          break;
        v43 = *(_QWORD *)(a3 + 24);
        if (!v43)
          std::__throw_bad_function_call[abi:ne180100]();
        v9 = (v9 - 1) >> 1;
        v10 = v6 + 16 * v9;
        result = (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v43 + 48))(v43, v10, v97);
        v11 = v12;
      }
      while ((result & 1) != 0);
      if (v97 == (_BYTE *)v12)
      {
        switch(v97[12])
        {
          case 2:
            v70 = *(unint64_t **)v97;
            do
            {
              v71 = __ldaxr(v70);
              v72 = v71 - 1;
            }
            while (__stlxr(v72, v70));
            if (!v72)
            {
              v73 = *(_QWORD **)v97;
              if (*(_QWORD *)v97)
              {
                if (*(char *)(*(_QWORD *)v97 + 31) < 0)
                  operator delete(*(void **)(*(_QWORD *)v97 + 8));
                v74 = v73;
                v75 = 0x1012C404EF22A49;
                goto LABEL_132;
              }
            }
            break;
          case 3:
            v84 = *(unint64_t **)v97;
            do
            {
              v85 = __ldaxr(v84);
              v86 = v85 - 1;
            }
            while (__stlxr(v86, v84));
            if (!v86)
            {
              v87 = *(_QWORD **)v97;
              if (*(_QWORD *)v97)
              {
                v88 = *(void **)(*(_QWORD *)v97 + 8);
                if (v88)
                {
                  *(_QWORD *)(*(_QWORD *)v97 + 16) = v88;
                  operator delete(v88);
                }
                v74 = v87;
                v75 = 0x1080C409938AC02;
                goto LABEL_132;
              }
            }
            break;
          case 4:
            v76 = *(unint64_t **)v97;
            do
            {
              v77 = __ldaxr(v76);
              v78 = v77 - 1;
            }
            while (__stlxr(v78, v76));
            if (!v78)
            {
              v79 = *(_QWORD **)v97;
              if (*(_QWORD *)v97)
              {
                v96 = (void **)(*(_QWORD *)v97 + 8);
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v96);
                goto LABEL_125;
              }
            }
            break;
          case 5:
            v89 = *(unint64_t **)v97;
            do
            {
              v90 = __ldaxr(v89);
              v91 = v90 - 1;
            }
            while (__stlxr(v91, v89));
            if (!v91)
            {
              v79 = *(_QWORD **)v97;
              if (*(_QWORD *)v97)
              {
                v96 = (void **)(*(_QWORD *)v97 + 8);
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v96);
LABEL_125:
                v74 = v79;
                v75 = 0x1020C405E66F15BLL;
                goto LABEL_132;
              }
            }
            break;
          case 8:
            v92 = *(unint64_t **)v97;
            do
            {
              v93 = __ldaxr(v92);
              v94 = v93 - 1;
            }
            while (__stlxr(v94, v92));
            if (!v94)
            {
              v95 = *(_QWORD **)v97;
              if (*(_QWORD *)v97)
              {
                boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)v97 + 16));
                v74 = v95;
                v83 = -235920773;
                goto LABEL_131;
              }
            }
            break;
          case 9:
            v80 = *(unint64_t **)v97;
            do
            {
              v81 = __ldaxr(v80);
              v82 = v81 - 1;
            }
            while (__stlxr(v82, v80));
            if (!v82)
            {
              result = *(_QWORD *)v97;
              if (*(_QWORD *)v97)
              {
                v74 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*(_QWORD **)v97);
                v83 = 2071181815;
LABEL_131:
                v75 = v83 | 0x1030C4000000000;
LABEL_132:
                result = MEMORY[0x219A19A08](v74, v75);
              }
            }
            break;
          default:
            return result;
        }
      }
      else
      {
        switch(*(_BYTE *)(v12 + 12))
        {
          case 2:
            v44 = *(unint64_t **)v12;
            do
            {
              v45 = __ldaxr(v44);
              v46 = v45 - 1;
            }
            while (__stlxr(v46, v44));
            if (!v46)
            {
              v47 = *(unint64_t **)v12;
              if (!*(_QWORD *)v12)
                goto LABEL_92;
              if (*((char *)v47 + 31) < 0)
                operator delete((void *)v47[1]);
              v48 = v47;
              v49 = 0x1012C404EF22A49;
              goto LABEL_91;
            }
            break;
          case 3:
            v58 = *(unint64_t **)v12;
            do
            {
              v59 = __ldaxr(v58);
              v60 = v59 - 1;
            }
            while (__stlxr(v60, v58));
            if (!v60)
            {
              v61 = *(unint64_t **)v12;
              if (!*(_QWORD *)v12)
                goto LABEL_92;
              v62 = (void *)v61[1];
              if (v62)
              {
                v61[2] = (unint64_t)v62;
                operator delete(v62);
              }
              v48 = v61;
              v49 = 0x1080C409938AC02;
              goto LABEL_91;
            }
            break;
          case 4:
            v50 = *(unint64_t **)v12;
            do
            {
              v51 = __ldaxr(v50);
              v52 = v51 - 1;
            }
            while (__stlxr(v52, v50));
            if (!v52)
            {
              v53 = *(unint64_t **)v12;
              if (!*(_QWORD *)v12)
                goto LABEL_92;
              v96 = (void **)(v53 + 1);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v96);
              goto LABEL_84;
            }
            break;
          case 5:
            v63 = *(unint64_t **)v12;
            do
            {
              v64 = __ldaxr(v63);
              v65 = v64 - 1;
            }
            while (__stlxr(v65, v63));
            if (!v65)
            {
              v53 = *(unint64_t **)v12;
              if (!*(_QWORD *)v12)
                goto LABEL_92;
              v96 = (void **)(v53 + 1);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v96);
LABEL_84:
              v48 = v53;
              v49 = 0x1020C405E66F15BLL;
              goto LABEL_91;
            }
            break;
          case 8:
            v66 = *(unint64_t **)v12;
            do
            {
              v67 = __ldaxr(v66);
              v68 = v67 - 1;
            }
            while (__stlxr(v68, v66));
            if (!v68)
            {
              v69 = *(unint64_t **)v12;
              if (!*(_QWORD *)v12)
                goto LABEL_92;
              boost::detail::shared_count::~shared_count((unsigned int **)v69 + 2);
              v48 = v69;
              v57 = -235920773;
              goto LABEL_90;
            }
            break;
          case 9:
            v54 = *(unint64_t **)v12;
            do
            {
              v55 = __ldaxr(v54);
              v56 = v55 - 1;
            }
            while (__stlxr(v56, v54));
            if (!v56)
            {
              result = *(_QWORD *)v12;
              if (*(_QWORD *)v12)
              {
                v48 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)result);
                v57 = 2071181815;
LABEL_90:
                v49 = v57 | 0x1030C4000000000;
LABEL_91:
                result = MEMORY[0x219A19A08](v48, v49);
              }
LABEL_92:
              *(_QWORD *)v12 = 0;
            }
            break;
          default:
            break;
        }
        *(_QWORD *)(v12 + 5) = *(_QWORD *)&v97[5];
        *(_QWORD *)v12 = *(_QWORD *)v97;
        *(_BYTE *)(v12 + 12) = v97[12];
      }
    }
  }
  return result;
}

unint64_t **std::__unique[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<turi::flexible_type *>,std::__wrap_iter<turi::flexible_type *>,std::__equal_to &>(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t **result;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  unint64_t **v10;
  unint64_t **v11;
  unint64_t **v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  void *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t *v34;
  unsigned int v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t *v39;
  void *v40;
  void *v41;
  unint64_t *v42;
  void **v43;

  result = (unint64_t **)a2;
  if (a1 != a2)
  {
    do
    {
      v7 = a1 + 16;
      if (a1 + 16 == a2)
        return (unint64_t **)a2;
      v8 = std::__equal_to::operator()[abi:ne180100]<turi::flexible_type,turi::flexible_type>(a3, a1, (uint64_t)(a1 + 16));
      a1 = (unsigned __int8 *)v7;
    }
    while (!v8);
    v9 = (uint64_t)(v7 + 2);
    v10 = (unint64_t **)(v7 - 2);
    if (v7 + 2 == (_QWORD *)a2)
    {
      v12 = (unint64_t **)(v7 - 2);
    }
    else
    {
      do
      {
        v11 = (unint64_t **)v7;
        v7 = (_QWORD *)v9;
        if ((std::__equal_to::operator()[abi:ne180100]<turi::flexible_type,turi::flexible_type>(a3, (unsigned __int8 *)v10, v9) & 1) != 0)
        {
          v12 = v10;
        }
        else
        {
          v12 = v10 + 2;
          if (v11 != v10)
          {
            switch(*((_BYTE *)v10 + 28))
            {
              case 2:
                v13 = *v12;
                do
                {
                  v14 = __ldaxr(v13);
                  v15 = v14 - 1;
                }
                while (__stlxr(v15, v13));
                if (!v15)
                {
                  v16 = *v12;
                  if (!*v12)
                    goto LABEL_50;
                  if (*((char *)v16 + 31) < 0)
                    operator delete((void *)v16[1]);
                  v17 = v16;
                  v18 = 0x1012C404EF22A49;
                  goto LABEL_49;
                }
                break;
              case 3:
                v19 = *v12;
                do
                {
                  v20 = __ldaxr(v19);
                  v21 = v20 - 1;
                }
                while (__stlxr(v21, v19));
                if (!v21)
                {
                  v22 = *v12;
                  if (!*v12)
                    goto LABEL_50;
                  v23 = (void *)v22[1];
                  if (v23)
                  {
                    v22[2] = (unint64_t)v23;
                    operator delete(v23);
                  }
                  v17 = v22;
                  v18 = 0x1080C409938AC02;
                  goto LABEL_49;
                }
                break;
              case 4:
                v24 = *v12;
                do
                {
                  v25 = __ldaxr(v24);
                  v26 = v25 - 1;
                }
                while (__stlxr(v26, v24));
                if (!v26)
                {
                  v27 = *v12;
                  if (!*v12)
                    goto LABEL_50;
                  v43 = (void **)(v27 + 1);
                  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v43);
                  goto LABEL_33;
                }
                break;
              case 5:
                v28 = *v12;
                do
                {
                  v29 = __ldaxr(v28);
                  v30 = v29 - 1;
                }
                while (__stlxr(v30, v28));
                if (!v30)
                {
                  v27 = *v12;
                  if (!*v12)
                    goto LABEL_50;
                  v43 = (void **)(v27 + 1);
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v43);
LABEL_33:
                  v17 = v27;
                  v18 = 0x1020C405E66F15BLL;
                  goto LABEL_49;
                }
                break;
              case 8:
                v31 = *v12;
                do
                {
                  v32 = __ldaxr(v31);
                  v33 = v32 - 1;
                }
                while (__stlxr(v33, v31));
                if (!v33)
                {
                  v34 = *v12;
                  if (!*v12)
                    goto LABEL_50;
                  boost::detail::shared_count::~shared_count((unsigned int **)v34 + 2);
                  v17 = v34;
                  v35 = -235920773;
                  goto LABEL_48;
                }
                break;
              case 9:
                v36 = *v12;
                do
                {
                  v37 = __ldaxr(v36);
                  v38 = v37 - 1;
                }
                while (__stlxr(v38, v36));
                if (!v38)
                {
                  v39 = *v12;
                  if (*v12)
                  {
                    v40 = (void *)v39[6];
                    if (v40)
                    {
                      v39[7] = (unint64_t)v40;
                      operator delete(v40);
                    }
                    v41 = (void *)v39[3];
                    if (v41)
                    {
                      v39[4] = (unint64_t)v41;
                      operator delete(v41);
                    }
                    std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v39 + 1));
                    v17 = v39;
                    v35 = 2071181815;
LABEL_48:
                    v18 = v35 | 0x1030C4000000000;
LABEL_49:
                    MEMORY[0x219A19A08](v17, v18);
                  }
LABEL_50:
                  *v12 = 0;
                }
                break;
              default:
                break;
            }
            v42 = (unint64_t *)*v7;
            *(unint64_t **)((char *)v10 + 21) = *(unint64_t **)((char *)v7 + 5);
            *v12 = v42;
            *((_BYTE *)v10 + 28) = *((_BYTE *)v11 + 28);
            *((_BYTE *)v11 + 28) = 0;
          }
        }
        v9 = (uint64_t)(v7 + 2);
        v10 = v12;
      }
      while (v7 + 2 != (_QWORD *)a2);
    }
    return v12 + 2;
  }
  return result;
}

_QWORD *std::vector<std::vector<turi::flexible_type>>::__construct_one_at_end[abi:ne180100]<std::vector<turi::flexible_type> const&>(uint64_t a1, uint64_t **a2)
{
  _QWORD *v3;
  _QWORD *result;

  v3 = *(_QWORD **)(a1 + 8);
  *v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  result = std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v3, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 4);
  *(_QWORD *)(a1 + 8) = v3 + 3;
  return result;
}

void sub_21815DFCC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<turi::flexible_type>>::__push_back_slow_path<std::vector<turi::flexible_type> const&>(uint64_t *a1, uint64_t **a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void *v14[2];
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[24 * v9];
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v11, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 4);
  v15 += 24;
  std::vector<std::vector<turi::flexible_type>>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<std::vector<turi::flexible_type>>::~__split_buffer(v14);
  return v12;
}

void sub_21815E0D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<turi::flexible_type>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void turi::sarray_reader<std::string>::init(uint64_t a1, uint64_t a2, std::string::size_type a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  std::string::size_type v9;
  std::string::size_type v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  std::string::size_type *v17;
  std::string::size_type *v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  _QWORD *v31;
  uint64_t v32;
  std::string v33;
  unint64_t v34;
  void *v35;
  char v36;
  void *__p;
  void *v38;
  uint64_t v39;
  _QWORD *v40[3];
  char *v41;
  char *v42;
  char *v43;
  std::string *v44;

  assert_msg(*(_QWORD *)(a1 + 8) == 0, "Reader already inited");
  turi::sarray_reader<std::string>::open_format_reader(a1, a2);
  v41 = 0;
  v42 = 0;
  v43 = 0;
  v31 = (_QWORD *)a1;
  v32 = a2;
  if (a3 == -1)
  {
    turi::index_file_information::index_file_information(&v33, (const turi::index_file_information *)(a2 + 8));
    if (v34)
    {
      v19 = 0;
      v20 = 0;
      v21 = v42;
      do
      {
        v22 = v20;
        v20 += *((_QWORD *)__p + v19);
        if (v21 >= v43)
        {
          v23 = v41;
          v24 = (v21 - v41) >> 4;
          v25 = v24 + 1;
          if ((unint64_t)(v24 + 1) >> 60)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          v26 = v43 - v41;
          if ((v43 - v41) >> 3 > v25)
            v25 = v26 >> 3;
          if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF0)
            v27 = 0xFFFFFFFFFFFFFFFLL;
          else
            v27 = v25;
          if (v27)
          {
            v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::flexible_type>>((uint64_t)&v43, v27);
            v23 = v41;
            v21 = v42;
          }
          else
          {
            v28 = 0;
          }
          v29 = &v28[16 * v24];
          *(_QWORD *)v29 = v22;
          *((_QWORD *)v29 + 1) = v20;
          v30 = v29;
          if (v21 != v23)
          {
            do
            {
              *((_OWORD *)v30 - 1) = *((_OWORD *)v21 - 1);
              v30 -= 16;
              v21 -= 16;
            }
            while (v21 != v23);
            v23 = v41;
          }
          v21 = v29 + 16;
          v41 = v30;
          v42 = v29 + 16;
          v43 = &v28[16 * v27];
          if (v23)
            operator delete(v23);
        }
        else
        {
          *(_QWORD *)v21 = v22;
          *((_QWORD *)v21 + 1) = v20;
          v21 += 16;
        }
        v42 = v21;
        ++v19;
      }
      while (v19 < v34);
    }
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v40, v40[1]);
    v44 = (std::string *)&v39;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v44);
    if (__p)
    {
      v38 = __p;
      operator delete(__p);
    }
    if (v36 < 0)
      operator delete(v35);
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v33.__r_.__value_.__l.__data_);
  }
  else
  {
    v33.__r_.__value_.__r.__words[0] = a3;
    if (!a3)
    {
      v44 = &v33;
      turi::sarray_reader<turi::flexible_type>::init(turi::sarray<turi::flexible_type> const&,unsigned long)::{lambda(void)#1}::operator()();
    }
    v6 = turi::sarray_reader<turi::flexible_type>::size(a1);
    v7 = 0;
    v8 = v42;
    do
    {
      v9 = v7 * v6 / a3;
      v10 = ++v7 * v6 / a3;
      if (v8 >= v43)
      {
        v11 = v41;
        v12 = (v8 - v41) >> 4;
        v13 = v12 + 1;
        if ((unint64_t)(v12 + 1) >> 60)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v14 = v43 - v41;
        if ((v43 - v41) >> 3 > v13)
          v13 = v14 >> 3;
        if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
          v15 = 0xFFFFFFFFFFFFFFFLL;
        else
          v15 = v13;
        if (v15)
        {
          v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::flexible_type>>((uint64_t)&v43, v15);
          v11 = v41;
          v8 = v42;
        }
        else
        {
          v16 = 0;
        }
        v17 = (std::string::size_type *)&v16[16 * v12];
        *v17 = v9;
        v17[1] = v10;
        v18 = v17;
        if (v8 != v11)
        {
          do
          {
            *((_OWORD *)v18 - 1) = *((_OWORD *)v8 - 1);
            v18 -= 2;
            v8 -= 16;
          }
          while (v8 != v11);
          v11 = v41;
        }
        v8 = (char *)(v17 + 2);
        v41 = (char *)v18;
        v42 = (char *)(v17 + 2);
        v43 = &v16[16 * v15];
        if (v11)
          operator delete(v11);
      }
      else
      {
        *(_QWORD *)v8 = v9;
        *((_QWORD *)v8 + 1) = v10;
        v8 += 16;
      }
      v42 = v8;
    }
    while (v7 != a3);
  }
  turi::sarray_reader<std::string>::create_segment_read_buffers(v31, &v41);
  if (v31 + 17 != (_QWORD *)(v32 + 256))
    std::vector<std::shared_ptr<turi::fileio::file_ownership_handle>>::__assign_with_size[abi:ne180100]<std::shared_ptr<turi::fileio::file_ownership_handle>*,std::shared_ptr<turi::fileio::file_ownership_handle>*>((uint64_t)(v31 + 17), *(uint64_t **)(v32 + 256), *(uint64_t **)(v32 + 264), (uint64_t)(*(_QWORD *)(v32 + 264) - *(_QWORD *)(v32 + 256)) >> 4);
  if (v41)
  {
    v42 = v41;
    operator delete(v41);
  }
}

void sub_21815E428(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  uint64_t v12;
  void *v14;

  v14 = *(void **)(v12 - 120);
  if (v14)
  {
    *(_QWORD *)(v12 - 112) = v14;
    operator delete(v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t turi::sarray_reader<std::string>::sarray_reader(uint64_t a1)
{
  int v2;

  *(_QWORD *)a1 = &unk_24D930B50;
  *(_QWORD *)(a1 + 8) = 0;
  v2 = pthread_mutex_init((pthread_mutex_t *)(a1 + 16), 0);
  assert_msg(v2 == 0, "Mutex create error %d", v2);
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = a1 + 96;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_QWORD *)(a1 + 176) = 0;
  return a1;
}

void turi::sarray_reader<std::string>::~sarray_reader(uint64_t a1)
{
  turi::sarray_reader<std::string>::~sarray_reader(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t turi::sarray_reader<std::string>::begin@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  pthread_mutex_t *v6;
  _QWORD *i;
  unint64_t v8;
  unint64_t v9;
  unint64_t v11;

  v11 = a2;
  v6 = (pthread_mutex_t *)(a1 + 16);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 16));
  for (i = *(_QWORD **)(a1 + 96); i; i = (_QWORD *)*i)
  {
    v8 = i[4];
    if (v8 <= a2)
    {
      if (v8 >= a2)
        turi::sarray_reader<turi::flexible_type>::begin(unsigned long)const::{lambda(void)#1}::operator()();
      ++i;
    }
  }
  std::__tree<unsigned long>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t **)(a1 + 88), &v11, (uint64_t *)&v11);
  if (!*(_QWORD *)(a1 + 8))
    turi::sarray_reader<turi::flexible_type>::begin(unsigned long)const::{lambda(void)#2}::operator()();
  v9 = v11;
  if (v9 >= (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1))
    turi::sarray_reader<turi::flexible_type>::begin(unsigned long)const::{lambda(void)#3}::operator()();
  turi::sarray_iterator<std::string>::sarray_iterator(a3, (uint64_t *)(*(_QWORD *)(a1 + 160) + 96 * v11), v11, 1);
  return pthread_mutex_unlock(v6);
}

void sub_21815E5F8(_Unwind_Exception *a1)
{
  pthread_mutex_t *v1;

  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

unint64_t turi::sarray_reader<std::string>::end@<X0>(_QWORD *a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  unint64_t result;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[2];
  unint64_t v10;
  _QWORD *v11;

  v9[0] = a1[1];
  if (!v9[0])
  {
    v11 = v9;
    turi::sarray_reader<turi::flexible_type>::end(unsigned long)const::{lambda(void)#1}::operator()();
  }
  v11 = (_QWORD *)a2;
  result = (*(uint64_t (**)(_QWORD *))(*a1 + 16))(a1);
  v10 = result;
  if (result <= a2)
  {
    v9[0] = &v11;
    v9[1] = &v10;
    turi::sarray_reader<turi::flexible_type>::end(unsigned long)const::{lambda(void)#2}::operator()();
  }
  v7 = a1[20] + 96 * a2;
  *a3 = v7;
  a3[1] = a2;
  a3[2] = 0;
  a3[3] = 0;
  v8 = *(_QWORD *)(v7 + 72) - *(_QWORD *)(v7 + 56);
  a3[5] = v8;
  a3[6] = v8;
  a3[4] = 0;
  return result;
}

uint64_t turi::sarray_reader<std::string>::reset_iterators(uint64_t a1)
{
  _QWORD *v1;
  pthread_mutex_t *v2;
  _QWORD *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;

  v1 = (_QWORD *)a1;
  v2 = (pthread_mutex_t *)(a1 + 16);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 16));
  v3 = (_QWORD *)v1[12];
  v1 += 12;
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)(v1 - 1), v3);
  *(v1 - 1) = v1;
  *v1 = 0;
  v1[1] = 0;
  v4 = (uint64_t *)v1[8];
  v5 = (uint64_t *)v1[9];
  while (v4 != v5)
  {
    std::vector<std::string>::__clear[abi:ne180100](v4);
    v6 = v4[7];
    v4[8] = v6;
    v4[11] = v6;
    v4[6] = 0;
    v4 += 12;
  }
  return pthread_mutex_unlock(v2);
}

uint64_t turi::sarray_reader<std::string>::~sarray_reader(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void **v5;

  *(_QWORD *)a1 = &unk_24D930B50;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v5 = (void **)(a1 + 160);
  std::vector<turi::sarray_reader_buffer<std::string>>::__destroy_vector::operator()[abi:ne180100](&v5);
  v5 = (void **)(a1 + 136);
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v5);
  v3 = *(void **)(a1 + 112);
  if (v3)
  {
    *(_QWORD *)(a1 + 120) = v3;
    operator delete(v3);
  }
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy(a1 + 88, *(_QWORD **)(a1 + 96));
  turi::mutex::~mutex((pthread_mutex_t *)(a1 + 16));
  return a1;
}

uint64_t turi::sarray_iterator<std::string>::sarray_iterator(uint64_t a1, uint64_t *a2, uint64_t a3, int a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;

  *(_OWORD *)(a1 + 16) = 0u;
  v5 = a1 + 16;
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_OWORD *)(a1 + 32) = 0u;
  v6 = a2[9] - a2[7];
  *(_QWORD *)(a1 + 48) = v6;
  if (a4 && v6)
  {
    v7 = turi::sarray_reader_buffer<std::string>::next(a2);
    if (*(char *)(a1 + 39) < 0)
      operator delete(*(void **)v5);
    v6 = 0;
    v8 = *(_OWORD *)v7;
    *(_QWORD *)(v5 + 16) = *(_QWORD *)(v7 + 16);
    *(_OWORD *)v5 = v8;
    *(_BYTE *)(v7 + 23) = 0;
    *(_BYTE *)v7 = 0;
  }
  *(_QWORD *)(a1 + 40) = v6;
  return a1;
}

void sub_21815E868(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 39) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void turi::sarray_reader<std::string>::open_format_reader(uint64_t a1, uint64_t a2)
{
  const turi::index_file_information *v3;
  uint64_t v4;
  uint64_t v5;
  std::string v6;
  void *v7;
  char v8;
  void *v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12[3];
  std::string v13;
  int v14;
  void *v15;
  char v16;
  void *__p;
  void *v18;
  uint64_t v19;
  _QWORD *v20[3];
  void **v21;

  v3 = (const turi::index_file_information *)(a2 + 8);
  turi::index_file_information::index_file_information(&v13, (const turi::index_file_information *)(a2 + 8));
  v4 = v14;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v20, v20[1]);
  v21 = (void **)&v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v21);
  if (__p)
  {
    v18 = __p;
    operator delete(__p);
  }
  if (v16 < 0)
    operator delete(v15);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  if (v4 != 2)
  {
    if (v4 != 1)
    {
      if (!v4)
        turi::sarray_reader<turi::flexible_type>::open_format_reader(turi::sarray<turi::flexible_type> const&)::{lambda(void)#1}::operator()();
      *(_QWORD *)(a1 + 8) = 0;
      turi::sarray_reader<turi::flexible_type>::open_format_reader(turi::sarray<turi::flexible_type> const&)::{lambda(void)#3}::operator()();
    }
    turi::sarray_reader<turi::flexible_type>::open_format_reader(turi::sarray<turi::flexible_type> const&)::{lambda(void)#2}::operator()();
  }
  v5 = operator new();
  turi::sarray_format_reader_v2<std::string>::sarray_format_reader_v2(v5);
  *(_QWORD *)(a1 + 8) = v5;
  turi::index_file_information::index_file_information(&v6, v3);
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v5 + 16))(v5, &v6);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v12, v12[1]);
  v13.__r_.__value_.__r.__words[0] = (std::string::size_type)&v11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v13);
  if (v9)
  {
    v10 = v9;
    operator delete(v9);
  }
  if (v8 < 0)
    operator delete(v7);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
}

void sub_21815E9E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  turi::index_file_information::~index_file_information((turi::index_file_information *)va);
  _Unwind_Resume(a1);
}

void turi::sarray_reader<std::string>::create_segment_read_buffers(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;

  v4 = (uint64_t)(a2[1] - *a2) >> 4;
  a1[10] = v4;
  std::vector<unsigned long>::resize((uint64_t)(a1 + 14), v4);
  std::vector<turi::sarray_reader_buffer<std::string>>::resize(a1 + 20, a1[10]);
  v5 = a1[14];
  if (a1[15] != v5)
  {
    v6 = 0;
    v7 = 0;
    v8 = 8;
    do
    {
      v9 = (unint64_t *)(*a2 + v8);
      *(_QWORD *)(v5 + 8 * v7) = *v9 - *(v9 - 1);
      v10 = a1[20] + v6;
      v11 = *(v9 - 1);
      v12 = *v9;
      *(_QWORD *)(v10 + 40) = a1;
      *(_QWORD *)(v10 + 48) = 0;
      *(_QWORD *)(v10 + 88) = v11;
      *(int64x2_t *)(v10 + 56) = vdupq_n_s64(v11);
      v13 = turi::sarray_reader<turi::flexible_type>::size((uint64_t)a1);
      if (v13 >= v12)
        v14 = v12;
      else
        v14 = v13;
      *(_QWORD *)(v10 + 72) = v14;
      *(_QWORD *)(v10 + 80) = 1024;
      std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)v10);
      ++v7;
      v5 = a1[14];
      v6 += 96;
      v8 += 16;
    }
    while (v7 < (a1[15] - v5) >> 3);
  }
}

uint64_t turi::sarray_format_reader_v2<std::string>::sarray_format_reader_v2(uint64_t a1)
{
  uint64_t instance;
  int v3;

  *(_QWORD *)a1 = &unk_24D930BC8;
  instance = turi::v2_block_impl::block_manager::get_instance((turi::v2_block_impl::block_manager *)a1);
  *(_OWORD *)(a1 + 168) = 0u;
  *(_QWORD *)(a1 + 8) = instance;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 40) = -1;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = a1 + 144;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_QWORD *)(a1 + 232) = 0;
  v3 = pthread_mutex_init((pthread_mutex_t *)(a1 + 240), 0);
  assert_msg(v3 == 0, "Mutex create error %d", v3);
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 352) = 0;
  *(_QWORD *)(a1 + 336) = 0;
  return a1;
}

void sub_21815EBDC(_Unwind_Exception *a1)
{
  uint64_t v1;
  turi::index_file_information *v2;
  void **v3;
  void **v4;
  void *v6;

  v6 = *(void **)(v1 + 216);
  if (v6)
  {
    *(_QWORD *)(v1 + 224) = v6;
    operator delete(v6);
  }
  turi::sarray_format_reader_v2<turi::flexible_type>::sarray_format_reader_v2(v4, v3, v1);
  turi::index_file_information::~index_file_information(v2);
  _Unwind_Resume(a1);
}

void turi::sarray_format_reader_v2<std::string>::~sarray_format_reader_v2(uint64_t a1)
{
  turi::sarray_format_reader_v2<std::string>::~sarray_format_reader_v2(a1);
  JUMPOUT(0x219A19A08);
}

void turi::sarray_format_reader_v2<std::string>::open(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;
  __int128 v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  unint64_t *v23;
  char *v24;
  char *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t all_block_info;
  _QWORD *v29;
  unint64_t i;
  unint64_t v31;
  char *v32;
  _QWORD *v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t *v44;
  _QWORD *v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  char *v50;
  unint64_t *v51;
  char *v52;
  char *v53;
  unint64_t *v54;
  __int128 v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  turi::v2_block_impl::typed_decode_stream **v60;
  turi::v2_block_impl::typed_decode_stream **j;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  char *v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  unint64_t v71;
  char *v72;
  _QWORD *v73;
  char *v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  char *v79;
  char *v80;
  char *v81;
  uint64_t v82;
  char **v83;
  uint64_t v84;
  uint64_t v85;
  void **v86;
  char **v87;
  std::string v88;

  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  std::string::operator=((std::string *)(a1 + 16), (const std::string *)a2);
  v4 = *(_QWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 56) = v4;
  std::string::operator=((std::string *)(a1 + 64), (const std::string *)(a2 + 48));
  if (a1 + 16 != a2)
  {
    std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((char *)(a1 + 88), *(char **)(a2 + 72), *(_QWORD *)(a2 + 80), (uint64_t)(*(_QWORD *)(a2 + 80) - *(_QWORD *)(a2 + 72)) >> 3);
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)(a1 + 112), *(std::string **)(a2 + 96), *(__int128 **)(a2 + 104), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 104) - *(_QWORD *)(a2 + 96)) >> 3));
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>((uint64_t **)(a1 + 136), *(__int128 **)(a2 + 120), (__int128 *)(a2 + 128));
  }
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a1 + 168);
  v86 = (void **)(a1 + 192);
  v87 = (char **)(a1 + 168);
  v5 = *(_QWORD *)(a1 + 216);
  v83 = (char **)(a1 + 216);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a1 + 192);
  *(_QWORD *)(a1 + 224) = v5;
  *(_QWORD *)(a1 + 160) = 0;
  v6 = *(_QWORD *)(a2 + 96);
  if (*(_QWORD *)(a2 + 104) == v6)
  {
    v8 = 0;
  }
  else
  {
    v7 = 0;
    v8 = 0;
    v84 = a2;
    do
    {
      v9 = *(_QWORD *)(a1 + 8);
      v10 = (__int128 *)(v6 + 24 * v7);
      if (*((char *)v10 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v88, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
      }
      else
      {
        v11 = *v10;
        v88.__r_.__value_.__r.__words[2] = *((_QWORD *)v10 + 2);
        *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v11;
      }
      v12 = turi::v2_block_impl::block_manager::open_column(v9, (uint64_t)&v88);
      v14 = v13;
      if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v88.__r_.__value_.__l.__data_);
      v16 = *(unint64_t **)(a1 + 224);
      v15 = *(_QWORD *)(a1 + 232);
      v85 = v7;
      if ((unint64_t)v16 >= v15)
      {
        v18 = ((char *)v16 - *v83) >> 4;
        v19 = v18 + 1;
        if ((unint64_t)(v18 + 1) >> 60)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v20 = v15 - (_QWORD)*v83;
        if (v20 >> 3 > v19)
          v19 = v20 >> 3;
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0)
          v21 = 0xFFFFFFFFFFFFFFFLL;
        else
          v21 = v19;
        if (v21)
          v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::flexible_type>>(a1 + 232, v21);
        else
          v22 = 0;
        v23 = (unint64_t *)&v22[16 * v18];
        *v23 = v12;
        v23[1] = v14;
        v25 = *(char **)(a1 + 216);
        v24 = *(char **)(a1 + 224);
        v26 = v23;
        if (v24 != v25)
        {
          do
          {
            *((_OWORD *)v26 - 1) = *((_OWORD *)v24 - 1);
            v26 -= 2;
            v24 -= 16;
          }
          while (v24 != v25);
          v24 = *v83;
        }
        v17 = v23 + 2;
        *(_QWORD *)(a1 + 216) = v26;
        *(_QWORD *)(a1 + 224) = v23 + 2;
        *(_QWORD *)(a1 + 232) = &v22[16 * v21];
        if (v24)
          operator delete(v24);
      }
      else
      {
        *v16 = v12;
        v16[1] = v14;
        v17 = v16 + 2;
      }
      *(_QWORD *)(a1 + 224) = v17;
      v27 = turi::v2_block_impl::block_manager::num_blocks_in_column(*(turi::v2_block_impl::block_manager **)(a1 + 8), v12, v14);
      all_block_info = turi::v2_block_impl::block_manager::get_all_block_info(*(turi::v2_block_impl::block_manager **)(a1 + 8), v12);
      if (v27)
      {
        v29 = (_QWORD *)all_block_info;
        for (i = 0; i != v27; ++i)
        {
          v32 = *(char **)(a1 + 200);
          v31 = *(_QWORD *)(a1 + 208);
          if ((unint64_t)v32 >= v31)
          {
            v34 = (char *)*v86;
            v35 = (v32 - (_BYTE *)*v86) >> 3;
            v36 = v35 + 1;
            if ((unint64_t)(v35 + 1) >> 61)
              std::vector<float>::__throw_length_error[abi:ne180100]();
            v37 = v31 - (_QWORD)v34;
            if (v37 >> 2 > v36)
              v36 = v37 >> 2;
            if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF8)
              v38 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v38 = v36;
            if (v38)
            {
              v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a1 + 208, v38);
              v34 = *(char **)(a1 + 192);
              v32 = *(char **)(a1 + 200);
            }
            else
            {
              v39 = 0;
            }
            v40 = &v39[8 * v35];
            *(_QWORD *)v40 = v8;
            v33 = v40 + 8;
            while (v32 != v34)
            {
              v41 = *((_QWORD *)v32 - 1);
              v32 -= 8;
              *((_QWORD *)v40 - 1) = v41;
              v40 -= 8;
            }
            *(_QWORD *)(a1 + 192) = v40;
            *(_QWORD *)(a1 + 200) = v33;
            *(_QWORD *)(a1 + 208) = &v39[8 * v38];
            if (v34)
              operator delete(v34);
          }
          else
          {
            *(_QWORD *)v32 = v8;
            v33 = v32 + 8;
          }
          *(_QWORD *)(a1 + 200) = v33;
          v42 = *(_QWORD *)(*(_QWORD *)(*v29 + 24 * v14) + 48 * i + 24);
          v44 = *(unint64_t **)(a1 + 176);
          v43 = *(_QWORD *)(a1 + 184);
          if ((unint64_t)v44 >= v43)
          {
            v46 = 0xAAAAAAAAAAAAAAABLL * (((char *)v44 - *v87) >> 3);
            v47 = v46 + 1;
            if (v46 + 1 > 0xAAAAAAAAAAAAAAALL)
              std::vector<float>::__throw_length_error[abi:ne180100]();
            v48 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v43 - (_QWORD)*v87) >> 3);
            if (2 * v48 > v47)
              v47 = 2 * v48;
            if (v48 >= 0x555555555555555)
              v49 = 0xAAAAAAAAAAAAAAALL;
            else
              v49 = v47;
            if (v49)
              v50 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>(a1 + 184, v49);
            else
              v50 = 0;
            v51 = (unint64_t *)&v50[24 * v46];
            *v51 = v12;
            v51[1] = v14;
            v51[2] = i;
            v53 = *(char **)(a1 + 168);
            v52 = *(char **)(a1 + 176);
            v54 = v51;
            if (v52 != v53)
            {
              do
              {
                v55 = *(_OWORD *)(v52 - 24);
                *(v54 - 1) = *((_QWORD *)v52 - 1);
                *(_OWORD *)(v54 - 3) = v55;
                v54 -= 3;
                v52 -= 24;
              }
              while (v52 != v53);
              v52 = *v87;
            }
            v45 = v51 + 3;
            *(_QWORD *)(a1 + 168) = v54;
            *(_QWORD *)(a1 + 176) = v51 + 3;
            *(_QWORD *)(a1 + 184) = &v50[24 * v49];
            if (v52)
              operator delete(v52);
          }
          else
          {
            *v44 = v12;
            v44[1] = v14;
            v45 = v44 + 3;
            v44[2] = i;
          }
          v8 += v42;
          *(_QWORD *)(a1 + 176) = v45;
        }
      }
      v7 = v85 + 1;
      v6 = *(_QWORD *)(v84 + 96);
    }
    while (v85 + 1 < 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v84 + 104) - v6) >> 3));
  }
  v56 = *(uint64_t **)(a1 + 88);
  v57 = *(uint64_t **)(a1 + 96);
  if (v56 != v57)
  {
    v58 = *(_QWORD *)(a1 + 160);
    do
    {
      v59 = *v56++;
      v58 += v59;
      *(_QWORD *)(a1 + 160) = v58;
    }
    while (v56 != v57);
  }
  v60 = *(turi::v2_block_impl::typed_decode_stream ***)(a1 + 336);
  for (j = *(turi::v2_block_impl::typed_decode_stream ***)(a1 + 344);
        j != v60;
        std::allocator<turi::sarray_format_reader_v2<turi::flexible_type>::cache_entry>::destroy[abi:ne180100](a1 + 352, j))
  {
    j -= 23;
  }
  *(_QWORD *)(a1 + 344) = v60;
  std::vector<turi::sarray_format_reader_v2<std::string>::cache_entry,std::allocator<turi::sarray_format_reader_v2<std::string>::cache_entry>>::resize((uint64_t *)(a1 + 336), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 176) - *(_QWORD *)(a1 + 168)) >> 3));
  v62 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 176) - *(_QWORD *)(a1 + 168)) >> 3);
  v63 = *(_QWORD *)(a1 + 320);
  v64 = v62 >> 6;
  if ((v62 & 0x3F) != 0)
    ++v64;
  *(_QWORD *)(a1 + 312) = v62;
  *(_QWORD *)(a1 + 320) = v64;
  v65 = (char *)malloc_type_realloc(*(void **)(a1 + 304), 8 * v64, 0x100004000313F17uLL);
  v66 = v65;
  *(_QWORD *)(a1 + 304) = v65;
  v67 = *(_QWORD *)(a1 + 312) & 0x3FLL;
  if (v67)
    *(_QWORD *)&v65[8 * *(_QWORD *)(a1 + 320) - 8] &= ~(-1 << v67);
  v68 = *(_QWORD *)(a1 + 320);
  if (v68 > v63)
  {
    v69 = &v65[8 * v63];
    v70 = 8 * v68 - 8 * v63;
    if (v70 >= 1)
    {
      bzero(v69, 8 * (((unint64_t)v70 >> 3) - ((unint64_t)v70 > 7)) + 8);
      v68 = *(_QWORD *)(a1 + 320);
    }
  }
  if (v68 >= 1)
    bzero(v66, 8 * (v68 - ((v68 & 0x1FFFFFFFFFFFFFFFLL) != 0)) + 8);
  v71 = *(_QWORD *)(a1 + 208);
  v72 = *(char **)(a1 + 200);
  if ((unint64_t)v72 >= v71)
  {
    v74 = (char *)*v86;
    v75 = (v72 - (_BYTE *)*v86) >> 3;
    v76 = v75 + 1;
    if ((unint64_t)(v75 + 1) >> 61)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v77 = v71 - (_QWORD)v74;
    if (v77 >> 2 > v76)
      v76 = v77 >> 2;
    if ((unint64_t)v77 >= 0x7FFFFFFFFFFFFFF8)
      v78 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v78 = v76;
    if (v78)
    {
      v79 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a1 + 208, v78);
      v74 = *(char **)(a1 + 192);
      v72 = *(char **)(a1 + 200);
    }
    else
    {
      v79 = 0;
    }
    v80 = &v79[8 * v75];
    v81 = &v79[8 * v78];
    *(_QWORD *)v80 = *(_QWORD *)(a1 + 160);
    v73 = v80 + 8;
    while (v72 != v74)
    {
      v82 = *((_QWORD *)v72 - 1);
      v72 -= 8;
      *((_QWORD *)v80 - 1) = v82;
      v80 -= 8;
    }
    *(_QWORD *)(a1 + 192) = v80;
    *(_QWORD *)(a1 + 200) = v73;
    *(_QWORD *)(a1 + 208) = v81;
    if (v74)
      operator delete(v74);
  }
  else
  {
    *(_QWORD *)v72 = *(_QWORD *)(a1 + 160);
    v73 = v72 + 8;
  }
  *(_QWORD *)(a1 + 200) = v73;
  if (*(_QWORD *)(a1 + 160) != v8)
    turi::sarray_format_reader_v2<turi::flexible_type>::open(turi::index_file_information)::{lambda(void)#1}::operator()();
}

void sub_21815F2E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unint64_t turi::sarray_format_reader_v2<std::string>::read_rows(unint64_t *a1, unint64_t a2, unint64_t a3, std::vector<std::string> *this)
{
  unint64_t v6;
  BOOL v7;
  std::vector<std::string>::size_type v8;
  cppipc *v10;
  void *exception;

  if (a1[20] >= a3)
    v6 = a3;
  else
    v6 = a1[20];
  v7 = v6 >= a2;
  v8 = v6 - a2;
  if (v8 != 0 && v7)
  {
    std::vector<std::string>::resize(this, v8);
    turi::sarray_format_reader_v2<std::string>::fetch_rows_from_cache(a1, a2, v6, this);
    if (cppipc::must_cancel(v10))
    {
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(exception, "Cancelled by user.");
    }
    return 0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)this->__begin_) >> 3);
  }
  else
  {
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)this);
    return 0;
  }
}

void sub_21815F3BC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t turi::sarray_format_reader_v2<std::string>::~sarray_format_reader_v2(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void **v7;

  *(_QWORD *)a1 = &unk_24D930BC8;
  turi::sarray_format_reader_v2<turi::flexible_type>::close((uint64_t *)a1);
  v7 = (void **)(a1 + 336);
  std::vector<turi::sarray_format_reader_v2<turi::flexible_type>::cache_entry,std::allocator<turi::sarray_format_reader_v2<turi::flexible_type>::cache_entry>>::__destroy_vector::operator()[abi:ne180100](&v7);
  free(*(void **)(a1 + 304));
  turi::mutex::~mutex((pthread_mutex_t *)(a1 + 240));
  v2 = *(void **)(a1 + 216);
  if (v2)
  {
    *(_QWORD *)(a1 + 224) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 192);
  if (v3)
  {
    *(_QWORD *)(a1 + 200) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 168);
  if (v4)
  {
    *(_QWORD *)(a1 + 176) = v4;
    operator delete(v4);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1 + 136, *(_QWORD **)(a1 + 144));
  v7 = (void **)(a1 + 112);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v7);
  v5 = *(void **)(a1 + 88);
  if (v5)
  {
    *(_QWORD *)(a1 + 96) = v5;
    operator delete(v5);
  }
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

void std::vector<turi::sarray_format_reader_v2<std::string>::cache_entry,std::allocator<turi::sarray_format_reader_v2<std::string>::cache_entry>>::resize(uint64_t *a1, unint64_t a2)
{
  turi::v2_block_impl::typed_decode_stream **v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;

  v3 = (turi::v2_block_impl::typed_decode_stream **)a1[1];
  v4 = 0xD37A6F4DE9BD37A7 * (((uint64_t)v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<turi::sarray_format_reader_v2<std::string>::cache_entry,std::allocator<turi::sarray_format_reader_v2<std::string>::cache_entry>>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 184 * a2;
    while (v3 != (turi::v2_block_impl::typed_decode_stream **)v7)
    {
      v3 -= 23;
      std::allocator<turi::sarray_format_reader_v2<turi::flexible_type>::cache_entry>::destroy[abi:ne180100]((uint64_t)(a1 + 2), v3);
    }
    a1[1] = v7;
  }
}

void **std::vector<turi::sarray_format_reader_v2<std::string>::cache_entry,std::allocator<turi::sarray_format_reader_v2<std::string>::cache_entry>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  char *v14;
  uint64_t v15;
  char *v16;
  void *v17[2];
  char *v18;
  char *v19;
  uint64_t v20;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0xD37A6F4DE9BD37A7 * ((v6 - v7) >> 3) >= a2)
    return (void **)std::vector<turi::sarray_format_reader_v2<std::string>::cache_entry,std::allocator<turi::sarray_format_reader_v2<std::string>::cache_entry>>::__construct_at_end((uint64_t)a1, a2);
  v8 = 0xD37A6F4DE9BD37A7 * ((v7 - *a1) >> 3);
  v9 = v8 + a2;
  if (v8 + a2 > 0x1642C8590B21642)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  v10 = 0xD37A6F4DE9BD37A7 * ((v5 - *a1) >> 3);
  if (2 * v10 > v9)
    v9 = 2 * v10;
  if (v10 >= 0xB21642C8590B21)
    v11 = 0x1642C8590B21642;
  else
    v11 = v9;
  v20 = v4;
  if (v11)
    v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::sarray_format_reader_v2<turi::flexible_type>::cache_entry>>(v4, v11);
  else
    v12 = 0;
  v14 = &v12[184 * v8];
  v17[0] = v12;
  v17[1] = v14;
  v18 = v14;
  v19 = &v12[184 * v11];
  v15 = 184 * a2;
  v16 = &v14[184 * a2];
  do
  {
    *((_QWORD *)v14 + 22) = 0;
    *((_OWORD *)v14 + 9) = 0u;
    *((_OWORD *)v14 + 10) = 0u;
    *((_OWORD *)v14 + 7) = 0u;
    *((_OWORD *)v14 + 8) = 0u;
    *((_OWORD *)v14 + 5) = 0u;
    *((_OWORD *)v14 + 6) = 0u;
    *((_OWORD *)v14 + 3) = 0u;
    *((_OWORD *)v14 + 4) = 0u;
    *((_OWORD *)v14 + 1) = 0u;
    *((_OWORD *)v14 + 2) = 0u;
    *(_OWORD *)v14 = 0u;
    turi::sarray_format_reader_v2<turi::flexible_type>::cache_entry::cache_entry((uint64_t)v14);
    v14 += 184;
    v15 -= 184;
  }
  while (v15);
  v18 = v16;
  std::vector<turi::sarray_format_reader_v2<std::string>::cache_entry,std::allocator<turi::sarray_format_reader_v2<std::string>::cache_entry>>::__swap_out_circular_buffer(a1, v17);
  return std::__split_buffer<turi::sarray_format_reader_v2<turi::flexible_type>::cache_entry,std::allocator<turi::sarray_format_reader_v2<turi::flexible_type>::cache_entry> &>::~__split_buffer(v17);
}

void sub_21815F69C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<turi::sarray_format_reader_v2<turi::flexible_type>::cache_entry,std::allocator<turi::sarray_format_reader_v2<turi::flexible_type>::cache_entry> &>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<turi::sarray_format_reader_v2<std::string>::cache_entry,std::allocator<turi::sarray_format_reader_v2<std::string>::cache_entry>>::__construct_at_end(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = result;
  v3 = *(_QWORD *)(result + 8);
  if (a2)
  {
    v4 = v3 + 184 * a2;
    v5 = 184 * a2;
    do
    {
      *(_QWORD *)(v3 + 176) = 0;
      *(_OWORD *)(v3 + 144) = 0u;
      *(_OWORD *)(v3 + 160) = 0u;
      *(_OWORD *)(v3 + 112) = 0u;
      *(_OWORD *)(v3 + 128) = 0u;
      *(_OWORD *)(v3 + 80) = 0u;
      *(_OWORD *)(v3 + 96) = 0u;
      *(_OWORD *)(v3 + 48) = 0u;
      *(_OWORD *)(v3 + 64) = 0u;
      *(_OWORD *)(v3 + 16) = 0u;
      *(_OWORD *)(v3 + 32) = 0u;
      *(_OWORD *)v3 = 0u;
      result = turi::sarray_format_reader_v2<turi::flexible_type>::cache_entry::cache_entry(v3);
      v3 += 184;
      v5 -= 184;
    }
    while (v5);
    v3 = v4;
  }
  *(_QWORD *)(v2 + 8) = v3;
  return result;
}

void sub_21815F734(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<turi::sarray_format_reader_v2<std::string>::cache_entry,std::allocator<turi::sarray_format_reader_v2<std::string>::cache_entry>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::sarray_format_reader_v2<std::string>::cache_entry>,std::reverse_iterator<turi::sarray_format_reader_v2<std::string>::cache_entry*>,std::reverse_iterator<turi::sarray_format_reader_v2<std::string>::cache_entry*>,std::reverse_iterator<turi::sarray_format_reader_v2<std::string>::cache_entry*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::sarray_format_reader_v2<std::string>::cache_entry>,std::reverse_iterator<turi::sarray_format_reader_v2<std::string>::cache_entry*>,std::reverse_iterator<turi::sarray_format_reader_v2<std::string>::cache_entry*>,std::reverse_iterator<turi::sarray_format_reader_v2<std::string>::cache_entry*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  v13 = 0;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v9 -= 184;
      turi::sarray_format_reader_v2<turi::flexible_type>::cache_entry::cache_entry(v7 - 184, v9);
      v7 = *((_QWORD *)&v15 + 1) - 184;
      *((_QWORD *)&v15 + 1) -= 184;
    }
    while (v9 != a5);
    v10 = v15;
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::sarray_format_reader_v2<std::string>::cache_entry>,std::reverse_iterator<turi::sarray_format_reader_v2<std::string>::cache_entry*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

void sub_21815F854(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::sarray_format_reader_v2<std::string>::cache_entry>,std::reverse_iterator<turi::sarray_format_reader_v2<std::string>::cache_entry*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::sarray_format_reader_v2<std::string>::cache_entry>,std::reverse_iterator<turi::sarray_format_reader_v2<std::string>::cache_entry*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<turi::sarray_format_reader_v2<turi::flexible_type>::cache_entry>,std::reverse_iterator<turi::sarray_format_reader_v2<turi::flexible_type>::cache_entry*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void turi::sarray_format_reader_v2<std::string>::fetch_rows_from_cache(unint64_t *a1, unint64_t a2, unint64_t a3, _QWORD *a4)
{
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned __int8 *v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t **v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  BOOL v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE *v33;
  __int128 v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;

  v6 = a1;
  v7 = turi::sarray_format_reader_v2<turi::flexible_type>::block_offset_containing_row(a1, a2);
  v43 = a3;
  v41 = turi::sarray_format_reader_v2<turi::flexible_type>::block_offset_containing_row(v6, a3 - 1);
  if (v7 < v41 + 1)
  {
    v8 = 0;
    v44 = v6;
    do
    {
      v9 = v7;
      v10 = v6[24];
      v11 = *(_QWORD *)(v10 + 8 * v7);
      v12 = *(_QWORD *)(v10 + 8 * (v7 + 1));
      v13 = v6[42];
      v14 = (unsigned __int8 *)(v13 + 184 * v7);
      do
      {
        while (*v14 == 1)
          ;
        do
          v15 = __ldaxr(v14);
        while (__stlxr(1u, v14));
      }
      while (v15);
      v45 = v7 + 1;
      if (v11 <= a2)
        v16 = a2;
      else
        v16 = v11;
      v17 = v13 + 184 * v9;
      v20 = *(_QWORD *)(v17 + 24);
      v19 = (uint64_t **)(v17 + 24);
      v18 = v20;
      if (v12 >= v43)
        v21 = v43;
      else
        v21 = v12;
      v23 = (unint64_t *)(v19 - 2);
      v22 = (unint64_t)*(v19 - 2);
      if (v18)
        v24 = v22 > v16;
      else
        v24 = 1;
      if (v24)
      {
        turi::sarray_format_reader_v2<std::string>::fetch_cache_from_file(v6, v9, (uint64_t)v14);
        v22 = *v23;
      }
      v25 = v6[24];
      v26 = *(_QWORD *)(v25 + 8 * v9);
      if (v22 == v16)
      {
        v27 = v21;
        v24 = v21 > v16;
        v28 = v21 - v16;
        v40 = v27;
        if (v24)
        {
          v39 = v9;
          v29 = -24 * v26 + 24 * v16;
          v30 = 24 * v8;
          v8 = v8 + v27 - v16;
          do
          {
            v31 = **v19;
            v32 = *a4 + v30;
            if (*(char *)(v32 + 23) < 0)
              operator delete(*(void **)v32);
            v33 = (_BYTE *)(v31 + v29);
            v34 = *(_OWORD *)(v31 + v29);
            *(_QWORD *)(v32 + 16) = *(_QWORD *)(v31 + v29 + 16);
            *(_OWORD *)v32 = v34;
            v33[23] = 0;
            *v33 = 0;
            v29 += 24;
            v30 += 24;
            --v28;
          }
          while (v28);
          v6 = v44;
          v25 = v44[24];
          v23 = (unint64_t *)(v19 - 2);
          v9 = v39;
        }
        *v23 = v40;
        v7 = v45;
        v35 = v9;
        if (v40 == *(_QWORD *)(v25 + 8 * v45))
          turi::sarray_format_reader_v2<std::string>::release_cache(v6, v9);
      }
      else
      {
        v35 = v9;
        v36 = v21 - v16;
        if (v21 <= v16)
        {
          v7 = v45;
        }
        else
        {
          v37 = -24 * v26 + 24 * v16;
          v38 = 24 * v8;
          v7 = v45;
          do
          {
            std::string::operator=((std::string *)(*a4 + v38), (const std::string *)(**v19 + v37));
            ++v8;
            v37 += 24;
            v38 += 24;
            --v36;
          }
          while (v36);
        }
      }
      __dmb(0xBu);
      *v14 = 0;
      v6 = v44;
    }
    while (v35 != v41);
  }
}

void sub_21815FAF0(_Unwind_Exception *a1)
{
  _BYTE *v1;

  __dmb(0xBu);
  *v1 = 0;
  _Unwind_Resume(a1);
}

void turi::sarray_format_reader_v2<std::string>::fetch_cache_from_file(unint64_t *a1, unint64_t a2, uint64_t a3)
{
  uint64_t *v6;
  uint64_t **v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  __int128 v22;
  uint64_t v23;
  __int128 v24;

  v7 = (uint64_t **)(a3 + 24);
  v6 = *(uint64_t **)(a3 + 24);
  if (!v6)
  {
    turi::buffer_pool<std::vector<std::string>>::get_new_buffer(&turi::sarray_format_reader_v2<std::string>::m_buffer_pool, (uint64_t)&v24);
    std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)v7, &v24);
    v8 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
    if (*((_QWORD *)&v24 + 1))
    {
      v9 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    v6 = *v7;
  }
  v11 = a1[21] + 24 * a2;
  v12 = a1[1];
  v13 = *(_QWORD *)(v11 + 16);
  v22 = *(_OWORD *)v11;
  v23 = v13;
  if (!turi::v2_block_impl::block_manager::read_block<std::string>(v12, &v22, v6, 0))
    turi::sarray_format_reader_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::fetch_cache_from_file(unsigned long,turi::sarray_format_reader_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::cache_entry &)::{lambda(void)#1}::operator()();
  *(_QWORD *)(a3 + 8) = *(_QWORD *)(a1[24] + 8 * a2);
  *(_WORD *)(a3 + 16) = 256;
  v14 = a1[38];
  if ((*(_QWORD *)(v14 + 8 * (a2 >> 6)) & (1 << a2)) == 0)
  {
    v15 = a1 + 41;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 + 1, v15));
    v14 = a1[38];
  }
  v17 = (unint64_t *)(v14 + 8 * (a2 >> 6));
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 | (1 << a2), v17));
  v19 = a1[41];
  if (v19 != turi::SFRAME_MAX_BLOCKS_IN_CACHE)
  {
    v20 = turi::SFRAME_MAX_BLOCKS_IN_CACHE - v19;
    do
    {
      if (a1[41] <= turi::SFRAME_MAX_BLOCKS_IN_CACHE)
        break;
      turi::sarray_format_reader_v2<std::string>::try_evict_something_from_cache((turi::random *)a1);
    }
    while (!__CFADD__(v20++, 1));
  }
}

void turi::sarray_format_reader_v2<std::string>::release_cache(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  v2 = a1[42];
  if (*(_BYTE *)(v2 + 184 * a2 + 17))
  {
    v5 = 184 * a2;
    turi::buffer_pool<std::vector<std::string>>::release_buffer((uint64_t)&turi::sarray_format_reader_v2<std::string>::m_buffer_pool, (uint64_t **)(v2 + 184 * a2 + 24));
    std::shared_ptr<turi::neural_net::Subscriber<std::unique_ptr<turi::style_transfer::Checkpoint>>>::reset[abi:ne180100]((_QWORD *)(a1[42] + v5 + 24));
    turi::v2_block_impl::encoded_block::release((turi::v2_block_impl::encoded_block *)(a1[42] + v5 + 40));
    turi::v2_block_impl::encoded_block_range::release((turi::v2_block_impl::typed_decode_stream **)(a1[42] + v5 + 112));
    *(_BYTE *)(a1[42] + v5 + 17) = 0;
    v6 = (unint64_t *)(a1[38] + 8 * (a2 >> 6));
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 & ~(1 << a2), v6));
    v8 = a1 + 41;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
  }
}

uint64_t turi::buffer_pool<std::vector<std::string>>::get_new_buffer@<X0>(pthread_mutex_t *a1@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t result;
  _QWORD *v15;

  v4 = &a1[1].__opaque[24];
  if (!*(_QWORD *)a1[2].__opaque)
  {
    pthread_mutex_lock(a1);
    v6 = *(_QWORD *)a1[1].__opaque;
    v5 = *(_QWORD *)&a1[1].__opaque[8];
    if (v5 != v6)
    {
      v7 = 0;
      v8 = 0;
      do
      {
        v9 = *(_QWORD *)(v6 + v7 + 8);
        if (v9 && !*(_QWORD *)(v9 + 8))
        {
          std::deque<std::shared_ptr<std::vector<std::string>>>::push_back(v4, (__int128 *)(v6 + v7));
          v6 = *(_QWORD *)a1[1].__opaque;
          v5 = *(_QWORD *)&a1[1].__opaque[8];
        }
        ++v8;
        v7 += 16;
      }
      while (v8 < (v5 - v6) >> 4);
    }
    pthread_mutex_unlock(a1);
    if (!*(_QWORD *)a1[2].__opaque)
      goto LABEL_15;
  }
  pthread_mutex_lock(a1);
  v10 = *(_QWORD *)a1[2].__opaque;
  if (v10)
  {
    v11 = *(_OWORD *)(*(_QWORD *)(*(_QWORD *)&a1[1].__opaque[32]
                                + (((unint64_t)(v10 + a1[2].__sig - 1) >> 5) & 0x7FFFFFFFFFFFFF8))
                    + 16 * (v10 + LOBYTE(a1[2].__sig) - 1));
    *(_OWORD *)a2 = v11;
    if (*((_QWORD *)&v11 + 1))
    {
      v12 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
    std::deque<std::shared_ptr<std::vector<turi::flexible_type>>>::pop_back(v4);
  }
  result = pthread_mutex_unlock(a1);
  if (!v10)
  {
LABEL_15:
    v15 = operator new(0x30uLL);
    v15[2] = 0;
    *v15 = &unk_24D930C68;
    v15[1] = 0;
    v15[4] = 0;
    v15[5] = 0;
    *(_QWORD *)(a2 + 8) = v15;
    v15[3] = 0;
    *(_QWORD *)a2 = v15 + 3;
    pthread_mutex_lock(a1);
    if (a1[1].__sig > (unint64_t)((uint64_t)(*(_QWORD *)&a1[1].__opaque[8] - *(_QWORD *)a1[1].__opaque) >> 4))
      std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::push_back[abi:ne180100]((char **)a1[1].__opaque, (__int128 *)a2);
    return pthread_mutex_unlock(a1);
  }
  return result;
}

void sub_21815FEA4(_Unwind_Exception *a1)
{
  uint64_t v1;
  pthread_mutex_t *v2;

  pthread_mutex_unlock(v2);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

BOOL turi::v2_block_impl::block_manager::read_block<std::string>(uint64_t a1, __int128 *a2, uint64_t *a3, _QWORD *a4)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD v13[5];
  __int128 v14;
  uint64_t v15;
  __n128 v16;

  v14 = *a2;
  v15 = *((_QWORD *)a2 + 2);
  turi::v2_block_impl::block_manager::read_block(a1, (unint64_t *)&v14, a4, &v16);
  v6 = v16.n128_u64[0];
  if (v16.n128_u64[0])
  {
    v7 = *(_QWORD *)v16.n128_u64[0];
    v8 = *(_QWORD *)(v16.n128_u64[0] + 8) - *(_QWORD *)v16.n128_u64[0];
    v13[0] = 0;
    v13[1] = 0;
    v13[2] = v7;
    v13[3] = 0;
    v13[4] = v8;
    turi::archive_detail::vector_deserialize_impl<turi::iarchive,std::string,false>::exec((uint64_t)v13, a3);
  }
  turi::buffer_pool<std::vector<char>>::release_buffer((pthread_mutex_t *)(a1 + 232), &v16);
  v9 = (std::__shared_weak_count *)v16.n128_u64[1];
  if (v16.n128_u64[1])
  {
    v10 = (unint64_t *)(v16.n128_u64[1] + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  return v6 != 0;
}

void sub_21815FFCC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v1 - 48);
  _Unwind_Resume(a1);
}

void turi::sarray_format_reader_v2<std::string>::try_evict_something_from_cache(turi::random *a1)
{
  uint64_t v2;
  unint64_t v3;
  turi::random::generator *source;
  unint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  _BYTE *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char v20;

  v2 = (uint64_t)(*((_QWORD *)a1 + 43) - *((_QWORD *)a1 + 42)) >> 3;
  v3 = 0xD37A6F4DE9BD37A7 * v2 - 1;
  if (0xD37A6F4DE9BD37A7 * v2 != 1)
  {
    source = turi::random::get_source(a1);
    pthread_mutex_lock((pthread_mutex_t *)((char *)source + 6288));
    v3 = boost::random::detail::generate_uniform_int<boost::random::rand48,unsigned long>((uint64_t *)source + 785, 0, v3);
    pthread_mutex_unlock((pthread_mutex_t *)((char *)source + 6288));
  }
  v5 = v3 >> 6;
  v6 = (_QWORD *)*((_QWORD *)a1 + 38);
  v7 = v6[v3 >> 6];
  if (((v7 >> v3) & 1) != 0)
    goto LABEL_4;
  v9 = v7 & ~(0xFFFFFFFFFFFFFFFFLL >> (v3 & 0x3F ^ 0x3F));
  if (v9)
  {
    v3 = __clz(__rbit64(v9)) | v3 & 0xFFFFFFFFFFFFFFC0;
LABEL_15:
    if (v3 < *((_QWORD *)a1 + 39))
      goto LABEL_4;
  }
  else
  {
    v10 = v5 << 6;
    v11 = v5 + 1;
    while (v11 < *((_QWORD *)a1 + 40))
    {
      v12 = v6[v11];
      v10 += 64;
      ++v11;
      if (v12)
      {
        v3 = __clz(__rbit64(v12)) + v10;
        goto LABEL_15;
      }
    }
  }
  if ((*v6 & 1) == 0)
  {
    v13 = *v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v13)
    {
      v3 = __clz(__rbit64(v13));
      goto LABEL_4;
    }
    v14 = *((_QWORD *)a1 + 40);
    if (v14 <= 1)
      v14 = 1;
    v15 = v14 - 1;
    v16 = v6 + 1;
    while (v15)
    {
      v18 = *v16++;
      v17 = v18;
      --v15;
      v13 -= 64;
      if (v18)
      {
        v3 = __clz(__rbit64(v17)) - v13;
        goto LABEL_4;
      }
    }
  }
  v3 = 0;
LABEL_4:
  v19 = *((_QWORD *)a1 + 42) + 184 * v3;
  v20 = 0;
  if (std::unique_lock<turi::simple_spinlock>::try_lock((uint64_t)&v19))
    turi::sarray_format_reader_v2<std::string>::release_cache(a1, v3);
  if (v20)
  {
    v8 = (_BYTE *)v19;
    __dmb(0xBu);
    *v8 = 0;
  }
}

void sub_218160188(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _BYTE *a9, char a10)
{
  if (a10)
  {
    __dmb(0xBu);
    *a9 = 0;
  }
  _Unwind_Resume(a1);
}

void std::deque<std::shared_ptr<std::vector<std::string>>>::push_back(_QWORD *a1, __int128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  unint64_t *v10;
  unint64_t v11;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = 32 * (v4 - v5) - 1;
  v7 = a1[5];
  v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<std::shared_ptr<std::vector<std::string>>>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5];
    v8 = v7 + a1[4];
  }
  v9 = *a2;
  *(_OWORD *)(*(_QWORD *)(v5 + ((v8 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v8) = *a2;
  if (*((_QWORD *)&v9 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v9 + 1) + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v7 = a1[5];
  }
  a1[5] = v7 + 1;
}

void std::deque<std::shared_ptr<std::vector<std::string>>>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x100;
  v4 = v2 - 256;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      std::__split_buffer<char *>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    std::__split_buffer<char *>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  std::__split_buffer<char *>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<char *>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_21816050C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<std::vector<std::string>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D930C68;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::vector<std::string>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D930C68;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

void std::__shared_ptr_emplace<std::vector<std::string>>::__on_zero_shared(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void turi::archive_detail::vector_deserialize_impl<turi::iarchive,std::string,false>::exec(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::vector<std::string>::size_type i;
  std::vector<std::string>::size_type __sz;

  __sz = 0;
  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
  {
    v5 = *(_QWORD *)(a1 + 24);
    __sz = *(_QWORD *)(v4 + v5);
    *(_QWORD *)(a1 + 24) = v5 + 8;
  }
  else
  {
    std::istream::read();
  }
  std::vector<std::string>::__clear[abi:ne180100](a2);
  std::vector<std::string>::resize((std::vector<std::string> *)a2, __sz);
  if (__sz)
  {
    v6 = 0;
    for (i = 0; i < __sz; ++i)
    {
      turi::archive_detail::deserialize_impl<turi::iarchive,std::string,false,void>::exec(a1, (std::string *)(*a2 + v6));
      v6 += 24;
    }
  }
}

void turi::buffer_pool<std::vector<std::string>>::release_buffer(uint64_t a1, uint64_t **a2)
{
  if (*a2)
  {
    std::vector<std::string>::__clear[abi:ne180100](*a2);
    if (0xAAAAAAAAAAAAAAABLL * (((*a2)[2] - **a2) >> 3) >= 0x100000)
      std::vector<std::string>::shrink_to_fit((std::vector<std::string> *)*a2);
    if ((unint64_t)(*(_QWORD *)(a1 + 136) + ((uint64_t)(*(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72)) >> 4)) < *(_QWORD *)(a1 + 64))
    {
      pthread_mutex_lock((pthread_mutex_t *)a1);
      std::deque<std::shared_ptr<std::vector<std::string>>>::push_back((_QWORD *)(a1 + 96), (__n128 *)a2);
      pthread_mutex_unlock((pthread_mutex_t *)a1);
    }
    std::shared_ptr<turi::neural_net::Subscriber<std::unique_ptr<turi::style_transfer::Checkpoint>>>::reset[abi:ne180100](a2);
  }
}

void sub_21816072C(_Unwind_Exception *a1)
{
  pthread_mutex_t *v1;

  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

__n128 std::deque<std::shared_ptr<std::vector<std::string>>>::push_back(_QWORD *a1, __n128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  __n128 result;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 32 * (v4 - v5) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<std::shared_ptr<std::vector<std::string>>>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  result = *a2;
  *(__n128 *)(*(_QWORD *)(v5 + ((v7 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v7) = *a2;
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  ++a1[5];
  return result;
}

void std::vector<turi::sarray_reader_buffer<std::string>>::resize(uint64_t *a1, unint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;

  v2 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 5);
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<turi::sarray_reader_buffer<std::string>>::__append(a1, v4);
  }
  else if (!v3)
  {
    std::vector<turi::sarray_reader_buffer<std::string>>::__base_destruct_at_end[abi:ne180100]((uint64_t)a1, (void **)(*a1 + 96 * a2));
  }
}

void std::vector<turi::sarray_reader_buffer<std::string>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  size_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 5) >= a2)
  {
    if (a2)
    {
      v13 = 96 * ((96 * a2 - 96) / 0x60) + 96;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 5);
    v9 = v8 + a2;
    if (v8 + a2 > 0x2AAAAAAAAAAAAAALL)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 5);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x155555555555555)
      v11 = 0x2AAAAAAAAAAAAAALL;
    else
      v11 = v9;
    v19 = v4;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::sarray_reader_buffer<turi::flexible_type>>>(v4, v11);
    else
      v12 = 0;
    v15 = v12;
    v16 = &v12[96 * v8];
    v18 = &v12[96 * v11];
    v14 = 96 * ((96 * a2 - 96) / 0x60) + 96;
    bzero(v16, v14);
    v17 = &v16[v14];
    std::vector<turi::sarray_reader_buffer<std::string>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<turi::sarray_reader_buffer<std::string>>::~__split_buffer((uint64_t)&v15);
  }
}

void sub_21816095C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<turi::sarray_reader_buffer<std::string>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<turi::sarray_reader_buffer<std::string>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::sarray_reader_buffer<std::string>>,std::reverse_iterator<turi::sarray_reader_buffer<std::string>*>,std::reverse_iterator<turi::sarray_reader_buffer<std::string>*>,std::reverse_iterator<turi::sarray_reader_buffer<std::string>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::sarray_reader_buffer<std::string>>,std::reverse_iterator<turi::sarray_reader_buffer<std::string>*>,std::reverse_iterator<turi::sarray_reader_buffer<std::string>*>,std::reverse_iterator<turi::sarray_reader_buffer<std::string>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[3];
  char v15;
  __int128 v16;
  __int128 v17;

  v7 = a7;
  *(_QWORD *)&v17 = a6;
  *((_QWORD *)&v17 + 1) = a7;
  v16 = v17;
  v14[0] = a1;
  v14[1] = &v16;
  v14[2] = &v17;
  if (a3 == a5)
  {
    v12 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 96) = 0;
      *(_QWORD *)(v7 - 88) = 0;
      *(_QWORD *)(v7 - 80) = 0;
      v8 = *(_OWORD *)(a3 - 96);
      a3 -= 96;
      *(_OWORD *)(v7 - 96) = v8;
      *(_QWORD *)(v7 - 80) = *(_QWORD *)(a3 + 16);
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_OWORD *)(v7 - 72) = *(_OWORD *)(a3 + 24);
      *(_QWORD *)(a3 + 24) = 0;
      *(_QWORD *)(a3 + 32) = 0;
      v9 = *(_OWORD *)(a3 + 56);
      v10 = *(_OWORD *)(a3 + 72);
      v11 = *(_QWORD *)(a3 + 88);
      *(_OWORD *)(v7 - 56) = *(_OWORD *)(a3 + 40);
      *(_QWORD *)(v7 - 8) = v11;
      *(_OWORD *)(v7 - 24) = v10;
      *(_OWORD *)(v7 - 40) = v9;
      v7 = *((_QWORD *)&v17 + 1) - 96;
      *((_QWORD *)&v17 + 1) -= 96;
    }
    while (a3 != a5);
    v12 = v17;
  }
  v15 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::sarray_reader_buffer<std::string>>,std::reverse_iterator<turi::sarray_reader_buffer<std::string>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v14);
  return v12;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::sarray_reader_buffer<std::string>>,std::reverse_iterator<turi::sarray_reader_buffer<std::string>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<turi::sarray_reader_buffer<std::string>>,std::reverse_iterator<turi::sarray_reader_buffer<std::string>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<turi::sarray_reader_buffer<std::string>>,std::reverse_iterator<turi::sarray_reader_buffer<std::string>*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v8[8];
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[8];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v1 = (uint64_t *)a1[2];
  v3 = *v1;
  v2 = v1[1];
  v14 = v3;
  v15 = v2;
  v16 = v3;
  v17 = v2;
  v4 = *a1;
  v5 = (uint64_t *)a1[1];
  v7 = *v5;
  v6 = v5[1];
  v9 = v7;
  v10 = v6;
  v11 = v7;
  v12 = v6;
  std::__allocator_destroy[abi:ne180100]<std::allocator<turi::sarray_reader_buffer<std::string>>,std::reverse_iterator<std::reverse_iterator<turi::sarray_reader_buffer<std::string>*>>,std::reverse_iterator<std::reverse_iterator<turi::sarray_reader_buffer<std::string>*>>>(v4, (uint64_t)v13, (uint64_t)v8);
}

void std::__allocator_destroy[abi:ne180100]<std::allocator<turi::sarray_reader_buffer<std::string>>,std::reverse_iterator<std::reverse_iterator<turi::sarray_reader_buffer<std::string>*>>,std::reverse_iterator<std::reverse_iterator<turi::sarray_reader_buffer<std::string>*>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void **i;
  void **v6;

  for (i = *(void ***)(a2 + 32); i != *(void ***)(a3 + 32); *(_QWORD *)(a2 + 32) = i)
  {
    std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(i + 3));
    v6 = i;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v6);
    i = (void **)(*(_QWORD *)(a2 + 32) + 96);
  }
}

uint64_t std::__split_buffer<turi::sarray_reader_buffer<std::string>>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<turi::sarray_reader_buffer<std::string>>::__destruct_at_end[abi:ne180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<turi::sarray_reader_buffer<std::string>>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t i;
  void **v5;
  void **v6;

  for (i = *(_QWORD *)(a1 + 16); i != a2; i = *(_QWORD *)(a1 + 16))
  {
    v5 = (void **)(i - 96);
    *(_QWORD *)(a1 + 16) = i - 96;
    std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](i - 72);
    v6 = v5;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v6);
  }
}

void std::vector<turi::sarray_reader_buffer<std::string>>::__base_destruct_at_end[abi:ne180100](uint64_t a1, void **a2)
{
  void **v4;
  void **v5;
  void **v6;

  v4 = *(void ***)(a1 + 8);
  if (v4 != a2)
  {
    do
    {
      v5 = v4 - 12;
      std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v4 - 9));
      v6 = v5;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v6);
      v4 = v5;
    }
    while (v5 != a2);
  }
  *(_QWORD *)(a1 + 8) = a2;
}

uint64_t std::__shared_ptr_pointer<turi::sarray_reader<std::string> *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<turi::sarray_reader<std::string> *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::vector<turi::sarray_reader_buffer<std::string>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<turi::sarray_reader_buffer<std::string>>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, (void **)*v2);
    operator delete(**a1);
  }
}

uint64_t std::vector<turi::sarray_reader_buffer<std::string>>::__push_back_slow_path<turi::sarray_reader_buffer<std::string>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  _QWORD v17[5];

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 5);
  v5 = v4 + 1;
  if (v4 + 1 > 0x2AAAAAAAAAAAAAALL)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 5);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x155555555555555)
    v9 = 0x2AAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17[4] = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::sarray_reader_buffer<turi::flexible_type>>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[96 * v4];
  v17[0] = v10;
  v17[1] = v11;
  v17[3] = &v10[96 * v9];
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  *(_OWORD *)v11 = *(_OWORD *)a2;
  *((_QWORD *)v11 + 2) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_OWORD *)(v11 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  v12 = *(_OWORD *)(a2 + 72);
  v13 = *(_QWORD *)(a2 + 88);
  v14 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(v11 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(v11 + 40) = v14;
  *((_QWORD *)v11 + 11) = v13;
  *(_OWORD *)(v11 + 72) = v12;
  v17[2] = v11 + 96;
  std::vector<turi::sarray_reader_buffer<std::string>>::__swap_out_circular_buffer(a1, v17);
  v15 = a1[1];
  std::__split_buffer<turi::sarray_reader_buffer<std::string>>::~__split_buffer((uint64_t)v17);
  return v15;
}

void sub_218160E84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<turi::sarray_reader_buffer<std::string>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t turi::sarray_reader_buffer<std::string>::sarray_reader_buffer(uint64_t a1, uint64_t *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  turi::sarray_reader_buffer<std::string>::init((uint64_t *)a1, a2, a3, a4, a5);
  return a1;
}

void sub_218160ED4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  void **v10;

  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v10 + 3));
  a10 = v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

void turi::sarray_reader_buffer<std::string>::init(uint64_t *a1, uint64_t *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  std::shared_ptr<turi::neural_net::mps_command_queue>::operator=[abi:ne180100](a1 + 3, a2);
  v9 = a1[3];
  a1[5] = v9;
  a1[6] = 0;
  a1[11] = a3;
  a1[7] = a3;
  a1[8] = a3;
  v10 = turi::sarray_reader<turi::flexible_type>::size(v9);
  if (v10 >= a4)
    v11 = a4;
  else
    v11 = v10;
  a1[9] = v11;
  a1[10] = a5;
  std::vector<std::string>::__clear[abi:ne180100](a1);
}

uint64_t std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void std::vector<std::pair<turi::flexible_type,unsigned long>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = std::pair<turi::flexible_type,unsigned long>::~pair(v4 - 24);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t *std::vector<std::pair<turi::flexible_type,unsigned long>>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  if (v2 != *result)
  {
    v5 = 0;
    do
    {
      v6 = v4 + v5;
      *(_QWORD *)(v6 - 24) = 0;
      *(_DWORD *)(v6 - 16) = 0;
      *(_BYTE *)(v6 - 12) = 0;
      v7 = *(_QWORD *)(v2 + v5 - 24);
      *(_QWORD *)(v6 - 19) = *(_QWORD *)(v2 + v5 - 19);
      *(_QWORD *)(v6 - 24) = v7;
      *(_BYTE *)(v6 - 12) = *(_BYTE *)(v2 + v5 - 12);
      *(_BYTE *)(v2 + v5 - 12) = 0;
      *(_QWORD *)(v6 - 8) = *(_QWORD *)(v2 + v5 - 8);
      v5 -= 24;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  v8 = *result;
  *result = v4;
  a2[1] = v8;
  v9 = result[1];
  result[1] = a2[2];
  a2[2] = v9;
  v10 = result[2];
  result[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<std::pair<turi::flexible_type,unsigned long>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 24;
    std::pair<turi::flexible_type,unsigned long>::~pair(i - 24);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *i;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v6 >= v7)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      for (i = *v9; i; i = (_QWORD *)*i)
      {
        v11 = i[1];
        if (v11 == v6)
        {
          if (i[2] == v6)
            return i;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  i = operator new(0x18uLL);
  *i = 0;
  i[1] = v6;
  i[2] = *a3;
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::__rehash<true>(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v19)
  {
    *i = *v19;
LABEL_38:
    *v19 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v18 + 8 * v3) = a1 + 16;
  if (*i)
  {
    v20 = *(_QWORD *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7)
        v20 %= v7;
    }
    else
    {
      v20 &= v7 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_2181612F4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::pair<turi::flexible_type,unsigned long>::operator=[abi:ne180100](uint64_t a1, uint64_t *a2)
{
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  void *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t *v25;
  unsigned int v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t *v30;
  void *v31;
  void *v32;
  uint64_t v33;
  void **v35;

  if (a2 != (uint64_t *)a1)
  {
    switch(*(_BYTE *)(a1 + 12))
    {
      case 2:
        v4 = *(unint64_t **)a1;
        do
        {
          v5 = __ldaxr(v4);
          v6 = v5 - 1;
        }
        while (__stlxr(v6, v4));
        if (!v6)
        {
          v7 = *(unint64_t **)a1;
          if (!*(_QWORD *)a1)
            goto LABEL_44;
          if (*((char *)v7 + 31) < 0)
            operator delete((void *)v7[1]);
          v8 = v7;
          v9 = 0x1012C404EF22A49;
          goto LABEL_43;
        }
        break;
      case 3:
        v10 = *(unint64_t **)a1;
        do
        {
          v11 = __ldaxr(v10);
          v12 = v11 - 1;
        }
        while (__stlxr(v12, v10));
        if (!v12)
        {
          v13 = *(unint64_t **)a1;
          if (!*(_QWORD *)a1)
            goto LABEL_44;
          v14 = (void *)v13[1];
          if (v14)
          {
            v13[2] = (unint64_t)v14;
            operator delete(v14);
          }
          v8 = v13;
          v9 = 0x1080C409938AC02;
          goto LABEL_43;
        }
        break;
      case 4:
        v15 = *(unint64_t **)a1;
        do
        {
          v16 = __ldaxr(v15);
          v17 = v16 - 1;
        }
        while (__stlxr(v17, v15));
        if (!v17)
        {
          v18 = *(unint64_t **)a1;
          if (!*(_QWORD *)a1)
            goto LABEL_44;
          v35 = (void **)(v18 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v35);
          goto LABEL_27;
        }
        break;
      case 5:
        v19 = *(unint64_t **)a1;
        do
        {
          v20 = __ldaxr(v19);
          v21 = v20 - 1;
        }
        while (__stlxr(v21, v19));
        if (!v21)
        {
          v18 = *(unint64_t **)a1;
          if (!*(_QWORD *)a1)
            goto LABEL_44;
          v35 = (void **)(v18 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v35);
LABEL_27:
          v8 = v18;
          v9 = 0x1020C405E66F15BLL;
          goto LABEL_43;
        }
        break;
      case 8:
        v22 = *(unint64_t **)a1;
        do
        {
          v23 = __ldaxr(v22);
          v24 = v23 - 1;
        }
        while (__stlxr(v24, v22));
        if (!v24)
        {
          v25 = *(unint64_t **)a1;
          if (!*(_QWORD *)a1)
            goto LABEL_44;
          boost::detail::shared_count::~shared_count((unsigned int **)v25 + 2);
          v8 = v25;
          v26 = -235920773;
          goto LABEL_42;
        }
        break;
      case 9:
        v27 = *(unint64_t **)a1;
        do
        {
          v28 = __ldaxr(v27);
          v29 = v28 - 1;
        }
        while (__stlxr(v29, v27));
        if (!v29)
        {
          v30 = *(unint64_t **)a1;
          if (*(_QWORD *)a1)
          {
            v31 = (void *)v30[6];
            if (v31)
            {
              v30[7] = (unint64_t)v31;
              operator delete(v31);
            }
            v32 = (void *)v30[3];
            if (v32)
            {
              v30[4] = (unint64_t)v32;
              operator delete(v32);
            }
            std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v30 + 1));
            v8 = v30;
            v26 = 2071181815;
LABEL_42:
            v9 = v26 | 0x1030C4000000000;
LABEL_43:
            MEMORY[0x219A19A08](v8, v9);
          }
LABEL_44:
          *(_QWORD *)a1 = 0;
        }
        break;
      default:
        break;
    }
    v33 = *a2;
    *(_QWORD *)(a1 + 5) = *(uint64_t *)((char *)a2 + 5);
    *(_QWORD *)a1 = v33;
    *(_BYTE *)(a1 + 12) = *((_BYTE *)a2 + 12);
    *((_BYTE *)a2 + 12) = 0;
  }
  *(_QWORD *)(a1 + 16) = a2[2];
  return a1;
}

uint64_t *std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__erase_unique<unsigned long>(_QWORD *a1, unint64_t *a2)
{
  uint64_t *result;

  result = std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::find<unsigned long>(a1, a2);
  if (result)
  {
    std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::erase(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

_QWORD *std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::find<unsigned long>(_QWORD *a1, unint64_t *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *result;
  unint64_t v8;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = *a2;
    if (v3 >= *(_QWORD *)&v2)
      v5 = v3 % *(_QWORD *)&v2;
  }
  else
  {
    v5 = (*(_QWORD *)&v2 - 1) & v3;
  }
  v6 = *(_QWORD **)(*a1 + 8 * v5);
  if (!v6)
    return 0;
  result = (_QWORD *)*v6;
  if (*v6)
  {
    do
    {
      v8 = result[1];
      if (v8 == v3)
      {
        if (result[2] == v3)
          return result;
      }
      else
      {
        if (v4.u32[0] > 1uLL)
        {
          if (v8 >= *(_QWORD *)&v2)
            v8 %= *(_QWORD *)&v2;
        }
        else
        {
          v8 &= *(_QWORD *)&v2 - 1;
        }
        if (v8 != v5)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

uint64_t std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::erase(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  void *v3;
  void *__p;

  v2 = *a2;
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<turi::fileio::cache_block>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<turi::fileio::cache_block>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<turi::fileio::cache_block>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<turi::fileio::cache_block>>>>::remove(a1, a2, (uint64_t)&__p);
  v3 = __p;
  __p = 0;
  if (v3)
    operator delete(v3);
  return v2;
}

_QWORD **std::vector<turi::flexible_type>::insert(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  _QWORD **v4;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  void *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unsigned int v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  void *v46;
  char *v47;
  char *v48;
  char *v49;
  uint64_t v50;

  v4 = (_QWORD **)a2;
  v6 = a1[1];
  v9 = a1[2];
  v7 = (uint64_t)(a1 + 2);
  v8 = v9;
  if (v6 >= v9)
  {
    v16 = *a1;
    v17 = ((uint64_t)(v6 - *a1) >> 4) + 1;
    if (v17 >> 60)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v18 = (a2 - v16) >> 4;
    v19 = v8 - v16;
    v20 = v19 >> 3;
    if (v19 >> 3 <= v17)
      v20 = ((uint64_t)(v6 - *a1) >> 4) + 1;
    if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF0)
      v21 = 0xFFFFFFFFFFFFFFFLL;
    else
      v21 = v20;
    v50 = v7;
    if (v21)
      v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::flexible_type>>(v7, v21);
    else
      v22 = 0;
    v46 = v22;
    v47 = &v22[16 * v18];
    v48 = v47;
    v49 = &v22[16 * v21];
    std::__split_buffer<turi::flexible_type>::push_back(&v46, (uint64_t *)a3);
    v4 = (_QWORD **)std::vector<turi::flexible_type>::__swap_out_circular_buffer((uint64_t)a1, &v46, (uint64_t *)v4);
    std::__split_buffer<turi::flexible_type>::~__split_buffer(&v46);
  }
  else if (a2 == v6)
  {
    *(_QWORD *)a2 = 0;
    *(_DWORD *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 12) = 0;
    v23 = *(_QWORD *)a3;
    *(_QWORD *)(a2 + 5) = *(_QWORD *)(a3 + 5);
    *(_QWORD *)a2 = v23;
    *(_BYTE *)(a2 + 12) = *(_BYTE *)(a3 + 12);
    *(_BYTE *)(a3 + 12) = 0;
    a1[1] = a2 + 16;
  }
  else
  {
    std::vector<turi::flexible_type>::__move_range((uint64_t)a1, (unint64_t **)a2, v6, a2 + 16);
    if (v4 == (_QWORD **)a3)
    {
      return (_QWORD **)a3;
    }
    else
    {
      switch(*((_BYTE *)v4 + 12))
      {
        case 2:
          v10 = *v4;
          do
          {
            v11 = __ldaxr(v10);
            v12 = v11 - 1;
          }
          while (__stlxr(v12, v10));
          if (!v12)
          {
            v13 = (uint64_t)*v4;
            if (!*v4)
              goto LABEL_53;
            if (*(char *)(v13 + 31) < 0)
              operator delete(*(void **)(v13 + 8));
            v14 = (_QWORD *)v13;
            v15 = 0x1012C404EF22A49;
            goto LABEL_52;
          }
          break;
        case 3:
          v24 = *v4;
          do
          {
            v25 = __ldaxr(v24);
            v26 = v25 - 1;
          }
          while (__stlxr(v26, v24));
          if (!v26)
          {
            v27 = (uint64_t)*v4;
            if (!*v4)
              goto LABEL_53;
            v28 = *(void **)(v27 + 8);
            if (v28)
            {
              *(_QWORD *)(v27 + 16) = v28;
              operator delete(v28);
            }
            v14 = (_QWORD *)v27;
            v15 = 0x1080C409938AC02;
            goto LABEL_52;
          }
          break;
        case 4:
          v29 = *v4;
          do
          {
            v30 = __ldaxr(v29);
            v31 = v30 - 1;
          }
          while (__stlxr(v31, v29));
          if (!v31)
          {
            v32 = (uint64_t)*v4;
            if (!*v4)
              goto LABEL_53;
            v46 = (void *)(v32 + 8);
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v46);
            goto LABEL_40;
          }
          break;
        case 5:
          v33 = *v4;
          do
          {
            v34 = __ldaxr(v33);
            v35 = v34 - 1;
          }
          while (__stlxr(v35, v33));
          if (!v35)
          {
            v32 = (uint64_t)*v4;
            if (!*v4)
              goto LABEL_53;
            v46 = (void *)(v32 + 8);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v46);
LABEL_40:
            v14 = (_QWORD *)v32;
            v15 = 0x1020C405E66F15BLL;
            goto LABEL_52;
          }
          break;
        case 8:
          v36 = *v4;
          do
          {
            v37 = __ldaxr(v36);
            v38 = v37 - 1;
          }
          while (__stlxr(v38, v36));
          if (!v38)
          {
            v39 = (uint64_t)*v4;
            if (!*v4)
              goto LABEL_53;
            boost::detail::shared_count::~shared_count((unsigned int **)(v39 + 16));
            v14 = (_QWORD *)v39;
            v40 = -235920773;
            goto LABEL_51;
          }
          break;
        case 9:
          v41 = *v4;
          do
          {
            v42 = __ldaxr(v41);
            v43 = v42 - 1;
          }
          while (__stlxr(v43, v41));
          if (!v43)
          {
            if (*v4)
            {
              v14 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*v4);
              v40 = 2071181815;
LABEL_51:
              v15 = v40 | 0x1030C4000000000;
LABEL_52:
              MEMORY[0x219A19A08](v14, v15);
            }
LABEL_53:
            *v4 = 0;
          }
          break;
        default:
          break;
      }
      v44 = *(_QWORD *)a3;
      *(_QWORD **)((char *)v4 + 5) = *(_QWORD **)(a3 + 5);
      *v4 = (_QWORD *)v44;
      *((_BYTE *)v4 + 12) = *(_BYTE *)(a3 + 12);
      *(_BYTE *)(a3 + 12) = 0;
    }
  }
  return v4;
}

void sub_218161960(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<turi::flexible_type>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

_QWORD *std::__split_buffer<turi::flexible_type>::push_back(_QWORD *result, uint64_t *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  int64x2_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  int64x2_t v27;
  uint64_t v28;
  uint64_t v29;

  v3 = result;
  v4 = result[2];
  if (v4 == result[3])
  {
    v5 = (uint64_t *)result[1];
    v6 = (uint64_t)v5 - *result;
    if ((unint64_t)v5 <= *result)
    {
      if (v4 == *result)
        v13 = 1;
      else
        v13 = (v4 - *result) >> 3;
      v14 = result[4];
      v29 = v3[4];
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::flexible_type>>(v14, v13);
      v17 = &v15[16 * (v13 >> 2)];
      v18 = v3[1];
      v19 = v3[2] - v18;
      if (v19)
      {
        v20 = &v17[v19];
        v21 = &v15[16 * (v13 >> 2)];
        do
        {
          *(_QWORD *)v21 = 0;
          *((_DWORD *)v21 + 2) = 0;
          v21[12] = 0;
          v22 = *(_QWORD *)v18;
          *(_QWORD *)(v21 + 5) = *(_QWORD *)(v18 + 5);
          *(_QWORD *)v21 = v22;
          v21[12] = *(_BYTE *)(v18 + 12);
          *(_BYTE *)(v18 + 12) = 0;
          v21 += 16;
          v18 += 16;
        }
        while (v21 != v20);
        v23 = *(int64x2_t *)(v3 + 1);
      }
      else
      {
        v23 = vdupq_n_s64(v18);
        v20 = &v15[16 * (v13 >> 2)];
      }
      v26 = (void *)*v3;
      *v3 = v15;
      v3[1] = v17;
      v27 = v23;
      v24 = v3[3];
      v3[2] = v20;
      v3[3] = &v15[16 * v16];
      v28 = v24;
      result = std::__split_buffer<turi::flexible_type>::~__split_buffer(&v26);
      v4 = v3[2];
    }
    else
    {
      v7 = v6 >> 4;
      v8 = v6 >> 4 < -1;
      v9 = (v6 >> 4) + 2;
      if (v8)
        v10 = v9;
      else
        v10 = v7 + 1;
      v11 = v10 >> 1;
      result = std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<turi::flexible_type *,turi::flexible_type *,turi::flexible_type *>((uint64_t)&v26, v5, (uint64_t *)v4, (uint64_t)&v5[-2 * (v10 >> 1)]);
      v4 = v12;
      v3[1] -= 16 * v11;
      v3[2] = v12;
    }
  }
  *(_QWORD *)v4 = 0;
  *(_DWORD *)(v4 + 8) = 0;
  *(_BYTE *)(v4 + 12) = 0;
  v25 = *a2;
  *(_QWORD *)(v4 + 5) = *(uint64_t *)((char *)a2 + 5);
  *(_QWORD *)v4 = v25;
  *(_BYTE *)(v4 + 12) = *((_BYTE *)a2 + 12);
  *((_BYTE *)a2 + 12) = 0;
  v3[2] += 16;
  return result;
}

void __cxx_global_var_init_4_4()
{
  int v0;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, "Mutex create error %d", v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

void __cxx_global_var_init_5_0()
{
  int v0;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<std::string>::m_buffer_pool, 0);
    assert_msg(v0 == 0, "Mutex create error %d", v0);
    qword_254FD3E60 = 0;
    unk_254FD3E50 = 0u;
    unk_254FD3E40 = 0u;
    unk_254FD3E30 = 0u;
    unk_254FD3E20 = 0u;
    qword_254FD3E18 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<std::string>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_groupby_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

BOOL turi::sframe::contains_column(uint64_t a1, unsigned __int8 **a2)
{
  int *v4;
  file_logger *v5;
  file_logger *started;
  _QWORD *v7;
  _QWORD *v8;
  const std::locale::facet *v9;
  _QWORD *exception;
  std::locale v12;

  v4 = (int *)global_logger();
  if (v4[169] <= 1)
  {
    if (cppipc::must_cancel((cppipc *)v4))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 1, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe.hpp", "contains_column", 419, 1);
    v7 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v7 && *((_BYTE *)v7 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7 + 2, (uint64_t)"Function entry", 14);
    v8 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v8)
    {
      if (*((_BYTE *)v8 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(_QWORD *)(v8[2] - 24) + 16));
        v9 = std::locale::use_facet(&v12, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
        std::locale::~locale(&v12);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  return std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), a2) != *(_QWORD *)(a1 + 48);
}

void sub_218161DD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

void sub_218161F78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_16_2()
{
  int v0;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, "Mutex create error %d", v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_groupby_aggregate_cpp_0()
{
  uint64_t i;
  const void *v2[3];
  _QWORD v3[4];

  v3[3] = *MEMORY[0x24BDAC8D0];
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  std::string::basic_string[abi:ne180100]<0>(v2, "argmax");
  std::string::basic_string[abi:ne180100]<0>(v3, "argmin");
  std::set<std::string>::set[abi:ne180100]((uint64_t)&turi::registered_arg_functions, v2, 2);
  for (i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v3[i + 2]) < 0)
      operator delete((void *)v2[i + 3]);
  }
  return __cxa_atexit((void (*)(void *))std::set<std::string>::~set[abi:ne180100], &turi::registered_arg_functions, &dword_217E69000);
}

void sub_2181621B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  uint64_t v17;

  v17 = 0;
  while (1)
  {
    if (*(char *)(v15 + v17 + 47) < 0)
      operator delete(*(void **)(v15 + v17 + 24));
    v17 -= 24;
    if (v17 == -48)
      _Unwind_Resume(exception_object);
  }
}

_OWORD *turi::groupby_aggregate_impl::groupby_element::groupby_element(_OWORD *a1, __int128 *a2, uint64_t *a3)
{
  __int128 v5;
  uint64_t v6;
  void **v7;

  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  v5 = *a2;
  v6 = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  turi::groupby_aggregate_impl::groupby_element::init((uint64_t)a1, (uint64_t)&v5, a3);
  v7 = (void **)&v5;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v7);
  return a1;
}

void sub_218162274(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  void **v12;

  a12 = (void **)&a9;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a12);
  a12 = v12 + 3;
  std::vector<std::unique_ptr<turi::group_aggregate_value>>::__destroy_vector::operator()[abi:ne180100](&a12);
  a12 = v12;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

uint64_t turi::groupby_aggregate_impl::groupby_element::init(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  std::vector<turi::flexible_type>::__vdeallocate((void **)a1);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  std::vector<std::unique_ptr<turi::group_aggregate_value>>::resize(a1 + 24, 0xCCCCCCCCCCCCCCCDLL * ((a3[1] - *a3) >> 3));
  v6 = *a3;
  if (a3[1] != *a3)
  {
    v7 = 0;
    v8 = 24;
    do
    {
      v9 = *(_QWORD *)(a1 + 24);
      v10 = (***(uint64_t (****)(_QWORD))(v6 + v8))(*(_QWORD *)(v6 + v8));
      v11 = *(_QWORD *)(v9 + 8 * v7);
      *(_QWORD *)(v9 + 8 * v7) = v10;
      if (v11)
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 96))(v11);
      ++v7;
      v6 = *a3;
      v8 += 40;
    }
    while (v7 < 0xCCCCCCCCCCCCCCCDLL * ((a3[1] - *a3) >> 3));
  }
  result = turi::groupby_aggregate_impl::groupby_element::hash_key((uint64_t *)a1);
  *(_QWORD *)(a1 + 48) = result;
  return result;
}

uint64_t turi::groupby_aggregate_impl::groupby_element::groupby_element(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t *v5;
  _QWORD v7[5];

  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  v4 = *((unsigned __int8 *)a2 + 23);
  if ((v4 & 0x80u) == 0)
    v5 = a2;
  else
    v5 = (uint64_t *)*a2;
  if ((v4 & 0x80u) != 0)
    v4 = a2[1];
  v7[0] = 0;
  v7[1] = 0;
  v7[2] = v5;
  v7[3] = 0;
  v7[4] = v4;
  turi::groupby_aggregate_impl::groupby_element::load((uint64_t *)a1, (turi::iarchive *)v7, a3);
  return a1;
}

void sub_2181623F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  void **v10;

  a10 = v10 + 3;
  std::vector<std::unique_ptr<turi::group_aggregate_value>>::__destroy_vector::operator()[abi:ne180100](&a10);
  a10 = v10;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

uint64_t turi::groupby_aggregate_impl::groupby_element::load(uint64_t *a1, turi::iarchive *a2, _QWORD *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  turi::archive_detail::vector_deserialize_impl<turi::iarchive,turi::flexible_type,false>::exec(a2, a1);
  std::vector<std::unique_ptr<turi::group_aggregate_value>>::resize((uint64_t)(a1 + 3), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a3[1] - *a3) >> 3));
  v6 = a1[3];
  if (a1[4] != v6)
  {
    v7 = 0;
    v8 = 24;
    do
    {
      v9 = (***(uint64_t (****)(_QWORD))(*a3 + v8))(*(_QWORD *)(*a3 + v8));
      v10 = *(_QWORD *)(v6 + 8 * v7);
      *(_QWORD *)(v6 + 8 * v7) = v9;
      if (v10)
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 96))(v10);
      v11 = *(_QWORD *)(a1[3] + 8 * v7);
      (*(void (**)(uint64_t, turi::iarchive *))(*(_QWORD *)v11 + 80))(v11, a2);
      ++v7;
      v6 = a1[3];
      v8 += 40;
    }
    while (v7 < (a1[4] - v6) >> 3);
  }
  result = turi::groupby_aggregate_impl::groupby_element::hash_key(a1);
  a1[6] = result;
  return result;
}

void std::vector<std::unique_ptr<turi::group_aggregate_value>>::resize(uint64_t a1, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(_QWORD **)(a1 + 8);
  v4 = ((uint64_t)v3 - *(_QWORD *)a1) >> 3;
  if (a2 <= v4)
  {
    if (a2 < v4)
    {
      v5 = *(_QWORD *)a1 + 8 * a2;
      while (v3 != (_QWORD *)v5)
      {
        v7 = *--v3;
        v6 = v7;
        *v3 = 0;
        if (v7)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 96))(v6);
      }
      *(_QWORD *)(a1 + 8) = v5;
    }
  }
  else
  {
    std::vector<std::unique_ptr<turi::group_aggregate_value>>::__append((char **)a1, a2 - v4);
  }
}

uint64_t turi::groupby_aggregate_impl::groupby_element::save(turi::groupby_aggregate_impl::groupby_element *this, turi::oarchive *a2)
{
  uint64_t result;
  uint64_t v5;
  unint64_t v6;

  result = turi::archive_detail::vector_serialize_impl<turi::oarchive,turi::flexible_type,false>::exec((uint64_t)a2, (uint64_t *)this);
  v5 = *((_QWORD *)this + 3);
  if (*((_QWORD *)this + 4) != v5)
  {
    v6 = 0;
    do
    {
      result = (*(uint64_t (**)(_QWORD, turi::oarchive *))(**(_QWORD **)(v5 + 8 * v6) + 72))(*(_QWORD *)(v5 + 8 * v6), a2);
      ++v6;
      v5 = *((_QWORD *)this + 3);
    }
    while (v6 < (*((_QWORD *)this + 4) - v5) >> 3);
  }
  return result;
}

uint64_t turi::groupby_aggregate_impl::flexible_type_vector_lt<std::vector<turi::flexible_type>,std::vector<turi::flexible_type>>(uint64_t *a1, _QWORD *a2, __n128 a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  unsigned int v11;
  int v12;
  BOOL v13;
  double v15;
  unint64_t *v16;
  uint64_t v17;
  double *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v28;
  double v29;
  unint64_t *v30;
  uint64_t v31;
  double *v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unsigned int v38;
  double v39;
  uint64_t v40;
  double v41;
  uint64_t v42;
  char v43;
  char v44;

  v3 = *a1;
  v4 = a1[1];
  if ((unint64_t)(v4 - *a1) < a2[1] - *a2)
    return 1;
  if (v4 != v3)
  {
    v8 = 0;
    while (1)
    {
      v9 = v3 + 16 * v8;
      v10 = (char *)(*a2 + 16 * v8);
      if (*(char *)(v9 + 12) < v10[12])
        return 1;
      v11 = *(unsigned __int8 *)(v9 + 12);
      v12 = v10[12];
      if ((char)v11 > (char)v12)
        return 0;
      v13 = v11 == 7 && v12 == 7;
      if (!v13)
      {
        switch(v10[12])
        {
          case 0:
            switch(*(_BYTE *)(v9 + 12))
            {
              case 0:
                if (*(_QWORD *)v9 < *(_QWORD *)v10)
                  return 1;
                goto LABEL_54;
              case 1:
                a3.n128_u64[0] = *(_QWORD *)v9;
                v39 = (double)*(uint64_t *)v10;
                goto LABEL_104;
              case 2:
              case 3:
              case 4:
              case 5:
              case 7:
              case 8:
              case 9:
                goto LABEL_53;
              case 6:
                if (*(_QWORD *)v10 > (uint64_t)(*(_QWORD *)v9 << 8) >> 8)
                  return 1;
                goto LABEL_54;
              default:
                turi::apply_binary_op_ff();
            }
          case 1:
            switch(*(_BYTE *)(v9 + 12))
            {
              case 0:
                a3.n128_u64[0] = *(_QWORD *)v10;
                if (*(double *)v10 > (double)*(uint64_t *)v9)
                  return 1;
                goto LABEL_54;
              case 1:
                a3.n128_u64[0] = *(_QWORD *)v9;
                v39 = *(double *)v10;
                goto LABEL_104;
              case 2:
              case 3:
              case 4:
              case 5:
              case 7:
              case 8:
              case 9:
                goto LABEL_53;
              case 6:
                v39 = *(double *)v10;
                a3.n128_f64[0] = (double)*(int *)(v9 + 8) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)v9 << 8) >> 8);
LABEL_104:
                if (a3.n128_f64[0] < v39)
                  return 1;
                goto LABEL_54;
              default:
                turi::apply_binary_op_ff();
            }
          case 2:
            if (v11 - 3 < 7 || v11 < 2)
              goto LABEL_53;
            if (v11 != 2)
              turi::apply_binary_op_ff();
            if ((std::string::compare[abi:ne180100]((const void **)(*(_QWORD *)v9 + 8), (_BYTE *)(*(_QWORD *)v10 + 8)) & 0x80000000) != 0)return 1;
            goto LABEL_54;
          case 3:
            if (v11 > 9)
              turi::apply_binary_op_ff();
            if (v11 != 3)
              goto LABEL_53;
            v15 = *(double *)v10;
            v16 = *(unint64_t **)(*(_QWORD *)v9 + 8);
            v17 = *(_QWORD *)(*(_QWORD *)v9 + 16);
            v18 = *(double **)(*(_QWORD *)&v15 + 8);
            v19 = (uint64_t)(*(_QWORD *)(*(_QWORD *)&v15 + 16) - (_QWORD)v18) >> 3;
            v20 = v17 - (_QWORD)v16;
            v13 = v20 == 0;
            v21 = v20 >> 3;
            if (v13)
              goto LABEL_43;
            if (v21 <= 1)
              v22 = 1;
            else
              v22 = v21;
            v23 = v19;
            break;
          case 4:
            if (v11 > 9)
              turi::apply_binary_op_ff();
            if (v11 != 4)
              goto LABEL_53;
            if (turi::flexible_type_impl::lt_operator::operator()(a3, (uint64_t)&v43, (uint64_t *)(*(_QWORD *)v9 + 8), (_QWORD *)(*(_QWORD *)v10 + 8)))
            {
              return 1;
            }
            goto LABEL_54;
          case 5:
            if (v11 >= 0xA)
              turi::apply_binary_op_ff();
            goto LABEL_53;
          case 6:
            switch(*(_BYTE *)(v9 + 12))
            {
              case 0:
                if (*(_QWORD *)v9 < (uint64_t)(*(_QWORD *)v10 << 8) >> 8)
                  return 1;
                goto LABEL_54;
              case 1:
                a3.n128_u64[0] = *(_QWORD *)v9;
                if ((double)*((int *)v10 + 2) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)v10 << 8) >> 8) > *(double *)v9)
                  return 1;
                goto LABEL_54;
              case 2:
              case 3:
              case 4:
              case 5:
              case 7:
              case 8:
              case 9:
                goto LABEL_53;
              case 6:
                v40 = (uint64_t)(*(_QWORD *)v9 << 8) >> 8;
                if (v40 < (uint64_t)(*(_QWORD *)v10 << 8) >> 8
                  || v40 == (uint64_t)(*(_QWORD *)v10 << 8) >> 8 && *(_DWORD *)(v9 + 8) < *((_DWORD *)v10 + 2))
                {
                  return 1;
                }
                goto LABEL_54;
              default:
                turi::apply_binary_op_ff();
            }
          case 7:
            if (v11 >= 0xA)
              turi::apply_binary_op_ff();
            goto LABEL_53;
          case 8:
            if (v11 >= 0xA)
              turi::apply_binary_op_ff();
            goto LABEL_53;
          case 9:
            if (v11 >= 0xA)
              turi::apply_binary_op_ff();
LABEL_53:
            turi::flexible_type_fail(0);
            goto LABEL_54;
          default:
            turi::apply_binary_op_ff();
        }
        while (v23)
        {
          a3.n128_u64[0] = *v16;
          if (*(double *)v16 > *v18)
            break;
          if (*(double *)v16 < *v18)
            return 1;
          --v23;
          ++v18;
          ++v16;
          if (!--v22)
          {
LABEL_43:
            if (v21 < v19)
              return 1;
            break;
          }
        }
LABEL_54:
        v24 = *a2 + 16 * v8;
        v25 = *a1 + 16 * v8;
        switch(*(_BYTE *)(v24 + 12))
        {
          case 0:
            switch(*(_BYTE *)(v25 + 12))
            {
              case 0:
                if (*(_QWORD *)v25 > *(_QWORD *)v24)
                  return 0;
                goto LABEL_97;
              case 1:
                a3.n128_u64[0] = *(_QWORD *)v25;
                v41 = (double)*(uint64_t *)v24;
                goto LABEL_117;
              case 2:
              case 3:
              case 4:
              case 5:
              case 7:
              case 8:
              case 9:
                goto LABEL_96;
              case 6:
                if (*(_QWORD *)v24 < (uint64_t)(*(_QWORD *)v25 << 8) >> 8)
                  return 0;
                goto LABEL_97;
              default:
                turi::apply_binary_op_ff();
            }
          case 1:
            switch(*(_BYTE *)(v25 + 12))
            {
              case 0:
                a3.n128_u64[0] = *(_QWORD *)v24;
                if (*(double *)v24 < (double)*(uint64_t *)v25)
                  return 0;
                goto LABEL_97;
              case 1:
                a3.n128_u64[0] = *(_QWORD *)v25;
                v41 = *(double *)v24;
                goto LABEL_117;
              case 2:
              case 3:
              case 4:
              case 5:
              case 7:
              case 8:
              case 9:
                goto LABEL_96;
              case 6:
                v41 = *(double *)v24;
                a3.n128_f64[0] = (double)*(int *)(v25 + 8) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)v25 << 8) >> 8);
LABEL_117:
                if (a3.n128_f64[0] > v41)
                  return 0;
                goto LABEL_97;
              default:
                turi::apply_binary_op_ff();
            }
          case 2:
            v26 = *(unsigned __int8 *)(v25 + 12);
            if (v26 - 3 < 7 || v26 < 2)
              goto LABEL_96;
            if (v26 != 2)
              turi::apply_binary_op_ff();
            if (std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)(*(_QWORD *)v24 + 8), (_QWORD *)(*(_QWORD *)v25 + 8)))
            {
              return 0;
            }
            goto LABEL_97;
          case 3:
            v28 = *(unsigned __int8 *)(v25 + 12);
            if (v28 > 9)
              turi::apply_binary_op_ff();
            if (v28 != 3)
              goto LABEL_96;
            v29 = *(double *)v24;
            v30 = *(unint64_t **)(*(_QWORD *)v25 + 8);
            v31 = *(_QWORD *)(*(_QWORD *)v25 + 16);
            v32 = *(double **)(*(_QWORD *)&v29 + 8);
            v33 = (uint64_t)(*(_QWORD *)(*(_QWORD *)&v29 + 16) - (_QWORD)v32) >> 3;
            v34 = v31 - (_QWORD)v30;
            v13 = v34 == 0;
            v35 = v34 >> 3;
            if (v13)
              goto LABEL_80;
            if (v35 <= 1)
              v36 = 1;
            else
              v36 = v35;
            v37 = v33;
            break;
          case 4:
            v38 = *(unsigned __int8 *)(v25 + 12);
            if (v38 > 9)
              turi::apply_binary_op_ff();
            if (v38 != 4)
              goto LABEL_96;
            if (turi::flexible_type_impl::gt_operator::operator()(a3, (uint64_t)&v44, (uint64_t *)(*(_QWORD *)v25 + 8), (_QWORD *)(*(_QWORD *)v24 + 8)))
            {
              return 0;
            }
            goto LABEL_97;
          case 5:
            if (*(unsigned __int8 *)(v25 + 12) >= 0xAu)
              turi::apply_binary_op_ff();
            goto LABEL_96;
          case 6:
            switch(*(_BYTE *)(v25 + 12))
            {
              case 0:
                if (*(_QWORD *)v25 > (uint64_t)(*(_QWORD *)v24 << 8) >> 8)
                  return 0;
                goto LABEL_97;
              case 1:
                a3.n128_u64[0] = *(_QWORD *)v25;
                if ((double)*(int *)(v24 + 8) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)v24 << 8) >> 8) < *(double *)v25)
                  return 0;
                goto LABEL_97;
              case 2:
              case 3:
              case 4:
              case 5:
              case 7:
              case 8:
              case 9:
                goto LABEL_96;
              case 6:
                v42 = (uint64_t)(*(_QWORD *)v25 << 8) >> 8;
                if (v42 > (uint64_t)(*(_QWORD *)v24 << 8) >> 8
                  || v42 == (uint64_t)(*(_QWORD *)v24 << 8) >> 8 && *(_DWORD *)(v25 + 8) > *(_DWORD *)(v24 + 8))
                {
                  return 0;
                }
                goto LABEL_97;
              default:
                turi::apply_binary_op_ff();
            }
          case 7:
            if (*(unsigned __int8 *)(v25 + 12) >= 0xAu)
              turi::apply_binary_op_ff();
            goto LABEL_96;
          case 8:
            if (*(unsigned __int8 *)(v25 + 12) >= 0xAu)
              turi::apply_binary_op_ff();
            goto LABEL_96;
          case 9:
            if (*(unsigned __int8 *)(v25 + 12) >= 0xAu)
              turi::apply_binary_op_ff();
LABEL_96:
            turi::flexible_type_fail(0);
            goto LABEL_97;
          default:
            turi::apply_binary_op_ff();
        }
        while (v37)
        {
          a3.n128_u64[0] = *v30;
          if (*(double *)v30 > *v32)
            break;
          if (*(double *)v30 < *v32)
            goto LABEL_97;
          --v37;
          ++v30;
          ++v32;
          if (!--v36)
          {
LABEL_80:
            if (v35 <= v33)
              goto LABEL_97;
            return 0;
          }
        }
        return 0;
      }
LABEL_97:
      ++v8;
      v3 = *a1;
      if (v8 >= (a1[1] - *a1) >> 4)
        return 0;
    }
  }
  return 0;
}

uint64_t turi::groupby_aggregate_impl::flexible_type_vector_equality<std::vector<turi::flexible_type>,std::vector<turi::flexible_type>>(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v6;
  unsigned __int8 *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  size_t v12;
  size_t v13;
  uint64_t v14;
  double *v15;
  double *v16;
  uint64_t v17;
  unint64_t v18;
  double *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  double v24;
  double v25;
  uint64_t v26;
  _QWORD *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  double v48;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  double v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned __int8 *v66;
  unsigned __int8 *v67;
  char v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t *v72;

  v2 = *a1;
  v3 = a1[1];
  if (v3 - *a1 != a2[1] - *a2)
    return 0;
  if (v3 == v2)
    return 1;
  v6 = 0;
  while (1)
  {
    v7 = (unsigned __int8 *)(v2 + 16 * v6);
    v8 = v7[12];
    v9 = *a2 + 16 * v6;
    if (v8 != *(unsigned __int8 *)(v9 + 12))
      return 0;
    if (v8 != 7)
      break;
LABEL_6:
    ++v6;
    v2 = *a1;
    if (v6 >= (a1[1] - *a1) >> 4)
      return 1;
  }
  switch(v7[12])
  {
    case 0u:
      if (*(_QWORD *)v7 != *(_QWORD *)v9)
        return 0;
      goto LABEL_6;
    case 1u:
      if (*(double *)v7 != *(double *)v9)
        return 0;
      goto LABEL_6;
    case 2u:
      v10 = *(_QWORD *)v7;
      v11 = *(char *)(*(_QWORD *)v7 + 31);
      v12 = *(unsigned __int8 *)(*(_QWORD *)v7 + 31);
      if (v11 < 0)
        v13 = *(_QWORD *)(v10 + 16);
      else
        v13 = v12;
      v64 = *(_QWORD *)v9;
      if (*(char *)(v64 + 31) < 0)
        v65 = *(_QWORD *)(v64 + 16);
      else
        v65 = *(unsigned __int8 *)(v64 + 31);
      if (v13 != v65)
        return 0;
      v66 = (unsigned __int8 *)(v10 + 8);
      if ((v12 & 0x80) != 0)
        v66 = *(unsigned __int8 **)v66;
      v67 = (unsigned __int8 *)(v64 + 8);
      if ((*(_BYTE *)(v64 + 31) & 0x80) == 0)
      {
        if ((v12 & 0x80) == 0)
          goto LABEL_75;
        goto LABEL_80;
      }
      v67 = *(unsigned __int8 **)v67;
      if ((v12 & 0x80) != 0)
      {
LABEL_80:
        if (memcmp(v66, v67, v13))
          return 0;
        goto LABEL_6;
      }
LABEL_75:
      if (!v13)
        goto LABEL_6;
      while (*v66 == *v67)
      {
        ++v66;
        ++v67;
        if (!--v13)
          goto LABEL_6;
      }
      return 0;
    case 3u:
      v14 = *(_QWORD *)v9;
      v17 = *(_QWORD *)v7 + 8;
      v15 = *(double **)v17;
      v16 = *(double **)(v17 + 8);
      v18 = ((uint64_t)v16 - *(_QWORD *)v17) >> 3;
      v20 = v14 + 8;
      v19 = *(double **)(v14 + 8);
      if (v18 != (uint64_t)(*(_QWORD *)(v20 + 8) - (_QWORD)v19) >> 3)
        return 0;
      if (v16 != v15)
      {
        v21 = v18 <= 1 ? 1 : v16 - v15;
        if (*v15 != *v19)
          return 0;
        v22 = 1;
        do
        {
          v23 = v22;
          if (v21 == v22)
            break;
          v24 = v15[v22];
          v25 = v19[v22++];
        }
        while (v24 == v25);
        if (v23 < v18)
          return 0;
      }
      goto LABEL_6;
    case 4u:
      if ((turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v69, (uint64_t *)(*(_QWORD *)v7 + 8), (_QWORD *)(*(_QWORD *)v9 + 8)) & 1) == 0)return 0;
      goto LABEL_6;
    case 5u:
      if (!turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v69, (uint64_t **)(*(_QWORD *)v7 + 8), (uint64_t **)(*(_QWORD *)v9 + 8)))return 0;
      goto LABEL_6;
    case 6u:
      if (((*(_QWORD *)v9 ^ *(_QWORD *)v7) & 0xFFFFFFFFFFFFFFLL) != 0 || *((_DWORD *)v7 + 2) != *(_DWORD *)(v9 + 8))
        return 0;
      goto LABEL_6;
    case 8u:
      if (!turi::image_type::operator==(*(_QWORD *)v7 + 8, *(_QWORD *)v9 + 8))
        return 0;
      goto LABEL_6;
    case 9u:
      v26 = *(_QWORD *)v9;
      v27 = *(_QWORD **)v7;
      if (*(_QWORD *)v9 == *(_QWORD *)v7)
        goto LABEL_6;
      if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)(v27 + 1), v26 + 8))
        return 0;
      v29 = (char *)v27[3];
      v28 = (char *)v27[4];
      v30 = v28 - v29;
      if (v28 == v29)
        goto LABEL_6;
      if (!v27[1])
        goto LABEL_6;
      v31 = 1;
      do
      {
        v32 = *(_QWORD *)v29;
        v29 += 8;
        v31 *= v32;
      }
      while (v29 != v28);
      if (!v31)
        goto LABEL_6;
      v70 = 0;
      std::vector<unsigned long>::vector(&v71, v30 >> 3, &v70);
      v33 = v71;
      v34 = v72;
      v35 = **(_QWORD **)(v26 + 8);
      v36 = (char *)v72 - (char *)v71;
      v37 = v72 - v71;
      v38 = v37 - 1;
      if (v37 <= 1)
        v39 = 1;
      else
        v39 = v72 - v71;
      do
      {
        if (v34 == v33)
        {
          v47 = 0;
          v48 = *(double *)(*(_QWORD *)v27[1] + 8 * v27[9]);
        }
        else
        {
          v40 = 0;
          v41 = (uint64_t *)v27[6];
          v42 = v33;
          v43 = v39;
          do
          {
            v45 = *v42++;
            v44 = v45;
            v46 = *v41++;
            v40 += v46 * v44;
            --v43;
          }
          while (v43);
          v47 = 0;
          v48 = *(double *)(*(_QWORD *)v27[1] + 8 * (v27[9] + v40));
          v49 = *(uint64_t **)(v26 + 48);
          v50 = v33;
          v51 = v39;
          do
          {
            v53 = *v50++;
            v52 = v53;
            v54 = *v49++;
            v47 += v54 * v52;
            --v51;
          }
          while (v51);
        }
        v55 = *(double *)(v35 + 8 * (*(_QWORD *)(v26 + 72) + v47));
        if (v48 != v55)
          break;
        v56 = v37;
        v57 = v37 - 1;
        if (v36 < 1)
          goto LABEL_56;
        v58 = v27[3];
        v59 = v33[v38] + 1;
        v33[v38] = v59;
        v60 = (v36 & 0xFFFFFFFFFFFFFFF8) - 16;
        v61 = v37 - 1;
        if (v59 < *(_QWORD *)(v58 + 8 * v38))
        {
          v56 = 1;
          v57 = v37 - 1;
LABEL_56:
          if ((v57 & 0x8000000000000000) != 0)
            break;
          continue;
        }
        do
        {
          *(uint64_t *)((char *)v33 + v60 + 8) = 0;
          if (v61 <= 0)
          {
            v72 = v33;
            operator delete(v33);
            goto LABEL_6;
          }
          --v61;
          v62 = *(uint64_t *)((char *)v33 + v60) + 1;
          *(uint64_t *)((char *)v33 + v60) = v62;
          v63 = *(_QWORD *)(v58 + v60);
          v60 -= 8;
        }
        while (v62 >= v63);
        v56 = 1;
        if (v61 < 0)
          break;
      }
      while (v56);
      if (v33)
      {
        v72 = v33;
        operator delete(v33);
      }
      if (v48 != v55)
        return 0;
      goto LABEL_6;
    default:
      turi::apply_binary_op_ff();
  }
}

uint64_t turi::groupby_aggregate_impl::groupby_element::hash_key(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *a1;
  if (a1[1] == *a1)
    return 0;
  v3 = 0;
  v4 = 0;
  v5 = 0;
  do
  {
    v6 = turi::flexible_type::apply_visitor<turi::flexible_type_impl::city_hash_visitor>((unsigned __int8 *)(v1 + v3));
    v7 = 5
       * __ROR8__((0x4CF5AD432745937FLL * ((0x2284A7AA00000000 * v5) | ((0x87C37B91114253D5 * v5) >> 31))) ^ 0x73A3916AE45D01E5, 27)+ 0x4231D716C8ADF0A2;
    v5 = (5
        * (__ROR8__((0x87C37B91114253D5* ((0x93A2C9BF80000000 * v6) | ((unint64_t)(0x4CF5AD432745937FLL * v6) >> 33))) ^ 0x73A3916AE45D01E5, 31)+ v7)+ 944331445) ^ v7;
    ++v4;
    v1 = *a1;
    v3 += 16;
  }
  while (v4 < (a1[1] - *a1) >> 4);
  return v5;
}

uint64_t turi::groupby_aggregate_impl::groupby_element::hash_key(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (!a2)
    return 0;
  v2 = a2;
  v4 = 0;
  v5 = 0;
  do
  {
    v6 = turi::flexible_type::apply_visitor<turi::flexible_type_impl::city_hash_visitor>((unsigned __int8 *)(**(_QWORD **)(**(_QWORD **)a1 + v4) + 16 * *(_QWORD *)(a1 + 8)));
    v7 = 5
       * __ROR8__((0x4CF5AD432745937FLL * ((0x2284A7AA00000000 * v5) | ((0x87C37B91114253D5 * v5) >> 31))) ^ 0x73A3916AE45D01E5, 27)+ 0x4231D716C8ADF0A2;
    v5 = (5
        * (__ROR8__((0x87C37B91114253D5* ((0x93A2C9BF80000000 * v6) | ((unint64_t)(0x4CF5AD432745937FLL * v6) >> 33))) ^ 0x73A3916AE45D01E5, 31)+ v7)+ 944331445) ^ v7;
    v4 += 16;
    --v2;
  }
  while (v2);
  return v5;
}

void turi::groupby_aggregate_impl::group_aggregate_container::tls_segment_set::~tls_segment_set(turi::groupby_aggregate_impl::group_aggregate_container::tls_segment_set *this)
{
  void **v1;

  v1 = (void **)((char *)this + 16);
  std::vector<turi::groupby_aggregate_impl::group_aggregate_container::segment_information>::__destroy_vector::operator()[abi:ne180100](&v1);
}

turi::groupby_aggregate_impl::group_aggregate_container *turi::groupby_aggregate_impl::group_aggregate_container::group_aggregate_container(turi::groupby_aggregate_impl::group_aggregate_container *this, uint64_t a2, unint64_t a3)
{
  uint64_t *v5;
  turi::fs_util *v6;
  int file_handle_limit;
  cppipc *v8;
  unint64_t v9;
  file_logger *v10;
  file_logger *started;
  _QWORD *v12;
  uint64_t v13;
  const std::locale::facet *v14;
  uint64_t v15;
  turi::thread_pool *instance;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  std::locale::__imp *v25;
  _QWORD *exception;
  std::locale v28;
  turi::groupby_aggregate_impl::group_aggregate_container::sa_buffer_t *v29;
  turi::groupby_aggregate_impl::group_aggregate_container::sa_buffer_t *v30;
  char *v31;
  char *v32;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = a2;
  *((_QWORD *)this + 4) = a3;
  *((_DWORD *)this + 10) = 0;
  *((_QWORD *)this + 6) = 0;
  v5 = (uint64_t *)((char *)this + 48);
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_BYTE *)this + 76) = 0;
  turi::sarray<std::string>::sarray((uint64_t)this + 80);
  std::vector<turi::mutex>::vector((_QWORD *)this + 45, a3);
  v6 = (turi::fs_util *)std::vector<std::vector<unsigned long>>::vector((_QWORD *)this + 48, a3);
  *((_QWORD *)this + 51) = 0;
  if (!a3)
    turi::groupby_aggregate_impl::group_aggregate_container::group_aggregate_container(unsigned long,unsigned long)::$_0::operator()();
  file_handle_limit = turi::fs_util::get_file_handle_limit(v6);
  v8 = (cppipc *)global_logger();
  v9 = file_handle_limit / a3;
  if (*((int *)v8 + 169) <= 2)
  {
    if (cppipc::must_cancel(v8))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v10 = (file_logger *)global_logger();
    started = file_logger::start_stream(v10, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/groupby_aggregate_impl.cpp", "group_aggregate_container", 242, 1);
    v12 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v12 && *((_BYTE *)v12 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12 + 2, (uint64_t)"num_local_buffers: ", 19);
    v13 = file_logger::operator<<<unsigned long>((uint64_t)started);
    v8 = (cppipc *)pthread_getspecific(*(_QWORD *)(v13 + 592));
    if (v8)
    {
      if (*((_BYTE *)v8 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(_QWORD *)(*((_QWORD *)v8 + 2) - 24) + 16));
        v14 = std::locale::use_facet(&v28, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v14->__vftable[2].~facet_0)(v14, 10);
        std::locale::~locale(&v28);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush((file_logger *)v13);
        if (*(_DWORD *)(v13 + 600) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  if (v9 >= 2)
  {
    instance = (turi::thread_pool *)turi::thread_pool::get_instance(v8);
    v17 = turi::thread_pool::size(instance);
    if (v17 >= v9 >> 1)
      v15 = v9 >> 1;
    else
      v15 = v17;
    if (!v15)
      return this;
  }
  else
  {
    v15 = 1;
  }
  do
  {
    v19 = *((_QWORD *)this + 7);
    v18 = *((_QWORD *)this + 8);
    if (v19 >= v18)
    {
      v21 = (uint64_t)(v19 - *v5) >> 6;
      if ((unint64_t)(v21 + 1) >> 58)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      v22 = v18 - *v5;
      v23 = v22 >> 5;
      if (v22 >> 5 <= (unint64_t)(v21 + 1))
        v23 = v21 + 1;
      if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFC0)
        v24 = 0x3FFFFFFFFFFFFFFLL;
      else
        v24 = v23;
      v32 = (char *)this + 64;
      if (v24)
        v25 = (std::locale::__imp *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::mutex>>((uint64_t)this + 64, v24);
      else
        v25 = 0;
      v28.__locale_ = v25;
      v29 = (std::locale::__imp *)((char *)v25 + 64 * v21);
      v30 = v29;
      v31 = (char *)v25 + 64 * v24;
      turi::groupby_aggregate_impl::group_aggregate_container::sa_buffer_t::sa_buffer_t(v29, a3);
      v30 = (turi::groupby_aggregate_impl::group_aggregate_container::sa_buffer_t *)((char *)v30 + 64);
      std::vector<turi::groupby_aggregate_impl::group_aggregate_container::sa_buffer_t>::__swap_out_circular_buffer(v5, &v28);
      v20 = *((_QWORD *)this + 7);
      std::__split_buffer<turi::groupby_aggregate_impl::group_aggregate_container::sa_buffer_t>::~__split_buffer((void **)&v28.__locale_);
    }
    else
    {
      turi::groupby_aggregate_impl::group_aggregate_container::sa_buffer_t::sa_buffer_t(*((turi::groupby_aggregate_impl::group_aggregate_container::sa_buffer_t **)this + 7), a3);
      v20 = v19 + 64;
      *((_QWORD *)this + 7) = v20;
    }
    *((_QWORD *)this + 7) = v20;
    turi::sarray<std::string>::open_for_write(*(_QWORD *)(v20 - 64), a3, 0);
    --v15;
  }
  while (v15);
  return this;
}

void sub_218163650(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::locale a12)
{
  uint64_t v12;
  turi::simple_spinlock *v13;
  uint64_t v15;

  std::locale::~locale(&a12);
  v15 = *(_QWORD *)(v12 + 408);
  *(_QWORD *)(v12 + 408) = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a11);
  a11 = a9;
  std::vector<turi::mutex>::__destroy_vector::operator()[abi:ne180100]((void ***)&a11);
  turi::sarray<std::string>::~sarray(a10);
  turi::simple_spinlock::~simple_spinlock(v13);
  std::vector<turi::groupby_aggregate_impl::group_aggregate_container::sa_buffer_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&a11);
  a11 = v12;
  std::vector<turi::groupby_aggregate_impl::group_descriptor>::__destroy_vector::operator()[abi:ne180100]((void ***)&a11);
  _Unwind_Resume(a1);
}

void turi::groupby_aggregate_impl::group_aggregate_container::define_group(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  _QWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  void *__p[2];
  __int128 v14;
  std::__shared_weak_count *v15;

  v15 = 0;
  *(_OWORD *)__p = 0u;
  v14 = 0u;
  if (__p != (void **)a2)
    std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((char *)__p, *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  std::shared_ptr<turi::neural_net::mps_command_queue>::operator=[abi:ne180100]((_QWORD *)&v14 + 1, a3);
  v5 = (_QWORD *)a1[1];
  if ((unint64_t)v5 >= a1[2])
  {
    v9 = std::vector<turi::groupby_aggregate_impl::group_descriptor>::__push_back_slow_path<turi::groupby_aggregate_impl::group_descriptor const&>(a1, (uint64_t)__p);
  }
  else
  {
    *v5 = 0;
    v5[1] = 0;
    v5[2] = 0;
    std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v5, __p[0], (uint64_t)__p[1], ((char *)__p[1] - (char *)__p[0]) >> 3);
    v5[3] = *((_QWORD *)&v14 + 1);
    v6 = v15;
    v5[4] = v15;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
    v9 = (uint64_t)(v5 + 5);
    a1[1] = (uint64_t)(v5 + 5);
  }
  a1[1] = v9;
  v10 = v15;
  if (v15)
  {
    v11 = (unint64_t *)&v15->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_218163830(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  turi::groupby_aggregate_impl::group_descriptor::~group_descriptor((turi::groupby_aggregate_impl::group_descriptor *)&a9);
  _Unwind_Resume(a1);
}

void turi::groupby_aggregate_impl::group_descriptor::~group_descriptor(turi::groupby_aggregate_impl::group_descriptor *this)
{
  void *v2;

  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)this + 24);
  v2 = *(void **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v2;
    operator delete(v2);
  }
}

void turi::groupby_aggregate_impl::group_aggregate_container::init_tls(turi::groupby_aggregate_impl::group_aggregate_container *this)
{
  uint64_t (*v2)(_QWORD);
  uint64_t (*v3)(_QWORD);
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  __n128 v9;
  _OWORD *v10;
  __int128 v11;
  void (__cdecl *v12)(void *);
  unsigned __int8 *v13;
  int v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  _OWORD *v18;
  _OWORD *v19;

  assert_msg(*((_QWORD *)this + 4) != 0, "num_segments cannot be 0");
  v2 = __tls_guard;
  if (!*(_BYTE *)__tls_guard(&__tls_guard))
  {
    *(_BYTE *)v2(&__tls_guard) = 1;
    v16 = (_OWORD *)turi::groupby_aggregate_impl::group_aggregate_container::tss_(&turi::groupby_aggregate_impl::group_aggregate_container::tss_);
    *v16 = 0u;
    v16[1] = 0u;
    *((_QWORD *)v16 + 4) = 0;
    _tlv_atexit((void (__cdecl *)(void *))turi::groupby_aggregate_impl::group_aggregate_container::tls_segment_set::~tls_segment_set, v16);
  }
  v3 = turi::groupby_aggregate_impl::group_aggregate_container::tss_;
  v4 = turi::groupby_aggregate_impl::group_aggregate_container::tss_(&turi::groupby_aggregate_impl::group_aggregate_container::tss_);
  assert_msg(*(_BYTE *)(v4 + 8) == 0, "double init is not allowed");
  if (!*(_BYTE *)v2(&__tls_guard))
  {
    *(_BYTE *)v2(&__tls_guard) = 1;
    v17 = (_OWORD *)v3(&turi::groupby_aggregate_impl::group_aggregate_container::tss_);
    *v17 = 0u;
    v17[1] = 0u;
    *((_QWORD *)v17 + 4) = 0;
    _tlv_atexit((void (__cdecl *)(void *))turi::groupby_aggregate_impl::group_aggregate_container::tls_segment_set::~tls_segment_set, v17);
  }
  std::vector<turi::groupby_aggregate_impl::group_aggregate_container::segment_information>::resize((uint64_t *)(v4 + 16), *((_QWORD *)this + 4));
  if (*((_QWORD *)this + 4))
  {
    v5 = 0;
    v7 = *(unsigned __int8 *)v2(&__tls_guard);
    v8 = 64;
    v9 = 0uLL;
    do
    {
      if (!v7)
      {
        v7 = 1;
        *(_BYTE *)((uint64_t (*)(uint64_t (**)(_QWORD), __n128))v2)(&__tls_guard, v9) = 1;
        v10 = (_OWORD *)v3(&turi::groupby_aggregate_impl::group_aggregate_container::tss_);
        *v10 = v11;
        v10[1] = v11;
        *((_QWORD *)v10 + 4) = 0;
        _tlv_atexit(v12, v10);
        v9 = 0uLL;
        v6 = *((_QWORD *)this + 4);
      }
      *(_QWORD *)(*(_QWORD *)(v4 + 16) + v8) = v5++;
      v8 += 72;
    }
    while (v5 < v6);
  }
  v13 = (unsigned __int8 *)this + 76;
  do
  {
    while (*v13 == 1)
      ;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(1u, v13));
  }
  while (v14);
  v15 = (*((_DWORD *)this + 10) + 1);
  *((_DWORD *)this + 10) = v15;
  if (!*(_BYTE *)v2(&__tls_guard))
  {
    *(_BYTE *)v2(&__tls_guard) = 1;
    v18 = (_OWORD *)v3(&turi::groupby_aggregate_impl::group_aggregate_container::tss_);
    *v18 = 0u;
    v18[1] = 0u;
    *((_QWORD *)v18 + 4) = 0;
    _tlv_atexit((void (__cdecl *)(void *))turi::groupby_aggregate_impl::group_aggregate_container::tls_segment_set::~tls_segment_set, v18);
  }
  *(_QWORD *)v4 = v15;
  __dmb(0xBu);
  *v13 = 0;
  if (!*(_BYTE *)v2(&__tls_guard))
  {
    *(_BYTE *)v2(&__tls_guard) = 1;
    v19 = (_OWORD *)v3(&turi::groupby_aggregate_impl::group_aggregate_container::tss_);
    *v19 = 0u;
    v19[1] = 0u;
    *((_QWORD *)v19 + 4) = 0;
    _tlv_atexit((void (__cdecl *)(void *))turi::groupby_aggregate_impl::group_aggregate_container::tls_segment_set::~tls_segment_set, v19);
  }
  *(_BYTE *)(v4 + 8) = 1;
}

uint64_t *std::vector<turi::groupby_aggregate_impl::group_aggregate_container::segment_information>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t *result;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;

  result = (uint64_t *)a1[1];
  v4 = 0x8E38E38E38E38E39 * (((uint64_t)result - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
    return std::vector<turi::groupby_aggregate_impl::group_aggregate_container::segment_information>::__append(a1, v6);
  if (!v5)
  {
    v7 = *a1 + 72 * a2;
    while (result != (uint64_t *)v7)
      result = turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::~hopscotch_map(result - 9);
    a1[1] = v7;
  }
  return result;
}

uint64_t *turi::groupby_aggregate_impl::group_aggregate_container::flush_tls(turi::groupby_aggregate_impl::group_aggregate_container *this)
{
  uint64_t (*v2)(_QWORD);
  uint64_t (*v3)(_QWORD);
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *result;
  uint64_t *v8;
  _OWORD *v9;
  _OWORD *v10;

  v2 = __tls_guard;
  if (!*(_BYTE *)__tls_guard(&__tls_guard))
  {
    *(_BYTE *)v2(&__tls_guard) = 1;
    v9 = (_OWORD *)turi::groupby_aggregate_impl::group_aggregate_container::tss_(&turi::groupby_aggregate_impl::group_aggregate_container::tss_);
    *v9 = 0u;
    v9[1] = 0u;
    *((_QWORD *)v9 + 4) = 0;
    _tlv_atexit((void (__cdecl *)(void *))turi::groupby_aggregate_impl::group_aggregate_container::tls_segment_set::~tls_segment_set, v9);
  }
  v3 = turi::groupby_aggregate_impl::group_aggregate_container::tss_;
  v4 = turi::groupby_aggregate_impl::group_aggregate_container::tss_(&turi::groupby_aggregate_impl::group_aggregate_container::tss_);
  if (!*(_BYTE *)(v4 + 8))
    turi::groupby_aggregate_impl::group_aggregate_container::throw_if_not_initialized(void)const::{lambda(void)#1}::operator()();
  v5 = v4;
  if (*((_QWORD *)this + 4))
  {
    v6 = 0;
    do
      turi::groupby_aggregate_impl::group_aggregate_container::flush_segment(this, v6++);
    while (v6 < *((_QWORD *)this + 4));
  }
  if (!*(_BYTE *)v2(&__tls_guard))
  {
    *(_BYTE *)v2(&__tls_guard) = 1;
    v10 = (_OWORD *)v3(&turi::groupby_aggregate_impl::group_aggregate_container::tss_);
    *v10 = 0u;
    v10[1] = 0u;
    *((_QWORD *)v10 + 4) = 0;
    _tlv_atexit((void (__cdecl *)(void *))turi::groupby_aggregate_impl::group_aggregate_container::tls_segment_set::~tls_segment_set, v10);
  }
  *(_BYTE *)(v5 + 8) = 0;
  v8 = *(uint64_t **)(v5 + 16);
  for (result = *(uint64_t **)(v5 + 24);
        result != v8;
  *(_QWORD *)(v5 + 24) = v8;
  return result;
}

uint64_t *turi::groupby_aggregate_impl::group_aggregate_container::flush_segment(turi::groupby_aggregate_impl::group_aggregate_container *this, uint64_t a2)
{
  int *v4;
  file_logger *v5;
  file_logger *started;
  _QWORD *v7;
  uint64_t (*v8)(_QWORD);
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  const std::locale::facet *v13;
  uint64_t (*v14)(uint64_t);
  uint64_t (*v15)(_QWORD);
  uint64_t *result;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  unint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  void *v25;
  unint64_t v26;
  uint64_t v27;
  __n128 v28;
  __n128 *v29;
  __n128 *v30;
  __int128 **v31;
  __int128 *v32;
  __int128 *v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  unsigned int *v42;
  unsigned int v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned __int8 *v49;
  int v50;
  int *v51;
  file_logger *v52;
  file_logger *v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  _QWORD *v61;
  const std::locale::facet *v62;
  unint64_t v63;
  turi::groupby_aggregate_impl::groupby_element *v64;
  turi::groupby_aggregate_impl::groupby_element *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t **v70;
  unint64_t v71;
  uint64_t *v72;
  uint64_t *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  char *v78;
  uint64_t *v79;
  char *v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  std::locale *v86;
  uint64_t v87;
  unsigned int v88;
  _OWORD *v89;
  _OWORD *v90;
  _OWORD *v91;
  _QWORD *exception;
  _QWORD *v93;
  turi::groupby_aggregate_impl::group_aggregate_container *v94;
  uint64_t v95;
  void *__p[2];
  char v97;
  __int128 v98;
  void **v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  void *v103;
  _BYTE *v104;
  uint64_t v105;
  void *v106;
  __n128 *v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD v110[2];
  void *v111;
  uint64_t v112;
  char v113;
  char v114;
  uint64_t *v115;
  uint64_t v116;
  _BYTE *v117;
  uint64_t v118;
  char v119;
  std::locale v120;
  std::locale *v121;
  _BYTE v122[24];
  _BYTE *v123;
  _BYTE v124[24];
  _BYTE *v125;
  uint64_t v126;

  v126 = *MEMORY[0x24BDAC8D0];
  v4 = (int *)global_logger();
  if (v4[169] <= 1)
  {
    if (cppipc::must_cancel((cppipc *)v4))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 1, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/groupby_aggregate_impl.cpp", "flush_segment", 370, 1);
    v7 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v7 && *((_BYTE *)v7 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7 + 2, (uint64_t)"flush buffer from task_id: ", 27);
    if (!*(_BYTE *)__tls_guard(&__tls_guard))
    {
      *(_BYTE *)v8(&__tls_guard) = 1;
      v90 = (_OWORD *)turi::groupby_aggregate_impl::group_aggregate_container::tss_(&turi::groupby_aggregate_impl::group_aggregate_container::tss_);
      *v90 = 0u;
      v90[1] = 0u;
      *((_QWORD *)v90 + 4) = 0;
      _tlv_atexit((void (__cdecl *)(void *))turi::groupby_aggregate_impl::group_aggregate_container::tls_segment_set::~tls_segment_set, v90);
    }
    turi::groupby_aggregate_impl::group_aggregate_container::tss_(&turi::groupby_aggregate_impl::group_aggregate_container::tss_);
    v9 = file_logger::operator<<<unsigned long>((uint64_t)started);
    v10 = pthread_getspecific(*(_QWORD *)(v9 + 592));
    if (v10 && *((_BYTE *)v10 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10 + 2, (uint64_t)", segment_id", 12);
    v11 = file_logger::operator<<<unsigned long>(v9);
    v12 = pthread_getspecific(*(_QWORD *)(v11 + 592));
    if (v12)
    {
      if (*((_BYTE *)v12 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v12 + *(_QWORD *)(v12[2] - 24) + 16));
        v13 = std::locale::use_facet(&v120, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 10);
        std::locale::~locale(&v120);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush((file_logger *)v11);
        if (*(_DWORD *)(v11 + 600) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  v14 = __tls_guard;
  if (!*(_BYTE *)__tls_guard(&__tls_guard))
  {
    *(_BYTE *)v14((uint64_t)&__tls_guard) = 1;
    v89 = (_OWORD *)turi::groupby_aggregate_impl::group_aggregate_container::tss_(&turi::groupby_aggregate_impl::group_aggregate_container::tss_);
    *v89 = 0u;
    v89[1] = 0u;
    *((_QWORD *)v89 + 4) = 0;
    _tlv_atexit((void (__cdecl *)(void *))turi::groupby_aggregate_impl::group_aggregate_container::tls_segment_set::~tls_segment_set, v89);
  }
  v15 = turi::groupby_aggregate_impl::group_aggregate_container::tss_;
  result = (uint64_t *)turi::groupby_aggregate_impl::group_aggregate_container::tss_(&turi::groupby_aggregate_impl::group_aggregate_container::tss_);
  if (*(_QWORD *)(result[2] + 72 * a2 + 24) + *(_QWORD *)(*(_QWORD *)(result[2] + 72 * a2) + 32))
  {
    v17 = result;
    turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::hopscotch_map(&v109);
    v18 = v17[2] + 72 * a2;
    v19 = v109;
    v109 = *(_QWORD *)v18;
    *(_QWORD *)v18 = v19;
    std::swap[abi:ne180100]<boost::unordered::unordered_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const,std::vector<turi::groupby_aggregate_impl::groupby_element> *>>>>((uint64_t)v110, v18 + 8);
    v20 = v113;
    v113 = *(_BYTE *)(v18 + 56);
    *(_BYTE *)(v18 + 56) = v20;
    v21 = v114;
    v114 = *(_BYTE *)(v18 + 57);
    *(_BYTE *)(v18 + 57) = v21;
    v22 = (unint64_t)v111 + *(_QWORD *)(v109 + 32);
    if (!v22)
      return turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::~hopscotch_map(&v109);
    v106 = 0;
    v107 = 0;
    v108 = 0;
    std::vector<std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *>>::reserve(&v106, v22);
    v24 = *(_BYTE **)v109;
    v23 = *(_BYTE **)(v109 + 8);
    if (*(_BYTE **)v109 != v23)
    {
      while ((*v24 & 1) == 0)
      {
        v24 += 24;
        if (v24 == v23)
        {
          v24 = *(_BYTE **)(v109 + 8);
          break;
        }
      }
    }
    v25 = v111;
    if (v111)
      v25 = *(void **)(v112 + 8 * v110[1]);
    *(_QWORD *)&v98 = &v109;
    *((_QWORD *)&v98 + 1) = v109;
    v99 = (void **)v24;
    v100 = v25;
    LOBYTE(v101) = v23 == v24;
    v115 = &v109;
    v116 = v109;
    v117 = v23;
    v118 = 0;
    v119 = 1;
    std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::iterator,turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::iterator,std::insert_iterator<std::vector<std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *>>>>((uint64_t)&v98, &v115, (__n128 **)&v106, v107, (uint64_t)&v120);
    v26 = 126 - 2 * __clz(((char *)v107 - (_BYTE *)v106) >> 4);
    if (v107 == v106)
      v27 = 0;
    else
      v27 = v26;
    std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *> *,false>((uint64_t)v106, v107->n128_u64, (uint64_t)&v120, v27, 1);
    v95 = a2;
    v115 = 0;
    v116 = 0;
    v117 = 0;
    v29 = (__n128 *)v106;
    v30 = v107;
    if (v106 != v107)
    {
      v94 = this;
      do
      {
        v31 = (__int128 **)v29->n128_u64[1];
        v33 = *v31;
        v32 = v31[1];
        v34 = 0x6DB6DB6DB6DB6DB7 * (((char *)v32 - (char *)*v31) >> 3);
        if (v34 >= 2)
        {
          v35 = 126 - 2 * __clz(v34);
          if (v32 == v33)
            v36 = 0;
          else
            v36 = v35;
          std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,turi::groupby_aggregate_impl::groupby_element *,false>(*v31, (unint64_t)v31[1], (uint64_t)&v120, v36, 1, v28);
          v31 = (__int128 **)v29->n128_u64[1];
          v33 = *v31;
          v32 = v31[1];
        }
        if (v33 == v32)
          goto LABEL_38;
        v37 = (_QWORD *)v116;
        do
        {
          v37 = (_QWORD *)(std::vector<turi::groupby_aggregate_impl::groupby_element>::insert((uint64_t *)&v115, v37, (uint64_t)v33)+ 56);
          v33 = (__int128 *)((char *)v33 + 56);
        }
        while (v33 != v32);
        v31 = (__int128 **)v29->n128_u64[1];
        if (v31)
        {
LABEL_38:
          v120.__locale_ = (std::locale::__imp *)v31;
          std::vector<turi::groupby_aggregate_impl::groupby_element>::__destroy_vector::operator()[abi:ne180100]((void ***)&v120);
          MEMORY[0x219A19A08](v31, 0x20C40960023A9);
        }
        ++v29;
      }
      while (v29 != v30);
      v38 = (uint64_t)v115;
      v39 = v116;
      for (this = v94; v38 != v39; v38 += 56)
      {
        v40 = *(_QWORD **)(v38 + 24);
        v41 = *(_QWORD **)(v38 + 32);
        while (v40 != v41)
        {
          (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)*v40 + 24))(*v40, v37);
          ++v40;
        }
      }
    }
    v42 = (unsigned int *)((char *)this + 72);
    do
    {
      v43 = __ldaxr(v42);
      v44 = v43 + 1;
    }
    while (__stlxr(v44, v42));
    v45 = *((_QWORD *)this + 6);
    v46 = v44 % ((*((_QWORD *)this + 7) - v45) >> 6);
    v47 = (unsigned int *)(v45 + (v46 << 6) + 56);
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 + 1, v47));
    v49 = (unsigned __int8 *)(*(_QWORD *)(v45 + (v46 << 6) + 32) + v95);
    do
    {
      while (*v49 == 1)
        ;
      do
        v50 = __ldaxr(v49);
      while (__stlxr(1u, v49));
    }
    while (v50);
    v51 = (int *)global_logger();
    if (v51[169] <= 2)
    {
      if (cppipc::must_cancel((cppipc *)v51))
        log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
      v52 = (file_logger *)global_logger();
      v53 = file_logger::start_stream(v52, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/groupby_aggregate_impl.cpp", "flush_segment", 415, 1);
      v54 = pthread_getspecific(*((_QWORD *)v53 + 74));
      if (v54 && *((_BYTE *)v54 + 280))
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54 + 2, (uint64_t)"flush buffer from task_id: ", 27);
      if (!*(_BYTE *)v14((uint64_t)&__tls_guard))
      {
        *(_BYTE *)v14(v55) = 1;
        v91 = (_OWORD *)v15(&turi::groupby_aggregate_impl::group_aggregate_container::tss_);
        *v91 = 0u;
        v91[1] = 0u;
        *((_QWORD *)v91 + 4) = 0;
        _tlv_atexit((void (__cdecl *)(void *))turi::groupby_aggregate_impl::group_aggregate_container::tls_segment_set::~tls_segment_set, v91);
      }
      v56 = file_logger::operator<<<unsigned long>((uint64_t)v53);
      v57 = pthread_getspecific(*(_QWORD *)(v56 + 592));
      if (v57 && *((_BYTE *)v57 + 280))
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57 + 2, (uint64_t)", segment_id: ", 14);
      v58 = file_logger::operator<<<unsigned long>(v56);
      v59 = pthread_getspecific(*(_QWORD *)(v58 + 592));
      if (v59 && *((_BYTE *)v59 + 280))
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59 + 2, (uint64_t)", on buffer: ", 13);
      v60 = file_logger::operator<<<unsigned long>(v58);
      v61 = pthread_getspecific(*(_QWORD *)(v60 + 592));
      if (v61)
      {
        if (*((_BYTE *)v61 + 280))
        {
          std::ios_base::getloc((const std::ios_base *)((char *)v61 + *(_QWORD *)(v61[2] - 24) + 16));
          v62 = std::locale::use_facet(&v120, MEMORY[0x24BEDB350]);
          ((void (*)(const std::locale::facet *, uint64_t))v62->__vftable[2].~facet_0)(v62, 10);
          std::locale::~locale(&v120);
          std::ostream::put();
          std::ostream::flush();
          file_logger::stream_flush((file_logger *)v60);
          if (*(_DWORD *)(v60 + 600) == 7)
          {
            __print_back_trace();
            v93 = __cxa_allocate_exception(8uLL);
            *v93 = "LOG_FATAL encountered";
            __cxa_throw(v93, MEMORY[0x24BEDB718], 0);
          }
        }
      }
    }
    v63 = v46;
    (*(void (**)(std::locale *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(v45 + (v46 << 6)) + 32))(&v120, *(_QWORD *)(v45 + (v46 << 6)), v95);
    v103 = 0;
    v104 = 0;
    v105 = 0;
    v65 = (turi::groupby_aggregate_impl::groupby_element *)v115;
    v64 = (turi::groupby_aggregate_impl::groupby_element *)v116;
    if (v115 == (uint64_t *)v116)
    {
      v66 = (uint64_t)v115;
    }
    else
    {
      do
      {
        v104 = v103;
        v101 = 0;
        v102 = 0;
        v98 = 0u;
        v99 = &v103;
        v100 = v103;
        turi::groupby_aggregate_impl::groupby_element::save(v65, (turi::oarchive *)&v98);
        std::string::basic_string[abi:ne180100](__p, v103, v104 - (_BYTE *)v103);
        if (!v123)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(_BYTE *, void **))(*(_QWORD *)v123 + 48))(v123, __p);
        if (v97 < 0)
          operator delete(__p[0]);
        v65 = (turi::groupby_aggregate_impl::groupby_element *)((char *)v65 + 56);
      }
      while (v65 != v64);
      v65 = (turi::groupby_aggregate_impl::groupby_element *)v115;
      v66 = v116;
    }
    v67 = *(_QWORD *)(v45 + (v63 << 6) + 8) + 24 * v95;
    v68 = 0x6DB6DB6DB6DB6DB7 * ((v66 - (uint64_t)v65) >> 3);
    v70 = (uint64_t **)(v67 + 8);
    v69 = *(uint64_t **)(v67 + 8);
    v71 = *(_QWORD *)(v67 + 16);
    if ((unint64_t)v69 >= v71)
    {
      v73 = *(uint64_t **)v67;
      v74 = ((uint64_t)v69 - *(_QWORD *)v67) >> 3;
      v75 = v74 + 1;
      if ((unint64_t)(v74 + 1) >> 61)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      v76 = v71 - (_QWORD)v73;
      if (v76 >> 2 > v75)
        v75 = v76 >> 2;
      if ((unint64_t)v76 >= 0x7FFFFFFFFFFFFFF8)
        v77 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v77 = v75;
      if (v77)
      {
        v78 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v67 + 16, v77);
        v69 = *v70;
        v73 = *(uint64_t **)v67;
      }
      else
      {
        v78 = 0;
      }
      v79 = (uint64_t *)&v78[8 * v74];
      v80 = &v78[8 * v77];
      *v79 = v68;
      v72 = v79 + 1;
      while (v69 != v73)
      {
        v81 = *--v69;
        *--v79 = v81;
      }
      *(_QWORD *)v67 = v79;
      *v70 = v72;
      *(_QWORD *)(v67 + 16) = v80;
      if (v73)
        operator delete(v73);
    }
    else
    {
      *v69 = v68;
      v72 = v69 + 1;
    }
    *v70 = v72;
    if (v103)
    {
      v104 = v103;
      operator delete(v103);
    }
    v82 = v125;
    if (v125 == v124)
    {
      v83 = 4;
      v82 = v124;
    }
    else
    {
      if (!v125)
        goto LABEL_99;
      v83 = 5;
    }
    (*(void (**)(void))(*v82 + 8 * v83))();
LABEL_99:
    v84 = v123;
    if (v123 == v122)
    {
      v85 = 4;
      v84 = v122;
    }
    else
    {
      if (!v123)
        goto LABEL_104;
      v85 = 5;
    }
    (*(void (**)(void))(*v84 + 8 * v85))();
LABEL_104:
    v86 = v121;
    if (v121 == &v120)
    {
      v87 = 4;
      v86 = &v120;
    }
    else
    {
      if (!v121)
        goto LABEL_109;
      v87 = 5;
    }
    (*((void (**)(void))v86->__locale_ + v87))();
LABEL_109:
    __dmb(0xBu);
    *v49 = 0;
    do
      v88 = __ldaxr(v47);
    while (__stlxr(v88 - 1, v47));
    v120.__locale_ = (std::locale::__imp *)&v115;
    std::vector<turi::groupby_aggregate_impl::groupby_element>::__destroy_vector::operator()[abi:ne180100]((void ***)&v120);
    if (v106)
    {
      v107 = (__n128 *)v106;
      operator delete(v106);
    }
    return turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::~hopscotch_map(&v109);
  }
  return result;
}

void sub_218164768(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  _BYTE *v39;
  uint64_t v40;

  std::locale::~locale((std::locale *)(v40 - 192));
  __dmb(0xBu);
  *v39 = 0;
  a18 = &a39;
  std::vector<turi::groupby_aggregate_impl::groupby_element>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
  if (__p)
  {
    a29 = (uint64_t)__p;
    operator delete(__p);
  }
  turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::~hopscotch_map(&a31);
  _Unwind_Resume(a1);
}

uint64_t turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::operator[](uint64_t a1, unint64_t *a2)
{
  uint64_t v4;
  _OWORD v7[2];
  char v8;
  unint64_t v9[2];
  __int128 v10;
  __int128 v11;
  char v12;

  turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::find(a1, a2, (uint64_t)&v10);
  v9[0] = *a2;
  v9[1] = 0;
  if ((_QWORD)v10 != a1)
    goto LABEL_2;
  if (v12)
  {
    if (*((_QWORD *)&v11 + 1))
      goto LABEL_2;
    goto LABEL_14;
  }
  if (*((_QWORD *)&v10 + 1) == *(_QWORD *)a1 && (_QWORD)v11 == *(_QWORD *)(*(_QWORD *)a1 + 8))
  {
LABEL_14:
    turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::do_insert(a1, v9, (uint64_t)v7);
    v10 = v7[0];
    v11 = v7[1];
    v12 = v8;
  }
LABEL_2:
  if (v12)
    v4 = *((_QWORD *)&v11 + 1) + 16;
  else
    v4 = v11 + 8;
  return v4 + 8;
}

void turi::groupby_aggregate_impl::groupby_element::~groupby_element(void **this)
{
  void **v2;

  v2 = this + 3;
  std::vector<std::unique_ptr<turi::group_aggregate_value>>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = this;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v2);
}

void turi::groupby_aggregate_impl::group_aggregate_container::add(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  uint64_t (*v6)(_QWORD);
  uint64_t (*v7)(_QWORD);
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t **v11;
  uint64_t *v12;
  uint64_t **v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  int v22;
  unint64_t *v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _OWORD *v28;
  _OWORD *v29;
  __int128 v30;
  unint64_t v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  void **v41;

  v6 = __tls_guard;
  if (!*(_BYTE *)__tls_guard(&__tls_guard))
  {
    *(_BYTE *)v6(&__tls_guard) = 1;
    v28 = (_OWORD *)turi::groupby_aggregate_impl::group_aggregate_container::tss_(&turi::groupby_aggregate_impl::group_aggregate_container::tss_);
    *v28 = 0u;
    v28[1] = 0u;
    *((_QWORD *)v28 + 4) = 0;
    _tlv_atexit((void (__cdecl *)(void *))turi::groupby_aggregate_impl::group_aggregate_container::tls_segment_set::~tls_segment_set, v28);
  }
  v7 = turi::groupby_aggregate_impl::group_aggregate_container::tss_;
  v8 = turi::groupby_aggregate_impl::group_aggregate_container::tss_(&turi::groupby_aggregate_impl::group_aggregate_container::tss_);
  if (!*(_BYTE *)(v8 + 8))
    turi::groupby_aggregate_impl::group_aggregate_container::throw_if_not_initialized(void)const::{lambda(void)#1}::operator()();
  v9 = v8;
  v40 = turi::groupby_aggregate_impl::groupby_element::hash_key(a2, a3);
  v10 = v40 % a1[4];
  if (!*(_BYTE *)v6(&__tls_guard))
  {
    *(_BYTE *)v6(&__tls_guard) = 1;
    v29 = (_OWORD *)v7(&turi::groupby_aggregate_impl::group_aggregate_container::tss_);
    *v29 = 0u;
    v29[1] = 0u;
    *((_QWORD *)v29 + 4) = 0;
    _tlv_atexit((void (__cdecl *)(void *))turi::groupby_aggregate_impl::group_aggregate_container::tls_segment_set::~tls_segment_set, v29);
  }
  v11 = (uint64_t **)turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::operator[](*(_QWORD *)(v9 + 16) + 72 * v10, &v40);
  v12 = *v11;
  if (!*v11)
  {
    v13 = v11;
    v12 = (uint64_t *)operator new();
    v12[1] = 0;
    v12[2] = 0;
    *v12 = 0;
    *v13 = v12;
  }
  v14 = *v12;
  if (v12[1] == *v12)
  {
LABEL_12:
    v37 = 0;
    v38 = 0;
    v39 = 0;
    std::vector<turi::flexible_type>::reserve(&v37, a3);
    if (a3)
    {
      v17 = 0;
      v18 = v38;
      do
      {
        v19 = **(_QWORD **)(**(_QWORD **)a2 + 16 * v17) + 16 * *(_QWORD *)(a2 + 8);
        if (v18 >= v39)
        {
          v18 = std::vector<turi::flexible_type>::__push_back_slow_path<turi::flexible_type const&>(&v37, (char *)v19);
        }
        else
        {
          *(_QWORD *)v18 = 0;
          *(_DWORD *)(v18 + 8) = 0;
          *(_BYTE *)(v18 + 12) = 0;
          if (v18 != v19)
          {
            v20 = *(_QWORD *)v19;
            *(_QWORD *)(v18 + 5) = *(_QWORD *)(v19 + 5);
            *(_QWORD *)v18 = v20;
            LODWORD(v20) = *(unsigned __int8 *)(v19 + 12);
            *(_BYTE *)(v18 + 12) = v20;
            v21 = v20 > 9;
            v22 = (1 << v20) & 0x33C;
            if (!v21 && v22 != 0)
            {
              v24 = *(unint64_t **)v18;
              do
                v25 = __ldaxr(v24);
              while (__stlxr(v25 + 1, v24));
            }
          }
          v18 += 16;
        }
        v38 = v18;
        ++v17;
      }
      while (v17 != a3);
    }
    else
    {
      v18 = v38;
    }
    *(_QWORD *)&v30 = v37;
    *((_QWORD *)&v30 + 1) = v18;
    v31 = v39;
    v38 = 0;
    v39 = 0;
    v37 = 0;
    turi::groupby_aggregate_impl::groupby_element::groupby_element(&v32, &v30, a1);
    v26 = (_QWORD *)v12[1];
    if ((unint64_t)v26 >= v12[2])
    {
      v27 = std::vector<turi::groupby_aggregate_impl::groupby_element>::__push_back_slow_path<turi::groupby_aggregate_impl::groupby_element>(v12, (uint64_t)&v32);
    }
    else
    {
      v26[2] = 0;
      v26[3] = 0;
      *v26 = 0;
      v26[1] = 0;
      *(_OWORD *)v26 = v32;
      v26[2] = v33;
      v32 = 0uLL;
      v26[4] = 0;
      v26[5] = 0;
      *(_OWORD *)(v26 + 3) = v34;
      v26[5] = v35;
      v33 = 0;
      v34 = 0uLL;
      v35 = 0;
      v26[6] = v36;
      v27 = (uint64_t)(v26 + 7);
    }
    v12[1] = v27;
    v41 = (void **)&v34;
    std::vector<std::unique_ptr<turi::group_aggregate_value>>::__destroy_vector::operator()[abi:ne180100](&v41);
    v41 = (void **)&v32;
    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v41);
    v41 = (void **)&v30;
    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v41);
    turi::groupby_aggregate_impl::groupby_element::add_element<turi::sframe_rows::row>(v12[1] - 56, (uint64_t **)a2, a1);
    *(_QWORD *)&v32 = &v37;
    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v32);
  }
  else
  {
    v15 = 0;
    v16 = 0;
    while (!turi::groupby_aggregate_impl::flexible_type_vector_equality<std::vector<turi::flexible_type>,turi::sframe_rows::row>((_QWORD *)(v14 + v15), (uint64_t)(*(_QWORD *)(v14 + v15 + 8) - *(_QWORD *)(v14 + v15)) >> 4, a2, a3))
    {
      ++v16;
      v14 = *v12;
      v15 += 56;
      if (v16 >= 0x6DB6DB6DB6DB6DB7 * ((v12[1] - *v12) >> 3))
        goto LABEL_12;
    }
    turi::groupby_aggregate_impl::groupby_element::add_element<turi::sframe_rows::row>(*v12 + v15, (uint64_t **)a2, a1);
    if (*(_QWORD *)(*(_QWORD *)(v9 + 16) + 72 * v10 + 24)
       + *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 16) + 72 * v10) + 32) >= (unint64_t)a1[3])
      turi::groupby_aggregate_impl::group_aggregate_container::flush_segment((turi::groupby_aggregate_impl::group_aggregate_container *)a1, v10);
  }
}

void sub_218164D04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  uint64_t v20;

  turi::groupby_aggregate_impl::groupby_element::~groupby_element((void **)&a13);
  *(_QWORD *)(v20 - 88) = &a10;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)(v20 - 88));
  a13 = &a20;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  _Unwind_Resume(a1);
}

BOOL turi::groupby_aggregate_impl::flexible_type_vector_equality<std::vector<turi::flexible_type>,turi::sframe_rows::row>(_QWORD *a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  size_t v14;
  size_t v15;
  uint64_t v16;
  double *v17;
  double *v18;
  uint64_t v19;
  unint64_t v20;
  double *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  double v26;
  double v27;
  uint64_t v28;
  _QWORD *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  double v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  double v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unsigned __int8 *v68;
  unsigned __int8 *v69;
  char v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t *v74;

  if (a2 != a4)
    return 0;
  if (!a2)
    return 1;
  v7 = 0;
  v8 = 0;
  while (1)
  {
    v9 = (unsigned __int8 *)(*a1 + 16 * v8);
    v10 = v9[12];
    v11 = **(_QWORD **)(**(_QWORD **)a3 + 16 * v8) + 16 * *(_QWORD *)(a3 + 8);
    if (v10 != *(unsigned __int8 *)(v11 + 12))
      return v7;
    if (v10 != 7)
      break;
LABEL_6:
    v7 = ++v8 >= a2;
    if (v8 == a2)
      return v7;
  }
  switch(v9[12])
  {
    case 0u:
      if (*(_QWORD *)v9 != *(_QWORD *)v11)
        return v7;
      goto LABEL_6;
    case 1u:
      if (*(double *)v9 != *(double *)v11)
        return v7;
      goto LABEL_6;
    case 2u:
      v12 = *(_QWORD *)v9;
      v13 = *(char *)(*(_QWORD *)v9 + 31);
      v14 = *(unsigned __int8 *)(*(_QWORD *)v9 + 31);
      if (v13 < 0)
        v15 = *(_QWORD *)(v12 + 16);
      else
        v15 = v14;
      v66 = *(_QWORD *)v11;
      if (*(char *)(v66 + 31) < 0)
        v67 = *(_QWORD *)(v66 + 16);
      else
        v67 = *(unsigned __int8 *)(v66 + 31);
      if (v15 != v67)
        return v7;
      v68 = (unsigned __int8 *)(v12 + 8);
      if ((v14 & 0x80) != 0)
        v68 = *(unsigned __int8 **)v68;
      v69 = (unsigned __int8 *)(v66 + 8);
      if ((*(_BYTE *)(v66 + 31) & 0x80) != 0)
      {
        v69 = *(unsigned __int8 **)v69;
        if ((v14 & 0x80) != 0)
        {
LABEL_80:
          if (memcmp(v68, v69, v15))
            return v7;
          goto LABEL_6;
        }
      }
      else if ((v14 & 0x80) != 0)
      {
        goto LABEL_80;
      }
      if (!v15)
        goto LABEL_6;
      while (*v68 == *v69)
      {
        ++v68;
        ++v69;
        if (!--v15)
          goto LABEL_6;
      }
      return v7;
    case 3u:
      v16 = *(_QWORD *)v11;
      v19 = *(_QWORD *)v9 + 8;
      v17 = *(double **)v19;
      v18 = *(double **)(v19 + 8);
      v20 = ((uint64_t)v18 - *(_QWORD *)v19) >> 3;
      v22 = v16 + 8;
      v21 = *(double **)(v16 + 8);
      if (v20 != (uint64_t)(*(_QWORD *)(v22 + 8) - (_QWORD)v21) >> 3)
        return v7;
      if (v18 != v17)
      {
        v23 = v20 <= 1 ? 1 : v18 - v17;
        if (*v17 != *v21)
          return v7;
        v24 = 1;
        do
        {
          v25 = v24;
          if (v23 == v24)
            break;
          v26 = v17[v24];
          v27 = v21[v24++];
        }
        while (v26 == v27);
        if (v25 < v20)
          return v7;
      }
      goto LABEL_6;
    case 4u:
      if ((turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v71, (uint64_t *)(*(_QWORD *)v9 + 8), (_QWORD *)(*(_QWORD *)v11 + 8)) & 1) == 0)return v7;
      goto LABEL_6;
    case 5u:
      if (!turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v71, (uint64_t **)(*(_QWORD *)v9 + 8), (uint64_t **)(*(_QWORD *)v11 + 8)))return v7;
      goto LABEL_6;
    case 6u:
      if (((*(_QWORD *)v11 ^ *(_QWORD *)v9) & 0xFFFFFFFFFFFFFFLL) != 0 || *((_DWORD *)v9 + 2) != *(_DWORD *)(v11 + 8))
        return v7;
      goto LABEL_6;
    case 8u:
      if (!turi::image_type::operator==(*(_QWORD *)v9 + 8, *(_QWORD *)v11 + 8))
        return v7;
      goto LABEL_6;
    case 9u:
      v28 = *(_QWORD *)v11;
      v29 = *(_QWORD **)v9;
      if (*(_QWORD *)v11 == *(_QWORD *)v9)
        goto LABEL_6;
      if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)(v29 + 1), v28 + 8))
        return v7;
      v31 = (char *)v29[3];
      v30 = (char *)v29[4];
      v32 = v30 - v31;
      if (v30 == v31)
        goto LABEL_6;
      if (!v29[1])
        goto LABEL_6;
      v33 = 1;
      do
      {
        v34 = *(_QWORD *)v31;
        v31 += 8;
        v33 *= v34;
      }
      while (v31 != v30);
      if (!v33)
        goto LABEL_6;
      v72 = 0;
      std::vector<unsigned long>::vector(&v73, v32 >> 3, &v72);
      v35 = v73;
      v36 = v74;
      v37 = **(_QWORD **)(v28 + 8);
      v38 = (char *)v74 - (char *)v73;
      v39 = v74 - v73;
      v40 = v39 - 1;
      if (v39 <= 1)
        v41 = 1;
      else
        v41 = v74 - v73;
      do
      {
        if (v36 == v35)
        {
          v49 = 0;
          v50 = *(double *)(*(_QWORD *)v29[1] + 8 * v29[9]);
        }
        else
        {
          v42 = 0;
          v43 = (uint64_t *)v29[6];
          v44 = v35;
          v45 = v41;
          do
          {
            v47 = *v44++;
            v46 = v47;
            v48 = *v43++;
            v42 += v48 * v46;
            --v45;
          }
          while (v45);
          v49 = 0;
          v50 = *(double *)(*(_QWORD *)v29[1] + 8 * (v29[9] + v42));
          v51 = *(uint64_t **)(v28 + 48);
          v52 = v35;
          v53 = v41;
          do
          {
            v55 = *v52++;
            v54 = v55;
            v56 = *v51++;
            v49 += v56 * v54;
            --v53;
          }
          while (v53);
        }
        v57 = *(double *)(v37 + 8 * (*(_QWORD *)(v28 + 72) + v49));
        if (v50 != v57)
          break;
        v58 = v39;
        v59 = v39 - 1;
        if (v38 < 1)
          goto LABEL_56;
        v60 = v29[3];
        v61 = v35[v40] + 1;
        v35[v40] = v61;
        v62 = (v38 & 0xFFFFFFFFFFFFFFF8) - 16;
        v63 = v39 - 1;
        if (v61 < *(_QWORD *)(v60 + 8 * v40))
        {
          v58 = 1;
          v59 = v39 - 1;
LABEL_56:
          if ((v59 & 0x8000000000000000) != 0)
            break;
          continue;
        }
        do
        {
          *(uint64_t *)((char *)v35 + v62 + 8) = 0;
          if (v63 <= 0)
          {
            v74 = v35;
            operator delete(v35);
            goto LABEL_6;
          }
          --v63;
          v64 = *(uint64_t *)((char *)v35 + v62) + 1;
          *(uint64_t *)((char *)v35 + v62) = v64;
          v65 = *(_QWORD *)(v60 + v62);
          v62 -= 8;
        }
        while (v64 >= v65);
        v58 = 1;
        if (v63 < 0)
          break;
      }
      while (v58);
      if (v35)
      {
        v74 = v35;
        operator delete(v35);
      }
      if (v50 != v57)
        return v7;
      goto LABEL_6;
    default:
      turi::apply_binary_op_ff();
  }
}

void turi::groupby_aggregate_impl::groupby_element::add_element<turi::sframe_rows::row>(uint64_t a1, uint64_t **a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t *v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t *v44;
  void *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t *v56;
  unsigned int v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t *v61;
  void *v62;
  void *v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t *v67;
  void *v68;
  unint64_t *v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t *v72;
  unint64_t *v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t *v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t *v79;
  unsigned int v80;
  unint64_t *v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t *v84;
  void *v85;
  void *v86;
  uint64_t v87;
  unint64_t *v88;
  unint64_t v89;
  unint64_t *v90;
  unint64_t v91;
  unint64_t *v92;
  unint64_t v93;
  unint64_t *v94;
  unint64_t v95;
  unint64_t *v96;
  unint64_t v97;
  unint64_t *v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t *v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  void *v105;
  unint64_t *v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t *v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t *v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  unsigned int v117;
  unint64_t *v118;
  unint64_t v119;
  unint64_t v120;
  uint64_t v121;
  void *v122;
  void *v123;
  void **v125;
  _QWORD v126[4];

  v126[3] = *MEMORY[0x24BDAC8D0];
  v3 = *a3;
  if (a3[1] != *a3)
  {
    v6 = a1;
    v7 = 0;
    do
    {
      v8 = v3 + 40 * v7;
      v9 = *(_QWORD **)v8;
      v10 = *(_QWORD **)(v8 + 8);
      v11 = (uint64_t)v10 - *(_QWORD *)v8;
      v12 = v11 >> 3;
      if (v11 >> 3 == 1)
      {
        v20 = **a2;
        v21 = *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v7);
        if (*v9 >= (unint64_t)(((*a2)[1] - v20) >> 4))
          (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v21 + 16))(v21, &turi::FLEX_UNDEFINED);
        else
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v21 + 16))(v21, **(_QWORD **)(v20 + 16 * *v9) + 16 * (_QWORD)a2[1]);
      }
      else if (v12)
      {
        std::vector<turi::flexible_type>::vector(v126, v11 >> 3);
        if (v10 != v9)
        {
          v22 = 0;
          if (v12 <= 1)
            v23 = 1;
          else
            v23 = v12;
          do
          {
            v24 = *(_QWORD *)(*(_QWORD *)(*a3 + 40 * v7) + 8 * v22);
            v25 = **a2;
            if (v24 >= ((*a2)[1] - v25) >> 4)
            {
              v34 = v126[0] + 16 * v22;
              switch(*(_BYTE *)(v34 + 12))
              {
                case 2:
                  v35 = *(unint64_t **)v34;
                  do
                  {
                    v36 = __ldaxr(v35);
                    v37 = v36 - 1;
                  }
                  while (__stlxr(v37, v35));
                  if (!v37)
                  {
                    v38 = *(unint64_t **)v34;
                    if (!*(_QWORD *)v34)
                      goto LABEL_71;
                    if (*((char *)v38 + 31) < 0)
                      operator delete((void *)v38[1]);
                    v39 = v38;
                    v40 = 0x1012C404EF22A49;
                    goto LABEL_70;
                  }
                  break;
                case 3:
                  v41 = *(unint64_t **)v34;
                  do
                  {
                    v42 = __ldaxr(v41);
                    v43 = v42 - 1;
                  }
                  while (__stlxr(v43, v41));
                  if (!v43)
                  {
                    v44 = *(unint64_t **)v34;
                    if (!*(_QWORD *)v34)
                      goto LABEL_71;
                    v45 = (void *)v44[1];
                    if (v45)
                    {
                      v44[2] = (unint64_t)v45;
                      operator delete(v45);
                    }
                    v39 = v44;
                    v40 = 0x1080C409938AC02;
                    goto LABEL_70;
                  }
                  break;
                case 4:
                  v46 = *(unint64_t **)v34;
                  do
                  {
                    v47 = __ldaxr(v46);
                    v48 = v47 - 1;
                  }
                  while (__stlxr(v48, v46));
                  if (!v48)
                  {
                    v49 = *(unint64_t **)v34;
                    if (!*(_QWORD *)v34)
                      goto LABEL_71;
                    v125 = (void **)(v49 + 1);
                    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v125);
                    goto LABEL_54;
                  }
                  break;
                case 5:
                  v50 = *(unint64_t **)v34;
                  do
                  {
                    v51 = __ldaxr(v50);
                    v52 = v51 - 1;
                  }
                  while (__stlxr(v52, v50));
                  if (!v52)
                  {
                    v49 = *(unint64_t **)v34;
                    if (!*(_QWORD *)v34)
                      goto LABEL_71;
                    v125 = (void **)(v49 + 1);
                    std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v125);
LABEL_54:
                    v39 = v49;
                    v40 = 0x1020C405E66F15BLL;
                    goto LABEL_70;
                  }
                  break;
                case 8:
                  v53 = *(unint64_t **)v34;
                  do
                  {
                    v54 = __ldaxr(v53);
                    v55 = v54 - 1;
                  }
                  while (__stlxr(v55, v53));
                  if (!v55)
                  {
                    v56 = *(unint64_t **)v34;
                    if (!*(_QWORD *)v34)
                      goto LABEL_71;
                    boost::detail::shared_count::~shared_count((unsigned int **)v56 + 2);
                    v39 = v56;
                    v57 = -235920773;
                    goto LABEL_69;
                  }
                  break;
                case 9:
                  v58 = *(unint64_t **)v34;
                  do
                  {
                    v59 = __ldaxr(v58);
                    v60 = v59 - 1;
                  }
                  while (__stlxr(v60, v58));
                  if (!v60)
                  {
                    v61 = *(unint64_t **)v34;
                    if (*(_QWORD *)v34)
                    {
                      v62 = (void *)v61[6];
                      if (v62)
                      {
                        v61[7] = (unint64_t)v62;
                        operator delete(v62);
                      }
                      v63 = (void *)v61[3];
                      if (v63)
                      {
                        v61[4] = (unint64_t)v63;
                        operator delete(v63);
                      }
                      std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v61 + 1));
                      v39 = v61;
                      v57 = 2071181815;
LABEL_69:
                      v40 = v57 | 0x1030C4000000000;
LABEL_70:
                      MEMORY[0x219A19A08](v39, v40);
                    }
LABEL_71:
                    *(_QWORD *)v34 = 0;
                  }
                  break;
                default:
                  break;
              }
              *(_QWORD *)v34 = 0;
              *(_DWORD *)(v34 + 8) = 0;
              *(_BYTE *)(v34 + 12) = 7;
            }
            else
            {
              v26 = **(_QWORD **)(v25 + 16 * v24) + 16 * (_QWORD)a2[1];
              v27 = v126[0] + 16 * v22;
              if (v26 != v27)
              {
                switch(*(_BYTE *)(v27 + 12))
                {
                  case 2:
                    v28 = *(unint64_t **)v27;
                    do
                    {
                      v29 = __ldaxr(v28);
                      v30 = v29 - 1;
                    }
                    while (__stlxr(v30, v28));
                    if (!v30)
                    {
                      v31 = *(unint64_t **)v27;
                      if (!*(_QWORD *)v27)
                        goto LABEL_109;
                      if (*((char *)v31 + 31) < 0)
                        operator delete((void *)v31[1]);
                      v32 = v31;
                      v33 = 0x1012C404EF22A49;
                      goto LABEL_108;
                    }
                    break;
                  case 3:
                    v64 = *(unint64_t **)v27;
                    do
                    {
                      v65 = __ldaxr(v64);
                      v66 = v65 - 1;
                    }
                    while (__stlxr(v66, v64));
                    if (!v66)
                    {
                      v67 = *(unint64_t **)v27;
                      if (!*(_QWORD *)v27)
                        goto LABEL_109;
                      v68 = (void *)v67[1];
                      if (v68)
                      {
                        v67[2] = (unint64_t)v68;
                        operator delete(v68);
                      }
                      v32 = v67;
                      v33 = 0x1080C409938AC02;
                      goto LABEL_108;
                    }
                    break;
                  case 4:
                    v69 = *(unint64_t **)v27;
                    do
                    {
                      v70 = __ldaxr(v69);
                      v71 = v70 - 1;
                    }
                    while (__stlxr(v71, v69));
                    if (!v71)
                    {
                      v72 = *(unint64_t **)v27;
                      if (!*(_QWORD *)v27)
                        goto LABEL_109;
                      v125 = (void **)(v72 + 1);
                      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v125);
                      goto LABEL_92;
                    }
                    break;
                  case 5:
                    v73 = *(unint64_t **)v27;
                    do
                    {
                      v74 = __ldaxr(v73);
                      v75 = v74 - 1;
                    }
                    while (__stlxr(v75, v73));
                    if (!v75)
                    {
                      v72 = *(unint64_t **)v27;
                      if (!*(_QWORD *)v27)
                        goto LABEL_109;
                      v125 = (void **)(v72 + 1);
                      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v125);
LABEL_92:
                      v32 = v72;
                      v33 = 0x1020C405E66F15BLL;
                      goto LABEL_108;
                    }
                    break;
                  case 8:
                    v76 = *(unint64_t **)v27;
                    do
                    {
                      v77 = __ldaxr(v76);
                      v78 = v77 - 1;
                    }
                    while (__stlxr(v78, v76));
                    if (!v78)
                    {
                      v79 = *(unint64_t **)v27;
                      if (!*(_QWORD *)v27)
                        goto LABEL_109;
                      boost::detail::shared_count::~shared_count((unsigned int **)v79 + 2);
                      v32 = v79;
                      v80 = -235920773;
                      goto LABEL_107;
                    }
                    break;
                  case 9:
                    v81 = *(unint64_t **)v27;
                    do
                    {
                      v82 = __ldaxr(v81);
                      v83 = v82 - 1;
                    }
                    while (__stlxr(v83, v81));
                    if (!v83)
                    {
                      v84 = *(unint64_t **)v27;
                      if (*(_QWORD *)v27)
                      {
                        v85 = (void *)v84[6];
                        if (v85)
                        {
                          v84[7] = (unint64_t)v85;
                          operator delete(v85);
                        }
                        v86 = (void *)v84[3];
                        if (v86)
                        {
                          v84[4] = (unint64_t)v86;
                          operator delete(v86);
                        }
                        std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v84 + 1));
                        v32 = v84;
                        v80 = 2071181815;
LABEL_107:
                        v33 = v80 | 0x1030C4000000000;
LABEL_108:
                        MEMORY[0x219A19A08](v32, v33);
                      }
LABEL_109:
                      *(_QWORD *)v27 = 0;
                    }
                    break;
                  default:
                    break;
                }
                v87 = *(_QWORD *)v26;
                *(_QWORD *)(v27 + 5) = *(_QWORD *)(v26 + 5);
                *(_QWORD *)v27 = v87;
                LODWORD(v87) = *(unsigned __int8 *)(v26 + 12);
                *(_BYTE *)(v27 + 12) = v87;
                switch((int)v87)
                {
                  case 2:
                    v88 = *(unint64_t **)v27;
                    do
                      v89 = __ldaxr(v88);
                    while (__stlxr(v89 + 1, v88));
                    break;
                  case 3:
                    v90 = *(unint64_t **)v27;
                    do
                      v91 = __ldaxr(v90);
                    while (__stlxr(v91 + 1, v90));
                    break;
                  case 4:
                    v92 = *(unint64_t **)v27;
                    do
                      v93 = __ldaxr(v92);
                    while (__stlxr(v93 + 1, v92));
                    break;
                  case 5:
                    v94 = *(unint64_t **)v27;
                    do
                      v95 = __ldaxr(v94);
                    while (__stlxr(v95 + 1, v94));
                    break;
                  case 8:
                    v96 = *(unint64_t **)v27;
                    do
                      v97 = __ldaxr(v96);
                    while (__stlxr(v97 + 1, v96));
                    break;
                  case 9:
                    v98 = *(unint64_t **)v27;
                    do
                      v99 = __ldaxr(v98);
                    while (__stlxr(v99 + 1, v98));
                    break;
                  default:
                    break;
                }
              }
            }
            ++v22;
          }
          while (v22 != v23);
        }
        v6 = a1;
        v100 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * v7);
        (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v100 + 8))(v100, v126);
        v125 = (void **)v126;
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v125);
      }
      else
      {
        v13 = *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v7);
        memset(v126, 0, 13);
        (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v13 + 16))(v13, v126);
        switch(BYTE4(v126[1]))
        {
          case 2:
            v14 = (unint64_t *)v126[0];
            do
            {
              v15 = __ldaxr(v14);
              v16 = v15 - 1;
            }
            while (__stlxr(v16, v14));
            if (!v16)
            {
              v17 = v126[0];
              if (v126[0])
              {
                if (*(char *)(v126[0] + 31) < 0)
                  operator delete(*(void **)(v126[0] + 8));
                v18 = v17;
                v19 = 0x1012C404EF22A49;
                goto LABEL_164;
              }
            }
            break;
          case 3:
            v101 = (unint64_t *)v126[0];
            do
            {
              v102 = __ldaxr(v101);
              v103 = v102 - 1;
            }
            while (__stlxr(v103, v101));
            if (!v103)
            {
              v104 = v126[0];
              if (v126[0])
              {
                v105 = *(void **)(v126[0] + 8);
                if (v105)
                {
                  *(_QWORD *)(v126[0] + 16) = v105;
                  operator delete(v105);
                }
                v18 = v104;
                v19 = 0x1080C409938AC02;
                goto LABEL_164;
              }
            }
            break;
          case 4:
            v106 = (unint64_t *)v126[0];
            do
            {
              v107 = __ldaxr(v106);
              v108 = v107 - 1;
            }
            while (__stlxr(v108, v106));
            if (!v108)
            {
              v109 = v126[0];
              if (v126[0])
              {
                v125 = (void **)(v126[0] + 8);
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v125);
                goto LABEL_148;
              }
            }
            break;
          case 5:
            v110 = (unint64_t *)v126[0];
            do
            {
              v111 = __ldaxr(v110);
              v112 = v111 - 1;
            }
            while (__stlxr(v112, v110));
            if (!v112)
            {
              v109 = v126[0];
              if (v126[0])
              {
                v125 = (void **)(v126[0] + 8);
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v125);
LABEL_148:
                v18 = v109;
                v19 = 0x1020C405E66F15BLL;
                goto LABEL_164;
              }
            }
            break;
          case 8:
            v113 = (unint64_t *)v126[0];
            do
            {
              v114 = __ldaxr(v113);
              v115 = v114 - 1;
            }
            while (__stlxr(v115, v113));
            if (!v115)
            {
              v116 = v126[0];
              if (v126[0])
              {
                boost::detail::shared_count::~shared_count((unsigned int **)(v126[0] + 16));
                v18 = v116;
                v117 = -235920773;
                goto LABEL_163;
              }
            }
            break;
          case 9:
            v118 = (unint64_t *)v126[0];
            do
            {
              v119 = __ldaxr(v118);
              v120 = v119 - 1;
            }
            while (__stlxr(v120, v118));
            if (!v120)
            {
              v121 = v126[0];
              if (v126[0])
              {
                v122 = *(void **)(v126[0] + 48);
                if (v122)
                {
                  *(_QWORD *)(v126[0] + 56) = v122;
                  operator delete(v122);
                }
                v123 = *(void **)(v121 + 24);
                if (v123)
                {
                  *(_QWORD *)(v121 + 32) = v123;
                  operator delete(v123);
                }
                std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v121 + 8);
                v18 = v121;
                v117 = 2071181815;
LABEL_163:
                v19 = v117 | 0x1030C4000000000;
LABEL_164:
                MEMORY[0x219A19A08](v18, v19);
              }
            }
            break;
          default:
            break;
        }
      }
      ++v7;
      v3 = *a3;
    }
    while (v7 < 0xCCCCCCCCCCCCCCCDLL * ((a3[1] - *a3) >> 3));
  }
}

void sub_2181659FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, char a11)
{
  a10 = (void **)&a11;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

void std::vector<std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *>>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 4)
  {
    if (a2 >> 60)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::flexible_type>>(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF0];
    v9 = &v6[16 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        *((_OWORD *)v12 - 1) = *((_OWORD *)v10 - 1);
        v12 -= 16;
        v10 -= 16;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

uint64_t turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::begin@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  _BYTE **v2;
  _BYTE *v3;
  _BYTE *v4;
  uint64_t v5;

  v2 = *(_BYTE ***)result;
  v3 = **(_BYTE ***)result;
  v4 = *(_BYTE **)(*(_QWORD *)result + 8);
  if (v3 != v4)
  {
    while ((*v3 & 1) == 0)
    {
      v3 += 24;
      if (v3 == v4)
      {
        v3 = *(_BYTE **)(*(_QWORD *)result + 8);
        break;
      }
    }
  }
  v5 = *(_QWORD *)(result + 24);
  if (v5)
    v5 = *(_QWORD *)(*(_QWORD *)(result + 48) + 8 * *(_QWORD *)(result + 16));
  *(_QWORD *)a2 = result;
  *(_QWORD *)(a2 + 8) = v2;
  *(_QWORD *)(a2 + 16) = v3;
  *(_QWORD *)(a2 + 24) = v5;
  *(_BYTE *)(a2 + 32) = v4 == v3;
  return result;
}

uint64_t turi::groupby_aggregate_impl::group_aggregate_container::merge_local_buffer_set(turi::groupby_aggregate_impl::group_aggregate_container *this)
{
  int v2;
  int *v3;
  file_logger *v4;
  file_logger *started;
  _QWORD *v6;
  _QWORD *v7;
  const std::locale::facet *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  char *v17;
  unint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  turi::thread_pool *instance;
  turi::thread *v31;
  turi::thread_pool *tls_data;
  uint64_t v33;
  turi::thread_pool *v34;
  uint64_t v35;
  double v36;
  turi::thread *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int *v41;
  file_logger *v42;
  file_logger *v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  const std::locale::facet *v48;
  uint64_t result;
  _QWORD *exception;
  _QWORD *v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD v54[4];
  uint64_t v55;
  void *__p;
  char *v57;
  char *v58;
  uint64_t v59;
  timeval v60;
  uint64_t v61[4];
  std::locale v62[26];

  v62[24] = *(std::locale *)MEMORY[0x24BDAC8D0];
  v2 = *((unsigned __int8 *)this + 328);
  if (*((_BYTE *)this + 328))
    v2 = *((_BYTE *)this + 329) != 0;
  assert_msg(v2 ^ 1u, "intermediate_buffer shall be closed before stealing local_buffer.");
  gettimeofday(&v60, 0);
  v3 = (int *)global_logger();
  if (v3[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v3))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v4 = (file_logger *)global_logger();
    started = file_logger::start_stream(v4, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/groupby_aggregate_impl.cpp", "merge_local_buffer_set", 441, 1);
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6 && *((_BYTE *)v6 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"Merging local buffer set ", 25);
    v7 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v7)
    {
      if (*((_BYTE *)v7 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v7 + *(_QWORD *)(v7[2] - 24) + 16));
        v8 = std::locale::use_facet(v62, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 10);
        std::locale::~locale(v62);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  v9 = (uint64_t *)*((_QWORD *)this + 6);
  v10 = *v9;
  *v9 = 0;
  v59 = v10;
  v11 = *((_QWORD *)this + 6);
  v12 = *(_QWORD *)(v11 + 8);
  v53 = (_QWORD *)(v11 + 8);
  v13 = *(_QWORD *)(v11 + 16);
  while (v12 != v13)
  {
    std::vector<unsigned long>::reserve((void **)v12, ((uint64_t)(*((_QWORD *)this + 7) - *((_QWORD *)this + 6)) >> 6)* ((uint64_t)(*(_QWORD *)(v12 + 8) - *(_QWORD *)v12) >> 3));
    v12 += 24;
  }
  __p = 0;
  v57 = 0;
  v58 = 0;
  std::vector<unsigned long>::reserve(&__p, *((_QWORD *)this + 4));
  v52 = v11;
  v14 = *((_QWORD *)this + 6);
  if ((unint64_t)(*((_QWORD *)this + 7) - v14) >= 0x41)
  {
    v15 = 1;
    do
    {
      v16 = (uint64_t *)(v14 + (v15 << 6));
      while (*((_DWORD *)v16 + 14))
        __yield();
      (*(void (**)(uint64_t))(*(_QWORD *)*v16 + 40))(*v16);
      v57 = (char *)__p;
      turi::sarray<std::string>::get_reader(*v16, &v55);
      if (*((_QWORD *)this + 4))
      {
        v18 = 0;
        do
        {
          v17 = (char *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v55 + 24))(v55, v18);
          if (v17)
          {
            v19 = v57;
            if (v57 >= v58)
            {
              v17 = (char *)__p;
              v21 = (v57 - (_BYTE *)__p) >> 3;
              v22 = v21 + 1;
              if ((unint64_t)(v21 + 1) >> 61)
                std::vector<float>::__throw_length_error[abi:ne180100]();
              v23 = v58 - (_BYTE *)__p;
              if ((v58 - (_BYTE *)__p) >> 2 > v22)
                v22 = v23 >> 2;
              if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8)
                v24 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v24 = v22;
              if (v24)
              {
                v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v58, v24);
                v17 = (char *)__p;
                v19 = v57;
              }
              else
              {
                v25 = 0;
              }
              v26 = &v25[8 * v21];
              *(_QWORD *)v26 = v18;
              v20 = v26 + 8;
              while (v19 != v17)
              {
                v27 = *((_QWORD *)v19 - 1);
                v19 -= 8;
                *((_QWORD *)v26 - 1) = v27;
                v26 -= 8;
              }
              __p = v26;
              v57 = v20;
              v58 = &v25[8 * v24];
              if (v17)
                operator delete(v17);
            }
            else
            {
              *(_QWORD *)v57 = v18;
              v20 = v19 + 8;
            }
            v57 = v20;
          }
          ++v18;
        }
        while (v18 < *((_QWORD *)this + 4));
      }
      v29 = (char *)__p;
      v28 = v57;
      v54[0] = &__p;
      v54[1] = v16;
      v54[2] = &v59;
      v54[3] = v53;
      instance = (turi::thread_pool *)turi::thread_pool::get_instance((turi::thread_pool *)v17);
      v31 = (turi::thread *)turi::thread_pool::size(instance);
      tls_data = (turi::thread_pool *)turi::thread::get_tls_data(v31);
      v33 = (v28 - v29) >> 3;
      if (*((_BYTE *)tls_data + 8) || (unint64_t)v31 <= 1)
      {
        if (v28 != v29)
        {
          v39 = 0;
          do
            turi::groupby_aggregate_impl::group_aggregate_container::merge_local_buffer_set(void)::$_0::operator()((uint64_t)v54, v39++);
          while (v33 != v39);
        }
      }
      else
      {
        v34 = (turi::thread_pool *)turi::thread_pool::get_instance(tls_data);
        turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)v62, v34);
        v35 = 0;
        v36 = (double)(unint64_t)v33 / (double)(unint64_t)v31;
        do
        {
          v37 = (turi::thread *)(v35 + 1);
          v38 = (unint64_t)(v36 * (double)(unint64_t)(v35 + 1) + 0.0);
          if ((turi::thread *)v35 == (turi::thread *)((char *)v31 - 1))
            v38 = v33;
          v61[2] = (unint64_t)(v36 * (double)(unint64_t)v35 + 0.0);
          v61[3] = v38;
          v61[0] = (uint64_t)boost::function0<void>::assign_to<void turi::parallel_for<turi::groupby_aggregate_impl::group_aggregate_container::merge_local_buffer_set(void)::$_0>(unsigned long,unsigned long,turi::groupby_aggregate_impl::group_aggregate_container::merge_local_buffer_set(void)::$_0 const&)::{lambda(void)#1}>(turi::groupby_aggregate_impl::group_aggregate_container::merge_local_buffer_set(void)::$_0)::stored_vtable
                 + 1;
          v61[1] = (uint64_t)v54;
          turi::parallel_task_queue::launch((uint64_t)v62, (uint64_t)v61, v35);
          boost::function0<void>::~function0(v61);
          v35 = (uint64_t)v37;
        }
        while (v37 != v31);
        turi::parallel_task_queue::join((turi::parallel_task_queue *)v62);
        turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)v62);
      }
      v40 = v55;
      v55 = 0;
      if (v40)
        (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
      ++v15;
      v14 = *((_QWORD *)this + 6);
    }
    while (v15 < (*((_QWORD *)this + 7) - v14) >> 6);
  }
  if (*(_DWORD *)(v14 + 56))
  {
    do
      __yield();
    while (*(_DWORD *)(*((_QWORD *)this + 6) + 56));
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v59 + 40))(v59);
  turi::sarray<turi::flexible_type>::operator=((uint64_t)this + 80, v59);
  std::vector<std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>>::__vdeallocate((uint64_t *)this + 48);
  *((_OWORD *)this + 24) = *(_OWORD *)(v52 + 8);
  *((_QWORD *)this + 50) = *(_QWORD *)(v52 + 24);
  *v53 = 0;
  v53[1] = 0;
  v53[2] = 0;
  v41 = (int *)global_logger();
  if (v41[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v41))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v42 = (file_logger *)global_logger();
    v43 = file_logger::start_stream(v42, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/groupby_aggregate_impl.cpp", "merge_local_buffer_set", 509, 1);
    v44 = pthread_getspecific(*((_QWORD *)v43 + 74));
    if (v44 && *((_BYTE *)v44 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44 + 2, (uint64_t)"Merging finished in ", 20);
    gettimeofday((timeval *)v62, 0);
    v45 = file_logger::operator<<<double>((uint64_t)v43);
    v46 = pthread_getspecific(*(_QWORD *)(v45 + 592));
    if (v46 && *((_BYTE *)v46 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46 + 2, (uint64_t)" ms.", 4);
    v47 = pthread_getspecific(*(_QWORD *)(v45 + 592));
    if (v47)
    {
      if (*((_BYTE *)v47 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v47 + *(_QWORD *)(v47[2] - 24) + 16));
        v48 = std::locale::use_facet(v62, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v48->__vftable[2].~facet_0)(v48, 10);
        std::locale::~locale(v62);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush((file_logger *)v45);
        if (*(_DWORD *)(v45 + 600) == 7)
        {
          __print_back_trace();
          v51 = __cxa_allocate_exception(8uLL);
          *v51 = "LOG_FATAL encountered";
          __cxa_throw(v51, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  if (__p)
  {
    v57 = (char *)__p;
    operator delete(__p);
  }
  result = v59;
  v59 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_218166258(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,std::locale a27)
{
  std::locale::~locale(&a27);
  if (__p)
    operator delete(__p);
  if (a20)
    (*(void (**)(uint64_t))(*(_QWORD *)a20 + 8))(a20);
  _Unwind_Resume(a1);
}

void turi::groupby_aggregate_impl::group_aggregate_container::group_and_write(turi::groupby_aggregate_impl::group_aggregate_container *this, turi::sframe *a2)
{
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  _BOOL8 v6;
  std::__shared_weak_count *v7;
  std::locale::__imp *v8;
  int *v9;
  file_logger *v10;
  file_logger *started;
  _QWORD *v12;
  unint64_t i;
  int *v14;
  file_logger *v15;
  file_logger *v16;
  uint64_t v17;
  _QWORD *v18;
  int *v19;
  file_logger *v20;
  file_logger *v21;
  _QWORD *v22;
  const std::locale::facet *v23;
  turi::thread_pool *v24;
  turi::thread_pool *instance;
  turi::thread *v26;
  turi::thread_pool *tls_data;
  turi::thread_pool *v28;
  uint64_t v29;
  double v30;
  turi::thread *v31;
  unint64_t v32;
  uint64_t j;
  std::__shared_weak_count *v34;
  unint64_t *p_shared_owners;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  _OWORD *v42;
  _QWORD *exception;
  _QWORD *v44;
  turi::sframe *v45;
  std::locale::__imp **p_locale;
  std::locale::__imp *locale;
  std::__shared_weak_count *v48;
  uint64_t v49[4];
  std::locale v50;
  std::__shared_weak_count *v51;
  uint64_t v52;

  v52 = *MEMORY[0x24BDAC8D0];
  if (!*(_BYTE *)__tls_guard(&__tls_guard))
  {
    *(_BYTE *)v5(v4) = 1;
    v42 = (_OWORD *)turi::groupby_aggregate_impl::group_aggregate_container::tss_(&turi::groupby_aggregate_impl::group_aggregate_container::tss_);
    *v42 = 0u;
    v42[1] = 0u;
    *((_QWORD *)v42 + 4) = 0;
    _tlv_atexit((void (__cdecl *)(void *))turi::groupby_aggregate_impl::group_aggregate_container::tls_segment_set::~tls_segment_set, v42);
  }
  v6 = *(_BYTE *)(turi::groupby_aggregate_impl::group_aggregate_container::tss_(&turi::groupby_aggregate_impl::group_aggregate_container::tss_)
                + 8) == 0;
  assert_msg(v6, "call flush_tls fisrt before write out groupby result");
  turi::groupby_aggregate_impl::group_aggregate_container::merge_local_buffer_set(this);
  if (*((_BYTE *)this + 328) && *((_BYTE *)this + 329))
    turi::sarray<turi::flexible_type>::close((uint64_t)this + 80);
  turi::sarray<std::string>::get_reader((uint64_t)this + 80, (uint64_t *)&v50);
  locale = v50.__locale_;
  v7 = (std::__shared_weak_count *)operator new();
  v8 = v50.__locale_;
  v7->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D930CB8;
  v7->__shared_owners_ = 0;
  v7->__shared_weak_owners_ = 0;
  v7[1].__vftable = (std::__shared_weak_count_vtbl *)v8;
  v48 = v7;
  v9 = (int *)global_logger();
  if (v9[169] < 3)
  {
    if (cppipc::must_cancel((cppipc *)v9))
      goto LABEL_49;
    v10 = (file_logger *)global_logger();
    started = file_logger::start_stream(v10, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/groupby_aggregate_impl.cpp", "group_and_write", 524, 1);
    v12 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v12 && *((_BYTE *)v12 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12 + 2, (uint64_t)"Groupby output segment balance: ", 32);
  }
  for (i = 0; i < (*(uint64_t (**)(std::locale::__imp *))(*(_QWORD *)locale + 16))(locale); ++i)
  {
    v14 = (int *)global_logger();
    if (v14[169] <= 2)
    {
      if (cppipc::must_cancel((cppipc *)v14))
        log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
      v15 = (file_logger *)global_logger();
      v16 = file_logger::start_stream(v15, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/groupby_aggregate_impl.cpp", "group_and_write", 526, 1);
      (*(void (**)(std::locale::__imp *, unint64_t))(*(_QWORD *)locale + 24))(locale, i);
      v17 = file_logger::operator<<<unsigned long>((uint64_t)v16);
      v18 = pthread_getspecific(*(_QWORD *)(v17 + 592));
      if (v18)
      {
        if (*((_BYTE *)v18 + 280))
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18 + 2, (uint64_t)" ", 1);
      }
    }
  }
  v19 = (int *)global_logger();
  if (v19[169] > 2)
    goto LABEL_24;
  if (cppipc::must_cancel((cppipc *)v19))
LABEL_49:
    log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
  v20 = (file_logger *)global_logger();
  v21 = file_logger::start_stream(v20, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/groupby_aggregate_impl.cpp", "group_and_write", 528, 1);
  v22 = pthread_getspecific(*((_QWORD *)v21 + 74));
  if (v22)
  {
    if (*((_BYTE *)v22 + 280))
    {
      std::ios_base::getloc((const std::ios_base *)((char *)v22 + *(_QWORD *)(v22[2] - 24) + 16));
      v23 = std::locale::use_facet(&v50, MEMORY[0x24BEDB350]);
      ((void (*)(const std::locale::facet *, uint64_t))v23->__vftable[2].~facet_0)(v23, 10);
      std::locale::~locale(&v50);
      std::ostream::put();
      std::ostream::flush();
      file_logger::stream_flush(v21);
      if (*((_DWORD *)v21 + 150) == 7)
      {
        __print_back_trace();
        exception = __cxa_allocate_exception(8uLL);
        *exception = "LOG_FATAL encountered";
        __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
      }
    }
  }
LABEL_24:
  v24 = (turi::thread_pool *)(*(uint64_t (**)(std::locale::__imp *))(*(_QWORD *)locale + 16))(locale);
  v44 = this;
  v45 = a2;
  p_locale = &locale;
  instance = (turi::thread_pool *)turi::thread_pool::get_instance(v24);
  v26 = (turi::thread *)turi::thread_pool::size(instance);
  tls_data = (turi::thread_pool *)turi::thread::get_tls_data(v26);
  if (*((_BYTE *)tls_data + 8) || (unint64_t)v26 <= 1)
  {
    if (v24)
    {
      for (j = 0; (turi::thread_pool *)j != v24; ++j)
      {
        v34 = (std::__shared_weak_count *)p_locale[1];
        v50.__locale_ = *p_locale;
        v51 = v34;
        if (v34)
        {
          p_shared_owners = (unint64_t *)&v34->__shared_owners_;
          do
            v36 = __ldxr(p_shared_owners);
          while (__stxr(v36 + 1, p_shared_owners));
        }
        turi::groupby_aggregate_impl::group_aggregate_container::group_and_write_segment(v44, (uint64_t)v45, &v50, j);
        if (v34)
        {
          v37 = (unint64_t *)&v34->__shared_owners_;
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
            std::__shared_weak_count::__release_weak(v34);
          }
        }
      }
    }
  }
  else
  {
    v28 = (turi::thread_pool *)turi::thread_pool::get_instance(tls_data);
    turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)&v50, v28);
    v29 = 0;
    v30 = (double)(unint64_t)v24 / (double)(unint64_t)v26;
    do
    {
      v31 = (turi::thread *)(v29 + 1);
      v32 = (unint64_t)(v30 * (double)(unint64_t)(v29 + 1) + 0.0);
      if ((turi::thread *)v29 == (turi::thread *)((char *)v26 - 1))
        v32 = (unint64_t)v24;
      v49[2] = (unint64_t)(v30 * (double)(unint64_t)v29 + 0.0);
      v49[3] = v32;
      v49[0] = (uint64_t)boost::function0<void>::assign_to<void turi::parallel_for<turi::groupby_aggregate_impl::group_aggregate_container::group_and_write(turi::sframe &)::$_0>(unsigned long,unsigned long,turi::groupby_aggregate_impl::group_aggregate_container::group_and_write(turi::sframe &)::$_0 const&)::{lambda(void)#1}>(turi::groupby_aggregate_impl::group_aggregate_container::group_and_write(turi::sframe &)::$_0)::stored_vtable
             + 1;
      v49[1] = (uint64_t)&v44;
      turi::parallel_task_queue::launch((uint64_t)&v50, (uint64_t)v49, v29);
      boost::function0<void>::~function0(v49);
      v29 = (uint64_t)v31;
    }
    while (v31 != v26);
    turi::parallel_task_queue::join((turi::parallel_task_queue *)&v50);
    turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)&v50);
  }
  v39 = v48;
  if (v48)
  {
    v40 = (unint64_t *)&v48->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
}

void sub_218166824(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, std::locale a18)
{
  std::locale::~locale(&a18);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  _Unwind_Resume(a1);
}

void turi::groupby_aggregate_impl::group_aggregate_container::group_and_write_segment(_QWORD *a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  _QWORD *v16;
  __int128 v17;
  __int128 v18;
  _OWORD *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  __n128 v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t *v45;
  __n128 v46;
  uint64_t *v47;
  void ***v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t *v53;
  __n128 v54;
  uint64_t *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t *v62;
  unint64_t *v63;
  uint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t *v68;
  unint64_t *v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t *v72;
  void *v73;
  void *v74;
  unsigned int v75;
  unint64_t *v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t *v79;
  void *v80;
  unint64_t *v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  BOOL v90;
  int v91;
  unint64_t *v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t *v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t *v101;
  unint64_t *v102;
  uint64_t v103;
  unint64_t *v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t *v107;
  unint64_t *v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t *v111;
  void *v112;
  void *v113;
  unsigned int v114;
  unint64_t *v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t *v118;
  void *v119;
  unint64_t *v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t *v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t *v126;
  uint64_t v127;
  unint64_t *v128;
  unint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t *v134;
  unint64_t v135;
  unint64_t v136;
  uint64_t v137;
  unint64_t *v138;
  unint64_t v139;
  unint64_t v140;
  uint64_t v141;
  void *v142;
  void *v143;
  unsigned int v144;
  unint64_t *v145;
  unint64_t v146;
  unint64_t v147;
  uint64_t v148;
  void *v149;
  unint64_t *v150;
  unint64_t v151;
  unint64_t v152;
  unint64_t *v153;
  unint64_t v154;
  unint64_t v155;
  uint64_t v156;
  _QWORD *v157;
  uint64_t v158;
  _QWORD *v159;
  uint64_t v160;
  __int128 *v161;
  uint64_t v162;
  _QWORD *v164;
  __int128 v165;
  uint64_t v166;
  __int128 v167;
  uint64_t v168;
  unint64_t v169;
  unint64_t v170;
  _OWORD v171[3];
  unint64_t v172;
  unint64_t v173;
  uint64_t v174[3];
  _OWORD v175[3];
  unint64_t v176;
  uint64_t *v177;
  uint64_t *v178;
  unint64_t v179;
  uint64_t v180;
  std::__shared_weak_count *v181;
  _QWORD *v182;
  _QWORD *v183;
  unint64_t v184;
  void **v185;
  __int128 v186;
  _OWORD v187[2];
  __n128 v188;
  __int128 v189;
  uint64_t v190;
  _OWORD v191[2];
  _OWORD v192[2];
  _OWORD *v193;
  uint64_t v194;

  v194 = *MEMORY[0x24BDAC8D0];
  v7 = 0;
  if (a4)
  {
    for (i = 0; i != a4; ++i)
      v7 += (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a3 + 24))(*a3, i);
  }
  v182 = 0;
  v183 = 0;
  v184 = 0;
  v164 = a1;
  v9 = *(_QWORD *)(a1[48] + 24 * a4);
  if (*(_QWORD *)(a1[48] + 24 * a4 + 8) != v9)
  {
    v10 = 0;
    do
    {
      v11 = v7;
      v12 = *(_QWORD *)(v9 + 8 * v10);
      v13 = (std::__shared_weak_count *)a3[1];
      v180 = *a3;
      v181 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldxr(p_shared_owners);
        while (__stxr(v15 + 1, p_shared_owners));
      }
      v7 += v12;
      turi::sarray_reader_buffer<std::string>::sarray_reader_buffer((uint64_t)&v189, &v180, v11, v12 + v11, 1024);
      v16 = v183;
      if ((unint64_t)v183 >= v184)
      {
        v20 = std::vector<turi::sarray_reader_buffer<std::string>>::__push_back_slow_path<turi::sarray_reader_buffer<std::string>>((uint64_t *)&v182, (uint64_t)&v189);
        v21 = (std::__shared_weak_count *)*((_QWORD *)&v191[0] + 1);
        v183 = (_QWORD *)v20;
        if (*((_QWORD *)&v191[0] + 1))
        {
          v22 = (unint64_t *)(*((_QWORD *)&v191[0] + 1) + 8);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
      else
      {
        *v183 = 0;
        v16[1] = 0;
        v16[2] = 0;
        *(_OWORD *)v16 = v189;
        v16[2] = v190;
        v189 = 0uLL;
        v190 = 0;
        *(_OWORD *)(v16 + 3) = v191[0];
        v191[0] = 0uLL;
        v18 = v192[0];
        v17 = v192[1];
        v19 = v193;
        *(_OWORD *)(v16 + 5) = v191[1];
        v16[11] = v19;
        *(_OWORD *)(v16 + 9) = v17;
        *(_OWORD *)(v16 + 7) = v18;
        v183 = v16 + 12;
      }
      *(_QWORD *)&v186 = &v189;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v186);
      v24 = v181;
      if (v181)
      {
        v25 = (unint64_t *)&v181->__shared_owners_;
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
      ++v10;
      v9 = *(_QWORD *)(v164[48] + 24 * a4);
    }
    while (v10 < (*(_QWORD *)(v164[48] + 24 * a4 + 8) - v9) >> 3);
  }
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(&v189, a2, a4);
  v177 = 0;
  v178 = 0;
  v179 = 0;
  v29 = (uint64_t)v182;
  v28 = v183;
  v30 = v164;
  if (v183 != v182)
  {
    v31 = 0;
    v32 = 0;
    do
    {
      if (*(_QWORD *)(v29 + v31 + 88) < *(_QWORD *)(v29 + v31 + 72))
      {
        v188 = 0u;
        v186 = 0u;
        memset(v187, 0, sizeof(v187));
        v33 = (uint64_t *)turi::sarray_reader_buffer<std::string>::next((uint64_t *)(v29 + v31));
        turi::groupby_aggregate_impl::groupby_element::groupby_element((uint64_t)v175, v33, v164);
        std::vector<turi::flexible_type>::__vdeallocate((void **)&v186);
        v186 = v175[0];
        *(_QWORD *)&v187[0] = *(_QWORD *)&v175[1];
        memset(v175, 0, 24);
        std::vector<std::unique_ptr<turi::group_aggregate_value>>::__vdeallocate((_QWORD *)v187 + 1);
        *(_OWORD *)((char *)v187 + 8) = *(_OWORD *)((char *)&v175[1] + 8);
        v34 = *((_QWORD *)&v175[2] + 1);
        memset((char *)&v175[1] + 8, 0, 24);
        *((_QWORD *)&v187[1] + 1) = v34;
        v188.n128_u64[0] = v176;
        *(_QWORD *)&v171[0] = (char *)&v175[1] + 8;
        std::vector<std::unique_ptr<turi::group_aggregate_value>>::__destroy_vector::operator()[abi:ne180100]((void ***)v171);
        *(_QWORD *)&v171[0] = v175;
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v171);
        v188.n128_u64[1] = v32;
        v35 = v178;
        if ((unint64_t)v178 >= v179)
        {
          v36 = (uint64_t *)std::vector<std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>>::__push_back_slow_path<std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>>((uint64_t *)&v177, (uint64_t)&v186);
        }
        else
        {
          v178[2] = 0;
          v35[3] = 0;
          *v35 = 0;
          v35[1] = 0;
          *(_OWORD *)v35 = v186;
          v35[2] = *(_QWORD *)&v187[0];
          v186 = 0uLL;
          *(_QWORD *)&v187[0] = 0;
          v35[4] = 0;
          v35[5] = 0;
          *(_OWORD *)(v35 + 3) = *(_OWORD *)((char *)v187 + 8);
          v35[5] = *((_QWORD *)&v187[1] + 1);
          memset((char *)v187 + 8, 0, 24);
          *((__n128 *)v35 + 3) = v188;
          v36 = v35 + 8;
        }
        v178 = v36;
        *(_QWORD *)&v175[0] = (char *)v187 + 8;
        std::vector<std::unique_ptr<turi::group_aggregate_value>>::__destroy_vector::operator()[abi:ne180100]((void ***)v175);
        *(_QWORD *)&v175[0] = &v186;
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v175);
        v29 = (uint64_t)v182;
        v28 = v183;
      }
      ++v32;
      v31 += 96;
    }
    while (v32 < 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v28 - v29) >> 5));
    v37 = v177;
    v38 = (char *)v178 - (char *)v177;
    if (v178 != v177)
    {
      if (v38 >= 65)
      {
        v39 = v38 >> 6;
        v40 = (unint64_t)((v38 >> 6) - 2) >> 1;
        v41 = v40 + 1;
        v42 = &v177[8 * v40];
        do
        {
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>> &,std::__wrap_iter<std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>*>>((uint64_t)v37, (uint64_t)v175, v39, (uint64_t)v42, v27);
          v42 -= 8;
          --v41;
        }
        while (v41);
        v37 = v177;
      }
      memset(v174, 0, sizeof(v174));
      if (v37 != v178)
      {
        do
        {
          v173 = 0;
          memset(v175, 0, sizeof(v175));
          *(_QWORD *)&v186 = v175;
          *((_QWORD *)&v186 + 1) = &v173;
          std::tuple<turi::groupby_aggregate_impl::groupby_element &,unsigned long &>::operator=[abi:ne180100]<turi::groupby_aggregate_impl::groupby_element,unsigned long,0>((uint64_t)&v186, (uint64_t)v37);
          std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>>,std::__wrap_iter<std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>*>>((uint64_t)v177, (uint64_t)v178, (uint64_t)v171, ((char *)v178 - (char *)v177) >> 6);
          std::vector<std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>>::__base_destruct_at_end[abi:ne180100]((uint64_t)&v177, (void **)v178 - 8);
          if (v182[12 * v173 + 11] < v182[12 * v173 + 9])
          {
            v188 = 0u;
            v186 = 0u;
            memset(v187, 0, sizeof(v187));
            v43 = (uint64_t *)turi::sarray_reader_buffer<std::string>::next(&v182[12 * v173]);
            turi::groupby_aggregate_impl::groupby_element::groupby_element((uint64_t)v171, v43, v30);
            std::vector<turi::flexible_type>::__vdeallocate((void **)&v186);
            v186 = v171[0];
            *(_QWORD *)&v187[0] = *(_QWORD *)&v171[1];
            memset(v171, 0, 24);
            std::vector<std::unique_ptr<turi::group_aggregate_value>>::__vdeallocate((_QWORD *)v187 + 1);
            *(_OWORD *)((char *)v187 + 8) = *(_OWORD *)((char *)&v171[1] + 8);
            v44 = *((_QWORD *)&v171[2] + 1);
            memset((char *)&v171[1] + 8, 0, 24);
            *((_QWORD *)&v187[1] + 1) = v44;
            v188.n128_u64[0] = v172;
            *(_QWORD *)&v165 = (char *)&v171[1] + 8;
            std::vector<std::unique_ptr<turi::group_aggregate_value>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v165);
            *(_QWORD *)&v165 = v171;
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v165);
            v188.n128_u64[1] = v173;
            v45 = v178;
            if ((unint64_t)v178 >= v179)
            {
              v47 = (uint64_t *)std::vector<std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>>::__push_back_slow_path<std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>>((uint64_t *)&v177, (uint64_t)&v186);
            }
            else
            {
              v178[2] = 0;
              v45[3] = 0;
              *v45 = 0;
              v45[1] = 0;
              *(_OWORD *)v45 = v186;
              v45[2] = *(_QWORD *)&v187[0];
              v186 = 0uLL;
              *(_QWORD *)&v187[0] = 0;
              v45[4] = 0;
              v45[5] = 0;
              *(_OWORD *)(v45 + 3) = *(_OWORD *)((char *)v187 + 8);
              v45[5] = *((_QWORD *)&v187[1] + 1);
              memset((char *)v187 + 8, 0, 24);
              v46 = v188;
              *((__n128 *)v45 + 3) = v188;
              v47 = v45 + 8;
            }
            v178 = v47;
            std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>> &,std::__wrap_iter<std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>*>>((uint64_t)v177, (uint64_t)v47, (uint64_t)v171, ((char *)v47 - (char *)v177) >> 6, v46);
            *(_QWORD *)&v171[0] = (char *)v187 + 8;
            std::vector<std::unique_ptr<turi::group_aggregate_value>>::__destroy_vector::operator()[abi:ne180100]((void ***)v171);
            *(_QWORD *)&v171[0] = &v186;
            v48 = (void ***)v171;
            goto LABEL_41;
          }
          while (v178 != v177
               && v177[6] == v176
               && turi::groupby_aggregate_impl::flexible_type_vector_equality<std::vector<turi::flexible_type>,std::vector<turi::flexible_type>>(v177, v175))
          {
            memset(v171, 0, sizeof(v171));
            v170 = 0;
            *(_QWORD *)&v186 = v171;
            *((_QWORD *)&v186 + 1) = &v170;
            std::tuple<turi::groupby_aggregate_impl::groupby_element &,unsigned long &>::operator=[abi:ne180100]<turi::groupby_aggregate_impl::groupby_element,unsigned long,0>((uint64_t)&v186, (uint64_t)v177);
            std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>>,std::__wrap_iter<std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>*>>((uint64_t)v177, (uint64_t)v178, (uint64_t)&v165, ((char *)v178 - (char *)v177) >> 6);
            std::vector<std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>>::__base_destruct_at_end[abi:ne180100]((uint64_t)&v177, (void **)v178 - 8);
            v49 = *((_QWORD *)&v175[1] + 1);
            if (*(_QWORD *)&v175[2] != *((_QWORD *)&v175[1] + 1))
            {
              v50 = 0;
              do
              {
                (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v49 + 8 * v50) + 32))(*(_QWORD *)(v49 + 8 * v50), *(_QWORD *)(*((_QWORD *)&v171[1] + 1) + 8 * v50));
                ++v50;
                v49 = *((_QWORD *)&v175[1] + 1);
              }
              while (v50 < (uint64_t)(*(_QWORD *)&v175[2] - *((_QWORD *)&v175[1] + 1)) >> 3);
            }
            if (v182[12 * v170 + 11] < v182[12 * v170 + 9])
            {
              v188 = 0u;
              v186 = 0u;
              memset(v187, 0, sizeof(v187));
              v51 = (uint64_t *)turi::sarray_reader_buffer<std::string>::next(&v182[12 * v170]);
              turi::groupby_aggregate_impl::groupby_element::groupby_element((uint64_t)&v165, v51, v30);
              std::vector<turi::flexible_type>::__vdeallocate((void **)&v186);
              v186 = v165;
              *(_QWORD *)&v187[0] = v166;
              v166 = 0;
              v165 = 0uLL;
              std::vector<std::unique_ptr<turi::group_aggregate_value>>::__vdeallocate((_QWORD *)v187 + 1);
              *(_OWORD *)((char *)v187 + 8) = v167;
              v52 = v168;
              v168 = 0;
              v167 = 0uLL;
              *((_QWORD *)&v187[1] + 1) = v52;
              v188.n128_u64[0] = v169;
              v185 = (void **)&v167;
              std::vector<std::unique_ptr<turi::group_aggregate_value>>::__destroy_vector::operator()[abi:ne180100](&v185);
              v185 = (void **)&v165;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v185);
              v188.n128_u64[1] = v170;
              v53 = v178;
              if ((unint64_t)v178 >= v179)
              {
                v55 = (uint64_t *)std::vector<std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>>::__push_back_slow_path<std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>>((uint64_t *)&v177, (uint64_t)&v186);
              }
              else
              {
                v178[2] = 0;
                v53[3] = 0;
                *v53 = 0;
                v53[1] = 0;
                *(_OWORD *)v53 = v186;
                v53[2] = *(_QWORD *)&v187[0];
                v186 = 0uLL;
                *(_QWORD *)&v187[0] = 0;
                v53[4] = 0;
                v53[5] = 0;
                *(_OWORD *)(v53 + 3) = *(_OWORD *)((char *)v187 + 8);
                v53[5] = *((_QWORD *)&v187[1] + 1);
                memset((char *)v187 + 8, 0, 24);
                v54 = v188;
                *((__n128 *)v53 + 3) = v188;
                v55 = v53 + 8;
              }
              v178 = v55;
              std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>> &,std::__wrap_iter<std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>*>>((uint64_t)v177, (uint64_t)v55, (uint64_t)&v165, ((char *)v55 - (char *)v177) >> 6, v54);
              *(_QWORD *)&v165 = (char *)v187 + 8;
              std::vector<std::unique_ptr<turi::group_aggregate_value>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v165);
              *(_QWORD *)&v165 = &v186;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v165);
            }
            *(_QWORD *)&v186 = (char *)&v171[1] + 8;
            std::vector<std::unique_ptr<turi::group_aggregate_value>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v186);
            *(_QWORD *)&v186 = v171;
            v48 = (void ***)&v186;
LABEL_41:
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v48);
          }
          std::vector<turi::flexible_type>::resize(v174, ((uint64_t)(*(_QWORD *)&v175[2] - *((_QWORD *)&v175[1] + 1)) >> 3)+ ((uint64_t)(*((_QWORD *)&v175[0] + 1) - *(_QWORD *)&v175[0]) >> 4));
          v56 = *(_QWORD *)&v175[0];
          if (*((_QWORD *)&v175[0] + 1) != *(_QWORD *)&v175[0])
          {
            v57 = 0;
            do
            {
              if (v56 != v174[0])
              {
                v58 = v174[0] + 16 * v57;
                switch(*(_BYTE *)(v58 + 12))
                {
                  case 2:
                    v59 = *(unint64_t **)v58;
                    do
                    {
                      v60 = __ldaxr(v59);
                      v61 = v60 - 1;
                    }
                    while (__stlxr(v61, v59));
                    if (!v61)
                    {
                      v62 = *(unint64_t **)v58;
                      if (!*(_QWORD *)v58)
                        goto LABEL_99;
                      if (*((char *)v62 + 31) < 0)
                        operator delete((void *)v62[1]);
                      v63 = v62;
                      v64 = 0x1012C404EF22A49;
                      goto LABEL_98;
                    }
                    break;
                  case 3:
                    v76 = *(unint64_t **)v58;
                    do
                    {
                      v77 = __ldaxr(v76);
                      v78 = v77 - 1;
                    }
                    while (__stlxr(v78, v76));
                    if (!v78)
                    {
                      v79 = *(unint64_t **)v58;
                      if (!*(_QWORD *)v58)
                        goto LABEL_99;
                      v80 = (void *)v79[1];
                      if (v80)
                      {
                        v79[2] = (unint64_t)v80;
                        operator delete(v80);
                      }
                      v63 = v79;
                      v64 = 0x1080C409938AC02;
                      goto LABEL_98;
                    }
                    break;
                  case 4:
                    v65 = *(unint64_t **)v58;
                    do
                    {
                      v66 = __ldaxr(v65);
                      v67 = v66 - 1;
                    }
                    while (__stlxr(v67, v65));
                    if (!v67)
                    {
                      v68 = *(unint64_t **)v58;
                      if (!*(_QWORD *)v58)
                        goto LABEL_99;
                      *(_QWORD *)&v186 = v68 + 1;
                      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v186);
                      goto LABEL_91;
                    }
                    break;
                  case 5:
                    v81 = *(unint64_t **)v58;
                    do
                    {
                      v82 = __ldaxr(v81);
                      v83 = v82 - 1;
                    }
                    while (__stlxr(v83, v81));
                    if (!v83)
                    {
                      v68 = *(unint64_t **)v58;
                      if (!*(_QWORD *)v58)
                        goto LABEL_99;
                      *(_QWORD *)&v186 = v68 + 1;
                      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v186);
LABEL_91:
                      v63 = v68;
                      v64 = 0x1020C405E66F15BLL;
                      goto LABEL_98;
                    }
                    break;
                  case 8:
                    v84 = *(unint64_t **)v58;
                    do
                    {
                      v85 = __ldaxr(v84);
                      v86 = v85 - 1;
                    }
                    while (__stlxr(v86, v84));
                    if (!v86)
                    {
                      v87 = *(unint64_t **)v58;
                      if (!*(_QWORD *)v58)
                        goto LABEL_99;
                      boost::detail::shared_count::~shared_count((unsigned int **)v87 + 2);
                      v63 = v87;
                      v75 = -235920773;
                      goto LABEL_97;
                    }
                    break;
                  case 9:
                    v69 = *(unint64_t **)v58;
                    do
                    {
                      v70 = __ldaxr(v69);
                      v71 = v70 - 1;
                    }
                    while (__stlxr(v71, v69));
                    if (!v71)
                    {
                      v72 = *(unint64_t **)v58;
                      if (*(_QWORD *)v58)
                      {
                        v73 = (void *)v72[6];
                        if (v73)
                        {
                          v72[7] = (unint64_t)v73;
                          operator delete(v73);
                        }
                        v74 = (void *)v72[3];
                        if (v74)
                        {
                          v72[4] = (unint64_t)v74;
                          operator delete(v74);
                        }
                        std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v72 + 1));
                        v63 = v72;
                        v75 = 2071181815;
LABEL_97:
                        v64 = v75 | 0x1030C4000000000;
LABEL_98:
                        MEMORY[0x219A19A08](v63, v64);
                      }
LABEL_99:
                      *(_QWORD *)v58 = 0;
                    }
                    break;
                  default:
                    break;
                }
                v88 = v56 + 16 * v57;
                v89 = *(_QWORD *)v88;
                *(_QWORD *)(v58 + 5) = *(_QWORD *)(v88 + 5);
                *(_QWORD *)v58 = v89;
                LODWORD(v88) = *(unsigned __int8 *)(v88 + 12);
                *(_BYTE *)(v58 + 12) = v88;
                v90 = v88 > 9;
                v91 = (1 << v88) & 0x33C;
                if (!v90 && v91 != 0)
                {
                  v93 = *(unint64_t **)v58;
                  do
                    v94 = __ldaxr(v93);
                  while (__stlxr(v94 + 1, v93));
                }
              }
              ++v57;
              v56 = *(_QWORD *)&v175[0];
            }
            while (v57 < (uint64_t)(*((_QWORD *)&v175[0] + 1) - *(_QWORD *)&v175[0]) >> 4);
          }
          v95 = *((_QWORD *)&v175[1] + 1);
          v30 = v164;
          if (*(_QWORD *)&v175[2] != *((_QWORD *)&v175[1] + 1))
          {
            v96 = 0;
            do
            {
              (*(void (**)(__int128 *__return_ptr))(**(_QWORD **)(v95 + 8 * v96) + 40))(&v186);
              v97 = v174[0] + 16 * (v96 + ((*((_QWORD *)&v175[0] + 1) - *(_QWORD *)&v175[0]) >> 4));
              if (&v186 == (__int128 *)v97)
              {
                switch(BYTE12(v186))
                {
                  case 2:
                    v128 = (unint64_t *)v186;
                    do
                    {
                      v129 = __ldaxr(v128);
                      v130 = v129 - 1;
                    }
                    while (__stlxr(v130, v128));
                    if (!v130)
                    {
                      v131 = v186;
                      if ((_QWORD)v186)
                      {
                        if (*(char *)(v186 + 31) < 0)
                          operator delete(*(void **)(v186 + 8));
                        v132 = v131;
                        v133 = 0x1012C404EF22A49;
                        goto LABEL_197;
                      }
                    }
                    break;
                  case 3:
                    v145 = (unint64_t *)v186;
                    do
                    {
                      v146 = __ldaxr(v145);
                      v147 = v146 - 1;
                    }
                    while (__stlxr(v147, v145));
                    if (!v147)
                    {
                      v148 = v186;
                      if ((_QWORD)v186)
                      {
                        v149 = *(void **)(v186 + 8);
                        if (v149)
                        {
                          *(_QWORD *)(v186 + 16) = v149;
                          operator delete(v149);
                        }
                        v132 = v148;
                        v133 = 0x1080C409938AC02;
                        goto LABEL_197;
                      }
                    }
                    break;
                  case 4:
                    v134 = (unint64_t *)v186;
                    do
                    {
                      v135 = __ldaxr(v134);
                      v136 = v135 - 1;
                    }
                    while (__stlxr(v136, v134));
                    if (!v136)
                    {
                      v137 = v186;
                      if ((_QWORD)v186)
                      {
                        *(_QWORD *)&v171[0] = v186 + 8;
                        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v171);
                        goto LABEL_190;
                      }
                    }
                    break;
                  case 5:
                    v150 = (unint64_t *)v186;
                    do
                    {
                      v151 = __ldaxr(v150);
                      v152 = v151 - 1;
                    }
                    while (__stlxr(v152, v150));
                    if (!v152)
                    {
                      v137 = v186;
                      if ((_QWORD)v186)
                      {
                        *(_QWORD *)&v171[0] = v186 + 8;
                        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v171);
LABEL_190:
                        v132 = v137;
                        v133 = 0x1020C405E66F15BLL;
                        goto LABEL_197;
                      }
                    }
                    break;
                  case 8:
                    v153 = (unint64_t *)v186;
                    do
                    {
                      v154 = __ldaxr(v153);
                      v155 = v154 - 1;
                    }
                    while (__stlxr(v155, v153));
                    if (!v155)
                    {
                      v156 = v186;
                      if ((_QWORD)v186)
                      {
                        boost::detail::shared_count::~shared_count((unsigned int **)(v186 + 16));
                        v132 = v156;
                        v144 = -235920773;
                        goto LABEL_196;
                      }
                    }
                    break;
                  case 9:
                    v138 = (unint64_t *)v186;
                    do
                    {
                      v139 = __ldaxr(v138);
                      v140 = v139 - 1;
                    }
                    while (__stlxr(v140, v138));
                    if (!v140)
                    {
                      v141 = v186;
                      if ((_QWORD)v186)
                      {
                        v142 = *(void **)(v186 + 48);
                        if (v142)
                        {
                          *(_QWORD *)(v186 + 56) = v142;
                          operator delete(v142);
                        }
                        v143 = *(void **)(v141 + 24);
                        if (v143)
                        {
                          *(_QWORD *)(v141 + 32) = v143;
                          operator delete(v143);
                        }
                        std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v141 + 8);
                        v132 = v141;
                        v144 = 2071181815;
LABEL_196:
                        v133 = v144 | 0x1030C4000000000;
LABEL_197:
                        MEMORY[0x219A19A08](v132, v133);
                      }
                    }
                    break;
                  default:
                    break;
                }
              }
              else
              {
                switch(*(_BYTE *)(v97 + 12))
                {
                  case 2:
                    v98 = *(unint64_t **)v97;
                    do
                    {
                      v99 = __ldaxr(v98);
                      v100 = v99 - 1;
                    }
                    while (__stlxr(v100, v98));
                    if (!v100)
                    {
                      v101 = *(unint64_t **)v97;
                      if (!*(_QWORD *)v97)
                        goto LABEL_152;
                      if (*((char *)v101 + 31) < 0)
                        operator delete((void *)v101[1]);
                      v102 = v101;
                      v103 = 0x1012C404EF22A49;
                      goto LABEL_151;
                    }
                    break;
                  case 3:
                    v115 = *(unint64_t **)v97;
                    do
                    {
                      v116 = __ldaxr(v115);
                      v117 = v116 - 1;
                    }
                    while (__stlxr(v117, v115));
                    if (!v117)
                    {
                      v118 = *(unint64_t **)v97;
                      if (!*(_QWORD *)v97)
                        goto LABEL_152;
                      v119 = (void *)v118[1];
                      if (v119)
                      {
                        v118[2] = (unint64_t)v119;
                        operator delete(v119);
                      }
                      v102 = v118;
                      v103 = 0x1080C409938AC02;
                      goto LABEL_151;
                    }
                    break;
                  case 4:
                    v104 = *(unint64_t **)v97;
                    do
                    {
                      v105 = __ldaxr(v104);
                      v106 = v105 - 1;
                    }
                    while (__stlxr(v106, v104));
                    if (!v106)
                    {
                      v107 = *(unint64_t **)v97;
                      if (!*(_QWORD *)v97)
                        goto LABEL_152;
                      *(_QWORD *)&v171[0] = v107 + 1;
                      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v171);
                      goto LABEL_144;
                    }
                    break;
                  case 5:
                    v120 = *(unint64_t **)v97;
                    do
                    {
                      v121 = __ldaxr(v120);
                      v122 = v121 - 1;
                    }
                    while (__stlxr(v122, v120));
                    if (!v122)
                    {
                      v107 = *(unint64_t **)v97;
                      if (!*(_QWORD *)v97)
                        goto LABEL_152;
                      *(_QWORD *)&v171[0] = v107 + 1;
                      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v171);
LABEL_144:
                      v102 = v107;
                      v103 = 0x1020C405E66F15BLL;
                      goto LABEL_151;
                    }
                    break;
                  case 8:
                    v123 = *(unint64_t **)v97;
                    do
                    {
                      v124 = __ldaxr(v123);
                      v125 = v124 - 1;
                    }
                    while (__stlxr(v125, v123));
                    if (!v125)
                    {
                      v126 = *(unint64_t **)v97;
                      if (!*(_QWORD *)v97)
                        goto LABEL_152;
                      boost::detail::shared_count::~shared_count((unsigned int **)v126 + 2);
                      v102 = v126;
                      v114 = -235920773;
                      goto LABEL_150;
                    }
                    break;
                  case 9:
                    v108 = *(unint64_t **)v97;
                    do
                    {
                      v109 = __ldaxr(v108);
                      v110 = v109 - 1;
                    }
                    while (__stlxr(v110, v108));
                    if (!v110)
                    {
                      v111 = *(unint64_t **)v97;
                      if (*(_QWORD *)v97)
                      {
                        v112 = (void *)v111[6];
                        if (v112)
                        {
                          v111[7] = (unint64_t)v112;
                          operator delete(v112);
                        }
                        v113 = (void *)v111[3];
                        if (v113)
                        {
                          v111[4] = (unint64_t)v113;
                          operator delete(v113);
                        }
                        std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v111 + 1));
                        v102 = v111;
                        v114 = 2071181815;
LABEL_150:
                        v103 = v114 | 0x1030C4000000000;
LABEL_151:
                        MEMORY[0x219A19A08](v102, v103);
                      }
LABEL_152:
                      *(_QWORD *)v97 = 0;
                    }
                    break;
                  default:
                    break;
                }
                v127 = v186;
                *(_QWORD *)(v97 + 5) = *(_QWORD *)((char *)&v186 + 5);
                *(_QWORD *)v97 = v127;
                *(_BYTE *)(v97 + 12) = BYTE12(v186);
              }
              ++v96;
              v95 = *((_QWORD *)&v175[1] + 1);
            }
            while (v96 < (uint64_t)(*(_QWORD *)&v175[2] - *((_QWORD *)&v175[1] + 1)) >> 3);
          }
          if (!*(_QWORD *)&v191[0])
            std::__throw_bad_function_call[abi:ne180100]();
          (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)&v191[0] + 48))(*(_QWORD *)&v191[0], v174);
          *(_QWORD *)&v186 = (char *)&v175[1] + 8;
          std::vector<std::unique_ptr<turi::group_aggregate_value>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v186);
          *(_QWORD *)&v186 = v175;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v186);
          v37 = v177;
        }
        while (v177 != v178);
      }
      *(_QWORD *)&v186 = v174;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v186);
    }
  }
  *(_QWORD *)&v186 = &v177;
  std::vector<std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v186);
  v157 = v193;
  if (v193 == (_OWORD *)((char *)v192 + 8))
  {
    v158 = 4;
    v157 = (_QWORD *)v192 + 1;
  }
  else
  {
    if (!v193)
      goto LABEL_206;
    v158 = 5;
  }
  (*(void (**)(void))(*v157 + 8 * v158))();
LABEL_206:
  v159 = *(_QWORD **)&v192[0];
  if (*(_OWORD **)&v192[0] == (_OWORD *)((char *)v191 + 8))
  {
    v160 = 4;
    v159 = (_QWORD *)v191 + 1;
  }
  else
  {
    if (!*(_QWORD *)&v192[0])
      goto LABEL_211;
    v160 = 5;
  }
  (*(void (**)(void))(*v159 + 8 * v160))();
LABEL_211:
  v161 = *(__int128 **)&v191[0];
  if (*(__int128 **)&v191[0] == &v189)
  {
    v162 = 4;
    v161 = &v189;
    goto LABEL_215;
  }
  if (*(_QWORD *)&v191[0])
  {
    v162 = 5;
LABEL_215:
    (*(void (**)(void))(*(_QWORD *)v161 + 8 * v162))();
  }
  *(_QWORD *)&v189 = &v182;
  std::vector<turi::sarray_reader_buffer<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v189);
}

void sub_218167830(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  uint64_t v45;

  *(_QWORD *)(v45 - 208) = &a45;
  std::vector<turi::sarray_reader_buffer<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v45 - 208));
  _Unwind_Resume(a1);
}

uint64_t std::tuple<turi::groupby_aggregate_impl::groupby_element &,unsigned long &>::operator=[abi:ne180100]<turi::groupby_aggregate_impl::groupby_element,unsigned long,0>(uint64_t a1, uint64_t a2)
{
  void **v4;
  void *v5;

  v4 = *(void ***)a1;
  std::vector<turi::flexible_type>::__vdeallocate(*(void ***)a1);
  *(_OWORD *)v4 = *(_OWORD *)a2;
  v4[2] = *(void **)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  std::vector<std::unique_ptr<turi::group_aggregate_value>>::__vdeallocate(v4 + 3);
  *(_OWORD *)(v4 + 3) = *(_OWORD *)(a2 + 24);
  v5 = *(void **)(a2 + 48);
  v4[5] = *(void **)(a2 + 40);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  v4[6] = v5;
  **(_QWORD **)(a1 + 8) = *(_QWORD *)(a2 + 56);
  return a1;
}

void std::vector<turi::groupby_aggregate_impl::group_aggregate_container::segment_information>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  uint64_t *v2;
  uint64_t *v4;
  void *v5;

  v1 = *a1;
  v2 = (uint64_t *)**a1;
  if (v2)
  {
    v4 = (uint64_t *)v1[1];
    v5 = v2;
    if (v4 != v2)
    {
      do
        v4 = turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::~hopscotch_map(v4 - 9);
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_218167B54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void std::vector<std::unique_ptr<turi::group_aggregate_value>>::__vdeallocate(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = (_QWORD *)*a1;
  if (*a1)
  {
    v3 = (_QWORD *)a1[1];
    v4 = (_QWORD *)*a1;
    if (v3 != v1)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 96))(v5);
      }
      while (v3 != v1);
      v4 = (_QWORD *)*a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void std::vector<std::unique_ptr<turi::group_aggregate_value>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v7 = *--v4;
        v6 = v7;
        *v4 = 0;
        if (v7)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 96))(v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<std::unique_ptr<turi::group_aggregate_value>>::__append(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  __int128 v19;
  char *v20;
  uint64_t v21;
  __int128 v22;
  char *v23;
  uint64_t v24;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = *a1;
    v9 = v7 - *a1;
    v10 = a2 + (v9 >> 3);
    if (v10 >> 61)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v11 = v9 >> 3;
    v12 = v5 - v8;
    if (v12 >> 2 > v10)
      v10 = v12 >> 2;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    v24 = v4;
    if (v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v4, v13);
      v8 = *a1;
      v7 = a1[1];
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[8 * v11];
    v16 = &v14[8 * v13];
    v23 = v16;
    bzero(v15, 8 * a2);
    v17 = &v15[8 * a2];
    *((_QWORD *)&v22 + 1) = v17;
    if (v7 != v8)
    {
      do
      {
        v18 = *((_QWORD *)v7 - 1);
        v7 -= 8;
        *(_QWORD *)v7 = 0;
        *((_QWORD *)v15 - 1) = v18;
        v15 -= 8;
      }
      while (v7 != v8);
      v17 = (char *)*((_QWORD *)&v22 + 1);
      v16 = v23;
    }
    v19 = *(_OWORD *)a1;
    *a1 = v15;
    a1[1] = v17;
    v22 = v19;
    v20 = a1[2];
    a1[2] = v16;
    v23 = v20;
    v21 = v19;
    std::__split_buffer<std::unique_ptr<turi::group_aggregate_value>>::~__split_buffer((uint64_t)&v21);
  }
}

uint64_t std::__split_buffer<std::unique_ptr<turi::group_aggregate_value>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    v4 = *(_QWORD *)(i - 8);
    *(_QWORD *)(i - 8) = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 96))(v4);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

turi::groupby_aggregate_impl::group_aggregate_container::sa_buffer_t *turi::groupby_aggregate_impl::group_aggregate_container::sa_buffer_t::sa_buffer_t(turi::groupby_aggregate_impl::group_aggregate_container::sa_buffer_t *this, unint64_t a2)
{
  uint64_t v4;

  v4 = operator new();
  *(_OWORD *)v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 128) = 0u;
  *(_OWORD *)(v4 + 144) = 0u;
  *(_OWORD *)(v4 + 160) = 0u;
  *(_OWORD *)(v4 + 176) = 0u;
  *(_OWORD *)(v4 + 192) = 0u;
  *(_OWORD *)(v4 + 208) = 0u;
  *(_OWORD *)(v4 + 224) = 0u;
  *(_OWORD *)(v4 + 240) = 0u;
  *(_OWORD *)(v4 + 256) = 0u;
  *(_QWORD *)(v4 + 272) = 0;
  turi::sarray<std::string>::sarray(v4);
  *(_QWORD *)this = v4;
  std::vector<std::vector<unsigned long>>::vector((_QWORD *)this + 1, a2);
  std::vector<turi::simple_spinlock>::vector((_QWORD *)this + 4, a2);
  *((_DWORD *)this + 14) = 0;
  return this;
}

void sub_218167EFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t *v2;
  uint64_t v4;
  va_list va;

  va_start(va, a2);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  v4 = *v2;
  *v2 = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  _Unwind_Resume(a1);
}

uint64_t std::vector<turi::groupby_aggregate_impl::group_aggregate_container::sa_buffer_t>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::groupby_aggregate_impl::group_aggregate_container::sa_buffer_t>,std::reverse_iterator<turi::groupby_aggregate_impl::group_aggregate_container::sa_buffer_t*>,std::reverse_iterator<turi::groupby_aggregate_impl::group_aggregate_container::sa_buffer_t*>,std::reverse_iterator<turi::groupby_aggregate_impl::group_aggregate_container::sa_buffer_t*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::groupby_aggregate_impl::group_aggregate_container::sa_buffer_t>,std::reverse_iterator<turi::groupby_aggregate_impl::group_aggregate_container::sa_buffer_t*>,std::reverse_iterator<turi::groupby_aggregate_impl::group_aggregate_container::sa_buffer_t*>,std::reverse_iterator<turi::groupby_aggregate_impl::group_aggregate_container::sa_buffer_t*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      v8 = *(_QWORD *)(a3 - 64);
      a3 -= 64;
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(v7 - 64) = v8;
      *(_QWORD *)(v7 - 56) = 0;
      *(_QWORD *)(v7 - 48) = 0;
      *(_QWORD *)(v7 - 40) = 0;
      *(_OWORD *)(v7 - 56) = *(_OWORD *)(a3 + 8);
      *(_QWORD *)(v7 - 40) = *(_QWORD *)(a3 + 24);
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)(a3 + 24) = 0;
      *(_QWORD *)(v7 - 32) = 0;
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_OWORD *)(v7 - 32) = *(_OWORD *)(a3 + 32);
      *(_QWORD *)(v7 - 16) = *(_QWORD *)(a3 + 48);
      *(_QWORD *)(a3 + 32) = 0;
      *(_QWORD *)(a3 + 40) = 0;
      *(_QWORD *)(a3 + 48) = 0;
      *(_DWORD *)(v7 - 8) = *(_DWORD *)(a3 + 56);
      v7 = *((_QWORD *)&v14 + 1) - 64;
      *((_QWORD *)&v14 + 1) -= 64;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::groupby_aggregate_impl::group_aggregate_container::sa_buffer_t>,std::reverse_iterator<turi::groupby_aggregate_impl::group_aggregate_container::sa_buffer_t*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::groupby_aggregate_impl::group_aggregate_container::sa_buffer_t>,std::reverse_iterator<turi::groupby_aggregate_impl::group_aggregate_container::sa_buffer_t*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<turi::groupby_aggregate_impl::group_aggregate_container::sa_buffer_t>,std::reverse_iterator<turi::groupby_aggregate_impl::group_aggregate_container::sa_buffer_t*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

uint64_t *std::_AllocatorDestroyRangeReverse<std::allocator<turi::groupby_aggregate_impl::group_aggregate_container::sa_buffer_t>,std::reverse_iterator<turi::groupby_aggregate_impl::group_aggregate_container::sa_buffer_t*>>::operator()[abi:ne180100](uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(result[2] + 8);
  v2 = *(_QWORD *)(result[1] + 8);
  if (v1 != v2)
  {
    v3 = *result;
    do
    {
      result = (uint64_t *)std::allocator<turi::groupby_aggregate_impl::group_aggregate_container::sa_buffer_t>::destroy[abi:ne180100](v3, v1);
      v1 += 64;
    }
    while (v1 != v2);
  }
  return result;
}

void **std::__split_buffer<turi::groupby_aggregate_impl::group_aggregate_container::sa_buffer_t>::~__split_buffer(void **a1)
{
  std::__split_buffer<turi::groupby_aggregate_impl::group_aggregate_container::sa_buffer_t>::clear[abi:ne180100]((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

uint64_t std::__split_buffer<turi::groupby_aggregate_impl::group_aggregate_container::sa_buffer_t>::clear[abi:ne180100](uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(result + 8);
  v1 = *(_QWORD *)(result + 16);
  if (v1 != v2)
  {
    v3 = result;
    do
    {
      v4 = *(_QWORD *)(v3 + 32);
      *(_QWORD *)(v3 + 16) = v1 - 64;
      result = std::allocator<turi::groupby_aggregate_impl::group_aggregate_container::sa_buffer_t>::destroy[abi:ne180100](v4, v1 - 64);
      v1 = *(_QWORD *)(v3 + 16);
    }
    while (v1 != v2);
  }
  return result;
}

uint64_t std::vector<turi::groupby_aggregate_impl::group_descriptor>::__push_back_slow_path<turi::groupby_aggregate_impl::group_descriptor const&>(uint64_t *a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  void *v10;
  char *v11;
  _QWORD *v12;
  char *v13;
  uint64_t *v14;

  v3 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0x666666666666666)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 3) > v4)
    v4 = 0x999999999999999ALL * ((a1[2] - *a1) >> 3);
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 3) >= 0x333333333333333)
    v6 = 0x666666666666666;
  else
    v6 = v4;
  v14 = a1 + 2;
  if (v6)
    v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,turi::flexible_type>>>((uint64_t)(a1 + 2), v6);
  else
    v7 = 0;
  v10 = v7;
  v11 = &v7[40 * v3];
  v13 = &v7[40 * v6];
  std::allocator<turi::groupby_aggregate_impl::group_descriptor>::construct[abi:ne180100]<turi::groupby_aggregate_impl::group_descriptor,turi::groupby_aggregate_impl::group_descriptor const&>((uint64_t)(a1 + 2), v11, a2);
  v12 = v11 + 40;
  std::vector<turi::groupby_aggregate_impl::group_descriptor>::__swap_out_circular_buffer(a1, &v10);
  v8 = a1[1];
  std::__split_buffer<turi::groupby_aggregate_impl::group_descriptor>::~__split_buffer(&v10);
  return v8;
}

void sub_218168288(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<turi::groupby_aggregate_impl::group_descriptor>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

_QWORD *std::allocator<turi::groupby_aggregate_impl::group_descriptor>::construct[abi:ne180100]<turi::groupby_aggregate_impl::group_descriptor,turi::groupby_aggregate_impl::group_descriptor const&>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *result;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  result = std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(a2, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3);
  v6 = *(_QWORD *)(a3 + 32);
  a2[3] = *(_QWORD *)(a3 + 24);
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

uint64_t std::vector<turi::groupby_aggregate_impl::group_descriptor>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::groupby_aggregate_impl::group_descriptor>,std::reverse_iterator<turi::groupby_aggregate_impl::group_descriptor*>,std::reverse_iterator<turi::groupby_aggregate_impl::group_descriptor*>,std::reverse_iterator<turi::groupby_aggregate_impl::group_descriptor*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::groupby_aggregate_impl::group_descriptor>,std::reverse_iterator<turi::groupby_aggregate_impl::group_descriptor*>,std::reverse_iterator<turi::groupby_aggregate_impl::group_descriptor*>,std::reverse_iterator<turi::groupby_aggregate_impl::group_descriptor*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 40) = 0;
      *(_QWORD *)(v7 - 32) = 0;
      *(_QWORD *)(v7 - 24) = 0;
      v8 = *(_OWORD *)(a3 - 40);
      a3 -= 40;
      *(_OWORD *)(v7 - 40) = v8;
      *(_QWORD *)(v7 - 24) = *(_QWORD *)(a3 + 16);
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_OWORD *)(v7 - 16) = *(_OWORD *)(a3 + 24);
      *(_QWORD *)(a3 + 24) = 0;
      *(_QWORD *)(a3 + 32) = 0;
      v7 = *((_QWORD *)&v14 + 1) - 40;
      *((_QWORD *)&v14 + 1) -= 40;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::groupby_aggregate_impl::group_descriptor>,std::reverse_iterator<turi::groupby_aggregate_impl::group_descriptor*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::groupby_aggregate_impl::group_descriptor>,std::reverse_iterator<turi::groupby_aggregate_impl::group_descriptor*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<turi::groupby_aggregate_impl::group_descriptor>,std::reverse_iterator<turi::groupby_aggregate_impl::group_descriptor*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<turi::groupby_aggregate_impl::group_descriptor>,std::reverse_iterator<turi::groupby_aggregate_impl::group_descriptor*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1[2] + 8);
  v2 = *(_QWORD *)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      std::allocator<turi::groupby_aggregate_impl::group_descriptor>::destroy[abi:ne180100](v3, v1);
      v1 += 40;
    }
    while (v1 != v2);
  }
}

void **std::__split_buffer<turi::groupby_aggregate_impl::group_descriptor>::~__split_buffer(void **a1)
{
  std::__split_buffer<turi::groupby_aggregate_impl::group_descriptor>::clear[abi:ne180100](a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<turi::groupby_aggregate_impl::group_descriptor>::clear[abi:ne180100](_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 40;
    std::allocator<turi::groupby_aggregate_impl::group_descriptor>::destroy[abi:ne180100](v4, i - 40);
  }
}

_QWORD *std::vector<turi::groupby_aggregate_impl::group_aggregate_container::segment_information>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  _QWORD v18[2];
  char *v19;
  char *v20;
  uint64_t v21;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0x8E38E38E38E38E39 * ((v6 - v7) >> 3) >= a2)
    return std::vector<turi::groupby_aggregate_impl::group_aggregate_container::segment_information>::__construct_at_end(a1, a2);
  v8 = 0x8E38E38E38E38E39 * ((v7 - *a1) >> 3);
  v9 = v8 + a2;
  if (v8 + a2 > 0x38E38E38E38E38ELL)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  v10 = 0x8E38E38E38E38E39 * ((v5 - *a1) >> 3);
  if (2 * v10 > v9)
    v9 = 2 * v10;
  if (v10 >= 0x1C71C71C71C71C7)
    v11 = 0x38E38E38E38E38ELL;
  else
    v11 = v9;
  v21 = v4;
  if (v11)
    v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::query_eval::opt_union_on_source::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::merge_info>>(v4, v11);
  else
    v12 = 0;
  v14 = &v12[72 * v8];
  v18[0] = v12;
  v18[1] = v14;
  v19 = v14;
  v20 = &v12[72 * v11];
  v15 = 9 * a2;
  v16 = &v14[72 * a2];
  v17 = 8 * v15;
  do
  {
    *((_QWORD *)v14 + 8) = 0;
    *((_OWORD *)v14 + 2) = 0u;
    *((_OWORD *)v14 + 3) = 0u;
    *(_OWORD *)v14 = 0u;
    *((_OWORD *)v14 + 1) = 0u;
    turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::hopscotch_map(v14);
    v14 += 72;
    v17 -= 72;
  }
  while (v17);
  v19 = v16;
  std::vector<turi::groupby_aggregate_impl::group_aggregate_container::segment_information>::__swap_out_circular_buffer(a1, v18);
  return (_QWORD *)std::__split_buffer<turi::groupby_aggregate_impl::group_aggregate_container::segment_information>::~__split_buffer((uint64_t)v18);
}

void sub_21816865C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<turi::groupby_aggregate_impl::group_aggregate_container::segment_information>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<turi::groupby_aggregate_impl::group_aggregate_container::segment_information>::__construct_at_end(_QWORD *result, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = result;
  v3 = result[1];
  if (a2)
  {
    v4 = v3 + 72 * a2;
    v5 = 72 * a2;
    do
    {
      *(_QWORD *)(v3 + 64) = 0;
      *(_OWORD *)(v3 + 32) = 0u;
      *(_OWORD *)(v3 + 48) = 0u;
      *(_OWORD *)v3 = 0u;
      *(_OWORD *)(v3 + 16) = 0u;
      result = turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::hopscotch_map((_QWORD *)v3);
      v3 += 72;
      v5 -= 72;
    }
    while (v5);
    v3 = v4;
  }
  v2[1] = v3;
  return result;
}

void sub_2181686E4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<turi::groupby_aggregate_impl::group_aggregate_container::segment_information>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::groupby_aggregate_impl::group_aggregate_container::segment_information>,std::reverse_iterator<turi::groupby_aggregate_impl::group_aggregate_container::segment_information*>,std::reverse_iterator<turi::groupby_aggregate_impl::group_aggregate_container::segment_information*>,std::reverse_iterator<turi::groupby_aggregate_impl::group_aggregate_container::segment_information*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::groupby_aggregate_impl::group_aggregate_container::segment_information>,std::reverse_iterator<turi::groupby_aggregate_impl::group_aggregate_container::segment_information*>,std::reverse_iterator<turi::groupby_aggregate_impl::group_aggregate_container::segment_information*>,std::reverse_iterator<turi::groupby_aggregate_impl::group_aggregate_container::segment_information*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;

  if (a3 != a5)
  {
    v11 = 0;
    do
    {
      turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::hopscotch_map(a7 + v11 - 72, (uint64_t *)(a3 + v11 - 72));
      *(_QWORD *)(a7 + v11 - 8) = *(_QWORD *)(a3 + v11 - 8);
      v11 -= 72;
    }
    while (a3 + v11 != a5);
  }
  return a6;
}

void sub_2181687E4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;

  for (; v2; v2 += 72)
    turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::~hopscotch_map((uint64_t *)(v1 + v2));
  _Unwind_Resume(exception_object);
}

uint64_t turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::hopscotch_map(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD *new_container;

  v4 = a1 + 8;
  boost::unordered::unordered_map<unsigned long,turi::any,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const,turi::any>>>::unordered_map(a1 + 8);
  *(_BYTE *)(a1 + 56) = *((_BYTE *)a2 + 56);
  *(_BYTE *)(a1 + 57) = *((_BYTE *)a2 + 57);
  new_container = turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::create_new_container(a1, a2[3] - 0x5555555555555555 * ((uint64_t)(*(_QWORD *)(*a2 + 8) - *(_QWORD *)*a2) >> 3));
  *(_QWORD *)a1 = new_container;
  turi::hopscotch_table<std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *>,turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::hash_redirect,turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::key_equal_redirect>::operator=((uint64_t)new_container, *a2);
  if ((uint64_t *)a1 != a2)
    boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const,std::vector<turi::groupby_aggregate_impl::groupby_element> *>>,unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>>::assign<std::integral_constant<BOOL,true>>(v4, (uint64_t)(a2 + 1));
  return a1;
}

void sub_218168894(_Unwind_Exception *a1)
{
  _QWORD *v1;

  boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const,std::vector<turi::groupby_aggregate_impl::groupby_element> *>>,unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>>::delete_buckets(v1);
  _Unwind_Resume(a1);
}

_QWORD *turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::create_new_container(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)operator new();
  turi::hopscotch_table<std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *>,turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::hash_redirect,turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::key_equal_redirect>::hopscotch_table(v4, a2, *(_BYTE *)(a1 + 56), *(_BYTE *)(a1 + 57));
  return v4;
}

void sub_218168904(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1020C40CC2D9803);
  _Unwind_Resume(a1);
}

uint64_t turi::hopscotch_table<std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *>,turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::hash_redirect,turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::key_equal_redirect>::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
    std::vector<turi::hopscotch_table<std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *>,turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::hash_redirect,turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::key_equal_redirect>::element,std::allocator<turi::hopscotch_table<std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *>,turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::hash_redirect,turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::key_equal_redirect>::element>>::__assign_with_size[abi:ne180100]<turi::hopscotch_table<std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *>,turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::hash_redirect,turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::key_equal_redirect>::element*,turi::hopscotch_table<std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *>,turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::hash_redirect,turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::key_equal_redirect>::element*>((_QWORD *)a1, *(__int128 **)a2, *(__int128 **)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3));
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  return a1;
}

_QWORD *turi::hopscotch_table<std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *>,turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::hash_redirect,turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::key_equal_redirect>::hopscotch_table(_QWORD *a1, uint64_t a2, char a3, char a4)
{
  unint64_t v6;
  unint64_t v7;
  _QWORD *result;
  unint64_t v9;

  v6 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1) | (((a2 - 1) | ((unint64_t)(a2 - 1) >> 1)) >> 2);
  v7 = v6 | (v6 >> 4) | ((v6 | (v6 >> 4)) >> 8);
  result = std::vector<turi::hopscotch_table<std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *>,turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::hash_redirect,turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::key_equal_redirect>::element,std::allocator<turi::hopscotch_table<std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *>,turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::hash_redirect,turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::key_equal_redirect>::element>>::vector(a1, (v7 | (v7 >> 16) | ((v7 | (v7 >> 16)) >> 32)) + 33);
  *((_BYTE *)result + 24) = a3;
  *((_BYTE *)result + 25) = a4;
  v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(result[1] - *result) >> 3) - 33;
  result[4] = 0;
  result[5] = v9;
  return result;
}

_QWORD *std::vector<turi::hopscotch_table<std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *>,turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::hash_redirect,turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::key_equal_redirect>::element,std::allocator<turi::hopscotch_table<std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *>,turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::hash_redirect,turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::key_equal_redirect>::element>>::vector(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::string>::__vallocate[abi:ne180100](a1, a2);
    v4 = a1[1];
    v5 = v4 + 24 * a2;
    do
    {
      *(_DWORD *)v4 = 0;
      *(_QWORD *)(v4 + 8) = 0;
      *(_QWORD *)(v4 + 16) = 0;
      v4 += 24;
    }
    while (v4 != v5);
    a1[1] = v5;
  }
  return a1;
}

void sub_218168A54(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<turi::hopscotch_table<std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *>,turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::hash_redirect,turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::key_equal_redirect>::element,std::allocator<turi::hopscotch_table<std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *>,turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::hash_redirect,turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::key_equal_redirect>::element>>::__assign_with_size[abi:ne180100]<turi::hopscotch_table<std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *>,turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::hash_redirect,turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::key_equal_redirect>::element*,turi::hopscotch_table<std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *>,turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::hash_redirect,turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::key_equal_redirect>::element*>(_QWORD *a1, __int128 *a2, __int128 *a3, unint64_t a4)
{
  __int128 *v6;
  uint64_t v8;
  _QWORD *result;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD **v13;
  _QWORD *v14;
  char *v15;
  __int128 v16;
  _QWORD *v17;
  _QWORD *v18;
  unint64_t v19;
  __int128 *v20;
  uint64_t v21;
  char *v22;
  _QWORD *v23;
  __int128 v24;
  int64_t v25;
  _QWORD *v26;
  uint64_t v27;

  v6 = a2;
  v8 = a1[2];
  result = (_QWORD *)*a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - (uint64_t)result) >> 3) < a4)
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0xAAAAAAAAAAAAAAALL)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    v11 = 2 * v10;
    if (2 * v10 <= a4)
      v11 = a4;
    if (v10 >= 0x555555555555555)
      v12 = 0xAAAAAAAAAAAAAAALL;
    else
      v12 = v11;
    std::vector<std::string>::__vallocate[abi:ne180100](a1, v12);
    v14 = (_QWORD *)a1[1];
    v13 = (_QWORD **)(a1 + 1);
    result = v14;
    v15 = (char *)v14;
    if (v6 != a3)
    {
      v15 = (char *)result;
      do
      {
        v16 = *v6;
        *((_QWORD *)v15 + 2) = *((_QWORD *)v6 + 2);
        *(_OWORD *)v15 = v16;
        v15 += 24;
        v6 = (__int128 *)((char *)v6 + 24);
      }
      while (v6 != a3);
    }
LABEL_25:
    v25 = v15 - (char *)result;
    goto LABEL_26;
  }
  v18 = (_QWORD *)a1[1];
  v13 = (_QWORD **)(a1 + 1);
  v17 = v18;
  v19 = 0xAAAAAAAAAAAAAAABLL * (v18 - result);
  if (v19 >= a4)
  {
    v15 = (char *)result;
    if (a2 != a3)
    {
      v26 = result;
      do
      {
        *(_DWORD *)v26 = *(_DWORD *)v6;
        v27 = *((_QWORD *)v6 + 2);
        v26[1] = *((_QWORD *)v6 + 1);
        v26[2] = v27;
        v15 += 24;
        v6 = (__int128 *)((char *)v6 + 24);
        v26 += 3;
      }
      while (v6 != a3);
    }
    goto LABEL_25;
  }
  v20 = (__int128 *)((char *)a2 + 24 * v19);
  if (v17 != result)
  {
    do
    {
      *(_DWORD *)result = *(_DWORD *)v6;
      v21 = *((_QWORD *)v6 + 2);
      result[1] = *((_QWORD *)v6 + 1);
      result[2] = v21;
      v6 = (__int128 *)((char *)v6 + 24);
      result += 3;
    }
    while (v6 != v20);
    result = *v13;
  }
  v22 = (char *)result;
  if (v20 != a3)
  {
    v22 = (char *)result;
    v23 = result;
    do
    {
      v24 = *v20;
      v23[2] = *((_QWORD *)v20 + 2);
      *(_OWORD *)v23 = v24;
      v23 += 3;
      v20 = (__int128 *)((char *)v20 + 24);
      v22 += 24;
    }
    while (v20 != a3);
  }
  v25 = v22 - (char *)result;
LABEL_26:
  *v13 = (_QWORD *)((char *)result + v25);
  return result;
}

uint64_t boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const,std::vector<turi::groupby_aggregate_impl::groupby_element> *>>,unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>>::assign<std::integral_constant<BOOL,true>>(uint64_t a1, uint64_t a2)
{
  char v4;
  float v5;
  void *v6;
  double v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;

  v4 = *(_BYTE *)a1 | 2;
  *(_BYTE *)a1 = v4;
  v5 = *(float *)(a2 + 24);
  *(float *)(a1 + 24) = v5;
  v6 = *(void **)(a1 + 40);
  if (v6)
  {
    v7 = v5 * (double)*(unint64_t *)(a1 + 8);
    v8 = vcvtpd_u64_f64(v7);
    if (ceil(v7) >= 1.84467441e19)
      v8 = -1;
  }
  else
  {
    v8 = 0;
  }
  *(_QWORD *)(a1 + 32) = v8;
  v9 = *(_QWORD *)(a2 + 16);
  if (v9 <= v8)
  {
    if (*(_QWORD *)(a1 + 16))
    {
      v11 = *(_QWORD *)(a1 + 8);
      if (v11)
        bzero(v6, 8 * v11);
    }
  }
  else
  {
    v10 = boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const,std::vector<turi::groupby_aggregate_impl::groupby_element> *>>,unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>>::min_buckets_for_size(a1, v9);
    boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const,std::vector<turi::groupby_aggregate_impl::groupby_element> *>>,unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>>::create_buckets(a1, v10);
    v4 = *(_BYTE *)a1;
  }
  *(_BYTE *)a1 = v4 ^ 3;
  return boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const,std::vector<turi::groupby_aggregate_impl::groupby_element> *>>,unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>>::assign_buckets((_QWORD *)a1, (_QWORD *)a2);
}

void sub_218168CEC(void *a1)
{
  _BYTE *v1;

  __cxa_begin_catch(a1);
  if ((*v1 & 2) != 0)
    *v1 &= 1u;
  __cxa_rethrow();
}

void sub_218168D08(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const,std::vector<turi::groupby_aggregate_impl::groupby_element> *>>,unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>>::create_buckets(uint64_t a1, unint64_t a2)
{
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  void *v8;
  double v9;
  unint64_t v10;

  v4 = *(_QWORD **)(a1 + 40);
  v5 = a2 + 1;
  v6 = (a2 + 1) >> 61;
  if (v4)
  {
    if (!v6)
    {
      v7 = v4[*(_QWORD *)(a1 + 8)];
      v8 = operator new(8 * v5);
      operator delete(v4);
      goto LABEL_6;
    }
LABEL_11:
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  if (v6)
    goto LABEL_11;
  v8 = operator new(8 * v5);
  v7 = 0;
LABEL_6:
  *(_QWORD *)(a1 + 8) = a2;
  v9 = (double)a2 * *(float *)(a1 + 24);
  v10 = vcvtpd_u64_f64(v9);
  if (ceil(v9) >= 1.84467441e19)
    v10 = -1;
  *(_QWORD *)(a1 + 32) = v10;
  *(_QWORD *)(a1 + 40) = v8;
  if (a2)
    bzero(v8, 8 * a2);
  *((_QWORD *)v8 + a2) = v7;
}

uint64_t boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const,std::vector<turi::groupby_aggregate_impl::groupby_element> *>>,unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>>::min_buckets_for_size(uint64_t a1, unint64_t a2)
{
  double v2;
  unint64_t v3;
  unint64_t v4;
  char *v5;
  unint64_t v6;
  char *v7;
  char *v8;
  unint64_t v9;
  char *v10;

  v2 = floor((double)a2 / *(float *)(a1 + 24)) + 1.0;
  if (v2 >= 1.84467441e19)
    v3 = -1;
  else
    v3 = (unint64_t)v2;
  v4 = 38;
  v5 = (char *)&boost::unordered::detail::prime_list_template<unsigned long>::value;
  do
  {
    v6 = v4 >> 1;
    v7 = &v5[8 * (v4 >> 1)];
    v9 = *(_QWORD *)v7;
    v8 = v7 + 8;
    v4 += ~(v4 >> 1);
    if (v9 < v3)
      v5 = v8;
    else
      v4 = v6;
  }
  while (v4);
  v10 = (char *)&unk_2186D17C0;
  if (v5 != "NSt3__117bad_function_callE")
    v10 = v5;
  return *(_QWORD *)v10;
}

uint64_t boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const,std::vector<turi::groupby_aggregate_impl::groupby_element> *>>,unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>>::assign_buckets(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  _OWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  _OWORD *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  char *v15;
  uint64_t v16;
  _OWORD *v17;

  v16 = 0;
  v17 = 0;
  v15 = (char *)a1 + 3;
  if (a1[2])
  {
    v3 = a1[1];
    v4 = a1[5];
    v5 = *(_OWORD **)(v4 + 8 * v3);
    v17 = v5;
    *(_QWORD *)(v4 + 8 * v3) = 0;
    a1[2] = 0;
  }
  else
  {
    v5 = 0;
  }
  if (a2[2])
  {
    v6 = *(_QWORD **)(a2[5] + 8 * a2[1]);
    if (v6)
    {
      do
      {
        v7 = v6[2];
        if (v5)
        {
          v8 = *(_OWORD **)v5;
          *(_QWORD *)v5 = 0;
        }
        else
        {
          v5 = operator new(0x20uLL);
          v8 = 0;
          *v5 = 0u;
          v5[1] = 0u;
        }
        v5[1] = *((_OWORD *)v6 + 1);
        v9 = a1[1];
        v10 = v7 % v9;
        v11 = a1[5];
        *((_QWORD *)v5 + 1) = (v7 % v9) & 0x7FFFFFFFFFFFFFFFLL;
        v12 = *(_QWORD **)(v11 + 8 * (v7 % v9));
        if (v12)
        {
          *(_QWORD *)v5 = *v12;
          v13 = *(_QWORD *)(v11 + 8 * v10);
        }
        else
        {
          v13 = v11 + 8 * v9;
          if (*(_QWORD *)v13)
            *(_QWORD *)(v11 + 8 * *(_QWORD *)(*(_QWORD *)v13 + 8)) = v5;
          *(_QWORD *)(v11 + 8 * v10) = v13;
          *(_QWORD *)v5 = *(_QWORD *)v13;
        }
        *(_QWORD *)v13 = v5;
        ++a1[2];
        v6 = (_QWORD *)*v6;
        v5 = v8;
      }
      while (v6);
      v16 = 0;
      v17 = v8;
    }
  }
  return boost::unordered::detail::node_holder<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const,std::vector<turi::groupby_aggregate_impl::groupby_element> *>>>>::~node_holder((uint64_t)&v15);
}

void sub_218168F90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  a12 = 0;
  boost::unordered::detail::node_holder<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const,std::vector<turi::groupby_aggregate_impl::groupby_element> *>>>>::~node_holder((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t boost::unordered::detail::node_holder<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const,std::vector<turi::groupby_aggregate_impl::groupby_element> *>>>>::~node_holder(uint64_t a1)
{
  _QWORD *i;
  void *v3;

  for (i = *(_QWORD **)(a1 + 16); i; i = *(_QWORD **)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = *i;
    operator delete(i);
  }
  v3 = *(void **)(a1 + 8);
  if (v3)
    operator delete(v3);
  return a1;
}

void boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const,std::vector<turi::groupby_aggregate_impl::groupby_element> *>>,unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>>::delete_buckets(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;

  v2 = (_QWORD *)a1[5];
  if (v2)
  {
    v3 = (_QWORD *)v2[a1[1]];
    if (v3)
    {
      do
      {
        v4 = (_QWORD *)*v3;
        operator delete(v3);
        v3 = v4;
      }
      while (v4);
      v2 = (_QWORD *)a1[5];
    }
    operator delete(v2);
    a1[2] = 0;
    a1[4] = 0;
    a1[5] = 0;
  }
}

uint64_t std::__split_buffer<turi::groupby_aggregate_impl::group_aggregate_container::segment_information>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 72;
    turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::~hopscotch_map((uint64_t *)(i - 72));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t *turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::find@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v6;
  uint64_t *result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  BOOL v13;
  _QWORD v14[2];

  v14[0] = *a2;
  v14[1] = 0;
  v6 = *(uint64_t **)a1;
  result = turi::hopscotch_table<std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *>,turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::hash_redirect,turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::key_equal_redirect>::find(*(uint64_t **)a1, v14);
  v9 = v8;
  if (v6 == *(uint64_t **)a1 && v8 == *(_QWORD *)(*(_QWORD *)a1 + 8))
  {
    result = boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const,std::vector<turi::groupby_aggregate_impl::groupby_element> *>>,unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>>::find_node_impl<unsigned long,std::equal_to<unsigned long>>((_QWORD *)(a1 + 8), *a2, a2);
    *(_QWORD *)a3 = a1;
    *(_QWORD *)(a3 + 8) = v6;
    *(_QWORD *)(a3 + 16) = v9;
    *(_QWORD *)(a3 + 24) = result;
    v13 = *(uint64_t **)a1 == v6 && *(_QWORD *)(*(_QWORD *)a1 + 8) == v9;
    *(_BYTE *)(a3 + 32) = v13;
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 24);
    if (v11)
      v11 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * *(_QWORD *)(a1 + 16));
    *(_QWORD *)a3 = a1;
    *(_QWORD *)(a3 + 8) = v6;
    *(_QWORD *)(a3 + 16) = v8;
    *(_QWORD *)(a3 + 24) = v11;
    *(_BYTE *)(a3 + 32) = 0;
  }
  return result;
}

uint64_t *turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::do_insert@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *result;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v14;

  result = turi::hopscotch_table<std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *>,turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::hash_redirect,turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::key_equal_redirect>::insert_impl(*(uint64_t **)a1, a2, 1);
  v8 = result;
  v9 = v7;
  v10 = *(uint64_t **)a1 == result && *(_QWORD *)(*(_QWORD *)a1 + 8) == v7;
  if (v10
    && ((float)((float)(unint64_t)(*(_QWORD *)(a1 + 24) + result[4])
              / (float)(unint64_t)(*(_QWORD *)(a1 + 24) - 0x5555555555555555 * ((v7 - *result) >> 3))) <= 0.8
     || (turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::rehash_to_new_container((uint64_t **)a1, -1), result = turi::hopscotch_table<std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *>,turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::hash_redirect,turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::key_equal_redirect>::insert_impl(*(uint64_t **)a1, a2, 1), v8 = result, v9 = v12, *(uint64_t **)a1 == result)&& *(_QWORD *)(*(_QWORD *)a1 + 8) == v12))
  {
    result = boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const,std::vector<turi::groupby_aggregate_impl::groupby_element> *>>,unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>>::emplace_unique<std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *> const&>((_QWORD *)(a1 + 8), a2, a2);
    *(_QWORD *)a3 = a1;
    *(_QWORD *)(a3 + 8) = v8;
    *(_QWORD *)(a3 + 16) = v9;
    *(_QWORD *)(a3 + 24) = result;
    v14 = *(uint64_t **)a1 == v8 && *(_QWORD *)(*(_QWORD *)a1 + 8) == v9;
    *(_BYTE *)(a3 + 32) = v14;
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 24);
    if (v11)
      v11 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * *(_QWORD *)(a1 + 16));
    *(_QWORD *)a3 = a1;
    *(_QWORD *)(a3 + 8) = v8;
    *(_QWORD *)(a3 + 16) = v9;
    *(_QWORD *)(a3 + 24) = v11;
    *(_BYTE *)(a3 + 32) = 0;
  }
  return result;
}

uint64_t *turi::hopscotch_table<std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *>,turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::hash_redirect,turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::key_equal_redirect>::find(uint64_t *a1, _QWORD *a2)
{
  unint64_t v2;
  unint64_t v3;

  v2 = 17 * ((4097 * *a2) ^ ((unint64_t)(4097 * *a2) >> 22));
  v3 = 129 * ((1025 * (v2 ^ (v2 >> 9))) ^ ((1025 * (v2 ^ (v2 >> 9))) >> 2));
  return turi::hopscotch_table<std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *>,turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::hash_redirect,turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::key_equal_redirect>::find_impl(a1, a2, (v3 ^ (v3 >> 12)) & a1[5]);
}

uint64_t *turi::hopscotch_table<std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *>,turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::hash_redirect,turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::key_equal_redirect>::find_impl(uint64_t *result, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;

  v3 = *result;
  v4 = *(_DWORD *)(*result + 24 * a3);
  if (v4 >= 2)
  {
    v5 = v4 >> 1;
    do
    {
      v6 = __clz(__rbit32(v5));
      if ((*(_BYTE *)(v3 + 24 * (v6 + a3)) & 1) != 0 && *(_QWORD *)(v3 + 24 * (v6 + a3) + 8) == *a2)
        break;
      v5 &= ~(1 << v6);
    }
    while (v5);
  }
  return result;
}

_QWORD *boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const,std::vector<turi::groupby_aggregate_impl::groupby_element> *>>,unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>>::find_node_impl<unsigned long,std::equal_to<unsigned long>>(_QWORD *a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  _QWORD *v4;
  _QWORD *result;

  if (!a1[2])
    return 0;
  v3 = a2 % a1[1];
  v4 = *(_QWORD **)(a1[5] + 8 * v3);
  if (!v4)
    return 0;
  result = (_QWORD *)*v4;
  if (!*v4)
    return result;
LABEL_4:
  if (*a3 != result[2])
  {
    if ((result[1] & 0x7FFFFFFFFFFFFFFFLL) == v3)
    {
      while (1)
      {
        result = (_QWORD *)*result;
        if (!result)
          return result;
        if ((result[1] & 0x8000000000000000) == 0)
          goto LABEL_4;
      }
    }
    return 0;
  }
  return result;
}

void turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::rehash_to_new_container(uint64_t **a1, uint64_t a2)
{
  uint64_t *new_container;
  uint64_t *v4;
  uint64_t **v5;
  _QWORD *v6;
  char *v7;
  BOOL v9;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t *v13;
  char *v14;
  unint64_t v15;
  char *v16;
  uint64_t *v17;
  int v18;
  _QWORD *v19;
  uint64_t v21;
  unint64_t *v22;
  char *v23;
  char *v24;
  char v25;
  void *v27;
  uint64_t **v28;
  uint64_t *v29;
  char *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;

  if (a2 == -1)
    a2 = 2 * ((_QWORD)a1[3] + (*a1)[4]);
  new_container = turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::create_new_container((uint64_t)a1, a2);
  turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::begin((uint64_t)a1, (uint64_t)&v28);
  v5 = v28;
  v4 = v29;
  v7 = v30;
  v6 = v31;
  v9 = *v28 == v29 && (*v28)[1] == (_QWORD)v30;
  LOBYTE(v28) = 0;
  v10 = 38;
  v11 = (char *)&boost::unordered::detail::prime_list_template<unsigned long>::value;
  do
  {
    v12 = v10 >> 1;
    v13 = (unint64_t *)&v11[8 * (v10 >> 1)];
    v15 = *v13;
    v14 = (char *)(v13 + 1);
    v10 += ~(v10 >> 1);
    if (v15 < 0xB)
      v11 = v14;
    else
      v10 = v12;
  }
  while (v10);
  v16 = (char *)&unk_2186D17C0;
  if (v11 != "NSt3__117bad_function_callE")
    v16 = v11;
  v29 = *(uint64_t **)v16;
  v30 = 0;
  LODWORD(v31) = 1065353216;
  v32 = 0;
  v33 = 0;
  while (v5 != a1)
  {
    if (v9)
      goto LABEL_22;
LABEL_27:
    v18 = 1;
    v19 = v7 + 8;
LABEL_28:
    if (new_container == turi::hopscotch_table<std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *>,turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::hash_redirect,turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::key_equal_redirect>::insert_impl(new_container, v19, 1)&& new_container[1] == v21)
    {
      if (v18)
        v22 = (unint64_t *)(v7 + 8);
      else
        v22 = v6 + 2;
      boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const,std::vector<turi::groupby_aggregate_impl::groupby_element> *>>,unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>>::emplace_unique<std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *> const&>(&v28, v22, v22);
    }
    if (v18)
    {
      v23 = (char *)v4[1];
      v24 = v7 + 24;
      while (v24 != v23)
      {
        v25 = *v24;
        v24 += 24;
        if ((v25 & 1) != 0)
        {
          v23 = v24 - 24;
          break;
        }
      }
      if (v23 == (char *)(*v5)[1] && v4 == *v5)
        v9 = 1;
      v7 = v23;
    }
    else
    {
      v6 = (_QWORD *)*v6;
    }
  }
  v17 = *a1;
  if (!v9)
  {
    if (v4 == v17 && v7 == (char *)v17[1])
      goto LABEL_48;
    goto LABEL_27;
  }
  if (v6)
  {
LABEL_22:
    v18 = 0;
    v19 = v6 + 2;
    goto LABEL_28;
  }
  v4 = *a1;
LABEL_48:
  *a1 = new_container;
  std::swap[abi:ne180100]<boost::unordered::unordered_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const,std::vector<turi::groupby_aggregate_impl::groupby_element> *>>>>((uint64_t)(a1 + 1), (uint64_t)&v28);
  v27 = (void *)*v4;
  if (*v4)
  {
    v4[1] = (uint64_t)v27;
    operator delete(v27);
  }
  MEMORY[0x219A19A08](v4, 0x1020C40CC2D9803);
  boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const,std::vector<turi::groupby_aggregate_impl::groupby_element> *>>,unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>>::delete_buckets(&v28);
}

void sub_218169598(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const,std::vector<turi::groupby_aggregate_impl::groupby_element> *>>,unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>>::delete_buckets(&a9);
  _Unwind_Resume(a1);
}

uint64_t *turi::hopscotch_table<std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *>,turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::hash_redirect,turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::key_equal_redirect>::insert_impl(uint64_t *a1, _QWORD *a2, int a3)
{
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t i;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unsigned int v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;

  v4 = a1;
  v5 = 17 * ((4097 * *a2) ^ ((unint64_t)(4097 * *a2) >> 22));
  v6 = 129 * ((1025 * (v5 ^ (v5 >> 9))) ^ ((1025 * (v5 ^ (v5 >> 9))) >> 2));
  v7 = (v6 ^ (v6 >> 12)) & a1[5];
  v8 = turi::hopscotch_table<std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *>,turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::hash_redirect,turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::key_equal_redirect>::try_find_and_overwrite(a1, a2, v7, a3);
  if (v8 != v4 || v4[1] != v9)
    return v8;
  v11 = *v4;
  v12 = 0xAAAAAAAAAAAAAAABLL * ((v9 - *v4) >> 3);
  if (v7 + 620 < v12)
    v12 = v7 + 620;
  v24 = v7 >= v12;
  v13 = v7 - v12;
  if (!v24)
  {
    v14 = 0;
    for (i = 24 * v7; (*(_BYTE *)(v11 + i) & 1) != 0; i += 24)
    {
      if (v13 == --v14)
        return v4;
    }
    v16 = -v14;
    v17 = v7 - v14;
    if ((unint64_t)-v14 >= 0x1F)
    {
      do
      {
        v18 = v17;
        v19 = *v4;
        v20 = 24 * v17 - 720;
        v21 = 30;
        while (1)
        {
          v22 = *(_DWORD *)(v19 + v20);
          v23 = __clz(__rbit32(v22 >> 1));
          v24 = v22 >= 2 && v21 >= v23;
          if (v24)
            break;
          v20 += 24;
          if (!--v21)
            return v4;
        }
        v25 = v18 + v23;
        v17 = v25 - v21;
        v26 = v19 + 24 * (v25 - v21);
        v27 = v19 + 24 * v18;
        v29 = *(_QWORD *)(v26 + 8);
        v28 = *(_QWORD *)(v26 + 16);
        *(_QWORD *)(v27 + 8) = v29;
        *(_QWORD *)(v27 + 16) = v28;
        *(_DWORD *)v27 |= 1u;
        *(_DWORD *)(*v4 + 24 * (v25 - v21)) &= ~1u;
        v30 = *v4;
        v31 = *v4 + 24 * (v25 - v21);
        *(_QWORD *)(v31 + 8) = 0;
        *(_QWORD *)(v31 + 16) = 0;
        *(_DWORD *)(v30 + v20) = *(_DWORD *)(v30 + v20) & 1 | (2
                                                             * ((*(_DWORD *)(v30 + v20) >> 1) & ~(1 << v23) | (1 << v21)));
      }
      while (v25 - v7 - v21 > 0x1E);
      v11 = *v4;
      LOBYTE(v16) = v18 - v7 + v23 - v21;
    }
    v32 = v11 + 24 * v17;
    v33 = a2[1];
    v34 = *(_DWORD *)(v11 + 24 * v7);
    *(_QWORD *)(v32 + 8) = *a2;
    *(_QWORD *)(v32 + 16) = v33;
    *(_DWORD *)(v11 + 24 * v7) = v34 | (2 << v16);
    *(_DWORD *)(*v4 + 24 * v17) |= 1u;
    ++v4[4];
  }
  return v4;
}

uint64_t *turi::hopscotch_table<std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *>,turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::hash_redirect,turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::key_equal_redirect>::try_find_and_overwrite(uint64_t *a1, _QWORD *a2, uint64_t a3, int a4)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  turi::hopscotch_table<std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *>,turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::hash_redirect,turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::key_equal_redirect>::find_impl(a1, a2, a3);
  if (v7 != a1[1] && a4 != 0)
  {
    v9 = a2[1];
    v10 = *a1 + 8 * ((v7 - *a1) >> 3);
    *(_QWORD *)(v10 + 8) = *a2;
    *(_QWORD *)(v10 + 16) = v9;
  }
  return a1;
}

void std::swap[abi:ne180100]<boost::unordered::unordered_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const,std::vector<turi::groupby_aggregate_impl::groupby_element> *>>>>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  int v7;
  uint64_t v8;
  uint64_t v9;

  LOBYTE(v5) = 0;
  v6 = *(_OWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 40);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = v3;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const,std::vector<turi::groupby_aggregate_impl::groupby_element> *>>,unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>>::move_assign<std::integral_constant<BOOL,true>>(a1, a2);
  if (&v5 != (uint64_t *)a2)
  {
    boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const,std::vector<turi::groupby_aggregate_impl::groupby_element> *>>,unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>>::delete_buckets((_QWORD *)a2);
    *(_DWORD *)(a2 + 24) = v7;
    *(_OWORD *)(a2 + 8) = v6;
    v4 = v9;
    *(_QWORD *)(a2 + 32) = v8;
    *(_QWORD *)(a2 + 40) = v4;
    *((_QWORD *)&v6 + 1) = 0;
    v8 = 0;
    v9 = 0;
  }
  boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const,std::vector<turi::groupby_aggregate_impl::groupby_element> *>>,unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>>::delete_buckets(&v5);
}

__n128 boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const,std::vector<turi::groupby_aggregate_impl::groupby_element> *>>,unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>>::move_assign<std::integral_constant<BOOL,true>>(uint64_t a1, uint64_t a2)
{
  __n128 result;
  uint64_t v5;

  if (a1 != a2)
  {
    boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const,std::vector<turi::groupby_aggregate_impl::groupby_element> *>>,unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>>::delete_buckets((_QWORD *)a1);
    *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
    result = *(__n128 *)(a2 + 8);
    *(__n128 *)(a1 + 8) = result;
    v5 = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 40) = v5;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 40) = 0;
  }
  return result;
}

_QWORD *boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const,std::vector<turi::groupby_aggregate_impl::groupby_element> *>>,unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>>::emplace_unique<std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *> const&>(_QWORD *a1, unint64_t *a2, _QWORD *a3)
{
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;

  v5 = *a2;
  v6 = boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const,std::vector<turi::groupby_aggregate_impl::groupby_element> *>>,unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>>::find_node_impl<unsigned long,std::equal_to<unsigned long>>(a1, *a2, a2);
  if (v6)
    return v6;
  v7 = operator new(0x20uLL);
  *v7 = 0;
  v7[1] = 0;
  v8 = a3[1];
  v7[2] = *a3;
  v7[3] = v8;
  boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const,std::vector<turi::groupby_aggregate_impl::groupby_element> *>>,unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>>::reserve_for_insert(a1, a1[2] + 1);
  v9 = a1[1];
  v10 = v5 % v9;
  v11 = a1[5];
  v7[1] = (v5 % v9) & 0x7FFFFFFFFFFFFFFFLL;
  v12 = *(_QWORD **)(v11 + 8 * (v5 % v9));
  if (v12)
  {
    *v7 = *v12;
    v13 = *(_QWORD *)(v11 + 8 * v10);
  }
  else
  {
    v13 = v11 + 8 * v9;
    if (*(_QWORD *)v13)
      *(_QWORD *)(v11 + 8 * *(_QWORD *)(*(_QWORD *)v13 + 8)) = v7;
    *(_QWORD *)(v11 + 8 * v10) = v13;
    *v7 = *(_QWORD *)v13;
  }
  *(_QWORD *)v13 = v7;
  ++a1[2];
  return v7;
}

void sub_2181699FC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const,std::vector<turi::groupby_aggregate_impl::groupby_element> *>>,unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>>::reserve_for_insert(_QWORD *a1, unint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;

  if (a1[5])
  {
    if (a1[4] < a2)
    {
      if (a1[2] + (a1[2] >> 1) > a2)
        a2 = a1[2] + (a1[2] >> 1);
      v3 = boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const,std::vector<turi::groupby_aggregate_impl::groupby_element> *>>,unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>>::min_buckets_for_size((uint64_t)a1, a2);
      if (v3 != a1[1])
      {
        boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const,std::vector<turi::groupby_aggregate_impl::groupby_element> *>>,unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>>::create_buckets((uint64_t)a1, v3);
        v4 = a1[1];
        v5 = a1[5];
        v6 = (_QWORD *)(v5 + 8 * v4);
        v7 = (_QWORD *)*v6;
        if (*v6)
        {
          do
          {
            v8 = v7[2] % v4;
            v7[1] = v8 & 0x7FFFFFFFFFFFFFFFLL;
            v9 = (_QWORD *)*v7;
            if (*v7 && (v9[1] & 0x8000000000000000) != 0)
            {
              do
              {
                v7 = v9;
                v9[1] = v8 | 0x8000000000000000;
                v9 = (_QWORD *)*v9;
              }
              while (v9 && (v9[1] & 0x8000000000000000) != 0);
            }
            v10 = *(_QWORD **)(v5 + 8 * v8);
            if (v10)
            {
              *v7 = *v10;
              **(_QWORD **)(v5 + 8 * v8) = *v6;
              *v6 = v9;
            }
            else
            {
              *(_QWORD *)(v5 + 8 * v8) = v6;
              v9 = (_QWORD *)*v7;
              v6 = v7;
            }
            v7 = v9;
          }
          while (v9);
        }
      }
    }
  }
  else
  {
    v11 = boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const,std::vector<turi::groupby_aggregate_impl::groupby_element> *>>,unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>>::min_buckets_for_size((uint64_t)a1, a2);
    if (a1[1] <= v11)
      v12 = v11;
    else
      v12 = a1[1];
    boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const,std::vector<turi::groupby_aggregate_impl::groupby_element> *>>,unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>>::create_buckets((uint64_t)a1, v12);
  }
}

uint64_t std::vector<turi::groupby_aggregate_impl::groupby_element>::__push_back_slow_path<turi::groupby_aggregate_impl::groupby_element>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[5];

  v3 = *a1;
  v4 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x492492492492492)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x6DB6DB6DB6DB6DB7 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x249249249249249)
    v9 = 0x492492492492492;
  else
    v9 = v5;
  v15[4] = a1 + 2;
  v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::toolkit_class_specification>>(v7, v9);
  v11 = &v10[56 * v4];
  v15[0] = v10;
  v15[1] = v11;
  v15[3] = &v10[56 * v12];
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  *(_QWORD *)v11 = 0;
  *(_OWORD *)v11 = *(_OWORD *)a2;
  *((_QWORD *)v11 + 2) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *((_QWORD *)v11 + 4) = 0;
  *((_QWORD *)v11 + 5) = 0;
  *((_QWORD *)v11 + 3) = 0;
  *(_OWORD *)(v11 + 24) = *(_OWORD *)(a2 + 24);
  *((_QWORD *)v11 + 5) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *((_QWORD *)v11 + 6) = *(_QWORD *)(a2 + 48);
  v15[2] = v11 + 56;
  std::vector<turi::groupby_aggregate_impl::groupby_element>::__swap_out_circular_buffer(a1, v15);
  v13 = a1[1];
  std::__split_buffer<turi::groupby_aggregate_impl::groupby_element>::~__split_buffer((uint64_t)v15);
  return v13;
}

void sub_218169C54(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<turi::groupby_aggregate_impl::groupby_element>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<turi::groupby_aggregate_impl::groupby_element>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::groupby_aggregate_impl::groupby_element>,std::reverse_iterator<turi::groupby_aggregate_impl::groupby_element*>,std::reverse_iterator<turi::groupby_aggregate_impl::groupby_element*>,std::reverse_iterator<turi::groupby_aggregate_impl::groupby_element*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::groupby_aggregate_impl::groupby_element>,std::reverse_iterator<turi::groupby_aggregate_impl::groupby_element*>,std::reverse_iterator<turi::groupby_aggregate_impl::groupby_element*>,std::reverse_iterator<turi::groupby_aggregate_impl::groupby_element*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 56) = 0;
      *(_QWORD *)(v7 - 48) = 0;
      *(_QWORD *)(v7 - 40) = 0;
      v8 = *(_OWORD *)(a3 - 56);
      a3 -= 56;
      *(_OWORD *)(v7 - 56) = v8;
      *(_QWORD *)(v7 - 40) = *(_QWORD *)(a3 + 16);
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)(v7 - 32) = 0;
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_OWORD *)(v7 - 32) = *(_OWORD *)(a3 + 24);
      *(_QWORD *)(v7 - 16) = *(_QWORD *)(a3 + 40);
      *(_QWORD *)(a3 + 32) = 0;
      *(_QWORD *)(a3 + 40) = 0;
      *(_QWORD *)(a3 + 24) = 0;
      *(_QWORD *)(v7 - 8) = *(_QWORD *)(a3 + 48);
      v7 = *((_QWORD *)&v14 + 1) - 56;
      *((_QWORD *)&v14 + 1) -= 56;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::groupby_aggregate_impl::groupby_element>,std::reverse_iterator<turi::groupby_aggregate_impl::groupby_element*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::groupby_aggregate_impl::groupby_element>,std::reverse_iterator<turi::groupby_aggregate_impl::groupby_element*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<turi::groupby_aggregate_impl::groupby_element>,std::reverse_iterator<turi::groupby_aggregate_impl::groupby_element*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<turi::groupby_aggregate_impl::groupby_element>,std::reverse_iterator<turi::groupby_aggregate_impl::groupby_element*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v8[8];
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[8];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v1 = (uint64_t *)a1[2];
  v3 = *v1;
  v2 = v1[1];
  v14 = v3;
  v15 = v2;
  v16 = v3;
  v17 = v2;
  v4 = *a1;
  v5 = (uint64_t *)a1[1];
  v7 = *v5;
  v6 = v5[1];
  v9 = v7;
  v10 = v6;
  v11 = v7;
  v12 = v6;
  std::__allocator_destroy[abi:ne180100]<std::allocator<turi::groupby_aggregate_impl::groupby_element>,std::reverse_iterator<std::reverse_iterator<turi::groupby_aggregate_impl::groupby_element*>>,std::reverse_iterator<std::reverse_iterator<turi::groupby_aggregate_impl::groupby_element*>>>(v4, (uint64_t)v13, (uint64_t)v8);
}

void std::__allocator_destroy[abi:ne180100]<std::allocator<turi::groupby_aggregate_impl::groupby_element>,std::reverse_iterator<std::reverse_iterator<turi::groupby_aggregate_impl::groupby_element*>>,std::reverse_iterator<std::reverse_iterator<turi::groupby_aggregate_impl::groupby_element*>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void **i;
  void **v6;

  for (i = *(void ***)(a2 + 32); i != *(void ***)(a3 + 32); *(_QWORD *)(a2 + 32) = i)
  {
    v6 = i + 3;
    std::vector<std::unique_ptr<turi::group_aggregate_value>>::__destroy_vector::operator()[abi:ne180100](&v6);
    v6 = i;
    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v6);
    i = (void **)(*(_QWORD *)(a2 + 32) + 56);
  }
}

uint64_t std::__split_buffer<turi::groupby_aggregate_impl::groupby_element>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<turi::groupby_aggregate_impl::groupby_element>::__destruct_at_end[abi:ne180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<turi::groupby_aggregate_impl::groupby_element>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t i;
  void **v5;
  void **v6;

  for (i = *(_QWORD *)(a1 + 16); i != a2; i = *(_QWORD *)(a1 + 16))
  {
    v5 = (void **)(i - 56);
    *(_QWORD *)(a1 + 16) = i - 56;
    v6 = (void **)(i - 32);
    std::vector<std::unique_ptr<turi::group_aggregate_value>>::__destroy_vector::operator()[abi:ne180100](&v6);
    v6 = v5;
    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v6);
  }
}

_QWORD *turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::hopscotch_map(_QWORD *a1)
{
  *a1 = 0;
  boost::unordered::unordered_map<unsigned long,turi::any,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const,turi::any>>>::unordered_map((uint64_t)(a1 + 1));
  *a1 = turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::create_new_container((uint64_t)a1, 32);
  return a1;
}

void sub_218169FA0(_Unwind_Exception *a1)
{
  _QWORD *v1;

  boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const,std::vector<turi::groupby_aggregate_impl::groupby_element> *>>,unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>>::delete_buckets(v1);
  _Unwind_Resume(a1);
}

uint64_t *turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::~hopscotch_map(uint64_t *a1)
{
  turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::destroy_all(a1);
  boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const,std::vector<turi::groupby_aggregate_impl::groupby_element> *>>,unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>>::delete_buckets(a1 + 1);
  return a1;
}

_QWORD *turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::destroy_all(uint64_t *a1)
{
  uint64_t v2;
  void *v3;
  _QWORD *result;

  v2 = *a1;
  if (*a1)
  {
    v3 = *(void **)v2;
    if (*(_QWORD *)v2)
    {
      *(_QWORD *)(v2 + 8) = v3;
      operator delete(v3);
    }
    MEMORY[0x219A19A08](v2, 0x1020C40CC2D9803);
  }
  result = boost::unordered::unordered_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const,std::vector<turi::groupby_aggregate_impl::groupby_element> *>>>::clear(a1 + 1);
  *a1 = 0;
  return result;
}

_QWORD *boost::unordered::unordered_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const,std::vector<turi::groupby_aggregate_impl::groupby_element> *>>>::clear(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  if (result[2])
  {
    v1 = result;
    v2 = result[1];
    v3 = result[5];
    if (v2)
      bzero((void *)result[5], 8 * v2);
    result = *(_QWORD **)(v3 + 8 * v2);
    *(_QWORD *)(v3 + 8 * v2) = 0;
    v1[2] = 0;
    if (result)
    {
      do
      {
        v4 = (_QWORD *)*result;
        operator delete(result);
        result = v4;
      }
      while (v4);
    }
  }
  return result;
}

__n128 std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::iterator,turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::iterator,std::insert_iterator<std::vector<std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *>>>>@<Q0>(uint64_t a1@<X1>, _QWORD *a2@<X2>, __n128 **a3@<X3>, __n128 *a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  __n128 *v12;
  __n128 result;
  __int128 v14;
  _BYTE v15[40];

  while (1)
  {
    if (*(_QWORD *)a1 != *a2)
      goto LABEL_7;
    if (*(_BYTE *)(a1 + 32))
    {
      v10 = a2[3];
      v11 = *(_QWORD *)(a1 + 24);
      goto LABEL_4;
    }
    if (*(_QWORD *)(a1 + 8) == a2[1])
      break;
LABEL_7:
    if (*(_BYTE *)(a1 + 32))
      v12 = (__n128 *)(*(_QWORD *)(a1 + 24) + 16);
    else
      v12 = (__n128 *)(*(_QWORD *)(a1 + 16) + 8);
    a4 = std::vector<std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *>>::insert(a3, (uint64_t)a4, v12)+ 1;
    turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::iterator::operator++((uint64_t **)a1, (uint64_t)v15);
  }
  v10 = a2[2];
  v11 = *(_QWORD *)(a1 + 16);
LABEL_4:
  if (v11 != v10)
    goto LABEL_7;
  result = *(__n128 *)a1;
  v14 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a5 = *(_OWORD *)a1;
  *(_OWORD *)(a5 + 16) = v14;
  *(_QWORD *)(a5 + 32) = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a5 + 40) = a3;
  *(_QWORD *)(a5 + 48) = a4;
  return result;
}

__n128 turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::iterator::operator++@<Q0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  char v5;
  uint64_t v6;
  __n128 result;
  __int128 v9;

  if (*((_BYTE *)a1 + 32))
  {
    a1[3] = (uint64_t *)*a1[3];
  }
  else
  {
    v2 = a1[1];
    v3 = (uint64_t *)v2[1];
    v4 = a1[2] + 3;
    while (1)
    {
      a1[2] = v4;
      if (v4 == v3)
        break;
      v5 = *(_BYTE *)v4;
      v4 += 3;
      if ((v5 & 1) != 0)
      {
        v3 = v4 - 3;
        break;
      }
    }
    v6 = **a1;
    if (v2 == (uint64_t *)v6 && v3 == *(uint64_t **)(v6 + 8))
      *((_BYTE *)a1 + 32) = 1;
  }
  result = *(__n128 *)a1;
  v9 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v9;
  *(_QWORD *)(a2 + 32) = a1[4];
  return result;
}

__n128 *std::vector<std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *>>::insert(__n128 **a1, uint64_t a2, __n128 *a3)
{
  __n128 *v5;
  __n128 *v6;
  uint64_t v7;
  uint64_t v8;
  __n128 *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  __n128 *v13;
  __n128 *v14;
  __n128 *v15;
  __n128 v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  __n128 *v20;
  uint64_t v21;
  unint64_t *v22;
  uint64_t v23;
  __n128 *v24;
  __n128 *v25;
  __n128 *v26;
  __n128 *v27;
  __n128 *v28;
  __n128 *v29;
  __n128 *v30;
  __n128 v31;
  __n128 *v32;
  __n128 *v33;
  __n128 *v35;
  __n128 *v36;
  __n128 *v37;
  char *v38;
  uint64_t v39;

  v5 = *a1;
  v6 = a1[1];
  v7 = a2 - (_QWORD)*a1;
  v8 = v7 >> 4;
  v9 = (__n128 *)((char *)*a1 + (v7 & 0xFFFFFFFFFFFFFFF0));
  v12 = (unint64_t)a1[2];
  v10 = (uint64_t)(a1 + 2);
  v11 = v12;
  if ((unint64_t)v6 >= v12)
  {
    v17 = v6 - v5 + 1;
    if (v17 >> 60)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v18 = v11 - (_QWORD)v5;
    if (v18 >> 3 > v17)
      v17 = v18 >> 3;
    if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF0)
      v19 = 0xFFFFFFFFFFFFFFFLL;
    else
      v19 = v17;
    v39 = v10;
    if (v19)
      v20 = (__n128 *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::flexible_type>>(v10, v19);
    else
      v20 = 0;
    v35 = v20;
    v36 = &v20[v8];
    v37 = v36;
    v38 = (char *)&v20[v19];
    std::__split_buffer<std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *>>::push_back((void **)&v35, a3);
    v24 = v36;
    v25 = *a1;
    v26 = v36;
    if (*a1 != v9)
    {
      v27 = v9;
      v28 = v36;
      do
      {
        v26 = v28 - 1;
        v28[-1] = v27[-1];
        --v27;
        --v28;
      }
      while (v27 != v25);
    }
    v36 = v26;
    v29 = a1[1];
    v30 = v37;
    if (v29 != v9)
    {
      do
      {
        v31 = *v9++;
        *v30++ = v31;
      }
      while (v9 != v29);
      v26 = v36;
      v9 = a1[1];
    }
    v32 = *a1;
    *a1 = v26;
    a1[1] = v30;
    v33 = a1[2];
    a1[2] = (__n128 *)v38;
    v37 = v9;
    v38 = (char *)v33;
    v35 = v32;
    v36 = v32;
    if (v9 != v32)
      v37 = (__n128 *)((char *)v9 + (((char *)v32 - (char *)v9 + 15) & 0xFFFFFFFFFFFFFFF0));
    if (v32)
      operator delete(v32);
    return v24;
  }
  else if (v9 == v6)
  {
    *v9 = *a3;
    a1[1] = v9 + 1;
  }
  else
  {
    v13 = v9 + 1;
    v14 = v6 - 1;
    v15 = v6;
    while (v14 < v6)
    {
      v16 = *v14++;
      *v15++ = v16;
    }
    a1[1] = v15;
    if (v6 != v13)
    {
      v21 = v6 - v13;
      v22 = &v6[-1].n128_u64[1];
      v23 = v21;
      do
      {
        *(v22 - 1) = v9[v23 - 1].n128_u64[0];
        *v22 = v9[v23 - 1].n128_u64[1];
        v22 -= 2;
        --v23;
      }
      while (v23 * 16);
    }
    v9->n128_u64[0] = a3->n128_u64[0];
    v5[v8].n128_u64[1] = a3->n128_u64[1];
  }
  return v9;
}

void sub_21816A3E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

__n128 std::__split_buffer<std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *>>::push_back(void **a1, __n128 *a2)
{
  __n128 *v4;
  __n128 *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  __n128 *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  __n128 *v24;
  __int128 *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  __int128 v29;
  void *v30;
  __n128 result;

  v4 = (__n128 *)a1[2];
  v5 = v4;
  if (v4 == a1[3])
  {
    v6 = (char *)a1[1];
    v7 = v6 - (_BYTE *)*a1;
    if (v6 <= *a1)
    {
      v19 = (char *)v4 - (_BYTE *)*a1;
      v18 = v19 == 0;
      v20 = v19 >> 3;
      if (v18)
        v21 = 1;
      else
        v21 = v20;
      v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::flexible_type>>((uint64_t)a1[4], v21);
      v24 = (__n128 *)&v22[16 * (v21 >> 2)];
      v25 = (__int128 *)a1[1];
      v5 = v24;
      v26 = (_BYTE *)a1[2] - (_BYTE *)v25;
      if (v26)
      {
        v5 = (__n128 *)((char *)v24 + (v26 & 0xFFFFFFFFFFFFFFF0));
        v27 = 16 * (v26 >> 4);
        v28 = &v22[16 * (v21 >> 2)];
        do
        {
          v29 = *v25++;
          *(_OWORD *)v28 = v29;
          v28 += 16;
          v27 -= 16;
        }
        while (v27);
      }
      v30 = *a1;
      *a1 = v22;
      a1[1] = v24;
      a1[2] = v5;
      a1[3] = &v22[16 * v23];
      if (v30)
      {
        operator delete(v30);
        v5 = (__n128 *)a1[2];
      }
    }
    else
    {
      v8 = v7 >> 4;
      v9 = v7 >> 4 < -1;
      v10 = (v7 >> 4) + 2;
      if (v9)
        v11 = v10;
      else
        v11 = v8 + 1;
      v12 = (__n128 *)&v6[-16 * (v11 >> 1)];
      v5 = v12;
      if (v6 != (char *)v4)
      {
        v13 = -(v11 >> 1);
        v14 = -16 * (v11 >> 1);
        do
        {
          v15 = &v6[v14];
          v16 = *(_QWORD *)v6;
          v17 = *((_QWORD *)v6 + 1);
          v6 += 16;
          *(_QWORD *)v15 = v16;
          *((_QWORD *)v15 + 1) = v17;
        }
        while (v6 != (char *)v4);
        v5 = (__n128 *)&v6[16 * v13];
      }
      a1[1] = v12;
      a1[2] = v5;
    }
  }
  result = *a2;
  *v5 = *a2;
  a1[2] = (char *)a1[2] + 16;
  return result;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *> *,false>(uint64_t result, unint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  unint64_t *v8;
  unint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  char v21;
  BOOL v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;

  v8 = (unint64_t *)result;
LABEL_2:
  v9 = v8;
LABEL_3:
  v10 = 1 - a4;
  while (2)
  {
    v8 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = ((char *)a2 - (char *)v9) >> 4;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v23 = *(a2 - 2);
        v24 = *v9;
        if (v23 < *v9)
        {
          v25 = v9[1];
          v26 = *(a2 - 1);
LABEL_34:
          *v9 = v23;
          v9[1] = v26;
          *(a2 - 2) = v24;
          *(a2 - 1) = v25;
          return result;
        }
        if (v24 >= v23)
        {
          v26 = *(a2 - 1);
          v25 = v9[1];
          if (v26 < v25)
            goto LABEL_34;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *> *>(v9, v9 + 2, a2 - 2);
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *> *>(v9, v9 + 2, v9 + 4, a2 - 2);
      case 5uLL:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *> *>(v9, v9 + 2, v9 + 4, v9 + 6, a2 - 2);
      default:
        if (v12 <= 383)
        {
          if ((a5 & 1) != 0)
            return (uint64_t)std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *> *>(v9, a2);
          else
            return (uint64_t)std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *> *>(v9, a2);
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = &v9[2 * (v13 >> 1)];
          if ((unint64_t)v12 < 0x801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *> *>(&v9[2 * (v13 >> 1)], v9, a2 - 2);
            if ((a5 & 1) != 0)
              goto LABEL_14;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *> *>(v9, &v9[2 * (v13 >> 1)], a2 - 2);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *> *>(v9 + 2, v15 - 2, a2 - 4);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *> *>(v9 + 4, &v9[2 * v14 + 2], a2 - 6);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *> *>(v15 - 2, v15, &v9[2 * v14 + 2]);
            v16 = *v9;
            v17 = v9[1];
            v18 = v15[1];
            *v9 = *v15;
            v9[1] = v18;
            *v15 = v16;
            v15[1] = v17;
            if ((a5 & 1) != 0)
              goto LABEL_14;
          }
          v19 = *(v9 - 2);
          if (v19 >= *v9 && (*v9 < v19 || *(v9 - 1) >= v9[1]))
          {
            result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *> *,std::__less<void,void> &>(v9, a2);
            v9 = (unint64_t *)result;
            goto LABEL_19;
          }
LABEL_14:
          v20 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *> *,std::__less<void,void> &>(v9, a2);
          if ((v21 & 1) == 0)
            goto LABEL_17;
          v22 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *> *>(v9, v20);
          v9 = v20 + 2;
          result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *> *>(v20 + 2, a2);
          if (!(_DWORD)result)
          {
            v10 = v11 + 1;
            if (v22)
              continue;
LABEL_17:
            result = std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *> *,false>(v8, v20, a3, -v11, a5 & 1);
            v9 = v20 + 2;
LABEL_19:
            a5 = 0;
            a4 = -v11;
            goto LABEL_3;
          }
          a4 = -v11;
          a2 = v20;
          if (v22)
            return result;
          goto LABEL_2;
        }
        if (v9 != a2)
          return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *> *,std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *> *>(v9, a2, a2, a3);
        return result;
    }
  }
}

unint64_t *std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *> *>(unint64_t *result, unint64_t *a2)
{
  unint64_t *v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;

  if (result == a2)
    return result;
  v2 = result + 2;
  if (result + 2 == a2)
    return result;
  v3 = 0;
  v4 = result;
  do
  {
    v5 = v4;
    v4 = v2;
    v6 = v5[2];
    v7 = *v5;
    if (v6 >= *v5)
    {
      if (v7 < v6)
        goto LABEL_19;
      v8 = v5[3];
      v9 = v5[1];
      if (v8 >= v9)
        goto LABEL_19;
    }
    else
    {
      v8 = v5[3];
      v9 = v5[1];
    }
    v5[2] = v7;
    v4[1] = v9;
    v10 = result;
    if (v5 == result)
      goto LABEL_18;
    v11 = v3;
    while (1)
    {
      v12 = *(unint64_t *)((char *)result + v11 - 16);
      if (v6 >= v12)
        break;
      v13 = *(unint64_t *)((char *)result + v11 - 8);
LABEL_12:
      v5 -= 2;
      v14 = (unint64_t *)((char *)result + v11);
      *v14 = v12;
      v14[1] = v13;
      v11 -= 16;
      if (!v11)
      {
        v10 = result;
        goto LABEL_18;
      }
    }
    if (v12 >= v6)
    {
      v10 = (unint64_t *)((char *)result + v11);
      v13 = *(unint64_t *)((char *)result + v11 - 8);
      if (v8 >= v13)
        goto LABEL_18;
      goto LABEL_12;
    }
    v10 = v5;
LABEL_18:
    *v10 = v6;
    v10[1] = v8;
LABEL_19:
    v2 = v4 + 2;
    v3 += 16;
  }
  while (v4 + 2 != a2);
  return result;
}

unint64_t *std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *> *>(unint64_t *result, unint64_t *a2)
{
  unint64_t *v2;
  unint64_t *i;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t *j;
  unint64_t v9;

  if (result != a2)
  {
    v2 = result + 2;
    if (result + 2 != a2)
    {
      for (i = result + 1; ; i += 2)
      {
        v4 = result;
        result = v2;
        v5 = v4[2];
        v6 = *v4;
        if (v5 < *v4)
          break;
        if (v6 >= v5)
        {
          v7 = v4[3];
          if (v7 < v4[1])
            goto LABEL_6;
        }
LABEL_14:
        v2 = result + 2;
        if (result + 2 == a2)
          return result;
      }
      v7 = v4[3];
LABEL_6:
      for (j = i; ; j -= 2)
      {
        v9 = *j;
        j[1] = v6;
        j[2] = v9;
        v6 = *(j - 3);
        if (v5 >= v6 && (v6 < v5 || v7 >= *(j - 2)))
          break;
      }
      *(j - 1) = v5;
      *j = v7;
      goto LABEL_14;
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *> *>(unint64_t *a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;

  v3 = *a2;
  v4 = *a1;
  if (*a2 >= *a1 && (v4 < v3 || a2[1] >= a1[1]))
  {
    v9 = *a3;
    if (*a3 >= v3)
    {
      if (v3 < v9)
        return 0;
      v11 = a3[1];
      v10 = a2[1];
      if (v11 >= v10)
        return 0;
    }
    else
    {
      v10 = a2[1];
      v11 = a3[1];
    }
    *a2 = v9;
    a2[1] = v11;
    *a3 = v3;
    a3[1] = v10;
    v12 = *a2;
    v13 = *a1;
    if (*a2 >= *a1)
    {
      if (v13 < v12)
        return 1;
      v15 = a2[1];
      v14 = a1[1];
      if (v15 >= v14)
        return 1;
    }
    else
    {
      v14 = a1[1];
      v15 = a2[1];
    }
    *a1 = v12;
    a1[1] = v15;
    result = 2;
    *a2 = v13;
    a2[1] = v14;
  }
  else
  {
    v5 = *a3;
    if (*a3 < v3)
    {
      v6 = a3[1];
LABEL_6:
      v7 = a1[1];
      *a1 = v5;
      a1[1] = v6;
      *a3 = v4;
      a3[1] = v7;
      return 1;
    }
    if (v3 >= v5)
    {
      v6 = a3[1];
      v16 = a2[1];
      if (v6 < v16)
        goto LABEL_6;
    }
    else
    {
      v16 = a2[1];
    }
    v17 = a1[1];
    *a1 = v3;
    a1[1] = v16;
    *a2 = v4;
    a2[1] = v17;
    v18 = *a3;
    if (*a3 >= v4)
    {
      if (v4 < v18)
        return 1;
      v19 = a3[1];
      if (v19 >= v17)
        return 1;
    }
    else
    {
      v19 = a3[1];
    }
    *a2 = v18;
    a2[1] = v19;
    result = 2;
    *a3 = v4;
    a3[1] = v17;
  }
  return result;
}

unint64_t *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *> *,std::__less<void,void> &>(unint64_t *a1, unint64_t *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t *i;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;

  v2 = *a1;
  v3 = a1[1];
  v4 = *(a2 - 2);
  if (*a1 >= v4 && (v4 < v2 || v3 >= *(a2 - 1)))
  {
    for (i = a1 + 2; i < a2 && v2 >= *i && (*i < v2 || v3 >= i[1]); i += 2)
      ;
  }
  else
  {
    i = a1;
    do
    {
      v7 = i[2];
      i += 2;
      v6 = v7;
    }
    while (v2 >= v7 && (v6 < v2 || v3 >= i[1]));
  }
  if (i < a2)
  {
    for (a2 -= 2; v2 < v4 || v4 >= v2 && v3 < a2[1]; a2 -= 2)
    {
      v8 = *(a2 - 2);
      v4 = v8;
    }
  }
  if (i < a2)
  {
    v9 = *i;
    v10 = *a2;
    do
    {
      *i = v10;
      *a2 = v9;
      v11 = i[2];
      i += 2;
      v9 = v11;
      v12 = *(i - 1);
      *(i - 1) = a2[1];
      a2[1] = v12;
      while (v2 >= v9 && (v9 < v2 || v3 >= i[1]))
      {
        v13 = i[2];
        i += 2;
        v9 = v13;
      }
      do
      {
        do
        {
          v14 = *(a2 - 2);
          a2 -= 2;
          v10 = v14;
        }
        while (v2 < v14);
      }
      while (v10 >= v2 && v3 < a2[1]);
    }
    while (i < a2);
  }
  if (i - 2 != a1)
  {
    v15 = *(i - 1);
    *a1 = *(i - 2);
    a1[1] = v15;
  }
  *(i - 2) = v2;
  *(i - 1) = v3;
  return i;
}

unint64_t *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *> *,std::__less<void,void> &>(unint64_t *a1, unint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v12;
  unint64_t *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;

  v2 = 0;
  v3 = *a1;
  v4 = a1[1];
  while (1)
  {
    v5 = a1[v2 + 2];
    if (v5 >= v3 && (v3 < v5 || a1[v2 + 3] >= v4))
      break;
    v2 += 2;
  }
  v6 = (unint64_t)&a1[v2 + 2];
  if (v2 * 8)
  {
    do
    {
      v8 = *(a2 - 2);
      a2 -= 2;
      v7 = v8;
    }
    while (v8 >= v3 && (v3 < v7 || a2[1] >= v4));
  }
  else
  {
LABEL_19:
    if (v6 < (unint64_t)a2)
    {
      do
      {
        v10 = *(a2 - 2);
        a2 -= 2;
        v9 = v10;
        if (v10 < v3)
          break;
        if (v3 < v9)
          goto LABEL_19;
      }
      while (a2[1] >= v4 && v6 < (unint64_t)a2);
    }
  }
  if (v6 >= (unint64_t)a2)
  {
    v13 = (unint64_t *)v6;
  }
  else
  {
    v12 = *a2;
    v13 = (unint64_t *)v6;
    v14 = a2;
    do
    {
      v15 = v13[1];
      v16 = v14[1];
      *v13 = v12;
      v13[1] = v16;
      *v14 = v5;
      v14[1] = v15;
      do
      {
        do
        {
          v17 = v13[2];
          v13 += 2;
          v5 = v17;
        }
        while (v17 < v3);
      }
      while (v3 >= v5 && v13[1] < v4);
      do
      {
        v18 = *(v14 - 2);
        v14 -= 2;
        v12 = v18;
      }
      while (v18 >= v3 && (v3 < v12 || v14[1] >= v4));
    }
    while (v13 < v14);
  }
  if (v13 - 2 != a1)
  {
    v19 = *(v13 - 1);
    *a1 = *(v13 - 2);
    a1[1] = v19;
  }
  *(v13 - 2) = v3;
  *(v13 - 1) = v4;
  return v13 - 2;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *> *>(unint64_t *a1, unint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t *v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;

  v4 = ((char *)a2 - (char *)a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 2);
      v7 = *a1;
      if (v6 < *a1)
      {
        v8 = a1[1];
        v9 = *(a2 - 1);
LABEL_30:
        *a1 = v6;
        a1[1] = v9;
        *(a2 - 2) = v7;
        *(a2 - 1) = v8;
        return result;
      }
      if (v7 >= v6)
      {
        v9 = *(a2 - 1);
        v8 = a1[1];
        if (v9 < v8)
          goto LABEL_30;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *> *>(a1, a1 + 2, a2 - 2);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *> *>(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *> *>(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2);
      return 1;
    default:
      v10 = a1 + 4;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *> *>(a1, a1 + 2, a1 + 4);
      v11 = a1 + 6;
      if (a1 + 6 == a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
LABEL_6:
  v14 = *v11;
  v15 = *v10;
  if (*v11 >= *v10)
  {
    if (v15 < v14)
      goto LABEL_21;
    v16 = v11[1];
    v17 = v10[1];
    if (v16 >= v17)
      goto LABEL_21;
  }
  else
  {
    v16 = v11[1];
    v17 = v10[1];
  }
  *v11 = v15;
  v11[1] = v17;
  v18 = a1;
  if (v10 == a1)
    goto LABEL_20;
  v19 = v12;
  while (1)
  {
    v20 = (char *)a1 + v19;
    v21 = *(unint64_t *)((char *)a1 + v19 + 16);
    if (v14 >= v21)
    {
      if (v21 < v14)
      {
        v18 = v10;
        goto LABEL_20;
      }
      v22 = *(unint64_t *)((char *)a1 + v19 + 24);
      if (v16 >= v22)
      {
        v18 = (unint64_t *)((char *)a1 + v19 + 32);
LABEL_20:
        *v18 = v14;
        v18[1] = v16;
        if (++v13 == 8)
          return v11 + 2 == a2;
LABEL_21:
        v10 = v11;
        v12 += 16;
        v11 += 2;
        if (v11 == a2)
          return 1;
        goto LABEL_6;
      }
    }
    else
    {
      v22 = *((_QWORD *)v20 + 3);
    }
    v10 -= 2;
    *((_QWORD *)v20 + 4) = v21;
    *(unint64_t *)((char *)a1 + v19 + 40) = v22;
    v19 -= 16;
    if (v19 == -32)
    {
      v18 = a1;
      goto LABEL_20;
    }
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *> *>(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4)
{
  uint64_t result;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;

  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *> *>(a1, a2, a3);
  v9 = *a4;
  v10 = *a3;
  if (*a4 >= *a3)
  {
    if (v10 < v9)
      return result;
    v12 = a4[1];
    v11 = a3[1];
    if (v12 >= v11)
      return result;
  }
  else
  {
    v11 = a3[1];
    v12 = a4[1];
  }
  *a3 = v9;
  a3[1] = v12;
  *a4 = v10;
  a4[1] = v11;
  v13 = *a3;
  v14 = *a2;
  if (*a3 >= *a2)
  {
    if (v14 < v13)
      return result;
    v16 = a3[1];
    v15 = a2[1];
    if (v16 >= v15)
      return result;
  }
  else
  {
    v15 = a2[1];
    v16 = a3[1];
  }
  *a2 = v13;
  a2[1] = v16;
  *a3 = v14;
  a3[1] = v15;
  v17 = *a2;
  v18 = *a1;
  if (*a2 < *a1)
  {
    v19 = a1[1];
    v20 = a2[1];
LABEL_15:
    *a1 = v17;
    a1[1] = v20;
    *a2 = v18;
    a2[1] = v19;
    return result;
  }
  if (v18 >= v17)
  {
    v20 = a2[1];
    v19 = a1[1];
    if (v20 < v19)
      goto LABEL_15;
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *> *>(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4, unint64_t *a5)
{
  uint64_t result;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;

  result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *> *>(a1, a2, a3, a4);
  v11 = *a5;
  v12 = *a4;
  if (*a5 >= *a4)
  {
    if (v12 < v11)
      return result;
    v14 = a5[1];
    v13 = a4[1];
    if (v14 >= v13)
      return result;
  }
  else
  {
    v13 = a4[1];
    v14 = a5[1];
  }
  *a4 = v11;
  a4[1] = v14;
  *a5 = v12;
  a5[1] = v13;
  v15 = *a4;
  v16 = *a3;
  if (*a4 >= *a3)
  {
    if (v16 < v15)
      return result;
    v18 = a4[1];
    v17 = a3[1];
    if (v18 >= v17)
      return result;
  }
  else
  {
    v17 = a3[1];
    v18 = a4[1];
  }
  *a3 = v15;
  a3[1] = v18;
  *a4 = v16;
  a4[1] = v17;
  v19 = *a3;
  v20 = *a2;
  if (*a3 >= *a2)
  {
    if (v20 < v19)
      return result;
    v22 = a3[1];
    v21 = a2[1];
    if (v22 >= v21)
      return result;
  }
  else
  {
    v21 = a2[1];
    v22 = a3[1];
  }
  *a2 = v19;
  a2[1] = v22;
  *a3 = v20;
  a3[1] = v21;
  v23 = *a2;
  v24 = *a1;
  if (*a2 < *a1)
  {
    v25 = a1[1];
    v26 = a2[1];
LABEL_9:
    *a1 = v23;
    a1[1] = v26;
    *a2 = v24;
    a2[1] = v25;
    return result;
  }
  if (v24 >= v23)
  {
    v26 = a2[1];
    v25 = a1[1];
    if (v26 < v25)
      goto LABEL_9;
  }
  return result;
}

unint64_t *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *> *,std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *> *>(unint64_t *a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;

  if (a1 != a2)
  {
    v8 = (char *)a2 - (char *)a1;
    v9 = ((char *)a2 - (char *)a1) >> 4;
    if ((char *)a2 - (char *)a1 >= 17)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[2 * v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *> *>((uint64_t)a1, a4, v9, v12);
        v12 -= 2;
        --v11;
      }
      while (v11);
    }
    v13 = a2;
    if (a2 != a3)
    {
      v14 = a2;
      while (1)
      {
        v15 = *v14;
        v16 = *a1;
        if (*v14 >= *a1)
        {
          if (v16 < v15)
            goto LABEL_12;
          v17 = v14[1];
          v18 = a1[1];
          if (v17 >= v18)
            goto LABEL_12;
        }
        else
        {
          v17 = v14[1];
          v18 = a1[1];
        }
        *v14 = v16;
        v14[1] = v18;
        *a1 = v15;
        a1[1] = v17;
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *> *>((uint64_t)a1, a4, v9, a1);
LABEL_12:
        v14 += 2;
        if (v14 == a3)
        {
          v13 = a3;
          break;
        }
      }
    }
    if (v8 >= 17)
    {
      v19 = (unint64_t)v8 >> 4;
      v20 = a2 - 2;
      do
      {
        v22 = *a1;
        v21 = a1[1];
        v23 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *> *>(a1, a4, v19);
        if (v20 == v23)
        {
          *v23 = v22;
          v23[1] = v21;
        }
        else
        {
          v24 = v20[1];
          *v23 = *v20;
          v23[1] = v24;
          *v20 = v22;
          v20[1] = v21;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *> *>((uint64_t)a1, (uint64_t)(v23 + 2), a4, ((char *)(v23 + 2) - (char *)a1) >> 4);
        }
        v20 -= 2;
      }
      while (v19-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *> *>(uint64_t result, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;

  if (a3 >= 2)
  {
    v4 = (uint64_t)a4 - result;
    v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 4)
    {
      v6 = v4 >> 3;
      v7 = (v4 >> 3) + 1;
      v8 = (unint64_t *)(result + 16 * v7);
      v9 = v6 + 2;
      if (v9 < a3)
      {
        v10 = v8[2];
        if (*v8 < v10 || v10 >= *v8 && *(_QWORD *)(result + 16 * v7 + 8) < v8[3])
        {
          v8 += 2;
          v7 = v9;
        }
      }
      v11 = *v8;
      v12 = *a4;
      if (*v8 >= *a4)
      {
        if (v12 >= v11)
        {
          v14 = v8[1];
          v13 = a4[1];
          if (v14 < v13)
            return result;
        }
        else
        {
          v13 = a4[1];
          v14 = v8[1];
        }
        *a4 = v11;
        a4[1] = v14;
        if (v5 >= v7)
        {
          while (1)
          {
            v16 = 2 * v7;
            v7 = (2 * v7) | 1;
            v15 = (unint64_t *)(result + 16 * v7);
            v17 = v16 + 2;
            if (v17 < a3)
            {
              v18 = v15[2];
              if (*v15 < v18 || v18 >= *v15 && *(_QWORD *)(result + 16 * v7 + 8) < v15[3])
              {
                v15 += 2;
                v7 = v17;
              }
            }
            v19 = *v15;
            if (*v15 < v12)
              break;
            v20 = v15[1];
            if (v12 >= v19 && v20 < v13)
              break;
            *v8 = v19;
            v8[1] = v20;
            v8 = v15;
            if (v5 < v7)
              goto LABEL_14;
          }
        }
        v15 = v8;
LABEL_14:
        *v15 = v12;
        v15[1] = v13;
      }
    }
  }
  return result;
}

unint64_t *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *> *>(unint64_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v3 = 0;
  v4 = a3 - 2;
  if (a3 < 2)
    v4 = a3 - 1;
  v5 = v4 >> 1;
  do
  {
    v6 = result;
    v7 = v3 + 1;
    result += 2 * v3 + 2;
    v8 = 2 * v3;
    v3 = (2 * v3) | 1;
    v9 = v8 + 2;
    if (v9 < a3)
    {
      v10 = result[2];
      if (*result < v10 || v10 >= *result && v6[2 * v7 + 1] < result[3])
      {
        result += 2;
        v3 = v9;
      }
    }
    v11 = result[1];
    *v6 = *result;
    v6[1] = v11;
  }
  while (v3 <= v5);
  return result;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *> *>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v5 = v4 >> 1;
    v6 = (unint64_t *)(result + 16 * (v4 >> 1));
    v7 = *v6;
    v8 = *(_QWORD *)(a2 - 16);
    if (*v6 >= v8)
    {
      if (v8 < v7)
        return result;
      v10 = *(_QWORD *)(result + 16 * v5 + 8);
      v9 = *(_QWORD *)(a2 - 8);
      if (v10 >= v9)
        return result;
    }
    else
    {
      v9 = *(_QWORD *)(a2 - 8);
      v10 = v6[1];
    }
    *(_QWORD *)(a2 - 16) = v7;
    *(_QWORD *)(a2 - 8) = v10;
    if (v4 >= 2)
    {
      while (1)
      {
        v12 = v5 - 1;
        v5 = (v5 - 1) >> 1;
        v11 = (unint64_t *)(result + 16 * v5);
        v13 = *v11;
        if (*v11 >= v8)
        {
          if (v8 < v13)
            break;
          v14 = *(_QWORD *)(result + 16 * v5 + 8);
          if (v14 >= v9)
            break;
        }
        else
        {
          v14 = v11[1];
        }
        *v6 = v13;
        v6[1] = v14;
        v6 = (unint64_t *)(result + 16 * v5);
        if (v12 <= 1)
          goto LABEL_13;
      }
    }
    v11 = v6;
LABEL_13:
    *v11 = v8;
    v11[1] = v9;
  }
  return result;
}

void std::vector<turi::groupby_aggregate_impl::groupby_element>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<turi::groupby_aggregate_impl::groupby_element>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, (void **)*v2);
    operator delete(**a1);
  }
}

void std::vector<turi::groupby_aggregate_impl::groupby_element>::__base_destruct_at_end[abi:ne180100](uint64_t a1, void **a2)
{
  void **v4;
  void **v5;
  void **v6;

  v4 = *(void ***)(a1 + 8);
  if (v4 != a2)
  {
    do
    {
      v5 = v4 - 7;
      v6 = v4 - 4;
      std::vector<std::unique_ptr<turi::group_aggregate_value>>::__destroy_vector::operator()[abi:ne180100](&v6);
      v6 = v5;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v6);
      v4 = v5;
    }
    while (v5 != a2);
  }
  *(_QWORD *)(a1 + 8) = a2;
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,turi::groupby_aggregate_impl::groupby_element *,false>(__int128 *a1, unint64_t a2, uint64_t a3, uint64_t a4, char a5, __n128 a6)
{
  uint64_t *v8;
  __int128 *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  __n128 v18;
  __n128 v19;
  __n128 v20;
  __n128 v21;
  __int128 *v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  char *v26;
  __n128 v27;
  char v28;
  _BOOL4 v29;
  __n128 v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  __int128 *v35;

  v8 = (uint64_t *)a2;
  v9 = a1;
  v34 = a2;
  v35 = a1;
  while (2)
  {
    v10 = 1 - a4;
LABEL_3:
    v11 = (char *)v8 - (char *)v9;
    v12 = 0x6DB6DB6DB6DB6DB7 * (((char *)v8 - (char *)v9) >> 3);
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v34 = (unint64_t)(v8 - 7);
        v31 = *(v8 - 1);
        v32 = *((_QWORD *)v9 + 6);
        if (v31 == v32)
        {
          if (!turi::groupby_aggregate_impl::flexible_type_vector_lt<std::vector<turi::flexible_type>,std::vector<turi::flexible_type>>(v8 - 7, v9, a6))return;
        }
        else if (v31 >= v32)
        {
          return;
        }
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<turi::groupby_aggregate_impl::groupby_element *&,turi::groupby_aggregate_impl::groupby_element *&>(&v35, (uint64_t *)&v34);
        return;
      case 3uLL:
        v34 = (unint64_t)(v8 - 7);
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,turi::groupby_aggregate_impl::groupby_element *>((uint64_t)v9, (uint64_t)v9 + 56, v8 - 7, a6);
        return;
      case 4uLL:
        v34 = (unint64_t)(v8 - 7);
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,turi::groupby_aggregate_impl::groupby_element *>((uint64_t)v9, (uint64_t)v9 + 56, (uint64_t)(v9 + 7), v8 - 7, a6);
        return;
      case 5uLL:
        v34 = (unint64_t)(v8 - 7);
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,turi::groupby_aggregate_impl::groupby_element *>((uint64_t)v9, (uint64_t)v9 + 56, (uint64_t)(v9 + 7), (uint64_t)v9 + 168, v8 - 7, a6);
        return;
      default:
        if (v11 <= 1343)
        {
          if ((a5 & 1) != 0)
            std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,turi::groupby_aggregate_impl::groupby_element *>((uint64_t *)v9, v8, a6);
          else
            std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,turi::groupby_aggregate_impl::groupby_element *>((uint64_t *)v9, v8, a6);
          return;
        }
        if (v10 == 1)
        {
          if (v9 != (__int128 *)v8)
            std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,turi::groupby_aggregate_impl::groupby_element *,turi::groupby_aggregate_impl::groupby_element *>(v9, (__int128 *)v8, (__int128 *)v8, a3, a6);
          return;
        }
        v13 = v12 >> 1;
        v14 = v8 - 7;
        if ((unint64_t)v11 < 0x1C01)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,turi::groupby_aggregate_impl::groupby_element *>((uint64_t)v9 + 56 * (v12 >> 1), (uint64_t)v9, v14, a6);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,turi::groupby_aggregate_impl::groupby_element *>((uint64_t)v9, (uint64_t)v9 + 56 * (v12 >> 1), v14, a6);
          v15 = 56 * v13;
          v16 = 56 * v13 - 56;
          v17 = v34;
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,turi::groupby_aggregate_impl::groupby_element *>((uint64_t)v35 + 56, (uint64_t)v35 + v16, (uint64_t *)(v34 - 112), v18);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,turi::groupby_aggregate_impl::groupby_element *>((uint64_t)(v35 + 7), (uint64_t)v35 + v15 + 56, (uint64_t *)(v17 - 168), v19);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,turi::groupby_aggregate_impl::groupby_element *>((uint64_t)v35 + v16, (uint64_t)v35 + v15, (uint64_t *)((char *)v35 + v15 + 56), v20);
          v33 = (uint64_t)v35 + v15;
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<turi::groupby_aggregate_impl::groupby_element *&,turi::groupby_aggregate_impl::groupby_element *&>(&v35, &v33);
        }
        v22 = v35;
        if ((a5 & 1) == 0)
        {
          v23 = *((_QWORD *)v35 - 1);
          v24 = *((_QWORD *)v35 + 6);
          if (v23 == v24)
          {
            v25 = turi::groupby_aggregate_impl::flexible_type_vector_lt<std::vector<turi::flexible_type>,std::vector<turi::flexible_type>>((uint64_t *)v35 - 7, v35, v21);
            v22 = v35;
            if ((v25 & 1) != 0)
              goto LABEL_14;
          }
          else if (v23 < v24)
          {
            goto LABEL_14;
          }
          v8 = (uint64_t *)v34;
          v9 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,turi::groupby_aggregate_impl::groupby_element *,std::__less<void,void> &>((uint64_t)v22, v34);
LABEL_23:
          a5 = 0;
          v35 = v9;
          a4 = -v10;
          continue;
        }
LABEL_14:
        v8 = (uint64_t *)v34;
        v26 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,turi::groupby_aggregate_impl::groupby_element *,std::__less<void,void> &>((uint64_t)v22, v34);
        if ((v28 & 1) == 0)
          goto LABEL_21;
        v29 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,turi::groupby_aggregate_impl::groupby_element *>((uint64_t)v35, (uint64_t)v26, v27);
        v9 = (__int128 *)(v26 + 56);
        if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,turi::groupby_aggregate_impl::groupby_element *>((uint64_t)(v26 + 56), (uint64_t)v8, v30))
        {
          if (v29)
          {
            v35 = (__int128 *)(v26 + 56);
            goto LABEL_20;
          }
LABEL_21:
          std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,turi::groupby_aggregate_impl::groupby_element *,false>(v35, v26, a3, -v10, a5 & 1);
          v9 = (__int128 *)(v26 + 56);
          goto LABEL_23;
        }
        if (!v29)
        {
          v34 = (unint64_t)v26;
          v9 = v35;
          v8 = (uint64_t *)v26;
LABEL_20:
          ++v10;
          goto LABEL_3;
        }
        return;
    }
  }
}

void std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<turi::groupby_aggregate_impl::groupby_element *&,turi::groupby_aggregate_impl::groupby_element *&>(__int128 **a1, uint64_t *a2)
{
  __int128 *v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  _QWORD v10[3];
  _QWORD v11[4];
  void **v12;

  v2 = *a1;
  v3 = *a2;
  v4 = *((_QWORD *)*a1 + 2);
  v5 = **a1;
  *(_QWORD *)v2 = 0;
  *((_QWORD *)v2 + 1) = 0;
  v8 = v5;
  v9 = *(__int128 *)((char *)v2 + 24);
  *((_QWORD *)v2 + 3) = 0;
  *((_QWORD *)v2 + 2) = 0;
  v6 = *((_QWORD *)v2 + 5);
  v7 = *((_QWORD *)v2 + 6);
  *((_QWORD *)v2 + 4) = 0;
  *((_QWORD *)v2 + 5) = 0;
  v11[3] = v7;
  std::vector<turi::flexible_type>::__vdeallocate((void **)v2);
  *v2 = *(_OWORD *)v3;
  *((_QWORD *)v2 + 2) = *(_QWORD *)(v3 + 16);
  *(_QWORD *)v3 = 0;
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v3 + 16) = 0;
  std::vector<std::unique_ptr<turi::group_aggregate_value>>::__vdeallocate((_QWORD *)v2 + 3);
  *(__int128 *)((char *)v2 + 24) = *(_OWORD *)(v3 + 24);
  *((_QWORD *)v2 + 5) = *(_QWORD *)(v3 + 40);
  *(_QWORD *)(v3 + 24) = 0;
  *(_QWORD *)(v3 + 32) = 0;
  *(_QWORD *)(v3 + 40) = 0;
  *((_QWORD *)v2 + 6) = *(_QWORD *)(v3 + 48);
  std::vector<turi::flexible_type>::__vdeallocate((void **)v3);
  *(_OWORD *)v3 = v8;
  *(_QWORD *)(v3 + 16) = v4;
  memset(v10, 0, sizeof(v10));
  std::vector<std::unique_ptr<turi::group_aggregate_value>>::__vdeallocate((_QWORD *)(v3 + 24));
  *(_OWORD *)(v3 + 24) = v9;
  v11[0] = 0;
  v11[1] = 0;
  *(_QWORD *)(v3 + 40) = v6;
  *(_QWORD *)(v3 + 48) = v7;
  v11[2] = 0;
  v12 = (void **)v11;
  std::vector<std::unique_ptr<turi::group_aggregate_value>>::__destroy_vector::operator()[abi:ne180100](&v12);
  v12 = (void **)v10;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v12);
}

void std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,turi::groupby_aggregate_impl::groupby_element *>(uint64_t *a1, uint64_t *a2, __n128 a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  __n128 v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  unint64_t v27;
  void **v28;

  if (a1 == a2)
    return;
  v5 = a1 + 7;
  if (a1 + 7 == a2)
    return;
  v6 = 0;
  v7 = a1;
  do
  {
    v8 = v7;
    v7 = v5;
    v9 = v8[13];
    v10 = v8[6];
    if (v9 == v10)
    {
      if (!turi::groupby_aggregate_impl::flexible_type_vector_lt<std::vector<turi::flexible_type>,std::vector<turi::flexible_type>>(v7, v8, a3))goto LABEL_18;
    }
    else if (v9 >= v10)
    {
      goto LABEL_18;
    }
    v23 = *(_OWORD *)v7;
    v24 = v8[9];
    v7[1] = 0;
    v7[2] = 0;
    *v7 = 0;
    v25 = *((_OWORD *)v8 + 5);
    v11 = v8[12];
    v12 = v8[13];
    v8[11] = 0;
    v8[12] = 0;
    v8[10] = 0;
    v13 = v6;
    v26 = v11;
    v27 = v12;
    while (1)
    {
      v14 = (char *)a1 + v13;
      std::vector<turi::flexible_type>::__vdeallocate((void **)((char *)a1 + v13 + 56));
      *(_OWORD *)(v14 + 56) = *(_OWORD *)v14;
      *((_QWORD *)v14 + 9) = *((_QWORD *)v14 + 2);
      *((_QWORD *)v14 + 1) = 0;
      *((_QWORD *)v14 + 2) = 0;
      *(_QWORD *)v14 = 0;
      std::vector<std::unique_ptr<turi::group_aggregate_value>>::__vdeallocate((uint64_t *)((char *)a1 + v13 + 80));
      v15 = *(__n128 *)((char *)a1 + v13 + 24);
      *((__n128 *)v14 + 5) = v15;
      v16 = *(uint64_t *)((char *)a1 + v13 + 40);
      v17 = *(uint64_t *)((char *)a1 + v13 + 48);
      *((_QWORD *)v14 + 4) = 0;
      *((_QWORD *)v14 + 5) = 0;
      *((_QWORD *)v14 + 3) = 0;
      *((_QWORD *)v14 + 12) = v16;
      *((_QWORD *)v14 + 13) = v17;
      if (!v13)
      {
        v19 = a1;
        goto LABEL_17;
      }
      v18 = *((_QWORD *)v14 - 1);
      if (v27 != v18)
        break;
      if (!turi::groupby_aggregate_impl::flexible_type_vector_lt<std::vector<turi::flexible_type>,std::vector<turi::flexible_type>>((uint64_t *)&v23, (_QWORD *)v14 - 7, v15))goto LABEL_16;
LABEL_14:
      v13 -= 56;
    }
    if (v27 < v18)
      goto LABEL_14;
LABEL_16:
    v19 = (uint64_t *)((char *)a1 + v13);
LABEL_17:
    std::vector<turi::flexible_type>::__vdeallocate((void **)v19);
    *(_OWORD *)v19 = v23;
    v19[2] = v24;
    v24 = 0;
    v23 = 0uLL;
    std::vector<std::unique_ptr<turi::group_aggregate_value>>::__vdeallocate((_QWORD *)v14 + 3);
    v20 = *((_QWORD *)&v25 + 1);
    *((_QWORD *)v14 + 3) = v25;
    v21 = v26;
    v22 = v27;
    v19[4] = v20;
    v19[5] = v21;
    v26 = 0;
    v25 = 0uLL;
    v19[6] = v22;
    v28 = (void **)&v25;
    std::vector<std::unique_ptr<turi::group_aggregate_value>>::__destroy_vector::operator()[abi:ne180100](&v28);
    v28 = (void **)&v23;
    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v28);
LABEL_18:
    v5 = v7 + 7;
    v6 += 56;
  }
  while (v7 + 7 != a2);
}

void sub_21816BC44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  turi::groupby_aggregate_impl::groupby_element::~groupby_element(&a9);
  _Unwind_Resume(a1);
}

void std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,turi::groupby_aggregate_impl::groupby_element *>(uint64_t *a1, uint64_t *a2, __n128 a3)
{
  uint64_t *v4;
  uint64_t *v5;
  void **v6;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void **v12;
  __n128 v13;
  void *v14;
  unint64_t v15;
  void *v16;
  void *v17;
  __int128 v18;
  void *v19;
  __int128 v20;
  void *v21;
  void *v22;
  void **v23;

  if (a1 != a2)
  {
    v4 = a1;
    v5 = a1 + 7;
    if (a1 + 7 != a2)
    {
      v6 = (void **)(a1 + 13);
      do
      {
        v7 = v4;
        v4 = v5;
        v8 = v7[13];
        v9 = v7[6];
        if (v8 != v9)
        {
          if (v8 >= v9)
            goto LABEL_15;
LABEL_8:
          v18 = *(_OWORD *)v4;
          v19 = (void *)v7[9];
          v4[1] = 0;
          v4[2] = 0;
          *v4 = 0;
          v20 = *((_OWORD *)v7 + 5);
          v10 = v7[12];
          v11 = v7[13];
          v7[11] = 0;
          v7[12] = 0;
          v7[10] = 0;
          v12 = v6;
          v21 = (void *)v10;
          v22 = (void *)v11;
          while (1)
          {
            std::vector<turi::flexible_type>::__vdeallocate(v12 - 6);
            *((_OWORD *)v12 - 3) = *(_OWORD *)(v12 - 13);
            *(v12 - 4) = *(v12 - 11);
            *(v12 - 12) = 0;
            *(v12 - 11) = 0;
            *(v12 - 13) = 0;
            std::vector<std::unique_ptr<turi::group_aggregate_value>>::__vdeallocate(v12 - 3);
            v13 = *((__n128 *)v12 - 5);
            *(__n128 *)(v12 - 3) = v13;
            v14 = *(v12 - 7);
            *(v12 - 1) = *(v12 - 8);
            *v12 = v14;
            *(v12 - 9) = 0;
            *(v12 - 8) = 0;
            *(v12 - 10) = 0;
            v15 = (unint64_t)*(v12 - 14);
            if (v22 == (void *)v15)
            {
              if (!turi::groupby_aggregate_impl::flexible_type_vector_lt<std::vector<turi::flexible_type>,std::vector<turi::flexible_type>>((uint64_t *)&v18, v12 - 20, v13))goto LABEL_14;
            }
            else if ((unint64_t)v22 >= v15)
            {
LABEL_14:
              std::vector<turi::flexible_type>::__vdeallocate(v12 - 13);
              *(_OWORD *)(v12 - 13) = v18;
              *(v12 - 11) = v19;
              v19 = 0;
              v18 = 0uLL;
              std::vector<std::unique_ptr<turi::group_aggregate_value>>::__vdeallocate(v12 - 10);
              *((_OWORD *)v12 - 5) = v20;
              v16 = v21;
              v17 = v22;
              v21 = 0;
              v20 = 0uLL;
              *(v12 - 8) = v16;
              *(v12 - 7) = v17;
              v23 = (void **)&v20;
              std::vector<std::unique_ptr<turi::group_aggregate_value>>::__destroy_vector::operator()[abi:ne180100](&v23);
              v23 = (void **)&v18;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v23);
              goto LABEL_15;
            }
            v12 -= 7;
          }
        }
        if (turi::groupby_aggregate_impl::flexible_type_vector_lt<std::vector<turi::flexible_type>,std::vector<turi::flexible_type>>(v4, v7, a3))goto LABEL_8;
LABEL_15:
        v5 = v4 + 7;
        v6 += 7;
      }
      while (v4 + 7 != a2);
    }
  }
}

void sub_21816BDEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  turi::groupby_aggregate_impl::groupby_element::~groupby_element(&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,turi::groupby_aggregate_impl::groupby_element *>(uint64_t a1, uint64_t a2, uint64_t *a3, __n128 a4)
{
  unint64_t v6;
  unint64_t v7;
  char v8;
  unint64_t v9;
  uint64_t result;
  unint64_t v11;
  __n128 v12;
  unint64_t v13;
  unint64_t v14;
  __n128 v15;
  unint64_t v16;
  unint64_t v17;
  __int128 **v18;
  uint64_t *v19;
  uint64_t *v20;
  __int128 *v21;
  __int128 *v22;

  v21 = (__int128 *)a2;
  v22 = (__int128 *)a1;
  v20 = a3;
  v6 = *(_QWORD *)(a2 + 48);
  v7 = *(_QWORD *)(a1 + 48);
  if (v6 == v7)
  {
    v8 = turi::groupby_aggregate_impl::flexible_type_vector_lt<std::vector<turi::flexible_type>,std::vector<turi::flexible_type>>((uint64_t *)a2, (_QWORD *)a1, a4);
    v6 = *(_QWORD *)(a2 + 48);
    if ((v8 & 1) == 0)
      goto LABEL_3;
LABEL_7:
    v11 = a3[6];
    if (v11 == v6)
    {
      if (!turi::groupby_aggregate_impl::flexible_type_vector_lt<std::vector<turi::flexible_type>,std::vector<turi::flexible_type>>(a3, (_QWORD *)a2, a4))goto LABEL_9;
    }
    else if (v11 >= v6)
    {
LABEL_9:
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<turi::groupby_aggregate_impl::groupby_element *&,turi::groupby_aggregate_impl::groupby_element *&>(&v22, (uint64_t *)&v21);
      v13 = v20[6];
      v14 = *((_QWORD *)v21 + 6);
      if (v13 == v14)
      {
        if (!turi::groupby_aggregate_impl::flexible_type_vector_lt<std::vector<turi::flexible_type>,std::vector<turi::flexible_type>>(v20, v21, v12))return 1;
      }
      else if (v13 >= v14)
      {
        return 1;
      }
      v18 = &v21;
      v19 = (uint64_t *)&v20;
LABEL_23:
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<turi::groupby_aggregate_impl::groupby_element *&,turi::groupby_aggregate_impl::groupby_element *&>(v18, v19);
      return 2;
    }
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<turi::groupby_aggregate_impl::groupby_element *&,turi::groupby_aggregate_impl::groupby_element *&>(&v22, (uint64_t *)&v20);
    return 1;
  }
  if (v6 < v7)
    goto LABEL_7;
LABEL_3:
  v9 = a3[6];
  if (v9 != v6)
  {
    if (v9 >= v6)
      return 0;
    goto LABEL_13;
  }
  result = turi::groupby_aggregate_impl::flexible_type_vector_lt<std::vector<turi::flexible_type>,std::vector<turi::flexible_type>>(a3, (_QWORD *)a2, a4);
  if ((_DWORD)result)
  {
LABEL_13:
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<turi::groupby_aggregate_impl::groupby_element *&,turi::groupby_aggregate_impl::groupby_element *&>(&v21, (uint64_t *)&v20);
    v16 = *((_QWORD *)v21 + 6);
    v17 = *((_QWORD *)v22 + 6);
    if (v16 == v17)
    {
      if (!turi::groupby_aggregate_impl::flexible_type_vector_lt<std::vector<turi::flexible_type>,std::vector<turi::flexible_type>>((uint64_t *)v21, v22, v15))return 1;
      goto LABEL_22;
    }
    if (v16 < v17)
    {
LABEL_22:
      v18 = &v22;
      v19 = (uint64_t *)&v21;
      goto LABEL_23;
    }
    return 1;
  }
  return result;
}

__int128 *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,turi::groupby_aggregate_impl::groupby_element *,std::__less<void,void> &>(uint64_t a1, uint64_t a2)
{
  __int128 *v2;
  _QWORD *v4;
  __n128 v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 *i;
  __int128 *v10;
  unint64_t v11;
  char *v12;
  BOOL v13;
  unint64_t v14;
  unint64_t v15;
  __n128 v16;
  __int128 *v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  __int128 *v21;
  unint64_t v22;
  __int128 *v23;
  __int128 v25;
  uint64_t v26;
  __n128 v27;
  uint64_t v28;
  unint64_t v29;
  __int128 *v30;
  __int128 *v31;
  void **v32;

  v2 = (__int128 *)a2;
  v30 = (__int128 *)a2;
  v31 = (__int128 *)a1;
  v25 = *(_OWORD *)a1;
  v26 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  v4 = (_QWORD *)(a1 + 24);
  v5 = *(__n128 *)(a1 + 24);
  v27 = v5;
  *(_QWORD *)(a1 + 24) = 0;
  v6 = *(_QWORD *)(a1 + 40);
  v7 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v28 = v6;
  v29 = v7;
  v8 = *(_QWORD *)(a2 - 8);
  if (v7 == v8)
  {
    if (!turi::groupby_aggregate_impl::flexible_type_vector_lt<std::vector<turi::flexible_type>,std::vector<turi::flexible_type>>((uint64_t *)&v25, (_QWORD *)(a2 - 56), v5))goto LABEL_3;
LABEL_14:
    for (i = (__int128 *)(a1 + 56); ; i = (__int128 *)((char *)i + 56))
    {
      v31 = i;
      v14 = *((_QWORD *)i + 6);
      if (v29 == v14)
      {
        if ((turi::groupby_aggregate_impl::flexible_type_vector_lt<std::vector<turi::flexible_type>,std::vector<turi::flexible_type>>((uint64_t *)&v25, i, v5) & 1) != 0)goto LABEL_20;
      }
      else if (v29 < v14)
      {
LABEL_20:
        v2 = v30;
        goto LABEL_21;
      }
    }
  }
  if (v7 < v8)
    goto LABEL_14;
LABEL_3:
  i = (__int128 *)(a1 + 56);
  v31 = (__int128 *)(a1 + 56);
  if (a1 + 56 < (unint64_t)v2)
  {
    v10 = (__int128 *)(a1 + 112);
    do
    {
      v11 = *((_QWORD *)v10 - 1);
      if (v29 == v11)
      {
        if ((turi::groupby_aggregate_impl::flexible_type_vector_lt<std::vector<turi::flexible_type>,std::vector<turi::flexible_type>>((uint64_t *)&v25, (_QWORD *)v10 - 7, v5) & 1) != 0)goto LABEL_21;
      }
      else if (v29 < v11)
      {
        i = (__int128 *)((char *)v10 - 56);
        goto LABEL_21;
      }
      i = (__int128 *)((char *)i + 56);
      v31 = v10;
      v12 = (char *)v10 + 56;
      v13 = v10 >= v2;
      v10 = (__int128 *)((char *)v10 + 56);
    }
    while (!v13);
    i = (__int128 *)(v12 - 56);
  }
LABEL_21:
  if (i < v2)
  {
    do
    {
      while (1)
      {
        v2 = (__int128 *)((char *)v2 - 56);
        v30 = v2;
        v15 = *((_QWORD *)v2 + 6);
        if (v29 != v15)
          break;
        if (!turi::groupby_aggregate_impl::flexible_type_vector_lt<std::vector<turi::flexible_type>,std::vector<turi::flexible_type>>((uint64_t *)&v25, v2, v5))goto LABEL_26;
      }
    }
    while (v29 < v15);
LABEL_26:
    i = v31;
  }
  if (i < v2)
  {
    do
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<turi::groupby_aggregate_impl::groupby_element *&,turi::groupby_aggregate_impl::groupby_element *&>(&v31, (uint64_t *)&v30);
      do
      {
        while (1)
        {
          v17 = v31;
          v18 = (_QWORD *)v31 + 7;
          v31 = (__int128 *)((char *)v31 + 56);
          v19 = *((_QWORD *)v17 + 13);
          if (v29 != v19)
            break;
          if (turi::groupby_aggregate_impl::flexible_type_vector_lt<std::vector<turi::flexible_type>,std::vector<turi::flexible_type>>((uint64_t *)&v25, v18, v16))goto LABEL_35;
        }
      }
      while (v29 >= v19);
      do
      {
LABEL_35:
        while (1)
        {
          v20 = (uint64_t)v30;
          v21 = (__int128 *)((char *)v30 - 56);
          v30 = (__int128 *)((char *)v30 - 56);
          v22 = *(_QWORD *)(v20 - 8);
          if (v29 == v22)
            break;
          if (v29 >= v22)
            goto LABEL_38;
        }
      }
      while ((turi::groupby_aggregate_impl::flexible_type_vector_lt<std::vector<turi::flexible_type>,std::vector<turi::flexible_type>>((uint64_t *)&v25, v21, v16) & 1) != 0);
      v21 = v30;
LABEL_38:
      i = v31;
    }
    while (v31 < v21);
  }
  if ((__int128 *)((char *)i - 56) != (__int128 *)a1)
  {
    std::vector<turi::flexible_type>::__vdeallocate((void **)a1);
    *(_OWORD *)a1 = *(__int128 *)((char *)i - 56);
    *(_QWORD *)(a1 + 16) = *((_QWORD *)i - 5);
    *((_QWORD *)i - 7) = 0;
    *((_QWORD *)i - 6) = 0;
    *((_QWORD *)i - 5) = 0;
    std::vector<std::unique_ptr<turi::group_aggregate_value>>::__vdeallocate(v4);
    *(_OWORD *)(a1 + 24) = *(i - 2);
    *(_QWORD *)(a1 + 40) = *((_QWORD *)i - 2);
    *((_QWORD *)i - 4) = 0;
    *((_QWORD *)i - 3) = 0;
    *((_QWORD *)i - 2) = 0;
    *(_QWORD *)(a1 + 48) = *((_QWORD *)i - 1);
  }
  std::vector<turi::flexible_type>::__vdeallocate((void **)i - 7);
  *(__int128 *)((char *)i - 56) = v25;
  *((_QWORD *)i - 5) = v26;
  v25 = 0uLL;
  v26 = 0;
  std::vector<std::unique_ptr<turi::group_aggregate_value>>::__vdeallocate((_QWORD *)i - 4);
  *(i - 2) = (__int128)v27;
  *((_QWORD *)i - 2) = v28;
  v27 = 0uLL;
  v28 = 0;
  *((_QWORD *)i - 1) = v29;
  v23 = v31;
  v32 = (void **)&v27;
  std::vector<std::unique_ptr<turi::group_aggregate_value>>::__destroy_vector::operator()[abi:ne180100](&v32);
  v32 = (void **)&v25;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v32);
  return v23;
}

void sub_21816C1EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  turi::groupby_aggregate_impl::groupby_element::~groupby_element(&a9);
  _Unwind_Resume(a1);
}

char *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,turi::groupby_aggregate_impl::groupby_element *,std::__less<void,void> &>(uint64_t a1, unint64_t a2)
{
  _QWORD *v3;
  __n128 v4;
  unint64_t v5;
  uint64_t v6;
  __int128 *v7;
  __int128 *v8;
  unint64_t v9;
  BOOL v10;
  unint64_t v11;
  uint64_t *i;
  unint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  __int128 *v16;
  __n128 v17;
  __int128 *v18;
  uint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  __int128 v25;
  uint64_t v26;
  __n128 v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  __int128 *v31;
  void **v32;

  v25 = *(_OWORD *)a1;
  v26 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  v3 = (_QWORD *)(a1 + 24);
  v4 = *(__n128 *)(a1 + 24);
  v27 = v4;
  *(_QWORD *)(a1 + 24) = 0;
  v6 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v7 = (__int128 *)a1;
  v28 = v6;
  v29 = v5;
  v30 = a2;
  while (1)
  {
    v8 = (__int128 *)((char *)v7 + 56);
    while (1)
    {
      v7 = v8;
      v9 = *((_QWORD *)v8 + 6);
      v10 = v9 >= v5;
      if (v9 == v5)
        break;
      v8 = (__int128 *)((char *)v7 + 56);
      if (v10)
      {
        v31 = v7;
        goto LABEL_9;
      }
    }
    v31 = v7;
    if (!turi::groupby_aggregate_impl::flexible_type_vector_lt<std::vector<turi::flexible_type>,std::vector<turi::flexible_type>>((uint64_t *)v7, &v25, v4))break;
    v5 = v29;
  }
LABEL_9:
  v11 = v30;
  if ((__int128 *)((char *)v7 - 56) != (__int128 *)a1)
  {
    for (i = (uint64_t *)(v30 - 56); ; i -= 7)
    {
      v30 = (unint64_t)i;
      v13 = i[6];
      if (v13 == v29)
      {
        if ((turi::groupby_aggregate_impl::flexible_type_vector_lt<std::vector<turi::flexible_type>,std::vector<turi::flexible_type>>(i, &v25, v4) & 1) != 0)goto LABEL_22;
      }
      else if (v13 < v29)
      {
        goto LABEL_22;
      }
    }
  }
  if ((unint64_t)v7 < v30)
  {
    do
    {
      v14 = (uint64_t *)(v11 - 56);
      v30 = v11 - 56;
      v15 = *(_QWORD *)(v11 - 8);
      if (v15 == v29)
      {
        if ((turi::groupby_aggregate_impl::flexible_type_vector_lt<std::vector<turi::flexible_type>,std::vector<turi::flexible_type>>(v14, &v25, v4) & 1) != 0)break;
        v14 = (uint64_t *)v30;
        v7 = v31;
      }
      else if (v15 < v29)
      {
        break;
      }
      v11 = (unint64_t)v14;
    }
    while (v7 < (__int128 *)v14);
  }
LABEL_22:
  v16 = v31;
  if ((unint64_t)v31 < v30)
  {
    do
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<turi::groupby_aggregate_impl::groupby_element *&,turi::groupby_aggregate_impl::groupby_element *&>(&v31, (uint64_t *)&v30);
      do
      {
        while (1)
        {
          v18 = v31;
          v19 = (uint64_t *)v31 + 7;
          v31 = (__int128 *)((char *)v31 + 56);
          v20 = *((_QWORD *)v18 + 13);
          if (v20 != v29)
            break;
          if ((turi::groupby_aggregate_impl::flexible_type_vector_lt<std::vector<turi::flexible_type>,std::vector<turi::flexible_type>>(v19, &v25, v17) & 1) == 0)goto LABEL_30;
        }
      }
      while (v20 < v29);
      do
      {
LABEL_30:
        while (1)
        {
          v21 = v30;
          v22 = (uint64_t *)(v30 - 56);
          v30 -= 56;
          v23 = *(_QWORD *)(v21 - 8);
          if (v23 == v29)
            break;
          if (v23 < v29)
            goto LABEL_33;
        }
      }
      while (!turi::groupby_aggregate_impl::flexible_type_vector_lt<std::vector<turi::flexible_type>,std::vector<turi::flexible_type>>(v22, &v25, v17));
      v22 = (uint64_t *)v30;
LABEL_33:
      v16 = v31;
    }
    while (v31 < (__int128 *)v22);
  }
  if ((__int128 *)((char *)v16 - 56) != (__int128 *)a1)
  {
    std::vector<turi::flexible_type>::__vdeallocate((void **)a1);
    *(_OWORD *)a1 = *(__int128 *)((char *)v16 - 56);
    *(_QWORD *)(a1 + 16) = *((_QWORD *)v16 - 5);
    *((_QWORD *)v16 - 7) = 0;
    *((_QWORD *)v16 - 6) = 0;
    *((_QWORD *)v16 - 5) = 0;
    std::vector<std::unique_ptr<turi::group_aggregate_value>>::__vdeallocate(v3);
    *(_OWORD *)(a1 + 24) = *(v16 - 2);
    *(_QWORD *)(a1 + 40) = *((_QWORD *)v16 - 2);
    *((_QWORD *)v16 - 4) = 0;
    *((_QWORD *)v16 - 3) = 0;
    *((_QWORD *)v16 - 2) = 0;
    *(_QWORD *)(a1 + 48) = *((_QWORD *)v16 - 1);
  }
  std::vector<turi::flexible_type>::__vdeallocate((void **)v16 - 7);
  *(__int128 *)((char *)v16 - 56) = v25;
  *((_QWORD *)v16 - 5) = v26;
  v25 = 0uLL;
  v26 = 0;
  std::vector<std::unique_ptr<turi::group_aggregate_value>>::__vdeallocate((_QWORD *)v16 - 4);
  *(v16 - 2) = (__int128)v27;
  *((_QWORD *)v16 - 2) = v28;
  v27 = 0uLL;
  v28 = 0;
  *((_QWORD *)v16 - 1) = v29;
  v32 = (void **)&v27;
  std::vector<std::unique_ptr<turi::group_aggregate_value>>::__destroy_vector::operator()[abi:ne180100](&v32);
  v32 = (void **)&v25;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v32);
  return (char *)v16 - 56;
}

void sub_21816C4B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  turi::groupby_aggregate_impl::groupby_element::~groupby_element(&a9);
  _Unwind_Resume(a1);
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,turi::groupby_aggregate_impl::groupby_element *>(uint64_t a1, uint64_t a2, __n128 a3)
{
  uint64_t v3;
  uint64_t v5;
  _BOOL8 result;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  __n128 v10;
  uint64_t v11;
  int v12;
  void **v13;
  void *v14;
  unint64_t v15;
  void *v16;
  void **v17;
  __n128 v18;
  void *v19;
  unint64_t v20;
  void *v21;
  void *v22;
  __int128 v23;
  void *v24;
  __int128 v25;
  void *v26;
  void *v27;
  uint64_t v28;
  void **v29;
  void **v30;

  v3 = a2;
  v28 = a2;
  v29 = (void **)a1;
  v5 = 0x6DB6DB6DB6DB6DB7 * ((a2 - a1) >> 3);
  result = 1;
  switch(v5)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v28 = a2 - 56;
      v7 = *(_QWORD *)(a2 - 8);
      v8 = *(_QWORD *)(a1 + 48);
      if (v7 == v8)
      {
        if (!turi::groupby_aggregate_impl::flexible_type_vector_lt<std::vector<turi::flexible_type>,std::vector<turi::flexible_type>>((uint64_t *)(a2 - 56), (_QWORD *)a1, a3))return 1;
      }
      else if (v7 >= v8)
      {
        return 1;
      }
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<turi::groupby_aggregate_impl::groupby_element *&,turi::groupby_aggregate_impl::groupby_element *&>((__int128 **)&v29, &v28);
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,turi::groupby_aggregate_impl::groupby_element *>(a1, a1 + 56, (uint64_t *)(a2 - 56), a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,turi::groupby_aggregate_impl::groupby_element *>(a1, a1 + 56, a1 + 112, (uint64_t *)(a2 - 56), a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,turi::groupby_aggregate_impl::groupby_element *>(a1, a1 + 56, a1 + 112, a1 + 168, (uint64_t *)(a2 - 56), a3);
      return 1;
    default:
      v9 = (_QWORD *)(a1 + 112);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,turi::groupby_aggregate_impl::groupby_element *>(a1, a1 + 56, (uint64_t *)(a1 + 112), a3);
      v11 = a1 + 168;
      if (a1 + 168 == v3)
        return 1;
      v12 = 0;
      v13 = (void **)(a1 + 216);
      break;
  }
  do
  {
    v14 = *(void **)(v11 + 48);
    v15 = v9[6];
    if (v14 == (void *)v15)
    {
      if ((turi::groupby_aggregate_impl::flexible_type_vector_lt<std::vector<turi::flexible_type>,std::vector<turi::flexible_type>>((uint64_t *)v11, v9, v10) & 1) == 0)
      {
        v3 = v28;
        goto LABEL_21;
      }
      v14 = *(void **)(v11 + 48);
    }
    else if ((unint64_t)v14 >= v15)
    {
      goto LABEL_21;
    }
    v23 = *(_OWORD *)v11;
    v24 = *(void **)(v11 + 16);
    *(_QWORD *)v11 = 0;
    *(_QWORD *)(v11 + 8) = 0;
    v25 = *(_OWORD *)(v11 + 24);
    v16 = *(void **)(v11 + 40);
    *(_QWORD *)(v11 + 16) = 0;
    *(_QWORD *)(v11 + 24) = 0;
    *(_QWORD *)(v11 + 32) = 0;
    *(_QWORD *)(v11 + 40) = 0;
    v17 = v13;
    v26 = v16;
    v27 = v14;
    while (1)
    {
      std::vector<turi::flexible_type>::__vdeallocate(v17 - 6);
      *((_OWORD *)v17 - 3) = *(_OWORD *)(v17 - 13);
      *(v17 - 4) = *(v17 - 11);
      *(v17 - 12) = 0;
      *(v17 - 11) = 0;
      *(v17 - 13) = 0;
      std::vector<std::unique_ptr<turi::group_aggregate_value>>::__vdeallocate(v17 - 3);
      v18 = *((__n128 *)v17 - 5);
      *(__n128 *)(v17 - 3) = v18;
      v19 = *(v17 - 7);
      *(v17 - 1) = *(v17 - 8);
      *v17 = v19;
      *(v17 - 9) = 0;
      *(v17 - 8) = 0;
      *(v17 - 10) = 0;
      if (v17 - 13 == v29)
        break;
      v20 = (unint64_t)*(v17 - 14);
      if (v27 == (void *)v20)
      {
        if (!turi::groupby_aggregate_impl::flexible_type_vector_lt<std::vector<turi::flexible_type>,std::vector<turi::flexible_type>>((uint64_t *)&v23, v17 - 20, v18))break;
      }
      else if ((unint64_t)v27 >= v20)
      {
        break;
      }
      v17 -= 7;
    }
    std::vector<turi::flexible_type>::__vdeallocate(v17 - 13);
    *(_OWORD *)(v17 - 13) = v23;
    *(v17 - 11) = v24;
    v24 = 0;
    v23 = 0uLL;
    std::vector<std::unique_ptr<turi::group_aggregate_value>>::__vdeallocate(v17 - 10);
    *((_OWORD *)v17 - 5) = v25;
    v21 = v26;
    v22 = v27;
    v26 = 0;
    v25 = 0uLL;
    *(v17 - 8) = v21;
    *(v17 - 7) = v22;
    ++v12;
    v3 = v28;
    v30 = (void **)&v25;
    std::vector<std::unique_ptr<turi::group_aggregate_value>>::__destroy_vector::operator()[abi:ne180100](&v30);
    v30 = (void **)&v23;
    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v30);
    if (v12 == 8)
      return v11 + 56 == v3;
LABEL_21:
    v9 = (_QWORD *)v11;
    v13 += 7;
    v11 += 56;
  }
  while (v11 != v3);
  return 1;
}

void sub_21816C798(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  turi::groupby_aggregate_impl::groupby_element::~groupby_element(&a9);
  _Unwind_Resume(a1);
}

void std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,turi::groupby_aggregate_impl::groupby_element *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, __n128 a5)
{
  __n128 v9;
  unint64_t v10;
  unint64_t v11;
  __n128 v12;
  unint64_t v13;
  unint64_t v14;
  __n128 v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  __int128 *v19;
  __int128 *v20;
  __int128 *v21;

  v20 = (__int128 *)a2;
  v21 = (__int128 *)a1;
  v18 = a4;
  v19 = (__int128 *)a3;
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,turi::groupby_aggregate_impl::groupby_element *>(a1, a2, (uint64_t *)a3, a5);
  v10 = a4[6];
  v11 = *(_QWORD *)(a3 + 48);
  if (v10 == v11)
  {
    if (!turi::groupby_aggregate_impl::flexible_type_vector_lt<std::vector<turi::flexible_type>,std::vector<turi::flexible_type>>(a4, (_QWORD *)a3, v9))return;
  }
  else if (v10 >= v11)
  {
    return;
  }
  std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<turi::groupby_aggregate_impl::groupby_element *&,turi::groupby_aggregate_impl::groupby_element *&>(&v19, (uint64_t *)&v18);
  v13 = *((_QWORD *)v19 + 6);
  v14 = *(_QWORD *)(a2 + 48);
  if (v13 == v14)
  {
    if (!turi::groupby_aggregate_impl::flexible_type_vector_lt<std::vector<turi::flexible_type>,std::vector<turi::flexible_type>>((uint64_t *)v19, (_QWORD *)a2, v12))return;
  }
  else if (v13 >= v14)
  {
    return;
  }
  std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<turi::groupby_aggregate_impl::groupby_element *&,turi::groupby_aggregate_impl::groupby_element *&>(&v20, (uint64_t *)&v19);
  v16 = *((_QWORD *)v20 + 6);
  v17 = *(_QWORD *)(a1 + 48);
  if (v16 != v17)
  {
    if (v16 >= v17)
      return;
    goto LABEL_13;
  }
  if (turi::groupby_aggregate_impl::flexible_type_vector_lt<std::vector<turi::flexible_type>,std::vector<turi::flexible_type>>((uint64_t *)v20, (_QWORD *)a1, v15))LABEL_13:std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<turi::groupby_aggregate_impl::groupby_element *&,turi::groupby_aggregate_impl::groupby_element *&>(&v21, (uint64_t *)&v20);
}

void std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,turi::groupby_aggregate_impl::groupby_element *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, __n128 a6)
{
  __n128 v11;
  unint64_t v12;
  unint64_t v13;
  __n128 v14;
  unint64_t v15;
  unint64_t v16;
  __n128 v17;
  unint64_t v18;
  unint64_t v19;
  __n128 v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  __int128 *v24;
  __int128 *v25;
  __int128 *v26;
  __int128 *v27;

  v26 = (__int128 *)a2;
  v27 = (__int128 *)a1;
  v24 = (__int128 *)a4;
  v25 = (__int128 *)a3;
  v23 = a5;
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,turi::groupby_aggregate_impl::groupby_element *>(a1, a2, a3, (uint64_t *)a4, a6);
  v12 = a5[6];
  v13 = *(_QWORD *)(a4 + 48);
  if (v12 == v13)
  {
    if (!turi::groupby_aggregate_impl::flexible_type_vector_lt<std::vector<turi::flexible_type>,std::vector<turi::flexible_type>>(a5, (_QWORD *)a4, v11))return;
  }
  else if (v12 >= v13)
  {
    return;
  }
  std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<turi::groupby_aggregate_impl::groupby_element *&,turi::groupby_aggregate_impl::groupby_element *&>(&v24, (uint64_t *)&v23);
  v15 = *((_QWORD *)v24 + 6);
  v16 = *(_QWORD *)(a3 + 48);
  if (v15 == v16)
  {
    if (!turi::groupby_aggregate_impl::flexible_type_vector_lt<std::vector<turi::flexible_type>,std::vector<turi::flexible_type>>((uint64_t *)v24, (_QWORD *)a3, v14))return;
  }
  else if (v15 >= v16)
  {
    return;
  }
  std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<turi::groupby_aggregate_impl::groupby_element *&,turi::groupby_aggregate_impl::groupby_element *&>(&v25, (uint64_t *)&v24);
  v18 = *((_QWORD *)v25 + 6);
  v19 = *(_QWORD *)(a2 + 48);
  if (v18 == v19)
  {
    if (!turi::groupby_aggregate_impl::flexible_type_vector_lt<std::vector<turi::flexible_type>,std::vector<turi::flexible_type>>((uint64_t *)v25, (_QWORD *)a2, v17))return;
  }
  else if (v18 >= v19)
  {
    return;
  }
  std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<turi::groupby_aggregate_impl::groupby_element *&,turi::groupby_aggregate_impl::groupby_element *&>(&v26, (uint64_t *)&v25);
  v21 = *((_QWORD *)v26 + 6);
  v22 = *(_QWORD *)(a1 + 48);
  if (v21 != v22)
  {
    if (v21 >= v22)
      return;
    goto LABEL_17;
  }
  if (turi::groupby_aggregate_impl::flexible_type_vector_lt<std::vector<turi::flexible_type>,std::vector<turi::flexible_type>>((uint64_t *)v26, (_QWORD *)a1, v20))LABEL_17:std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<turi::groupby_aggregate_impl::groupby_element *&,turi::groupby_aggregate_impl::groupby_element *&>(&v27, (uint64_t *)&v26);
}

__int128 *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,turi::groupby_aggregate_impl::groupby_element *,turi::groupby_aggregate_impl::groupby_element *>(__int128 *a1, __int128 *a2, __int128 *a3, uint64_t a4, __n128 a5)
{
  __int128 *v7;
  __int128 *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  __n128 v17;
  unint64_t v18;
  __int128 *v21;
  __int128 *v22;

  v22 = a1;
  if (a1 == a2)
    return a3;
  v7 = a2;
  v8 = a1;
  v9 = (char *)a2 - (char *)a1;
  v10 = ((char *)a2 - (char *)a1) / 56;
  if ((char *)a2 - (char *)a1 >= 57)
  {
    v11 = (unint64_t)(v10 - 2) >> 1;
    v12 = v11 + 1;
    v13 = (_QWORD *)a1 + 7 * v11;
    do
    {
      std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,turi::groupby_aggregate_impl::groupby_element *>((uint64_t)v8, a5, a4, v10, v13);
      v13 -= 7;
      --v12;
    }
    while (v12);
  }
  v21 = v7;
  if (v7 == a3)
  {
    a3 = v7;
    goto LABEL_15;
  }
  v14 = (uint64_t *)v7;
  do
  {
    v15 = v14[6];
    v16 = *((_QWORD *)v22 + 6);
    if (v15 != v16)
    {
      if (v15 >= v16)
        goto LABEL_12;
LABEL_11:
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<turi::groupby_aggregate_impl::groupby_element *&,turi::groupby_aggregate_impl::groupby_element *&>(&v21, (uint64_t *)&v22);
      std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,turi::groupby_aggregate_impl::groupby_element *>((uint64_t)v22, v17, a4, v10, v22);
      goto LABEL_12;
    }
    if (turi::groupby_aggregate_impl::flexible_type_vector_lt<std::vector<turi::flexible_type>,std::vector<turi::flexible_type>>(v14, v22, a5))goto LABEL_11;
LABEL_12:
    v14 = (uint64_t *)v21 + 7;
    v21 = (__int128 *)v14;
  }
  while (v14 != (uint64_t *)a3);
  v8 = v22;
  v9 = (char *)v7 - (char *)v22;
LABEL_15:
  if (v9 >= 57)
  {
    v18 = v9 / 0x38uLL;
    do
    {
      std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,turi::groupby_aggregate_impl::groupby_element *>((uint64_t)v8, (uint64_t)v7, a4, v18);
      v7 = (__int128 *)((char *)v7 - 56);
    }
    while (v18-- > 2);
    return v21;
  }
  return a3;
}

void std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,turi::groupby_aggregate_impl::groupby_element *>(uint64_t a1, __n128 a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  unint64_t v5;
  _QWORD *v6;
  int64_t v8;
  int64_t v10;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  __n128 v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  unint64_t v30;
  void **v31;

  v5 = a4 - 2;
  if (a4 >= 2)
  {
    v6 = a5;
    v8 = v5 >> 1;
    if ((uint64_t)(v5 >> 1) >= 0x6DB6DB6DB6DB6DB7 * (((uint64_t)a5 - a1) >> 3))
    {
      v10 = (0xDB6DB6DB6DB6DB6ELL * (((uint64_t)a5 - a1) >> 3)) | 1;
      v11 = a1 + 56 * v10;
      v12 = 0xDB6DB6DB6DB6DB6ELL * (((uint64_t)a5 - a1) >> 3) + 2;
      if (v12 < a4)
      {
        v13 = *(_QWORD *)(a1 + 56 * v10 + 48);
        v14 = *(_QWORD *)(v11 + 104);
        if (v13 == v14)
        {
          if (!turi::groupby_aggregate_impl::flexible_type_vector_lt<std::vector<turi::flexible_type>,std::vector<turi::flexible_type>>((uint64_t *)(a1 + 56 * v10), (_QWORD *)(v11 + 56), a2))goto LABEL_9;
          goto LABEL_8;
        }
        if (v13 < v14)
        {
LABEL_8:
          v11 += 56;
          v10 = v12;
        }
      }
LABEL_9:
      v15 = *(_QWORD *)(v11 + 48);
      v16 = v6[6];
      if (v15 == v16)
      {
        if ((turi::groupby_aggregate_impl::flexible_type_vector_lt<std::vector<turi::flexible_type>,std::vector<turi::flexible_type>>((uint64_t *)v11, v6, a2) & 1) != 0)return;
        v16 = v6[6];
      }
      else if (v15 < v16)
      {
        return;
      }
      v26 = *(_OWORD *)v6;
      v27 = v6[2];
      *v6 = 0;
      v6[1] = 0;
      v28 = *(_OWORD *)(v6 + 3);
      v17 = v6[5];
      v6[2] = 0;
      v6[3] = 0;
      v6[4] = 0;
      v6[5] = 0;
      v29 = v17;
      v30 = v16;
      while (1)
      {
        v18 = v11;
        std::vector<turi::flexible_type>::__vdeallocate((void **)v6);
        *(_OWORD *)v6 = *(_OWORD *)v11;
        v6[2] = *(_QWORD *)(v11 + 16);
        *(_QWORD *)v11 = 0;
        *(_QWORD *)(v11 + 8) = 0;
        *(_QWORD *)(v11 + 16) = 0;
        std::vector<std::unique_ptr<turi::group_aggregate_value>>::__vdeallocate(v6 + 3);
        v19 = (_QWORD *)(v11 + 24);
        v20 = *(__n128 *)(v11 + 24);
        *(__n128 *)(v6 + 3) = v20;
        v6[5] = *(_QWORD *)(v11 + 40);
        *(_QWORD *)(v11 + 24) = 0;
        *(_QWORD *)(v11 + 32) = 0;
        *(_QWORD *)(v11 + 40) = 0;
        v6[6] = *(_QWORD *)(v11 + 48);
        if (v8 < v10)
        {
LABEL_25:
          std::vector<turi::flexible_type>::__vdeallocate((void **)v18);
          *(_OWORD *)v18 = v26;
          *(_QWORD *)(v18 + 16) = v27;
          v26 = 0uLL;
          v27 = 0;
          std::vector<std::unique_ptr<turi::group_aggregate_value>>::__vdeallocate(v19);
          *(_OWORD *)(v18 + 24) = v28;
          *(_QWORD *)(v18 + 40) = v29;
          v28 = 0uLL;
          v29 = 0;
          *(_QWORD *)(v18 + 48) = v30;
          v31 = (void **)&v28;
          std::vector<std::unique_ptr<turi::group_aggregate_value>>::__destroy_vector::operator()[abi:ne180100](&v31);
          v31 = (void **)&v26;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v31);
          return;
        }
        v21 = (2 * v10) | 1;
        v11 = a1 + 56 * v21;
        v22 = 2 * v10 + 2;
        if (v22 < a4)
        {
          v23 = *(_QWORD *)(a1 + 56 * v21 + 48);
          v24 = *(_QWORD *)(v11 + 104);
          if (v23 == v24)
          {
            if (!turi::groupby_aggregate_impl::flexible_type_vector_lt<std::vector<turi::flexible_type>,std::vector<turi::flexible_type>>((uint64_t *)(a1 + 56 * v21), (_QWORD *)(v11 + 56), v20))goto LABEL_21;
LABEL_20:
            v11 += 56;
            v21 = v22;
            goto LABEL_21;
          }
          if (v23 < v24)
            goto LABEL_20;
        }
LABEL_21:
        v25 = *(_QWORD *)(v11 + 48);
        if (v25 == v30)
        {
          v6 = (_QWORD *)v18;
          v10 = v21;
          if (turi::groupby_aggregate_impl::flexible_type_vector_lt<std::vector<turi::flexible_type>,std::vector<turi::flexible_type>>((uint64_t *)v11, &v26, v20))goto LABEL_25;
        }
        else
        {
          v6 = (_QWORD *)v18;
          v10 = v21;
          if (v25 < v30)
            goto LABEL_25;
        }
      }
    }
  }
}

void sub_21816CDBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  turi::groupby_aggregate_impl::groupby_element::~groupby_element((void **)va);
  _Unwind_Resume(a1);
}

void std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,turi::groupby_aggregate_impl::groupby_element *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __n128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 *v11;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  __n128 *v20;

  if (a4 >= 2)
  {
    v15 = *(_OWORD *)a1;
    v16 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    v17 = *(__n128 *)(a1 + 24);
    v7 = v17;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    v8 = *(_QWORD *)(a1 + 40);
    v9 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    v18 = v8;
    v19 = v9;
    v10 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,turi::groupby_aggregate_impl::groupby_element *>(a1, v7, a3, a4);
    std::vector<turi::flexible_type>::__vdeallocate((void **)v10);
    if (v10 == a2 - 56)
    {
      *(_OWORD *)v10 = v15;
      *(_QWORD *)(v10 + 16) = v16;
      v15 = 0uLL;
      v16 = 0;
      std::vector<std::unique_ptr<turi::group_aggregate_value>>::__vdeallocate((_QWORD *)(v10 + 24));
      *(__n128 *)(v10 + 24) = v17;
      *(_QWORD *)(v10 + 40) = v18;
      v17 = 0uLL;
      v18 = 0;
      *(_QWORD *)(v10 + 48) = v19;
    }
    else
    {
      *(_OWORD *)v10 = *(_OWORD *)(a2 - 56);
      *(_QWORD *)(v10 + 16) = *(_QWORD *)(a2 - 40);
      *(_QWORD *)(a2 - 56) = 0;
      *(_QWORD *)(a2 - 48) = 0;
      *(_QWORD *)(a2 - 40) = 0;
      std::vector<std::unique_ptr<turi::group_aggregate_value>>::__vdeallocate((_QWORD *)(v10 + 24));
      v11 = (__n128 *)(a2 - 32);
      *(_OWORD *)(v10 + 24) = *(_OWORD *)(a2 - 32);
      *(_QWORD *)(v10 + 40) = *(_QWORD *)(a2 - 16);
      v11->n128_u64[0] = 0;
      v11->n128_u64[1] = 0;
      v11[1].n128_u64[0] = 0;
      *(_QWORD *)(v10 + 48) = *(_QWORD *)(a2 - 8);
      std::vector<turi::flexible_type>::__vdeallocate((void **)(a2 - 56));
      *(_OWORD *)(a2 - 56) = v15;
      *(_QWORD *)(a2 - 40) = v16;
      v16 = 0;
      v15 = 0uLL;
      std::vector<std::unique_ptr<turi::group_aggregate_value>>::__vdeallocate((_QWORD *)(a2 - 32));
      v12 = v17;
      *v11 = v17;
      v13 = v18;
      v14 = v19;
      v18 = 0;
      v17 = 0uLL;
      *(_QWORD *)(a2 - 16) = v13;
      *(_QWORD *)(a2 - 8) = v14;
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,turi::groupby_aggregate_impl::groupby_element *>(a1, v10 + 56, v12, a3, 0x6DB6DB6DB6DB6DB7 * ((v10 + 56 - a1) >> 3));
    }
    v20 = &v17;
    std::vector<std::unique_ptr<turi::group_aggregate_value>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
    v20 = (__n128 *)&v15;
    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
  }
}

void sub_21816CF84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  turi::groupby_aggregate_impl::groupby_element::~groupby_element(&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,turi::groupby_aggregate_impl::groupby_element *>(uint64_t a1, __n128 a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v6 = 0;
  v7 = a4 - 2;
  if (a4 < 2)
    v7 = a4 - 1;
  v8 = v7 >> 1;
  do
  {
    v9 = a1;
    v10 = v6 + 1;
    a1 += 56 * (v6 + 1);
    v11 = 2 * v6;
    v6 = (2 * v6) | 1;
    v12 = v11 + 2;
    if (v11 + 2 >= a4)
      goto LABEL_10;
    v13 = *(_QWORD *)(v9 + 56 * v10 + 48);
    v14 = *(_QWORD *)(a1 + 104);
    if (v13 != v14)
    {
      if (v13 >= v14)
        goto LABEL_10;
LABEL_9:
      a1 += 56;
      v6 = v12;
      goto LABEL_10;
    }
    if (turi::groupby_aggregate_impl::flexible_type_vector_lt<std::vector<turi::flexible_type>,std::vector<turi::flexible_type>>((uint64_t *)a1, (_QWORD *)(a1 + 56), a2))goto LABEL_9;
LABEL_10:
    std::vector<turi::flexible_type>::__vdeallocate((void **)v9);
    *(_OWORD *)v9 = *(_OWORD *)a1;
    *(_QWORD *)(v9 + 16) = *(_QWORD *)(a1 + 16);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    std::vector<std::unique_ptr<turi::group_aggregate_value>>::__vdeallocate((_QWORD *)(v9 + 24));
    a2 = *(__n128 *)(a1 + 24);
    *(__n128 *)(v9 + 24) = a2;
    v15 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(v9 + 40) = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)(v9 + 48) = v15;
  }
  while (v6 <= v8);
  return a1;
}

void std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,turi::groupby_aggregate_impl::groupby_element *>(uint64_t a1, uint64_t a2, __n128 a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  __n128 v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  unint64_t v24;
  void **v25;

  v5 = a5 - 2;
  if (a5 >= 2)
  {
    v8 = v5 >> 1;
    v9 = a1 + 56 * (v5 >> 1);
    v10 = a2 - 56;
    v11 = *(_QWORD *)(v9 + 48);
    v12 = *(_QWORD *)(a2 - 8);
    if (v11 == v12)
    {
      if (!turi::groupby_aggregate_impl::flexible_type_vector_lt<std::vector<turi::flexible_type>,std::vector<turi::flexible_type>>((uint64_t *)v9, (_QWORD *)(a2 - 56), a3))return;
      v12 = *(_QWORD *)(a2 - 8);
    }
    else if (v11 >= v12)
    {
      return;
    }
    v20 = *(_OWORD *)(a2 - 56);
    v21 = *(_QWORD *)(a2 - 40);
    *(_QWORD *)(v10 + 8) = 0;
    *(_QWORD *)(v10 + 16) = 0;
    *(_QWORD *)v10 = 0;
    v22 = *(_OWORD *)(a2 - 32);
    v13 = *(_QWORD *)(a2 - 16);
    *(_QWORD *)(a2 - 32) = 0;
    *(_QWORD *)(a2 - 24) = 0;
    *(_QWORD *)(a2 - 16) = 0;
    v23 = v13;
    v24 = v12;
    while (1)
    {
      v14 = v9;
      std::vector<turi::flexible_type>::__vdeallocate((void **)v10);
      *(_OWORD *)v10 = *(_OWORD *)v9;
      *(_QWORD *)(v10 + 16) = *(_QWORD *)(v9 + 16);
      *(_QWORD *)v9 = 0;
      *(_QWORD *)(v9 + 8) = 0;
      *(_QWORD *)(v9 + 16) = 0;
      std::vector<std::unique_ptr<turi::group_aggregate_value>>::__vdeallocate((_QWORD *)(v10 + 24));
      v15 = (_QWORD *)(v9 + 24);
      v16 = *(__n128 *)(v9 + 24);
      *(__n128 *)(v10 + 24) = v16;
      *(_QWORD *)(v10 + 40) = *(_QWORD *)(v9 + 40);
      *(_QWORD *)(v9 + 24) = 0;
      *(_QWORD *)(v9 + 32) = 0;
      *(_QWORD *)(v9 + 40) = 0;
      *(_QWORD *)(v10 + 48) = *(_QWORD *)(v9 + 48);
      if (!v8)
        break;
      v8 = (v8 - 1) >> 1;
      v9 = a1 + 56 * v8;
      v17 = *(_QWORD *)(v9 + 48);
      if (v17 == v24)
      {
        v10 = v14;
        if ((turi::groupby_aggregate_impl::flexible_type_vector_lt<std::vector<turi::flexible_type>,std::vector<turi::flexible_type>>((uint64_t *)(a1 + 56 * v8), &v20, v16) & 1) == 0)break;
      }
      else
      {
        v10 = v14;
        if (v17 >= v24)
          break;
      }
    }
    std::vector<turi::flexible_type>::__vdeallocate((void **)v14);
    *(_OWORD *)v14 = v20;
    *(_QWORD *)(v14 + 16) = v21;
    v21 = 0;
    v20 = 0uLL;
    std::vector<std::unique_ptr<turi::group_aggregate_value>>::__vdeallocate(v15);
    *(_OWORD *)(v14 + 24) = v22;
    v18 = v23;
    v19 = v24;
    v23 = 0;
    v22 = 0uLL;
    *(_QWORD *)(v14 + 40) = v18;
    *(_QWORD *)(v14 + 48) = v19;
    v25 = (void **)&v22;
    std::vector<std::unique_ptr<turi::group_aggregate_value>>::__destroy_vector::operator()[abi:ne180100](&v25);
    v25 = (void **)&v20;
    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v25);
  }
}

void sub_21816D244(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  turi::groupby_aggregate_impl::groupby_element::~groupby_element(&a9);
  _Unwind_Resume(a1);
}

uint64_t std::vector<turi::groupby_aggregate_impl::groupby_element>::insert(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  _QWORD *v18;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;

  v4 = (uint64_t)a2;
  v7 = *a1;
  v6 = a1[1];
  v8 = ((uint64_t)a2 - *a1) >> 3;
  v9 = 0x6DB6DB6DB6DB6DB7 * v8;
  v12 = a1[2];
  v10 = (uint64_t)(a1 + 2);
  v11 = v12;
  if (v6 >= v12)
  {
    v14 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v6 - v7) >> 3) + 1;
    if (v14 > 0x492492492492492)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v15 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v11 - v7) >> 3);
    if (2 * v15 > v14)
      v14 = 2 * v15;
    if (v15 >= 0x249249249249249)
      v16 = 0x492492492492492;
    else
      v16 = v14;
    v24 = v10;
    if (v16)
      v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::toolkit_class_specification>>(v10, v16);
    else
      v17 = 0;
    v20 = v17;
    v21 = &v17[56 * v9];
    v22 = v21;
    v23 = &v17[56 * v16];
    std::__split_buffer<turi::groupby_aggregate_impl::groupby_element>::push_back(&v20, a3);
    v4 = std::vector<turi::groupby_aggregate_impl::groupby_element>::__swap_out_circular_buffer(a1, &v20, v4);
    std::__split_buffer<turi::groupby_aggregate_impl::groupby_element>::~__split_buffer((uint64_t)&v20);
  }
  else if (a2 == (_QWORD *)v6)
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    *(_OWORD *)a2 = *(_OWORD *)a3;
    a2[2] = *(_QWORD *)(a3 + 16);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    v18 = (_QWORD *)(v7 + 8 * v8);
    v18[3] = 0;
    v18[4] = 0;
    v18[5] = 0;
    *(_OWORD *)(v18 + 3) = *(_OWORD *)(a3 + 24);
    v18[5] = *(_QWORD *)(a3 + 40);
    *(_QWORD *)(a3 + 32) = 0;
    *(_QWORD *)(a3 + 40) = 0;
    *(_QWORD *)(a3 + 24) = 0;
    v18[6] = *(_QWORD *)(a3 + 48);
    a1[1] = (uint64_t)(a2 + 7);
  }
  else
  {
    std::vector<turi::groupby_aggregate_impl::groupby_element>::__move_range((uint64_t)a1, (uint64_t)a2, v6, (uint64_t)(a2 + 7));
    std::vector<turi::flexible_type>::__vdeallocate((void **)v4);
    *(_OWORD *)v4 = *(_OWORD *)a3;
    *(_QWORD *)(v4 + 16) = *(_QWORD *)(a3 + 16);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    v13 = (_QWORD *)(v7 + 56 * v9);
    std::vector<std::unique_ptr<turi::group_aggregate_value>>::__vdeallocate(v13 + 3);
    *(_OWORD *)(v13 + 3) = *(_OWORD *)(a3 + 24);
    v13[5] = *(_QWORD *)(a3 + 40);
    *(_QWORD *)(a3 + 24) = 0;
    *(_QWORD *)(a3 + 32) = 0;
    *(_QWORD *)(a3 + 40) = 0;
    v13[6] = *(_QWORD *)(a3 + 48);
  }
  return v4;
}

void sub_21816D44C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<turi::groupby_aggregate_impl::groupby_element>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<turi::groupby_aggregate_impl::groupby_element>::__move_range(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  char v12;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = a2 + v6 - a4;
  v8 = (_QWORD *)v6;
  if (v7 < a3)
  {
    v9 = v7;
    v8 = *(_QWORD **)(a1 + 8);
    do
    {
      *v8 = 0;
      v8[1] = 0;
      v8[2] = 0;
      *(_OWORD *)v8 = *(_OWORD *)v9;
      v8[2] = *(_QWORD *)(v9 + 16);
      *(_QWORD *)v9 = 0;
      *(_QWORD *)(v9 + 8) = 0;
      *(_QWORD *)(v9 + 16) = 0;
      v8[3] = 0;
      v8[4] = 0;
      v8[5] = 0;
      *(_OWORD *)(v8 + 3) = *(_OWORD *)(v9 + 24);
      v10 = *(_QWORD *)(v9 + 48);
      v8[5] = *(_QWORD *)(v9 + 40);
      *(_QWORD *)(v9 + 24) = 0;
      *(_QWORD *)(v9 + 32) = 0;
      *(_QWORD *)(v9 + 40) = 0;
      v8[6] = v10;
      v8 += 7;
      v9 += 56;
    }
    while (v9 < a3);
  }
  *(_QWORD *)(a1 + 8) = v8;
  return std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<turi::groupby_aggregate_impl::groupby_element *,turi::groupby_aggregate_impl::groupby_element *,turi::groupby_aggregate_impl::groupby_element *>((uint64_t)&v12, a2, v7, v6);
}

__n128 std::__split_buffer<turi::groupby_aggregate_impl::groupby_element>::push_back(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __n128 result;
  __int128 v18;
  __int128 v19;
  uint64_t v20;

  v4 = (_QWORD *)a1[2];
  if (v4 == (_QWORD *)a1[3])
  {
    v5 = a1[1];
    if (v5 <= *a1)
    {
      if (v4 == (_QWORD *)*a1)
        v10 = 1;
      else
        v10 = 0xDB6DB6DB6DB6DB6ELL * (((uint64_t)v4 - *a1) >> 3);
      v11 = v10 >> 2;
      v12 = a1[4];
      v20 = a1[4];
      *(_QWORD *)&v18 = std::__allocate_at_least[abi:ne180100]<std::allocator<turi::toolkit_class_specification>>(v12, v10);
      *((_QWORD *)&v18 + 1) = v18 + 56 * v11;
      *(_QWORD *)&v19 = *((_QWORD *)&v18 + 1);
      *((_QWORD *)&v19 + 1) = v18 + 56 * v13;
      std::__split_buffer<turi::groupby_aggregate_impl::groupby_element>::__construct_at_end_with_size<std::move_iterator<turi::groupby_aggregate_impl::groupby_element*>>((uint64_t)&v18, a1[1], 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a1[2] - a1[1]) >> 3));
      v14 = v19;
      v15 = *(_OWORD *)a1;
      v16 = *((_OWORD *)a1 + 1);
      *(_OWORD *)a1 = v18;
      *((_OWORD *)a1 + 1) = v14;
      v18 = v15;
      v19 = v16;
      std::__split_buffer<turi::groupby_aggregate_impl::groupby_element>::~__split_buffer((uint64_t)&v18);
      v4 = (_QWORD *)a1[2];
    }
    else
    {
      v6 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v5 - *a1) >> 3);
      if (v6 >= -1)
        v7 = v6 + 1;
      else
        v7 = v6 + 2;
      v8 = -56 * (v7 >> 1);
      std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<turi::groupby_aggregate_impl::groupby_element *,turi::groupby_aggregate_impl::groupby_element *,turi::groupby_aggregate_impl::groupby_element *>((uint64_t)&v18, v5, (uint64_t)v4, v5 - 56 * (v7 >> 1));
      v4 = v9;
      a1[1] += v8;
      a1[2] = v9;
    }
  }
  *v4 = 0;
  v4[1] = 0;
  v4[2] = 0;
  *(_OWORD *)v4 = *(_OWORD *)a2;
  v4[2] = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v4[3] = 0;
  v4[4] = 0;
  v4[5] = 0;
  result = *(__n128 *)(a2 + 24);
  *(__n128 *)(v4 + 3) = result;
  v4[5] = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  v4[6] = *(_QWORD *)(a2 + 48);
  a1[2] += 56;
  return result;
}

void sub_21816D674(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__split_buffer<turi::groupby_aggregate_impl::groupby_element>::~__split_buffer((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::vector<turi::groupby_aggregate_impl::groupby_element>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = a2[1];
  v7 = (uint64_t)(a1 + 2);
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::groupby_aggregate_impl::groupby_element>,std::reverse_iterator<turi::groupby_aggregate_impl::groupby_element*>,std::reverse_iterator<turi::groupby_aggregate_impl::groupby_element*>,std::reverse_iterator<turi::groupby_aggregate_impl::groupby_element*>>((uint64_t)(a1 + 2), a3, a3, *a1, *a1, v6, v6);
  a2[1] = v8;
  a2[2] = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::groupby_aggregate_impl::groupby_element>,turi::groupby_aggregate_impl::groupby_element*,turi::groupby_aggregate_impl::groupby_element*,turi::groupby_aggregate_impl::groupby_element*>(v7, a3, a1[1], (_QWORD *)a2[2]);
  v9 = *a1;
  *a1 = a2[1];
  a2[1] = v9;
  v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

uint64_t std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<turi::groupby_aggregate_impl::groupby_element *,turi::groupby_aggregate_impl::groupby_element *,turi::groupby_aggregate_impl::groupby_element *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a3 != a2)
  {
    v7 = 0;
    do
    {
      v8 = a3 + v7;
      v9 = a4 + v7;
      std::vector<turi::flexible_type>::__vdeallocate((void **)(a4 + v7 - 56));
      *(_OWORD *)(v9 - 56) = *(_OWORD *)(a3 + v7 - 56);
      *(_QWORD *)(v9 - 40) = *(_QWORD *)(a3 + v7 - 40);
      *(_QWORD *)(v8 - 56) = 0;
      *(_QWORD *)(v8 - 48) = 0;
      *(_QWORD *)(v8 - 40) = 0;
      std::vector<std::unique_ptr<turi::group_aggregate_value>>::__vdeallocate((_QWORD *)(a4 + v7 - 32));
      *(_OWORD *)(v9 - 32) = *(_OWORD *)(a3 + v7 - 32);
      v10 = *(_QWORD *)(a3 + v7 - 8);
      *(_QWORD *)(v9 - 16) = *(_QWORD *)(a3 + v7 - 16);
      *(_QWORD *)(v8 - 32) = 0;
      *(_QWORD *)(v8 - 24) = 0;
      *(_QWORD *)(v8 - 16) = 0;
      *(_QWORD *)(v9 - 8) = v10;
      v7 -= 56;
    }
    while (a3 + v7 != a2);
  }
  return a3;
}

uint64_t std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<turi::groupby_aggregate_impl::groupby_element *,turi::groupby_aggregate_impl::groupby_element *,turi::groupby_aggregate_impl::groupby_element *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = a2;
  if (a2 == a3)
    return a2;
  v6 = a3;
  do
  {
    std::vector<turi::flexible_type>::__vdeallocate((void **)a4);
    *(_OWORD *)a4 = *(_OWORD *)v5;
    *(_QWORD *)(a4 + 16) = *(_QWORD *)(v5 + 16);
    *(_QWORD *)v5 = 0;
    *(_QWORD *)(v5 + 8) = 0;
    *(_QWORD *)(v5 + 16) = 0;
    std::vector<std::unique_ptr<turi::group_aggregate_value>>::__vdeallocate((_QWORD *)(a4 + 24));
    *(_OWORD *)(a4 + 24) = *(_OWORD *)(v5 + 24);
    v7 = *(_QWORD *)(v5 + 48);
    *(_QWORD *)(a4 + 40) = *(_QWORD *)(v5 + 40);
    *(_QWORD *)(v5 + 24) = 0;
    *(_QWORD *)(v5 + 32) = 0;
    *(_QWORD *)(v5 + 40) = 0;
    *(_QWORD *)(a4 + 48) = v7;
    a4 += 56;
    v5 += 56;
  }
  while (v5 != v6);
  return v6;
}

uint64_t std::__split_buffer<turi::groupby_aggregate_impl::groupby_element>::__construct_at_end_with_size<std::move_iterator<turi::groupby_aggregate_impl::groupby_element*>>(uint64_t result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  v3 = *(_QWORD **)(result + 16);
  if (a3)
  {
    v4 = &v3[7 * a3];
    do
    {
      *v3 = 0;
      v3[1] = 0;
      v3[2] = 0;
      *(_OWORD *)v3 = *(_OWORD *)a2;
      v3[2] = *(_QWORD *)(a2 + 16);
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      v3[3] = 0;
      v3[4] = 0;
      v3[5] = 0;
      *(_OWORD *)(v3 + 3) = *(_OWORD *)(a2 + 24);
      v5 = *(_QWORD *)(a2 + 48);
      v3[5] = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a2 + 24) = 0;
      *(_QWORD *)(a2 + 32) = 0;
      *(_QWORD *)(a2 + 40) = 0;
      v3[6] = v5;
      v3 += 7;
      a2 += 56;
    }
    while (v3 != v4);
    v3 = v4;
  }
  *(_QWORD *)(result + 16) = v3;
  return result;
}

_QWORD *std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::groupby_aggregate_impl::groupby_element>,turi::groupby_aggregate_impl::groupby_element*,turi::groupby_aggregate_impl::groupby_element*,turi::groupby_aggregate_impl::groupby_element*>(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  _QWORD v6[3];
  char v7;
  _QWORD *v8;
  _QWORD *v9;

  v4 = a4;
  v9 = a4;
  v8 = a4;
  v6[0] = a1;
  v6[1] = &v8;
  v6[2] = &v9;
  if (a2 != a3)
  {
    do
    {
      *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      *(_OWORD *)v4 = *(_OWORD *)a2;
      v4[2] = *(_QWORD *)(a2 + 16);
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      v4[3] = 0;
      v4[4] = 0;
      v4[5] = 0;
      *(_OWORD *)(v4 + 3) = *(_OWORD *)(a2 + 24);
      v4[5] = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a2 + 24) = 0;
      *(_QWORD *)(a2 + 32) = 0;
      *(_QWORD *)(a2 + 40) = 0;
      v4[6] = *(_QWORD *)(a2 + 48);
      v4 += 7;
      a2 += 56;
    }
    while (a2 != a3);
    v9 = v4;
  }
  v7 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::groupby_aggregate_impl::groupby_element>,turi::groupby_aggregate_impl::groupby_element*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v6);
  return v4;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::groupby_aggregate_impl::groupby_element>,turi::groupby_aggregate_impl::groupby_element*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::__allocator_destroy[abi:ne180100]<std::allocator<turi::groupby_aggregate_impl::groupby_element>,std::reverse_iterator<turi::groupby_aggregate_impl::groupby_element*>,std::reverse_iterator<turi::groupby_aggregate_impl::groupby_element*>>(*(_QWORD *)a1, **(_QWORD **)(a1 + 16), **(void ****)(a1 + 16), **(_QWORD **)(a1 + 8), **(void ****)(a1 + 8));
  return a1;
}

void std::__allocator_destroy[abi:ne180100]<std::allocator<turi::groupby_aggregate_impl::groupby_element>,std::reverse_iterator<turi::groupby_aggregate_impl::groupby_element*>,std::reverse_iterator<turi::groupby_aggregate_impl::groupby_element*>>(uint64_t a1, uint64_t a2, void **a3, uint64_t a4, void **a5)
{
  void **v5;
  void **v6;
  void **v8;
  void **v9[5];

  if (a3 != a5)
  {
    v9[3] = v5;
    v9[4] = v6;
    do
    {
      v8 = a3 - 7;
      v9[0] = a3 - 4;
      std::vector<std::unique_ptr<turi::group_aggregate_value>>::__destroy_vector::operator()[abi:ne180100](v9);
      v9[0] = v8;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v9);
      a3 = v8;
    }
    while (v8 != a5);
  }
}

uint64_t turi::groupby_aggregate_impl::group_aggregate_container::merge_local_buffer_set(void)::$_0::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int *v4;
  file_logger *v5;
  file_logger *started;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  const std::locale::facet *v14;
  uint64_t v15;
  char **v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t result;
  _QWORD *exception;
  _QWORD v25[4];
  char v26;
  uint64_t v27;
  _QWORD v28[2];
  void *v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  std::locale v33;
  _QWORD v34[3];
  _QWORD *v35;
  _BYTE v36[24];
  _BYTE *v37;
  _BYTE v38[24];
  _BYTE *v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(**(_QWORD **)a1 + 8 * a2);
  turi::sarray<std::string>::get_reader(**(_QWORD **)(a1 + 8), &v32);
  (*(void (**)(_QWORD *__return_ptr, _QWORD, uint64_t))(***(_QWORD ***)(a1 + 16) + 32))(v34, **(_QWORD **)(a1 + 16), v3);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v32 + 32))(v28, v32, v3);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v32 + 40))(v25, v32, v3);
  v4 = (int *)global_logger();
  if (v4[169] <= 1)
  {
    if (cppipc::must_cancel((cppipc *)v4))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 1, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/groupby_aggregate_impl.cpp", "operator()", 483, 1);
    v7 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v7 && *((_BYTE *)v7 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7 + 2, (uint64_t)"segment_id: ", 12);
    v8 = file_logger::operator<<<unsigned long>((uint64_t)started);
    v9 = pthread_getspecific(*(_QWORD *)(v8 + 592));
    if (v9 && *((_BYTE *)v9 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9 + 2, (uint64_t)", segment_length: ", 18);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v32 + 24))(v32, v3);
    v10 = file_logger::operator<<<unsigned long>(v8);
    v11 = pthread_getspecific(*(_QWORD *)(v10 + 592));
    if (v11 && *((_BYTE *)v11 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11 + 2, (uint64_t)", buffer: ", 10);
    v12 = file_logger::operator<<<unsigned long>(v10);
    v13 = pthread_getspecific(*(_QWORD *)(v12 + 592));
    if (v13)
    {
      if (*((_BYTE *)v13 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v13 + *(_QWORD *)(v13[2] - 24) + 16));
        v14 = std::locale::use_facet(&v33, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v14->__vftable[2].~facet_0)(v14, 10);
        std::locale::~locale(&v33);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush((file_logger *)v12);
        if (*(_DWORD *)(v12 + 600) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  while (v28[0] != v25[0] || v28[1] != v25[1] || v31 != v27)
  {
    if (!v35)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(_QWORD *, void **))(*v35 + 48))(v35, &v29);
    turi::sarray_iterator<std::string>::operator++((uint64_t)v28);
  }
  v15 = **(_QWORD **)(a1 + 24) + 24 * v3;
  v16 = (char **)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 24 * v3);
  std::vector<unsigned long>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned long *>,std::__wrap_iter<unsigned long *>>(v15, *(_QWORD *)(v15 + 8), *v16, v16[1], (v16[1] - *v16) >> 3);
  if (v26 < 0)
    operator delete((void *)v25[2]);
  if (v30 < 0)
    operator delete(v29);
  v17 = v39;
  if (v39 == v38)
  {
    v18 = 4;
    v17 = v38;
  }
  else
  {
    if (!v39)
      goto LABEL_29;
    v18 = 5;
  }
  (*(void (**)(void))(*v17 + 8 * v18))();
LABEL_29:
  v19 = v37;
  if (v37 == v36)
  {
    v20 = 4;
    v19 = v36;
  }
  else
  {
    if (!v37)
      goto LABEL_34;
    v20 = 5;
  }
  (*(void (**)(void))(*v19 + 8 * v20))();
LABEL_34:
  v21 = v35;
  if (v35 == v34)
  {
    v22 = 4;
    v21 = v34;
  }
  else
  {
    if (!v35)
      goto LABEL_39;
    v22 = 5;
  }
  (*(void (**)(void))(*v21 + 8 * v22))();
LABEL_39:
  result = v32;
  v32 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_21816DE1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,std::locale a31,uint64_t a32)
{
  std::locale::~locale(&a31);
  if (a17 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>::~sframe_function_output_iterator(&a32);
  if (a30)
    (*(void (**)(uint64_t))(*(_QWORD *)a30 + 8))(a30);
  _Unwind_Resume(a1);
}

uint64_t turi::sarray_iterator<std::string>::operator++(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  void **v4;
  __int128 v5;
  uint64_t v6;

  v2 = *(uint64_t **)a1;
  if (*(_QWORD *)(*(_QWORD *)a1 + 88) >= *(_QWORD *)(*(_QWORD *)a1 + 72))
  {
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a1 + 48);
    std::vector<std::string>::__clear[abi:ne180100](v2);
    v6 = v2[7];
    v2[8] = v6;
    v2[11] = v6;
    v2[6] = 0;
  }
  else
  {
    v3 = turi::sarray_reader_buffer<std::string>::next(*(uint64_t **)a1);
    v4 = (void **)(a1 + 16);
    if (*(char *)(a1 + 39) < 0)
      operator delete(*v4);
    v5 = *(_OWORD *)v3;
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(v3 + 16);
    *(_OWORD *)v4 = v5;
    *(_BYTE *)(v3 + 23) = 0;
    *(_BYTE *)v3 = 0;
    ++*(_QWORD *)(a1 + 40);
  }
  return a1;
}

char *std::vector<unsigned long>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned long *>,std::__wrap_iter<unsigned long *>>(uint64_t a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  char *v5;
  char *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  void *__p;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;

  v5 = (char *)__dst;
  if (a5 < 1)
    return v5;
  v7 = __src;
  v11 = *(_QWORD *)(a1 + 16);
  v9 = a1 + 16;
  v10 = v11;
  v12 = *(_QWORD *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 3)
  {
    v13 = *(void **)a1;
    v14 = a5 + ((uint64_t)(v12 - *(_QWORD *)a1) >> 3);
    if (v14 >> 61)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v15 = (__dst - (uint64_t)v13) >> 3;
    v16 = v10 - (_QWORD)v13;
    if (v16 >> 2 > v14)
      v14 = v16 >> 2;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
      v17 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v17 = v14;
    v37 = v9;
    if (v17)
      v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v9, v17);
    else
      v18 = 0;
    v28 = &v18[8 * v15];
    __p = v18;
    v34 = v28;
    v36 = &v18[8 * v17];
    v29 = 8 * a5;
    v30 = &v28[8 * a5];
    do
    {
      v31 = *(_QWORD *)v7;
      v7 += 8;
      *(_QWORD *)v28 = v31;
      v28 += 8;
      v29 -= 8;
    }
    while (v29);
    v35 = v30;
    v5 = std::vector<unsigned long>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v5);
    if (v35 != v34)
      v35 += (v34 - v35 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (__p)
      operator delete(__p);
    return v5;
  }
  v19 = v12 - __dst;
  v20 = (uint64_t)(v12 - __dst) >> 3;
  if (v20 >= a5)
  {
    v21 = &__src[8 * a5];
    v23 = *(char **)(v9 - 8);
LABEL_17:
    v24 = &v5[8 * a5];
    v25 = &v23[-8 * a5];
    v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      v26 = v23;
      do
      {
        v27 = *(_QWORD *)v25;
        v25 += 8;
        *(_QWORD *)v26 = v27;
        v26 += 8;
      }
      while ((unint64_t)v25 < v12);
    }
    *(_QWORD *)(a1 + 8) = v26;
    if (v23 != v24)
      memmove(&v23[-8 * ((v23 - v24) >> 3)], v5, v23 - v24);
    if (v21 != v7)
      memmove(v5, v7, v21 - v7);
    return v5;
  }
  v21 = &__src[8 * v20];
  v22 = a4 - v21;
  if (a4 != v21)
    memmove(*(void **)(v9 - 8), &__src[8 * v20], a4 - v21);
  v23 = (char *)(v12 + v22);
  *(_QWORD *)(a1 + 8) = v12 + v22;
  if (v19 >= 1)
    goto LABEL_17;
  return v5;
}

void sub_21816E120(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<turi::groupby_aggregate_impl::group_aggregate_container::merge_local_buffer_set(void)::$_0>(unsigned long,unsigned long,turi::groupby_aggregate_impl::group_aggregate_container::merge_local_buffer_set(void)::$_0 const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v4;
  __int128 v5;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == ((unint64_t)"ZN4turi12parallel_forIZNS_22groupby_aggregate_impl25group_aggregate_container22m"
                                        "erge_local_buffer_setEvE3$_0EEvmmRKT_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)
        || (result = strcmp((const char *)result, (const char *)((unint64_t)"ZN4turi12parallel_forIZNS_22groupby_aggregate_impl25group_aggregate_container22merge_local_buffer_setEvE3$_0EEvmmRKT_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)), !(_DWORD)result))
      {
        *(_QWORD *)a2 = v4;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
    }
  }
  else
  {
    v5 = *(_OWORD *)result;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

uint64_t boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<turi::groupby_aggregate_impl::group_aggregate_container::merge_local_buffer_set(void)::$_0>(unsigned long,unsigned long,turi::groupby_aggregate_impl::group_aggregate_container::merge_local_buffer_set(void)::$_0 const&)::{lambda(void)#1},void>::invoke(uint64_t result)
{
  unint64_t v1;
  uint64_t *v2;

  v1 = *(_QWORD *)(result + 8);
  if (v1 < *(_QWORD *)(result + 16))
  {
    v2 = (uint64_t *)result;
    do
      result = turi::groupby_aggregate_impl::group_aggregate_container::merge_local_buffer_set(void)::$_0::operator()(*v2, v1++);
    while (v1 < v2[2]);
  }
  return result;
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<turi::groupby_aggregate_impl::group_aggregate_container::group_and_write(turi::sframe &)::$_0>(unsigned long,unsigned long,turi::groupby_aggregate_impl::group_aggregate_container::group_and_write(turi::sframe &)::$_0 const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v4;
  __int128 v5;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == ((unint64_t)"ZN4turi12parallel_forIZNS_22groupby_aggregate_impl25group_aggregate_container15g"
                                        "roup_and_writeERNS_6sframeEE3$_0EEvmmRKT_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)
        || (result = strcmp((const char *)result, (const char *)((unint64_t)"ZN4turi12parallel_forIZNS_22groupby_aggregate_impl25group_aggregate_container15group_and_writeERNS_6sframeEE3$_0EEvmmRKT_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)), !(_DWORD)result))
      {
        *(_QWORD *)a2 = v4;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
    }
  }
  else
  {
    v5 = *(_OWORD *)result;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

void boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<turi::groupby_aggregate_impl::group_aggregate_container::group_and_write(turi::sframe &)::$_0>(unsigned long,unsigned long,turi::groupby_aggregate_impl::group_aggregate_container::group_and_write(turi::sframe &)::$_0 const&)::{lambda(void)#1},void>::invoke(uint64_t a1)
{
  unint64_t i;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD v11[2];

  for (i = *(_QWORD *)(a1 + 8); i < *(_QWORD *)(a1 + 16); ++i)
  {
    v3 = **(_QWORD ***)a1;
    v4 = *(_QWORD *)(*(_QWORD *)a1 + 8);
    v5 = *(_QWORD **)(*(_QWORD *)a1 + 16);
    v6 = (std::__shared_weak_count *)v5[1];
    v11[0] = *v5;
    v11[1] = v6;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
    turi::groupby_aggregate_impl::group_aggregate_container::group_and_write_segment(v3, v4, v11, i);
    if (v6)
    {
      v9 = (unint64_t *)&v6->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_21816E388(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;

  if (v1)
    boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<turi::groupby_aggregate_impl::group_aggregate_container::group_and_write(turi::sframe &)::$_0>(unsigned long,unsigned long,turi::groupby_aggregate_impl::group_aggregate_container::group_and_write(turi::sframe &)::$_0 const&)::{lambda(void)#1},void>::invoke(v1);
  _Unwind_Resume(exception_object);
}

void std::vector<std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, (void **)*v2);
    operator delete(**a1);
  }
}

void std::vector<std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>>::__base_destruct_at_end[abi:ne180100](uint64_t a1, void **a2)
{
  void **v4;
  void **v5;
  void **v6;

  v4 = *(void ***)(a1 + 8);
  if (v4 != a2)
  {
    do
    {
      v5 = v4 - 8;
      v6 = v4 - 5;
      std::vector<std::unique_ptr<turi::group_aggregate_value>>::__destroy_vector::operator()[abi:ne180100](&v6);
      v6 = v5;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v6);
      v4 = v5;
    }
    while (v5 != a2);
  }
  *(_QWORD *)(a1 + 8) = a2;
}

uint64_t std::vector<std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>>::__push_back_slow_path<std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[5];

  v3 = *a1;
  v4 = (a1[1] - *a1) >> 6;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 58)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2] - v3;
  if (v8 >> 5 > v5)
    v5 = v8 >> 5;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFC0)
    v9 = 0x3FFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  v15[4] = a1 + 2;
  v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::mutex>>(v7, v9);
  v11 = &v10[64 * v4];
  v15[0] = v10;
  v15[1] = v11;
  v15[3] = &v10[64 * v12];
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  *(_QWORD *)v11 = 0;
  *(_OWORD *)v11 = *(_OWORD *)a2;
  *((_QWORD *)v11 + 2) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *((_QWORD *)v11 + 4) = 0;
  *((_QWORD *)v11 + 5) = 0;
  *((_QWORD *)v11 + 3) = 0;
  *(_OWORD *)(v11 + 24) = *(_OWORD *)(a2 + 24);
  *((_QWORD *)v11 + 5) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *((_OWORD *)v11 + 3) = *(_OWORD *)(a2 + 48);
  v15[2] = v11 + 64;
  std::vector<std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>>::__swap_out_circular_buffer(a1, v15);
  v13 = a1[1];
  std::__split_buffer<std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>>::~__split_buffer((uint64_t)v15);
  return v13;
}

void sub_21816E548(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>>,std::reverse_iterator<std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>*>,std::reverse_iterator<std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>*>,std::reverse_iterator<std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>>,std::reverse_iterator<std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>*>,std::reverse_iterator<std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>*>,std::reverse_iterator<std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 64) = 0;
      *(_QWORD *)(v7 - 56) = 0;
      *(_QWORD *)(v7 - 48) = 0;
      v8 = *(_OWORD *)(a3 - 64);
      a3 -= 64;
      *(_OWORD *)(v7 - 64) = v8;
      *(_QWORD *)(v7 - 48) = *(_QWORD *)(a3 + 16);
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)(v7 - 40) = 0;
      *(_QWORD *)(v7 - 32) = 0;
      *(_QWORD *)(v7 - 24) = 0;
      *(_OWORD *)(v7 - 40) = *(_OWORD *)(a3 + 24);
      *(_QWORD *)(v7 - 24) = *(_QWORD *)(a3 + 40);
      *(_QWORD *)(a3 + 32) = 0;
      *(_QWORD *)(a3 + 40) = 0;
      *(_QWORD *)(a3 + 24) = 0;
      *(_OWORD *)(v7 - 16) = *(_OWORD *)(a3 + 48);
      v7 = *((_QWORD *)&v14 + 1) - 64;
      *((_QWORD *)&v14 + 1) -= 64;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>>,std::reverse_iterator<std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>>,std::reverse_iterator<std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>>,std::reverse_iterator<std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>>,std::reverse_iterator<std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v8[8];
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[8];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v1 = (uint64_t *)a1[2];
  v3 = *v1;
  v2 = v1[1];
  v14 = v3;
  v15 = v2;
  v16 = v3;
  v17 = v2;
  v4 = *a1;
  v5 = (uint64_t *)a1[1];
  v7 = *v5;
  v6 = v5[1];
  v9 = v7;
  v10 = v6;
  v11 = v7;
  v12 = v6;
  std::__allocator_destroy[abi:ne180100]<std::allocator<std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>>,std::reverse_iterator<std::reverse_iterator<std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>*>>,std::reverse_iterator<std::reverse_iterator<std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>*>>>(v4, (uint64_t)v13, (uint64_t)v8);
}

void std::__allocator_destroy[abi:ne180100]<std::allocator<std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>>,std::reverse_iterator<std::reverse_iterator<std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>*>>,std::reverse_iterator<std::reverse_iterator<std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>*>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void **i;
  void **v6;

  for (i = *(void ***)(a2 + 32); i != *(void ***)(a3 + 32); *(_QWORD *)(a2 + 32) = i)
  {
    v6 = i + 3;
    std::vector<std::unique_ptr<turi::group_aggregate_value>>::__destroy_vector::operator()[abi:ne180100](&v6);
    v6 = i;
    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v6);
    i = (void **)(*(_QWORD *)(a2 + 32) + 64);
  }
}

uint64_t std::__split_buffer<std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>>::__destruct_at_end[abi:ne180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t i;
  void **v5;
  void **v6;

  for (i = *(_QWORD *)(a1 + 16); i != a2; i = *(_QWORD *)(a1 + 16))
  {
    v5 = (void **)(i - 64);
    *(_QWORD *)(a1 + 16) = i - 64;
    v6 = (void **)(i - 40);
    std::vector<std::unique_ptr<turi::group_aggregate_value>>::__destroy_vector::operator()[abi:ne180100](&v6);
    v6 = v5;
    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v6);
  }
}

void std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>> &,std::__wrap_iter<std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __n128 a5)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  void **v23;

  v5 = a3 - 2;
  if (a3 >= 2)
  {
    v6 = a4;
    v8 = v5 >> 1;
    if ((uint64_t)(v5 >> 1) >= (a4 - a1) >> 6)
    {
      v11 = (a4 - a1) >> 5;
      v12 = v11 | 1;
      v13 = (uint64_t *)(a1 + ((v11 | 1) << 6));
      v14 = v11 + 2;
      if (v11 + 2 < a3
        && std::greater<std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>>::operator()[abi:ne180100](a5, a2, (uint64_t *)(a1 + ((v11 | 1) << 6)), v13 + 8))
      {
        v13 += 8;
        v12 = v14;
      }
      if (!std::greater<std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>>::operator()[abi:ne180100](a5, a2, v13, (uint64_t *)v6))
      {
        v18 = *(_OWORD *)v6;
        v19 = *(_QWORD *)(v6 + 16);
        *(_QWORD *)(v6 + 8) = 0;
        *(_QWORD *)(v6 + 16) = 0;
        *(_QWORD *)v6 = 0;
        v20 = *(_OWORD *)(v6 + 24);
        v21 = *(_QWORD *)(v6 + 40);
        *(_QWORD *)(v6 + 24) = 0;
        *(_QWORD *)(v6 + 32) = 0;
        *(_QWORD *)(v6 + 40) = 0;
        v22 = *(_OWORD *)(v6 + 48);
        do
        {
          v15 = v6;
          v6 = (uint64_t)v13;
          std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>::operator=[abi:ne180100](v15, (uint64_t)v13);
          if (v8 < v12)
            break;
          v17 = (2 * v12) | 1;
          v13 = (uint64_t *)(a1 + (v17 << 6));
          v12 = 2 * v12 + 2;
          if (v12 >= a3)
          {
            v12 = v17;
          }
          else if (std::greater<std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>>::operator()[abi:ne180100](v16, a2, (uint64_t *)(a1 + (v17 << 6)), v13 + 8))
          {
            v13 += 8;
          }
          else
          {
            v12 = v17;
          }
        }
        while (!std::greater<std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>>::operator()[abi:ne180100](v16, a2, v13, (uint64_t *)&v18));
        std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>::operator=[abi:ne180100](v6, (uint64_t)&v18);
        v23 = (void **)&v20;
        std::vector<std::unique_ptr<turi::group_aggregate_value>>::__destroy_vector::operator()[abi:ne180100](&v23);
        v23 = (void **)&v18;
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v23);
      }
    }
  }
}

void sub_21816E9E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  turi::groupby_aggregate_impl::groupby_element::~groupby_element(&a9);
  _Unwind_Resume(a1);
}

BOOL std::greater<std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>>::operator()[abi:ne180100](__n128 a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  unint64_t v6;
  unint64_t v7;

  v6 = a4[6];
  v7 = a3[6];
  if (v6 == v7)
  {
    if ((turi::groupby_aggregate_impl::flexible_type_vector_lt<std::vector<turi::flexible_type>,std::vector<turi::flexible_type>>(a4, a3, a1) & 1) == 0)
    {
      v7 = a3[6];
      v6 = a4[6];
      goto LABEL_6;
    }
    return 1;
  }
  if (v6 < v7)
    return 1;
LABEL_6:
  if (v7 == v6)
  {
    if ((turi::groupby_aggregate_impl::flexible_type_vector_lt<std::vector<turi::flexible_type>,std::vector<turi::flexible_type>>(a3, a4, a1) & 1) == 0)return a4[7] < (unint64_t)a3[7];
  }
  else if (v7 >= v6)
  {
    return a4[7] < (unint64_t)a3[7];
  }
  return 0;
}

uint64_t std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>::operator=[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  std::vector<turi::flexible_type>::__vdeallocate((void **)a1);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  std::vector<std::unique_ptr<turi::group_aggregate_value>>::__vdeallocate((_QWORD *)(a1 + 24));
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a1 + 48) = v4;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  return a1;
}

void std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>>,std::__wrap_iter<std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  __n128 v15;
  void **v16;

  if (a4 >= 2)
  {
    v11 = *(_OWORD *)a1;
    v12 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    v13 = *(_OWORD *)(a1 + 24);
    v14 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    v15 = *(__n128 *)(a1 + 48);
    v7 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>> &,std::__wrap_iter<std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>*>>(a1, a3, a4, v15);
    v8 = v7;
    v9 = a2 - 64;
    if (v9 == v7)
    {
      std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>::operator=[abi:ne180100](v7, (uint64_t)&v11);
    }
    else
    {
      std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>::operator=[abi:ne180100](v7, v9);
      std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>::operator=[abi:ne180100](v9, (uint64_t)&v11);
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>> &,std::__wrap_iter<std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>*>>(a1, v8 + 64, a3, (v8 + 64 - a1) >> 6, v10);
    }
    v16 = (void **)&v13;
    std::vector<std::unique_ptr<turi::group_aggregate_value>>::__destroy_vector::operator()[abi:ne180100](&v16);
    v16 = (void **)&v11;
    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v16);
  }
}

void sub_21816EBE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  turi::groupby_aggregate_impl::groupby_element::~groupby_element(&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>> &,std::__wrap_iter<std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>*>>(uint64_t a1, uint64_t a2, uint64_t a3, __n128 a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v7 = 0;
  v8 = a3 - 2;
  if (a3 < 2)
    v8 = a3 - 1;
  v9 = v8 >> 1;
  do
  {
    v10 = a1 + (v7 << 6) + 64;
    v11 = (2 * v7) | 1;
    v12 = 2 * v7 + 2;
    if (v12 < a3
      && std::greater<std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>>::operator()[abi:ne180100](a4, a2, (uint64_t *)(a1 + (v7 << 6) + 64), (uint64_t *)(a1 + (v7 << 6) + 128)))
    {
      v10 += 64;
      v11 = v12;
    }
    std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>::operator=[abi:ne180100](a1, v10);
    a1 = v10;
    v7 = v11;
  }
  while (v11 <= v9);
  return v10;
}

void std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>> &,std::__wrap_iter<std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __n128 a5)
{
  unint64_t v5;
  unint64_t v9;
  uint64_t *v10;
  _QWORD *v11;
  uint64_t v12;
  __n128 v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  void **v19;

  v5 = a4 - 2;
  if (a4 >= 2)
  {
    v9 = v5 >> 1;
    v10 = (uint64_t *)(a1 + (v5 >> 1 << 6));
    v11 = (_QWORD *)(a2 - 64);
    if (std::greater<std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>>::operator()[abi:ne180100](a5, a3, v10, (uint64_t *)(a2 - 64)))
    {
      v14 = *(_OWORD *)(a2 - 64);
      v15 = *(_QWORD *)(a2 - 48);
      *v11 = 0;
      v11[1] = 0;
      v11[2] = 0;
      v16 = *(_OWORD *)(a2 - 40);
      v17 = *(_QWORD *)(a2 - 24);
      *(_QWORD *)(a2 - 40) = 0;
      *(_QWORD *)(a2 - 32) = 0;
      *(_QWORD *)(a2 - 24) = 0;
      v18 = *(_OWORD *)(a2 - 16);
      do
      {
        v12 = (uint64_t)v10;
        std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>::operator=[abi:ne180100]((uint64_t)v11, (uint64_t)v10);
        if (!v9)
          break;
        v9 = (v9 - 1) >> 1;
        v10 = (uint64_t *)(a1 + (v9 << 6));
        v11 = (_QWORD *)v12;
      }
      while (std::greater<std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>>::operator()[abi:ne180100](v13, a3, v10, (uint64_t *)&v14));
      std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>::operator=[abi:ne180100](v12, (uint64_t)&v14);
      v19 = (void **)&v16;
      std::vector<std::unique_ptr<turi::group_aggregate_value>>::__destroy_vector::operator()[abi:ne180100](&v19);
      v19 = (void **)&v14;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v19);
    }
  }
}

void sub_21816EDB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  turi::groupby_aggregate_impl::groupby_element::~groupby_element(&a9);
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_22_0()
{
  int v0;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, "Mutex create error %d", v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

void __cxx_global_var_init_23_0()
{
  int v0;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<std::string>::m_buffer_pool, 0);
    assert_msg(v0 == 0, "Mutex create error %d", v0);
    qword_254FD3E60 = 0;
    unk_254FD3E50 = 0u;
    unk_254FD3E40 = 0u;
    unk_254FD3E30 = 0u;
    unk_254FD3E20 = 0u;
    qword_254FD3E18 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<std::string>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_groupby_aggregate_impl_cpp()
{
  uint64_t i;
  const void *v2[3];
  _QWORD v3[4];

  v3[3] = *MEMORY[0x24BDAC8D0];
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  std::string::basic_string[abi:ne180100]<0>(v2, "argmax");
  std::string::basic_string[abi:ne180100]<0>(v3, "argmin");
  std::set<std::string>::set[abi:ne180100]((uint64_t)&turi::registered_arg_functions, v2, 2);
  for (i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v3[i + 2]) < 0)
      operator delete((void *)v2[i + 3]);
  }
  return __cxa_atexit((void (*)(void *))std::set<std::string>::~set[abi:ne180100], &turi::registered_arg_functions, &dword_217E69000);
}

void sub_21816F024(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  uint64_t v17;

  v17 = 0;
  while (1)
  {
    if (*(char *)(v15 + v17 + 47) < 0)
      operator delete(*(void **)(v15 + v17 + 24));
    v17 -= 24;
    if (v17 == -48)
      _Unwind_Resume(exception_object);
  }
}

void turi::join(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, turi::sframe *a7@<X8>)
{
  unsigned __int8 **v9;
  unsigned __int8 **v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  unint64_t *v33;
  unint64_t v34;
  int v35;
  BOOL v36;
  unsigned __int8 *v40;
  unsigned __int8 **v41;
  char *v42;
  int v43;
  BOOL v44;
  char *v45;
  uint64_t v46;
  int v47;
  uint64_t v50;
  uint64_t v54;
  std::locale v59;
  void *v60;
  char *v61;
  char *v62;
  void *__p;
  char *v64;
  char *v65;
  char *v66[110];

  v66[108] = *(char **)MEMORY[0x24BDAC8D0];
  __p = 0;
  v64 = 0;
  v65 = 0;
  v60 = 0;
  v61 = 0;
  v62 = 0;
  v10 = (unsigned __int8 **)(a4 + 1);
  v9 = (unsigned __int8 **)*a4;
  if ((_QWORD *)*a4 != a4 + 1)
  {
    do
    {
      v11 = std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), v9 + 4);
      if (v11 == *(_QWORD *)(a1 + 48))
      {
        v66[0] = (char *)(v9 + 4);
        turi::sframe::column_index(std::string const&)const::{lambda(void)#1}::operator()();
      }
      v12 = 0xAAAAAAAAAAAAAAABLL * ((v11 - *(_QWORD *)(a1 + 40)) >> 3);
      v13 = v64;
      if (v64 >= v65)
      {
        v15 = (char *)__p;
        v16 = (v64 - (_BYTE *)__p) >> 3;
        v17 = v16 + 1;
        if ((unint64_t)(v16 + 1) >> 61)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v18 = v65 - (_BYTE *)__p;
        if ((v65 - (_BYTE *)__p) >> 2 > v17)
          v17 = v18 >> 2;
        if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
          v19 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v19 = v17;
        if (v19)
        {
          v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v65, v19);
          v15 = (char *)__p;
          v13 = v64;
        }
        else
        {
          v20 = 0;
        }
        v21 = (unint64_t *)&v20[8 * v16];
        *v21 = v12;
        v14 = (char *)(v21 + 1);
        while (v13 != v15)
        {
          v22 = *((_QWORD *)v13 - 1);
          v13 -= 8;
          *--v21 = v22;
        }
        __p = v21;
        v64 = v14;
        v65 = &v20[8 * v19];
        if (v15)
          operator delete(v15);
      }
      else
      {
        *(_QWORD *)v64 = v12;
        v14 = v13 + 8;
      }
      v64 = v14;
      v23 = std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(*(_QWORD *)(a2 + 40), *(_QWORD *)(a2 + 48), v9 + 7);
      if (v23 == *(_QWORD *)(a2 + 48))
      {
        v66[0] = (char *)(v9 + 7);
        turi::sframe::column_index(std::string const&)const::{lambda(void)#1}::operator()();
      }
      v24 = 0xAAAAAAAAAAAAAAABLL * ((v23 - *(_QWORD *)(a2 + 40)) >> 3);
      v25 = v61;
      if (v61 >= v62)
      {
        v27 = (char *)v60;
        v28 = (v61 - (_BYTE *)v60) >> 3;
        v29 = v28 + 1;
        if ((unint64_t)(v28 + 1) >> 61)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v30 = v62 - (_BYTE *)v60;
        if ((v62 - (_BYTE *)v60) >> 2 > v29)
          v29 = v30 >> 2;
        if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF8)
          v31 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v31 = v29;
        if (v31)
        {
          v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v62, v31);
          v27 = (char *)v60;
          v25 = v61;
        }
        else
        {
          v32 = 0;
        }
        v33 = (unint64_t *)&v32[8 * v28];
        *v33 = v24;
        v26 = (char *)(v33 + 1);
        while (v25 != v27)
        {
          v34 = *((_QWORD *)v25 - 1);
          v25 -= 8;
          *--v33 = v34;
        }
        v60 = v33;
        v61 = v26;
        v62 = &v32[8 * v31];
        if (v27)
          operator delete(v27);
      }
      else
      {
        *(_QWORD *)v61 = v24;
        v26 = v25 + 8;
      }
      v61 = v26;
      v35 = turi::sframe::column_type((turi::sframe *)a1, *((_QWORD *)v64 - 1));
      v36 = v35 == turi::sframe::column_type((turi::sframe *)a2, *((_QWORD *)v26 - 1))
         || *(_BYTE *)(a1 + 288) == 0;
      if (!v36 && *(_QWORD *)(a1 + 32) != 0 && *(_BYTE *)(a2 + 288) != 0 && *(_QWORD *)(a2 + 32) != 0)
      {
        v66[0] = (char *)(v9 + 4);
        turi::join(turi::sframe &,turi::sframe &,std::string,std::map<std::string,std::string> const&,std::map<std::string,std::string> const&,unsigned long)::$_0::operator()();
      }
      v40 = v9[1];
      if (v40)
      {
        do
        {
          v41 = (unsigned __int8 **)v40;
          v40 = *(unsigned __int8 **)v40;
        }
        while (v40);
      }
      else
      {
        do
        {
          v41 = (unsigned __int8 **)v9[2];
          v36 = *v41 == (unsigned __int8 *)v9;
          v9 = v41;
        }
        while (!v36);
      }
      v9 = v41;
    }
    while (v41 != v10);
  }
  MEMORY[0x219A19828](&v59);
  v42 = (char *)a3;
  v43 = *(char *)(a3 + 23);
  v44 = v43 < 0;
  v45 = *(char **)a3;
  if (v43 >= 0)
    v45 = (char *)a3;
  v46 = *(unsigned __int8 *)(a3 + 23);
  if (v44)
    v46 = *(_QWORD *)(a3 + 8);
  v66[0] = v45;
  v66[1] = &v45[v46];
  boost::algorithm::detail::transform_range<boost::iterator_range<std::__wrap_iter<char *>>,boost::algorithm::detail::to_lowerF<char>>(v66, &v59);
  std::locale::~locale(&v59);
  if (*(char *)(a3 + 23) < 0)
  {
    v50 = *(_QWORD *)(a3 + 8);
    if (v50 == 4)
    {
      if (**(_DWORD **)a3 == 1952867692)
      {
LABEL_95:
        v54 = 1;
        goto LABEL_98;
      }
      v50 = *(_QWORD *)(a3 + 8);
    }
    else if (v50 == 5 && **(_DWORD **)a3 == 1702131055 && *(_BYTE *)(*(_QWORD *)a3 + 4) == 114)
    {
LABEL_97:
      v54 = 3;
      goto LABEL_98;
    }
    if (v50 != 5)
      goto LABEL_107;
    if (**(_DWORD **)a3 != 1751607666 || *(_BYTE *)(*(_QWORD *)a3 + 4) != 116)
    {
      if (*(_QWORD *)(a3 + 8) != 5)
        goto LABEL_107;
      v42 = *(char **)a3;
      goto LABEL_88;
    }
LABEL_96:
    v54 = 2;
    goto LABEL_98;
  }
  v47 = *(unsigned __int8 *)(a3 + 23);
  if (v47 == 4)
  {
    if (*(_DWORD *)a3 != 1952867692)
      goto LABEL_107;
    goto LABEL_95;
  }
  if (v47 != 5)
    goto LABEL_107;
  if (*(_DWORD *)a3 == 1702131055 && *(_BYTE *)(a3 + 4) == 114)
    goto LABEL_97;
  if (*(_DWORD *)a3 == 1751607666 && *(_BYTE *)(a3 + 4) == 116)
    goto LABEL_96;
LABEL_88:
  if (*(_DWORD *)v42 != 1701736041 || v42[4] != 114)
LABEL_107:
    turi::join(turi::sframe &,turi::sframe &,std::string,std::map<std::string,std::string> const&,std::map<std::string,std::string> const&,unsigned long)::$_1::operator()();
  v54 = 0;
LABEL_98:
  turi::join_impl::hash_join_executor::hash_join_executor(v66, a1, a2, &__p, &v60, v54, a5, a6);
  turi::join_impl::hash_join_executor::grace_hash_join((std::string::size_type *)v66, a7);
  turi::join_impl::hash_join_executor::~hash_join_executor((turi::join_impl::hash_join_executor *)v66);
  if (v60)
  {
    v61 = (char *)v60;
    operator delete(v60);
  }
  if (__p)
  {
    v64 = (char *)__p;
    operator delete(__p);
  }
}

void sub_21816F584(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::locale a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23)
{
  turi::join_impl::hash_join_executor::~hash_join_executor((turi::join_impl::hash_join_executor *)&a23);
  if (__p)
    operator delete(__p);
  if (a20)
    operator delete(a20);
  _Unwind_Resume(a1);
}

void sub_21816F780(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void turi::join_impl::hash_join_executor::~hash_join_executor(turi::join_impl::hash_join_executor *this)
{
  void *v2;
  void *v3;
  void *v4;
  void **v5;

  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 840, *((_QWORD **)this + 106));
  std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::~__hash_table((uint64_t)this + 792);
  v2 = (void *)*((_QWORD *)this + 95);
  if (v2)
  {
    *((_QWORD *)this + 96) = v2;
    operator delete(v2);
  }
  v5 = (void **)((char *)this + 736);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v5);
  std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::~__hash_table((uint64_t)this + 696);
  std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::~__hash_table((uint64_t)this + 656);
  v3 = (void *)*((_QWORD *)this + 77);
  if (v3)
  {
    *((_QWORD *)this + 78) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 74);
  if (v4)
  {
    *((_QWORD *)this + 75) = v4;
    operator delete(v4);
  }
  turi::sframe::~sframe((turi::join_impl::hash_join_executor *)((char *)this + 296));
  turi::sframe::~sframe(this);
}

char **boost::algorithm::detail::transform_range<boost::iterator_range<std::__wrap_iter<char *>>,boost::algorithm::detail::to_lowerF<char>>(char **result, std::locale *this)
{
  char *v2;
  char *v3;
  std::locale::id *v5;
  uint64_t v6;
  const std::locale::facet *v7;

  v2 = *result;
  v3 = result[1];
  if (*result != v3)
  {
    v5 = (std::locale::id *)MEMORY[0x24BEDB350];
    do
    {
      v6 = *v2;
      v7 = std::locale::use_facet(this, v5);
      result = (char **)((uint64_t (*)(const std::locale::facet *, uint64_t))v7->__vftable[1].__on_zero_shared)(v7, v6);
      *v2++ = (char)result;
    }
    while (v2 != v3);
  }
  return result;
}

__n128 OUTLINED_FUNCTION_0_9(__n128 *a1)
{
  __n128 result;

  result = *a1;
  a1->n128_u64[1] = 0;
  a1[1].n128_u64[0] = 0;
  a1->n128_u64[0] = 0;
  return result;
}

void __cxx_global_var_init_7_4()
{
  int v0;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, "Mutex create error %d", v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_join_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void turi::join_impl::hash_join_row_t::~hash_join_row_t(void **this)
{
  void **v1;

  v1 = this;
  std::vector<std::vector<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

uint64_t turi::join_impl::join_hash_table::add_row(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _OWORD *v11;
  uint64_t v12;
  _OWORD *v13;
  uint64_t result;
  uint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  void **v18;
  void ***v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  char v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28[2];

  v28[1] = *(uint64_t **)MEMORY[0x24BDAC8D0];
  v4 = (uint64_t *)(a1 + 40);
  v24 = (uint64_t *)turi::join_impl::compute_hash_from_row((_QWORD *)a2, (uint64_t **)(a1 + 40));
  v5 = std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::find<unsigned long>((_QWORD *)a1, (unint64_t *)&v24);
  v6 = v5;
  if (!v5)
  {
    v21 = 0uLL;
    v22 = 0;
    v25 = 0;
    v26 = 0;
    v27 = 0;
    std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&v25, *(uint64_t **)a2, *(uint64_t **)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4);
    std::vector<std::vector<turi::flexible_type>>::__assign_with_size[abi:ne180100]<std::vector<turi::flexible_type> const*,std::vector<turi::flexible_type> const*>((uint64_t)&v21, &v25, v28, 1uLL);
    v18 = (void **)&v25;
    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v18);
    v23 = 0;
    v18 = (void **)&v18;
    v19 = &v18;
    v20 = 0;
    v13 = operator new(0x30uLL);
    v13[1] = v21;
    *((_QWORD *)v13 + 4) = v22;
    *((_QWORD *)&v21 + 1) = 0;
    v22 = 0;
    *((_BYTE *)v13 + 40) = 0;
    *(_QWORD *)v13 = &v18;
    *((_QWORD *)v13 + 1) = &v18;
    v18 = (void **)v13;
    v19 = (void ***)v13;
    v20 = 1;
    *(_QWORD *)&v21 = 0;
    v25 = v24;
    std::list<turi::join_impl::hash_join_row_t>::list(&v26, (uint64_t)&v18);
    std::__hash_table<std::__hash_value_type<unsigned long,std::list<turi::join_impl::hash_join_row_t>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::list<turi::join_impl::hash_join_row_t>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::list<turi::join_impl::hash_join_row_t>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::list<turi::join_impl::hash_join_row_t>>>>::__emplace_unique_key_args<unsigned long,std::pair<unsigned long,std::list<turi::join_impl::hash_join_row_t>>>(a1, (unint64_t *)&v25, &v25);
    std::__list_imp<turi::join_impl::hash_join_row_t>::clear((char *)&v26);
    std::__list_imp<turi::join_impl::hash_join_row_t>::clear((char *)&v18);
    goto LABEL_9;
  }
  *(_QWORD *)&v21 = v5[5];
  if (!(_QWORD)v21)
  {
    v25 = (uint64_t *)&v21;
    turi::join_impl::join_hash_table::add_row(std::vector<turi::flexible_type> const&)::$_0::operator()();
  }
  v7 = v5 + 3;
  v8 = (_QWORD *)v5[4];
  if (v8 == v5 + 3)
  {
LABEL_7:
    v21 = 0uLL;
    v22 = 0;
    v25 = 0;
    v26 = 0;
    v27 = 0;
    std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&v25, *(uint64_t **)a2, *(uint64_t **)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4);
    std::vector<std::vector<turi::flexible_type>>::__assign_with_size[abi:ne180100]<std::vector<turi::flexible_type> const*,std::vector<turi::flexible_type> const*>((uint64_t)&v21, &v25, v28, 1uLL);
    v18 = (void **)&v25;
    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v18);
    v23 = 0;
    v11 = operator new(0x30uLL);
    v11[1] = v21;
    *((_QWORD *)v11 + 4) = v22;
    v22 = 0;
    v21 = 0uLL;
    *((_BYTE *)v11 + 40) = 0;
    *((_QWORD *)v11 + 1) = v7;
    v12 = v6[3];
    *(_QWORD *)v11 = v12;
    *(_QWORD *)(v12 + 8) = v11;
    v6[3] = v11;
    ++v6[5];
LABEL_9:
    v25 = (uint64_t *)&v21;
    std::vector<std::vector<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
    return 1;
  }
  while (1)
  {
    v9 = (_QWORD *)v8[2];
    v10 = v8[3] - (_QWORD)v9;
    *(_QWORD *)&v21 = 0xAAAAAAAAAAAAAAABLL * (v10 >> 3);
    if (!v10)
    {
      v25 = (uint64_t *)&v21;
      turi::join_impl::join_hash_table::add_row(std::vector<turi::flexible_type> const&)::$_1::operator()();
    }
    if (turi::join_impl::join_hash_table::join_values_equal(a1, v9, (_QWORD *)a2, v4))
      break;
    v8 = (_QWORD *)v8[1];
    if (v8 == v7)
      goto LABEL_7;
  }
  v15 = v8 + 2;
  v16 = v8[3];
  if (v16 >= v8[4])
  {
    v17 = std::vector<std::vector<turi::flexible_type>>::__push_back_slow_path<std::vector<turi::flexible_type> const&>(v15, (uint64_t **)a2);
  }
  else
  {
    std::vector<std::vector<turi::flexible_type>>::__construct_one_at_end[abi:ne180100]<std::vector<turi::flexible_type> const&>((uint64_t)v15, (uint64_t **)a2);
    v17 = v16 + 24;
  }
  result = 0;
  v8[3] = v17;
  return result;
}

void sub_21816FD2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18)
{
  char *v18;

  std::__list_imp<turi::join_impl::hash_join_row_t>::clear(v18);
  std::__list_imp<turi::join_impl::hash_join_row_t>::clear((char *)&a10);
  a18 = (void **)&a13;
  std::vector<std::vector<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&a18);
  _Unwind_Resume(a1);
}

uint64_t turi::join_impl::compute_hash_from_row(_QWORD *a1, uint64_t **a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *a2;
  v3 = a2[1];
  if (*a2 == v3)
    return 0;
  v5 = 0;
  do
  {
    v6 = *v2++;
    v7 = turi::flexible_type::apply_visitor<turi::flexible_type_impl::city_hash_visitor>((unsigned __int8 *)(*a1 + 16 * v6));
    v8 = 5
       * __ROR8__((0x4CF5AD432745937FLL * ((0x2284A7AA00000000 * v5) | ((0x87C37B91114253D5 * v5) >> 31))) ^ 0x73A3916AE45D01E5, 27);
    v5 = (5
        * (__ROR8__((0x87C37B91114253D5* ((0x93A2C9BF80000000 * v7) | ((unint64_t)(0x4CF5AD432745937FLL * v7) >> 33))) ^ 0x73A3916AE45D01E5, 31)+ v8+ 0x4231D716C8ADF0A2)+ 944331445) ^ (v8 + 0x4231D716C8ADF0A2);
  }
  while (v2 != v3);
  return v5;
}

void turi::join_impl::join_hash_table::add_row(std::vector<turi::flexible_type> const&)::$_0::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/join_impl.cpp", 104);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"find_ret->second.size()", 23);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)">", 1);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"0", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)">", 1);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/join_impl.cpp", "operator()", 35, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::join_impl::join_hash_table::add_row(std::vector<turi::flexible_type> const&)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_218170034(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::join_impl::join_hash_table::add_row(std::vector<turi::flexible_type> const&)::$_1::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/join_impl.cpp", 104);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"it->rows.size()", 15);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)">", 1);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"0", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)">", 1);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/join_impl.cpp", "operator()", 39, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::join_impl::join_hash_table::add_row(std::vector<turi::flexible_type> const&)::$_1::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_218170244(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

BOOL turi::join_impl::join_hash_table::join_values_equal(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  unint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  double v14;
  uint64_t v15;
  unsigned int v16;
  double v17;
  int v18;
  size_t v19;
  size_t v20;
  unsigned int v21;
  double v22;
  double *v23;
  double *v24;
  unint64_t v25;
  double *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  double v31;
  double v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  double v38;
  double v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  double v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  double v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  double v76;
  double v77;
  double v78;
  uint64_t v79;
  unsigned __int8 *v80;
  unsigned __int8 *v81;
  uint64_t v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t *v92;

  v6 = *a4;
  v7 = a4[1] - *a4;
  if (!v7)
    return a2[1] == *a2 && a3[1] == *a3;
  v9 = (uint64_t)(*(_QWORD *)(a1 + 48) - *(_QWORD *)(a1 + 40)) >> 3;
  v89 = v7 >> 3;
  v90 = v9;
  if (v9 != v7 >> 3)
  {
    v91 = &v90;
    v92 = &v89;
    turi::join_impl::join_hash_table::join_values_equal(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::vector<unsigned long> const&)::$_0::operator()();
  }
  v11 = 0;
  while (2)
  {
    v12 = *a3 + 16 * *(_QWORD *)(v6 + 8 * v11);
    v13 = (unsigned __int8 *)(*a2 + 16 * *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v11));
    switch(*(_BYTE *)(v12 + 12))
    {
      case 0:
        switch(v13[12])
        {
          case 0u:
            if (*(_QWORD *)v13 != *(_QWORD *)v12)
              return 0;
            goto LABEL_104;
          case 1u:
            v14 = *(double *)v13;
            v15 = *(_QWORD *)v12;
            goto LABEL_73;
          case 2u:
          case 3u:
          case 4u:
          case 5u:
          case 7u:
          case 8u:
          case 9u:
            return 0;
          case 6u:
            if (*(_QWORD *)v12 != (uint64_t)(*(_QWORD *)v13 << 8) >> 8 || *((_DWORD *)v13 + 2))
              return 0;
            goto LABEL_104;
          default:
            turi::apply_binary_op_ff();
        }
      case 1:
        switch(v13[12])
        {
          case 0u:
            v14 = *(double *)v12;
            v15 = *(_QWORD *)v13;
LABEL_73:
            v76 = (double)v15;
            goto LABEL_74;
          case 1u:
            v14 = *(double *)v13;
            v76 = *(double *)v12;
LABEL_74:
            if (v14 != v76)
              return 0;
            goto LABEL_104;
          case 2u:
          case 3u:
          case 4u:
          case 5u:
          case 7u:
          case 8u:
          case 9u:
            return 0;
          case 6u:
            v77 = vabdd_f64((double)*((int *)v13 + 2) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)v13 << 8) >> 8), *(double *)v12);
            goto LABEL_82;
          default:
            turi::apply_binary_op_ff();
        }
      case 2:
        v16 = v13[12];
        if (v16 != 2)
        {
          if (v16 > 9 || v16 == 2)
            turi::apply_binary_op_ff();
          return 0;
        }
        v17 = *(double *)v13;
        v18 = *(char *)(*(_QWORD *)v13 + 31);
        v19 = *(unsigned __int8 *)(*(_QWORD *)v13 + 31);
        if (v18 < 0)
          v20 = *(_QWORD *)(*(_QWORD *)&v17 + 16);
        else
          v20 = v19;
        v78 = *(double *)v12;
        if (*(char *)(*(_QWORD *)&v78 + 31) < 0)
          v79 = *(_QWORD *)(*(_QWORD *)&v78 + 16);
        else
          v79 = *(unsigned __int8 *)(*(_QWORD *)&v78 + 31);
        if (v20 != v79)
          return 0;
        v80 = (unsigned __int8 *)(*(_QWORD *)&v17 + 8);
        if ((v19 & 0x80) != 0)
          v80 = *(unsigned __int8 **)v80;
        v81 = (unsigned __int8 *)(*(_QWORD *)&v78 + 8);
        if ((*(_BYTE *)(*(_QWORD *)&v78 + 31) & 0x80) == 0)
        {
          if ((v19 & 0x80) == 0)
            goto LABEL_96;
          goto LABEL_101;
        }
        v81 = *(unsigned __int8 **)v81;
        if ((v19 & 0x80) != 0)
        {
LABEL_101:
          if (memcmp(v80, v81, v20))
            return 0;
LABEL_104:
          ++v11;
          v6 = *a4;
          if (v11 >= (a4[1] - *a4) >> 3)
            return 1;
          continue;
        }
LABEL_96:
        if (!v20)
          goto LABEL_104;
        while (*v80 == *v81)
        {
          ++v80;
          ++v81;
          if (!--v20)
            goto LABEL_104;
        }
        return 0;
      case 3:
        v21 = v13[12];
        if (v21 != 3)
        {
          if (v21 > 9 || v21 == 3)
            turi::apply_binary_op_ff();
          return 0;
        }
        v22 = *(double *)v12;
        v23 = *(double **)(*(_QWORD *)v13 + 8);
        v24 = *(double **)(*(_QWORD *)v13 + 16);
        v25 = v24 - v23;
        v27 = *(_QWORD *)&v22 + 8;
        v26 = *(double **)(*(_QWORD *)&v22 + 8);
        if (v25 != (uint64_t)(*(_QWORD *)(v27 + 8) - (_QWORD)v26) >> 3)
          return 0;
        if (v24 != v23)
        {
          v28 = v25 <= 1 ? 1 : v24 - v23;
          if (*v23 != *v26)
            return 0;
          v29 = 1;
          do
          {
            v30 = v29;
            if (v28 == v29)
              break;
            v31 = v23[v29];
            v32 = v26[v29++];
          }
          while (v31 == v32);
          if (v30 < v25)
            return 0;
        }
        goto LABEL_104;
      case 4:
        v33 = v13[12];
        if (v33 != 4)
        {
          if (v33 > 9 || v33 == 4)
            turi::apply_binary_op_ff();
          return 0;
        }
        if ((turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v89, (uint64_t *)(*(_QWORD *)v13 + 8), (_QWORD *)(*(_QWORD *)v12 + 8)) & 1) == 0)return 0;
        goto LABEL_104;
      case 5:
        v34 = v13[12];
        if (v34 != 5)
        {
          if (v34 > 9 || v34 == 5)
            turi::apply_binary_op_ff();
          return 0;
        }
        if (!turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v89, (uint64_t **)(*(_QWORD *)v13 + 8), (uint64_t **)(*(_QWORD *)v12 + 8)))return 0;
        goto LABEL_104;
      case 6:
        switch(v13[12])
        {
          case 0u:
            if (*(_QWORD *)v13 != (uint64_t)(*(_QWORD *)v12 << 8) >> 8 || *(_DWORD *)(v12 + 8))
              return 0;
            goto LABEL_104;
          case 1u:
            v77 = vabdd_f64(*(double *)v13, (double)*(int *)(v12 + 8) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)v12 << 8) >> 8));
LABEL_82:
            if (v77 >= 0.0000005)
              return 0;
            goto LABEL_104;
          case 2u:
          case 3u:
          case 4u:
          case 5u:
          case 7u:
          case 8u:
          case 9u:
            return 0;
          case 6u:
            if (((*(_QWORD *)v12 ^ *(_QWORD *)v13) & 0xFFFFFFFFFFFFFFLL) != 0
              || *((_DWORD *)v13 + 2) != *(_DWORD *)(v12 + 8))
            {
              return 0;
            }
            goto LABEL_104;
          default:
            turi::apply_binary_op_ff();
        }
      case 7:
        v35 = v13[12];
        if (v35 == 7)
          goto LABEL_104;
        if (v35 > 9 || v35 == 7)
          turi::apply_binary_op_ff();
        return 0;
      case 8:
        v36 = v13[12];
        if (v36 != 8)
        {
          if (v36 > 9 || v36 == 8)
            turi::apply_binary_op_ff();
          return 0;
        }
        if (!turi::image_type::operator==(*(_QWORD *)v13 + 8, *(_QWORD *)v12 + 8))
          return 0;
        goto LABEL_104;
      case 9:
        v37 = v13[12];
        if (v37 != 9)
        {
          if (v37 >= 9)
            turi::apply_binary_op_ff();
          return 0;
        }
        v38 = *(double *)v12;
        v39 = *(double *)v13;
        if (*(_QWORD *)v12 != *(_QWORD *)v13)
        {
          if (!turi::flexible_type_impl::ndarray<double>::same_shape(*(_QWORD *)&v39 + 8, *(_QWORD *)&v38 + 8))
            return 0;
          v41 = *(char **)(*(_QWORD *)&v39 + 24);
          v40 = *(char **)(*(_QWORD *)&v39 + 32);
          v42 = v40 - v41;
          if (v40 != v41)
          {
            if (*(_QWORD *)(*(_QWORD *)&v39 + 8))
            {
              v43 = 1;
              do
              {
                v44 = *(_QWORD *)v41;
                v41 += 8;
                v43 *= v44;
              }
              while (v41 != v40);
              if (v43)
              {
                v90 = 0;
                std::vector<unsigned long>::vector(&v91, v42 >> 3, &v90);
                v45 = v91;
                v46 = v92;
                v47 = **(_QWORD **)(*(_QWORD *)&v38 + 8);
                v48 = (char *)v92 - (char *)v91;
                v49 = v92 - v91;
                v50 = v49 - 1;
                if (v49 <= 1)
                  v51 = 1;
                else
                  v51 = v92 - v91;
                do
                {
                  if (v46 == v45)
                  {
                    v59 = 0;
                    v60 = *(double *)(**(_QWORD **)(*(_QWORD *)&v39 + 8) + 8 * *(_QWORD *)(*(_QWORD *)&v39 + 72));
                  }
                  else
                  {
                    v52 = 0;
                    v53 = *(uint64_t **)(*(_QWORD *)&v39 + 48);
                    v54 = v45;
                    v55 = v51;
                    do
                    {
                      v57 = *v54++;
                      v56 = v57;
                      v58 = *v53++;
                      v52 += v58 * v56;
                      --v55;
                    }
                    while (v55);
                    v59 = 0;
                    v60 = *(double *)(**(_QWORD **)(*(_QWORD *)&v39 + 8)
                                    + 8 * (*(_QWORD *)(*(_QWORD *)&v39 + 72) + v52));
                    v61 = *(uint64_t **)(*(_QWORD *)&v38 + 48);
                    v62 = v45;
                    v63 = v51;
                    do
                    {
                      v65 = *v62++;
                      v64 = v65;
                      v66 = *v61++;
                      v59 += v66 * v64;
                      --v63;
                    }
                    while (v63);
                  }
                  v67 = *(double *)(v47 + 8 * (*(_QWORD *)(*(_QWORD *)&v38 + 72) + v59));
                  if (v60 != v67)
                    break;
                  v68 = v49;
                  v69 = v49 - 1;
                  if (v48 < 1)
                    goto LABEL_62;
                  v70 = *(_QWORD *)(*(_QWORD *)&v39 + 24);
                  v71 = v45[v50] + 1;
                  v45[v50] = v71;
                  v72 = (v48 & 0xFFFFFFFFFFFFFFF8) - 16;
                  v73 = v49 - 1;
                  if (v71 < *(_QWORD *)(v70 + 8 * v50))
                  {
                    v68 = 1;
                    v69 = v49 - 1;
LABEL_62:
                    if ((v69 & 0x8000000000000000) != 0)
                      break;
                    continue;
                  }
                  do
                  {
                    *(uint64_t *)((char *)v45 + v72 + 8) = 0;
                    if (v73 <= 0)
                    {
                      v92 = v45;
                      operator delete(v45);
                      goto LABEL_104;
                    }
                    --v73;
                    v74 = *(uint64_t *)((char *)v45 + v72) + 1;
                    *(uint64_t *)((char *)v45 + v72) = v74;
                    v75 = *(_QWORD *)(v70 + v72);
                    v72 -= 8;
                  }
                  while (v74 >= v75);
                  v68 = 1;
                  if (v73 < 0)
                    break;
                }
                while (v68);
                if (v45)
                {
                  v92 = v45;
                  operator delete(v45);
                }
                if (v60 != v67)
                  return 0;
              }
            }
          }
        }
        goto LABEL_104;
      default:
        turi::apply_binary_op_ff();
    }
  }
}

uint64_t *turi::join_impl::join_hash_table::get_matching_rows(_QWORD *a1, _QWORD *a2, uint64_t **a3, int a4)
{
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v13;

  v13 = turi::join_impl::compute_hash_from_row(a2, a3);
  v8 = std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::find<unsigned long>(a1, (unint64_t *)&v13);
  if (!v8)
    return &turi::join_impl::join_hash_table::empty_vt;
  v9 = v8 + 3;
  v10 = v8[4];
  if ((_QWORD *)v10 == v8 + 3)
    return &turi::join_impl::join_hash_table::empty_vt;
  v11 = &turi::join_impl::join_hash_table::empty_vt;
  while (!turi::join_impl::join_hash_table::join_values_equal((uint64_t)a1, *(_QWORD **)(v10 + 16), a2, (uint64_t *)a3))
  {
    v10 = *(_QWORD *)(v10 + 8);
    if ((_QWORD *)v10 == v9)
      return v11;
  }
  v11 = (uint64_t *)(v10 + 16);
  if (a4)
    *(_BYTE *)(v10 + 40) = 1;
  return v11;
}

void turi::join_impl::join_hash_table::join_values_equal(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::vector<unsigned long> const&)::$_0::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/join_impl.cpp", 104);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"_hash_positions.size()", 22);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"hash_positions.size()", 21);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/join_impl.cpp", "operator()", 103, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::join_impl::join_hash_table::join_values_equal(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::vector<unsigned long> const&)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_218170BB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

uint64_t turi::join_impl::hash_join_executor::hash_join_executor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, const void ***a7, uint64_t a8)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  char v21;
  __int128 *v22;
  __int128 *v23;
  unint64_t v24;
  char v25;
  void *v26;
  const void **v27;
  char v28;
  const void **v29;
  const void ***v30;
  BOOL v31;
  std::vector<std::string>::pointer begin;
  _QWORD *i;
  uint64_t v34;
  uint64_t v35;
  const void **v36;
  char v37;
  uint64_t v38;
  char v39;
  char v40;
  _BYTE *v41;
  unint64_t v42;
  _BYTE *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  char v48;
  _BYTE *v49;
  unint64_t v50;
  _BYTE *v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  size_t v56;
  char *v57;
  uint64_t v58;
  char v59;
  char v60;
  _BYTE *v61;
  unint64_t v62;
  _BYTE *v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  size_t v68;
  char *v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  size_t v74;
  char *v75;
  char *v76;
  char *v77;
  _BYTE *v78;
  char v79;
  unint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  _BYTE *v84;
  char v85;
  char *v86;
  char *v87;
  _BYTE *v88;
  char v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  __int128 v95;
  uint64_t v96;
  int v97;
  int v98;
  _QWORD *v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  _QWORD *v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  _QWORD *v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  _QWORD *v114;
  _QWORD *v115;
  int v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  turi::sframe *v120;
  uint64_t v121;
  _QWORD *v122;
  void **v123;
  uint64_t v124;
  std::vector<std::string> *v125;
  std::vector<std::string>::pointer end;
  _QWORD *v127;
  unint64_t v128;
  char **v129;
  char *v130[2];
  char v131[8];
  char *v132;
  uint64_t *v133[3];
  std::vector<std::string> v134;
  __int128 v135;
  _QWORD v136[38];

  v136[36] = *MEMORY[0x24BDAC8D0];
  v120 = (turi::sframe *)(turi::sframe::sframe((turi::sframe *)a1, (const turi::sframe *)a2) + 296);
  turi::sframe::sframe(v120, (const turi::sframe *)a3);
  *(_QWORD *)(a1 + 608) = 0;
  *(_OWORD *)(a1 + 592) = 0u;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>((_QWORD *)(a1 + 592), *(const void **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3);
  *(_QWORD *)(a1 + 616) = 0;
  *(_QWORD *)(a1 + 624) = 0;
  *(_QWORD *)(a1 + 632) = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>((_QWORD *)(a1 + 616), *(const void **)a5, *(_QWORD *)(a5 + 8), (uint64_t)(*(_QWORD *)(a5 + 8) - *(_QWORD *)a5) >> 3);
  *(_QWORD *)(a1 + 640) = a8;
  *(_WORD *)(a1 + 648) = 0;
  v127 = (_QWORD *)(a1 + 656);
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_DWORD *)(a1 + 688) = 1065353216;
  *(_OWORD *)(a1 + 696) = 0u;
  *(_OWORD *)(a1 + 712) = 0u;
  v121 = a1 + 696;
  v122 = (_QWORD *)(a1 + 616);
  *(_DWORD *)(a1 + 728) = 1065353216;
  v125 = (std::vector<std::string> *)(a1 + 736);
  *(_OWORD *)(a1 + 792) = 0u;
  *(_OWORD *)(a1 + 808) = 0u;
  *(_OWORD *)(a1 + 736) = 0u;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_BYTE *)(a1 + 784) = 0;
  *(_DWORD *)(a1 + 824) = 1065353216;
  *(_BYTE *)(a1 + 832) = 0;
  v123 = (void **)(a1 + 760);
  v124 = a1 + 840;
  std::map<std::string,std::string>::map[abi:ne180100]((uint64_t *)(a1 + 840), a7);
  if ((a6 & 0xFFFFFFFD) == 1)
    *(_BYTE *)(a1 + 648) = 1;
  if ((a6 & 0xFFFFFFFE) == 2)
    *(_BYTE *)(a1 + 649) = 1;
  v16 = *(_QWORD *)(a1 + 600);
  v17 = *(_QWORD *)(a1 + 592);
  v134.__begin_ = (std::vector<std::string>::pointer)((v16 - v17) >> 3);
  v133[0] = (uint64_t *)((uint64_t)(*(_QWORD *)(a1 + 624) - *(_QWORD *)(a1 + 616)) >> 3);
  if ((uint64_t *)v134.__begin_ != v133[0])
  {
    *(_QWORD *)&v135 = &v134;
    *((_QWORD *)&v135 + 1) = v133;
    turi::join_impl::hash_join_executor::hash_join_executor(turi::sframe const&,turi::sframe const&,std::vector<unsigned long> const&,std::vector<unsigned long> const&,join_type_t,std::map<std::string,std::string> const&,unsigned long)::$_0::operator()();
  }
  if (v16 != v17)
  {
    v18 = 0;
    v19 = 0;
    do
    {
      std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,unsigned long &,unsigned long &>((uint64_t)v127, (unint64_t *)(*v122 + v18), (_QWORD *)(*v122 + v18), (uint64_t *)(v17 + v18));
      if (!v20)
        turi::join_impl::hash_join_executor::hash_join_executor(turi::sframe const&,turi::sframe const&,std::vector<unsigned long> const&,std::vector<unsigned long> const&,join_type_t,std::map<std::string,std::string> const&,unsigned long)::$_1::operator()();
      std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,unsigned long &,unsigned long &>(v121, (unint64_t *)(*(_QWORD *)(a1 + 592) + v18), (_QWORD *)(*(_QWORD *)(a1 + 592) + v18), (uint64_t *)(*v122 + v18));
      if (!v21)
        turi::join_impl::hash_join_executor::hash_join_executor(turi::sframe const&,turi::sframe const&,std::vector<unsigned long> const&,std::vector<unsigned long> const&,join_type_t,std::map<std::string,std::string> const&,unsigned long)::$_2::operator()();
      ++v19;
      v17 = *(_QWORD *)(a1 + 592);
      v18 += 8;
    }
    while (v19 < (*(_QWORD *)(a1 + 600) - v17) >> 3);
  }
  v22 = *(__int128 **)(a2 + 40);
  v23 = *(__int128 **)(a2 + 48);
  memset(&v134, 0, sizeof(v134));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&v134, v22, v23, 0xAAAAAAAAAAAAAAABLL * (((char *)v23 - (char *)v22) >> 3));
  if (v125 != (std::vector<std::string> *)(a2 + 40))
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(v125, *(std::string **)(a2 + 40), *(__int128 **)(a2 + 48), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 48) - *(_QWORD *)(a2 + 40)) >> 3));
  std::vector<turi::flex_type_enum>::vector(&v135, *(_QWORD *)(a2 + 24));
  if (*(_QWORD *)(a2 + 24))
  {
    v24 = 0;
    do
    {
      v25 = turi::sframe::column_type((turi::sframe *)a2, v24);
      *(_BYTE *)(v135 + v24++) = v25;
    }
    while (v24 < *(_QWORD *)(a2 + 24));
  }
  v26 = *v123;
  if (*v123)
  {
    *(_QWORD *)(a1 + 768) = v26;
    operator delete(v26);
    *v123 = 0;
    *(_QWORD *)(a1 + 768) = 0;
    *(_QWORD *)(a1 + 776) = 0;
  }
  *(_OWORD *)v123 = v135;
  *(_QWORD *)(a1 + 776) = v136[0];
  std::set<std::string>::set[abi:ne180100]<std::move_iterator<std::__wrap_iter<std::string*>>>((uint64_t)v133, (const void **)&v134.__begin_->__r_.__value_.__l.__data_, (const void **)&v134.__end_->__r_.__value_.__l.__data_);
  if (&v134 != (std::vector<std::string> *)(a3 + 40))
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(&v134, *(std::string **)(a3 + 40), *(__int128 **)(a3 + 48), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a3 + 48) - *(_QWORD *)(a3 + 40)) >> 3));
  std::set<std::string>::set[abi:ne180100]<std::__wrap_iter<std::string*>>((uint64_t)v131, (const void **)&v134.__begin_->__r_.__value_.__l.__data_, (const void **)&v134.__end_->__r_.__value_.__l.__data_);
  v130[0] = 0;
  v130[1] = 0;
  v129 = v130;
  v27 = *(const void ***)(a1 + 840);
  if (v27 != (const void **)(a1 + 848))
  {
    do
    {
      if (!std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)v131, v27 + 4))
      {
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v135);
        v100 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v136, (uint64_t)"user provided column name { ", 28);
        v101 = *((char *)v27 + 55);
        if (v101 >= 0)
          v102 = (uint64_t)(v27 + 4);
        else
          v102 = (uint64_t)v27[4];
        if (v101 >= 0)
          v103 = *((unsigned __int8 *)v27 + 55);
        else
          v103 = (uint64_t)v27[5];
        v104 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v100, v102, v103);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v104, (uint64_t)" } is not found in right SFrame.", 32);
        v128 = (unint64_t)&v135;
        turi::join_impl::hash_join_executor::hash_join_executor(turi::sframe const&,turi::sframe const&,std::vector<unsigned long> const&,std::vector<unsigned long> const&,join_type_t,std::map<std::string,std::string> const&,unsigned long)::$_3::operator()();
      }
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)&v129, v27 + 7, (uint64_t)(v27 + 7));
      if ((v28 & 1) == 0)
      {
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v135);
        v105 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v136, (uint64_t)"user provided resolution name { ", 32);
        v106 = *((char *)v27 + 79);
        if (v106 >= 0)
          v107 = (uint64_t)(v27 + 7);
        else
          v107 = (uint64_t)v27[7];
        if (v106 >= 0)
          v108 = *((unsigned __int8 *)v27 + 79);
        else
          v108 = (uint64_t)v27[8];
        v109 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v105, v107, v108);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v109, (uint64_t)" } duplicates with other resolution name.", 41);
        v128 = (unint64_t)&v135;
        turi::join_impl::hash_join_executor::hash_join_executor(turi::sframe const&,turi::sframe const&,std::vector<unsigned long> const&,std::vector<unsigned long> const&,join_type_t,std::map<std::string,std::string> const&,unsigned long)::$_4::operator()();
      }
      if (std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)v131, v27 + 7))
      {
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v135);
        v110 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v136, (uint64_t)"user provided resolution name { ", 32);
        v111 = *((char *)v27 + 79);
        if (v111 >= 0)
          v112 = (uint64_t)(v27 + 7);
        else
          v112 = (uint64_t)v27[7];
        if (v111 >= 0)
          v113 = *((unsigned __int8 *)v27 + 79);
        else
          v113 = (uint64_t)v27[8];
        v114 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v110, v112, v113);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v114, (uint64_t)" } is not allowed to be same with any name in right SFrame.", 59);
        v128 = (unint64_t)&v135;
        turi::join_impl::hash_join_executor::hash_join_executor(turi::sframe const&,turi::sframe const&,std::vector<unsigned long> const&,std::vector<unsigned long> const&,join_type_t,std::map<std::string,std::string> const&,unsigned long)::$_5::operator()();
      }
      v29 = (const void **)v27[1];
      if (v29)
      {
        do
        {
          v30 = (const void ***)v29;
          v29 = (const void **)*v29;
        }
        while (v29);
      }
      else
      {
        do
        {
          v30 = (const void ***)v27[2];
          v31 = *v30 == v27;
          v27 = (const void **)v30;
        }
        while (!v31);
      }
      v27 = (const void **)v30;
    }
    while (v30 != (const void ***)(a1 + 848));
  }
  begin = v134.__begin_;
  end = v134.__end_;
  for (i = (_QWORD *)(a3 + 40); begin != end; ++begin)
  {
    v34 = std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(*(_QWORD *)(a3 + 40), *(_QWORD *)(a3 + 48), (unsigned __int8 **)begin);
    if (v34 == *(_QWORD *)(a3 + 48))
    {
      *(_QWORD *)&v135 = begin;
      turi::sframe::column_index(std::string const&)const::{lambda(void)#1}::operator()();
    }
    v128 = 0xAAAAAAAAAAAAAAABLL * ((v34 - *i) >> 3);
    if (std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::find<unsigned long>(v127, &v128))
    {
      continue;
    }
    if (std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)v133, (const void **)&begin->__r_.__value_.__l.__data_))
    {
      if (std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>(v124, (const void **)&begin->__r_.__value_.__l.__data_))
      {
        v35 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(v124, (const void **)&begin->__r_.__value_.__l.__data_);
        v36 = (const void **)(v35 + 56);
        std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(v133, v36, (uint64_t)v36);
        if ((v37 & 1) == 0)
        {
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v135);
          v115 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v136, (uint64_t)"user provided column name { ", 28);
          v116 = *(char *)(v35 + 79);
          if (v116 >= 0)
            v117 = v35 + 56;
          else
            v117 = *(_QWORD *)(v35 + 56);
          if (v116 >= 0)
            v118 = *(unsigned __int8 *)(v35 + 79);
          else
            v118 = *(_QWORD *)(v35 + 64);
          v119 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v115, v117, v118);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v119, (uint64_t)" } conflicts with table name used in SFrame", 43);
          v128 = (unint64_t)&v135;
          turi::join_impl::hash_join_executor::hash_join_executor(turi::sframe const&,turi::sframe const&,std::vector<unsigned long> const&,std::vector<unsigned long> const&,join_type_t,std::map<std::string,std::string> const&,unsigned long)::$_6::operator()();
        }
        v38 = std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(*(_QWORD *)(a3 + 40), *(_QWORD *)(a3 + 48), (unsigned __int8 **)begin);
        if (v38 == *(_QWORD *)(a3 + 48))
        {
          *(_QWORD *)&v135 = begin;
          turi::sframe::column_index(std::string const&)const::{lambda(void)#1}::operator()();
        }
        v39 = turi::sframe::column_type((turi::sframe *)a3, 0xAAAAAAAAAAAAAAABLL * ((v38 - *(_QWORD *)(a3 + 40)) >> 3));
        v40 = v39;
        v41 = *(_BYTE **)(a1 + 768);
        v42 = *(_QWORD *)(a1 + 776);
        if ((unint64_t)v41 >= v42)
        {
          v52 = (unint64_t)*v123;
          v53 = v41 - (_BYTE *)*v123;
          v54 = v53 + 1;
          if (v53 + 1 < 0)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          v55 = v42 - v52;
          if (2 * v55 > v54)
            v54 = 2 * v55;
          if (v55 >= 0x3FFFFFFFFFFFFFFFLL)
            v56 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v56 = v54;
          if (v56)
            v57 = (char *)operator new(v56);
          else
            v57 = 0;
          v76 = &v57[v53];
          v77 = &v57[v53];
          *v77 = v40;
          v43 = v77 + 1;
          if (v41 == (_BYTE *)v52)
          {
            i = (_QWORD *)(a3 + 40);
          }
          else
          {
            v78 = &v41[~v52];
            i = (_QWORD *)(a3 + 40);
            do
            {
              v79 = *--v41;
              (v78--)[(_QWORD)v57] = v79;
            }
            while (v41 != (_BYTE *)v52);
            v76 = v57;
          }
          *(_QWORD *)(a1 + 760) = v76;
          *(_QWORD *)(a1 + 768) = v43;
          *(_QWORD *)(a1 + 776) = &v57[v56];
          if (v52)
            operator delete((void *)v52);
        }
        else
        {
          *v41 = v39;
          v43 = v41 + 1;
          i = (_QWORD *)(a3 + 40);
        }
        *(_QWORD *)(a1 + 768) = v43;
        v80 = *(_QWORD *)(a1 + 744);
        if (v80 >= *(_QWORD *)(a1 + 752))
        {
          v81 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)v125, (__int128 *)v36);
        }
        else
        {
          std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v125, (__int128 *)v36);
          v81 = v80 + 24;
        }
        *(_QWORD *)(a1 + 744) = v81;
        std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(v133, v36, (uint64_t)v36);
        continue;
      }
      v46 = std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(*(_QWORD *)(a3 + 40), *(_QWORD *)(a3 + 48), (unsigned __int8 **)begin);
      if (v46 == *(_QWORD *)(a3 + 48))
      {
        *(_QWORD *)&v135 = begin;
        turi::sframe::column_index(std::string const&)const::{lambda(void)#1}::operator()();
      }
      v47 = turi::sframe::column_type((turi::sframe *)a3, 0xAAAAAAAAAAAAAAABLL * ((v46 - *(_QWORD *)(a3 + 40)) >> 3));
      v48 = v47;
      v49 = *(_BYTE **)(a1 + 768);
      v50 = *(_QWORD *)(a1 + 776);
      if ((unint64_t)v49 >= v50)
      {
        v70 = (unint64_t)*v123;
        v71 = v49 - (_BYTE *)*v123;
        v72 = v71 + 1;
        if (v71 + 1 < 0)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v73 = v50 - v70;
        if (2 * v73 > v72)
          v72 = 2 * v73;
        if (v73 >= 0x3FFFFFFFFFFFFFFFLL)
          v74 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v74 = v72;
        if (v74)
          v75 = (char *)operator new(v74);
        else
          v75 = 0;
        v86 = &v75[v71];
        v87 = &v75[v71];
        *v87 = v48;
        v51 = v87 + 1;
        if (v49 == (_BYTE *)v70)
        {
          i = (_QWORD *)(a3 + 40);
        }
        else
        {
          v88 = &v49[~v70];
          i = (_QWORD *)(a3 + 40);
          do
          {
            v89 = *--v49;
            (v88--)[(_QWORD)v75] = v89;
          }
          while (v49 != (_BYTE *)v70);
          v86 = v75;
        }
        *(_QWORD *)(a1 + 760) = v86;
        *(_QWORD *)(a1 + 768) = v51;
        *(_QWORD *)(a1 + 776) = &v75[v74];
        if (v70)
          operator delete((void *)v70);
      }
      else
      {
        *v49 = v47;
        v51 = v49 + 1;
        i = (_QWORD *)(a3 + 40);
      }
      *(_QWORD *)(a1 + 768) = v51;
      std::string::append(begin, ".1", 2uLL);
      v90 = *(_QWORD *)(a1 + 744);
      if (v90 >= *(_QWORD *)(a1 + 752))
      {
        v91 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)v125, (__int128 *)begin);
      }
      else
      {
        std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v125, (__int128 *)begin);
        v91 = v90 + 24;
      }
      *(_QWORD *)(a1 + 744) = v91;
    }
    else
    {
      v44 = *(_QWORD *)(a1 + 744);
      if (v44 >= *(_QWORD *)(a1 + 752))
      {
        v45 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)v125, (__int128 *)begin);
      }
      else
      {
        std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v125, (__int128 *)begin);
        v45 = v44 + 24;
      }
      *(_QWORD *)(a1 + 744) = v45;
      v58 = std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(*(_QWORD *)(a3 + 40), *(_QWORD *)(a3 + 48), (unsigned __int8 **)begin);
      if (v58 == *(_QWORD *)(a3 + 48))
      {
        *(_QWORD *)&v135 = begin;
        turi::sframe::column_index(std::string const&)const::{lambda(void)#1}::operator()();
      }
      v59 = turi::sframe::column_type((turi::sframe *)a3, 0xAAAAAAAAAAAAAAABLL * ((v58 - *(_QWORD *)(a3 + 40)) >> 3));
      v60 = v59;
      v61 = *(_BYTE **)(a1 + 768);
      v62 = *(_QWORD *)(a1 + 776);
      if ((unint64_t)v61 >= v62)
      {
        v64 = (unint64_t)*v123;
        v65 = v61 - (_BYTE *)*v123;
        v66 = v65 + 1;
        if (v65 + 1 < 0)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v67 = v62 - v64;
        if (2 * v67 > v66)
          v66 = 2 * v67;
        if (v67 >= 0x3FFFFFFFFFFFFFFFLL)
          v68 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v68 = v66;
        if (v68)
          v69 = (char *)operator new(v68);
        else
          v69 = 0;
        v82 = &v69[v65];
        v83 = &v69[v65];
        *v83 = v60;
        v63 = v83 + 1;
        if (v61 == (_BYTE *)v64)
        {
          i = (_QWORD *)(a3 + 40);
        }
        else
        {
          v84 = &v61[~v64];
          i = (_QWORD *)(a3 + 40);
          do
          {
            v85 = *--v61;
            (v84--)[(_QWORD)v69] = v85;
          }
          while (v61 != (_BYTE *)v64);
          v82 = v69;
        }
        *(_QWORD *)(a1 + 760) = v82;
        *(_QWORD *)(a1 + 768) = v63;
        *(_QWORD *)(a1 + 776) = &v69[v68];
        if (v64)
          operator delete((void *)v64);
      }
      else
      {
        *v61 = v59;
        v63 = v61 + 1;
        i = (_QWORD *)(a3 + 40);
      }
      *(_QWORD *)(a1 + 768) = v63;
    }
    std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>(v133, (const void **)&begin->__r_.__value_.__l.__data_, (uint64_t)begin);
  }
  v92 = *(_QWORD *)(a3 + 32);
  if (!*(_BYTE *)(a3 + 288))
    v92 = 0;
  v93 = v92 * *(_QWORD *)(a3 + 24);
  v94 = *(_QWORD *)(a2 + 32);
  if (!*(_BYTE *)(a2 + 288))
    v94 = 0;
  if (v93 < v94 * *(_QWORD *)(a2 + 24))
  {
    *(_BYTE *)(a1 + 784) = 1;
    turi::sframe::sframe((turi::sframe *)&v135, a1);
    turi::sframe::operator=(a1, (uint64_t)v120);
    turi::sframe::operator=((uint64_t)v120, (uint64_t)&v135);
    turi::sframe::~sframe((turi::sframe *)&v135);
    v95 = *(_OWORD *)(a1 + 592);
    *(_OWORD *)(a1 + 592) = *(_OWORD *)v122;
    *(_OWORD *)v122 = v95;
    v96 = *(_QWORD *)(a1 + 608);
    *(_QWORD *)(a1 + 608) = *(_QWORD *)(a1 + 632);
    *(_QWORD *)(a1 + 632) = v96;
    std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::swap((uint64_t)v127, v121);
    v97 = *(unsigned __int8 *)(a1 + 648);
    v98 = *(unsigned __int8 *)(a1 + 649);
    if (v97 != v98)
    {
      *(_BYTE *)(a1 + 648) = v97 ^ 1;
      *(_BYTE *)(a1 + 649) = v98 ^ 1;
    }
  }
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)&v129, v130[0]);
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)v131, v132);
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)v133, (char *)v133[1]);
  *(_QWORD *)&v135 = &v134;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v135);
  return a1;
}

void sub_2181717A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, uint64_t a10, turi::sframe *a11, uint64_t a12, void **a13, void **a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,char *a22,uint64_t a23,char a24,char *a25,uint64_t a26,uint64_t *a27,char *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34)
{
  uint64_t v34;
  void *v36;
  void *v37;
  void *v38;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&__p);
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)&a21, a22);
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)&a24, a25);
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)&a27, a28);
  a27 = &a30;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a27);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a15, *(_QWORD **)(v34 + 848));
  std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::~__hash_table(a10);
  v36 = *a14;
  if (*a14)
  {
    *(_QWORD *)(v34 + 768) = v36;
    operator delete(v36);
  }
  a30 = a17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::~__hash_table(a12);
  std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::~__hash_table(a19);
  v37 = *a13;
  if (*a13)
  {
    *(_QWORD *)(v34 + 624) = v37;
    operator delete(v37);
  }
  v38 = *a9;
  if (*a9)
  {
    *(_QWORD *)(v34 + 600) = v38;
    operator delete(v38);
  }
  turi::sframe::~sframe(a11);
  turi::sframe::~sframe((turi::sframe *)v34);
  _Unwind_Resume(a1);
}

void turi::join_impl::hash_join_executor::hash_join_executor(turi::sframe const&,turi::sframe const&,std::vector<unsigned long> const&,std::vector<unsigned long> const&,join_type_t,std::map<std::string,std::string> const&,unsigned long)::$_0::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/join_impl.cpp", 104);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"_left_join_positions.size()", 27);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"_right_join_positions.size()", 28);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/join_impl.cpp", "operator()", 164, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::join_impl::hash_join_executor::hash_join_executor(turi::sframe const&,turi::sframe const&,std::vector<unsigned long> const&,std::vector<unsigned long> const&,join_type_t,std::map<std::string,std::string> const&,unsigned long)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_218171B48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::join_impl::hash_join_executor::hash_join_executor(turi::sframe const&,turi::sframe const&,std::vector<unsigned long> const&,std::vector<unsigned long> const&,join_type_t,std::map<std::string,std::string> const&,unsigned long)::$_1::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/join_impl.cpp", 104);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"ret.second", 10);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/join_impl.cpp", "operator()", 170, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::join_impl::hash_join_executor::hash_join_executor(turi::sframe const&,turi::sframe const&,std::vector<unsigned long> const&,std::vector<unsigned long> const&,join_type_t,std::map<std::string,std::string> const&,unsigned long)::$_1::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_218171CC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::join_impl::hash_join_executor::hash_join_executor(turi::sframe const&,turi::sframe const&,std::vector<unsigned long> const&,std::vector<unsigned long> const&,join_type_t,std::map<std::string,std::string> const&,unsigned long)::$_2::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/join_impl.cpp", 104);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"ret.second", 10);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/join_impl.cpp", "operator()", 174, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::join_impl::hash_join_executor::hash_join_executor(turi::sframe const&,turi::sframe const&,std::vector<unsigned long> const&,std::vector<unsigned long> const&,join_type_t,std::map<std::string,std::string> const&,unsigned long)::$_2::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_218171E48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::join_impl::hash_join_executor::init_result_frame(turi::join_impl::hash_join_executor *this, turi::sframe *a2)
{
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  std::string *v9;
  unint64_t v10;
  std::string *v11;
  unint64_t v12;
  _QWORD **v13;
  uint64_t v14;
  _QWORD **v15;
  uint64_t v16;
  unint64_t v17;
  turi::thread *v18;
  _QWORD **v19;
  uint64_t v20;
  unint64_t v21;
  turi::thread *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  turi::thread *v28;
  _QWORD **v29;
  uint64_t v30;
  turi::thread *v31;
  turi::thread *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  std::string __p;
  uint64_t v39[3];
  unint64_t v40;
  void *v41[3];
  std::vector<std::string> v42;

  if (!*((_BYTE *)this + 784))
  {
    assert_msg(*((unsigned __int8 *)this + 288), "Invalid SFrame");
    if (*((_BYTE *)this + 289))
    {
      v15 = (_QWORD **)((char *)this + 208);
      v16 = 15;
    }
    else
    {
      if (!*((_QWORD *)this + 3))
      {
        v27 = 0;
LABEL_52:
        v28 = (turi::thread *)assert_msg(*((unsigned __int8 *)this + 584), "Invalid SFrame");
        if (*((_BYTE *)this + 585))
        {
          v29 = (_QWORD **)((char *)this + 504);
          v30 = 15;
        }
        else
        {
          if (!*((_QWORD *)this + 40))
          {
            v31 = 0;
            goto LABEL_57;
          }
          v29 = (_QWORD **)*((_QWORD *)this + 60);
          v30 = 3;
        }
        v28 = (turi::thread *)(*(uint64_t (**)(void))(**v29 + 8 * v30))();
        v31 = v28;
LABEL_57:
        v32 = (turi::thread *)turi::thread::cpu_count(v28);
        v33 = turi::thread::cpu_count(v32);
        v34 = (unint64_t)log2((double)v33);
        if (v34 <= 1)
          v34 = 1;
        v35 = v34 * (_QWORD)v32;
        if (v27 <= (unint64_t)v31)
          v36 = (unint64_t)v31;
        else
          v36 = v27;
        if (v36 >= v35)
          v37 = v36;
        else
          v37 = v35;
        std::string::basic_string[abi:ne180100]<0>(&v42, "");
        turi::sframe::open_for_write((uint64_t)a2, (_QWORD *)this + 92, (_QWORD *)this + 95, (const std::string *)&v42, v37, 0);
        if (SHIBYTE(v42.__end_cap_.__value_) < 0)
          operator delete(v42.__begin_);
        return;
      }
      v15 = (_QWORD **)*((_QWORD *)this + 23);
      v16 = 3;
    }
    v27 = (*(uint64_t (**)(void))(**v15 + 8 * v16))();
    goto LABEL_52;
  }
  std::vector<std::string>::vector(&v42, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 93) - *((_QWORD *)this + 92)) >> 3));
  std::vector<turi::flex_type_enum>::vector(v41, *((_QWORD *)this + 96) - *((_QWORD *)this + 95));
  v39[0] = 0;
  v4 = *((_QWORD *)this + 40);
  if (v4)
  {
    do
    {
      v5 = std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::find<unsigned long>((_QWORD *)this + 82, (unint64_t *)v39);
      if (v5)
      {
        v6 = v5 + 2;
        v7 = v5 + 3;
        std::string::operator=(&v42.__begin_[v5[3]], (const std::string *)(*((_QWORD *)this + 92) + 24 * v5[2]));
        *((_BYTE *)v41[0] + *v7) = *(_BYTE *)(*((_QWORD *)this + 95) + *v6);
        std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,unsigned long &,unsigned long &>((uint64_t)this + 792, v6 + 1, v6 + 1, v6);
      }
      ++v39[0];
      v4 = *((_QWORD *)this + 40);
    }
    while (v39[0] < v4);
  }
  v40 = 0;
  v39[0] = v4;
  v8 = *((_QWORD *)this + 92);
  if (v4 >= 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 93) - v8) >> 3))
    goto LABEL_15;
  do
  {
    v9 = &v42.__begin_[v40];
    v10 = v40 + 1;
    while ((SHIBYTE(v9->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (!*((_BYTE *)&v9->__r_.__value_.__s + 23))
        goto LABEL_13;
LABEL_12:
      v40 = v10;
      ++v9;
      ++v10;
    }
    if (v9->__r_.__value_.__l.__size_)
      goto LABEL_12;
LABEL_13:
    std::string::operator=(v9, (const std::string *)(v8 + 24 * v4));
    *((_BYTE *)v41[0] + v40) = *(_BYTE *)(*((_QWORD *)this + 95) + v39[0]);
    std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,unsigned long &,unsigned long &>((uint64_t)this + 792, &v40, &v40, v39);
    v4 = v39[0] + 1;
    v39[0] = v4;
    v8 = *((_QWORD *)this + 92);
  }
  while (v4 < 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 93) - v8) >> 3));
  v4 = *((_QWORD *)this + 40);
LABEL_15:
  v39[0] = 0;
  if (!v4)
    goto LABEL_25;
  while (2)
  {
    if (std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::find<unsigned long>((_QWORD *)this + 82, (unint64_t *)v39))
    {
      goto LABEL_24;
    }
    v11 = &v42.__begin_[v40];
    v12 = v40 + 1;
    while (2)
    {
      if ((SHIBYTE(v11->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        if (!*((_BYTE *)&v11->__r_.__value_.__s + 23))
          break;
        goto LABEL_22;
      }
      if (v11->__r_.__value_.__l.__size_)
      {
LABEL_22:
        v40 = v12;
        ++v11;
        ++v12;
        continue;
      }
      break;
    }
    std::string::operator=(v11, (const std::string *)(*((_QWORD *)this + 92) + 24 * v39[0]));
    *((_BYTE *)v41[0] + v40) = *(_BYTE *)(*((_QWORD *)this + 95) + v39[0]);
    std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,unsigned long &,unsigned long &>((uint64_t)this + 792, &v40, &v40, v39);
LABEL_24:
    if (++v39[0] < *((_QWORD *)this + 40))
      continue;
    break;
  }
LABEL_25:
  std::set<std::string>::set[abi:ne180100]<std::__wrap_iter<std::string*>>((uint64_t)v39, (const void **)&v42.__begin_->__r_.__value_.__l.__data_, (const void **)&v42.__end_->__r_.__value_.__l.__data_);
  assert_msg(*((unsigned __int8 *)this + 288), "Invalid SFrame");
  if (*((_BYTE *)this + 289))
  {
    v13 = (_QWORD **)((char *)this + 208);
    v14 = 15;
    goto LABEL_31;
  }
  if (*((_QWORD *)this + 3))
  {
    v13 = (_QWORD **)*((_QWORD *)this + 23);
    v14 = 3;
LABEL_31:
    v17 = (*(uint64_t (**)(void))(**v13 + 8 * v14))();
  }
  else
  {
    v17 = 0;
  }
  v18 = (turi::thread *)assert_msg(*((unsigned __int8 *)this + 584), "Invalid SFrame");
  if (*((_BYTE *)this + 585))
  {
    v19 = (_QWORD **)((char *)this + 504);
    v20 = 15;
    goto LABEL_36;
  }
  if (*((_QWORD *)this + 40))
  {
    v19 = (_QWORD **)*((_QWORD *)this + 60);
    v20 = 3;
LABEL_36:
    v18 = (turi::thread *)(*(uint64_t (**)(void))(**v19 + 8 * v20))();
    v21 = (unint64_t)v18;
  }
  else
  {
    v21 = 0;
  }
  v22 = (turi::thread *)turi::thread::cpu_count(v18);
  v23 = turi::thread::cpu_count(v22);
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  if (v17 > v21)
    v21 = v17;
  v24 = (unint64_t)log2((double)v23);
  if (v24 <= 1)
    v24 = 1;
  v25 = v24 * (_QWORD)v22;
  if (v21 <= v25)
    v26 = v25;
  else
    v26 = v21;
  turi::sframe::open_for_write((uint64_t)a2, &v42, v41, &__p, v26, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)v39, (char *)v39[1]);
  if (v41[0])
  {
    v41[1] = v41[0];
    operator delete(v41[0]);
  }
  v41[0] = &v42;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v41);
}

void sub_2181723C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void turi::join_impl::hash_join_executor::unpack_row(uint64_t *a1@<X1>, unint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t *v5;
  _QWORD **i;
  _QWORD v7[6];

  if (*((char *)a1 + 23) < 0)
  {
    v5 = a1;
    a1 = (uint64_t *)*a1;
    v4 = v5[1];
  }
  else
  {
    v4 = *((unsigned __int8 *)a1 + 23);
  }
  v7[0] = 0;
  v7[1] = 0;
  v7[2] = a1;
  v7[3] = 0;
  v7[4] = v4;
  std::vector<turi::flexible_type>::vector(a3, a2);
  for (i = (_QWORD **)*a3; i != (_QWORD **)a3[1]; i += 2)
    turi::archive_detail::deserialize_hard_or_soft_fail<turi::iarchive,turi::flexible_type>::exec((turi::iarchive *)v7, i);
}

void sub_2181724C4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 24) = v1;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)(v2 - 24));
  _Unwind_Resume(a1);
}

void turi::join_impl::hash_join_executor::grace_hash_join(std::string::size_type *this@<X0>, turi::sframe *a2@<X8>)
{
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  int *v9;
  file_logger *v10;
  file_logger *started;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  const std::locale::facet *v15;
  std::string *v16;
  std::string::size_type v17;
  int v18;
  std::string *v19;
  std::string::size_type v20;
  uint64_t v21;
  uint64_t i;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  _QWORD **v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t j;
  _QWORD **v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  timeval *v53;
  uint64_t v54;
  turi::join_impl::hash_join_executor *v55;
  uint64_t v56;
  unint64_t v57;
  _QWORD **v58;
  uint64_t v59;
  unint64_t v60;
  _QWORD **v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  _QWORD **v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  char *v70;
  char *v71;
  char *v72;
  char *v73;
  char *v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  char *v91;
  unint64_t *v92;
  unint64_t v93;
  unint64_t *v94;
  unint64_t v95;
  char *v96;
  uint64_t v97;
  char *v98;
  _BYTE *v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD **v102;
  uint64_t v103;
  __darwin_time_t tv_sec;
  std::string *v105;
  std::string *v106;
  uint64_t v107;
  uint64_t **v108;
  uint64_t v109;
  __int128 v110;
  std::string *value;
  std::vector<std::string>::pointer end;
  std::string *v113;
  turi::thread_pool *v114;
  _QWORD **v115;
  uint64_t v116;
  unint64_t v117;
  turi::thread_pool *instance;
  turi::thread *v119;
  turi::thread_pool *tls_data;
  turi::thread_pool *v121;
  uint64_t v122;
  double v123;
  turi::thread *v124;
  unint64_t v125;
  uint64_t k;
  _QWORD *v127;
  BOOL v128;
  uint64_t v129;
  _QWORD **v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  _BYTE *v135;
  _QWORD *v136;
  uint64_t v137;
  _QWORD *v138;
  uint64_t v139;
  _QWORD *v140;
  uint64_t v141;
  _QWORD *v142;
  uint64_t v143;
  _QWORD *v144;
  uint64_t v145;
  timeval *v146;
  uint64_t v147;
  int *v148;
  file_logger *v149;
  file_logger *v150;
  _QWORD *v151;
  uint64_t v152;
  _BYTE *v153;
  const std::locale::facet *v154;
  int *v155;
  file_logger *v156;
  file_logger *v157;
  _QWORD *v158;
  uint64_t v159;
  _QWORD *v160;
  const std::locale::facet *v161;
  _QWORD *m;
  std::__shared_weak_count *size;
  unint64_t *v164;
  unint64_t v165;
  unint64_t v166;
  __int128 *v167;
  __int128 v168;
  std::string *v169;
  __int128 v170;
  turi::sframe_reader *v171;
  std::__shared_weak_count *v172;
  unint64_t *p_shared_owners;
  unint64_t v174;
  std::__shared_weak_count *v175;
  unint64_t *v176;
  unint64_t v177;
  _QWORD *v178;
  _QWORD *exception;
  unint64_t v181;
  uint64_t v182;
  uint64_t v183;
  __darwin_time_t v184;
  __darwin_time_t v185;
  __darwin_time_t v186;
  uint64_t v187;
  std::string v188;
  __int128 v189;
  unint64_t v190;
  std::vector<std::string> v191;
  turi::sframe_reader **v192;
  turi::join_impl::hash_join_executor *v193;
  std::string *v194;
  unint64_t v195;
  turi::flexible_type_impl *v196[3];
  void *v197;
  void *v198;
  uint64_t v199;
  std::string v200;
  void *v201;
  void *v202;
  unint64_t v203;
  turi::sframe_reader *v204;
  void *v205;
  char *v206;
  char *v207;
  uint64_t v208[3];
  void *__p;
  char *v210;
  char *v211;
  timeval v212;
  timeval v213;
  uint64_t v214;
  std::__shared_weak_count *v215;
  turi::sframe *v216;
  std::__shared_weak_count *v217;
  __int128 v218;
  unint64_t v219;
  unint64_t v220;
  _BYTE v221[24];
  _BYTE *v222;
  _BYTE v223[24];
  _BYTE *v224;
  _BYTE v225[24];
  _BYTE *v226;
  size_t v227[3];
  std::vector<std::string>::size_type __n;
  uint64_t v229;
  uint64_t v230;
  _QWORD **v231;
  _BYTE v232[80];
  BOOL v233;
  char v234;
  timeval v235;
  __int128 v236;
  _QWORD v237[3];
  _QWORD *v238;
  _QWORD v239[3];
  void *v240;
  char v241;
  _QWORD v242[21];

  v242[19] = *MEMORY[0x24BDAC8D0];
  turi::sframe::sframe((turi::sframe *)v227);
  v216 = 0;
  v217 = 0;
  v214 = 0;
  v215 = 0;
  gettimeofday(&v213, 0);
  gettimeofday(&v212, 0);
  turi::join_impl::hash_join_executor::grace_partition_frames((turi::join_impl::hash_join_executor *)this, &v235);
  std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)&v216, (__int128 *)&v235.tv_sec);
  std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)&v214, &v236);
  v3 = (std::__shared_weak_count *)*((_QWORD *)&v236 + 1);
  if (*((_QWORD *)&v236 + 1))
  {
    v4 = (unint64_t *)(*((_QWORD *)&v236 + 1) + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v6 = *(std::__shared_weak_count **)&v235.tv_usec;
  if (*(_QWORD *)&v235.tv_usec)
  {
    v7 = (unint64_t *)(*(_QWORD *)&v235.tv_usec + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = (int *)global_logger();
  if (v9[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v9))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v10 = (file_logger *)global_logger();
    started = file_logger::start_stream(v10, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/join_impl.cpp", "grace_hash_join", 368, 1);
    v12 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v12 && *((_BYTE *)v12 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12 + 2, (uint64_t)"Partitioned frames in: ", 23);
    gettimeofday(&v235, 0);
    v13 = file_logger::operator<<<double>((uint64_t)started);
    v14 = pthread_getspecific(*(_QWORD *)(v13 + 592));
    if (v14)
    {
      if (*((_BYTE *)v14 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v14 + *(_QWORD *)(v14[2] - 24) + 16));
        v15 = std::locale::use_facet((const std::locale *)&v235, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v15->__vftable[2].~facet_0)(v15, 10);
        std::locale::~locale((std::locale *)&v235);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush((file_logger *)v13);
        if (*(_DWORD *)(v13 + 600) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  turi::join_impl::hash_join_executor::init_result_frame((turi::join_impl::hash_join_executor *)this, (turi::sframe *)v227);
  if (*((_BYTE *)v216 + 288))
    v16 = (std::string *)*((_QWORD *)v216 + 4);
  else
    v16 = 0;
  v191.__begin_ = v16;
  if (*((_BYTE *)this + 288))
    v17 = this[4];
  else
    v17 = 0;
  v200.__r_.__value_.__r.__words[0] = v17;
  if (v16 != (std::string *)v17)
  {
    v235.tv_sec = (__darwin_time_t)&v191;
    *(_QWORD *)&v235.tv_usec = &v200;
    turi::join_impl::hash_join_executor::grace_hash_join(void)::$_0::operator()();
  }
  v18 = *(unsigned __int8 *)(v214 + 288);
  if (*(_BYTE *)(v214 + 288))
    v19 = *(std::string **)(v214 + 32);
  else
    v19 = 0;
  v191.__begin_ = v19;
  if (*((_BYTE *)this + 584))
    v20 = this[41];
  else
    v20 = 0;
  v200.__r_.__value_.__r.__words[0] = v20;
  if (v19 != (std::string *)v20)
  {
    v235.tv_sec = (__darwin_time_t)&v191;
    *(_QWORD *)&v235.tv_usec = &v200;
    turi::join_impl::hash_join_executor::grace_hash_join(void)::$_1::operator()();
  }
  __p = 0;
  v210 = 0;
  v211 = 0;
  if (*((_BYTE *)this + 832))
  {
    v21 = (*(uint64_t (**)(void))(*(_QWORD *)v216 + 24))();
    v191.__begin_ = (std::vector<std::string>::pointer)v21;
    v200.__r_.__value_.__r.__words[0] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v214 + 24))(v214);
    if (v21 != v200.__r_.__value_.__r.__words[0])
    {
      v235.tv_sec = (__darwin_time_t)&v191;
      *(_QWORD *)&v235.tv_usec = &v200;
      turi::join_impl::hash_join_executor::grace_hash_join(void)::$_2::operator()();
    }
    if (v21)
    {
      for (i = 0; i != v21; ++i)
      {
        if (*(_QWORD *)(v214 + 24))
        {
          v23 = *(uint64_t **)(v214 + 184);
          v24 = *v23;
          assert_msg(*(unsigned __int8 *)(*v23 + 248), "Invalid SArray");
          v25 = *(_QWORD *)(*(_QWORD *)(v24 + 80) + 8 * i);
        }
        else
        {
          v25 = 0;
        }
        v26 = v210;
        if (v210 >= v211)
        {
          v28 = (char *)__p;
          v29 = (v210 - (_BYTE *)__p) >> 3;
          v30 = v29 + 1;
          if ((unint64_t)(v29 + 1) >> 61)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          v31 = v211 - (_BYTE *)__p;
          if ((v211 - (_BYTE *)__p) >> 2 > v30)
            v30 = v31 >> 2;
          if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8)
            v32 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v32 = v30;
          if (v32)
          {
            v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v211, v32);
            v28 = (char *)__p;
            v26 = v210;
          }
          else
          {
            v33 = 0;
          }
          v34 = &v33[8 * v29];
          *(_QWORD *)v34 = v25;
          v27 = v34 + 8;
          while (v26 != v28)
          {
            v35 = *((_QWORD *)v26 - 1);
            v26 -= 8;
            *((_QWORD *)v34 - 1) = v35;
            v34 -= 8;
          }
          __p = v34;
          v210 = v27;
          v211 = &v33[8 * v32];
          if (v28)
            operator delete(v28);
        }
        else
        {
          *(_QWORD *)v210 = v25;
          v27 = v26 + 8;
        }
        v210 = v27;
      }
    }
  }
  else
  {
    if (v18)
      v36 = *(_QWORD *)(v214 + 32);
    else
      v36 = 0;
    v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v211, 1uLL);
    *(_QWORD *)v37 = v36;
    __p = v37;
    v211 = &v37[8 * v38];
    v210 = v37 + 8;
    v21 = 1;
  }
  assert_msg(v233, "Invalid SFrame");
  if (v234)
  {
    v39 = (_QWORD **)v232;
    v40 = 15;
  }
  else
  {
    if (!__n)
    {
      v41 = 0;
      goto LABEL_67;
    }
    v39 = v231;
    v40 = 3;
  }
  v41 = (*(uint64_t (**)(void))(**v39 + 8 * v40))();
LABEL_67:
  std::vector<turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>>::vector(v208, v41);
  v42 = 0;
  for (j = 64; ; j += 96)
  {
    assert_msg(v233, "Invalid SFrame");
    if (v234)
    {
      v44 = (_QWORD **)v232;
      v45 = 15;
LABEL_72:
      v46 = (*(uint64_t (**)(void))(**v44 + 8 * v45))();
      goto LABEL_73;
    }
    if (__n)
    {
      v44 = v231;
      v45 = 3;
      goto LABEL_72;
    }
    v46 = 0;
LABEL_73:
    if (v42 >= v46)
      break;
    turi::sframe::get_output_iterator(v227, v42, (uint64_t)&v235);
    v47 = v208[0];
    v48 = v208[0] + j;
    std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::operator=[abi:ne180100]((_QWORD *)(v208[0] + j - 64), (uint64_t)&v235);
    std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::operator=[abi:ne180100]((_QWORD *)(v48 - 32), (uint64_t)v237);
    std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::operator=[abi:ne180100]((_QWORD *)(v47 + j), (uint64_t)v239);
    v49 = v240;
    if (v240 == v239)
    {
      v49 = v239;
      v50 = 4;
    }
    else
    {
      if (!v240)
        goto LABEL_79;
      v50 = 5;
    }
    (*(void (**)(void))(*v49 + 8 * v50))();
LABEL_79:
    v51 = v238;
    if (v238 == v237)
    {
      v51 = v237;
      v52 = 4;
    }
    else
    {
      if (!v238)
        goto LABEL_84;
      v52 = 5;
    }
    (*(void (**)(void))(*v51 + 8 * v52))();
LABEL_84:
    v53 = (timeval *)*((_QWORD *)&v236 + 1);
    if (*((timeval **)&v236 + 1) == &v235)
    {
      v53 = &v235;
      v54 = 4;
    }
    else
    {
      if (!*((_QWORD *)&v236 + 1))
        goto LABEL_89;
      v54 = 5;
    }
    (*(void (**)(void))(v53->tv_sec + 8 * v54))();
LABEL_89:
    ++v42;
  }
  v205 = 0;
  v206 = 0;
  v207 = 0;
  v55 = (turi::join_impl::hash_join_executor *)this;
  v181 = v21;
  if (v21)
  {
    v56 = 0;
    while (1)
    {
      v57 = *((_QWORD *)__p + v56);
      assert_msg(v233, "Invalid SFrame");
      if (v234)
        break;
      if (__n)
      {
        v58 = v231;
        v59 = 3;
        goto LABEL_97;
      }
      v60 = 0;
LABEL_98:
      assert_msg(v233, "Invalid SFrame");
      if (v234)
      {
        v61 = (_QWORD **)v232;
        v62 = 15;
      }
      else
      {
        if (!__n)
        {
          v63 = 0;
          goto LABEL_103;
        }
        v61 = v231;
        v62 = 3;
      }
      v63 = (*(uint64_t (**)(void))(**v61 + 8 * v62))();
LABEL_103:
      v64 = 0;
      v187 = v63 * v56;
      v65 = v57 / v60;
      while (1)
      {
        assert_msg(v233, "Invalid SFrame");
        if (v234)
        {
          v66 = (_QWORD **)v232;
          v67 = 15;
LABEL_108:
          v68 = (*(uint64_t (**)(void))(**v66 + 8 * v67))();
          goto LABEL_109;
        }
        if (__n)
        {
          v66 = v231;
          v67 = 3;
          goto LABEL_108;
        }
        v68 = 0;
LABEL_109:
        if (v64 >= v68)
          break;
        v69 = v57 - v65;
        if (v57 >= v65)
        {
          v72 = v206;
          if (v206 >= v207)
          {
            v74 = (char *)v205;
            v75 = (v206 - (_BYTE *)v205) >> 3;
            v76 = v75 + 1;
            if ((unint64_t)(v75 + 1) >> 61)
              goto LABEL_358;
            v77 = v207 - (_BYTE *)v205;
            if ((v207 - (_BYTE *)v205) >> 2 > v76)
              v76 = v77 >> 2;
            if ((unint64_t)v77 >= 0x7FFFFFFFFFFFFFF8)
              v78 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v78 = v76;
            if (v78)
            {
              v79 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v207, v78);
              v74 = (char *)v205;
              v72 = v206;
            }
            else
            {
              v79 = 0;
            }
            v92 = (unint64_t *)&v79[8 * v75];
            *v92 = v65;
            v73 = (char *)(v92 + 1);
            while (v72 != v74)
            {
              v93 = *((_QWORD *)v72 - 1);
              v72 -= 8;
              *--v92 = v93;
            }
            v205 = v92;
            v206 = v73;
            v207 = &v79[8 * v78];
            if (v74)
              operator delete(v74);
          }
          else
          {
            *(_QWORD *)v206 = v65;
            v73 = v72 + 8;
          }
          v206 = v73;
          v57 = v69;
        }
        else
        {
          v70 = v206;
          if (v57 <= 0x400)
          {
            if (v206 >= v207)
            {
              v86 = (char *)v205;
              v87 = (v206 - (_BYTE *)v205) >> 3;
              v88 = v87 + 1;
              if ((unint64_t)(v87 + 1) >> 61)
                std::vector<float>::__throw_length_error[abi:ne180100]();
              v89 = v207 - (_BYTE *)v205;
              if ((v207 - (_BYTE *)v205) >> 2 > v88)
                v88 = v89 >> 2;
              if ((unint64_t)v89 >= 0x7FFFFFFFFFFFFFF8)
                v90 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v90 = v88;
              if (v90)
              {
                v91 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v207, v90);
                v86 = (char *)v205;
                v70 = v206;
              }
              else
              {
                v91 = 0;
              }
              v96 = &v91[8 * v87];
              *(_QWORD *)v96 = 0;
              v71 = v96 + 8;
              while (v70 != v86)
              {
                v97 = *((_QWORD *)v70 - 1);
                v70 -= 8;
                *((_QWORD *)v96 - 1) = v97;
                v96 -= 8;
              }
              v205 = v96;
              v206 = v71;
              v207 = &v91[8 * v90];
              if (v86)
                operator delete(v86);
            }
            else
            {
              *(_QWORD *)v206 = 0;
              v71 = v70 + 8;
            }
          }
          else
          {
            if (v206 >= v207)
            {
              v80 = (char *)v205;
              v81 = (v206 - (_BYTE *)v205) >> 3;
              v82 = v81 + 1;
              if ((unint64_t)(v81 + 1) >> 61)
LABEL_358:
                std::vector<float>::__throw_length_error[abi:ne180100]();
              v83 = v207 - (_BYTE *)v205;
              if ((v207 - (_BYTE *)v205) >> 2 > v82)
                v82 = v83 >> 2;
              if ((unint64_t)v83 >= 0x7FFFFFFFFFFFFFF8)
                v84 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v84 = v82;
              if (v84)
              {
                v85 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v207, v84);
                v80 = (char *)v205;
                v70 = v206;
              }
              else
              {
                v85 = 0;
              }
              v94 = (unint64_t *)&v85[8 * v81];
              *v94 = v57;
              v71 = (char *)(v94 + 1);
              while (v70 != v80)
              {
                v95 = *((_QWORD *)v70 - 1);
                v70 -= 8;
                *--v94 = v95;
              }
              v205 = v94;
              v206 = v71;
              v207 = &v85[8 * v84];
              if (v80)
                operator delete(v80);
            }
            else
            {
              *(_QWORD *)v206 = v57;
              v71 = v70 + 8;
            }
            v57 = 0;
          }
          v206 = v71;
        }
        ++v64;
      }
      if (v57)
        *((_QWORD *)v205 + v187) += v57;
      ++v56;
      v21 = v181;
      if (v56 == v181)
      {
        v99 = v205;
        v98 = v206;
        goto LABEL_172;
      }
    }
    v58 = (_QWORD **)v232;
    v59 = 15;
LABEL_97:
    v60 = (*(uint64_t (**)(void))(**v58 + 8 * v59))();
    goto LABEL_98;
  }
  v99 = 0;
  v98 = 0;
LABEL_172:
  v100 = (v98 - v99) >> 3;
  v191.__begin_ = (std::vector<std::string>::pointer)v100;
  assert_msg(v233, "Invalid SFrame");
  if (v234)
  {
    v101 = 15;
    v102 = (_QWORD **)v232;
    goto LABEL_176;
  }
  if (__n)
  {
    v102 = v231;
    v101 = 3;
LABEL_176:
    v103 = (*(uint64_t (**)(void))(**v102 + 8 * v101))();
  }
  else
  {
    v103 = 0;
  }
  v200.__r_.__value_.__r.__words[0] = v103 * v21;
  if (v100 != v103 * v21)
  {
    v235.tv_sec = (__darwin_time_t)&v191;
    *(_QWORD *)&v235.tv_usec = &v200;
    turi::join_impl::hash_join_executor::grace_hash_join(void)::$_3::operator()();
  }
  if (*((_BYTE *)this + 832))
    turi::sframe::get_reader(v216, (turi::sframe_reader **)&v235);
  else
    turi::sframe::get_reader(v216, v21, (turi::sframe_reader **)&v235);
  tv_sec = v235.tv_sec;
  turi::sframe::get_reader(v214, (uint64_t **)&v205, &v204);
  gettimeofday(&v212, 0);
  v203 = 0;
  v186 = tv_sec;
  if (v21)
  {
    v185 = *MEMORY[0x24BEDB7F0];
    v183 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    v184 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
    v182 = MEMORY[0x24BEDB848] + 16;
    while (1)
    {
      v198 = 0;
      v199 = 0;
      v197 = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v197, *((const void **)v55 + 74), *((_QWORD *)v55 + 75), (uint64_t)(*((_QWORD *)v55 + 75) - *((_QWORD *)v55 + 74)) >> 3);
      turi::join_impl::join_hash_table::join_hash_table((uint64_t)&v200, (uint64_t)&v197);
      if (v197)
      {
        v198 = v197;
        operator delete(v197);
      }
      (*(void (**)(std::vector<std::string> *__return_ptr, __darwin_time_t, unint64_t))(*(_QWORD *)tv_sec + 32))(&v191, tv_sec, v203);
      while (1)
      {
        (*(void (**)(timeval *__return_ptr, __darwin_time_t, unint64_t))(*(_QWORD *)tv_sec + 40))(&v235, tv_sec, v203);
        if (v191.__begin_ != (std::vector<std::string>::pointer)v235.tv_sec
          || v193 != (turi::join_impl::hash_join_executor *)v237[0])
        {
          *(_QWORD *)&v218 = &v238;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v218);
          *(_QWORD *)&v218 = &v235.tv_usec;
          std::vector<turi::sarray_iterator<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v218);
          goto LABEL_192;
        }
        v105 = v194;
        v106 = (std::string *)v237[1];
        *(_QWORD *)&v218 = &v238;
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v218);
        *(_QWORD *)&v218 = &v235.tv_usec;
        std::vector<turi::sarray_iterator<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v218);
        v128 = v105 == v106;
        tv_sec = v186;
        if (v128)
          break;
LABEL_192:
        v218 = 0uLL;
        v219 = 0;
        if (*((_BYTE *)v55 + 832))
        {
          turi::sframe_iterator::operator*(&v191);
          if (v196[1] != v196[0])
          {
            switch(*((_BYTE *)v196[0] + 12))
            {
              case 0:
                std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v235);
                std::ostream::operator<<();
                std::stringbuf::str();
                v235.tv_sec = v185;
                *(__darwin_time_t *)((char *)&v235.tv_sec + *(_QWORD *)(v185 - 24)) = v184;
                *(_QWORD *)&v236 = v183;
                v107 = v182;
                goto LABEL_205;
              case 1:
                std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v235);
                std::ostream::operator<<();
                std::stringbuf::str();
                v235.tv_sec = v185;
                *(__darwin_time_t *)((char *)&v235.tv_sec + *(_QWORD *)(v185 - 24)) = v184;
                v107 = MEMORY[0x24BEDB848] + 16;
                *(_QWORD *)&v236 = v183;
LABEL_205:
                *((_QWORD *)&v236 + 1) = v107;
                if (v241 < 0)
                  operator delete(v240);
                std::streambuf::~streambuf();
                std::iostream::~basic_iostream();
                MEMORY[0x219A198F4](v242);
                goto LABEL_212;
              case 2:
                v109 = *(_QWORD *)v196[0];
                if (*(char *)(*(_QWORD *)v196[0] + 31) < 0)
                {
                  std::string::__init_copy_ctor_external(&v188, *(const std::string::value_type **)(v109 + 8), *(_QWORD *)(v109 + 16));
                }
                else
                {
                  v110 = *(_OWORD *)(v109 + 8);
                  v188.__r_.__value_.__r.__words[2] = *(_QWORD *)(v109 + 24);
                  *(_OWORD *)&v188.__r_.__value_.__l.__data_ = v110;
                }
                goto LABEL_212;
              case 3:
                turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v235, (_QWORD *)(*(_QWORD *)v196[0] + 8));
                goto LABEL_212;
              case 4:
                turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v235, (uint64_t *)(*(_QWORD *)v196[0] + 8));
                goto LABEL_212;
              case 5:
                turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v235, (_QWORD *)(*(_QWORD *)v196[0] + 8));
                goto LABEL_212;
              case 6:
                turi::flexible_type_impl::get_string_visitor::operator()(v196[0], &v188);
                goto LABEL_212;
              case 7:
                memset(&v188, 0, sizeof(v188));
                goto LABEL_212;
              case 8:
                turi::flexible_type_impl::get_string_visitor::operator()();
                goto LABEL_212;
              case 9:
                turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v235, (_QWORD *)(*(_QWORD *)v196[0] + 8));
LABEL_212:
                turi::join_impl::hash_join_executor::unpack_row((uint64_t *)&v188, *((_QWORD *)v55 + 3), &v189);
                std::vector<turi::flexible_type>::__vdeallocate((void **)&v218);
                v218 = v189;
                v219 = v190;
                v190 = 0;
                v189 = 0uLL;
                v235.tv_sec = (__darwin_time_t)&v189;
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v235);
                if (SHIBYTE(v188.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v188.__r_.__value_.__l.__data_);
                goto LABEL_214;
              default:
                turi::flexible_type_fail(0);
                __break(1u);
                return;
            }
          }
          std::vector<turi::flex_type_enum>::__throw_out_of_range[abi:ne180100]();
        }
        v108 = (uint64_t **)turi::sframe_iterator::operator*(&v191);
        if (&v218 != (__int128 *)v108)
          std::vector<turi::flexible_type>::__assign_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>((uint64_t)&v218, *v108, v108[1], ((char *)v108[1] - (char *)*v108) >> 4);
LABEL_214:
        turi::join_impl::join_hash_table::add_row((uint64_t)&v200, (uint64_t)&v218);
        v235.tv_sec = (__darwin_time_t)&v218;
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v235);
        end = v191.__end_;
        value = v191.__end_cap_.__value_;
        while (end != value)
        {
          turi::sarray_iterator<turi::flexible_type>::operator++((uint64_t)end);
          end += 2;
        }
        if ((unint64_t)v194->__r_.__value_.__r.__words + 1 < v195)
          v113 = (std::string *)((char *)&v194->__r_.__value_.__l.__data_ + 1);
        else
          v113 = (std::string *)v195;
        v194 = v113;
      }
      v235.tv_sec = (__darwin_time_t)v196;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v235);
      v235.tv_sec = (__darwin_time_t)&v191.__end_;
      std::vector<turi::sarray_iterator<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v235);
      v114 = (turi::thread_pool *)assert_msg(v233, "Invalid SFrame");
      if (v234)
      {
        v115 = (_QWORD **)v232;
        v116 = 15;
        goto LABEL_225;
      }
      if (__n)
      {
        v115 = v231;
        v116 = 3;
LABEL_225:
        v114 = (turi::thread_pool *)(*(uint64_t (**)(void))(**v115 + 8 * v116))();
        v117 = (unint64_t)v114;
      }
      else
      {
        v117 = 0;
      }
      v191.__begin_ = (std::vector<std::string>::pointer)&v203;
      v191.__end_ = (std::vector<std::string>::pointer)v227;
      v191.__end_cap_.__value_ = (std::string *)v208;
      v192 = &v204;
      v193 = v55;
      v194 = &v200;
      instance = (turi::thread_pool *)turi::thread_pool::get_instance(v114);
      v119 = (turi::thread *)turi::thread_pool::size(instance);
      tls_data = (turi::thread_pool *)turi::thread::get_tls_data(v119);
      if (*((_BYTE *)tls_data + 8) || (unint64_t)v119 <= 1)
      {
        if (v117)
        {
          for (k = 0; k != v117; ++k)
            turi::join_impl::hash_join_executor::grace_hash_join(void)::$_4::operator()((uint64_t **)&v191, k);
        }
      }
      else
      {
        v121 = (turi::thread_pool *)turi::thread_pool::get_instance(tls_data);
        turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)&v235, v121);
        v122 = 0;
        v123 = (double)v117 / (double)(unint64_t)v119;
        do
        {
          v124 = (turi::thread *)(v122 + 1);
          v125 = (unint64_t)(v123 * (double)(unint64_t)(v122 + 1) + 0.0);
          if ((turi::thread *)v122 == (turi::thread *)((char *)v119 - 1))
            v125 = v117;
          v219 = (unint64_t)(v123 * (double)(unint64_t)v122 + 0.0);
          v220 = v125;
          *((_QWORD *)&v218 + 1) = &v191;
          *(_QWORD *)&v218 = (char *)boost::function0<void>::assign_to<void turi::parallel_for<turi::join_impl::hash_join_executor::grace_hash_join(void)::$_4>(unsigned long,unsigned long,turi::join_impl::hash_join_executor::grace_hash_join(void)::$_4 const&)::{lambda(void)#1}>(turi::join_impl::hash_join_executor::grace_hash_join(void)::$_4)::stored_vtable
                           + 1;
          turi::parallel_task_queue::launch((uint64_t)&v235, (uint64_t)&v218, v122);
          boost::function0<void>::~function0((uint64_t *)&v218);
          v122 = (uint64_t)v124;
        }
        while (v124 != v119);
        turi::parallel_task_queue::join((turi::parallel_task_queue *)&v235);
        turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)&v235);
      }
      v127 = (_QWORD *)v200.__r_.__value_.__r.__words[2];
      v128 = !*((_BYTE *)v55 + 648) || v200.__r_.__value_.__r.__words[2] == 0;
      if (!v128)
        break;
LABEL_295:
      if (v201)
      {
        v202 = v201;
        operator delete(v201);
      }
      std::__hash_table<std::__hash_value_type<unsigned long,std::list<turi::join_impl::hash_join_row_t>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::list<turi::join_impl::hash_join_row_t>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::list<turi::join_impl::hash_join_row_t>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::list<turi::join_impl::hash_join_row_t>>>>::~__hash_table((uint64_t)&v200);
      ++v203;
      tv_sec = v186;
      if (v203 >= v181)
        goto LABEL_300;
    }
    while (2)
    {
      v129 = v127[4];
LABEL_241:
      if ((_QWORD *)v129 == v127 + 3)
      {
        v127 = (_QWORD *)*v127;
        if (!v127)
          goto LABEL_295;
        continue;
      }
      break;
    }
    if (!*(_BYTE *)(v129 + 40))
    {
      assert_msg(v233, "Invalid SFrame");
      if (v234)
      {
        v130 = (_QWORD **)v232;
        v131 = 15;
        goto LABEL_247;
      }
      if (__n)
      {
        v130 = v231;
        v131 = 3;
LABEL_247:
        (*(void (**)(void))(**v130 + 8 * v131))();
      }
      v132 = v208[0];
      std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)&v235, v208[0]);
      std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)v237, v132 + 32);
      std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)v239, v132 + 64);
      v133 = *((_QWORD *)&v236 + 1);
      if (*((_QWORD *)&v236 + 1))
      {
        if (*((timeval **)&v236 + 1) != &v235)
        {
          v133 = (*(uint64_t (**)(void))(**((_QWORD **)&v236 + 1) + 16))();
          goto LABEL_251;
        }
        v222 = v221;
        (*(void (**)(timeval *, _BYTE *))(v235.tv_sec + 24))(&v235, v221);
      }
      else
      {
LABEL_251:
        v222 = (_BYTE *)v133;
      }
      v134 = (uint64_t)v238;
      if (v238)
      {
        if (v238 != v237)
        {
          v134 = (*(uint64_t (**)(void))(*v238 + 16))();
          goto LABEL_256;
        }
        v224 = v223;
        (*(void (**)(_QWORD *, _BYTE *))(v237[0] + 24))(v237, v223);
      }
      else
      {
LABEL_256:
        v224 = (_BYTE *)v134;
      }
      v135 = v240;
      if (v240)
      {
        if (v240 != v239)
        {
          v135 = (_BYTE *)(*(uint64_t (**)(void))(*(_QWORD *)v240 + 16))();
          goto LABEL_261;
        }
        v226 = v225;
        (*(void (**)(_QWORD *, _BYTE *))(v239[0] + 24))(v239, v225);
      }
      else
      {
LABEL_261:
        v226 = v135;
      }
      memset(&v191, 0, sizeof(v191));
      turi::join_impl::hash_join_executor::merge_rows_for_output(v55, (uint64_t)v227, (uint64_t)v221, (uint64_t ***)(v129 + 16), &v191);
      *(_QWORD *)&v218 = &v191;
      std::vector<std::vector<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v218);
      v136 = v226;
      if (v226 == v225)
      {
        v136 = v225;
        v137 = 4;
LABEL_267:
        (*(void (**)(void))(*v136 + 8 * v137))();
      }
      else if (v226)
      {
        v137 = 5;
        goto LABEL_267;
      }
      v138 = v224;
      if (v224 == v223)
      {
        v138 = v223;
        v139 = 4;
LABEL_272:
        (*(void (**)(void))(*v138 + 8 * v139))();
      }
      else if (v224)
      {
        v139 = 5;
        goto LABEL_272;
      }
      v140 = v222;
      if (v222 == v221)
      {
        v140 = v221;
        v141 = 4;
LABEL_277:
        (*(void (**)(void))(*v140 + 8 * v141))();
      }
      else if (v222)
      {
        v141 = 5;
        goto LABEL_277;
      }
      v142 = v240;
      if (v240 == v239)
      {
        v142 = v239;
        v143 = 4;
LABEL_282:
        (*(void (**)(void))(*v142 + 8 * v143))();
      }
      else if (v240)
      {
        v143 = 5;
        goto LABEL_282;
      }
      v144 = v238;
      if (v238 == v237)
      {
        v144 = v237;
        v145 = 4;
LABEL_287:
        (*(void (**)(void))(*v144 + 8 * v145))();
      }
      else if (v238)
      {
        v145 = 5;
        goto LABEL_287;
      }
      v146 = (timeval *)*((_QWORD *)&v236 + 1);
      if (*((timeval **)&v236 + 1) == &v235)
      {
        v146 = &v235;
        v147 = 4;
LABEL_292:
        (*(void (**)(void))(v146->tv_sec + 8 * v147))();
      }
      else if (*((_QWORD *)&v236 + 1))
      {
        v147 = 5;
        goto LABEL_292;
      }
    }
    v129 = *(_QWORD *)(v129 + 8);
    goto LABEL_241;
  }
LABEL_300:
  v148 = (int *)global_logger();
  if (v148[169] <= 2)
  {
    if (!cppipc::must_cancel((cppipc *)v148))
    {
      v149 = (file_logger *)global_logger();
      v150 = file_logger::start_stream(v149, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/join_impl.cpp", "grace_hash_join", 503, 1);
      v151 = pthread_getspecific(*((_QWORD *)v150 + 74));
      if (v151 && *((_BYTE *)v151 + 280))
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v151 + 2, (uint64_t)"Hash join time: ", 16);
      gettimeofday(&v235, 0);
      v152 = file_logger::operator<<<double>((uint64_t)v150);
      v153 = pthread_getspecific(*(_QWORD *)(v152 + 592));
      if (!v153)
        goto LABEL_308;
      if (!v153[280])
        goto LABEL_308;
      std::ios_base::getloc((const std::ios_base *)&v153[*(_QWORD *)(*((_QWORD *)v153 + 2) - 24) + 16]);
      v154 = std::locale::use_facet((const std::locale *)&v235, MEMORY[0x24BEDB350]);
      ((void (*)(const std::locale::facet *, uint64_t))v154->__vftable[2].~facet_0)(v154, 10);
      std::locale::~locale((std::locale *)&v235);
      std::ostream::put();
      std::ostream::flush();
      file_logger::stream_flush((file_logger *)v152);
      if (*(_DWORD *)(v152 + 600) != 7)
        goto LABEL_308;
LABEL_365:
      __print_back_trace();
      v178 = __cxa_allocate_exception(8uLL);
      *v178 = "LOG_FATAL encountered";
      __cxa_throw(v178, MEMORY[0x24BEDB718], 0);
    }
LABEL_363:
    log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
  }
LABEL_308:
  turi::sframe::close((turi::sframe *)v227);
  v155 = (int *)global_logger();
  if (v155[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v155))
      goto LABEL_363;
    v156 = (file_logger *)global_logger();
    v157 = file_logger::start_stream(v156, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/join_impl.cpp", "grace_hash_join", 506, 1);
    v158 = pthread_getspecific(*((_QWORD *)v157 + 74));
    if (v158 && *((_BYTE *)v158 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v158 + 2, (uint64_t)"Full join time: ", 16);
    gettimeofday(&v235, 0);
    v159 = file_logger::operator<<<double>((uint64_t)v157);
    v160 = pthread_getspecific(*(_QWORD *)(v159 + 592));
    if (v160)
    {
      if (*((_BYTE *)v160 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v160 + *(_QWORD *)(v160[2] - 24) + 16));
        v161 = std::locale::use_facet((const std::locale *)&v235, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v161->__vftable[2].~facet_0)(v161, 10);
        std::locale::~locale((std::locale *)&v235);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush((file_logger *)v159);
        if (*(_DWORD *)(v159 + 600) == 7)
          goto LABEL_365;
      }
    }
  }
  if (*((_BYTE *)v55 + 784))
  {
    std::vector<std::shared_ptr<turi::sarray<turi::flexible_type>>>::vector(&v235, __n);
    std::vector<std::string>::vector(&v191, __n);
    for (m = (_QWORD *)*((_QWORD *)v55 + 101); m; m = (_QWORD *)*m)
    {
      turi::sframe::select_column((uint64_t)v227, m[2], &v200);
      std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100](v235.tv_sec + 16 * m[3], (__int128 *)&v200);
      size = (std::__shared_weak_count *)v200.__r_.__value_.__l.__size_;
      if (v200.__r_.__value_.__l.__size_)
      {
        v164 = (unint64_t *)(v200.__r_.__value_.__l.__size_ + 8);
        do
          v165 = __ldaxr(v164);
        while (__stlxr(v165 - 1, v164));
        if (!v165)
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
      }
      v166 = m[2];
      if (0xAAAAAAAAAAAAAAABLL * ((v230 - v229) >> 3) <= v166)
        turi::sframe::column_name(unsigned long)const::{lambda(void)#1}::operator()();
      v167 = (__int128 *)(v229 + 24 * v166);
      if (*((char *)v167 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v200, *(const std::string::value_type **)v167, *((_QWORD *)v167 + 1));
      }
      else
      {
        v168 = *v167;
        v200.__r_.__value_.__r.__words[2] = *((_QWORD *)v167 + 2);
        *(_OWORD *)&v200.__r_.__value_.__l.__data_ = v168;
      }
      v169 = &v191.__begin_[m[3]];
      if (SHIBYTE(v169->__r_.__value_.__r.__words[2]) < 0)
        operator delete(v169->__r_.__value_.__l.__data_);
      v170 = *(_OWORD *)&v200.__r_.__value_.__l.__data_;
      v169->__r_.__value_.__r.__words[2] = v200.__r_.__value_.__r.__words[2];
      *(_OWORD *)&v169->__r_.__value_.__l.__data_ = v170;
    }
    turi::sframe::sframe((uint64_t)a2, (uint64_t **)&v235, (const void ***)&v191, 0);
    v200.__r_.__value_.__r.__words[0] = (std::string::size_type)&v191;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v200);
    v191.__begin_ = (std::vector<std::string>::pointer)&v235;
    std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v191);
    tv_sec = v186;
  }
  else
  {
    turi::sframe::sframe(a2, (uint64_t)v227);
  }
  v171 = v204;
  v204 = 0;
  if (v171)
    (*(void (**)(turi::sframe_reader *))(*(_QWORD *)v171 + 8))(v171);
  if (tv_sec)
    (*(void (**)(__darwin_time_t))(*(_QWORD *)tv_sec + 8))(tv_sec);
  if (v205)
  {
    v206 = (char *)v205;
    operator delete(v205);
  }
  v235.tv_sec = (__darwin_time_t)v208;
  std::vector<turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v235);
  if (__p)
  {
    v210 = (char *)__p;
    operator delete(__p);
  }
  v172 = v215;
  if (v215)
  {
    p_shared_owners = (unint64_t *)&v215->__shared_owners_;
    do
      v174 = __ldaxr(p_shared_owners);
    while (__stlxr(v174 - 1, p_shared_owners));
    if (!v174)
    {
      ((void (*)(std::__shared_weak_count *))v172->__on_zero_shared)(v172);
      std::__shared_weak_count::__release_weak(v172);
    }
  }
  v175 = v217;
  if (v217)
  {
    v176 = (unint64_t *)&v217->__shared_owners_;
    do
      v177 = __ldaxr(v176);
    while (__stlxr(v177 - 1, v176));
    if (!v177)
    {
      ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
      std::__shared_weak_count::__release_weak(v175);
    }
  }
  turi::sframe::~sframe((turi::sframe *)v227);
}

void sub_218173D54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *__p,uint64_t a57,uint64_t a58,char a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  uint64_t a70;
  uint64_t a72;
  uint64_t v72;
  uint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;

  std::locale::~locale((std::locale *)&STACK[0x3A8]);
  v74 = a55;
  a55 = 0;
  if (v74)
    (*(void (**)(uint64_t))(*(_QWORD *)v74 + 8))(v74);
  if (v72)
    (*(void (**)(uint64_t))(*(_QWORD *)v72 + 8))(v72);
  if (__p)
  {
    a57 = (uint64_t)__p;
    operator delete(__p);
  }
  a32 = (uint64_t)&a59;
  std::vector<turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a32);
  if (a62)
  {
    a63 = (uint64_t)a62;
    operator delete(a62);
  }
  v75 = (std::__shared_weak_count *)a70;
  if (a70)
  {
    v76 = (unint64_t *)(a70 + 8);
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v77 - 1, v76));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
  v78 = (std::__shared_weak_count *)a72;
  if (a72)
  {
    v79 = (unint64_t *)(a72 + 8);
    do
      v80 = __ldaxr(v79);
    while (__stlxr(v80 - 1, v79));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
    }
  }
  turi::sframe::~sframe((turi::sframe *)&STACK[0x280]);
  _Unwind_Resume(a1);
}

void turi::join_impl::hash_join_executor::grace_partition_frames(turi::join_impl::hash_join_executor *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int *v10;
  file_logger *v11;
  file_logger *started;
  _QWORD *v13;
  pthread_key_t *v14;
  _QWORD *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  uint64_t v30;
  std::__shared_weak_count *v31;

  v4 = *((_QWORD *)this + 4);
  if (!*((_BYTE *)this + 288))
    v4 = 0;
  v5 = *((_QWORD *)this + 80);
  v6 = v4 * *((_QWORD *)this + 3) / v5;
  v7 = *((_QWORD *)this + 41);
  if (!*((_BYTE *)this + 584))
    v7 = 0;
  v8 = v7 * *((_QWORD *)this + 40) / v5 + 1;
  if (v8 >= v6 + 1)
    v9 = v6 + 1;
  else
    v9 = v8;
  v10 = (int *)global_logger();
  if (v10[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v10))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/join_impl.cpp", "grace_partition_frames", 627, 1);
    v13 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && *((_BYTE *)v13 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13 + 2, (uint64_t)"Chose ", 6);
    v14 = (pthread_key_t *)file_logger::operator<<<unsigned long>((uint64_t)started);
    v15 = pthread_getspecific(v14[74]);
    if (v15 && *((_BYTE *)v15 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15 + 2, (uint64_t)" partitions for GRACE hash join\n", 32);
      file_logger::stream_flush((file_logger *)v14);
    }
  }
  turi::join_impl::hash_join_executor::grace_partition_frame((uint64_t)this, this, (uint64_t)this + 592, v9, &v30);
  turi::join_impl::hash_join_executor::grace_partition_frame((uint64_t)this, (turi::join_impl::hash_join_executor *)((char *)this + 296), (uint64_t)this + 616, v9, &v28);
  v16 = v31;
  *a2 = v30;
  a2[1] = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldxr(p_shared_owners);
    while (__stxr(v18 + 1, p_shared_owners));
  }
  v19 = v29;
  a2[2] = v28;
  a2[3] = v19;
  if (v19)
  {
    v20 = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
    v22 = v29;
    if (v29)
    {
      v23 = (unint64_t *)&v29->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
  }
  v25 = v31;
  if (v31)
  {
    v26 = (unint64_t *)&v31->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
}

void sub_218174338(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void turi::join_impl::hash_join_executor::grace_hash_join(void)::$_0::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/join_impl.cpp", 104);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"grace_left->size()", 18);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"_left_frame.size()", 18);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/join_impl.cpp", "operator()", 370, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::join_impl::hash_join_executor::grace_hash_join(void)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2181744D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::join_impl::hash_join_executor::grace_hash_join(void)::$_1::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/join_impl.cpp", 104);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"grace_right->size()", 19);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"_right_frame.size()", 19);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/join_impl.cpp", "operator()", 371, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::join_impl::hash_join_executor::grace_hash_join(void)::$_1::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2181746EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::join_impl::hash_join_executor::grace_hash_join(void)::$_2::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/join_impl.cpp", 104);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"num_segments", 12);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"grace_right->num_segments()", 27);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/join_impl.cpp", "operator()", 378, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::join_impl::hash_join_executor::grace_hash_join(void)::$_2::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_218174900(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::join_impl::hash_join_executor::grace_hash_join(void)::$_3::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/join_impl.cpp", 104);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"logical_right_segment_sizes.size()", 34);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"num_segments*result_frame.num_segments()", 40);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/join_impl.cpp", "operator()", 425, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::join_impl::hash_join_executor::grace_hash_join(void)::$_3::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_218174B14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::join_impl::hash_join_executor::merge_rows_for_output(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t ***a4, _QWORD *a5)
{
  uint64_t **v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;
  unsigned int v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  void *v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t **v45;
  uint64_t **v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  _QWORD *v61;
  _QWORD *i;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t *v71;
  unint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t *v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t *v78;
  unint64_t *v79;
  uint64_t v80;
  unint64_t *v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t *v84;
  unint64_t *v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t *v88;
  void *v89;
  void *v90;
  unsigned int v91;
  unint64_t *v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t *v95;
  void *v96;
  unint64_t *v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t *v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t *v103;
  uint64_t v104;
  BOOL v105;
  int v106;
  unint64_t *v108;
  unint64_t v109;
  unint64_t *v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t *v113;
  unint64_t *v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t *v117;
  void *v118;
  void *v119;
  unsigned int v120;
  unint64_t *v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t *v124;
  void *v125;
  unint64_t *v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t *v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t *v132;
  uint64_t v133;
  unint64_t *v134;
  unint64_t v135;
  unint64_t *v136;
  unint64_t v137;
  unint64_t *v138;
  unint64_t v139;
  unint64_t *v140;
  unint64_t v141;
  unint64_t *v142;
  unint64_t v143;
  unint64_t *v144;
  unint64_t v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t *v151;
  void ***v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  _BYTE v156[13];
  uint64_t v157;

  v157 = *MEMORY[0x24BDAC8D0];
  v8 = a4[1];
  v9 = 0xAAAAAAAAAAAAAAABLL * (v8 - *a4);
  v11 = *a5;
  v10 = a5[1];
  v12 = 0xAAAAAAAAAAAAAAABLL * ((v10 - *a5) >> 3);
  v13 = v12 * v9;
  if (!(v12 * v9))
  {
    if (v8 == *a4 && v10 == v11)
      return;
    if (v9 <= v12)
      v13 = 0xAAAAAAAAAAAAAAABLL * ((v10 - v11) >> 3);
    else
      v13 = 0xAAAAAAAAAAAAAAABLL * (v8 - *a4);
  }
  v15 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)&v156[5] = 0x700000000000000;
  *(_QWORD *)v156 = 0;
  std::vector<turi::flexible_type>::vector(&v151, v15, (uint64_t *)v156);
  std::vector<std::vector<turi::flexible_type>>::vector(&v153, v13, &v151);
  v155 = (unint64_t)&v151;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v155);
  switch(v156[12])
  {
    case 2:
      v16 = *(unint64_t **)v156;
      do
      {
        v17 = __ldaxr(v16);
        v18 = v17 - 1;
      }
      while (__stlxr(v18, v16));
      if (!v18)
      {
        v19 = *(_QWORD *)v156;
        if (*(_QWORD *)v156)
        {
          if (*(char *)(*(_QWORD *)v156 + 31) < 0)
            operator delete(*(void **)(*(_QWORD *)v156 + 8));
          v20 = v19;
          v21 = 0x1012C404EF22A49;
          goto LABEL_50;
        }
      }
      break;
    case 3:
      v33 = *(unint64_t **)v156;
      do
      {
        v34 = __ldaxr(v33);
        v35 = v34 - 1;
      }
      while (__stlxr(v35, v33));
      if (!v35)
      {
        v36 = *(_QWORD *)v156;
        if (*(_QWORD *)v156)
        {
          v37 = *(void **)(*(_QWORD *)v156 + 8);
          if (v37)
          {
            *(_QWORD *)(*(_QWORD *)v156 + 16) = v37;
            operator delete(v37);
          }
          v20 = v36;
          v21 = 0x1080C409938AC02;
          goto LABEL_50;
        }
      }
      break;
    case 4:
      v22 = *(unint64_t **)v156;
      do
      {
        v23 = __ldaxr(v22);
        v24 = v23 - 1;
      }
      while (__stlxr(v24, v22));
      if (!v24)
      {
        v25 = *(_QWORD *)v156;
        if (*(_QWORD *)v156)
        {
          v155 = *(_QWORD *)v156 + 8;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v155);
          goto LABEL_43;
        }
      }
      break;
    case 5:
      v38 = *(unint64_t **)v156;
      do
      {
        v39 = __ldaxr(v38);
        v40 = v39 - 1;
      }
      while (__stlxr(v40, v38));
      if (!v40)
      {
        v25 = *(_QWORD *)v156;
        if (*(_QWORD *)v156)
        {
          v155 = *(_QWORD *)v156 + 8;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v155);
LABEL_43:
          v20 = v25;
          v21 = 0x1020C405E66F15BLL;
          goto LABEL_50;
        }
      }
      break;
    case 8:
      v41 = *(unint64_t **)v156;
      do
      {
        v42 = __ldaxr(v41);
        v43 = v42 - 1;
      }
      while (__stlxr(v43, v41));
      if (!v43)
      {
        v44 = *(_QWORD *)v156;
        if (*(_QWORD *)v156)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)v156 + 16));
          v20 = v44;
          v32 = -235920773;
          goto LABEL_49;
        }
      }
      break;
    case 9:
      v26 = *(unint64_t **)v156;
      do
      {
        v27 = __ldaxr(v26);
        v28 = v27 - 1;
      }
      while (__stlxr(v28, v26));
      if (!v28)
      {
        v29 = *(_QWORD *)v156;
        if (*(_QWORD *)v156)
        {
          v30 = *(void **)(*(_QWORD *)v156 + 48);
          if (v30)
          {
            *(_QWORD *)(*(_QWORD *)v156 + 56) = v30;
            operator delete(v30);
          }
          v31 = *(void **)(v29 + 24);
          if (v31)
          {
            *(_QWORD *)(v29 + 32) = v31;
            operator delete(v31);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v29 + 8);
          v20 = v29;
          v32 = 2071181815;
LABEL_49:
          v21 = v32 | 0x1030C4000000000;
LABEL_50:
          MEMORY[0x219A19A08](v20, v21);
        }
      }
      break;
    default:
      break;
  }
  v46 = *a4;
  v45 = a4[1];
  if (v45 != *a4)
  {
    v47 = 0;
    v48 = 0xAAAAAAAAAAAAAAABLL * (v45 - *a4);
    if (v13 / v48 <= 1)
      v49 = 1;
    else
      v49 = v13 / v48;
    do
    {
      v50 = v49;
      if (v48 <= v13)
      {
        do
        {
          std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<turi::flexible_type const*,turi::flexible_type const*,turi::flexible_type*>((uint64_t)v156, *v46, v46[1], *(_QWORD *)(v153 + 24 * v47));
          --v50;
        }
        while (v50);
        v45 = a4[1];
      }
      v46 += 3;
      ++v47;
    }
    while (v46 != v45);
    v155 = 0xAAAAAAAAAAAAAAABLL * ((v154 - v153) >> 3);
    *(_QWORD *)v156 = v47;
    if (v47 != v155)
    {
      v151 = (uint64_t *)v156;
      v152 = (void ***)&v155;
      turi::join_impl::hash_join_executor::merge_rows_for_output(turi::sframe &,turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>,std::vector<std::vector<turi::flexible_type>> const&,std::vector<std::vector<turi::flexible_type>> const)::$_0::operator()();
    }
  }
  v51 = (_QWORD *)a5[1];
  v52 = (uint64_t)v51 - *a5;
  if (v51 == (_QWORD *)*a5)
  {
    v58 = v153;
    v57 = v154;
  }
  else
  {
    v53 = (uint64_t)(*(_QWORD *)(*a5 + 8) - *(_QWORD *)*a5) >> 4;
    v54 = (uint64_t)(a1[78] - a1[77]) >> 3;
    v155 = v54;
    *(_QWORD *)v156 = v53;
    if (v54 > v53)
    {
      v151 = (uint64_t *)v156;
      v152 = (void ***)&v155;
      turi::join_impl::hash_join_executor::merge_rows_for_output(turi::sframe &,turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>,std::vector<std::vector<turi::flexible_type>> const&,std::vector<std::vector<turi::flexible_type>> const)::$_1::operator()();
    }
    v55 = 0xAAAAAAAAAAAAAAABLL * (v52 >> 3);
    if (v55 <= v13)
    {
      v59 = 0;
      v56 = 0;
      v60 = v13 / v55;
      v149 = v54 - v53;
      v61 = a1 + 82;
      if (v60 <= 1)
        v60 = 1;
      v147 = v60;
      do
      {
        v148 = v59;
        for (i = (_QWORD *)*a5; i != v51; i += 3)
        {
          v63 = *(_QWORD *)(v153 + 24 * v56 + 8);
          *(_QWORD *)v156 = 0;
          if (i[1] != *i)
          {
            v64 = v63 + 16 * v149;
            do
            {
              v65 = std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::find<unsigned long>(v61, (unint64_t *)v156);
              if (v65)
              {
                if (a4[1] == *a4)
                {
                  v66 = *i + 16 * *(_QWORD *)v156;
                  v67 = *(_QWORD *)(v153 + 24 * v56) + 16 * v65[3];
                  if (v66 != v67)
                  {
                    switch(*(_BYTE *)(v67 + 12))
                    {
                      case 2:
                        v68 = *(unint64_t **)v67;
                        do
                        {
                          v69 = __ldaxr(v68);
                          v70 = v69 - 1;
                        }
                        while (__stlxr(v70, v68));
                        if (!v70)
                        {
                          v71 = *(unint64_t **)v67;
                          if (!*(_QWORD *)v67)
                            goto LABEL_170;
                          if (*((char *)v71 + 31) < 0)
                            operator delete((void *)v71[1]);
                          v72 = v71;
                          v73 = 0x1012C404EF22A49;
                          goto LABEL_169;
                        }
                        break;
                      case 3:
                        v121 = *(unint64_t **)v67;
                        do
                        {
                          v122 = __ldaxr(v121);
                          v123 = v122 - 1;
                        }
                        while (__stlxr(v123, v121));
                        if (!v123)
                        {
                          v124 = *(unint64_t **)v67;
                          if (!*(_QWORD *)v67)
                            goto LABEL_170;
                          v125 = (void *)v124[1];
                          if (v125)
                          {
                            v124[2] = (unint64_t)v125;
                            operator delete(v125);
                          }
                          v72 = v124;
                          v73 = 0x1080C409938AC02;
                          goto LABEL_169;
                        }
                        break;
                      case 4:
                        v110 = *(unint64_t **)v67;
                        do
                        {
                          v111 = __ldaxr(v110);
                          v112 = v111 - 1;
                        }
                        while (__stlxr(v112, v110));
                        if (!v112)
                        {
                          v113 = *(unint64_t **)v67;
                          if (!*(_QWORD *)v67)
                            goto LABEL_170;
                          v151 = (uint64_t *)(v113 + 1);
                          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v151);
                          goto LABEL_162;
                        }
                        break;
                      case 5:
                        v126 = *(unint64_t **)v67;
                        do
                        {
                          v127 = __ldaxr(v126);
                          v128 = v127 - 1;
                        }
                        while (__stlxr(v128, v126));
                        if (!v128)
                        {
                          v113 = *(unint64_t **)v67;
                          if (!*(_QWORD *)v67)
                            goto LABEL_170;
                          v151 = (uint64_t *)(v113 + 1);
                          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v151);
LABEL_162:
                          v72 = v113;
                          v73 = 0x1020C405E66F15BLL;
                          goto LABEL_169;
                        }
                        break;
                      case 8:
                        v129 = *(unint64_t **)v67;
                        do
                        {
                          v130 = __ldaxr(v129);
                          v131 = v130 - 1;
                        }
                        while (__stlxr(v131, v129));
                        if (!v131)
                        {
                          v132 = *(unint64_t **)v67;
                          if (!*(_QWORD *)v67)
                            goto LABEL_170;
                          boost::detail::shared_count::~shared_count((unsigned int **)v132 + 2);
                          v72 = v132;
                          v120 = -235920773;
                          goto LABEL_168;
                        }
                        break;
                      case 9:
                        v114 = *(unint64_t **)v67;
                        do
                        {
                          v115 = __ldaxr(v114);
                          v116 = v115 - 1;
                        }
                        while (__stlxr(v116, v114));
                        if (!v116)
                        {
                          v117 = *(unint64_t **)v67;
                          if (*(_QWORD *)v67)
                          {
                            v118 = (void *)v117[6];
                            if (v118)
                            {
                              v117[7] = (unint64_t)v118;
                              operator delete(v118);
                            }
                            v119 = (void *)v117[3];
                            if (v119)
                            {
                              v117[4] = (unint64_t)v119;
                              operator delete(v119);
                            }
                            std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v117 + 1));
                            v72 = v117;
                            v120 = 2071181815;
LABEL_168:
                            v73 = v120 | 0x1030C4000000000;
LABEL_169:
                            MEMORY[0x219A19A08](v72, v73);
                          }
LABEL_170:
                          *(_QWORD *)v67 = 0;
                        }
                        break;
                      default:
                        break;
                    }
                    v133 = *(_QWORD *)v66;
                    *(_QWORD *)(v67 + 5) = *(_QWORD *)(v66 + 5);
                    *(_QWORD *)v67 = v133;
                    LODWORD(v133) = *(unsigned __int8 *)(v66 + 12);
                    *(_BYTE *)(v67 + 12) = v133;
                    switch((int)v133)
                    {
                      case 2:
                        v134 = *(unint64_t **)v67;
                        do
                          v135 = __ldaxr(v134);
                        while (__stlxr(v135 + 1, v134));
                        break;
                      case 3:
                        v140 = *(unint64_t **)v67;
                        do
                          v141 = __ldaxr(v140);
                        while (__stlxr(v141 + 1, v140));
                        break;
                      case 4:
                        v136 = *(unint64_t **)v67;
                        do
                          v137 = __ldaxr(v136);
                        while (__stlxr(v137 + 1, v136));
                        break;
                      case 5:
                        v142 = *(unint64_t **)v67;
                        do
                          v143 = __ldaxr(v142);
                        while (__stlxr(v143 + 1, v142));
                        break;
                      case 8:
                        v144 = *(unint64_t **)v67;
                        do
                          v145 = __ldaxr(v144);
                        while (__stlxr(v145 + 1, v144));
                        break;
                      case 9:
                        v138 = *(unint64_t **)v67;
                        do
                          v139 = __ldaxr(v138);
                        while (__stlxr(v139 + 1, v138));
                        break;
                      default:
                        break;
                    }
                  }
                }
              }
              else
              {
                v74 = *i + 16 * *(_QWORD *)v156;
                if (v74 != v64)
                {
                  switch(*(_BYTE *)(v64 + 12))
                  {
                    case 2:
                      v75 = *(unint64_t **)v64;
                      do
                      {
                        v76 = __ldaxr(v75);
                        v77 = v76 - 1;
                      }
                      while (__stlxr(v77, v75));
                      if (!v77)
                      {
                        v78 = *(unint64_t **)v64;
                        if (!*(_QWORD *)v64)
                          goto LABEL_126;
                        if (*((char *)v78 + 31) < 0)
                          operator delete((void *)v78[1]);
                        v79 = v78;
                        v80 = 0x1012C404EF22A49;
                        goto LABEL_125;
                      }
                      break;
                    case 3:
                      v92 = *(unint64_t **)v64;
                      do
                      {
                        v93 = __ldaxr(v92);
                        v94 = v93 - 1;
                      }
                      while (__stlxr(v94, v92));
                      if (!v94)
                      {
                        v95 = *(unint64_t **)v64;
                        if (!*(_QWORD *)v64)
                          goto LABEL_126;
                        v96 = (void *)v95[1];
                        if (v96)
                        {
                          v95[2] = (unint64_t)v96;
                          operator delete(v96);
                        }
                        v79 = v95;
                        v80 = 0x1080C409938AC02;
                        goto LABEL_125;
                      }
                      break;
                    case 4:
                      v81 = *(unint64_t **)v64;
                      do
                      {
                        v82 = __ldaxr(v81);
                        v83 = v82 - 1;
                      }
                      while (__stlxr(v83, v81));
                      if (!v83)
                      {
                        v84 = *(unint64_t **)v64;
                        if (!*(_QWORD *)v64)
                          goto LABEL_126;
                        v151 = (uint64_t *)(v84 + 1);
                        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v151);
                        goto LABEL_118;
                      }
                      break;
                    case 5:
                      v97 = *(unint64_t **)v64;
                      do
                      {
                        v98 = __ldaxr(v97);
                        v99 = v98 - 1;
                      }
                      while (__stlxr(v99, v97));
                      if (!v99)
                      {
                        v84 = *(unint64_t **)v64;
                        if (!*(_QWORD *)v64)
                          goto LABEL_126;
                        v151 = (uint64_t *)(v84 + 1);
                        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v151);
LABEL_118:
                        v79 = v84;
                        v80 = 0x1020C405E66F15BLL;
                        goto LABEL_125;
                      }
                      break;
                    case 8:
                      v100 = *(unint64_t **)v64;
                      do
                      {
                        v101 = __ldaxr(v100);
                        v102 = v101 - 1;
                      }
                      while (__stlxr(v102, v100));
                      if (!v102)
                      {
                        v103 = *(unint64_t **)v64;
                        if (!*(_QWORD *)v64)
                          goto LABEL_126;
                        boost::detail::shared_count::~shared_count((unsigned int **)v103 + 2);
                        v79 = v103;
                        v91 = -235920773;
                        goto LABEL_124;
                      }
                      break;
                    case 9:
                      v85 = *(unint64_t **)v64;
                      do
                      {
                        v86 = __ldaxr(v85);
                        v87 = v86 - 1;
                      }
                      while (__stlxr(v87, v85));
                      if (!v87)
                      {
                        v88 = *(unint64_t **)v64;
                        if (*(_QWORD *)v64)
                        {
                          v89 = (void *)v88[6];
                          if (v89)
                          {
                            v88[7] = (unint64_t)v89;
                            operator delete(v89);
                          }
                          v90 = (void *)v88[3];
                          if (v90)
                          {
                            v88[4] = (unint64_t)v90;
                            operator delete(v90);
                          }
                          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v88 + 1));
                          v79 = v88;
                          v91 = 2071181815;
LABEL_124:
                          v80 = v91 | 0x1030C4000000000;
LABEL_125:
                          MEMORY[0x219A19A08](v79, v80);
                        }
LABEL_126:
                        *(_QWORD *)v64 = 0;
                      }
                      break;
                    default:
                      break;
                  }
                  v104 = *(_QWORD *)v74;
                  *(_QWORD *)(v64 + 5) = *(_QWORD *)(v74 + 5);
                  *(_QWORD *)v64 = v104;
                  LODWORD(v104) = *(unsigned __int8 *)(v74 + 12);
                  *(_BYTE *)(v64 + 12) = v104;
                  v105 = v104 > 9;
                  v106 = (1 << v104) & 0x33C;
                  if (!v105 && v106 != 0)
                  {
                    v108 = *(unint64_t **)v64;
                    do
                      v109 = __ldaxr(v108);
                    while (__stlxr(v109 + 1, v108));
                  }
                }
                v64 += 16;
              }
              ++*(_QWORD *)v156;
            }
            while (*(_QWORD *)v156 < (unint64_t)((uint64_t)(i[1] - *i) >> 4));
            v51 = (_QWORD *)a5[1];
          }
          ++v56;
        }
        v59 = v148 + 1;
      }
      while (v148 + 1 != v147);
    }
    else
    {
      v56 = 0;
    }
    v58 = v153;
    v57 = v154;
    v155 = 0xAAAAAAAAAAAAAAABLL * ((v154 - v153) >> 3);
    *(_QWORD *)v156 = v56;
    if (v56 != v155)
    {
      v151 = (uint64_t *)v156;
      v152 = (void ***)&v155;
      turi::join_impl::hash_join_executor::merge_rows_for_output(turi::sframe &,turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>,std::vector<std::vector<turi::flexible_type>> const&,std::vector<std::vector<turi::flexible_type>> const)::$_2::operator()();
    }
  }
  while (v58 != v57)
  {
    v146 = *(_QWORD *)(a3 + 24);
    if (!v146)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v146 + 48))(v146, v58);
    v58 += 24;
    v57 = v154;
  }
  v151 = &v153;
  std::vector<std::vector<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v151);
}

void sub_2181755C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void **a21,_QWORD *a22,int a23,char a24)
{
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  void *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  _QWORD *v46;
  unsigned int v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;

  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a21);
  switch(a24)
  {
    case 2:
      v25 = a22;
      do
      {
        v26 = __ldaxr(v25);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, v25));
      if (v27)
        goto LABEL_39;
      v28 = a22;
      if (!a22)
        goto LABEL_39;
      if (*((char *)a22 + 31) < 0)
        operator delete((void *)a22[1]);
      v29 = v28;
      v30 = 0x1012C404EF22A49;
      goto LABEL_38;
    case 3:
      v31 = a22;
      do
      {
        v32 = __ldaxr(v31);
        v33 = v32 - 1;
      }
      while (__stlxr(v33, v31));
      if (v33)
        goto LABEL_39;
      v34 = a22;
      if (!a22)
        goto LABEL_39;
      v35 = (void *)a22[1];
      if (v35)
      {
        a22[2] = v35;
        operator delete(v35);
      }
      v29 = v34;
      v30 = 0x1080C409938AC02;
      goto LABEL_38;
    case 4:
      v36 = a22;
      do
      {
        v37 = __ldaxr(v36);
        v38 = v37 - 1;
      }
      while (__stlxr(v38, v36));
      if (v38)
        goto LABEL_39;
      v39 = a22;
      if (!a22)
        goto LABEL_39;
      a21 = (void **)(a22 + 1);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a21);
      goto LABEL_26;
    case 5:
      v40 = a22;
      do
      {
        v41 = __ldaxr(v40);
        v42 = v41 - 1;
      }
      while (__stlxr(v42, v40));
      if (v42)
        goto LABEL_39;
      v39 = a22;
      if (!a22)
        goto LABEL_39;
      a21 = (void **)(a22 + 1);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&a21);
LABEL_26:
      v29 = v39;
      v30 = 0x1020C405E66F15BLL;
      goto LABEL_38;
    case 8:
      v43 = a22;
      do
      {
        v44 = __ldaxr(v43);
        v45 = v44 - 1;
      }
      while (__stlxr(v45, v43));
      if (v45)
        goto LABEL_39;
      v46 = a22;
      if (!a22)
        goto LABEL_39;
      boost::detail::shared_count::~shared_count((unsigned int **)a22 + 2);
      v29 = v46;
      v47 = -235920773;
      goto LABEL_37;
    case 9:
      v48 = a22;
      do
      {
        v49 = __ldaxr(v48);
        v50 = v49 - 1;
      }
      while (__stlxr(v50, v48));
      if (v50 || !a22)
        goto LABEL_39;
      v29 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(a22);
      v47 = 2071181815;
LABEL_37:
      v30 = v47 | 0x1030C4000000000;
LABEL_38:
      MEMORY[0x219A19A08](v29, v30);
LABEL_39:
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_39;
  }
}

turi::sframe *turi::sframe::sframe(turi::sframe *a1, uint64_t a2)
{
  turi::sframe *v4;

  v4 = turi::sframe::sframe(a1);
  turi::sframe::operator=((uint64_t)v4, a2);
  return a1;
}

void sub_2181757EC(_Unwind_Exception *a1)
{
  turi::sframe *v1;

  turi::sframe::~sframe(v1);
  _Unwind_Resume(a1);
}

void turi::join_impl::hash_join_executor::merge_rows_for_output(turi::sframe &,turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>,std::vector<std::vector<turi::flexible_type>> const&,std::vector<std::vector<turi::flexible_type>> const)::$_0::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/join_impl.cpp", 104);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"i", 1);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"rows_to_emit.size()", 19);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/join_impl.cpp", "operator()", 563, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::join_impl::hash_join_executor::merge_rows_for_output(turi::sframe &,turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>,std::vector<std::vector<turi::flexible_type>> const&,std::vector<std::vector<turi::flexible_type>> const)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_21817598C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::join_impl::hash_join_executor::merge_rows_for_output(turi::sframe &,turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>,std::vector<std::vector<turi::flexible_type>> const&,std::vector<std::vector<turi::flexible_type>> const)::$_1::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/join_impl.cpp", 104);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"right_rows[0].size()", 20);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)">=", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"_right_join_positions.size()", 28);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)">=", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/join_impl.cpp", "operator()", 568, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::join_impl::hash_join_executor::merge_rows_for_output(turi::sframe &,turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>,std::vector<std::vector<turi::flexible_type>> const&,std::vector<std::vector<turi::flexible_type>> const)::$_1::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_218175BA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::join_impl::hash_join_executor::merge_rows_for_output(turi::sframe &,turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>,std::vector<std::vector<turi::flexible_type>> const&,std::vector<std::vector<turi::flexible_type>> const)::$_2::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/join_impl.cpp", 104);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"row_cntr", 8);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"rows_to_emit.size()", 19);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/join_impl.cpp", "operator()", 600, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::join_impl::hash_join_executor::merge_rows_for_output(turi::sframe &,turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>,std::vector<std::vector<turi::flexible_type>> const&,std::vector<std::vector<turi::flexible_type>> const)::$_2::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_218175DB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::join_impl::hash_join_executor::grace_partition_frame(uint64_t a1@<X0>, const turi::sframe *a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  unint64_t v5;
  int *v10;
  file_logger *v11;
  file_logger *started;
  _QWORD *v13;
  _QWORD *v14;
  const std::locale::facet *v15;
  uint64_t v16;
  _BYTE *v17;
  std::locale *v18;
  uint64_t v19;
  unint64_t i;
  std::string::size_type v21;
  std::string::size_type v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  turi::thread_pool *v29;
  turi::thread_pool *instance;
  turi::thread *v31;
  turi::thread_pool *tls_data;
  turi::thread_pool *v33;
  uint64_t v34;
  double v35;
  turi::thread *v36;
  unint64_t v37;
  uint64_t j;
  turi::sframe_reader *v39;
  _QWORD *exception;
  turi::sframe_reader *v41;
  _QWORD v42[3];
  std::string __p;
  unint64_t v44;
  void *v45;
  __int128 *v46;
  unint64_t v47;
  unint64_t v48;
  __int128 v49;
  unint64_t *v50;
  __int128 v51;
  std::locale v52;
  void *locale;
  char *v54;
  std::locale *v55;
  _BYTE v56[24];
  _BYTE *v57;
  _BYTE v58[24];
  _BYTE *v59;
  uint64_t v60;

  v5 = a4;
  v60 = *MEMORY[0x24BDAC8D0];
  v44 = a4;
  v10 = (int *)global_logger();
  if (v10[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v10))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/join_impl.cpp", "grace_partition_frame", 643, 1);
    v13 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && *((_BYTE *)v13 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13 + 2, (uint64_t)"Function entry", 14);
    v14 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v14 && *((_BYTE *)v14 + 280))
    {
      std::ios_base::getloc((const std::ios_base *)((char *)v14 + *(_QWORD *)(v14[2] - 24) + 16));
      v15 = std::locale::use_facet(&v52, MEMORY[0x24BEDB350]);
      ((void (*)(const std::locale::facet *, uint64_t))v15->__vftable[2].~facet_0)(v15, 10);
      std::locale::~locale(&v52);
      std::ostream::put();
      std::ostream::flush();
      file_logger::stream_flush(started);
      if (*((_DWORD *)started + 150) == 7)
      {
        __print_back_trace();
        exception = __cxa_allocate_exception(8uLL);
        *exception = "LOG_FATAL encountered";
        __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
      }
      v5 = v44;
    }
  }
  if (v5 == 1)
  {
    std::allocate_shared[abi:ne180100]<turi::sframe,std::allocator<turi::sframe>,turi::sframe const&,void>(a2, a5);
  }
  else
  {
    if (!v5)
      turi::join_impl::hash_join_executor::grace_partition_frame(turi::sframe const&,std::vector<unsigned long> const&,unsigned long)::$_0::operator()();
    _ZNSt3__115allocate_sharedB8ne180100IN4turi6sframeENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(a5);
    v16 = *a5;
    std::string::basic_string[abi:ne180100]<0>(&v49, "data");
    v52.__locale_ = 0;
    locale = 0;
    v54 = 0;
    v52.__locale_ = (std::locale::__imp *)operator new(0x18uLL);
    locale = v52.__locale_;
    v54 = (char *)v52.__locale_ + 24;
    locale = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v54, &v49, &v51, (std::string *)v52.__locale_);
    v17 = operator new(1uLL);
    v45 = v17;
    *v17 = 2;
    v46 = (__int128 *)(v17 + 1);
    v47 = (unint64_t)(v17 + 1);
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    turi::sframe::open_for_write(v16, &v52, &v45, &__p, v44, 1);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v45)
    {
      v46 = (__int128 *)v45;
      operator delete(v45);
    }
    v45 = &v52;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v45);
    if (SHIBYTE(v50) < 0)
      operator delete((void *)v49);
    std::vector<turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>>::vector(&__p, v44);
    v18 = (std::locale *)std::vector<turi::mutex>::vector(v42, v44);
    if (v44)
    {
      v19 = 0;
      for (i = 0; i < v44; ++i)
      {
        (*(void (**)(std::locale *__return_ptr, uint64_t, unint64_t))(*(_QWORD *)*a5 + 32))(&v52, *a5, i);
        v21 = __p.__r_.__value_.__r.__words[0];
        v22 = __p.__r_.__value_.__r.__words[0] + v19;
        std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::operator=[abi:ne180100]((_QWORD *)(__p.__r_.__value_.__r.__words[0] + v19), (uint64_t)&v52);
        std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::operator=[abi:ne180100]((_QWORD *)(v22 + 32), (uint64_t)v56);
        std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::operator=[abi:ne180100]((_QWORD *)(v21 + v19 + 64), (uint64_t)v58);
        v23 = v59;
        if (v59 == v58)
        {
          v23 = v58;
          v24 = 4;
        }
        else
        {
          if (!v59)
            goto LABEL_25;
          v24 = 5;
        }
        (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_25:
        v25 = v57;
        if (v57 == v56)
        {
          v25 = v56;
          v26 = 4;
        }
        else
        {
          if (!v57)
            goto LABEL_30;
          v26 = 5;
        }
        (*(void (**)(void))(*v25 + 8 * v26))();
LABEL_30:
        v18 = v55;
        if (v55 == &v52)
        {
          v18 = &v52;
          v27 = 4;
          goto LABEL_34;
        }
        if (v55)
        {
          v27 = 5;
LABEL_34:
          v18 = (std::locale *)(*((uint64_t (**)(void))v18->__locale_ + v27))();
        }
        v19 += 96;
      }
    }
    v28 = turi::thread::cpu_count((turi::thread *)v18);
    turi::sframe::get_reader(a2, v28, &v41);
    v29 = (turi::thread_pool *)(*(uint64_t (**)(turi::sframe_reader *))(*(_QWORD *)v41 + 16))(v41);
    *(_QWORD *)&v49 = &v41;
    *((_QWORD *)&v49 + 1) = a3;
    v50 = &v44;
    *(_QWORD *)&v51 = v42;
    *((_QWORD *)&v51 + 1) = &__p;
    instance = (turi::thread_pool *)turi::thread_pool::get_instance(v29);
    v31 = (turi::thread *)turi::thread_pool::size(instance);
    tls_data = (turi::thread_pool *)turi::thread::get_tls_data(v31);
    if (*((_BYTE *)tls_data + 8) || (unint64_t)v31 <= 1)
    {
      if (v29)
      {
        for (j = 0; (turi::thread_pool *)j != v29; ++j)
          turi::join_impl::hash_join_executor::grace_partition_frame(turi::sframe const&,std::vector<unsigned long> const&,unsigned long)::$_1::operator()((_QWORD **)&v49, j);
      }
    }
    else
    {
      v33 = (turi::thread_pool *)turi::thread_pool::get_instance(tls_data);
      turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)&v52, v33);
      v34 = 0;
      v35 = (double)(unint64_t)v29 / (double)(unint64_t)v31;
      do
      {
        v36 = (turi::thread *)(v34 + 1);
        v37 = (unint64_t)(v35 * (double)(unint64_t)(v34 + 1) + 0.0);
        if ((turi::thread *)v34 == (turi::thread *)((char *)v31 - 1))
          v37 = (unint64_t)v29;
        v47 = (unint64_t)(v35 * (double)(unint64_t)v34 + 0.0);
        v48 = v37;
        v45 = (char *)boost::function0<void>::assign_to<void turi::parallel_for<turi::join_impl::hash_join_executor::grace_partition_frame(turi::sframe const&,std::vector<unsigned long> const&,unsigned long)::$_1>(unsigned long,unsigned long,turi::join_impl::hash_join_executor::grace_partition_frame(turi::sframe const&,std::vector<unsigned long> const&,unsigned long)::$_1 const&)::{lambda(void)#1}>(turi::join_impl::hash_join_executor::grace_partition_frame(turi::sframe const&,std::vector<unsigned long> const&,unsigned long)::$_1)::stored_vtable
            + 1;
        v46 = &v49;
        turi::parallel_task_queue::launch((uint64_t)&v52, (uint64_t)&v45, v34);
        boost::function0<void>::~function0((uint64_t *)&v45);
        v34 = (uint64_t)v36;
      }
      while (v36 != v31);
      turi::parallel_task_queue::join((turi::parallel_task_queue *)&v52);
      turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)&v52);
    }
    (*(void (**)(uint64_t))(*(_QWORD *)*a5 + 40))(*a5);
    *(_BYTE *)(a1 + 832) = 1;
    v39 = v41;
    v41 = 0;
    if (v39)
      (*(void (**)(turi::sframe_reader *))(*(_QWORD *)v39 + 8))(v39);
    v52.__locale_ = (std::locale::__imp *)v42;
    std::vector<turi::mutex>::__destroy_vector::operator()[abi:ne180100]((void ***)&v52);
    v52.__locale_ = (std::locale::__imp *)&__p;
    std::vector<turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v52);
  }
}

void sub_218176380(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,char *p_p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,std::locale a33,uint64_t a34)
{
  uint64_t v34;

  turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)&a33);
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  p_p = &a11;
  std::vector<turi::mutex>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p);
  p_p = (char *)&__p;
  std::vector<turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v34);
  _Unwind_Resume(a1);
}

void std::__list_imp<turi::join_impl::hash_join_row_t>::clear(char *a1)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  char *v5;
  void **v6;

  if (*((_QWORD *)a1 + 2))
  {
    v2 = *(_QWORD *)a1;
    v3 = (char *)*((_QWORD *)a1 + 1);
    v4 = *(_QWORD *)v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*(_QWORD *)a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    *((_QWORD *)a1 + 2) = 0;
    if (v3 != a1)
    {
      do
      {
        v5 = (char *)*((_QWORD *)v3 + 1);
        v6 = (void **)(v3 + 16);
        std::vector<std::vector<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v6);
        operator delete(v3);
        v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

void sub_2181766C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

uint64_t turi::join_impl::join_hash_table::join_hash_table(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>((_QWORD *)(a1 + 40), *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  return a1;
}

void sub_2181767A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<unsigned long,std::list<turi::join_impl::hash_join_row_t>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::list<turi::join_impl::hash_join_row_t>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::list<turi::join_impl::hash_join_row_t>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::list<turi::join_impl::hash_join_row_t>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long,std::list<turi::join_impl::hash_join_row_t>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::list<turi::join_impl::hash_join_row_t>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::list<turi::join_impl::hash_join_row_t>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::list<turi::join_impl::hash_join_row_t>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<unsigned long,std::list<turi::join_impl::hash_join_row_t>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::list<turi::join_impl::hash_join_row_t>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::list<turi::join_impl::hash_join_row_t>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::list<turi::join_impl::hash_join_row_t>>>>::__deallocate_node(a1, *(char **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<unsigned long,std::list<turi::join_impl::hash_join_row_t>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::list<turi::join_impl::hash_join_row_t>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::list<turi::join_impl::hash_join_row_t>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::list<turi::join_impl::hash_join_row_t>>>>::__deallocate_node(uint64_t a1, char *a2)
{
  char *v2;
  char *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = *(char **)v2;
      std::__list_imp<turi::join_impl::hash_join_row_t>::clear(v2 + 24);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void std::vector<std::vector<turi::flexible_type>>::__assign_with_size[abi:ne180100]<std::vector<turi::flexible_type> const*,std::vector<turi::flexible_type> const*>(uint64_t a1, uint64_t **a2, uint64_t **a3, unint64_t a4)
{
  uint64_t v8;
  void **v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t **v13;
  void **v14;
  void **v15;
  void **v16;
  char v17;
  char v18;
  void **v19;

  v8 = a1 + 16;
  v9 = *(void ***)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a4)
  {
    std::vector<std::vector<turi::flexible_type>>::__vdeallocate((void ***)a1);
    if (a4 > 0xAAAAAAAAAAAAAAALL)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3);
    if (v10 <= a4)
      v10 = a4;
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v10;
    std::vector<std::string>::__vallocate[abi:ne180100]((_QWORD *)a1, v11);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<turi::flexible_type>>,std::vector<turi::flexible_type> const*,std::vector<turi::flexible_type> const*,std::vector<turi::flexible_type>*>(v8, a2, a3, *(_QWORD **)(a1 + 8));
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3) < a4)
  {
    v13 = &a2[(uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3];
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<turi::flexible_type> const*,std::vector<turi::flexible_type> const*,std::vector<turi::flexible_type>*>((uint64_t)&v17, a2, v13, (uint64_t)v9);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<turi::flexible_type>>,std::vector<turi::flexible_type> const*,std::vector<turi::flexible_type> const*,std::vector<turi::flexible_type>*>(v8, v13, a3, *(_QWORD **)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = v12;
    return;
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<turi::flexible_type> const*,std::vector<turi::flexible_type> const*,std::vector<turi::flexible_type>*>((uint64_t)&v18, a2, a3, (uint64_t)v9);
  v15 = v14;
  v16 = *(void ***)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      v16 -= 3;
      v19 = v16;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v19);
    }
    while (v16 != v15);
  }
  *(_QWORD *)(a1 + 8) = v15;
}

void sub_2181769A0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_2181769A8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<std::vector<turi::flexible_type>>::__vdeallocate(void ***a1)
{
  void **v1;
  void **v3;
  void **v4;
  void **v5;

  v1 = *a1;
  if (*a1)
  {
    v3 = a1[1];
    v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        v3 -= 3;
        v5 = v3;
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v5);
      }
      while (v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

_QWORD *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<turi::flexible_type>>,std::vector<turi::flexible_type> const*,std::vector<turi::flexible_type> const*,std::vector<turi::flexible_type>*>(uint64_t a1, uint64_t **a2, uint64_t **a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t **v6;
  _QWORD v8[3];
  char v9;
  _QWORD *v10;
  _QWORD *v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v4, *v6, v6[1], ((char *)v6[1] - (char *)*v6) >> 4);
      v4 = v11 + 3;
      v11 += 3;
      v6 += 3;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<turi::flexible_type>>,std::vector<turi::flexible_type>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_218176ABC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<turi::flexible_type>>,std::vector<turi::flexible_type>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t **std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<turi::flexible_type> const*,std::vector<turi::flexible_type> const*,std::vector<turi::flexible_type>*>(uint64_t a1, uint64_t **a2, uint64_t **a3, uint64_t a4)
{
  uint64_t **v5;

  v5 = a2;
  if (a2 != a3)
  {
    do
    {
      if (v5 != (uint64_t **)a4)
        std::vector<turi::flexible_type>::__assign_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(a4, *v5, v5[1], ((char *)v5[1] - (char *)*v5) >> 4);
      v5 += 3;
      a4 += 24;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

uint64_t *std::list<turi::join_impl::hash_join_row_t>::list(uint64_t *a1, uint64_t a2)
{
  uint64_t i;
  _QWORD *v5;
  uint64_t v6;

  *a1 = (uint64_t)a1;
  a1[1] = (uint64_t)a1;
  a1[2] = 0;
  for (i = *(_QWORD *)(a2 + 8); i != a2; i = *(_QWORD *)(i + 8))
  {
    v5 = std::__list_imp<turi::join_impl::hash_join_row_t>::__create_node[abi:ne180100]<turi::join_impl::hash_join_row_t const&>((uint64_t)a1, 0, 0, i + 16);
    v6 = *a1;
    *v5 = *a1;
    v5[1] = a1;
    *(_QWORD *)(v6 + 8) = v5;
    *a1 = (uint64_t)v5;
    ++a1[2];
  }
  return a1;
}

void sub_218176BB8(_Unwind_Exception *a1)
{
  char *v1;

  std::__list_imp<turi::join_impl::hash_join_row_t>::clear(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__list_imp<turi::join_impl::hash_join_row_t>::__create_node[abi:ne180100]<turi::join_impl::hash_join_row_t const&>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v7;

  v7 = operator new(0x30uLL);
  *v7 = a2;
  v7[1] = a3;
  v7[3] = 0;
  v7[4] = 0;
  v7[2] = 0;
  std::vector<std::vector<turi::flexible_type>>::__init_with_size[abi:ne180100]<std::vector<turi::flexible_type>*,std::vector<turi::flexible_type>*>(v7 + 2, *(uint64_t ***)a4, *(uint64_t ***)(a4 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3));
  *((_BYTE *)v7 + 40) = *(_BYTE *)(a4 + 24);
  return v7;
}

void sub_218176C38(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long,std::list<turi::join_impl::hash_join_row_t>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::list<turi::join_impl::hash_join_row_t>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::list<turi::join_impl::hash_join_row_t>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::list<turi::join_impl::hash_join_row_t>>>>::__emplace_unique_key_args<unsigned long,std::pair<unsigned long,std::list<turi::join_impl::hash_join_row_t>>>(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  _QWORD *v20;
  unint64_t v21;
  _QWORD v23[2];
  char v24;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v6 >= v7)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = (_QWORD *)*v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == v6)
          {
            if (v10[2] == v6)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  v12 = a1 + 16;
  v13 = operator new(0x30uLL);
  v23[0] = v13;
  v23[1] = a1 + 16;
  *v13 = 0;
  v13[1] = v6;
  std::pair<unsigned long const,std::list<turi::join_impl::hash_join_row_t>>::pair[abi:ne180100]<unsigned long,std::list<turi::join_impl::hash_join_row_t>,0>(v13 + 2, a3);
  v24 = 1;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v7 || (float)(v15 * (float)v7) < v14)
  {
    v16 = 1;
    if (v7 >= 3)
      v16 = (v7 & (v7 - 1)) != 0;
    v17 = v16 | (2 * v7);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::__rehash<true>(a1, v19);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v20)
  {
    *(_QWORD *)v23[0] = *v20;
    *v20 = v23[0];
  }
  else
  {
    *(_QWORD *)v23[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v23[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = v12;
    if (*(_QWORD *)v23[0])
    {
      v21 = *(_QWORD *)(*(_QWORD *)v23[0] + 8);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v21 >= v7)
          v21 %= v7;
      }
      else
      {
        v21 &= v7 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v21) = v23[0];
    }
  }
  v10 = (_QWORD *)v23[0];
  v23[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long,std::list<turi::join_impl::hash_join_row_t>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long,std::list<turi::join_impl::hash_join_row_t>>,void *>>>>::reset[abi:ne180100]((uint64_t)v23, 0);
  return v10;
}

void sub_218176E88(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long,std::list<turi::join_impl::hash_join_row_t>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long,std::list<turi::join_impl::hash_join_row_t>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

_QWORD *std::pair<unsigned long const,std::list<turi::join_impl::hash_join_row_t>>::pair[abi:ne180100]<unsigned long,std::list<turi::join_impl::hash_join_row_t>,0>(_QWORD *a1, _QWORD *a2)
{
  uint64_t *v3;

  v3 = a1 + 1;
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = v3;
  a1[3] = 0;
  std::list<turi::join_impl::hash_join_row_t>::splice((uint64_t)v3, v3, a2 + 1);
  return a1;
}

uint64_t std::list<turi::join_impl::hash_join_row_t>::splice(uint64_t result, uint64_t *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = a3[2];
  if (v3)
  {
    v5 = *a3;
    v4 = (uint64_t *)a3[1];
    v6 = *v4;
    *(_QWORD *)(v6 + 8) = *(_QWORD *)(*a3 + 8);
    **(_QWORD **)(v5 + 8) = v6;
    v7 = *a2;
    *(_QWORD *)(v7 + 8) = v4;
    *v4 = v7;
    *a2 = v5;
    *(_QWORD *)(v5 + 8) = a2;
    *(_QWORD *)(result + 16) += v3;
    a3[2] = 0;
  }
  return result;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long,std::list<turi::join_impl::hash_join_row_t>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long,std::list<turi::join_impl::hash_join_row_t>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  char *v2;

  v2 = *(char **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__list_imp<turi::join_impl::hash_join_row_t>::clear(v2 + 24);
    operator delete(v2);
  }
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,unsigned long &,unsigned long &>(uint64_t a1, unint64_t *a2, _QWORD *a3, uint64_t *a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD **v11;
  _QWORD *i;
  unint64_t v13;
  uint64_t v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;

  v8 = *a2;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 >= v9)
        v4 = v8 % v9;
    }
    else
    {
      v4 = (v9 - 1) & v8;
    }
    v11 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v11)
    {
      for (i = *v11; i; i = (_QWORD *)*i)
      {
        v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == v8)
            return i;
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9)
              v13 %= v9;
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v4)
            break;
        }
      }
    }
  }
  i = operator new(0x20uLL);
  *i = 0;
  i[1] = v8;
  v14 = *a4;
  i[2] = *a3;
  i[3] = v14;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    v17 = 1;
    if (v9 >= 3)
      v17 = (v9 & (v9 - 1)) != 0;
    v18 = v17 | (2 * v9);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::__rehash<true>(a1, v20);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v4 = v8 % v9;
      else
        v4 = v8;
    }
    else
    {
      v4 = (v9 - 1) & v8;
    }
  }
  v21 = *(_QWORD *)a1;
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v22)
  {
    *i = *v22;
LABEL_38:
    *v22 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v21 + 8 * v4) = a1 + 16;
  if (*i)
  {
    v23 = *(_QWORD *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v23 >= v9)
        v23 %= v9;
    }
    else
    {
      v23 &= v9 - 1;
    }
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_218177180(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::set<std::string>::set[abi:ne180100]<std::move_iterator<std::__wrap_iter<std::string*>>>(uint64_t a1, const void **a2, const void **a3)
{
  uint64_t *v4;
  const void **v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      std::__tree<std::string>::__emplace_hint_unique_key_args<std::string,std::string>((uint64_t **)a1, v4, v6, (uint64_t)v6);
      v6 += 3;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_2181771FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

_OWORD *std::__tree<std::string>::__emplace_hint_unique_key_args<std::string,std::string>(uint64_t **a1, uint64_t *a2, const void **a3, uint64_t a4)
{
  const void **v6;
  _OWORD *v7;
  uint64_t **v8;
  uint64_t v10;
  const void **v11;

  v6 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_equal<std::string>(a1, a2, &v11, &v10, a3);
  v7 = *v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x38uLL);
    v7[2] = *(_OWORD *)a4;
    *((_QWORD *)v7 + 6) = *(_QWORD *)(a4 + 16);
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, (uint64_t)v11, v8, (uint64_t *)v7);
  }
  return v7;
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::find<unsigned long>(_QWORD *a1, unint64_t *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *result;
  unint64_t v8;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = *a2;
    if (v3 >= *(_QWORD *)&v2)
      v5 = v3 % *(_QWORD *)&v2;
  }
  else
  {
    v5 = (*(_QWORD *)&v2 - 1) & v3;
  }
  v6 = *(_QWORD **)(*a1 + 8 * v5);
  if (!v6)
    return 0;
  result = (_QWORD *)*v6;
  if (*v6)
  {
    do
    {
      v8 = result[1];
      if (v3 == v8)
      {
        if (result[2] == v3)
          return result;
      }
      else
      {
        if (v4.u32[0] > 1uLL)
        {
          if (v8 >= *(_QWORD *)&v2)
            v8 %= *(_QWORD *)&v2;
        }
        else
        {
          v8 &= *(_QWORD *)&v2 - 1;
        }
        if (v8 != v5)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

_OWORD *std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>(uint64_t **a1, const void **a2, uint64_t a3)
{
  void **v5;
  _OWORD *v6;
  uint64_t **v7;
  uint64_t v9;

  v5 = (void **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_equal<std::string>((uint64_t)a1, &v9, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = operator new(0x38uLL);
    v6[2] = *(_OWORD *)a3;
    *((_QWORD *)v6 + 6) = *(_QWORD *)(a3 + 16);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v9, v7, (uint64_t *)v6);
  }
  return v6;
}

void std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::swap(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  v5 = *(void **)a2;
  *(_QWORD *)a2 = 0;
  v6 = *(void **)a1;
  *(_QWORD *)a1 = v5;
  if (v6)
    operator delete(v6);
  v7 = *(void **)a2;
  *(_QWORD *)a2 = v4;
  if (v7)
    operator delete(v7);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v9;
  v11 = *(_QWORD *)(a1 + 24);
  v12 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(a1 + 24) = v12;
  *(_QWORD *)(a2 + 16) = v8;
  *(_QWORD *)(a2 + 24) = v11;
  v13 = *(_DWORD *)(a1 + 32);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = v13;
  if (*(_QWORD *)(a1 + 24))
  {
    v14 = *(_QWORD *)(a1 + 8);
    v15 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
    if ((v14 & (v14 - 1)) != 0)
    {
      if (v15 >= v14)
        v15 %= v14;
    }
    else
    {
      v15 &= v14 - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v15) = a1 + 16;
  }
  if (v11)
  {
    v16 = *(_QWORD *)(a2 + 8);
    v17 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8);
    if ((v16 & (v16 - 1)) != 0)
    {
      if (v17 >= v16)
        v17 %= v16;
    }
    else
    {
      v17 &= v16 - 1;
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v17) = a2 + 16;
  }
}

_QWORD *std::vector<turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>>::vector(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<turi::sframe_function_output_iterator<std::pair<std::vector<turi::flexible_type>,std::string>,std::function<void ()(std::pair<std::vector<turi::flexible_type>,std::string> const&)>,std::function<void ()(std::pair<std::vector<turi::flexible_type>,std::string>&&)>,std::function<void ()(turi::sframe_rows const&)>>>::__vallocate[abi:ne180100](a1, a2);
    v4 = a1[1];
    v5 = v4 + 96 * a2;
    v6 = 96 * a2;
    v7 = (_QWORD *)(v4 + 88);
    do
    {
      *(v7 - 8) = 0;
      *(v7 - 4) = 0;
      *v7 = 0;
      v7 += 12;
      v6 -= 96;
    }
    while (v6);
    a1[1] = v5;
  }
  return a1;
}

void sub_21817756C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

_QWORD *turi::join_impl::hash_join_executor::grace_hash_join(void)::$_4::operator()(uint64_t **a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  _QWORD **v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t **v14;
  uint64_t v15;
  __int128 v16;
  uint64_t *matching_rows;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t **v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *result;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void **v39;
  void **v40;
  uint64_t v41;
  uint64_t v42;
  std::string v43;
  __int128 v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  void **v48;
  _QWORD v49[4];
  unint64_t v50;
  unint64_t v51;
  turi::flexible_type_impl *v52[3];
  void **v53;
  void **v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _BYTE v59[32];
  void *__p;
  char v61;
  uint64_t v62;
  void **v63;
  char v64;
  uint64_t *v65[3];
  uint64_t *v66[3];
  uint64_t **v67;
  _BYTE v68[24];
  _BYTE *v69;
  _BYTE v70[24];
  _BYTE *v71;
  _QWORD v72[3];
  _QWORD *v73;
  _QWORD v74[3];
  _QWORD *v75;
  uint64_t v76[3];
  _QWORD *v77;
  uint64_t v78;

  v78 = *MEMORY[0x24BDAC8D0];
  v4 = a1[4];
  v5 = a1[1];
  v6 = **a1;
  assert_msg(*((unsigned __int8 *)v5 + 288), "Invalid SFrame");
  if (*((_BYTE *)v5 + 289))
  {
    v7 = (_QWORD **)(v5 + 26);
    v8 = 15;
  }
  else
  {
    if (!v5[3])
    {
      v9 = 0;
      goto LABEL_6;
    }
    v7 = (_QWORD **)v5[23];
    v8 = 3;
  }
  v9 = (*(uint64_t (**)(void))(**v7 + 8 * v8))();
LABEL_6:
  v10 = *a1[2];
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)v72, v10 + 96 * a2);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)v74, v10 + 96 * a2 + 32);
  v41 = std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)v76, v10 + 96 * a2 + 64);
  v42 = a2 + v9 * v6;
  (*(void (**)(void ***__return_ptr))(*(_QWORD *)*a1[3] + 32))(&v48);
  v39 = *(void ***)(MEMORY[0x24BEDB7F0] + 64);
  v40 = (void **)*MEMORY[0x24BEDB7F0];
  v38 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  v37 = MEMORY[0x24BEDB848] + 16;
  while (1)
  {
    (*(void (**)(void ***__return_ptr, _QWORD, uint64_t))(*(_QWORD *)*a1[3] + 40))(&v53, *a1[3], v42);
    if (v48 == v53 && v49[3] == v57)
      break;
    *(_QWORD *)&v46 = v59;
    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v46);
    *(_QWORD *)&v46 = &v54;
    std::vector<turi::sarray_iterator<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v46);
LABEL_12:
    v46 = 0uLL;
    v47 = 0;
    if (*((_BYTE *)v4 + 832))
    {
      turi::sframe_iterator::operator*(&v48);
      if (v52[1] == v52[0])
        std::vector<turi::flex_type_enum>::__throw_out_of_range[abi:ne180100]();
      switch(*((_BYTE *)v52[0] + 12))
      {
        case 0:
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v53);
          std::ostream::operator<<();
          std::stringbuf::str();
          v53 = v40;
          *(void ***)((char *)&v53 + (_QWORD)*(v40 - 3)) = v39;
          v55 = v38;
          v13 = v37;
          goto LABEL_25;
        case 1:
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v53);
          std::ostream::operator<<();
          std::stringbuf::str();
          v53 = v40;
          *(void ***)((char *)&v53 + (_QWORD)*(v40 - 3)) = v39;
          v13 = MEMORY[0x24BEDB848] + 16;
          v55 = v38;
LABEL_25:
          v56 = v13;
          if (v61 < 0)
            operator delete(__p);
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          MEMORY[0x219A198F4](&v62);
          break;
        case 2:
          v15 = *(_QWORD *)v52[0];
          if (*(char *)(*(_QWORD *)v52[0] + 31) < 0)
          {
            std::string::__init_copy_ctor_external(&v43, *(const std::string::value_type **)(v15 + 8), *(_QWORD *)(v15 + 16));
          }
          else
          {
            v16 = *(_OWORD *)(v15 + 8);
            v43.__r_.__value_.__r.__words[2] = *(_QWORD *)(v15 + 24);
            *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v16;
          }
          break;
        case 3:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v53, (_QWORD *)(*(_QWORD *)v52[0] + 8));
          break;
        case 4:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v53, (uint64_t *)(*(_QWORD *)v52[0] + 8));
          break;
        case 5:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v53, (_QWORD *)(*(_QWORD *)v52[0] + 8));
          break;
        case 6:
          turi::flexible_type_impl::get_string_visitor::operator()(v52[0], &v43);
          break;
        case 7:
          memset(&v43, 0, sizeof(v43));
          break;
        case 8:
          turi::flexible_type_impl::get_string_visitor::operator()();
          break;
        case 9:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v53, (_QWORD *)(*(_QWORD *)v52[0] + 8));
          break;
        default:
          turi::flexible_type_fail(0);
          __break(1u);
          return result;
      }
      turi::join_impl::hash_join_executor::unpack_row((uint64_t *)&v43, v4[40], &v44);
      std::vector<turi::flexible_type>::__vdeallocate((void **)&v46);
      v46 = v44;
      v47 = v45;
      v45 = 0;
      v44 = 0uLL;
      v53 = (void **)&v44;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v53);
      if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v43.__r_.__value_.__l.__data_);
    }
    else
    {
      v14 = (uint64_t **)turi::sframe_iterator::operator*(&v48);
      if (&v46 != (__int128 *)v14)
        std::vector<turi::flexible_type>::__assign_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>((uint64_t)&v46, *v14, v14[1], ((char *)v14[1] - (char *)*v14) >> 4);
    }
    matching_rows = turi::join_impl::join_hash_table::get_matching_rows(a1[5], &v46, (uint64_t **)v4 + 77, 1);
    v53 = 0;
    v54 = 0;
    v55 = 0;
    std::vector<std::vector<turi::flexible_type>>::__init_with_size[abi:ne180100]<std::vector<turi::flexible_type>*,std::vector<turi::flexible_type>*>(&v53, (uint64_t **)*matching_rows, (uint64_t **)matching_rows[1], 0xAAAAAAAAAAAAAAABLL * ((matching_rows[1] - *matching_rows) >> 3));
    LOBYTE(v56) = *((_BYTE *)matching_rows + 24);
    if (v54 == v53 && !*((_BYTE *)v4 + 649))
      goto LABEL_66;
    v18 = (uint64_t)a1[1];
    v19 = (uint64_t)v73;
    if (!v73)
      goto LABEL_39;
    if (v73 != v72)
    {
      v19 = (*(uint64_t (**)(void))(*v73 + 16))();
LABEL_39:
      v67 = (uint64_t **)v19;
      goto LABEL_41;
    }
    v67 = v66;
    (*(void (**)(_QWORD *, uint64_t **))(v72[0] + 24))(v72, v66);
LABEL_41:
    v20 = (uint64_t)v75;
    if (!v75)
      goto LABEL_44;
    if (v75 != v74)
    {
      v20 = (*(uint64_t (**)(void))(*v75 + 16))();
LABEL_44:
      v69 = (_BYTE *)v20;
      goto LABEL_46;
    }
    v69 = v68;
    (*(void (**)(_QWORD *, _BYTE *))(v74[0] + 24))(v74, v68);
LABEL_46:
    v21 = (uint64_t)v77;
    if (!v77)
      goto LABEL_49;
    if (v77 != (_QWORD *)v41)
    {
      v21 = (*(uint64_t (**)(void))(*v77 + 16))();
LABEL_49:
      v71 = (_BYTE *)v21;
      goto LABEL_51;
    }
    v71 = v70;
    (*(void (**)(uint64_t, _BYTE *))(v76[0] + 24))(v41, v70);
LABEL_51:
    memset(v65, 0, sizeof(v65));
    std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v65, (uint64_t *)v46, *((uint64_t **)&v46 + 1), (uint64_t)(*((_QWORD *)&v46 + 1) - v46) >> 4);
    v44 = 0uLL;
    v45 = 0;
    v63 = (void **)&v44;
    v64 = 0;
    *(_QWORD *)&v44 = operator new(0x18uLL);
    *((_QWORD *)&v44 + 1) = v44;
    v45 = v44 + 24;
    *((_QWORD *)&v44 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<turi::flexible_type>>,std::vector<turi::flexible_type> const*,std::vector<turi::flexible_type> const*,std::vector<turi::flexible_type>*>((uint64_t)&v45, v65, v66, (_QWORD *)v44);
    turi::join_impl::hash_join_executor::merge_rows_for_output(v4, v18, (uint64_t)v66, (uint64_t ***)&v53, &v44);
    v63 = (void **)&v44;
    std::vector<std::vector<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v63);
    v63 = (void **)v65;
    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v63);
    v22 = v71;
    if (v71 == v70)
    {
      v22 = v70;
      v23 = 4;
    }
    else
    {
      if (!v71)
        goto LABEL_56;
      v23 = 5;
    }
    (*(void (**)(void))(*v22 + 8 * v23))();
LABEL_56:
    v24 = v69;
    if (v69 == v68)
    {
      v24 = v68;
      v25 = 4;
      goto LABEL_60;
    }
    if (v69)
    {
      v25 = 5;
LABEL_60:
      (*(void (**)(void))(*v24 + 8 * v25))();
    }
    v26 = v67;
    if (v67 == v66)
    {
      v26 = v66;
      v27 = 4;
      goto LABEL_65;
    }
    if (v67)
    {
      v27 = 5;
LABEL_65:
      ((void (*)(void))(*v26)[v27])();
    }
LABEL_66:
    *(_QWORD *)&v44 = &v53;
    std::vector<std::vector<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v44);
    v53 = (void **)&v46;
    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v53);
    v28 = v49[0];
    v29 = v49[1];
    while (v28 != v29)
    {
      turi::sarray_iterator<turi::flexible_type>::operator++(v28);
      v28 += 48;
    }
    if (v50 + 1 < v51)
      v30 = v50 + 1;
    else
      v30 = v51;
    v50 = v30;
  }
  v11 = v50;
  v12 = v58;
  *(_QWORD *)&v46 = v59;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v46);
  *(_QWORD *)&v46 = &v54;
  std::vector<turi::sarray_iterator<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v46);
  if (v11 != v12)
    goto LABEL_12;
  v53 = (void **)v52;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v53);
  v53 = (void **)v49;
  std::vector<turi::sarray_iterator<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v53);
  v31 = (_QWORD *)v41;
  if (v77 == (_QWORD *)v41)
  {
    v33 = 4;
    v32 = v74;
LABEL_77:
    (*(void (**)(void))(*v31 + 8 * v33))();
  }
  else
  {
    v32 = v74;
    if (v77)
    {
      v33 = 5;
      v31 = v77;
      goto LABEL_77;
    }
  }
  if (v75 == v74)
  {
    v34 = 4;
LABEL_82:
    (*(void (**)(_QWORD *))(*v32 + 8 * v34))(v32);
  }
  else if (v75)
  {
    v34 = 5;
    v32 = v75;
    goto LABEL_82;
  }
  result = v73;
  if (v73 == v72)
  {
    v36 = 4;
    result = v72;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v36))();
  }
  else if (v73)
  {
    v36 = 5;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v36))();
  }
  return result;
}

void sub_218177D78(_Unwind_Exception *a1)
{
  uint64_t v1;

  turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>::~sframe_function_output_iterator((_QWORD *)(v1 - 208));
  _Unwind_Resume(a1);
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<turi::join_impl::hash_join_executor::grace_hash_join(void)::$_4>(unsigned long,unsigned long,turi::join_impl::hash_join_executor::grace_hash_join(void)::$_4 const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v4;
  __int128 v5;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == ((unint64_t)"ZN4turi12parallel_forIZNS_9join_impl18hash_join_executor15grace_hash_joinEvE3$_4EEvmmRKT_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)
        || (result = strcmp((const char *)result, (const char *)((unint64_t)"ZN4turi12parallel_forIZNS_9join_impl18hash_join_executor15grace_hash_joinEvE3$_4EEvmmRKT_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)), !(_DWORD)result))
      {
        *(_QWORD *)a2 = v4;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
    }
  }
  else
  {
    v5 = *(_OWORD *)result;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

uint64_t ***boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<turi::join_impl::hash_join_executor::grace_hash_join(void)::$_4>(unsigned long,unsigned long,turi::join_impl::hash_join_executor::grace_hash_join(void)::$_4 const&)::{lambda(void)#1},void>::invoke(uint64_t ***result)
{
  unint64_t v1;
  uint64_t ***v2;

  v1 = (unint64_t)result[1];
  if (v1 < (unint64_t)result[2])
  {
    v2 = result;
    do
      result = (uint64_t ***)turi::join_impl::hash_join_executor::grace_hash_join(void)::$_4::operator()(*v2, v1++);
    while (v1 < (unint64_t)v2[2]);
  }
  return result;
}

_QWORD *std::vector<turi::flexible_type>::vector(_QWORD *a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  unint64_t *v12;
  unint64_t v13;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<turi::flexible_type>::__vallocate[abi:ne180100](a1, a2);
    v6 = a1[1];
    v7 = v6 + 16 * a2;
    do
    {
      *(_QWORD *)v6 = 0;
      *(_DWORD *)(v6 + 8) = 0;
      *(_BYTE *)(v6 + 12) = 0;
      if ((uint64_t *)v6 != a3)
      {
        v8 = *a3;
        *(_QWORD *)(v6 + 5) = *(uint64_t *)((char *)a3 + 5);
        *(_QWORD *)v6 = v8;
        LODWORD(v8) = *((unsigned __int8 *)a3 + 12);
        *(_BYTE *)(v6 + 12) = v8;
        v9 = v8 > 9;
        v10 = (1 << v8) & 0x33C;
        if (!v9 && v10 != 0)
        {
          v12 = *(unint64_t **)v6;
          do
            v13 = __ldaxr(v12);
          while (__stlxr(v13 + 1, v12));
        }
      }
      v6 += 16;
    }
    while (v6 != v7);
    a1[1] = v7;
  }
  return a1;
}

void sub_2181780E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<turi::flexible_type const*,turi::flexible_type const*,turi::flexible_type*>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t *v5;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  void *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  unsigned int v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t *v33;
  void *v34;
  void *v35;
  uint64_t v36;
  BOOL v37;
  int v38;
  unint64_t *v40;
  unint64_t v41;
  void **v43;

  v5 = a2;
  if (a2 != a3)
  {
    do
    {
      if (v5 != (uint64_t *)a4)
      {
        switch(*(_BYTE *)(a4 + 12))
        {
          case 2:
            v7 = *(unint64_t **)a4;
            do
            {
              v8 = __ldaxr(v7);
              v9 = v8 - 1;
            }
            while (__stlxr(v9, v7));
            if (!v9)
            {
              v10 = *(unint64_t **)a4;
              if (!*(_QWORD *)a4)
                goto LABEL_45;
              if (*((char *)v10 + 31) < 0)
                operator delete((void *)v10[1]);
              v11 = v10;
              v12 = 0x1012C404EF22A49;
              goto LABEL_44;
            }
            break;
          case 3:
            v13 = *(unint64_t **)a4;
            do
            {
              v14 = __ldaxr(v13);
              v15 = v14 - 1;
            }
            while (__stlxr(v15, v13));
            if (!v15)
            {
              v16 = *(unint64_t **)a4;
              if (!*(_QWORD *)a4)
                goto LABEL_45;
              v17 = (void *)v16[1];
              if (v17)
              {
                v16[2] = (unint64_t)v17;
                operator delete(v17);
              }
              v11 = v16;
              v12 = 0x1080C409938AC02;
              goto LABEL_44;
            }
            break;
          case 4:
            v18 = *(unint64_t **)a4;
            do
            {
              v19 = __ldaxr(v18);
              v20 = v19 - 1;
            }
            while (__stlxr(v20, v18));
            if (!v20)
            {
              v21 = *(unint64_t **)a4;
              if (!*(_QWORD *)a4)
                goto LABEL_45;
              v43 = (void **)(v21 + 1);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v43);
              goto LABEL_28;
            }
            break;
          case 5:
            v22 = *(unint64_t **)a4;
            do
            {
              v23 = __ldaxr(v22);
              v24 = v23 - 1;
            }
            while (__stlxr(v24, v22));
            if (!v24)
            {
              v21 = *(unint64_t **)a4;
              if (!*(_QWORD *)a4)
                goto LABEL_45;
              v43 = (void **)(v21 + 1);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v43);
LABEL_28:
              v11 = v21;
              v12 = 0x1020C405E66F15BLL;
              goto LABEL_44;
            }
            break;
          case 8:
            v25 = *(unint64_t **)a4;
            do
            {
              v26 = __ldaxr(v25);
              v27 = v26 - 1;
            }
            while (__stlxr(v27, v25));
            if (!v27)
            {
              v28 = *(unint64_t **)a4;
              if (!*(_QWORD *)a4)
                goto LABEL_45;
              boost::detail::shared_count::~shared_count((unsigned int **)v28 + 2);
              v11 = v28;
              v29 = -235920773;
              goto LABEL_43;
            }
            break;
          case 9:
            v30 = *(unint64_t **)a4;
            do
            {
              v31 = __ldaxr(v30);
              v32 = v31 - 1;
            }
            while (__stlxr(v32, v30));
            if (!v32)
            {
              v33 = *(unint64_t **)a4;
              if (*(_QWORD *)a4)
              {
                v34 = (void *)v33[6];
                if (v34)
                {
                  v33[7] = (unint64_t)v34;
                  operator delete(v34);
                }
                v35 = (void *)v33[3];
                if (v35)
                {
                  v33[4] = (unint64_t)v35;
                  operator delete(v35);
                }
                std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v33 + 1));
                v11 = v33;
                v29 = 2071181815;
LABEL_43:
                v12 = v29 | 0x1030C4000000000;
LABEL_44:
                MEMORY[0x219A19A08](v11, v12);
              }
LABEL_45:
              *(_QWORD *)a4 = 0;
            }
            break;
          default:
            break;
        }
        v36 = *v5;
        *(_QWORD *)(a4 + 5) = *(uint64_t *)((char *)v5 + 5);
        *(_QWORD *)a4 = v36;
        LODWORD(v36) = *((unsigned __int8 *)v5 + 12);
        *(_BYTE *)(a4 + 12) = v36;
        v37 = v36 > 9;
        v38 = (1 << v36) & 0x33C;
        if (!v37 && v38 != 0)
        {
          v40 = *(unint64_t **)a4;
          do
            v41 = __ldaxr(v40);
          while (__stlxr(v41 + 1, v40));
        }
      }
      v5 += 2;
      a4 += 16;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

_QWORD *std::allocate_shared[abi:ne180100]<turi::sframe,std::allocator<turi::sframe>,turi::sframe const&,void>@<X0>(const turi::sframe *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x140uLL);
  result = std::__shared_ptr_emplace<turi::sframe>::__shared_ptr_emplace[abi:ne180100]<turi::sframe&,std::allocator<turi::sframe>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_2181783C4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void turi::join_impl::hash_join_executor::grace_partition_frame(turi::sframe const&,std::vector<unsigned long> const&,unsigned long)::$_1::operator()(_QWORD **a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  unsigned int v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  void *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  void *v56;
  void *v57;
  unsigned int v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  void *v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  void **v75;
  void **v76;
  void **v77;
  void *__p[2];
  char v79;
  uint64_t v80;
  uint64_t v81;
  _BYTE v82[24];
  void *v83;
  _QWORD v84[4];
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  void ***v91;
  char v92;
  _BYTE v93[13];
  _BYTE v94[13];
  uint64_t v95;

  v95 = *MEMORY[0x24BDAC8D0];
  v89 = 0u;
  v90 = 0u;
  v88 = 0u;
  (*(void (**)(void **__return_ptr))(*(_QWORD *)**a1 + 32))(&v83);
  while (1)
  {
    (*(void (**)(void **__return_ptr, _QWORD, uint64_t))(*(_QWORD *)**a1 + 40))(__p, **a1, a2);
    if (v83 != __p[0] || v84[3] != v80)
    {
      v75 = (void **)v82;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v75);
      v75 = &__p[1];
      std::vector<turi::sarray_iterator<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v75);
      goto LABEL_7;
    }
    v3 = v85;
    v4 = v81;
    v75 = (void **)v82;
    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v75);
    v75 = &__p[1];
    std::vector<turi::sarray_iterator<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v75);
    if (v3 == v4)
      break;
LABEL_7:
    v5 = turi::sframe_iterator::operator*(&v83);
    v6 = turi::join_impl::compute_hash_from_row(v5, (uint64_t **)a1[1]);
    v7 = *a1[2];
    v8 = (uint64_t **)turi::sframe_iterator::operator*(&v83);
    v10 = *v8;
    v9 = v8[1];
    while (v10 != v9)
    {
      turi::archive_detail::serialize_hard_or_soft_fail<turi::oarchive,turi::flexible_type>::exec((uint64_t)&v88, v10);
      v10 += 2;
    }
    std::string::basic_string[abi:ne180100](__p, *((void **)&v89 + 1), v90);
    turi::flexible_type::flexible_type<std::string>((uint64_t)v94, (__int128 *)__p);
    v11 = v6 % v7;
    pthread_mutex_lock((pthread_mutex_t *)(*a1[3] + ((v6 % v7) << 6)));
    *(_QWORD *)&v93[5] = *(_QWORD *)&v94[5];
    *(_QWORD *)v93 = *(_QWORD *)v94;
    v93[12] = v94[12];
    v94[12] = 0;
    v76 = 0;
    v77 = 0;
    v75 = 0;
    v91 = &v75;
    v92 = 0;
    v75 = (void **)operator new(0x10uLL);
    v76 = v75;
    v77 = v75 + 2;
    v76 = (void **)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::flexible_type>,turi::flexible_type*,turi::flexible_type*,turi::flexible_type*>((uint64_t)&v77, (uint64_t *)v93, (uint64_t *)v94, (uint64_t)v75);
    v12 = *(_QWORD *)(*a1[4] + 96 * (v6 % v7) + 56);
    if (!v12)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(uint64_t, void ***))(*(_QWORD *)v12 + 48))(v12, &v75);
    v91 = &v75;
    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v91);
    switch(v93[12])
    {
      case 2:
        v13 = *(unint64_t **)v93;
        do
        {
          v14 = __ldaxr(v13);
          v15 = v14 - 1;
        }
        while (__stlxr(v15, v13));
        if (!v15)
        {
          v16 = *(_QWORD *)v93;
          if (*(_QWORD *)v93)
          {
            if (*(char *)(*(_QWORD *)v93 + 31) < 0)
              operator delete(*(void **)(*(_QWORD *)v93 + 8));
            v17 = v16;
            v18 = 0x1012C404EF22A49;
            goto LABEL_52;
          }
        }
        break;
      case 3:
        v30 = *(unint64_t **)v93;
        do
        {
          v31 = __ldaxr(v30);
          v32 = v31 - 1;
        }
        while (__stlxr(v32, v30));
        if (!v32)
        {
          v33 = *(_QWORD *)v93;
          if (*(_QWORD *)v93)
          {
            v34 = *(void **)(*(_QWORD *)v93 + 8);
            if (v34)
            {
              *(_QWORD *)(*(_QWORD *)v93 + 16) = v34;
              operator delete(v34);
            }
            v17 = v33;
            v18 = 0x1080C409938AC02;
            goto LABEL_52;
          }
        }
        break;
      case 4:
        v19 = *(unint64_t **)v93;
        do
        {
          v20 = __ldaxr(v19);
          v21 = v20 - 1;
        }
        while (__stlxr(v21, v19));
        if (!v21)
        {
          v22 = *(_QWORD *)v93;
          if (*(_QWORD *)v93)
          {
            v91 = (void ***)(*(_QWORD *)v93 + 8);
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v91);
            goto LABEL_45;
          }
        }
        break;
      case 5:
        v35 = *(unint64_t **)v93;
        do
        {
          v36 = __ldaxr(v35);
          v37 = v36 - 1;
        }
        while (__stlxr(v37, v35));
        if (!v37)
        {
          v22 = *(_QWORD *)v93;
          if (*(_QWORD *)v93)
          {
            v91 = (void ***)(*(_QWORD *)v93 + 8);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v91);
LABEL_45:
            v17 = v22;
            v18 = 0x1020C405E66F15BLL;
            goto LABEL_52;
          }
        }
        break;
      case 8:
        v38 = *(unint64_t **)v93;
        do
        {
          v39 = __ldaxr(v38);
          v40 = v39 - 1;
        }
        while (__stlxr(v40, v38));
        if (!v40)
        {
          v41 = *(_QWORD *)v93;
          if (*(_QWORD *)v93)
          {
            boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)v93 + 16));
            v17 = v41;
            v29 = -235920773;
            goto LABEL_51;
          }
        }
        break;
      case 9:
        v23 = *(unint64_t **)v93;
        do
        {
          v24 = __ldaxr(v23);
          v25 = v24 - 1;
        }
        while (__stlxr(v25, v23));
        if (!v25)
        {
          v26 = *(_QWORD *)v93;
          if (*(_QWORD *)v93)
          {
            v27 = *(void **)(*(_QWORD *)v93 + 48);
            if (v27)
            {
              *(_QWORD *)(*(_QWORD *)v93 + 56) = v27;
              operator delete(v27);
            }
            v28 = *(void **)(v26 + 24);
            if (v28)
            {
              *(_QWORD *)(v26 + 32) = v28;
              operator delete(v28);
            }
            std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v26 + 8);
            v17 = v26;
            v29 = 2071181815;
LABEL_51:
            v18 = v29 | 0x1030C4000000000;
LABEL_52:
            MEMORY[0x219A19A08](v17, v18);
          }
        }
        break;
      default:
        break;
    }
    pthread_mutex_unlock((pthread_mutex_t *)(*a1[3] + (v11 << 6)));
    *(_QWORD *)&v90 = 0;
    switch(v94[12])
    {
      case 2:
        v42 = *(unint64_t **)v94;
        do
        {
          v43 = __ldaxr(v42);
          v44 = v43 - 1;
        }
        while (__stlxr(v44, v42));
        if (!v44)
        {
          v45 = *(_QWORD *)v94;
          if (*(_QWORD *)v94)
          {
            if (*(char *)(*(_QWORD *)v94 + 31) < 0)
              operator delete(*(void **)(*(_QWORD *)v94 + 8));
            v46 = v45;
            v47 = 0x1012C404EF22A49;
            goto LABEL_94;
          }
        }
        break;
      case 3:
        v59 = *(unint64_t **)v94;
        do
        {
          v60 = __ldaxr(v59);
          v61 = v60 - 1;
        }
        while (__stlxr(v61, v59));
        if (!v61)
        {
          v62 = *(_QWORD *)v94;
          if (*(_QWORD *)v94)
          {
            v63 = *(void **)(*(_QWORD *)v94 + 8);
            if (v63)
            {
              *(_QWORD *)(*(_QWORD *)v94 + 16) = v63;
              operator delete(v63);
            }
            v46 = v62;
            v47 = 0x1080C409938AC02;
            goto LABEL_94;
          }
        }
        break;
      case 4:
        v48 = *(unint64_t **)v94;
        do
        {
          v49 = __ldaxr(v48);
          v50 = v49 - 1;
        }
        while (__stlxr(v50, v48));
        if (!v50)
        {
          v51 = *(_QWORD *)v94;
          if (*(_QWORD *)v94)
          {
            v75 = (void **)(*(_QWORD *)v94 + 8);
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v75);
            goto LABEL_87;
          }
        }
        break;
      case 5:
        v64 = *(unint64_t **)v94;
        do
        {
          v65 = __ldaxr(v64);
          v66 = v65 - 1;
        }
        while (__stlxr(v66, v64));
        if (!v66)
        {
          v51 = *(_QWORD *)v94;
          if (*(_QWORD *)v94)
          {
            v75 = (void **)(*(_QWORD *)v94 + 8);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v75);
LABEL_87:
            v46 = v51;
            v47 = 0x1020C405E66F15BLL;
            goto LABEL_94;
          }
        }
        break;
      case 8:
        v67 = *(unint64_t **)v94;
        do
        {
          v68 = __ldaxr(v67);
          v69 = v68 - 1;
        }
        while (__stlxr(v69, v67));
        if (!v69)
        {
          v70 = *(_QWORD *)v94;
          if (*(_QWORD *)v94)
          {
            boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)v94 + 16));
            v46 = v70;
            v58 = -235920773;
            goto LABEL_93;
          }
        }
        break;
      case 9:
        v52 = *(unint64_t **)v94;
        do
        {
          v53 = __ldaxr(v52);
          v54 = v53 - 1;
        }
        while (__stlxr(v54, v52));
        if (!v54)
        {
          v55 = *(_QWORD *)v94;
          if (*(_QWORD *)v94)
          {
            v56 = *(void **)(*(_QWORD *)v94 + 48);
            if (v56)
            {
              *(_QWORD *)(*(_QWORD *)v94 + 56) = v56;
              operator delete(v56);
            }
            v57 = *(void **)(v55 + 24);
            if (v57)
            {
              *(_QWORD *)(v55 + 32) = v57;
              operator delete(v57);
            }
            std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v55 + 8);
            v46 = v55;
            v58 = 2071181815;
LABEL_93:
            v47 = v58 | 0x1030C4000000000;
LABEL_94:
            MEMORY[0x219A19A08](v46, v47);
          }
        }
        break;
      default:
        break;
    }
    if (v79 < 0)
      operator delete(__p[0]);
    v71 = v84[0];
    v72 = v84[1];
    while (v71 != v72)
    {
      turi::sarray_iterator<turi::flexible_type>::operator++(v71);
      v71 += 48;
    }
    if (v85 + 1 < v86)
      v73 = v85 + 1;
    else
      v73 = v86;
    v85 = v73;
  }
  __p[0] = &v87;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  __p[0] = v84;
  std::vector<turi::sarray_iterator<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  free(*((void **)&v89 + 1));
}

void sub_218178A4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, _Unwind_Exception *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  uint64_t v28;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  unsigned int v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  _QWORD *v48;
  void *v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t v62;
  _QWORD *v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  uint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t *v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t *v76;
  unint64_t v77;
  unint64_t v78;

  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)(v28 - 152));
  switch(*(_BYTE *)(v28 - 124))
  {
    case 2:
      v30 = *(unint64_t **)(v28 - 136);
      do
      {
        v31 = __ldaxr(v30);
        v32 = v31 - 1;
      }
      while (__stlxr(v32, v30));
      if (v32)
        goto LABEL_39;
      v33 = *(_QWORD *)(v28 - 136);
      if (!v33)
        goto LABEL_39;
      if (*(char *)(v33 + 31) < 0)
        operator delete(*(void **)(v33 + 8));
      v34 = (_QWORD *)v33;
      v35 = 0x1012C404EF22A49;
      goto LABEL_38;
    case 3:
      v45 = *(unint64_t **)(v28 - 136);
      do
      {
        v46 = __ldaxr(v45);
        v47 = v46 - 1;
      }
      while (__stlxr(v47, v45));
      if (v47)
        goto LABEL_39;
      v48 = *(_QWORD **)(v28 - 136);
      if (!v48)
        goto LABEL_39;
      v49 = (void *)v48[1];
      if (v49)
      {
        v48[2] = v49;
        operator delete(v49);
      }
      v34 = v48;
      v35 = 0x1080C409938AC02;
      goto LABEL_38;
    case 4:
      v36 = *(unint64_t **)(v28 - 136);
      do
      {
        v37 = __ldaxr(v36);
        v38 = v37 - 1;
      }
      while (__stlxr(v38, v36));
      if (v38)
        goto LABEL_39;
      v39 = *(_QWORD **)(v28 - 136);
      if (!v39)
        goto LABEL_39;
      *(_QWORD *)(v28 - 152) = v39 + 1;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)(v28 - 152));
      goto LABEL_31;
    case 5:
      v50 = *(unint64_t **)(v28 - 136);
      do
      {
        v51 = __ldaxr(v50);
        v52 = v51 - 1;
      }
      while (__stlxr(v52, v50));
      if (v52)
        goto LABEL_39;
      v39 = *(_QWORD **)(v28 - 136);
      if (!v39)
        goto LABEL_39;
      *(_QWORD *)(v28 - 152) = v39 + 1;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v28 - 152));
LABEL_31:
      v34 = v39;
      v35 = 0x1020C405E66F15BLL;
      goto LABEL_38;
    case 8:
      v53 = *(unint64_t **)(v28 - 136);
      do
      {
        v54 = __ldaxr(v53);
        v55 = v54 - 1;
      }
      while (__stlxr(v55, v53));
      if (v55)
        goto LABEL_39;
      v56 = *(_QWORD *)(v28 - 136);
      if (!v56)
        goto LABEL_39;
      boost::detail::shared_count::~shared_count((unsigned int **)(v56 + 16));
      v34 = (_QWORD *)v56;
      v44 = -235920773;
      goto LABEL_37;
    case 9:
      v40 = *(unint64_t **)(v28 - 136);
      do
      {
        v41 = __ldaxr(v40);
        v42 = v41 - 1;
      }
      while (__stlxr(v42, v40));
      if (v42)
        goto LABEL_39;
      v43 = *(_QWORD **)(v28 - 136);
      if (!v43)
        goto LABEL_39;
      v34 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v43);
      v44 = 2071181815;
LABEL_37:
      v35 = v44 | 0x1030C4000000000;
LABEL_38:
      MEMORY[0x219A19A08](v34, v35);
LABEL_39:
      switch(*(_BYTE *)(v28 - 108))
      {
        case 2:
          v57 = *(unint64_t **)(v28 - 120);
          do
          {
            v58 = __ldaxr(v57);
            v59 = v58 - 1;
          }
          while (__stlxr(v59, v57));
          if (v59)
            goto LABEL_70;
          turi::globals::list_globals();
          goto LABEL_58;
        case 3:
          v70 = *(unint64_t **)(v28 - 120);
          do
          {
            v71 = __ldaxr(v70);
            v72 = v71 - 1;
          }
          while (__stlxr(v72, v70));
          if (v72)
            goto LABEL_70;
          turi::globals::list_globals();
LABEL_58:
          a1 = a12;
          goto LABEL_70;
        case 4:
          v60 = *(unint64_t **)(v28 - 120);
          do
          {
            v61 = __ldaxr(v60);
            v62 = v61 - 1;
          }
          while (__stlxr(v62, v60));
          if (v62)
            goto LABEL_70;
          v63 = *(_QWORD **)(v28 - 120);
          if (!v63)
            goto LABEL_70;
          a12 = (_Unwind_Exception *)(v63 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
          goto LABEL_64;
        case 5:
          v73 = *(unint64_t **)(v28 - 120);
          do
          {
            v74 = __ldaxr(v73);
            v75 = v74 - 1;
          }
          while (__stlxr(v75, v73));
          if (v75)
            goto LABEL_70;
          v63 = *(_QWORD **)(v28 - 120);
          if (!v63)
            goto LABEL_70;
          a12 = (_Unwind_Exception *)(v63 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
LABEL_64:
          v68 = v63;
          v69 = 0x1020C405E66F15BLL;
          break;
        case 8:
          v76 = *(unint64_t **)(v28 - 120);
          do
          {
            v77 = __ldaxr(v76);
            v78 = v77 - 1;
          }
          while (__stlxr(v78, v76));
          if (!v78)
            turi::join_impl::hash_join_executor::grace_partition_frame(turi::sframe const&,std::vector<unsigned long> const&,unsigned long)::$_1::operator()(v28 - 120);
          goto LABEL_70;
        case 9:
          v64 = *(unint64_t **)(v28 - 120);
          do
          {
            v65 = __ldaxr(v64);
            v66 = v65 - 1;
          }
          while (__stlxr(v66, v64));
          if (v66)
            goto LABEL_70;
          v67 = *(_QWORD **)(v28 - 120);
          if (!v67)
            goto LABEL_70;
          v68 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v67);
          v69 = 0x1030C407B73B9F7;
          break;
        default:
          goto LABEL_70;
      }
      MEMORY[0x219A19A08](v68, v69);
LABEL_70:
      if (a20 < 0)
        operator delete(__p);
      turi::sframe_iterator::~sframe_iterator((turi::sframe_iterator *)&a28);
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_39;
  }
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<turi::join_impl::hash_join_executor::grace_partition_frame(turi::sframe const&,std::vector<unsigned long> const&,unsigned long)::$_1>(unsigned long,unsigned long,turi::join_impl::hash_join_executor::grace_partition_frame(turi::sframe const&,std::vector<unsigned long> const&,unsigned long)::$_1 const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v4;
  __int128 v5;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == ((unint64_t)"ZN4turi12parallel_forIZNS_9join_impl18hash_join_executor21grace_partition_frameE"
                                        "RKNS_6sframeERKNSt3__16vectorImNS6_9allocatorImEEEEmE3$_1EEvmmRKT_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)
        || (result = strcmp((const char *)result, (const char *)((unint64_t)"ZN4turi12parallel_forIZNS_9join_impl18hash_join_executor21grace_partition_frameERKNS_6sframeERKNSt3__16vectorImNS6_9allocatorImEEEEmE3$_1EEvmmRKT_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)), !(_DWORD)result))
      {
        *(_QWORD *)a2 = v4;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
    }
  }
  else
  {
    v5 = *(_OWORD *)result;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

void boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<turi::join_impl::hash_join_executor::grace_partition_frame(turi::sframe const&,std::vector<unsigned long> const&,unsigned long)::$_1>(unsigned long,unsigned long,turi::join_impl::hash_join_executor::grace_partition_frame(turi::sframe const&,std::vector<unsigned long> const&,unsigned long)::$_1 const&)::{lambda(void)#1},void>::invoke(uint64_t a1)
{
  unint64_t i;

  for (i = *(_QWORD *)(a1 + 8); i < *(_QWORD *)(a1 + 16); ++i)
    turi::join_impl::hash_join_executor::grace_partition_frame(turi::sframe const&,std::vector<unsigned long> const&,unsigned long)::$_1::operator()(*(_QWORD ***)a1, i);
}

uint64_t OUTLINED_FUNCTION_15_5()
{
  return std::stringbuf::str();
}

uint64_t OUTLINED_FUNCTION_27_4()
{
  return std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::str[abi:ne180100]();
}

void __cxx_global_var_init_23_1()
{
  int v0;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, "Mutex create error %d", v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_join_impl_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  qword_254FF9A08 = 0;
  unk_254FF9A10 = 0;
  turi::join_impl::join_hash_table::empty_vt = 0;
  byte_254FF9A18 = 0;
  return __cxa_atexit((void (*)(void *))turi::join_impl::hash_join_row_t::~hash_join_row_t, &turi::join_impl::join_hash_table::empty_vt, &dword_217E69000);
}

void turi::skip_BOM(turi *this, turi::general_ifstream *a2)
{
  unsigned __int8 v3;
  unsigned __int8 v4;
  std::ios_base *v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t v8;
  std::ios_base *v9;

  v3 = std::istream::get();
  if (*(_DWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 32))
  {
    if (*((_QWORD *)this + 1) == 1)
    {
      std::istream::putback();
      std::ios_base::clear((std::ios_base *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)), 0);
    }
    return;
  }
  v4 = std::istream::get();
  v5 = (std::ios_base *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
  if (v5->__rdstate_)
  {
    v6 = *((_QWORD *)this + 1);
    std::ios_base::clear(v5, 0);
    if (v6 != 1)
      goto LABEL_16;
    goto LABEL_15;
  }
  v7 = std::istream::get();
  v8 = *((_QWORD *)this + 1);
  v9 = (std::ios_base *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
  if ((v9->__rdstate_ & 1) != 0 || !v8)
  {
    std::ios_base::clear(v9, 0);
    if (v8 != 1)
    {
LABEL_15:
      std::istream::putback();
LABEL_16:
      std::istream::putback();
      return;
    }
LABEL_14:
    std::istream::putback();
    goto LABEL_15;
  }
  if (v3 != 239 || v4 != 187 || v7 != 191)
    goto LABEL_14;
}

_QWORD *turi::eol_safe_getline(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  unsigned __int8 *v5;
  int v6;
  uint64_t v7;
  unsigned __int8 *v8;
  int v9;
  uint64_t v10;
  char v12;

  if (*(char *)(a2 + 23) < 0)
  {
    **(_BYTE **)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 23) = 0;
  }
  MEMORY[0x219A194D4](&v12, a1, 1);
  v4 = *(_QWORD **)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40);
  while (1)
  {
    v5 = (unsigned __int8 *)v4[3];
    if (v5 == (unsigned __int8 *)v4[4])
    {
      v6 = (*(uint64_t (**)(_QWORD *))(*v4 + 80))(v4);
    }
    else
    {
      v4[3] = v5 + 1;
      v6 = *v5;
    }
    if (v6 == -1)
      break;
    if (v6 == 10)
      return a1;
    if (v6 == 13)
    {
      v8 = (unsigned __int8 *)v4[3];
      if (v8 == (unsigned __int8 *)v4[4])
        v9 = (*(uint64_t (**)(_QWORD *))(*v4 + 72))(v4);
      else
        v9 = *v8;
      if (v9 == 10)
      {
        v10 = v4[3];
        if (v10 == v4[4])
          (*(void (**)(_QWORD *))(*v4 + 80))(v4);
        else
          v4[3] = v10 + 1;
      }
      return a1;
    }
    std::string::push_back((std::string *)a2, v6);
  }
  v7 = *(unsigned __int8 *)(a2 + 23);
  if ((v7 & 0x80u) != 0)
    v7 = *(_QWORD *)(a2 + 8);
  if (!v7)
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 2);
  return a1;
}

_QWORD *turi::custom_eol_getline(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  unsigned __int8 *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::string v16;

  if (*(char *)(a2 + 23) < 0)
  {
    **(_BYTE **)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 23) = 0;
  }
  v6 = *(unsigned __int8 *)(a3 + 23);
  if ((v6 & 0x80u) != 0)
    v6 = *(_QWORD *)(a3 + 8);
  if (v6)
  {
    MEMORY[0x219A194D4](&v16, a1, 1);
    v7 = 0;
    v8 = *(_QWORD **)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40);
    while (1)
    {
      while (1)
      {
        v9 = (unsigned __int8 *)v8[3];
        if (v9 == (unsigned __int8 *)v8[4])
        {
          v10 = (*(uint64_t (**)(_QWORD *))(*v8 + 80))(v8);
        }
        else
        {
          v8[3] = v9 + 1;
          v10 = *v9;
        }
        v11 = *(char *)(a3 + 23) >= 0 ? a3 : *(_QWORD *)a3;
        if (v10 != *(char *)(v11 + v7))
          break;
        ++v7;
        std::string::push_back((std::string *)a2, v10);
        v12 = *(unsigned __int8 *)(a3 + 23);
        if ((v12 & 0x80u) != 0)
          v12 = *(_QWORD *)(a3 + 8);
        if (v7 == v12)
        {
          v13 = *(unsigned __int8 *)(a2 + 23);
          if ((v13 & 0x80u) != 0)
            v13 = *(_QWORD *)(a2 + 8);
          std::string::resize((std::string *)a2, v13 - v7, 0);
          return a1;
        }
      }
      if (v10 == -1)
        break;
      std::string::push_back((std::string *)a2, v10);
      v7 = 0;
    }
    v14 = *(unsigned __int8 *)(a2 + 23);
    if ((v14 & 0x80u) != 0)
      v14 = *(_QWORD *)(a2 + 8);
    if (!v14)
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 2);
  }
  else
  {
    std::string::__init_with_sentinel[abi:ne180100]<std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>(&v16, *(_QWORD **)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40), 0);
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    *(std::string *)a2 = v16;
  }
  return a1;
}

_QWORD *turi::eol_getline(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  int v3;
  _BYTE *v4;

  v3 = *(char *)(a3 + 23);
  if (v3 < 0)
  {
    if (*(_QWORD *)(a3 + 8) != 1)
      return turi::custom_eol_getline(a1, a2, a3);
    v4 = *(_BYTE **)a3;
  }
  else
  {
    v4 = (_BYTE *)a3;
    if (v3 != 1)
      return turi::custom_eol_getline(a1, a2, a3);
  }
  if (*v4 == 10)
    return turi::eol_safe_getline(a1, a2);
  return turi::custom_eol_getline(a1, a2, a3);
}

void turi::parse_csvs_to_sframe(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, unsigned __int8 *a3@<X2>, _BYTE *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  int v8;
  unsigned __int8 i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  int *v15;
  file_logger *v16;
  file_logger *started;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  const std::locale::facet *v22;
  int *v23;
  file_logger *v24;
  file_logger *v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  const std::locale::facet *v30;
  std::string *v31;
  __int128 v32;
  std::string *v33;
  _QWORD *exception;
  uint64_t v35;
  uint64_t v36;
  std::string::size_type v37;
  _BYTE *v38;
  __int128 v39;
  turi::general_ifstream *v40;
  std::string *v41;
  std::string *v42;
  size_t size;
  int *v44;
  file_logger *v45;
  file_logger *v46;
  _QWORD *v47;
  _QWORD *v48;
  const std::locale::facet *v49;
  uint64_t v50;
  unint64_t v51;
  __int128 *v52;
  __int128 v53;
  unint64_t v54;
  size_t v55;
  std::string *v56;
  pthread_mutex_t *sig;
  std::string *v58;
  std::string::size_type v59;
  std::string *v60;
  std::string::size_type v61;
  char v62;
  char *v63;
  uint64_t v64;
  unint64_t v65;
  std::string *v66;
  std::string::size_type v67;
  char v68;
  uint64_t v69;
  std::string *v71;
  std::string *k;
  int *v73;
  file_logger *v74;
  file_logger *v75;
  _QWORD *v76;
  uint64_t v77;
  _QWORD *v78;
  const std::locale::facet *v79;
  __int128 *v80;
  std::string *v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  std::string *v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  std::string *v90;
  unint64_t v91;
  unint64_t v92;
  _BYTE *v93;
  uint64_t v94;
  uint64_t v95;
  size_t v96;
  _OWORD *v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  std::string::size_type v101;
  std::string::size_type v102;
  std::string::size_type v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  _OWORD *v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  _BYTE *v111;
  uint64_t *v112;
  _QWORD *v113;
  int v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  char **v118;
  int *v119;
  file_logger *v120;
  file_logger *v121;
  uint64_t v122;
  _QWORD *v123;
  std::string::size_type v124;
  turi::thread_pool *v125;
  turi::thread_pool *instance;
  unint64_t v127;
  uint64_t v128;
  turi::thread_pool *v129;
  turi::thread_pool *v130;
  turi::thread_pool *v131;
  turi::thread_pool *v132;
  std::string *v133;
  BOOL v134;
  turi *v135;
  uint64_t v136;
  std::string *v137;
  uint64_t v138;
  __int128 v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  __int128 v144;
  int v145;
  uint64_t v146;
  int *v147;
  file_logger *v148;
  file_logger *v149;
  _QWORD *v150;
  uint64_t v151;
  _QWORD *v152;
  const std::locale::facet *v153;
  turi::general_ifstream *v154;
  uint64_t v155;
  uint64_t v156;
  std::string *v157;
  size_t v158;
  int64_t v159;
  int *v160;
  file_logger *v161;
  file_logger *v162;
  uint64_t v163;
  _QWORD *v164;
  _QWORD *v165;
  const std::locale::facet *v166;
  uint64_t v167;
  char *v168;
  char *v169;
  uint64_t v170;
  uint64_t v171;
  unint64_t v172;
  uint64_t v173;
  char v174;
  void *v175;
  char v176;
  std::string::size_type v177;
  int v178;
  int v179;
  unint64_t v180;
  void **v181;
  unint64_t v182;
  unint64_t v183;
  char *v184;
  char *v185;
  uint64_t v186;
  char *v187;
  uint64_t v188;
  int v189;
  int v190;
  unint64_t v191;
  char *v192;
  char *v193;
  unint64_t v194;
  char v195;
  int v196;
  char *v197;
  char v198;
  int v199;
  BOOL v200;
  BOOL v201;
  _BOOL4 v202;
  void **v203;
  unint64_t v204;
  unint64_t v205;
  char *v206;
  int v207;
  unint64_t v208;
  uint64_t v209;
  char *v210;
  unint64_t v211;
  char v212;
  char *v213;
  char v214;
  int v215;
  BOOL v216;
  BOOL v217;
  void **v218;
  unint64_t v219;
  unint64_t m;
  int v221;
  unint64_t v222;
  uint64_t v223;
  uint64_t v224;
  void *v225;
  std::string::size_type v226;
  _QWORD *v227;
  std::string::size_type v228;
  cppipc *v229;
  unint64_t v230;
  int v231;
  unint64_t *v232;
  char v233;
  unint64_t v234;
  unint64_t v235;
  uint64_t v236;
  uint64_t v237;
  unint64_t v238;
  unint64_t v239;
  __int128 v240;
  __int128 v241;
  uint64_t v242;
  __int128 v243;
  uint64_t v244;
  _QWORD *v245;
  uint64_t *v246;
  cppipc *v247;
  float v248;
  float v249;
  file_logger *v250;
  file_logger *v251;
  _QWORD *v252;
  uint64_t v253;
  _QWORD *v254;
  uint64_t v255;
  _QWORD *v256;
  _QWORD *v257;
  const std::locale::facet *v258;
  char v259;
  int *v260;
  file_logger *v261;
  file_logger *v262;
  _QWORD *v263;
  unint64_t *v264;
  unint64_t v265;
  std::__shared_weak_count *v266;
  unint64_t *v267;
  unint64_t v268;
  int *v269;
  file_logger *v270;
  file_logger *v271;
  _QWORD *v272;
  uint64_t v273;
  _QWORD *v274;
  const std::locale::facet *v275;
  std::__shared_weak_count *v276;
  unint64_t *v277;
  unint64_t v278;
  uint64_t v279;
  _QWORD *v280;
  _QWORD *v281;
  const std::locale::facet *v282;
  int *v283;
  file_logger *v284;
  file_logger *v285;
  _QWORD *v286;
  uint64_t v287;
  _QWORD *v288;
  uint64_t v289;
  _QWORD *v290;
  _QWORD *v291;
  const std::locale::facet *v292;
  _QWORD *v293;
  _QWORD *v294;
  _QWORD *v295;
  _QWORD *v296;
  _QWORD *v297;
  _QWORD *v298;
  _QWORD *v299;
  _QWORD *v300;
  _QWORD *v301;
  _QWORD *v302;
  _QWORD *v303;
  _QWORD *v304;
  _QWORD *v305;
  unint64_t v307;
  std::string *v308;
  __int128 *v309;
  const void ***v310;
  __int128 **v311;
  uint64_t v313;
  int v314;
  std::string *v315;
  int v316;
  uint64_t v317;
  unint64_t v318;
  std::string::size_type v319;
  unsigned __int8 v320;
  unint64_t v321;
  uint64_t v322;
  unsigned __int8 v325;
  char v326;
  char v327;
  char v328;
  std::string v329;
  __int16 v330;
  unsigned __int8 v331;
  uint64_t v332[3];
  std::string v333;
  __int128 v334;
  std::string v335;
  void *v336;
  _BYTE *v337;
  uint64_t v338;
  void *v339[4];
  std::string v340;
  void *v341;
  int v342[2];
  uint64_t v343;
  char **v344;
  char *v345;
  uint64_t v346;
  __int128 v347;
  __int128 v348;
  std::string v349;
  std::string v350;
  __n128 v351;
  char v352;
  std::string v353;
  __n128 __p;
  char v355;
  std::string v356;
  uint64_t v357;
  uint64_t v358;
  std::string *v359;
  std::string *v360;
  unint64_t v361;
  std::string v362;
  const void **v363[3];
  timeval v364;
  uint64_t j;
  std::string v366;
  void *v367;
  std::string *v368;
  uint64_t v369;
  std::string v370;
  std::string v371;
  std::string v372;
  std::string __str;
  std::string v374;
  void **v375;
  char v376;
  std::locale v377;
  std::string v378;
  __int128 v379;
  __int128 v380;
  __int128 v381;
  __int128 v382;
  __int128 v383;
  __int128 v384;
  uint64_t v385;
  __int128 v386;
  uint64_t v387;
  unsigned __int8 *v388;
  void *v389[2];
  void *ptr[2];
  __int128 v391;
  _BYTE v392[192];
  _BYTE v393[192];
  void *v394[2];
  uint64_t v395;
  void *v396[3];
  unint64_t v397;
  unint64_t v398;
  timeval v399;
  unint64_t v400;
  __int128 v401;
  char v402;
  uint64_t v403;
  char v404;
  unsigned __int8 v405;
  std::string v406;
  BOOL v407;
  __int128 v408;
  std::string v409;
  int v410;
  _BYTE v411[160];
  void *v412;
  char v413;
  _QWORD v414[19];
  pthread_mutex_t v415;
  uint64_t v416;

  v416 = *MEMORY[0x24BDAC8D0];
  v8 = *a3;
  i = a3[1];
  v325 = a3[2];
  v310 = (const void ***)(a3 + 8);
  std::map<std::string,turi::flex_type_enum>::map[abi:ne180100]((uint64_t *)v363, (const void ***)a3 + 1);
  memset(&v362, 0, sizeof(v362));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v362, *((__int128 **)a3 + 4), *((__int128 **)a3 + 5), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a3 + 5) - *((_QWORD *)a3 + 4)) >> 3));
  v311 = (__int128 **)a3;
  v321 = *((_QWORD *)a3 + 7);
  v309 = (__int128 *)(a3 + 56);
  v10 = *((_QWORD *)a3 + 8);
  v360 = 0;
  v359 = 0;
  v361 = 0;
  turi::fileio::get_glob_files(a1, &v357);
  v319 = a1;
  v11 = v357;
  v12 = v358;
  if (v357 == v358)
  {
    v358 = v357;
    v37 = (std::string::size_type)v359;
    if (v359 == v360)
      goto LABEL_620;
  }
  else
  {
    v320 = i;
    v327 = 0;
    do
    {
      if (*(char *)(v11 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v409, *(const std::string::value_type **)v11, *(_QWORD *)(v11 + 8));
      }
      else
      {
        v13 = *(_OWORD *)v11;
        v409.__r_.__value_.__r.__words[2] = *(_QWORD *)(v11 + 16);
        *(_OWORD *)&v409.__r_.__value_.__l.__data_ = v13;
      }
      v410 = *(_DWORD *)(v11 + 24);
      if (v410 == 1)
      {
        if (SHIBYTE(v409.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v356, v409.__r_.__value_.__l.__data_, v409.__r_.__value_.__l.__size_);
        else
          v356 = v409;
        turi::general_ifstream::general_ifstream(&v378, (uint64_t)&v356);
        if (SHIBYTE(v356.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v356.__r_.__value_.__l.__data_);
        v14 = turi::general_ifstream::file_size((turi::neural_net::shared_float_array **)&v378);
        if (!v14)
        {
          v15 = (int *)global_logger();
          if (v15[169] <= 2)
          {
            if (cppipc::must_cancel((cppipc *)v15))
              log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
            v16 = (file_logger *)global_logger();
            started = file_logger::start_stream(v16, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/parallel_csv_parser.cpp", "parse_csvs_to_sframe", 1231, 1);
            v18 = pthread_getspecific(*((_QWORD *)started + 74));
            if (v18 && *((_BYTE *)v18 + 280))
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18 + 2, (uint64_t)"Skipping file ", 14);
            if (SHIBYTE(v409.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&v353, v409.__r_.__value_.__l.__data_, v409.__r_.__value_.__l.__size_);
            else
              v353 = v409;
            turi::sanitize_url((__n128 *)&v353, &__p);
            v19 = file_logger::operator<<<std::string>((uint64_t)started, (uint64_t)&__p);
            v20 = pthread_getspecific(*(_QWORD *)(v19 + 592));
            if (v20 && *((_BYTE *)v20 + 280))
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20 + 2, (uint64_t)" because it appears to be empty", 31);
            v21 = pthread_getspecific(*(_QWORD *)(v19 + 592));
            if (v21)
            {
              if (*((_BYTE *)v21 + 280))
              {
                std::ios_base::getloc((const std::ios_base *)((char *)v21 + *(_QWORD *)(v21[2] - 24) + 16));
                v22 = std::locale::use_facet(&v377, MEMORY[0x24BEDB350]);
                ((void (*)(const std::locale::facet *, uint64_t))v22->__vftable[2].~facet_0)(v22, 10);
                std::locale::~locale(&v377);
                std::ostream::put();
                std::ostream::flush();
                file_logger::stream_flush((file_logger *)v19);
                if (*(_DWORD *)(v19 + 600) == 7)
                {
                  __print_back_trace();
                  exception = __cxa_allocate_exception(8uLL);
                  *exception = "LOG_FATAL encountered";
                  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
                }
              }
            }
            if (v355 < 0)
              operator delete((void *)__p.n128_u64[0]);
            if (SHIBYTE(v353.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v353.__r_.__value_.__l.__data_);
          }
          v327 = 1;
        }
        v378.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24D91DA58;
        *((_QWORD *)&v391 + 1) = &unk_24D91DA80;
        if (SBYTE7(v391) < 0)
          operator delete(ptr[0]);
        std::istream::~istream();
        boost::iostreams::stream_buffer<turi::fileio_impl::general_fstream_source,std::char_traits<char>,std::allocator<char>,boost::iostreams::input_seekable>::~stream_buffer((uint64_t)&v378.__r_.__value_.__r.__words[2]);
        MEMORY[0x219A198F4]((char *)&v391 + 8);
        if (v14)
        {
          v23 = (int *)global_logger();
          if (v23[169] <= 2)
          {
            if (cppipc::must_cancel((cppipc *)v23))
              log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
            v24 = (file_logger *)global_logger();
            v25 = file_logger::start_stream(v24, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/parallel_csv_parser.cpp", "parse_csvs_to_sframe", 1244, 1);
            v26 = pthread_getspecific(*((_QWORD *)v25 + 74));
            if (v26 && *((_BYTE *)v26 + 280))
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26 + 2, (uint64_t)"Adding CSV file ", 16);
            if (SHIBYTE(v409.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&v350, v409.__r_.__value_.__l.__data_, v409.__r_.__value_.__l.__size_);
            else
              v350 = v409;
            turi::sanitize_url((__n128 *)&v350, &v351);
            v27 = file_logger::operator<<<std::string>((uint64_t)v25, (uint64_t)&v351);
            v28 = pthread_getspecific(*(_QWORD *)(v27 + 592));
            if (v28 && *((_BYTE *)v28 + 280))
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28 + 2, (uint64_t)" to list of files to parse", 26);
            v29 = pthread_getspecific(*(_QWORD *)(v27 + 592));
            if (v29)
            {
              if (*((_BYTE *)v29 + 280))
              {
                std::ios_base::getloc((const std::ios_base *)((char *)v29 + *(_QWORD *)(v29[2] - 24) + 16));
                v30 = std::locale::use_facet((const std::locale *)&v378, MEMORY[0x24BEDB350]);
                ((void (*)(const std::locale::facet *, uint64_t))v30->__vftable[2].~facet_0)(v30, 10);
                std::locale::~locale((std::locale *)&v378);
                std::ostream::put();
                std::ostream::flush();
                file_logger::stream_flush((file_logger *)v27);
                if (*(_DWORD *)(v27 + 600) == 7)
                {
                  __print_back_trace();
                  v294 = __cxa_allocate_exception(8uLL);
                  *v294 = "LOG_FATAL encountered";
                  __cxa_throw(v294, MEMORY[0x24BEDB718], 0);
                }
              }
            }
            if (v352 < 0)
              operator delete((void *)v351.n128_u64[0]);
            if (SHIBYTE(v350.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v350.__r_.__value_.__l.__data_);
          }
          v31 = v360;
          if ((unint64_t)v360 >= v361)
          {
            v33 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v359, (__int128 *)&v409);
          }
          else
          {
            if (SHIBYTE(v409.__r_.__value_.__r.__words[2]) < 0)
            {
              std::string::__init_copy_ctor_external(v360, v409.__r_.__value_.__l.__data_, v409.__r_.__value_.__l.__size_);
            }
            else
            {
              v32 = *(_OWORD *)&v409.__r_.__value_.__l.__data_;
              v360->__r_.__value_.__r.__words[2] = v409.__r_.__value_.__r.__words[2];
              *(_OWORD *)&v31->__r_.__value_.__l.__data_ = v32;
            }
            v33 = v31 + 1;
          }
          v360 = v33;
        }
      }
      if (SHIBYTE(v409.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v409.__r_.__value_.__l.__data_);
      v11 += 32;
    }
    while (v11 != v12);
    v35 = v357;
    v36 = v358;
    for (i = v320; v36 != v35; v36 -= 32)
    {
      if (*(char *)(v36 - 9) < 0)
        operator delete(*(void **)(v36 - 32));
    }
    v358 = v35;
    v37 = (std::string::size_type)v359;
    if (v359 == v360)
    {
      if ((v327 & 1) != 0)
      {
        v38 = a4;
        if (!a4[288] || !a4[289])
        {
          memset(&v378, 0, sizeof(v378));
          memset(&v409, 0, sizeof(v409));
          turi::sframe::open_for_write((uint64_t)a4, &v378, &v409, (const std::string *)a5, turi::SFRAME_DEFAULT_NUM_SEGMENTS, 1);
          if (v409.__r_.__value_.__r.__words[0])
          {
            v409.__r_.__value_.__l.__size_ = v409.__r_.__value_.__r.__words[0];
            operator delete(v409.__r_.__value_.__l.__data_);
          }
          v409.__r_.__value_.__r.__words[0] = (std::string::size_type)&v378;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v409);
          v38 = a4;
        }
        (*(void (**)(_BYTE *))(*(_QWORD *)v38 + 40))(v38);
        *(_QWORD *)(a6 + 16) = 0;
        *(_QWORD *)(a6 + 8) = 0;
        *(_QWORD *)a6 = a6 + 8;
        goto LABEL_605;
      }
LABEL_620:
      v378.__r_.__value_.__r.__words[0] = v319;
      turi::parse_csvs_to_sframe(std::string const&,turi::csv_line_tokenizer &,turi::csv_file_handling_options,turi::sframe &,std::string)::$_0::operator()((uint64_t *)&v378);
    }
  }
  v348 = 0u;
  memset(&v349, 0, sizeof(v349));
  v347 = 0u;
  memset(&v370, 0, sizeof(v370));
  v368 = 0;
  v367 = 0;
  v369 = 0;
  if (*(char *)(v37 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v366, *(const std::string::value_type **)v37, *(_QWORD *)(v37 + 8));
  }
  else
  {
    v39 = *(_OWORD *)v37;
    v366.__r_.__value_.__r.__words[2] = *(_QWORD *)(v37 + 16);
    *(_OWORD *)&v366.__r_.__value_.__l.__data_ = v39;
  }
  turi::general_ifstream::general_ifstream(&v378, (uint64_t)&v366);
  if (SHIBYTE(v366.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v366.__r_.__value_.__l.__data_);
  if (*(_DWORD *)((char *)&v379 + *(_QWORD *)(v378.__r_.__value_.__r.__words[0] - 24) + 8))
  {
    v409.__r_.__value_.__r.__words[0] = v37;
  }
  turi::skip_BOM((turi *)&v378, v40);
  *(_QWORD *)&v364.tv_usec = 0;
  v364.tv_sec = 0;
  for (j = 0; v10; --v10)
    turi::eol_getline(&v378, (uint64_t)&v364, (uint64_t)(a2 + 32));
  v328 = v325 | i;
  v317 = (uint64_t)(a2 + 32);
  while (1)
  {
    v41 = (std::string *)v367;
    if (v368 != v367)
      break;
    if (*(_DWORD *)((char *)&v379 + *(_QWORD *)(v378.__r_.__value_.__r.__words[0] - 24) + 8))
    {
      v41 = v368;
      break;
    }
    turi::eol_getline(&v378, (uint64_t)&v370, v317);
    MEMORY[0x219A19828](&v415);
    LODWORD(v409.__r_.__value_.__l.__data_) = 0x4000;
    std::locale::locale((std::locale *)&v409.__r_.__value_.__r.__words[1], (const std::locale *)&v415);
    boost::algorithm::trim_if<std::string,boost::algorithm::detail::is_classifiedF>(&v370, (std::locale *)&v409);
    std::locale::~locale((std::locale *)&v409.__r_.__value_.__r.__words[1]);
    std::locale::~locale((std::locale *)&v415);
    if ((v370.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v42 = &v370;
    else
      v42 = (std::string *)v370.__r_.__value_.__r.__words[0];
    if ((v370.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v370.__r_.__value_.__r.__words[2]);
    else
      size = v370.__r_.__value_.__l.__size_;
    turi::csv_line_tokenizer::tokenize_line(a2, (char *)v42, size, (uint64_t *)&v367);
  }
  *(_QWORD *)&v347 = 0xAAAAAAAAAAAAAAABLL * (((char *)v368 - (char *)v41) >> 3);
  if (v8)
  {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)((char *)&v347 + 8), v41, (__int128 *)v368, 0xAAAAAAAAAAAAAAABLL * (((char *)v368 - (char *)v41) >> 3));
    v44 = (int *)global_logger();
    if (v44[169] <= 2)
    {
      if (cppipc::must_cancel((cppipc *)v44))
        log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
      v45 = (file_logger *)global_logger();
      v46 = file_logger::start_stream(v45, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/parallel_csv_parser.cpp", "make_unique_column_names", 960, 1);
      v47 = pthread_getspecific(*((_QWORD *)v46 + 74));
      if (v47 && *((_BYTE *)v47 + 280))
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47 + 2, (uint64_t)"Function entry", 14);
      v48 = pthread_getspecific(*((_QWORD *)v46 + 74));
      if (v48)
      {
        if (*((_BYTE *)v48 + 280))
        {
          std::ios_base::getloc((const std::ios_base *)((char *)v48 + *(_QWORD *)(v48[2] - 24) + 16));
          v49 = std::locale::use_facet((const std::locale *)&v409, MEMORY[0x24BEDB350]);
          ((void (*)(const std::locale::facet *, uint64_t))v49->__vftable[2].~facet_0)(v49, 10);
          std::locale::~locale((std::locale *)&v409);
          std::ostream::put();
          std::ostream::flush();
          file_logger::stream_flush(v46);
          if (*((_DWORD *)v46 + 150) == 7)
          {
            __print_back_trace();
            v303 = __cxa_allocate_exception(8uLL);
            *v303 = "LOG_FATAL encountered";
            __cxa_throw(v303, MEMORY[0x24BEDB718], 0);
          }
        }
      }
    }
    *(_OWORD *)&v409.__r_.__value_.__r.__words[1] = 0uLL;
    v409.__r_.__value_.__r.__words[0] = (std::string::size_type)&v409.__r_.__value_.__l.__size_;
    v50 = *((_QWORD *)&v347 + 1);
    if ((_QWORD)v348 == *((_QWORD *)&v347 + 1))
    {
      v63 = 0;
    }
    else
    {
      v51 = 0;
      do
      {
        v52 = (__int128 *)(v50 + 24 * v51);
        if (*((char *)v52 + 23) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&v415, *(const std::string::value_type **)v52, *((_QWORD *)v52 + 1));
        }
        else
        {
          v53 = *v52;
          *(_QWORD *)&v415.__opaque[8] = *((_QWORD *)v52 + 2);
          *(_OWORD *)&v415.__sig = v53;
        }
        if (std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)&v409, (const void **)&v415))
        {
          std::set<std::string>::set[abi:ne180100]<std::__wrap_iter<std::string*>>((uint64_t)&v374, *((const void ***)&v347 + 1), (const void **)v348);
          memset(&__str, 0, sizeof(__str));
          v54 = 1;
          do
          {
            if (v415.__opaque[15] >= 0)
              v55 = v415.__opaque[15];
            else
              v55 = *(_QWORD *)v415.__opaque;
            std::string::basic_string[abi:ne180100]((uint64_t)&v372, v55 + 1);
            if ((v372.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v56 = &v372;
            else
              v56 = (std::string *)v372.__r_.__value_.__r.__words[0];
            if (v55)
            {
              if (v415.__opaque[15] >= 0)
                sig = &v415;
              else
                sig = (pthread_mutex_t *)v415.__sig;
              memmove(v56, sig, v55);
            }
            *(_WORD *)((char *)&v56->__r_.__value_.__l.__data_ + v55) = 46;
            std::to_string(&v371, v54);
            if ((v371.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v58 = &v371;
            else
              v58 = (std::string *)v371.__r_.__value_.__r.__words[0];
            if ((v371.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v59 = HIBYTE(v371.__r_.__value_.__r.__words[2]);
            else
              v59 = v371.__r_.__value_.__l.__size_;
            v60 = std::string::append(&v372, (const std::string::value_type *)v58, v59);
            v61 = v60->__r_.__value_.__r.__words[0];
            *(_QWORD *)&v408 = v60->__r_.__value_.__l.__size_;
            *(_QWORD *)((char *)&v408 + 7) = *(std::string::size_type *)((char *)&v60->__r_.__value_.__r.__words[1] + 7);
            v62 = HIBYTE(v60->__r_.__value_.__r.__words[2]);
            v60->__r_.__value_.__l.__size_ = 0;
            v60->__r_.__value_.__r.__words[2] = 0;
            v60->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__str.__r_.__value_.__l.__data_);
            __str.__r_.__value_.__r.__words[0] = v61;
            __str.__r_.__value_.__l.__size_ = v408;
            *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)&v408 + 7);
            *((_BYTE *)&__str.__r_.__value_.__s + 23) = v62;
            if (SHIBYTE(v371.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v371.__r_.__value_.__l.__data_);
            if (SHIBYTE(v372.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v372.__r_.__value_.__l.__data_);
            ++v54;
          }
          while (std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)&v374, (const void **)&__str.__r_.__value_.__l.__data_));
          std::string::operator=((std::string *)(*((_QWORD *)&v347 + 1) + 24 * v51), &__str);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__str.__r_.__value_.__l.__data_);
          std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)&v374, (char *)v374.__r_.__value_.__l.__size_);
        }
        std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)&v409, (const void **)(*((_QWORD *)&v347 + 1) + 24 * v51), *((_QWORD *)&v347 + 1) + 24 * v51);
        if (v415.__opaque[15] < 0)
          operator delete((void *)v415.__sig);
        ++v51;
        v50 = *((_QWORD *)&v347 + 1);
      }
      while (v51 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v348 - *((_QWORD *)&v347 + 1)) >> 3));
      v63 = (char *)v409.__r_.__value_.__l.__size_;
    }
    std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)&v409, v63);
    if (SHIBYTE(v370.__r_.__value_.__r.__words[2]) < 0)
    {
      *v370.__r_.__value_.__l.__data_ = 0;
      v370.__r_.__value_.__l.__size_ = 0;
    }
    else
    {
      v370.__r_.__value_.__s.__data_[0] = 0;
      *((_BYTE *)&v370.__r_.__value_.__s + 23) = 0;
    }
    v71 = (std::string *)v367;
    for (k = v368; k != v71; --k)
    {
      if (SHIBYTE(k[-1].__r_.__value_.__r.__words[2]) < 0)
        operator delete(k[-1].__r_.__value_.__l.__data_);
    }
    v368 = v71;
  }
  else
  {
    std::vector<std::string>::resize((std::vector<std::string> *)((char *)&v347 + 8), 0xAAAAAAAAAAAAAAABLL * (((char *)v368 - (char *)v41) >> 3));
    if ((_QWORD)v347)
    {
      v64 = 0;
      v65 = 1;
      do
      {
        std::to_string(&v409, v65);
        v66 = std::string::insert(&v409, 0, "X");
        v67 = v66->__r_.__value_.__r.__words[0];
        v415.__sig = v66->__r_.__value_.__l.__size_;
        *(uint64_t *)((char *)&v415.__sig + 7) = *(std::string::size_type *)((char *)&v66->__r_.__value_.__r.__words[1]
                                                                          + 7);
        v68 = HIBYTE(v66->__r_.__value_.__r.__words[2]);
        v66->__r_.__value_.__l.__size_ = 0;
        v66->__r_.__value_.__r.__words[2] = 0;
        v66->__r_.__value_.__r.__words[0] = 0;
        v69 = *((_QWORD *)&v347 + 1) + v64;
        if (*(char *)(*((_QWORD *)&v347 + 1) + v64 + 23) < 0)
          operator delete(*(void **)v69);
        *(_QWORD *)v69 = v67;
        *(_QWORD *)(v69 + 8) = v415.__sig;
        *(_QWORD *)(v69 + 15) = *(uint64_t *)((char *)&v415.__sig + 7);
        *(_BYTE *)(v69 + 23) = v68;
        if (SHIBYTE(v409.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v409.__r_.__value_.__l.__data_);
        v64 += 24;
      }
      while (v65++ < (unint64_t)v347);
    }
  }
  if (SHIBYTE(j) < 0)
    operator delete((void *)v364.tv_sec);
  v378.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24D91DA58;
  *((_QWORD *)&v391 + 1) = &unk_24D91DA80;
  if (SBYTE7(v391) < 0)
    operator delete(ptr[0]);
  std::istream::~istream();
  boost::iostreams::stream_buffer<turi::fileio_impl::general_fstream_source,std::char_traits<char>,std::allocator<char>,boost::iostreams::input_seekable>::~stream_buffer((uint64_t)&v378.__r_.__value_.__r.__words[2]);
  MEMORY[0x219A198F4]((char *)&v391 + 8);
  v378.__r_.__value_.__r.__words[0] = (std::string::size_type)&v367;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v378);
  if (SHIBYTE(v370.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v370.__r_.__value_.__l.__data_);
  v73 = (int *)global_logger();
  if (v73[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v73))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v74 = (file_logger *)global_logger();
    v75 = file_logger::start_stream(v74, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/parallel_csv_parser.cpp", "parse_csvs_to_sframe", 1272, 1);
    v76 = pthread_getspecific(*((_QWORD *)v75 + 74));
    if (v76 && *((_BYTE *)v76 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76 + 2, (uint64_t)"CSV num. columns: ", 18);
    v77 = file_logger::operator<<<unsigned long>((uint64_t)v75);
    v78 = pthread_getspecific(*(_QWORD *)(v77 + 592));
    if (v78)
    {
      if (*((_BYTE *)v78 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v78 + *(_QWORD *)(v78[2] - 24) + 16));
        v79 = std::locale::use_facet((const std::locale *)&v378, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v79->__vftable[2].~facet_0)(v79, 10);
        std::locale::~locale((std::locale *)&v378);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush((file_logger *)v77);
        if (*(_DWORD *)(v77 + 600) == 7)
        {
          __print_back_trace();
          v298 = __cxa_allocate_exception(8uLL);
          *v298 = "LOG_FATAL encountered";
          __cxa_throw(v298, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  if (!(_QWORD)v347)
  {
    v93 = a4;
    if (!a4[288] || !a4[289])
    {
      memset(&v378, 0, sizeof(v378));
      memset(&v409, 0, sizeof(v409));
      turi::sframe::open_for_write((uint64_t)a4, &v378, &v409, (const std::string *)a5, turi::SFRAME_DEFAULT_NUM_SEGMENTS, 1);
      if (v409.__r_.__value_.__r.__words[0])
      {
        v409.__r_.__value_.__l.__size_ = v409.__r_.__value_.__r.__words[0];
        operator delete(v409.__r_.__value_.__l.__data_);
      }
      v409.__r_.__value_.__r.__words[0] = (std::string::size_type)&v378;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v409);
      v93 = a4;
    }
    (*(void (**)(_BYTE *))(*(_QWORD *)v93 + 40))(v93);
    *(_QWORD *)(a6 + 16) = 0;
    *(_QWORD *)(a6 + 8) = 0;
    *(_QWORD *)a6 = a6 + 8;
    goto LABEL_602;
  }
  v368 = 0;
  v367 = 0;
  v369 = 0;
  if (v362.__r_.__value_.__r.__words[0] != v362.__r_.__value_.__l.__size_)
  {
    v378.__r_.__value_.__r.__words[0] = -1;
    std::vector<unsigned long>::resize((uint64_t)&v367, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v348 - *((_QWORD *)&v347 + 1)) >> 3), &v378);
    v80 = (__int128 *)v362.__r_.__value_.__l.__size_;
    v81 = (std::string *)v362.__r_.__value_.__r.__words[0];
    if (v362.__r_.__value_.__l.__size_ == v362.__r_.__value_.__r.__words[0])
    {
      v92 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v362.__r_.__value_.__l.__size_ - v362.__r_.__value_.__r.__words[0]) >> 3);
      v81 = (std::string *)v362.__r_.__value_.__l.__size_;
    }
    else
    {
      v82 = 0;
      v83 = 0;
      v84 = *((_QWORD *)&v347 + 1);
      v85 = v348;
      do
      {
        v86 = &v81[v82];
        v87 = std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(v84, v85, (unsigned __int8 **)&v81[v82]);
        v85 = v348;
        if (v87 == (_QWORD)v348)
        {
          if (SHIBYTE(v86->__r_.__value_.__r.__words[2]) < 0)
            v89 = v81[v82].__r_.__value_.__l.__size_;
          else
            v89 = HIBYTE(v86->__r_.__value_.__r.__words[2]);
          if (v89 < 2)
            goto LABEL_608;
          v90 = &v81[v82];
          if ((*((_BYTE *)&v86->__r_.__value_.__s + 23) & 0x80) != 0)
            v90 = (std::string *)v86->__r_.__value_.__r.__words[0];
          if (v90->__r_.__value_.__s.__data_[v83] != 88)
          {
LABEL_608:
            v378.__r_.__value_.__r.__words[0] = (std::string::size_type)&v81[v82];
            turi::parse_csvs_to_sframe(std::string const&,turi::csv_line_tokenizer &,turi::csv_file_handling_options,turi::sframe &,std::string)::$_2::operator()();
          }
          std::string::basic_string(&v378, &v81[v82], 1uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v409);
          v91 = std::stoull(&v378, 0, 10);
          if (SHIBYTE(v378.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v378.__r_.__value_.__l.__data_);
          if (!v91 || (v85 = v348, v91 > 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v348 - *((_QWORD *)&v347 + 1)) >> 3)))
          {
            v378.__r_.__value_.__r.__words[0] = (std::string::size_type)&v81[v82];
            turi::parse_csvs_to_sframe(std::string const&,turi::csv_line_tokenizer &,turi::csv_file_handling_options,turi::sframe &,std::string)::$_1::operator()();
          }
          v88 = *((_QWORD *)&v347 + 1) + 24 * v91 - 24;
        }
        else
        {
          v88 = v87;
        }
        if (v88 == v85)
          goto LABEL_608;
        v84 = *((_QWORD *)&v347 + 1);
        *((_QWORD *)v367 + 0xAAAAAAAAAAAAAABLL * ((unint64_t)(v88 - *((_QWORD *)&v347 + 1)) >> 3)) = v83++;
        v80 = (__int128 *)v362.__r_.__value_.__l.__size_;
        v81 = (std::string *)v362.__r_.__value_.__r.__words[0];
        v92 = 0xAAAAAAAAAAAAAAABLL
            * ((uint64_t)(v362.__r_.__value_.__l.__size_ - v362.__r_.__value_.__r.__words[0]) >> 3);
        ++v82;
      }
      while (v83 < v92);
    }
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)((char *)&v347 + 8), v81, v80, v92);
    *(_QWORD *)&v347 = 0xAAAAAAAAAAAAAAABLL
                     * ((uint64_t)(v362.__r_.__value_.__l.__size_ - v362.__r_.__value_.__r.__words[0]) >> 3);
  }
  std::map<std::string,turi::flex_type_enum>::map[abi:ne180100]((uint64_t *)&v344, v363);
  v378.__r_.__value_.__s.__data_[0] = 2;
  if ((unint64_t)v347 <= v349.__r_.__value_.__l.__size_ - v349.__r_.__value_.__r.__words[0])
  {
    if ((unint64_t)v347 < v349.__r_.__value_.__l.__size_ - v349.__r_.__value_.__r.__words[0])
      v349.__r_.__value_.__l.__size_ = v349.__r_.__value_.__r.__words[0] + v347;
  }
  else
  {
    std::vector<turi::flex_type_enum>::__append((unint64_t *)&v349, v347 - (v349.__r_.__value_.__l.__size_ - v349.__r_.__value_.__r.__words[0]), &v378);
  }
  std::string::basic_string[abi:ne180100]<0>(&v378, "__all_columns__");
  v94 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)&v344, (const void **)&v378.__r_.__value_.__l.__data_);
  v95 = v94;
  if (SHIBYTE(v378.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v378.__r_.__value_.__l.__data_);
    if (v95)
      goto LABEL_213;
  }
  else if (v94)
  {
LABEL_213:
    v96 = v347;
    std::string::basic_string[abi:ne180100]<0>(&v409, "__all_columns__");
    v415.__sig = (uint64_t)&v409;
    v97 = std::__tree<std::__value_type<std::string,turi::flex_type_enum>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flex_type_enum>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flex_type_enum>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v344, (const void **)&v409.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &v415);
    std::vector<turi::flex_type_enum>::vector(&v378, v96, (_BYTE *)v97 + 56);
    if (v349.__r_.__value_.__r.__words[0])
    {
      v349.__r_.__value_.__l.__size_ = v349.__r_.__value_.__r.__words[0];
      operator delete(v349.__r_.__value_.__l.__data_);
    }
    v349 = v378;
    memset(&v378, 0, sizeof(v378));
    if (SHIBYTE(v409.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v409.__r_.__value_.__l.__data_);
    goto LABEL_262;
  }
  std::string::basic_string[abi:ne180100]<0>(&v378, "__X0__");
  v98 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)&v344, (const void **)&v378.__r_.__value_.__l.__data_);
  v99 = v98;
  if (SHIBYTE(v378.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v378.__r_.__value_.__l.__data_);
    if (v99)
      goto LABEL_220;
  }
  else if (v98)
  {
LABEL_220:
    if (v346 != v349.__r_.__value_.__l.__size_ - v349.__r_.__value_.__r.__words[0])
    {
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v378);
      v299 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v378.__r_.__value_.__r.__words[2], (uint64_t)"column_type_hints has different size from actual number of columns: ", 68);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v299, (uint64_t)"column_type_hints.size()=", 25);
      v300 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v300, (uint64_t)";number of columns=",
        19);
      v301 = (_QWORD *)std::ostream::operator<<();
      std::endl[abi:ne180100]<char,std::char_traits<char>>(v301);
      v409.__r_.__value_.__r.__words[0] = (std::string::size_type)&v378;
    }
    if ((_QWORD)v347)
    {
      v100 = 0;
      v101 = *MEMORY[0x24BEDB7F0];
      v102 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
      v103 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
      v104 = MEMORY[0x24BEDB848] + 16;
      do
      {
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v378);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v378.__r_.__value_.__r.__words[2], (uint64_t)"__X", 3);
        v105 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v105, (uint64_t)"__", 2);
        std::stringbuf::str();
        v106 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)&v344, (const void **)&v409.__r_.__value_.__l.__data_);
        if (SHIBYTE(v409.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v409.__r_.__value_.__l.__data_);
        if (!v106)
        std::stringbuf::str();
        v415.__sig = (uint64_t)&v409;
        v107 = std::__tree<std::__value_type<std::string,turi::flex_type_enum>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flex_type_enum>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flex_type_enum>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v344, (const void **)&v409.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &v415);
        *(_BYTE *)(v349.__r_.__value_.__r.__words[0] + v100) = *((_BYTE *)v107 + 56);
        if (SHIBYTE(v409.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v409.__r_.__value_.__l.__data_);
        v378.__r_.__value_.__r.__words[0] = v101;
        *(std::string::size_type *)((char *)v378.__r_.__value_.__r.__words + *(_QWORD *)(v101 - 24)) = v102;
        v378.__r_.__value_.__r.__words[2] = v103;
        *(_QWORD *)&v379 = v104;
        if (SBYTE7(v384) < 0)
          operator delete((void *)v383);
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x219A198F4](&v386);
        ++v100;
      }
      while (v100 < (unint64_t)v347);
    }
    goto LABEL_262;
  }
  v108 = *((_QWORD *)&v347 + 1);
  if ((_QWORD)v348 != *((_QWORD *)&v347 + 1))
  {
    v109 = 0;
    v110 = 0;
    do
    {
      if (std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)&v344, (const void **)(v108 + v109)))
      {
        v111 = (_BYTE *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)&v344, (const void **)(*((_QWORD *)&v347 + 1) + v109));
        *(_BYTE *)(v349.__r_.__value_.__r.__words[0] + v110) = *v111;
        std::__tree<std::string>::__erase_unique<std::string>((uint64_t **)&v344, (const void **)(*((_QWORD *)&v347 + 1) + v109));
      }
      ++v110;
      v108 = *((_QWORD *)&v347 + 1);
      v109 += 24;
    }
    while (v110 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v348 - *((_QWORD *)&v347 + 1)) >> 3));
  }
  if (v346)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v378);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v378.__r_.__value_.__r.__words[2], (uint64_t)"These column type hints were not used:", 38);
    v112 = (uint64_t *)v344;
    if (v344 != &v345)
    {
      do
      {
        v113 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v378.__r_.__value_.__r.__words[2], (uint64_t)" ", 1);
        v114 = *((char *)v112 + 55);
        if (v114 >= 0)
          v115 = (uint64_t)(v112 + 4);
        else
          v115 = v112[4];
        if (v114 >= 0)
          v116 = *((unsigned __int8 *)v112 + 55);
        else
          v116 = v112[5];
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v113, v115, v116);
        v117 = (char *)v112[1];
        if (v117)
        {
          do
          {
            v118 = (char **)v117;
            v117 = *(char **)v117;
          }
          while (v117);
        }
        else
        {
          do
          {
            v118 = (char **)v112[2];
            v200 = *v118 == (char *)v112;
            v112 = (uint64_t *)v118;
          }
          while (!v200);
        }
        v112 = (uint64_t *)v118;
      }
      while (v118 != &v345);
    }
    v119 = (int *)global_logger();
    if (v119[169] <= 4)
    {
      if (cppipc::must_cancel((cppipc *)v119))
        log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
      v120 = (file_logger *)global_logger();
      v121 = file_logger::start_stream(v120, 4, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/parallel_csv_parser.cpp", "get_column_types", 1102, 1);
      std::stringbuf::str();
      v122 = file_logger::operator<<<std::string>((uint64_t)v121, (uint64_t)&v409);
      v123 = pthread_getspecific(*(_QWORD *)(v122 + 592));
      if (v123)
      {
        if (*((_BYTE *)v123 + 280))
        {
          std::endl[abi:ne180100]<char,std::char_traits<char>>(v123 + 2);
          file_logger::stream_flush((file_logger *)v122);
          if (*(_DWORD *)(v122 + 600) == 7)
          {
            __print_back_trace();
            v305 = __cxa_allocate_exception(8uLL);
            *v305 = "LOG_FATAL encountered";
            __cxa_throw(v305, MEMORY[0x24BEDB718], 0);
          }
        }
      }
      if (SHIBYTE(v409.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v409.__r_.__value_.__l.__data_);
    }
    v378.__r_.__value_.__r.__words[0] = *MEMORY[0x24BEDB7F0];
    v124 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    *(std::string::size_type *)((char *)v378.__r_.__value_.__r.__words
                              + *(_QWORD *)(v378.__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0]
                                                                                                 + 64);
    v378.__r_.__value_.__r.__words[2] = v124;
    *(_QWORD *)&v379 = MEMORY[0x24BEDB848] + 16;
    if (SBYTE7(v384) < 0)
      operator delete((void *)v383);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x219A198F4](&v386);
  }
LABEL_262:
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)&v344, v345);
  v343 = 0;
  v341 = 0;
  *(_QWORD *)v342 = 0;
  std::vector<turi::flex_type_enum>::__init_with_size[abi:ne180100]<turi::flex_type_enum*,turi::flex_type_enum*>(&v341, v349.__r_.__value_.__l.__data_, v349.__r_.__value_.__l.__size_, v349.__r_.__value_.__l.__size_ - v349.__r_.__value_.__r.__words[0]);
  turi::csv_line_tokenizer::csv_line_tokenizer((turi::csv_line_tokenizer *)v339, (const turi::csv_line_tokenizer *)a2);
  v336 = 0;
  v337 = 0;
  v338 = 0;
  v125 = (turi::thread_pool *)std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v336, v367, (uint64_t)v368, ((char *)v368 - (_BYTE *)v367) >> 3);
  instance = (turi::thread_pool *)turi::thread_pool::get_instance(v125);
  v127 = turi::thread_pool::size(instance);
  v128 = 2;
  if (v127 > 2)
    v128 = v127;
  v378.__r_.__value_.__r.__words[0] = v128 - 1;
  std::vector<std::vector<std::vector<turi::flexible_type>>>::vector(&v378.__r_.__value_.__l.__size_, v128 - 1);
  std::vector<unsigned long>::vector((_QWORD *)&v379 + 1, v378.__r_.__value_.__r.__words[0]);
  std::vector<std::vector<std::vector<turi::flexible_type>>>::vector(&v381, v378.__r_.__value_.__r.__words[0]);
  std::vector<unsigned long>::vector((_QWORD *)&v382 + 1, v378.__r_.__value_.__r.__words[0]);
  std::vector<std::vector<turi::flexible_type>>::vector(&v384, v378.__r_.__value_.__r.__words[0]);
  std::vector<std::vector<turi::flexible_type>>::vector(&v386, v378.__r_.__value_.__r.__words[0]);
  v129 = (turi::thread_pool *)std::vector<turi::csv_line_tokenizer>::vector(&v388, v378.__r_.__value_.__r.__words[0], (const turi::csv_line_tokenizer *)v339);
  v391 = 0u;
  *(_OWORD *)ptr = 0u;
  *(_OWORD *)v389 = 0u;
  v130 = (turi::thread_pool *)turi::thread_pool::get_instance(v129);
  v131 = (turi::thread_pool *)turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)v392, v130);
  v132 = (turi::thread_pool *)turi::thread_pool::get_instance(v131);
  turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)v393, v132);
  v395 = 0;
  *(_OWORD *)v394 = 0u;
  std::vector<turi::flex_type_enum>::__init_with_size[abi:ne180100]<turi::flex_type_enum*,turi::flex_type_enum*>(v394, v341, *(uint64_t *)v342, *(_QWORD *)v342 - (_QWORD)v341);
  memset(v396, 0, sizeof(v396));
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v396, v336, (uint64_t)v337, (v337 - (_BYTE *)v336) >> 3);
  v397 = 0;
  v398 = 0;
  gettimeofday(&v399, 0);
  v400 = v321;
  v401 = 0u;
  v402 = 0;
  v403 = 0;
  v404 = v328;
  v405 = v325;
  v133 = &v406;
  if (SHIBYTE(v340.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v406, v340.__r_.__value_.__l.__data_, v340.__r_.__value_.__l.__size_);
  else
    v406 = v340;
  if (SHIBYTE(v406.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v406.__r_.__value_.__l.__size_ != 1)
    {
LABEL_273:
      v134 = 0;
      goto LABEL_274;
    }
    v133 = (std::string *)v406.__r_.__value_.__r.__words[0];
  }
  else if (SHIBYTE(v406.__r_.__value_.__r.__words[2]) != 1)
  {
    goto LABEL_273;
  }
  v134 = v133->__r_.__value_.__s.__data_[0] == 10;
LABEL_274:
  v407 = v134;
  if (v336)
  {
    v337 = v336;
    operator delete(v336);
  }
  turi::csv_line_tokenizer::~csv_line_tokenizer(v339);
  v135 = (turi *)v341;
  if (v341)
  {
    *(_QWORD *)v342 = v341;
    operator delete(v341);
  }
  v136 = (uint64_t)v359;
  v137 = v360;
  if (v359 == v360)
  {
    v138 = 0;
  }
  else
  {
    v138 = 0;
    do
    {
      if (*(char *)(v136 + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&v415, *(const std::string::value_type **)v136, *(_QWORD *)(v136 + 8));
      }
      else
      {
        v139 = *(_OWORD *)v136;
        *(_QWORD *)&v415.__opaque[8] = *(_QWORD *)(v136 + 16);
        *(_OWORD *)&v415.__sig = v139;
      }
      if (v415.__opaque[15] < 0)
      {
        std::string::__init_copy_ctor_external(&v335, (const std::string::value_type *)v415.__sig, *(std::string::size_type *)v415.__opaque);
      }
      else
      {
        *(_OWORD *)&v335.__r_.__value_.__l.__data_ = *(_OWORD *)&v415.__sig;
        v335.__r_.__value_.__r.__words[2] = *(_QWORD *)&v415.__opaque[8];
      }
      turi::general_ifstream::general_ifstream(&v409, (uint64_t)&v335);
      if (SHIBYTE(v335.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v335.__r_.__value_.__l.__data_);
      v140 = turi::general_ifstream::file_size((turi::neural_net::shared_float_array **)&v409);
      v409.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24D91DA58;
      v414[0] = &unk_24D91DA80;
      if (v413 < 0)
        operator delete(v412);
      std::istream::~istream();
      boost::iostreams::stream_buffer<turi::fileio_impl::general_fstream_source,std::char_traits<char>,std::allocator<char>,boost::iostreams::input_seekable>::~stream_buffer((uint64_t)&v409.__r_.__value_.__r.__words[2]);
      v135 = (turi *)MEMORY[0x219A198F4](v414);
      if (v415.__opaque[15] < 0)
        operator delete((void *)v415.__sig);
      v138 += v140;
      v136 += 24;
    }
    while ((std::string *)v136 != v137);
  }
  *((_QWORD *)&v401 + 1) = v138;
  if (!a4[288] || !a4[289])
  {
    v141 = turi::num_temp_directories(v135);
    if (v141 <= 1)
      v142 = 1;
    else
      v142 = v141;
    turi::sframe::open_for_write((uint64_t)a4, (_QWORD *)&v347 + 1, &v349, (const std::string *)a5, v142, 1);
  }
  *(_QWORD *)(a6 + 16) = 0;
  *(_QWORD *)(a6 + 8) = 0;
  *(_QWORD *)a6 = a6 + 8;
  gettimeofday(&v399, 0);
  v143 = (uint64_t)v359;
  v308 = v360;
  if (v359 != v360)
  {
    v307 = v321 - 1;
    while (1)
    {
      v315 = (std::string *)v143;
      if (*(char *)(v143 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v366, *(const std::string::value_type **)v143, *(_QWORD *)(v143 + 8));
      }
      else
      {
        v144 = *(_OWORD *)v143;
        v366.__r_.__value_.__r.__words[2] = *(_QWORD *)(v143 + 16);
        *(_OWORD *)&v366.__r_.__value_.__l.__data_ = v144;
      }
      if (v307 < v398)
        break;
      v330 = *(_WORD *)v311;
      v331 = *((_BYTE *)v311 + 2);
      std::map<std::string,turi::flex_type_enum>::map[abi:ne180100](v332, v310);
      memset(&v333, 0, sizeof(v333));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v333, v311[4], v311[5], 0xAAAAAAAAAAAAAAABLL * (((char *)v311[5] - (char *)v311[4]) >> 3));
      v334 = *v309;
      if (*(char *)(a5 + 23) < 0)
        std::string::__init_copy_ctor_external(&v329, *(const std::string::value_type **)a5, *(_QWORD *)(a5 + 8));
      else
        v329 = *(std::string *)a5;
      v145 = v330;
      v314 = HIBYTE(v330);
      v316 = v331;
      v146 = *((_QWORD *)&v334 + 1);
      v147 = (int *)global_logger();
      if (v147[169] <= 2)
      {
        if (cppipc::must_cancel((cppipc *)v147))
          log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
        v148 = (file_logger *)global_logger();
        v149 = file_logger::start_stream(v148, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/parallel_csv_parser.cpp", "parse_csv_to_sframe", 1137, 1);
        v150 = pthread_getspecific(*((_QWORD *)v149 + 74));
        if (v150 && *((_BYTE *)v150 + 280))
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v150 + 2, (uint64_t)"Loading sframe from ", 20);
        if (SHIBYTE(v366.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v372, v366.__r_.__value_.__l.__data_, v366.__r_.__value_.__l.__size_);
        else
          v372 = v366;
        turi::sanitize_url((__n128 *)&v372, (__n128 *)&__str);
        v151 = file_logger::operator<<<std::string>((uint64_t)v149, (uint64_t)&__str);
        v152 = pthread_getspecific(*(_QWORD *)(v151 + 592));
        if (v152)
        {
          if (*((_BYTE *)v152 + 280))
          {
            std::ios_base::getloc((const std::ios_base *)((char *)v152 + *(_QWORD *)(v152[2] - 24) + 16));
            v153 = std::locale::use_facet((const std::locale *)&v409, MEMORY[0x24BEDB350]);
            ((void (*)(const std::locale::facet *, uint64_t))v153->__vftable[2].~facet_0)(v153, 10);
            std::locale::~locale((std::locale *)&v409);
            std::ostream::put();
            std::ostream::flush();
            file_logger::stream_flush((file_logger *)v151);
            if (*(_DWORD *)(v151 + 600) == 7)
            {
              __print_back_trace();
              v295 = __cxa_allocate_exception(8uLL);
              *v295 = "LOG_FATAL encountered";
              __cxa_throw(v295, MEMORY[0x24BEDB718], 0);
            }
          }
        }
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        if (SHIBYTE(v372.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v372.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v366.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v371, v366.__r_.__value_.__l.__data_, v366.__r_.__value_.__l.__size_);
      else
        v371 = v366;
      turi::general_ifstream::general_ifstream(&v409, (uint64_t)&v371);
      if (SHIBYTE(v371.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v371.__r_.__value_.__l.__data_);
      if (*(_DWORD *)&v411[*(_QWORD *)(v409.__r_.__value_.__r.__words[0] - 24)])
      {
        v415.__sig = (uint64_t)&v366;
      }
      turi::skip_BOM((turi *)&v409, v154);
      memset(&v370, 0, sizeof(v370));
      for (; v146; --v146)
        turi::eol_getline(&v409, (uint64_t)&v370, v317);
      if (!v145)
        goto LABEL_351;
      v155 = 0;
      v156 = 0;
      memset(&v415, 0, 24);
      for (; !*(_DWORD *)&v411[*(_QWORD *)(v409.__r_.__value_.__r.__words[0] - 24)]; v156 = *(_QWORD *)v415.__opaque)
      {
        memset(&v374, 0, sizeof(v374));
        turi::eol_getline(&v409, (uint64_t)&v374, v317);
        if ((v374.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v157 = &v374;
        else
          v157 = (std::string *)v374.__r_.__value_.__r.__words[0];
        if ((v374.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v158 = HIBYTE(v374.__r_.__value_.__r.__words[2]);
        else
          v158 = v374.__r_.__value_.__l.__size_;
        turi::csv_line_tokenizer::tokenize_line(a2, (char *)v157, v158, &v415.__sig);
        if (SHIBYTE(v374.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v374.__r_.__value_.__l.__data_);
        v156 = v415.__sig;
        v155 = *(_QWORD *)v415.__opaque;
        if (*(_QWORD *)v415.__opaque != v415.__sig)
          break;
      }
      if (v316
        || (v396[0] == v396[1]
          ? (v159 = (char *)v394[1] - (char *)v394[0])
          : (v159 = ((char *)v396[1] - (char *)v396[0]) >> 3),
            0xAAAAAAAAAAAAAAABLL * ((v155 - v156) >> 3) == v159))
      {
        v374.__r_.__value_.__r.__words[0] = (std::string::size_type)&v415;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v374);
LABEL_351:
        _ZNSt3__115allocate_sharedB8ne180100IN4turi6sarrayINS1_13flexible_typeEEENS_9allocatorIS4_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v408);
        if (v316)
        {
          turi::sarray<turi::flexible_type>::open_for_write(v408, turi::SFRAME_DEFAULT_NUM_SEGMENTS, 0);
          turi::sarray<turi::flexible_type>::set_type(v408, 2);
        }
        v322 = v408;
        v318 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a4 + 24))(a4);
        v313 = turi::general_ifstream::file_size((turi::neural_net::shared_float_array **)&v409);
        gettimeofday(&v364, 0);
        if (*(_DWORD *)&v411[*(_QWORD *)(v409.__r_.__value_.__r.__words[0] - 24)])
        {
LABEL_354:
          turi::parallel_task_queue::join((turi::parallel_task_queue *)v393);
          *(_QWORD *)&v401 = v401 + v313;
          if (v314)
          {
            if (v403)
            {
              v160 = (int *)global_logger();
              if (v160[169] <= 4)
              {
                if (cppipc::must_cancel((cppipc *)v160))
                  goto LABEL_613;
                v161 = (file_logger *)global_logger();
                v162 = file_logger::start_stream(v161, 4, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/parallel_csv_parser.cpp", "parse_csv_to_sframe", 1187, 1);
                v163 = file_logger::operator<<<unsigned long>((uint64_t)v162);
                v164 = pthread_getspecific(*(_QWORD *)(v163 + 592));
                if (v164 && *((_BYTE *)v164 + 280))
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v164 + 2, (uint64_t)" lines failed to parse correctly", 32);
                v165 = pthread_getspecific(*(_QWORD *)(v163 + 592));
                if (v165)
                {
                  if (*((_BYTE *)v165 + 280))
                  {
                    std::ios_base::getloc((const std::ios_base *)((char *)v165 + *(_QWORD *)(v165[2] - 24) + 16));
                    v166 = std::locale::use_facet((const std::locale *)&v415, MEMORY[0x24BEDB350]);
                    ((void (*)(const std::locale::facet *, uint64_t))v166->__vftable[2].~facet_0)(v166, 10);
                    std::locale::~locale((std::locale *)&v415);
                    std::ostream::put();
                    std::ostream::flush();
                    file_logger::stream_flush((file_logger *)v163);
                    if (*(_DWORD *)(v163 + 600) == 7)
                    {
                      __print_back_trace();
                      v297 = __cxa_allocate_exception(8uLL);
                      *v297 = "LOG_FATAL encountered";
                      __cxa_throw(v297, MEMORY[0x24BEDB718], 0);
                    }
                  }
                }
              }
            }
          }
          if (v316)
          {
            (*(void (**)(_QWORD))(*(_QWORD *)v408 + 40))(v408);
            v167 = v408;
            if (*(_BYTE *)(v408 + 248))
            {
              v168 = *(char **)(v408 + 80);
              v169 = *(char **)(v408 + 88);
              v170 = v169 - v168;
              if (v169 != v168)
              {
                v171 = 0;
                v172 = v170 >> 3;
                if (v172 <= 1)
                  v172 = 1;
                do
                {
                  v173 = *(_QWORD *)v168;
                  v168 += 8;
                  v171 += v173;
                  --v172;
                }
                while (v172);
                if (v171)
                {
                  if (SHIBYTE(v366.__r_.__value_.__r.__words[2]) < 0)
                  {
                    std::string::__init_copy_ctor_external((std::string *)&v415, v366.__r_.__value_.__l.__data_, v366.__r_.__value_.__l.__size_);
                    v167 = v408;
                  }
                  else
                  {
                    *(_OWORD *)&v415.__sig = *(_OWORD *)&v366.__r_.__value_.__l.__data_;
                    *(_QWORD *)&v415.__opaque[8] = *((_QWORD *)&v366.__r_.__value_.__l + 2);
                  }
                  *(_QWORD *)&v415.__opaque[16] = v167;
                  *(_QWORD *)&v415.__opaque[24] = *((_QWORD *)&v408 + 1);
                  if (*((_QWORD *)&v408 + 1))
                  {
                    v264 = (unint64_t *)(*((_QWORD *)&v408 + 1) + 8);
                    do
                      v265 = __ldxr(v264);
                    while (__stxr(v265 + 1, v264));
                  }
                  std::__tree<std::__value_type<std::string,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<turi::sarray<turi::flexible_type>>>>>::__emplace_unique_key_args<std::string,std::pair<std::string,std::shared_ptr<turi::sarray<turi::flexible_type>>>>((uint64_t **)a6, (const void **)&v415, (uint64_t)&v415);
                  v266 = *(std::__shared_weak_count **)&v415.__opaque[24];
                  if (*(_QWORD *)&v415.__opaque[24])
                  {
                    v267 = (unint64_t *)(*(_QWORD *)&v415.__opaque[24] + 8);
                    do
                      v268 = __ldaxr(v267);
                    while (__stlxr(v268 - 1, v267));
                    if (!v268)
                    {
                      ((void (*)(std::__shared_weak_count *))v266->__on_zero_shared)(v266);
                      std::__shared_weak_count::__release_weak(v266);
                    }
                  }
                  if (v415.__opaque[15] < 0)
                    operator delete((void *)v415.__sig);
                }
              }
            }
          }
          v269 = (int *)global_logger();
          if (v269[169] <= 4)
          {
            if (cppipc::must_cancel((cppipc *)v269))
LABEL_613:
              log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
            v270 = (file_logger *)global_logger();
            v271 = file_logger::start_stream(v270, 4, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/parallel_csv_parser.cpp", "parse_csv_to_sframe", 1199, 1);
            v272 = pthread_getspecific(*((_QWORD *)v271 + 74));
            if (v272 && *((_BYTE *)v272 + 280))
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v272 + 2, (uint64_t)"Finished parsing file ", 22);
            if (SHIBYTE(v366.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&v374, v366.__r_.__value_.__l.__data_, v366.__r_.__value_.__l.__size_);
            else
              v374 = v366;
            turi::sanitize_url((__n128 *)&v374, (__n128 *)&v415);
            v273 = file_logger::operator<<<std::string>((uint64_t)v271, (uint64_t)&v415);
            v274 = pthread_getspecific(*(_QWORD *)(v273 + 592));
            if (v274)
            {
              if (*((_BYTE *)v274 + 280))
              {
                std::ios_base::getloc((const std::ios_base *)((char *)v274 + *(_QWORD *)(v274[2] - 24) + 16));
                v275 = std::locale::use_facet((const std::locale *)&v364, MEMORY[0x24BEDB350]);
                ((void (*)(const std::locale::facet *, uint64_t))v275->__vftable[2].~facet_0)(v275, 10);
                std::locale::~locale((std::locale *)&v364);
                std::ostream::put();
                std::ostream::flush();
                file_logger::stream_flush((file_logger *)v273);
                if (*(_DWORD *)(v273 + 600) == 7)
                {
                  __print_back_trace();
                  v296 = __cxa_allocate_exception(8uLL);
                  *v296 = "LOG_FATAL encountered";
                  __cxa_throw(v296, MEMORY[0x24BEDB718], 0);
                }
              }
            }
            if (v415.__opaque[15] < 0)
              operator delete((void *)v415.__sig);
            if (SHIBYTE(v374.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v374.__r_.__value_.__l.__data_);
          }
          v276 = (std::__shared_weak_count *)*((_QWORD *)&v408 + 1);
          if (*((_QWORD *)&v408 + 1))
          {
            v277 = (unint64_t *)(*((_QWORD *)&v408 + 1) + 8);
            do
              v278 = __ldaxr(v277);
            while (__stlxr(v278 - 1, v277));
            if (!v278)
            {
              ((void (*)(std::__shared_weak_count *))v276->__on_zero_shared)(v276);
              std::__shared_weak_count::__release_weak(v276);
            }
          }
          goto LABEL_571;
        }
        while (2)
        {
          if (v400 && v398 >= v400)
            goto LABEL_354;
          v175 = (void *)HIBYTE(ptr[0]);
          if (SHIBYTE(ptr[0]) < 0)
            v175 = v389[1];
          if (!v175)
            goto LABEL_354;
          v176 = v174;
          v177 = HIBYTE(v406.__r_.__value_.__r.__words[2]);
          if ((v406.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v177 = v406.__r_.__value_.__l.__size_;
          if (!v177)
          {
          }
          v178 = *(_DWORD *)&v411[*(_QWORD *)(v409.__r_.__value_.__r.__words[0] - 24)];
          v179 = pthread_mutex_init(&v415, 0);
          assert_msg(v179 == 0, "Mutex create error %d", v179);
          v180 = HIBYTE(ptr[0]);
          v181 = v389;
          if (SHIBYTE(ptr[0]) < 0)
          {
            v181 = (void **)v389[0];
            v180 = (unint64_t)v389[1];
          }
          v375 = v181;
          v182 = v180 >> 6;
          if ((v180 & 0x3F) != 0)
            ++v182;
          v183 = *((_QWORD *)&v391 + 1);
          *(_QWORD *)&v391 = v180;
          *((_QWORD *)&v391 + 1) = v182;
          v184 = (char *)malloc_type_realloc(ptr[1], 8 * v182, 0x100004000313F17uLL);
          v185 = v184;
          ptr[1] = v184;
          if ((v391 & 0x3F) != 0)
            *(_QWORD *)&v184[8 * *((_QWORD *)&v391 + 1) - 8] &= ~(-1 << (v391 & 0x3F));
          v186 = *((_QWORD *)&v391 + 1);
          if (*((_QWORD *)&v391 + 1) > v183)
          {
            v187 = &v184[8 * v183];
            v188 = 8 * *((_QWORD *)&v391 + 1) - 8 * v183;
            if (v188 >= 1)
            {
              bzero(v187, 8 * (((unint64_t)v188 >> 3) - ((unint64_t)v188 > 7)) + 8);
              v186 = *((_QWORD *)&v391 + 1);
            }
          }
          v326 = v176;
          if (v186 >= 1)
            bzero(v185, 8 * (v186 - ((v186 & 0x1FFFFFFFFFFFFFFFLL) != 0)) + 8);
          v189 = v388[2];
          v190 = v388[59];
          v191 = (unint64_t)v389[1];
          if (SHIBYTE(ptr[0]) >= 0)
            v192 = (char *)v389;
          else
            v192 = (char *)v389[0];
          if (SHIBYTE(ptr[0]) >= 0)
            v191 = HIBYTE(ptr[0]);
          v193 = &v192[v191];
          if (v388[57])
          {
            if (v191)
            {
              v194 = 0;
              v195 = 0;
              v196 = v388[56];
              v197 = &v192[v191];
              v198 = 1;
              while (1)
              {
                if ((v198 & 1) == 0)
                {
                  v207 = *v192;
                  v208 = v194 >> 6;
                  v209 = 1 << v194;
                  if ((v195 & 1) != 0)
                    goto LABEL_425;
                  goto LABEL_423;
                }
                while (1)
                {
                  v199 = *v192;
                  v200 = v199 == v196 || v199 == v190;
                  v201 = v200 || v199 == v189;
                  v202 = v201;
                  if (v201)
                    break;
                  if (++v192 == v193)
                  {
                    v192 = v197;
                    break;
                  }
                }
                v203 = v389;
                if (SHIBYTE(ptr[0]) < 0)
                  v203 = (void **)v389[0];
                v204 = v192 - (char *)v203;
                v205 = v204;
                if ((v195 & 1) == 0)
                  goto LABEL_420;
                if (v194 < v204)
                  break;
                v205 = v194;
                if (!v202)
                  goto LABEL_457;
LABEL_421:
                v207 = *v192;
                if (!(v195 & 1 | (v207 != v196)))
                {
                  v374.__r_.__value_.__s.__data_[0] = 0;
                  if (!v374.__r_.__value_.__s.__data_[0])
                    goto LABEL_457;
                  v195 = 0;
                  v194 = (unint64_t)&v210[v205 - (_QWORD)v192];
                  v198 = 1;
                  v192 = v210;
                  goto LABEL_429;
                }
                v208 = v205 >> 6;
                v209 = 1 << v205;
                v194 = v205;
                if ((v195 & 1) != (v207 == v190))
                {
LABEL_425:
                  *((_QWORD *)ptr[1] + v208) |= v209;
                  v195 = 1;
                  goto LABEL_426;
                }
LABEL_423:
                v195 = 0;
                *((_QWORD *)ptr[1] + v208) &= ~v209;
LABEL_426:
                v198 = v198 ^ 1 | (v207 != v189);
                ++v192;
                ++v194;
LABEL_429:
                if (v192 == v193)
                  goto LABEL_457;
              }
              v206 = (char *)ptr[1];
              v205 = v194;
              do
              {
                *(_QWORD *)&v206[(v205 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v205;
                ++v205;
              }
              while (v205 < v204);
LABEL_420:
              if (!v202)
                goto LABEL_457;
              goto LABEL_421;
            }
          }
          else if (v191)
          {
            v211 = 0;
            v212 = 0;
            v213 = &v192[v191];
            v214 = 1;
            do
            {
              if ((v214 & 1) != 0)
              {
                if (v192 == v193)
                {
                  v217 = 1;
                  v192 = v193;
                }
                else
                {
                  while (1)
                  {
                    v215 = *v192;
                    v216 = v215 == v190 || v215 == v189;
                    v217 = !v216;
                    if (v216)
                      break;
                    if (++v192 == v193)
                    {
                      v192 = v213;
                      break;
                    }
                  }
                }
                v218 = v389;
                if (SHIBYTE(ptr[0]) < 0)
                  v218 = (void **)v389[0];
                v219 = v192 - (char *)v218;
                m = v219;
                if ((v212 & 1) != 0)
                {
                  for (m = v211; m < v219; ++m)
                    *(_QWORD *)&v185[(m >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << m;
                }
                v211 = m;
                if (v217)
                  break;
              }
              v221 = *v192;
              v212 ^= v214 & (v221 == v190);
              v222 = v211 >> 6;
              v223 = 1 << v211;
              v224 = (v212 & 1) != 0 ? *(_QWORD *)&v185[8 * v222] | v223 : *(_QWORD *)&v185[8 * v222] & ~v223;
              *(_QWORD *)&v185[8 * v222] = v224;
              v214 = v214 ^ 1 | (v221 != v189);
              ++v211;
              ++v192;
            }
            while (v192 != v193);
          }
LABEL_457:
          if (v178)
          {
            if (SHIBYTE(ptr[0]) < 0)
            {
              v225 = v389[1];
              if (v389[1])
LABEL_460:
                *(_QWORD *)((char *)ptr[1] + ((((unint64_t)v225 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << (v225 - 1));
            }
            else
            {
              v225 = (void *)HIBYTE(ptr[0]);
              if (HIBYTE(ptr[0]))
                goto LABEL_460;
            }
          }
          if (v378.__r_.__value_.__r.__words[0])
          {
            v226 = 0;
            do
            {
              v374.__r_.__value_.__r.__words[0] = 0;
              v227 = (_QWORD *)operator new();
              *v227 = &v415;
              v227[1] = &v375;
              v227[2] = &v378;
              v227[3] = v226;
              v374.__r_.__value_.__l.__size_ = (std::string::size_type)v227;
              turi::parallel_task_queue::launch((uint64_t)v392, (uint64_t)&v374, -1);
              boost::function0<void>::~function0((uint64_t *)&v374);
              ++v226;
            }
            while (v226 < v378.__r_.__value_.__r.__words[0]);
          }
          turi::parallel_task_queue::join((turi::parallel_task_queue *)v392);
          if (SHIBYTE(ptr[0]) < 0)
          {
            v228 = (char *)v375 - (char *)v389[0];
            if ((void *)((char *)v375 - (char *)v389[0]) < v389[1])
              goto LABEL_468;
            *(_BYTE *)v389[0] = 0;
            v389[1] = 0;
          }
          else
          {
            v228 = (char *)v375 - (char *)v389;
            if ((char *)v375 - (char *)v389 >= (unint64_t)HIBYTE(ptr[0]))
            {
              LOBYTE(v389[0]) = 0;
              HIBYTE(ptr[0]) = 0;
              goto LABEL_474;
            }
LABEL_468:
            std::string::basic_string(&v374, (const std::string *)v389, v228, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v376);
            if (SHIBYTE(ptr[0]) < 0)
              operator delete(v389[0]);
            *(_OWORD *)v389 = *(_OWORD *)&v374.__r_.__value_.__l.__data_;
            ptr[0] = (void *)v374.__r_.__value_.__r.__words[2];
          }
LABEL_474:
          turi::mutex::~mutex(&v415);
          turi::parallel_task_queue::join((turi::parallel_task_queue *)v393);
          if (cppipc::must_cancel(v229))
          if (v400)
          {
            if (v400 <= v398)
              v230 = 0;
            else
              v230 = v400 - v398;
            v232 = (unint64_t *)*((_QWORD *)&v379 + 1);
            if ((_QWORD)v380 == *((_QWORD *)&v379 + 1))
            {
              v233 = 0;
            }
            else
            {
              v233 = 0;
              v234 = (uint64_t)(v380 - *((_QWORD *)&v379 + 1)) >> 3;
              if (v234 <= 1)
                v234 = 1;
              do
              {
                v235 = *v232;
                if (*v232 > v230)
                {
                  *v232 = v230;
                  v233 = 1;
                  v235 = v230;
                }
                v230 -= v235;
                ++v232;
                --v234;
              }
              while (v234);
            }
            v231 = v233 & 1;
          }
          else
          {
            v231 = 0;
          }
          if (*((_QWORD *)&v401 + 1))
          {
            v236 = turi::general_ifstream::get_bytes_read((turi::general_ifstream *)&v409);
            if (v236 == -1)
              v237 = 0;
            else
              v237 = v236;
            v238 = ((_QWORD)v401 + v237) * v318 / *((_QWORD *)&v401 + 1);
            if (v238 >= v318)
              v238 = v318 - 1;
            if (v397 <= v238)
              v239 = v238;
            else
              v239 = v397;
            v397 = v239;
          }
          else
          {
            v239 = v397;
          }
          v240 = v381;
          v381 = *(_OWORD *)&v378.__r_.__value_.__r.__words[1];
          *(_OWORD *)&v378.__r_.__value_.__r.__words[1] = v240;
          v241 = v382;
          v382 = v379;
          v379 = v241;
          v242 = *((_QWORD *)&v383 + 1);
          v383 = v380;
          *((_QWORD *)&v380 + 1) = v242;
          v402 = 1;
          *(_QWORD *)&v380 = *((_QWORD *)&v241 + 1);
          v415.__sig = 0;
          std::vector<unsigned long>::resize((uint64_t)&v379 + 8, v378.__r_.__value_.__r.__words[0], &v415);
          v243 = v386;
          v386 = v384;
          v384 = v243;
          v244 = v387;
          v387 = v385;
          v385 = v244;
          v245 = (_QWORD *)operator new();
          *v245 = v239;
          v245[1] = a4;
          v245[2] = &v378;
          v245[3] = v322;
          *(_QWORD *)v415.__opaque = v245;
          turi::parallel_task_queue::launch((uint64_t)v393, (uint64_t)&v415, -1);
          v246 = boost::function0<void>::~function0(&v415.__sig);
          if (v398)
          {
            v248 = turi::timer::approx_time_seconds((turi::timer *)v246);
                 + 5.0;
                       + 5.0) <= v248)
            if (cppipc::must_cancel(v247))
              log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
            v250 = (file_logger *)global_logger();
            v251 = file_logger::start_stream(v250, 4, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/parallel_csv_parser.cpp", "parse", 317, v249 <= v248);
            v252 = pthread_getspecific(*((_QWORD *)v251 + 74));
            if (v252 && *((_BYTE *)v252 + 280))
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v252 + 2, (uint64_t)"Read ", 5);
            v253 = file_logger::operator<<<unsigned long>((uint64_t)v251);
            v254 = pthread_getspecific(*(_QWORD *)(v253 + 592));
            if (v254 && *((_BYTE *)v254 + 280))
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v254 + 2, (uint64_t)" lines. Lines per second: ", 26);
            gettimeofday((timeval *)&v415, 0);
            v255 = file_logger::operator<<<double>(v253);
            v256 = pthread_getspecific(*(_QWORD *)(v255 + 592));
            if (v256 && *((_BYTE *)v256 + 280))
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v256 + 2, (uint64_t)"\t", 1);
            v257 = pthread_getspecific(*(_QWORD *)(v255 + 592));
            if (v257)
            {
              if (*((_BYTE *)v257 + 280))
              {
                std::ios_base::getloc((const std::ios_base *)((char *)v257 + *(_QWORD *)(v257[2] - 24) + 16));
                v258 = std::locale::use_facet((const std::locale *)&v415, MEMORY[0x24BEDB350]);
                ((void (*)(const std::locale::facet *, uint64_t))v258->__vftable[2].~facet_0)(v258, 10);
                std::locale::~locale((std::locale *)&v415);
                std::ostream::put();
                std::ostream::flush();
                file_logger::stream_flush((file_logger *)v255);
                if (*(_DWORD *)(v255 + 600) == 7)
                {
                  __print_back_trace();
                  v293 = __cxa_allocate_exception(8uLL);
                  *v293 = "LOG_FATAL encountered";
                  __cxa_throw(v293, MEMORY[0x24BEDB718], 0);
                }
              }
            }
          }
          if (v231)
            turi::parallel_task_queue::join((turi::parallel_task_queue *)v393);
          if (*(_DWORD *)&v411[*(_QWORD *)(v409.__r_.__value_.__r.__words[0] - 24)])
            v259 = 0;
          else
            v259 = v326;
          if ((v259 & 1) == 0)
            goto LABEL_354;
          continue;
        }
      }
      v260 = (int *)global_logger();
      if (v260[169] <= 4)
      {
        if (cppipc::must_cancel((cppipc *)v260))
          log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
        v261 = (file_logger *)global_logger();
        v262 = file_logger::start_stream(v261, 4, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/parallel_csv_parser.cpp", "parse_csv_to_sframe", 1165, 1);
        v263 = pthread_getspecific(*((_QWORD *)v262 + 74));
        if (v263 && *((_BYTE *)v263 + 280))
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v263 + 2, (uint64_t)"Unexpected number of columns found in ", 38);
        if (SHIBYTE(v366.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v374, v366.__r_.__value_.__l.__data_, v366.__r_.__value_.__l.__size_);
        else
          v374 = v366;
        v279 = file_logger::operator<<<std::string>((uint64_t)v262, (uint64_t)&v374);
        v280 = pthread_getspecific(*(_QWORD *)(v279 + 592));
        if (v280 && *((_BYTE *)v280 + 280))
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v280 + 2, (uint64_t)". Skipping this file.", 21);
        v281 = pthread_getspecific(*(_QWORD *)(v279 + 592));
        if (v281)
        {
          if (*((_BYTE *)v281 + 280))
          {
            std::ios_base::getloc((const std::ios_base *)((char *)v281 + *(_QWORD *)(v281[2] - 24) + 16));
            v282 = std::locale::use_facet((const std::locale *)&v364, MEMORY[0x24BEDB350]);
            ((void (*)(const std::locale::facet *, uint64_t))v282->__vftable[2].~facet_0)(v282, 10);
            std::locale::~locale((std::locale *)&v364);
            std::ostream::put();
            std::ostream::flush();
            file_logger::stream_flush((file_logger *)v279);
            if (*(_DWORD *)(v279 + 600) == 7)
            {
              __print_back_trace();
              v302 = __cxa_allocate_exception(8uLL);
              *v302 = "LOG_FATAL encountered";
              __cxa_throw(v302, MEMORY[0x24BEDB718], 0);
            }
          }
        }
        if (SHIBYTE(v374.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v374.__r_.__value_.__l.__data_);
      }
      v364.tv_sec = (__darwin_time_t)&v415;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v364);
LABEL_571:
      if (SHIBYTE(v370.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v370.__r_.__value_.__l.__data_);
      v409.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24D91DA58;
      v414[0] = &unk_24D91DA80;
      if (v413 < 0)
        operator delete(v412);
      std::istream::~istream();
      boost::iostreams::stream_buffer<turi::fileio_impl::general_fstream_source,std::char_traits<char>,std::allocator<char>,boost::iostreams::input_seekable>::~stream_buffer((uint64_t)&v409.__r_.__value_.__r.__words[2]);
      MEMORY[0x219A198F4](v414);
      if (SHIBYTE(v329.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v329.__r_.__value_.__l.__data_);
      v409.__r_.__value_.__r.__words[0] = (std::string::size_type)&v333;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v409);
      std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)v332, (char *)v332[1]);
      if (SHIBYTE(v366.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v366.__r_.__value_.__l.__data_);
      v143 = (uint64_t)&v315[1];
      if (&v315[1] == v308)
        goto LABEL_583;
    }
    if (SHIBYTE(v366.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v366.__r_.__value_.__l.__data_);
  }
LABEL_583:
  v283 = (int *)global_logger();
  if (v283[169] <= 4)
  {
    if (cppipc::must_cancel((cppipc *)v283))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v284 = (file_logger *)global_logger();
    v285 = file_logger::start_stream(v284, 4, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/parallel_csv_parser.cpp", "parse_csvs_to_sframe", 1359, 1);
    v286 = pthread_getspecific(*((_QWORD *)v285 + 74));
    if (v286 && *((_BYTE *)v286 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v286 + 2, (uint64_t)"Parsing completed. Parsed ", 26);
    v287 = file_logger::operator<<<unsigned long>((uint64_t)v285);
    v288 = pthread_getspecific(*(_QWORD *)(v287 + 592));
    if (v288 && *((_BYTE *)v288 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v288 + 2, (uint64_t)" lines in ", 10);
    gettimeofday((timeval *)&v409, 0);
    v289 = file_logger::operator<<<double>(v287);
    v290 = pthread_getspecific(*(_QWORD *)(v289 + 592));
    if (v290 && *((_BYTE *)v290 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v290 + 2, (uint64_t)" secs.", 6);
    v291 = pthread_getspecific(*(_QWORD *)(v289 + 592));
    if (v291)
    {
      if (*((_BYTE *)v291 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v291 + *(_QWORD *)(v291[2] - 24) + 16));
        v292 = std::locale::use_facet((const std::locale *)&v409, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v292->__vftable[2].~facet_0)(v292, 10);
        std::locale::~locale((std::locale *)&v409);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush((file_logger *)v289);
        if (*(_DWORD *)(v289 + 600) == 7)
        {
          __print_back_trace();
          v304 = __cxa_allocate_exception(8uLL);
          *v304 = "LOG_FATAL encountered";
          __cxa_throw(v304, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  if (a4[288] && a4[289])
    (*(void (**)(_BYTE *))(*(_QWORD *)a4 + 40))(a4);
  if (v367)
  {
    v368 = (std::string *)v367;
    operator delete(v367);
  }
LABEL_602:
  if (v349.__r_.__value_.__r.__words[0])
  {
    v349.__r_.__value_.__l.__size_ = v349.__r_.__value_.__r.__words[0];
    operator delete(v349.__r_.__value_.__l.__data_);
  }
  v378.__r_.__value_.__r.__words[0] = (std::string::size_type)&v347 + 8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v378);
LABEL_605:
  v378.__r_.__value_.__r.__words[0] = (std::string::size_type)&v357;
  std::vector<std::pair<std::string,unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v378);
  v378.__r_.__value_.__r.__words[0] = (std::string::size_type)&v359;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v378);
  v378.__r_.__value_.__r.__words[0] = (std::string::size_type)&v362;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v378);
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)v363, (char *)v363[1]);
}

void sub_21817CF8C()
{
  __cxa_end_catch();
  JUMPOUT(0x21817CF98);
}

void sub_21817D060(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x21817D048);
}

void std::vector<unsigned long>::resize(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;

  v3 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  if (a2 <= v3)
  {
    if (a2 < v3)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 8 * a2;
  }
  else
  {
    std::vector<unsigned long>::__append((void **)a1, a2 - v3, a3);
  }
}

void turi::csv_file_handling_options::~csv_file_handling_options(char **this)
{
  void **v2;

  v2 = (void **)(this + 4);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)(this + 1), this[2]);
}

void turi::`anonymous namespace'::parallel_csv_parser::~parallel_csv_parser(void **this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void **v6;

  if (*((char *)this + 759) < 0)
    operator delete(this[92]);
  v2 = this[79];
  if (v2)
  {
    this[80] = v2;
    operator delete(v2);
  }
  v3 = this[76];
  if (v3)
  {
    this[77] = v3;
    operator delete(v3);
  }
  turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)(this + 52));
  turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)(this + 28));
  free(this[25]);
  if (*((char *)this + 199) < 0)
    operator delete(this[22]);
  v6 = this + 19;
  std::vector<turi::csv_line_tokenizer>::__destroy_vector::operator()[abi:ne180100](&v6);
  v6 = this + 16;
  std::vector<std::vector<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v6);
  v6 = this + 13;
  std::vector<std::vector<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v6);
  v4 = this[10];
  if (v4)
  {
    this[11] = v4;
    operator delete(v4);
  }
  v6 = this + 7;
  std::vector<std::vector<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v6);
  v5 = this[4];
  if (v5)
  {
    this[5] = v5;
    operator delete(v5);
  }
  v6 = this + 1;
  std::vector<std::vector<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v6);
}

void turi::`anonymous namespace'::csv_info::~csv_info(turi::_anonymous_namespace_::csv_info *this)
{
  void *v2;
  void **v3;

  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  v3 = (void **)((char *)this + 8);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
}

void sub_21817D3B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<turi::flex_type_enum>::vector(_QWORD *a1, size_t a2, _BYTE *a3)
{
  size_t v5;
  _BYTE *v6;
  _BYTE *v7;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    v5 = a2;
    std::vector<turi::flex_type_enum>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_BYTE *)a1[1];
    v7 = &v6[v5];
    do
    {
      *v6++ = *a3;
      --v5;
    }
    while (v5);
    a1[1] = v7;
  }
  return a1;
}

void sub_21817D4A4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

turi::csv_line_tokenizer *turi::csv_line_tokenizer::csv_line_tokenizer(turi::csv_line_tokenizer *this, const turi::csv_line_tokenizer *a2)
{
  __int128 v4;
  __int128 v5;
  int v6;
  __int128 v7;
  __int128 v8;
  std::string *v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  int v15;

  *(_DWORD *)this = *(_DWORD *)a2;
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 8), *((const std::string::value_type **)a2 + 1), *((_QWORD *)a2 + 2));
  }
  else
  {
    v4 = *(_OWORD *)((char *)a2 + 8);
    *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
    *(_OWORD *)((char *)this + 8) = v4;
  }
  if (*((char *)a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 32), *((const std::string::value_type **)a2 + 4), *((_QWORD *)a2 + 5));
  }
  else
  {
    v5 = *((_OWORD *)a2 + 2);
    *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
    *((_OWORD *)this + 2) = v5;
  }
  v6 = *((_DWORD *)a2 + 14);
  *((_QWORD *)this + 8) = 0;
  *((_DWORD *)this + 14) = v6;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)((char *)this + 64), *((__int128 **)a2 + 8), *((__int128 **)a2 + 9), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 9) - *((_QWORD *)a2 + 8)) >> 3));
  std::unordered_set<std::string>::unordered_set((uint64_t)this + 88, (uint64_t)a2 + 88);
  std::unordered_set<std::string>::unordered_set((uint64_t)this + 128, (uint64_t)a2 + 128);
  *((_BYTE *)this + 168) = *((_BYTE *)a2 + 168);
  if (*((char *)a2 + 199) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 176), *((const std::string::value_type **)a2 + 22), *((_QWORD *)a2 + 23));
  }
  else
  {
    v7 = *((_OWORD *)a2 + 11);
    *((_QWORD *)this + 24) = *((_QWORD *)a2 + 24);
    *((_OWORD *)this + 11) = v7;
  }
  *((_QWORD *)this + 25) = *((_QWORD *)a2 + 25);
  if (*((char *)a2 + 231) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 208), *((const std::string::value_type **)a2 + 26), *((_QWORD *)a2 + 27));
  }
  else
  {
    v8 = *((_OWORD *)a2 + 13);
    *((_QWORD *)this + 28) = *((_QWORD *)a2 + 28);
    *((_OWORD *)this + 13) = v8;
  }
  v9 = (std::string *)((char *)this + 232);
  if (*((char *)a2 + 255) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *((const std::string::value_type **)a2 + 29), *((_QWORD *)a2 + 30));
  }
  else
  {
    v10 = *(_OWORD *)((char *)a2 + 232);
    *((_QWORD *)this + 31) = *((_QWORD *)a2 + 31);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
  }
  v11 = *((_QWORD *)a2 + 33);
  *((_QWORD *)this + 32) = *((_QWORD *)a2 + 32);
  *((_QWORD *)this + 33) = v11;
  v12 = *((_QWORD *)a2 + 34);
  *((_QWORD *)this + 34) = v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v15 = *((_DWORD *)a2 + 70);
  *(_DWORD *)((char *)this + 283) = *(_DWORD *)((char *)a2 + 283);
  *((_DWORD *)this + 70) = v15;
  return this;
}

void sub_21817D6A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  char *v2;
  void **v3;
  void **v4;
  uint64_t v5;
  uint64_t v6;
  void **v7;
  void **v8;
  va_list va;

  va_start(va, a2);
  if (v2[231] < 0)
    operator delete(*v8);
  if (v2[199] < 0)
    operator delete(*v7);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v6);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v5);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  if (v2[55] < 0)
    operator delete(*v4);
  if (v2[31] < 0)
    operator delete(*v3);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::vector<std::vector<turi::flexible_type>>>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::string>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_21817D7C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::vector<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void std::vector<std::vector<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        v6 = v4;
        std::vector<std::vector<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_QWORD *std::vector<turi::csv_line_tokenizer>::vector(_QWORD *a1, unint64_t a2, const turi::csv_line_tokenizer *a3)
{
  turi::csv_line_tokenizer *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<turi::csv_line_tokenizer>::__vallocate[abi:ne180100](a1, a2);
    v6 = (turi::csv_line_tokenizer *)a1[1];
    v7 = 9 * a2;
    v8 = (char *)v6 + 288 * a2;
    v9 = 32 * v7;
    do
    {
      turi::csv_line_tokenizer::csv_line_tokenizer(v6, a3);
      v6 = (turi::csv_line_tokenizer *)((char *)v6 + 288);
      v9 -= 288;
    }
    while (v9);
    a1[1] = v8;
  }
  return a1;
}

void sub_21817D8D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<turi::csv_line_tokenizer>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<turi::csv_line_tokenizer>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0xE38E38E38E38E4)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::csv_line_tokenizer>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[288 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<turi::csv_line_tokenizer>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xE38E38E38E38E4)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(288 * a2);
}

void std::vector<turi::csv_line_tokenizer>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = v2;
    if (v4 != v2)
    {
      do
        turi::csv_line_tokenizer::~csv_line_tokenizer(v4 - 36);
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void turi::csv_line_tokenizer::~csv_line_tokenizer(void **this)
{
  void **v2;

  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(this + 33));
  if (*((char *)this + 255) < 0)
    operator delete(this[29]);
  if (*((char *)this + 231) < 0)
    operator delete(this[26]);
  if (*((char *)this + 199) < 0)
    operator delete(this[22]);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)(this + 16));
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)(this + 11));
  v2 = this + 8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

uint64_t std::pair<std::string,std::shared_ptr<turi::sarray<turi::flexible_type>>>::~pair(uint64_t a1)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](a1 + 24);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t turi::`anonymous namespace'::parallel_csv_parser::fill_buffer(turi::_anonymous_namespace_::parallel_csv_parser *this, turi::general_ifstream *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  if (*(_DWORD *)((char *)a2 + *(_QWORD *)(*(_QWORD *)a2 - 24) + 32))
    goto LABEL_7;
  if (*((char *)this + 199) < 0)
    v4 = *((_QWORD *)this + 23);
  else
    v4 = *((unsigned __int8 *)this + 199);
  v5 = turi::SFRAME_CSV_PARSER_READ_SIZE;
  std::string::resize((std::string *)((char *)this + 176), turi::SFRAME_CSV_PARSER_READ_SIZE + v4, 0);
  std::istream::read();
  v6 = *((_QWORD *)a2 + 1);
  if (v6 < v5)
  {
    std::string::resize((std::string *)((char *)this + 176), v6 + v4, 0);
LABEL_7:
    return 0;
  }
  return 1;
}

void turi::`anonymous namespace'::parallel_csv_parser::add_line_terminator_to_buffer(turi::_anonymous_namespace_::parallel_csv_parser *this)
{
  std::string *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  std::string::size_type size;
  uint64_t v13;
  int v14;
  unsigned __int8 *v15;
  uint64_t v16;
  std::string *p_p;
  int v18;
  int v19;
  int v20;
  _BOOL4 v21;
  int v23;
  const std::string::value_type *v24;
  std::string::size_type v25;
  void *v26;
  int v27;
  std::string __p;
  char v29;

  v2 = (std::string *)((char *)this + 176);
  v3 = *((unsigned __int8 *)this + 199);
  if (!*((_BYTE *)this + 760))
  {
    if ((v3 & 0x80) != 0)
      v5 = *((_QWORD *)this + 23);
    else
      v5 = *((unsigned __int8 *)this + 199);
    v10 = *((unsigned __int8 *)this + 759);
    if (*((char *)this + 759) < 0)
      v11 = *((_QWORD *)this + 93);
    else
      v11 = *((unsigned __int8 *)this + 759);
    if (v5 < v11)
      return;
    if ((v3 & 0x80) != 0)
    {
      v3 = *((_QWORD *)this + 23);
      if ((v10 & 0x80) == 0)
        goto LABEL_23;
    }
    else if ((v10 & 0x80) == 0)
    {
      goto LABEL_23;
    }
    v10 = *((_QWORD *)this + 93);
LABEL_23:
    std::string::basic_string(&__p, v2, v3 - v10, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v29);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    v13 = *((unsigned __int8 *)this + 759);
    v14 = (char)v13;
    if ((v13 & 0x80u) != 0)
      v13 = *((_QWORD *)this + 93);
    if (size == v13)
    {
      if (v14 >= 0)
        v15 = (unsigned __int8 *)this + 736;
      else
        v15 = (unsigned __int8 *)*((_QWORD *)this + 92);
      if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
      {
        v26 = (void *)__p.__r_.__value_.__r.__words[0];
        v27 = memcmp(__p.__r_.__value_.__l.__data_, v15, __p.__r_.__value_.__l.__size_);
        operator delete(v26);
        if (!v27)
          return;
LABEL_42:
        v23 = *((char *)this + 759);
        if (v23 >= 0)
          v24 = (char *)this + 736;
        else
          v24 = (const std::string::value_type *)*((_QWORD *)this + 92);
        if (v23 >= 0)
          v25 = *((unsigned __int8 *)this + 759);
        else
          v25 = *((_QWORD *)this + 93);
        std::string::append(v2, v24, v25);
        return;
      }
      if (!*((_BYTE *)&__p.__r_.__value_.__s + 23))
        return;
      v16 = HIBYTE(__p.__r_.__value_.__r.__words[2]) - 1;
      p_p = &__p;
      do
      {
        v19 = p_p->__r_.__value_.__s.__data_[0];
        p_p = (std::string *)((char *)p_p + 1);
        v18 = v19;
        v20 = *v15++;
        v21 = v18 != v20;
      }
      while (v18 == v20 && v16-- != 0);
      if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) == 0)
      {
LABEL_41:
        if (!v21)
          return;
        goto LABEL_42;
      }
    }
    else
    {
      v21 = 1;
      if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) == 0)
        goto LABEL_41;
    }
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!v21)
      return;
    goto LABEL_42;
  }
  if ((v3 & 0x80) != 0)
    v4 = *((_QWORD *)this + 23);
  else
    v4 = *((unsigned __int8 *)this + 199);
  v6 = v4 - 1;
  if ((v3 & 0x80) != 0)
  {
    if (*(_BYTE *)(v2->__r_.__value_.__r.__words[0] + v6) == 10)
      return;
    v7 = *((_QWORD *)this + 23);
  }
  else
  {
    if (v2->__r_.__value_.__s.__data_[v6] == 10)
      return;
    v7 = *((unsigned __int8 *)this + 199);
  }
  v8 = v7 - 1;
  v9 = (char *)this + 176;
  if ((v3 & 0x80) != 0)
    v9 = (char *)v2->__r_.__value_.__r.__words[0];
  if (v9[v8] != 13)
    std::string::push_back((std::string *)((char *)this + 176), 10);
}

char *turi::`anonymous namespace'::parallel_csv_parser::advance_past_newline(turi::_anonymous_namespace_::parallel_csv_parser *this, char *a2, char *a3, BOOL *a4)
{
  uint64_t v4;
  char *v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  int v11;
  int v12;
  uint64_t v13;

  if (*((_BYTE *)this + 760))
  {
    if (a2 < a3)
    {
      v4 = a3 - a2;
      v5 = a2 + 1;
      while (1)
      {
        v6 = *(v5 - 1);
        if (v6 == 13)
          break;
        if (v6 == 10)
          goto LABEL_29;
        ++v5;
        if (!--v4)
          goto LABEL_23;
      }
      if (v5 < a3 && *v5 == 10)
      {
        *a4 = 1;
        return v5 + 1;
      }
LABEL_29:
      *a4 = 1;
      return v5;
    }
LABEL_23:
    *a4 = 0;
    return a3;
  }
  if (*((char *)this + 759) < 0)
  {
    if (!*((_QWORD *)this + 93))
      goto LABEL_23;
  }
  else if (!*((_BYTE *)this + 759))
  {
    goto LABEL_23;
  }
LABEL_12:
  v7 = *((unsigned __int8 *)this + 759);
  if ((*((_BYTE *)this + 759) & 0x80) != 0)
    v7 = *((_QWORD *)this + 93);
  if (&a2[v7] > a3)
    goto LABEL_23;
  v8 = 0;
  while (1)
  {
    v9 = *((unsigned __int8 *)this + 759);
    if ((*((_BYTE *)this + 759) & 0x80) != 0)
      v9 = *((_QWORD *)this + 93);
    if (v8 >= v9)
      break;
    v10 = (char *)this + 736;
    if ((*((_BYTE *)this + 759) & 0x80) != 0)
      v10 = (char *)*((_QWORD *)this + 92);
    v11 = a2[v8];
    v12 = v10[v8++];
    if (v11 != v12)
    {
      ++a2;
      goto LABEL_12;
    }
  }
  *a4 = 1;
  if (*((char *)this + 759) < 0)
    v13 = *((_QWORD *)this + 93);
  else
    v13 = *((unsigned __int8 *)this + 759);
  return &a2[v13];
}

uint64_t boost::detail::function::functor_manager<turi::`anonymous namespace'::parallel_csv_parser::parallel_parse(BOOL)::{lambda(void)#1}>::manage(uint64_t result, _WORD *a2, int a3)
{
  _QWORD *v4;
  _OWORD *v5;
  __int128 v6;

  v4 = (_QWORD *)result;
  switch(a3)
  {
    case 0:
      v5 = *(_OWORD **)result;
      result = operator new();
      v6 = v5[1];
      *(_OWORD *)result = *v5;
      *(_OWORD *)(result + 16) = v6;
      *(_QWORD *)a2 = result;
      break;
    case 1:
      *(_QWORD *)a2 = *(_QWORD *)result;
      *(_QWORD *)result = 0;
      break;
    case 2:
      result = *(_QWORD *)a2;
      if (*(_QWORD *)a2)
        result = MEMORY[0x219A19A08](result, 0x10A0C409A4ED104);
      goto LABEL_9;
    case 3:
      result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == ((unint64_t)"ZN4turi12_GLOBAL__N_119parallel_csv_parser14parallel_parseEbEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)
        || (result = strcmp((const char *)result, (const char *)((unint64_t)"ZN4turi12_GLOBAL__N_119parallel_csv_parser14parallel_parseEbEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)), !(_DWORD)result))
      {
        *(_QWORD *)a2 = *v4;
      }
      else
      {
LABEL_9:
        *(_QWORD *)a2 = 0;
      }
      break;
    default:
      a2[4] = 0;
      break;
  }
  return result;
}

uint64_t boost::detail::function::void_function_obj_invoker0<turi::`anonymous namespace'::parallel_csv_parser::parallel_parse(BOOL)::{lambda(void)#1},void>::invoke(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  int v14;
  int64_t v16;
  BOOL v17;
  unsigned __int8 *v18;
  char *v19;
  unint64_t v20;
  pthread_mutex_t *v21;
  char **v22;
  unint64_t v24;
  BOOL v25;
  BOOL v26;

  v1 = *a1;
  v3 = *(uint64_t **)(*a1 + 16);
  v2 = *(_QWORD *)(*a1 + 24);
  if (*((char *)v3 + 199) < 0)
  {
    v6 = *v3;
    v4 = v3[22];
    v5 = v3[23];
  }
  else
  {
    v4 = (unint64_t)(v3 + 22);
    v5 = *((unsigned __int8 *)v3 + 199);
    v6 = *v3;
  }
  v7 = v5 / v6 * v2;
  v8 = (char *)(v4 + v7);
  v9 = (char *)(v4 + v5);
  if (v6 - 1 == v2)
    v10 = (char *)(v4 + v5);
  else
    v10 = (char *)(v4 + v5 / v6 + v7);
  if (!v2)
    goto LABEL_10;
  if (!*((_BYTE *)v3 + 760))
  {
    if (*((char *)v3 + 759) < 0)
    {
      v24 = v3[93];
      if (v24 <= 1 || v7 < (int)v24 - 1)
        goto LABEL_9;
    }
    else
    {
      v24 = *((unsigned __int8 *)v3 + 759);
      if (v24 <= 1 || v7 < (v24 - 1))
        goto LABEL_9;
    }
    v8 = &v8[-v24 + 1];
  }
LABEL_9:
  v26 = 0;
  if (!v26)
    goto LABEL_47;
LABEL_10:
  if (*((_BYTE *)v3 + 760))
    goto LABEL_11;
  if ((*((char *)v3 + 759) & 0x80000000) == 0)
  {
    v20 = *((unsigned __int8 *)v3 + 759);
    if (v20 < 2 || (uint64_t)&v10[-v4] < (uint64_t)v20)
      goto LABEL_11;
LABEL_56:
    v10 = &v10[-v20 + 1];
    goto LABEL_11;
  }
  v20 = v3[93];
  if (v20 > 1 && (uint64_t)&v10[-v4] >= (int)v20)
    goto LABEL_56;
LABEL_11:
  v25 = 0;
  v12 = v11;
  if (*((char *)v3 + 759) < 0)
  {
    if (v3[93])
    {
LABEL_13:
      if (v8 < v11)
      {
        v13 = v8;
        while (*((_BYTE *)v3 + 760))
        {
          v14 = *v8;
          if (v14 != 13 && v14 != 10)
            goto LABEL_31;
LABEL_21:
          if (((*(_QWORD *)(v3[25] + (((unint64_t)&v8[-v4] >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v8 - v4)) & 1) != 0)
            goto LABEL_31;
          v8 = v13;
LABEL_32:
          if (v8 >= v12)
            goto LABEL_46;
        }
        if (*((char *)v3 + 759) < 0)
        {
          v16 = v3[93];
          if (v16 && v12 - v8 >= (int)v16)
          {
            v18 = (unsigned __int8 *)v3[92];
            goto LABEL_35;
          }
        }
        else
        {
          v16 = *((unsigned __int8 *)v3 + 759);
          if (*((_BYTE *)v3 + 759))
            v17 = v12 - v8 < v16;
          else
            v17 = 1;
          v18 = (unsigned __int8 *)(v3 + 92);
          if (!v17)
          {
LABEL_35:
            v19 = v8;
            while (*v18 == *v19)
            {
              ++v19;
              ++v18;
              if (!--v16)
                goto LABEL_21;
            }
          }
        }
LABEL_31:
        ++v8;
        goto LABEL_32;
      }
      goto LABEL_45;
    }
  }
  else if (*((_BYTE *)v3 + 759))
  {
    goto LABEL_13;
  }
LABEL_45:
  v13 = v8;
LABEL_46:
  v8 = v13;
LABEL_47:
  v21 = *(pthread_mutex_t **)v1;
  pthread_mutex_lock(*(pthread_mutex_t **)v1);
  v22 = *(char ***)(v1 + 8);
  if (*v22 < v8)
    *v22 = v8;
  return pthread_mutex_unlock(v21);
}

char *turi::`anonymous namespace'::parallel_csv_parser::advance_past_newline_with_quote_parity(turi::_anonymous_namespace_::parallel_csv_parser *this, unint64_t a2, char *a3, char *a4, BOOL *a5)
{
  unint64_t v8;

  v8 = ~a2;
  while (1)
  {
    *a5 = 0;
    if (a3 == a4)
      break;
    if (((*(_QWORD *)(*((_QWORD *)this + 25) + (((unint64_t)&a3[v8] >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (a3 + v8)) & 1) == 0
      || !*a5)
    {
      return a3;
    }
  }
  return a4;
}

void turi::`anonymous namespace'::parallel_csv_parser::parse_line(turi::_anonymous_namespace_::parallel_csv_parser *this, char *a2, char *a3, uint64_t a4)
{
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  void *v28;
  void *v29;
  unsigned int v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t *v34;
  void *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t *v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  size_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  std::string *p_str;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  void **v56;
  _QWORD *v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  void *v61;
  _QWORD *v62;
  unint64_t v63;
  unint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  _QWORD *v69;
  unint64_t v70;
  unint64_t v71;
  _QWORD *v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  std::string::size_type v76;
  uint64_t v77;
  unsigned int *v78;
  unsigned int v79;
  __int128 v80;
  __int128 v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t v86;
  std::string::size_type v87;
  _QWORD *v88;
  uint64_t v89;
  unint64_t *v90;
  unint64_t v91;
  unint64_t v92;
  std::string::size_type v93;
  unint64_t *v94;
  unint64_t v95;
  unint64_t v96;
  unsigned int v97;
  unint64_t *v98;
  unint64_t v99;
  unint64_t v100;
  std::string::size_type v101;
  void *v102;
  unint64_t *v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t *v106;
  unint64_t v107;
  unint64_t v108;
  std::string::size_type v109;
  unint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  file_logger *v113;
  uint64_t v114;
  __int128 v115;
  std::string *v116;
  std::string *v117;
  std::string::size_type v118;
  char v119;
  file_logger *v120;
  std::string *v121;
  std::string *p_dst;
  std::string::size_type size;
  std::string *v124;
  __int128 v125;
  std::string *v126;
  __int128 v127;
  uint64_t v128;
  void *v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t last_parse_error_diagnosis;
  uint64_t v133;
  std::string *v134;
  std::string *v135;
  std::string::size_type v136;
  char v137;
  file_logger *v138;
  uint64_t v139;
  __int128 v140;
  uint64_t v141;
  int v142;
  std::string v145;
  void *__p[2];
  std::string::size_type v147;
  std::string __dst;
  std::string v149;
  std::string __str;
  char v151;
  void *v152[2];
  char v153;
  std::string v154;
  uint64_t v155;

  v155 = *MEMORY[0x24BDAC8D0];
  v142 = *(unsigned __int8 *)(*((_QWORD *)this + 19) + 288 * a4 + 56);
  v6 = *(_QWORD *)(*((_QWORD *)this + 4) + 8 * a4);
  v7 = (uint64_t *)(*((_QWORD *)this + 1) + 24 * a4);
  v8 = *v7;
  if (v6 >= 0xAAAAAAAAAAAAAAABLL * ((v7[1] - *v7) >> 3))
  {
    std::vector<std::vector<turi::flexible_type>>::resize(v7, v6 + 1);
    v8 = *(_QWORD *)(*((_QWORD *)this + 1) + 24 * a4);
  }
  v9 = (uint64_t *)(v8 + 24 * v6);
  std::vector<turi::flexible_type>::resize(v9, *((_QWORD *)this + 77) - *((_QWORD *)this + 76));
  v10 = *((_QWORD *)this + 76);
  if (*((_QWORD *)this + 77) != v10)
  {
    v11 = 0;
    do
    {
      v12 = *v9 + 16 * v11;
      v13 = *(unsigned __int8 *)(v10 + v11);
      if (*(unsigned __int8 *)(v12 + 12) != v13)
      {
        switch(*(_BYTE *)(v12 + 12))
        {
          case 2:
            v14 = *(unint64_t **)v12;
            do
            {
              v15 = __ldaxr(v14);
              v16 = v15 - 1;
            }
            while (__stlxr(v16, v14));
            if (!v16)
            {
              v17 = *(unint64_t **)v12;
              if (!*(_QWORD *)v12)
                goto LABEL_48;
              if (*((char *)v17 + 31) < 0)
                operator delete((void *)v17[1]);
              v18 = v17;
              v19 = 0x1012C404EF22A49;
              goto LABEL_47;
            }
            break;
          case 3:
            v31 = *(unint64_t **)v12;
            do
            {
              v32 = __ldaxr(v31);
              v33 = v32 - 1;
            }
            while (__stlxr(v33, v31));
            if (!v33)
            {
              v34 = *(unint64_t **)v12;
              if (!*(_QWORD *)v12)
                goto LABEL_48;
              v35 = (void *)v34[1];
              if (v35)
              {
                v34[2] = (unint64_t)v35;
                operator delete(v35);
              }
              v18 = v34;
              v19 = 0x1080C409938AC02;
              goto LABEL_47;
            }
            break;
          case 4:
            v20 = *(unint64_t **)v12;
            do
            {
              v21 = __ldaxr(v20);
              v22 = v21 - 1;
            }
            while (__stlxr(v22, v20));
            if (!v22)
            {
              v23 = *(unint64_t **)v12;
              if (!*(_QWORD *)v12)
                goto LABEL_48;
              __str.__r_.__value_.__r.__words[0] = (std::string::size_type)(v23 + 1);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
              goto LABEL_40;
            }
            break;
          case 5:
            v36 = *(unint64_t **)v12;
            do
            {
              v37 = __ldaxr(v36);
              v38 = v37 - 1;
            }
            while (__stlxr(v38, v36));
            if (!v38)
            {
              v23 = *(unint64_t **)v12;
              if (!*(_QWORD *)v12)
                goto LABEL_48;
              __str.__r_.__value_.__r.__words[0] = (std::string::size_type)(v23 + 1);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
LABEL_40:
              v18 = v23;
              v19 = 0x1020C405E66F15BLL;
              goto LABEL_47;
            }
            break;
          case 8:
            v39 = *(unint64_t **)v12;
            do
            {
              v40 = __ldaxr(v39);
              v41 = v40 - 1;
            }
            while (__stlxr(v41, v39));
            if (!v41)
            {
              v42 = *(unint64_t **)v12;
              if (!*(_QWORD *)v12)
                goto LABEL_48;
              boost::detail::shared_count::~shared_count((unsigned int **)v42 + 2);
              v18 = v42;
              v30 = -235920773;
              goto LABEL_46;
            }
            break;
          case 9:
            v24 = *(unint64_t **)v12;
            do
            {
              v25 = __ldaxr(v24);
              v26 = v25 - 1;
            }
            while (__stlxr(v26, v24));
            if (!v26)
            {
              v27 = *(unint64_t **)v12;
              if (*(_QWORD *)v12)
              {
                v28 = (void *)v27[6];
                if (v28)
                {
                  v27[7] = (unint64_t)v28;
                  operator delete(v28);
                }
                v29 = (void *)v27[3];
                if (v29)
                {
                  v27[4] = (unint64_t)v29;
                  operator delete(v29);
                }
                std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v27 + 1));
                v18 = v27;
                v30 = 2071181815;
LABEL_46:
                v19 = v30 | 0x1030C4000000000;
LABEL_47:
                MEMORY[0x219A19A08](v18, v19);
              }
LABEL_48:
              *(_QWORD *)v12 = 0;
            }
            break;
          default:
            break;
        }
        *(_QWORD *)v12 = 0;
        *(_DWORD *)(v12 + 8) = 0;
        *(_BYTE *)(v12 + 12) = v13;
        switch(v13)
        {
          case 2:
          case 3:
          case 4:
          case 5:
            v43 = operator new();
            *(_QWORD *)v43 = 0;
            *(_QWORD *)(v43 + 16) = 0;
            *(_QWORD *)(v43 + 24) = 0;
            *(_QWORD *)(v43 + 8) = 0;
            goto LABEL_53;
          case 6:
            *(_QWORD *)v12 = 0x1900000000000000;
            *(_DWORD *)(v12 + 8) = 0;
            break;
          case 8:
            v43 = operator new();
            *(_QWORD *)v43 = 0;
            *(_OWORD *)(v43 + 8) = 0u;
            *(_OWORD *)(v43 + 24) = 0u;
            *(_OWORD *)(v43 + 40) = 0u;
            *(_QWORD *)(v43 + 56) = 0;
            *(_QWORD *)(v43 + 64) = 3;
LABEL_53:
            *(_QWORD *)v12 = v43;
            *(_QWORD *)v43 = 1;
            break;
          case 9:
            v44 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::pair[abi:ne180100]<true,0>(v44);
            *(_QWORD *)v12 = v44;
            *v44 = 1;
            break;
          default:
            break;
        }
      }
      ++v11;
      v10 = *((_QWORD *)this + 76);
    }
    while (v11 < *((_QWORD *)this + 77) - v10);
  }
  v45 = (_QWORD *)((char *)this + 632);
  if (*((_QWORD *)this + 79) == *((_QWORD *)this + 80))
    v46 = 0;
  else
    v46 = (_QWORD *)((char *)this + 632);
  v47 = a3 - a2;
  v48 = turi::csv_line_tokenizer::tokenize_line((unsigned __int8 *)(*((_QWORD *)this + 19) + 288 * a4), a2, a3 - a2, (unint64_t *)v9, 1, v46);
  v49 = *((_QWORD *)this + 80);
  if (*v45 == v49)
    v50 = *((_QWORD *)this + 77) - *((_QWORD *)this + 76);
  else
    v50 = (v49 - *v45) >> 3;
  if (v48 == v50)
  {
    ++*(_QWORD *)(*((_QWORD *)this + 4) + 8 * a4);
    return;
  }
  std::string::basic_string[abi:ne180100](&__str, a2, v47);
  MEMORY[0x219A19828](&v154);
  LODWORD(__dst.__r_.__value_.__l.__data_) = 0x4000;
  std::locale::locale((std::locale *)&__dst.__r_.__value_.__r.__words[1], (const std::locale *)&v154);
  boost::algorithm::trim_if<std::string,boost::algorithm::detail::is_classifiedF>(&__str, (std::locale *)&__dst);
  std::locale::~locale((std::locale *)&__dst.__r_.__value_.__r.__words[1]);
  std::locale::~locale((std::locale *)&v154);
  v51 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (!*((_BYTE *)&__str.__r_.__value_.__s + 23))
      return;
    p_str = &__str;
LABEL_70:
    if (p_str->__r_.__value_.__s.__data_[0] == v142)
      goto LABEL_183;
    if (*((_BYTE *)this + 729))
    {
      v53 = *((_QWORD *)this + 13);
      *(std::string::size_type *)((char *)v154.__r_.__value_.__r.__words + 5) = 0x200000000000000;
      v154.__r_.__value_.__r.__words[0] = 0;
      v54 = (_QWORD *)operator new();
      v55 = v54;
      *v54 = 0;
      v54[1] = 0;
      v56 = (void **)(v54 + 1);
      v54[2] = 0;
      v54[3] = 0;
      v154.__r_.__value_.__r.__words[0] = (std::string::size_type)v54;
      *v54 = 1;
      switch(v154.__r_.__value_.__s.__data_[12])
      {
        case 2:
          if (*v54 != 1)
          {
            v57 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v57, (uint64_t)v154.__r_.__value_.__l.__data_);
            v154.__r_.__value_.__r.__words[0] = (std::string::size_type)v57;
            *v57 = 1;
            do
            {
              v58 = __ldaxr(v55);
              v59 = v58 - 1;
            }
            while (__stlxr(v59, v55));
            if (!v59)
            {
              v60 = 0x1012C404EF22A49;
              if ((*((char *)v55 + 31) & 0x80000000) == 0)
                goto LABEL_109;
              v61 = *v56;
              goto LABEL_95;
            }
          }
          break;
        case 3:
          if (*v54 != 1)
          {
            v69 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v69, (uint64_t)v154.__r_.__value_.__l.__data_);
            v154.__r_.__value_.__r.__words[0] = (std::string::size_type)v69;
            *v69 = 1;
            do
            {
              v70 = __ldaxr(v55);
              v71 = v70 - 1;
            }
            while (__stlxr(v71, v55));
            if (!v71)
            {
              v60 = 0x1080C409938AC02;
              v61 = *v56;
              if (*v56)
              {
                v55[2] = v61;
LABEL_95:
                operator delete(v61);
              }
              goto LABEL_109;
            }
          }
          break;
        case 4:
          if (*v54 != 1)
          {
            v62 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v62, (uint64_t)v154.__r_.__value_.__l.__data_);
            v154.__r_.__value_.__r.__words[0] = (std::string::size_type)v62;
            *v62 = 1;
            do
            {
              v63 = __ldaxr(v55);
              v64 = v63 - 1;
            }
            while (__stlxr(v64, v55));
            if (!v64)
            {
              v60 = 0x1020C405E66F15BLL;
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v56;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__dst);
              goto LABEL_109;
            }
          }
          break;
        case 5:
          if (*v54 != 1)
          {
            v72 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v72, (uint64_t)v154.__r_.__value_.__l.__data_);
            v154.__r_.__value_.__r.__words[0] = (std::string::size_type)v72;
            *v72 = 1;
            do
            {
              v73 = __ldaxr(v55);
              v74 = v73 - 1;
            }
            while (__stlxr(v74, v55));
            if (!v74)
            {
              v60 = 0x1020C405E66F15BLL;
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v56;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__dst);
              goto LABEL_109;
            }
          }
          break;
        case 8:
          if (*v54 != 1)
          {
            v75 = operator new();
            v76 = v154.__r_.__value_.__r.__words[0];
            *(_QWORD *)v75 = *(_QWORD *)v154.__r_.__value_.__l.__data_;
            *(_QWORD *)(v75 + 8) = *(_QWORD *)(v76 + 8);
            v77 = *(_QWORD *)(v76 + 16);
            *(_QWORD *)(v75 + 16) = v77;
            if (v77)
            {
              v78 = (unsigned int *)(v77 + 8);
              do
                v79 = __ldxr(v78);
              while (__stxr(v79 + 1, v78));
            }
            v80 = *(_OWORD *)(v76 + 24);
            v81 = *(_OWORD *)(v76 + 40);
            *(_OWORD *)(v75 + 56) = *(_OWORD *)(v76 + 56);
            *(_OWORD *)(v75 + 40) = v81;
            *(_OWORD *)(v75 + 24) = v80;
            v154.__r_.__value_.__r.__words[0] = v75;
            *(_QWORD *)v75 = 1;
            do
            {
              v82 = __ldaxr(v55);
              v83 = v82 - 1;
            }
            while (__stlxr(v83, v55));
            if (!v83)
            {
              v60 = 0x1030C40F1F0227BLL;
              boost::detail::shared_count::~shared_count((unsigned int **)v55 + 2);
              goto LABEL_109;
            }
          }
          break;
        case 9:
          if (*v54 != 1)
          {
            v65 = (_QWORD *)operator new();
            v66 = v154.__r_.__value_.__r.__words[0] + 8;
            *v65 = *(_QWORD *)v154.__r_.__value_.__l.__data_;
            turi::flexible_type_impl::ndarray<double>::ndarray(v65 + 1, v66);
            v154.__r_.__value_.__r.__words[0] = (std::string::size_type)v65;
            *v65 = 1;
            do
            {
              v67 = __ldaxr(v55);
              v68 = v67 - 1;
            }
            while (__stlxr(v68, v55));
            if (!v68)
            {
              v60 = 0x1030C407B73B9F7;
              std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v55);
LABEL_109:
              MEMORY[0x219A19A08](v55, v60);
            }
          }
          break;
        default:
          break;
      }
      std::string::operator=((std::string *)(v154.__r_.__value_.__r.__words[0] + 8), &__str);
      std::vector<turi::flexible_type>::push_back[abi:ne180100]((uint64_t *)(v53 + 24 * a4), (uint64_t *)&v154);
      switch(v154.__r_.__value_.__s.__data_[12])
      {
        case 2:
          v84 = (unint64_t *)v154.__r_.__value_.__r.__words[0];
          do
          {
            v85 = __ldaxr(v84);
            v86 = v85 - 1;
          }
          while (__stlxr(v86, v84));
          if (!v86)
          {
            v87 = v154.__r_.__value_.__r.__words[0];
            if (v154.__r_.__value_.__r.__words[0])
            {
              if (*(char *)(v154.__r_.__value_.__r.__words[0] + 31) < 0)
                operator delete(*(void **)(v154.__r_.__value_.__r.__words[0] + 8));
              v88 = (_QWORD *)v87;
              v89 = 0x1012C404EF22A49;
              goto LABEL_147;
            }
          }
          break;
        case 3:
          v98 = (unint64_t *)v154.__r_.__value_.__r.__words[0];
          do
          {
            v99 = __ldaxr(v98);
            v100 = v99 - 1;
          }
          while (__stlxr(v100, v98));
          if (!v100)
          {
            v101 = v154.__r_.__value_.__r.__words[0];
            if (v154.__r_.__value_.__r.__words[0])
            {
              v102 = *(void **)(v154.__r_.__value_.__r.__words[0] + 8);
              if (v102)
              {
                *(_QWORD *)(v154.__r_.__value_.__r.__words[0] + 16) = v102;
                operator delete(v102);
              }
              v88 = (_QWORD *)v101;
              v89 = 0x1080C409938AC02;
              goto LABEL_147;
            }
          }
          break;
        case 4:
          v90 = (unint64_t *)v154.__r_.__value_.__r.__words[0];
          do
          {
            v91 = __ldaxr(v90);
            v92 = v91 - 1;
          }
          while (__stlxr(v92, v90));
          if (!v92)
          {
            v93 = v154.__r_.__value_.__r.__words[0];
            if (v154.__r_.__value_.__r.__words[0])
            {
              __dst.__r_.__value_.__r.__words[0] = v154.__r_.__value_.__r.__words[0] + 8;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__dst);
              goto LABEL_140;
            }
          }
          break;
        case 5:
          v103 = (unint64_t *)v154.__r_.__value_.__r.__words[0];
          do
          {
            v104 = __ldaxr(v103);
            v105 = v104 - 1;
          }
          while (__stlxr(v105, v103));
          if (!v105)
          {
            v93 = v154.__r_.__value_.__r.__words[0];
            if (v154.__r_.__value_.__r.__words[0])
            {
              __dst.__r_.__value_.__r.__words[0] = v154.__r_.__value_.__r.__words[0] + 8;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__dst);
LABEL_140:
              v88 = (_QWORD *)v93;
              v89 = 0x1020C405E66F15BLL;
              goto LABEL_147;
            }
          }
          break;
        case 8:
          v106 = (unint64_t *)v154.__r_.__value_.__r.__words[0];
          do
          {
            v107 = __ldaxr(v106);
            v108 = v107 - 1;
          }
          while (__stlxr(v108, v106));
          if (!v108)
          {
            v109 = v154.__r_.__value_.__r.__words[0];
            if (v154.__r_.__value_.__r.__words[0])
            {
              boost::detail::shared_count::~shared_count((unsigned int **)(v154.__r_.__value_.__r.__words[0] + 16));
              v88 = (_QWORD *)v109;
              v97 = -235920773;
              goto LABEL_146;
            }
          }
          break;
        case 9:
          v94 = (unint64_t *)v154.__r_.__value_.__r.__words[0];
          do
          {
            v95 = __ldaxr(v94);
            v96 = v95 - 1;
          }
          while (__stlxr(v96, v94));
          if (!v96 && v154.__r_.__value_.__r.__words[0])
          {
            v88 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v154.__r_.__value_.__l.__data_);
            v97 = 2071181815;
LABEL_146:
            v89 = v97 | 0x1030C4000000000;
LABEL_147:
            MEMORY[0x219A19A08](v88, v89);
          }
          break;
        default:
          break;
      }
    }
    if (!*((_BYTE *)this + 728))
    {
      last_parse_error_diagnosis = turi::csv_line_tokenizer::get_last_parse_error_diagnosis((turi::csv_line_tokenizer *)(*((_QWORD *)this + 19) + 288 * a4));
      v133 = *(unsigned __int8 *)(last_parse_error_diagnosis + 23);
      if ((v133 & 0x80u) != 0)
        v133 = *(_QWORD *)(last_parse_error_diagnosis + 8);
      if (v133 && *((int *)global_logger() + 169) <= 4)
      {
        v138 = log_stream_dispatch<true>::exec((cppipc *)4, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/parallel_csv_parser.cpp", "parse_line", 562, 1);
        v139 = turi::csv_line_tokenizer::get_last_parse_error_diagnosis((turi::csv_line_tokenizer *)(*((_QWORD *)this + 19) + 288 * a4));
        if (*(char *)(v139 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v145, *(const std::string::value_type **)v139, *(_QWORD *)(v139 + 8));
        }
        else
        {
          v140 = *(_OWORD *)v139;
          v145.__r_.__value_.__r.__words[2] = *(_QWORD *)(v139 + 16);
          *(_OWORD *)&v145.__r_.__value_.__l.__data_ = v140;
        }
        v141 = file_logger::operator<<<std::string>((uint64_t)v138, (uint64_t)&v145);
        file_logger::operator<<(v141, (void (*)(_BYTE *))std::endl[abi:ne180100]<char,std::char_traits<char>>);
        if (SHIBYTE(v145.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v145.__r_.__value_.__l.__data_);
      }
      std::string::basic_string[abi:ne180100](&__dst, a2, v47);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0 && __dst.__r_.__value_.__l.__size_ >= 0x101)
      {
        v134 = std::string::basic_string(&v154, &__dst, 0, 0x100uLL, (std::allocator<char> *)&v151);
        v135 = std::string::append(v134, "...");
        v136 = v135->__r_.__value_.__r.__words[0];
        v152[0] = (void *)v135->__r_.__value_.__l.__size_;
        *(void **)((char *)v152 + 7) = *(void **)((char *)&v135->__r_.__value_.__r.__words[1] + 7);
        v137 = HIBYTE(v135->__r_.__value_.__r.__words[2]);
        v135->__r_.__value_.__l.__size_ = 0;
        v135->__r_.__value_.__r.__words[2] = 0;
        v135->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
        __dst.__r_.__value_.__r.__words[0] = v136;
        __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v152[0];
        *(std::string::size_type *)((char *)&__dst.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v152 + 7);
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v137;
        if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v154.__r_.__value_.__l.__data_);
      }
      v154.__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst;
    }
    v110 = (unint64_t *)((char *)this + 720);
    if (*((_QWORD *)this + 90) < 0xAuLL)
    {
      v111 = turi::csv_line_tokenizer::get_last_parse_error_diagnosis((turi::csv_line_tokenizer *)(*((_QWORD *)this + 19)
                                                                                                 + 288 * a4));
      v112 = *(unsigned __int8 *)(v111 + 23);
      if ((v112 & 0x80u) != 0)
        v112 = *(_QWORD *)(v111 + 8);
      if (v112)
      {
        if (*((int *)global_logger() + 169) > 4)
          goto LABEL_181;
        v113 = log_stream_dispatch<true>::exec((cppipc *)4, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/parallel_csv_parser.cpp", "parse_line", 550, 1);
        v114 = turi::csv_line_tokenizer::get_last_parse_error_diagnosis((turi::csv_line_tokenizer *)(*((_QWORD *)this + 19) + 288 * a4));
        if (*(char *)(v114 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v149, *(const std::string::value_type **)v114, *(_QWORD *)(v114 + 8));
        }
        else
        {
          v115 = *(_OWORD *)v114;
          v149.__r_.__value_.__r.__words[2] = *(_QWORD *)(v114 + 16);
          *(_OWORD *)&v149.__r_.__value_.__l.__data_ = v115;
        }
        v130 = file_logger::operator<<<std::string>((uint64_t)v113, (uint64_t)&v149);
        file_logger::operator<<(v130, (void (*)(_BYTE *))std::endl[abi:ne180100]<char,std::char_traits<char>>);
        if ((SHIBYTE(v149.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_181;
        v129 = (void *)v149.__r_.__value_.__r.__words[0];
      }
      else
      {
        std::string::basic_string[abi:ne180100](&__dst, a2, v47);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0 && __dst.__r_.__value_.__l.__size_ >= 0x101)
        {
          v116 = std::string::basic_string(&v154, &__dst, 0, 0x100uLL, (std::allocator<char> *)&v151);
          v117 = std::string::append(v116, "...");
          v118 = v117->__r_.__value_.__r.__words[0];
          v152[0] = (void *)v117->__r_.__value_.__l.__size_;
          *(void **)((char *)v152 + 7) = *(void **)((char *)&v117->__r_.__value_.__r.__words[1] + 7);
          v119 = HIBYTE(v117->__r_.__value_.__r.__words[2]);
          v117->__r_.__value_.__l.__size_ = 0;
          v117->__r_.__value_.__r.__words[2] = 0;
          v117->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__dst.__r_.__value_.__l.__data_);
          __dst.__r_.__value_.__r.__words[0] = v118;
          __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v152[0];
          *(std::string::size_type *)((char *)&__dst.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v152 + 7);
          *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v119;
          if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v154.__r_.__value_.__l.__data_);
        }
        if (*((int *)global_logger() + 169) <= 4)
        {
          v120 = log_stream_dispatch<true>::exec((cppipc *)4, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/parallel_csv_parser.cpp", "parse_line", 555, 1);
          v121 = (std::string *)std::string::basic_string[abi:ne180100]<0>(v152, "Unable to parse line \"");
          if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            p_dst = &__dst;
          else
            p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
          if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
          else
            size = __dst.__r_.__value_.__l.__size_;
          v124 = std::string::append(v121, (const std::string::value_type *)p_dst, size);
          v125 = *(_OWORD *)&v124->__r_.__value_.__l.__data_;
          v154.__r_.__value_.__r.__words[2] = v124->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v154.__r_.__value_.__l.__data_ = v125;
          v124->__r_.__value_.__l.__size_ = 0;
          v124->__r_.__value_.__r.__words[2] = 0;
          v124->__r_.__value_.__r.__words[0] = 0;
          v126 = std::string::append(&v154, "\"");
          v127 = *(_OWORD *)&v126->__r_.__value_.__l.__data_;
          v147 = v126->__r_.__value_.__r.__words[2];
          *(_OWORD *)__p = v127;
          v126->__r_.__value_.__l.__size_ = 0;
          v126->__r_.__value_.__r.__words[2] = 0;
          v126->__r_.__value_.__r.__words[0] = 0;
          v128 = file_logger::operator<<<std::string>((uint64_t)v120, (uint64_t)__p);
          file_logger::operator<<(v128, (void (*)(_BYTE *))std::endl[abi:ne180100]<char,std::char_traits<char>>);
          if (SHIBYTE(v147) < 0)
            operator delete(__p[0]);
          if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v154.__r_.__value_.__l.__data_);
          if (v153 < 0)
            operator delete(v152[0]);
        }
        if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_181;
        v129 = (void *)__dst.__r_.__value_.__r.__words[0];
      }
      operator delete(v129);
    }
    do
LABEL_181:
      v131 = __ldaxr(v110);
    while (__stlxr(v131 + 1, v110));
    v51 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
LABEL_183:
    if ((v51 & 0x80) == 0)
      return;
    goto LABEL_184;
  }
  if (__str.__r_.__value_.__l.__size_)
  {
    p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
    goto LABEL_70;
  }
LABEL_184:
  operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_21817F14C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  if (a18 < 0)
    operator delete(__p);
  if (a43 < 0)
    operator delete(a38);
  _Unwind_Resume(exception_object);
}

uint64_t boost::detail::function::functor_manager<turi::`anonymous namespace'::parallel_csv_parser::start_background_write(turi::sframe &,turi::sarray<turi::flexible_type> &,unsigned long)::{lambda(void)#1}>::manage(uint64_t result, _WORD *a2, int a3)
{
  _QWORD *v4;
  _OWORD *v5;
  __int128 v6;

  v4 = (_QWORD *)result;
  switch(a3)
  {
    case 0:
      v5 = *(_OWORD **)result;
      result = operator new();
      v6 = v5[1];
      *(_OWORD *)result = *v5;
      *(_OWORD *)(result + 16) = v6;
      *(_QWORD *)a2 = result;
      break;
    case 1:
      *(_QWORD *)a2 = *(_QWORD *)result;
      *(_QWORD *)result = 0;
      break;
    case 2:
      result = *(_QWORD *)a2;
      if (*(_QWORD *)a2)
        result = MEMORY[0x219A19A08](result, 0x1020C405E66F15BLL);
      goto LABEL_9;
    case 3:
      result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == ((unint64_t)"ZN4turi12_GLOBAL__N_119parallel_csv_parser22start_background_writeERNS_6sframeER"
                                        "NS_6sarrayINS_13flexible_typeEEEmEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)
        || (result = strcmp((const char *)result, (const char *)((unint64_t)"ZN4turi12_GLOBAL__N_119parallel_csv_parser22start_background_writeERNS_6sframeERNS_6sarrayINS_13flexible_typeEEEmEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)), !(_DWORD)result))
      {
        *(_QWORD *)a2 = *v4;
      }
      else
      {
LABEL_9:
        *(_QWORD *)a2 = 0;
      }
      break;
    default:
      a2[4] = 0;
      break;
  }
  return result;
}

_QWORD *boost::detail::function::void_function_obj_invoker0<turi::`anonymous namespace'::parallel_csv_parser::start_background_write(turi::sframe &,turi::sarray<turi::flexible_type> &,unsigned long)::{lambda(void)#1},void>::invoke(_QWORD **a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  _QWORD *result;
  uint64_t v56;
  _QWORD *v57;
  _BYTE v58[24];
  _BYTE *v59;
  _BYTE v60[24];
  _BYTE *v61;
  _BYTE v62[24];
  _BYTE *v63;
  _BYTE v64[24];
  _BYTE *v65;
  _BYTE v66[24];
  _BYTE *v67;
  _BYTE v68[24];
  _BYTE *v69;
  _QWORD v70[3];
  _QWORD *v71;
  _QWORD v72[3];
  _QWORD *v73;
  _QWORD v74[3];
  _QWORD *v75;
  _BYTE v76[24];
  _BYTE *v77;
  _BYTE v78[24];
  _BYTE *v79;
  _BYTE v80[24];
  _BYTE *v81;
  _BYTE v82[24];
  _BYTE *v83;
  _BYTE v84[24];
  _BYTE *v85;
  _BYTE v86[24];
  _BYTE *v87;
  _QWORD v88[3];
  _QWORD *v89;
  _QWORD v90[3];
  _QWORD *v91;
  _QWORD v92[3];
  _QWORD *v93;
  uint64_t v94;

  v94 = *MEMORY[0x24BDAC8D0];
  v1 = (*a1)[2];
  v57 = *a1;
  (*(void (**)(_QWORD *__return_ptr, _QWORD, _QWORD))(*(_QWORD *)(*a1)[1] + 32))(v88, (*a1)[1], **a1);
  v2 = *(_QWORD *)(v1 + 56);
  if (*(_QWORD *)(v1 + 64) != v2)
  {
    v3 = 0;
    v4 = (unint64_t *)(v1 + 664);
    while (1)
    {
      v5 = *(_QWORD *)(v2 + 24 * v3);
      v6 = *(_QWORD *)(*(_QWORD *)(v1 + 80) + 8 * v3);
      v7 = (uint64_t)v89;
      if (!v89)
        goto LABEL_6;
      if (v89 != v88)
        break;
      v77 = v76;
      (*(void (**)(_QWORD *, _BYTE *))(v88[0] + 24))(v88, v76);
LABEL_8:
      v8 = (uint64_t)v91;
      if (!v91)
        goto LABEL_11;
      if (v91 != v90)
      {
        v8 = (*(uint64_t (**)(_QWORD *))(*v91 + 16))(v91);
LABEL_11:
        v79 = (_BYTE *)v8;
        goto LABEL_13;
      }
      v79 = v78;
      (*(void (**)(_QWORD *, _BYTE *))(v90[0] + 24))(v90, v78);
LABEL_13:
      v9 = (uint64_t)v93;
      if (!v93)
        goto LABEL_16;
      if (v93 != v92)
      {
        v9 = (*(uint64_t (**)(_QWORD *))(*v93 + 16))(v93);
LABEL_16:
        v81 = (_BYTE *)v9;
        goto LABEL_18;
      }
      v81 = v80;
      (*(void (**)(_QWORD *, _BYTE *))(v92[0] + 24))(v92, v80);
LABEL_18:
      std::copy[abi:ne180100]<std::__wrap_iter<std::vector<turi::flexible_type> *>,turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>>(v5, v5 + 24 * v6, (uint64_t)v76, (uint64_t)v82);
      v10 = v87;
      if (v87 == v86)
      {
        v10 = v86;
        v11 = 4;
      }
      else
      {
        if (!v87)
          goto LABEL_23;
        v11 = 5;
      }
      (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_23:
      v12 = v85;
      if (v85 == v84)
      {
        v12 = v84;
        v13 = 4;
      }
      else
      {
        if (!v85)
          goto LABEL_28;
        v13 = 5;
      }
      (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_28:
      v14 = v83;
      if (v83 == v82)
      {
        v14 = v82;
        v15 = 4;
      }
      else
      {
        if (!v83)
          goto LABEL_33;
        v15 = 5;
      }
      (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_33:
      v16 = v81;
      if (v81 == v80)
      {
        v16 = v80;
        v17 = 4;
      }
      else
      {
        if (!v81)
          goto LABEL_38;
        v17 = 5;
      }
      (*(void (**)(void))(*v16 + 8 * v17))();
LABEL_38:
      v18 = v79;
      if (v79 == v78)
      {
        v18 = v78;
        v19 = 4;
      }
      else
      {
        if (!v79)
          goto LABEL_43;
        v19 = 5;
      }
      (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_43:
      v20 = v77;
      if (v77 == v76)
      {
        v20 = v76;
        v21 = 4;
      }
      else
      {
        if (!v77)
          goto LABEL_48;
        v21 = 5;
      }
      (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_48:
      v22 = *(_QWORD *)(*(_QWORD *)(v1 + 80) + 8 * v3);
      do
        v23 = __ldaxr(v4);
      while (__stlxr(v23 + v22, v4));
      ++v3;
      v2 = *(_QWORD *)(v1 + 56);
      if (v3 >= 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v1 + 64) - v2) >> 3))
        goto LABEL_51;
    }
    v7 = (*(uint64_t (**)(_QWORD *))(*v89 + 16))(v89);
LABEL_6:
    v77 = (_BYTE *)v7;
    goto LABEL_8;
  }
LABEL_51:
  if (!*(_BYTE *)(v1 + 729))
    goto LABEL_116;
  (*(void (**)(_QWORD *__return_ptr, _QWORD, _QWORD))(*(_QWORD *)v57[3] + 32))(v70, v57[3], 0);
  v24 = *(uint64_t **)(v1 + 128);
  v25 = *(uint64_t **)(v1 + 136);
  if (v24 != v25)
  {
    while (1)
    {
      v26 = *v24;
      v27 = v24[1];
      v28 = (uint64_t)v71;
      if (!v71)
        goto LABEL_56;
      if (v71 != v70)
        break;
      v59 = v58;
      (*(void (**)(_QWORD *, _BYTE *))(v70[0] + 24))(v70, v58);
LABEL_58:
      v29 = (uint64_t)v73;
      if (!v73)
        goto LABEL_61;
      if (v73 != v72)
      {
        v29 = (*(uint64_t (**)(void))(*v73 + 16))();
LABEL_61:
        v61 = (_BYTE *)v29;
        goto LABEL_63;
      }
      v61 = v60;
      (*(void (**)(_QWORD *, _BYTE *))(v72[0] + 24))(v72, v60);
LABEL_63:
      v30 = (uint64_t)v75;
      if (!v75)
        goto LABEL_66;
      if (v75 != v74)
      {
        v30 = (*(uint64_t (**)(void))(*v75 + 16))();
LABEL_66:
        v63 = (_BYTE *)v30;
        goto LABEL_68;
      }
      v63 = v62;
      (*(void (**)(_QWORD *, _BYTE *))(v74[0] + 24))(v74, v62);
LABEL_68:
      std::copy[abi:ne180100]<std::__wrap_iter<turi::flexible_type *>,turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>>(v26, v27, (uint64_t)v58, (uint64_t)v64);
      v31 = v69;
      if (v69 == v68)
      {
        v31 = v68;
        v32 = 4;
      }
      else
      {
        if (!v69)
          goto LABEL_73;
        v32 = 5;
      }
      (*(void (**)(void))(*v31 + 8 * v32))();
LABEL_73:
      v33 = v67;
      if (v67 == v66)
      {
        v33 = v66;
        v34 = 4;
      }
      else
      {
        if (!v67)
          goto LABEL_78;
        v34 = 5;
      }
      (*(void (**)(void))(*v33 + 8 * v34))();
LABEL_78:
      v35 = v65;
      if (v65 == v64)
      {
        v35 = v64;
        v36 = 4;
      }
      else
      {
        if (!v65)
          goto LABEL_83;
        v36 = 5;
      }
      (*(void (**)(void))(*v35 + 8 * v36))();
LABEL_83:
      v37 = v63;
      if (v63 == v62)
      {
        v37 = v62;
        v38 = 4;
      }
      else
      {
        if (!v63)
          goto LABEL_88;
        v38 = 5;
      }
      (*(void (**)(void))(*v37 + 8 * v38))();
LABEL_88:
      v39 = v61;
      if (v61 == v60)
      {
        v39 = v60;
        v40 = 4;
      }
      else
      {
        if (!v61)
          goto LABEL_93;
        v40 = 5;
      }
      (*(void (**)(void))(*v39 + 8 * v40))();
LABEL_93:
      v41 = v59;
      if (v59 == v58)
      {
        v41 = v58;
        v42 = 4;
        goto LABEL_97;
      }
      if (v59)
      {
        v42 = 5;
LABEL_97:
        (*(void (**)(void))(*v41 + 8 * v42))();
      }
      v43 = *v24;
      v44 = v24[1];
      if (v44 != *v24)
      {
        do
        {
          v44 -= 16;
          std::allocator<turi::flexible_type>::destroy[abi:ne180100]((uint64_t)(v24 + 2), v44);
        }
        while (v44 != v43);
      }
      v24[1] = v43;
      v24 += 3;
      if (v24 == v25)
        goto LABEL_101;
    }
    v28 = (*(uint64_t (**)(void))(*v71 + 16))();
LABEL_56:
    v59 = (_BYTE *)v28;
    goto LABEL_58;
  }
LABEL_101:
  v45 = v75;
  if (v75 == v74)
  {
    v46 = 4;
    v45 = v74;
  }
  else
  {
    if (!v75)
      goto LABEL_106;
    v46 = 5;
  }
  (*(void (**)(void))(*v45 + 8 * v46))();
LABEL_106:
  v47 = v73;
  if (v73 == v72)
  {
    v48 = 4;
    v47 = v72;
    goto LABEL_110;
  }
  if (v73)
  {
    v48 = 5;
LABEL_110:
    (*(void (**)(void))(*v47 + 8 * v48))();
  }
  v49 = v71;
  if (v71 == v70)
  {
    v50 = 4;
    v49 = v70;
  }
  else
  {
    if (!v71)
      goto LABEL_116;
    v50 = 5;
  }
  (*(void (**)(void))(*v49 + 8 * v50))();
LABEL_116:
  *(_BYTE *)(v1 + 712) = 0;
  v51 = v93;
  if (v93 == v92)
  {
    v52 = 4;
    v51 = v92;
  }
  else
  {
    if (!v93)
      goto LABEL_121;
    v52 = 5;
  }
  (*(void (**)(void))(*v51 + 8 * v52))();
LABEL_121:
  v53 = v91;
  if (v91 == v90)
  {
    v54 = 4;
    v53 = v90;
  }
  else
  {
    if (!v91)
      goto LABEL_126;
    v54 = 5;
  }
  (*(void (**)(void))(*v53 + 8 * v54))();
LABEL_126:
  result = v89;
  if (v89 == v88)
  {
    v56 = 4;
    result = v88;
  }
  else
  {
    if (!v89)
      return result;
    v56 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v56))();
}

void sub_21817FD4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60)
{
  uint64_t v60;
  _QWORD *v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;

  v62 = *(_QWORD **)(v60 - 104);
  if (v62 == (_QWORD *)(v60 - 128))
  {
    v63 = 4;
    v62 = (_QWORD *)(v60 - 128);
  }
  else
  {
    if (!v62)
      goto LABEL_6;
    v63 = 5;
  }
  (*(void (**)(void))(*v62 + 8 * v63))();
LABEL_6:
  v64 = *(_QWORD **)(v60 - 136);
  if (v64 == (_QWORD *)(v60 - 160))
  {
    v65 = 4;
    v64 = (_QWORD *)(v60 - 160);
  }
  else
  {
    if (!v64)
      goto LABEL_11;
    v65 = 5;
  }
  (*(void (**)(void))(*v64 + 8 * v65))();
LABEL_11:
  v66 = *(_QWORD **)(v60 - 168);
  if (v66 == (_QWORD *)(v60 - 192))
  {
    v67 = 4;
    v66 = (_QWORD *)(v60 - 192);
  }
  else
  {
    if (!v66)
      goto LABEL_16;
    v67 = 5;
  }
  (*(void (**)(void))(*v66 + 8 * v67))();
LABEL_16:
  _Unwind_Resume(exception_object);
}

_QWORD *std::copy[abi:ne180100]<std::__wrap_iter<std::vector<turi::flexible_type> *>,turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *result;
  uint64_t v25;
  _BYTE v26[24];
  _BYTE *v27;
  _BYTE v28[24];
  _BYTE *v29;
  _BYTE v30[24];
  _BYTE *v31;
  uint64_t v32;
  _BYTE v33[24];
  _BYTE *v34;
  _BYTE v35[24];
  _BYTE *v36;
  _BYTE v37[24];
  _BYTE *v38;
  _BYTE v39[24];
  _BYTE *v40;
  _BYTE v41[24];
  _BYTE *v42;
  _BYTE v43[24];
  _BYTE *v44;
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)v26, a3);
  v8 = v28;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)v28, a3 + 32);
  v9 = v30;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)v30, a3 + 64);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::__value_func[abi:ne180100]((uint64_t)v39, (uint64_t)v26);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> &&)>::__value_func[abi:ne180100]((uint64_t)v41, (uint64_t)v28);
  std::__function::__value_func<void ()(turi::sframe_rows const&)>::__value_func[abi:ne180100]((uint64_t)v43, (uint64_t)v30);
  std::__dispatch_copy_or_move[abi:ne180100]<std::_ClassicAlgPolicy,std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial,std::__wrap_iter<std::vector<turi::flexible_type> *>,std::__wrap_iter<std::vector<turi::flexible_type> *>,turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>>(a1, a2, (uint64_t)v39, &v32);
  v10 = v44;
  if (v44 == v43)
  {
    v11 = 4;
    v10 = v43;
  }
  else
  {
    if (!v44)
      goto LABEL_6;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_6:
  v12 = v42;
  if (v42 == v41)
  {
    v13 = 4;
    v12 = v41;
  }
  else
  {
    if (!v42)
      goto LABEL_11;
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_11:
  v14 = v40;
  if (v40 == v39)
  {
    v15 = 4;
    v14 = v39;
  }
  else
  {
    if (!v40)
      goto LABEL_16;
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_16:
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::__value_func[abi:ne180100](a4, (uint64_t)v33);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> &&)>::__value_func[abi:ne180100](a4 + 32, (uint64_t)v35);
  std::__function::__value_func<void ()(turi::sframe_rows const&)>::__value_func[abi:ne180100](a4 + 64, (uint64_t)v37);
  v16 = v38;
  if (v38 == v37)
  {
    v17 = 4;
    v16 = v37;
  }
  else
  {
    if (!v38)
      goto LABEL_21;
    v17 = 5;
  }
  (*(void (**)(void))(*v16 + 8 * v17))();
LABEL_21:
  v18 = v36;
  if (v36 == v35)
  {
    v19 = 4;
    v18 = v35;
  }
  else
  {
    if (!v36)
      goto LABEL_26;
    v19 = 5;
  }
  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_26:
  v20 = v34;
  if (v34 == v33)
  {
    v21 = 4;
    v20 = v33;
  }
  else
  {
    if (!v34)
      goto LABEL_31;
    v21 = 5;
  }
  (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_31:
  if (v31 == v30)
  {
    v22 = 4;
  }
  else
  {
    if (!v31)
      goto LABEL_36;
    v22 = 5;
    v9 = v31;
  }
  (*(void (**)(_QWORD *))(*v9 + 8 * v22))(v9);
LABEL_36:
  if (v29 == v28)
  {
    v23 = 4;
  }
  else
  {
    if (!v29)
      goto LABEL_41;
    v23 = 5;
    v8 = v29;
  }
  (*(void (**)(_QWORD *))(*v8 + 8 * v23))(v8);
LABEL_41:
  result = v27;
  if (v27 == v26)
  {
    v25 = 4;
    result = v26;
  }
  else
  {
    if (!v27)
      return result;
    v25 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v25))();
}

void sub_218180294(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>::~sframe_function_output_iterator((_QWORD *)(v9 - 168));
  turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>::~sframe_function_output_iterator(&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::copy[abi:ne180100]<std::__wrap_iter<turi::flexible_type *>,turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *result;
  uint64_t v25;
  _BYTE v26[24];
  _BYTE *v27;
  _BYTE v28[24];
  _BYTE *v29;
  _BYTE v30[24];
  _BYTE *v31;
  uint64_t v32;
  _BYTE v33[24];
  _BYTE *v34;
  _BYTE v35[24];
  _BYTE *v36;
  _BYTE v37[24];
  _BYTE *v38;
  _BYTE v39[24];
  _BYTE *v40;
  _BYTE v41[24];
  _BYTE *v42;
  _BYTE v43[24];
  _BYTE *v44;
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)v26, a3);
  v8 = v28;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)v28, a3 + 32);
  v9 = v30;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)v30, a3 + 64);
  std::__function::__value_func<void ()(turi::flexible_type const&)>::__value_func[abi:ne180100]((uint64_t)v39, (uint64_t)v26);
  std::__function::__value_func<void ()(turi::flexible_type &&)>::__value_func[abi:ne180100]((uint64_t)v41, (uint64_t)v28);
  std::__function::__value_func<void ()(turi::sframe_rows const&)>::__value_func[abi:ne180100]((uint64_t)v43, (uint64_t)v30);
  std::__dispatch_copy_or_move[abi:ne180100]<std::_ClassicAlgPolicy,std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial,std::__wrap_iter<turi::flexible_type *>,std::__wrap_iter<turi::flexible_type *>,turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>>(a1, a2, (uint64_t)v39, &v32);
  v10 = v44;
  if (v44 == v43)
  {
    v11 = 4;
    v10 = v43;
  }
  else
  {
    if (!v44)
      goto LABEL_6;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_6:
  v12 = v42;
  if (v42 == v41)
  {
    v13 = 4;
    v12 = v41;
  }
  else
  {
    if (!v42)
      goto LABEL_11;
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_11:
  v14 = v40;
  if (v40 == v39)
  {
    v15 = 4;
    v14 = v39;
  }
  else
  {
    if (!v40)
      goto LABEL_16;
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_16:
  std::__function::__value_func<void ()(turi::flexible_type const&)>::__value_func[abi:ne180100](a4, (uint64_t)v33);
  std::__function::__value_func<void ()(turi::flexible_type &&)>::__value_func[abi:ne180100](a4 + 32, (uint64_t)v35);
  std::__function::__value_func<void ()(turi::sframe_rows const&)>::__value_func[abi:ne180100](a4 + 64, (uint64_t)v37);
  v16 = v38;
  if (v38 == v37)
  {
    v17 = 4;
    v16 = v37;
  }
  else
  {
    if (!v38)
      goto LABEL_21;
    v17 = 5;
  }
  (*(void (**)(void))(*v16 + 8 * v17))();
LABEL_21:
  v18 = v36;
  if (v36 == v35)
  {
    v19 = 4;
    v18 = v35;
  }
  else
  {
    if (!v36)
      goto LABEL_26;
    v19 = 5;
  }
  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_26:
  v20 = v34;
  if (v34 == v33)
  {
    v21 = 4;
    v20 = v33;
  }
  else
  {
    if (!v34)
      goto LABEL_31;
    v21 = 5;
  }
  (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_31:
  if (v31 == v30)
  {
    v22 = 4;
  }
  else
  {
    if (!v31)
      goto LABEL_36;
    v22 = 5;
    v9 = v31;
  }
  (*(void (**)(_QWORD *))(*v9 + 8 * v22))(v9);
LABEL_36:
  if (v29 == v28)
  {
    v23 = 4;
  }
  else
  {
    if (!v29)
      goto LABEL_41;
    v23 = 5;
    v8 = v29;
  }
  (*(void (**)(_QWORD *))(*v8 + 8 * v23))(v8);
LABEL_41:
  result = v27;
  if (v27 == v26)
  {
    v25 = 4;
    result = v26;
  }
  else
  {
    if (!v27)
      return result;
    v25 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v25))();
}

void sub_2181805E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>::~sframe_function_output_iterator((_QWORD *)(v9 - 168));
  turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>::~sframe_function_output_iterator(&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::__dispatch_copy_or_move[abi:ne180100]<std::_ClassicAlgPolicy,std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial,std::__wrap_iter<std::vector<turi::flexible_type> *>,std::__wrap_iter<std::vector<turi::flexible_type> *>,turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *result;
  uint64_t v13;
  _BYTE v14[24];
  _BYTE *v15;
  _BYTE v16[24];
  _BYTE *v17;
  _BYTE v18[24];
  _BYTE *v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::__value_func[abi:ne180100]((uint64_t)v14, a3);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> &&)>::__value_func[abi:ne180100]((uint64_t)v16, a3 + 32);
  std::__function::__value_func<void ()(turi::sframe_rows const&)>::__value_func[abi:ne180100]((uint64_t)v18, a3 + 64);
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<std::vector<turi::flexible_type> *>,std::__wrap_iter<std::vector<turi::flexible_type> *>,turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>,0>(a1, a2, (uint64_t)v14, a4);
  v8 = v19;
  if (v19 == v18)
  {
    v9 = 4;
    v8 = v18;
  }
  else
  {
    if (!v19)
      goto LABEL_6;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_6:
  v10 = v17;
  if (v17 == v16)
  {
    v11 = 4;
    v10 = v16;
  }
  else
  {
    if (!v17)
      goto LABEL_11;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_11:
  result = v15;
  if (v15 == v14)
  {
    v13 = 4;
    result = v14;
  }
  else
  {
    if (!v15)
      return result;
    v13 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v13))();
}

void sub_2181807B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>::~sframe_function_output_iterator((uint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<std::vector<turi::flexible_type> *>,std::__wrap_iter<std::vector<turi::flexible_type> *>,turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>,0>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *result;
  uint64_t v43;
  uint64_t v44;
  _BYTE v45[24];
  _BYTE *v46;
  _BYTE v47[24];
  _BYTE *v48;
  _BYTE v49[24];
  _BYTE *v50;
  _BYTE v51[24];
  _BYTE *v52;
  _BYTE v53[24];
  _BYTE *v54;
  _BYTE v55[24];
  _BYTE *v56;
  _BYTE v57[24];
  _BYTE *v58;
  _BYTE v59[24];
  _BYTE *v60;
  _BYTE v61[24];
  _BYTE *v62;
  _BYTE v63[24];
  _BYTE *v64;
  _BYTE v65[24];
  _BYTE *v66;
  _BYTE v67[24];
  _BYTE *v68;
  _BYTE v69[24];
  _BYTE *v70;
  _BYTE v71[24];
  _BYTE *v72;
  _BYTE v73[24];
  _BYTE *v74;
  uint64_t v75;
  _BYTE v76[24];
  _BYTE *v77;
  _BYTE v78[24];
  _BYTE *v79;
  _BYTE v80[24];
  _BYTE *v81;
  uint64_t v82;

  v82 = *MEMORY[0x24BDAC8D0];
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)v63, a3);
  v8 = v65;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)v65, a3 + 32);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)v67, a3 + 64);
  std::__unwrap_iter[abi:ne180100]<turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>,std::__unwrap_iter_impl<std::function<void ()(turi::sframe_rows const&)>,false>,0>((uint64_t)v63, (uint64_t)v69);
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<turi::flexible_type> *,std::vector<turi::flexible_type> *,turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>>(a1, a2, (uint64_t)v69, &v75);
  v9 = v74;
  if (v74 == v73)
  {
    v10 = 4;
    v9 = v73;
  }
  else
  {
    if (!v74)
      goto LABEL_6;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_6:
  v11 = v72;
  if (v72 == v71)
  {
    v12 = 4;
    v11 = v71;
  }
  else
  {
    if (!v72)
      goto LABEL_11;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_11:
  v13 = v70;
  if (v70 == v69)
  {
    v14 = 4;
    v13 = v69;
  }
  else
  {
    if (!v70)
      goto LABEL_16;
    v14 = 5;
  }
  (*(void (**)(void))(*v13 + 8 * v14))();
LABEL_16:
  v15 = v68;
  if (v68 == v67)
  {
    v16 = 4;
    v15 = v67;
  }
  else
  {
    if (!v68)
      goto LABEL_21;
    v16 = 5;
  }
  (*(void (**)(void))(*v15 + 8 * v16))();
LABEL_21:
  if (v66 == v65)
  {
    v17 = 4;
  }
  else
  {
    if (!v66)
      goto LABEL_26;
    v17 = 5;
    v8 = v66;
  }
  (*(void (**)(_QWORD *))(*v8 + 8 * v17))(v8);
LABEL_26:
  v18 = v64;
  if (v64 == v63)
  {
    v19 = 4;
    v18 = v63;
  }
  else
  {
    if (!v64)
      goto LABEL_31;
    v19 = 5;
  }
  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_31:
  v44 = v75;
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::__value_func[abi:ne180100]((uint64_t)v51, a3);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> &&)>::__value_func[abi:ne180100]((uint64_t)v53, a3 + 32);
  std::__function::__value_func<void ()(turi::sframe_rows const&)>::__value_func[abi:ne180100]((uint64_t)v55, a3 + 64);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::__value_func[abi:ne180100]((uint64_t)v45, (uint64_t)v76);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> &&)>::__value_func[abi:ne180100]((uint64_t)v47, (uint64_t)v78);
  std::__function::__value_func<void ()(turi::sframe_rows const&)>::__value_func[abi:ne180100]((uint64_t)v49, (uint64_t)v80);
  std::__rewrap_iter[abi:ne180100]<turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>,std::function<void ()(turi::sframe_rows const&)>,std::__unwrap_iter_impl<std::function<void ()(turi::sframe_rows const&)>,false>>((uint64_t)v51, (uint64_t)v45, (uint64_t)v57);
  std::pair<std::vector<turi::flexible_type> *,turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>>::pair[abi:ne180100]<std::vector<turi::flexible_type> *,std::function<void ()(turi::sframe_rows const&)>,0>(a4, &v44, (uint64_t)v57);
  v20 = v62;
  if (v62 == v61)
  {
    v21 = 4;
    v20 = v61;
  }
  else
  {
    if (!v62)
      goto LABEL_36;
    v21 = 5;
  }
  (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_36:
  v22 = v60;
  if (v60 == v59)
  {
    v23 = 4;
    v22 = v59;
  }
  else
  {
    if (!v60)
      goto LABEL_41;
    v23 = 5;
  }
  (*(void (**)(void))(*v22 + 8 * v23))();
LABEL_41:
  v24 = v58;
  if (v58 == v57)
  {
    v25 = 4;
    v24 = v57;
  }
  else
  {
    if (!v58)
      goto LABEL_46;
    v25 = 5;
  }
  (*(void (**)(void))(*v24 + 8 * v25))();
LABEL_46:
  v26 = v50;
  if (v50 == v49)
  {
    v27 = 4;
    v26 = v49;
  }
  else
  {
    if (!v50)
      goto LABEL_51;
    v27 = 5;
  }
  (*(void (**)(void))(*v26 + 8 * v27))();
LABEL_51:
  v28 = v48;
  if (v48 == v47)
  {
    v29 = 4;
    v28 = v47;
  }
  else
  {
    if (!v48)
      goto LABEL_56;
    v29 = 5;
  }
  (*(void (**)(void))(*v28 + 8 * v29))();
LABEL_56:
  v30 = v46;
  if (v46 == v45)
  {
    v31 = 4;
    v30 = v45;
  }
  else
  {
    if (!v46)
      goto LABEL_61;
    v31 = 5;
  }
  (*(void (**)(void))(*v30 + 8 * v31))();
LABEL_61:
  v32 = v56;
  if (v56 == v55)
  {
    v33 = 4;
    v32 = v55;
  }
  else
  {
    if (!v56)
      goto LABEL_66;
    v33 = 5;
  }
  (*(void (**)(void))(*v32 + 8 * v33))();
LABEL_66:
  v34 = v54;
  if (v54 == v53)
  {
    v35 = 4;
    v34 = v53;
  }
  else
  {
    if (!v54)
      goto LABEL_71;
    v35 = 5;
  }
  (*(void (**)(void))(*v34 + 8 * v35))();
LABEL_71:
  v36 = v52;
  if (v52 == v51)
  {
    v37 = 4;
    v36 = v51;
  }
  else
  {
    if (!v52)
      goto LABEL_76;
    v37 = 5;
  }
  (*(void (**)(void))(*v36 + 8 * v37))();
LABEL_76:
  v38 = v81;
  if (v81 == v80)
  {
    v39 = 4;
    v38 = v80;
  }
  else
  {
    if (!v81)
      goto LABEL_81;
    v39 = 5;
  }
  (*(void (**)(void))(*v38 + 8 * v39))();
LABEL_81:
  v40 = v79;
  if (v79 == v78)
  {
    v41 = 4;
    v40 = v78;
  }
  else
  {
    if (!v79)
      goto LABEL_86;
    v41 = 5;
  }
  (*(void (**)(void))(*v40 + 8 * v41))();
LABEL_86:
  result = v77;
  if (v77 == v76)
  {
    v43 = 4;
    result = v76;
  }
  else
  {
    if (!v77)
      return result;
    v43 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v43))();
}

void sub_218180C88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59)
{
  turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>::~sframe_function_output_iterator(&a59);
  turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>::~sframe_function_output_iterator(&a47);
  _Unwind_Resume(a1);
}

_QWORD *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<turi::flexible_type> *,std::vector<turi::flexible_type> *,turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v10;

  v5 = a1;
  if (a1 != a2)
  {
    do
    {
      v8 = *(_QWORD *)(a3 + 24);
      if (!v8)
        std::__throw_bad_function_call[abi:ne180100]();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 48))(v8, v5);
      v5 += 24;
    }
    while (v5 != a2);
    v5 = a2;
  }
  v10 = v5;
  return std::pair<std::vector<turi::flexible_type> *,turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>>::pair[abi:ne180100]<std::vector<turi::flexible_type> *,std::function<void ()(turi::sframe_rows const&)>,0>(a4, &v10, a3);
}

_QWORD *std::__dispatch_copy_or_move[abi:ne180100]<std::_ClassicAlgPolicy,std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial,std::__wrap_iter<turi::flexible_type *>,std::__wrap_iter<turi::flexible_type *>,turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *result;
  uint64_t v13;
  _BYTE v14[24];
  _BYTE *v15;
  _BYTE v16[24];
  _BYTE *v17;
  _BYTE v18[24];
  _BYTE *v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  std::__function::__value_func<void ()(turi::flexible_type const&)>::__value_func[abi:ne180100]((uint64_t)v14, a3);
  std::__function::__value_func<void ()(turi::flexible_type &&)>::__value_func[abi:ne180100]((uint64_t)v16, a3 + 32);
  std::__function::__value_func<void ()(turi::sframe_rows const&)>::__value_func[abi:ne180100]((uint64_t)v18, a3 + 64);
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<turi::flexible_type *>,std::__wrap_iter<turi::flexible_type *>,turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>,0>(a1, a2, (uint64_t)v14, a4);
  v8 = v19;
  if (v19 == v18)
  {
    v9 = 4;
    v8 = v18;
  }
  else
  {
    if (!v19)
      goto LABEL_6;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_6:
  v10 = v17;
  if (v17 == v16)
  {
    v11 = 4;
    v10 = v16;
  }
  else
  {
    if (!v17)
      goto LABEL_11;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_11:
  result = v15;
  if (v15 == v14)
  {
    v13 = 4;
    result = v14;
  }
  else
  {
    if (!v15)
      return result;
    v13 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v13))();
}

void sub_218180ED4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>::~sframe_function_output_iterator((uint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<turi::flexible_type *>,std::__wrap_iter<turi::flexible_type *>,turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>,0>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *result;
  uint64_t v43;
  uint64_t v44;
  _BYTE v45[24];
  _BYTE *v46;
  _BYTE v47[24];
  _BYTE *v48;
  _BYTE v49[24];
  _BYTE *v50;
  _BYTE v51[24];
  _BYTE *v52;
  _BYTE v53[24];
  _BYTE *v54;
  _BYTE v55[24];
  _BYTE *v56;
  _BYTE v57[24];
  _BYTE *v58;
  _BYTE v59[24];
  _BYTE *v60;
  _BYTE v61[24];
  _BYTE *v62;
  _BYTE v63[24];
  _BYTE *v64;
  _BYTE v65[24];
  _BYTE *v66;
  _BYTE v67[24];
  _BYTE *v68;
  _BYTE v69[24];
  _BYTE *v70;
  _BYTE v71[24];
  _BYTE *v72;
  _BYTE v73[24];
  _BYTE *v74;
  uint64_t v75;
  _BYTE v76[24];
  _BYTE *v77;
  _BYTE v78[24];
  _BYTE *v79;
  _BYTE v80[24];
  _BYTE *v81;
  uint64_t v82;

  v82 = *MEMORY[0x24BDAC8D0];
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)v63, a3);
  v8 = v65;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)v65, a3 + 32);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)v67, a3 + 64);
  std::__unwrap_iter[abi:ne180100]<turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>,std::__unwrap_iter_impl<std::function<void ()(turi::sframe_rows const&)>,false>,0>((uint64_t)v63, (uint64_t)v69);
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<turi::flexible_type *,turi::flexible_type *,turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>>(a1, a2, (uint64_t)v69, &v75);
  v9 = v74;
  if (v74 == v73)
  {
    v10 = 4;
    v9 = v73;
  }
  else
  {
    if (!v74)
      goto LABEL_6;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_6:
  v11 = v72;
  if (v72 == v71)
  {
    v12 = 4;
    v11 = v71;
  }
  else
  {
    if (!v72)
      goto LABEL_11;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_11:
  v13 = v70;
  if (v70 == v69)
  {
    v14 = 4;
    v13 = v69;
  }
  else
  {
    if (!v70)
      goto LABEL_16;
    v14 = 5;
  }
  (*(void (**)(void))(*v13 + 8 * v14))();
LABEL_16:
  v15 = v68;
  if (v68 == v67)
  {
    v16 = 4;
    v15 = v67;
  }
  else
  {
    if (!v68)
      goto LABEL_21;
    v16 = 5;
  }
  (*(void (**)(void))(*v15 + 8 * v16))();
LABEL_21:
  if (v66 == v65)
  {
    v17 = 4;
  }
  else
  {
    if (!v66)
      goto LABEL_26;
    v17 = 5;
    v8 = v66;
  }
  (*(void (**)(_QWORD *))(*v8 + 8 * v17))(v8);
LABEL_26:
  v18 = v64;
  if (v64 == v63)
  {
    v19 = 4;
    v18 = v63;
  }
  else
  {
    if (!v64)
      goto LABEL_31;
    v19 = 5;
  }
  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_31:
  v44 = v75;
  std::__function::__value_func<void ()(turi::flexible_type const&)>::__value_func[abi:ne180100]((uint64_t)v51, a3);
  std::__function::__value_func<void ()(turi::flexible_type &&)>::__value_func[abi:ne180100]((uint64_t)v53, a3 + 32);
  std::__function::__value_func<void ()(turi::sframe_rows const&)>::__value_func[abi:ne180100]((uint64_t)v55, a3 + 64);
  std::__function::__value_func<void ()(turi::flexible_type const&)>::__value_func[abi:ne180100]((uint64_t)v45, (uint64_t)v76);
  std::__function::__value_func<void ()(turi::flexible_type &&)>::__value_func[abi:ne180100]((uint64_t)v47, (uint64_t)v78);
  std::__function::__value_func<void ()(turi::sframe_rows const&)>::__value_func[abi:ne180100]((uint64_t)v49, (uint64_t)v80);
  std::__rewrap_iter[abi:ne180100]<turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>,std::function<void ()(turi::sframe_rows const&)>,std::__unwrap_iter_impl<std::function<void ()(turi::sframe_rows const&)>,false>>((uint64_t)v51, (uint64_t)v45, (uint64_t)v57);
  std::pair<turi::flexible_type *,turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>>::pair[abi:ne180100]<turi::flexible_type *,std::function<void ()(turi::sframe_rows const&)>,0>(a4, &v44, (uint64_t)v57);
  v20 = v62;
  if (v62 == v61)
  {
    v21 = 4;
    v20 = v61;
  }
  else
  {
    if (!v62)
      goto LABEL_36;
    v21 = 5;
  }
  (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_36:
  v22 = v60;
  if (v60 == v59)
  {
    v23 = 4;
    v22 = v59;
  }
  else
  {
    if (!v60)
      goto LABEL_41;
    v23 = 5;
  }
  (*(void (**)(void))(*v22 + 8 * v23))();
LABEL_41:
  v24 = v58;
  if (v58 == v57)
  {
    v25 = 4;
    v24 = v57;
  }
  else
  {
    if (!v58)
      goto LABEL_46;
    v25 = 5;
  }
  (*(void (**)(void))(*v24 + 8 * v25))();
LABEL_46:
  v26 = v50;
  if (v50 == v49)
  {
    v27 = 4;
    v26 = v49;
  }
  else
  {
    if (!v50)
      goto LABEL_51;
    v27 = 5;
  }
  (*(void (**)(void))(*v26 + 8 * v27))();
LABEL_51:
  v28 = v48;
  if (v48 == v47)
  {
    v29 = 4;
    v28 = v47;
  }
  else
  {
    if (!v48)
      goto LABEL_56;
    v29 = 5;
  }
  (*(void (**)(void))(*v28 + 8 * v29))();
LABEL_56:
  v30 = v46;
  if (v46 == v45)
  {
    v31 = 4;
    v30 = v45;
  }
  else
  {
    if (!v46)
      goto LABEL_61;
    v31 = 5;
  }
  (*(void (**)(void))(*v30 + 8 * v31))();
LABEL_61:
  v32 = v56;
  if (v56 == v55)
  {
    v33 = 4;
    v32 = v55;
  }
  else
  {
    if (!v56)
      goto LABEL_66;
    v33 = 5;
  }
  (*(void (**)(void))(*v32 + 8 * v33))();
LABEL_66:
  v34 = v54;
  if (v54 == v53)
  {
    v35 = 4;
    v34 = v53;
  }
  else
  {
    if (!v54)
      goto LABEL_71;
    v35 = 5;
  }
  (*(void (**)(void))(*v34 + 8 * v35))();
LABEL_71:
  v36 = v52;
  if (v52 == v51)
  {
    v37 = 4;
    v36 = v51;
  }
  else
  {
    if (!v52)
      goto LABEL_76;
    v37 = 5;
  }
  (*(void (**)(void))(*v36 + 8 * v37))();
LABEL_76:
  v38 = v81;
  if (v81 == v80)
  {
    v39 = 4;
    v38 = v80;
  }
  else
  {
    if (!v81)
      goto LABEL_81;
    v39 = 5;
  }
  (*(void (**)(void))(*v38 + 8 * v39))();
LABEL_81:
  v40 = v79;
  if (v79 == v78)
  {
    v41 = 4;
    v40 = v78;
  }
  else
  {
    if (!v79)
      goto LABEL_86;
    v41 = 5;
  }
  (*(void (**)(void))(*v40 + 8 * v41))();
LABEL_86:
  result = v77;
  if (v77 == v76)
  {
    v43 = 4;
    result = v76;
  }
  else
  {
    if (!v77)
      return result;
    v43 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v43))();
}

void sub_2181813AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59)
{
  turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>::~sframe_function_output_iterator(&a59);
  turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>::~sframe_function_output_iterator(&a47);
  _Unwind_Resume(a1);
}

_QWORD *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<turi::flexible_type *,turi::flexible_type *,turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v10;

  v5 = a1;
  if (a1 != a2)
  {
    do
    {
      v8 = *(_QWORD *)(a3 + 24);
      if (!v8)
        std::__throw_bad_function_call[abi:ne180100]();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 48))(v8, v5);
      v5 += 16;
    }
    while (v5 != a2);
    v5 = a2;
  }
  v10 = v5;
  return std::pair<turi::flexible_type *,turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>>::pair[abi:ne180100]<turi::flexible_type *,std::function<void ()(turi::sframe_rows const&)>,0>(a4, &v10, a3);
}

_QWORD *std::__unwrap_iter[abi:ne180100]<turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>,std::__unwrap_iter_impl<std::function<void ()(turi::sframe_rows const&)>,false>,0>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE *v11;
  _BYTE v12[24];
  _BYTE *v13;
  _BYTE v14[24];
  _BYTE *v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)v10, a1);
  v4 = v12;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)v12, a1 + 32);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)v14, a1 + 64);
  std::__unwrap_iter_impl<turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>,false>::__unwrap[abi:ne180100]((uint64_t)v10, a2);
  v5 = v15;
  if (v15 == v14)
  {
    v6 = 4;
    v5 = v14;
  }
  else
  {
    if (!v15)
      goto LABEL_6;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_6:
  if (v13 == v12)
  {
    v7 = 4;
  }
  else
  {
    if (!v13)
      goto LABEL_11;
    v7 = 5;
    v4 = v13;
  }
  (*(void (**)(_QWORD *))(*v4 + 8 * v7))(v4);
LABEL_11:
  result = v11;
  if (v11 == v10)
  {
    v9 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_2181815E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, uint64_t a14, uint64_t a15, uint64_t a16, _QWORD *a17)
{
  _QWORD *v17;
  uint64_t v19;
  char *v20;
  uint64_t v21;

  if (!a2)
    _Unwind_Resume(exception_object);
  if (a17 == v17)
  {
    v19 = 4;
  }
  else
  {
    if (!a17)
      goto LABEL_7;
    v19 = 5;
    v17 = a17;
  }
  (*(void (**)(_QWORD *))(*v17 + 8 * v19))(v17);
LABEL_7:
  v20 = a13;
  if (a13 == &a10)
  {
    v21 = 4;
    v20 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_13;
    v21 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
LABEL_13:
  __clang_call_terminate(exception_object);
}

_QWORD *std::__rewrap_iter[abi:ne180100]<turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>,std::function<void ()(turi::sframe_rows const&)>,std::__unwrap_iter_impl<std::function<void ()(turi::sframe_rows const&)>,false>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *result;
  uint64_t v17;
  _BYTE v18[24];
  _BYTE *v19;
  _BYTE v20[24];
  _BYTE *v21;
  _BYTE v22[24];
  _BYTE *v23;
  _BYTE v24[24];
  _BYTE *v25;
  _BYTE v26[24];
  _BYTE *v27;
  _BYTE v28[24];
  _BYTE *v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  std::__function::__value_func<void ()(turi::flexible_type const&)>::__value_func[abi:ne180100]((uint64_t)v24, a1);
  std::__function::__value_func<void ()(turi::flexible_type &&)>::__value_func[abi:ne180100]((uint64_t)v26, a1 + 32);
  std::__function::__value_func<void ()(turi::sframe_rows const&)>::__value_func[abi:ne180100]((uint64_t)v28, a1 + 64);
  std::__function::__value_func<void ()(turi::flexible_type const&)>::__value_func[abi:ne180100]((uint64_t)v18, a2);
  std::__function::__value_func<void ()(turi::flexible_type &&)>::__value_func[abi:ne180100]((uint64_t)v20, a2 + 32);
  std::__function::__value_func<void ()(turi::sframe_rows const&)>::__value_func[abi:ne180100]((uint64_t)v22, a2 + 64);
  std::__unwrap_iter_impl<turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>,false>::__rewrap[abi:ne180100]((uint64_t)v18, a3);
  v6 = v23;
  if (v23 == v22)
  {
    v7 = 4;
    v6 = v22;
  }
  else
  {
    if (!v23)
      goto LABEL_6;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_6:
  v8 = v21;
  if (v21 == v20)
  {
    v9 = 4;
    v8 = v20;
  }
  else
  {
    if (!v21)
      goto LABEL_11;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_11:
  v10 = v19;
  if (v19 == v18)
  {
    v11 = 4;
    v10 = v18;
  }
  else
  {
    if (!v19)
      goto LABEL_16;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_16:
  v12 = v29;
  if (v29 == v28)
  {
    v13 = 4;
    v12 = v28;
  }
  else
  {
    if (!v29)
      goto LABEL_21;
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_21:
  v14 = v27;
  if (v27 == v26)
  {
    v15 = 4;
    v14 = v26;
  }
  else
  {
    if (!v27)
      goto LABEL_26;
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_26:
  result = v25;
  if (v25 == v24)
  {
    v17 = 4;
    result = v24;
  }
  else
  {
    if (!v25)
      return result;
    v17 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v17))();
}

_QWORD *std::pair<turi::flexible_type *,turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>>::pair[abi:ne180100]<turi::flexible_type *,std::function<void ()(turi::sframe_rows const&)>,0>(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;

  *a1 = *a2;
  v5 = (uint64_t)(a1 + 5);
  std::__function::__value_func<void ()(turi::flexible_type const&)>::__value_func[abi:ne180100]((uint64_t)(a1 + 1), a3);
  std::__function::__value_func<void ()(turi::flexible_type &&)>::__value_func[abi:ne180100](v5, a3 + 32);
  std::__function::__value_func<void ()(turi::sframe_rows const&)>::__value_func[abi:ne180100]((uint64_t)(a1 + 9), a3 + 64);
  return a1;
}

uint64_t std::__unwrap_iter_impl<turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>,false>::__unwrap[abi:ne180100]@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::__function::__value_func<void ()(turi::flexible_type const&)>::__value_func[abi:ne180100](a2, a1);
  std::__function::__value_func<void ()(turi::flexible_type &&)>::__value_func[abi:ne180100](a2 + 32, a1 + 32);
  return std::__function::__value_func<void ()(turi::sframe_rows const&)>::__value_func[abi:ne180100](a2 + 64, a1 + 64);
}

uint64_t std::__unwrap_iter_impl<turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>,false>::__rewrap[abi:ne180100]@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  std::__function::__value_func<void ()(turi::flexible_type const&)>::__value_func[abi:ne180100](a2, a1);
  std::__function::__value_func<void ()(turi::flexible_type &&)>::__value_func[abi:ne180100](a2 + 32, a1 + 32);
  return std::__function::__value_func<void ()(turi::sframe_rows const&)>::__value_func[abi:ne180100](a2 + 64, a1 + 64);
}

_OWORD *std::__tree<std::__value_type<std::string,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<turi::sarray<turi::flexible_type>>>>>::__emplace_unique_key_args<std::string,std::pair<std::string,std::shared_ptr<turi::sarray<turi::flexible_type>>>>(uint64_t **a1, const void **a2, uint64_t a3)
{
  void **v5;
  _OWORD *v6;
  uint64_t **v7;
  _QWORD v9[2];
  char v10;
  uint64_t v11;

  v5 = (void **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = operator new(0x48uLL);
    v9[1] = a1 + 1;
    v6[2] = *(_OWORD *)a3;
    *((_QWORD *)v6 + 6) = *(_QWORD *)(a3 + 16);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_OWORD *)((char *)v6 + 56) = *(_OWORD *)(a3 + 24);
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)(a3 + 24) = 0;
    *(_QWORD *)(a3 + 32) = 0;
    v10 = 1;
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v11, v7, (uint64_t *)v6);
    v9[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<turi::sarray<turi::flexible_type>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<turi::sarray<turi::flexible_type>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v9, 0);
  }
  return v6;
}

uint64_t std::string::__init_with_sentinel[abi:ne180100]<std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>(std::string *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t result;
  std::string::value_type *v5;
  std::string::value_type v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;

  v8 = a3;
  v9 = a2;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = 0;
  while (1)
  {
    result = std::istreambuf_iterator<char>::equal[abi:ne180100](&v9, &v8);
    if ((result & 1) != 0)
      break;
    v5 = (std::string::value_type *)v9[3];
    if (v5 == (std::string::value_type *)v9[4])
      v6 = (*(uint64_t (**)(_QWORD *))(*v9 + 72))(v9);
    else
      v6 = *v5;
    std::string::push_back(a1, v6);
    v7 = v9[3];
    if (v7 == v9[4])
      (*(void (**)(_QWORD *))(*v9 + 80))(v9);
    else
      v9[3] = v7 + 1;
  }
  return result;
}

void sub_218181AA0(void *a1)
{
  uint64_t v1;

  __cxa_begin_catch(a1);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  __cxa_rethrow();
}

void sub_218181ABC(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::vector<unsigned long>::__append(void **a1, unint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  _QWORD *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *i;
  uint64_t v25;

  v8 = a1[2];
  v6 = (uint64_t)(a1 + 2);
  v7 = v8;
  v9 = *(_QWORD **)(v6 - 8);
  if (a2 <= (v8 - (_BYTE *)v9) >> 3)
  {
    if (a2)
    {
      v16 = 8 * a2;
      v17 = &v9[a2];
      do
      {
        *v9++ = *a3;
        v16 -= 8;
      }
      while (v16);
      v9 = v17;
    }
    a1[1] = v9;
  }
  else
  {
    v10 = (char *)v9 - (_BYTE *)*a1;
    v11 = a2 + (v10 >> 3);
    if (v11 >> 61)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v12 = v10 >> 3;
    v13 = v7 - (_BYTE *)*a1;
    if (v13 >> 2 > v11)
      v11 = v13 >> 2;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v11;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v6, v14);
    else
      v15 = 0;
    v18 = &v15[8 * v12];
    v19 = &v18[8 * a2];
    v20 = 8 * a2;
    v21 = v18;
    do
    {
      *(_QWORD *)v21 = *a3;
      v21 += 8;
      v20 -= 8;
    }
    while (v20);
    v22 = &v15[8 * v14];
    v23 = (char *)*a1;
    for (i = (char *)a1[1]; i != v23; i -= 8)
    {
      v25 = *((_QWORD *)i - 1);
      *((_QWORD *)v18 - 1) = v25;
      v18 -= 8;
    }
    *a1 = v18;
    a1[1] = v19;
    a1[2] = v22;
    if (v23)
      operator delete(v23);
  }
}

void OUTLINED_FUNCTION_13_3(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p)
{
  operator delete(__p);
}

std::string *OUTLINED_FUNCTION_18_3(uint64_t a1, uint64_t a2, const std::string::value_type *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, std::string *a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  return std::string::insert((std::string *)&a16, 0, a3);
}

double OUTLINED_FUNCTION_30_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, __n128 a13, uint64_t a14, __n128 a15)
{
  double result;

  *(_QWORD *)&result = turi::sanitize_url(&a13, &a15).n128_u64[0];
  return result;
}

void OUTLINED_FUNCTION_36_3(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p)
{
  operator delete(__p);
}

void OUTLINED_FUNCTION_42(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  std::string::__init_copy_ctor_external((std::string *)&a6, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
}

double OUTLINED_FUNCTION_43_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, __n128 a15)
{
  double result;

  *(_QWORD *)&result = turi::sanitize_url(&a9, &a15).n128_u64[0];
  return result;
}

void OUTLINED_FUNCTION_44_0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p)
{
  operator delete(__p);
}

void OUTLINED_FUNCTION_45_0()
{
  uint64_t v0;

  operator delete(*(void **)(v0 - 112));
}

void __cxx_global_var_init_14_1()
{
  int v0;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, "Mutex create error %d", v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_parallel_csv_parser_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void turi::rolling_aggregate::rolling_apply(uint64_t a1@<X0>, std::locale::__imp *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v7;
  uint64_t v13;
  uint64_t type;
  uint64_t v15;
  uint64_t v16;
  cppipc *v17;
  unint64_t v18;
  unint64_t v20;
  file_logger *v21;
  file_logger *started;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  const std::locale::facet *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  std::locale::__imp *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  turi::thread_pool *v45;
  turi::thread_pool *instance;
  turi::thread *v47;
  turi::thread_pool *tls_data;
  turi::thread_pool *v49;
  uint64_t v50;
  double v51;
  turi::thread *v52;
  unint64_t v53;
  uint64_t i;
  char *v55;
  char v56;
  int v57;
  BOOL v58;
  std::__shared_weak_count *v59;
  unint64_t *p_shared_owners;
  unint64_t v61;
  _QWORD *exception;
  _QWORD v63[11];
  void *__p;
  char *v65;
  void *v66[3];
  void *v67[3];
  std::locale::__imp *locale;
  std::__shared_weak_count *v69;
  BOOL v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75[4];
  std::locale v76;
  uint64_t v77;

  v77 = *MEMORY[0x24BDAC8D0];
  v73 = a4;
  v74 = a3;
  v72 = a5;
  v7 = a4 - a3;
  if (a4 < a3)
    turi::rolling_aggregate::rolling_apply(turi::sarray<turi::flexible_type> const&,std::shared_ptr<turi::group_aggregate_value>,long,long,unsigned long)::$_0::operator()();
  v13 = *(_QWORD *)a2;
  type = turi::sarray<turi::flexible_type>::get_type(a1);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 48))(v13, type) & 1) == 0)
  {
    v76.__locale_ = a2;
    turi::rolling_aggregate::rolling_apply(turi::sarray<turi::flexible_type> const&,std::shared_ptr<turi::group_aggregate_value>,long,long,unsigned long)::$_1::operator()((uint64_t)&v76);
  }
  v15 = *(_QWORD *)a2;
  v16 = turi::sarray<turi::flexible_type>::get_type(a1);
  v17 = (cppipc *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 112))(v15, v16);
  if (v7 >= 0)
    v18 = v7;
  else
    v18 = -v7;
  if (a4 > -1 && a3 < 0)
    v18 = v7;
  v20 = v18 + 1;
  v71 = v18 + 1;
  if (v18 >= 0xFFFFFFFF)
    turi::rolling_aggregate::rolling_apply(turi::sarray<turi::flexible_type> const&,std::shared_ptr<turi::group_aggregate_value>,long,long,unsigned long)::$_2::operator()();
  v70 = a5 != 0;
  if (v20 < a5)
  {
    if (a5 != -1)
    {
      v17 = (cppipc *)global_logger();
      if (*((int *)v17 + 169) <= 4)
      {
        if (cppipc::must_cancel(v17))
          log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
        v21 = (file_logger *)global_logger();
        started = file_logger::start_stream(v21, 4, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/rolling_aggregate.cpp", "rolling_apply", 59, 1);
        v23 = pthread_getspecific(*((_QWORD *)started + 74));
        if (v23 && *((_BYTE *)v23 + 280))
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23 + 2, (uint64_t)"Warning: min_observations (", 27);
        v24 = file_logger::operator<<<unsigned long>((uint64_t)started);
        v25 = pthread_getspecific(*(_QWORD *)(v24 + 592));
        if (v25 && *((_BYTE *)v25 + 280))
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25 + 2, (uint64_t)") larger than window size (", 27);
        v26 = file_logger::operator<<<unsigned long>(v24);
        v27 = pthread_getspecific(*(_QWORD *)(v26 + 592));
        if (v27 && *((_BYTE *)v27 + 280))
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27 + 2, (uint64_t)"). Continuing with min_observations=", 36);
        v28 = file_logger::operator<<<unsigned long>(v26);
        v29 = pthread_getspecific(*(_QWORD *)(v28 + 592));
        if (v29 && *((_BYTE *)v29 + 280))
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29 + 2, (uint64_t)".", 1);
        v17 = (cppipc *)pthread_getspecific(*(_QWORD *)(v28 + 592));
        if (v17 && *((_BYTE *)v17 + 280))
        {
          std::ios_base::getloc((const std::ios_base *)((char *)v17 + *(_QWORD *)(*((_QWORD *)v17 + 2) - 24) + 16));
          v30 = std::locale::use_facet(&v76, MEMORY[0x24BEDB350]);
          ((void (*)(const std::locale::facet *, uint64_t))v30->__vftable[2].~facet_0)(v30, 10);
          std::locale::~locale(&v76);
          std::ostream::put();
          std::ostream::flush();
          file_logger::stream_flush((file_logger *)v28);
          if (*(_DWORD *)(v28 + 600) == 7)
          {
            __print_back_trace();
            exception = __cxa_allocate_exception(8uLL);
            *exception = "LOG_FATAL encountered";
            __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
          }
          v20 = v71;
        }
      }
    }
    v72 = v20;
  }
  v31 = turi::thread::cpu_count(v17);
  turi::sarray<turi::flexible_type>::get_reader(a1, v31, (uint64_t *)&v76);
  locale = v76.__locale_;
  v32 = (std::__shared_weak_count *)operator new();
  v33 = v76.__locale_;
  v32->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D91E558;
  v32->__shared_owners_ = 0;
  v32->__shared_weak_owners_ = 0;
  v32[1].__vftable = (std::__shared_weak_count_vtbl *)v33;
  v69 = v32;
  _ZNSt3__115allocate_sharedB8ne180100IN4turi6sarrayINS1_13flexible_typeEEENS_9allocatorIS4_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(a6);
  turi::sarray<turi::flexible_type>::open_for_write(*a6, v31, 0);
  std::vector<std::pair<unsigned long,unsigned long>>::vector(v67, v31);
  std::vector<unsigned long>::vector(v66, v31);
  if (v31)
  {
    v34 = 0;
    v35 = 0;
    v36 = 0;
    do
    {
      *((_QWORD *)v66[0] + v35) = v36;
      v37 = v74;
      v38 = turi::sarray_reader<turi::flexible_type>::size((uint64_t)locale);
      if (((v37 + v36) & ~((v37 + v36) >> 63)) >= v38)
        v39 = v38;
      else
        v39 = (v37 + v36) & ~((v37 + v36) >> 63);
      v40 = (*(uint64_t (**)(std::locale::__imp *, uint64_t))(*(_QWORD *)locale + 24))(locale, v35);
      v41 = v73;
      v42 = turi::sarray_reader<turi::flexible_type>::size((uint64_t)locale);
      v36 += v40;
      v43 = (v36 + v41 - 1) & ~((v36 + v41 - 1) >> 63);
      if (v43 >= v42)
        v43 = v42;
      v44 = (uint64_t *)((char *)v67[0] + v34);
      *v44 = v39;
      v44[1] = v43;
      ++v35;
      v34 += 16;
    }
    while (v31 != v35);
  }
  LOBYTE(v76.__locale_) = 7;
  v45 = (turi::thread_pool *)std::vector<turi::flex_type_enum>::vector(&__p, v31, &v76);
  v63[0] = v67;
  v63[1] = &v71;
  v63[2] = a6;
  v63[3] = &locale;
  v63[4] = v66;
  v63[5] = &v74;
  v63[6] = &v73;
  v63[7] = &v70;
  v63[8] = &v72;
  v63[9] = a2;
  v63[10] = &__p;
  instance = (turi::thread_pool *)turi::thread_pool::get_instance(v45);
  v47 = (turi::thread *)turi::thread_pool::size(instance);
  tls_data = (turi::thread_pool *)turi::thread::get_tls_data(v47);
  if (*((_BYTE *)tls_data + 8) || (unint64_t)v47 <= 1)
  {
    if (v31)
    {
      for (i = 0; i != v31; ++i)
        turi::rolling_aggregate::rolling_apply(turi::sarray<turi::flexible_type> const&,std::shared_ptr<turi::group_aggregate_value>,long,long,unsigned long)::$_3::operator()((uint64_t)v63, i);
    }
  }
  else
  {
    v49 = (turi::thread_pool *)turi::thread_pool::get_instance(tls_data);
    turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)&v76, v49);
    v50 = 0;
    v51 = (double)v31 / (double)(unint64_t)v47;
    do
    {
      v52 = (turi::thread *)(v50 + 1);
      v53 = (unint64_t)(v51 * (double)(unint64_t)(v50 + 1) + 0.0);
      if ((turi::thread *)v50 == (turi::thread *)((char *)v47 - 1))
        v53 = v31;
      v75[2] = (unint64_t)(v51 * (double)(unint64_t)v50 + 0.0);
      v75[3] = v53;
      v75[0] = (uint64_t)boost::function0<void>::assign_to<void turi::parallel_for<turi::rolling_aggregate::rolling_apply(turi::sarray<turi::flexible_type> const&,std::shared_ptr<turi::group_aggregate_value>,long,long,unsigned long)::$_3>(unsigned long,unsigned long,turi::rolling_aggregate::rolling_apply(turi::sarray<turi::flexible_type> const&,std::shared_ptr<turi::group_aggregate_value>,long,long,unsigned long)::$_3 const&)::{lambda(void)#1}>(turi::rolling_aggregate::rolling_apply(turi::sarray<turi::flexible_type> const&,std::shared_ptr<turi::group_aggregate_value>,long,long,unsigned long)::$_3)::stored_vtable
             + 1;
      v75[1] = (uint64_t)v63;
      turi::parallel_task_queue::launch((uint64_t)&v76, (uint64_t)v75, v50);
      boost::function0<void>::~function0(v75);
      v50 = (uint64_t)v52;
    }
    while (v52 != v47);
    turi::parallel_task_queue::join((turi::parallel_task_queue *)&v76);
    turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)&v76);
  }
  v55 = (char *)__p;
  v56 = 7;
  while (v55 != v65)
  {
    v57 = *v55;
    v58 = v57 == 7 || v56 == 7;
    if (!v58 && v57 != v56)
      turi::rolling_aggregate::rolling_apply(turi::sarray<turi::flexible_type> const&,std::shared_ptr<turi::group_aggregate_value>,long,long,unsigned long)::$_4::operator()();
    if (v57 != 7)
      v56 = *v55;
    ++v55;
  }
  turi::sarray<turi::flexible_type>::set_type(*a6, v56);
  (*(void (**)(uint64_t))(*(_QWORD *)*a6 + 40))(*a6);
  if (__p)
  {
    v65 = (char *)__p;
    operator delete(__p);
  }
  if (v66[0])
  {
    v66[1] = v66[0];
    operator delete(v66[0]);
  }
  if (v67[0])
  {
    v67[1] = v67[0];
    operator delete(v67[0]);
  }
  v59 = v69;
  if (v69)
  {
    p_shared_owners = (unint64_t *)&v69->__shared_owners_;
    do
      v61 = __ldaxr(p_shared_owners);
    while (__stlxr(v61 - 1, p_shared_owners));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
}

void sub_218182324(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,std::locale a40)
{
  std::locale::~locale(&a40);
  _Unwind_Resume(a1);
}

void sub_218182594(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void **turi::sarray_reader_buffer<turi::flexible_type>::~sarray_reader_buffer(void **a1)
{
  void **v3;

  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 3));
  v3 = a1;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

void turi::rolling_aggregate::rolling_apply(turi::sarray<turi::flexible_type> const&,std::shared_ptr<turi::group_aggregate_value>,long,long,unsigned long)::$_3::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  unsigned int v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  void *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  std::__shared_weak_count *v38;
  uint64_t v39;
  unint64_t *p_shared_owners;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  void *v66;
  void *v67;
  unsigned int v68;
  unint64_t *v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  void *v73;
  unint64_t *v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t *v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t *v83;
  uint64_t *v84;
  std::__shared_weak_count *v85;
  uint64_t v86;
  unint64_t *v87;
  unint64_t v88;
  uint64_t *v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t *v94;
  unint64_t v95;
  BOOL v96;
  unint64_t *v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t *v102;
  unint64_t v103;
  BOOL v104;
  unint64_t *v105;
  unint64_t v106;
  BOOL v107;
  unint64_t *v108;
  unint64_t v109;
  BOOL v110;
  unint64_t *v111;
  unint64_t v112;
  BOOL v113;
  unint64_t *v114;
  unint64_t v115;
  BOOL v116;
  unint64_t *v117;
  unint64_t v118;
  uint64_t v119;
  unint64_t *v120;
  unint64_t v121;
  uint64_t v122;
  void *v123;
  void *v124;
  unsigned int v125;
  unint64_t *v126;
  unint64_t v127;
  uint64_t v128;
  void *v129;
  unint64_t *v130;
  unint64_t v131;
  unint64_t *v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t *v136;
  unint64_t v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t *v142;
  unint64_t v143;
  unint64_t v144;
  uint64_t v145;
  unint64_t *v146;
  unint64_t v147;
  unint64_t v148;
  uint64_t v149;
  void *v150;
  void *v151;
  unsigned int v152;
  unint64_t *v153;
  unint64_t v154;
  unint64_t v155;
  uint64_t v156;
  void *v157;
  unint64_t *v158;
  unint64_t v159;
  unint64_t v160;
  unint64_t *v161;
  unint64_t v162;
  unint64_t v163;
  uint64_t v164;
  std::__shared_weak_count *v165;
  unint64_t *v166;
  unint64_t v167;
  _QWORD *v168;
  uint64_t v169;
  _QWORD *v170;
  uint64_t v171;
  _QWORD *v172;
  uint64_t v173;
  uint64_t v174;
  _QWORD v175[2];
  uint64_t *v176[2];
  uint64_t v177;
  std::__shared_weak_count *v178;
  _QWORD v179[2];
  uint64_t *v180[2];
  uint64_t v181;
  std::__shared_weak_count *v182;
  void **v183[4];
  std::__shared_weak_count *v184;
  unint64_t v185;
  unint64_t v186;
  uint64_t v187[2];
  uint64_t v188;
  uint64_t v189;
  unint64_t v190;
  void **v191;
  _BYTE v192[13];
  _BYTE v193[13];
  _BYTE *v194;
  _BYTE v195[24];
  _BYTE *v196;
  _BYTE v197[24];
  _BYTE *v198;
  uint64_t v199;

  v199 = *MEMORY[0x24BDAC8D0];
  v4 = (uint64_t *)(**(_QWORD **)a1 + 16 * a2);
  v5 = *v4;
  v6 = v4[1];
  v7 = **(_QWORD **)(a1 + 8);
  *(_QWORD *)&v193[5] = 0x700000000000000;
  *(_QWORD *)v193 = 0;
  v190 = v7;
  boost::circular_buffer<turi::flexible_type,std::allocator<turi::flexible_type>>::initialize_buffer(v187, v7, v193);
  v188 = v187[0];
  v189 = v187[0];
  switch(v193[12])
  {
    case 2:
      v8 = *(unint64_t **)v193;
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        v11 = *(_QWORD *)v193;
        if (*(_QWORD *)v193)
        {
          if (*(char *)(*(_QWORD *)v193 + 31) < 0)
            operator delete(*(void **)(*(_QWORD *)v193 + 8));
          v12 = v11;
          v13 = 0x1012C404EF22A49;
          goto LABEL_42;
        }
      }
      break;
    case 3:
      v25 = *(unint64_t **)v193;
      do
      {
        v26 = __ldaxr(v25);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, v25));
      if (!v27)
      {
        v28 = *(_QWORD *)v193;
        if (*(_QWORD *)v193)
        {
          v29 = *(void **)(*(_QWORD *)v193 + 8);
          if (v29)
          {
            *(_QWORD *)(*(_QWORD *)v193 + 16) = v29;
            operator delete(v29);
          }
          v12 = v28;
          v13 = 0x1080C409938AC02;
          goto LABEL_42;
        }
      }
      break;
    case 4:
      v14 = *(unint64_t **)v193;
      do
      {
        v15 = __ldaxr(v14);
        v16 = v15 - 1;
      }
      while (__stlxr(v16, v14));
      if (!v16)
      {
        v17 = *(_QWORD *)v193;
        if (*(_QWORD *)v193)
        {
          v183[0] = (void **)(*(_QWORD *)v193 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v183);
          goto LABEL_35;
        }
      }
      break;
    case 5:
      v30 = *(unint64_t **)v193;
      do
      {
        v31 = __ldaxr(v30);
        v32 = v31 - 1;
      }
      while (__stlxr(v32, v30));
      if (!v32)
      {
        v17 = *(_QWORD *)v193;
        if (*(_QWORD *)v193)
        {
          v183[0] = (void **)(*(_QWORD *)v193 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v183);
LABEL_35:
          v12 = v17;
          v13 = 0x1020C405E66F15BLL;
          goto LABEL_42;
        }
      }
      break;
    case 8:
      v33 = *(unint64_t **)v193;
      do
      {
        v34 = __ldaxr(v33);
        v35 = v34 - 1;
      }
      while (__stlxr(v35, v33));
      if (!v35)
      {
        v36 = *(_QWORD *)v193;
        if (*(_QWORD *)v193)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)v193 + 16));
          v12 = v36;
          v24 = -235920773;
          goto LABEL_41;
        }
      }
      break;
    case 9:
      v18 = *(unint64_t **)v193;
      do
      {
        v19 = __ldaxr(v18);
        v20 = v19 - 1;
      }
      while (__stlxr(v20, v18));
      if (!v20)
      {
        v21 = *(_QWORD *)v193;
        if (*(_QWORD *)v193)
        {
          v22 = *(void **)(*(_QWORD *)v193 + 48);
          if (v22)
          {
            *(_QWORD *)(*(_QWORD *)v193 + 56) = v22;
            operator delete(v22);
          }
          v23 = *(void **)(v21 + 24);
          if (v23)
          {
            *(_QWORD *)(v21 + 32) = v23;
            operator delete(v23);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v21 + 8);
          v12 = v21;
          v24 = 2071181815;
LABEL_41:
          v13 = v24 | 0x1030C4000000000;
LABEL_42:
          MEMORY[0x219A19A08](v12, v13);
        }
      }
      break;
    default:
      break;
  }
  (*(void (**)(_BYTE *__return_ptr, _QWORD, uint64_t))(***(_QWORD ***)(a1 + 16) + 32))(v193, **(_QWORD **)(a1 + 16), a2);
  v37 = *(uint64_t **)(a1 + 24);
  v39 = *v37;
  v38 = (std::__shared_weak_count *)v37[1];
  v181 = v39;
  v182 = v38;
  if (v38)
  {
    p_shared_owners = (unint64_t *)&v38->__shared_owners_;
    do
      v41 = __ldxr(p_shared_owners);
    while (__stxr(v41 + 1, p_shared_owners));
  }
  turi::sarray_reader_buffer<turi::flexible_type>::sarray_reader_buffer((uint64_t)v183, &v181, v5, v6 + 1, 1024);
  v42 = v182;
  if (v182)
  {
    v43 = (unint64_t *)&v182->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  v45 = *(_QWORD *)(**(_QWORD **)(a1 + 32) + 8 * a2);
  v174 = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 24) + 24))(**(_QWORD **)(a1 + 24), a2);
  v46 = **(_QWORD **)(a1 + 40);
  v47 = **(_QWORD **)(a1 + 48);
  v48 = v47 + v45;
  if (v46 <= v47)
  {
    v49 = v46 + v45;
    if (v46 + v45 <= v48)
      v50 = v47 + v45;
    else
      v50 = v46 + v45;
    do
    {
      if (v49 < 0 || v186 >= v185)
      {
        *(_QWORD *)&v192[5] = 0x700000000000000;
        *(_QWORD *)v192 = 0;
        boost::circular_buffer<turi::flexible_type,std::allocator<turi::flexible_type>>::push_back_impl<turi::flexible_type&&>(v187, (uint64_t)v192);
        switch(v192[12])
        {
          case 2:
            v52 = *(unint64_t **)v192;
            do
            {
              v53 = __ldaxr(v52);
              v54 = v53 - 1;
            }
            while (__stlxr(v54, v52));
            if (!v54)
            {
              v55 = *(_QWORD *)v192;
              if (*(_QWORD *)v192)
              {
                if (*(char *)(*(_QWORD *)v192 + 31) < 0)
                  operator delete(*(void **)(*(_QWORD *)v192 + 8));
                v56 = v55;
                v57 = 0x1012C404EF22A49;
                goto LABEL_99;
              }
            }
            break;
          case 3:
            v69 = *(unint64_t **)v192;
            do
            {
              v70 = __ldaxr(v69);
              v71 = v70 - 1;
            }
            while (__stlxr(v71, v69));
            if (!v71)
            {
              v72 = *(_QWORD *)v192;
              if (*(_QWORD *)v192)
              {
                v73 = *(void **)(*(_QWORD *)v192 + 8);
                if (v73)
                {
                  *(_QWORD *)(*(_QWORD *)v192 + 16) = v73;
                  operator delete(v73);
                }
                v56 = v72;
                v57 = 0x1080C409938AC02;
                goto LABEL_99;
              }
            }
            break;
          case 4:
            v58 = *(unint64_t **)v192;
            do
            {
              v59 = __ldaxr(v58);
              v60 = v59 - 1;
            }
            while (__stlxr(v60, v58));
            if (!v60)
            {
              v61 = *(_QWORD *)v192;
              if (*(_QWORD *)v192)
              {
                v191 = (void **)(*(_QWORD *)v192 + 8);
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v191);
                goto LABEL_92;
              }
            }
            break;
          case 5:
            v74 = *(unint64_t **)v192;
            do
            {
              v75 = __ldaxr(v74);
              v76 = v75 - 1;
            }
            while (__stlxr(v76, v74));
            if (!v76)
            {
              v61 = *(_QWORD *)v192;
              if (*(_QWORD *)v192)
              {
                v191 = (void **)(*(_QWORD *)v192 + 8);
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v191);
LABEL_92:
                v56 = v61;
                v57 = 0x1020C405E66F15BLL;
                goto LABEL_99;
              }
            }
            break;
          case 8:
            v77 = *(unint64_t **)v192;
            do
            {
              v78 = __ldaxr(v77);
              v79 = v78 - 1;
            }
            while (__stlxr(v79, v77));
            if (!v79)
            {
              v80 = *(_QWORD *)v192;
              if (*(_QWORD *)v192)
              {
                boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)v192 + 16));
                v56 = v80;
                v68 = -235920773;
                goto LABEL_98;
              }
            }
            break;
          case 9:
            v62 = *(unint64_t **)v192;
            do
            {
              v63 = __ldaxr(v62);
              v64 = v63 - 1;
            }
            while (__stlxr(v64, v62));
            if (!v64)
            {
              v65 = *(_QWORD *)v192;
              if (*(_QWORD *)v192)
              {
                v66 = *(void **)(*(_QWORD *)v192 + 48);
                if (v66)
                {
                  *(_QWORD *)(*(_QWORD *)v192 + 56) = v66;
                  operator delete(v66);
                }
                v67 = *(void **)(v65 + 24);
                if (v67)
                {
                  *(_QWORD *)(v65 + 32) = v67;
                  operator delete(v67);
                }
                std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v65 + 8);
                v56 = v65;
                v68 = 2071181815;
LABEL_98:
                v57 = v68 | 0x1030C4000000000;
LABEL_99:
                MEMORY[0x219A19A08](v56, v57);
              }
            }
            break;
          default:
            break;
        }
      }
      else
      {
        v51 = turi::sarray_reader_buffer<turi::flexible_type>::next((uint64_t *)v183);
        boost::circular_buffer<turi::flexible_type,std::allocator<turi::flexible_type>>::push_back_impl<turi::flexible_type&&>(v187, v51);
      }
      v96 = v49++ == v50;
    }
    while (!v96);
  }
  v81 = v174 + v45;
  if (v45 < v174 + v45)
  {
    do
    {
      if (**(_BYTE **)(a1 + 56)
        && ((v82 = **(_QWORD **)(a1 + 64), v190) ? (v83 = (uint64_t *)v188) : (v83 = 0),
            v180[0] = v187,
            v180[1] = v83,
            v179[0] = v187,
            v179[1] = 0,
            (turi::rolling_aggregate::has_min_observations<boost::cb_details::iterator<boost::circular_buffer<turi::flexible_type,std::allocator<turi::flexible_type>>,boost::cb_details::nonconst_traits<boost::container::allocator_traits<std::allocator<turi::flexible_type>>>>>(v82, v180, (uint64_t)v179) & 1) == 0))
      {
        *(_QWORD *)&v192[5] = 0x700000000000000;
        *(_QWORD *)v192 = 0;
        if (!v196)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(_BYTE *, _BYTE *))(*(_QWORD *)v196 + 48))(v196, v192);
        switch(v192[12])
        {
          case 2:
            v97 = *(unint64_t **)v192;
            do
            {
              v98 = __ldaxr(v97);
              v96 = --v98 == 0;
            }
            while (__stlxr(v98, v97));
LABEL_131:
            if (v96)
            {
              v99 = *(_QWORD *)v192;
              if (*(_QWORD *)v192)
              {
                if (*(char *)(*(_QWORD *)v192 + 31) < 0)
                  operator delete(*(void **)(*(_QWORD *)v192 + 8));
                v100 = v99;
                v101 = 0x1012C404EF22A49;
                goto LABEL_190;
              }
            }
            break;
          case 3:
            v126 = *(unint64_t **)v192;
            do
            {
              v127 = __ldaxr(v126);
              v110 = --v127 == 0;
            }
            while (__stlxr(v127, v126));
LABEL_170:
            if (v110)
            {
              v128 = *(_QWORD *)v192;
              if (*(_QWORD *)v192)
              {
                v129 = *(void **)(*(_QWORD *)v192 + 8);
                if (v129)
                {
                  *(_QWORD *)(*(_QWORD *)v192 + 16) = v129;
                  operator delete(v129);
                }
                v100 = v128;
                v101 = 0x1080C409938AC02;
                goto LABEL_190;
              }
            }
            break;
          case 4:
            v117 = *(unint64_t **)v192;
            do
            {
              v118 = __ldaxr(v117);
              v104 = --v118 == 0;
            }
            while (__stlxr(v118, v117));
LABEL_154:
            if (v104)
            {
              v119 = *(_QWORD *)v192;
              if (*(_QWORD *)v192)
              {
                v191 = (void **)(*(_QWORD *)v192 + 8);
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v191);
                goto LABEL_182;
              }
            }
            break;
          case 5:
            v130 = *(unint64_t **)v192;
            do
            {
              v131 = __ldaxr(v130);
              v113 = --v131 == 0;
            }
            while (__stlxr(v131, v130));
LABEL_178:
            if (v113)
            {
              v119 = *(_QWORD *)v192;
              if (*(_QWORD *)v192)
              {
                v191 = (void **)(*(_QWORD *)v192 + 8);
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v191);
LABEL_182:
                v100 = v119;
                v101 = 0x1020C405E66F15BLL;
                goto LABEL_190;
              }
            }
            break;
          case 8:
            v132 = *(unint64_t **)v192;
            do
            {
              v133 = __ldaxr(v132);
              v116 = --v133 == 0;
            }
            while (__stlxr(v133, v132));
LABEL_185:
            if (v116)
            {
              v134 = *(_QWORD *)v192;
              if (*(_QWORD *)v192)
              {
                boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)v192 + 16));
                v100 = v134;
                v125 = -235920773;
                goto LABEL_189;
              }
            }
            break;
          case 9:
            v120 = *(unint64_t **)v192;
            do
            {
              v121 = __ldaxr(v120);
              v107 = --v121 == 0;
            }
            while (__stlxr(v121, v120));
LABEL_160:
            if (v107)
            {
              v122 = *(_QWORD *)v192;
              if (*(_QWORD *)v192)
              {
                v123 = *(void **)(*(_QWORD *)v192 + 48);
                if (v123)
                {
                  *(_QWORD *)(*(_QWORD *)v192 + 56) = v123;
                  operator delete(v123);
                }
                v124 = *(void **)(v122 + 24);
                if (v124)
                {
                  *(_QWORD *)(v122 + 32) = v124;
                  operator delete(v124);
                }
                std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v122 + 8);
                v100 = v122;
                v125 = 2071181815;
LABEL_189:
                v101 = v125 | 0x1030C4000000000;
LABEL_190:
                MEMORY[0x219A19A08](v100, v101);
              }
            }
            break;
          default:
            break;
        }
      }
      else
      {
        v84 = *(uint64_t **)(a1 + 72);
        v86 = *v84;
        v85 = (std::__shared_weak_count *)v84[1];
        v177 = v86;
        v178 = v85;
        if (v85)
        {
          v87 = (unint64_t *)&v85->__shared_owners_;
          do
            v88 = __ldxr(v87);
          while (__stxr(v88 + 1, v87));
        }
        if (v190)
          v89 = (uint64_t *)v188;
        else
          v89 = 0;
        v176[0] = v187;
        v176[1] = v89;
        v175[0] = v187;
        v175[1] = 0;
        turi::rolling_aggregate::full_window_aggregate<boost::cb_details::iterator<boost::circular_buffer<turi::flexible_type,std::allocator<turi::flexible_type>>,boost::cb_details::nonconst_traits<boost::container::allocator_traits<std::allocator<turi::flexible_type>>>>>(&v177, v176, (uint64_t)v175);
        v90 = v178;
        if (v178)
        {
          v91 = (unint64_t *)&v178->__shared_owners_;
          do
            v92 = __ldaxr(v91);
          while (__stlxr(v92 - 1, v91));
          if (!v92)
          {
            ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
            std::__shared_weak_count::__release_weak(v90);
          }
        }
        v93 = **(_QWORD **)(a1 + 80);
        if (*(_BYTE *)(v93 + a2) == 7 && v192[12] != 7)
          *(_BYTE *)(v93 + a2) = v192[12];
        if (!v194)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(_BYTE *, _BYTE *))(*(_QWORD *)v194 + 48))(v194, v192);
        switch(v192[12])
        {
          case 2:
            v94 = *(unint64_t **)v192;
            do
            {
              v95 = __ldaxr(v94);
              v96 = --v95 == 0;
            }
            while (__stlxr(v95, v94));
            goto LABEL_131;
          case 3:
            v108 = *(unint64_t **)v192;
            do
            {
              v109 = __ldaxr(v108);
              v110 = --v109 == 0;
            }
            while (__stlxr(v109, v108));
            goto LABEL_170;
          case 4:
            v102 = *(unint64_t **)v192;
            do
            {
              v103 = __ldaxr(v102);
              v104 = --v103 == 0;
            }
            while (__stlxr(v103, v102));
            goto LABEL_154;
          case 5:
            v111 = *(unint64_t **)v192;
            do
            {
              v112 = __ldaxr(v111);
              v113 = --v112 == 0;
            }
            while (__stlxr(v112, v111));
            goto LABEL_178;
          case 8:
            v114 = *(unint64_t **)v192;
            do
            {
              v115 = __ldaxr(v114);
              v116 = --v115 == 0;
            }
            while (__stlxr(v115, v114));
            goto LABEL_185;
          case 9:
            v105 = *(unint64_t **)v192;
            do
            {
              v106 = __ldaxr(v105);
              v107 = --v106 == 0;
            }
            while (__stlxr(v106, v105));
            goto LABEL_160;
          default:
            break;
        }
      }
      if (v48 < -1 || v186 >= v185)
      {
        *(_QWORD *)&v192[5] = 0x700000000000000;
        *(_QWORD *)v192 = 0;
        boost::circular_buffer<turi::flexible_type,std::allocator<turi::flexible_type>>::push_back_impl<turi::flexible_type&&>(v187, (uint64_t)v192);
        switch(v192[12])
        {
          case 2:
            v136 = *(unint64_t **)v192;
            do
            {
              v137 = __ldaxr(v136);
              v138 = v137 - 1;
            }
            while (__stlxr(v138, v136));
            if (!v138)
            {
              v139 = *(_QWORD *)v192;
              if (*(_QWORD *)v192)
              {
                if (*(char *)(*(_QWORD *)v192 + 31) < 0)
                  operator delete(*(void **)(*(_QWORD *)v192 + 8));
                v140 = v139;
                v141 = 0x1012C404EF22A49;
                goto LABEL_235;
              }
            }
            break;
          case 3:
            v153 = *(unint64_t **)v192;
            do
            {
              v154 = __ldaxr(v153);
              v155 = v154 - 1;
            }
            while (__stlxr(v155, v153));
            if (!v155)
            {
              v156 = *(_QWORD *)v192;
              if (*(_QWORD *)v192)
              {
                v157 = *(void **)(*(_QWORD *)v192 + 8);
                if (v157)
                {
                  *(_QWORD *)(*(_QWORD *)v192 + 16) = v157;
                  operator delete(v157);
                }
                v140 = v156;
                v141 = 0x1080C409938AC02;
                goto LABEL_235;
              }
            }
            break;
          case 4:
            v142 = *(unint64_t **)v192;
            do
            {
              v143 = __ldaxr(v142);
              v144 = v143 - 1;
            }
            while (__stlxr(v144, v142));
            if (!v144)
            {
              v145 = *(_QWORD *)v192;
              if (*(_QWORD *)v192)
              {
                v191 = (void **)(*(_QWORD *)v192 + 8);
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v191);
                goto LABEL_228;
              }
            }
            break;
          case 5:
            v158 = *(unint64_t **)v192;
            do
            {
              v159 = __ldaxr(v158);
              v160 = v159 - 1;
            }
            while (__stlxr(v160, v158));
            if (!v160)
            {
              v145 = *(_QWORD *)v192;
              if (*(_QWORD *)v192)
              {
                v191 = (void **)(*(_QWORD *)v192 + 8);
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v191);
LABEL_228:
                v140 = v145;
                v141 = 0x1020C405E66F15BLL;
                goto LABEL_235;
              }
            }
            break;
          case 8:
            v161 = *(unint64_t **)v192;
            do
            {
              v162 = __ldaxr(v161);
              v163 = v162 - 1;
            }
            while (__stlxr(v163, v161));
            if (!v163)
            {
              v164 = *(_QWORD *)v192;
              if (*(_QWORD *)v192)
              {
                boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)v192 + 16));
                v140 = v164;
                v152 = -235920773;
                goto LABEL_234;
              }
            }
            break;
          case 9:
            v146 = *(unint64_t **)v192;
            do
            {
              v147 = __ldaxr(v146);
              v148 = v147 - 1;
            }
            while (__stlxr(v148, v146));
            if (!v148)
            {
              v149 = *(_QWORD *)v192;
              if (*(_QWORD *)v192)
              {
                v150 = *(void **)(*(_QWORD *)v192 + 48);
                if (v150)
                {
                  *(_QWORD *)(*(_QWORD *)v192 + 56) = v150;
                  operator delete(v150);
                }
                v151 = *(void **)(v149 + 24);
                if (v151)
                {
                  *(_QWORD *)(v149 + 32) = v151;
                  operator delete(v151);
                }
                std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v149 + 8);
                v140 = v149;
                v152 = 2071181815;
LABEL_234:
                v141 = v152 | 0x1030C4000000000;
LABEL_235:
                MEMORY[0x219A19A08](v140, v141);
              }
            }
            break;
          default:
            break;
        }
      }
      else
      {
        v135 = turi::sarray_reader_buffer<turi::flexible_type>::next((uint64_t *)v183);
        boost::circular_buffer<turi::flexible_type,std::allocator<turi::flexible_type>>::push_back_impl<turi::flexible_type&&>(v187, v135);
      }
      ++v45;
      ++v48;
    }
    while (v45 != v81);
  }
  v165 = v184;
  if (v184)
  {
    v166 = (unint64_t *)&v184->__shared_owners_;
    do
      v167 = __ldaxr(v166);
    while (__stlxr(v167 - 1, v166));
    if (!v167)
    {
      ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
      std::__shared_weak_count::__release_weak(v165);
    }
  }
  *(_QWORD *)v192 = v183;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v192);
  v168 = v198;
  if (v198 == v197)
  {
    v169 = 4;
    v168 = v197;
  }
  else
  {
    if (!v198)
      goto LABEL_247;
    v169 = 5;
  }
  (*(void (**)(void))(*v168 + 8 * v169))();
LABEL_247:
  v170 = v196;
  if (v196 == v195)
  {
    v171 = 4;
    v170 = v195;
  }
  else
  {
    if (!v196)
      goto LABEL_252;
    v171 = 5;
  }
  (*(void (**)(void))(*v170 + 8 * v171))();
LABEL_252:
  v172 = v194;
  if (v194 == v193)
  {
    v173 = 4;
    v172 = v193;
    goto LABEL_256;
  }
  if (v194)
  {
    v173 = 5;
LABEL_256:
    (*(void (**)(void))(*v172 + 8 * v173))();
  }
  boost::circular_buffer<turi::flexible_type,std::allocator<turi::flexible_type>>::destroy(v187);
}

void sub_2181832C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  uint64_t v34;

  turi::sarray_reader_buffer<turi::flexible_type>::~sarray_reader_buffer(&a22);
  turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>::~sframe_function_output_iterator((_QWORD *)(v34 - 192));
  boost::circular_buffer<turi::flexible_type,std::allocator<turi::flexible_type>>::destroy(&a34);
  _Unwind_Resume(a1);
}

uint64_t turi::rolling_aggregate::has_min_observations<boost::cb_details::iterator<boost::circular_buffer<turi::flexible_type,std::allocator<turi::flexible_type>>,boost::cb_details::nonconst_traits<boost::container::allocator_traits<std::allocator<turi::flexible_type>>>>>(unint64_t a1, uint64_t **a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;

  v3 = a2[1];
  if (v3 == *(uint64_t **)(a3 + 8))
  {
    v5 = 0;
    v4 = 0;
    return a1 == -1 && v5 == v4;
  }
  else
  {
    v4 = 0;
    v5 = 0;
    while (1)
    {
      if (*((_BYTE *)v3 + 12) != 7)
      {
        ++v5;
        if (a1 != -1 && v5 >= a1)
          break;
      }
      v6 = *a2;
      v3 += 2;
      a2[1] = v3;
      if (v3 == (uint64_t *)v6[1])
      {
        v3 = (uint64_t *)*v6;
        a2[1] = (uint64_t *)*v6;
      }
      if (v3 == (uint64_t *)v6[3])
      {
        v3 = 0;
        a2[1] = 0;
      }
      ++v4;
      if (v3 == *(uint64_t **)(a3 + 8))
        return a1 == -1 && v5 == v4;
    }
    return 1;
  }
}

uint64_t turi::rolling_aggregate::full_window_aggregate<boost::cb_details::iterator<boost::circular_buffer<turi::flexible_type,std::allocator<turi::flexible_type>>,boost::cb_details::nonconst_traits<boost::container::allocator_traits<std::allocator<turi::flexible_type>>>>>(_QWORD *a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;

  v5 = (**(uint64_t (***)(_QWORD))*a1)(*a1);
  v6 = (uint64_t)a2[1];
  while (v6 != *(_QWORD *)(a3 + 8))
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
    v7 = *a2;
    v6 = (uint64_t)(a2[1] + 2);
    a2[1] = (uint64_t *)v6;
    if (v6 == v7[1])
    {
      v6 = *v7;
      a2[1] = (uint64_t *)*v7;
    }
    if (v6 == v7[3])
    {
      v6 = 0;
      a2[1] = 0;
    }
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
}

char *boost::circular_buffer<turi::flexible_type,std::allocator<turi::flexible_type>>::initialize_buffer(_QWORD *a1, unint64_t a2, char *a3)
{
  char *result;
  uint64_t i;
  uint64_t v8;
  BOOL v9;
  int v10;
  unint64_t *v12;
  unint64_t v13;

  result = (char *)boost::circular_buffer<turi::flexible_type,std::allocator<turi::flexible_type>>::allocate((uint64_t)a1, a2);
  *a1 = result;
  a1[1] = &result[16 * a2];
  for (i = a1[4]; i; --i)
  {
    *(_QWORD *)result = 0;
    *((_DWORD *)result + 2) = 0;
    result[12] = 0;
    if (result != a3)
    {
      v8 = *(_QWORD *)a3;
      *(_QWORD *)(result + 5) = *(_QWORD *)(a3 + 5);
      *(_QWORD *)result = v8;
      LODWORD(v8) = a3[12];
      result[12] = v8;
      v9 = v8 > 9;
      v10 = (1 << v8) & 0x33C;
      if (!v9 && v10 != 0)
      {
        v12 = *(unint64_t **)result;
        do
          v13 = __ldaxr(v12);
        while (__stlxr(v13 + 1, v12));
      }
    }
    result += 16;
  }
  return result;
}

void *boost::circular_buffer<turi::flexible_type,std::allocator<turi::flexible_type>>::allocate(uint64_t a1, unint64_t a2)
{
  std::logic_error v3;

  if (a2 >> 60)
  {
    std::logic_error::logic_error(&v3, "circular_buffer");
    v3.__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8B8] + 16);
    boost::throw_exception<std::length_error>(&v3);
  }
  if (a2)
    return operator new(16 * a2);
  else
    return 0;
}

void sub_21818397C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::logic_error a9)
{
  std::logic_error::~logic_error(&a9);
  _Unwind_Resume(a1);
}

void boost::throw_exception<std::length_error>(const std::logic_error *a1)
{
  void *exception;
  std::logic_error v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  exception = __cxa_allocate_exception(0x40uLL);
  std::logic_error::logic_error(&v3, a1);
  v5 = 0;
  v6 = 0;
  v7 = 0;
  v8 = -1;
  v3.__vftable = (std::logic_error_vtbl *)&unk_24D930EF0;
  v4 = &unk_24D930F18;
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::length_error>>::clone_impl((uint64_t)exception, (uint64_t)&v3);
}

void sub_218183A18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::logic_error a10, void *a11, uint64_t a12)
{
  void *v12;
  int v13;

  a11 = &unk_24D918C48;
  if (a12 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a12 + 32))(a12))
    a12 = 0;
  std::logic_error::~logic_error(&a10);
  if (v13)
    __cxa_free_exception(v12);
  _Unwind_Resume(a1);
}

void boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::length_error>>::~clone_impl(uint64_t a1)
{
  *(_QWORD *)(a1 + 16) = &unk_24D918C48;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 24));
  std::logic_error::~logic_error((std::logic_error *)a1);
}

{
  *(_QWORD *)(a1 + 16) = &unk_24D918C48;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 24));
  std::logic_error::~logic_error((std::logic_error *)a1);
  JUMPOUT(0x219A19A08);
}

uint64_t boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::length_error>>::clone_impl(uint64_t a1, uint64_t a2)
{
  std::logic_error *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;

  *(_QWORD *)(a1 + 56) = &unk_24D918BA8;
  v4 = std::logic_error::logic_error((std::logic_error *)a1, (const std::logic_error *)a2);
  v4->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8B8] + 16);
  v4[1].__vftable = (std::logic_error_vtbl *)&unk_24D918C48;
  v5 = (uint64_t)&v4[1];
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
  v7 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v7;
  *(_QWORD *)a1 = &unk_24D930E50;
  *(_QWORD *)(a1 + 16) = &unk_24D930E88;
  *(_QWORD *)(a1 + 56) = &unk_24D930EC0;
  boost::exception_detail::copy_boost_exception(v5, a2 + 16);
  return a1;
}

{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)(a1 + 56) = &unk_24D918BA8;
  std::logic_error::logic_error((std::logic_error *)a1, (const std::logic_error *)a2)->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8B8] + 16);
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = &unk_24D918C48;
  *(_QWORD *)(a1 + 24) = v4;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v5;
  *(_QWORD *)a1 = &unk_24D930E50;
  *(_QWORD *)(a1 + 16) = &unk_24D930E88;
  *(_QWORD *)(a1 + 56) = &unk_24D930EC0;
  return a1;
}

void sub_218183B68(_Unwind_Exception *a1)
{
  std::logic_error *v1;

  std::logic_error::~logic_error(v1);
  _Unwind_Resume(a1);
}

char *boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::length_error>>::clone(uint64_t a1)
{
  _QWORD *v2;

  v2 = (_QWORD *)operator new();
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::length_error>>::clone_impl((uint64_t)v2, a1);
  return (char *)v2 + *(_QWORD *)(*v2 - 24);
}

void sub_218183C2C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10F1C40311038C2);
  _Unwind_Resume(a1);
}

void boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::length_error>>::rethrow(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x40uLL);
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::length_error>>::clone_impl((uint64_t)exception, a1);
}

void sub_218183C8C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::length_error>>::~clone_impl(_QWORD *a1)
{
  std::logic_error *v1;

  v1 = (std::logic_error *)(a1 - 2);
  *a1 = &unk_24D918C48;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  std::logic_error::~logic_error(v1);
}

void `non-virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::length_error>>::~clone_impl(uint64_t a1)
{
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::length_error>>::~clone_impl(a1 - 16);
}

char *`virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::length_error>>::clone(_QWORD *a1)
{
  return boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::length_error>>::clone((uint64_t)a1 + *(_QWORD *)(*a1 - 24));
}

void `virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::length_error>>::rethrow(_QWORD *a1)
{
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::length_error>>::rethrow((uint64_t)a1 + *(_QWORD *)(*a1 - 32));
}

void `virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::length_error>>::~clone_impl(_QWORD *a1)
{
  char *v1;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 40);
  *((_QWORD *)v1 + 2) = &unk_24D918C48;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)v1 + 3);
  std::logic_error::~logic_error((std::logic_error *)v1);
}

{
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::length_error>>::~clone_impl((uint64_t)a1 + *(_QWORD *)(*a1 - 40));
}

void boost::exception_detail::error_info_injector<std::length_error>::~error_info_injector(uint64_t a1)
{
  *(_QWORD *)(a1 + 16) = &unk_24D918C48;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 24));
  std::logic_error::~logic_error((std::logic_error *)a1);
  JUMPOUT(0x219A19A08);
}

void `non-virtual thunk to'boost::exception_detail::error_info_injector<std::length_error>::~error_info_injector(uint64_t a1)
{
  boost::exception_detail::error_info_injector<std::length_error>::~error_info_injector(a1 - 16);
}

void sub_218183E3C(_Unwind_Exception *a1)
{
  std::logic_error *v1;

  std::logic_error::~logic_error(v1);
  _Unwind_Resume(a1);
}

void boost::circular_buffer<turi::flexible_type,std::allocator<turi::flexible_type>>::push_back_impl<turi::flexible_type&&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = a1[1];
  if (a1[4] == (v3 - *a1) >> 4)
  {
    if (v3 != *a1)
    {
      boost::circular_buffer<turi::flexible_type,std::allocator<turi::flexible_type>>::replace((uint64_t)a1, a1[3], (uint64_t *)a2);
      v4 = a1[3] + 16;
      a1[3] = v4;
      if (v4 == a1[1])
      {
        v4 = *a1;
        a1[3] = *a1;
      }
      a1[2] = v4;
    }
  }
  else
  {
    v5 = a1[3];
    *(_QWORD *)v5 = 0;
    *(_DWORD *)(v5 + 8) = 0;
    *(_BYTE *)(v5 + 12) = 0;
    v6 = *(_QWORD *)a2;
    *(_QWORD *)(v5 + 5) = *(_QWORD *)(a2 + 5);
    *(_QWORD *)v5 = v6;
    *(_BYTE *)(v5 + 12) = *(_BYTE *)(a2 + 12);
    *(_BYTE *)(a2 + 12) = 0;
    v7 = a1[3] + 16;
    a1[3] = v7;
    if (v7 == a1[1])
      a1[3] = *a1;
    ++a1[4];
  }
}

void boost::circular_buffer<turi::flexible_type,std::allocator<turi::flexible_type>>::replace(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  void **v3;
  void **v4;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  void *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  unsigned int v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t *v33;
  void *v34;
  void *v35;
  uint64_t v36;
  void **v37[7];

  if (a3 != (uint64_t *)a2)
  {
    v37[5] = v3;
    v37[6] = v4;
    switch(*(_BYTE *)(a2 + 12))
    {
      case 2:
        v7 = *(unint64_t **)a2;
        do
        {
          v8 = __ldaxr(v7);
          v9 = v8 - 1;
        }
        while (__stlxr(v9, v7));
        if (!v9)
        {
          v10 = *(unint64_t **)a2;
          if (!*(_QWORD *)a2)
            goto LABEL_44;
          if (*((char *)v10 + 31) < 0)
            operator delete((void *)v10[1]);
          v11 = v10;
          v12 = 0x1012C404EF22A49;
          goto LABEL_43;
        }
        break;
      case 3:
        v13 = *(unint64_t **)a2;
        do
        {
          v14 = __ldaxr(v13);
          v15 = v14 - 1;
        }
        while (__stlxr(v15, v13));
        if (!v15)
        {
          v16 = *(unint64_t **)a2;
          if (!*(_QWORD *)a2)
            goto LABEL_44;
          v17 = (void *)v16[1];
          if (v17)
          {
            v16[2] = (unint64_t)v17;
            operator delete(v17);
          }
          v11 = v16;
          v12 = 0x1080C409938AC02;
          goto LABEL_43;
        }
        break;
      case 4:
        v18 = *(unint64_t **)a2;
        do
        {
          v19 = __ldaxr(v18);
          v20 = v19 - 1;
        }
        while (__stlxr(v20, v18));
        if (!v20)
        {
          v21 = *(unint64_t **)a2;
          if (!*(_QWORD *)a2)
            goto LABEL_44;
          v37[0] = (void **)(v21 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v37);
          goto LABEL_27;
        }
        break;
      case 5:
        v22 = *(unint64_t **)a2;
        do
        {
          v23 = __ldaxr(v22);
          v24 = v23 - 1;
        }
        while (__stlxr(v24, v22));
        if (!v24)
        {
          v21 = *(unint64_t **)a2;
          if (!*(_QWORD *)a2)
            goto LABEL_44;
          v37[0] = (void **)(v21 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v37);
LABEL_27:
          v11 = v21;
          v12 = 0x1020C405E66F15BLL;
          goto LABEL_43;
        }
        break;
      case 8:
        v25 = *(unint64_t **)a2;
        do
        {
          v26 = __ldaxr(v25);
          v27 = v26 - 1;
        }
        while (__stlxr(v27, v25));
        if (!v27)
        {
          v28 = *(unint64_t **)a2;
          if (!*(_QWORD *)a2)
            goto LABEL_44;
          boost::detail::shared_count::~shared_count((unsigned int **)v28 + 2);
          v11 = v28;
          v29 = -235920773;
          goto LABEL_42;
        }
        break;
      case 9:
        v30 = *(unint64_t **)a2;
        do
        {
          v31 = __ldaxr(v30);
          v32 = v31 - 1;
        }
        while (__stlxr(v32, v30));
        if (!v32)
        {
          v33 = *(unint64_t **)a2;
          if (*(_QWORD *)a2)
          {
            v34 = (void *)v33[6];
            if (v34)
            {
              v33[7] = (unint64_t)v34;
              operator delete(v34);
            }
            v35 = (void *)v33[3];
            if (v35)
            {
              v33[4] = (unint64_t)v35;
              operator delete(v35);
            }
            std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v33 + 1));
            v11 = v33;
            v29 = 2071181815;
LABEL_42:
            v12 = v29 | 0x1030C4000000000;
LABEL_43:
            MEMORY[0x219A19A08](v11, v12);
          }
LABEL_44:
          *(_QWORD *)a2 = 0;
        }
        break;
      default:
        break;
    }
    v36 = *a3;
    *(_QWORD *)(a2 + 5) = *(uint64_t *)((char *)a3 + 5);
    *(_QWORD *)a2 = v36;
    *(_BYTE *)(a2 + 12) = *((_BYTE *)a3 + 12);
    *((_BYTE *)a3 + 12) = 0;
  }
}

void boost::circular_buffer<turi::flexible_type,std::allocator<turi::flexible_type>>::destroy(uint64_t *a1)
{
  boost::circular_buffer<turi::flexible_type,std::allocator<turi::flexible_type>>::destroy_content(a1);
  if (*a1)
    operator delete((void *)*a1);
}

void boost::circular_buffer<turi::flexible_type,std::allocator<turi::flexible_type>>::destroy_content(uint64_t *a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (a1[4])
  {
    v2 = 0;
    v3 = (uint64_t)(a1 + 5);
    v4 = a1[2];
    do
    {
      std::allocator<turi::flexible_type>::destroy[abi:ne180100](v3, v4);
      v5 = a1[1];
      v4 = a1[2] + 16;
      a1[2] = v4;
      if (v4 == v5)
      {
        v4 = *a1;
        a1[2] = *a1;
      }
      ++v2;
    }
    while (v2 < a1[4]);
  }
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<turi::rolling_aggregate::rolling_apply(turi::sarray<turi::flexible_type> const&,std::shared_ptr<turi::group_aggregate_value>,long,long,unsigned long)::$_3>(unsigned long,unsigned long,turi::rolling_aggregate::rolling_apply(turi::sarray<turi::flexible_type> const&,std::shared_ptr<turi::group_aggregate_value>,long,long,unsigned long)::$_3 const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v4;
  __int128 v5;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == ((unint64_t)"ZN4turi12parallel_forIZNS_17rolling_aggregate13rolling_applyERKNS_6sarrayINS_13f"
                                        "lexible_typeEEENSt3__110shared_ptrINS_21group_aggregate_valueEEEllmE3$_3EEvmmRKT_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)
        || (result = strcmp((const char *)result, (const char *)((unint64_t)"ZN4turi12parallel_forIZNS_17rolling_aggregate13rolling_applyERKNS_6sarrayINS_13flexible_typeEEENSt3__110shared_ptrINS_21group_aggregate_valueEEEllmE3$_3EEvmmRKT_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)), !(_DWORD)result))
      {
        *(_QWORD *)a2 = v4;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
    }
  }
  else
  {
    v5 = *(_OWORD *)result;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

void boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<turi::rolling_aggregate::rolling_apply(turi::sarray<turi::flexible_type> const&,std::shared_ptr<turi::group_aggregate_value>,long,long,unsigned long)::$_3>(unsigned long,unsigned long,turi::rolling_aggregate::rolling_apply(turi::sarray<turi::flexible_type> const&,std::shared_ptr<turi::group_aggregate_value>,long,long,unsigned long)::$_3 const&)::{lambda(void)#1},void>::invoke(uint64_t *a1)
{
  unint64_t i;

  for (i = a1[1]; i < a1[2]; ++i)
    turi::rolling_aggregate::rolling_apply(turi::sarray<turi::flexible_type> const&,std::shared_ptr<turi::group_aggregate_value>,long,long,unsigned long)::$_3::operator()(*a1, i);
}

std::string *OUTLINED_FUNCTION_33(uint64_t a1, std::string *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return std::to_string((std::string *)&a10, 0xFFFFFFFF);
}

void __cxx_global_var_init_8_2()
{
  int v0;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, "Mutex create error %d", v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_rolling_aggregate_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

uint64_t turi::index_file_information::save(turi::index_file_information *this, turi::oarchive *a2)
{
  unint64_t v4;
  char *v5;
  unint64_t v6;
  char *v7;
  unint64_t v8;
  char *v9;
  size_t v11;
  char **v12;
  size_t v13;
  BOOL v14;
  std::vector<char>::size_type v15;
  size_t v16;
  char **v17;
  size_t v18;
  BOOL v19;
  std::vector<char>::size_type v20;
  size_t v21;
  char **v22;
  size_t v23;
  BOOL v24;
  std::vector<char>::size_type v25;

  turi::archive_detail::serialize_impl<turi::oarchive,std::string,false,void>::exec((uint64_t)a2, (const void **)this);
  if (*(_QWORD *)a2)
  {
    std::ostream::write();
  }
  else
  {
    v4 = *((_QWORD *)a2 + 5);
    if (*((_QWORD *)a2 + 4) + 4 > v4)
    {
      v11 = 2 * v4 + 8;
      *((_QWORD *)a2 + 5) = v11;
      v12 = (char **)*((_QWORD *)a2 + 2);
      if (v12)
      {
        v5 = *v12;
        v13 = v12[1] - *v12;
        v14 = v11 >= v13;
        v15 = v11 - v13;
        if (v15 != 0 && v14)
        {
          std::vector<char>::__append(*((std::vector<char> **)a2 + 2), v15);
          v5 = (char *)**((_QWORD **)a2 + 2);
        }
        else if (!v14)
        {
          v12[1] = &v5[v11];
        }
      }
      else
      {
        v5 = (char *)malloc_type_realloc(*((void **)a2 + 3), v11, 0xF6EA6B1uLL);
      }
      *((_QWORD *)a2 + 3) = v5;
    }
    else
    {
      v5 = (char *)*((_QWORD *)a2 + 3);
    }
    *(_DWORD *)&v5[*((_QWORD *)a2 + 4)] = *((_DWORD *)this + 6);
    *((_QWORD *)a2 + 4) += 4;
  }
  if (*(_QWORD *)a2)
  {
    std::ostream::write();
  }
  else
  {
    v6 = *((_QWORD *)a2 + 5);
    if (*((_QWORD *)a2 + 4) + 8 > v6)
    {
      v16 = 2 * v6 + 16;
      *((_QWORD *)a2 + 5) = v16;
      v17 = (char **)*((_QWORD *)a2 + 2);
      if (v17)
      {
        v7 = *v17;
        v18 = v17[1] - *v17;
        v19 = v16 >= v18;
        v20 = v16 - v18;
        if (v20 != 0 && v19)
        {
          std::vector<char>::__append(*((std::vector<char> **)a2 + 2), v20);
          v7 = (char *)**((_QWORD **)a2 + 2);
        }
        else if (!v19)
        {
          v17[1] = &v7[v16];
        }
      }
      else
      {
        v7 = (char *)malloc_type_realloc(*((void **)a2 + 3), v16, 0xF6EA6B1uLL);
      }
      *((_QWORD *)a2 + 3) = v7;
    }
    else
    {
      v7 = (char *)*((_QWORD *)a2 + 3);
    }
    *(_QWORD *)&v7[*((_QWORD *)a2 + 4)] = *((_QWORD *)this + 4);
    *((_QWORD *)a2 + 4) += 8;
  }
  if (*(_QWORD *)a2)
  {
    std::ostream::write();
  }
  else
  {
    v8 = *((_QWORD *)a2 + 5);
    if (*((_QWORD *)a2 + 4) + 8 > v8)
    {
      v21 = 2 * v8 + 16;
      *((_QWORD *)a2 + 5) = v21;
      v22 = (char **)*((_QWORD *)a2 + 2);
      if (v22)
      {
        v9 = *v22;
        v23 = v22[1] - *v22;
        v24 = v21 >= v23;
        v25 = v21 - v23;
        if (v25 != 0 && v24)
        {
          std::vector<char>::__append(*((std::vector<char> **)a2 + 2), v25);
          v9 = (char *)**((_QWORD **)a2 + 2);
        }
        else if (!v24)
        {
          v22[1] = &v9[v21];
        }
      }
      else
      {
        v9 = (char *)malloc_type_realloc(*((void **)a2 + 3), v21, 0xF6EA6B1uLL);
      }
      *((_QWORD *)a2 + 3) = v9;
    }
    else
    {
      v9 = (char *)*((_QWORD *)a2 + 3);
    }
    *(_QWORD *)&v9[*((_QWORD *)a2 + 4)] = *((_QWORD *)this + 5);
    *((_QWORD *)a2 + 4) += 8;
  }
  turi::archive_detail::serialize_impl<turi::oarchive,std::string,false,void>::exec((uint64_t)a2, (const void **)this + 6);
  turi::archive_detail::vector_serialize_impl<turi::oarchive,double,true>::exec((uint64_t)a2, (const void **)this + 9);
  turi::archive_detail::vector_serialize_impl<turi::oarchive,std::string,false>::exec((uint64_t)a2, (uint64_t *)this + 12);
  return turi::serialize_iterator<turi::oarchive,std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>((uint64_t)a2, *((const void ***)this + 15), (const void **)this + 16, *((_QWORD *)this + 17));
}

void turi::read_index_file(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  int *v4;
  file_logger *v5;
  file_logger *started;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  const std::locale::facet *v12;
  const turi::index_file_information *v13;
  _QWORD *exception;
  std::string v15;
  __n128 __p;
  char v17;
  std::string __str;
  void *v19;
  char v20;
  uint64_t v21;
  turi::index_file_information *v22[3];
  std::string v23;
  std::string v24;
  unint64_t v25;
  std::locale v26;

  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&v23, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    v23 = *(std::string *)a1;
  turi::parse_v2_segment_filename((uint64_t)&v23, &v24);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__str, v24.__r_.__value_.__l.__data_, v24.__r_.__value_.__l.__size_);
  else
    __str = v24;
  turi::read_array_group_index_file(&__str, (uint64_t)&v19);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v4 = (int *)global_logger();
  if (v4[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v4))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray_index_file.cpp", "read_index_file", 37, 1);
    v7 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v7 && *((_BYTE *)v7 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7 + 2, (uint64_t)"Reading index file: ", 20);
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v15, v24.__r_.__value_.__l.__data_, v24.__r_.__value_.__l.__size_);
    else
      v15 = v24;
    turi::sanitize_url((__n128 *)&v15, &__p);
    v8 = file_logger::operator<<<std::string>((uint64_t)started, (uint64_t)&__p);
    v9 = pthread_getspecific(*(_QWORD *)(v8 + 592));
    if (v9 && *((_BYTE *)v9 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9 + 2, (uint64_t)" column ", 8);
    v10 = file_logger::operator<<<unsigned long>(v8);
    v11 = pthread_getspecific(*(_QWORD *)(v10 + 592));
    if (v11)
    {
      if (*((_BYTE *)v11 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(_QWORD *)(v11[2] - 24) + 16));
        v12 = std::locale::use_facet(&v26, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
        std::locale::~locale(&v26);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush((file_logger *)v10);
        if (*(_DWORD *)(v10 + 600) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
    if (v17 < 0)
      operator delete((void *)__p.n128_u64[0]);
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v15.__r_.__value_.__l.__data_);
  }
  if (v25 == -1)
  {
    v13 = v22[0];
  }
  else
  {
    if (v25 >= 0x8E38E38E38E38E39 * ((v22[1] - v22[0]) >> 4))
    {
      v26.__locale_ = (std::locale::__imp *)a1;
      turi::read_index_file(std::string)::$_0::operator()();
    }
    v13 = (turi::index_file_information *)((char *)v22[0] + 144 * v25);
  }
  turi::index_file_information::index_file_information(a2, v13);
  v26.__locale_ = (std::locale::__imp *)v22;
  std::vector<turi::index_file_information>::__destroy_vector::operator()[abi:ne180100]((void ***)&v26);
  v26.__locale_ = (std::locale::__imp *)&v21;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v26);
  if (v20 < 0)
    operator delete(v19);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
}

void sub_218184948(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  uint64_t v27;

  if (*(char *)(v27 - 65) < 0)
    operator delete(*(void **)(v27 - 88));
  _Unwind_Resume(exception_object);
}

void turi::parse_v2_segment_filename(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v4;
  std::string::size_type v5;
  std::string::size_type v6;
  std::string *v7;
  int *v8;
  std::string::size_type size;
  std::string *v10;
  std::string v11;
  std::string v12;
  char *__endptr;
  char v14;

  MEMORY[0x219A19828](&v11);
  LODWORD(v12.__r_.__value_.__l.__data_) = 0x4000;
  std::locale::locale((std::locale *)&v12.__r_.__value_.__r.__words[1], (const std::locale *)&v11);
  boost::algorithm::trim_if<std::string,boost::algorithm::detail::is_classifiedF>((std::string *)a1, (std::locale *)&v12);
  std::locale::~locale((std::locale *)&v12.__r_.__value_.__r.__words[1]);
  std::locale::~locale((std::locale *)&v11);
  v4 = -1;
  v5 = std::string::rfind((const std::string *)a1, 58, 0xFFFFFFFFFFFFFFFFLL);
  if (v5 == -1)
    goto LABEL_12;
  v6 = v5;
  __endptr = 0;
  std::string::basic_string(&v12, (const std::string *)a1, v5 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v11);
  *__error() = 0;
  if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v7 = &v12;
  else
    v7 = (std::string *)v12.__r_.__value_.__r.__words[0];
  v4 = strtol((const char *)v7, &__endptr, 10);
  v8 = __error();
  size = HIBYTE(v12.__r_.__value_.__r.__words[2]);
  if (*v8 == 34
    || ((v10 = (std::string *)v12.__r_.__value_.__r.__words[0],
         (v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      ? (std::string *)(size = v12.__r_.__value_.__l.__size_)
      : (v10 = &v12),
        __endptr != (char *)v10 + size))
  {
    v4 = -1;
    if ((*((_BYTE *)&v12.__r_.__value_.__s + 23) & 0x80) == 0)
      goto LABEL_12;
    goto LABEL_11;
  }
  std::string::basic_string(&v11, (const std::string *)a1, 0, v6, (std::allocator<char> *)&v14);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  *(std::string *)a1 = v11;
  if ((*((_BYTE *)&v12.__r_.__value_.__s + 23) & 0x80) != 0)
LABEL_11:
    operator delete(v12.__r_.__value_.__l.__data_);
LABEL_12:
  if (*(char *)(a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 16);
  }
  a2[1].__r_.__value_.__r.__words[0] = v4;
}

void sub_218184B7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t turi::read_array_group_index_file@<X0>(std::string *__str@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  std::string *p_p;
  uint64_t child;
  void *v8;
  std::string *v9;
  uint64_t v10;
  void *v11;
  __int128 *v12;
  __int128 *v13;
  char v14;
  const std::string::value_type *v15;
  uint64_t v16;
  const std::string::value_type *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v22;
  const std::string::value_type *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  std::string *v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  __int128 *v37;
  __int128 *v38;
  __int128 v39;
  uint64_t v40;
  size_t v41;
  std::string *v42;
  const std::string::value_type *v43;
  std::string *v44;
  std::string::size_type size;
  std::string *v46;
  std::string::size_type v47;
  char v48;
  size_t v49;
  std::string *v50;
  std::string *v51;
  std::string *v52;
  std::string::size_type v53;
  std::string *v54;
  std::string::size_type v55;
  char v56;
  std::string *v57;
  std::string *v58;
  char v59;
  char v60;
  std::string::size_type *v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v69;
  uint64_t v70;
  std::string *v71;
  std::vector<std::string>::size_type *v72;
  int *v73;
  std::vector<std::string> *v74;
  turi::group_index_file_information *v75;
  void *v76[2];
  char v77;
  void *v78[2];
  char v79;
  void *v80;
  uint64_t v81;
  char v82;
  std::string v83;
  uint64_t v84;
  std::string *v85;
  std::string v86;
  std::string v87;
  uint64_t v88;
  std::string v89;
  std::string v90;
  std::string v91;
  std::string v92;
  void *v93[2];
  char v94;
  void *v95[4];
  std::string v96;
  std::string v97;
  std::string __p;
  int v99;
  unint64_t v100;
  _QWORD v101[4];
  __int128 v102;
  __int128 v103;
  __int128 v104;
  std::string v105[3];
  std::string v106[8];
  void *v107;
  char v108;
  void *v109;
  std::string v110;
  char v111;
  uint64_t v112;

  v112 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_OWORD *)(a2 + 40) = 0u;
  v74 = (std::vector<std::string> *)(a2 + 40);
  *(_OWORD *)(a2 + 56) = 0u;
  *(_OWORD *)(a2 + 72) = 0u;
  std::string::operator=((std::string *)a2, __str);
  v71 = __str;
  if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v96, __str->__r_.__value_.__l.__data_, __str->__r_.__value_.__l.__size_);
  else
    v96 = *__str;
  v75 = (turi::group_index_file_information *)a2;
  turi::general_ifstream::general_ifstream(v106, (uint64_t)&v96);
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v96.__r_.__value_.__l.__data_);
  if ((v106[1].__r_.__value_.__s.__data_[*(_QWORD *)(v106[0].__r_.__value_.__r.__words[0] - 24) + 8] & 5) != 0)
  {
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)__str;
    turi::read_array_group_index_file(std::string)::$_0::operator()();
  }
  memset(v95, 0, 24);
  v4 = (_QWORD *)operator new();
  v5 = operator new(0x60uLL);
  v4[1] = v5;
  v5[7] = 0;
  v5[8] = v5 + 7;
  v5[9] = v5 + 7;
  v5[10] = v5 + 10;
  v5[11] = v5 + 10;
  v4[3] = 0;
  v95[3] = v4;
  boost::property_tree::json_parser::read_json<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>(v106, (__int128 *)v95);
  std::string::basic_string[abi:ne180100]<0>(&__p, "sarray.version");
  LOBYTE(v99) = 46;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  v100 = (unint64_t)p_p;
  child = boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::get_child((uint64_t)v95, (uint64_t *)&__p);
  boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::get_value<std::string,boost::property_tree::id_translator<std::string>>(child, &v83);
  if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
  {
    v8 = (void *)v83.__r_.__value_.__r.__words[0];
    *(_DWORD *)(a2 + 24) = atoi(v83.__r_.__value_.__l.__data_);
    v73 = (int *)(a2 + 24);
    operator delete(v8);
  }
  else
  {
    *(_DWORD *)(a2 + 24) = atoi((const char *)&v83);
    v73 = (int *)(a2 + 24);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (*v73 != 2)
    turi::read_array_group_index_file(std::string)::$_2::operator()();
  std::string::basic_string[abi:ne180100]<0>(&__p, "sarray.num_segments");
  LOBYTE(v99) = 46;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v9 = &__p;
  else
    v9 = (std::string *)__p.__r_.__value_.__r.__words[0];
  v100 = (unint64_t)v9;
  v10 = boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::get_child((uint64_t)v95, (uint64_t *)&__p);
  boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::get_value<std::string,boost::property_tree::id_translator<std::string>>(v10, &v83);
  if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
  {
    v11 = (void *)v83.__r_.__value_.__r.__words[0];
    *(_QWORD *)(a2 + 32) = atol(v83.__r_.__value_.__l.__data_);
    v72 = (std::vector<std::string>::size_type *)(a2 + 32);
    operator delete(v11);
  }
  else
  {
    *(_QWORD *)(a2 + 32) = atol((const char *)&v83);
    v72 = (std::vector<std::string>::size_type *)(a2 + 32);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(v93, "segment_files");
  turi::ini::read_sequence_section<std::string>((uint64_t)v95, (uint64_t)v93, *v72, (std::vector<std::string> *)&__p);
  std::vector<std::string>::__vdeallocate(v74);
  *(std::string *)(a2 + 40) = __p;
  memset(&__p, 0, sizeof(__p));
  v83.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v83);
  if (v94 < 0)
    operator delete(v93[0]);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 48) - *(_QWORD *)(a2 + 40)) >> 3) != *(_QWORD *)(a2 + 32))
    turi::read_array_group_index_file(std::string)::$_3::operator()();
  if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v92, __str->__r_.__value_.__l.__data_, __str->__r_.__value_.__l.__size_);
  else
    v92 = *__str;
  boost::filesystem::path::parent_path((boost::filesystem::path *)&v92, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v91, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v91 = __p;
  }
  v12 = *(__int128 **)(a2 + 40);
  v13 = *(__int128 **)(a2 + 48);
  while (v12 != v13)
  {
    v14 = *((_BYTE *)v12 + 23);
    if (v14 < 0)
    {
      if (*((_QWORD *)v12 + 1))
      {
LABEL_39:
        if (v14 >= 0)
          v15 = (const std::string::value_type *)v12;
        else
          v15 = *(const std::string::value_type **)v12;
        if (v14 >= 0)
          v16 = *((unsigned __int8 *)v12 + 23);
        else
          v16 = *((_QWORD *)v12 + 1);
        if (!v16)
          goto LABEL_58;
        v17 = &v15[v16];
        v18 = v16 - 1;
        while (1)
        {
          v19 = 0;
          while (v15[v19] == asc_2187CDC6E[v19])
          {
            v20 = v19 + 1;
            if (v18 != v19 && v19++ != 2)
              continue;
            v22 = &asc_2187CDC6E[v20];
            v23 = &v15[v20];
            goto LABEL_54;
          }
          v22 = &asc_2187CDC6E[v19];
          v23 = &v15[v19];
LABEL_54:
          if (v22 == "")
            break;
          ++v15;
          --v18;
          if (v15 == v17)
            goto LABEL_58;
        }
        if (v15 == v23)
        {
LABEL_58:
          if ((*((_BYTE *)v12 + 23) & 0x80) != 0)
          {
            std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v12, *((_QWORD *)v12 + 1));
          }
          else
          {
            v24 = *v12;
            __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v12 + 2);
            *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v24;
          }
          if (!boost::filesystem::path::has_root_directory((boost::filesystem::path *)&__p))
          {
            if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&v90, v91.__r_.__value_.__l.__data_, v91.__r_.__value_.__l.__size_);
            else
              v90 = v91;
            if (*((char *)v12 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(&v89, *(const std::string::value_type **)v12, *((_QWORD *)v12 + 1));
            }
            else
            {
              v25 = *v12;
              v89.__r_.__value_.__r.__words[2] = *((_QWORD *)v12 + 2);
              *(_OWORD *)&v89.__r_.__value_.__l.__data_ = v25;
            }
            turi::fileio::make_absolute_path((uint64_t)&v90, (uint64_t)&v89, (uint64_t)&v83);
            if (*((char *)v12 + 23) < 0)
              operator delete(*(void **)v12);
            v26 = *(_OWORD *)&v83.__r_.__value_.__l.__data_;
            *((_QWORD *)v12 + 2) = *((_QWORD *)&v83.__r_.__value_.__l + 2);
            *v12 = v26;
            *((_BYTE *)&v83.__r_.__value_.__s + 23) = 0;
            v83.__r_.__value_.__s.__data_[0] = 0;
            if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v89.__r_.__value_.__l.__data_);
            if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v90.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
    }
    else if (*((_BYTE *)v12 + 23))
    {
      goto LABEL_39;
    }
    v12 = (__int128 *)((char *)v12 + 24);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "columns");
  LOBYTE(v99) = 46;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v27 = &__p;
  else
    v27 = (std::string *)__p.__r_.__value_.__r.__words[0];
  v100 = (unint64_t)v27;
  v28 = boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::get_child((uint64_t)v95, (uint64_t *)&__p);
  v29 = v28;
  if (*(char *)(v28 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v87, *(const std::string::value_type **)v28, *(_QWORD *)(v28 + 8));
  }
  else
  {
    v30 = *(_OWORD *)v28;
    v87.__r_.__value_.__r.__words[2] = *(_QWORD *)(v28 + 16);
    *(_OWORD *)&v87.__r_.__value_.__l.__data_ = v30;
  }
  v31 = operator new();
  boost::multi_index::multi_index_container<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>::multi_index_container(v31, *(_QWORD *)(v29 + 24));
  v88 = v31;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    v31 = v88;
  }
  v32 = *(_QWORD *)(v31 + 8);
  v33 = *(_QWORD *)(v32 + 88);
  if (v33)
    v34 = v33 - 80;
  else
    v34 = 0;
  v70 = *(_QWORD *)(v31 + 8);
  if (v34 != v32)
  {
    v35 = 0;
    v69 = (uint64_t *)(a2 + 64);
    do
    {
      memset(&__p, 0, sizeof(__p));
      *(_OWORD *)&v105[0].__r_.__value_.__r.__words[1] = 0uLL;
      memset(v101, 0, sizeof(v101));
      v102 = 0u;
      v103 = 0u;
      v104 = 0u;
      v99 = *v73;
      v36 = *v72;
      v105[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v105[0].__r_.__value_.__l.__size_;
      v100 = v36;
      if ((std::vector<std::string> *)((char *)&v103 + 8) != v74)
      {
        std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)((char *)&v103 + 8), *((std::string **)v75 + 5), *((__int128 **)v75 + 6), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v75 + 6) - *((_QWORD *)v75 + 5)) >> 3));
        v37 = (__int128 *)*((_QWORD *)&v103 + 1);
        v38 = (__int128 *)v104;
        while (v37 != v38)
        {
          if (*((char *)v37 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v86, *(const std::string::value_type **)v37, *((_QWORD *)v37 + 1));
          }
          else
          {
            v39 = *v37;
            v86.__r_.__value_.__r.__words[2] = *((_QWORD *)v37 + 2);
            *(_OWORD *)&v86.__r_.__value_.__l.__data_ = v39;
          }
          turi::parse_v2_segment_filename((uint64_t)&v86, &v83);
          v40 = v84;
          if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v83.__r_.__value_.__l.__data_);
          if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v86.__r_.__value_.__l.__data_);
          if (v40 == -1)
          {
            if (*((char *)v37 + 23) >= 0)
              v41 = *((unsigned __int8 *)v37 + 23);
            else
              v41 = *((_QWORD *)v37 + 1);
            std::string::basic_string[abi:ne180100]((uint64_t)&v83, v41 + 1);
            if ((v83.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v42 = &v83;
            else
              v42 = (std::string *)v83.__r_.__value_.__r.__words[0];
            if (v41)
            {
              if (*((char *)v37 + 23) >= 0)
                v43 = (const std::string::value_type *)v37;
              else
                v43 = *(const std::string::value_type **)v37;
              memmove(v42, v43, v41);
            }
            *(_WORD *)((char *)&v42->__r_.__value_.__l.__data_ + v41) = 58;
            std::to_string(&v110, v35);
            if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v44 = &v110;
            else
              v44 = (std::string *)v110.__r_.__value_.__r.__words[0];
            if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              size = HIBYTE(v110.__r_.__value_.__r.__words[2]);
            else
              size = v110.__r_.__value_.__l.__size_;
            v46 = std::string::append(&v83, (const std::string::value_type *)v44, size);
            v47 = v46->__r_.__value_.__r.__words[0];
            v97.__r_.__value_.__r.__words[0] = v46->__r_.__value_.__l.__size_;
            *(std::string::size_type *)((char *)v97.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v46->__r_.__value_.__r.__words[1] + 7);
            v48 = HIBYTE(v46->__r_.__value_.__r.__words[2]);
            v46->__r_.__value_.__l.__size_ = 0;
            v46->__r_.__value_.__r.__words[2] = 0;
            v46->__r_.__value_.__r.__words[0] = 0;
            if (*((char *)v37 + 23) < 0)
              operator delete(*(void **)v37);
            *(_QWORD *)v37 = v47;
            *((_QWORD *)v37 + 1) = v97.__r_.__value_.__r.__words[0];
            *(_QWORD *)((char *)v37 + 15) = *(std::string::size_type *)((char *)v97.__r_.__value_.__r.__words + 7);
            *((_BYTE *)v37 + 23) = v48;
            if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v110.__r_.__value_.__l.__data_);
            if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v83.__r_.__value_.__l.__data_);
          }
          v37 = (__int128 *)((char *)v37 + 24);
        }
      }
      if ((v71->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v49 = HIBYTE(v71->__r_.__value_.__r.__words[2]);
      else
        v49 = v71->__r_.__value_.__l.__size_;
      std::string::basic_string[abi:ne180100]((uint64_t)&v83, v49 + 1);
      if ((v83.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v50 = &v83;
      else
        v50 = (std::string *)v83.__r_.__value_.__r.__words[0];
      if (v49)
      {
        if ((v71->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v51 = v71;
        else
          v51 = (std::string *)v71->__r_.__value_.__r.__words[0];
        memmove(v50, v51, v49);
      }
      *(_WORD *)((char *)&v50->__r_.__value_.__l.__data_ + v49) = 58;
      std::to_string(&v110, v35);
      if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v52 = &v110;
      else
        v52 = (std::string *)v110.__r_.__value_.__r.__words[0];
      if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v53 = HIBYTE(v110.__r_.__value_.__r.__words[2]);
      else
        v53 = v110.__r_.__value_.__l.__size_;
      v54 = std::string::append(&v83, (const std::string::value_type *)v52, v53);
      v55 = v54->__r_.__value_.__r.__words[0];
      v97.__r_.__value_.__r.__words[0] = v54->__r_.__value_.__l.__size_;
      *(std::string::size_type *)((char *)v97.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v54->__r_.__value_.__r.__words[1] + 7);
      v56 = HIBYTE(v54->__r_.__value_.__r.__words[2]);
      v54->__r_.__value_.__l.__size_ = 0;
      v54->__r_.__value_.__r.__words[2] = 0;
      v54->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      __p.__r_.__value_.__r.__words[0] = v55;
      __p.__r_.__value_.__l.__size_ = v97.__r_.__value_.__r.__words[0];
      *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v97.__r_.__value_.__r.__words + 7);
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = v56;
      if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v110.__r_.__value_.__l.__data_);
      if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v83.__r_.__value_.__l.__data_);
      std::string::basic_string[abi:ne180100]<0>(&v83, "content_type");
      LOBYTE(v84) = 46;
      v57 = &v83;
      if ((v83.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v57 = (std::string *)v83.__r_.__value_.__r.__words[0];
      v85 = v57;
      std::string::basic_string[abi:ne180100]<0>(&v80, "");
      boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::get_optional<std::string>(v34 + 24, (uint64_t)&v83, (uint64_t)&v110);
      if (v110.__r_.__value_.__s.__data_[0])
        v58 = (std::string *)&v110.__r_.__value_.__r.__words[1];
      else
        v58 = (std::string *)&v80;
      v59 = v82;
      v60 = v111;
      if (v110.__r_.__value_.__s.__data_[0])
        v59 = v111;
      if (v59 < 0)
      {
        if (v110.__r_.__value_.__s.__data_[0])
          v61 = &v110.__r_.__value_.__r.__words[2];
        else
          v61 = (std::string::size_type *)&v81;
        std::string::__init_copy_ctor_external(&v97, v58->__r_.__value_.__l.__data_, *v61);
        v60 = v111;
        if (!v110.__r_.__value_.__s.__data_[0])
          goto LABEL_164;
      }
      else
      {
        v97 = *v58;
        if (!v110.__r_.__value_.__s.__data_[0])
          goto LABEL_164;
      }
      if (v60 < 0)
        operator delete((void *)v110.__r_.__value_.__l.__size_);
LABEL_164:
      if (SHIBYTE(v101[3]) < 0)
        operator delete((void *)v101[1]);
      *(std::string *)&v101[1] = v97;
      *((_BYTE *)&v97.__r_.__value_.__s + 23) = 0;
      v97.__r_.__value_.__s.__data_[0] = 0;
      if (v82 < 0)
        operator delete(v80);
      if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v83.__r_.__value_.__l.__data_);
      std::string::basic_string[abi:ne180100]<0>(v78, "segment_sizes");
      turi::ini::read_sequence_section<unsigned long>(v34 + 24, (uint64_t)v78, v100, &v83);
      if ((_QWORD)v102)
      {
        *((_QWORD *)&v102 + 1) = v102;
        operator delete((void *)v102);
      }
      v102 = *(_OWORD *)&v83.__r_.__value_.__l.__data_;
      *(_QWORD *)&v103 = *((_QWORD *)&v83.__r_.__value_.__l + 2);
      memset(&v83, 0, sizeof(v83));
      if (v79 < 0)
        operator delete(v78[0]);
      std::string::basic_string[abi:ne180100]<0>(&v83, "metadata");
      v62 = boost::multi_index::detail::ordered_index_impl<boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>,boost::multi_index::detail::nth_layer<2,std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>,boost::mpl::v_item<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,boost::mpl::vector0<mpl_::na>,0>,boost::multi_index::detail::ordered_non_unique_tag,boost::multi_index::detail::null_augment_policy>::count<std::string,std::less<std::string>>(*(_QWORD *)(v34 + 48) + 16, (const void **)&v83.__r_.__value_.__l.__data_, *(_QWORD *)(v34 + 48) + 17);
      v63 = v62;
      if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v83.__r_.__value_.__l.__data_);
        if (v63)
        {
LABEL_178:
          std::string::basic_string[abi:ne180100]<0>(v76, "metadata");
          turi::ini::read_dictionary_section<std::string>(v34 + 24, (uint64_t)v76, (uint64_t)&v83);
          std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v105, (_QWORD *)v105[0].__r_.__value_.__l.__size_);
          v64 = (_QWORD *)v83.__r_.__value_.__l.__size_;
          v105[0] = v83;
          if (v83.__r_.__value_.__r.__words[2])
          {
            *(_QWORD *)(v83.__r_.__value_.__l.__size_ + 16) = &v105[0].__r_.__value_.__l.__size_;
            v83.__r_.__value_.__r.__words[0] = (std::string::size_type)&v83.__r_.__value_.__l.__size_;
            *(_OWORD *)&v83.__r_.__value_.__r.__words[1] = 0uLL;
            v64 = 0;
          }
          else
          {
            v105[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v105[0].__r_.__value_.__l.__size_;
          }
          std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v83, v64);
          if (v77 < 0)
            operator delete(v76[0]);
        }
      }
      else if (v62)
      {
        goto LABEL_178;
      }
      if (v100 != (uint64_t)(*((_QWORD *)&v102 + 1) - v102) >> 3)
        turi::read_array_group_index_file(std::string)::$_4::operator()();
      v65 = *((_QWORD *)v75 + 9);
      if (v65 >= *((_QWORD *)v75 + 10))
      {
        v66 = std::vector<turi::index_file_information>::__push_back_slow_path<turi::index_file_information const&>(v69, (const turi::index_file_information *)&__p);
      }
      else
      {
        turi::index_file_information::index_file_information(*((std::string **)v75 + 9), (const turi::index_file_information *)&__p);
        v66 = v65 + 144;
        *((_QWORD *)v75 + 9) = v65 + 144;
      }
      *((_QWORD *)v75 + 9) = v66;
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v105, (_QWORD *)v105[0].__r_.__value_.__l.__size_);
      v83.__r_.__value_.__r.__words[0] = (std::string::size_type)&v103 + 8;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v83);
      if ((_QWORD)v102)
      {
        *((_QWORD *)&v102 + 1) = v102;
        operator delete((void *)v102);
      }
      if (SHIBYTE(v101[3]) < 0)
        operator delete((void *)v101[1]);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      ++v35;
      v67 = *(_QWORD *)(v34 + 88);
      if (v67)
        v34 = v67 - 80;
      else
        v34 = 0;
    }
    while (v34 != v70);
  }
  boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::~basic_ptree((uint64_t)&v87);
  if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v91.__r_.__value_.__l.__data_);
  if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v92.__r_.__value_.__l.__data_);
  boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::~basic_ptree((uint64_t)v95);
  v106[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24D91DA58;
  v109 = &unk_24D91DA80;
  if (v108 < 0)
    operator delete(v107);
  std::istream::~istream();
  boost::iostreams::stream_buffer<turi::fileio_impl::general_fstream_source,std::char_traits<char>,std::allocator<char>,boost::iostreams::input_seekable>::~stream_buffer((uint64_t)&v106[0].__r_.__value_.__r.__words[2]);
  return MEMORY[0x219A198F4](&v109);
}

void sub_218185DD8()
{
  void **v0;
  uint64_t v1;
  uint64_t v2;

  if (SLOBYTE(STACK[0x247]) < 0)
    operator delete((void *)STACK[0x230]);
  __cxa_end_catch();
  boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::~basic_ptree((uint64_t)&v1);
  turi::general_ifstream::~general_ifstream((turi::general_ifstream *)&v2);
  turi::group_index_file_information::~group_index_file_information(v0);
  JUMPOUT(0x218185E20);
}

void sub_218185DF4()
{
  __cxa_end_catch();
  JUMPOUT(0x218185DFCLL);
}

void sub_218185E18(void *a1, int a2)
{
  if (!a2)
    JUMPOUT(0x218185E20);
  __clang_call_terminate(a1);
}

void turi::group_index_file_information::~group_index_file_information(void **this)
{
  void **v2;

  v2 = this + 8;
  std::vector<turi::index_file_information>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = this + 5;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

void boost::property_tree::json_parser::read_json<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>(_QWORD *a1, __int128 *a2)
{
  std::string __p;

  memset(&__p, 0, sizeof(__p));
  boost::property_tree::json_parser::detail::read_json_internal<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>(a1, a2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_218185EC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void turi::ini::read_sequence_section<unsigned long>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  std::string *v7;
  uint64_t child;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  std::string::size_type v13;
  std::string *v14;
  std::string::size_type size;
  std::string *p_p;
  uint64_t v17;
  std::string __p;
  std::string v19;
  char v20;
  std::string *v21;
  uint64_t v22;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  if (a3)
  {
    if (*(char *)(a2 + 23) < 0)
      std::string::__init_copy_ctor_external(&v19, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    else
      v19 = *(std::string *)a2;
    v20 = 46;
    v7 = &v19;
    if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v7 = (std::string *)v19.__r_.__value_.__r.__words[0];
    v21 = v7;
    child = boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::get_child(a1, (uint64_t *)&v19);
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v19.__r_.__value_.__l.__data_);
    std::vector<unsigned long>::resize((uint64_t)a4, a3);
    v9 = *(_QWORD *)(*(_QWORD *)(child + 24) + 8);
    v10 = *(_QWORD *)(v9 + 88);
    v11 = v10 ? v10 - 80 : 0;
    if (v11 != v9)
    {
      v12 = 0;
      do
      {
        if (*(char *)(v11 + 23) < 0)
        {
          if (!*(_QWORD *)(v11 + 8))
          {
LABEL_24:
            boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::get_value<std::string,boost::property_tree::id_translator<std::string>>(v11 + 24, &__p);
            v22 = 0;
            size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              size = __p.__r_.__value_.__l.__size_;
            else
              p_p = &__p;
            v19.__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
            v19.__r_.__value_.__l.__size_ = (std::string::size_type)p_p + size;
            if ((boost::detail::lexical_ostream_limited_src<char,std::char_traits<char>>::shr_unsigned<unsigned long>((unsigned __int8 **)&v19, &v22) & 1) == 0)
            {
              std::bad_cast::bad_cast((std::bad_cast *)&v19);
              v19.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24D91BD80;
              v19.__r_.__value_.__r.__words[2] = MEMORY[0x24BEDB7B0];
              boost::throw_exception<boost::bad_lexical_cast>((uint64_t)&v19);
            }
            *(_QWORD *)(*a4 + 8 * v12) = v22;
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            ++v12;
            goto LABEL_31;
          }
        }
        else if (!*(_BYTE *)(v11 + 23))
        {
          goto LABEL_24;
        }
        v12 = std::stoi((const std::string *)v11, 0, 10);
        if (v12 >= (uint64_t)(a4[1] - *a4) >> 3)
        {
          v19.__r_.__value_.__r.__words[0] = v11;
          turi::ini::read_sequence_section<std::string>(boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>> const&,std::string,unsigned long)::{lambda(void)#1}::operator()((const std::string::value_type ***)&v19);
        }
        boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::get_value<std::string,boost::property_tree::id_translator<std::string>>(v11 + 24, &__p);
        v22 = 0;
        v13 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        v14 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v13 = __p.__r_.__value_.__l.__size_;
        else
          v14 = &__p;
        v19.__r_.__value_.__r.__words[0] = (std::string::size_type)v14;
        v19.__r_.__value_.__l.__size_ = (std::string::size_type)v14 + v13;
        if ((boost::detail::lexical_ostream_limited_src<char,std::char_traits<char>>::shr_unsigned<unsigned long>((unsigned __int8 **)&v19, &v22) & 1) == 0)
        {
          std::bad_cast::bad_cast((std::bad_cast *)&v19);
          v19.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24D91BD80;
          v19.__r_.__value_.__r.__words[2] = MEMORY[0x24BEDB7B0];
          boost::throw_exception<boost::bad_lexical_cast>((uint64_t)&v19);
        }
        *(_QWORD *)(*a4 + 8 * v12) = v22;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
LABEL_31:
        v17 = *(_QWORD *)(v11 + 88);
        if (v17)
          v11 = v17 - 80;
        else
          v11 = 0;
      }
      while (v11 != v9);
    }
  }
}

void sub_218186160(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;
  void *v23;

  v23 = *(void **)v21;
  if (*(_QWORD *)v21)
  {
    *(_QWORD *)(v21 + 8) = v23;
    operator delete(v23);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *turi::legacy_vector_to_map@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  const std::locale::facet *v11;
  uint64_t v12;
  uint64_t *v13;
  std::locale v15;
  char v16;
  _QWORD v17[3];
  _QWORD v18[10];
  char v19;
  uint64_t v20;
  std::locale *v21;

  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)a2 = a2 + 8;
  if (result[1] != *result)
  {
    v2 = result;
    v3 = 0;
    v4 = 0;
    v5 = *MEMORY[0x24BEDB7F0];
    v6 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
    v7 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    v8 = MEMORY[0x24BEDB848] + 16;
    do
    {
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v17);
      v9 = v17[0];
      v10 = (char *)v17 + *(_QWORD *)(v17[0] - 24);
      if (*((_DWORD *)v10 + 36) == -1)
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v17 + *(_QWORD *)(v17[0] - 24)));
        v11 = std::locale::use_facet(&v15, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 32);
        std::locale::~locale(&v15);
        v9 = v17[0];
      }
      *((_DWORD *)v10 + 36) = 48;
      *(_QWORD *)((char *)v18 + *(_QWORD *)(v9 - 24)) = 4;
      std::ostream::operator<<();
      std::stringbuf::str();
      v12 = *v2;
      v21 = &v15;
      v13 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a2, (const void **)&v15.__locale_, (uint64_t)&std::piecewise_construct, (__int128 **)&v21);
      std::string::operator=((std::string *)(v13 + 7), (const std::string *)(v12 + v3));
      if (v16 < 0)
        operator delete(v15.__locale_);
      v17[0] = v5;
      *(_QWORD *)((char *)v17 + *(_QWORD *)(v5 - 24)) = v6;
      v17[2] = v7;
      v18[0] = v8;
      if (v19 < 0)
        operator delete((void *)v18[8]);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      result = (uint64_t *)MEMORY[0x219A198F4](&v20);
      ++v4;
      v3 += 24;
    }
    while (v4 < 0xAAAAAAAAAAAAAAABLL * ((v2[1] - *v2) >> 3));
  }
  return result;
}

void sub_2181863AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::locale a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  std::locale::~locale(&a12);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a18);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a11, *(_QWORD **)(a11 + 8));
  _Unwind_Resume(a1);
}

void turi::write_array_group_index_file(uint64_t a1, uint64_t a2)
{
  internalJSONNode *v4;
  internalJSONNode *v5;
  internalJSONNode *v6;
  const internalJSONNode *v7;
  internalJSONNode *v8;
  unint64_t v9;
  internalJSONNode *v10;
  const internalJSONNode *v11;
  internalJSONNode *v12;
  unint64_t v13;
  internalJSONNode *v14;
  internalJSONNode *v15;
  uint64_t v16;
  const internalJSONNode *v17;
  internalJSONNode *v18;
  unint64_t v19;
  internalJSONNode *v20;
  internalJSONNode *v21;
  uint64_t v22;
  unint64_t v23;
  internalJSONNode *v24;
  __int128 *v25;
  __int128 *v26;
  internalJSONNode *v27;
  __int128 v28;
  std::string *v29;
  __int128 v30;
  std::string *v31;
  const internalJSONNode *v32;
  unint64_t v33;
  internalJSONNode *v34;
  internalJSONNode *v35;
  internalJSONNode *v36;
  uint64_t v37;
  internalJSONNode *v38;
  const internalJSONNode *v39;
  internalJSONNode *v40;
  unint64_t v41;
  internalJSONNode *v42;
  internalJSONNode *v43;
  uint64_t v44;
  unint64_t v45;
  internalJSONNode *v46;
  const internalJSONNode *v47;
  internalJSONNode *v48;
  unint64_t v49;
  internalJSONNode *v50;
  internalJSONNode *v51;
  uint64_t v52;
  const internalJSONNode *v53;
  internalJSONNode *v54;
  unint64_t v55;
  internalJSONNode *v56;
  internalJSONNode *v57;
  uint64_t v58;
  const internalJSONNode *v59;
  internalJSONNode *v60;
  unint64_t v61;
  internalJSONNode *v62;
  internalJSONNode *v63;
  uint64_t v64;
  const internalJSONNode *v65;
  internalJSONNode *v66;
  unint64_t v67;
  internalJSONNode *v68;
  uint64_t v69;
  unint64_t v70;
  internalJSONNode *v71;
  jsonSingletonEMPTY_JSON_STRING *v72;
  std::string *v73;
  std::string::size_type size;
  internalJSONNode *v75;
  internalJSONNode *v76;
  uint64_t v77;
  internalJSONNode *v78;
  internalJSONNode *v79;
  uint64_t v80;
  uint64_t v81;
  __int128 *Value;
  __int128 v83;
  std::string v84;
  internalJSONNode *v85;
  internalJSONNode *v86;
  internalJSONNode *v87;
  std::string v88;
  std::string v89;
  std::string v90;
  internalJSONNode *v91;
  std::string *v92;
  unint64_t v93;
  internalJSONNode *v94;
  std::string v95;
  std::string v96;
  std::string __p[3];
  uint64_t v98;
  int v99;
  void *v100;
  char v101;
  _QWORD v102[21];

  v102[20] = *MEMORY[0x24BDAC8D0];
  LODWORD(v96.__r_.__value_.__l.__data_) = *(_DWORD *)(a2 + 24);
  if (LODWORD(v96.__r_.__value_.__l.__data_) != 2)
  {
    __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v96;
    turi::write_array_group_index_file(std::string,turi::group_index_file_information const&)::$_0::operator()();
  }
  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&v96, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    v96 = *(std::string *)a1;
  boost::filesystem::path::parent_path((boost::filesystem::path *)&v96, __p);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v95, __p[0].__r_.__value_.__l.__data_, __p[0].__r_.__value_.__l.__size_);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  else
  {
    v95 = __p[0];
  }
  internalJSONNode::newInternal((internalJSONNode *)5);
  v5 = v4;
  internalJSONNode::newInternal((internalJSONNode *)5);
  v94 = v6;
  std::string::basic_string[abi:ne180100]<0>(__p, "sarray");
  v8 = v94;
  v9 = *((_QWORD *)v94 + 10);
  if (v9 >= 2)
  {
    *((_QWORD *)v94 + 10) = v9 - 1;
    internalJSONNode::newInternal(v8, v7);
    v8 = v10;
  }
  v94 = v8;
  std::string::operator=((std::string *)((char *)v8 + 8), __p);
  *((_BYTE *)v8 + 32) = 1;
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(__p, "version");
  JSONNode::JSONNode(&v91, __p, *(unsigned int *)(a2 + 24));
  v12 = v94;
  v13 = *((_QWORD *)v94 + 10);
  if (v13 >= 2)
  {
    *((_QWORD *)v94 + 10) = v13 - 1;
    internalJSONNode::newInternal(v12, v11);
  }
  v94 = v12;
  internalJSONNode::push_back(v12, (uint64_t *)&v91);
  v15 = v91;
  if (v91)
  {
    v16 = *((_QWORD *)v91 + 10) - 1;
    *((_QWORD *)v91 + 10) = v16;
    if (!v16)
      internalJSONNode::deleteInternal(v15, v14);
  }
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(__p, "num_segments");
  JSONNode::JSONNode(&v91, __p, *(_QWORD *)(a2 + 32));
  v18 = v94;
  v19 = *((_QWORD *)v94 + 10);
  if (v19 >= 2)
  {
    *((_QWORD *)v94 + 10) = v19 - 1;
    internalJSONNode::newInternal(v18, v17);
  }
  v94 = v18;
  internalJSONNode::push_back(v18, (uint64_t *)&v91);
  v21 = v91;
  if (v91)
  {
    v22 = *((_QWORD *)v91 + 10) - 1;
    *((_QWORD *)v91 + 10) = v22;
    if (!v22)
      internalJSONNode::deleteInternal(v21, v20);
  }
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  v23 = *((_QWORD *)v5 + 10);
  if (v23 >= 2)
  {
    *((_QWORD *)v5 + 10) = v23 - 1;
    internalJSONNode::newInternal(v5, v20);
    v5 = v24;
  }
  internalJSONNode::push_back(v5, (uint64_t *)&v94);
  v26 = *(__int128 **)(a2 + 40);
  v25 = *(__int128 **)(a2 + 48);
  v27 = *(internalJSONNode **)(a2 + 32);
  v91 = (internalJSONNode *)(0xAAAAAAAAAAAAAAABLL * (((char *)v25 - (char *)v26) >> 3));
  v90.__r_.__value_.__r.__words[0] = (std::string::size_type)v27;
  if (v91 != v27)
  {
    __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v91;
    __p[0].__r_.__value_.__l.__size_ = (std::string::size_type)&v90;
    turi::write_array_group_index_file(std::string,turi::group_index_file_information const&)::$_1::operator()();
  }
  v91 = 0;
  v92 = 0;
  v93 = 0;
  while (v26 != v25)
  {
    if (*((char *)v26 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(__p, *(const std::string::value_type **)v26, *((_QWORD *)v26 + 1));
    }
    else
    {
      v28 = *v26;
      __p[0].__r_.__value_.__r.__words[2] = *((_QWORD *)v26 + 2);
      *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v28;
    }
    if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v89, v95.__r_.__value_.__l.__data_, v95.__r_.__value_.__l.__size_);
    else
      v89 = v95;
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v88, __p[0].__r_.__value_.__l.__data_, __p[0].__r_.__value_.__l.__size_);
    else
      v88 = __p[0];
    turi::fileio::make_relative_path((uint64_t)&v89, (uint64_t)&v88, &v90);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
    __p[0] = v90;
    *((_BYTE *)&v90.__r_.__value_.__s + 23) = 0;
    v90.__r_.__value_.__s.__data_[0] = 0;
    if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v88.__r_.__value_.__l.__data_);
    if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v89.__r_.__value_.__l.__data_);
    v29 = v92;
    if ((unint64_t)v92 >= v93)
    {
      v31 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v91, (__int128 *)__p);
    }
    else
    {
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(v92, __p[0].__r_.__value_.__l.__data_, __p[0].__r_.__value_.__l.__size_);
      }
      else
      {
        v30 = *(_OWORD *)&__p[0].__r_.__value_.__l.__data_;
        v92->__r_.__value_.__r.__words[2] = __p[0].__r_.__value_.__r.__words[2];
        *(_OWORD *)&v29->__r_.__value_.__l.__data_ = v30;
      }
      v31 = v29 + 1;
    }
    v92 = v31;
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
    v26 = (__int128 *)((char *)v26 + 24);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "segment_files");
  turi::legacy_vector_to_map((uint64_t *)&v91, (uint64_t)&v90);
  turi::json::to_json_node<std::string>(__p, &v90, &v87);
  v33 = *((_QWORD *)v5 + 10);
  if (v33 >= 2)
  {
    *((_QWORD *)v5 + 10) = v33 - 1;
    internalJSONNode::newInternal(v5, v32);
    v5 = v34;
  }
  internalJSONNode::push_back(v5, (uint64_t *)&v87);
  v36 = v87;
  if (v87)
  {
    v37 = *((_QWORD *)v87 + 10) - 1;
    *((_QWORD *)v87 + 10) = v37;
    if (!v37)
      internalJSONNode::deleteInternal(v36, v35);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v90, (_QWORD *)v90.__r_.__value_.__l.__size_);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  internalJSONNode::newInternal((internalJSONNode *)4);
  v87 = v38;
  std::string::basic_string[abi:ne180100]<0>(__p, "columns");
  v40 = v87;
  v41 = *((_QWORD *)v87 + 10);
  if (v41 >= 2)
  {
    *((_QWORD *)v87 + 10) = v41 - 1;
    internalJSONNode::newInternal(v40, v39);
    v40 = v42;
  }
  v87 = v40;
  std::string::operator=((std::string *)((char *)v40 + 8), __p);
  *((_BYTE *)v40 + 32) = 1;
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  if (*(_QWORD *)(a2 + 72) != *(_QWORD *)(a2 + 64))
  {
    v44 = 0;
    v45 = 0;
    do
    {
      internalJSONNode::newInternal((internalJSONNode *)5);
      v86 = v46;
      std::string::basic_string[abi:ne180100]<0>(__p, "content_type");
      JSONNode::JSONNode(&v90, __p, *(_QWORD *)(a2 + 64) + v44 + 48);
      v48 = v86;
      v49 = *((_QWORD *)v86 + 10);
      if (v49 >= 2)
      {
        *((_QWORD *)v86 + 10) = v49 - 1;
        internalJSONNode::newInternal(v48, v47);
      }
      v86 = v48;
      internalJSONNode::push_back(v48, (uint64_t *)&v90);
      v51 = (internalJSONNode *)v90.__r_.__value_.__r.__words[0];
      if (v90.__r_.__value_.__r.__words[0])
      {
        v52 = *(_QWORD *)(v90.__r_.__value_.__r.__words[0] + 80) - 1;
        *(_QWORD *)(v90.__r_.__value_.__r.__words[0] + 80) = v52;
        if (!v52)
          internalJSONNode::deleteInternal(v51, v50);
      }
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p[0].__r_.__value_.__l.__data_);
      std::string::basic_string[abi:ne180100]<0>(__p, "metadata");
      turi::json::to_json_node<std::string>(__p, (_QWORD *)(*(_QWORD *)(a2 + 64) + v44 + 120), (internalJSONNode **)&v90);
      v54 = v86;
      v55 = *((_QWORD *)v86 + 10);
      if (v55 >= 2)
      {
        *((_QWORD *)v86 + 10) = v55 - 1;
        internalJSONNode::newInternal(v54, v53);
      }
      v86 = v54;
      internalJSONNode::push_back(v54, (uint64_t *)&v90);
      v57 = (internalJSONNode *)v90.__r_.__value_.__r.__words[0];
      if (v90.__r_.__value_.__r.__words[0])
      {
        v58 = *(_QWORD *)(v90.__r_.__value_.__r.__words[0] + 80) - 1;
        *(_QWORD *)(v90.__r_.__value_.__r.__words[0] + 80) = v58;
        if (!v58)
          internalJSONNode::deleteInternal(v57, v56);
      }
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p[0].__r_.__value_.__l.__data_);
      v90.__r_.__value_.__r.__words[0] = (uint64_t)(*(_QWORD *)(*(_QWORD *)(a2 + 64) + v44 + 80)
                                                 - *(_QWORD *)(*(_QWORD *)(a2 + 64) + v44 + 72)) >> 3;
      v85 = *(internalJSONNode **)(a2 + 32);
      if ((internalJSONNode *)v90.__r_.__value_.__l.__data_ != v85)
      {
        __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v90;
        __p[0].__r_.__value_.__l.__size_ = (std::string::size_type)&v85;
        turi::write_array_group_index_file(std::string,turi::group_index_file_information const&)::$_2::operator()();
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "segment_sizes");
      turi::legacy_vector_to_map<unsigned long>((_QWORD *)(*(_QWORD *)(a2 + 64) + v44 + 72), (uint64_t)&v90);
      turi::json::to_json_node<std::string>(__p, &v90, &v85);
      v60 = v86;
      v61 = *((_QWORD *)v86 + 10);
      if (v61 >= 2)
      {
        *((_QWORD *)v86 + 10) = v61 - 1;
        internalJSONNode::newInternal(v60, v59);
      }
      v86 = v60;
      internalJSONNode::push_back(v60, (uint64_t *)&v85);
      v63 = v85;
      if (v85)
      {
        v64 = *((_QWORD *)v85 + 10) - 1;
        *((_QWORD *)v85 + 10) = v64;
        if (!v64)
          internalJSONNode::deleteInternal(v63, v62);
      }
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v90, (_QWORD *)v90.__r_.__value_.__l.__size_);
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p[0].__r_.__value_.__l.__data_);
      v66 = v87;
      v67 = *((_QWORD *)v87 + 10);
      if (v67 >= 2)
      {
        *((_QWORD *)v87 + 10) = v67 - 1;
        internalJSONNode::newInternal(v66, v65);
      }
      v87 = v66;
      internalJSONNode::push_back(v66, (uint64_t *)&v86);
      v68 = v86;
      if (v86)
      {
        v69 = *((_QWORD *)v86 + 10) - 1;
        *((_QWORD *)v86 + 10) = v69;
        if (!v69)
          internalJSONNode::deleteInternal(v68, v43);
      }
      ++v45;
      v44 += 144;
    }
    while (v45 < 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a2 + 72) - *(_QWORD *)(a2 + 64)) >> 4));
  }
  v70 = *((_QWORD *)v5 + 10);
  if (v70 >= 2)
  {
    *((_QWORD *)v5 + 10) = v70 - 1;
    internalJSONNode::newInternal(v5, v43);
    v5 = v71;
  }
  internalJSONNode::push_back(v5, (uint64_t *)&v87);
  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&v84, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    v84 = *(std::string *)a1;
  v72 = (jsonSingletonEMPTY_JSON_STRING *)turi::general_ofstream::general_ofstream(__p, (uint64_t)&v84);
  if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v84.__r_.__value_.__l.__data_);
  if ((*(_BYTE *)v5 & 0xFE) == 4)
  {
    memset(&v90, 0, sizeof(v90));
    std::string::reserve(&v90, 0x800uLL);
    internalJSONNode::Write((std::string *)v5, 0, 1, &v90);
  }
  else
  {
    Value = jsonSingletonEMPTY_JSON_STRING::getValue(v72);
    if (*((char *)Value + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v90, *(const std::string::value_type **)Value, *((_QWORD *)Value + 1));
    }
    else
    {
      v83 = *Value;
      v90.__r_.__value_.__r.__words[2] = *((_QWORD *)Value + 2);
      *(_OWORD *)&v90.__r_.__value_.__l.__data_ = v83;
    }
  }
  if ((v90.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v73 = &v90;
  else
    v73 = (std::string *)v90.__r_.__value_.__r.__words[0];
  if ((v90.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v90.__r_.__value_.__r.__words[2]);
  else
    size = v90.__r_.__value_.__l.__size_;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)v73, size);
  if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v90.__r_.__value_.__l.__data_);
  if (!turi::general_ofstream::good((turi::general_ofstream *)__p))
    turi::write_array_group_index_file(std::string,turi::group_index_file_information const&)::$_3::operator()();
  boost::iostreams::detail::execute_all<boost::iostreams::detail::member_close_operation<boost::iostreams::detail::linked_streambuf<char,std::char_traits<char>>>,boost::iostreams::detail::member_close_operation<boost::iostreams::detail::linked_streambuf<char,std::char_traits<char>>>,boost::iostreams::detail::reset_operation<boost::iostreams::detail::optional<boost::iostreams::detail::concept_adapter<turi::fileio_impl::general_fstream_sink>>>,boost::iostreams::detail::clear_flags_operation<int>>(&__p[0].__r_.__value_.__r.__words[1], 8, &__p[0].__r_.__value_.__r.__words[1], 16, (turi::fileio_impl::general_fstream_sink *)&v98, &v99);
  __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24D920F98;
  v102[0] = &unk_24D920FC0;
  if (v101 < 0)
    operator delete(v100);
  std::ostream::~ostream();
  boost::iostreams::stream_buffer<turi::fileio_impl::general_fstream_sink,std::char_traits<char>,std::allocator<char>,boost::iostreams::output>::~stream_buffer((uint64_t)&__p[0].__r_.__value_.__l.__size_);
  MEMORY[0x219A198F4](v102);
  v76 = v87;
  if (v87)
  {
    v77 = *((_QWORD *)v87 + 10) - 1;
    *((_QWORD *)v87 + 10) = v77;
    if (!v77)
      internalJSONNode::deleteInternal(v76, v75);
  }
  __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v91;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  v79 = v94;
  if (v94)
  {
    v80 = *((_QWORD *)v94 + 10) - 1;
    *((_QWORD *)v94 + 10) = v80;
    if (!v80)
      internalJSONNode::deleteInternal(v79, v78);
  }
  v81 = *((_QWORD *)v5 + 10) - 1;
  *((_QWORD *)v5 + 10) = v81;
  if (!v81)
    internalJSONNode::deleteInternal(v5, v78);
  if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v95.__r_.__value_.__l.__data_);
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v96.__r_.__value_.__l.__data_);
}

void sub_218186D8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, internalJSONNode *a16, internalJSONNode *a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,internalJSONNode *a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55,uint64_t a56,void *a57,uint64_t a58,int a59,__int16 a60,char a61,char a62)
{
  if (a2)
    __cxa_call_unexpected(exception_object);
  _Unwind_Resume(exception_object);
}

void turi::write_array_group_index_file(std::string,turi::group_index_file_information const&)::$_0::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray_index_file.cpp", 112);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"info.version", 12);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"2", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray_index_file.cpp", "operator()", 185, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::write_array_group_index_file(std::string,turi::group_index_file_information const&)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_218187170(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::write_array_group_index_file(std::string,turi::group_index_file_information const&)::$_1::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray_index_file.cpp", 112);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"info.segment_files.size()", 25);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"info.nsegments", 14);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray_index_file.cpp", "operator()", 201, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::write_array_group_index_file(std::string,turi::group_index_file_information const&)::$_1::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_218187384(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

internalJSONNode *turi::json::to_json_node<std::string>@<X0>(const std::string *a1@<X0>, _QWORD *a2@<X1>, internalJSONNode **a3@<X8>)
{
  internalJSONNode *v6;
  const internalJSONNode *v7;
  internalJSONNode *v8;
  unint64_t v9;
  internalJSONNode *v10;
  internalJSONNode *result;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  const internalJSONNode *v15;
  internalJSONNode *v16;
  unint64_t v17;
  internalJSONNode *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  BOOL v22;
  internalJSONNode *v23;

  internalJSONNode::newInternal((internalJSONNode *)5);
  v8 = v6;
  *a3 = v6;
  v9 = *((_QWORD *)v6 + 10);
  if (v9 >= 2)
  {
    *((_QWORD *)v6 + 10) = v9 - 1;
    internalJSONNode::newInternal(v6, v7);
    v8 = v10;
  }
  *a3 = v8;
  result = (internalJSONNode *)std::string::operator=((std::string *)((char *)v8 + 8), a1);
  *((_BYTE *)v8 + 32) = 1;
  v14 = (_QWORD *)*a2;
  v12 = a2 + 1;
  v13 = v14;
  if (v14 != v12)
  {
    do
    {
      JSONNode::JSONNode(&v23, v13 + 4, v13 + 7);
      v16 = *a3;
      v17 = *((_QWORD *)*a3 + 10);
      if (v17 >= 2)
      {
        *((_QWORD *)v16 + 10) = v17 - 1;
        internalJSONNode::newInternal(v16, v15);
      }
      *a3 = v16;
      internalJSONNode::push_back(v16, (uint64_t *)&v23);
      result = v23;
      if (v23)
      {
        v19 = *((_QWORD *)v23 + 10) - 1;
        *((_QWORD *)v23 + 10) = v19;
        if (!v19)
          result = internalJSONNode::deleteInternal(result, v18);
      }
      v20 = (_QWORD *)v13[1];
      if (v20)
      {
        do
        {
          v21 = v20;
          v20 = (_QWORD *)*v20;
        }
        while (v20);
      }
      else
      {
        do
        {
          v21 = (_QWORD *)v13[2];
          v22 = *v21 == (_QWORD)v13;
          v13 = v21;
        }
        while (!v22);
      }
      v13 = v21;
    }
    while (v21 != v12);
  }
  return result;
}

void turi::write_array_group_index_file(std::string,turi::group_index_file_information const&)::$_2::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray_index_file.cpp", 112);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"info.columns[i].segment_sizes.size()", 36);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"info.nsegments", 14);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray_index_file.cpp", "operator()", 221, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::write_array_group_index_file(std::string,turi::group_index_file_information const&)::$_2::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2181876BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

_QWORD *turi::legacy_vector_to_map<unsigned long>@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  const std::locale::facet *v10;
  uint64_t *v11;
  void **v12;
  std::string v14;
  std::locale v15;
  char v16;
  _QWORD v17[3];
  _QWORD v18[10];
  char v19;
  uint64_t v20;
  std::locale *v21;

  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)a2 = a2 + 8;
  if (result[1] != *result)
  {
    v2 = result;
    v3 = 0;
    v4 = *MEMORY[0x24BEDB7F0];
    v6 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
    v5 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    v7 = MEMORY[0x24BEDB848] + 16;
    do
    {
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v17);
      v8 = v17[0];
      v9 = (char *)v17 + *(_QWORD *)(v17[0] - 24);
      if (*((_DWORD *)v9 + 36) == -1)
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v17 + *(_QWORD *)(v17[0] - 24)));
        v10 = std::locale::use_facet(&v15, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
        std::locale::~locale(&v15);
        v8 = v17[0];
      }
      *((_DWORD *)v9 + 36) = 48;
      *(_QWORD *)((char *)v18 + *(_QWORD *)(v8 - 24)) = 4;
      std::ostream::operator<<();
      std::stringbuf::str();
      std::to_string(&v14, *(_QWORD *)(*v2 + 8 * v3));
      v21 = &v15;
      v11 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a2, (const void **)&v15.__locale_, (uint64_t)&std::piecewise_construct, (__int128 **)&v21);
      v12 = (void **)(v11 + 7);
      if (*((char *)v11 + 79) < 0)
        operator delete(*v12);
      *(std::string *)v12 = v14;
      if (v16 < 0)
        operator delete(v15.__locale_);
      v17[0] = v4;
      *(_QWORD *)((char *)v17 + *(_QWORD *)(v4 - 24)) = v6;
      v17[2] = v5;
      v18[0] = v7;
      if (v19 < 0)
        operator delete((void *)v18[8]);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      result = (_QWORD *)MEMORY[0x219A198F4](&v20);
      ++v3;
    }
    while (v3 < (uint64_t)(v2[1] - *v2) >> 3);
  }
  return result;
}

void sub_218187920(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, std::locale a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  std::locale::~locale(&a17);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a23);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a10, *(_QWORD **)(a10 + 8));
  _Unwind_Resume(a1);
}

__int128 *jsonSingletonEMPTY_JSON_STRING::getValue(jsonSingletonEMPTY_JSON_STRING *this)
{
  unsigned __int8 v1;

  {
    jsonSingletonEMPTY_JSON_STRING::getValue(void)::single = 0uLL;
    qword_254FD3E88 = 0;
    __cxa_atexit((void (*)(void *))jsonSingletonEMPTY_JSON_STRING::~jsonSingletonEMPTY_JSON_STRING, &jsonSingletonEMPTY_JSON_STRING::getValue(void)::single, &dword_217E69000);
  }
  return &jsonSingletonEMPTY_JSON_STRING::getValue(void)::single;
}

void jsonSingletonEMPTY_JSON_STRING::~jsonSingletonEMPTY_JSON_STRING(void **this)
{
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

uint64_t boost::property_tree::json_parser::detail::read_json_internal<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>(_QWORD *a1, __int128 *a2, std::string *a3)
{
  uint64_t v6;
  _QWORD *v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  void *v17[2];
  void *__p[2];
  __int128 v19;

  v14 = 0uLL;
  v15 = 0;
  v6 = operator new();
  v7 = operator new(0x60uLL);
  *(_QWORD *)(v6 + 8) = v7;
  v7[7] = 0;
  v7[8] = v7 + 7;
  v7[9] = v7 + 7;
  v7[10] = v7 + 10;
  v7[11] = v7 + 10;
  *(_QWORD *)(v6 + 24) = 0;
  v16 = v6;
  *(_OWORD *)v17 = 0u;
  *(_OWORD *)__p = 0u;
  v19 = 0u;
  boost::property_tree::json_parser::detail::read_json_internal<std::istreambuf_iterator<char>,std::istreambuf_iterator<char>,boost::property_tree::json_parser::detail::encoding<char>,boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>(*(_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40), 0, (uint64_t)&v13, (uint64_t)&v14, a3);
  v8 = *a2;
  *a2 = v14;
  v14 = v8;
  v9 = *((_QWORD *)a2 + 2);
  v10 = *((_QWORD *)a2 + 3);
  v11 = v16;
  *((_QWORD *)a2 + 2) = v15;
  *((_QWORD *)a2 + 3) = v11;
  v15 = v9;
  v16 = v10;
  if (__p[1])
  {
    *(void **)&v19 = __p[1];
    operator delete(__p[1]);
  }
  if (SHIBYTE(__p[0]) < 0)
    operator delete(v17[0]);
  return boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::~basic_ptree((uint64_t)&v14);
}

void sub_218187B20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::~standard_callbacks((uint64_t)va);
  _Unwind_Resume(a1);
}

void boost::property_tree::json_parser::detail::read_json_internal<std::istreambuf_iterator<char>,std::istreambuf_iterator<char>,boost::property_tree::json_parser::detail::encoding<char>,boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, std::string *__str)
{
  __int128 v7;
  uint64_t v8;
  uint64_t v9[2];
  std::string __p;
  uint64_t v11;

  *(_QWORD *)&v7 = a4;
  *((_QWORD *)&v7 + 1) = a3;
  v8 = a3;
  memset(&__p, 0, sizeof(__p));
  std::string::operator=(&__p, __str);
  v9[0] = a1;
  v9[1] = (uint64_t)a2;
  boost::property_tree::json_parser::detail::utf8_utf8_encoding::skip_introduction<std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>(v8, v9, a2);
  v11 = 1;
  boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_value(&v7);
  boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::finish((uint64_t)&v7);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_218187BE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::~standard_callbacks(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 56);
  if (v2)
  {
    *(_QWORD *)(a1 + 64) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  return boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::~basic_ptree(a1);
}

uint64_t boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_value(__int128 *a1)
{
  uint64_t result;

  result = boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_object((uint64_t)a1);
  if ((result & 1) == 0)
  {
    result = boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_array((uint64_t)a1);
    if ((result & 1) == 0)
    {
      result = boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_string((uint64_t)a1);
      if ((result & 1) == 0)
      {
        result = boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_BOOLean((uint64_t)a1);
        if ((result & 1) == 0)
        {
          result = boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_null((uint64_t)a1);
          if ((result & 1) == 0)
          {
            result = boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_number(a1);
            if ((result & 1) == 0)
              boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_error((uint64_t)(a1 + 1), "expected value");
          }
        }
      }
    }
  }
  return result;
}

uint64_t boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::finish(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;

  v2 = a1 + 16;
  while ((boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::have<boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::DoNothing>(v2, (uint64_t (*)(_QWORD *, _QWORD))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_ws, 0) & 1) != 0);
  result = std::istreambuf_iterator<char>::equal[abi:ne180100]((_QWORD **)(a1 + 24), (_QWORD **)(a1 + 32));
  if ((result & 1) == 0)
    boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_error(v2, "garbage after data");
  return result;
}

uint64_t boost::property_tree::json_parser::detail::utf8_utf8_encoding::skip_introduction<std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t result;
  unsigned __int8 *v5;
  int v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;

  v13 = a3;
  result = std::istreambuf_iterator<char>::equal[abi:ne180100]((_QWORD **)a2, &v13);
  if ((result & 1) == 0)
  {
    result = *a2;
    v5 = *(unsigned __int8 **)(*a2 + 24);
    if (v5 == *(unsigned __int8 **)(*a2 + 32))
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 72))(result);
      v6 = result;
    }
    else
    {
      v6 = *v5;
    }
    if (v6 == 239)
    {
      v7 = (_QWORD *)*a2;
      v8 = *(_QWORD *)(*a2 + 24);
      if (v8 == *(_QWORD *)(*a2 + 32))
        (*(void (**)(_QWORD *))(*v7 + 80))(v7);
      else
        v7[3] = v8 + 1;
      result = std::istreambuf_iterator<char>::equal[abi:ne180100]((_QWORD **)a2, &v13);
      if ((result & 1) == 0)
      {
        v9 = (_QWORD *)*a2;
        v10 = *(_QWORD *)(*a2 + 24);
        if (v10 == *(_QWORD *)(*a2 + 32))
          (*(void (**)(_QWORD *))(*v9 + 80))(v9);
        else
          v9[3] = v10 + 1;
        result = std::istreambuf_iterator<char>::equal[abi:ne180100]((_QWORD **)a2, &v13);
        if ((result & 1) == 0)
        {
          v11 = (_QWORD *)*a2;
          v12 = *(_QWORD *)(*a2 + 24);
          if (v12 == *(_QWORD *)(*a2 + 32))
            (*(void (**)(_QWORD *))(*v11 + 80))(v11);
          else
            v11[3] = v12 + 1;
          return std::istreambuf_iterator<char>::equal[abi:ne180100]((_QWORD **)a2, &v13);
        }
      }
    }
  }
  return result;
}

uint64_t boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_object(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  _BYTE *v4;
  int v5;
  uint64_t v6;
  unsigned __int8 *v7;
  int v8;
  _BYTE *v10;
  int v11;
  uint64_t v12;

  v2 = a1 + 16;
  while ((boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::have<boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::DoNothing>(v2, (uint64_t (*)(_QWORD *, _QWORD))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_ws, 0) & 1) != 0);
  v3 = (_QWORD *)(a1 + 24);
  if ((std::istreambuf_iterator<char>::equal[abi:ne180100]((_QWORD **)(a1 + 24), (_QWORD **)(a1 + 32)) & 1) != 0)
    return 0;
  v4 = *(_BYTE **)(*v3 + 24);
  v5 = v4 == *(_BYTE **)(*v3 + 32)
     ? (*(unsigned __int8 (**)(_QWORD))(*(_QWORD *)*v3 + 72))(*v3)
     : *v4;
  if (v5 != 123)
    return 0;
  if (*(_QWORD *)(*v3 + 24) == *(_QWORD *)(*v3 + 32))
    (*(void (**)(_QWORD))(*(_QWORD *)*v3 + 72))(*v3);
  boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::next(v2);
  v6 = *(_QWORD *)a1;
  boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::new_tree(*(_QWORD *)a1);
  *(_DWORD *)(*(_QWORD *)(v6 + 64) - 16) = 1;
  while ((boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::have<boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::DoNothing>(v2, (uint64_t (*)(_QWORD *, _QWORD))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_ws, 0) & 1) != 0);
  if ((std::istreambuf_iterator<char>::equal[abi:ne180100]((_QWORD **)(a1 + 24), (_QWORD **)(a1 + 32)) & 1) != 0
    || ((v7 = *(unsigned __int8 **)(*v3 + 24), v7 == *(unsigned __int8 **)(*v3 + 32))
      ? (v8 = (*(unsigned __int8 (**)(_QWORD))(*(_QWORD *)*v3 + 72))(*v3))
      : (v8 = *v7),
        v8 != 125))
  {
    while (1)
    {
      if ((boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_string(a1) & 1) == 0)
        boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_error(v2, "expected key string");
      while ((boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::have<boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::DoNothing>(v2, (uint64_t (*)(_QWORD *, _QWORD))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_ws, 0) & 1) != 0);
      boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::expect(v2, (uint64_t (*)(_QWORD *, _QWORD))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_colon, 0, "expected ':'");
      boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_value(a1);
      while ((boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::have<boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::DoNothing>(v2, (uint64_t (*)(_QWORD *, _QWORD))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_ws, 0) & 1) != 0);
      if ((std::istreambuf_iterator<char>::equal[abi:ne180100]((_QWORD **)(a1 + 24), (_QWORD **)(a1 + 32)) & 1) != 0)
        break;
      v10 = *(_BYTE **)(*v3 + 24);
      v11 = v10 == *(_BYTE **)(*v3 + 32)
          ? (*(unsigned __int8 (**)(_QWORD))(*(_QWORD *)*v3 + 72))(*v3)
          : *v10;
      if (v11 != 44)
        break;
      if (*(_QWORD *)(*v3 + 24) == *(_QWORD *)(*v3 + 32))
        (*(void (**)(_QWORD))(*(_QWORD *)*v3 + 72))(*v3);
      boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::next(v2);
    }
    boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::expect(v2, (uint64_t (*)(_QWORD *, _QWORD))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_close_brace, 0, "expected '}' or ','");
  }
  else
  {
    if (*(_QWORD *)(*v3 + 24) == *(_QWORD *)(*v3 + 32))
      (*(void (**)(_QWORD))(*(_QWORD *)*v3 + 72))(*v3);
    boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::next(v2);
  }
  v12 = *(_QWORD *)(*(_QWORD *)a1 + 64);
  if (*(_DWORD *)(v12 - 16) == 3)
    v12 -= 16;
  *(_QWORD *)(*(_QWORD *)a1 + 64) = v12 - 16;
  return 1;
}

uint64_t boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_array(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  _BYTE *v4;
  int v5;
  uint64_t v6;
  unsigned __int8 *v7;
  int v8;
  _BYTE *v10;
  int v11;
  uint64_t v12;

  v2 = a1 + 16;
  while ((boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::have<boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::DoNothing>(v2, (uint64_t (*)(_QWORD *, _QWORD))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_ws, 0) & 1) != 0);
  v3 = (_QWORD *)(a1 + 24);
  if ((std::istreambuf_iterator<char>::equal[abi:ne180100]((_QWORD **)(a1 + 24), (_QWORD **)(a1 + 32)) & 1) != 0)
    return 0;
  v4 = *(_BYTE **)(*v3 + 24);
  v5 = v4 == *(_BYTE **)(*v3 + 32)
     ? (*(unsigned __int8 (**)(_QWORD))(*(_QWORD *)*v3 + 72))(*v3)
     : *v4;
  if (v5 != 91)
    return 0;
  if (*(_QWORD *)(*v3 + 24) == *(_QWORD *)(*v3 + 32))
    (*(void (**)(_QWORD))(*(_QWORD *)*v3 + 72))(*v3);
  boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::next(v2);
  v6 = *(_QWORD *)a1;
  boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::new_tree(*(_QWORD *)a1);
  *(_DWORD *)(*(_QWORD *)(v6 + 64) - 16) = 0;
  while ((boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::have<boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::DoNothing>(v2, (uint64_t (*)(_QWORD *, _QWORD))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_ws, 0) & 1) != 0);
  if ((std::istreambuf_iterator<char>::equal[abi:ne180100]((_QWORD **)(a1 + 24), (_QWORD **)(a1 + 32)) & 1) != 0
    || ((v7 = *(unsigned __int8 **)(*v3 + 24), v7 == *(unsigned __int8 **)(*v3 + 32))
      ? (v8 = (*(unsigned __int8 (**)(_QWORD))(*(_QWORD *)*v3 + 72))(*v3))
      : (v8 = *v7),
        v8 != 93))
  {
    while (1)
    {
      boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_value(a1);
      while ((boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::have<boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::DoNothing>(v2, (uint64_t (*)(_QWORD *, _QWORD))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_ws, 0) & 1) != 0);
      if ((std::istreambuf_iterator<char>::equal[abi:ne180100]((_QWORD **)(a1 + 24), (_QWORD **)(a1 + 32)) & 1) != 0)
        break;
      v10 = *(_BYTE **)(*v3 + 24);
      v11 = v10 == *(_BYTE **)(*v3 + 32)
          ? (*(unsigned __int8 (**)(_QWORD))(*(_QWORD *)*v3 + 72))(*v3)
          : *v10;
      if (v11 != 44)
        break;
      if (*(_QWORD *)(*v3 + 24) == *(_QWORD *)(*v3 + 32))
        (*(void (**)(_QWORD))(*(_QWORD *)*v3 + 72))(*v3);
      boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::next(v2);
    }
    boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::expect(v2, (uint64_t (*)(_QWORD *, _QWORD))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_close_bracket, 0, "expected ']' or ','");
  }
  else
  {
    if (*(_QWORD *)(*v3 + 24) == *(_QWORD *)(*v3 + 32))
      (*(void (**)(_QWORD))(*(_QWORD *)*v3 + 72))(*v3);
    boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::next(v2);
  }
  v12 = *(_QWORD *)(*(_QWORD *)a1 + 64);
  if (*(_DWORD *)(v12 - 16) == 3)
    v12 -= 16;
  *(_QWORD *)(*(_QWORD *)a1 + 64) = v12 - 16;
  return 1;
}

uint64_t boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_string(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  _BYTE *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 *v8;
  int v9;
  _QWORD *v10;
  _QWORD v12[4];
  _QWORD v13[3];

  v2 = a1 + 16;
  while ((boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::have<boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::DoNothing>(v2, (uint64_t (*)(_QWORD *, _QWORD))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_ws, 0) & 1) != 0);
  v3 = (_QWORD *)(a1 + 24);
  if ((std::istreambuf_iterator<char>::equal[abi:ne180100]((_QWORD **)(a1 + 24), (_QWORD **)(a1 + 32)) & 1) != 0)
    return 0;
  v4 = *(_BYTE **)(*v3 + 24);
  v5 = v4 == *(_BYTE **)(*v3 + 32)
     ? (*(unsigned __int8 (**)(_QWORD))(*(_QWORD *)*v3 + 72))(*v3)
     : *v4;
  if (v5 != 34)
    return 0;
  if (*(_QWORD *)(*v3 + 24) == *(_QWORD *)(*v3 + 32))
    (*(void (**)(_QWORD))(*(_QWORD *)*v3 + 72))(*v3);
  boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::next(v2);
  boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::new_value(*(_QWORD *)a1);
  v7 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  while (boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::need_cur(v2, "unterminated string") != 34)
  {
    v8 = *(unsigned __int8 **)(*v3 + 24);
    if (v8 == *(unsigned __int8 **)(*v3 + 32))
      v9 = (*(unsigned __int8 (**)(_QWORD))(*(_QWORD *)*v3 + 72))(*v3);
    else
      v9 = *v8;
    if (v9 == 92)
    {
      boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::next(v2);
      boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_escape((uint64_t *)a1);
    }
    else
    {
      v10 = *(_QWORD **)(a1 + 32);
      v13[0] = boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::on_code_unit;
      v13[1] = 0;
      v13[2] = v7;
      v12[0] = boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_error;
      v12[1] = 0;
      v12[2] = a1;
      v12[3] = "invalid code sequence";
      boost::property_tree::json_parser::detail::utf8_utf8_encoding::transcode_codepoint<std::istreambuf_iterator<char>,std::istreambuf_iterator<char>,boost::_bi::bind_t<void,boost::_mfi::mf1<void,boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,char>,boost::_bi::list2<boost::reference_wrapper<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>,boost::arg<1>>>,boost::_bi::bind_t<void,boost::_mfi::mf1<void,boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>,char const*>,boost::_bi::list2<boost::_bi::value<boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>*>,boost::_bi::value<char const*>>>>(v6, (_QWORD **)(a1 + 24), v10, (uint64_t)v13, (uint64_t)v12);
    }
  }
  boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::next(v2);
  return 1;
}

uint64_t boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_BOOLean(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  _BYTE *v4;
  int v5;
  char *v6;
  const char *v7;
  _BYTE *v8;
  int v9;
  uint64_t v10;

  v2 = a1 + 16;
  while ((boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::have<boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::DoNothing>(v2, (uint64_t (*)(_QWORD *, _QWORD))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_ws, 0) & 1) != 0);
  v3 = (_QWORD *)(a1 + 24);
  if ((std::istreambuf_iterator<char>::equal[abi:ne180100]((_QWORD **)(a1 + 24), (_QWORD **)(a1 + 32)) & 1) == 0)
  {
    v4 = *(_BYTE **)(*v3 + 24);
    v5 = v4 == *(_BYTE **)(*v3 + 32)
       ? (*(unsigned __int8 (**)(_QWORD))(*(_QWORD *)*v3 + 72))(*v3)
       : *v4;
    if (v5 == 116)
    {
      if (*(_QWORD *)(*v3 + 24) == *(_QWORD *)(*v3 + 32))
        (*(void (**)(_QWORD))(*(_QWORD *)*v3 + 72))(*v3);
      boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::next(v2);
      v6 = "expected 'true'";
      boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::expect(v2, (uint64_t (*)(_QWORD *, _QWORD))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_r, 0, "expected 'true'");
      boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::expect(v2, (uint64_t (*)(_QWORD *, _QWORD))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_u, 0, "expected 'true'");
      v7 = "true";
LABEL_19:
      boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::expect(v2, (uint64_t (*)(_QWORD *, _QWORD))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_e, 0, v6);
      v10 = boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::new_value(*(_QWORD *)a1);
      MEMORY[0x219A19390](v10, v7);
      return 1;
    }
  }
  if ((std::istreambuf_iterator<char>::equal[abi:ne180100]((_QWORD **)(a1 + 24), (_QWORD **)(a1 + 32)) & 1) == 0)
  {
    v8 = *(_BYTE **)(*v3 + 24);
    v9 = v8 == *(_BYTE **)(*v3 + 32)
       ? (*(unsigned __int8 (**)(_QWORD))(*(_QWORD *)*v3 + 72))(*v3)
       : *v8;
    if (v9 == 102)
    {
      if (*(_QWORD *)(*v3 + 24) == *(_QWORD *)(*v3 + 32))
        (*(void (**)(_QWORD))(*(_QWORD *)*v3 + 72))(*v3);
      boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::next(v2);
      v6 = "expected 'false'";
      boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::expect(v2, (uint64_t (*)(_QWORD *, _QWORD))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_a, 0, "expected 'false'");
      boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::expect(v2, (uint64_t (*)(_QWORD *, _QWORD))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_l, 0, "expected 'false'");
      boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::expect(v2, (uint64_t (*)(_QWORD *, _QWORD))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_s, 0, "expected 'false'");
      v7 = "false";
      goto LABEL_19;
    }
  }
  return 0;
}

uint64_t boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_null(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  _BYTE *v4;
  int v5;
  uint64_t v6;

  v2 = a1 + 16;
  while ((boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::have<boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::DoNothing>(v2, (uint64_t (*)(_QWORD *, _QWORD))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_ws, 0) & 1) != 0);
  v3 = (_QWORD *)(a1 + 24);
  if ((std::istreambuf_iterator<char>::equal[abi:ne180100]((_QWORD **)(a1 + 24), (_QWORD **)(a1 + 32)) & 1) != 0)
    return 0;
  v4 = *(_BYTE **)(*v3 + 24);
  v5 = v4 == *(_BYTE **)(*v3 + 32)
     ? (*(unsigned __int8 (**)(_QWORD))(*(_QWORD *)*v3 + 72))(*v3)
     : *v4;
  if (v5 != 110)
    return 0;
  if (*(_QWORD *)(*v3 + 24) == *(_QWORD *)(*v3 + 32))
    (*(void (**)(_QWORD))(*(_QWORD *)*v3 + 72))(*v3);
  boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::next(v2);
  boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::expect(v2, (uint64_t (*)(_QWORD *, _QWORD))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_u, 0, "expected 'null'");
  boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::expect(v2, (uint64_t (*)(_QWORD *, _QWORD))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_l, 0, "expected 'null'");
  boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::expect(v2, (uint64_t (*)(_QWORD *, _QWORD))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_l, 0, "expected 'null'");
  v6 = boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::new_value(*(_QWORD *)a1);
  MEMORY[0x219A19390](v6, "null");
  return 1;
}

uint64_t boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_number(__int128 *a1)
{
  uint64_t v2;
  int v3;
  __int128 v5;
  char v6;

  v2 = (uint64_t)(a1 + 1);
  while ((boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::have<boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::DoNothing>(v2, (uint64_t (*)(_QWORD *, _QWORD))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_ws, 0) & 1) != 0);
  v5 = *a1;
  v6 = 1;
  v3 = boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::have<boost::property_tree::json_parser::detail::number_callback_adapter<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::input_iterator_tag>>(v2, (uint64_t (*)(_QWORD *, _QWORD))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_minus, 0, (uint64_t)&v5);
  if ((boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::have<boost::property_tree::json_parser::detail::number_callback_adapter<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::input_iterator_tag>>(v2, (uint64_t (*)(_QWORD *, _QWORD))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_0, 0, (uint64_t)&v5) & 1) != 0|| (boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_int_part((uint64_t)a1, (uint64_t)&v5) & 1) != 0)
  {
    boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_frac_part((uint64_t)a1, (uint64_t)&v5);
    boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_exp_part((uint64_t)a1, (uint64_t)&v5);
    return 1;
  }
  else
  {
    if (v3)
      boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_error(v2, "expected digits after -");
    return 0;
  }
}

void boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_error(uint64_t a1, char *a2)
{
  boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_error(a1 + 16, a2);
}

BOOL boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_close_brace(boost::property_tree::json_parser::detail::external_ascii_superset_encoding *this, int a2)
{
  return a2 == 125;
}

BOOL boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_colon(boost::property_tree::json_parser::detail::external_ascii_superset_encoding *this, int a2)
{
  return a2 == 58;
}

uint64_t boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_ws(boost::property_tree::json_parser::detail::external_ascii_superset_encoding *this, unsigned int a2)
{
  return (a2 < 0x21) & (0x100002600uLL >> a2);
}

uint64_t boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::have<boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::DoNothing>(uint64_t a1, uint64_t (*a2)(_QWORD *, _QWORD), uint64_t a3)
{
  _QWORD *v6;
  uint64_t result;
  _QWORD *v8;
  char *v9;
  char v10;

  v6 = (_QWORD *)(a1 + 8);
  if ((std::istreambuf_iterator<char>::equal[abi:ne180100]((_QWORD **)(a1 + 8), (_QWORD **)(a1 + 16)) & 1) != 0)
    return 0;
  v8 = (_QWORD *)(*(_QWORD *)a1 + (a3 >> 1));
  if ((a3 & 1) != 0)
    a2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v8 + a2);
  v9 = *(char **)(*v6 + 24);
  if (v9 == *(char **)(*v6 + 32))
    v10 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v6 + 72))(*v6);
  else
    v10 = *v9;
  result = a2(v8, v10);
  if ((_DWORD)result)
  {
    if (*(_QWORD *)(*v6 + 24) == *(_QWORD *)(*v6 + 32))
      (*(void (**)(_QWORD))(*(_QWORD *)*v6 + 72))(*v6);
    boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::next(a1);
    return 1;
  }
  return result;
}

_QWORD *boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::next(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 *v3;
  int v4;
  _QWORD *result;
  uint64_t v6;

  v2 = *(_QWORD **)(a1 + 8);
  v3 = (unsigned __int8 *)v2[3];
  if (v3 == (unsigned __int8 *)v2[4])
    v4 = (*(unsigned __int8 (**)(_QWORD *))(*v2 + 72))(v2);
  else
    v4 = *v3;
  if (v4 == 10)
    *(_QWORD *)(a1 + 48) = (*(_DWORD *)(a1 + 48) + 1);
  else
    ++*(_DWORD *)(a1 + 52);
  result = *(_QWORD **)(a1 + 8);
  v6 = result[3];
  if (v6 == result[4])
    return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 80))(result);
  result[3] = v6 + 1;
  return result;
}

uint64_t boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::new_tree(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  char **v4;
  _QWORD *v5;
  BOOL v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  std::string __p;
  _BYTE v55[32];
  __int128 v56;
  char v57;
  _BYTE v58[32];

  v1 = a1;
  v2 = *(_QWORD **)(a1 + 56);
  v3 = *(_QWORD **)(a1 + 64);
  v4 = (char **)(a1 + 56);
  if (v2 != v3)
  {
    v5 = v3 - 2;
    while (*(_DWORD *)v5 == 3)
    {
      *(_QWORD *)(a1 + 64) = v5;
      v6 = v5 == v2;
      v5 -= 2;
      if (v6)
        goto LABEL_6;
    }
    if (*(_DWORD *)v5)
    {
      v31 = v5[1];
      v49 = 0uLL;
      v50 = 0;
      v32 = operator new();
      v33 = operator new(0x60uLL);
      *(_QWORD *)(v32 + 8) = v33;
      v33[7] = 0;
      v33[8] = v33 + 7;
      v33[9] = v33 + 7;
      v33[10] = v33 + 10;
      v33[11] = v33 + 10;
      *(_QWORD *)(v32 + 24) = 0;
      v51 = v32;
      std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::pair[abi:ne180100]<std::string&,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>,0>(&__p, (__int128 *)(v1 + 32), &v49);
      std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::pair[abi:ne180100]<std::string,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>,0>((uint64_t)&v56, (__int128 *)&__p);
      boost::multi_index::detail::sequenced_index<boost::multi_index::detail::nth_layer<1,std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>,boost::mpl::vector0<mpl_::na>>::insert(*(_QWORD *)(v31 + 24) + 16, *(_QWORD *)(*(_QWORD *)(v31 + 24) + 8), &v56);
      boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::~basic_ptree((uint64_t)v58);
      if (v57 < 0)
        operator delete((void *)v56);
      boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::~basic_ptree((uint64_t)v55);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::~basic_ptree((uint64_t)&v49);
      *(_DWORD *)v5 = 1;
      v34 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5[1] + 24) + 8) + 80);
      if (v34)
        v35 = v34 - 80;
      else
        v35 = 0;
      v15 = v35 + 24;
      v36 = *(_QWORD *)(v1 + 72);
      v17 = *(_QWORD **)(v1 + 64);
      if ((unint64_t)v17 >= v36)
      {
        v38 = ((char *)v17 - *v4) >> 4;
        v39 = v38 + 1;
        if (!((unint64_t)(v38 + 1) >> 60))
        {
          v40 = v36 - (_QWORD)*v4;
          if (v40 >> 3 > v39)
            v39 = v40 >> 3;
          if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF0)
            v41 = 0xFFFFFFFFFFFFFFFLL;
          else
            v41 = v39;
          if (v41)
            v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::flexible_type>>(v1 + 72, v41);
          else
            v42 = 0;
          v43 = &v42[16 * v38];
          v44 = &v42[16 * v41];
          *(_QWORD *)v43 = 3;
          *((_QWORD *)v43 + 1) = v15;
          v37 = v43 + 16;
          v46 = *(char **)(v1 + 56);
          v45 = *(char **)(v1 + 64);
          if (v45 == v46)
            goto LABEL_63;
          do
          {
            *((_OWORD *)v43 - 1) = *((_OWORD *)v45 - 1);
            v43 -= 16;
            v45 -= 16;
          }
          while (v45 != v46);
          goto LABEL_62;
        }
LABEL_67:
        std::vector<float>::__throw_length_error[abi:ne180100]();
      }
    }
    else
    {
      v10 = v5[1];
      v52 = 0uLL;
      v53 = 0;
      v49 = 0uLL;
      v50 = 0;
      v11 = operator new();
      v12 = operator new(0x60uLL);
      *(_QWORD *)(v11 + 8) = v12;
      v12[7] = 0;
      v12[8] = v12 + 7;
      v12[9] = v12 + 7;
      v12[10] = v12 + 10;
      v12[11] = v12 + 10;
      *(_QWORD *)(v11 + 24) = 0;
      v51 = v11;
      std::pair<std::string,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::pair[abi:ne180100]<std::string,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>,0>((uint64_t)&__p, &v52, &v49);
      std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::pair[abi:ne180100]<std::string,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>,0>((uint64_t)&v56, (__int128 *)&__p);
      boost::multi_index::detail::sequenced_index<boost::multi_index::detail::nth_layer<1,std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>,boost::mpl::vector0<mpl_::na>>::insert(*(_QWORD *)(v10 + 24) + 16, *(_QWORD *)(*(_QWORD *)(v10 + 24) + 8), &v56);
      boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::~basic_ptree((uint64_t)v58);
      if (v57 < 0)
        operator delete((void *)v56);
      boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::~basic_ptree((uint64_t)v55);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::~basic_ptree((uint64_t)&v49);
      if (SHIBYTE(v53) < 0)
        operator delete((void *)v52);
      v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5[1] + 24) + 8) + 80);
      if (v13)
        v14 = v13 - 80;
      else
        v14 = 0;
      v15 = v14 + 24;
      v16 = *(_QWORD *)(v1 + 72);
      v17 = *(_QWORD **)(v1 + 64);
      if ((unint64_t)v17 >= v16)
      {
        v18 = ((char *)v17 - *v4) >> 4;
        v19 = v18 + 1;
        if (!((unint64_t)(v18 + 1) >> 60))
        {
          v20 = v16 - (_QWORD)*v4;
          if (v20 >> 3 > v19)
            v19 = v20 >> 3;
          if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0)
            v21 = 0xFFFFFFFFFFFFFFFLL;
          else
            v21 = v19;
          if (v21)
            v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::flexible_type>>(v1 + 72, v21);
          else
            v22 = 0;
          v43 = &v22[16 * v18];
          v44 = &v22[16 * v21];
          *(_QWORD *)v43 = 3;
          *((_QWORD *)v43 + 1) = v15;
          v37 = v43 + 16;
          v47 = *(char **)(v1 + 56);
          v45 = *(char **)(v1 + 64);
          if (v45 == v47)
            goto LABEL_63;
          do
          {
            *((_OWORD *)v43 - 1) = *((_OWORD *)v45 - 1);
            v43 -= 16;
            v45 -= 16;
          }
          while (v45 != v47);
LABEL_62:
          v45 = *v4;
LABEL_63:
          *(_QWORD *)(v1 + 56) = v43;
          *(_QWORD *)(v1 + 64) = v37;
          *(_QWORD *)(v1 + 72) = v44;
          if (v45)
            operator delete(v45);
          goto LABEL_65;
        }
        goto LABEL_67;
      }
    }
    *v17 = 3;
    v17[1] = v15;
    v37 = v17 + 2;
LABEL_65:
    *(_QWORD *)(v1 + 64) = v37;
    return *(v37 - 1);
  }
LABEL_6:
  v7 = a1 + 72;
  v8 = *(_QWORD *)(v1 + 72);
  if ((unint64_t)v2 >= v8)
  {
    v23 = v8 - (_QWORD)v2;
    v24 = v23 >> 3;
    if ((unint64_t)(v23 >> 3) <= 1)
      v24 = 1;
    if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF0)
      v25 = 0xFFFFFFFFFFFFFFFLL;
    else
      v25 = v24;
    v26 = std::__allocate_at_least[abi:ne180100]<std::allocator<turi::flexible_type>>(v7, v25);
    v28 = &v26[2 * v27];
    *v26 = 3;
    v26[1] = v1;
    v9 = v26 + 2;
    v30 = *(char **)(v1 + 56);
    v29 = *(char **)(v1 + 64);
    if (v29 != v30)
    {
      do
      {
        *((_OWORD *)v26 - 1) = *((_OWORD *)v29 - 1);
        v26 -= 2;
        v29 -= 16;
      }
      while (v29 != v30);
      v29 = *v4;
    }
    *(_QWORD *)(v1 + 56) = v26;
    *(_QWORD *)(v1 + 64) = v9;
    *(_QWORD *)(v1 + 72) = v28;
    if (v29)
      operator delete(v29);
  }
  else
  {
    *v2 = 3;
    v2[1] = v1;
    v9 = v2 + 2;
  }
  *(_QWORD *)(v1 + 64) = v9;
  return v1;
}

void sub_218188EB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  uint64_t v23;

  std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::~pair(v23 - 104);
  std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::~pair((uint64_t)&a23);
  boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::~basic_ptree((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::pair[abi:ne180100]<std::string,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>,0>(uint64_t a1, __int128 *a2, __int128 *a3)
{
  __int128 v5;
  __int128 v6;
  uint64_t v7;

  v5 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v5;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 24), *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v6 = *a3;
    *(_QWORD *)(a1 + 40) = *((_QWORD *)a3 + 2);
    *(_OWORD *)(a1 + 24) = v6;
  }
  v7 = operator new();
  boost::multi_index::multi_index_container<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>::multi_index_container(v7, *((_QWORD *)a3 + 3));
  *(_QWORD *)(a1 + 48) = v7;
  return a1;
}

void sub_218189018(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::expect(uint64_t a1, uint64_t (*a2)(_QWORD *, _QWORD), uint64_t a3, char *a4)
{
  uint64_t result;

  result = boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::have<boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::DoNothing>(a1, a2, a3);
  if ((result & 1) == 0)
    boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_error(a1, a4);
  return result;
}

void boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_error(uint64_t a1, char *a2)
{
  _QWORD v3[3];
  _QWORD v4[9];

  std::string::basic_string[abi:ne180100]<0>(v3, a2);
  boost::property_tree::file_parser_error::file_parser_error((uint64_t)v4, (uint64_t)v3, (__int128 *)(a1 + 24), *(int *)(a1 + 48));
  v4[0] = &unk_24D9310D0;
  boost::exception_detail::throw_exception_<boost::property_tree::json_parser::json_parser_error>((uint64_t)v4, (uint64_t)"void boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>, std::istreambuf_iterator<char>, std::istreambuf_iterator<char>>::parse_error(const char *) [Encoding = boost::property_tree::json_parser::detail::encoding<char>, Iterator = std::istreambuf_iterator<char>, Sentinel = std::istreambuf_iterator<char>]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/external/boost/boost_1_68_0/boost/property_tree/json_parser/detail/parser.hpp", 47);
}

void sub_21818910C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::runtime_error a15)
{
  boost::property_tree::file_parser_error::~file_parser_error(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void boost::exception_detail::throw_exception_<boost::property_tree::json_parser::json_parser_error>(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  _QWORD v7[13];
  int v8;

  boost::exception_detail::error_info_injector<boost::property_tree::json_parser::json_parser_error>::error_info_injector((uint64_t)v7, a1);
  v7[11] = a2;
  v7[12] = a3;
  v8 = a4;
  boost::throw_exception<boost::exception_detail::error_info_injector<boost::property_tree::json_parser::json_parser_error>>((uint64_t)v7);
}

void sub_218189178(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::runtime_error a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18)
{
  a17 = &unk_24D918C48;
  if (a18)
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a18 + 32))(a18))
      a18 = 0;
  }
  boost::property_tree::file_parser_error::~file_parser_error(&a9);
  _Unwind_Resume(a1);
}

void boost::throw_exception<boost::exception_detail::error_info_injector<boost::property_tree::json_parser::json_parser_error>>(uint64_t a1)
{
  void *exception;
  _BYTE v3[112];

  exception = __cxa_allocate_exception(0x78uLL);
  boost::exception_detail::error_info_injector<boost::property_tree::json_parser::json_parser_error>::error_info_injector((uint64_t)v3, a1);
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::property_tree::json_parser::json_parser_error>>::clone_impl((uint64_t)exception, (uint64_t)v3);
}

void sub_218189220(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::runtime_error a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18)
{
  void *v18;
  int v19;

  a17 = &unk_24D918C48;
  if (a18 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a18 + 32))(a18))
    a18 = 0;
  boost::property_tree::file_parser_error::~file_parser_error(&a9);
  if (v19)
    __cxa_free_exception(v18);
  _Unwind_Resume(a1);
}

uint64_t boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::property_tree::json_parser::json_parser_error>>::clone_impl(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;

  *(_QWORD *)(a1 + 112) = &unk_24D918BA8;
  v4 = (_QWORD *)boost::exception_detail::error_info_injector<boost::property_tree::json_parser::json_parser_error>::error_info_injector(a1, a2);
  *v4 = &unk_24D930FE8;
  v4[9] = &unk_24D931020;
  *(_QWORD *)(a1 + 112) = &unk_24D931058;
  boost::exception_detail::copy_boost_exception((uint64_t)(v4 + 9), a2 + 72);
  return a1;
}

void sub_2181892DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 72) = &unk_24D918C48;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(v1 + 80));
  boost::property_tree::file_parser_error::~file_parser_error((std::runtime_error *)v1);
  _Unwind_Resume(a1);
}

uint64_t boost::exception_detail::error_info_injector<boost::property_tree::json_parser::json_parser_error>::error_info_injector(uint64_t a1, uint64_t a2)
{
  std::runtime_error *v4;
  std::runtime_error v5;
  std::string *v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;

  v4 = std::runtime_error::runtime_error((std::runtime_error *)a1, (const std::runtime_error *)a2);
  v4->__vftable = (std::runtime_error_vtbl *)&unk_24D92F840;
  if (*(char *)(a2 + 39) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v4[1], *(const std::string::value_type **)(a2 + 16), *(_QWORD *)(a2 + 24));
  }
  else
  {
    v5 = *(std::runtime_error *)(a2 + 16);
    v4[2].__vftable = *(std::runtime_error_vtbl **)(a2 + 32);
    v4[1] = v5;
  }
  v6 = (std::string *)(a1 + 40);
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(a2 + 40), *(_QWORD *)(a2 + 48));
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  v8 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)a1 = &unk_24D9310D0;
  *(_QWORD *)(a1 + 64) = v8;
  *(_QWORD *)(a1 + 72) = &unk_24D918C48;
  v9 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 80) = v9;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9);
  v10 = *(_OWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = v10;
  *(_QWORD *)a1 = &unk_24D931088;
  *(_QWORD *)(a1 + 72) = &unk_24D9310B0;
  return a1;
}

{
  std::runtime_error *v4;
  std::runtime_error v5;
  std::string *v6;
  __int128 v7;
  uint64_t v8;

  v4 = std::runtime_error::runtime_error((std::runtime_error *)a1, (const std::runtime_error *)a2);
  v4->__vftable = (std::runtime_error_vtbl *)&unk_24D92F840;
  if (*(char *)(a2 + 39) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v4[1], *(const std::string::value_type **)(a2 + 16), *(_QWORD *)(a2 + 24));
  }
  else
  {
    v5 = *(std::runtime_error *)(a2 + 16);
    v4[2].__vftable = *(std::runtime_error_vtbl **)(a2 + 32);
    v4[1] = v5;
  }
  v6 = (std::string *)(a1 + 40);
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(a2 + 40), *(_QWORD *)(a2 + 48));
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  v8 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 104) = -1;
  *(_QWORD *)a1 = &unk_24D931088;
  *(_QWORD *)(a1 + 64) = v8;
  *(_QWORD *)(a1 + 72) = &unk_24D9310B0;
  return a1;
}

void sub_218189408(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 39) < 0)
    operator delete(*v2);
  std::runtime_error::~runtime_error((std::runtime_error *)v1);
  _Unwind_Resume(a1);
}

char *boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::property_tree::json_parser::json_parser_error>>::clone(uint64_t a1)
{
  _QWORD *v2;

  v2 = (_QWORD *)operator new();
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::property_tree::json_parser::json_parser_error>>::clone_impl((uint64_t)v2, a1);
  return (char *)v2 + *(_QWORD *)(*v2 - 24);
}

void sub_218189490(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10F3C4066575A4CLL);
  _Unwind_Resume(a1);
}

void boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::property_tree::json_parser::json_parser_error>>::rethrow(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x78uLL);
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::property_tree::json_parser::json_parser_error>>::clone_impl((uint64_t)exception, a1);
}

void sub_2181894F0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *`virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::property_tree::json_parser::json_parser_error>>::clone(_QWORD *a1)
{
  return boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::property_tree::json_parser::json_parser_error>>::clone((uint64_t)a1 + *(_QWORD *)(*a1 - 24));
}

void `virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::property_tree::json_parser::json_parser_error>>::rethrow(_QWORD *a1)
{
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::property_tree::json_parser::json_parser_error>>::rethrow((uint64_t)a1 + *(_QWORD *)(*a1 - 32));
}

_QWORD *boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::property_tree::json_parser::json_parser_error>>::clone_impl(uint64_t a1, uint64_t a2)
{
  _QWORD *result;

  *(_QWORD *)(a1 + 112) = &unk_24D918BA8;
  result = (_QWORD *)boost::exception_detail::error_info_injector<boost::property_tree::json_parser::json_parser_error>::error_info_injector(a1, a2);
  *result = &unk_24D930FE8;
  result[9] = &unk_24D931020;
  result[14] = &unk_24D931058;
  return result;
}

void sub_218189630(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 39) < 0)
    operator delete(*v2);
  std::runtime_error::~runtime_error((std::runtime_error *)v1);
  _Unwind_Resume(a1);
}

BOOL boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_close_bracket(boost::property_tree::json_parser::detail::external_ascii_superset_encoding *this, int a2)
{
  return a2 == 93;
}

BOOL boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_backslash(boost::property_tree::json_parser::detail::external_ascii_superset_encoding *this, int a2)
{
  return a2 == 92;
}

void boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_escape(uint64_t *a1)
{
  uint64_t v2;
  _QWORD **v3;
  _QWORD **v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  std::string *v8;
  _BYTE *v9;
  int v10;
  uint64_t v11;
  _BYTE *v12;
  int v13;
  std::string::value_type v14;
  uint64_t v15;
  _BYTE *v16;
  int v17;
  uint64_t v18;
  _BYTE *v19;
  int v20;
  uint64_t v21;
  _BYTE *v22;
  int v23;
  uint64_t v24;
  _BYTE *v25;
  int v26;
  uint64_t v27;
  _BYTE *v28;
  int v29;
  uint64_t v30;
  unsigned __int8 *v31;
  int v32;

  v2 = (uint64_t)(a1 + 2);
  v3 = (_QWORD **)(a1 + 3);
  v4 = (_QWORD **)(a1 + 4);
  if ((std::istreambuf_iterator<char>::equal[abi:ne180100]((_QWORD **)a1 + 3, (_QWORD **)a1 + 4) & 1) == 0)
  {
    v5 = (_BYTE *)(*v3)[3];
    v6 = v5 == (_BYTE *)(*v3)[4] ? (*(unsigned __int8 (**)(_QWORD))(**v3 + 72))(*v3) : *v5;
    if (v6 == 34)
    {
      if ((*v3)[3] == (*v3)[4])
        (*(void (**)(_QWORD))(**v3 + 72))(*v3);
      boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::next(v2);
      v7 = *(_QWORD *)(*a1 + 64);
      if (*(_DWORD *)(v7 - 16) == 2)
        v8 = (std::string *)(*a1 + 32);
      else
        v8 = *(std::string **)(v7 - 8);
      v14 = 34;
LABEL_98:
      std::string::push_back(v8, v14);
      return;
    }
  }
  if ((std::istreambuf_iterator<char>::equal[abi:ne180100](v3, v4) & 1) == 0)
  {
    v9 = (_BYTE *)(*v3)[3];
    v10 = v9 == (_BYTE *)(*v3)[4]
        ? (*(unsigned __int8 (**)(_QWORD))(**v3 + 72))(*v3)
        : *v9;
    if (v10 == 92)
    {
      if ((*v3)[3] == (*v3)[4])
        (*(void (**)(_QWORD))(**v3 + 72))(*v3);
      boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::next(v2);
      v11 = *(_QWORD *)(*a1 + 64);
      if (*(_DWORD *)(v11 - 16) == 2)
        v8 = (std::string *)(*a1 + 32);
      else
        v8 = *(std::string **)(v11 - 8);
      v14 = 92;
      goto LABEL_98;
    }
  }
  if ((std::istreambuf_iterator<char>::equal[abi:ne180100](v3, v4) & 1) == 0)
  {
    v12 = (_BYTE *)(*v3)[3];
    v13 = v12 == (_BYTE *)(*v3)[4]
        ? (*(unsigned __int8 (**)(_QWORD))(**v3 + 72))(*v3)
        : *v12;
    if (v13 == 47)
    {
      if ((*v3)[3] == (*v3)[4])
        (*(void (**)(_QWORD))(**v3 + 72))(*v3);
      boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::next(v2);
      v15 = *(_QWORD *)(*a1 + 64);
      if (*(_DWORD *)(v15 - 16) == 2)
        v8 = (std::string *)(*a1 + 32);
      else
        v8 = *(std::string **)(v15 - 8);
      v14 = 47;
      goto LABEL_98;
    }
  }
  if ((std::istreambuf_iterator<char>::equal[abi:ne180100](v3, v4) & 1) == 0)
  {
    v16 = (_BYTE *)(*v3)[3];
    v17 = v16 == (_BYTE *)(*v3)[4]
        ? (*(unsigned __int8 (**)(_QWORD))(**v3 + 72))(*v3)
        : *v16;
    if (v17 == 98)
    {
      if ((*v3)[3] == (*v3)[4])
        (*(void (**)(_QWORD))(**v3 + 72))(*v3);
      boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::next(v2);
      v18 = *(_QWORD *)(*a1 + 64);
      if (*(_DWORD *)(v18 - 16) == 2)
        v8 = (std::string *)(*a1 + 32);
      else
        v8 = *(std::string **)(v18 - 8);
      v14 = 8;
      goto LABEL_98;
    }
  }
  if ((std::istreambuf_iterator<char>::equal[abi:ne180100](v3, v4) & 1) == 0)
  {
    v19 = (_BYTE *)(*v3)[3];
    v20 = v19 == (_BYTE *)(*v3)[4]
        ? (*(unsigned __int8 (**)(_QWORD))(**v3 + 72))(*v3)
        : *v19;
    if (v20 == 102)
    {
      if ((*v3)[3] == (*v3)[4])
        (*(void (**)(_QWORD))(**v3 + 72))(*v3);
      boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::next(v2);
      v21 = *(_QWORD *)(*a1 + 64);
      if (*(_DWORD *)(v21 - 16) == 2)
        v8 = (std::string *)(*a1 + 32);
      else
        v8 = *(std::string **)(v21 - 8);
      v14 = 12;
      goto LABEL_98;
    }
  }
  if ((std::istreambuf_iterator<char>::equal[abi:ne180100](v3, v4) & 1) == 0)
  {
    v22 = (_BYTE *)(*v3)[3];
    v23 = v22 == (_BYTE *)(*v3)[4]
        ? (*(unsigned __int8 (**)(_QWORD))(**v3 + 72))(*v3)
        : *v22;
    if (v23 == 110)
    {
      if ((*v3)[3] == (*v3)[4])
        (*(void (**)(_QWORD))(**v3 + 72))(*v3);
      boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::next(v2);
      v24 = *(_QWORD *)(*a1 + 64);
      if (*(_DWORD *)(v24 - 16) == 2)
        v8 = (std::string *)(*a1 + 32);
      else
        v8 = *(std::string **)(v24 - 8);
      v14 = 10;
      goto LABEL_98;
    }
  }
  if ((std::istreambuf_iterator<char>::equal[abi:ne180100](v3, v4) & 1) == 0)
  {
    v25 = (_BYTE *)(*v3)[3];
    v26 = v25 == (_BYTE *)(*v3)[4]
        ? (*(unsigned __int8 (**)(_QWORD))(**v3 + 72))(*v3)
        : *v25;
    if (v26 == 114)
    {
      if ((*v3)[3] == (*v3)[4])
        (*(void (**)(_QWORD))(**v3 + 72))(*v3);
      boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::next(v2);
      v27 = *(_QWORD *)(*a1 + 64);
      if (*(_DWORD *)(v27 - 16) == 2)
        v8 = (std::string *)(*a1 + 32);
      else
        v8 = *(std::string **)(v27 - 8);
      v14 = 13;
      goto LABEL_98;
    }
  }
  if ((std::istreambuf_iterator<char>::equal[abi:ne180100](v3, v4) & 1) == 0)
  {
    v28 = (_BYTE *)(*v3)[3];
    v29 = v28 == (_BYTE *)(*v3)[4]
        ? (*(unsigned __int8 (**)(_QWORD))(**v3 + 72))(*v3)
        : *v28;
    if (v29 == 116)
    {
      if ((*v3)[3] == (*v3)[4])
        (*(void (**)(_QWORD))(**v3 + 72))(*v3);
      boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::next(v2);
      v30 = *(_QWORD *)(*a1 + 64);
      if (*(_DWORD *)(v30 - 16) == 2)
        v8 = (std::string *)(*a1 + 32);
      else
        v8 = *(std::string **)(v30 - 8);
      v14 = 9;
      goto LABEL_98;
    }
  }
  if ((std::istreambuf_iterator<char>::equal[abi:ne180100](v3, v4) & 1) != 0
    || ((v31 = (unsigned __int8 *)(*v3)[3], v31 == (unsigned __int8 *)(*v3)[4])
      ? (v32 = (*(unsigned __int8 (**)(_QWORD))(**v3 + 72))(*v3))
      : (v32 = *v31),
        v32 != 117))
  {
    boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_error(v2, "invalid escape sequence");
  }
  if ((*v3)[3] == (*v3)[4])
    (*(void (**)(_QWORD))(**v3 + 72))(*v3);
  boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::next(v2);
  boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_codepoint_ref(a1);
}

uint64_t boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::new_value(uint64_t a1)
{
  _DWORD *v1;
  _DWORD *v2;
  _DWORD *i;

  v1 = *(_DWORD **)(a1 + 56);
  v2 = *(_DWORD **)(a1 + 64);
  if (v1 == v2)
    return boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::new_tree(a1);
  for (i = v2 - 4; *i == 3; i -= 4)
  {
    *(_QWORD *)(a1 + 64) = i;
    if (i == v1)
      return boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::new_tree(a1);
  }
  if (*i != 1)
    return boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::new_tree(a1);
  *i = 2;
  if (*(char *)(a1 + 55) < 0)
  {
    **(_BYTE **)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
  }
  else
  {
    *(_BYTE *)(a1 + 32) = 0;
    *(_BYTE *)(a1 + 55) = 0;
  }
  return a1 + 32;
}

uint64_t boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::need_cur(uint64_t a1, char *a2)
{
  _QWORD *v4;
  char *v5;

  v4 = (_QWORD *)(a1 + 8);
  if (std::istreambuf_iterator<char>::equal[abi:ne180100]((_QWORD **)(a1 + 8), (_QWORD **)(a1 + 16)))
    boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_error(a1, a2);
  v5 = *(char **)(*v4 + 24);
  if (v5 == *(char **)(*v4 + 32))
    return (char)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*v4 + 72))(*v4);
  else
    return *v5;
}

BOOL boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_r(boost::property_tree::json_parser::detail::external_ascii_superset_encoding *this, int a2)
{
  return a2 == 114;
}

BOOL boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_u(boost::property_tree::json_parser::detail::external_ascii_superset_encoding *this, int a2)
{
  return a2 == 117;
}

void boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_codepoint_ref(uint64_t *a1)
{
  unsigned int v2;
  __int16 v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[3];

  v2 = boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_hex_quad((uint64_t)a1);
  if ((v2 & 0xFC00) == 0xD800)
  {
    boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::expect((uint64_t)(a1 + 2), (uint64_t (*)(_QWORD *, _QWORD))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_backslash, 0, "invalid codepoint, stray high surrogate");
    boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::expect((uint64_t)(a1 + 2), (uint64_t (*)(_QWORD *, _QWORD))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_u, 0, "expected codepoint reference after high surrogate");
    v3 = boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_hex_quad((uint64_t)a1);
    if ((v3 & 0xFC00) != 0xDC00)
      boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_error((uint64_t)(a1 + 2), "expected low surrogate after high surrogate");
    v2 = (v3 & 0x3FF | ((v2 & 0x3FF) << 10)) + 0x10000;
  }
  else if ((v2 & 0xFC00) == 0xDC00)
  {
    boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_error((uint64_t)(a1 + 2), "invalid codepoint, stray low surrogate");
  }
  v5 = *a1;
  v4 = a1[1];
  v6[0] = boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::on_code_unit;
  v6[1] = 0;
  v6[2] = v5;
  boost::property_tree::json_parser::detail::utf8_utf8_encoding::feed_codepoint<boost::_bi::bind_t<void,boost::_mfi::mf1<void,boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,char>,boost::_bi::list2<boost::reference_wrapper<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>,boost::arg<1>>>>(v4, v2, (uint64_t)v6);
}

void boost::property_tree::json_parser::detail::utf8_utf8_encoding::feed_codepoint<boost::_bi::bind_t<void,boost::_mfi::mf1<void,boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,char>,boost::_bi::list2<boost::reference_wrapper<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>,boost::arg<1>>>>(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  void (*v7)(_QWORD *, uint64_t);
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(_QWORD *, uint64_t);
  _QWORD *v15;
  uint64_t v16;
  void (*v17)(_QWORD *, uint64_t);
  _QWORD *v18;
  uint64_t v19;
  void (*v20)(_QWORD *, uint64_t);
  _QWORD *v21;
  uint64_t v22;

  if (a2 > 0x7F)
  {
    if (a2 > 0x7FF)
    {
      if (HIWORD(a2))
      {
        if (HIWORD(a2) > 0x10u)
          return;
        v12 = (a2 >> 18) | 0xFFFFFFF0;
        v13 = *(_QWORD *)(a3 + 8);
        v14 = *(void (**)(_QWORD *, uint64_t))a3;
        v15 = (_QWORD *)(*(_QWORD *)(a3 + 16) + (v13 >> 1));
        if ((v13 & 1) != 0)
          v14 = *(void (**)(_QWORD *, uint64_t))(*v15 + v14);
        v14(v15, v12);
        v11 = (a2 >> 12) & 0x3F | 0xFFFFFF80;
      }
      else
      {
        v11 = (a2 >> 12) | 0xFFFFFFE0;
      }
      v16 = *(_QWORD *)(a3 + 8);
      v17 = *(void (**)(_QWORD *, uint64_t))a3;
      v18 = (_QWORD *)(*(_QWORD *)(a3 + 16) + (v16 >> 1));
      if ((v16 & 1) != 0)
        v17 = *(void (**)(_QWORD *, uint64_t))(*v18 + v17);
      v17(v18, v11);
      v10 = (a2 >> 6) & 0x3F | 0xFFFFFF80;
    }
    else
    {
      v10 = (a2 >> 6) | 0xFFFFFFC0;
    }
    v19 = *(_QWORD *)(a3 + 8);
    v20 = *(void (**)(_QWORD *, uint64_t))a3;
    v21 = (_QWORD *)(*(_QWORD *)(a3 + 16) + (v19 >> 1));
    if ((v19 & 1) != 0)
      v20 = *(void (**)(_QWORD *, uint64_t))(*v21 + v20);
    v20(v21, v10);
    v9 = a2 & 0x3F | 0xFFFFFF80;
    v22 = *(_QWORD *)(a3 + 8);
    v7 = *(void (**)(_QWORD *, uint64_t))a3;
    v8 = (_QWORD *)(*(_QWORD *)(a3 + 16) + (v22 >> 1));
    if ((v22 & 1) != 0)
      v7 = *(void (**)(_QWORD *, uint64_t))(*v8 + v7);
  }
  else
  {
    v6 = *(_QWORD *)(a3 + 8);
    v5 = *(_QWORD *)(a3 + 16);
    v7 = *(void (**)(_QWORD *, uint64_t))a3;
    v8 = (_QWORD *)(v5 + (v6 >> 1));
    if ((v6 & 1) != 0)
      v7 = *(void (**)(_QWORD *, uint64_t))(*v8 + v7);
    v9 = (char)a2;
  }
  v7(v8, v9);
}

void boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::on_code_unit(uint64_t a1, std::string::value_type a2)
{
  uint64_t v2;
  std::string *v3;

  v2 = *(_QWORD *)(a1 + 64);
  if (*(_DWORD *)(v2 - 16) == 2)
    v3 = (std::string *)(a1 + 32);
  else
    v3 = *(std::string **)(v2 - 8);
  std::string::push_back(v3, a2);
}

uint64_t boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_hex_quad(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  int v4;
  int v5;

  LODWORD(v1) = 0;
  v2 = a1 + 16;
  v3 = 4;
  do
  {
    v4 = boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::need_cur(v2, "invalid escape sequence");
    v5 = v4 - 48;
    if ((v4 - 48) <= 9)
      goto LABEL_5;
    if ((v4 - 65) <= 5)
    {
      v5 = v4 - 55;
LABEL_5:
      if (v5 < 0)
        goto LABEL_9;
      goto LABEL_10;
    }
    if ((v4 - 97) > 5 || (v5 = v4 - 87, v4 - 87 < 0))
LABEL_9:
      boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_error(v2, "invalid escape sequence");
LABEL_10:
    v1 = (v5 + 16 * v1);
    boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::next(v2);
    --v3;
  }
  while (v3);
  return v1;
}

_QWORD *boost::property_tree::json_parser::detail::utf8_utf8_encoding::transcode_codepoint<std::istreambuf_iterator<char>,std::istreambuf_iterator<char>,boost::_bi::bind_t<void,boost::_mfi::mf1<void,boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,char>,boost::_bi::list2<boost::reference_wrapper<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>,boost::arg<1>>>,boost::_bi::bind_t<void,boost::_mfi::mf1<void,boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>,char const*>,boost::_bi::list2<boost::_bi::value<boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>*>,boost::_bi::value<char const*>>>>(uint64_t a1, _QWORD **a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  unint64_t v11;
  void (*v12)(_QWORD, _QWORD);
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void (*v16)(_QWORD, _QWORD);
  _QWORD *v17;
  _QWORD *result;
  uint64_t v19;
  char v20;
  void (*v21)(_QWORD, _QWORD);
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  void (*v25)(_QWORD, _QWORD);
  _QWORD *v26;
  int v27;
  char *v28;
  char v29;
  uint64_t v30;
  void (*v31)(_QWORD, _QWORD);
  _QWORD *v32;
  char *v33;
  char v34;
  uint64_t v35;
  void (*v36)(_QWORD, _QWORD);
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;

  v39 = a3;
  v8 = *a2;
  v9 = (unsigned __int8 *)(*a2)[3];
  v10 = (unsigned __int8 *)(*a2)[4];
  if (v9 == v10)
  {
    v11 = (*(uint64_t (**)(_QWORD *))(*v8 + 72))(v8);
    v8 = *a2;
    v9 = (unsigned __int8 *)(*a2)[3];
    v10 = (unsigned __int8 *)(*a2)[4];
  }
  else
  {
    v11 = *v9;
  }
  if (v9 == v10)
  {
    (*(void (**)(_QWORD *))(*v8 + 80))(v8);
    if ((v11 & 0x80) == 0)
      goto LABEL_6;
  }
  else
  {
    v8[3] = v9 + 1;
    if ((v11 & 0x80) == 0)
    {
LABEL_6:
      if (v11 <= 0x1Fu)
      {
        v12 = *(void (**)(_QWORD, _QWORD))a5;
        v13 = *(_QWORD *)(a5 + 8);
        v14 = (_QWORD *)(*(_QWORD *)(a5 + 16) + (v13 >> 1));
        if ((v13 & 1) != 0)
          v12 = *(void (**)(_QWORD, _QWORD))(*v14 + v12);
        v12(v14, *(_QWORD *)(a5 + 24));
      }
      v15 = *(_QWORD *)(a4 + 8);
      v16 = *(void (**)(_QWORD, _QWORD))a4;
      v17 = (_QWORD *)(*(_QWORD *)(a4 + 16) + (v15 >> 1));
      if ((v15 & 1) != 0)
        v16 = *(void (**)(_QWORD, _QWORD))(*v17 + v16);
      return (_QWORD *)((uint64_t (*)(_QWORD *, _QWORD))v16)(v17, (char)v11);
    }
  }
  v19 = (v11 >> 3) & 0xF;
  v20 = boost::property_tree::json_parser::detail::utf8_utf8_encoding::trail_table(unsigned char)const::table[v19];
  if ((unint64_t)(v19 - 15) <= 0xFFFFFFFFFFFFFFF8)
  {
    v21 = *(void (**)(_QWORD, _QWORD))a5;
    v22 = *(_QWORD *)(a5 + 8);
    v23 = (_QWORD *)(*(_QWORD *)(a5 + 16) + (v22 >> 1));
    if ((v22 & 1) != 0)
      v21 = *(void (**)(_QWORD, _QWORD))(*v23 + v21);
    v21(v23, *(_QWORD *)(a5 + 24));
  }
  v24 = *(_QWORD *)(a4 + 8);
  v25 = *(void (**)(_QWORD, _QWORD))a4;
  v26 = (_QWORD *)(*(_QWORD *)(a4 + 16) + (v24 >> 1));
  if ((v24 & 1) != 0)
    v25 = *(void (**)(_QWORD, _QWORD))(*v26 + v25);
  result = (_QWORD *)((uint64_t (*)(_QWORD *, _QWORD))v25)(v26, (char)v11);
  if ((unint64_t)(v19 - 8) <= 6)
  {
    if (v20 <= 1)
      v27 = 1;
    else
      v27 = v20;
    do
    {
      if ((std::istreambuf_iterator<char>::equal[abi:ne180100](a2, &v39) & 1) != 0
        || ((v28 = (char *)(*a2)[3], v28 == (char *)(*a2)[4])
          ? (v29 = (*(uint64_t (**)(_QWORD))(**a2 + 72))(*a2))
          : (v29 = *v28),
            (v29 & 0xC0) != 0x80))
      {
        v30 = *(_QWORD *)(a5 + 8);
        v31 = *(void (**)(_QWORD, _QWORD))a5;
        v32 = (_QWORD *)(*(_QWORD *)(a5 + 16) + (v30 >> 1));
        if ((v30 & 1) != 0)
          v31 = *(void (**)(_QWORD, _QWORD))(*v32 + v31);
        v31(v32, *(_QWORD *)(a5 + 24));
      }
      v33 = (char *)(*a2)[3];
      if (v33 == (char *)(*a2)[4])
        v34 = (*(uint64_t (**)(_QWORD))(**a2 + 72))(*a2);
      else
        v34 = *v33;
      v35 = *(_QWORD *)(a4 + 8);
      v36 = *(void (**)(_QWORD, _QWORD))a4;
      v37 = (_QWORD *)(*(_QWORD *)(a4 + 16) + (v35 >> 1));
      if ((v35 & 1) != 0)
        v36 = *(void (**)(_QWORD, _QWORD))(*v37 + v36);
      v36(v37, v34);
      result = *a2;
      v38 = (*a2)[3];
      if (v38 == (*a2)[4])
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 80))(result);
      else
        result[3] = v38 + 1;
      --v27;
    }
    while (v27);
  }
  return result;
}

BOOL boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_e(boost::property_tree::json_parser::detail::external_ascii_superset_encoding *this, int a2)
{
  return a2 == 101;
}

BOOL boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_a(boost::property_tree::json_parser::detail::external_ascii_superset_encoding *this, int a2)
{
  return a2 == 97;
}

BOOL boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_l(boost::property_tree::json_parser::detail::external_ascii_superset_encoding *this, int a2)
{
  return a2 == 108;
}

BOOL boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_s(boost::property_tree::json_parser::detail::external_ascii_superset_encoding *this, int a2)
{
  return a2 == 115;
}

BOOL boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_minus(boost::property_tree::json_parser::detail::external_ascii_superset_encoding *this, int a2)
{
  return a2 == 45;
}

BOOL boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_0(boost::property_tree::json_parser::detail::external_ascii_superset_encoding *this, int a2)
{
  return a2 == 48;
}

uint64_t boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_int_part(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a1 + 16;
  v4 = boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::have<boost::property_tree::json_parser::detail::number_callback_adapter<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::input_iterator_tag>>(a1 + 16, (uint64_t (*)(_QWORD *, _QWORD))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_digit0, 0, a2);
  if ((_DWORD)v4)
  {
    while ((boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::have<boost::property_tree::json_parser::detail::number_callback_adapter<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::input_iterator_tag>>(v3, (uint64_t (*)(_QWORD *, _QWORD))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_digit, 0, a2) & 1) != 0);
  }
  return v4;
}

uint64_t boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_frac_part(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = a1 + 16;
  result = boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::have<boost::property_tree::json_parser::detail::number_callback_adapter<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::input_iterator_tag>>(a1 + 16, (uint64_t (*)(_QWORD *, _QWORD))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_dot, 0, a2);
  if ((_DWORD)result)
  {
    if ((boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::have<boost::property_tree::json_parser::detail::number_callback_adapter<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::input_iterator_tag>>(v3, (uint64_t (*)(_QWORD *, _QWORD))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_digit, 0, a2) & 1) == 0)boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_error(v3, "need at least one digit after '.'");
    do
      result = boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::have<boost::property_tree::json_parser::detail::number_callback_adapter<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::input_iterator_tag>>(v3, (uint64_t (*)(_QWORD *, _QWORD))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_digit, 0, a2);
    while ((result & 1) != 0);
  }
  return result;
}

uint64_t boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_exp_part(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = a1 + 16;
  result = boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::have<boost::property_tree::json_parser::detail::number_callback_adapter<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::input_iterator_tag>>(a1 + 16, (uint64_t (*)(_QWORD *, _QWORD))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_eE, 0, a2);
  if ((_DWORD)result)
  {
    boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::have<boost::property_tree::json_parser::detail::number_callback_adapter<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::input_iterator_tag>>(v3, (uint64_t (*)(_QWORD *, _QWORD))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_plusminus, 0, a2);
    if ((boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::have<boost::property_tree::json_parser::detail::number_callback_adapter<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::input_iterator_tag>>(v3, (uint64_t (*)(_QWORD *, _QWORD))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_digit, 0, a2) & 1) == 0)boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_error(v3, "need at least one digit in exponent");
    do
      result = boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::have<boost::property_tree::json_parser::detail::number_callback_adapter<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::input_iterator_tag>>(v3, (uint64_t (*)(_QWORD *, _QWORD))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_digit, 0, a2);
    while ((result & 1) != 0);
  }
  return result;
}

uint64_t boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::have<boost::property_tree::json_parser::detail::number_callback_adapter<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::input_iterator_tag>>(uint64_t a1, uint64_t (*a2)(_QWORD *, _QWORD), uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  uint64_t result;
  _QWORD *v10;
  char *v11;
  char v12;
  std::string::value_type *v13;
  std::string::value_type v14;

  v8 = (_QWORD *)(a1 + 8);
  if ((std::istreambuf_iterator<char>::equal[abi:ne180100]((_QWORD **)(a1 + 8), (_QWORD **)(a1 + 16)) & 1) != 0)
    return 0;
  v10 = (_QWORD *)(*(_QWORD *)a1 + (a3 >> 1));
  if ((a3 & 1) != 0)
    a2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v10 + a2);
  v11 = *(char **)(*v8 + 24);
  if (v11 == *(char **)(*v8 + 32))
    v12 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v8 + 72))(*v8);
  else
    v12 = *v11;
  result = a2(v10, v12);
  if ((_DWORD)result)
  {
    v13 = *(std::string::value_type **)(*v8 + 24);
    if (v13 == *(std::string::value_type **)(*v8 + 32))
      v14 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v8 + 72))(*v8);
    else
      v14 = *v13;
    boost::property_tree::json_parser::detail::number_callback_adapter<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::input_iterator_tag>::operator()(a4, v14);
    boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::next(a1);
    return 1;
  }
  return result;
}

void boost::property_tree::json_parser::detail::number_callback_adapter<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::input_iterator_tag>::operator()(uint64_t a1, std::string::value_type __c)
{
  uint64_t v4;
  std::string *v5;

  if (*(_BYTE *)(a1 + 16))
  {
    boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::new_value(*(_QWORD *)a1);
    *(_BYTE *)(a1 + 16) = 0;
  }
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 64);
  if (*(_DWORD *)(v4 - 16) == 2)
    v5 = (std::string *)(*(_QWORD *)a1 + 32);
  else
    v5 = *(std::string **)(v4 - 8);
  std::string::push_back(v5, __c);
}

BOOL boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_digit0(boost::property_tree::json_parser::detail::external_ascii_superset_encoding *this, unsigned __int8 a2)
{
  return a2 - 49 < 9;
}

BOOL boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_digit(boost::property_tree::json_parser::detail::external_ascii_superset_encoding *this, unsigned __int8 a2)
{
  return a2 - 48 < 0xA;
}

BOOL boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_dot(boost::property_tree::json_parser::detail::external_ascii_superset_encoding *this, int a2)
{
  return a2 == 46;
}

BOOL boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_eE(boost::property_tree::json_parser::detail::external_ascii_superset_encoding *this, char a2)
{
  return (a2 & 0xDF) == 69;
}

BOOL boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_plusminus(boost::property_tree::json_parser::detail::external_ascii_superset_encoding *this, int a2)
{
  return a2 == 43 || a2 == 45;
}

void boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::get_optional<std::string>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  std::string *v5;
  __int128 v6;
  uint64_t v7;

  boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::get_child_optional(a1, a2, &v7);
  v4 = v7;
  if (v7)
  {
    *(_BYTE *)a3 = 0;
    v5 = (std::string *)(a3 + 8);
    if (*(char *)(v4 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)v4, *(_QWORD *)(v4 + 8));
    }
    else
    {
      v6 = *(_OWORD *)v4;
      *(_QWORD *)(a3 + 24) = *(_QWORD *)(v4 + 16);
      *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
    }
    LOBYTE(v4) = 1;
  }
  *(_BYTE *)a3 = v4;
}

uint64_t boost::detail::lexical_ostream_limited_src<char,std::char_traits<char>>::shr_unsigned<unsigned long>(unsigned __int8 **a1, _QWORD *a2)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  int v5;
  uint64_t result;
  char v7[8];
  uint64_t v8;
  _QWORD *v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;

  v3 = *a1;
  v2 = a1[1];
  if (*a1 == v2)
    return 0;
  v5 = *v3;
  if (v5 == 45 || v5 == 43)
    *a1 = ++v3;
  v7[0] = 0;
  v8 = 1;
  v9 = a2;
  v10 = v3;
  v11 = v2;
  result = boost::detail::lcast_ret_unsigned<std::char_traits<char>,unsigned long long,char>::convert((uint64_t)v7);
  if (v5 == 45)
    *a2 = -*a2;
  return result;
}

uint64_t std::vector<turi::index_file_information>::__push_back_slow_path<turi::index_file_information const&>(uint64_t *a1, const turi::index_file_information *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  void *v13;
  std::string *v14;
  std::string *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0x8E38E38E38E38E39 * ((a1[1] - *a1) >> 4);
  v5 = v4 + 1;
  if (v4 + 1 > 0x1C71C71C71C71C7)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x8E38E38E38E38E39 * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0xE38E38E38E38E3)
    v9 = 0x1C71C71C71C71C7;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::index_file_information>>(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = (std::string *)&v10[144 * v4];
  v16 = &v10[144 * v9];
  turi::index_file_information::index_file_information(v14, a2);
  v15 = v14 + 6;
  std::vector<turi::index_file_information>::__swap_out_circular_buffer(a1, &v13);
  v11 = a1[1];
  std::__split_buffer<turi::index_file_information>::~__split_buffer(&v13);
  return v11;
}

void sub_21818A708(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<turi::index_file_information>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<turi::index_file_information>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::index_file_information>,std::reverse_iterator<turi::index_file_information*>,std::reverse_iterator<turi::index_file_information*>,std::reverse_iterator<turi::index_file_information*>>((uint64_t)(a1 + 2), a1[1], (__int128 *)a1[1], *a1, (__int128 *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<turi::index_file_information>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1C71C71C71C71C8)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(144 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::index_file_information>,std::reverse_iterator<turi::index_file_information*>,std::reverse_iterator<turi::index_file_information*>,std::reverse_iterator<turi::index_file_information*>>(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4, __int128 *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 *v9;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  v14 = 0;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v9 -= 9;
      std::allocator<turi::index_file_information>::construct[abi:ne180100]<turi::index_file_information,turi::index_file_information>(a1, v7 - 144, v9);
      v7 = *((_QWORD *)&v16 + 1) - 144;
      *((_QWORD *)&v16 + 1) -= 144;
    }
    while (v9 != a5);
    v11 = v16;
  }
  v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::index_file_information>,std::reverse_iterator<turi::index_file_information*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

void std::allocator<turi::index_file_information>::construct[abi:ne180100]<turi::index_file_information,turi::index_file_information>(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *a3;
  *(_QWORD *)(a2 + 16) = *((_QWORD *)a3 + 2);
  *(_OWORD *)a2 = v3;
  *((_QWORD *)a3 + 1) = 0;
  *((_QWORD *)a3 + 2) = 0;
  *(_QWORD *)a3 = 0;
  v4 = *(__int128 *)((char *)a3 + 24);
  *(_QWORD *)(a2 + 40) = *((_QWORD *)a3 + 5);
  *(_OWORD *)(a2 + 24) = v4;
  v5 = a3[3];
  *(_QWORD *)(a2 + 64) = *((_QWORD *)a3 + 8);
  *(_OWORD *)(a2 + 48) = v5;
  *((_QWORD *)a3 + 7) = 0;
  *((_QWORD *)a3 + 8) = 0;
  *((_QWORD *)a3 + 6) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  *(_OWORD *)(a2 + 72) = *(__int128 *)((char *)a3 + 72);
  *(_QWORD *)(a2 + 88) = *((_QWORD *)a3 + 11);
  *((_QWORD *)a3 + 9) = 0;
  *((_QWORD *)a3 + 10) = 0;
  *((_QWORD *)a3 + 11) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  *(_OWORD *)(a2 + 96) = a3[6];
  *(_QWORD *)(a2 + 112) = *((_QWORD *)a3 + 14);
  *((_QWORD *)a3 + 12) = 0;
  *((_QWORD *)a3 + 13) = 0;
  *((_QWORD *)a3 + 14) = 0;
  *(_QWORD *)(a2 + 120) = *((_QWORD *)a3 + 15);
  v6 = a3 + 8;
  v7 = *((_QWORD *)a3 + 16);
  *(_QWORD *)(a2 + 128) = v7;
  v8 = a2 + 128;
  v9 = *((_QWORD *)a3 + 17);
  *(_QWORD *)(a2 + 136) = v9;
  if (v9)
  {
    *(_QWORD *)(v7 + 16) = v8;
    *((_QWORD *)a3 + 15) = v6;
    *v6 = 0;
    *((_QWORD *)a3 + 17) = 0;
  }
  else
  {
    *(_QWORD *)(a2 + 120) = v8;
  }
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::index_file_information>,std::reverse_iterator<turi::index_file_information*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<turi::index_file_information>,std::reverse_iterator<turi::index_file_information*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<turi::index_file_information>,std::reverse_iterator<turi::index_file_information*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1[2] + 8);
  v2 = *(_QWORD *)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      std::allocator<turi::index_file_information>::destroy[abi:ne180100](v3, v1);
      v1 += 144;
    }
    while (v1 != v2);
  }
}

void **std::__split_buffer<turi::index_file_information>::~__split_buffer(void **a1)
{
  std::__split_buffer<turi::index_file_information>::clear[abi:ne180100](a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<turi::index_file_information>::clear[abi:ne180100](_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 144;
    std::allocator<turi::index_file_information>::destroy[abi:ne180100](v4, i - 144);
  }
}

_QWORD *OUTLINED_FUNCTION_36_4(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return std::string::basic_string[abi:ne180100]<0>(&a9, a2);
}

uint64_t _GLOBAL__sub_I_sarray_index_file_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

_QWORD *turi::sarray_sorted_buffer<turi::flexible_type>::sarray_sorted_buffer(_QWORD *a1, unint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v8;
  int v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  __int128 *v17;
  uint64_t v18;
  uint64_t i;
  __int128 v21;
  __int128 *v22;
  _BYTE v23[24];
  _BYTE *v24;
  _BYTE v25[24];
  _BYTE *v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  *a1 = 0;
  a1[1] = 0;
  v8 = a1 + 2;
  a1[5] = 0;
  a1[9] = 0;
  *(_OWORD *)(a1 + 13) = 0u;
  *(_OWORD *)(a1 + 15) = 0u;
  v9 = pthread_mutex_init((pthread_mutex_t *)(a1 + 17), 0);
  assert_msg(v9 == 0, "Mutex create error %d", v9);
  a1[25] = 0;
  a1[26] = 0;
  a1[27] = 0;
  a1[28] = a2 >> 4;
  a1[29] = 0;
  a1[30] = 0;
  a1[31] = 0;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(a1 + 32), a3);
  *((_BYTE *)a1 + 288) = a4;
  _ZNSt3__115allocate_sharedB8ne180100IN4turi6sarrayINS1_13flexible_typeEEENS_9allocatorIS4_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v21);
  std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)a1, &v21);
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v21 + 1);
  if (*((_QWORD *)&v21 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v21 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  turi::sarray<turi::flexible_type>::open_for_write(*a1, 1, 0);
  (*(void (**)(__int128 *__return_ptr, _QWORD, _QWORD))(*(_QWORD *)*a1 + 32))(&v21, *a1, 0);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::operator=[abi:ne180100](v8, (uint64_t)&v21);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::operator=[abi:ne180100](a1 + 6, (uint64_t)v23);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::operator=[abi:ne180100](a1 + 10, (uint64_t)v25);
  v13 = v26;
  if (v26 == v25)
  {
    v14 = 4;
    v13 = v25;
  }
  else
  {
    if (!v26)
      goto LABEL_11;
    v14 = 5;
  }
  (*(void (**)(void))(*v13 + 8 * v14))();
LABEL_11:
  v15 = v24;
  if (v24 == v23)
  {
    v16 = 4;
    v15 = v23;
  }
  else
  {
    if (!v24)
      goto LABEL_16;
    v16 = 5;
  }
  (*(void (**)(void))(*v15 + 8 * v16))();
LABEL_16:
  v17 = v22;
  if (v22 == &v21)
  {
    v18 = 4;
    v17 = &v21;
    goto LABEL_20;
  }
  if (v22)
  {
    v18 = 5;
LABEL_20:
    (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
  }
  std::vector<std::vector<turi::flexible_type>>::resize(a1 + 25, 0x10uLL);
  std::vector<turi::simple_spinlock>::resize(a1 + 29, 0x10uLL);
  for (i = 0; i != 384; i += 24)
    std::vector<turi::flexible_type>::reserve((uint64_t *)(a1[25] + i), a1[28]);
  return a1;
}

void sub_21818ACE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void std::vector<turi::simple_spinlock>::resize(_QWORD *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  unint64_t v7;

  v3 = a1[1];
  v4 = v3 - *a1;
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<turi::simple_spinlock>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + a2;
    while (v3 != v7)
      turi::simple_spinlock::~simple_spinlock((turi::simple_spinlock *)(v3 - 1));
    a1[1] = v7;
  }
}

uint64_t turi::sarray_sorted_buffer<turi::flexible_type>::save_buffer(uint64_t a1, unsigned __int8 ***a2)
{
  uint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t **v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unsigned __int8 *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t *v24;
  char *v25;
  uint64_t v26;
  char v28;
  _BYTE v29[24];
  _BYTE *v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v4 = (uint64_t)**a2;
  v5 = (uint64_t *)(*a2)[1];
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)v29, a1 + 256);
  v6 = 126 - 2 * __clz(((uint64_t)v5 - v4) >> 4);
  if (v5 == (uint64_t *)v4)
    v7 = 0;
  else
    v7 = v6;
  std::__introsort<std::_ClassicAlgPolicy,std::function<BOOL ()(turi::flexible_type const&,turi::flexible_type const&)> &,turi::flexible_type*,false>(v4, v5, (uint64_t)v29, v7, 1);
  v8 = v30;
  if (v30 == v29)
  {
    v9 = 4;
    v8 = v29;
  }
  else
  {
    if (!v30)
      goto LABEL_9;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_9:
  if (*(_BYTE *)(a1 + 288))
  {
    v10 = std::__unique[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<turi::flexible_type *>,std::__wrap_iter<turi::flexible_type *>,std::__equal_to &>(**a2, (*a2)[1], (uint64_t)&v28);
    std::vector<turi::flexible_type>::resize((uint64_t *)*a2, ((char *)v10 - (char *)**a2) >> 4);
  }
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 136));
  v11 = **a2;
  if (v11 == (*a2)[1])
  {
    v13 = **a2;
  }
  else
  {
    do
    {
      v12 = *(_QWORD *)(a1 + 40);
      if (!v12)
        std::__throw_bad_function_call[abi:ne180100]();
      (*(void (**)(uint64_t, unsigned __int8 *))(*(_QWORD *)v12 + 48))(v12, v11);
      v11 += 16;
    }
    while (v11 != (*a2)[1]);
    v13 = **a2;
  }
  v14 = *(_QWORD *)(a1 + 128);
  v15 = (v11 - v13) >> 4;
  v16 = *(uint64_t **)(a1 + 120);
  if ((unint64_t)v16 >= v14)
  {
    v18 = *(uint64_t **)(a1 + 112);
    v19 = v16 - v18;
    if ((unint64_t)(v19 + 1) >> 61)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v20 = v14 - (_QWORD)v18;
    v21 = (uint64_t)(v14 - (_QWORD)v18) >> 2;
    if (v21 <= v19 + 1)
      v21 = v19 + 1;
    if (v20 >= 0x7FFFFFFFFFFFFFF8)
      v22 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v22 = v21;
    if (v22)
    {
      v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a1 + 128, v22);
      v18 = *(uint64_t **)(a1 + 112);
      v16 = *(uint64_t **)(a1 + 120);
    }
    else
    {
      v23 = 0;
    }
    v24 = (uint64_t *)&v23[8 * v19];
    v25 = &v23[8 * v22];
    *v24 = v15;
    v17 = v24 + 1;
    while (v16 != v18)
    {
      v26 = *--v16;
      *--v24 = v26;
    }
    *(_QWORD *)(a1 + 112) = v24;
    *(_QWORD *)(a1 + 120) = v17;
    *(_QWORD *)(a1 + 128) = v25;
    if (v18)
      operator delete(v18);
  }
  else
  {
    *v16 = v15;
    v17 = v16 + 1;
  }
  *(_QWORD *)(a1 + 120) = v17;
  return pthread_mutex_unlock((pthread_mutex_t *)(a1 + 136));
}

void sub_21818B024(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void turi::sarray_sorted_buffer<turi::flexible_type>::add(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned int v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  unsigned __int8 **v33;
  std::__shared_weak_count *v34;
  unsigned __int8 **v35;
  std::__shared_weak_count *v36;

  v4 = (5
      * ((((0xC6A4A7935BD1E995 * (a3 ^ 0xC3A5C85C97CB3127)) >> 32) >> 15) ^ (-107 * (a3 ^ 0x27)))) & 0xF;
  v5 = (unsigned __int8 *)(a1[29] + v4);
  do
  {
    while (*v5 == 1)
      ;
    do
      v6 = __ldaxr(v5);
    while (__stlxr(1u, v5));
  }
  while (v6);
  v7 = a1[25];
  v8 = v7
     + 24
     * ((5
       * ((((0xC6A4A7935BD1E995 * (a3 ^ 0xC3A5C85C97CB3127)) >> 32) >> 15) ^ (-107 * (a3 ^ 0x27)))) & 0xF);
  v9 = *(_QWORD *)(v8 + 8);
  v10 = *(_QWORD *)(v8 + 16);
  v11 = (uint64_t *)(v8 + 8);
  if (v9 >= v10)
  {
    v16 = std::vector<turi::flexible_type>::__push_back_slow_path<turi::flexible_type const&>((uint64_t *)(v7+ 24* ((5* ((((0xC6A4A7935BD1E995 * (a3 ^ 0xC3A5C85C97CB3127)) >> 32) >> 15) ^ (-107 * (a3 ^ 0x27)))) & 0xF)), (char *)a2);
  }
  else
  {
    *(_QWORD *)v9 = 0;
    *(_DWORD *)(v9 + 8) = 0;
    *(_BYTE *)(v9 + 12) = 0;
    if ((uint64_t *)v9 != a2)
    {
      v12 = *a2;
      *(_QWORD *)(v9 + 5) = *(uint64_t *)((char *)a2 + 5);
      *(_QWORD *)v9 = v12;
      v13 = *((unsigned __int8 *)a2 + 12);
      *(_BYTE *)(v9 + 12) = v13;
      if (v13 <= 9 && ((1 << v13) & 0x33C) != 0)
      {
        v14 = *(unint64_t **)v9;
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 + 1, v14));
      }
    }
    v16 = v9 + 16;
  }
  *v11 = v16;
  v17 = a1[25];
  v18 = (uint64_t *)(v17 + 24 * v4);
  v19 = v18[1];
  v20 = *v18;
  if (a1[28] == (v19 - *v18) >> 4)
  {
    v21 = operator new(0x30uLL);
    v21[2] = 0;
    *v21 = &unk_24D91E508;
    v21[1] = 0;
    v21[3] = v20;
    v35 = (unsigned __int8 **)(v21 + 3);
    v36 = (std::__shared_weak_count *)v21;
    *v18 = 0;
    v21[4] = v19;
    v18[1] = 0;
    v22 = v17 + 24 * v4;
    v21[5] = *(_QWORD *)(v22 + 16);
    *(_QWORD *)(v22 + 16) = 0;
    v23 = a1[29];
    __dmb(0xBu);
    *(_BYTE *)(v23 + v4) = 0;
    v33 = v35;
    v34 = v36;
    if (v36)
    {
      p_shared_owners = (unint64_t *)&v36->__shared_owners_;
      do
        v25 = __ldxr(p_shared_owners);
      while (__stxr(v25 + 1, p_shared_owners));
    }
    turi::sarray_sorted_buffer<turi::flexible_type>::save_buffer((uint64_t)a1, &v33);
    v26 = v34;
    if (v34)
    {
      v27 = (unint64_t *)&v34->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    v29 = v36;
    if (v36)
    {
      v30 = (unint64_t *)&v36->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
  }
  else
  {
    v32 = a1[29];
    __dmb(0xBu);
    *(_BYTE *)(v32 + v4) = 0;
  }
}

void sub_21818B2B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t turi::sarray_sorted_buffer<turi::flexible_type>::close(uint64_t result)
{
  _QWORD *v1;
  uint64_t i;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  char *v6;
  unint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unsigned __int8 **v25;
  std::__shared_weak_count *v26;
  char *v27;
  std::__shared_weak_count *v28;

  if (*(_BYTE *)(*(_QWORD *)result + 248) && *(_BYTE *)(*(_QWORD *)result + 249))
  {
    v1 = (_QWORD *)result;
    for (i = 0; i != 16; ++i)
    {
      v3 = v1[25];
      v4 = (_QWORD *)(v3 + 24 * i);
      v5 = v4 + 1;
      if (v4[1] != *v4)
      {
        v6 = (char *)operator new(0x30uLL);
        *((_QWORD *)v6 + 1) = 0;
        v7 = (unint64_t *)(v6 + 8);
        *((_QWORD *)v6 + 2) = 0;
        *((_QWORD *)v6 + 3) = 0;
        *(_QWORD *)v6 = &unk_24D91E508;
        *((_QWORD *)v6 + 4) = 0;
        *((_QWORD *)v6 + 5) = 0;
        v27 = v6 + 24;
        v28 = (std::__shared_weak_count *)v6;
        *((_QWORD *)v6 + 3) = *v4;
        *v4 = 0;
        v8 = *((_QWORD *)v6 + 4);
        *((_QWORD *)v6 + 4) = *v5;
        *v5 = v8;
        v9 = v3 + 24 * i;
        v10 = *((_QWORD *)v6 + 5);
        *((_QWORD *)v6 + 5) = *(_QWORD *)(v9 + 16);
        *(_QWORD *)(v9 + 16) = v10;
        v25 = (unsigned __int8 **)(v6 + 24);
        v26 = (std::__shared_weak_count *)v6;
        do
          v11 = __ldxr(v7);
        while (__stxr(v11 + 1, v7));
        turi::sarray_sorted_buffer<turi::flexible_type>::save_buffer((uint64_t)v1, &v25);
        v12 = v26;
        if (v26)
        {
          p_shared_owners = (unint64_t *)&v26->__shared_owners_;
          do
            v14 = __ldaxr(p_shared_owners);
          while (__stlxr(v14 - 1, p_shared_owners));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        v15 = v1[25];
        v16 = v15 + 24 * i;
        v19 = *(_QWORD *)(v16 + 8);
        v18 = (_QWORD *)(v16 + 8);
        v17 = v19;
        v20 = *(_QWORD *)(v15 + 24 * i);
        if (v19 != v20)
        {
          v21 = v15 + 24 * i + 16;
          do
          {
            v17 -= 16;
            std::allocator<turi::flexible_type>::destroy[abi:ne180100](v21, v17);
          }
          while (v17 != v20);
          v15 = v1[25];
        }
        *v18 = v20;
        std::vector<turi::flexible_type>::shrink_to_fit((uint64_t *)(v15 + 24 * i));
        v22 = v28;
        if (v28)
        {
          v23 = (unint64_t *)&v28->__shared_owners_;
          do
            v24 = __ldaxr(v23);
          while (__stlxr(v24 - 1, v23));
          if (!v24)
          {
            ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
            std::__shared_weak_count::__release_weak(v22);
          }
        }
      }
    }
    return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v1 + 40))(*v1);
  }
  return result;
}

void sub_21818B4A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_21818B650(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<turi::simple_spinlock>::__append(_QWORD *result, unint64_t a2)
{
  unint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _BYTE *v5;
  unint64_t v6;
  _BYTE *v7;
  unint64_t v8;
  size_t v9;
  char *v10;
  _BYTE *v11;
  char *v12;
  char *v13;
  _BYTE *v14;
  _BYTE *v15;
  _QWORD v16[5];

  v2 = a2;
  v3 = result;
  v4 = result[2];
  v5 = (_BYTE *)result[1];
  if (v4 - (uint64_t)v5 >= a2)
  {
    if (a2)
    {
      v11 = &v5[a2];
      do
      {
        *v5++ = 0;
        --v2;
      }
      while (v2);
      v5 = v11;
    }
    result[1] = v5;
  }
  else
  {
    v6 = *result;
    v7 = &v5[-*result];
    v8 = (unint64_t)&v7[a2];
    if ((uint64_t)&v7[a2] < 0)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    if (2 * (v4 - v6) > v8)
      v8 = 2 * (v4 - v6);
    if (v4 - v6 >= 0x3FFFFFFFFFFFFFFFLL)
      v9 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v9 = v8;
    v16[4] = result + 2;
    if (v9)
      v10 = (char *)operator new(v9);
    else
      v10 = 0;
    v12 = &v7[(_QWORD)v10];
    v13 = &v7[(_QWORD)v10 + v2];
    do
    {
      (v7++)[(_QWORD)v10] = 0;
      --v2;
    }
    while (v2);
    if (v5 != (_BYTE *)v6)
    {
      v14 = &v5[~v6];
      v15 = v5;
      do
      {
        v14[(_QWORD)v10] = 0;
        --v15;
        --v14;
      }
      while (v15 != (_BYTE *)v6);
      v12 = v10;
    }
    *v3 = v12;
    v3[1] = v13;
    v3[2] = &v10[v9];
    v16[2] = v5;
    v16[3] = v4;
    v16[0] = v6;
    v16[1] = v6;
    return (_QWORD *)std::__split_buffer<turi::simple_spinlock>::~__split_buffer((uint64_t)v16);
  }
  return result;
}

uint64_t std::__split_buffer<turi::simple_spinlock>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 1;
    turi::simple_spinlock::~simple_spinlock((turi::simple_spinlock *)(i - 1));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void __cxx_global_var_init_4_5()
{
  int v0;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, "Mutex create error %d", v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_sarray_sorted_buffer_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

uint64_t turi::v2_block_impl::block_manager::get_instance(turi::v2_block_impl::block_manager *this)
{
  unsigned __int8 v1;
  turi::v2_block_impl::block_manager *v3;

  if ((v1 & 1) == 0
  {
    v3 = (turi::v2_block_impl::block_manager *)operator new();
    turi::v2_block_impl::block_manager::block_manager(v3);
    turi::v2_block_impl::block_manager::get_instance(void)::manager = (uint64_t)v3;
  }
  return turi::v2_block_impl::block_manager::get_instance(void)::manager;
}

void sub_21818B9B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A0C40119F3F5FLL);
  _Unwind_Resume(a1);
}

turi::v2_block_impl::block_manager *turi::v2_block_impl::block_manager::block_manager(turi::v2_block_impl::block_manager *this)
{
  uint64_t v2;
  const char *v3;
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  const char *v7;

  v2 = pthread_mutex_init((pthread_mutex_t *)this, 0);
  assert_msg((_DWORD)v2 == 0, v3, v2);
  v4 = pthread_mutex_init((pthread_mutex_t *)this + 1, 0);
  assert_msg((_DWORD)v4 == 0, v5, v4);
  *((_QWORD *)this + 18) = 0;
  *((_QWORD *)this + 17) = (char *)this + 144;
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 19) = 0;
  *((_QWORD *)this + 20) = (char *)this + 168;
  *((_QWORD *)this + 22) = 0;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  v6 = pthread_mutex_init((pthread_mutex_t *)((char *)this + 232), 0);
  assert_msg((_DWORD)v6 == 0, v7, v6);
  *((_QWORD *)this + 46) = 0;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_QWORD *)this + 37) = 128;
  return this;
}

void sub_21818BAE8(_Unwind_Exception *a1)
{
  pthread_mutex_t *v1;
  pthread_mutex_t *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD **v6;
  char **v7;
  _QWORD *v8;

  v8 = v5;
  std::deque<std::weak_ptr<turi::general_ifstream>>::~deque[abi:ne180100](v8);
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy(v4, *v7);
  std::__tree<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>>>::destroy(v3, *v6);
  turi::mutex::~mutex(v2);
  turi::mutex::~mutex(v1);
  _Unwind_Resume(a1);
}

unint64_t turi::v2_block_impl::block_manager::open_column(uint64_t a1, uint64_t a2)
{
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t io_parallelism_id;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::string v15;
  std::string *p_p;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::string v19;
  std::string __p;
  uint64_t v21;
  std::string *v22;

  pthread_mutex_lock((pthread_mutex_t *)a1);
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v19, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v19 = *(std::string *)a2;
  turi::parse_v2_segment_filename((uint64_t)&v19, &__p);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
  if (v21 == -1)
    v21 = 0;
  v18 = 0;
  if (std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>(a1 + 160, (const void **)&__p.__r_.__value_.__l.__data_))
  {
    p_p = &__p;
    v18 = std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 160), (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&p_p)[7];
  }
  else
  {
    v18 = *(_QWORD *)(a1 + 128);
    *(_QWORD *)(a1 + 128) = v18 + 1;
    _ZNSt3__115allocate_sharedB8ne180100IN4turi13v2_block_impl13block_manager7segmentENS_9allocatorIS4_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&p_p);
    std::string::operator=((std::string *)((char *)p_p + 64), &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v15, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    else
      v15 = __p;
    io_parallelism_id = turi::fileio::get_io_parallelism_id((uint64_t)&v15);
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v15.__r_.__value_.__l.__data_);
    v9 = io_parallelism_id & 0xF;
    if (io_parallelism_id == -1)
      v9 = -1;
    p_p[4].__r_.__value_.__r.__words[0] = v9;
    turi::v2_block_impl::block_manager::init_segment(a1, (pthread_mutex_t **)&p_p);
    v22 = (std::string *)&v18;
    v10 = std::__tree<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t **)(a1 + 136), (unint64_t *)&v18, (uint64_t)&std::piecewise_construct, (uint64_t **)&v22);
    std::shared_ptr<turi::neural_net::mps_command_queue>::operator=[abi:ne180100](v10 + 5, (uint64_t *)&p_p);
    v11 = v18;
    v22 = &__p;
    std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 160), (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&v22)[7] = v11;
    v12 = v17;
    if (v17)
    {
      p_shared_owners = (unint64_t *)&v17->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
  }
  p_p = (std::string *)&v18;
  if (!std::__tree<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t **)(a1 + 136), (unint64_t *)&v18, (uint64_t)&std::piecewise_construct, (uint64_t **)&p_p)[5])turi::v2_block_impl::block_manager::open_column(std::string)::$_0::operator()();
  p_p = (std::string *)&v18;
  v4 = (unint64_t *)(std::__tree<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t **)(a1 + 136), (unint64_t *)&v18, (uint64_t)&std::piecewise_construct, (uint64_t **)&p_p)[5]+ 152);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  v6 = v18;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  return v6;
}

void sub_21818BDC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  pthread_mutex_t *v30;

  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  if (a30 < 0)
    operator delete(a25);
  pthread_mutex_unlock(v30);
  _Unwind_Resume(a1);
}

uint64_t turi::v2_block_impl::block_manager::init_segment(uint64_t result, pthread_mutex_t **a2)
{
  pthread_mutex_t *v2;
  uint64_t v4;
  uint64_t v5;
  pthread_mutex_t *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  turi::general_ifstream *v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  turi::general_ifstream *v14;
  std::__shared_weak_count *v15;

  v2 = *a2;
  if (!(*a2)[1].__opaque[48])
  {
    v4 = result;
    pthread_mutex_lock(*a2);
    if (!(*a2)[1].__opaque[48])
    {
      turi::v2_block_impl::block_manager::get_segment_file_handle(v4, (uint64_t *)a2, &v14);
      v5 = turi::general_ifstream::file_size((turi::neural_net::shared_float_array **)v14);
      v13 = -1;
      std::istream::seekg();
      std::istream::read();
      std::ios_base::clear((std::ios_base *)((char *)v14 + *(_QWORD *)(*(_QWORD *)v14 - 24)), 0);
      std::istream::seekg();
      v10 = v14;
      v11 = 0u;
      v12 = 0u;
      turi::archive_detail::vector_deserialize_impl<turi::iarchive,std::vector<turi::v2_block_impl::block_info>,false>::exec((uint64_t)&v10, &(*a2)[2].__sig);
      v6 = *a2;
      v6[1].__opaque[48] = 1;
      *(_QWORD *)&v6[1].__opaque[16] = v5;
      v7 = v15;
      if (v15)
      {
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
    return pthread_mutex_unlock(v2);
  }
  return result;
}

void sub_21818BF74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  pthread_mutex_t *v7;
  va_list va;

  va_start(va, a7);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  pthread_mutex_unlock(v7);
  _Unwind_Resume(a1);
}

void turi::v2_block_impl::block_manager::open_column(std::string)::$_0::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray_v2_block_manager.cpp", 118);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"m_segments[segment_id] != __null", 32);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray_v2_block_manager.cpp", "operator()", 65, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::v2_block_impl::block_manager::open_column(std::string)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_21818C0A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

uint64_t turi::v2_block_impl::block_manager::close_column(uint64_t a1, unint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  pthread_mutex_t *v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  int *v12;
  file_logger *v13;
  file_logger *started;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  _QWORD *v18;
  const std::locale::facet *v19;
  uint64_t *v20;
  std::__shared_weak_count *v21;
  std::__shared_weak_count *v22;
  std::__shared_weak_count *v23;
  _DWORD *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  _QWORD *exception;
  std::locale v32[2];
  std::string v33;
  unint64_t *v34;
  std::__shared_weak_count *v35;
  unint64_t v36;

  pthread_mutex_lock((pthread_mutex_t *)a1);
  v36 = a2;
  v34 = &v36;
  if (!std::__tree<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t **)(a1 + 136), &v36, (uint64_t)&std::piecewise_construct, (uint64_t **)&v34)[5])turi::v2_block_impl::block_manager::close_column(std::tuple<unsigned long,unsigned long>)::$_0::operator()();
  v32[0].__locale_ = (std::locale::__imp *)&v36;
  v4 = std::__tree<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t **)(a1 + 136), &v36, (uint64_t)&std::piecewise_construct, (uint64_t **)v32);
  v6 = (pthread_mutex_t *)v4[5];
  v5 = v4[6];
  v34 = (unint64_t *)v6;
  v35 = (std::__shared_weak_count *)v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  pthread_mutex_lock(v6);
  v9 = (unint64_t *)&v6[2].__opaque[16];
  do
  {
    v10 = __ldaxr(v9);
    v11 = v10 - 1;
  }
  while (__stlxr(v11, v9));
  if (v11)
  {
    pthread_mutex_unlock(v6);
  }
  else
  {
    v12 = (int *)global_logger();
    if (v12[169] >= 2)
    {
      v16 = (uint64_t *)v34;
    }
    else
    {
      if (cppipc::must_cancel((cppipc *)v12))
        log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
      v13 = (file_logger *)global_logger();
      started = file_logger::start_stream(v13, 1, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray_v2_block_manager.cpp", "close_column", 83, 1);
      v15 = pthread_getspecific(*((_QWORD *)started + 74));
      if (v15 && *((_BYTE *)v15 + 280))
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15 + 2, (uint64_t)"Closing ", 8);
      v16 = (uint64_t *)v34;
      if (*((char *)v34 + 87) < 0)
        std::string::__init_copy_ctor_external(&v33, (const std::string::value_type *)v34[8], v34[9]);
      else
        v33 = *(std::string *)(v34 + 8);
      v17 = file_logger::operator<<<std::string>((uint64_t)started, (uint64_t)&v33);
      v18 = pthread_getspecific(*(_QWORD *)(v17 + 592));
      if (v18)
      {
        if (*((_BYTE *)v18 + 280))
        {
          std::ios_base::getloc((const std::ios_base *)((char *)v18 + *(_QWORD *)(v18[2] - 24) + 16));
          v19 = std::locale::use_facet(v32, MEMORY[0x24BEDB350]);
          ((void (*)(const std::locale::facet *, uint64_t))v19->__vftable[2].~facet_0)(v19, 10);
          std::locale::~locale(v32);
          std::ostream::put();
          std::ostream::flush();
          file_logger::stream_flush((file_logger *)v17);
          if (*(_DWORD *)(v17 + 600) == 7)
          {
            __print_back_trace();
            exception = __cxa_allocate_exception(8uLL);
            *exception = "LOG_FATAL encountered";
            __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
          }
        }
      }
      if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v33.__r_.__value_.__l.__data_);
    }
    std::__tree<std::string>::__erase_unique<std::string>((uint64_t **)(a1 + 160), (const void **)v16 + 8);
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 64));
    v20 = (uint64_t *)v34;
    v21 = (std::__shared_weak_count *)v34[14];
    if (v21)
    {
      v22 = std::__shared_weak_count::lock(v21);
      v32[1].__locale_ = (std::locale::__imp *)v22;
      if (v22)
      {
        v23 = v22;
        v24 = (_DWORD *)v20[13];
        v32[0].__locale_ = (std::locale::__imp *)v24;
        if (v24)
          boost::iostreams::detail::execute_all<boost::iostreams::detail::member_close_operation<boost::iostreams::detail::linked_streambuf<char,std::char_traits<char>>>,boost::iostreams::detail::member_close_operation<boost::iostreams::detail::linked_streambuf<char,std::char_traits<char>>>,boost::iostreams::detail::reset_operation<boost::iostreams::detail::optional<boost::iostreams::detail::concept_adapter<turi::fileio_impl::general_fstream_source>>>,boost::iostreams::detail::clear_flags_operation<int>>(v24 + 4, 8, v24 + 4, 16, (turi::fileio_impl::general_fstream_source *)(v24 + 22), v24 + 46);
        p_shared_owners = (unint64_t *)&v23->__shared_owners_;
        do
          v26 = __ldaxr(p_shared_owners);
        while (__stlxr(v26 - 1, p_shared_owners));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
    }
    pthread_mutex_unlock((pthread_mutex_t *)(a1 + 64));
    pthread_mutex_unlock(v6);
    std::__tree<std::__value_type<unsigned long,std::shared_ptr<turi::v2_block_impl::block_manager::segment>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::shared_ptr<turi::v2_block_impl::block_manager::segment>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::shared_ptr<turi::v2_block_impl::block_manager::segment>>>>::__erase_unique<unsigned long>(a1 + 136, &v36);
  }
  v27 = v35;
  if (v35)
  {
    v28 = (unint64_t *)&v35->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  return pthread_mutex_unlock((pthread_mutex_t *)a1);
}

void sub_21818C478(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18)
{
  pthread_mutex_t *v18;
  pthread_mutex_t *v19;
  pthread_mutex_t *v20;

  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  pthread_mutex_unlock(v20);
  pthread_mutex_unlock(v19);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  pthread_mutex_unlock(v18);
  _Unwind_Resume(a1);
}

void turi::v2_block_impl::block_manager::close_column(std::tuple<unsigned long,unsigned long>)::$_0::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray_v2_block_manager.cpp", 118);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"m_segments[segment_id] != __null", 32);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray_v2_block_manager.cpp", "operator()", 74, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::v2_block_impl::block_manager::close_column(std::tuple<unsigned long,unsigned long>)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_21818C610(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

unint64_t turi::v2_block_impl::block_manager::num_blocks_in_column(turi::v2_block_impl::block_manager *a1, unint64_t a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v12;
  std::__shared_weak_count *v13;

  turi::v2_block_impl::block_manager::get_segment(a1, a2, &v12);
  v4 = *(_QWORD *)(v12 + 128);
  if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v12 + 136) - v4) >> 3) <= a3)
    turi::v2_block_impl::block_manager::num_blocks_in_column(std::tuple<unsigned long,unsigned long>)::$_0::operator()();
  v5 = (uint64_t *)(v4 + 24 * a3);
  v7 = *v5;
  v6 = v5[1];
  v8 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  return 0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 4);
}

void sub_21818C764(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t turi::v2_block_impl::block_manager::get_segment@<X0>(turi::v2_block_impl::block_manager *this@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v10;
  unint64_t *v11;

  v10 = a2;
  pthread_mutex_lock((pthread_mutex_t *)this);
  v11 = &v10;
  v5 = std::__tree<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t **)this + 17, &v10, (uint64_t)&std::piecewise_construct, (uint64_t **)&v11);
  v6 = v5[6];
  *a3 = v5[5];
  a3[1] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return pthread_mutex_unlock((pthread_mutex_t *)this);
}

void sub_21818C7F8(_Unwind_Exception *a1)
{
  pthread_mutex_t *v1;

  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

void turi::v2_block_impl::block_manager::num_blocks_in_column(std::tuple<unsigned long,unsigned long>)::$_0::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray_v2_block_manager.cpp", 118);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"seg->blocks.size()", 18);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)">", 1);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"column_id", 9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)">", 1);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray_v2_block_manager.cpp", "operator()", 105, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::v2_block_impl::block_manager::num_blocks_in_column(std::tuple<unsigned long,unsigned long>)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_21818C99C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

uint64_t turi::v2_block_impl::block_manager::get_block_info(turi::v2_block_impl::block_manager *a1, unint64_t *a2)
{
  unint64_t v2;
  unint64_t v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v9;
  std::__shared_weak_count *v10;

  v2 = a2[1];
  v3 = a2[2];
  turi::v2_block_impl::block_manager::get_segment(a1, *a2, &v9);
  v4 = v10;
  v5 = *(_QWORD *)(*(_QWORD *)(v9 + 128) + 24 * v2);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return v5 + 48 * v3;
}

uint64_t turi::v2_block_impl::block_manager::get_all_block_info(turi::v2_block_impl::block_manager *this, unint64_t a2)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v7;
  std::__shared_weak_count *v8;

  turi::v2_block_impl::block_manager::get_segment(this, a2, &v7);
  v3 = v7;
  v2 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v3 + 128;
}

void turi::v2_block_impl::block_manager::read_block(uint64_t a1@<X0>, unint64_t *a2@<X1>, _QWORD *a3@<X2>, __n128 *a4@<X8>)
{
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  pthread_mutex_t *v11;
  std::vector<char> *v12;
  uint64_t v13;
  unint64_t v14;
  int *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  BOOL v19;
  std::vector<char>::size_type v20;
  turi::v2_block_impl *v21;
  uint64_t v22;
  int v23;
  turi::v2_block_impl *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  char *begin;
  unint64_t v30;
  BOOL v31;
  std::vector<char>::size_type v32;
  __n128 v33;
  std::__shared_weak_count *v34;
  unint64_t *p_end;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *p_shared_owners;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::vector<char> *v43[2];
  _QWORD *v44;
  std::__shared_weak_count *v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  std::__shared_weak_count *v49;

  v7 = a2[1];
  v8 = a2[2];
  turi::v2_block_impl::block_manager::get_segment((turi::v2_block_impl::block_manager *)a1, *a2, &v48);
  v9 = v48;
  v10 = *(_QWORD *)(*(_QWORD *)(v48 + 128) + 24 * v7);
  if (a3)
    *a3 = v10 + 48 * v8;
  v11 = (pthread_mutex_t *)(a1 + 232);
  turi::buffer_pool<std::vector<char>>::get_new_buffer((pthread_mutex_t *)(a1 + 232), (uint64_t)a4);
  v12 = (std::vector<char> *)a4->n128_u64[0];
  v13 = v10 + 48 * v8;
  v16 = *(_QWORD *)(v13 + 8);
  v15 = (int *)(v13 + 8);
  v14 = v16;
  v17 = *(_QWORD *)a4->n128_u64[0];
  v18 = *(_QWORD *)(a4->n128_u64[0] + 8) - v17;
  v19 = v16 >= v18;
  v20 = v16 - v18;
  if (v16 <= v18)
  {
    if (!v19)
      v12->__end_ = (std::vector<char>::pointer)(v17 + v14);
  }
  else
  {
    std::vector<char>::__append(v12, v20);
  }
  v46 = v9;
  v47 = 1;
  pthread_mutex_lock((pthread_mutex_t *)v9);
  turi::v2_block_impl::block_manager::get_segment_file_handle(a1, &v48, &v44);
  v21 = (turi::v2_block_impl *)std::istream::seekg();
  v22 = *(_QWORD *)(v9 + 96);
  if (turi::SFRAME_IO_READ_LOCK)
  {
    v23 = 0;
    if (*(_QWORD *)(v9 + 88) > 0x400000uLL && v22 != -1)
    {
      turi::v2_block_impl::get_io_locks(v21);
      turi::unfair_lock::lock((turi::unfair_lock *)((char *)&turi::v2_block_impl::get_io_locks(void)::iolocks + 232 * v22));
      v23 = 1;
    }
  }
  else
  {
    v23 = 0;
  }
  v24 = (turi::v2_block_impl *)std::istream::read();
  if (v23)
  {
    turi::v2_block_impl::get_io_locks(v24);
    turi::unfair_lock::unlock((turi::unfair_lock *)((char *)&turi::v2_block_impl::get_io_locks(void)::iolocks + 232 * v22));
  }
  if ((*((_BYTE *)v44 + *(_QWORD *)(*v44 - 24) + 32) & 5) != 0)
  {
    turi::buffer_pool<std::vector<char>>::release_buffer(v11, a4);
    std::shared_ptr<turi::neural_net::Subscriber<std::unique_ptr<turi::style_transfer::Checkpoint>>>::reset[abi:ne180100](a4);
  }
  else
  {
    std::unique_lock<turi::mutex>::unlock((uint64_t)&v46);
    if ((*(_BYTE *)(v10 + 48 * v8 + 32) & 1) != 0)
    {
      turi::buffer_pool<std::vector<char>>::get_new_buffer(v11, (uint64_t)v43);
      v25 = v10 + 48 * v8;
      v28 = *(_QWORD *)(v25 + 16);
      v27 = (unint64_t *)(v25 + 16);
      v26 = v28;
      begin = v43[0]->__begin_;
      v30 = v43[0]->__end_ - v43[0]->__begin_;
      v31 = v28 >= v30;
      v32 = v28 - v30;
      if (v32 != 0 && v31)
      {
        std::vector<char>::__append(v43[0], v32);
        begin = v43[0]->__begin_;
        v26 = *v27;
      }
      else if (!v31)
      {
        v43[0]->__end_ = &begin[v26];
      }
      LZ4_decompress_safe(*(unsigned __int8 **)a4->n128_u64[0], begin, *v15, v26);
      v33 = *a4;
      *a4 = *(__n128 *)v43;
      *(__n128 *)v43 = v33;
      turi::buffer_pool<std::vector<char>>::release_buffer(v11, (__n128 *)v43);
      v34 = (std::__shared_weak_count *)v43[1];
      if (v43[1])
      {
        p_end = (unint64_t *)&v43[1]->__end_;
        do
          v36 = __ldaxr(p_end);
        while (__stlxr(v36 - 1, p_end));
        if (!v36)
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
        }
      }
    }
  }
  v37 = v45;
  if (v45)
  {
    p_shared_owners = (unint64_t *)&v45->__shared_owners_;
    do
      v39 = __ldaxr(p_shared_owners);
    while (__stlxr(v39 - 1, p_shared_owners));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  std::unique_lock<turi::mutex>::~unique_lock[abi:ne180100]((uint64_t)&v46);
  v40 = v49;
  if (v49)
  {
    v41 = (unint64_t *)&v49->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
}

void sub_21818CE10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  va_list va1;
  uint64_t v10;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v8 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::unique_lock<turi::mutex>::~unique_lock[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v3);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  _Unwind_Resume(a1);
}

void turi::v2_block_impl::block_manager::get_segment_file_handle(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  std::string v20;
  std::string v21;
  std::string __p;
  __int128 v23;

  v6 = *a2;
  *a3 = 0;
  a3[1] = 0;
  v7 = *(std::__shared_weak_count **)(v6 + 112);
  if (v7)
  {
    v8 = std::__shared_weak_count::lock(v7);
    a3[1] = v8;
    if (v8)
    {
      v9 = *(_QWORD *)(v6 + 104);
      *a3 = v9;
      if (v9)
        goto LABEL_25;
    }
    else if (*a3)
    {
      goto LABEL_25;
    }
  }
  v10 = *a2;
  if (*(char *)(*a2 + 87) < 0)
    std::string::__init_copy_ctor_external(&v20, *(const std::string::value_type **)(v10 + 64), *(_QWORD *)(v10 + 72));
  else
    v20 = *(std::string *)(v10 + 64);
  turi::parse_v2_segment_filename((uint64_t)&v20, &v21);
  __p = v21;
  memset(&v21, 0, sizeof(v21));
  turi::v2_block_impl::block_manager::get_new_file_handle(a1, (uint64_t)&__p, &v23);
  std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)a3, &v23);
  v11 = (std::__shared_weak_count *)*((_QWORD *)&v23 + 1);
  if (*((_QWORD *)&v23 + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  v14 = *a2;
  v16 = (_QWORD *)*a3;
  v15 = a3[1];
  if (v15)
  {
    v17 = (unint64_t *)(v15 + 16);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  v19 = *(std::__shared_weak_count **)(v14 + 112);
  *(_QWORD *)(v14 + 104) = v16;
  *(_QWORD *)(v14 + 112) = v15;
  if (v19)
    std::__shared_weak_count::__release_weak(v19);
LABEL_25:
  std::ios_base::clear((std::ios_base *)(*a3 + *(_QWORD *)(*(_QWORD *)*a3 - 24)), 0);
}

void sub_21818CFF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v28);
  _Unwind_Resume(a1);
}

void turi::v2_block_impl::get_io_locks(turi::v2_block_impl *this)
{
  unsigned __int8 v1;
  uint64_t i;

  {
    for (i = 0; i != 3712; i += 232)
      turi::unfair_lock::unfair_lock((turi::unfair_lock *)((char *)&turi::v2_block_impl::get_io_locks(void)::iolocks + i));
    __cxa_atexit((void (*)(void *))__cxx_global_array_dtor_0, 0, &dword_217E69000);
  }
}

void sub_21818D0DC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  while (v1)
  {
    v1 -= 232;
    turi::unfair_lock::~unfair_lock((turi::unfair_lock *)(v1 + v2));
  }
  _Unwind_Resume(a1);
}

uint64_t std::unique_lock<turi::mutex>::unlock(uint64_t a1)
{
  uint64_t result;

  if (*(_BYTE *)(a1 + 8))
  {
    result = pthread_mutex_unlock(*(pthread_mutex_t **)a1);
    *(_BYTE *)(a1 + 8) = 0;
  }
  else
  {
    std::__throw_system_error(1, "unique_lock::unlock: not locked");
    return turi::v2_block_impl::block_manager::read_typed_block();
  }
  return result;
}

uint64_t turi::v2_block_impl::block_manager::read_typed_block(uint64_t a1, __int128 *a2, uint64_t *a3, _QWORD *a4)
{
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  __int128 v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;

  v15 = 0;
  v12 = *a2;
  v13 = *((_QWORD *)a2 + 2);
  turi::v2_block_impl::block_manager::read_block(a1, (unint64_t *)&v12, &v15, &v14);
  if (a4)
    *a4 = v15;
  if (v14.n128_u64[0])
  {
    v7 = turi::v2_block_impl::typed_decode(v15, *(_QWORD *)v14.n128_u64[0], *(_QWORD *)(v14.n128_u64[0] + 8) - *(_QWORD *)v14.n128_u64[0], a3);
    turi::buffer_pool<std::vector<char>>::release_buffer((pthread_mutex_t *)(a1 + 232), &v14);
  }
  else
  {
    v7 = 0;
  }
  v8 = (std::__shared_weak_count *)v14.n128_u64[1];
  if (v14.n128_u64[1])
  {
    v9 = (unint64_t *)(v14.n128_u64[1] + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  return v7;
}

void sub_21818D21C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t turi::v2_block_impl::block_manager::get_new_file_handle@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  pthread_mutex_t *v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  file_logger *v17;
  file_logger *started;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  const std::locale::facet *v22;
  std::string *v23;
  std::locale::__imp *v24;
  unint64_t *v25;
  unint64_t v26;
  _QWORD *exception;
  std::string __p;
  std::string v30;
  std::locale v31[2];
  __int128 v32;
  __int128 v33;

  v6 = (pthread_mutex_t *)(a1 + 64);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 64));
  v7 = (_QWORD *)(a1 + 184);
  v8 = *(_QWORD *)(a1 + 224);
  if (v8 >= turi::SFRAME_FILE_HANDLE_POOL_SIZE)
  {
    v32 = 0u;
    v33 = 0u;
    *(_OWORD *)&v31[0].__locale_ = 0u;
    v9 = *(_QWORD *)(a1 + 192);
    if (*(_QWORD *)(a1 + 200) != v9)
    {
      v10 = *(_QWORD *)(a1 + 216);
      v11 = (_QWORD *)(v9 + 8 * (v10 >> 8));
      v12 = *v11 + 16 * v10;
      v13 = *(_QWORD *)(v9 + (((v10 + v8) >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * (v10 + v8);
      while (v12 != v13)
      {
        v14 = *(_QWORD *)(v12 + 8);
        if (v14 && *(_QWORD *)(v14 + 8) != -1)
          std::deque<std::weak_ptr<turi::general_ifstream>>::push_back(v31, (__int128 *)v12);
        v12 += 16;
        if (v12 - *v11 == 4096)
        {
          v15 = v11[1];
          ++v11;
          v12 = v15;
        }
      }
    }
    std::deque<std::weak_ptr<turi::general_ifstream>>::__move_assign((_QWORD *)(a1 + 184), (uint64_t)v31);
    std::deque<std::weak_ptr<turi::general_ifstream>>::~deque[abi:ne180100](v31);
  }
  while (*(_QWORD *)(a1 + 224) >= (unint64_t)turi::SFRAME_FILE_HANDLE_POOL_SIZE)
    std::deque<std::weak_ptr<turi::general_ifstream>>::pop_front((_QWORD *)(a1 + 184));
  v16 = (int *)global_logger();
  if (v16[169] <= 1)
  {
    if (cppipc::must_cancel((cppipc *)v16))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v17 = (file_logger *)global_logger();
    started = file_logger::start_stream(v17, 1, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray_v2_block_manager.cpp", "get_new_file_handle", 218, 1);
    v19 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v19 && *((_BYTE *)v19 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19 + 2, (uint64_t)"Opening ", 8);
    if (*(char *)(a2 + 23) < 0)
      std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    else
      v30 = *(std::string *)a2;
    v20 = file_logger::operator<<<std::string>((uint64_t)started, (uint64_t)&v30);
    v21 = pthread_getspecific(*(_QWORD *)(v20 + 592));
    if (v21)
    {
      if (*((_BYTE *)v21 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v21 + *(_QWORD *)(v21[2] - 24) + 16));
        v22 = std::locale::use_facet(v31, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v22->__vftable[2].~facet_0)(v22, 10);
        std::locale::~locale(v31);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush((file_logger *)v20);
        if (*(_DWORD *)(v20 + 600) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v30.__r_.__value_.__l.__data_);
  }
  v23 = (std::string *)operator new();
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  turi::general_ifstream::general_ifstream(v23, (uint64_t)&__p, 0);
  std::shared_ptr<turi::general_ifstream>::shared_ptr[abi:ne180100]<turi::general_ifstream,void>(a3, (uint64_t)v23);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if ((*(_BYTE *)(*a3 + *(_QWORD *)(*(_QWORD *)*a3 - 24) + 32) & 5) != 0)
  {
    v31[0].__locale_ = (std::locale::__imp *)a2;
    turi::v2_block_impl::block_manager::get_new_file_handle(std::string)::$_1::operator()();
  }
  v24 = (std::locale::__imp *)a3[1];
  v31[0] = *(std::locale *)a3;
  v31[1].__locale_ = v24;
  if (v24)
  {
    v25 = (unint64_t *)((char *)v24 + 16);
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  std::deque<std::weak_ptr<turi::general_ifstream>>::push_back(v7, (__n128 *)v31);
  if (v31[1].__locale_)
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v31[1].__locale_);
  return pthread_mutex_unlock(v6);
}

void sub_21818D5A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,std::locale a23,std::__shared_weak_count *a24)
{
  pthread_mutex_t *v24;
  uint64_t v25;

  MEMORY[0x219A19A08](v25, 0x10B3C40C7444AC9);
  pthread_mutex_unlock(v24);
  _Unwind_Resume(a1);
}

uint64_t std::deque<std::weak_ptr<turi::general_ifstream>>::pop_front(_QWORD *a1)
{
  unint64_t v2;
  std::__shared_weak_count *v3;
  uint64_t v4;

  v2 = a1[4];
  v3 = *(std::__shared_weak_count **)(*(_QWORD *)(a1[1] + ((v2 >> 5) & 0x7FFFFFFFFFFFFF8))
                                    + 16 * v2
                                    + 8);
  if (v3)
  {
    std::__shared_weak_count::__release_weak(v3);
    v2 = a1[4];
  }
  v4 = a1[5] - 1;
  a1[4] = v2 + 1;
  a1[5] = v4;
  return std::deque<std::pair<_opaque_pthread_t *,char const*>>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)a1, 1);
}

__n128 std::deque<std::weak_ptr<turi::general_ifstream>>::push_back(_QWORD *a1, __n128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  __n128 result;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 32 * (v4 - v5) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<std::weak_ptr<turi::general_ifstream>>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  result = *a2;
  *(__n128 *)(*(_QWORD *)(v5 + ((v7 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v7) = *a2;
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  ++a1[5];
  return result;
}

void sub_21818D8EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

turi::unfair_lock *turi::unfair_lock::unfair_lock(turi::unfair_lock *this)
{
  uint64_t v2;
  const char *v3;
  uint64_t v4;
  const char *v5;

  v2 = pthread_mutex_init((pthread_mutex_t *)this, 0);
  assert_msg((_DWORD)v2 == 0, v3, v2);
  v4 = pthread_mutex_init((pthread_mutex_t *)this + 1, 0);
  assert_msg((_DWORD)v4 == 0, v5, v4);
  *((_BYTE *)this + 128) = 0;
  *((_QWORD *)this + 19) = 0;
  *((_QWORD *)this + 20) = 0;
  *((_QWORD *)this + 18) = 0;
  *((_QWORD *)this + 17) = (char *)this + 144;
  *((_DWORD *)this + 42) = 0;
  *((_QWORD *)this + 22) = 0;
  *((_DWORD *)this + 46) = 50;
  *((_BYTE *)this + 208) = 1;
  *((_QWORD *)this + 24) = 0;
  *((_QWORD *)this + 25) = 0;
  gettimeofday((timeval *)((char *)this + 216), 0);
  return this;
}

void sub_21818DA20(_Unwind_Exception *a1)
{
  pthread_mutex_t *v1;

  turi::mutex::~mutex(v1);
  _Unwind_Resume(a1);
}

void turi::unfair_lock::~unfair_lock(turi::unfair_lock *this)
{
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)this + 136, *((_QWORD **)this + 18));
  turi::mutex::~mutex((pthread_mutex_t *)this + 1);
  turi::mutex::~mutex((pthread_mutex_t *)this);
}

uint64_t std::deque<std::weak_ptr<turi::general_ifstream>>::~deque[abi:ne180100](_QWORD *a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  if (v3 == v2)
  {
    v4 = a1 + 5;
    v3 = (void **)a1[1];
  }
  else
  {
    v4 = a1 + 5;
    v5 = a1[4];
    v6 = &v2[v5 >> 8];
    v7 = (uint64_t)*v6;
    v8 = (uint64_t)*v6 + 16 * v5;
    v9 = *(uint64_t *)((char *)v2 + (((a1[5] + v5) >> 5) & 0x7FFFFFFFFFFFFF8))
       + 16 * (*((_BYTE *)a1 + 40) + v5);
    if (v8 != v9)
    {
      do
      {
        v10 = *(std::__shared_weak_count **)(v8 + 8);
        if (v10)
        {
          std::__shared_weak_count::__release_weak(v10);
          v7 = (uint64_t)*v6;
        }
        v8 += 16;
        if (v8 - v7 == 4096)
        {
          v11 = (uint64_t)v6[1];
          ++v6;
          v7 = v11;
          v8 = v11;
        }
      }
      while (v8 != v9);
      v2 = (void **)a1[1];
      v3 = (void **)a1[2];
    }
  }
  *v4 = 0;
  v12 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v12 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v13 = v12 >> 3;
  if (v13 == 1)
  {
    v14 = 128;
  }
  else
  {
    if (v13 != 2)
      goto LABEL_18;
    v14 = 256;
  }
  a1[4] = v14;
LABEL_18:
  while (v2 != v3)
  {
    v15 = *v2++;
    operator delete(v15);
  }
  return std::__split_buffer<std::shared_ptr<std::vector<turi::flexible_type>> *,std::allocator<std::shared_ptr<std::vector<turi::flexible_type>> *>>::~__split_buffer((uint64_t)a1);
}

uint64_t _ZNSt3__115allocate_sharedB8ne180100IN4turi13v2_block_impl13block_manager7segmentENS_9allocatorIS4_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(_QWORD *a1@<X8>)
{
  char *v2;
  uint64_t result;

  v2 = (char *)operator new(0xB8uLL);
  result = _ZNSt3__120__shared_ptr_emplaceIN4turi13v2_block_impl13block_manager7segmentENS_9allocatorIS4_EEEC2B8ne180100IJES6_Li0EEES6_DpOT_((uint64_t)v2);
  *a1 = v2 + 24;
  a1[1] = v2;
  return result;
}

void sub_21818DBC0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t _ZNSt3__120__shared_ptr_emplaceIN4turi13v2_block_impl13block_manager7segmentENS_9allocatorIS4_EEEC2B8ne180100IJES6_Li0EEES6_DpOT_(uint64_t a1)
{
  uint64_t v2;
  const char *v3;

  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &unk_24D9310F8;
  *(_QWORD *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  v2 = pthread_mutex_init((pthread_mutex_t *)(a1 + 24), 0);
  assert_msg((_DWORD)v2 == 0, v3, v2);
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 129) = 0u;
  *(_QWORD *)(a1 + 176) = 0;
  return a1;
}

void sub_21818DC78(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<turi::v2_block_impl::block_manager::segment>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D9310F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::v2_block_impl::block_manager::segment>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D9310F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

void std::__shared_ptr_emplace<turi::v2_block_impl::block_manager::segment>::__on_zero_shared(uint64_t a1)
{
  char v1;

  std::allocator<turi::v2_block_impl::block_manager::segment>::destroy[abi:ne180100]((uint64_t)&v1, a1 + 24);
}

void std::allocator<turi::v2_block_impl::block_manager::segment>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  void **v4;

  v4 = (void **)(a2 + 128);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v4);
  v3 = *(std::__shared_weak_count **)(a2 + 112);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  if (*(char *)(a2 + 87) < 0)
    operator delete(*(void **)(a2 + 64));
  turi::mutex::~mutex((pthread_mutex_t *)a2);
}

uint64_t std::__tree<std::__value_type<unsigned long,std::shared_ptr<turi::v2_block_impl::block_manager::segment>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::shared_ptr<turi::v2_block_impl::block_manager::segment>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::shared_ptr<turi::v2_block_impl::block_manager::segment>>>>::__erase_unique<unsigned long>(uint64_t a1, unint64_t *a2)
{
  _QWORD *v2;
  unint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  BOOL v6;
  _QWORD *v7;

  v2 = *(_QWORD **)(a1 + 8);
  if (!v2)
    return 0;
  v3 = *a2;
  v4 = (uint64_t *)(a1 + 8);
  do
  {
    v5 = v2[4];
    v6 = v5 >= v3;
    if (v5 >= v3)
      v7 = v2;
    else
      v7 = v2 + 1;
    if (v6)
      v4 = v2;
    v2 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v4 == (uint64_t *)(a1 + 8) || v3 < v4[4])
    return 0;
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__remove_node_pointer((uint64_t **)a1, v4);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v4 + 5));
  operator delete(v4);
  return 1;
}

void std::deque<std::weak_ptr<turi::general_ifstream>>::push_back(_QWORD *a1, __int128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  unint64_t *v10;
  unint64_t v11;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = 32 * (v4 - v5) - 1;
  v7 = a1[5];
  v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<std::weak_ptr<turi::general_ifstream>>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5];
    v8 = v7 + a1[4];
  }
  v9 = *a2;
  *(_OWORD *)(*(_QWORD *)(v5 + ((v8 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v8) = *a2;
  if (*((_QWORD *)&v9 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v9 + 1) + 16);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v7 = a1[5];
  }
  a1[5] = v7 + 1;
}

void std::deque<std::weak_ptr<turi::general_ifstream>>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x100;
  v4 = v2 - 256;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      std::__split_buffer<char *>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    std::__split_buffer<char *>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  std::__split_buffer<char *>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<char *>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_21818E140(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t std::deque<std::weak_ptr<turi::general_ifstream>>::__move_assign(_QWORD *a1, uint64_t a2)
{
  void **v4;
  void **v5;
  _QWORD *v6;
  unint64_t v7;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;

  v4 = (void **)a1[1];
  v5 = (void **)a1[2];
  if (v5 == v4)
  {
    v6 = a1 + 5;
    v5 = (void **)a1[1];
  }
  else
  {
    v6 = a1 + 5;
    v7 = a1[4];
    v8 = &v4[v7 >> 8];
    v9 = (uint64_t)*v8;
    v10 = (uint64_t)*v8 + 16 * v7;
    v11 = *(uint64_t *)((char *)v4 + (((a1[5] + v7) >> 5) & 0x7FFFFFFFFFFFFF8))
        + 16 * (*((_BYTE *)a1 + 40) + v7);
    if (v10 != v11)
    {
      do
      {
        v12 = *(std::__shared_weak_count **)(v10 + 8);
        if (v12)
        {
          std::__shared_weak_count::__release_weak(v12);
          v9 = (uint64_t)*v8;
        }
        v10 += 16;
        if (v10 - v9 == 4096)
        {
          v13 = (uint64_t)v8[1];
          ++v8;
          v9 = v13;
          v10 = v13;
        }
      }
      while (v10 != v11);
      v4 = (void **)a1[1];
      v5 = (void **)a1[2];
    }
  }
  *v6 = 0;
  v14 = (char *)v5 - (char *)v4;
  if ((unint64_t)((char *)v5 - (char *)v4) >= 0x11)
  {
    do
    {
      operator delete(*v4);
      v15 = a1[2];
      v4 = (void **)(a1[1] + 8);
      a1[1] = v4;
      v14 = v15 - (_QWORD)v4;
    }
    while (v14 > 0x10);
  }
  if (v14 >> 3 == 1)
  {
    v16 = 128;
    goto LABEL_16;
  }
  if (v14 >> 3 == 2)
  {
    v16 = 256;
LABEL_16:
    a1[4] = v16;
  }
  std::deque<std::weak_ptr<turi::general_ifstream>>::shrink_to_fit(a1);
  result = std::__split_buffer<std::weak_ptr<turi::general_ifstream> *,std::allocator<std::weak_ptr<turi::general_ifstream> *>>::operator=((uint64_t)a1, a2);
  a1[4] = *(_QWORD *)(a2 + 32);
  a1[5] = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void std::deque<std::weak_ptr<turi::general_ifstream>>::shrink_to_fit(_QWORD *a1)
{
  uint64_t i;
  uint64_t v3;

  if (a1[5])
  {
    std::deque<std::pair<_opaque_pthread_t *,char const*>>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)a1, 0);
    std::deque<std::shared_ptr<std::vector<turi::flexible_type>>>::__maybe_remove_back_spare[abi:ne180100](a1, 0);
  }
  else
  {
    v3 = a1[1];
    for (i = a1[2]; i != v3; a1[2] = i)
    {
      operator delete(*(void **)(i - 8));
      v3 = a1[1];
      i = a1[2] - 8;
    }
    a1[4] = 0;
  }
  std::__split_buffer<std::weak_ptr<turi::general_ifstream> *,std::allocator<std::weak_ptr<turi::general_ifstream> *>>::shrink_to_fit((uint64_t)a1);
}

void std::__split_buffer<std::weak_ptr<turi::general_ifstream> *,std::allocator<std::weak_ptr<turi::general_ifstream> *>>::shrink_to_fit(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;

  v3 = *(_QWORD *)(a1 + 24);
  v2 = a1 + 24;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = (v5 - v4) >> 3;
  if (v6 < (v3 - *(_QWORD *)a1) >> 3)
  {
    if (v5 == v4)
    {
      v10 = 0;
      v7 = 0;
    }
    else
    {
      v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v2, v6);
      v8 = *(_QWORD *)(a1 + 8);
      v5 = *(_QWORD *)(a1 + 16);
      v10 = &v7[8 * v9];
      v11 = v5 - v8;
      if (v5 != v8)
      {
        v12 = 0;
        v13 = 8 * (v11 >> 3);
        do
        {
          *(_QWORD *)&v7[v12] = *(_QWORD *)(v8 + v12);
          v12 += 8;
        }
        while (v13 != v12);
        v5 = *(_QWORD *)(a1 + 8);
        v14 = *(_QWORD *)(a1 + 16);
        goto LABEL_9;
      }
    }
    v14 = v5;
LABEL_9:
    v15 = v14 - v5;
    v16 = *(void **)a1;
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = &v7[v15];
    *(_QWORD *)(a1 + 24) = v10;
    if (v16)
      operator delete(v16);
  }
}

uint64_t std::__split_buffer<std::weak_ptr<turi::general_ifstream> *,std::allocator<std::weak_ptr<turi::general_ifstream> *>>::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if (v4 != v5)
    *(_QWORD *)(a1 + 16) = v4 + ((v5 - v4 + 7) & 0xFFFFFFFFFFFFFFF8);
  std::__split_buffer<std::weak_ptr<turi::general_ifstream> *,std::allocator<std::weak_ptr<turi::general_ifstream> *>>::shrink_to_fit(a1);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  return a1;
}

_QWORD *std::shared_ptr<turi::general_ifstream>::shared_ptr[abi:ne180100]<turi::general_ifstream,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_24D931148;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_21818E4B0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_pointer<turi::general_ifstream *,std::shared_ptr<turi::general_ifstream>::__shared_ptr_default_delete<turi::general_ifstream,turi::general_ifstream>,std::allocator<turi::general_ifstream>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<turi::general_ifstream *,std::shared_ptr<turi::general_ifstream>::__shared_ptr_default_delete<turi::general_ifstream,turi::general_ifstream>,std::allocator<turi::general_ifstream>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void turi::archive_detail::vector_deserialize_impl<turi::iarchive,std::vector<turi::v2_block_impl::block_info>,false>::exec(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t i;
  unint64_t v8;

  v8 = 0;
  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
  {
    v5 = *(_QWORD *)(a1 + 24);
    v8 = *(_QWORD *)(v4 + v5);
    *(_QWORD *)(a1 + 24) = v5 + 8;
  }
  else
  {
    std::istream::read();
  }
  std::vector<std::vector<float>>::__clear[abi:ne180100](a2);
  std::vector<std::vector<turi::v2_block_impl::block_info>>::resize(a2, v8);
  if (v8)
  {
    v6 = 0;
    for (i = 0; i < v8; ++i)
    {
      turi::archive_detail::vector_deserialize_impl<turi::iarchive,turi::v2_block_impl::block_info,true>::exec(a1, (_QWORD *)(*a2 + v6));
      v6 += 24;
    }
  }
}

void std::vector<std::vector<turi::v2_block_impl::block_info>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;

  v3 = a1[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<turi::v2_block_impl::block_info>>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 24 * a2;
    if (v3 != v7)
    {
      v8 = a1[1];
      do
      {
        v10 = *(void **)(v8 - 24);
        v8 -= 24;
        v9 = v10;
        if (v10)
        {
          *(_QWORD *)(v3 - 16) = v9;
          operator delete(v9);
        }
        v3 = v8;
      }
      while (v8 != v7);
    }
    a1[1] = v7;
  }
}

void std::vector<std::vector<turi::v2_block_impl::block_info>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  size_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    v19 = v4;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>(v4, v11);
    else
      v12 = 0;
    v15 = v12;
    v16 = &v12[24 * v8];
    v18 = &v12[24 * v11];
    v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    v17 = &v16[v14];
    std::vector<std::vector<turi::v2_block_impl::block_info>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)&v15);
  }
}

void sub_21818E7B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<turi::v2_block_impl::block_info>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<turi::v2_block_impl::block_info>>,std::reverse_iterator<std::vector<turi::v2_block_impl::block_info>*>,std::reverse_iterator<std::vector<turi::v2_block_impl::block_info>*>,std::reverse_iterator<std::vector<turi::v2_block_impl::block_info>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<turi::v2_block_impl::block_info>>,std::reverse_iterator<std::vector<turi::v2_block_impl::block_info>*>,std::reverse_iterator<std::vector<turi::v2_block_impl::block_info>*>,std::reverse_iterator<std::vector<turi::v2_block_impl::block_info>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<turi::v2_block_impl::block_info>>,std::reverse_iterator<std::vector<turi::v2_block_impl::block_info>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<turi::v2_block_impl::block_info>>,std::reverse_iterator<std::vector<turi::v2_block_impl::block_info>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void *turi::archive_detail::vector_deserialize_impl<turi::iarchive,turi::v2_block_impl::block_info,true>::exec(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  void *v7;
  size_t v8;
  uint64_t v9;
  void *result;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
  {
    v5 = *(_QWORD *)(a1 + 24);
    v6 = *(_QWORD *)(v4 + v5);
    *(_QWORD *)(a1 + 24) = v5 + 8;
  }
  else
  {
    std::istream::read();
    v6 = 0;
  }
  a2[1] = *a2;
  std::vector<turi::v2_block_impl::block_info>::resize((uint64_t)a2, v6);
  v7 = (void *)*a2;
  v8 = a2[1] - *a2;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
    return (void *)std::istream::read();
  result = memcpy(v7, (const void *)(v9 + *(_QWORD *)(a1 + 24)), v8);
  *(_QWORD *)(a1 + 24) += v8;
  return result;
}

void std::vector<turi::v2_block_impl::block_info>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;

  v2 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 4);
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<turi::v2_block_impl::block_info>::__append((void **)a1, v4);
  }
  else if (!v3)
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 48 * a2;
  }
}

void std::vector<turi::v2_block_impl::block_info>::__append(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  __int128 v22;
  __int128 v23;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 4) >= a2)
  {
    if (a2)
    {
      v13 = &v7[48 * a2];
      v14 = 48 * a2;
      do
      {
        *((_QWORD *)v7 + 5) = 0;
        *(_QWORD *)v7 = -1;
        *(_OWORD *)(v7 + 8) = 0uLL;
        *(_OWORD *)(v7 + 24) = 0uLL;
        *((_WORD *)v7 + 20) = 0;
        v7 += 48;
        v14 -= 48;
      }
      while (v14);
      v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (_BYTE *)*a1) >> 4);
    v9 = v8 + a2;
    if (v8 + a2 > 0x555555555555555)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (_BYTE *)*a1) >> 4);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x2AAAAAAAAAAAAAALL)
      v11 = 0x555555555555555;
    else
      v11 = v9;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>>(v4, v11);
    else
      v12 = 0;
    v15 = &v12[48 * v8];
    v16 = &v15[48 * a2];
    v17 = 48 * a2;
    v18 = v15;
    do
    {
      *((_QWORD *)v18 + 5) = 0;
      *(_QWORD *)v18 = -1;
      *(_OWORD *)(v18 + 8) = 0uLL;
      *(_OWORD *)(v18 + 24) = 0uLL;
      *((_WORD *)v18 + 20) = 0;
      v18 += 48;
      v17 -= 48;
    }
    while (v17);
    v19 = &v12[48 * v11];
    v21 = (char *)*a1;
    v20 = (char *)a1[1];
    if (v20 != *a1)
    {
      do
      {
        v22 = *((_OWORD *)v20 - 3);
        v23 = *((_OWORD *)v20 - 2);
        *(_OWORD *)(v15 - 22) = *(_OWORD *)(v20 - 22);
        *((_OWORD *)v15 - 3) = v22;
        *((_OWORD *)v15 - 2) = v23;
        v15 -= 48;
        v20 -= 48;
      }
      while (v20 != v21);
      v20 = (char *)*a1;
    }
    *a1 = v15;
    a1[1] = v16;
    a1[2] = v19;
    if (v20)
      operator delete(v20);
  }
}

void __cxx_global_array_dtor_0()
{
  uint64_t v0;

  v0 = 0xE80u;
  do
  {
    std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)&turi::v2_block_impl::get_io_locks(void)::iolocks + v0 - 96, *(_QWORD **)((char *)&turi::v2_block_impl::get_io_locks(void)::iolocks + v0 - 88));
    turi::mutex::~mutex((pthread_mutex_t *)((char *)&turi::v2_block_impl::get_io_locks(void)::iolocks + v0 - 168));
    turi::mutex::~mutex((pthread_mutex_t *)((char *)&turi::v2_block_impl::get_io_locks(void)::iolocks + v0 - 232));
    v0 -= 232;
  }
  while (v0);
}

uint64_t _GLOBAL__sub_I_sarray_v2_block_manager_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

float32x4_t turi::neural_net::image_box::normalize(float32x4_t *this, double a2, float a3)
{
  float32x4_t result;

  *((float *)&a2 + 1) = a3;
  result = vdivq_f32(*this, (float32x4_t)vdupq_lane_s64(*(uint64_t *)&a2, 0));
  *this = result;
  return result;
}

float32x2_t turi::neural_net::image_box::clip(float32x2_t *a1, float32x2_t a2, float32_t a3, float32x2_t a4, float32_t a5)
{
  float32x2_t v5;
  float32x2_t v6;
  float32x2_t v7;
  float32x2_t result;

  a2.f32[1] = a3;
  v5 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(a2, *a1), (int8x8_t)a2, (int8x8_t)*a1);
  v6 = vadd_f32(*a1, a1[1]);
  a4.f32[1] = a5;
  v7 = vadd_f32(a2, a4);
  result = vsub_f32((float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v6, v7), (int8x8_t)v7, (int8x8_t)v6), v5);
  *a1 = v5;
  a1[1] = result;
  return result;
}

void std::vector<turi::neural_net::labeled_image>::resize(uint64_t *a1, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  _QWORD *v5;

  v3 = (_QWORD *)a1[1];
  v4 = ((uint64_t)v3 - *a1) >> 6;
  if (a2 <= v4)
  {
    if (a2 < v4)
    {
      v5 = (_QWORD *)(*a1 + (a2 << 6));
      while (v3 != v5)
      {
        v3 -= 8;
        std::allocator<turi::neural_net::labeled_image>::destroy[abi:ne180100]((uint64_t)(a1 + 2), v3);
      }
      a1[1] = (uint64_t)v5;
    }
  }
  else
  {
    std::vector<turi::neural_net::labeled_image>::__append(a1, a2 - v4);
  }
}

void turi::neural_net::image_augmenter::result::~result(turi::neural_net::image_augmenter::result *this)
{
  void **v2;

  v2 = (void **)((char *)this + 56);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v2);
  *(_QWORD *)this = &unk_24D9175B8;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

void std::vector<turi::neural_net::labeled_image>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  void *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (a2 <= (v6 - v7) >> 6)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), a2 << 6);
      v7 += a2 << 6;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = v7 - *a1;
    v9 = a2 + (v8 >> 6);
    if (v9 >> 58)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 6;
    v11 = v5 - *a1;
    if (v11 >> 5 > v9)
      v9 = v11 >> 5;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFC0)
      v12 = 0x3FFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    v18 = v4;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::mutex>>(v4, v12);
    else
      v13 = 0;
    v14 = v13;
    v15 = &v13[64 * v10];
    v17 = &v13[64 * v12];
    bzero(v15, a2 << 6);
    v16 = &v15[64 * a2];
    std::vector<turi::neural_net::labeled_image>::__swap_out_circular_buffer(a1, &v14);
    std::__split_buffer<turi::query_eval::opt_union_project_merge::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::input_info,std::allocator<turi::query_eval::opt_union_project_merge::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::input_info> &>::~__split_buffer(&v14);
  }
}

void sub_21818EE2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<turi::query_eval::opt_union_project_merge::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::input_info,std::allocator<turi::query_eval::opt_union_project_merge::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::input_info> &>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<turi::neural_net::labeled_image>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::neural_net::labeled_image>,std::reverse_iterator<turi::neural_net::labeled_image*>,std::reverse_iterator<turi::neural_net::labeled_image*>,std::reverse_iterator<turi::neural_net::labeled_image*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::neural_net::labeled_image>,std::reverse_iterator<turi::neural_net::labeled_image*>,std::reverse_iterator<turi::neural_net::labeled_image*>,std::reverse_iterator<turi::neural_net::labeled_image*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      v8 = *(_OWORD *)(a3 - 64);
      a3 -= 64;
      *(_OWORD *)(v7 - 64) = v8;
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(v7 - 48) = 0;
      *(_QWORD *)(v7 - 40) = 0;
      *(_QWORD *)(v7 - 32) = 0;
      *(_OWORD *)(v7 - 48) = *(_OWORD *)(a3 + 16);
      *(_QWORD *)(v7 - 32) = *(_QWORD *)(a3 + 32);
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)(a3 + 24) = 0;
      *(_QWORD *)(a3 + 32) = 0;
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(a3 + 40);
      *(_QWORD *)(v7 - 8) = *(_QWORD *)(a3 + 56);
      *(_QWORD *)(a3 + 40) = 0;
      *(_QWORD *)(a3 + 48) = 0;
      *(_QWORD *)(a3 + 56) = 0;
      v7 = *((_QWORD *)&v14 + 1) - 64;
      *((_QWORD *)&v14 + 1) -= 64;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::neural_net::labeled_image>,std::reverse_iterator<turi::neural_net::labeled_image*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::neural_net::labeled_image>,std::reverse_iterator<turi::neural_net::labeled_image*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<turi::query_eval::opt_union_project_merge::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::input_info>,std::reverse_iterator<turi::query_eval::opt_union_project_merge::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::input_info*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

uint64_t _GLOBAL__sub_I_image_augmentation_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void turi::v2_block_impl::block_writer::init(uint64_t a1, const std::string *a2, unint64_t a3, unint64_t a4)
{
  uint64_t *v8;
  uint64_t *v9;
  unint64_t v10;
  size_t v11;
  std::string *v12;
  const void *v13;
  std::string *v14;
  std::string::size_type size;
  std::string *v16;
  std::string::size_type v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const void **v24;
  const void **v25;
  size_t v26;
  std::string *v27;
  const void *v28;
  std::string *v29;
  std::string::size_type v30;
  std::string *v31;
  std::string::size_type v32;
  char v33;
  unint64_t v34;
  uint64_t *v35;
  std::string v36;
  std::string v37;
  _QWORD v38[3];

  v38[2] = *MEMORY[0x24BDAC8D0];
  std::vector<std::shared_ptr<turi::sframe_rows const>>::resize(a1 + 144, a3);
  std::vector<turi::mutex>::resize((uint64_t *)(a1 + 168), a3);
  std::vector<unsigned long>::resize(a1 + 192, a3);
  *(_QWORD *)(a1 + 64) = 2 * a3;
  std::vector<std::vector<std::vector<turi::v2_block_impl::block_info>>>::resize((uint64_t *)(a1 + 304), a3);
  v8 = *(uint64_t **)(a1 + 304);
  v9 = *(uint64_t **)(a1 + 312);
  while (v8 != v9)
  {
    std::vector<std::vector<turi::v2_block_impl::block_info>>::resize(v8, a4);
    v8 += 3;
  }
  std::string::operator=((std::string *)(a1 + 216), a2);
  *(_DWORD *)(a1 + 240) = 2;
  *(_QWORD *)(a1 + 248) = a3;
  std::vector<std::string>::resize((std::vector<std::string> *)(a1 + 256), a3);
  v35 = (uint64_t *)(a1 + 280);
  std::vector<turi::index_file_information>::resize((uint64_t *)(a1 + 280), a4);
  if (*(_QWORD *)(a1 + 288) != *(_QWORD *)(a1 + 280))
  {
    v10 = 0;
    do
    {
      if (*(char *)(a1 + 239) >= 0)
        v11 = *(unsigned __int8 *)(a1 + 239);
      else
        v11 = *(_QWORD *)(a1 + 224);
      std::string::basic_string[abi:ne180100]((uint64_t)&v37, v11 + 1);
      if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v12 = &v37;
      else
        v12 = (std::string *)v37.__r_.__value_.__r.__words[0];
      if (v11)
      {
        if (*(char *)(a1 + 239) >= 0)
          v13 = (const void *)(a1 + 216);
        else
          v13 = *(const void **)(a1 + 216);
        memmove(v12, v13, v11);
      }
      *(_WORD *)((char *)&v12->__r_.__value_.__l.__data_ + v11) = 58;
      std::to_string(&v36, v10);
      if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v14 = &v36;
      else
        v14 = (std::string *)v36.__r_.__value_.__r.__words[0];
      if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v36.__r_.__value_.__r.__words[2]);
      else
        size = v36.__r_.__value_.__l.__size_;
      v16 = std::string::append(&v37, (const std::string::value_type *)v14, size);
      v17 = v16->__r_.__value_.__r.__words[0];
      v38[0] = v16->__r_.__value_.__l.__size_;
      *(_QWORD *)((char *)v38 + 7) = *(std::string::size_type *)((char *)&v16->__r_.__value_.__r.__words[1] + 7);
      v18 = HIBYTE(v16->__r_.__value_.__r.__words[2]);
      v16->__r_.__value_.__l.__size_ = 0;
      v16->__r_.__value_.__r.__words[2] = 0;
      v16->__r_.__value_.__r.__words[0] = 0;
      v19 = *v35 + 144 * v10;
      if (*(char *)(v19 + 23) < 0)
        operator delete(*(void **)v19);
      v20 = v38[0];
      *(_QWORD *)v19 = v17;
      *(_QWORD *)(v19 + 8) = v20;
      *(_QWORD *)(v19 + 15) = *(_QWORD *)((char *)v38 + 7);
      *(_BYTE *)(v19 + 23) = v18;
      if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v36.__r_.__value_.__l.__data_);
      if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v37.__r_.__value_.__l.__data_);
      v21 = *(_QWORD *)(a1 + 280);
      v22 = v21 + 144 * v10;
      *(_DWORD *)(v22 + 24) = 2;
      *(_QWORD *)(v22 + 32) = *(_QWORD *)(a1 + 248);
      if (v22 + 96 != a1 + 256)
      {
        std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)(v22 + 96), *(std::string **)(a1 + 256), *(__int128 **)(a1 + 264), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 264) - *(_QWORD *)(a1 + 256)) >> 3));
        v21 = *(_QWORD *)(a1 + 280);
      }
      v23 = v21 + 144 * v10;
      v24 = *(const void ***)(v23 + 96);
      v25 = *(const void ***)(v23 + 104);
      if (v24 != v25)
      {
        do
        {
          if (*((char *)v24 + 23) >= 0)
            v26 = *((unsigned __int8 *)v24 + 23);
          else
            v26 = (size_t)v24[1];
          std::string::basic_string[abi:ne180100]((uint64_t)&v37, v26 + 1);
          if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v27 = &v37;
          else
            v27 = (std::string *)v37.__r_.__value_.__r.__words[0];
          if (v26)
          {
            if (*((char *)v24 + 23) >= 0)
              v28 = v24;
            else
              v28 = *v24;
            memmove(v27, v28, v26);
          }
          *(_WORD *)((char *)&v27->__r_.__value_.__l.__data_ + v26) = 58;
          std::to_string(&v36, v10);
          if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v29 = &v36;
          else
            v29 = (std::string *)v36.__r_.__value_.__r.__words[0];
          if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v30 = HIBYTE(v36.__r_.__value_.__r.__words[2]);
          else
            v30 = v36.__r_.__value_.__l.__size_;
          v31 = std::string::append(&v37, (const std::string::value_type *)v29, v30);
          v32 = v31->__r_.__value_.__r.__words[0];
          v38[0] = v31->__r_.__value_.__l.__size_;
          *(_QWORD *)((char *)v38 + 7) = *(std::string::size_type *)((char *)&v31->__r_.__value_.__r.__words[1] + 7);
          v33 = HIBYTE(v31->__r_.__value_.__r.__words[2]);
          v31->__r_.__value_.__l.__size_ = 0;
          v31->__r_.__value_.__r.__words[2] = 0;
          v31->__r_.__value_.__r.__words[0] = 0;
          if (*((char *)v24 + 23) < 0)
            operator delete((void *)*v24);
          *v24 = (const void *)v32;
          v24[1] = (const void *)v38[0];
          *(const void **)((char *)v24 + 15) = *(const void **)((char *)v38 + 7);
          *((_BYTE *)v24 + 23) = v33;
          if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v36.__r_.__value_.__l.__data_);
          if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v37.__r_.__value_.__l.__data_);
          v24 += 3;
        }
        while (v24 != v25);
        v21 = *v35;
      }
      v34 = *(_QWORD *)(a1 + 248);
      v37.__r_.__value_.__r.__words[0] = 0;
      std::vector<unsigned long>::resize(v21 + 144 * v10++ + 72, v34, &v37);
    }
    while (v10 < 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a1 + 288) - *(_QWORD *)(a1 + 280)) >> 4));
  }
}

void sub_21818F3BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(exception_object);
}

void std::vector<turi::mutex>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  v3 = a1[1];
  v4 = (v3 - *a1) >> 6;
  if (a2 <= v4)
  {
    if (a2 < v4)
    {
      v5 = *a1 + (a2 << 6);
      while (v3 != v5)
        turi::mutex::~mutex((pthread_mutex_t *)(v3 - 64));
      a1[1] = v5;
    }
  }
  else
  {
    std::vector<turi::mutex>::__append(a1, a2 - v4);
  }
}

void std::vector<std::vector<std::vector<turi::v2_block_impl::block_info>>>::resize(uint64_t *a1, unint64_t a2)
{
  void **v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  void **v8;

  v3 = (void **)a1[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<std::vector<turi::v2_block_impl::block_info>>>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 24 * a2;
    while (v3 != (void **)v7)
    {
      v3 -= 3;
      v8 = v3;
      std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v8);
    }
    a1[1] = v7;
  }
}

void std::vector<turi::index_file_information>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;

  v3 = a1[1];
  v4 = 0x8E38E38E38E38E39 * ((v3 - *a1) >> 4);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<turi::index_file_information>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 144 * a2;
    while (v3 != v7)
    {
      v3 -= 144;
      std::allocator<turi::index_file_information>::destroy[abi:ne180100]((uint64_t)(a1 + 2), v3);
    }
    a1[1] = v7;
  }
}

BOOL turi::v2_block_impl::block_writer::open_segment(_QWORD *a1, std::string::size_type a2, std::string::size_type a3)
{
  _QWORD *v5;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  std::string *v12;
  const void *v13;
  std::string *v14;
  std::string::size_type size;
  std::string *v16;
  std::string::size_type v17;
  char v18;
  uint64_t v19;
  _BOOL8 result;
  std::string v21;
  std::string v22;
  std::string v23;
  _QWORD v24[3];

  v24[2] = *MEMORY[0x24BDAC8D0];
  v21.__r_.__value_.__r.__words[0] = a2;
  v24[0] = a1[31];
  if (v24[0] <= a2)
  {
    v22.__r_.__value_.__r.__words[0] = (std::string::size_type)&v21;
    v22.__r_.__value_.__l.__size_ = (std::string::size_type)v24;
    turi::v2_block_impl::block_writer::open_segment(unsigned long,std::string)::$_0::operator()();
  }
  v5 = (_QWORD *)(a1[18] + 16 * a2);
  if (*v5)
    turi::v2_block_impl::block_writer::open_segment(unsigned long,std::string)::$_1::operator()();
  v7 = (_QWORD *)operator new();
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v23, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v23 = *(std::string *)a3;
  turi::general_ofstream::general_ofstream(v7, (uint64_t)&v23, 0);
  std::shared_ptr<turi::general_ofstream>::reset[abi:ne180100]<turi::general_ofstream,void>(v5, (uint64_t)v7);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  std::string::operator=((std::string *)(a1[32] + 24 * a2), (const std::string *)a3);
  if (a1[36] != a1[35])
  {
    v8 = 0;
    v9 = 96;
    do
    {
      v10 = a1[32] + 24 * a2;
      if (*(char *)(v10 + 23) >= 0)
        v11 = *(unsigned __int8 *)(v10 + 23);
      else
        v11 = *(_QWORD *)(v10 + 8);
      std::string::basic_string[abi:ne180100]((uint64_t)&v22, v11 + 1);
      if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v12 = &v22;
      else
        v12 = (std::string *)v22.__r_.__value_.__r.__words[0];
      if (v11)
      {
        if (*(char *)(v10 + 23) >= 0)
          v13 = (const void *)v10;
        else
          v13 = *(const void **)v10;
        memmove(v12, v13, v11);
      }
      *(_WORD *)((char *)&v12->__r_.__value_.__l.__data_ + v11) = 58;
      std::to_string(&v21, v8);
      if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v14 = &v21;
      else
        v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
      if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v21.__r_.__value_.__r.__words[2]);
      else
        size = v21.__r_.__value_.__l.__size_;
      v16 = std::string::append(&v22, (const std::string::value_type *)v14, size);
      v17 = v16->__r_.__value_.__r.__words[0];
      v24[0] = v16->__r_.__value_.__l.__size_;
      *(_QWORD *)((char *)v24 + 7) = *(std::string::size_type *)((char *)&v16->__r_.__value_.__r.__words[1] + 7);
      v18 = HIBYTE(v16->__r_.__value_.__r.__words[2]);
      v16->__r_.__value_.__l.__size_ = 0;
      v16->__r_.__value_.__r.__words[2] = 0;
      v16->__r_.__value_.__r.__words[0] = 0;
      v19 = *(_QWORD *)(a1[35] + v9) + 24 * a2;
      if (*(char *)(v19 + 23) < 0)
        operator delete(*(void **)v19);
      *(_QWORD *)v19 = v17;
      *(_QWORD *)(v19 + 8) = v24[0];
      *(_QWORD *)(v19 + 15) = *(_QWORD *)((char *)v24 + 7);
      *(_BYTE *)(v19 + 23) = v18;
      if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v21.__r_.__value_.__l.__data_);
      if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v22.__r_.__value_.__l.__data_);
      ++v8;
      v9 += 144;
    }
    while (v8 < 0x8E38E38E38E38E39 * ((uint64_t)(a1[36] - a1[35]) >> 4));
  }
  result = turi::general_ofstream::fail(*(turi::general_ofstream **)(a1[18] + 16 * a2));
  if (result)
  {
    v22.__r_.__value_.__r.__words[0] = a3;
    turi::v2_block_impl::block_writer::open_segment(unsigned long,std::string)::$_2::operator()();
  }
  return result;
}

void sub_21818F858(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  MEMORY[0x219A19A08](v28, 0x10B3C405FC8E1FCLL);
  _Unwind_Resume(a1);
}

void turi::v2_block_impl::block_writer::open_segment(unsigned long,std::string)::$_0::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray_v2_block_writer.cpp", 117);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"segmentid", 9);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"<", 1);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"m_index_info.nsegments", 22);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"<", 1);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray_v2_block_writer.cpp", "operator()", 52, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::v2_block_impl::block_writer::open_segment(unsigned long,std::string)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_21818FA64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::v2_block_impl::block_writer::open_segment(unsigned long,std::string)::$_1::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray_v2_block_writer.cpp", 117);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"m_output_files[segmentid] == __null", 35);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray_v2_block_writer.cpp", "operator()", 53, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::v2_block_impl::block_writer::open_segment(unsigned long,std::string)::$_1::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_21818FBE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void std::shared_ptr<turi::general_ofstream>::reset[abi:ne180100]<turi::general_ofstream,void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  __int128 v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int128 v7;

  std::shared_ptr<turi::general_ofstream>::shared_ptr[abi:ne180100]<turi::general_ofstream,void>(&v7, a2);
  v3 = (std::__shared_weak_count *)a1[1];
  v4 = v7;
  *(_QWORD *)&v7 = *a1;
  *((_QWORD *)&v7 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

uint64_t turi::v2_block_impl::block_writer::set_options(uint64_t result, uint64_t *a2, uint64_t a3)
{
  int v3;

  v3 = *((char *)a2 + 23);
  if (v3 < 0)
  {
    if (a2[1] != 15)
      return result;
    a2 = (uint64_t *)*a2;
  }
  else if (v3 != 15)
  {
    return result;
  }
  if (*a2 == 0x5F656C6261736964 && *(uint64_t *)((char *)a2 + 7) == 0x676E69646461705FLL)
    *(_BYTE *)(result + 352) = a3 != 0;
  return result;
}

uint64_t turi::v2_block_impl::block_writer::write_block(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int128 *a5)
{
  unint64_t v9;
  unint64_t v10;
  int v11;
  float v12;
  float v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void **v19;
  _OWORD *v20;
  void **v21;
  unint64_t v22;
  __int128 v23;
  __int128 v24;
  _OWORD *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  __int128 v33;
  __int128 v34;
  char *v35;
  char *v36;
  __int128 v37;
  __int128 v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  __n128 v43;

  v9 = (int)LZ4_compressBound(*((_DWORD *)a5 + 4));
  turi::buffer_pool<std::vector<char>>::get_new_buffer((pthread_mutex_t *)a1, (uint64_t)&v43);
  v10 = *(_QWORD *)(v43.n128_u64[0] + 8) - *(_QWORD *)v43.n128_u64[0];
  if (v9 <= v10)
  {
    if (v9 < v10)
      *(_QWORD *)(v43.n128_u64[0] + 8) = *(_QWORD *)v43.n128_u64[0] + v9;
  }
  else
  {
    std::vector<char>::__append((std::vector<char> *)v43.n128_u64[0], v9 - v10);
  }
  v11 = LZ4_compress();
  v12 = (float)(unint64_t)v11;
  v13 = 0.9 * (float)*((unint64_t *)a5 + 2);
  if (v13 <= v12)
    v14 = *((_QWORD *)a5 + 2);
  else
    v14 = v11;
  *((_QWORD *)a5 + 4) = a5[2] & 0xFFFFFFFFFFFFFFFELL | (v13 > v12);
  *((_QWORD *)a5 + 1) = v14;
  if (*(_BYTE *)(a1 + 352))
    v15 = 0;
  else
    v15 = ((v14 + 4095) & 0xFFFFFFFFFFFFF000) - v14;
  if (v15 > 0xFFF)
    turi::v2_block_impl::block_writer::write_block(unsigned long,unsigned long,char *,turi::v2_block_impl::block_info)::$_0::operator()();
  pthread_mutex_lock((pthread_mutex_t *)(*(_QWORD *)(a1 + 168) + (a2 << 6)));
  v16 = *(_QWORD *)(a1 + 192);
  v17 = *(_QWORD *)(v16 + 8 * a2);
  *(_QWORD *)a5 = v17;
  *(_QWORD *)(v16 + 8 * a2) = v15 + v14 + v17;
  v18 = *(_QWORD *)(*(_QWORD *)(a1 + 280) + 144 * a3 + 72);
  *(_QWORD *)(v18 + 8 * a2) += *((_QWORD *)a5 + 3);
  std::ostream::write();
  std::ostream::write();
  v19 = (void **)(*(_QWORD *)(*(_QWORD *)(a1 + 304) + 24 * a2) + 24 * a3);
  v21 = v19 + 1;
  v20 = v19[1];
  v22 = (unint64_t)v19[2];
  if ((unint64_t)v20 >= v22)
  {
    v26 = 0xAAAAAAAAAAAAAAABLL * (((char *)v20 - (_BYTE *)*v19) >> 4);
    v27 = v26 + 1;
    if (v26 + 1 > 0x555555555555555)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v28 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - (_QWORD)*v19) >> 4);
    if (2 * v28 > v27)
      v27 = 2 * v28;
    if (v28 >= 0x2AAAAAAAAAAAAAALL)
      v29 = 0x555555555555555;
    else
      v29 = v27;
    if (v29)
      v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>>((uint64_t)(v19 + 2), v29);
    else
      v30 = 0;
    v31 = &v30[48 * v26];
    v32 = &v30[48 * v29];
    v33 = *a5;
    v34 = a5[2];
    *((_OWORD *)v31 + 1) = a5[1];
    *((_OWORD *)v31 + 2) = v34;
    *(_OWORD *)v31 = v33;
    v25 = v31 + 48;
    v35 = (char *)*v21;
    v36 = (char *)*v19;
    if (*v21 != *v19)
    {
      do
      {
        v37 = *((_OWORD *)v35 - 3);
        v38 = *((_OWORD *)v35 - 2);
        *(_OWORD *)(v31 - 22) = *(_OWORD *)(v35 - 22);
        *((_OWORD *)v31 - 3) = v37;
        *((_OWORD *)v31 - 2) = v38;
        v31 -= 48;
        v35 -= 48;
      }
      while (v35 != v36);
      v35 = (char *)*v19;
    }
    *v19 = v31;
    *v21 = v25;
    v19[2] = v32;
    if (v35)
      operator delete(v35);
  }
  else
  {
    v23 = *a5;
    v24 = a5[2];
    v20[1] = a5[1];
    v20[2] = v24;
    *v20 = v23;
    v25 = v20 + 3;
  }
  *v21 = v25;
  pthread_mutex_unlock((pthread_mutex_t *)(*(_QWORD *)(a1 + 168) + (a2 << 6)));
  turi::buffer_pool<std::vector<char>>::release_buffer((pthread_mutex_t *)a1, &v43);
  if (!turi::general_ofstream::good(*(turi::general_ofstream **)(*(_QWORD *)(a1 + 144) + 16 * a2)))
    turi::v2_block_impl::block_writer::write_block(unsigned long,unsigned long,char *,turi::v2_block_impl::block_info)::$_1::operator()();
  v39 = (std::__shared_weak_count *)v43.n128_u64[1];
  if (v43.n128_u64[1])
  {
    v40 = (unint64_t *)(v43.n128_u64[1] + 8);
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  return v14;
}

void sub_218190070(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void turi::v2_block_impl::block_writer::write_block(unsigned long,unsigned long,char *,turi::v2_block_impl::block_info)::$_0::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray_v2_block_writer.cpp", 117);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"padding", 7);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"<", 1);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"4096", 4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"<", 1);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray_v2_block_writer.cpp", "operator()", 113, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::v2_block_impl::block_writer::write_block(unsigned long,unsigned long,char *,turi::v2_block_impl::block_info)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_21819021C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

uint64_t turi::v2_block_impl::block_writer::write_typed_block(pthread_mutex_t *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  __int128 v17[3];
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;

  turi::buffer_pool<std::vector<char>>::get_new_buffer(a1, (uint64_t)&v22);
  v18 = 0u;
  v20 = 0;
  v19 = v22.n128_u64[0];
  *((_QWORD *)&v19 + 1) = *(_QWORD *)v22.n128_u64[0];
  v21 = *(_QWORD *)(v22.n128_u64[0] + 8) - *((_QWORD *)&v19 + 1);
  turi::v2_block_impl::typed_encode(a4, (_QWORD *)a5, (uint64_t)&v18);
  v10 = *(_QWORD *)v22.n128_u64[0];
  v11 = *(_OWORD *)(a5 + 16);
  v17[0] = *(_OWORD *)a5;
  v17[1] = v11;
  v17[2] = *(_OWORD *)(a5 + 32);
  v12 = turi::v2_block_impl::block_writer::write_block((uint64_t)a1, a2, a3, v10, v17);
  turi::buffer_pool<std::vector<char>>::release_buffer(a1, &v22);
  v13 = (std::__shared_weak_count *)v22.n128_u64[1];
  if (v22.n128_u64[1])
  {
    v14 = (unint64_t *)(v22.n128_u64[1] + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  return v12;
}

void sub_2181903A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v1 - 64);
  _Unwind_Resume(a1);
}

void turi::v2_block_impl::block_writer::close_segment(turi::v2_block_impl::block_writer *this, uint64_t a2)
{
  turi::v2_block_impl::block_writer::emit_footer(this, a2);
  std::shared_ptr<turi::neural_net::Subscriber<std::unique_ptr<turi::style_transfer::Checkpoint>>>::reset[abi:ne180100]((_QWORD *)(*((_QWORD *)this + 18) + 16 * a2));
}

BOOL turi::v2_block_impl::block_writer::emit_footer(turi::v2_block_impl::block_writer *this, uint64_t a2)
{
  _BOOL8 result;
  __int128 v5;
  void *v6[2];
  __int128 v7;

  *(_OWORD *)v6 = 0u;
  v7 = 0u;
  v5 = 0u;
  turi::archive_detail::vector_serialize_impl<turi::oarchive,std::vector<turi::v2_block_impl::block_info>,false>::exec((uint64_t)&v5, (uint64_t *)(*((_QWORD *)this + 38) + 24 * a2));
  std::ostream::write();
  std::ostream::write();
  free(v6[1]);
  result = turi::general_ofstream::good(*(turi::general_ofstream **)(*((_QWORD *)this + 18) + 16 * a2));
  if (!result)
    turi::v2_block_impl::block_writer::emit_footer(unsigned long)::$_0::operator()();
  return result;
}

uint64_t turi::v2_block_impl::block_writer::get_index_info(turi::v2_block_impl::block_writer *this)
{
  return (uint64_t)this + 216;
}

void turi::v2_block_impl::block_writer::write_index_file(turi::v2_block_impl::block_writer *this)
{
  _OWORD *v1;
  std::string __p;

  v1 = (_OWORD *)((char *)this + 216);
  if (*((char *)this + 239) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)this + 27), *((_QWORD *)this + 28));
  }
  else
  {
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *v1;
    __p.__r_.__value_.__r.__words[2] = *((_QWORD *)this + 29);
  }
  turi::write_array_group_index_file((uint64_t)&__p, (uint64_t)v1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_2181904E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<turi::mutex>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (a2 <= (v6 - v7) >> 6)
    return std::vector<turi::mutex>::__construct_at_end((uint64_t)a1, a2);
  v8 = v7 - *a1;
  v9 = a2 + (v8 >> 6);
  if (v9 >> 58)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  v10 = v8 >> 6;
  v11 = v5 - *a1;
  if (v11 >> 5 > v9)
    v9 = v11 >> 5;
  if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFC0)
    v12 = 0x3FFFFFFFFFFFFFFLL;
  else
    v12 = v9;
  v19 = v4;
  if (v12)
    v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::mutex>>(v4, v12);
  else
    v13 = 0;
  v15 = v13;
  v16 = &v13[64 * v10];
  v17 = v16;
  v18 = &v13[64 * v12];
  std::__split_buffer<turi::mutex>::__construct_at_end((uint64_t)&v15, a2);
  std::vector<turi::mutex>::__swap_out_circular_buffer(a1, &v15);
  return std::__split_buffer<turi::mutex>::~__split_buffer((uint64_t)&v15);
}

void sub_2181905E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<turi::mutex>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<turi::mutex>::__construct_at_end(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  pthread_mutex_t *v3;
  uint64_t v4;
  pthread_mutex_t *v5;
  uint64_t v6;
  const char *v7;

  v2 = result;
  v3 = *(pthread_mutex_t **)(result + 16);
  if (a2)
  {
    v4 = a2 << 6;
    v5 = &v3[a2];
    do
    {
      v6 = pthread_mutex_init(v3, 0);
      result = assert_msg((_DWORD)v6 == 0, v7, v6);
      ++v3;
      v4 -= 64;
    }
    while (v4);
    v3 = v5;
  }
  *(_QWORD *)(v2 + 16) = v3;
  return result;
}

void sub_21819066C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 16) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<turi::mutex>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::mutex>,std::reverse_iterator<turi::mutex*>,std::reverse_iterator<turi::mutex*>,std::reverse_iterator<turi::mutex*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void sub_218190884(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::mutex>,std::reverse_iterator<turi::mutex*>,std::reverse_iterator<turi::mutex*>,std::reverse_iterator<turi::mutex*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  const char *v13;

  if (a3 != a5)
  {
    v11 = 0;
    do
    {
      v12 = pthread_mutex_init((pthread_mutex_t *)(a7 - 64 + v11), 0);
      assert_msg((_DWORD)v12 == 0, v13, v12);
      v11 -= 64;
    }
    while (a3 + v11 != a5);
  }
  return a6;
}

void sub_2181909A4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;

  for (; v2; v2 += 64)
    turi::mutex::~mutex((pthread_mutex_t *)(v1 + v2));
  _Unwind_Resume(exception_object);
}

uint64_t std::__split_buffer<turi::mutex>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 64;
    turi::mutex::~mutex((pthread_mutex_t *)(i - 64));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::vector<std::vector<std::vector<turi::v2_block_impl::block_info>>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  size_t v14;
  void *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    v19 = v4;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>(v4, v11);
    else
      v12 = 0;
    v15 = v12;
    v16 = &v12[24 * v8];
    v18 = &v12[24 * v11];
    v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    v17 = &v16[v14];
    std::vector<std::vector<std::vector<turi::v2_block_impl::block_info>>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<std::vector<float>>>::~__split_buffer(&v15);
  }
}

void sub_218190B60(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<std::vector<float>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<std::vector<turi::v2_block_impl::block_info>>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::vector<turi::v2_block_impl::block_info>>>,std::reverse_iterator<std::vector<std::vector<turi::v2_block_impl::block_info>>*>,std::reverse_iterator<std::vector<std::vector<turi::v2_block_impl::block_info>>*>,std::reverse_iterator<std::vector<std::vector<turi::v2_block_impl::block_info>>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::vector<turi::v2_block_impl::block_info>>>,std::reverse_iterator<std::vector<std::vector<turi::v2_block_impl::block_info>>*>,std::reverse_iterator<std::vector<std::vector<turi::v2_block_impl::block_info>>*>,std::reverse_iterator<std::vector<std::vector<turi::v2_block_impl::block_info>>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<turi::v2_block_impl::block_info>>>,std::reverse_iterator<std::vector<std::vector<turi::v2_block_impl::block_info>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<turi::v2_block_impl::block_info>>>,std::reverse_iterator<std::vector<std::vector<turi::v2_block_impl::block_info>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<float>>>,std::reverse_iterator<std::vector<std::vector<float>>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void **std::vector<turi::index_file_information>::__append(uint64_t *a1, unint64_t a2)
{
  void **result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  void *v16[5];

  v6 = a1[2];
  result = (void **)(a1 + 2);
  v5 = v6;
  v7 = (uint64_t)*(result - 1);
  if (0x8E38E38E38E38E39 * ((v6 - v7) >> 4) >= a2)
  {
    if (a2)
    {
      v13 = v7 + 144 * a2;
      do
      {
        *(_OWORD *)v7 = 0uLL;
        *(_OWORD *)(v7 + 16) = 0uLL;
        *(_DWORD *)(v7 + 24) = -1;
        *(_QWORD *)(v7 + 136) = 0;
        *(_QWORD *)(v7 + 128) = 0;
        *(_OWORD *)(v7 + 32) = 0uLL;
        *(_OWORD *)(v7 + 48) = 0uLL;
        *(_OWORD *)(v7 + 64) = 0uLL;
        *(_OWORD *)(v7 + 80) = 0uLL;
        *(_OWORD *)(v7 + 96) = 0uLL;
        *(_QWORD *)(v7 + 112) = 0;
        *(_QWORD *)(v7 + 120) = v7 + 128;
        v7 += 144;
      }
      while (v7 != v13);
      v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0x8E38E38E38E38E39 * ((v7 - *a1) >> 4);
    v9 = v8 + a2;
    if (v8 + a2 > 0x1C71C71C71C71C7)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = 0x8E38E38E38E38E39 * ((v5 - *a1) >> 4);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0xE38E38E38E38E3)
      v11 = 0x1C71C71C71C71C7;
    else
      v11 = v9;
    v16[4] = result;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::index_file_information>>((uint64_t)result, v11);
    else
      v12 = 0;
    v14 = &v12[144 * v8];
    v16[0] = v12;
    v16[1] = v14;
    v16[3] = &v12[144 * v11];
    v15 = &v14[144 * a2];
    do
    {
      *(_OWORD *)v14 = 0uLL;
      *((_OWORD *)v14 + 1) = 0uLL;
      *((_DWORD *)v14 + 6) = -1;
      *((_QWORD *)v14 + 17) = 0;
      *((_QWORD *)v14 + 16) = 0;
      *((_OWORD *)v14 + 2) = 0uLL;
      *((_OWORD *)v14 + 3) = 0uLL;
      *((_OWORD *)v14 + 4) = 0uLL;
      *((_OWORD *)v14 + 5) = 0uLL;
      *((_OWORD *)v14 + 6) = 0uLL;
      *((_QWORD *)v14 + 14) = 0;
      *((_QWORD *)v14 + 15) = v14 + 128;
      v14 += 144;
    }
    while (v14 != v15);
    v16[2] = v15;
    std::vector<turi::index_file_information>::__swap_out_circular_buffer(a1, v16);
    return std::__split_buffer<turi::index_file_information>::~__split_buffer(v16);
  }
  return result;
}

void sub_218190E48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<turi::index_file_information>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<turi::general_ofstream>::shared_ptr[abi:ne180100]<turi::general_ofstream,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_24D9311D0;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_218190EB4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_pointer<turi::general_ofstream *,std::shared_ptr<turi::general_ofstream>::__shared_ptr_default_delete<turi::general_ofstream,turi::general_ofstream>,std::allocator<turi::general_ofstream>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<turi::general_ofstream *,std::shared_ptr<turi::general_ofstream>::__shared_ptr_default_delete<turi::general_ofstream,turi::general_ofstream>,std::allocator<turi::general_ofstream>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t turi::archive_detail::vector_serialize_impl<turi::oarchive,std::vector<turi::v2_block_impl::block_info>,false>::exec(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  uint64_t result;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  size_t v10;
  uint64_t *v11;
  size_t v12;
  BOOL v13;
  std::vector<char>::size_type v14;

  v4 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3);
  if (*(_QWORD *)a1)
  {
    result = std::ostream::write();
  }
  else
  {
    v6 = *(_QWORD *)(a1 + 40);
    if (*(_QWORD *)(a1 + 32) + 8 > v6)
    {
      v10 = 2 * v6 + 16;
      *(_QWORD *)(a1 + 40) = v10;
      v11 = *(uint64_t **)(a1 + 16);
      if (v11)
      {
        result = *v11;
        v12 = v11[1] - *v11;
        v13 = v10 >= v12;
        v14 = v10 - v12;
        if (v14 != 0 && v13)
        {
          std::vector<char>::__append(*(std::vector<char> **)(a1 + 16), v14);
          result = **(_QWORD **)(a1 + 16);
        }
        else if (!v13)
        {
          v11[1] = result + v10;
        }
      }
      else
      {
        result = (uint64_t)malloc_type_realloc(*(void **)(a1 + 24), v10, 0xF6EA6B1uLL);
      }
      *(_QWORD *)(a1 + 24) = result;
    }
    else
    {
      result = *(_QWORD *)(a1 + 24);
    }
    *(_QWORD *)(result + *(_QWORD *)(a1 + 32)) = v4;
    *(_QWORD *)(a1 + 32) += 8;
  }
  v7 = *a2;
  if (a2[1] != *a2)
  {
    v8 = 0;
    v9 = 0;
    do
    {
      result = (uint64_t)turi::archive_detail::vector_serialize_impl<turi::oarchive,turi::v2_block_impl::block_info,true>::exec(a1, (const void **)(v7 + v8));
      ++v9;
      v7 = *a2;
      v8 += 24;
    }
    while (v9 < 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  }
  return result;
}

void *turi::archive_detail::vector_serialize_impl<turi::oarchive,turi::v2_block_impl::block_info,true>::exec(uint64_t a1, const void **a2)
{
  unint64_t v4;
  unint64_t v5;
  char *v6;
  const void *v7;
  size_t v8;
  void *result;
  size_t v10;
  char *v11;
  size_t v12;
  char **v13;
  size_t v14;
  BOOL v15;
  std::vector<char>::size_type v16;
  size_t v17;
  char **v18;
  size_t v19;
  BOOL v20;
  std::vector<char>::size_type v21;

  v4 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a2[1] - (_BYTE *)*a2) >> 4);
  if (*(_QWORD *)a1)
  {
    std::ostream::write();
  }
  else
  {
    v5 = *(_QWORD *)(a1 + 40);
    if (*(_QWORD *)(a1 + 32) + 8 > v5)
    {
      v12 = 2 * v5 + 16;
      *(_QWORD *)(a1 + 40) = v12;
      v13 = *(char ***)(a1 + 16);
      if (v13)
      {
        v6 = *v13;
        v14 = v13[1] - *v13;
        v15 = v12 >= v14;
        v16 = v12 - v14;
        if (v16 != 0 && v15)
        {
          std::vector<char>::__append(*(std::vector<char> **)(a1 + 16), v16);
          v6 = **(char ***)(a1 + 16);
        }
        else if (!v15)
        {
          v13[1] = &v6[v12];
        }
      }
      else
      {
        v6 = (char *)malloc_type_realloc(*(void **)(a1 + 24), v12, 0xF6EA6B1uLL);
      }
      *(_QWORD *)(a1 + 24) = v6;
    }
    else
    {
      v6 = *(char **)(a1 + 24);
    }
    *(_QWORD *)&v6[*(_QWORD *)(a1 + 32)] = v4;
    *(_QWORD *)(a1 + 32) += 8;
  }
  v7 = *a2;
  v8 = (_BYTE *)a2[1] - (_BYTE *)*a2;
  if (*(_QWORD *)a1)
    return (void *)std::ostream::write();
  v10 = *(_QWORD *)(a1 + 40);
  if (*(_QWORD *)(a1 + 32) + v8 > v10)
  {
    v17 = 2 * (v10 + v8);
    *(_QWORD *)(a1 + 40) = v17;
    v18 = *(char ***)(a1 + 16);
    if (v18)
    {
      v11 = *v18;
      v19 = v18[1] - *v18;
      v20 = v17 >= v19;
      v21 = v17 - v19;
      if (v21 != 0 && v20)
      {
        std::vector<char>::__append(*(std::vector<char> **)(a1 + 16), v21);
        v11 = **(char ***)(a1 + 16);
      }
      else if (!v20)
      {
        v18[1] = &v11[v17];
      }
    }
    else
    {
      v11 = (char *)malloc_type_realloc(*(void **)(a1 + 24), v17, 0xF6EA6B1uLL);
    }
    *(_QWORD *)(a1 + 24) = v11;
  }
  else
  {
    v11 = *(char **)(a1 + 24);
  }
  result = memcpy(&v11[*(_QWORD *)(a1 + 32)], v7, v8);
  *(_QWORD *)(a1 + 32) += v8;
  return result;
}

uint64_t _GLOBAL__sub_I_sarray_v2_block_writer_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

double turi::v2_block_impl::encoded_block::encoded_block(turi::v2_block_impl::encoded_block *this)
{
  double result;

  *(_QWORD *)this = -1;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_WORD *)this + 20) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 6) = 0;
  return result;
}

void turi::v2_block_impl::encoded_block::init(uint64_t a1, __int128 *a2, _QWORD *a3)
{
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  __int128 v11;
  _BYTE v12[26];
  __int128 v13;

  v11 = *a2;
  *(_OWORD *)v12 = a2[1];
  *(_OWORD *)&v12[10] = *(__int128 *)((char *)a2 + 26);
  v5 = a3[1];
  *(_QWORD *)&v13 = *a3;
  *((_QWORD *)&v13 + 1) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  *(_OWORD *)a1 = v11;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)v12;
  *(_OWORD *)(a1 + 26) = *(_OWORD *)&v12[10];
  std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100](a1 + 48, &v13);
  v8 = (std::__shared_weak_count *)*((_QWORD *)&v13 + 1);
  if (*((_QWORD *)&v13 + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 3);
}

turi::v2_block_impl::encoded_block_range *turi::v2_block_impl::encoded_block::get_range@<X0>(turi::v2_block_impl::encoded_block *this@<X0>, turi::v2_block_impl::encoded_block_range *a2@<X8>)
{
  return turi::v2_block_impl::encoded_block_range::encoded_block_range(a2, this);
}

double turi::v2_block_impl::encoded_block::release(turi::v2_block_impl::encoded_block *this)
{
  double result;

  std::shared_ptr<turi::neural_net::Subscriber<std::unique_ptr<turi::style_transfer::Checkpoint>>>::reset[abi:ne180100]((_QWORD *)this + 6);
  *(_QWORD *)this = -1;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_WORD *)this + 20) = 0;
  return result;
}

turi::v2_block_impl::encoded_block_range *turi::v2_block_impl::encoded_block_range::encoded_block_range(turi::v2_block_impl::encoded_block_range *this, const turi::v2_block_impl::encoded_block *a2)
{
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  turi::v2_block_impl::typed_decode_stream *v8;

  v3 = *(_OWORD *)a2;
  v4 = *((_OWORD *)a2 + 2);
  *((_OWORD *)this + 1) = *((_OWORD *)a2 + 1);
  *((_OWORD *)this + 2) = v4;
  *(_OWORD *)this = v3;
  v5 = *((_QWORD *)a2 + 7);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)this + 7) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  *((_QWORD *)this + 8) = 0;
  v8 = (turi::v2_block_impl::typed_decode_stream *)operator new();
  turi::v2_block_impl::typed_decode_stream::typed_decode_stream(v8, this, **((_QWORD **)this + 6), *(_QWORD *)(*((_QWORD *)this + 6) + 8) - **((_QWORD **)this + 6));
  std::unique_ptr<turi::v2_block_impl::typed_decode_stream>::reset[abi:ne180100]((turi::v2_block_impl::typed_decode_stream **)this + 8, v8);
  return this;
}

void sub_21819141C(_Unwind_Exception *a1)
{
  uint64_t v1;
  turi::v2_block_impl::typed_decode_stream **v2;
  uint64_t v3;

  MEMORY[0x219A19A08](v3, 0x1072C409735D950);
  std::unique_ptr<turi::v2_block_impl::typed_decode_stream>::reset[abi:ne180100](v2, 0);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void turi::v2_block_impl::encoded_block_range::release(turi::v2_block_impl::typed_decode_stream **this)
{
  std::unique_ptr<turi::v2_block_impl::typed_decode_stream>::reset[abi:ne180100](this + 8, 0);
  std::shared_ptr<turi::neural_net::Subscriber<std::unique_ptr<turi::style_transfer::Checkpoint>>>::reset[abi:ne180100](this + 6);
}

void turi::v2_block_impl::encoded_block_range::~encoded_block_range(turi::v2_block_impl::typed_decode_stream **this)
{
  std::unique_ptr<turi::v2_block_impl::typed_decode_stream>::reset[abi:ne180100](this + 8, 0);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(this + 6));
}

unint64_t turi::v2_block_impl::encoded_block_range::decode_to(turi::v2_block_impl::encoded_block_range *this, turi::flexible_type *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5[2];

  if (!a3)
    return 0;
  v3 = *((_QWORD *)this + 8);
  v5[0] = (uint64_t)a2;
  v5[1] = a3;
  return turi::v2_block_impl::typed_decode_stream::read(v3, v5, 0);
}

unint64_t turi::v2_block_impl::encoded_block_range::skip(unint64_t this, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3[2];

  if (a2)
  {
    v2 = *(_QWORD *)(this + 64);
    v3[0] = 0;
    v3[1] = 0;
    return turi::v2_block_impl::typed_decode_stream::read(v2, v3, a2);
  }
  return this;
}

uint64_t _GLOBAL__sub_I_sarray_v2_encoded_block_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

unint64_t *turi::v2_block_impl::encode_number(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *result;
  _QWORD v11[129];

  v11[128] = *MEMORY[0x24BDAC8D0];
  v3 = *a3;
  v4 = a3[1] - *a3;
  if (v4)
  {
    v6 = 0;
    v7 = v4 >> 4;
    do
    {
      v8 = 0;
      v9 = v3 + 16 * v6;
      do
      {
        if (*(_BYTE *)(v9 + 12) != 7)
          v11[v8++] = *(_QWORD *)v9;
        if (++v6 >= v7)
          break;
        v9 += 16;
      }
      while (v8 < 0x80);
      if (!v8)
        break;
      result = turi::integer_pack::frame_of_reference_encode_128<turi::oarchive>();
      v3 = *a3;
      v7 = (a3[1] - *a3) >> 4;
    }
    while (v6 < v7);
  }
  return result;
}

unint64_t *turi::integer_pack::frame_of_reference_encode_128<turi::oarchive>()
{
  unint64_t *result;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t *v19;
  _QWORD *v20;
  _BYTE *v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  int v27;
  int v28;
  unint64_t v29;
  int v30;
  int v31;
  unsigned int v32;
  BOOL v33;
  int v34;
  int v35;
  int v36;
  int v37;
  unint64_t *v38;
  unsigned int v39;
  unsigned int v40;
  int v41;
  unsigned int v42;
  unsigned int v43;
  unint64_t v44;
  char v45;
  size_t v46;
  uint64_t v47;
  _BYTE *v48;
  unint64_t v49;
  char v50;
  char v51;
  uint64_t v52;
  char *v53;
  unint64_t v54;
  uint64_t v55;
  char *v56;
  unint64_t v57;
  size_t v58;
  size_t v59;
  size_t v60;
  char **v61;
  char *v62;
  size_t v63;
  BOOL v64;
  std::vector<char>::size_type v65;
  size_t v66;
  size_t v67;
  size_t v68;
  size_t v69;
  size_t v70;
  char *v71;
  size_t v72;
  size_t v73;
  uint64_t v74;
  size_t v75;
  BOOL v76;
  std::vector<char>::size_type v77;
  size_t v78;
  char **v79;
  size_t v80;
  BOOL v81;
  std::vector<char>::size_type v82;
  char v83;
  uint64_t *v84;
  unint64_t v85;
  uint64_t v86;
  char v87;
  uint64_t v88;
  char v89;
  uint64_t v90;
  char v91;
  uint64_t v92;
  char v93;
  uint64_t v94;
  char v95;
  uint64_t v96;
  int v97;
  size_t v98;
  size_t v99;
  char v100;
  uint64_t *v101;
  unint64_t v102;
  uint64_t v103;
  char v104;
  uint64_t v105;
  char v106;
  char v107;
  uint64_t v108;
  uint64_t v109;
  char v110;
  uint64_t v111;
  int v112;
  size_t v113;
  size_t v114;
  char v115;
  _DWORD *v116;
  unint64_t v117;
  _BYTE *v118;
  char v119;
  uint64_t v120;
  char v121;
  uint64_t v122;
  uint64_t v123;
  int v124;
  size_t v125;
  size_t v126;
  char v127;
  _BYTE __src[1024];
  unint64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  unint64_t v133;
  _QWORD v134[128];

  result = (unint64_t *)MEMORY[0x24BDAC7A8]();
  v134[127] = *MEMORY[0x24BDAC8D0];
  if (v1)
  {
    v3 = v2;
    v4 = v1;
    v5 = 0;
    v6 = *result;
    v7 = *result;
    while (1)
    {
      v8 = result[v5];
      if (v8 < v7)
        v7 = result[v5];
      if (v5 && v8 < result[v5 - 1])
        break;
      if (v1 == ++v5)
      {
        v9 = v6 - v7;
        v133 = v6 - v7;
        v131 = v6;
        if (v1 < 2)
        {
          v10 = 0;
        }
        else
        {
          v10 = 0;
          v11 = v1 - 1;
          v12 = v134;
          v13 = (unint64_t *)&v132;
          v14 = result + 1;
          do
          {
            v15 = *v14++;
            v16 = v15 - v6;
            *v13++ = v16;
            v10 |= v16;
            *v12++ = v15 - v7;
            v9 |= v15 - v7;
            v6 = v15;
            --v11;
          }
          while (v11);
        }
        v27 = 64 - __clz(v10);
        v28 = 255;
        goto LABEL_22;
      }
    }
    v9 = v6 - v7;
    v133 = v6 - v7;
    v129 = v6;
    v29 = 0;
    while (2)
    {
      v28 = 64 - __clz(v29);
      v27 = 255;
LABEL_22:
      v30 = __clz(v9);
      v31 = 64 - v30;
      v32 = (64 - v30);
      v33 = v32 > v27 || v32 > v28;
      v34 = !v33;
      if (v33)
      {
        if (v27 > v31
          || v27 > v28)
        {
          v35 = 0;
          v38 = &v129;
          v37 = 2;
          v36 = 1;
        }
        else
        {
          v36 = 0;
          v38 = &v131;
          v35 = 1;
          v28 = v27;
          v37 = 1;
        }
      }
      else
      {
        v35 = 0;
        v36 = 0;
        v37 = 0;
        v38 = &v133;
        v28 = v31;
      }
      v39 = (v28 - 1) | (((v28 - 1) & 0xFEu) >> 1);
      v40 = v39 | ((v39 & 0xFC) >> 2) | (((v39 | ((v39 & 0xFC) >> 2)) & 0xF0) >> 4);
      v41 = (v39 | ((v39 & 0xFC) >> 2) | (((v39 | ((v39 & 0xFC) >> 2)) & 0xF0) >> 4))
          + 1;
      v42 = ((v39 | ((v39 & 0xFC) >> 2) | (((v39 | ((v39 & 0xFC) >> 2)) & 0xF0) >> 4))
                            + 1);
      v43 = (v37 | 0x20) - 4 * __clz(v42) + 96;
      if (v42 == v41)
        LOBYTE(v37) = v43;
      if (*(_QWORD *)v3)
      {
        result = (unint64_t *)std::ostream::write();
        if (v34)
        {
LABEL_38:
          result = (unint64_t *)turi::integer_pack::variable_encode<turi::oarchive>((turi::oarchive *)v3, v7);
          goto LABEL_44;
        }
      }
      else
      {
        v44 = *(_QWORD *)(v3 + 40);
        if (*(_QWORD *)(v3 + 32) + 1 > v44)
        {
          v127 = v37;
          v73 = 2 * v44 + 2;
          *(_QWORD *)(v3 + 40) = v73;
          v74 = *(_QWORD *)(v3 + 16);
          if (v74)
          {
            result = *(unint64_t **)v74;
            v75 = *(_QWORD *)(v74 + 8) - *(_QWORD *)v74;
            v76 = v73 >= v75;
            v77 = v73 - v75;
            if (v77 != 0 && v76)
            {
              std::vector<char>::__append(*(std::vector<char> **)(v3 + 16), v77);
              result = **(unint64_t ***)(v3 + 16);
            }
            else if (!v76)
            {
              *(_QWORD *)(v74 + 8) = (char *)result + v73;
            }
          }
          else
          {
            result = (unint64_t *)malloc_type_realloc(*(void **)(v3 + 24), v73, 0xF6EA6B1uLL);
          }
          *(_QWORD *)(v3 + 24) = result;
          LOBYTE(v37) = v127;
        }
        else
        {
          result = *(unint64_t **)(v3 + 24);
        }
        *((_BYTE *)result + (*(_QWORD *)(v3 + 32))++) = v37;
        if (v34)
          goto LABEL_38;
      }
      if ((v35 | v36) == 1)
      {
        result = (unint64_t *)turi::integer_pack::variable_encode<turi::oarchive>((turi::oarchive *)v3, *v38++);
        --v4;
      }
LABEL_44:
      if (!(_BYTE)v41)
        return result;
      if (v40 <= 0xEu)
      {
        switch((char)v40)
        {
          case 0:
            v9 = (v4 + 7) >> 3;
            v26 = __src;
            v45 = 0;
            switch(v4)
            {
              case 0uLL:
                goto LABEL_110;
              case 1uLL:
                while (1)
                {
                  v97 = *(_DWORD *)v38++;
                  *v26++ = v45 | ((_BYTE)v97 << 7);
                  if (!--v9)
                    break;
LABEL_110:
                  v85 = *v38;
                  v84 = (uint64_t *)(v38 + 1);
                  v83 = v85;
                  v86 = *v84++;
                  v87 = v83 | (2 * v86);
                  v88 = *v84++;
                  v89 = v87 | (4 * v88);
                  v90 = *v84++;
                  v91 = v89 | (8 * v90);
                  v92 = *v84++;
                  v93 = v91 | (16 * v92);
                  v94 = *v84++;
                  v95 = v93 | (32 * v94);
                  v96 = *v84;
                  v38 = (unint64_t *)(v84 + 1);
                  v45 = v95 | ((_BYTE)v96 << 6);
                }
                v58 = v26 - __src;
                if (*(_QWORD *)v3)
                  return (unint64_t *)std::ostream::write();
                v98 = *(_QWORD *)(v3 + 40);
                if (*(_QWORD *)(v3 + 32) + v58 <= v98)
                  goto LABEL_119;
                v60 = 2 * (v98 + v58);
                *(_QWORD *)(v3 + 40) = v60;
                v61 = *(char ***)(v3 + 16);
                if (!v61)
                  goto LABEL_104;
                v62 = *v61;
                v99 = v61[1] - *v61;
                v64 = v60 >= v99;
                v65 = v60 - v99;
                if (v65 == 0 || !v64)
                  goto LABEL_123;
                goto LABEL_143;
              default:
                goto LABEL_13;
            }
          case 1:
            v9 = (v4 + 7) >> 3;
            v26 = __src;
            v50 = 0;
            switch(v4)
            {
              case 0uLL:
                goto LABEL_126;
              case 1uLL:
                while (1)
                {
                  v112 = *(_DWORD *)v38++;
                  *v26++ = v50 | ((_BYTE)v112 << 6);
                  if (!--v9)
                    break;
LABEL_126:
                  v102 = *v38;
                  v101 = (uint64_t *)(v38 + 1);
                  v100 = v102;
                  v103 = *v101++;
                  v104 = v100 | (4 * v103);
                  v105 = *v101++;
                  v106 = v104 | (16 * v105);
                  LODWORD(v105) = *(_DWORD *)v101++;
                  *v26++ = v106 | ((_BYTE)v105 << 6);
                  v108 = *v101++;
                  v107 = v108;
                  v109 = *v101++;
                  v110 = v107 | (4 * v109);
                  v111 = *v101;
                  v38 = (unint64_t *)(v101 + 1);
                  v50 = v110 | (16 * v111);
                }
                v58 = v26 - __src;
                if (*(_QWORD *)v3)
                  return (unint64_t *)std::ostream::write();
                v113 = *(_QWORD *)(v3 + 40);
                if (*(_QWORD *)(v3 + 32) + v58 <= v113)
                  goto LABEL_119;
                v60 = 2 * (v113 + v58);
                *(_QWORD *)(v3 + 40) = v60;
                v61 = *(char ***)(v3 + 16);
                if (!v61)
                  goto LABEL_104;
                v62 = *v61;
                v114 = v61[1] - *v61;
                v64 = v60 >= v114;
                v65 = v60 - v114;
                if (v65 == 0 || !v64)
                  goto LABEL_123;
                goto LABEL_143;
              default:
                goto LABEL_13;
            }
          case 3:
            v9 = (v4 + 7) >> 3;
            v26 = __src;
            v51 = 0;
            switch(v4)
            {
              case 0uLL:
                goto LABEL_136;
              case 1uLL:
                while (1)
                {
                  v124 = *(_DWORD *)v38++;
                  *v26++ = v51 | (16 * v124);
                  if (!--v9)
                    break;
LABEL_136:
                  v117 = *v38;
                  v116 = v38 + 1;
                  v115 = v117;
                  LODWORD(v117) = *v116;
                  v116 += 2;
                  *v26 = v115 | (16 * v117);
                  v118 = v26 + 1;
                  v120 = *(_QWORD *)v116;
                  v116 += 2;
                  v119 = v120;
                  LODWORD(v120) = *v116;
                  v116 += 2;
                  *v118++ = v119 | (16 * v120);
                  v122 = *(_QWORD *)v116;
                  v116 += 2;
                  v121 = v122;
                  LODWORD(v122) = *v116;
                  v116 += 2;
                  *v118 = v121 | (16 * v122);
                  v26 = v118 + 1;
                  v123 = *(_QWORD *)v116;
                  v38 = (unint64_t *)(v116 + 2);
                  v51 = v123;
                }
                v58 = v26 - __src;
                if (*(_QWORD *)v3)
                  return (unint64_t *)std::ostream::write();
                v125 = *(_QWORD *)(v3 + 40);
                if (*(_QWORD *)(v3 + 32) + v58 <= v125)
                  goto LABEL_119;
                v60 = 2 * (v125 + v58);
                *(_QWORD *)(v3 + 40) = v60;
                v61 = *(char ***)(v3 + 16);
                if (!v61)
                  goto LABEL_104;
                v62 = *v61;
                v126 = v61[1] - *v61;
                v64 = v60 >= v126;
                v65 = v60 - v126;
                if (v65 == 0 || !v64)
                  goto LABEL_123;
                goto LABEL_143;
              default:
LABEL_13:
                v29 = 0;
                v17 = v4 - 1;
                v18 = v134;
                v19 = &v130;
                v20 = result + 1;
                do
                {
                  v22 = (_BYTE *)*v20++;
                  v21 = v22;
                  v23 = v22 - v26;
                  if (v23 >= 0)
                    v24 = v23;
                  else
                    v24 = -v23;
                  v25 = 2 * v24 + (v23 >> 63);
                  *v19++ = v25;
                  v29 |= v25;
                  *v18++ = &v21[-v7];
                  v9 |= (unint64_t)&v21[-v7];
                  v26 = v21;
                  --v17;
                }
                while (v17);
                continue;
            }
          case 7:
            if (v4)
            {
              v47 = 8 * v4;
              v48 = __src;
              do
              {
                v49 = *v38++;
                *v48++ = v49;
                v47 -= 8;
              }
              while (v47);
            }
            else
            {
              v48 = __src;
            }
            v58 = v48 - __src;
            if (*(_QWORD *)v3)
              return (unint64_t *)std::ostream::write();
            v59 = *(_QWORD *)(v3 + 40);
            if (*(_QWORD *)(v3 + 32) + v58 <= v59)
              goto LABEL_119;
            v60 = 2 * (v59 + v58);
            *(_QWORD *)(v3 + 40) = v60;
            v61 = *(char ***)(v3 + 16);
            if (!v61)
              goto LABEL_104;
            v62 = *v61;
            v63 = v61[1] - *v61;
            v64 = v60 >= v63;
            v65 = v60 - v63;
            if (v65 == 0 || !v64)
              goto LABEL_123;
            goto LABEL_143;
          default:
            goto LABEL_109;
        }
      }
      break;
    }
    switch(v40)
    {
      case 0xFu:
        if (v4)
        {
          v55 = 8 * v4;
          v56 = __src;
          do
          {
            v57 = *v38++;
            *(_WORD *)v56 = v57;
            v56 += 2;
            v55 -= 8;
          }
          while (v55);
        }
        else
        {
          v56 = __src;
        }
        v58 = v56 - __src;
        if (!*(_QWORD *)v3)
        {
          v68 = *(_QWORD *)(v3 + 40);
          if (*(_QWORD *)(v3 + 32) + v58 > v68)
          {
            v60 = 2 * (v68 + v58);
            *(_QWORD *)(v3 + 40) = v60;
            v61 = *(char ***)(v3 + 16);
            if (v61)
            {
              v62 = *v61;
              v69 = v61[1] - *v61;
              v64 = v60 >= v69;
              v65 = v60 - v69;
              if (v65 == 0 || !v64)
              {
LABEL_123:
                if (!v64)
                  v61[1] = &v62[v60];
                goto LABEL_125;
              }
LABEL_143:
              std::vector<char>::__append(*(std::vector<char> **)(v3 + 16), v65);
              v62 = **(char ***)(v3 + 16);
LABEL_125:
              *(_QWORD *)(v3 + 24) = v62;
              goto LABEL_120;
            }
            goto LABEL_104;
          }
LABEL_119:
          v62 = *(char **)(v3 + 24);
          goto LABEL_120;
        }
        break;
      case 0x1Fu:
        if (v4)
        {
          v52 = 8 * v4;
          v53 = __src;
          do
          {
            v54 = *v38++;
            *(_DWORD *)v53 = v54;
            v53 += 4;
            v52 -= 8;
          }
          while (v52);
        }
        else
        {
          v53 = __src;
        }
        v58 = v53 - __src;
        if (!*(_QWORD *)v3)
        {
          v66 = *(_QWORD *)(v3 + 40);
          if (*(_QWORD *)(v3 + 32) + v58 > v66)
          {
            v60 = 2 * (v66 + v58);
            *(_QWORD *)(v3 + 40) = v60;
            v61 = *(char ***)(v3 + 16);
            if (v61)
            {
              v62 = *v61;
              v67 = v61[1] - *v61;
              v64 = v60 >= v67;
              v65 = v60 - v67;
              if (v65 == 0 || !v64)
                goto LABEL_123;
              goto LABEL_143;
            }
LABEL_104:
            v62 = (char *)malloc_type_realloc(*(void **)(v3 + 24), v60, 0xF6EA6B1uLL);
            *(_QWORD *)(v3 + 24) = v62;
LABEL_120:
            result = (unint64_t *)memcpy(&v62[*(_QWORD *)(v3 + 32)], __src, v58);
            v72 = *(_QWORD *)(v3 + 32) + v58;
LABEL_121:
            *(_QWORD *)(v3 + 32) = v72;
            return result;
          }
          goto LABEL_119;
        }
        break;
      case 0x3Fu:
        v46 = 8 * v4;
        if (*(_QWORD *)v3)
          return (unint64_t *)std::ostream::write();
        v70 = *(_QWORD *)(v3 + 40);
        if (*(_QWORD *)(v3 + 32) + v46 > v70)
        {
          v78 = 2 * (v70 + v46);
          *(_QWORD *)(v3 + 40) = v78;
          v79 = *(char ***)(v3 + 16);
          if (v79)
          {
            v71 = *v79;
            v80 = v79[1] - *v79;
            v81 = v78 >= v80;
            v82 = v78 - v80;
            if (v82 != 0 && v81)
            {
              std::vector<char>::__append(*(std::vector<char> **)(v3 + 16), v82);
              v71 = **(char ***)(v3 + 16);
            }
            else if (!v81)
            {
              v79[1] = &v71[v78];
            }
            *(_QWORD *)(v3 + 24) = v71;
          }
          else
          {
            v71 = (char *)malloc_type_realloc(*(void **)(v3 + 24), v78, 0xF6EA6B1uLL);
            *(_QWORD *)(v3 + 24) = v71;
          }
        }
        else
        {
          v71 = *(char **)(v3 + 24);
        }
        result = (unint64_t *)memcpy(&v71[*(_QWORD *)(v3 + 32)], v38, v46);
        v72 = *(_QWORD *)(v3 + 32) + v46;
        goto LABEL_121;
      default:
LABEL_109:
        turi::integer_pack::frame_of_reference_encode_128<turi::oarchive>(unsigned long long const*,unsigned long,turi::oarchive &)::{lambda(void)#1}::operator()();
    }
    return (unint64_t *)std::ostream::write();
  }
  return result;
}

turi::iarchive *turi::v2_block_impl::decode_number(turi::iarchive *this, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  turi::iarchive *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD __dst[129];

  __dst[128] = *MEMORY[0x24BDAC8D0];
  v3 = *a2;
  v4 = a2[1];
  if (v4 != *a2)
  {
    v6 = this;
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = ((v4 - *a2) >> 4) - a3;
    do
    {
      if (*(_BYTE *)(v3 + v7 + 12) != 7)
      {
        if (v10 >= v9)
        {
          if (v11 >= 0x80)
            v9 = 128;
          else
            v9 = v11;
          this = turi::integer_pack::frame_of_reference_decode_128<turi::iarchive>(v6, v9, __dst);
          v3 = *a2;
          *(_QWORD *)(*a2 + v7) = __dst[0];
          --v11;
          v4 = a2[1];
          v10 = 1;
        }
        else
        {
          *(_QWORD *)(v3 + v7) = __dst[v10++];
          --v11;
        }
      }
      ++v8;
      v7 += 16;
    }
    while (v8 < (v4 - v3) >> 4);
  }
  return this;
}

turi::iarchive *turi::integer_pack::frame_of_reference_decode_128<turi::iarchive>(turi::iarchive *this, uint64_t a2, _QWORD *__dst)
{
  uint64_t v4;
  turi::iarchive *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  size_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int16 *v30;
  _QWORD *v31;
  unsigned int v32;
  uint64_t v33;
  unsigned int *v34;
  _QWORD *v35;
  unsigned int v36;
  unsigned __int8 *v37;
  uint64_t v38;
  _QWORD *v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned __int8 v47;
  _BYTE __dsta[1024];
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    v4 = a2;
    v5 = this;
    v47 = 0;
    v6 = *((_QWORD *)this + 2);
    if (v6)
    {
      v7 = *((_QWORD *)this + 3);
      v8 = *(unsigned __int8 *)(v6 + v7);
      v47 = v8;
      *((_QWORD *)this + 3) = v7 + 1;
    }
    else
    {
      std::istream::read();
      v8 = v47;
    }
    v46 = 0;
    v9 = (v8 >> 2) - 1;
    if (v8 < 4 || v9 >= 8)
    {
      this = turi::integer_pack::variable_decode<turi::iarchive>(v5, &v46);
      v11 = v46;
      do
      {
        *__dst++ = v11;
        --v4;
      }
      while (v4);
    }
    else
    {
      v12 = 1 << v9;
      v13 = v8 & 3;
      if ((v8 & 3) != 0)
      {
        if (v13 != 3)
        {
          turi::integer_pack::variable_decode<turi::iarchive>(v5, __dst++);
          --v4;
        }
      }
      else
      {
        turi::integer_pack::variable_decode<turi::iarchive>(v5, &v46);
      }
      v14 = v12;
      v15 = (v4 * (unint64_t)v12 + 7) >> 3;
      if (v14 <= 15)
      {
        switch(v14)
        {
          case 1:
            v16 = *((_QWORD *)v5 + 2);
            if (v16)
            {
              v17 = *((_QWORD *)v5 + 3);
              memcpy(__dsta, (const void *)(v16 + v17), v15);
              *((_QWORD *)v5 + 3) = v17 + v15;
            }
            else
            {
              std::istream::read();
            }
            __asm { BR              X13 }
            return this;
          case 2:
            v25 = *((_QWORD *)v5 + 2);
            if (v25)
            {
              v26 = *((_QWORD *)v5 + 3);
              memcpy(__dsta, (const void *)(v25 + v26), v15);
              *((_QWORD *)v5 + 3) = v26 + v15;
            }
            else
            {
              std::istream::read();
            }
            __asm { BR              X13 }
            return this;
          case 4:
            v27 = *((_QWORD *)v5 + 2);
            if (v27)
            {
              v28 = *((_QWORD *)v5 + 3);
              memcpy(__dsta, (const void *)(v27 + v28), v15);
              *((_QWORD *)v5 + 3) = v28 + v15;
            }
            else
            {
              std::istream::read();
            }
            __asm { BR              X13 }
            return this;
          case 8:
            v23 = *((_QWORD *)v5 + 2);
            if (v23)
            {
              v24 = *((_QWORD *)v5 + 3);
              this = (turi::iarchive *)memcpy(__dsta, (const void *)(v23 + v24), v15);
              *((_QWORD *)v5 + 3) = v24 + v15;
            }
            else
            {
              this = (turi::iarchive *)std::istream::read();
            }
            if (v4)
            {
              v37 = __dsta;
              v38 = v4;
              v39 = __dst;
              do
              {
                v40 = *v37++;
                *v39++ = v40;
                --v38;
              }
              while (v38);
            }
            goto LABEL_59;
          default:
            goto LABEL_58;
        }
      }
      switch(v14)
      {
        case 16:
          v20 = *((_QWORD *)v5 + 2);
          if (v20)
          {
            v21 = *((_QWORD *)v5 + 3);
            this = (turi::iarchive *)memcpy(__dsta, (const void *)(v20 + v21), v15);
            *((_QWORD *)v5 + 3) = v21 + v15;
          }
          else
          {
            this = (turi::iarchive *)std::istream::read();
          }
          if (v4)
          {
            v29 = 2 * v4;
            v30 = (unsigned __int16 *)__dsta;
            v31 = __dst;
            do
            {
              v32 = *v30++;
              *v31++ = v32;
              v29 -= 2;
            }
            while (v29);
          }
          break;
        case 32:
          v18 = *((_QWORD *)v5 + 2);
          if (v18)
          {
            v19 = *((_QWORD *)v5 + 3);
            this = (turi::iarchive *)memcpy(__dsta, (const void *)(v18 + v19), v15);
            *((_QWORD *)v5 + 3) = v19 + v15;
          }
          else
          {
            this = (turi::iarchive *)std::istream::read();
          }
          if (v4)
          {
            v33 = 4 * v4;
            v34 = (unsigned int *)__dsta;
            v35 = __dst;
            do
            {
              v36 = *v34++;
              *v35++ = v36;
              v33 -= 4;
            }
            while (v33);
          }
          break;
        case 64:
          v22 = *((_QWORD *)v5 + 2);
          if (v22)
          {
            this = (turi::iarchive *)memcpy(__dst, (const void *)(v22 + *((_QWORD *)v5 + 3)), 8 * v4);
            *((_QWORD *)v5 + 3) += 8 * v4;
          }
          else
          {
            this = (turi::iarchive *)std::istream::read();
          }
          break;
        default:
LABEL_58:
          turi::integer_pack::frame_of_reference_decode_128<turi::iarchive>(turi::iarchive &,unsigned long,unsigned long long *)::{lambda(void)#1}::operator()();
      }
LABEL_59:
      if (v13)
      {
        if (v13 == 1)
        {
          if ((int)v4 >= 1)
          {
            v44 = v4;
            v45 = *(__dst - 1);
            do
            {
              v45 += *__dst;
              *__dst++ = v45;
              --v44;
            }
            while (v44);
          }
        }
        else if (v13 == 2 && (int)v4 >= 1)
        {
          v41 = v4;
          v42 = *(__dst - 1);
          do
          {
            v42 += -(*__dst & 1) ^ (*__dst >> 1);
            *__dst++ = v42;
            --v41;
          }
          while (v41);
        }
      }
      else if (v4)
      {
        v43 = v46;
        do
        {
          *__dst++ += v43;
          --v4;
        }
        while (v4);
      }
    }
  }
  return this;
}

unint64_t *turi::v2_block_impl::encode_double_legacy(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t i;
  unint64_t *result;
  _QWORD v12[129];

  v12[128] = *MEMORY[0x24BDAC8D0];
  v3 = *a3;
  v4 = a3[1] - *a3;
  if (v4)
  {
    v6 = 0;
    v7 = v4 >> 4;
    do
    {
      v8 = 0;
      v9 = v3 + 16 * v6;
      do
      {
        if (*(_BYTE *)(v9 + 12) != 7)
          v12[v8++] = *(_QWORD *)v9;
        if (++v6 >= v7)
          break;
        v9 += 16;
      }
      while (v8 < 0x80);
      if (!v8)
        break;
      for (i = 0; i != v8; ++i)
        v12[i] = __ROR8__(v12[i], 63);
      result = turi::integer_pack::frame_of_reference_encode_128<turi::oarchive>();
      v3 = *a3;
      v7 = (a3[1] - *a3) >> 4;
    }
    while (v6 < v7);
  }
  return result;
}

void turi::v2_block_impl::encode_double(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  size_t v19;
  uint64_t *v20;
  size_t v21;
  BOOL v22;
  std::vector<char>::size_type v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  void **v28;

  v5 = *a3;
  v6 = a3[1];
  v7 = (char *)v6 - (char *)*a3;
  if (v6 == *a3)
  {
    v8 = 1;
  }
  else
  {
    v8 = 0;
    v9 = 0;
    v10 = v7 >> 4;
    if (v10 <= 1)
      v11 = 1;
    else
      v11 = v10;
    do
    {
      if (*((_BYTE *)v5 + 12) == 1 && *(double *)v5 != (double)(uint64_t)*(double *)v5)
        break;
      v8 = ++v9 >= v10;
      v5 += 2;
    }
    while (v11 != v9);
  }
  v12 = v8;
  v27 = v8;
  if (*(_QWORD *)a2)
  {
    v13 = std::ostream::write();
  }
  else
  {
    v14 = *(_QWORD *)(a2 + 40);
    if (*(_QWORD *)(a2 + 32) + 1 > v14)
    {
      v19 = 2 * v14 + 2;
      *(_QWORD *)(a2 + 40) = v19;
      v20 = *(uint64_t **)(a2 + 16);
      if (v20)
      {
        v13 = *v20;
        v21 = v20[1] - *v20;
        v22 = v19 >= v21;
        v23 = v19 - v21;
        if (v23 != 0 && v22)
        {
          std::vector<char>::__append(*(std::vector<char> **)(a2 + 16), v23);
          v13 = **(_QWORD **)(a2 + 16);
        }
        else if (!v22)
        {
          v20[1] = v13 + v19;
        }
      }
      else
      {
        v13 = (uint64_t)malloc_type_realloc(*(void **)(a2 + 24), v19, 0xF6EA6B1uLL);
      }
      *(_QWORD *)(a2 + 24) = v13;
    }
    else
    {
      v13 = *(_QWORD *)(a2 + 24);
    }
    *(_BYTE *)(v13 + (*(_QWORD *)(a2 + 32))++) = v12;
  }
  if (v27)
  {
    v24 = 0;
    v25 = 0;
    v26 = 0;
    v15 = std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&v24, *a3, a3[1], ((char *)a3[1] - (char *)*a3) >> 4);
    v16 = v24;
    v17 = v25;
    while (v16 != v17)
    {
      if (*(_BYTE *)(v16 + 12) == 1)
      {
        v18 = (uint64_t)*(double *)v16;
        *(_DWORD *)(v16 + 8) = 0;
        *(_BYTE *)(v16 + 12) = 0;
        *(_QWORD *)v16 = v18;
      }
      v16 += 16;
    }
    turi::v2_block_impl::encode_number((uint64_t)v15, a2, &v24);
    v28 = (void **)&v24;
    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v28);
  }
  else if (!v27)
  {
    turi::v2_block_impl::encode_double_legacy(v13, a2, (uint64_t *)a3);
  }
}

void sub_2181929D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void *turi::oarchive::write(turi::oarchive *this, const char *__src, size_t __n)
{
  void *result;
  size_t v7;
  char *v8;
  size_t v9;
  char **v10;
  size_t v11;
  BOOL v12;
  std::vector<char>::size_type v13;

  if (*(_QWORD *)this)
    return (void *)std::ostream::write();
  v7 = *((_QWORD *)this + 5);
  if (*((_QWORD *)this + 4) + __n > v7)
  {
    v9 = 2 * (v7 + __n);
    *((_QWORD *)this + 5) = v9;
    v10 = (char **)*((_QWORD *)this + 2);
    if (v10)
    {
      v8 = *v10;
      v11 = v10[1] - *v10;
      v12 = v9 >= v11;
      v13 = v9 - v11;
      if (v13 != 0 && v12)
      {
        std::vector<char>::__append(*((std::vector<char> **)this + 2), v13);
        v8 = (char *)**((_QWORD **)this + 2);
      }
      else if (!v12)
      {
        v10[1] = &v8[v9];
      }
    }
    else
    {
      v8 = (char *)malloc_type_realloc(*((void **)this + 3), v9, 0xF6EA6B1uLL);
    }
    *((_QWORD *)this + 3) = v8;
  }
  else
  {
    v8 = (char *)*((_QWORD *)this + 3);
  }
  result = memcpy(&v8[*((_QWORD *)this + 4)], __src, __n);
  *((_QWORD *)this + 4) += __n;
  return result;
}

turi::iarchive *turi::v2_block_impl::decode_double_legacy(turi::iarchive *this, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  turi::iarchive *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  _QWORD __dst[129];

  __dst[128] = *MEMORY[0x24BDAC8D0];
  v3 = *a2;
  v4 = a2[1];
  if (v4 != *a2)
  {
    v6 = this;
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = ((v4 - *a2) >> 4) - a3;
    do
    {
      v11 = v3 + 16 * v7;
      if (*(_BYTE *)(v11 + 12) != 7)
      {
        if (v9 >= v8)
        {
          if (v10 >= 0x80)
            v8 = 128;
          else
            v8 = v10;
          this = turi::integer_pack::frame_of_reference_decode_128<turi::iarchive>(v6, v8, __dst);
          if (v8)
          {
            v12 = __dst;
            v13 = v8;
            do
            {
              *v12 = __ROR8__(*v12, 1);
              ++v12;
              --v13;
            }
            while (v13);
          }
          v3 = *a2;
          *(_QWORD *)(*a2 + 16 * v7) = __dst[0];
          --v10;
          v4 = a2[1];
          v9 = 1;
        }
        else
        {
          *(_QWORD *)v11 = __dst[v9++];
          --v10;
        }
      }
      ++v7;
    }
    while (v7 < (v4 - v3) >> 4);
  }
  return this;
}

turi::iarchive *turi::v2_block_impl::decode_double(turi::iarchive *this, uint64_t *a2, uint64_t a3)
{
  turi::iarchive *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  char *v14;
  char v15;
  unsigned __int8 v16;

  v5 = this;
  v16 = 0;
  v6 = *((_QWORD *)this + 2);
  if (v6)
  {
    v7 = *((_QWORD *)this + 3);
    v8 = *(unsigned __int8 *)(v6 + v7);
    v16 = v8;
    *((_QWORD *)this + 3) = v7 + 1;
  }
  else
  {
    this = (turi::iarchive *)std::istream::read();
    v8 = v16;
  }
  v15 = v8;
  if ((char)v8 >= 3)
  {
    v14 = &v15;
    turi::v2_block_impl::decode_double(turi::iarchive &,std::vector<turi::flexible_type> &,unsigned long)::$_0::operator()(&v14);
  }
  if (v8 == 1)
  {
    v9 = *a2;
    v10 = a2[1];
    while (v9 != v10)
    {
      if (*(_BYTE *)(v9 + 12) == 1)
      {
        *(_QWORD *)v9 = 0;
        *(_DWORD *)(v9 + 8) = 0;
        *(_BYTE *)(v9 + 12) = 0;
      }
      v9 += 16;
    }
    this = turi::v2_block_impl::decode_number(v5, a2, a3);
    v11 = *a2;
    v12 = a2[1];
    if (*a2 != v12)
    {
      do
      {
        if (!*(_BYTE *)(v11 + 12))
        {
          v13 = (double)*(uint64_t *)v11;
          *(_DWORD *)(v11 + 8) = 0;
          *(_BYTE *)(v11 + 12) = 1;
          *(double *)v11 = v13;
        }
        v11 += 16;
      }
      while (v11 != v12);
    }
  }
  else if (!v8)
  {
    return turi::v2_block_impl::decode_double_legacy(v5, a2, a3);
  }
  return this;
}

void *turi::iarchive::read(turi::iarchive *this, char *__dst, size_t __n)
{
  uint64_t v5;
  void *result;

  v5 = *((_QWORD *)this + 2);
  if (!v5)
    return (void *)std::istream::read();
  result = memcpy(__dst, (const void *)(v5 + *((_QWORD *)this + 3)), __n);
  *((_QWORD *)this + 3) += __n;
  return result;
}

void turi::v2_block_impl::decode_double(turi::iarchive &,std::vector<turi::flexible_type> &,unsigned long)::$_0::operator()(_BYTE **a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  file_logger *v15;
  _QWORD *v16;
  void *__p;
  char v18;
  _QWORD v19[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v19);
  v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Assertion failed: (", 19);
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray_v2_type_encoding.cpp", 118);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)":", 1);
  v4 = (_QWORD *)std::ostream::operator<<();
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"): ", 3);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"reserved", 8);
  v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"<", 1);
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"3", 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"  [", 3);
  LOBYTE(v16) = **a1;
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v16, 1);
  LOBYTE(v16) = 32;
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)&v16, 1);
  v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"<", 1);
  LOBYTE(v16) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v16, 1);
  v13 = (_QWORD *)std::ostream::operator<<();
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v14);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v15 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray_v2_type_encoding.cpp", "operator()", 186, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v15, (uint64_t)&__p);
    if (v18 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v16 = v19;
  turi::v2_block_impl::decode_double(turi::iarchive &,std::vector<turi::flexible_type> &,unsigned long)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_218192F04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::v2_block_impl::typed_encode(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  BOOL v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char v11;
  char v12;
  unint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  void **v27;
  void **v28;
  uint64_t v29;
  unint64_t v30;
  _BYTE *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unsigned __int8 *v37;
  int v38;
  size_t v39;
  size_t v40;
  char *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  void **v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  void **v49;
  void *v50;
  void *v51;
  unsigned int v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t v55;
  void **v56;
  void *v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t v63;
  void **v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unsigned __int8 *v70;
  uint64_t v71;
  uint64_t v72;
  __int128 *v73;
  std::string *v74;
  __int128 v75;
  std::string *v76;
  unint64_t v77;
  _BYTE *v78;
  uint64_t v79;
  void **v80;
  std::string *v81;
  unint64_t v82;
  size_t v83;
  const void *v84;
  size_t v85;
  char *v86;
  size_t v87;
  char **v88;
  size_t v89;
  BOOL v90;
  std::vector<char>::size_type v91;
  _BYTE *v92;
  _BYTE *v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _BYTE *v99;
  _BYTE *v100;
  uint64_t v101;
  const void *v102;
  size_t v103;
  size_t v104;
  char *v105;
  size_t v106;
  char **v107;
  size_t v108;
  BOOL v109;
  std::vector<char>::size_type v110;
  size_t v111;
  _QWORD *v112;
  size_t v113;
  BOOL v114;
  std::vector<char>::size_type v115;
  size_t v116;
  uint64_t *v117;
  size_t v118;
  BOOL v119;
  std::vector<char>::size_type v120;
  size_t v121;
  char **v122;
  size_t v123;
  BOOL v124;
  std::vector<char>::size_type v125;
  size_t v126;
  _QWORD *v127;
  size_t v128;
  BOOL v129;
  std::vector<char>::size_type v130;
  size_t v131;
  _QWORD *v132;
  size_t v133;
  BOOL v134;
  std::vector<char>::size_type v135;
  void **v136;
  std::string *v137;
  unint64_t v138;
  uint64_t v139[3];
  void *__src[2];
  __int128 v141;
  int v142;
  char v143;
  unsigned __int8 *v144;
  void **v145[3];

  v145[2] = *(void ***)MEMORY[0x24BDAC8D0];
  a2[4] |= 2uLL;
  v6 = *a1;
  v7 = a1[1] == *a1;
  v8 = (a1[1] - *a1) >> 4;
  a2[3] = v8;
  v9 = 0;
  if (!v7)
  {
    if (v8 <= 1)
      v8 = 1;
    v10 = (char *)(v6 + 12);
    do
    {
      v11 = *v10;
      v10 += 16;
      v9 |= 1 << v11;
      --v8;
    }
    while (v8);
  }
  v12 = vaddlv_u8((uint8x8_t)vcnt_s8((int8x8_t)v9));
  if (*(_QWORD *)a3)
  {
    std::ostream::write();
  }
  else
  {
    v13 = *(_QWORD *)(a3 + 40);
    if (*(_QWORD *)(a3 + 32) + 1 > v13)
    {
      v111 = 2 * v13 + 2;
      *(_QWORD *)(a3 + 40) = v111;
      v112 = *(_QWORD **)(a3 + 16);
      if (v112)
      {
        v14 = (_BYTE *)*v112;
        v113 = v112[1] - *v112;
        v114 = v111 >= v113;
        v115 = v111 - v113;
        if (v115 != 0 && v114)
        {
          std::vector<char>::__append(*(std::vector<char> **)(a3 + 16), v115);
          v14 = **(_BYTE ***)(a3 + 16);
        }
        else if (!v114)
        {
          v112[1] = &v14[v111];
        }
      }
      else
      {
        v14 = malloc_type_realloc(*(void **)(a3 + 24), v111, 0xF6EA6B1uLL);
      }
      *(_QWORD *)(a3 + 24) = v14;
    }
    else
    {
      v14 = *(_BYTE **)(a3 + 24);
    }
    v14[(*(_QWORD *)(a3 + 32))++] = v12;
  }
  if (!v12)
    goto LABEL_77;
  if (v12 == 2)
  {
    if ((v9 & 0x80) != 0)
    {
      v16 = __clz(__rbit64(v9));
      if (v16 <= 0xF)
      {
        while (v16 == 7)
        {
          v17 = v9 & ~(0xFFFFFFFFFFFFFFFFLL >> (v16 ^ 0x3Fu));
          if (v17)
          {
            v16 = __clz(__rbit64(v17));
            if (v16 < 0x10)
              continue;
          }
          goto LABEL_60;
        }
        LOBYTE(__src[0]) = v16;
        if (*(_QWORD *)a3)
        {
          std::ostream::write();
        }
        else
        {
          v30 = *(_QWORD *)(a3 + 40);
          if (*(_QWORD *)(a3 + 32) + 1 > v30)
          {
            v126 = 2 * v30 + 2;
            *(_QWORD *)(a3 + 40) = v126;
            v127 = *(_QWORD **)(a3 + 16);
            if (v127)
            {
              v31 = (_BYTE *)*v127;
              v128 = v127[1] - *v127;
              v129 = v126 >= v128;
              v130 = v126 - v128;
              if (v130 != 0 && v129)
              {
                std::vector<char>::__append(*(std::vector<char> **)(a3 + 16), v130);
                v31 = **(_BYTE ***)(a3 + 16);
              }
              else if (!v129)
              {
                v127[1] = &v31[v126];
              }
              *(_QWORD *)(a3 + 24) = v31;
            }
            else
            {
              v31 = malloc_type_realloc(*(void **)(a3 + 24), v126, 0xF6EA6B1uLL);
              *(_QWORD *)(a3 + 24) = v31;
            }
          }
          else
          {
            v31 = *(_BYTE **)(a3 + 24);
          }
          v31[(*(_QWORD *)(a3 + 32))++] = __src[0];
        }
      }
LABEL_60:
      turi::dense_bitset::dense_bitset((turi::dense_bitset *)__src, (a1[1] - *a1) >> 4);
      if ((uint64_t)v141 >= 1)
        bzero(__src[0], 8 * (v141 - ((v141 & 0x1FFFFFFFFFFFFFFFLL) != 0)) + 8);
      v32 = a1[1];
      v33 = (char *)__src[0];
      v34 = v32 - *a1;
      if (v32 != *a1)
      {
        v35 = 0;
        v36 = v34 >> 4;
        if (v36 <= 1)
          v36 = 1;
        v37 = (unsigned __int8 *)(*a1 + 12);
        do
        {
          v38 = *v37;
          v37 += 16;
          if (v38 == 7)
            *(_QWORD *)&v33[(v35 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v35;
          ++v35;
        }
        while (v36 != v35);
        v33 = (char *)__src[0];
      }
      v39 = 8 * v141;
      if (*(_QWORD *)a3)
      {
        std::ostream::write();
      }
      else
      {
        v40 = *(_QWORD *)(a3 + 40);
        if (*(_QWORD *)(a3 + 32) + v39 > v40)
        {
          v121 = 2 * (v40 + v39);
          *(_QWORD *)(a3 + 40) = v121;
          v122 = *(char ***)(a3 + 16);
          if (v122)
          {
            v41 = *v122;
            v123 = v122[1] - *v122;
            v124 = v121 >= v123;
            v125 = v121 - v123;
            if (v125 != 0 && v124)
            {
              std::vector<char>::__append(*(std::vector<char> **)(a3 + 16), v125);
              v41 = **(char ***)(a3 + 16);
            }
            else if (!v124)
            {
              v122[1] = &v41[v121];
            }
          }
          else
          {
            v41 = (char *)malloc_type_realloc(*(void **)(a3 + 24), v121, 0xF6EA6B1uLL);
          }
          *(_QWORD *)(a3 + 24) = v41;
        }
        else
        {
          v41 = *(char **)(a3 + 24);
        }
        memcpy(&v41[*(_QWORD *)(a3 + 32)], v33, v39);
        *(_QWORD *)(a3 + 32) += v39;
      }
      free(__src[0]);
      if ((v9 & 1) == 0)
        goto LABEL_28;
LABEL_76:
      turi::v2_block_impl::encode_number(v15, a3, a1);
      goto LABEL_77;
    }
LABEL_17:
    turi::archive_detail::vector_serialize_impl<turi::oarchive,turi::flexible_type,false>::exec(a3, a1);
    a2[4] |= 4uLL;
    goto LABEL_77;
  }
  if (v12 != 1)
    goto LABEL_17;
  LOBYTE(__src[0]) = *(_BYTE *)(*a1 + 12);
  if (*(_QWORD *)a3)
  {
    v15 = std::ostream::write();
  }
  else
  {
    v18 = *(_QWORD *)(a3 + 40);
    if (*(_QWORD *)(a3 + 32) + 1 > v18)
    {
      v116 = 2 * v18 + 2;
      *(_QWORD *)(a3 + 40) = v116;
      v117 = *(uint64_t **)(a3 + 16);
      if (v117)
      {
        v15 = *v117;
        v118 = v117[1] - *v117;
        v119 = v116 >= v118;
        v120 = v116 - v118;
        if (v120 != 0 && v119)
        {
          std::vector<char>::__append(*(std::vector<char> **)(a3 + 16), v120);
          v15 = **(_QWORD **)(a3 + 16);
        }
        else if (!v119)
        {
          v117[1] = v15 + v116;
        }
        *(_QWORD *)(a3 + 24) = v15;
      }
      else
      {
        v15 = (uint64_t)malloc_type_realloc(*(void **)(a3 + 24), v116, 0xF6EA6B1uLL);
        *(_QWORD *)(a3 + 24) = v15;
      }
    }
    else
    {
      v15 = *(_QWORD *)(a3 + 24);
    }
    *(_BYTE *)(v15 + (*(_QWORD *)(a3 + 32))++) = __src[0];
  }
  if (*(_BYTE *)(*a1 + 12) == 7)
    goto LABEL_77;
  if ((v9 & 1) != 0)
    goto LABEL_76;
LABEL_28:
  if ((v9 & 2) != 0)
  {
    a2[4] |= 8uLL;
    turi::v2_block_impl::encode_double(v15, a3, (uint64_t **)a1);
    goto LABEL_77;
  }
  if ((v9 & 4) == 0)
  {
    if ((v9 & 8) != 0)
    {
      a2[4] |= 8uLL;
      turi::v2_block_impl::encode_vector((uint64_t)a2, a3, a1);
    }
    else if ((v9 & 0x200) != 0)
    {
      a2[4] |= 8uLL;
      turi::v2_block_impl::encode_nd_vector((uint64_t)a2, a3, a1);
    }
    else
    {
      v19 = *a1;
      if (a1[1] != *a1)
      {
        v20 = 0;
        v21 = 0;
        do
        {
          v22 = (uint64_t *)(v19 + v20);
          switch(*(_BYTE *)(v19 + v20 + 12))
          {
            case 0:
            case 1:
              turi::oarchive::direct_assign<unsigned long long>(a3, v22);
              break;
            case 2:
              turi::archive_detail::serialize_impl<turi::oarchive,std::string,false,void>::exec(a3, (const void **)(*v22 + 8));
              break;
            case 3:
              turi::archive_detail::vector_serialize_impl<turi::oarchive,double,true>::exec(a3, (const void **)(*v22 + 8));
              break;
            case 4:
              turi::archive_detail::vector_serialize_impl<turi::oarchive,turi::flexible_type,false>::exec(a3, (uint64_t *)(*v22 + 8));
              break;
            case 5:
              turi::archive_detail::vector_serialize_impl<turi::oarchive,std::pair<turi::flexible_type,turi::flexible_type>,false>::exec(a3, (uint64_t *)(*v22 + 8));
              break;
            case 6:
              turi::archive_detail::serialize_impl<turi::oarchive,turi::flex_date_time,false,void>::exec(a3, v22);
              break;
            case 7:
              break;
            case 8:
              turi::image_type::save(*v22 + 8, a3);
              break;
            case 9:
              turi::flexible_type_impl::ndarray<double>::save(*v22 + 8, a3);
              break;
            default:
              turi::apply_binary_op_ff();
          }
          ++v21;
          v19 = *a1;
          v20 += 16;
        }
        while (v21 < (a1[1] - *a1) >> 4);
      }
    }
    goto LABEL_77;
  }
  v143 = 1;
  *(_OWORD *)__src = 0u;
  v141 = 0u;
  v142 = 1065353216;
  memset(v139, 0, sizeof(v139));
  v136 = 0;
  v137 = 0;
  v138 = 0;
  v23 = (a1[1] - *a1) >> 4;
  memset(v145, 0, 13);
  std::vector<turi::flexible_type>::resize(v139, v23, (uint64_t *)v145);
  switch(BYTE4(v145[1]))
  {
    case 2:
      v24 = (unint64_t *)v145[0];
      do
      {
        v25 = __ldaxr(v24);
        v26 = v25 - 1;
      }
      while (__stlxr(v26, v24));
      if (!v26)
      {
        v27 = v145[0];
        if (v145[0])
        {
          if (*((char *)v145[0] + 31) < 0)
            operator delete(v145[0][1]);
          v28 = v27;
          v29 = 0x1012C404EF22A49;
          goto LABEL_112;
        }
      }
      break;
    case 3:
      v53 = (unint64_t *)v145[0];
      do
      {
        v54 = __ldaxr(v53);
        v55 = v54 - 1;
      }
      while (__stlxr(v55, v53));
      if (!v55)
      {
        v56 = v145[0];
        if (v145[0])
        {
          v57 = v145[0][1];
          if (v57)
          {
            v145[0][2] = v57;
            operator delete(v57);
          }
          v28 = v56;
          v29 = 0x1080C409938AC02;
          goto LABEL_112;
        }
      }
      break;
    case 4:
      v42 = (unint64_t *)v145[0];
      do
      {
        v43 = __ldaxr(v42);
        v44 = v43 - 1;
      }
      while (__stlxr(v44, v42));
      if (!v44)
      {
        v45 = v145[0];
        if (v145[0])
        {
          v144 = (unsigned __int8 *)(v145[0] + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v144);
          goto LABEL_105;
        }
      }
      break;
    case 5:
      v58 = (unint64_t *)v145[0];
      do
      {
        v59 = __ldaxr(v58);
        v60 = v59 - 1;
      }
      while (__stlxr(v60, v58));
      if (!v60)
      {
        v45 = v145[0];
        if (v145[0])
        {
          v144 = (unsigned __int8 *)(v145[0] + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v144);
LABEL_105:
          v28 = v45;
          v29 = 0x1020C405E66F15BLL;
          goto LABEL_112;
        }
      }
      break;
    case 8:
      v61 = (unint64_t *)v145[0];
      do
      {
        v62 = __ldaxr(v61);
        v63 = v62 - 1;
      }
      while (__stlxr(v63, v61));
      if (!v63)
      {
        v64 = v145[0];
        if (v145[0])
        {
          boost::detail::shared_count::~shared_count((unsigned int **)v145[0] + 2);
          v28 = v64;
          v52 = -235920773;
          goto LABEL_111;
        }
      }
      break;
    case 9:
      v46 = (unint64_t *)v145[0];
      do
      {
        v47 = __ldaxr(v46);
        v48 = v47 - 1;
      }
      while (__stlxr(v48, v46));
      if (!v48)
      {
        v49 = v145[0];
        if (v145[0])
        {
          v50 = v145[0][6];
          if (v50)
          {
            v145[0][7] = v50;
            operator delete(v50);
          }
          v51 = v49[3];
          if (v51)
          {
            v49[4] = v51;
            operator delete(v51);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v49 + 1));
          v28 = v49;
          v52 = 2071181815;
LABEL_111:
          v29 = v52 | 0x1030C4000000000;
LABEL_112:
          MEMORY[0x219A19A08](v28, v29);
        }
      }
      break;
    default:
      break;
  }
  v66 = *a1;
  v65 = a1[1];
  if (v65 == *a1)
  {
    v68 = 0;
    goto LABEL_131;
  }
  v67 = 0;
  v68 = 0;
  v69 = 0;
  while (*(_BYTE *)(v66 + v67 + 12) == 7)
  {
LABEL_127:
    ++v69;
    v67 += 16;
    if (v69 >= (v65 - v66) >> 4)
      goto LABEL_131;
  }
  v70 = std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::find<std::string>(__src, (unsigned __int8 *)(*(_QWORD *)(v66 + v67) + 8));
  if (v70)
  {
    v71 = *((_QWORD *)v70 + 5);
LABEL_126:
    *(_QWORD *)(v139[0] + 16 * v68++) = v71;
    v66 = *a1;
    v65 = a1[1];
    goto LABEL_127;
  }
  v71 = *((_QWORD *)&v141 + 1);
  if (*((_QWORD *)&v141 + 1) <= 0x3FuLL)
  {
    v144 = (unsigned __int8 *)(*(_QWORD *)(*a1 + v67) + 8);
    *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)__src, v144, (uint64_t)&std::piecewise_construct, (__int128 **)&v144)+ 5) = v71;
    v72 = *(_QWORD *)(*a1 + v67);
    v73 = (__int128 *)(v72 + 8);
    v74 = v137;
    if ((unint64_t)v137 >= v138)
    {
      v76 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v136, v73);
    }
    else
    {
      if (*(char *)(v72 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(v137, *(const std::string::value_type **)(v72 + 8), *(_QWORD *)(v72 + 16));
      }
      else
      {
        v75 = *v73;
        v137->__r_.__value_.__r.__words[2] = *(_QWORD *)(v72 + 24);
        *(_OWORD *)&v74->__r_.__value_.__l.__data_ = v75;
      }
      v76 = v74 + 1;
    }
    v137 = v76;
    goto LABEL_126;
  }
  v143 = 0;
LABEL_131:
  if (*(_QWORD *)a3)
  {
    std::ostream::write();
  }
  else
  {
    v77 = *(_QWORD *)(a3 + 40);
    if (*(_QWORD *)(a3 + 32) + 1 > v77)
    {
      v131 = 2 * v77 + 2;
      *(_QWORD *)(a3 + 40) = v131;
      v132 = *(_QWORD **)(a3 + 16);
      if (v132)
      {
        v78 = (_BYTE *)*v132;
        v133 = v132[1] - *v132;
        v134 = v131 >= v133;
        v135 = v131 - v133;
        if (v135 != 0 && v134)
        {
          std::vector<char>::__append(*(std::vector<char> **)(a3 + 16), v135);
          v78 = **(_BYTE ***)(a3 + 16);
        }
        else if (!v134)
        {
          v132[1] = &v78[v131];
        }
      }
      else
      {
        v78 = malloc_type_realloc(*(void **)(a3 + 24), v131, 0xF6EA6B1uLL);
      }
      *(_QWORD *)(a3 + 24) = v78;
    }
    else
    {
      v78 = *(_BYTE **)(a3 + 24);
    }
    v78[(*(_QWORD *)(a3 + 32))++] = v143;
  }
  if (v143)
  {
    std::vector<turi::flexible_type>::resize(v139, v68);
    v79 = (uint64_t)turi::integer_pack::variable_encode<turi::oarchive>((turi::oarchive *)a3, 0xAAAAAAAAAAAAAAABLL * (((char *)v137 - (char *)v136) >> 3));
    v80 = v136;
    v81 = v137;
    while (v80 != (void **)v81)
    {
      if (*((char *)v80 + 23) < 0)
        v82 = (unint64_t)v80[1];
      else
        v82 = *((unsigned __int8 *)v80 + 23);
      turi::integer_pack::variable_encode<turi::oarchive>((turi::oarchive *)a3, v82);
      if (*((char *)v80 + 23) < 0)
      {
        v84 = *v80;
        v83 = (size_t)v80[1];
      }
      else
      {
        v83 = *((unsigned __int8 *)v80 + 23);
        v84 = v80;
      }
      if (*(_QWORD *)a3)
      {
        v79 = std::ostream::write();
      }
      else
      {
        v85 = *(_QWORD *)(a3 + 40);
        if (*(_QWORD *)(a3 + 32) + v83 > v85)
        {
          v87 = 2 * (v85 + v83);
          *(_QWORD *)(a3 + 40) = v87;
          v88 = *(char ***)(a3 + 16);
          if (v88)
          {
            v86 = *v88;
            v89 = v88[1] - *v88;
            v90 = v87 >= v89;
            v91 = v87 - v89;
            if (v91 != 0 && v90)
            {
              std::vector<char>::__append(*(std::vector<char> **)(a3 + 16), v91);
              v86 = **(char ***)(a3 + 16);
            }
            else if (!v90)
            {
              v88[1] = &v86[v87];
            }
          }
          else
          {
            v86 = (char *)malloc_type_realloc(*(void **)(a3 + 24), v87, 0xF6EA6B1uLL);
          }
          *(_QWORD *)(a3 + 24) = v86;
        }
        else
        {
          v86 = *(char **)(a3 + 24);
        }
        v79 = (uint64_t)memcpy(&v86[*(_QWORD *)(a3 + 32)], v84, v83);
        *(_QWORD *)(a3 + 32) += v83;
      }
      v80 += 3;
    }
    turi::v2_block_impl::encode_number(v79, a3, v139);
  }
  else
  {
    v92 = (_BYTE *)*a1;
    v93 = (_BYTE *)a1[1];
    if ((_BYTE *)*a1 == v93)
    {
      v94 = 0;
    }
    else
    {
      v94 = 0;
      v95 = v139[0];
      do
      {
        if (v92[12] != 7)
        {
          if (*(char *)(*(_QWORD *)v92 + 31) < 0)
            v96 = *(_QWORD *)(*(_QWORD *)v92 + 16);
          else
            v96 = *(unsigned __int8 *)(*(_QWORD *)v92 + 31);
          v97 = 16 * v94++;
          *(_QWORD *)(v95 + v97) = v96;
        }
        v92 += 16;
      }
      while (v92 != v93);
    }
    std::vector<turi::flexible_type>::resize(v139, v94);
    turi::v2_block_impl::encode_number(v98, a3, v139);
    v99 = (_BYTE *)*a1;
    v100 = (_BYTE *)a1[1];
    while (v99 != v100)
    {
      if (v99[12] != 7)
      {
        v101 = *(_QWORD *)v99;
        if (*(char *)(*(_QWORD *)v99 + 31) < 0)
        {
          v102 = *(const void **)(v101 + 8);
          v103 = *(_QWORD *)(v101 + 16);
        }
        else
        {
          v102 = (const void *)(v101 + 8);
          v103 = *(unsigned __int8 *)(*(_QWORD *)v99 + 31);
        }
        if (*(_QWORD *)a3)
        {
          std::ostream::write();
        }
        else
        {
          v104 = *(_QWORD *)(a3 + 40);
          if (*(_QWORD *)(a3 + 32) + v103 > v104)
          {
            v106 = 2 * (v104 + v103);
            *(_QWORD *)(a3 + 40) = v106;
            v107 = *(char ***)(a3 + 16);
            if (v107)
            {
              v105 = *v107;
              v108 = v107[1] - *v107;
              v109 = v106 >= v108;
              v110 = v106 - v108;
              if (v110 != 0 && v109)
              {
                std::vector<char>::__append(*(std::vector<char> **)(a3 + 16), v110);
                v105 = **(char ***)(a3 + 16);
              }
              else if (!v109)
              {
                v107[1] = &v105[v106];
              }
            }
            else
            {
              v105 = (char *)malloc_type_realloc(*(void **)(a3 + 24), v106, 0xF6EA6B1uLL);
            }
            *(_QWORD *)(a3 + 24) = v105;
          }
          else
          {
            v105 = *(char **)(a3 + 24);
          }
          memcpy(&v105[*(_QWORD *)(a3 + 32)], v102, v103);
          *(_QWORD *)(a3 + 32) += v103;
        }
      }
      v99 += 16;
    }
  }
  v145[0] = (void **)&v136;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v145);
  v136 = (void **)v139;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v136);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)__src);
LABEL_77:
  a2[2] = *(_QWORD *)(a3 + 32);
}

void sub_218193C5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char *a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, void *a17)
{
  uint64_t v17;

  *(_QWORD *)(v17 - 104) = &a11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v17 - 104));
  a11 = &a14;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a11);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void turi::v2_block_impl::encode_vector(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  void **v15;
  void **v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  void **v21;
  void **v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  void **v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  void **v33;
  unsigned int v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  void **v38;
  void **v39;
  void *v40;
  uint64_t *v41;
  uint64_t *v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  void **v46;
  void **v47;
  uint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  void **v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t v55;
  void **v56;
  void *v57;
  void *v58;
  unsigned int v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t v62;
  void **v63;
  void *v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t v70;
  void **v71;
  unint64_t *v72;
  size_t v73;
  uint64_t *v74;
  size_t v75;
  BOOL v76;
  std::vector<char>::size_type v77;
  uint64_t v78;
  void **v79[3];
  uint64_t v80[3];
  char v81;
  void **v82;
  char v83;
  void ***v84;
  int v85;
  char v86;
  uint64_t v87;

  v87 = *MEMORY[0x24BDAC8D0];
  v81 = 0;
  if (*(_QWORD *)a2)
  {
    v5 = std::ostream::write();
  }
  else
  {
    v6 = *(_QWORD *)(a2 + 40);
    if (*(_QWORD *)(a2 + 32) + 1 > v6)
    {
      v73 = 2 * v6 + 2;
      *(_QWORD *)(a2 + 40) = v73;
      v74 = *(uint64_t **)(a2 + 16);
      if (v74)
      {
        v5 = *v74;
        v75 = v74[1] - *v74;
        v76 = v73 >= v75;
        v77 = v73 - v75;
        if (v77 != 0 && v76)
        {
          std::vector<char>::__append(*(std::vector<char> **)(a2 + 16), v77);
          v5 = **(_QWORD **)(a2 + 16);
        }
        else if (!v76)
        {
          v74[1] = v5 + v73;
        }
      }
      else
      {
        v5 = (uint64_t)malloc_type_realloc(*(void **)(a2 + 24), v73, 0xF6EA6B1uLL);
      }
      *(_QWORD *)(a2 + 24) = v5;
    }
    else
    {
      v5 = *(_QWORD *)(a2 + 24);
    }
    *(_BYTE *)(v5 + (*(_QWORD *)(a2 + 32))++) = 0;
  }
  memset(v80, 0, sizeof(v80));
  memset(v79, 0, sizeof(v79));
  v7 = *a3;
  if (a3[1] != *a3)
  {
    v8 = 0;
    do
    {
      v9 = (_BYTE *)(v7 + 16 * v8);
      if (v9[12] != 7)
      {
        v10 = *(_QWORD *)v9;
        v11 = (uint64_t)(*(_QWORD *)(*(_QWORD *)v9 + 16) - *(_QWORD *)(*(_QWORD *)v9 + 8)) >> 3;
        v85 = 0;
        v86 = 0;
        v84 = (void ***)v11;
        v5 = (uint64_t)std::vector<turi::flexible_type>::push_back[abi:ne180100](v80, (uint64_t *)&v84);
        switch(v86)
        {
          case 2:
            v12 = (unint64_t *)v84;
            do
            {
              v13 = __ldaxr(v12);
              v14 = v13 - 1;
            }
            while (__stlxr(v14, v12));
            if (!v14)
            {
              v15 = (void **)v84;
              if (v84)
              {
                if (*((char *)v84 + 31) < 0)
                  operator delete(v84[1]);
                v16 = v15;
                v17 = 0x1012C404EF22A49;
                goto LABEL_52;
              }
            }
            break;
          case 3:
            v18 = (unint64_t *)v84;
            do
            {
              v19 = __ldaxr(v18);
              v20 = v19 - 1;
            }
            while (__stlxr(v20, v18));
            if (!v20)
            {
              v21 = (void **)v84;
              if (v84)
              {
                v22 = v84[1];
                if (v22)
                {
                  v84[2] = v22;
                  operator delete(v22);
                }
                v16 = v21;
                v17 = 0x1080C409938AC02;
                goto LABEL_52;
              }
            }
            break;
          case 4:
            v23 = (unint64_t *)v84;
            do
            {
              v24 = __ldaxr(v23);
              v25 = v24 - 1;
            }
            while (__stlxr(v25, v23));
            if (!v25)
            {
              v26 = (void **)v84;
              if (v84)
              {
                v82 = (void **)(v84 + 1);
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v82);
                goto LABEL_36;
              }
            }
            break;
          case 5:
            v27 = (unint64_t *)v84;
            do
            {
              v28 = __ldaxr(v27);
              v29 = v28 - 1;
            }
            while (__stlxr(v29, v27));
            if (!v29)
            {
              v26 = (void **)v84;
              if (v84)
              {
                v82 = (void **)(v84 + 1);
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v82);
LABEL_36:
                v16 = v26;
                v17 = 0x1020C405E66F15BLL;
                goto LABEL_52;
              }
            }
            break;
          case 8:
            v30 = (unint64_t *)v84;
            do
            {
              v31 = __ldaxr(v30);
              v32 = v31 - 1;
            }
            while (__stlxr(v32, v30));
            if (!v32)
            {
              v33 = (void **)v84;
              if (v84)
              {
                boost::detail::shared_count::~shared_count((unsigned int **)v84 + 2);
                v16 = v33;
                v34 = -235920773;
                goto LABEL_51;
              }
            }
            break;
          case 9:
            v35 = (unint64_t *)v84;
            do
            {
              v36 = __ldaxr(v35);
              v37 = v36 - 1;
            }
            while (__stlxr(v37, v35));
            if (!v37)
            {
              v38 = (void **)v84;
              if (v84)
              {
                v39 = v84[6];
                if (v39)
                {
                  v84[7] = v39;
                  operator delete(v39);
                }
                v40 = v38[3];
                if (v40)
                {
                  v38[4] = v40;
                  operator delete(v40);
                }
                std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v38 + 1));
                v16 = v38;
                v34 = 2071181815;
LABEL_51:
                v17 = v34 | 0x1030C4000000000;
LABEL_52:
                v5 = MEMORY[0x219A19A08](v16, v17);
              }
            }
            break;
          default:
            break;
        }
        v41 = *(uint64_t **)(v10 + 8);
        v42 = *(uint64_t **)(v10 + 16);
        while (v41 != v42)
        {
          v78 = 0;
          v78 = *v41;
          turi::flexible_type::flexible_type<double>((uint64_t)&v82, &v78);
          v5 = (uint64_t)std::vector<turi::flexible_type>::push_back[abi:ne180100]((uint64_t *)v79, (uint64_t *)&v82);
          switch(v83)
          {
            case 2:
              v43 = (unint64_t *)v82;
              do
              {
                v44 = __ldaxr(v43);
                v45 = v44 - 1;
              }
              while (__stlxr(v45, v43));
              if (!v45)
              {
                v46 = v82;
                if (v82)
                {
                  if (*((char *)v82 + 31) < 0)
                    operator delete(v82[1]);
                  v47 = v46;
                  v48 = 0x1012C404EF22A49;
                  goto LABEL_96;
                }
              }
              break;
            case 3:
              v60 = (unint64_t *)v82;
              do
              {
                v61 = __ldaxr(v60);
                v62 = v61 - 1;
              }
              while (__stlxr(v62, v60));
              if (!v62)
              {
                v63 = v82;
                if (v82)
                {
                  v64 = v82[1];
                  if (v64)
                  {
                    v82[2] = v64;
                    operator delete(v64);
                  }
                  v47 = v63;
                  v48 = 0x1080C409938AC02;
                  goto LABEL_96;
                }
              }
              break;
            case 4:
              v49 = (unint64_t *)v82;
              do
              {
                v50 = __ldaxr(v49);
                v51 = v50 - 1;
              }
              while (__stlxr(v51, v49));
              if (!v51)
              {
                v52 = v82;
                if (v82)
                {
                  v84 = (void ***)(v82 + 1);
                  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v84);
                  goto LABEL_89;
                }
              }
              break;
            case 5:
              v65 = (unint64_t *)v82;
              do
              {
                v66 = __ldaxr(v65);
                v67 = v66 - 1;
              }
              while (__stlxr(v67, v65));
              if (!v67)
              {
                v52 = v82;
                if (v82)
                {
                  v84 = (void ***)(v82 + 1);
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v84);
LABEL_89:
                  v47 = v52;
                  v48 = 0x1020C405E66F15BLL;
                  goto LABEL_96;
                }
              }
              break;
            case 8:
              v68 = (unint64_t *)v82;
              do
              {
                v69 = __ldaxr(v68);
                v70 = v69 - 1;
              }
              while (__stlxr(v70, v68));
              if (!v70)
              {
                v71 = v82;
                if (v82)
                {
                  boost::detail::shared_count::~shared_count((unsigned int **)v82 + 2);
                  v47 = v71;
                  v59 = -235920773;
                  goto LABEL_95;
                }
              }
              break;
            case 9:
              v53 = (unint64_t *)v82;
              do
              {
                v54 = __ldaxr(v53);
                v55 = v54 - 1;
              }
              while (__stlxr(v55, v53));
              if (!v55)
              {
                v56 = v82;
                if (v82)
                {
                  v57 = v82[6];
                  if (v57)
                  {
                    v82[7] = v57;
                    operator delete(v57);
                  }
                  v58 = v56[3];
                  if (v58)
                  {
                    v56[4] = v58;
                    operator delete(v58);
                  }
                  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v56 + 1));
                  v47 = v56;
                  v59 = 2071181815;
LABEL_95:
                  v48 = v59 | 0x1030C4000000000;
LABEL_96:
                  v5 = MEMORY[0x219A19A08](v47, v48);
                }
              }
              break;
            default:
              break;
          }
          ++v41;
        }
      }
      ++v8;
      v7 = *a3;
    }
    while (v8 < (a3[1] - *a3) >> 4);
  }
  v72 = turi::v2_block_impl::encode_number(v5, a2, v80);
  turi::v2_block_impl::encode_double((uint64_t)v72, a2, (uint64_t **)v79);
  v84 = v79;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v84);
  v79[0] = (void **)v80;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v79);
}

void sub_2181942DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void ***a20)
{
  a20 = &a11;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a20);
  a11 = (void **)&a14;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a11);
  _Unwind_Resume(a1);
}

void turi::v2_block_impl::encode_nd_vector(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  unint64_t v6;
  _BYTE *v7;
  void ***v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t *v26;
  void *v27;
  void *v28;
  unsigned int v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t *v33;
  void *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t *v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  void **v47;
  void **v48;
  uint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  void **v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  void **v57;
  void *v58;
  void *v59;
  unsigned int v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t v63;
  void **v64;
  void *v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t *v69;
  unint64_t v70;
  unint64_t v71;
  void **v72;
  uint64_t **v73;
  uint64_t **v74;
  uint64_t *v75;
  unint64_t *v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t *v79;
  uint64_t *v80;
  uint64_t v81;
  unint64_t *v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t *v85;
  unint64_t *v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t *v89;
  void *v90;
  void *v91;
  unsigned int v92;
  unint64_t *v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t *v96;
  void *v97;
  unint64_t *v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t *v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t *v104;
  uint64_t **v105;
  uint64_t **v106;
  uint64_t *v107;
  unint64_t *v108;
  unint64_t v109;
  unint64_t v110;
  uint64_t *v111;
  uint64_t *v112;
  uint64_t v113;
  unint64_t *v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t *v117;
  unint64_t *v118;
  unint64_t v119;
  unint64_t v120;
  uint64_t *v121;
  void *v122;
  void *v123;
  unsigned int v124;
  unint64_t *v125;
  unint64_t v126;
  unint64_t v127;
  uint64_t *v128;
  void *v129;
  unint64_t *v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t *v133;
  unint64_t v134;
  unint64_t v135;
  uint64_t *v136;
  uint64_t v137;
  uint64_t **v138;
  uint64_t **v139;
  uint64_t *v140;
  unint64_t *v141;
  unint64_t v142;
  unint64_t v143;
  uint64_t *v144;
  uint64_t *v145;
  uint64_t v146;
  unint64_t *v147;
  unint64_t v148;
  unint64_t v149;
  uint64_t *v150;
  unint64_t *v151;
  unint64_t v152;
  unint64_t v153;
  uint64_t *v154;
  void *v155;
  void *v156;
  unsigned int v157;
  unint64_t *v158;
  unint64_t v159;
  unint64_t v160;
  uint64_t *v161;
  void *v162;
  unint64_t *v163;
  unint64_t v164;
  unint64_t v165;
  unint64_t *v166;
  unint64_t v167;
  unint64_t v168;
  uint64_t *v169;
  uint64_t v170;
  unint64_t v171;
  unint64_t *v172;
  unint64_t *v173;
  unint64_t *v174;
  unint64_t *v175;
  std::__shared_weak_count *v176;
  unint64_t *p_shared_owners;
  unint64_t v178;
  size_t v179;
  uint64_t *v180;
  size_t v181;
  BOOL v182;
  std::vector<char>::size_type v183;
  _QWORD *v184;
  void *__p;
  void *v186;
  uint64_t v187;
  void **v188;
  std::__shared_weak_count *v189;
  void *v190;
  void *v191;
  void *v192;
  void *v193;
  uint64_t *v194[3];
  uint64_t v195[3];
  uint64_t v196[3];
  uint64_t v197[3];
  uint64_t v198[3];
  char v199;
  uint64_t *v200;
  uint64_t *v201;
  void *v202;
  void *v203;
  void *v204;
  void *v205;
  void **v206;
  void **v207;
  uint64_t v208;
  uint64_t v209;

  v209 = *MEMORY[0x24BDAC8D0];
  v199 = 0;
  memset(v198, 0, sizeof(v198));
  memset(v197, 0, sizeof(v197));
  memset(v196, 0, sizeof(v196));
  memset(v195, 0, sizeof(v195));
  memset(v194, 0, sizeof(v194));
  v200 = 0;
  v201 = 0;
  v202 = 0;
  v206 = 0;
  v207 = 0;
  v208 = 0;
  __p = 0;
  v186 = 0;
  v187 = 0;
  turi::flexible_type_impl::ndarray<double>::ndarray(&v188, (uint64_t)&v200, (uint64_t)&v206, (uint64_t)&__p, 0);
  if (__p)
  {
    v186 = __p;
    operator delete(__p);
  }
  if (v206)
  {
    v207 = v206;
    operator delete(v206);
  }
  if (v200)
  {
    v201 = v200;
    operator delete(v200);
  }
  v5 = *a3;
  if (a3[1] != *a3)
  {
    v6 = 0;
    v184 = a3;
    do
    {
      v7 = (_BYTE *)(v5 + 16 * v6);
      if (v7[12] != 7)
      {
        v8 = (void ***)(*(_QWORD *)v7 + 8);
        if (!turi::flexible_type_impl::ndarray<double>::is_valid(v8))
          turi::v2_block_impl::encode_nd_vector(turi::v2_block_impl::block_info &,turi::oarchive &,std::vector<turi::flexible_type> const&)::$_0::operator()();
        if (!turi::flexible_type_impl::ndarray<double>::is_full(v8))
        {
          turi::flexible_type_impl::ndarray<double>::compact((uint64_t)v8, &v200);
          turi::flexible_type_impl::ndarray<double>::operator=((uint64_t)&v188, (uint64_t)&v200);
          if (v204)
          {
            v205 = v204;
            operator delete(v204);
          }
          if (v202)
          {
            v203 = v202;
            operator delete(v202);
          }
          v9 = (std::__shared_weak_count *)v201;
          if (v201)
          {
            v10 = (unint64_t *)(v201 + 1);
            do
              v11 = __ldaxr(v10);
            while (__stlxr(v11 - 1, v10));
            if (!v11)
            {
              ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
              std::__shared_weak_count::__release_weak(v9);
            }
          }
          v8 = &v188;
        }
        v12 = v8[3] - v8[2];
        LODWORD(v201) = 0;
        BYTE4(v201) = 0;
        v200 = (uint64_t *)v12;
        std::vector<turi::flexible_type>::push_back[abi:ne180100](v198, (uint64_t *)&v200);
        switch(BYTE4(v201))
        {
          case 2:
            v13 = (unint64_t *)v200;
            do
            {
              v14 = __ldaxr(v13);
              v15 = v14 - 1;
            }
            while (__stlxr(v15, v13));
            if (!v15)
            {
              v16 = v200;
              if (v200)
              {
                if (*((char *)v200 + 31) < 0)
                  operator delete((void *)v200[1]);
                v17 = v16;
                v18 = 0x1012C404EF22A49;
                goto LABEL_63;
              }
            }
            break;
          case 3:
            v30 = (unint64_t *)v200;
            do
            {
              v31 = __ldaxr(v30);
              v32 = v31 - 1;
            }
            while (__stlxr(v32, v30));
            if (!v32)
            {
              v33 = v200;
              if (v200)
              {
                v34 = (void *)v200[1];
                if (v34)
                {
                  v200[2] = (uint64_t)v34;
                  operator delete(v34);
                }
                v17 = v33;
                v18 = 0x1080C409938AC02;
                goto LABEL_63;
              }
            }
            break;
          case 4:
            v19 = (unint64_t *)v200;
            do
            {
              v20 = __ldaxr(v19);
              v21 = v20 - 1;
            }
            while (__stlxr(v21, v19));
            if (!v21)
            {
              v22 = v200;
              if (v200)
              {
                v206 = (void **)(v200 + 1);
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v206);
                goto LABEL_56;
              }
            }
            break;
          case 5:
            v35 = (unint64_t *)v200;
            do
            {
              v36 = __ldaxr(v35);
              v37 = v36 - 1;
            }
            while (__stlxr(v37, v35));
            if (!v37)
            {
              v22 = v200;
              if (v200)
              {
                v206 = (void **)(v200 + 1);
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v206);
LABEL_56:
                v17 = v22;
                v18 = 0x1020C405E66F15BLL;
                goto LABEL_63;
              }
            }
            break;
          case 8:
            v38 = (unint64_t *)v200;
            do
            {
              v39 = __ldaxr(v38);
              v40 = v39 - 1;
            }
            while (__stlxr(v40, v38));
            if (!v40)
            {
              v41 = v200;
              if (v200)
              {
                boost::detail::shared_count::~shared_count((unsigned int **)v200 + 2);
                v17 = v41;
                v29 = -235920773;
                goto LABEL_62;
              }
            }
            break;
          case 9:
            v23 = (unint64_t *)v200;
            do
            {
              v24 = __ldaxr(v23);
              v25 = v24 - 1;
            }
            while (__stlxr(v25, v23));
            if (!v25)
            {
              v26 = v200;
              if (v200)
              {
                v27 = (void *)v200[6];
                if (v27)
                {
                  v200[7] = (uint64_t)v27;
                  operator delete(v27);
                }
                v28 = (void *)v26[3];
                if (v28)
                {
                  v26[4] = (uint64_t)v28;
                  operator delete(v28);
                }
                std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v26 + 1));
                v17 = v26;
                v29 = 2071181815;
LABEL_62:
                v18 = v29 | 0x1030C4000000000;
LABEL_63:
                MEMORY[0x219A19A08](v17, v18);
              }
            }
            break;
          default:
            break;
        }
        v42 = (_QWORD *)turi::flexible_type_impl::ndarray<double>::elements(v8);
        v43 = (uint64_t)(v42[1] - *v42) >> 3;
        LODWORD(v207) = 0;
        BYTE4(v207) = 0;
        v206 = (void **)v43;
        std::vector<turi::flexible_type>::push_back[abi:ne180100](v197, (uint64_t *)&v206);
        switch(BYTE4(v207))
        {
          case 2:
            v44 = (unint64_t *)v206;
            do
            {
              v45 = __ldaxr(v44);
              v46 = v45 - 1;
            }
            while (__stlxr(v46, v44));
            if (!v46)
            {
              v47 = v206;
              if (v206)
              {
                if (*((char *)v206 + 31) < 0)
                  operator delete(v206[1]);
                v48 = v47;
                v49 = 0x1012C404EF22A49;
                goto LABEL_105;
              }
            }
            break;
          case 3:
            v61 = (unint64_t *)v206;
            do
            {
              v62 = __ldaxr(v61);
              v63 = v62 - 1;
            }
            while (__stlxr(v63, v61));
            if (!v63)
            {
              v64 = v206;
              if (v206)
              {
                v65 = v206[1];
                if (v65)
                {
                  v206[2] = v65;
                  operator delete(v65);
                }
                v48 = v64;
                v49 = 0x1080C409938AC02;
                goto LABEL_105;
              }
            }
            break;
          case 4:
            v50 = (unint64_t *)v206;
            do
            {
              v51 = __ldaxr(v50);
              v52 = v51 - 1;
            }
            while (__stlxr(v52, v50));
            if (!v52)
            {
              v53 = v206;
              if (v206)
              {
                v200 = (uint64_t *)(v206 + 1);
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v200);
                goto LABEL_98;
              }
            }
            break;
          case 5:
            v66 = (unint64_t *)v206;
            do
            {
              v67 = __ldaxr(v66);
              v68 = v67 - 1;
            }
            while (__stlxr(v68, v66));
            if (!v68)
            {
              v53 = v206;
              if (v206)
              {
                v200 = (uint64_t *)(v206 + 1);
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v200);
LABEL_98:
                v48 = v53;
                v49 = 0x1020C405E66F15BLL;
                goto LABEL_105;
              }
            }
            break;
          case 8:
            v69 = (unint64_t *)v206;
            do
            {
              v70 = __ldaxr(v69);
              v71 = v70 - 1;
            }
            while (__stlxr(v71, v69));
            if (!v71)
            {
              v72 = v206;
              if (v206)
              {
                boost::detail::shared_count::~shared_count((unsigned int **)v206 + 2);
                v48 = v72;
                v60 = -235920773;
                goto LABEL_104;
              }
            }
            break;
          case 9:
            v54 = (unint64_t *)v206;
            do
            {
              v55 = __ldaxr(v54);
              v56 = v55 - 1;
            }
            while (__stlxr(v56, v54));
            if (!v56)
            {
              v57 = v206;
              if (v206)
              {
                v58 = v206[6];
                if (v58)
                {
                  v206[7] = v58;
                  operator delete(v58);
                }
                v59 = v57[3];
                if (v59)
                {
                  v57[4] = v59;
                  operator delete(v59);
                }
                std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v57 + 1));
                v48 = v57;
                v60 = 2071181815;
LABEL_104:
                v49 = v60 | 0x1030C4000000000;
LABEL_105:
                MEMORY[0x219A19A08](v48, v49);
              }
            }
            break;
          default:
            break;
        }
        v74 = (uint64_t **)v8[2];
        v73 = (uint64_t **)v8[3];
        while (v74 != v73)
        {
          v75 = *v74;
          BYTE4(v201) = 0;
          LODWORD(v201) = 0;
          v200 = v75;
          std::vector<turi::flexible_type>::push_back[abi:ne180100](v196, (uint64_t *)&v200);
          switch(BYTE4(v201))
          {
            case 2:
              v76 = (unint64_t *)v200;
              do
              {
                v77 = __ldaxr(v76);
                v78 = v77 - 1;
              }
              while (__stlxr(v78, v76));
              if (!v78)
              {
                v79 = v200;
                if (v200)
                {
                  if (*((char *)v200 + 31) < 0)
                    operator delete((void *)v200[1]);
                  v80 = v79;
                  v81 = 0x1012C404EF22A49;
                  goto LABEL_149;
                }
              }
              break;
            case 3:
              v93 = (unint64_t *)v200;
              do
              {
                v94 = __ldaxr(v93);
                v95 = v94 - 1;
              }
              while (__stlxr(v95, v93));
              if (!v95)
              {
                v96 = v200;
                if (v200)
                {
                  v97 = (void *)v200[1];
                  if (v97)
                  {
                    v200[2] = (uint64_t)v97;
                    operator delete(v97);
                  }
                  v80 = v96;
                  v81 = 0x1080C409938AC02;
                  goto LABEL_149;
                }
              }
              break;
            case 4:
              v82 = (unint64_t *)v200;
              do
              {
                v83 = __ldaxr(v82);
                v84 = v83 - 1;
              }
              while (__stlxr(v84, v82));
              if (!v84)
              {
                v85 = v200;
                if (v200)
                {
                  v206 = (void **)(v200 + 1);
                  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v206);
                  goto LABEL_142;
                }
              }
              break;
            case 5:
              v98 = (unint64_t *)v200;
              do
              {
                v99 = __ldaxr(v98);
                v100 = v99 - 1;
              }
              while (__stlxr(v100, v98));
              if (!v100)
              {
                v85 = v200;
                if (v200)
                {
                  v206 = (void **)(v200 + 1);
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v206);
LABEL_142:
                  v80 = v85;
                  v81 = 0x1020C405E66F15BLL;
                  goto LABEL_149;
                }
              }
              break;
            case 8:
              v101 = (unint64_t *)v200;
              do
              {
                v102 = __ldaxr(v101);
                v103 = v102 - 1;
              }
              while (__stlxr(v103, v101));
              if (!v103)
              {
                v104 = v200;
                if (v200)
                {
                  boost::detail::shared_count::~shared_count((unsigned int **)v200 + 2);
                  v80 = v104;
                  v92 = -235920773;
                  goto LABEL_148;
                }
              }
              break;
            case 9:
              v86 = (unint64_t *)v200;
              do
              {
                v87 = __ldaxr(v86);
                v88 = v87 - 1;
              }
              while (__stlxr(v88, v86));
              if (!v88)
              {
                v89 = v200;
                if (v200)
                {
                  v90 = (void *)v200[6];
                  if (v90)
                  {
                    v200[7] = (uint64_t)v90;
                    operator delete(v90);
                  }
                  v91 = (void *)v89[3];
                  if (v91)
                  {
                    v89[4] = (uint64_t)v91;
                    operator delete(v91);
                  }
                  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v89 + 1));
                  v80 = v89;
                  v92 = 2071181815;
LABEL_148:
                  v81 = v92 | 0x1030C4000000000;
LABEL_149:
                  MEMORY[0x219A19A08](v80, v81);
                }
              }
              break;
            default:
              break;
          }
          ++v74;
        }
        v106 = (uint64_t **)v8[5];
        v105 = (uint64_t **)v8[6];
        while (v106 != v105)
        {
          v107 = *v106;
          BYTE4(v201) = 0;
          LODWORD(v201) = 0;
          v200 = v107;
          std::vector<turi::flexible_type>::push_back[abi:ne180100](v195, (uint64_t *)&v200);
          switch(BYTE4(v201))
          {
            case 2:
              v108 = (unint64_t *)v200;
              do
              {
                v109 = __ldaxr(v108);
                v110 = v109 - 1;
              }
              while (__stlxr(v110, v108));
              if (!v110)
              {
                v111 = v200;
                if (v200)
                {
                  if (*((char *)v200 + 31) < 0)
                    operator delete((void *)v200[1]);
                  v112 = v111;
                  v113 = 0x1012C404EF22A49;
                  goto LABEL_194;
                }
              }
              break;
            case 3:
              v125 = (unint64_t *)v200;
              do
              {
                v126 = __ldaxr(v125);
                v127 = v126 - 1;
              }
              while (__stlxr(v127, v125));
              if (!v127)
              {
                v128 = v200;
                if (v200)
                {
                  v129 = (void *)v200[1];
                  if (v129)
                  {
                    v200[2] = (uint64_t)v129;
                    operator delete(v129);
                  }
                  v112 = v128;
                  v113 = 0x1080C409938AC02;
                  goto LABEL_194;
                }
              }
              break;
            case 4:
              v114 = (unint64_t *)v200;
              do
              {
                v115 = __ldaxr(v114);
                v116 = v115 - 1;
              }
              while (__stlxr(v116, v114));
              if (!v116)
              {
                v117 = v200;
                if (v200)
                {
                  v206 = (void **)(v200 + 1);
                  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v206);
                  goto LABEL_187;
                }
              }
              break;
            case 5:
              v130 = (unint64_t *)v200;
              do
              {
                v131 = __ldaxr(v130);
                v132 = v131 - 1;
              }
              while (__stlxr(v132, v130));
              if (!v132)
              {
                v117 = v200;
                if (v200)
                {
                  v206 = (void **)(v200 + 1);
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v206);
LABEL_187:
                  v112 = v117;
                  v113 = 0x1020C405E66F15BLL;
                  goto LABEL_194;
                }
              }
              break;
            case 8:
              v133 = (unint64_t *)v200;
              do
              {
                v134 = __ldaxr(v133);
                v135 = v134 - 1;
              }
              while (__stlxr(v135, v133));
              if (!v135)
              {
                v136 = v200;
                if (v200)
                {
                  boost::detail::shared_count::~shared_count((unsigned int **)v200 + 2);
                  v112 = v136;
                  v124 = -235920773;
                  goto LABEL_193;
                }
              }
              break;
            case 9:
              v118 = (unint64_t *)v200;
              do
              {
                v119 = __ldaxr(v118);
                v120 = v119 - 1;
              }
              while (__stlxr(v120, v118));
              if (!v120)
              {
                v121 = v200;
                if (v200)
                {
                  v122 = (void *)v200[6];
                  if (v122)
                  {
                    v200[7] = (uint64_t)v122;
                    operator delete(v122);
                  }
                  v123 = (void *)v121[3];
                  if (v123)
                  {
                    v121[4] = (uint64_t)v123;
                    operator delete(v123);
                  }
                  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v121 + 1));
                  v112 = v121;
                  v124 = 2071181815;
LABEL_193:
                  v113 = v124 | 0x1030C4000000000;
LABEL_194:
                  MEMORY[0x219A19A08](v112, v113);
                }
              }
              break;
            default:
              break;
          }
          ++v106;
        }
        v137 = turi::flexible_type_impl::ndarray<double>::elements(v8);
        v138 = *(uint64_t ***)v137;
        v139 = *(uint64_t ***)(v137 + 8);
        a3 = v184;
        if (*(uint64_t ***)v137 != v139)
        {
          do
          {
            v140 = *v138;
            LODWORD(v201) = 0;
            BYTE4(v201) = 1;
            v200 = v140;
            std::vector<turi::flexible_type>::push_back[abi:ne180100]((uint64_t *)v194, (uint64_t *)&v200);
            switch(BYTE4(v201))
            {
              case 2:
                v141 = (unint64_t *)v200;
                do
                {
                  v142 = __ldaxr(v141);
                  v143 = v142 - 1;
                }
                while (__stlxr(v143, v141));
                if (!v143)
                {
                  v144 = v200;
                  if (v200)
                  {
                    if (*((char *)v200 + 31) < 0)
                      operator delete((void *)v200[1]);
                    v145 = v144;
                    v146 = 0x1012C404EF22A49;
                    goto LABEL_238;
                  }
                }
                break;
              case 3:
                v158 = (unint64_t *)v200;
                do
                {
                  v159 = __ldaxr(v158);
                  v160 = v159 - 1;
                }
                while (__stlxr(v160, v158));
                if (!v160)
                {
                  v161 = v200;
                  if (v200)
                  {
                    v162 = (void *)v200[1];
                    if (v162)
                    {
                      v200[2] = (uint64_t)v162;
                      operator delete(v162);
                    }
                    v145 = v161;
                    v146 = 0x1080C409938AC02;
                    goto LABEL_238;
                  }
                }
                break;
              case 4:
                v147 = (unint64_t *)v200;
                do
                {
                  v148 = __ldaxr(v147);
                  v149 = v148 - 1;
                }
                while (__stlxr(v149, v147));
                if (!v149)
                {
                  v150 = v200;
                  if (v200)
                  {
                    v206 = (void **)(v200 + 1);
                    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v206);
                    goto LABEL_231;
                  }
                }
                break;
              case 5:
                v163 = (unint64_t *)v200;
                do
                {
                  v164 = __ldaxr(v163);
                  v165 = v164 - 1;
                }
                while (__stlxr(v165, v163));
                if (!v165)
                {
                  v150 = v200;
                  if (v200)
                  {
                    v206 = (void **)(v200 + 1);
                    std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v206);
LABEL_231:
                    v145 = v150;
                    v146 = 0x1020C405E66F15BLL;
                    goto LABEL_238;
                  }
                }
                break;
              case 8:
                v166 = (unint64_t *)v200;
                do
                {
                  v167 = __ldaxr(v166);
                  v168 = v167 - 1;
                }
                while (__stlxr(v168, v166));
                if (!v168)
                {
                  v169 = v200;
                  if (v200)
                  {
                    boost::detail::shared_count::~shared_count((unsigned int **)v200 + 2);
                    v145 = v169;
                    v157 = -235920773;
                    goto LABEL_237;
                  }
                }
                break;
              case 9:
                v151 = (unint64_t *)v200;
                do
                {
                  v152 = __ldaxr(v151);
                  v153 = v152 - 1;
                }
                while (__stlxr(v153, v151));
                if (!v153)
                {
                  v154 = v200;
                  if (v200)
                  {
                    v155 = (void *)v200[6];
                    if (v155)
                    {
                      v200[7] = (uint64_t)v155;
                      operator delete(v155);
                    }
                    v156 = (void *)v154[3];
                    if (v156)
                    {
                      v154[4] = (uint64_t)v156;
                      operator delete(v156);
                    }
                    std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v154 + 1));
                    v145 = v154;
                    v157 = 2071181815;
LABEL_237:
                    v146 = v157 | 0x1030C4000000000;
LABEL_238:
                    MEMORY[0x219A19A08](v145, v146);
                  }
                }
                break;
              default:
                break;
            }
            ++v138;
          }
          while (v138 != v139);
        }
      }
      ++v6;
      v5 = *a3;
    }
    while (v6 < (uint64_t)(a3[1] - *a3) >> 4);
  }
  if (*(_QWORD *)a2)
  {
    v170 = std::ostream::write();
  }
  else
  {
    v171 = *(_QWORD *)(a2 + 40);
    if (*(_QWORD *)(a2 + 32) + 1 > v171)
    {
      v179 = 2 * v171 + 2;
      *(_QWORD *)(a2 + 40) = v179;
      v180 = *(uint64_t **)(a2 + 16);
      if (v180)
      {
        v170 = *v180;
        v181 = v180[1] - *v180;
        v182 = v179 >= v181;
        v183 = v179 - v181;
        if (v183 != 0 && v182)
        {
          std::vector<char>::__append(*(std::vector<char> **)(a2 + 16), v183);
          v170 = **(_QWORD **)(a2 + 16);
        }
        else if (!v182)
        {
          v180[1] = v170 + v179;
        }
      }
      else
      {
        v170 = (uint64_t)malloc_type_realloc(*(void **)(a2 + 24), v179, 0xF6EA6B1uLL);
      }
      *(_QWORD *)(a2 + 24) = v170;
    }
    else
    {
      v170 = *(_QWORD *)(a2 + 24);
    }
    *(_BYTE *)(v170 + (*(_QWORD *)(a2 + 32))++) = v199;
  }
  v172 = turi::v2_block_impl::encode_number(v170, a2, v198);
  v173 = turi::v2_block_impl::encode_number((uint64_t)v172, a2, v197);
  v174 = turi::v2_block_impl::encode_number((uint64_t)v173, a2, v196);
  v175 = turi::v2_block_impl::encode_number((uint64_t)v174, a2, v195);
  turi::v2_block_impl::encode_double((uint64_t)v175, a2, v194);
  if (v192)
  {
    v193 = v192;
    operator delete(v192);
  }
  if (v190)
  {
    v191 = v190;
    operator delete(v190);
  }
  v176 = v189;
  if (v189)
  {
    p_shared_owners = (unint64_t *)&v189->__shared_owners_;
    do
      v178 = __ldaxr(p_shared_owners);
    while (__stlxr(v178 - 1, p_shared_owners));
    if (!v178)
    {
      ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
      std::__shared_weak_count::__release_weak(v176);
    }
  }
  v188 = (void **)v194;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v188);
  v188 = (void **)v195;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v188);
  v188 = (void **)v196;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v188);
  v188 = (void **)v197;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v188);
  v188 = (void **)v198;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v188);
}

void sub_218195200(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, char *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,char a37)
{
  uint64_t v37;

  if (__p)
  {
    a14 = (uint64_t)__p;
    operator delete(__p);
  }
  tc_ft_to_type_cold_1((uint64_t)&__p, (void **)(v37 - 120), (void **)(v37 - 192));
  a16 = &a25;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a16 = &a28;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a16 = &a31;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a16 = &a34;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a16 = &a37;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  _Unwind_Resume(a1);
}

uint64_t turi::v2_block_impl::typed_decode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  int *v4;
  file_logger *v5;
  file_logger *v6;
  _QWORD *v7;
  uint64_t result;
  const std::locale::facet *v9;
  _QWORD *v10;
  unint64_t v13;
  int v14;
  int *v15;
  file_logger *v16;
  file_logger *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _BYTE *v23;
  const std::locale::facet *v24;
  int *v25;
  file_logger *v26;
  file_logger *started;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t j;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t *v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t *v45;
  void *v46;
  void *v47;
  unsigned int v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t *v52;
  void *v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t *v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t i;
  uint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t *v69;
  unint64_t *v70;
  uint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t *v75;
  unint64_t *v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t *v79;
  void *v80;
  void *v81;
  unsigned int v82;
  unint64_t *v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t *v86;
  void *v87;
  unint64_t *v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t *v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  std::locale::__imp *locale;
  size_t v99;
  std::locale *v100;
  unint64_t v101;
  unint64_t *v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t *v105;
  unint64_t *v106;
  uint64_t v107;
  unint64_t *v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t *v111;
  unint64_t *v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t *v115;
  void *v116;
  void *v117;
  unsigned int v118;
  unint64_t *v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t *v122;
  void *v123;
  unint64_t *v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t *v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t *v130;
  uint64_t v131;
  std::locale::__imp *v132;
  int8x8_t v133;
  uint8x8_t v134;
  uint64_t v135;
  _QWORD **v136;
  uint64_t v137;
  unint64_t *v138;
  _QWORD *v139;
  unint64_t v140;
  unint64_t v141;
  void *v142;
  unint64_t *v143;
  _QWORD *v144;
  uint64_t v145;
  unint64_t v146;
  unint64_t v147;
  _QWORD *v148;
  uint64_t v149;
  _QWORD *v150;
  unint64_t v151;
  unint64_t v152;
  unint64_t *v153;
  _QWORD *v154;
  unint64_t v155;
  unint64_t v156;
  unint64_t *v157;
  _QWORD *v158;
  unint64_t v159;
  unint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  unsigned int *v165;
  unsigned int v166;
  __int128 v167;
  __int128 v168;
  unint64_t v169;
  unint64_t v170;
  uint64_t v171;
  char v172;
  char v173;
  _DWORD *v174;
  _QWORD *v175;
  uint64_t v176;
  unint64_t v177;
  _QWORD *v178;
  uint64_t v179;
  uint64_t v180;
  _QWORD *exception;
  char v182;
  _QWORD v183[2];
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  void **v187;
  unint64_t v188;
  std::locale *v189;
  std::locale v190;
  uint64_t v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  _OWORD v195[9];
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;

  v199 = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)(a1 + 32) & 2) != 0)
  {
    v183[0] = 0;
    v183[1] = 0;
    v184 = a2;
    v185 = 0;
    v186 = a3;
    v13 = *(_QWORD *)(a1 + 24);
    std::vector<turi::flexible_type>::resize(a4, v13);
    v182 = 0;
    if (v184)
      v182 = *(_BYTE *)(v184 + v185++);
    else
      std::istream::read();
    if ((*(_BYTE *)(a1 + 32) & 4) != 0)
    {
      turi::archive_detail::vector_deserialize_impl<turi::iarchive,turi::flexible_type,false>::exec((turi::iarchive *)v183, a4);
      goto LABEL_22;
    }
    if (!v182)
      return 1;
    if (v182 != 1)
    {
      if (v182 != 2)
      {
        v25 = (int *)global_logger();
        if (v25[169] > 6)
          return 0;
        if (!cppipc::must_cancel((cppipc *)v25))
        {
          v26 = (file_logger *)global_logger();
          started = file_logger::start_stream(v26, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray_v2_type_encoding.cpp", "typed_decode", 534, 1);
          v28 = pthread_getspecific(*((_QWORD *)started + 74));
          if (v28 && *((_BYTE *)v28 + 280))
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28 + 2, (uint64_t)"Unexpected value for num_types: ", 32);
          v22 = file_logger::operator<<<int>((uint64_t)started);
          v29 = pthread_getspecific(*(_QWORD *)(v22 + 592));
          if (v29 && *((_BYTE *)v29 + 280))
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29 + 2, (uint64_t)" (expected 0, 1, or 2)", 22);
          result = (uint64_t)pthread_getspecific(*(_QWORD *)(v22 + 592));
          if (!result)
            return result;
          if (!*(_BYTE *)(result + 280))
            return 0;
          std::endl[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)(result + 16));
          file_logger::stream_flush((file_logger *)v22);
LABEL_52:
          if (*(_DWORD *)(v22 + 600) == 7)
          {
            __print_back_trace();
            exception = __cxa_allocate_exception(8uLL);
            *exception = "LOG_FATAL encountered";
            __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
          }
          return 0;
        }
LABEL_293:
        log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
      }
      if (v184)
      {
        v14 = *(unsigned __int8 *)(v184 + v185++);
        if (!v13)
          goto LABEL_163;
      }
      else
      {
        std::istream::read();
        v14 = 0;
        if (!v13)
        {
LABEL_163:
          turi::dense_bitset::dense_bitset((turi::dense_bitset *)&v190, *(_QWORD *)(a1 + 24));
          v97 = v191;
          locale = v190.__locale_;
          if (v191 >= 1)
          {
            bzero(v190.__locale_, 8 * (v191 - ((v191 & 0x1FFFFFFFFFFFFFFFLL) != 0)) + 8);
            v97 = v191;
          }
          v99 = 8 * v97;
          if (v184)
          {
            memcpy(locale, (const void *)(v184 + v185), v99);
            v185 += v99;
          }
          else
          {
            std::istream::read();
          }
          v188 = turi::dense_bitset::begin((turi::dense_bitset *)&v190);
          v189 = v100;
          while (1)
          {
            if (v189 != &v190)
              turi::dense_bitset::bit_pos_iterator::operator!=(turi::dense_bitset::bit_pos_iterator const&)const::{lambda(void)#1}::operator()();
            if (v188 == -1)
              break;
            v101 = *a4 + 16 * v188;
            switch(*(_BYTE *)(v101 + 12))
            {
              case 2:
                v102 = *(unint64_t **)v101;
                do
                {
                  v103 = __ldaxr(v102);
                  v104 = v103 - 1;
                }
                while (__stlxr(v104, v102));
                if (!v104)
                {
                  v105 = *(unint64_t **)v101;
                  if (!*(_QWORD *)v101)
                    goto LABEL_213;
                  if (*((char *)v105 + 31) < 0)
                    operator delete((void *)v105[1]);
                  v106 = v105;
                  v107 = 0x1012C404EF22A49;
                  goto LABEL_212;
                }
                break;
              case 3:
                v119 = *(unint64_t **)v101;
                do
                {
                  v120 = __ldaxr(v119);
                  v121 = v120 - 1;
                }
                while (__stlxr(v121, v119));
                if (!v121)
                {
                  v122 = *(unint64_t **)v101;
                  if (!*(_QWORD *)v101)
                    goto LABEL_213;
                  v123 = (void *)v122[1];
                  if (v123)
                  {
                    v122[2] = (unint64_t)v123;
                    operator delete(v123);
                  }
                  v106 = v122;
                  v107 = 0x1080C409938AC02;
                  goto LABEL_212;
                }
                break;
              case 4:
                v108 = *(unint64_t **)v101;
                do
                {
                  v109 = __ldaxr(v108);
                  v110 = v109 - 1;
                }
                while (__stlxr(v110, v108));
                if (!v110)
                {
                  v111 = *(unint64_t **)v101;
                  if (!*(_QWORD *)v101)
                    goto LABEL_213;
                  v187 = (void **)(v111 + 1);
                  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v187);
                  goto LABEL_205;
                }
                break;
              case 5:
                v124 = *(unint64_t **)v101;
                do
                {
                  v125 = __ldaxr(v124);
                  v126 = v125 - 1;
                }
                while (__stlxr(v126, v124));
                if (!v126)
                {
                  v111 = *(unint64_t **)v101;
                  if (!*(_QWORD *)v101)
                    goto LABEL_213;
                  v187 = (void **)(v111 + 1);
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v187);
LABEL_205:
                  v106 = v111;
                  v107 = 0x1020C405E66F15BLL;
                  goto LABEL_212;
                }
                break;
              case 8:
                v127 = *(unint64_t **)v101;
                do
                {
                  v128 = __ldaxr(v127);
                  v129 = v128 - 1;
                }
                while (__stlxr(v129, v127));
                if (!v129)
                {
                  v130 = *(unint64_t **)v101;
                  if (!*(_QWORD *)v101)
                    goto LABEL_213;
                  boost::detail::shared_count::~shared_count((unsigned int **)v130 + 2);
                  v106 = v130;
                  v118 = -235920773;
                  goto LABEL_211;
                }
                break;
              case 9:
                v112 = *(unint64_t **)v101;
                do
                {
                  v113 = __ldaxr(v112);
                  v114 = v113 - 1;
                }
                while (__stlxr(v114, v112));
                if (!v114)
                {
                  v115 = *(unint64_t **)v101;
                  if (*(_QWORD *)v101)
                  {
                    v116 = (void *)v115[6];
                    if (v116)
                    {
                      v115[7] = (unint64_t)v116;
                      operator delete(v116);
                    }
                    v117 = (void *)v115[3];
                    if (v117)
                    {
                      v115[4] = (unint64_t)v117;
                      operator delete(v117);
                    }
                    std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v115 + 1));
                    v106 = v115;
                    v118 = 2071181815;
LABEL_211:
                    v107 = v118 | 0x1030C4000000000;
LABEL_212:
                    MEMORY[0x219A19A08](v106, v107);
                  }
LABEL_213:
                  *(_QWORD *)v101 = 0;
                }
                break;
              default:
                break;
            }
            *(_QWORD *)v101 = 0;
            *(_DWORD *)(v101 + 8) = 0;
            *(_BYTE *)(v101 + 12) = 7;
            turi::dense_bitset::bit_pos_iterator::operator++(&v188);
          }
          v131 = v191;
          v63 = 0;
          if (v191)
          {
            v132 = v190.__locale_;
            do
            {
              v133 = *(int8x8_t *)v132;
              v132 = (std::locale::__imp *)((char *)v132 + 8);
              v134 = (uint8x8_t)vcnt_s8(v133);
              v134.i16[0] = vaddlv_u8(v134);
              v63 += v134.u32[0];
              --v131;
            }
            while (v131);
          }
          free(v190.__locale_);
LABEL_219:
          switch(v14)
          {
            case 0:
              turi::v2_block_impl::decode_number((turi::iarchive *)v183, a4, v63);
              break;
            case 1:
              if ((*(_BYTE *)(a1 + 32) & 8) != 0)
                turi::v2_block_impl::decode_double((turi::iarchive *)v183, a4, v63);
              else
                turi::v2_block_impl::decode_double_legacy((turi::iarchive *)v183, a4, v63);
              break;
            case 2:
              LODWORD(v190.__locale_) = 0;
              LOBYTE(v191) = 0;
              *(_QWORD *)&v193 = 0;
              v192 = 0uLL;
              *(_QWORD *)((char *)v195 + 13) = 0x200000000000000;
              v194 = 0u;
              v195[0] = 0u;
              v175 = (_QWORD *)operator new();
              *v175 = 0;
              v175[2] = 0;
              v175[3] = 0;
              v175[1] = 0;
              *((_QWORD *)&v195[0] + 1) = v175;
              *v175 = 1;
              v176 = (a4[1] - *a4) >> 4;
              v188 = *a4;
              v189 = (std::locale *)v176;
              turi::v2_block_impl::decode_string_stream::read((int *)&v190, v176 - v63, (turi::iarchive *)v183, &v188, 0);
              turi::v2_block_impl::decode_string_stream::~decode_string_stream((turi::v2_block_impl::decode_string_stream *)&v190);
              break;
            case 3:
              v177 = *(_QWORD *)(a1 + 32);
              LODWORD(v190.__locale_) = 0;
              *(_QWORD *)((char *)&v195[1] + 13) = 0x300000000000000;
              v192 = 0u;
              v193 = 0u;
              v194 = 0u;
              memset(v195, 0, 29);
              v178 = (_QWORD *)operator new();
              *v178 = 0;
              v178[2] = 0;
              v178[3] = 0;
              v178[1] = 0;
              *((_QWORD *)&v195[1] + 1) = v178;
              *v178 = 1;
              v179 = (a4[1] - *a4) >> 4;
              v188 = *a4;
              v189 = (std::locale *)v179;
              turi::v2_block_impl::decode_vector_stream::read((uint64_t)&v190, v179 - v63, (turi::iarchive *)v183, &v188, 0, (v177 >> 3) & 1);
              turi::v2_block_impl::decode_vector_stream::~decode_vector_stream((turi::v2_block_impl::decode_vector_stream *)&v190);
              break;
            case 9:
              LODWORD(v190.__locale_) = 0;
              v197 = 0;
              v198 = 0;
              v192 = 0u;
              v193 = 0u;
              v194 = 0u;
              memset(v195, 0, sizeof(v195));
              v196 = 0;
              v180 = (a4[1] - *a4) >> 4;
              v188 = *a4;
              v189 = (std::locale *)v180;
              turi::v2_block_impl::decode_ndvector_stream::read((uint64_t)&v190, v180 - v63, (turi::iarchive *)v183, &v188, 0);
              turi::v2_block_impl::decode_ndvector_stream::~decode_ndvector_stream((turi::v2_block_impl::decode_ndvector_stream *)&v190);
              break;
            default:
              if (v13)
              {
                v135 = 0;
                while (2)
                {
                  v136 = (_QWORD **)(*a4 + 16 * v135);
                  switch(*((_BYTE *)v136 + 12))
                  {
                    case 0:
                    case 1:
                      if (!v184)
                        goto LABEL_272;
                      *v136 = *(_QWORD **)(v184 + v185);
                      v137 = v185 + 8;
                      goto LABEL_226;
                    case 2:
                      v149 = (uint64_t)*v136;
                      if (**v136 != 1)
                      {
                        v150 = (_QWORD *)operator new();
                        std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v150, (uint64_t)*v136);
                        *v136 = v150;
                        *v150 = 1;
                        do
                        {
                          v151 = __ldaxr((unint64_t *)v149);
                          v152 = v151 - 1;
                        }
                        while (__stlxr(v152, (unint64_t *)v149));
                        if (!v152)
                        {
                          if (*(char *)(v149 + 31) < 0)
                            operator delete(*(void **)(v149 + 8));
                          MEMORY[0x219A19A08](v149, 0x1012C404EF22A49);
                        }
                      }
                      turi::archive_detail::deserialize_impl<turi::iarchive,std::string,false,void>::exec((uint64_t)v183, (std::string *)(*v136 + 1));
                      goto LABEL_280;
                    case 3:
                      v138 = *v136;
                      if (**v136 != 1)
                      {
                        v139 = (_QWORD *)operator new();
                        std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v139, (uint64_t)*v136);
                        *v136 = v139;
                        *v139 = 1;
                        do
                        {
                          v140 = __ldaxr(v138);
                          v141 = v140 - 1;
                        }
                        while (__stlxr(v141, v138));
                        if (!v141)
                        {
                          v142 = (void *)v138[1];
                          if (v142)
                          {
                            v138[2] = (unint64_t)v142;
                            operator delete(v142);
                          }
                          MEMORY[0x219A19A08](v138, 0x1080C409938AC02);
                        }
                      }
                      turi::archive_detail::vector_deserialize_impl<turi::iarchive,double,true>::exec((uint64_t)v183, *v136 + 1);
                      goto LABEL_280;
                    case 4:
                      v153 = *v136;
                      if (**v136 != 1)
                      {
                        v154 = (_QWORD *)operator new();
                        std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v154, (uint64_t)*v136);
                        *v136 = v154;
                        *v154 = 1;
                        do
                        {
                          v155 = __ldaxr(v153);
                          v156 = v155 - 1;
                        }
                        while (__stlxr(v156, v153));
                        if (!v156)
                        {
                          v190.__locale_ = (std::locale::__imp *)(v153 + 1);
                          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v190);
                          MEMORY[0x219A19A08](v153, 0x1020C405E66F15BLL);
                        }
                      }
                      turi::archive_detail::vector_deserialize_impl<turi::iarchive,turi::flexible_type,false>::exec((turi::iarchive *)v183, *v136 + 1);
                      goto LABEL_280;
                    case 5:
                      v157 = *v136;
                      if (**v136 != 1)
                      {
                        v158 = (_QWORD *)operator new();
                        std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v158, (uint64_t)*v136);
                        *v136 = v158;
                        *v158 = 1;
                        do
                        {
                          v159 = __ldaxr(v157);
                          v160 = v159 - 1;
                        }
                        while (__stlxr(v160, v157));
                        if (!v160)
                        {
                          v190.__locale_ = (std::locale::__imp *)(v157 + 1);
                          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v190);
                          MEMORY[0x219A19A08](v157, 0x1020C405E66F15BLL);
                        }
                      }
                      turi::archive_detail::vector_deserialize_impl<turi::iarchive,std::pair<turi::flexible_type,turi::flexible_type>,false>::exec((turi::iarchive *)v183, *v136 + 1);
                      goto LABEL_280;
                    case 6:
                      if (v184)
                      {
                        *v136 = *(_QWORD **)(v184 + v185);
                        v185 += 8;
                      }
                      else
                      {
                        std::istream::read();
                      }
                      v171 = (uint64_t)*v136 >> 56;
                      if ((v171 + 24) > 0x30)
                      {
                        v174 = v136 + 1;
                        if (v184)
                        {
                          *v174 = *(_DWORD *)(v184 + v185);
                          v137 = v185 + 4;
LABEL_226:
                          v185 = v137;
                        }
                        else
                        {
LABEL_272:
                          std::istream::read();
                        }
                      }
                      else
                      {
                        v172 = 2 * v171;
                        if ((2 * v171 - 49) <= 0xFFFFFF9E)
                          turi::flex_date_time::set_time_zone_offset(int)::{lambda(void)#1}::operator()();
                        if ((int)v171 >= 0)
                          v173 = 25;
                        else
                          v173 = -25;
                        *v136 = (_QWORD *)((unint64_t)*v136 & 0xFFFFFFFFFFFFFFLL | ((unint64_t)(v173 + v172) << 56));
                        *((_DWORD *)v136 + 2) = 0;
                      }
LABEL_280:
                      if (++v135 == v13)
                        goto LABEL_22;
                      continue;
                    case 7:
                      goto LABEL_280;
                    case 8:
                      v161 = (uint64_t)*v136;
                      if (**v136 != 1)
                      {
                        v162 = operator new();
                        v163 = (uint64_t)*v136;
                        *(_QWORD *)v162 = **v136;
                        *(_QWORD *)(v162 + 8) = *(_QWORD *)(v163 + 8);
                        v164 = *(_QWORD *)(v163 + 16);
                        *(_QWORD *)(v162 + 16) = v164;
                        if (v164)
                        {
                          v165 = (unsigned int *)(v164 + 8);
                          do
                            v166 = __ldxr(v165);
                          while (__stxr(v166 + 1, v165));
                        }
                        v167 = *(_OWORD *)(v163 + 24);
                        v168 = *(_OWORD *)(v163 + 40);
                        *(_OWORD *)(v162 + 56) = *(_OWORD *)(v163 + 56);
                        *(_OWORD *)(v162 + 40) = v168;
                        *(_OWORD *)(v162 + 24) = v167;
                        *v136 = (_QWORD *)v162;
                        *(_QWORD *)v162 = 1;
                        do
                        {
                          v169 = __ldaxr((unint64_t *)v161);
                          v170 = v169 - 1;
                        }
                        while (__stlxr(v170, (unint64_t *)v161));
                        if (!v170)
                        {
                          boost::detail::shared_count::~shared_count((unsigned int **)(v161 + 16));
                          MEMORY[0x219A19A08](v161, 0x1030C40F1F0227BLL);
                        }
                      }
                      turi::image_type::load((turi::image_type *)(*v136 + 1), (turi::iarchive *)v183);
                      goto LABEL_280;
                    case 9:
                      v143 = *v136;
                      if (**v136 != 1)
                      {
                        v144 = (_QWORD *)operator new();
                        v145 = (uint64_t)(*v136 + 1);
                        *v144 = **v136;
                        turi::flexible_type_impl::ndarray<double>::ndarray(v144 + 1, v145);
                        *v136 = v144;
                        *v144 = 1;
                        do
                        {
                          v146 = __ldaxr(v143);
                          v147 = v146 - 1;
                        }
                        while (__stlxr(v147, v143));
                        if (!v147)
                        {
                          v148 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v143);
                          MEMORY[0x219A19A08](v148, 0x1030C407B73B9F7);
                        }
                      }
                      turi::flexible_type_impl::ndarray<double>::load((uint64_t)(*v136 + 1), (uint64_t)v183);
                      goto LABEL_280;
                    default:
                      result = turi::flexible_type_fail(0);
                      __break(1u);
                      return result;
                  }
                }
              }
              break;
          }
LABEL_22:
          if (*(_QWORD *)(a1 + 24) == (a4[1] - *a4) >> 4)
            return 1;
          v15 = (int *)global_logger();
          if (v15[169] > 6)
            return 0;
          if (!cppipc::must_cancel((cppipc *)v15))
          {
            v16 = (file_logger *)global_logger();
            v17 = file_logger::start_stream(v16, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray_v2_type_encoding.cpp", "typed_decode", 571, 1);
            v18 = pthread_getspecific(*((_QWORD *)v17 + 74));
            if (v18 && *((_BYTE *)v18 + 280))
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18 + 2, (uint64_t)"Unexpected number of elements read. ", 36);
            v19 = pthread_getspecific(*((_QWORD *)v17 + 74));
            if (v19 && *((_BYTE *)v19 + 280))
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19 + 2, (uint64_t)"Read ", 5);
            v20 = file_logger::operator<<<unsigned long>((uint64_t)v17);
            v21 = pthread_getspecific(*(_QWORD *)(v20 + 592));
            if (v21 && *((_BYTE *)v21 + 280))
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21 + 2, (uint64_t)". Expecting ", 12);
            v22 = file_logger::operator<<<unsigned long long>(v20);
            v23 = pthread_getspecific(*(_QWORD *)(v22 + 592));
            if (!v23 || !v23[280])
              return 0;
            std::ios_base::getloc((const std::ios_base *)&v23[*(_QWORD *)(*((_QWORD *)v23 + 2) - 24) + 16]);
            v24 = std::locale::use_facet(&v190, MEMORY[0x24BEDB350]);
            ((void (*)(const std::locale::facet *, uint64_t))v24->__vftable[2].~facet_0)(v24, 10);
            std::locale::~locale(&v190);
            std::ostream::put();
            std::ostream::flush();
            file_logger::stream_flush((file_logger *)v22);
            goto LABEL_52;
          }
          goto LABEL_293;
        }
      }
      for (i = 0; i != v13; ++i)
      {
        v65 = *a4 + 16 * i;
        switch(*(_BYTE *)(v65 + 12))
        {
          case 2:
            v66 = *(unint64_t **)v65;
            do
            {
              v67 = __ldaxr(v66);
              v68 = v67 - 1;
            }
            while (__stlxr(v68, v66));
            if (!v68)
            {
              v69 = *(unint64_t **)v65;
              if (!*(_QWORD *)v65)
                goto LABEL_154;
              if (*((char *)v69 + 31) < 0)
                operator delete((void *)v69[1]);
              v70 = v69;
              v71 = 0x1012C404EF22A49;
              goto LABEL_153;
            }
            break;
          case 3:
            v83 = *(unint64_t **)v65;
            do
            {
              v84 = __ldaxr(v83);
              v85 = v84 - 1;
            }
            while (__stlxr(v85, v83));
            if (!v85)
            {
              v86 = *(unint64_t **)v65;
              if (!*(_QWORD *)v65)
                goto LABEL_154;
              v87 = (void *)v86[1];
              if (v87)
              {
                v86[2] = (unint64_t)v87;
                operator delete(v87);
              }
              v70 = v86;
              v71 = 0x1080C409938AC02;
              goto LABEL_153;
            }
            break;
          case 4:
            v72 = *(unint64_t **)v65;
            do
            {
              v73 = __ldaxr(v72);
              v74 = v73 - 1;
            }
            while (__stlxr(v74, v72));
            if (!v74)
            {
              v75 = *(unint64_t **)v65;
              if (!*(_QWORD *)v65)
                goto LABEL_154;
              v190.__locale_ = (std::locale::__imp *)(v75 + 1);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v190);
              goto LABEL_146;
            }
            break;
          case 5:
            v88 = *(unint64_t **)v65;
            do
            {
              v89 = __ldaxr(v88);
              v90 = v89 - 1;
            }
            while (__stlxr(v90, v88));
            if (!v90)
            {
              v75 = *(unint64_t **)v65;
              if (!*(_QWORD *)v65)
                goto LABEL_154;
              v190.__locale_ = (std::locale::__imp *)(v75 + 1);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v190);
LABEL_146:
              v70 = v75;
              v71 = 0x1020C405E66F15BLL;
              goto LABEL_153;
            }
            break;
          case 8:
            v91 = *(unint64_t **)v65;
            do
            {
              v92 = __ldaxr(v91);
              v93 = v92 - 1;
            }
            while (__stlxr(v93, v91));
            if (!v93)
            {
              v94 = *(unint64_t **)v65;
              if (!*(_QWORD *)v65)
                goto LABEL_154;
              boost::detail::shared_count::~shared_count((unsigned int **)v94 + 2);
              v70 = v94;
              v82 = -235920773;
              goto LABEL_152;
            }
            break;
          case 9:
            v76 = *(unint64_t **)v65;
            do
            {
              v77 = __ldaxr(v76);
              v78 = v77 - 1;
            }
            while (__stlxr(v78, v76));
            if (!v78)
            {
              v79 = *(unint64_t **)v65;
              if (*(_QWORD *)v65)
              {
                v80 = (void *)v79[6];
                if (v80)
                {
                  v79[7] = (unint64_t)v80;
                  operator delete(v80);
                }
                v81 = (void *)v79[3];
                if (v81)
                {
                  v79[4] = (unint64_t)v81;
                  operator delete(v81);
                }
                std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v79 + 1));
                v70 = v79;
                v82 = 2071181815;
LABEL_152:
                v71 = v82 | 0x1030C4000000000;
LABEL_153:
                MEMORY[0x219A19A08](v70, v71);
              }
LABEL_154:
              *(_QWORD *)v65 = 0;
            }
            break;
          default:
            break;
        }
        *(_QWORD *)v65 = 0;
        *(_DWORD *)(v65 + 8) = 0;
        *(_BYTE *)(v65 + 12) = v14;
        switch(v14)
        {
          case 2:
          case 3:
          case 4:
          case 5:
            v95 = operator new();
            *(_QWORD *)v95 = 0;
            *(_QWORD *)(v95 + 16) = 0;
            *(_QWORD *)(v95 + 24) = 0;
            *(_QWORD *)(v95 + 8) = 0;
            goto LABEL_159;
          case 6:
            *(_QWORD *)v65 = 0x1900000000000000;
            *(_DWORD *)(v65 + 8) = 0;
            break;
          case 8:
            v95 = operator new();
            *(_QWORD *)v95 = 0;
            *(_OWORD *)(v95 + 8) = 0u;
            *(_OWORD *)(v95 + 24) = 0u;
            *(_OWORD *)(v95 + 40) = 0u;
            *(_QWORD *)(v95 + 56) = 0;
            *(_QWORD *)(v95 + 64) = 3;
LABEL_159:
            *(_QWORD *)v65 = v95;
            *(_QWORD *)v95 = 1;
            break;
          case 9:
            v96 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::pair[abi:ne180100]<true,0>(v96);
            *(_QWORD *)v65 = v96;
            *v96 = 1;
            break;
          default:
            continue;
        }
      }
      goto LABEL_163;
    }
    LOBYTE(v188) = 0;
    if (v184)
    {
      v14 = *(unsigned __int8 *)(v184 + v185);
      LOBYTE(v188) = *(_BYTE *)(v184 + v185++);
      if (!v13)
        goto LABEL_108;
    }
    else
    {
      std::istream::read();
      v14 = v188;
      if (!v13)
      {
LABEL_108:
        if (v14 == 7)
          return 1;
        v63 = 0;
        goto LABEL_219;
      }
    }
    for (j = 0; j != v13; ++j)
    {
      v31 = *a4 + 16 * j;
      switch(*(_BYTE *)(v31 + 12))
      {
        case 2:
          v32 = *(unint64_t **)v31;
          do
          {
            v33 = __ldaxr(v32);
            v34 = v33 - 1;
          }
          while (__stlxr(v34, v32));
          if (!v34)
          {
            v35 = *(unint64_t **)v31;
            if (!*(_QWORD *)v31)
              goto LABEL_99;
            if (*((char *)v35 + 31) < 0)
              operator delete((void *)v35[1]);
            v36 = v35;
            v37 = 0x1012C404EF22A49;
            goto LABEL_98;
          }
          break;
        case 3:
          v49 = *(unint64_t **)v31;
          do
          {
            v50 = __ldaxr(v49);
            v51 = v50 - 1;
          }
          while (__stlxr(v51, v49));
          if (!v51)
          {
            v52 = *(unint64_t **)v31;
            if (!*(_QWORD *)v31)
              goto LABEL_99;
            v53 = (void *)v52[1];
            if (v53)
            {
              v52[2] = (unint64_t)v53;
              operator delete(v53);
            }
            v36 = v52;
            v37 = 0x1080C409938AC02;
            goto LABEL_98;
          }
          break;
        case 4:
          v38 = *(unint64_t **)v31;
          do
          {
            v39 = __ldaxr(v38);
            v40 = v39 - 1;
          }
          while (__stlxr(v40, v38));
          if (!v40)
          {
            v41 = *(unint64_t **)v31;
            if (!*(_QWORD *)v31)
              goto LABEL_99;
            v190.__locale_ = (std::locale::__imp *)(v41 + 1);
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v190);
            goto LABEL_91;
          }
          break;
        case 5:
          v54 = *(unint64_t **)v31;
          do
          {
            v55 = __ldaxr(v54);
            v56 = v55 - 1;
          }
          while (__stlxr(v56, v54));
          if (!v56)
          {
            v41 = *(unint64_t **)v31;
            if (!*(_QWORD *)v31)
              goto LABEL_99;
            v190.__locale_ = (std::locale::__imp *)(v41 + 1);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v190);
LABEL_91:
            v36 = v41;
            v37 = 0x1020C405E66F15BLL;
            goto LABEL_98;
          }
          break;
        case 8:
          v57 = *(unint64_t **)v31;
          do
          {
            v58 = __ldaxr(v57);
            v59 = v58 - 1;
          }
          while (__stlxr(v59, v57));
          if (!v59)
          {
            v60 = *(unint64_t **)v31;
            if (!*(_QWORD *)v31)
              goto LABEL_99;
            boost::detail::shared_count::~shared_count((unsigned int **)v60 + 2);
            v36 = v60;
            v48 = -235920773;
            goto LABEL_97;
          }
          break;
        case 9:
          v42 = *(unint64_t **)v31;
          do
          {
            v43 = __ldaxr(v42);
            v44 = v43 - 1;
          }
          while (__stlxr(v44, v42));
          if (!v44)
          {
            v45 = *(unint64_t **)v31;
            if (*(_QWORD *)v31)
            {
              v46 = (void *)v45[6];
              if (v46)
              {
                v45[7] = (unint64_t)v46;
                operator delete(v46);
              }
              v47 = (void *)v45[3];
              if (v47)
              {
                v45[4] = (unint64_t)v47;
                operator delete(v47);
              }
              std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v45 + 1));
              v36 = v45;
              v48 = 2071181815;
LABEL_97:
              v37 = v48 | 0x1030C4000000000;
LABEL_98:
              MEMORY[0x219A19A08](v36, v37);
            }
LABEL_99:
            *(_QWORD *)v31 = 0;
          }
          break;
        default:
          break;
      }
      *(_QWORD *)v31 = 0;
      *(_DWORD *)(v31 + 8) = 0;
      *(_BYTE *)(v31 + 12) = v14;
      switch(v14)
      {
        case 2:
        case 3:
        case 4:
        case 5:
          v61 = operator new();
          *(_QWORD *)v61 = 0;
          *(_QWORD *)(v61 + 16) = 0;
          *(_QWORD *)(v61 + 24) = 0;
          *(_QWORD *)(v61 + 8) = 0;
          goto LABEL_104;
        case 6:
          *(_QWORD *)v31 = 0x1900000000000000;
          *(_DWORD *)(v31 + 8) = 0;
          break;
        case 8:
          v61 = operator new();
          *(_QWORD *)v61 = 0;
          *(_OWORD *)(v61 + 8) = 0u;
          *(_OWORD *)(v61 + 24) = 0u;
          *(_OWORD *)(v61 + 40) = 0u;
          *(_QWORD *)(v61 + 56) = 0;
          *(_QWORD *)(v61 + 64) = 3;
LABEL_104:
          *(_QWORD *)v31 = v61;
          *(_QWORD *)v61 = 1;
          break;
        case 9:
          v62 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::pair[abi:ne180100]<true,0>(v62);
          *(_QWORD *)v31 = v62;
          *v62 = 1;
          break;
        default:
          continue;
      }
    }
    goto LABEL_108;
  }
  v4 = (int *)global_logger();
  if (v4[169] > 6)
    return 0;
  if (cppipc::must_cancel((cppipc *)v4))
    log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
  v5 = (file_logger *)global_logger();
  v6 = file_logger::start_stream(v5, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray_v2_type_encoding.cpp", "typed_decode", 490, 1);
  v7 = pthread_getspecific(*((_QWORD *)v6 + 74));
  if (v7 && *((_BYTE *)v7 + 280))
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7 + 2, (uint64_t)"Attempting to decode a non-typed block", 38);
  result = (uint64_t)pthread_getspecific(*((_QWORD *)v6 + 74));
  if (result)
  {
    if (*(_BYTE *)(result + 280))
    {
      std::ios_base::getloc((const std::ios_base *)(result + 16 + *(_QWORD *)(*(_QWORD *)(result + 16) - 24)));
      v9 = std::locale::use_facet(&v190, MEMORY[0x24BEDB350]);
      ((void (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
      std::locale::~locale(&v190);
      std::ostream::put();
      std::ostream::flush();
      file_logger::stream_flush(v6);
      if (*((_DWORD *)v6 + 150) == 7)
      {
        __print_back_trace();
        v10 = __cxa_allocate_exception(8uLL);
        *v10 = "LOG_FATAL encountered";
        __cxa_throw(v10, MEMORY[0x24BEDB718], 0);
      }
    }
    return 0;
  }
  return result;
}

void sub_218196A68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::locale a19)
{
  uint64_t v19;

  MEMORY[0x219A19A08](v19, 0x1012C404EF22A49);
  _Unwind_Resume(a1);
}

unint64_t turi::dense_bitset::begin(turi::dense_bitset *this)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t result;

  v2 = *((_QWORD *)this + 2);
  if (!v2)
    return -1;
  v3 = 0;
  v4 = *(unint64_t **)this;
  while (1)
  {
    v6 = *v4++;
    v5 = v6;
    if (v6)
      break;
    v3 -= 64;
    if (!--v2)
      return -1;
  }
  result = __clz(__rbit64(v5)) - v3;
  if (result >= *((_QWORD *)this + 1))
    return -1;
  return result;
}

unint64_t turi::dense_bitset::bit_pos_iterator::operator++(unint64_t *a1)
{
  _QWORD *v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v1 = (_QWORD *)a1[1];
  v2 = *a1 >> 6;
  v3 = *(_QWORD *)(*v1 + 8 * v2) & ~(0xFFFFFFFFFFFFFFFFLL >> ~*a1);
  if (!v3)
  {
    v5 = v2 << 6;
    v6 = v2 + 1;
    while (v6 < v1[2])
    {
      v7 = *(_QWORD *)(*v1 + 8 * v6);
      v5 += 64;
      ++v6;
      if (v7)
      {
        v4 = __clz(__rbit64(v7)) + v5;
        goto LABEL_7;
      }
    }
    goto LABEL_8;
  }
  v4 = __clz(__rbit64(v3)) | *a1 & 0xFFFFFFFFFFFFFFC0;
LABEL_7:
  *a1 = v4;
  if (v4 >= v1[1])
  {
LABEL_8:
    v4 = -1;
    *a1 = -1;
  }
  return v4;
}

uint64_t file_logger::operator<<<int>(uint64_t a1)
{
  _BYTE *v2;

  v2 = pthread_getspecific(*(_QWORD *)(a1 + 592));
  if (v2 && v2[280])
    std::ostream::operator<<();
  return a1;
}

uint64_t file_logger::operator<<<unsigned long long>(uint64_t a1)
{
  _BYTE *v2;

  v2 = pthread_getspecific(*(_QWORD *)(a1 + 592));
  if (v2 && v2[280])
    std::ostream::operator<<();
  return a1;
}

unint64_t turi::v2_block_impl::decode_number_stream::read(uint64_t a1, unint64_t a2, turi::iarchive *this, _QWORD *a4, unint64_t a5)
{
  unint64_t v9;
  int v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  unint64_t v15;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t *v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t *v30;
  void *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t *v42;
  unsigned int v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t *v47;
  void *v48;
  void *v49;
  void **v50;

  if (!*(_DWORD *)a1)
  {
    v9 = 0;
    goto LABEL_6;
  }
  if (*(_DWORD *)a1 != 745)
    return 0;
  v9 = 0;
  v10 = *(unsigned __int8 *)(a1 + 1056);
  do
  {
    while (1)
    {
      if (v10)
      {
        v13 = *(_QWORD *)(a1 + 1048) + 1;
        for (*(_QWORD *)(a1 + 1048) = v13; ; *(_QWORD *)(a1 + 1048) = 0)
        {
          v15 = *(_QWORD *)(a1 + 1040);
          if (v13 < v15)
            break;
          a2 = *(_QWORD *)(a1 + 1032) - v15;
LABEL_6:
          *(_QWORD *)(a1 + 1032) = a2;
          if (!a2)
          {
            v14 = 0;
            goto LABEL_13;
          }
          v11 = (uint64_t *)&turi::v2_block_impl::MAX_INTEGERS_PER_BLOCK;
          if (a2 <= 0x80)
            v11 = (uint64_t *)(a1 + 1032);
          v12 = *v11;
          *(_QWORD *)(a1 + 1040) = *v11;
          turi::integer_pack::frame_of_reference_decode_128<turi::iarchive>(this, v12, (_QWORD *)(a1 + 8));
          v13 = 0;
        }
      }
      *(_BYTE *)(a1 + 1056) = 0;
      if (!a5)
        break;
      v17 = *(_QWORD *)(a1 + 1048);
      v18 = *(_QWORD *)(a1 + 1040) - v17;
      if (a5 < v18)
        v18 = a5;
      if (v18)
      {
        *(_QWORD *)(a1 + 1048) = v17 + v18 - 1;
        a5 -= v18;
        v9 += v18;
        v10 = 1;
        *(_BYTE *)(a1 + 1056) = 1;
        if (!a5)
          goto LABEL_68;
      }
      else
      {
        v10 = 0;
      }
    }
    v10 = 0;
    v19 = *a4 + 16 * v9;
    if (*(_BYTE *)(v19 + 12) != 7)
    {
      v20 = *(_QWORD *)(a1 + 8 * *(_QWORD *)(a1 + 1048) + 8);
      switch(*(_BYTE *)(v19 + 12))
      {
        case 2:
          v21 = *(unint64_t **)v19;
          do
          {
            v22 = __ldaxr(v21);
            v23 = v22 - 1;
          }
          while (__stlxr(v23, v21));
          if (!v23)
          {
            v24 = *(unint64_t **)v19;
            if (!*(_QWORD *)v19)
              goto LABEL_65;
            if (*((char *)v24 + 31) < 0)
              operator delete((void *)v24[1]);
            v25 = v24;
            v26 = 0x1012C404EF22A49;
            goto LABEL_64;
          }
          break;
        case 3:
          v27 = *(unint64_t **)v19;
          do
          {
            v28 = __ldaxr(v27);
            v29 = v28 - 1;
          }
          while (__stlxr(v29, v27));
          if (!v29)
          {
            v30 = *(unint64_t **)v19;
            if (!*(_QWORD *)v19)
              goto LABEL_65;
            v31 = (void *)v30[1];
            if (v31)
            {
              v30[2] = (unint64_t)v31;
              operator delete(v31);
            }
            v25 = v30;
            v26 = 0x1080C409938AC02;
            goto LABEL_64;
          }
          break;
        case 4:
          v32 = *(unint64_t **)v19;
          do
          {
            v33 = __ldaxr(v32);
            v34 = v33 - 1;
          }
          while (__stlxr(v34, v32));
          if (!v34)
          {
            v35 = *(unint64_t **)v19;
            if (!*(_QWORD *)v19)
              goto LABEL_65;
            v50 = (void **)(v35 + 1);
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v50);
            goto LABEL_48;
          }
          break;
        case 5:
          v36 = *(unint64_t **)v19;
          do
          {
            v37 = __ldaxr(v36);
            v38 = v37 - 1;
          }
          while (__stlxr(v38, v36));
          if (!v38)
          {
            v35 = *(unint64_t **)v19;
            if (!*(_QWORD *)v19)
              goto LABEL_65;
            v50 = (void **)(v35 + 1);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v50);
LABEL_48:
            v25 = v35;
            v26 = 0x1020C405E66F15BLL;
            goto LABEL_64;
          }
          break;
        case 8:
          v39 = *(unint64_t **)v19;
          do
          {
            v40 = __ldaxr(v39);
            v41 = v40 - 1;
          }
          while (__stlxr(v41, v39));
          if (!v41)
          {
            v42 = *(unint64_t **)v19;
            if (!*(_QWORD *)v19)
              goto LABEL_65;
            boost::detail::shared_count::~shared_count((unsigned int **)v42 + 2);
            v25 = v42;
            v43 = -235920773;
            goto LABEL_63;
          }
          break;
        case 9:
          v44 = *(unint64_t **)v19;
          do
          {
            v45 = __ldaxr(v44);
            v46 = v45 - 1;
          }
          while (__stlxr(v46, v44));
          if (!v46)
          {
            v47 = *(unint64_t **)v19;
            if (*(_QWORD *)v19)
            {
              v48 = (void *)v47[6];
              if (v48)
              {
                v47[7] = (unint64_t)v48;
                operator delete(v48);
              }
              v49 = (void *)v47[3];
              if (v49)
              {
                v47[4] = (unint64_t)v49;
                operator delete(v49);
              }
              std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v47 + 1));
              v25 = v47;
              v43 = 2071181815;
LABEL_63:
              v26 = v43 | 0x1030C4000000000;
LABEL_64:
              MEMORY[0x219A19A08](v25, v26);
            }
LABEL_65:
            *(_QWORD *)v19 = 0;
          }
          break;
        default:
          break;
      }
      *(_QWORD *)v19 = v20;
      *(_DWORD *)(v19 + 8) = 0;
      *(_BYTE *)(v19 + 12) = 0;
      v10 = 1;
      *(_BYTE *)(a1 + 1056) = 1;
    }
    a5 = 0;
    ++v9;
LABEL_68:
    ;
  }
  while (v9 < a4[1]);
  v14 = 745;
LABEL_13:
  *(_DWORD *)a1 = v14;
  return v9;
}

BOOL turi::v2_block_impl::decode_double_stream_legacy::read(uint64_t a1, unint64_t a2, turi::iarchive *this, _QWORD *a4, unint64_t a5)
{
  unint64_t v9;
  int v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t *v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  void *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t *v40;
  unsigned int v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t *v45;
  void *v46;
  void *v47;
  uint64_t v48;
  BOOL v49;
  int v50;
  unint64_t *v52;
  unint64_t v53;
  BOOL v54;
  void **v56;

  if (!*(_DWORD *)a1)
  {
    v9 = 0;
    goto LABEL_6;
  }
  if (*(_DWORD *)a1 != 770)
  {
    v9 = 0;
    return v9 != 0;
  }
  v9 = 0;
  v10 = *(unsigned __int8 *)(a1 + 1072);
  do
  {
    while (1)
    {
      if (v10)
      {
        v13 = *(_QWORD *)(a1 + 1048) + 1;
        for (*(_QWORD *)(a1 + 1048) = v13; ; *(_QWORD *)(a1 + 1048) = 0)
        {
          v15 = *(_QWORD *)(a1 + 1040);
          if (v13 < v15)
            break;
          a2 = *(_QWORD *)(a1 + 8) - v15;
LABEL_6:
          *(_QWORD *)(a1 + 8) = a2;
          if (!a2)
          {
            v14 = 0;
            goto LABEL_80;
          }
          v11 = (uint64_t *)&turi::v2_block_impl::MAX_INTEGERS_PER_BLOCK;
          if (a2 <= 0x80)
            v11 = (uint64_t *)(a1 + 8);
          v12 = *v11;
          *(_QWORD *)(a1 + 1040) = *v11;
          turi::integer_pack::frame_of_reference_decode_128<turi::iarchive>(this, v12, (_QWORD *)(a1 + 16));
          v13 = 0;
        }
        *(_QWORD *)(a1 + 1056) = __ROR8__(*(_QWORD *)(a1 + 8 * v13 + 16), 1);
      }
      *(_BYTE *)(a1 + 1072) = 0;
      if (!a5)
        break;
      v16 = *(_QWORD *)(a1 + 1048);
      v17 = *(_QWORD *)(a1 + 1040) - v16;
      if (a5 < v17)
        v17 = a5;
      if (v17)
      {
        *(_QWORD *)(a1 + 1048) = v16 + v17 - 1;
        a5 -= v17;
        v9 += v17;
        v10 = 1;
        *(_BYTE *)(a1 + 1072) = 1;
        goto LABEL_73;
      }
      v10 = 0;
    }
    v10 = 0;
    v18 = *a4 + 16 * v9;
    if (*(_BYTE *)(v18 + 12) != 7)
    {
      if (a1 + 1056 != v18)
      {
        switch(*(_BYTE *)(v18 + 12))
        {
          case 2:
            v19 = *(unint64_t **)v18;
            do
            {
              v20 = __ldaxr(v19);
              v21 = v20 - 1;
            }
            while (__stlxr(v21, v19));
            if (!v21)
            {
              v22 = *(unint64_t **)v18;
              if (!*(_QWORD *)v18)
                goto LABEL_64;
              if (*((char *)v22 + 31) < 0)
                operator delete((void *)v22[1]);
              v23 = v22;
              v24 = 0x1012C404EF22A49;
              goto LABEL_63;
            }
            break;
          case 3:
            v25 = *(unint64_t **)v18;
            do
            {
              v26 = __ldaxr(v25);
              v27 = v26 - 1;
            }
            while (__stlxr(v27, v25));
            if (!v27)
            {
              v28 = *(unint64_t **)v18;
              if (!*(_QWORD *)v18)
                goto LABEL_64;
              v29 = (void *)v28[1];
              if (v29)
              {
                v28[2] = (unint64_t)v29;
                operator delete(v29);
              }
              v23 = v28;
              v24 = 0x1080C409938AC02;
              goto LABEL_63;
            }
            break;
          case 4:
            v30 = *(unint64_t **)v18;
            do
            {
              v31 = __ldaxr(v30);
              v32 = v31 - 1;
            }
            while (__stlxr(v32, v30));
            if (!v32)
            {
              v33 = *(unint64_t **)v18;
              if (!*(_QWORD *)v18)
                goto LABEL_64;
              v56 = (void **)(v33 + 1);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v56);
              goto LABEL_47;
            }
            break;
          case 5:
            v34 = *(unint64_t **)v18;
            do
            {
              v35 = __ldaxr(v34);
              v36 = v35 - 1;
            }
            while (__stlxr(v36, v34));
            if (!v36)
            {
              v33 = *(unint64_t **)v18;
              if (!*(_QWORD *)v18)
                goto LABEL_64;
              v56 = (void **)(v33 + 1);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v56);
LABEL_47:
              v23 = v33;
              v24 = 0x1020C405E66F15BLL;
              goto LABEL_63;
            }
            break;
          case 8:
            v37 = *(unint64_t **)v18;
            do
            {
              v38 = __ldaxr(v37);
              v39 = v38 - 1;
            }
            while (__stlxr(v39, v37));
            if (!v39)
            {
              v40 = *(unint64_t **)v18;
              if (!*(_QWORD *)v18)
                goto LABEL_64;
              boost::detail::shared_count::~shared_count((unsigned int **)v40 + 2);
              v23 = v40;
              v41 = -235920773;
              goto LABEL_62;
            }
            break;
          case 9:
            v42 = *(unint64_t **)v18;
            do
            {
              v43 = __ldaxr(v42);
              v44 = v43 - 1;
            }
            while (__stlxr(v44, v42));
            if (!v44)
            {
              v45 = *(unint64_t **)v18;
              if (*(_QWORD *)v18)
              {
                v46 = (void *)v45[6];
                if (v46)
                {
                  v45[7] = (unint64_t)v46;
                  operator delete(v46);
                }
                v47 = (void *)v45[3];
                if (v47)
                {
                  v45[4] = (unint64_t)v47;
                  operator delete(v47);
                }
                std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v45 + 1));
                v23 = v45;
                v41 = 2071181815;
LABEL_62:
                v24 = v41 | 0x1030C4000000000;
LABEL_63:
                MEMORY[0x219A19A08](v23, v24);
              }
LABEL_64:
              *(_QWORD *)v18 = 0;
            }
            break;
          default:
            break;
        }
        v48 = *(_QWORD *)(a1 + 1056);
        *(_QWORD *)(v18 + 5) = *(_QWORD *)(a1 + 1061);
        *(_QWORD *)v18 = v48;
        LODWORD(v48) = *(unsigned __int8 *)(a1 + 1068);
        *(_BYTE *)(v18 + 12) = v48;
        v49 = v48 > 9;
        v50 = (1 << v48) & 0x33C;
        if (!v49 && v50 != 0)
        {
          v52 = *(unint64_t **)v18;
          do
            v53 = __ldaxr(v52);
          while (__stlxr(v53 + 1, v52));
        }
      }
      v10 = 1;
      *(_BYTE *)(a1 + 1072) = 1;
    }
    a5 = 0;
    ++v9;
LABEL_73:
    if (a5)
      v54 = 0;
    else
      v54 = v9 >= a4[1];
  }
  while (!v54);
  v14 = 770;
LABEL_80:
  *(_DWORD *)a1 = v14;
  return v9 != 0;
}

BOOL turi::v2_block_impl::decode_double_stream::read(int *a1, uint64_t a2, turi::iarchive *this, _QWORD *a4, unint64_t a5)
{
  int v9;
  unint64_t v10;
  int v11;
  _BYTE *v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  _BOOL8 result;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  double v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t *v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t *v34;
  void *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t *v46;
  unsigned int v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t *v51;
  void *v52;
  void *v53;
  char v54;
  char *v55;

  v9 = *a1;
  if (!*a1)
  {
    *((_BYTE *)a1 + 16) = 0;
    v12 = a1 + 4;
    *((_QWORD *)a1 + 1) = a2;
    v13 = *((_QWORD *)this + 2);
    if (v13)
    {
      v14 = *(unsigned __int8 *)(v13 + *((_QWORD *)this + 3));
      *v12 = v14;
      ++*((_QWORD *)this + 3);
    }
    else
    {
      std::istream::read();
      v14 = *v12;
    }
    v54 = v14;
    if ((char)v14 >= 3)
    {
      v55 = &v54;
      turi::v2_block_impl::decode_double_stream::read(unsigned long,turi::iarchive &,std::pair<turi::flexible_type *,unsigned long> const&,unsigned long)::$_0::operator()(&v55);
    }
    if (v14)
    {
      if (v14 == 1)
      {
        v10 = 0;
        v15 = *((_QWORD *)a1 + 1);
        if (v15)
          goto LABEL_19;
        goto LABEL_25;
      }
LABEL_17:
      v10 = 0;
LABEL_25:
      *a1 = 0;
      return v10 != 0;
    }
LABEL_16:
    result = turi::v2_block_impl::decode_double_stream_legacy::read((uint64_t)(a1 + 6), *((_QWORD *)a1 + 1), this, a4, a5);
    *a1 = 794;
    return result;
  }
  if (v9 == 794)
  {
    if (!a1[6])
      goto LABEL_17;
    goto LABEL_16;
  }
  if (v9 != 801)
  {
    v10 = 0;
    return v10 != 0;
  }
  v10 = 0;
  v11 = *((unsigned __int8 *)a1 + 2144);
  do
  {
    while (1)
    {
      if (v11)
      {
        v19 = *((_QWORD *)a1 + 267) + 1;
        for (*((_QWORD *)a1 + 267) = v19; ; *((_QWORD *)a1 + 267) = 0)
        {
          v20 = *((_QWORD *)a1 + 266);
          if (v19 < v20)
            break;
          v15 = *((_QWORD *)a1 + 1) - v20;
          *((_QWORD *)a1 + 1) = v15;
          if (!v15)
            goto LABEL_25;
LABEL_19:
          if (v15 <= 0x80)
            v17 = (uint64_t *)(a1 + 2);
          else
            v17 = (uint64_t *)&turi::v2_block_impl::MAX_INTEGERS_PER_BLOCK;
          v18 = *v17;
          *((_QWORD *)a1 + 266) = *v17;
          turi::integer_pack::frame_of_reference_decode_128<turi::iarchive>(this, v18, (_QWORD *)a1 + 138);
          v19 = 0;
        }
      }
      *((_BYTE *)a1 + 2144) = 0;
      if (!a5)
        break;
      v21 = *((_QWORD *)a1 + 267);
      v22 = *((_QWORD *)a1 + 266) - v21;
      if (a5 < v22)
        v22 = a5;
      if (v22)
      {
        *((_QWORD *)a1 + 267) = v21 + v22 - 1;
        a5 -= v22;
        v10 += v22;
        v11 = 1;
        *((_BYTE *)a1 + 2144) = 1;
        if (!a5)
          goto LABEL_80;
      }
      else
      {
        v11 = 0;
      }
    }
    v11 = 0;
    v23 = *a4 + 16 * v10;
    if (*(_BYTE *)(v23 + 12) != 7)
    {
      v24 = (double)*(uint64_t *)&a1[2 * *((_QWORD *)a1 + 267) + 276];
      switch(*(_BYTE *)(v23 + 12))
      {
        case 2:
          v25 = *(unint64_t **)v23;
          do
          {
            v26 = __ldaxr(v25);
            v27 = v26 - 1;
          }
          while (__stlxr(v27, v25));
          if (!v27)
          {
            v28 = *(unint64_t **)v23;
            if (!*(_QWORD *)v23)
              goto LABEL_77;
            if (*((char *)v28 + 31) < 0)
              operator delete((void *)v28[1]);
            v29 = v28;
            v30 = 0x1012C404EF22A49;
            goto LABEL_76;
          }
          break;
        case 3:
          v31 = *(unint64_t **)v23;
          do
          {
            v32 = __ldaxr(v31);
            v33 = v32 - 1;
          }
          while (__stlxr(v33, v31));
          if (!v33)
          {
            v34 = *(unint64_t **)v23;
            if (!*(_QWORD *)v23)
              goto LABEL_77;
            v35 = (void *)v34[1];
            if (v35)
            {
              v34[2] = (unint64_t)v35;
              operator delete(v35);
            }
            v29 = v34;
            v30 = 0x1080C409938AC02;
            goto LABEL_76;
          }
          break;
        case 4:
          v36 = *(unint64_t **)v23;
          do
          {
            v37 = __ldaxr(v36);
            v38 = v37 - 1;
          }
          while (__stlxr(v38, v36));
          if (!v38)
          {
            v39 = *(unint64_t **)v23;
            if (!*(_QWORD *)v23)
              goto LABEL_77;
            v55 = (char *)(v39 + 1);
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v55);
            goto LABEL_60;
          }
          break;
        case 5:
          v40 = *(unint64_t **)v23;
          do
          {
            v41 = __ldaxr(v40);
            v42 = v41 - 1;
          }
          while (__stlxr(v42, v40));
          if (!v42)
          {
            v39 = *(unint64_t **)v23;
            if (!*(_QWORD *)v23)
              goto LABEL_77;
            v55 = (char *)(v39 + 1);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v55);
LABEL_60:
            v29 = v39;
            v30 = 0x1020C405E66F15BLL;
            goto LABEL_76;
          }
          break;
        case 8:
          v43 = *(unint64_t **)v23;
          do
          {
            v44 = __ldaxr(v43);
            v45 = v44 - 1;
          }
          while (__stlxr(v45, v43));
          if (!v45)
          {
            v46 = *(unint64_t **)v23;
            if (!*(_QWORD *)v23)
              goto LABEL_77;
            boost::detail::shared_count::~shared_count((unsigned int **)v46 + 2);
            v29 = v46;
            v47 = -235920773;
            goto LABEL_75;
          }
          break;
        case 9:
          v48 = *(unint64_t **)v23;
          do
          {
            v49 = __ldaxr(v48);
            v50 = v49 - 1;
          }
          while (__stlxr(v50, v48));
          if (!v50)
          {
            v51 = *(unint64_t **)v23;
            if (*(_QWORD *)v23)
            {
              v52 = (void *)v51[6];
              if (v52)
              {
                v51[7] = (unint64_t)v52;
                operator delete(v52);
              }
              v53 = (void *)v51[3];
              if (v53)
              {
                v51[4] = (unint64_t)v53;
                operator delete(v53);
              }
              std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v51 + 1));
              v29 = v51;
              v47 = 2071181815;
LABEL_75:
              v30 = v47 | 0x1030C4000000000;
LABEL_76:
              MEMORY[0x219A19A08](v29, v30);
            }
LABEL_77:
            *(_QWORD *)v23 = 0;
          }
          break;
        default:
          break;
      }
      *(double *)v23 = v24;
      *(_DWORD *)(v23 + 8) = 0;
      v11 = 1;
      *(_BYTE *)(v23 + 12) = 1;
      *((_BYTE *)a1 + 2144) = 1;
    }
    a5 = 0;
    ++v10;
LABEL_80:
    ;
  }
  while (v10 < a4[1]);
  *a1 = 801;
  return v10 != 0;
}

void turi::v2_block_impl::decode_double_stream::read(unsigned long,turi::iarchive &,std::pair<turi::flexible_type *,unsigned long> const&,unsigned long)::$_0::operator()(_BYTE **a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  file_logger *v15;
  _QWORD *v16;
  void *__p;
  char v18;
  _QWORD v19[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v19);
  v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Assertion failed: (", 19);
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray_v2_type_encoding.cpp", 118);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)":", 1);
  v4 = (_QWORD *)std::ostream::operator<<();
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"): ", 3);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"reserved", 8);
  v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"<", 1);
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"3", 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"  [", 3);
  LOBYTE(v16) = **a1;
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v16, 1);
  LOBYTE(v16) = 32;
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)&v16, 1);
  v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"<", 1);
  LOBYTE(v16) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v16, 1);
  v13 = (_QWORD *)std::ostream::operator<<();
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v14);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v15 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray_v2_type_encoding.cpp", "operator()", 790, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v15, (uint64_t)&__p);
    if (v18 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v16 = v19;
  turi::v2_block_impl::decode_double_stream::read(unsigned long,turi::iarchive &,std::pair<turi::flexible_type *,unsigned long> const&,unsigned long)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_21819799C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

BOOL turi::v2_block_impl::decode_string_stream::read(int *a1, unint64_t a2, turi::iarchive *a3, _QWORD *a4, unint64_t a5)
{
  int v9;
  unint64_t v10;
  int v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  std::string::size_type v15;
  _QWORD *v16;
  uint64_t v17;
  int v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  std::string::size_type v22;
  void *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  std::string::size_type v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unsigned int v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  std::string::size_type v38;
  _BYTE *v39;
  uint64_t v40;
  int v41;
  uint64_t *v42;
  uint64_t *i;
  size_t v44;
  std::string *v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  int v49;
  std::string::size_type v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  std::string *v55;
  __int128 v56;
  unint64_t *v57;
  _QWORD *v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  void *v62;
  unint64_t *v63;
  uint64_t v64;
  unint64_t *v65;
  _QWORD *v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int *v78;
  unsigned int v79;
  __int128 v80;
  __int128 v81;
  unint64_t v82;
  unint64_t v83;
  unsigned int v84;
  unint64_t *v85;
  _QWORD *v86;
  _QWORD *v87;
  unint64_t v88;
  unint64_t v89;
  void *v90;
  void *v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  std::string *v97;
  __int128 v98;
  unint64_t *v99;
  _QWORD *v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t *v104;
  _QWORD *v105;
  _QWORD *v106;
  unint64_t v107;
  unint64_t v108;
  void *v109;
  void *v110;
  unint64_t *v111;
  unsigned int v112;
  unint64_t *v113;
  _QWORD *v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  void *v118;
  uint64_t v119;
  _QWORD *v120;
  uint64_t v121;
  unint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unsigned int *v128;
  unsigned int v129;
  __int128 v130;
  __int128 v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t v134;
  unint64_t v135;
  uint64_t v136;
  _QWORD *v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t *v143;
  unint64_t v144;
  unint64_t v145;
  unint64_t *v146;
  unint64_t *v147;
  uint64_t v148;
  unint64_t *v149;
  unint64_t v150;
  unint64_t v151;
  unint64_t *v152;
  void *v153;
  unint64_t *v154;
  unint64_t v155;
  unint64_t v156;
  unint64_t *v157;
  unint64_t *v158;
  unint64_t v159;
  unint64_t v160;
  unint64_t *v161;
  unint64_t v162;
  unint64_t v163;
  unint64_t *v164;
  unsigned int v165;
  unint64_t *v166;
  unint64_t v167;
  unint64_t v168;
  unint64_t *v169;
  void *v170;
  void *v171;
  uint64_t v172;
  BOOL v173;
  int v174;
  unint64_t *v176;
  unint64_t v177;
  BOOL v178;
  uint64_t v179;
  unint64_t *v180;
  unint64_t v181;
  unint64_t v182;
  unint64_t *v183;
  unint64_t *v184;
  uint64_t v185;
  unint64_t *v186;
  unint64_t v187;
  unint64_t v188;
  unint64_t *v189;
  void *v190;
  unint64_t *v191;
  unint64_t v192;
  unint64_t v193;
  unint64_t *v194;
  unint64_t *v195;
  unint64_t v196;
  unint64_t v197;
  unint64_t *v198;
  unint64_t v199;
  unint64_t v200;
  unint64_t *v201;
  unsigned int v202;
  unint64_t *v203;
  unint64_t v204;
  unint64_t v205;
  unint64_t *v206;
  void *v207;
  void *v208;
  uint64_t v209;
  int v210;
  unint64_t *v212;
  unint64_t v213;
  std::string::size_type __n;
  std::string v215;
  uint64_t v216;

  v216 = *MEMORY[0x24BDAC8D0];
  v9 = *a1;
  if (!*a1)
  {
    *((_QWORD *)a1 + 1) = a2;
    *(std::string::size_type *)((char *)v215.__r_.__value_.__r.__words + 5) = 0;
    v215.__r_.__value_.__r.__words[0] = 0;
    std::vector<turi::flexible_type>::resize((uint64_t *)a1 + 3, a2, (uint64_t *)&v215);
    switch(v215.__r_.__value_.__s.__data_[12])
    {
      case 2:
        v12 = (unint64_t *)v215.__r_.__value_.__r.__words[0];
        do
        {
          v13 = __ldaxr(v12);
          v14 = v13 - 1;
        }
        while (__stlxr(v14, v12));
        if (!v14)
        {
          v15 = v215.__r_.__value_.__r.__words[0];
          if (v215.__r_.__value_.__r.__words[0])
          {
            if (*(char *)(v215.__r_.__value_.__r.__words[0] + 31) < 0)
              operator delete(*(void **)(v215.__r_.__value_.__r.__words[0] + 8));
            v16 = (_QWORD *)v15;
            v17 = 0x1012C404EF22A49;
            goto LABEL_44;
          }
        }
        break;
      case 3:
        v19 = (unint64_t *)v215.__r_.__value_.__r.__words[0];
        do
        {
          v20 = __ldaxr(v19);
          v21 = v20 - 1;
        }
        while (__stlxr(v21, v19));
        if (!v21)
        {
          v22 = v215.__r_.__value_.__r.__words[0];
          if (v215.__r_.__value_.__r.__words[0])
          {
            v23 = *(void **)(v215.__r_.__value_.__r.__words[0] + 8);
            if (v23)
            {
              *(_QWORD *)(v215.__r_.__value_.__r.__words[0] + 16) = v23;
              operator delete(v23);
            }
            v16 = (_QWORD *)v22;
            v17 = 0x1080C409938AC02;
            goto LABEL_44;
          }
        }
        break;
      case 4:
        v24 = (unint64_t *)v215.__r_.__value_.__r.__words[0];
        do
        {
          v25 = __ldaxr(v24);
          v26 = v25 - 1;
        }
        while (__stlxr(v26, v24));
        if (!v26)
        {
          v27 = v215.__r_.__value_.__r.__words[0];
          if (v215.__r_.__value_.__r.__words[0])
          {
            __n = v215.__r_.__value_.__r.__words[0] + 8;
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__n);
            goto LABEL_32;
          }
        }
        break;
      case 5:
        v28 = (unint64_t *)v215.__r_.__value_.__r.__words[0];
        do
        {
          v29 = __ldaxr(v28);
          v30 = v29 - 1;
        }
        while (__stlxr(v30, v28));
        if (!v30)
        {
          v27 = v215.__r_.__value_.__r.__words[0];
          if (v215.__r_.__value_.__r.__words[0])
          {
            __n = v215.__r_.__value_.__r.__words[0] + 8;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__n);
LABEL_32:
            v16 = (_QWORD *)v27;
            v17 = 0x1020C405E66F15BLL;
            goto LABEL_44;
          }
        }
        break;
      case 8:
        v35 = (unint64_t *)v215.__r_.__value_.__r.__words[0];
        do
        {
          v36 = __ldaxr(v35);
          v37 = v36 - 1;
        }
        while (__stlxr(v37, v35));
        if (!v37)
        {
          v38 = v215.__r_.__value_.__r.__words[0];
          if (v215.__r_.__value_.__r.__words[0])
          {
            boost::detail::shared_count::~shared_count((unsigned int **)(v215.__r_.__value_.__r.__words[0] + 16));
            v16 = (_QWORD *)v38;
            v34 = -235920773;
            goto LABEL_43;
          }
        }
        break;
      case 9:
        v31 = (unint64_t *)v215.__r_.__value_.__r.__words[0];
        do
        {
          v32 = __ldaxr(v31);
          v33 = v32 - 1;
        }
        while (__stlxr(v33, v31));
        if (!v33 && v215.__r_.__value_.__r.__words[0])
        {
          v16 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v215.__r_.__value_.__l.__data_);
          v34 = 2071181815;
LABEL_43:
          v17 = v34 | 0x1030C4000000000;
LABEL_44:
          MEMORY[0x219A19A08](v16, v17);
        }
        break;
      default:
        break;
    }
    v39 = a1 + 4;
    v40 = *((_QWORD *)a3 + 2);
    if (v40)
    {
      v41 = *(unsigned __int8 *)(v40 + *((_QWORD *)a3 + 3));
      *v39 = v41;
      ++*((_QWORD *)a3 + 3);
      if (v41)
      {
LABEL_47:
        turi::integer_pack::variable_decode<turi::iarchive>(a3, (_QWORD *)a1 + 6);
        std::vector<turi::flexible_type>::resize((uint64_t *)a1 + 7, *((_QWORD *)a1 + 6));
        v42 = (uint64_t *)*((_QWORD *)a1 + 7);
        for (i = (uint64_t *)*((_QWORD *)a1 + 8); v42 != i; v42 += 2)
        {
          memset(&v215, 0, sizeof(v215));
          __n = 0;
          turi::integer_pack::variable_decode<turi::iarchive>(a3, &__n);
          v44 = __n;
          std::string::resize(&v215, __n, 0);
          if ((v215.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v45 = &v215;
          else
            v45 = (std::string *)v215.__r_.__value_.__r.__words[0];
          v46 = *((_QWORD *)a3 + 2);
          if (v46)
          {
            memcpy(v45, (const void *)(v46 + *((_QWORD *)a3 + 3)), v44);
            *((_QWORD *)a3 + 3) += v44;
          }
          else
          {
            std::istream::read();
          }
          turi::flexible_type::operator=<std::string>(v42, (__int128 *)&v215);
          if (SHIBYTE(v215.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v215.__r_.__value_.__l.__data_);
        }
        turi::v2_block_impl::decode_number(a3, (uint64_t *)a1 + 3, 0);
        v47 = 0;
        v10 = 0;
        *((_QWORD *)a1 + 12) = 0;
        goto LABEL_60;
      }
    }
    else
    {
      std::istream::read();
      if (*v39)
        goto LABEL_47;
    }
    turi::v2_block_impl::decode_number(a3, (uint64_t *)a1 + 3, 0);
    v48 = 0;
    v10 = 0;
    *((_QWORD *)a1 + 12) = 0;
    goto LABEL_64;
  }
  if (v9 == 833)
  {
    v10 = 0;
    v18 = *((unsigned __int8 *)a1 + 104);
    while (1)
    {
      if (v18)
      {
        v47 = *((_QWORD *)a1 + 12) + 1;
        *((_QWORD *)a1 + 12) = v47;
LABEL_60:
        if (v47 >= *((_QWORD *)a1 + 1))
        {
LABEL_61:
          v49 = 0;
          goto LABEL_62;
        }
      }
      *((_BYTE *)a1 + 104) = 0;
      if (!a5)
        break;
      v139 = *((_QWORD *)a1 + 12);
      v140 = *((_QWORD *)a1 + 1) - v139;
      if (a5 < v140)
        v140 = a5;
      if (v140)
      {
        *((_QWORD *)a1 + 12) = v139 + v140 - 1;
        a5 -= v140;
        v10 += v140;
        v18 = 1;
        *((_BYTE *)a1 + 104) = 1;
LABEL_225:
        if (a5)
          v178 = 0;
        else
          v178 = v10 >= a4[1];
        if (v178)
        {
          v49 = 833;
          goto LABEL_62;
        }
      }
      else
      {
        v18 = 0;
      }
    }
    v18 = 0;
    v141 = *a4 + 16 * v10;
    if (*(_BYTE *)(v141 + 12) != 7)
    {
      v142 = *((_QWORD *)a1 + 7) + 16 * *(_QWORD *)(*((_QWORD *)a1 + 3) + 16 * *((_QWORD *)a1 + 12));
      if (v142 != v141)
      {
        switch(*(_BYTE *)(v141 + 12))
        {
          case 2:
            v143 = *(unint64_t **)v141;
            do
            {
              v144 = __ldaxr(v143);
              v145 = v144 - 1;
            }
            while (__stlxr(v145, v143));
            if (!v145)
            {
              v146 = *(unint64_t **)v141;
              if (!*(_QWORD *)v141)
                goto LABEL_216;
              if (*((char *)v146 + 31) < 0)
                operator delete((void *)v146[1]);
              v147 = v146;
              v148 = 0x1012C404EF22A49;
              goto LABEL_215;
            }
            break;
          case 3:
            v149 = *(unint64_t **)v141;
            do
            {
              v150 = __ldaxr(v149);
              v151 = v150 - 1;
            }
            while (__stlxr(v151, v149));
            if (!v151)
            {
              v152 = *(unint64_t **)v141;
              if (!*(_QWORD *)v141)
                goto LABEL_216;
              v153 = (void *)v152[1];
              if (v153)
              {
                v152[2] = (unint64_t)v153;
                operator delete(v153);
              }
              v147 = v152;
              v148 = 0x1080C409938AC02;
              goto LABEL_215;
            }
            break;
          case 4:
            v154 = *(unint64_t **)v141;
            do
            {
              v155 = __ldaxr(v154);
              v156 = v155 - 1;
            }
            while (__stlxr(v156, v154));
            if (!v156)
            {
              v157 = *(unint64_t **)v141;
              if (!*(_QWORD *)v141)
                goto LABEL_216;
              v215.__r_.__value_.__r.__words[0] = (std::string::size_type)(v157 + 1);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v215);
              goto LABEL_199;
            }
            break;
          case 5:
            v158 = *(unint64_t **)v141;
            do
            {
              v159 = __ldaxr(v158);
              v160 = v159 - 1;
            }
            while (__stlxr(v160, v158));
            if (!v160)
            {
              v157 = *(unint64_t **)v141;
              if (!*(_QWORD *)v141)
                goto LABEL_216;
              v215.__r_.__value_.__r.__words[0] = (std::string::size_type)(v157 + 1);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v215);
LABEL_199:
              v147 = v157;
              v148 = 0x1020C405E66F15BLL;
              goto LABEL_215;
            }
            break;
          case 8:
            v161 = *(unint64_t **)v141;
            do
            {
              v162 = __ldaxr(v161);
              v163 = v162 - 1;
            }
            while (__stlxr(v163, v161));
            if (!v163)
            {
              v164 = *(unint64_t **)v141;
              if (!*(_QWORD *)v141)
                goto LABEL_216;
              boost::detail::shared_count::~shared_count((unsigned int **)v164 + 2);
              v147 = v164;
              v165 = -235920773;
              goto LABEL_214;
            }
            break;
          case 9:
            v166 = *(unint64_t **)v141;
            do
            {
              v167 = __ldaxr(v166);
              v168 = v167 - 1;
            }
            while (__stlxr(v168, v166));
            if (!v168)
            {
              v169 = *(unint64_t **)v141;
              if (*(_QWORD *)v141)
              {
                v170 = (void *)v169[6];
                if (v170)
                {
                  v169[7] = (unint64_t)v170;
                  operator delete(v170);
                }
                v171 = (void *)v169[3];
                if (v171)
                {
                  v169[4] = (unint64_t)v171;
                  operator delete(v171);
                }
                std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v169 + 1));
                v147 = v169;
                v165 = 2071181815;
LABEL_214:
                v148 = v165 | 0x1030C4000000000;
LABEL_215:
                MEMORY[0x219A19A08](v147, v148);
              }
LABEL_216:
              *(_QWORD *)v141 = 0;
            }
            break;
          default:
            break;
        }
        v172 = *(_QWORD *)v142;
        *(_QWORD *)(v141 + 5) = *(_QWORD *)(v142 + 5);
        *(_QWORD *)v141 = v172;
        LODWORD(v172) = *(unsigned __int8 *)(v142 + 12);
        *(_BYTE *)(v141 + 12) = v172;
        v173 = v172 > 9;
        v174 = (1 << v172) & 0x33C;
        if (!v173 && v174 != 0)
        {
          v176 = *(unint64_t **)v141;
          do
            v177 = __ldaxr(v176);
          while (__stlxr(v177 + 1, v176));
        }
      }
      v18 = 1;
      *((_BYTE *)a1 + 104) = 1;
    }
    a5 = 0;
    ++v10;
    goto LABEL_225;
  }
  if (v9 != 844)
  {
    v10 = 0;
    return v10 != 0;
  }
  v10 = 0;
  v11 = *((unsigned __int8 *)a1 + 104);
  do
  {
    if (v11)
    {
      v48 = *((_QWORD *)a1 + 12) + 1;
      *((_QWORD *)a1 + 12) = v48;
LABEL_64:
      if (v48 >= *((_QWORD *)a1 + 1))
        goto LABEL_61;
      v51 = *(_QWORD *)(*((_QWORD *)a1 + 3) + 16 * v48);
      switch(*((_BYTE *)a1 + 92))
      {
        case 2:
          v52 = *((_QWORD *)a1 + 10);
          if (*(_QWORD *)v52 != 1)
          {
            v53 = (_QWORD *)operator new();
            v54 = *((_QWORD *)a1 + 10);
            *v53 = *(_QWORD *)v54;
            v55 = (std::string *)(v53 + 1);
            if (*(char *)(v54 + 31) < 0)
            {
              std::string::__init_copy_ctor_external(v55, *(const std::string::value_type **)(v54 + 8), *(_QWORD *)(v54 + 16));
            }
            else
            {
              v56 = *(_OWORD *)(v54 + 8);
              v53[3] = *(_QWORD *)(v54 + 24);
              *(_OWORD *)&v55->__r_.__value_.__l.__data_ = v56;
            }
            *((_QWORD *)a1 + 10) = v53;
            *v53 = 1;
            do
            {
              v92 = __ldaxr((unint64_t *)v52);
              v93 = v92 - 1;
            }
            while (__stlxr(v93, (unint64_t *)v52));
            if (!v93)
            {
              if (*(char *)(v52 + 31) < 0)
                operator delete(*(void **)(v52 + 8));
              v63 = (unint64_t *)v52;
              v64 = 0x1012C404EF22A49;
              goto LABEL_112;
            }
          }
          break;
        case 3:
          v57 = (unint64_t *)*((_QWORD *)a1 + 10);
          if (*v57 != 1)
          {
            v58 = (_QWORD *)operator new();
            v59 = *((_QWORD *)a1 + 10);
            *v58 = *(_QWORD *)v59;
            v58[2] = 0;
            v58[3] = 0;
            v58[1] = 0;
            std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v58 + 1, *(const void **)(v59 + 8), *(_QWORD *)(v59 + 16), (uint64_t)(*(_QWORD *)(v59 + 16) - *(_QWORD *)(v59 + 8)) >> 3);
            *((_QWORD *)a1 + 10) = v58;
            *v58 = 1;
            do
            {
              v60 = __ldaxr(v57);
              v61 = v60 - 1;
            }
            while (__stlxr(v61, v57));
            if (!v61)
            {
              v62 = (void *)v57[1];
              if (v62)
              {
                v57[2] = (unint64_t)v62;
                operator delete(v62);
              }
              v63 = v57;
              v64 = 0x1080C409938AC02;
              goto LABEL_112;
            }
          }
          break;
        case 4:
          v65 = (unint64_t *)*((_QWORD *)a1 + 10);
          if (*v65 != 1)
          {
            v66 = (_QWORD *)operator new();
            v67 = *((_QWORD *)a1 + 10);
            *v66 = *(_QWORD *)v67;
            v66[2] = 0;
            v66[3] = 0;
            v66[1] = 0;
            std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v66 + 1, *(uint64_t **)(v67 + 8), *(uint64_t **)(v67 + 16), (uint64_t)(*(_QWORD *)(v67 + 16) - *(_QWORD *)(v67 + 8)) >> 4);
            *((_QWORD *)a1 + 10) = v66;
            *v66 = 1;
            do
            {
              v68 = __ldaxr(v65);
              v69 = v68 - 1;
            }
            while (__stlxr(v69, v65));
            if (!v69)
            {
              v215.__r_.__value_.__r.__words[0] = (std::string::size_type)(v65 + 1);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v215);
              goto LABEL_86;
            }
          }
          break;
        case 5:
          v65 = (unint64_t *)*((_QWORD *)a1 + 10);
          if (*v65 != 1)
          {
            v70 = (_QWORD *)operator new();
            v71 = *((_QWORD *)a1 + 10);
            *v70 = *(_QWORD *)v71;
            v70[2] = 0;
            v70[3] = 0;
            v70[1] = 0;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v70 + 1, *(uint64_t **)(v71 + 8), *(uint64_t **)(v71 + 16), (uint64_t)(*(_QWORD *)(v71 + 16) - *(_QWORD *)(v71 + 8)) >> 5);
            *((_QWORD *)a1 + 10) = v70;
            *v70 = 1;
            do
            {
              v72 = __ldaxr(v65);
              v73 = v72 - 1;
            }
            while (__stlxr(v73, v65));
            if (!v73)
            {
              v215.__r_.__value_.__r.__words[0] = (std::string::size_type)(v65 + 1);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v215);
LABEL_86:
              v63 = v65;
              v64 = 0x1020C405E66F15BLL;
              goto LABEL_112;
            }
          }
          break;
        case 8:
          v74 = *((_QWORD *)a1 + 10);
          if (*(_QWORD *)v74 != 1)
          {
            v75 = operator new();
            v76 = *((_QWORD *)a1 + 10);
            *(_QWORD *)v75 = *(_QWORD *)v76;
            *(_QWORD *)(v75 + 8) = *(_QWORD *)(v76 + 8);
            v77 = *(_QWORD *)(v76 + 16);
            *(_QWORD *)(v75 + 16) = v77;
            if (v77)
            {
              v78 = (unsigned int *)(v77 + 8);
              do
                v79 = __ldxr(v78);
              while (__stxr(v79 + 1, v78));
            }
            v80 = *(_OWORD *)(v76 + 24);
            v81 = *(_OWORD *)(v76 + 40);
            *(_OWORD *)(v75 + 56) = *(_OWORD *)(v76 + 56);
            *(_OWORD *)(v75 + 40) = v81;
            *(_OWORD *)(v75 + 24) = v80;
            *((_QWORD *)a1 + 10) = v75;
            *(_QWORD *)v75 = 1;
            do
            {
              v82 = __ldaxr((unint64_t *)v74);
              v83 = v82 - 1;
            }
            while (__stlxr(v83, (unint64_t *)v74));
            if (!v83)
            {
              boost::detail::shared_count::~shared_count((unsigned int **)(v74 + 16));
              v63 = (unint64_t *)v74;
              v84 = -235920773;
              goto LABEL_104;
            }
          }
          break;
        case 9:
          v85 = (unint64_t *)*((_QWORD *)a1 + 10);
          if (*v85 != 1)
          {
            v86 = (_QWORD *)operator new();
            v87 = (_QWORD *)*((_QWORD *)a1 + 10);
            *v86 = *v87;
            turi::flexible_type_impl::ndarray<double>::ndarray(v86 + 1, (uint64_t)(v87 + 1));
            *((_QWORD *)a1 + 10) = v86;
            *v86 = 1;
            do
            {
              v88 = __ldaxr(v85);
              v89 = v88 - 1;
            }
            while (__stlxr(v89, v85));
            if (!v89)
            {
              v90 = (void *)v85[6];
              if (v90)
              {
                v85[7] = (unint64_t)v90;
                operator delete(v90);
              }
              v91 = (void *)v85[3];
              if (v91)
              {
                v85[4] = (unint64_t)v91;
                operator delete(v91);
              }
              std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v85 + 1));
              v63 = v85;
              v84 = 2071181815;
LABEL_104:
              v64 = v84 | 0x1030C4000000000;
LABEL_112:
              MEMORY[0x219A19A08](v63, v64);
            }
          }
          break;
        default:
          break;
      }
      std::string::resize((std::string *)(*((_QWORD *)a1 + 10) + 8), v51, 0);
      switch(*((_BYTE *)a1 + 92))
      {
        case 2:
          v94 = *((_QWORD *)a1 + 10);
          if (*(_QWORD *)v94 != 1)
          {
            v95 = (_QWORD *)operator new();
            v96 = *((_QWORD *)a1 + 10);
            *v95 = *(_QWORD *)v96;
            v97 = (std::string *)(v95 + 1);
            if (*(char *)(v96 + 31) < 0)
            {
              std::string::__init_copy_ctor_external(v97, *(const std::string::value_type **)(v96 + 8), *(_QWORD *)(v96 + 16));
            }
            else
            {
              v98 = *(_OWORD *)(v96 + 8);
              v95[3] = *(_QWORD *)(v96 + 24);
              *(_OWORD *)&v97->__r_.__value_.__l.__data_ = v98;
            }
            *((_QWORD *)a1 + 10) = v95;
            *v95 = 1;
            do
            {
              v134 = __ldaxr((unint64_t *)v94);
              v135 = v134 - 1;
            }
            while (__stlxr(v135, (unint64_t *)v94));
            if (!v135)
            {
              if (*(char *)(v94 + 31) < 0)
                operator delete(*(void **)(v94 + 8));
              v111 = (unint64_t *)v94;
              v119 = 0x1012C404EF22A49;
              goto LABEL_160;
            }
          }
          break;
        case 3:
          v113 = (unint64_t *)*((_QWORD *)a1 + 10);
          if (*v113 != 1)
          {
            v114 = (_QWORD *)operator new();
            v115 = *((_QWORD *)a1 + 10);
            *v114 = *(_QWORD *)v115;
            v114[2] = 0;
            v114[3] = 0;
            v114[1] = 0;
            std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v114 + 1, *(const void **)(v115 + 8), *(_QWORD *)(v115 + 16), (uint64_t)(*(_QWORD *)(v115 + 16) - *(_QWORD *)(v115 + 8)) >> 3);
            *((_QWORD *)a1 + 10) = v114;
            *v114 = 1;
            do
            {
              v116 = __ldaxr(v113);
              v117 = v116 - 1;
            }
            while (__stlxr(v117, v113));
            if (!v117)
            {
              v118 = (void *)v113[1];
              if (v118)
              {
                v113[2] = (unint64_t)v118;
                operator delete(v118);
              }
              v111 = v113;
              v119 = 0x1080C409938AC02;
              goto LABEL_160;
            }
          }
          break;
        case 4:
          v99 = (unint64_t *)*((_QWORD *)a1 + 10);
          if (*v99 != 1)
          {
            v100 = (_QWORD *)operator new();
            v101 = *((_QWORD *)a1 + 10);
            *v100 = *(_QWORD *)v101;
            v100[2] = 0;
            v100[3] = 0;
            v100[1] = 0;
            std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v100 + 1, *(uint64_t **)(v101 + 8), *(uint64_t **)(v101 + 16), (uint64_t)(*(_QWORD *)(v101 + 16) - *(_QWORD *)(v101 + 8)) >> 4);
            *((_QWORD *)a1 + 10) = v100;
            *v100 = 1;
            do
            {
              v102 = __ldaxr(v99);
              v103 = v102 - 1;
            }
            while (__stlxr(v103, v99));
            if (!v103)
            {
              v215.__r_.__value_.__r.__words[0] = (std::string::size_type)(v99 + 1);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v215);
              goto LABEL_143;
            }
          }
          break;
        case 5:
          v99 = (unint64_t *)*((_QWORD *)a1 + 10);
          if (*v99 != 1)
          {
            v120 = (_QWORD *)operator new();
            v121 = *((_QWORD *)a1 + 10);
            *v120 = *(_QWORD *)v121;
            v120[2] = 0;
            v120[3] = 0;
            v120[1] = 0;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v120 + 1, *(uint64_t **)(v121 + 8), *(uint64_t **)(v121 + 16), (uint64_t)(*(_QWORD *)(v121 + 16) - *(_QWORD *)(v121 + 8)) >> 5);
            *((_QWORD *)a1 + 10) = v120;
            *v120 = 1;
            do
            {
              v122 = __ldaxr(v99);
              v123 = v122 - 1;
            }
            while (__stlxr(v123, v99));
            if (!v123)
            {
              v215.__r_.__value_.__r.__words[0] = (std::string::size_type)(v99 + 1);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v215);
LABEL_143:
              v111 = v99;
              v119 = 0x1020C405E66F15BLL;
              goto LABEL_160;
            }
          }
          break;
        case 8:
          v124 = *((_QWORD *)a1 + 10);
          if (*(_QWORD *)v124 != 1)
          {
            v125 = operator new();
            v126 = *((_QWORD *)a1 + 10);
            *(_QWORD *)v125 = *(_QWORD *)v126;
            *(_QWORD *)(v125 + 8) = *(_QWORD *)(v126 + 8);
            v127 = *(_QWORD *)(v126 + 16);
            *(_QWORD *)(v125 + 16) = v127;
            if (v127)
            {
              v128 = (unsigned int *)(v127 + 8);
              do
                v129 = __ldxr(v128);
              while (__stxr(v129 + 1, v128));
            }
            v130 = *(_OWORD *)(v126 + 24);
            v131 = *(_OWORD *)(v126 + 40);
            *(_OWORD *)(v125 + 56) = *(_OWORD *)(v126 + 56);
            *(_OWORD *)(v125 + 40) = v131;
            *(_OWORD *)(v125 + 24) = v130;
            *((_QWORD *)a1 + 10) = v125;
            *(_QWORD *)v125 = 1;
            do
            {
              v132 = __ldaxr((unint64_t *)v124);
              v133 = v132 - 1;
            }
            while (__stlxr(v133, (unint64_t *)v124));
            if (!v133)
            {
              boost::detail::shared_count::~shared_count((unsigned int **)(v124 + 16));
              v111 = (unint64_t *)v124;
              v112 = -235920773;
              goto LABEL_152;
            }
          }
          break;
        case 9:
          v104 = (unint64_t *)*((_QWORD *)a1 + 10);
          if (*v104 != 1)
          {
            v105 = (_QWORD *)operator new();
            v106 = (_QWORD *)*((_QWORD *)a1 + 10);
            *v105 = *v106;
            turi::flexible_type_impl::ndarray<double>::ndarray(v105 + 1, (uint64_t)(v106 + 1));
            *((_QWORD *)a1 + 10) = v105;
            *v105 = 1;
            do
            {
              v107 = __ldaxr(v104);
              v108 = v107 - 1;
            }
            while (__stlxr(v108, v104));
            if (!v108)
            {
              v109 = (void *)v104[6];
              if (v109)
              {
                v104[7] = (unint64_t)v109;
                operator delete(v109);
              }
              v110 = (void *)v104[3];
              if (v110)
              {
                v104[4] = (unint64_t)v110;
                operator delete(v110);
              }
              std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v104 + 1));
              v111 = v104;
              v112 = 2071181815;
LABEL_152:
              v119 = v112 | 0x1030C4000000000;
LABEL_160:
              MEMORY[0x219A19A08](v111, v119);
            }
          }
          break;
        default:
          break;
      }
      v136 = *((_QWORD *)a1 + 10);
      v137 = (_QWORD *)(v136 + 8);
      if (*(char *)(v136 + 31) < 0)
        v137 = (_QWORD *)*v137;
      v138 = *((_QWORD *)a3 + 2);
      if (v138)
      {
        memcpy(v137, (const void *)(v138 + *((_QWORD *)a3 + 3)), v51);
        *((_QWORD *)a3 + 3) += v51;
      }
      else
      {
        std::istream::read();
      }
    }
    *((_BYTE *)a1 + 104) = 0;
    if (a5)
    {
      --a5;
LABEL_286:
      v11 = 1;
      *((_BYTE *)a1 + 104) = 1;
      goto LABEL_287;
    }
    v11 = 0;
    v179 = *a4 + 16 * v10;
    if (*(_BYTE *)(v179 + 12) != 7)
    {
      a5 = 0;
      if (a1 + 20 != (int *)v179)
      {
        switch(*(_BYTE *)(v179 + 12))
        {
          case 2:
            v180 = *(unint64_t **)v179;
            do
            {
              v181 = __ldaxr(v180);
              v182 = v181 - 1;
            }
            while (__stlxr(v182, v180));
            if (!v182)
            {
              v183 = *(unint64_t **)v179;
              if (!*(_QWORD *)v179)
                goto LABEL_278;
              if (*((char *)v183 + 31) < 0)
                operator delete((void *)v183[1]);
              v184 = v183;
              v185 = 0x1012C404EF22A49;
              goto LABEL_277;
            }
            break;
          case 3:
            v186 = *(unint64_t **)v179;
            do
            {
              v187 = __ldaxr(v186);
              v188 = v187 - 1;
            }
            while (__stlxr(v188, v186));
            if (!v188)
            {
              v189 = *(unint64_t **)v179;
              if (!*(_QWORD *)v179)
                goto LABEL_278;
              v190 = (void *)v189[1];
              if (v190)
              {
                v189[2] = (unint64_t)v190;
                operator delete(v190);
              }
              v184 = v189;
              v185 = 0x1080C409938AC02;
              goto LABEL_277;
            }
            break;
          case 4:
            v191 = *(unint64_t **)v179;
            do
            {
              v192 = __ldaxr(v191);
              v193 = v192 - 1;
            }
            while (__stlxr(v193, v191));
            if (!v193)
            {
              v194 = *(unint64_t **)v179;
              if (!*(_QWORD *)v179)
                goto LABEL_278;
              v215.__r_.__value_.__r.__words[0] = (std::string::size_type)(v194 + 1);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v215);
              goto LABEL_261;
            }
            break;
          case 5:
            v195 = *(unint64_t **)v179;
            do
            {
              v196 = __ldaxr(v195);
              v197 = v196 - 1;
            }
            while (__stlxr(v197, v195));
            if (!v197)
            {
              v194 = *(unint64_t **)v179;
              if (!*(_QWORD *)v179)
                goto LABEL_278;
              v215.__r_.__value_.__r.__words[0] = (std::string::size_type)(v194 + 1);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v215);
LABEL_261:
              v184 = v194;
              v185 = 0x1020C405E66F15BLL;
              goto LABEL_277;
            }
            break;
          case 8:
            v198 = *(unint64_t **)v179;
            do
            {
              v199 = __ldaxr(v198);
              v200 = v199 - 1;
            }
            while (__stlxr(v200, v198));
            if (!v200)
            {
              v201 = *(unint64_t **)v179;
              if (!*(_QWORD *)v179)
                goto LABEL_278;
              boost::detail::shared_count::~shared_count((unsigned int **)v201 + 2);
              v184 = v201;
              v202 = -235920773;
              goto LABEL_276;
            }
            break;
          case 9:
            v203 = *(unint64_t **)v179;
            do
            {
              v204 = __ldaxr(v203);
              v205 = v204 - 1;
            }
            while (__stlxr(v205, v203));
            if (!v205)
            {
              v206 = *(unint64_t **)v179;
              if (*(_QWORD *)v179)
              {
                v207 = (void *)v206[6];
                if (v207)
                {
                  v206[7] = (unint64_t)v207;
                  operator delete(v207);
                }
                v208 = (void *)v206[3];
                if (v208)
                {
                  v206[4] = (unint64_t)v208;
                  operator delete(v208);
                }
                std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v206 + 1));
                v184 = v206;
                v202 = 2071181815;
LABEL_276:
                v185 = v202 | 0x1030C4000000000;
LABEL_277:
                MEMORY[0x219A19A08](v184, v185);
              }
LABEL_278:
              *(_QWORD *)v179 = 0;
            }
            break;
          default:
            break;
        }
        a5 = 0;
        v209 = *((_QWORD *)a1 + 10);
        *(_QWORD *)(v179 + 5) = *(_QWORD *)((char *)a1 + 85);
        *(_QWORD *)v179 = v209;
        LODWORD(v209) = *((unsigned __int8 *)a1 + 92);
        *(_BYTE *)(v179 + 12) = v209;
        v173 = v209 > 9;
        v210 = (1 << v209) & 0x33C;
        if (!v173 && v210 != 0)
        {
          v212 = *(unint64_t **)v179;
          do
            v213 = __ldaxr(v212);
          while (__stlxr(v213 + 1, v212));
          a5 = 0;
        }
      }
      goto LABEL_286;
    }
LABEL_287:
    ++v10;
  }
  while (a5 || v10 < a4[1]);
  v49 = 844;
LABEL_62:
  *a1 = v49;
  return v10 != 0;
}

void std::vector<turi::flexible_type>::resize(uint64_t *a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v4 = a1[1];
  v5 = (v4 - *a1) >> 4;
  if (a2 <= v5)
  {
    if (a2 < v5)
    {
      v6 = *a1 + 16 * a2;
      while (v4 != v6)
      {
        v4 -= 16;
        std::allocator<turi::flexible_type>::destroy[abi:ne180100]((uint64_t)(a1 + 2), v4);
      }
      a1[1] = v6;
    }
  }
  else
  {
    std::vector<turi::flexible_type>::__append(a1, a2 - v5, a3);
  }
}

turi::iarchive *turi::integer_pack::variable_decode<turi::iarchive>(turi::iarchive *this, _QWORD *a2)
{
  turi::iarchive *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  char __dst[8];

  v3 = this;
  *(_QWORD *)__dst = 0;
  v4 = *((_QWORD *)this + 2);
  if (v4)
  {
    v5 = *((_QWORD *)this + 3);
    __dst[0] = *(_BYTE *)(v4 + v5);
    *((_QWORD *)this + 3) = v5 + 1;
  }
  else
  {
    this = (turi::iarchive *)std::istream::read();
  }
  if ((__dst[0] & 1) != 0)
  {
    if ((__dst[0] & 3) == 1)
    {
      v7 = *((_QWORD *)v3 + 2);
      if (v7)
      {
        v8 = *((_QWORD *)v3 + 3);
        __dst[1] = *(_BYTE *)(v7 + v8);
        *((_QWORD *)v3 + 3) = v8 + 1;
      }
      else
      {
        this = (turi::iarchive *)std::istream::read();
      }
      v6 = *(_QWORD *)__dst >> 2;
    }
    else if ((__dst[0] & 7) == 3)
    {
      v9 = *((_QWORD *)v3 + 2);
      if (v9)
      {
        v10 = *((_QWORD *)v3 + 3);
        *(_WORD *)&__dst[1] = *(_WORD *)(v9 + v10);
        *((_QWORD *)v3 + 3) = v10 + 2;
      }
      else
      {
        this = (turi::iarchive *)std::istream::read();
      }
      v6 = *(_QWORD *)__dst >> 3;
    }
    else if ((__dst[0] & 0xF) == 7)
    {
      v11 = *((_QWORD *)v3 + 2);
      if (v11)
      {
        v12 = *((_QWORD *)v3 + 3);
        v13 = v11 + v12;
        v14 = *(_BYTE *)(v13 + 2);
        *(_WORD *)&__dst[1] = *(_WORD *)v13;
        __dst[3] = v14;
        *((_QWORD *)v3 + 3) = v12 + 3;
      }
      else
      {
        this = (turi::iarchive *)std::istream::read();
      }
      v6 = *(_QWORD *)__dst >> 4;
    }
    else if ((__dst[0] & 0x1F) == 0xFLL)
    {
      v15 = *((_QWORD *)v3 + 2);
      if (v15)
      {
        v16 = *((_QWORD *)v3 + 3);
        *(_DWORD *)&__dst[1] = *(_DWORD *)(v15 + v16);
        *((_QWORD *)v3 + 3) = v16 + 4;
      }
      else
      {
        this = (turi::iarchive *)std::istream::read();
      }
      v6 = *(_QWORD *)__dst >> 5;
    }
    else if ((__dst[0] & 0x3F) == 0x1FLL)
    {
      this = (turi::iarchive *)turi::iarchive::read(v3, &__dst[1], 5uLL);
      v6 = *(_QWORD *)__dst >> 6;
    }
    else if ((__dst[0] & 0x7F) == 0x3FLL)
    {
      this = (turi::iarchive *)turi::iarchive::read(v3, &__dst[1], 6uLL);
      v6 = *(_QWORD *)__dst >> 7;
    }
    else
    {
      this = (turi::iarchive *)turi::iarchive::read(v3, __dst, 8uLL);
      v6 = *(_QWORD *)__dst;
    }
  }
  else
  {
    v6 = *(_QWORD *)__dst >> 1;
  }
  *a2 = v6;
  return this;
}

BOOL turi::v2_block_impl::decode_vector_stream::read(uint64_t a1, unint64_t a2, turi::iarchive *a3, _QWORD *a4, uint64_t a5, int a6)
{
  unint64_t v9;
  int v10;
  char v11;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  std::string *v23;
  __int128 v24;
  unint64_t *v25;
  _QWORD *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  void *v30;
  unint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int *v46;
  unsigned int v47;
  __int128 v48;
  __int128 v49;
  unint64_t v50;
  unint64_t v51;
  unsigned int v52;
  unint64_t *v53;
  _QWORD *v54;
  _QWORD *v55;
  unint64_t v56;
  unint64_t v57;
  void *v58;
  void *v59;
  int v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t *v75;
  unint64_t *v76;
  uint64_t v77;
  unint64_t *v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t *v81;
  void *v82;
  unint64_t *v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t *v86;
  unint64_t *v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t *v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t *v93;
  unsigned int v94;
  unint64_t *v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t *v98;
  void *v99;
  void *v100;
  uint64_t v101;
  BOOL v102;
  int v103;
  unint64_t *v105;
  unint64_t v106;
  void **v108;

  if (!*(_DWORD *)a1)
  {
    v11 = a6;
    *(_QWORD *)(a1 + 8) = a2;
    if (a6)
    {
      v13 = *((_QWORD *)a3 + 2);
      if (v13)
      {
        *(_BYTE *)(a1 + 16) = *(_BYTE *)(v13 + (*((_QWORD *)a3 + 3))++);
      }
      else
      {
        std::istream::read();
        a2 = *(_QWORD *)(a1 + 8);
      }
    }
    std::vector<turi::flexible_type>::resize((uint64_t *)(a1 + 24), a2);
    turi::v2_block_impl::decode_number(a3, (uint64_t *)(a1 + 24), 0);
    *(_QWORD *)(a1 + 48) = 0;
    v14 = *(uint64_t **)(a1 + 24);
    v15 = *(uint64_t **)(a1 + 32);
    if (v14 == v15)
    {
      v16 = 0;
    }
    else
    {
      v16 = 0;
      do
      {
        v17 = *v14;
        v14 += 2;
        v16 += v17;
      }
      while (v14 != v15);
      *(_QWORD *)(a1 + 48) = v16;
    }
    std::vector<turi::flexible_type>::resize((uint64_t *)(a1 + 56), v16);
    v18 = (uint64_t *)(a1 + 56);
    if ((v11 & 1) != 0)
      turi::v2_block_impl::decode_double(a3, v18, 0);
    else
      turi::v2_block_impl::decode_double_legacy(a3, v18, 0);
    v19 = 0;
    v9 = 0;
    *(_QWORD *)(a1 + 112) = 0;
    *(_QWORD *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 88) = 0;
    goto LABEL_18;
  }
  if (*(_DWORD *)a1 != 895)
  {
    v9 = 0;
    return v9 != 0;
  }
  v9 = 0;
  v10 = *(unsigned __int8 *)(a1 + 128);
  do
  {
    if (v10)
    {
      v19 = *(_QWORD *)(a1 + 112) + 1;
      *(_QWORD *)(a1 + 112) = v19;
LABEL_18:
      if (v19 >= *(_QWORD *)(a1 + 8))
      {
        v60 = 0;
        goto LABEL_135;
      }
      switch(*(_BYTE *)(a1 + 108))
      {
        case 2:
          v20 = *(_QWORD *)(a1 + 96);
          if (*(_QWORD *)v20 != 1)
          {
            v21 = (_QWORD *)operator new();
            v22 = *(_QWORD *)(a1 + 96);
            *v21 = *(_QWORD *)v22;
            v23 = (std::string *)(v21 + 1);
            if (*(char *)(v22 + 31) < 0)
            {
              std::string::__init_copy_ctor_external(v23, *(const std::string::value_type **)(v22 + 8), *(_QWORD *)(v22 + 16));
            }
            else
            {
              v24 = *(_OWORD *)(v22 + 8);
              v21[3] = *(_QWORD *)(v22 + 24);
              *(_OWORD *)&v23->__r_.__value_.__l.__data_ = v24;
            }
            *(_QWORD *)(a1 + 96) = v21;
            *v21 = 1;
            do
            {
              v61 = __ldaxr((unint64_t *)v20);
              v62 = v61 - 1;
            }
            while (__stlxr(v62, (unint64_t *)v20));
            if (!v62)
            {
              if (*(char *)(v20 + 31) < 0)
                operator delete(*(void **)(v20 + 8));
              v31 = (unint64_t *)v20;
              v32 = 0x1012C404EF22A49;
              goto LABEL_67;
            }
          }
          break;
        case 3:
          v25 = *(unint64_t **)(a1 + 96);
          if (*v25 != 1)
          {
            v26 = (_QWORD *)operator new();
            v27 = *(_QWORD *)(a1 + 96);
            *v26 = *(_QWORD *)v27;
            v26[2] = 0;
            v26[3] = 0;
            v26[1] = 0;
            std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v26 + 1, *(const void **)(v27 + 8), *(_QWORD *)(v27 + 16), (uint64_t)(*(_QWORD *)(v27 + 16) - *(_QWORD *)(v27 + 8)) >> 3);
            *(_QWORD *)(a1 + 96) = v26;
            *v26 = 1;
            do
            {
              v28 = __ldaxr(v25);
              v29 = v28 - 1;
            }
            while (__stlxr(v29, v25));
            if (!v29)
            {
              v30 = (void *)v25[1];
              if (v30)
              {
                v25[2] = (unint64_t)v30;
                operator delete(v30);
              }
              v31 = v25;
              v32 = 0x1080C409938AC02;
              goto LABEL_67;
            }
          }
          break;
        case 4:
          v33 = *(_QWORD *)(a1 + 96);
          if (*(_QWORD *)v33 != 1)
          {
            v34 = (_QWORD *)operator new();
            v35 = *(_QWORD *)(a1 + 96);
            *v34 = *(_QWORD *)v35;
            v34[2] = 0;
            v34[3] = 0;
            v34[1] = 0;
            std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v34 + 1, *(uint64_t **)(v35 + 8), *(uint64_t **)(v35 + 16), (uint64_t)(*(_QWORD *)(v35 + 16) - *(_QWORD *)(v35 + 8)) >> 4);
            *(_QWORD *)(a1 + 96) = v34;
            *v34 = 1;
            do
            {
              v36 = __ldaxr((unint64_t *)v33);
              v37 = v36 - 1;
            }
            while (__stlxr(v37, (unint64_t *)v33));
            if (!v37)
            {
              v108 = (void **)(v33 + 8);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v108);
              goto LABEL_40;
            }
          }
          break;
        case 5:
          v33 = *(_QWORD *)(a1 + 96);
          if (*(_QWORD *)v33 != 1)
          {
            v38 = (_QWORD *)operator new();
            v39 = *(_QWORD *)(a1 + 96);
            *v38 = *(_QWORD *)v39;
            v38[2] = 0;
            v38[3] = 0;
            v38[1] = 0;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v38 + 1, *(uint64_t **)(v39 + 8), *(uint64_t **)(v39 + 16), (uint64_t)(*(_QWORD *)(v39 + 16) - *(_QWORD *)(v39 + 8)) >> 5);
            *(_QWORD *)(a1 + 96) = v38;
            *v38 = 1;
            do
            {
              v40 = __ldaxr((unint64_t *)v33);
              v41 = v40 - 1;
            }
            while (__stlxr(v41, (unint64_t *)v33));
            if (!v41)
            {
              v108 = (void **)(v33 + 8);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v108);
LABEL_40:
              v31 = (unint64_t *)v33;
              v32 = 0x1020C405E66F15BLL;
              goto LABEL_67;
            }
          }
          break;
        case 8:
          v42 = *(_QWORD *)(a1 + 96);
          if (*(_QWORD *)v42 != 1)
          {
            v43 = operator new();
            v44 = *(_QWORD *)(a1 + 96);
            *(_QWORD *)v43 = *(_QWORD *)v44;
            *(_QWORD *)(v43 + 8) = *(_QWORD *)(v44 + 8);
            v45 = *(_QWORD *)(v44 + 16);
            *(_QWORD *)(v43 + 16) = v45;
            if (v45)
            {
              v46 = (unsigned int *)(v45 + 8);
              do
                v47 = __ldxr(v46);
              while (__stxr(v47 + 1, v46));
            }
            v48 = *(_OWORD *)(v44 + 24);
            v49 = *(_OWORD *)(v44 + 40);
            *(_OWORD *)(v43 + 56) = *(_OWORD *)(v44 + 56);
            *(_OWORD *)(v43 + 40) = v49;
            *(_OWORD *)(v43 + 24) = v48;
            *(_QWORD *)(a1 + 96) = v43;
            *(_QWORD *)v43 = 1;
            do
            {
              v50 = __ldaxr((unint64_t *)v42);
              v51 = v50 - 1;
            }
            while (__stlxr(v51, (unint64_t *)v42));
            if (!v51)
            {
              boost::detail::shared_count::~shared_count((unsigned int **)(v42 + 16));
              v31 = (unint64_t *)v42;
              v52 = -235920773;
              goto LABEL_58;
            }
          }
          break;
        case 9:
          v53 = *(unint64_t **)(a1 + 96);
          if (*v53 != 1)
          {
            v54 = (_QWORD *)operator new();
            v55 = *(_QWORD **)(a1 + 96);
            *v54 = *v55;
            turi::flexible_type_impl::ndarray<double>::ndarray(v54 + 1, (uint64_t)(v55 + 1));
            *(_QWORD *)(a1 + 96) = v54;
            *v54 = 1;
            do
            {
              v56 = __ldaxr(v53);
              v57 = v56 - 1;
            }
            while (__stlxr(v57, v53));
            if (!v57)
            {
              v58 = (void *)v53[6];
              if (v58)
              {
                v53[7] = (unint64_t)v58;
                operator delete(v58);
              }
              v59 = (void *)v53[3];
              if (v59)
              {
                v53[4] = (unint64_t)v59;
                operator delete(v59);
              }
              std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v53 + 1));
              v31 = v53;
              v52 = 2071181815;
LABEL_58:
              v32 = v52 | 0x1030C4000000000;
LABEL_67:
              MEMORY[0x219A19A08](v31, v32);
            }
          }
          break;
        default:
          break;
      }
      v63 = *(_QWORD *)(a1 + 96);
      std::vector<double>::resize(v63 + 8, *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16 * *(_QWORD *)(a1 + 80)));
      v64 = 0;
      ++*(_QWORD *)(a1 + 80);
      v65 = *(_QWORD **)(v63 + 8);
      v66 = *(_QWORD *)(v63 + 16) - (_QWORD)v65;
      if (v66)
      {
        v64 = v66 >> 3;
        v67 = *(_QWORD *)(a1 + 88);
        if (v64 <= 1)
          v64 = 1;
        v68 = (uint64_t *)(*(_QWORD *)(a1 + 56) + 16 * v67);
        v69 = v64;
        do
        {
          v70 = *v68;
          v68 += 2;
          *v65++ = v70;
          ++v67;
          --v69;
        }
        while (v69);
        *(_QWORD *)(a1 + 88) = v67;
      }
      *(_QWORD *)(a1 + 120) = v64;
    }
    *(_BYTE *)(a1 + 128) = 0;
    if (a5)
    {
      --a5;
LABEL_129:
      v10 = 1;
      *(_BYTE *)(a1 + 128) = 1;
      goto LABEL_130;
    }
    v10 = 0;
    v71 = *a4 + 16 * v9;
    if (*(_BYTE *)(v71 + 12) != 7)
    {
      a5 = 0;
      if (a1 + 96 != v71)
      {
        switch(*(_BYTE *)(v71 + 12))
        {
          case 2:
            v72 = *(unint64_t **)v71;
            do
            {
              v73 = __ldaxr(v72);
              v74 = v73 - 1;
            }
            while (__stlxr(v74, v72));
            if (!v74)
            {
              v75 = *(unint64_t **)v71;
              if (!*(_QWORD *)v71)
                goto LABEL_121;
              if (*((char *)v75 + 31) < 0)
                operator delete((void *)v75[1]);
              v76 = v75;
              v77 = 0x1012C404EF22A49;
              goto LABEL_120;
            }
            break;
          case 3:
            v78 = *(unint64_t **)v71;
            do
            {
              v79 = __ldaxr(v78);
              v80 = v79 - 1;
            }
            while (__stlxr(v80, v78));
            if (!v80)
            {
              v81 = *(unint64_t **)v71;
              if (!*(_QWORD *)v71)
                goto LABEL_121;
              v82 = (void *)v81[1];
              if (v82)
              {
                v81[2] = (unint64_t)v82;
                operator delete(v82);
              }
              v76 = v81;
              v77 = 0x1080C409938AC02;
              goto LABEL_120;
            }
            break;
          case 4:
            v83 = *(unint64_t **)v71;
            do
            {
              v84 = __ldaxr(v83);
              v85 = v84 - 1;
            }
            while (__stlxr(v85, v83));
            if (!v85)
            {
              v86 = *(unint64_t **)v71;
              if (!*(_QWORD *)v71)
                goto LABEL_121;
              v108 = (void **)(v86 + 1);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v108);
              goto LABEL_104;
            }
            break;
          case 5:
            v87 = *(unint64_t **)v71;
            do
            {
              v88 = __ldaxr(v87);
              v89 = v88 - 1;
            }
            while (__stlxr(v89, v87));
            if (!v89)
            {
              v86 = *(unint64_t **)v71;
              if (!*(_QWORD *)v71)
                goto LABEL_121;
              v108 = (void **)(v86 + 1);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v108);
LABEL_104:
              v76 = v86;
              v77 = 0x1020C405E66F15BLL;
              goto LABEL_120;
            }
            break;
          case 8:
            v90 = *(unint64_t **)v71;
            do
            {
              v91 = __ldaxr(v90);
              v92 = v91 - 1;
            }
            while (__stlxr(v92, v90));
            if (!v92)
            {
              v93 = *(unint64_t **)v71;
              if (!*(_QWORD *)v71)
                goto LABEL_121;
              boost::detail::shared_count::~shared_count((unsigned int **)v93 + 2);
              v76 = v93;
              v94 = -235920773;
              goto LABEL_119;
            }
            break;
          case 9:
            v95 = *(unint64_t **)v71;
            do
            {
              v96 = __ldaxr(v95);
              v97 = v96 - 1;
            }
            while (__stlxr(v97, v95));
            if (!v97)
            {
              v98 = *(unint64_t **)v71;
              if (*(_QWORD *)v71)
              {
                v99 = (void *)v98[6];
                if (v99)
                {
                  v98[7] = (unint64_t)v99;
                  operator delete(v99);
                }
                v100 = (void *)v98[3];
                if (v100)
                {
                  v98[4] = (unint64_t)v100;
                  operator delete(v100);
                }
                std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v98 + 1));
                v76 = v98;
                v94 = 2071181815;
LABEL_119:
                v77 = v94 | 0x1030C4000000000;
LABEL_120:
                MEMORY[0x219A19A08](v76, v77);
              }
LABEL_121:
              *(_QWORD *)v71 = 0;
            }
            break;
          default:
            break;
        }
        a5 = 0;
        v101 = *(_QWORD *)(a1 + 96);
        *(_QWORD *)(v71 + 5) = *(_QWORD *)(a1 + 101);
        *(_QWORD *)v71 = v101;
        LODWORD(v101) = *(unsigned __int8 *)(a1 + 108);
        *(_BYTE *)(v71 + 12) = v101;
        v102 = v101 > 9;
        v103 = (1 << v101) & 0x33C;
        if (!v102 && v103 != 0)
        {
          v105 = *(unint64_t **)v71;
          do
            v106 = __ldaxr(v105);
          while (__stlxr(v106 + 1, v105));
          a5 = 0;
        }
      }
      goto LABEL_129;
    }
LABEL_130:
    ++v9;
  }
  while (a5 || v9 < a4[1]);
  v60 = 895;
LABEL_135:
  *(_DWORD *)a1 = v60;
  return v9 != 0;
}

BOOL turi::v2_block_impl::decode_ndvector_stream::read(uint64_t a1, unint64_t a2, turi::iarchive *a3, _QWORD *a4, uint64_t a5)
{
  unint64_t v8;
  int v9;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  BOOL v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  BOOL v28;
  void *v29;
  void *v30;
  unsigned int v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  BOOL v35;
  void *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  BOOL v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  BOOL v44;
  unint64_t v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  BOOL v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  BOOL v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  BOOL v62;
  void *v63;
  void *v64;
  unsigned int v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  BOOL v69;
  void *v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  BOOL v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  BOOL v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  unint64_t v87;
  char **v88;
  char *v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unsigned int *v94;
  unsigned int *v95;
  unsigned int v96;
  __int128 v97;
  __int128 v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  unint64_t v105;
  char **v106;
  char *v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unsigned int *v112;
  unsigned int *v113;
  unsigned int v114;
  __int128 v115;
  __int128 v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t *v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  _QWORD *v126;
  uint64_t *v127;
  uint64_t v128;
  uint64_t v129;
  int v130;
  std::runtime_error *exception;
  std::string *v132;
  __int128 v133;
  std::runtime_error *v134;
  std::string *v135;
  __int128 v136;
  _QWORD *v137;
  _QWORD *v138;
  unint64_t v139;
  unint64_t v140;
  void *v141;
  void *v142;
  void *v143;
  void *v144;
  uint64_t v145;
  unint64_t *v146;
  unint64_t v147;
  unint64_t v148;
  unint64_t *v149;
  unint64_t *v150;
  uint64_t v151;
  unint64_t *v152;
  unint64_t v153;
  unint64_t v154;
  unint64_t *v155;
  unint64_t *v156;
  unint64_t v157;
  unint64_t v158;
  unint64_t *v159;
  void *v160;
  void *v161;
  unsigned int v162;
  unint64_t *v163;
  unint64_t v164;
  unint64_t v165;
  unint64_t *v166;
  void *v167;
  unint64_t *v168;
  unint64_t v169;
  unint64_t v170;
  unint64_t *v171;
  unint64_t v172;
  unint64_t v173;
  unint64_t *v174;
  std::__shared_weak_count *v175;
  unint64_t *v176;
  unint64_t v177;
  void *__p[2];
  void *v180[2];
  _BYTE v181[32];
  uint64_t v182;
  std::string v183;
  size_t __idx;

  if (*(_DWORD *)a1)
  {
    if (*(_DWORD *)a1 == 957)
    {
      v8 = 0;
      v9 = *(unsigned __int8 *)(a1 + 264);
      goto LABEL_298;
    }
    v8 = 0;
    return v8 != 0;
  }
  *(_QWORD *)(a1 + 8) = a2;
  v11 = *((_QWORD *)a3 + 2);
  if (v11)
  {
    *(_BYTE *)(a1 + 16) = *(_BYTE *)(v11 + (*((_QWORD *)a3 + 3))++);
  }
  else
  {
    std::istream::read();
    a2 = *(_QWORD *)(a1 + 8);
  }
  std::vector<turi::flexible_type>::resize((uint64_t *)(a1 + 24), a2);
  std::vector<turi::flexible_type>::resize((uint64_t *)(a1 + 48), *(_QWORD *)(a1 + 8));
  turi::v2_block_impl::decode_number(a3, (uint64_t *)(a1 + 24), 0);
  turi::v2_block_impl::decode_number(a3, (uint64_t *)(a1 + 48), 0);
  *(_QWORD *)(a1 + 144) = 0;
  v12 = *(uint64_t **)(a1 + 24);
  v13 = *(uint64_t **)(a1 + 32);
  if (v12 == v13)
  {
    v45 = 0;
  }
  else
  {
    do
    {
      v14 = *v12;
      switch(*((_BYTE *)v12 + 12))
      {
        case 2:
          do
            v15 = __ldaxr((unint64_t *)v14);
          while (__stlxr(v15 + 1, (unint64_t *)v14));
          *(_QWORD *)(a1 + 144) += v14;
          do
          {
            v16 = __ldaxr((unint64_t *)v14);
            v17 = v16 - 1;
          }
          while (__stlxr(v17, (unint64_t *)v14));
          if (v17)
            v18 = 1;
          else
            v18 = v14 == 0;
          if (!v18)
          {
            if (*(char *)(v14 + 31) < 0)
              operator delete(*(void **)(v14 + 8));
            v19 = v14;
            v20 = 0x1012C404EF22A49;
            goto LABEL_68;
          }
          break;
        case 3:
          do
            v32 = __ldaxr((unint64_t *)v14);
          while (__stlxr(v32 + 1, (unint64_t *)v14));
          *(_QWORD *)(a1 + 144) += v14;
          do
          {
            v33 = __ldaxr((unint64_t *)v14);
            v34 = v33 - 1;
          }
          while (__stlxr(v34, (unint64_t *)v14));
          if (v34)
            v35 = 1;
          else
            v35 = v14 == 0;
          if (!v35)
          {
            v36 = *(void **)(v14 + 8);
            if (v36)
            {
              *(_QWORD *)(v14 + 16) = v36;
              operator delete(v36);
            }
            v19 = v14;
            v20 = 0x1080C409938AC02;
            goto LABEL_68;
          }
          break;
        case 4:
          do
            v21 = __ldaxr((unint64_t *)v14);
          while (__stlxr(v21 + 1, (unint64_t *)v14));
          *(_QWORD *)(a1 + 144) += v14;
          do
          {
            v22 = __ldaxr((unint64_t *)v14);
            v23 = v22 - 1;
          }
          while (__stlxr(v23, (unint64_t *)v14));
          if (v23)
            v24 = 1;
          else
            v24 = v14 == 0;
          if (!v24)
          {
            __p[0] = (void *)(v14 + 8);
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
            goto LABEL_58;
          }
          break;
        case 5:
          do
            v37 = __ldaxr((unint64_t *)v14);
          while (__stlxr(v37 + 1, (unint64_t *)v14));
          *(_QWORD *)(a1 + 144) += v14;
          do
          {
            v38 = __ldaxr((unint64_t *)v14);
            v39 = v38 - 1;
          }
          while (__stlxr(v39, (unint64_t *)v14));
          if (v39)
            v40 = 1;
          else
            v40 = v14 == 0;
          if (!v40)
          {
            __p[0] = (void *)(v14 + 8);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
LABEL_58:
            v19 = v14;
            v20 = 0x1020C405E66F15BLL;
            goto LABEL_68;
          }
          break;
        case 8:
          do
            v41 = __ldaxr((unint64_t *)v14);
          while (__stlxr(v41 + 1, (unint64_t *)v14));
          *(_QWORD *)(a1 + 144) += v14;
          do
          {
            v42 = __ldaxr((unint64_t *)v14);
            v43 = v42 - 1;
          }
          while (__stlxr(v43, (unint64_t *)v14));
          if (v43)
            v44 = 1;
          else
            v44 = v14 == 0;
          if (!v44)
          {
            boost::detail::shared_count::~shared_count((unsigned int **)(v14 + 16));
            v19 = v14;
            v31 = -235920773;
            goto LABEL_67;
          }
          break;
        case 9:
          do
            v25 = __ldaxr((unint64_t *)v14);
          while (__stlxr(v25 + 1, (unint64_t *)v14));
          *(_QWORD *)(a1 + 144) += v14;
          do
          {
            v26 = __ldaxr((unint64_t *)v14);
            v27 = v26 - 1;
          }
          while (__stlxr(v27, (unint64_t *)v14));
          if (v27)
            v28 = 1;
          else
            v28 = v14 == 0;
          if (!v28)
          {
            v29 = *(void **)(v14 + 48);
            if (v29)
            {
              *(_QWORD *)(v14 + 56) = v29;
              operator delete(v29);
            }
            v30 = *(void **)(v14 + 24);
            if (v30)
            {
              *(_QWORD *)(v14 + 32) = v30;
              operator delete(v30);
            }
            std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v14 + 8);
            v19 = v14;
            v31 = 2071181815;
LABEL_67:
            v20 = v31 | 0x1030C4000000000;
LABEL_68:
            MEMORY[0x219A19A08](v19, v20);
          }
          break;
        default:
          *(_QWORD *)(a1 + 144) += v14;
          break;
      }
      v12 += 2;
    }
    while (v12 != v13);
    v45 = *(_QWORD *)(a1 + 144);
  }
  std::vector<turi::flexible_type>::resize((uint64_t *)(a1 + 72), v45);
  std::vector<turi::flexible_type>::resize((uint64_t *)(a1 + 96), *(_QWORD *)(a1 + 144));
  turi::v2_block_impl::decode_number(a3, (uint64_t *)(a1 + 72), 0);
  turi::v2_block_impl::decode_number(a3, (uint64_t *)(a1 + 96), 0);
  *(_QWORD *)(a1 + 152) = 0;
  v46 = *(uint64_t **)(a1 + 48);
  v47 = *(uint64_t **)(a1 + 56);
  if (v46 == v47)
  {
    v79 = 0;
  }
  else
  {
    do
    {
      v48 = *v46;
      switch(*((_BYTE *)v46 + 12))
      {
        case 2:
          do
            v49 = __ldaxr((unint64_t *)v48);
          while (__stlxr(v49 + 1, (unint64_t *)v48));
          *(_QWORD *)(a1 + 152) += v48;
          do
          {
            v50 = __ldaxr((unint64_t *)v48);
            v51 = v50 - 1;
          }
          while (__stlxr(v51, (unint64_t *)v48));
          if (v51)
            v52 = 1;
          else
            v52 = v48 == 0;
          if (!v52)
          {
            if (*(char *)(v48 + 31) < 0)
              operator delete(*(void **)(v48 + 8));
            v53 = v48;
            v54 = 0x1012C404EF22A49;
            goto LABEL_133;
          }
          break;
        case 3:
          do
            v66 = __ldaxr((unint64_t *)v48);
          while (__stlxr(v66 + 1, (unint64_t *)v48));
          *(_QWORD *)(a1 + 152) += v48;
          do
          {
            v67 = __ldaxr((unint64_t *)v48);
            v68 = v67 - 1;
          }
          while (__stlxr(v68, (unint64_t *)v48));
          if (v68)
            v69 = 1;
          else
            v69 = v48 == 0;
          if (!v69)
          {
            v70 = *(void **)(v48 + 8);
            if (v70)
            {
              *(_QWORD *)(v48 + 16) = v70;
              operator delete(v70);
            }
            v53 = v48;
            v54 = 0x1080C409938AC02;
            goto LABEL_133;
          }
          break;
        case 4:
          do
            v55 = __ldaxr((unint64_t *)v48);
          while (__stlxr(v55 + 1, (unint64_t *)v48));
          *(_QWORD *)(a1 + 152) += v48;
          do
          {
            v56 = __ldaxr((unint64_t *)v48);
            v57 = v56 - 1;
          }
          while (__stlxr(v57, (unint64_t *)v48));
          if (v57)
            v58 = 1;
          else
            v58 = v48 == 0;
          if (!v58)
          {
            __p[0] = (void *)(v48 + 8);
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
            goto LABEL_123;
          }
          break;
        case 5:
          do
            v71 = __ldaxr((unint64_t *)v48);
          while (__stlxr(v71 + 1, (unint64_t *)v48));
          *(_QWORD *)(a1 + 152) += v48;
          do
          {
            v72 = __ldaxr((unint64_t *)v48);
            v73 = v72 - 1;
          }
          while (__stlxr(v73, (unint64_t *)v48));
          if (v73)
            v74 = 1;
          else
            v74 = v48 == 0;
          if (!v74)
          {
            __p[0] = (void *)(v48 + 8);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
LABEL_123:
            v53 = v48;
            v54 = 0x1020C405E66F15BLL;
            goto LABEL_133;
          }
          break;
        case 8:
          do
            v75 = __ldaxr((unint64_t *)v48);
          while (__stlxr(v75 + 1, (unint64_t *)v48));
          *(_QWORD *)(a1 + 152) += v48;
          do
          {
            v76 = __ldaxr((unint64_t *)v48);
            v77 = v76 - 1;
          }
          while (__stlxr(v77, (unint64_t *)v48));
          if (v77)
            v78 = 1;
          else
            v78 = v48 == 0;
          if (!v78)
          {
            boost::detail::shared_count::~shared_count((unsigned int **)(v48 + 16));
            v53 = v48;
            v65 = -235920773;
            goto LABEL_132;
          }
          break;
        case 9:
          do
            v59 = __ldaxr((unint64_t *)v48);
          while (__stlxr(v59 + 1, (unint64_t *)v48));
          *(_QWORD *)(a1 + 152) += v48;
          do
          {
            v60 = __ldaxr((unint64_t *)v48);
            v61 = v60 - 1;
          }
          while (__stlxr(v61, (unint64_t *)v48));
          if (v61)
            v62 = 1;
          else
            v62 = v48 == 0;
          if (!v62)
          {
            v63 = *(void **)(v48 + 48);
            if (v63)
            {
              *(_QWORD *)(v48 + 56) = v63;
              operator delete(v63);
            }
            v64 = *(void **)(v48 + 24);
            if (v64)
            {
              *(_QWORD *)(v48 + 32) = v64;
              operator delete(v64);
            }
            std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v48 + 8);
            v53 = v48;
            v65 = 2071181815;
LABEL_132:
            v54 = v65 | 0x1030C4000000000;
LABEL_133:
            MEMORY[0x219A19A08](v53, v54);
          }
          break;
        default:
          *(_QWORD *)(a1 + 152) += v48;
          break;
      }
      v46 += 2;
    }
    while (v46 != v47);
    v79 = *(_QWORD *)(a1 + 152);
  }
  std::vector<turi::flexible_type>::resize((uint64_t *)(a1 + 120), v79);
  turi::v2_block_impl::decode_double(a3, (uint64_t *)(a1 + 120), 0);
  v80 = 0;
  v8 = 0;
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
LABEL_139:
  if (v80 >= *(_QWORD *)(a1 + 8))
  {
    v130 = 0;
    goto LABEL_301;
  }
  v81 = *(_QWORD *)(a1 + 24) + 16 * v80;
  v82 = 0;
  switch(*(_BYTE *)(v81 + 12))
  {
    case 0:
      v82 = *(_QWORD *)v81;
      goto LABEL_170;
    case 1:
      v82 = (uint64_t)*(double *)v81;
      goto LABEL_170;
    case 2:
      v87 = *(_QWORD *)v81;
      v88 = (char **)(*(_QWORD *)v81 + 8);
      __idx = 0;
      v89 = (char *)v88;
      if (*(char *)(v87 + 31) < 0)
        v89 = *v88;
      std::string::basic_string[abi:ne180100]<0>(__p, v89);
      v82 = std::stoll((const std::string *)__p, &__idx, 10);
      if (SHIBYTE(v180[0]) < 0)
        operator delete(__p[0]);
      if (*(char *)(v87 + 31) < 0)
        v90 = *(_QWORD *)(v87 + 16);
      else
        v90 = *(unsigned __int8 *)(v87 + 31);
      if (__idx != v90)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        v132 = std::string::append(&v183, " cannot be interpreted as an integer");
        v133 = *(_OWORD *)&v132->__r_.__value_.__l.__data_;
        v180[0] = (void *)v132->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v133;
        v132->__r_.__value_.__l.__size_ = 0;
        v132->__r_.__value_.__r.__words[2] = 0;
        v132->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, (const std::string *)__p);
        __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
      }
      goto LABEL_170;
    case 3:
      v83 = *(_QWORD *)v81;
      __p[1] = 0;
      v180[0] = 0;
      __p[0] = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v83 + 8), *(_QWORD *)(v83 + 16), (uint64_t)(*(_QWORD *)(v83 + 16) - *(_QWORD *)(v83 + 8)) >> 3);
      turi::flexible_type_fail(0);
      v82 = 0;
      if (!__p[0])
        goto LABEL_170;
      __p[1] = __p[0];
      operator delete(__p[0]);
      break;
    case 4:
      v91 = *(_QWORD *)v81;
      __p[1] = 0;
      v180[0] = 0;
      __p[0] = 0;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v91 + 8), *(uint64_t **)(v91 + 16), (uint64_t)(*(_QWORD *)(v91 + 16) - *(_QWORD *)(v91 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v183.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v183);
      break;
    case 5:
      v92 = *(_QWORD *)v81;
      __p[1] = 0;
      v180[0] = 0;
      __p[0] = 0;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v92 + 8), *(uint64_t **)(v92 + 16), (uint64_t)(*(_QWORD *)(v92 + 16) - *(_QWORD *)(v92 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v183.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v183);
      break;
    case 6:
      v82 = (uint64_t)(*(_QWORD *)v81 << 8) >> 8;
      goto LABEL_170;
    case 7:
      goto LABEL_170;
    case 8:
      v93 = *(_QWORD *)v81;
      v94 = *(unsigned int **)(v93 + 16);
      __p[0] = *(void **)(v93 + 8);
      __p[1] = v94;
      if (v94)
      {
        v95 = v94 + 2;
        do
          v96 = __ldxr(v95);
        while (__stxr(v96 + 1, v95));
      }
      v97 = *(_OWORD *)(v93 + 24);
      v98 = *(_OWORD *)(v93 + 56);
      *(_OWORD *)v181 = *(_OWORD *)(v93 + 40);
      *(_OWORD *)&v181[16] = v98;
      *(_OWORD *)v180 = v97;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count((unsigned int **)&__p[1]);
      break;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(_QWORD *)v81 + 8);
      turi::flexible_type_fail(0);
      if (*(_QWORD *)&v181[8])
      {
        *(_QWORD *)&v181[16] = *(_QWORD *)&v181[8];
        operator delete(*(void **)&v181[8]);
      }
      if (v180[0])
      {
        v180[1] = v180[0];
        operator delete(v180[0]);
      }
      v82 = 0;
      v84 = (std::__shared_weak_count *)__p[1];
      if (!__p[1])
        goto LABEL_170;
      v85 = (unint64_t *)((char *)__p[1] + 8);
      do
        v86 = __ldaxr(v85);
      while (__stlxr(v86 - 1, v85));
      v82 = 0;
      if (v86)
        goto LABEL_170;
      ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
      std::__shared_weak_count::__release_weak(v84);
      break;
    default:
      turi::apply_binary_op_ff();
  }
  v82 = 0;
LABEL_170:
  std::vector<unsigned long>::resize(a1 + 176, v82);
  v99 = *(_QWORD *)(a1 + 24) + 16 * *(_QWORD *)(a1 + 248);
  v100 = 0;
  switch(*(_BYTE *)(v99 + 12))
  {
    case 0:
      v100 = *(_QWORD *)v99;
      goto LABEL_200;
    case 1:
      v100 = (uint64_t)*(double *)v99;
      goto LABEL_200;
    case 2:
      v105 = *(_QWORD *)v99;
      v106 = (char **)(*(_QWORD *)v99 + 8);
      __idx = 0;
      v107 = (char *)v106;
      if (*(char *)(v105 + 31) < 0)
        v107 = *v106;
      std::string::basic_string[abi:ne180100]<0>(__p, v107);
      v100 = std::stoll((const std::string *)__p, &__idx, 10);
      if (SHIBYTE(v180[0]) < 0)
        operator delete(__p[0]);
      if (*(char *)(v105 + 31) < 0)
        v108 = *(_QWORD *)(v105 + 16);
      else
        v108 = *(unsigned __int8 *)(v105 + 31);
      if (__idx != v108)
      {
        v134 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        v135 = std::string::append(&v183, " cannot be interpreted as an integer");
        v136 = *(_OWORD *)&v135->__r_.__value_.__l.__data_;
        v180[0] = (void *)v135->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v136;
        v135->__r_.__value_.__l.__size_ = 0;
        v135->__r_.__value_.__r.__words[2] = 0;
        v135->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(v134, (const std::string *)__p);
        __cxa_throw(v134, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
      }
      goto LABEL_200;
    case 3:
      v101 = *(_QWORD *)v99;
      __p[1] = 0;
      v180[0] = 0;
      __p[0] = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v101 + 8), *(_QWORD *)(v101 + 16), (uint64_t)(*(_QWORD *)(v101 + 16) - *(_QWORD *)(v101 + 8)) >> 3);
      turi::flexible_type_fail(0);
      v100 = 0;
      if (!__p[0])
        goto LABEL_200;
      __p[1] = __p[0];
      operator delete(__p[0]);
      break;
    case 4:
      v109 = *(_QWORD *)v99;
      __p[1] = 0;
      v180[0] = 0;
      __p[0] = 0;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v109 + 8), *(uint64_t **)(v109 + 16), (uint64_t)(*(_QWORD *)(v109 + 16) - *(_QWORD *)(v109 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v183.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v183);
      break;
    case 5:
      v110 = *(_QWORD *)v99;
      __p[1] = 0;
      v180[0] = 0;
      __p[0] = 0;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v110 + 8), *(uint64_t **)(v110 + 16), (uint64_t)(*(_QWORD *)(v110 + 16) - *(_QWORD *)(v110 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v183.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v183);
      break;
    case 6:
      v100 = (uint64_t)(*(_QWORD *)v99 << 8) >> 8;
      goto LABEL_200;
    case 7:
      goto LABEL_200;
    case 8:
      v111 = *(_QWORD *)v99;
      v112 = *(unsigned int **)(v111 + 16);
      __p[0] = *(void **)(v111 + 8);
      __p[1] = v112;
      if (v112)
      {
        v113 = v112 + 2;
        do
          v114 = __ldxr(v113);
        while (__stxr(v114 + 1, v113));
      }
      v115 = *(_OWORD *)(v111 + 24);
      v116 = *(_OWORD *)(v111 + 56);
      *(_OWORD *)v181 = *(_OWORD *)(v111 + 40);
      *(_OWORD *)&v181[16] = v116;
      *(_OWORD *)v180 = v115;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count((unsigned int **)&__p[1]);
      break;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(_QWORD *)v99 + 8);
      turi::flexible_type_fail(0);
      if (*(_QWORD *)&v181[8])
      {
        *(_QWORD *)&v181[16] = *(_QWORD *)&v181[8];
        operator delete(*(void **)&v181[8]);
      }
      if (v180[0])
      {
        v180[1] = v180[0];
        operator delete(v180[0]);
      }
      v100 = 0;
      v102 = (std::__shared_weak_count *)__p[1];
      if (!__p[1])
        goto LABEL_200;
      v103 = (unint64_t *)((char *)__p[1] + 8);
      do
        v104 = __ldaxr(v103);
      while (__stlxr(v104 - 1, v103));
      v100 = 0;
      if (v104)
        goto LABEL_200;
      ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
      std::__shared_weak_count::__release_weak(v102);
      break;
    default:
      turi::apply_binary_op_ff();
  }
  v100 = 0;
LABEL_200:
  std::vector<unsigned long>::resize(a1 + 200, v100);
  v117 = 0;
  v118 = *(_QWORD *)(a1 + 24);
  while (2)
  {
    *(_QWORD *)(a1 + 256) = v117;
    v119 = v118 + 16 * *(_QWORD *)(a1 + 248);
    switch(*(_BYTE *)(v119 + 12))
    {
      case 0:
        if (*(_QWORD *)v119 <= v117)
          goto LABEL_209;
        goto LABEL_207;
      case 1:
        if (*(double *)v119 <= (double)v117)
          goto LABEL_209;
        goto LABEL_207;
      case 2:
      case 3:
      case 4:
      case 5:
      case 7:
      case 8:
      case 9:
        turi::flexible_type_fail(0);
        goto LABEL_209;
      case 6:
        if (v117 < (uint64_t)(*(_QWORD *)v119 << 8) >> 8)
        {
LABEL_207:
          *(_QWORD *)(*(_QWORD *)(a1 + 176) + 8 * *(_QWORD *)(a1 + 256)) = *(_QWORD *)(*(_QWORD *)(a1 + 72)
                                                                                       + 16 * *(_QWORD *)(a1 + 160));
          *(_QWORD *)(*(_QWORD *)(a1 + 200) + 8 * *(_QWORD *)(a1 + 256)) = *(_QWORD *)(*(_QWORD *)(a1 + 96)
                                                                                       + 16
                                                                                       * (*(_QWORD *)(a1 + 160))++);
          v117 = *(_QWORD *)(a1 + 256) + 1;
          continue;
        }
LABEL_209:
        *(_QWORD *)(a1 + 224) = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 16 * *(_QWORD *)(a1 + 248));
        v120 = (uint64_t *)(a1 + 224);
        std::allocate_shared[abi:ne180100]<std::vector<double>,std::allocator<std::vector<double>>,unsigned long &,void>((unint64_t *)(a1 + 224), __p);
        std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100](a1 + 232, (__int128 *)__p);
        v121 = (std::__shared_weak_count *)__p[1];
        if (__p[1])
        {
          v122 = (unint64_t *)((char *)__p[1] + 8);
          do
            v123 = __ldaxr(v122);
          while (__stlxr(v123 - 1, v122));
          if (!v123)
          {
            ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
            std::__shared_weak_count::__release_weak(v121);
          }
        }
        v124 = *v120;
        if (*v120)
        {
          v125 = *(_QWORD *)(a1 + 168);
          v126 = **(_QWORD ***)(a1 + 232);
          v127 = (uint64_t *)(*(_QWORD *)(a1 + 120) + 16 * v125);
          v128 = *v120;
          do
          {
            v129 = *v127;
            v127 += 2;
            *v126++ = v129;
            --v128;
          }
          while (v128);
        }
        else
        {
          v125 = *(_QWORD *)(a1 + 168);
        }
        *(_QWORD *)(a1 + 256) = v124;
        *(_QWORD *)(a1 + 168) = v125 + v124;
        while (2)
        {
          *(_BYTE *)(a1 + 264) = 0;
          if (a5)
          {
            --a5;
            goto LABEL_295;
          }
          v9 = 0;
          if (*(_BYTE *)(*a4 + 16 * v8 + 12) != 7)
          {
            turi::flexible_type_impl::ndarray<double>::ndarray(__p, (_QWORD *)(a1 + 232), a1 + 176, a1 + 200, 0);
            v137 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::pair[abi:ne180100]<true,0>(v137);
            *v137 = 1;
            v138 = v137;
            if (*v137 != 1)
            {
              v138 = (_QWORD *)operator new();
              *v138 = *v137;
              turi::flexible_type_impl::ndarray<double>::ndarray(v138 + 1, (uint64_t)(v137 + 1));
              *v138 = 1;
              do
              {
                v139 = __ldaxr(v137);
                v140 = v139 - 1;
              }
              while (__stlxr(v140, v137));
              if (!v140)
              {
                v141 = (void *)v137[6];
                if (v141)
                {
                  v137[7] = v141;
                  operator delete(v141);
                }
                v142 = (void *)v137[3];
                if (v142)
                {
                  v137[4] = v142;
                  operator delete(v142);
                }
                std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v137 + 1));
                MEMORY[0x219A19A08](v137, 0x1030C407B73B9F7);
              }
            }
            std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)(v138 + 1), (__int128 *)__p);
            v143 = (void *)v138[3];
            if (v143)
            {
              v138[4] = v143;
              operator delete(v143);
              v138[3] = 0;
              v138[4] = 0;
              v138[5] = 0;
            }
            v144 = (void *)v138[6];
            *(_OWORD *)(v138 + 3) = *(_OWORD *)v180;
            v138[5] = *(_QWORD *)v181;
            v180[0] = 0;
            v180[1] = 0;
            *(_QWORD *)v181 = 0;
            if (v144)
            {
              v138[7] = v144;
              operator delete(v144);
              v138[6] = 0;
              v138[7] = 0;
              v138[8] = 0;
            }
            *((_OWORD *)v138 + 3) = *(_OWORD *)&v181[8];
            v138[8] = *(_QWORD *)&v181[24];
            memset(&v181[8], 0, 24);
            v138[9] = v182;
            v145 = *a4 + 16 * v8;
            switch(*(_BYTE *)(v145 + 12))
            {
              case 2:
                v146 = *(unint64_t **)v145;
                do
                {
                  v147 = __ldaxr(v146);
                  v148 = v147 - 1;
                }
                while (__stlxr(v148, v146));
                if (!v148)
                {
                  v149 = *(unint64_t **)v145;
                  if (!*(_QWORD *)v145)
                    goto LABEL_284;
                  if (*((char *)v149 + 31) < 0)
                    operator delete((void *)v149[1]);
                  v150 = v149;
                  v151 = 0x1012C404EF22A49;
                  goto LABEL_283;
                }
                break;
              case 3:
                v163 = *(unint64_t **)v145;
                do
                {
                  v164 = __ldaxr(v163);
                  v165 = v164 - 1;
                }
                while (__stlxr(v165, v163));
                if (!v165)
                {
                  v166 = *(unint64_t **)v145;
                  if (!*(_QWORD *)v145)
                    goto LABEL_284;
                  v167 = (void *)v166[1];
                  if (v167)
                  {
                    v166[2] = (unint64_t)v167;
                    operator delete(v167);
                  }
                  v150 = v166;
                  v151 = 0x1080C409938AC02;
                  goto LABEL_283;
                }
                break;
              case 4:
                v152 = *(unint64_t **)v145;
                do
                {
                  v153 = __ldaxr(v152);
                  v154 = v153 - 1;
                }
                while (__stlxr(v154, v152));
                if (!v154)
                {
                  v155 = *(unint64_t **)v145;
                  if (!*(_QWORD *)v145)
                    goto LABEL_284;
                  v183.__r_.__value_.__r.__words[0] = (std::string::size_type)(v155 + 1);
                  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v183);
                  goto LABEL_276;
                }
                break;
              case 5:
                v168 = *(unint64_t **)v145;
                do
                {
                  v169 = __ldaxr(v168);
                  v170 = v169 - 1;
                }
                while (__stlxr(v170, v168));
                if (!v170)
                {
                  v155 = *(unint64_t **)v145;
                  if (!*(_QWORD *)v145)
                    goto LABEL_284;
                  v183.__r_.__value_.__r.__words[0] = (std::string::size_type)(v155 + 1);
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v183);
LABEL_276:
                  v150 = v155;
                  v151 = 0x1020C405E66F15BLL;
                  goto LABEL_283;
                }
                break;
              case 8:
                v171 = *(unint64_t **)v145;
                do
                {
                  v172 = __ldaxr(v171);
                  v173 = v172 - 1;
                }
                while (__stlxr(v173, v171));
                if (!v173)
                {
                  v174 = *(unint64_t **)v145;
                  if (!*(_QWORD *)v145)
                    goto LABEL_284;
                  boost::detail::shared_count::~shared_count((unsigned int **)v174 + 2);
                  v150 = v174;
                  v162 = -235920773;
                  goto LABEL_282;
                }
                break;
              case 9:
                v156 = *(unint64_t **)v145;
                do
                {
                  v157 = __ldaxr(v156);
                  v158 = v157 - 1;
                }
                while (__stlxr(v158, v156));
                if (!v158)
                {
                  v159 = *(unint64_t **)v145;
                  if (*(_QWORD *)v145)
                  {
                    v160 = (void *)v159[6];
                    if (v160)
                    {
                      v159[7] = (unint64_t)v160;
                      operator delete(v160);
                    }
                    v161 = (void *)v159[3];
                    if (v161)
                    {
                      v159[4] = (unint64_t)v161;
                      operator delete(v161);
                    }
                    std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v159 + 1));
                    v150 = v159;
                    v162 = 2071181815;
LABEL_282:
                    v151 = v162 | 0x1030C4000000000;
LABEL_283:
                    MEMORY[0x219A19A08](v150, v151);
                  }
LABEL_284:
                  *(_QWORD *)v145 = 0;
                }
                break;
              default:
                break;
            }
            *(_QWORD *)v145 = v138;
            *(_DWORD *)(v145 + 8) = 0;
            *(_BYTE *)(v145 + 12) = 9;
            if (*(_QWORD *)&v181[8])
            {
              *(_QWORD *)&v181[16] = *(_QWORD *)&v181[8];
              operator delete(*(void **)&v181[8]);
            }
            if (v180[0])
            {
              v180[1] = v180[0];
              operator delete(v180[0]);
            }
            v175 = (std::__shared_weak_count *)__p[1];
            if (__p[1])
            {
              v176 = (unint64_t *)((char *)__p[1] + 8);
              do
                v177 = __ldaxr(v176);
              while (__stlxr(v177 - 1, v176));
              if (!v177)
              {
                ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
                std::__shared_weak_count::__release_weak(v175);
              }
            }
            a5 = 0;
LABEL_295:
            v9 = 1;
            *(_BYTE *)(a1 + 264) = 1;
          }
          ++v8;
          if (a5 || v8 < a4[1])
          {
LABEL_298:
            if (!v9)
              continue;
            v80 = *(_QWORD *)(a1 + 248) + 1;
            *(_QWORD *)(a1 + 248) = v80;
            goto LABEL_139;
          }
          break;
        }
        v130 = 957;
LABEL_301:
        *(_DWORD *)a1 = v130;
        return v8 != 0;
      default:
        turi::apply_binary_op_ff();
    }
  }
}

void sub_21819AA54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  BOOL v13;
  _QWORD *v14;

  MEMORY[0x219A19A08](v9, 0x1030C407B73B9F7);
  do
  {
    v11 = __ldaxr(v10);
    v12 = v11 - 1;
  }
  while (__stlxr(v12, v10));
  if (v12)
    v13 = 1;
  else
    v13 = v10 == 0;
  if (!v13)
  {
    v14 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v10);
    MEMORY[0x219A19A08](v14, 0x1030C407B73B9F7);
  }
  turi::flexible_type_impl::ndarray<double>::~ndarray(&a9);
  JUMPOUT(0x21819AAECLL);
}

uint64_t turi::v2_block_impl::typed_decode_stream::typed_decode_stream(uint64_t a1, __int128 *a2, _BYTE *a3, uint64_t a4)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  int8x8_t **v9;
  unsigned __int8 *v10;
  uint64_t v11;
  int v12;
  int *v13;
  file_logger *v14;
  file_logger *started;
  _QWORD *v16;
  _QWORD *v17;
  const std::locale::facet *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  char locale;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  size_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int8x8_t *v39;
  int8x8_t v40;
  uint8x8_t v41;
  file_logger *v43;
  pthread_key_t *v44;
  pthread_key_t *v45;
  pthread_key_t *v46;
  _QWORD *exception;
  std::locale v48;

  *(_DWORD *)a1 = 0;
  v6 = *a2;
  v7 = a2[1];
  v8 = a2[2];
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 40) = v8;
  *(_OWORD *)(a1 + 24) = v7;
  *(_OWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 56) = a3;
  *(_QWORD *)(a1 + 64) = a4;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = a3;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = a4;
  *(_QWORD *)(a1 + 136) = 0;
  v9 = (int8x8_t **)(a1 + 136);
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_QWORD *)(a1 + 280) = a1 + 72;
  *(_QWORD *)(a1 + 288) = 0;
  *(_DWORD *)(a1 + 296) = 0;
  *(_BYTE *)(a1 + 300) = 0;
  *(_QWORD *)(a1 + 112) = *((_QWORD *)a2 + 3);
  v10 = (unsigned __int8 *)(a1 + 160);
  *(_QWORD *)(a1 + 128) = 0;
  if (a3)
  {
    *(_BYTE *)(a1 + 160) = *a3;
    *(_QWORD *)(a1 + 96) = 1;
  }
  else
  {
    std::istream::read();
  }
  v11 = *((_QWORD *)a2 + 4);
  v12 = (v11 & 4) == 0;
  *(_BYTE *)(a1 + 161) = v12;
  if ((v11 & 2) == 0)
  {
    v13 = (int *)global_logger();
    if (v13[169] <= 6)
    {
      if (cppipc::must_cancel((cppipc *)v13))
        log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
      v14 = (file_logger *)global_logger();
      started = file_logger::start_stream(v14, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray_v2_type_encoding.cpp", "typed_decode_stream", 976, 1);
      v16 = pthread_getspecific(*((_QWORD *)started + 74));
      if (v16 && *((_BYTE *)v16 + 280))
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16 + 2, (uint64_t)"Attempting to decode a non-typed block", 38);
      v17 = pthread_getspecific(*((_QWORD *)started + 74));
      if (v17)
      {
        if (*((_BYTE *)v17 + 280))
        {
          std::ios_base::getloc((const std::ios_base *)((char *)v17 + *(_QWORD *)(v17[2] - 24) + 16));
          v18 = std::locale::use_facet(&v48, MEMORY[0x24BEDB350]);
          ((void (*)(const std::locale::facet *, uint64_t))v18->__vftable[2].~facet_0)(v18, 10);
          std::locale::~locale(&v48);
          std::ostream::put();
          std::ostream::flush();
          file_logger::stream_flush(started);
          if (*((_DWORD *)started + 150) == 7)
          {
            __print_back_trace();
            exception = __cxa_allocate_exception(8uLL);
            *exception = "LOG_FATAL encountered";
            __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
          }
        }
      }
    }
    if ((a2[2] & 2) == 0)
      turi::v2_block_impl::typed_decode_stream::typed_decode_stream(turi::v2_block_impl::block_info const&,char *,unsigned long)::$_0::operator()();
    v12 = *(unsigned __int8 *)(a1 + 161);
  }
  if (v12)
  {
    v19 = *v10;
    if (v19 == 2)
    {
      LOBYTE(v48.__locale_) = 0;
      v23 = *(_QWORD *)(a1 + 88);
      if (v23)
      {
        v24 = *(_QWORD *)(a1 + 96);
        locale = *(_BYTE *)(v23 + v24);
        LOBYTE(v48.__locale_) = locale;
        *(_QWORD *)(a1 + 96) = v24 + 1;
      }
      else
      {
        std::istream::read();
        locale = (char)v48.__locale_;
      }
      *(_BYTE *)(a1 + 120) = locale;
      v26 = *((_QWORD *)a2 + 3);
      v27 = *(_QWORD *)(a1 + 152);
      v28 = v26 >> 6;
      if ((v26 & 0x3F) != 0)
        ++v28;
      *(_QWORD *)(a1 + 144) = v26;
      *(_QWORD *)(a1 + 152) = v28;
      v29 = (char *)malloc_type_realloc(*(void **)(a1 + 136), 8 * v28, 0x100004000313F17uLL);
      v30 = v29;
      *(_QWORD *)(a1 + 136) = v29;
      v31 = *(_QWORD *)(a1 + 144) & 0x3FLL;
      if (v31)
        *(_QWORD *)&v29[8 * *(_QWORD *)(a1 + 152) - 8] &= ~(-1 << v31);
      v32 = *(_QWORD *)(a1 + 152);
      if (v32 > v27)
      {
        v33 = &v29[8 * v27];
        v34 = 8 * v32 - 8 * v27;
        if (v34 >= 1)
        {
          bzero(v33, 8 * (((unint64_t)v34 >> 3) - ((unint64_t)v34 > 7)) + 8);
          v32 = *(_QWORD *)(a1 + 152);
        }
      }
      if (v32 >= 1)
      {
        bzero(v30, 8 * (v32 - ((v32 & 0x1FFFFFFFFFFFFFFFLL) != 0)) + 8);
        v32 = *(_QWORD *)(a1 + 152);
      }
      v35 = 8 * v32;
      v36 = *(_QWORD *)(a1 + 88);
      if (v36)
      {
        memcpy(v30, (const void *)(v36 + *(_QWORD *)(a1 + 96)), v35);
        *(_QWORD *)(a1 + 96) += v35;
      }
      else
      {
        std::istream::read();
      }
      v37 = *(_QWORD *)(a1 + 152);
      if (v37)
      {
        v38 = 0;
        v39 = *v9;
        do
        {
          v40 = *v39++;
          v41 = (uint8x8_t)vcnt_s8(v40);
          v41.i16[0] = vaddlv_u8(v41);
          v38 += v41.u32[0];
          --v37;
        }
        while (v37);
      }
      else
      {
        v38 = 0;
      }
      *(_QWORD *)(a1 + 128) = v38;
    }
    else
    {
      if (v19 != 1)
      {
        if (*((int *)global_logger() + 169) <= 6)
        {
          v43 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray_v2_type_encoding.cpp", "typed_decode_stream", 998, 1);
          v44 = file_logger::operator<<((pthread_key_t *)v43, "Unexpected value for num_types: ");
          v45 = (pthread_key_t *)file_logger::operator<<<int>((uint64_t)v44);
          v46 = file_logger::operator<<(v45, " (expected 0, 1, or 2)");
          file_logger::operator<<((uint64_t)v46, (void (*)(_BYTE *))std::endl[abi:ne180100]<char,std::char_traits<char>>);
        }
        turi::v2_block_impl::typed_decode_stream::typed_decode_stream(turi::v2_block_impl::block_info const&,char *,unsigned long)::$_1::operator()();
      }
      LOBYTE(v48.__locale_) = 0;
      v20 = *(_QWORD *)(a1 + 88);
      if (v20)
      {
        v21 = *(_QWORD *)(a1 + 96);
        v22 = *(_BYTE *)(v20 + v21);
        *(_QWORD *)(a1 + 96) = v21 + 1;
      }
      else
      {
        std::istream::read();
        v22 = (char)v48.__locale_;
      }
      *(_BYTE *)(a1 + 120) = v22;
    }
  }
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a1 + 112) - *(_QWORD *)(a1 + 128);
  return a1;
}

void sub_21819AF6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _QWORD *a9, std::locale a10)
{
  uint64_t v10;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  unsigned int v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  void *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;

  switch(*(_BYTE *)(v10 + 300))
  {
    case 2:
      v12 = *(unint64_t **)(v10 + 288);
      do
      {
        v13 = __ldaxr(v12);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, v12));
      if (v14)
        goto LABEL_40;
      v15 = *(_QWORD *)(v10 + 288);
      if (!v15)
        goto LABEL_39;
      if (*(char *)(v15 + 31) < 0)
        operator delete(*(void **)(v15 + 8));
      v16 = (_QWORD *)v15;
      v17 = 0x1012C404EF22A49;
      goto LABEL_38;
    case 3:
      v27 = *(unint64_t **)(v10 + 288);
      do
      {
        v28 = __ldaxr(v27);
        v29 = v28 - 1;
      }
      while (__stlxr(v29, v27));
      if (v29)
        goto LABEL_40;
      v30 = *(_QWORD **)(v10 + 288);
      if (!v30)
        goto LABEL_39;
      v31 = (void *)v30[1];
      if (v31)
      {
        v30[2] = v31;
        operator delete(v31);
      }
      v16 = v30;
      v17 = 0x1080C409938AC02;
      goto LABEL_38;
    case 4:
      v18 = *(unint64_t **)(v10 + 288);
      do
      {
        v19 = __ldaxr(v18);
        v20 = v19 - 1;
      }
      while (__stlxr(v20, v18));
      if (v20)
        goto LABEL_40;
      v21 = *(_QWORD **)(v10 + 288);
      if (!v21)
        goto LABEL_39;
      a9 = v21 + 1;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
      goto LABEL_31;
    case 5:
      v32 = *(unint64_t **)(v10 + 288);
      do
      {
        v33 = __ldaxr(v32);
        v34 = v33 - 1;
      }
      while (__stlxr(v34, v32));
      if (v34)
        goto LABEL_40;
      v21 = *(_QWORD **)(v10 + 288);
      if (!v21)
        goto LABEL_39;
      a9 = v21 + 1;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
LABEL_31:
      v16 = v21;
      v17 = 0x1020C405E66F15BLL;
      goto LABEL_38;
    case 8:
      v35 = *(unint64_t **)(v10 + 288);
      do
      {
        v36 = __ldaxr(v35);
        v37 = v36 - 1;
      }
      while (__stlxr(v37, v35));
      if (v37)
        goto LABEL_40;
      v38 = *(_QWORD *)(v10 + 288);
      if (!v38)
        goto LABEL_39;
      boost::detail::shared_count::~shared_count((unsigned int **)(v38 + 16));
      v16 = (_QWORD *)v38;
      v26 = -235920773;
      goto LABEL_37;
    case 9:
      v22 = *(unint64_t **)(v10 + 288);
      do
      {
        v23 = __ldaxr(v22);
        v24 = v23 - 1;
      }
      while (__stlxr(v24, v22));
      if (v24)
        goto LABEL_40;
      v25 = *(_QWORD **)(v10 + 288);
      if (!v25)
        goto LABEL_39;
      v16 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v25);
      v26 = 2071181815;
LABEL_37:
      v17 = v26 | 0x1030C4000000000;
LABEL_38:
      MEMORY[0x219A19A08](v16, v17);
LABEL_39:
      *(_QWORD *)(v10 + 288) = 0;
LABEL_40:
      *(_QWORD *)(v10 + 288) = 0;
      *(_DWORD *)(v10 + 296) = 0;
      *(_BYTE *)(v10 + 300) = 0;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
      free(*(void **)(v10 + 136));
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_40;
  }
}

void turi::v2_block_impl::typed_decode_stream::typed_decode_stream(turi::v2_block_impl::block_info const&,char *,unsigned long)::$_0::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray_v2_type_encoding.cpp", 118);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"info.flags & IS_FLEXIBLE_TYPE", 29);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray_v2_type_encoding.cpp", "operator()", 978, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::v2_block_impl::typed_decode_stream::typed_decode_stream(turi::v2_block_impl::block_info const&,char *,unsigned long)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_21819B258(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::v2_block_impl::typed_decode_stream::typed_decode_stream(turi::v2_block_impl::block_info const&,char *,unsigned long)::$_1::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray_v2_type_encoding.cpp", 118);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray_v2_type_encoding.cpp", "operator()", 1001, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::v2_block_impl::typed_decode_stream::typed_decode_stream(turi::v2_block_impl::block_info const&,char *,unsigned long)::$_1::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_21819B3D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::v2_block_impl::typed_decode_stream::~typed_decode_stream(turi::v2_block_impl::typed_decode_stream *this)
{
  uint64_t v2;
  uint64_t v3;
  turi::v2_block_impl::decode_double_stream_legacy *v4;
  turi::v2_block_impl::decode_string_stream *v5;
  turi::v2_block_impl::decode_vector_stream *v6;
  turi::v2_block_impl::decode_ndvector_stream *v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  void *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  void *v35;
  void *v36;
  void **v37;

  v2 = *((_QWORD *)this + 29);
  if (v2)
    MEMORY[0x219A19A08](v2, 0x1000C400FD881E6);
  v3 = *((_QWORD *)this + 30);
  if (v3)
  {
    turi::v2_block_impl::decode_double_stream_legacy::~decode_double_stream_legacy((turi::v2_block_impl::decode_double_stream_legacy *)(v3 + 24));
    MEMORY[0x219A19A08](v3, 0x1022C4092BDF265);
  }
  v4 = (turi::v2_block_impl::decode_double_stream_legacy *)*((_QWORD *)this + 31);
  if (v4)
  {
    turi::v2_block_impl::decode_double_stream_legacy::~decode_double_stream_legacy(v4);
    MEMORY[0x219A19A08]();
  }
  v5 = (turi::v2_block_impl::decode_string_stream *)*((_QWORD *)this + 32);
  if (v5)
  {
    turi::v2_block_impl::decode_string_stream::~decode_string_stream(v5);
    MEMORY[0x219A19A08]();
  }
  v6 = (turi::v2_block_impl::decode_vector_stream *)*((_QWORD *)this + 33);
  if (v6)
  {
    turi::v2_block_impl::decode_vector_stream::~decode_vector_stream(v6);
    MEMORY[0x219A19A08]();
  }
  v7 = (turi::v2_block_impl::decode_ndvector_stream *)*((_QWORD *)this + 34);
  if (v7)
  {
    turi::v2_block_impl::decode_ndvector_stream::~decode_ndvector_stream(v7);
    MEMORY[0x219A19A08]();
  }
  switch(*((_BYTE *)this + 300))
  {
    case 2:
      v8 = (unint64_t *)*((_QWORD *)this + 36);
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        v11 = *((_QWORD *)this + 36);
        if (v11)
        {
          if (*(char *)(v11 + 31) < 0)
            operator delete(*(void **)(v11 + 8));
          v12 = (_QWORD *)v11;
          v13 = 0x1012C404EF22A49;
          goto LABEL_54;
        }
      }
      break;
    case 3:
      v14 = (unint64_t *)*((_QWORD *)this + 36);
      do
      {
        v15 = __ldaxr(v14);
        v16 = v15 - 1;
      }
      while (__stlxr(v16, v14));
      if (!v16)
      {
        v17 = (_QWORD *)*((_QWORD *)this + 36);
        if (v17)
        {
          v18 = (void *)v17[1];
          if (v18)
          {
            v17[2] = v18;
            operator delete(v18);
          }
          v12 = v17;
          v13 = 0x1080C409938AC02;
          goto LABEL_54;
        }
      }
      break;
    case 4:
      v19 = (unint64_t *)*((_QWORD *)this + 36);
      do
      {
        v20 = __ldaxr(v19);
        v21 = v20 - 1;
      }
      while (__stlxr(v21, v19));
      if (!v21)
      {
        v22 = *((_QWORD *)this + 36);
        if (v22)
        {
          v37 = (void **)(v22 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v37);
          goto LABEL_38;
        }
      }
      break;
    case 5:
      v23 = (unint64_t *)*((_QWORD *)this + 36);
      do
      {
        v24 = __ldaxr(v23);
        v25 = v24 - 1;
      }
      while (__stlxr(v25, v23));
      if (!v25)
      {
        v22 = *((_QWORD *)this + 36);
        if (v22)
        {
          v37 = (void **)(v22 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v37);
LABEL_38:
          v12 = (_QWORD *)v22;
          v13 = 0x1020C405E66F15BLL;
          goto LABEL_54;
        }
      }
      break;
    case 8:
      v26 = (unint64_t *)*((_QWORD *)this + 36);
      do
      {
        v27 = __ldaxr(v26);
        v28 = v27 - 1;
      }
      while (__stlxr(v28, v26));
      if (!v28)
      {
        v29 = *((_QWORD *)this + 36);
        if (v29)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v29 + 16));
          v12 = (_QWORD *)v29;
          v30 = -235920773;
          goto LABEL_53;
        }
      }
      break;
    case 9:
      v31 = (unint64_t *)*((_QWORD *)this + 36);
      do
      {
        v32 = __ldaxr(v31);
        v33 = v32 - 1;
      }
      while (__stlxr(v33, v31));
      if (!v33)
      {
        v34 = (_QWORD *)*((_QWORD *)this + 36);
        if (v34)
        {
          v35 = (void *)v34[6];
          if (v35)
          {
            v34[7] = v35;
            operator delete(v35);
          }
          v36 = (void *)v34[3];
          if (v36)
          {
            v34[4] = v36;
            operator delete(v36);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v34 + 1));
          v12 = v34;
          v30 = 2071181815;
LABEL_53:
          v13 = v30 | 0x1030C4000000000;
LABEL_54:
          MEMORY[0x219A19A08](v12, v13);
        }
      }
      break;
    default:
      break;
  }
  *((_QWORD *)this + 36) = 0;
  *((_DWORD *)this + 74) = 0;
  *((_BYTE *)this + 300) = 0;
  v37 = (void **)((char *)this + 176);
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v37);
  free(*((void **)this + 17));
}

unint64_t turi::v2_block_impl::typed_decode_stream::read(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  BOOL v9;
  int v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  void *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t *v34;
  unsigned int v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t *v39;
  void *v40;
  void *v41;
  uint64_t v42;
  BOOL v43;
  int v44;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t *v56;
  unint64_t *v57;
  uint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t *v62;
  unint64_t *v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t *v66;
  void *v67;
  void *v68;
  unsigned int v69;
  unint64_t *v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t *v73;
  void *v74;
  unint64_t *v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t *v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t *v81;
  int v82;
  uint64_t v83;
  _QWORD *v84;
  int v85;
  int v86;
  unint64_t v87;
  unint64_t v88;
  turi::v2_block_impl::decode_string_stream *v89;
  int v90;
  _DWORD *v91;
  turi::v2_block_impl::decode_vector_stream *v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  int v98;
  uint64_t *v99;
  unint64_t *v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  unint64_t *v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  void *v110;
  unint64_t *v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t *v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t *v118;
  unint64_t v119;
  unint64_t v120;
  uint64_t v121;
  unsigned int v122;
  unint64_t *v123;
  unint64_t v124;
  unint64_t v125;
  _QWORD *v126;
  void *v127;
  void *v128;
  turi::iarchive *v129;
  uint64_t v130;
  uint64_t v131;
  _QWORD *v132;
  unint64_t v133;
  unint64_t v134;
  _QWORD *v135;
  unint64_t v136;
  unint64_t v137;
  void *v138;
  _QWORD *v139;
  unint64_t v140;
  unint64_t v141;
  _QWORD *v142;
  unint64_t v143;
  unint64_t v144;
  _DWORD *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unsigned int *v150;
  unsigned int v151;
  __int128 v152;
  __int128 v153;
  unint64_t v154;
  unint64_t v155;
  _QWORD *v156;
  uint64_t v157;
  unint64_t v158;
  unint64_t v159;
  _QWORD *v160;
  uint64_t v161;
  char v162;
  char v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t *v166;
  unint64_t v167;
  unint64_t v168;
  unint64_t *v169;
  unint64_t *v170;
  uint64_t v171;
  unint64_t *v172;
  unint64_t v173;
  unint64_t v174;
  unint64_t *v175;
  unint64_t *v176;
  unint64_t v177;
  unint64_t v178;
  unsigned int v179;
  unint64_t *v180;
  unint64_t v181;
  unint64_t v182;
  unint64_t *v183;
  void *v184;
  unint64_t *v185;
  unint64_t v186;
  unint64_t v187;
  unint64_t *v188;
  unint64_t v189;
  unint64_t v190;
  unint64_t *v191;
  uint64_t v192;
  uint64_t v193;
  unint64_t v194;
  uint64_t v195;
  uint64_t v196;
  unint64_t *v197;
  unint64_t v198;
  unint64_t v199;
  unint64_t *v200;
  unint64_t *v201;
  uint64_t v202;
  unint64_t *v203;
  unint64_t v204;
  unint64_t v205;
  unint64_t *v206;
  void *v207;
  unint64_t *v208;
  unint64_t v209;
  unint64_t v210;
  unint64_t *v211;
  unint64_t *v212;
  unint64_t v213;
  unint64_t v214;
  unint64_t *v215;
  unint64_t v216;
  unint64_t v217;
  unint64_t *v218;
  unsigned int v219;
  unint64_t *v220;
  unint64_t v221;
  unint64_t v222;
  uint64_t v223;
  void **v225;

  v3 = a3;
  v7 = *a2;
  v6 = a2[1];
  if (a3)
  {
    if (v7)
      v8 = 0;
    else
      v8 = v6 == 0;
    if (!v8)
      turi::v2_block_impl::typed_decode_stream::read(std::pair<turi::flexible_type *,unsigned long> const&,unsigned long)::$_1::operator()();
    v6 = 0;
    v7 = 0;
  }
  else
  {
    if (v7)
      v9 = v6 == 0;
    else
      v9 = 1;
    if (v9)
      turi::v2_block_impl::typed_decode_stream::read(std::pair<turi::flexible_type *,unsigned long> const&,unsigned long)::$_0::operator()();
  }
  if (!*(_BYTE *)(a1 + 161))
    goto LABEL_122;
  v10 = *(unsigned __int8 *)(a1 + 160);
  if (v10 != 2)
  {
    if (v10 == 1)
    {
      if (v7 && *(_BYTE *)(a1 + 120) == 7)
      {
        if (v6)
        {
          v11 = 0;
          do
          {
            v12 = *a2 + 16 * v11;
            if ((uint64_t *)v12 != &turi::FLEX_UNDEFINED)
            {
              switch(*(_BYTE *)(v12 + 12))
              {
                case 2:
                  v13 = *(unint64_t **)v12;
                  do
                  {
                    v14 = __ldaxr(v13);
                    v15 = v14 - 1;
                  }
                  while (__stlxr(v15, v13));
                  if (!v15)
                  {
                    v16 = *(unint64_t **)v12;
                    if (!*(_QWORD *)v12)
                      goto LABEL_62;
                    if (*((char *)v16 + 31) < 0)
                      operator delete((void *)v16[1]);
                    v17 = v16;
                    v18 = 0x1012C404EF22A49;
                    goto LABEL_61;
                  }
                  break;
                case 3:
                  v19 = *(unint64_t **)v12;
                  do
                  {
                    v20 = __ldaxr(v19);
                    v21 = v20 - 1;
                  }
                  while (__stlxr(v21, v19));
                  if (!v21)
                  {
                    v22 = *(unint64_t **)v12;
                    if (!*(_QWORD *)v12)
                      goto LABEL_62;
                    v23 = (void *)v22[1];
                    if (v23)
                    {
                      v22[2] = (unint64_t)v23;
                      operator delete(v23);
                    }
                    v17 = v22;
                    v18 = 0x1080C409938AC02;
                    goto LABEL_61;
                  }
                  break;
                case 4:
                  v24 = *(unint64_t **)v12;
                  do
                  {
                    v25 = __ldaxr(v24);
                    v26 = v25 - 1;
                  }
                  while (__stlxr(v26, v24));
                  if (!v26)
                  {
                    v27 = *(unint64_t **)v12;
                    if (!*(_QWORD *)v12)
                      goto LABEL_62;
                    v225 = (void **)(v27 + 1);
                    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v225);
                    goto LABEL_45;
                  }
                  break;
                case 5:
                  v28 = *(unint64_t **)v12;
                  do
                  {
                    v29 = __ldaxr(v28);
                    v30 = v29 - 1;
                  }
                  while (__stlxr(v30, v28));
                  if (!v30)
                  {
                    v27 = *(unint64_t **)v12;
                    if (!*(_QWORD *)v12)
                      goto LABEL_62;
                    v225 = (void **)(v27 + 1);
                    std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v225);
LABEL_45:
                    v17 = v27;
                    v18 = 0x1020C405E66F15BLL;
                    goto LABEL_61;
                  }
                  break;
                case 8:
                  v31 = *(unint64_t **)v12;
                  do
                  {
                    v32 = __ldaxr(v31);
                    v33 = v32 - 1;
                  }
                  while (__stlxr(v33, v31));
                  if (!v33)
                  {
                    v34 = *(unint64_t **)v12;
                    if (!*(_QWORD *)v12)
                      goto LABEL_62;
                    boost::detail::shared_count::~shared_count((unsigned int **)v34 + 2);
                    v17 = v34;
                    v35 = -235920773;
                    goto LABEL_60;
                  }
                  break;
                case 9:
                  v36 = *(unint64_t **)v12;
                  do
                  {
                    v37 = __ldaxr(v36);
                    v38 = v37 - 1;
                  }
                  while (__stlxr(v38, v36));
                  if (!v38)
                  {
                    v39 = *(unint64_t **)v12;
                    if (*(_QWORD *)v12)
                    {
                      v40 = (void *)v39[6];
                      if (v40)
                      {
                        v39[7] = (unint64_t)v40;
                        operator delete(v40);
                      }
                      v41 = (void *)v39[3];
                      if (v41)
                      {
                        v39[4] = (unint64_t)v41;
                        operator delete(v41);
                      }
                      std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v39 + 1));
                      v17 = v39;
                      v35 = 2071181815;
LABEL_60:
                      v18 = v35 | 0x1030C4000000000;
LABEL_61:
                      MEMORY[0x219A19A08](v17, v18);
                    }
LABEL_62:
                    *(_QWORD *)v12 = 0;
                  }
                  break;
                default:
                  break;
              }
              v42 = turi::FLEX_UNDEFINED;
              *(_QWORD *)(v12 + 5) = *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5);
              *(_QWORD *)v12 = v42;
              LODWORD(v42) = byte_254FF26E4;
              *(_BYTE *)(v12 + 12) = byte_254FF26E4;
              v43 = v42 > 9;
              v44 = (1 << v42) & 0x33C;
              if (!v43 && v44 != 0)
              {
                v46 = *(unint64_t **)v12;
                do
                  v47 = __ldaxr(v46);
                while (__stlxr(v47 + 1, v46));
              }
            }
            ++v11;
          }
          while (v11 < a2[1]);
        }
      }
      else if (v6)
      {
        v51 = 0;
        do
        {
          v52 = *a2 + 16 * v51;
          switch(*(_BYTE *)(v52 + 12))
          {
            case 2:
              v53 = *(unint64_t **)v52;
              do
              {
                v54 = __ldaxr(v53);
                v55 = v54 - 1;
              }
              while (__stlxr(v55, v53));
              if (!v55)
              {
                v56 = *(unint64_t **)v52;
                if (!*(_QWORD *)v52)
                  goto LABEL_120;
                if (*((char *)v56 + 31) < 0)
                  operator delete((void *)v56[1]);
                v57 = v56;
                v58 = 0x1012C404EF22A49;
                goto LABEL_119;
              }
              break;
            case 3:
              v70 = *(unint64_t **)v52;
              do
              {
                v71 = __ldaxr(v70);
                v72 = v71 - 1;
              }
              while (__stlxr(v72, v70));
              if (!v72)
              {
                v73 = *(unint64_t **)v52;
                if (!*(_QWORD *)v52)
                  goto LABEL_120;
                v74 = (void *)v73[1];
                if (v74)
                {
                  v73[2] = (unint64_t)v74;
                  operator delete(v74);
                }
                v57 = v73;
                v58 = 0x1080C409938AC02;
                goto LABEL_119;
              }
              break;
            case 4:
              v59 = *(unint64_t **)v52;
              do
              {
                v60 = __ldaxr(v59);
                v61 = v60 - 1;
              }
              while (__stlxr(v61, v59));
              if (!v61)
              {
                v62 = *(unint64_t **)v52;
                if (!*(_QWORD *)v52)
                  goto LABEL_120;
                v225 = (void **)(v62 + 1);
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v225);
                goto LABEL_112;
              }
              break;
            case 5:
              v75 = *(unint64_t **)v52;
              do
              {
                v76 = __ldaxr(v75);
                v77 = v76 - 1;
              }
              while (__stlxr(v77, v75));
              if (!v77)
              {
                v62 = *(unint64_t **)v52;
                if (!*(_QWORD *)v52)
                  goto LABEL_120;
                v225 = (void **)(v62 + 1);
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v225);
LABEL_112:
                v57 = v62;
                v58 = 0x1020C405E66F15BLL;
                goto LABEL_119;
              }
              break;
            case 8:
              v78 = *(unint64_t **)v52;
              do
              {
                v79 = __ldaxr(v78);
                v80 = v79 - 1;
              }
              while (__stlxr(v80, v78));
              if (!v80)
              {
                v81 = *(unint64_t **)v52;
                if (!*(_QWORD *)v52)
                  goto LABEL_120;
                boost::detail::shared_count::~shared_count((unsigned int **)v81 + 2);
                v57 = v81;
                v69 = -235920773;
                goto LABEL_118;
              }
              break;
            case 9:
              v63 = *(unint64_t **)v52;
              do
              {
                v64 = __ldaxr(v63);
                v65 = v64 - 1;
              }
              while (__stlxr(v65, v63));
              if (!v65)
              {
                v66 = *(unint64_t **)v52;
                if (*(_QWORD *)v52)
                {
                  v67 = (void *)v66[6];
                  if (v67)
                  {
                    v66[7] = (unint64_t)v67;
                    operator delete(v67);
                  }
                  v68 = (void *)v66[3];
                  if (v68)
                  {
                    v66[4] = (unint64_t)v68;
                    operator delete(v68);
                  }
                  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v66 + 1));
                  v57 = v66;
                  v69 = 2071181815;
LABEL_118:
                  v58 = v69 | 0x1030C4000000000;
LABEL_119:
                  MEMORY[0x219A19A08](v57, v58);
                }
LABEL_120:
                *(_QWORD *)v52 = 0;
              }
              break;
            default:
              break;
          }
          *(_QWORD *)v52 = 0;
          *(_DWORD *)(v52 + 8) = 0;
          *(_BYTE *)(v52 + 12) = 0;
          ++v51;
        }
        while (v51 < a2[1]);
      }
    }
LABEL_122:
    v48 = v3;
    goto LABEL_123;
  }
  if (a3)
  {
    v48 = 0;
    v49 = *(_QWORD *)(a1 + 136);
    v50 = *(_QWORD *)(a1 + 200);
    do
    {
      v48 += (~*(_QWORD *)(v49 + ((v50 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v50) & 1;
      *(_QWORD *)(a1 + 200) = ++v50;
      --v3;
    }
    while (v3);
    if (!v48)
      return 0;
  }
  else
  {
    v48 = 0;
    if (!turi::v2_block_impl::typed_decode_stream::pad_retbuf_with_undefined_positions((_QWORD *)a1, a2))
      return v3;
  }
LABEL_123:
  v3 = 0;
  v82 = *(_DWORD *)a1;
  if (*(int *)a1 <= 1113)
  {
    if (v82 > 1082)
    {
      if (v82 != 1083)
      {
        if (v82 == 1096)
        {
          v84 = (_QWORD *)(a1 + 232);
          v91 = *(_DWORD **)(a1 + 232);
          if (*v91)
          {
LABEL_150:
            v3 = turi::v2_block_impl::decode_number_stream::read((uint64_t)v91, *(_QWORD *)(a1 + 208), (turi::iarchive *)(a1 + 72), a2, v48);
            v85 = 1096;
            goto LABEL_403;
          }
          goto LABEL_174;
        }
        if (v82 == 1106)
        {
          v84 = (_QWORD *)(a1 + 240);
          v83 = *(_QWORD *)(a1 + 240);
          if (*(_DWORD *)v83)
          {
LABEL_129:
            v3 = turi::v2_block_impl::decode_double_stream::read((int *)v83, *(_QWORD *)(a1 + 208), (turi::iarchive *)(a1 + 72), a2, v48);
            v85 = 1106;
            goto LABEL_403;
          }
          turi::v2_block_impl::decode_double_stream_legacy::~decode_double_stream_legacy((turi::v2_block_impl::decode_double_stream_legacy *)(v83 + 24));
LABEL_174:
          MEMORY[0x219A19A08]();
          v85 = 0;
          v3 = 0;
          *v84 = 0;
          goto LABEL_403;
        }
        return v3;
      }
      v3 = 0;
      v90 = *(unsigned __int8 *)(a1 + 224);
      while (1)
      {
        if (v90)
        {
          v95 = *(_QWORD *)(a1 + 168) + 1;
          *(_QWORD *)(a1 + 168) = v95;
LABEL_347:
          if (v95 >= (uint64_t)(*(_QWORD *)(a1 + 184) - *(_QWORD *)(a1 + 176)) >> 4)
            return v3;
        }
        *(_BYTE *)(a1 + 224) = 0;
        if (!v48)
          break;
        v193 = *(_QWORD *)(a1 + 168);
        v194 = ((uint64_t)(*(_QWORD *)(a1 + 184) - *(_QWORD *)(a1 + 176)) >> 4) - v193;
        if (v48 < v194)
          v194 = v48;
        if (v194)
        {
          *(_QWORD *)(a1 + 168) = v193 + v194 - 1;
          v48 -= v194;
          v3 += v194;
          v90 = 1;
          *(_BYTE *)(a1 + 224) = 1;
          if (!v48)
          {
LABEL_399:
            if (v3 >= a2[1])
            {
              v85 = 1083;
              goto LABEL_403;
            }
          }
        }
        else
        {
          v90 = 0;
        }
      }
      v90 = 0;
      v195 = *a2 + 16 * v3;
      if (*(_BYTE *)(v195 + 12) != 7)
      {
        v196 = *(_QWORD *)(a1 + 176) + 16 * *(_QWORD *)(a1 + 168);
        if (v196 != v195)
        {
          switch(*(_BYTE *)(v195 + 12))
          {
            case 2:
              v197 = *(unint64_t **)v195;
              do
              {
                v198 = __ldaxr(v197);
                v199 = v198 - 1;
              }
              while (__stlxr(v199, v197));
              if (!v199)
              {
                v200 = *(unint64_t **)v195;
                if (!*(_QWORD *)v195)
                  goto LABEL_395;
                if (*((char *)v200 + 31) < 0)
                  operator delete((void *)v200[1]);
                v201 = v200;
                v202 = 0x1012C404EF22A49;
                goto LABEL_394;
              }
              break;
            case 3:
              v203 = *(unint64_t **)v195;
              do
              {
                v204 = __ldaxr(v203);
                v205 = v204 - 1;
              }
              while (__stlxr(v205, v203));
              if (!v205)
              {
                v206 = *(unint64_t **)v195;
                if (!*(_QWORD *)v195)
                  goto LABEL_395;
                v207 = (void *)v206[1];
                if (v207)
                {
                  v206[2] = (unint64_t)v207;
                  operator delete(v207);
                }
                v201 = v206;
                v202 = 0x1080C409938AC02;
                goto LABEL_394;
              }
              break;
            case 4:
              v208 = *(unint64_t **)v195;
              do
              {
                v209 = __ldaxr(v208);
                v210 = v209 - 1;
              }
              while (__stlxr(v210, v208));
              if (!v210)
              {
                v211 = *(unint64_t **)v195;
                if (!*(_QWORD *)v195)
                  goto LABEL_395;
                v225 = (void **)(v211 + 1);
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v225);
                goto LABEL_382;
              }
              break;
            case 5:
              v212 = *(unint64_t **)v195;
              do
              {
                v213 = __ldaxr(v212);
                v214 = v213 - 1;
              }
              while (__stlxr(v214, v212));
              if (!v214)
              {
                v211 = *(unint64_t **)v195;
                if (!*(_QWORD *)v195)
                  goto LABEL_395;
                v225 = (void **)(v211 + 1);
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v225);
LABEL_382:
                v201 = v211;
                v202 = 0x1020C405E66F15BLL;
                goto LABEL_394;
              }
              break;
            case 8:
              v215 = *(unint64_t **)v195;
              do
              {
                v216 = __ldaxr(v215);
                v217 = v216 - 1;
              }
              while (__stlxr(v217, v215));
              if (!v217)
              {
                v218 = *(unint64_t **)v195;
                if (!*(_QWORD *)v195)
                  goto LABEL_395;
                boost::detail::shared_count::~shared_count((unsigned int **)v218 + 2);
                v201 = v218;
                v219 = -235920773;
                goto LABEL_393;
              }
              break;
            case 9:
              v220 = *(unint64_t **)v195;
              do
              {
                v221 = __ldaxr(v220);
                v222 = v221 - 1;
              }
              while (__stlxr(v222, v220));
              if (!v222)
              {
                if (*(_QWORD *)v195)
                {
                  v201 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*(_QWORD **)v195);
                  v219 = 2071181815;
LABEL_393:
                  v202 = v219 | 0x1030C4000000000;
LABEL_394:
                  MEMORY[0x219A19A08](v201, v202);
                }
LABEL_395:
                *(_QWORD *)v195 = 0;
              }
              break;
            default:
              break;
          }
          v223 = *(_QWORD *)v196;
          *(_QWORD *)(v195 + 5) = *(_QWORD *)(v196 + 5);
          *(_QWORD *)v195 = v223;
          *(_BYTE *)(v195 + 12) = *(_BYTE *)(v196 + 12);
          *(_BYTE *)(v196 + 12) = 0;
        }
        v90 = 1;
        *(_BYTE *)(a1 + 224) = 1;
      }
      v48 = 0;
      ++v3;
      goto LABEL_399;
    }
    if (v82)
    {
      if (v82 != 1077)
        return v3;
    }
    else
    {
      if (!*(_BYTE *)(a1 + 161))
      {
        turi::archive_detail::vector_deserialize_impl<turi::iarchive,turi::flexible_type,false>::exec((turi::iarchive *)(a1 + 72), (uint64_t *)(a1 + 176));
        v95 = 0;
        v3 = 0;
        *(_QWORD *)(a1 + 168) = 0;
        goto LABEL_347;
      }
      v3 = *(unsigned __int8 *)(a1 + 160);
      if (!*(_BYTE *)(a1 + 160))
        return v3;
      if ((_DWORD)v3 != 1 || *(_BYTE *)(a1 + 120) != 7)
        goto LABEL_165;
    }
    v87 = *(_QWORD *)(a1 + 112);
    if (v87)
    {
      v88 = a2[1];
      if (v48)
        v88 = v48;
      if (v88 >= v87)
        v3 = *(_QWORD *)(a1 + 112);
      else
        v3 = v88;
      *(_QWORD *)(a1 + 216) = v3;
      *(_QWORD *)(a1 + 112) = v87 - v3;
      v85 = 1077;
LABEL_403:
      *(_DWORD *)a1 = v85;
      return v3;
    }
    v85 = *(unsigned __int8 *)(a1 + 161);
    if (!*(_BYTE *)(a1 + 161))
    {
      v3 = 0;
      goto LABEL_403;
    }
LABEL_165:
    switch(*(_BYTE *)(a1 + 120))
    {
      case 0:
        v91 = (_DWORD *)operator new();
        *v91 = 0;
        *(_QWORD *)(a1 + 232) = v91;
        goto LABEL_150;
      case 1:
        if ((*(_BYTE *)(a1 + 40) & 8) == 0)
        {
          v94 = operator new();
          *(_DWORD *)v94 = 0;
          *(_DWORD *)(v94 + 1064) = 0;
          *(_BYTE *)(v94 + 1068) = 1;
          *(_QWORD *)(v94 + 1056) = 0;
          *(_QWORD *)(a1 + 248) = v94;
          goto LABEL_161;
        }
        v83 = operator new();
        *(_DWORD *)v83 = 0;
        *(_DWORD *)(v83 + 24) = 0;
        *(_DWORD *)(v83 + 1088) = 0;
        *(_BYTE *)(v83 + 1092) = 1;
        *(_QWORD *)(v83 + 1080) = 0;
        *(_QWORD *)(a1 + 240) = v83;
        break;
      case 2:
        v89 = (turi::v2_block_impl::decode_string_stream *)operator new();
        turi::v2_block_impl::decode_string_stream::decode_string_stream(v89);
        *(_QWORD *)(a1 + 256) = v89;
        goto LABEL_147;
      case 3:
        v92 = (turi::v2_block_impl::decode_vector_stream *)operator new();
        turi::v2_block_impl::decode_vector_stream::decode_vector_stream(v92);
        *(_QWORD *)(a1 + 264) = v92;
        goto LABEL_152;
      case 9:
        v93 = operator new();
        *(_DWORD *)v93 = 0;
        *(_QWORD *)(v93 + 232) = 0;
        *(_QWORD *)(v93 + 240) = 0;
        *(_OWORD *)(v93 + 24) = 0u;
        *(_OWORD *)(v93 + 40) = 0u;
        *(_OWORD *)(v93 + 56) = 0u;
        *(_OWORD *)(v93 + 72) = 0u;
        *(_OWORD *)(v93 + 88) = 0u;
        *(_OWORD *)(v93 + 104) = 0u;
        *(_OWORD *)(v93 + 120) = 0u;
        *(_OWORD *)(v93 + 136) = 0u;
        *(_OWORD *)(v93 + 152) = 0u;
        *(_OWORD *)(v93 + 168) = 0u;
        *(_OWORD *)(v93 + 184) = 0u;
        *(_OWORD *)(v93 + 200) = 0u;
        *(_QWORD *)(v93 + 216) = 0;
        *(_QWORD *)(a1 + 272) = v93;
        goto LABEL_154;
      default:
        v96 = 0;
        v3 = 0;
        *(_QWORD *)(a1 + 168) = 0;
        goto LABEL_186;
    }
    goto LABEL_129;
  }
  if (v82 > 1131)
  {
    if (v82 == 1132)
    {
      v92 = *(turi::v2_block_impl::decode_vector_stream **)(a1 + 264);
      if (*(_DWORD *)v92)
      {
LABEL_152:
        v3 = turi::v2_block_impl::decode_vector_stream::read((uint64_t)v92, *(_QWORD *)(a1 + 208), (turi::iarchive *)(a1 + 72), a2, v48, (*(_QWORD *)(a1 + 40) >> 3) & 1);
        v85 = 1132;
        goto LABEL_403;
      }
      v84 = (_QWORD *)(a1 + 264);
      turi::v2_block_impl::decode_vector_stream::~decode_vector_stream(*(turi::v2_block_impl::decode_vector_stream **)(a1 + 264));
      goto LABEL_174;
    }
    if (v82 == 1141)
    {
      v93 = *(_QWORD *)(a1 + 272);
      if (*(_DWORD *)v93)
      {
LABEL_154:
        v3 = turi::v2_block_impl::decode_ndvector_stream::read(v93, *(_QWORD *)(a1 + 208), (turi::iarchive *)(a1 + 72), a2, v48);
        v85 = 1141;
        goto LABEL_403;
      }
      v84 = (_QWORD *)(a1 + 272);
      turi::v2_block_impl::decode_ndvector_stream::~decode_ndvector_stream((turi::v2_block_impl::decode_ndvector_stream *)v93);
      goto LABEL_174;
    }
    if (v82 != 1149)
      return v3;
    v3 = 0;
    v86 = *(unsigned __int8 *)(a1 + 224);
    while (1)
    {
      if (v86)
      {
        v96 = *(_QWORD *)(a1 + 168) + 1;
        *(_QWORD *)(a1 + 168) = v96;
LABEL_186:
        if (v96 >= *(_QWORD *)(a1 + 208))
        {
          v85 = 0;
          goto LABEL_403;
        }
        v97 = 0;
        v98 = *(unsigned __int8 *)(a1 + 120);
        switch(*(_BYTE *)(a1 + 120))
        {
          case 2:
          case 3:
          case 4:
          case 5:
            v97 = operator new();
            *(_QWORD *)v97 = 0;
            *(_QWORD *)(v97 + 16) = 0;
            *(_QWORD *)(v97 + 24) = 0;
            *(_QWORD *)(v97 + 8) = 0;
            goto LABEL_192;
          case 6:
            v97 = 0x1900000000000000;
            break;
          case 8:
            v97 = operator new();
            *(_QWORD *)v97 = 0;
            *(_OWORD *)(v97 + 8) = 0u;
            *(_OWORD *)(v97 + 24) = 0u;
            *(_OWORD *)(v97 + 40) = 0u;
            *(_QWORD *)(v97 + 56) = 0;
            *(_QWORD *)(v97 + 64) = 3;
            goto LABEL_192;
          case 9:
            v97 = operator new();
            std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::pair[abi:ne180100]<true,0>((_QWORD *)v97);
LABEL_192:
            *(_QWORD *)v97 = 1;
            break;
          default:
            break;
        }
        v99 = (uint64_t *)(a1 + 288);
        switch(*(_BYTE *)(a1 + 300))
        {
          case 2:
            v100 = (unint64_t *)*v99;
            do
            {
              v101 = __ldaxr(v100);
              v102 = v101 - 1;
            }
            while (__stlxr(v102, v100));
            if (!v102)
            {
              v103 = *v99;
              if (!*v99)
                goto LABEL_235;
              if (*(char *)(v103 + 31) < 0)
                operator delete(*(void **)(v103 + 8));
              v104 = (_QWORD *)v103;
              v105 = 0x1012C404EF22A49;
              goto LABEL_234;
            }
            break;
          case 3:
            v106 = (unint64_t *)*v99;
            do
            {
              v107 = __ldaxr(v106);
              v108 = v107 - 1;
            }
            while (__stlxr(v108, v106));
            if (!v108)
            {
              v109 = *v99;
              if (!*v99)
                goto LABEL_235;
              v110 = *(void **)(v109 + 8);
              if (v110)
              {
                *(_QWORD *)(v109 + 16) = v110;
                operator delete(v110);
              }
              v104 = (_QWORD *)v109;
              v105 = 0x1080C409938AC02;
              goto LABEL_234;
            }
            break;
          case 4:
            v111 = (unint64_t *)*v99;
            do
            {
              v112 = __ldaxr(v111);
              v113 = v112 - 1;
            }
            while (__stlxr(v113, v111));
            if (!v113)
            {
              v114 = *v99;
              if (!*v99)
                goto LABEL_235;
              v225 = (void **)(v114 + 8);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v225);
              goto LABEL_218;
            }
            break;
          case 5:
            v115 = (unint64_t *)*v99;
            do
            {
              v116 = __ldaxr(v115);
              v117 = v116 - 1;
            }
            while (__stlxr(v117, v115));
            if (!v117)
            {
              v114 = *v99;
              if (!*v99)
                goto LABEL_235;
              v225 = (void **)(v114 + 8);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v225);
LABEL_218:
              v104 = (_QWORD *)v114;
              v105 = 0x1020C405E66F15BLL;
              goto LABEL_234;
            }
            break;
          case 8:
            v118 = (unint64_t *)*v99;
            do
            {
              v119 = __ldaxr(v118);
              v120 = v119 - 1;
            }
            while (__stlxr(v120, v118));
            if (!v120)
            {
              v121 = *v99;
              if (!*v99)
                goto LABEL_235;
              boost::detail::shared_count::~shared_count((unsigned int **)(v121 + 16));
              v104 = (_QWORD *)v121;
              v122 = -235920773;
              goto LABEL_233;
            }
            break;
          case 9:
            v123 = (unint64_t *)*v99;
            do
            {
              v124 = __ldaxr(v123);
              v125 = v124 - 1;
            }
            while (__stlxr(v125, v123));
            if (!v125)
            {
              v126 = (_QWORD *)*v99;
              if (*v99)
              {
                v127 = (void *)v126[6];
                if (v127)
                {
                  v126[7] = v127;
                  operator delete(v127);
                }
                v128 = (void *)v126[3];
                if (v128)
                {
                  v126[4] = v128;
                  operator delete(v128);
                }
                std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v126 + 1));
                v104 = v126;
                v122 = 2071181815;
LABEL_233:
                v105 = v122 | 0x1030C4000000000;
LABEL_234:
                MEMORY[0x219A19A08](v104, v105);
              }
LABEL_235:
              *v99 = 0;
            }
            break;
          default:
            break;
        }
        *(_QWORD *)(a1 + 288) = v97;
        *(_DWORD *)(a1 + 296) = 0;
        *(_BYTE *)(a1 + 300) = v98;
        v129 = *(turi::iarchive **)(a1 + 280);
        switch(v98)
        {
          case 0:
          case 1:
            v130 = *((_QWORD *)v129 + 2);
            if (!v130)
              goto LABEL_296;
            *v99 = *(_QWORD *)(v130 + *((_QWORD *)v129 + 3));
            v131 = *((_QWORD *)v129 + 3) + 8;
            goto LABEL_294;
          case 2:
            if (*(_QWORD *)v97 != 1)
            {
              v132 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v132, *v99);
              *v99 = (uint64_t)v132;
              *v132 = 1;
              do
              {
                v133 = __ldaxr((unint64_t *)v97);
                v134 = v133 - 1;
              }
              while (__stlxr(v134, (unint64_t *)v97));
              if (!v134)
              {
                if (*(char *)(v97 + 31) < 0)
                  operator delete(*(void **)(v97 + 8));
                MEMORY[0x219A19A08](v97, 0x1012C404EF22A49);
              }
            }
            turi::archive_detail::deserialize_impl<turi::iarchive,std::string,false,void>::exec((uint64_t)v129, (std::string *)(*v99 + 8));
            break;
          case 3:
            if (*(_QWORD *)v97 != 1)
            {
              v135 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v135, *v99);
              *v99 = (uint64_t)v135;
              *v135 = 1;
              do
              {
                v136 = __ldaxr((unint64_t *)v97);
                v137 = v136 - 1;
              }
              while (__stlxr(v137, (unint64_t *)v97));
              if (!v137)
              {
                v138 = *(void **)(v97 + 8);
                if (v138)
                {
                  *(_QWORD *)(v97 + 16) = v138;
                  operator delete(v138);
                }
                MEMORY[0x219A19A08](v97, 0x1080C409938AC02);
              }
            }
            turi::archive_detail::vector_deserialize_impl<turi::iarchive,double,true>::exec((uint64_t)v129, (_QWORD *)(*v99 + 8));
            break;
          case 4:
            if (*(_QWORD *)v97 != 1)
            {
              v139 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v139, *v99);
              *v99 = (uint64_t)v139;
              *v139 = 1;
              do
              {
                v140 = __ldaxr((unint64_t *)v97);
                v141 = v140 - 1;
              }
              while (__stlxr(v141, (unint64_t *)v97));
              if (!v141)
              {
                v225 = (void **)(v97 + 8);
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v225);
                MEMORY[0x219A19A08](v97, 0x1020C405E66F15BLL);
              }
            }
            turi::archive_detail::vector_deserialize_impl<turi::iarchive,turi::flexible_type,false>::exec(v129, (uint64_t *)(*v99 + 8));
            break;
          case 5:
            if (*(_QWORD *)v97 != 1)
            {
              v142 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v142, *v99);
              *v99 = (uint64_t)v142;
              *v142 = 1;
              do
              {
                v143 = __ldaxr((unint64_t *)v97);
                v144 = v143 - 1;
              }
              while (__stlxr(v144, (unint64_t *)v97));
              if (!v144)
              {
                v225 = (void **)(v97 + 8);
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v225);
                MEMORY[0x219A19A08](v97, 0x1020C405E66F15BLL);
              }
            }
            turi::archive_detail::vector_deserialize_impl<turi::iarchive,std::pair<turi::flexible_type,turi::flexible_type>,false>::exec(v129, (uint64_t *)(*v99 + 8));
            break;
          case 6:
            v145 = (_DWORD *)(a1 + 296);
            v146 = *((_QWORD *)v129 + 2);
            if (v146)
            {
              *v99 = *(_QWORD *)(v146 + *((_QWORD *)v129 + 3));
              *((_QWORD *)v129 + 3) += 8;
            }
            else
            {
              std::istream::read();
            }
            v161 = *v99 >> 56;
            if ((v161 + 24) > 0x30)
            {
              v164 = *((_QWORD *)v129 + 2);
              if (v164)
              {
                *v145 = *(_DWORD *)(v164 + *((_QWORD *)v129 + 3));
                v131 = *((_QWORD *)v129 + 3) + 4;
LABEL_294:
                *((_QWORD *)v129 + 3) = v131;
              }
              else
              {
LABEL_296:
                std::istream::read();
              }
            }
            else
            {
              v162 = 2 * v161;
              if ((2 * v161 - 49) <= 0xFFFFFF9E)
                turi::flex_date_time::set_time_zone_offset(int)::{lambda(void)#1}::operator()();
              if ((int)v161 >= 0)
                v163 = 25;
              else
                v163 = -25;
              *v99 = *v99 & 0xFFFFFFFFFFFFFFLL | ((unint64_t)(v163 + v162) << 56);
              *v145 = 0;
            }
            break;
          case 7:
            break;
          case 8:
            if (*(_QWORD *)v97 != 1)
            {
              v147 = operator new();
              v148 = *v99;
              *(_QWORD *)v147 = *(_QWORD *)*v99;
              *(_QWORD *)(v147 + 8) = *(_QWORD *)(v148 + 8);
              v149 = *(_QWORD *)(v148 + 16);
              *(_QWORD *)(v147 + 16) = v149;
              if (v149)
              {
                v150 = (unsigned int *)(v149 + 8);
                do
                  v151 = __ldxr(v150);
                while (__stxr(v151 + 1, v150));
              }
              v152 = *(_OWORD *)(v148 + 24);
              v153 = *(_OWORD *)(v148 + 40);
              *(_OWORD *)(v147 + 56) = *(_OWORD *)(v148 + 56);
              *(_OWORD *)(v147 + 40) = v153;
              *(_OWORD *)(v147 + 24) = v152;
              *v99 = v147;
              *(_QWORD *)v147 = 1;
              do
              {
                v154 = __ldaxr((unint64_t *)v97);
                v155 = v154 - 1;
              }
              while (__stlxr(v155, (unint64_t *)v97));
              if (!v155)
              {
                boost::detail::shared_count::~shared_count((unsigned int **)(v97 + 16));
                MEMORY[0x219A19A08](v97, 0x1030C40F1F0227BLL);
              }
            }
            turi::image_type::load((turi::image_type *)(*v99 + 8), v129);
            break;
          case 9:
            if (*(_QWORD *)v97 != 1)
            {
              v156 = (_QWORD *)operator new();
              v157 = *v99 + 8;
              *v156 = *(_QWORD *)*v99;
              turi::flexible_type_impl::ndarray<double>::ndarray(v156 + 1, v157);
              *v99 = (uint64_t)v156;
              *v156 = 1;
              do
              {
                v158 = __ldaxr((unint64_t *)v97);
                v159 = v158 - 1;
              }
              while (__stlxr(v159, (unint64_t *)v97));
              if (!v159)
              {
                v160 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)v97);
                MEMORY[0x219A19A08](v160, 0x1030C407B73B9F7);
              }
            }
            turi::flexible_type_impl::ndarray<double>::load(*v99 + 8, (uint64_t)v129);
            break;
          default:
            turi::apply_binary_op_ff();
        }
      }
      *(_BYTE *)(a1 + 224) = 0;
      if (v48)
      {
        --v48;
      }
      else
      {
        v86 = 0;
        v165 = *a2 + 16 * v3;
        if (*(_BYTE *)(v165 + 12) == 7)
          goto LABEL_342;
        v48 = 0;
        if (a1 + 288 != v165)
        {
          switch(*(_BYTE *)(v165 + 12))
          {
            case 2:
              v166 = *(unint64_t **)v165;
              do
              {
                v167 = __ldaxr(v166);
                v168 = v167 - 1;
              }
              while (__stlxr(v168, v166));
              if (!v168)
              {
                v169 = *(unint64_t **)v165;
                if (!*(_QWORD *)v165)
                  goto LABEL_339;
                if (*((char *)v169 + 31) < 0)
                  operator delete((void *)v169[1]);
                v170 = v169;
                v171 = 0x1012C404EF22A49;
                goto LABEL_338;
              }
              break;
            case 3:
              v180 = *(unint64_t **)v165;
              do
              {
                v181 = __ldaxr(v180);
                v182 = v181 - 1;
              }
              while (__stlxr(v182, v180));
              if (!v182)
              {
                v183 = *(unint64_t **)v165;
                if (!*(_QWORD *)v165)
                  goto LABEL_339;
                v184 = (void *)v183[1];
                if (v184)
                {
                  v183[2] = (unint64_t)v184;
                  operator delete(v184);
                }
                v170 = v183;
                v171 = 0x1080C409938AC02;
                goto LABEL_338;
              }
              break;
            case 4:
              v172 = *(unint64_t **)v165;
              do
              {
                v173 = __ldaxr(v172);
                v174 = v173 - 1;
              }
              while (__stlxr(v174, v172));
              if (!v174)
              {
                v175 = *(unint64_t **)v165;
                if (!*(_QWORD *)v165)
                  goto LABEL_339;
                v225 = (void **)(v175 + 1);
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v225);
                goto LABEL_331;
              }
              break;
            case 5:
              v185 = *(unint64_t **)v165;
              do
              {
                v186 = __ldaxr(v185);
                v187 = v186 - 1;
              }
              while (__stlxr(v187, v185));
              if (!v187)
              {
                v175 = *(unint64_t **)v165;
                if (!*(_QWORD *)v165)
                  goto LABEL_339;
                v225 = (void **)(v175 + 1);
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v225);
LABEL_331:
                v170 = v175;
                v171 = 0x1020C405E66F15BLL;
                goto LABEL_338;
              }
              break;
            case 8:
              v188 = *(unint64_t **)v165;
              do
              {
                v189 = __ldaxr(v188);
                v190 = v189 - 1;
              }
              while (__stlxr(v190, v188));
              if (!v190)
              {
                v191 = *(unint64_t **)v165;
                if (!*(_QWORD *)v165)
                  goto LABEL_339;
                boost::detail::shared_count::~shared_count((unsigned int **)v191 + 2);
                v170 = v191;
                v179 = -235920773;
                goto LABEL_337;
              }
              break;
            case 9:
              v176 = *(unint64_t **)v165;
              do
              {
                v177 = __ldaxr(v176);
                v178 = v177 - 1;
              }
              while (__stlxr(v178, v176));
              if (!v178)
              {
                if (*(_QWORD *)v165)
                {
                  v170 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*(_QWORD **)v165);
                  v179 = 2071181815;
LABEL_337:
                  v171 = v179 | 0x1030C4000000000;
LABEL_338:
                  MEMORY[0x219A19A08](v170, v171);
                }
LABEL_339:
                *(_QWORD *)v165 = 0;
              }
              break;
            default:
              break;
          }
          v48 = 0;
          v192 = *(_QWORD *)(a1 + 288);
          *(_QWORD *)(v165 + 5) = *(_QWORD *)(a1 + 293);
          *(_QWORD *)v165 = v192;
          *(_BYTE *)(v165 + 12) = *(_BYTE *)(a1 + 300);
          *(_BYTE *)(a1 + 300) = 0;
        }
      }
      v86 = 1;
      *(_BYTE *)(a1 + 224) = 1;
LABEL_342:
      ++v3;
      if (!v48 && v3 >= a2[1])
      {
        v85 = 1149;
        goto LABEL_403;
      }
    }
  }
  if (v82 == 1114)
  {
    v84 = (_QWORD *)(a1 + 248);
    v94 = *(_QWORD *)(a1 + 248);
    if (*(_DWORD *)v94)
    {
LABEL_161:
      v3 = turi::v2_block_impl::decode_double_stream_legacy::read(v94, *(_QWORD *)(a1 + 208), (turi::iarchive *)(a1 + 72), a2, v48);
      v85 = 1114;
      goto LABEL_403;
    }
    turi::v2_block_impl::decode_double_stream_legacy::~decode_double_stream_legacy((turi::v2_block_impl::decode_double_stream_legacy *)v94);
    goto LABEL_174;
  }
  if (v82 == 1123)
  {
    v89 = *(turi::v2_block_impl::decode_string_stream **)(a1 + 256);
    if (*(_DWORD *)v89)
    {
LABEL_147:
      v3 = turi::v2_block_impl::decode_string_stream::read((int *)v89, *(_QWORD *)(a1 + 208), (turi::iarchive *)(a1 + 72), a2, v48);
      v85 = 1123;
      goto LABEL_403;
    }
    v84 = (_QWORD *)(a1 + 256);
    turi::v2_block_impl::decode_string_stream::~decode_string_stream(*(turi::v2_block_impl::decode_string_stream **)(a1 + 256));
    goto LABEL_174;
  }
  return v3;
}

void turi::v2_block_impl::typed_decode_stream::read(std::pair<turi::flexible_type *,unsigned long> const&,unsigned long)::$_0::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray_v2_type_encoding.cpp", 118);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"decodebuffer.first != nullptr && decodebuffer.second > 0", 56);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray_v2_type_encoding.cpp", "operator()", 1028, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::v2_block_impl::typed_decode_stream::read(std::pair<turi::flexible_type *,unsigned long> const&,unsigned long)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_21819CF14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::v2_block_impl::typed_decode_stream::read(std::pair<turi::flexible_type *,unsigned long> const&,unsigned long)::$_1::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray_v2_type_encoding.cpp", 118);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"decodebuffer.first == nullptr && decodebuffer.second == 0", 57);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray_v2_type_encoding.cpp", "operator()", 1030, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::v2_block_impl::typed_decode_stream::read(std::pair<turi::flexible_type *,unsigned long> const&,unsigned long)::$_1::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_21819D094(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

uint64_t turi::v2_block_impl::typed_decode_stream::pad_retbuf_with_undefined_positions(_QWORD *a1, _QWORD *a2)
{
  BOOL v2;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  void *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t *v36;
  unsigned int v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t *v41;
  void *v42;
  void *v43;
  uint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  void *v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t *v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unsigned int v73;
  unint64_t *v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t *v77;
  void *v78;
  void *v79;
  void **v81;

  if (a1[16])
    v2 = *a2 == 0;
  else
    v2 = 1;
  if (v2 || !a2[1])
    return 0;
  v5 = 0;
  v6 = 0;
  v7 = a1[25];
  do
  {
    v8 = *a2 + 16 * v5;
    if (((*(_QWORD *)(a1[17] + ((v7 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v7) & 1) != 0)
    {
      if ((uint64_t *)v8 != &turi::FLEX_UNDEFINED)
      {
        switch(*(_BYTE *)(v8 + 12))
        {
          case 2:
            v9 = *(unint64_t **)v8;
            do
            {
              v10 = __ldaxr(v9);
              v11 = v10 - 1;
            }
            while (__stlxr(v11, v9));
            if (!v11)
            {
              v12 = *(unint64_t **)v8;
              if (!*(_QWORD *)v8)
                goto LABEL_59;
              if (*((char *)v12 + 31) < 0)
                operator delete((void *)v12[1]);
              v13 = v12;
              v14 = 0x1012C404EF22A49;
              goto LABEL_58;
            }
            break;
          case 3:
            v21 = *(unint64_t **)v8;
            do
            {
              v22 = __ldaxr(v21);
              v23 = v22 - 1;
            }
            while (__stlxr(v23, v21));
            if (!v23)
            {
              v24 = *(unint64_t **)v8;
              if (!*(_QWORD *)v8)
                goto LABEL_59;
              v25 = (void *)v24[1];
              if (v25)
              {
                v24[2] = (unint64_t)v25;
                operator delete(v25);
              }
              v13 = v24;
              v14 = 0x1080C409938AC02;
              goto LABEL_58;
            }
            break;
          case 4:
            v26 = *(unint64_t **)v8;
            do
            {
              v27 = __ldaxr(v26);
              v28 = v27 - 1;
            }
            while (__stlxr(v28, v26));
            if (!v28)
            {
              v29 = *(unint64_t **)v8;
              if (!*(_QWORD *)v8)
                goto LABEL_59;
              v81 = (void **)(v29 + 1);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v81);
              goto LABEL_42;
            }
            break;
          case 5:
            v30 = *(unint64_t **)v8;
            do
            {
              v31 = __ldaxr(v30);
              v32 = v31 - 1;
            }
            while (__stlxr(v32, v30));
            if (!v32)
            {
              v29 = *(unint64_t **)v8;
              if (!*(_QWORD *)v8)
                goto LABEL_59;
              v81 = (void **)(v29 + 1);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v81);
LABEL_42:
              v13 = v29;
              v14 = 0x1020C405E66F15BLL;
              goto LABEL_58;
            }
            break;
          case 8:
            v33 = *(unint64_t **)v8;
            do
            {
              v34 = __ldaxr(v33);
              v35 = v34 - 1;
            }
            while (__stlxr(v35, v33));
            if (!v35)
            {
              v36 = *(unint64_t **)v8;
              if (!*(_QWORD *)v8)
                goto LABEL_59;
              boost::detail::shared_count::~shared_count((unsigned int **)v36 + 2);
              v13 = v36;
              v37 = -235920773;
              goto LABEL_57;
            }
            break;
          case 9:
            v38 = *(unint64_t **)v8;
            do
            {
              v39 = __ldaxr(v38);
              v40 = v39 - 1;
            }
            while (__stlxr(v40, v38));
            if (!v40)
            {
              v41 = *(unint64_t **)v8;
              if (*(_QWORD *)v8)
              {
                v42 = (void *)v41[6];
                if (v42)
                {
                  v41[7] = (unint64_t)v42;
                  operator delete(v42);
                }
                v43 = (void *)v41[3];
                if (v43)
                {
                  v41[4] = (unint64_t)v43;
                  operator delete(v43);
                }
                std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v41 + 1));
                v13 = v41;
                v37 = 2071181815;
LABEL_57:
                v14 = v37 | 0x1030C4000000000;
LABEL_58:
                MEMORY[0x219A19A08](v13, v14);
              }
LABEL_59:
              *(_QWORD *)v8 = 0;
            }
            break;
          default:
            break;
        }
        v44 = turi::FLEX_UNDEFINED;
        *(_QWORD *)(v8 + 5) = *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5);
        *(_QWORD *)v8 = v44;
        LODWORD(v44) = byte_254FF26E4;
        *(_BYTE *)(v8 + 12) = byte_254FF26E4;
        switch((int)v44)
        {
          case 2:
            v45 = *(unint64_t **)v8;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 + 1, v45));
            break;
          case 3:
            v47 = *(unint64_t **)v8;
            do
              v48 = __ldaxr(v47);
            while (__stlxr(v48 + 1, v47));
            break;
          case 4:
            v49 = *(unint64_t **)v8;
            do
              v50 = __ldaxr(v49);
            while (__stlxr(v50 + 1, v49));
            break;
          case 5:
            v51 = *(unint64_t **)v8;
            do
              v52 = __ldaxr(v51);
            while (__stlxr(v52 + 1, v51));
            break;
          case 8:
            v53 = *(unint64_t **)v8;
            do
              v54 = __ldaxr(v53);
            while (__stlxr(v54 + 1, v53));
            break;
          case 9:
            v55 = *(unint64_t **)v8;
            do
              v56 = __ldaxr(v55);
            while (__stlxr(v56 + 1, v55));
            break;
          default:
            break;
        }
      }
    }
    else
    {
      switch(*(_BYTE *)(v8 + 12))
      {
        case 2:
          v15 = *(unint64_t **)v8;
          do
          {
            v16 = __ldaxr(v15);
            v17 = v16 - 1;
          }
          while (__stlxr(v17, v15));
          if (!v17)
          {
            v18 = *(_QWORD *)v8;
            if (*(_QWORD *)v8)
            {
              if (*(char *)(v18 + 31) < 0)
                operator delete(*(void **)(v18 + 8));
              v19 = (_QWORD *)v18;
              v20 = 0x1012C404EF22A49;
              goto LABEL_112;
            }
          }
          break;
        case 3:
          v57 = *(unint64_t **)v8;
          do
          {
            v58 = __ldaxr(v57);
            v59 = v58 - 1;
          }
          while (__stlxr(v59, v57));
          if (!v59)
          {
            v60 = *(_QWORD *)v8;
            if (*(_QWORD *)v8)
            {
              v61 = *(void **)(v60 + 8);
              if (v61)
              {
                *(_QWORD *)(v60 + 16) = v61;
                operator delete(v61);
              }
              v19 = (_QWORD *)v60;
              v20 = 0x1080C409938AC02;
              goto LABEL_112;
            }
          }
          break;
        case 4:
          v62 = *(unint64_t **)v8;
          do
          {
            v63 = __ldaxr(v62);
            v64 = v63 - 1;
          }
          while (__stlxr(v64, v62));
          if (!v64)
          {
            v65 = *(_QWORD *)v8;
            if (*(_QWORD *)v8)
            {
              v81 = (void **)(v65 + 8);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v81);
              goto LABEL_96;
            }
          }
          break;
        case 5:
          v66 = *(unint64_t **)v8;
          do
          {
            v67 = __ldaxr(v66);
            v68 = v67 - 1;
          }
          while (__stlxr(v68, v66));
          if (!v68)
          {
            v65 = *(_QWORD *)v8;
            if (*(_QWORD *)v8)
            {
              v81 = (void **)(v65 + 8);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v81);
LABEL_96:
              v19 = (_QWORD *)v65;
              v20 = 0x1020C405E66F15BLL;
              goto LABEL_112;
            }
          }
          break;
        case 8:
          v69 = *(unint64_t **)v8;
          do
          {
            v70 = __ldaxr(v69);
            v71 = v70 - 1;
          }
          while (__stlxr(v71, v69));
          if (!v71)
          {
            v72 = *(_QWORD *)v8;
            if (*(_QWORD *)v8)
            {
              boost::detail::shared_count::~shared_count((unsigned int **)(v72 + 16));
              v19 = (_QWORD *)v72;
              v73 = -235920773;
              goto LABEL_111;
            }
          }
          break;
        case 9:
          v74 = *(unint64_t **)v8;
          do
          {
            v75 = __ldaxr(v74);
            v76 = v75 - 1;
          }
          while (__stlxr(v76, v74));
          if (!v76)
          {
            v77 = *(unint64_t **)v8;
            if (*(_QWORD *)v8)
            {
              v78 = (void *)v77[6];
              if (v78)
              {
                v77[7] = (unint64_t)v78;
                operator delete(v78);
              }
              v79 = (void *)v77[3];
              if (v79)
              {
                v77[4] = (unint64_t)v79;
                operator delete(v79);
              }
              std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v77 + 1));
              v19 = v77;
              v73 = 2071181815;
LABEL_111:
              v20 = v73 | 0x1030C4000000000;
LABEL_112:
              MEMORY[0x219A19A08](v19, v20);
            }
          }
          break;
        default:
          break;
      }
      *(_QWORD *)v8 = 0;
      *(_DWORD *)(v8 + 8) = 0;
      ++v6;
      *(_BYTE *)(v8 + 12) = 0;
    }
    v7 = a1[25] + 1;
    a1[25] = v7;
    ++v5;
  }
  while (v5 < a2[1]);
  return v6;
}

turi::v2_block_impl::decode_string_stream *turi::v2_block_impl::decode_string_stream::decode_string_stream(turi::v2_block_impl::decode_string_stream *this)
{
  _QWORD *v2;

  *(_DWORD *)this = 0;
  *((_BYTE *)this + 16) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 3) = 0;
  *(_QWORD *)((char *)this + 85) = 0;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_BYTE *)this + 92) = 2;
  v2 = (_QWORD *)operator new();
  *v2 = 0;
  v2[2] = 0;
  v2[3] = 0;
  v2[1] = 0;
  *((_QWORD *)this + 10) = v2;
  *v2 = 1;
  return this;
}

turi::v2_block_impl::decode_vector_stream *turi::v2_block_impl::decode_vector_stream::decode_vector_stream(turi::v2_block_impl::decode_vector_stream *this)
{
  _QWORD *v2;

  *(_DWORD *)this = 0;
  *(_QWORD *)((char *)this + 101) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *((_BYTE *)this + 108) = 3;
  v2 = (_QWORD *)operator new();
  *v2 = 0;
  v2[2] = 0;
  v2[3] = 0;
  v2[1] = 0;
  *((_QWORD *)this + 12) = v2;
  *v2 = 1;
  return this;
}

char *turi::integer_pack::variable_encode<turi::oarchive>(turi::oarchive *this, unint64_t a2)
{
  char v3;
  __int16 v4;
  unint64_t v5;
  char *result;
  uint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  __int16 v12;
  size_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  int v17;
  size_t v18;
  uint64_t *v19;
  size_t v20;
  BOOL v21;
  std::vector<char>::size_type v22;
  size_t v23;
  uint64_t *v24;
  size_t v25;
  BOOL v26;
  std::vector<char>::size_type v27;
  size_t v28;
  uint64_t *v29;
  size_t v30;
  BOOL v31;
  std::vector<char>::size_type v32;
  size_t v33;
  uint64_t *v34;
  size_t v35;
  BOOL v36;
  std::vector<char>::size_type v37;
  size_t v38;
  uint64_t *v39;
  size_t v40;
  BOOL v41;
  std::vector<char>::size_type v42;
  char v43;
  __int16 v44;
  int v45;
  char __src[8];
  unint64_t v47;

  v47 = a2;
  if (a2 > 0x7F)
  {
    if (a2 >> 14)
    {
      if (a2 >> 21)
      {
        if (a2 >> 28)
        {
          if (a2 >> 35)
          {
            if (a2 >> 42)
            {
              if (a2 >> 49)
              {
                __src[0] = 127;
                turi::oarchive::direct_assign<unsigned char>((uint64_t)this, __src);
                return turi::oarchive::direct_assign<unsigned long long>((uint64_t)this, &v47);
              }
              *(_QWORD *)__src = (a2 << 7) | 0x3F;
              v13 = 7;
            }
            else
            {
              *(_QWORD *)__src = (a2 << 6) | 0x1F;
              v13 = 6;
            }
            return (char *)turi::oarchive::write(this, __src, v13);
          }
          *(_QWORD *)__src = (32 * a2) | 0xF;
          if (*(_QWORD *)this)
            return (char *)std::ostream::write();
          v15 = *((_QWORD *)this + 5);
          if (*((_QWORD *)this + 4) + 5 > v15)
          {
            v38 = 2 * v15 + 10;
            *((_QWORD *)this + 5) = v38;
            v39 = (uint64_t *)*((_QWORD *)this + 2);
            if (v39)
            {
              result = (char *)*v39;
              v40 = v39[1] - *v39;
              v41 = v38 >= v40;
              v42 = v38 - v40;
              if (v42 != 0 && v41)
              {
                std::vector<char>::__append(*((std::vector<char> **)this + 2), v42);
                result = (char *)**((_QWORD **)this + 2);
              }
              else if (!v41)
              {
                v39[1] = (uint64_t)&result[v38];
              }
            }
            else
            {
              result = (char *)malloc_type_realloc(*((void **)this + 3), v38, 0xF6EA6B1uLL);
            }
            *((_QWORD *)this + 3) = result;
          }
          else
          {
            result = (char *)*((_QWORD *)this + 3);
          }
          v16 = &result[*((_QWORD *)this + 4)];
          v17 = *(_DWORD *)__src;
          v16[4] = __src[4];
          *(_DWORD *)v16 = v17;
          v7 = *((_QWORD *)this + 4) + 5;
        }
        else
        {
          v8 = (16 * a2) | 7;
          *(_DWORD *)__src = v8;
          if (*(_QWORD *)this)
            return (char *)std::ostream::write();
          v14 = *((_QWORD *)this + 5);
          if (*((_QWORD *)this + 4) + 4 > v14)
          {
            v45 = (16 * a2) | 7;
            v33 = 2 * v14 + 8;
            *((_QWORD *)this + 5) = v33;
            v34 = (uint64_t *)*((_QWORD *)this + 2);
            if (v34)
            {
              result = (char *)*v34;
              v35 = v34[1] - *v34;
              v36 = v33 >= v35;
              v37 = v33 - v35;
              if (v37 != 0 && v36)
              {
                std::vector<char>::__append(*((std::vector<char> **)this + 2), v37);
                result = (char *)**((_QWORD **)this + 2);
              }
              else if (!v36)
              {
                v34[1] = (uint64_t)&result[v33];
              }
            }
            else
            {
              result = (char *)malloc_type_realloc(*((void **)this + 3), v33, 0xF6EA6B1uLL);
            }
            *((_QWORD *)this + 3) = result;
            v8 = v45;
          }
          else
          {
            result = (char *)*((_QWORD *)this + 3);
          }
          *(_DWORD *)&result[*((_QWORD *)this + 4)] = v8;
          v7 = *((_QWORD *)this + 4) + 4;
        }
      }
      else
      {
        *(_DWORD *)__src = (8 * a2) | 3;
        if (*(_QWORD *)this)
          return (char *)std::ostream::write();
        v10 = *((_QWORD *)this + 5);
        if (*((_QWORD *)this + 4) + 3 > v10)
        {
          v28 = 2 * v10 + 6;
          *((_QWORD *)this + 5) = v28;
          v29 = (uint64_t *)*((_QWORD *)this + 2);
          if (v29)
          {
            result = (char *)*v29;
            v30 = v29[1] - *v29;
            v31 = v28 >= v30;
            v32 = v28 - v30;
            if (v32 != 0 && v31)
            {
              std::vector<char>::__append(*((std::vector<char> **)this + 2), v32);
              result = (char *)**((_QWORD **)this + 2);
            }
            else if (!v31)
            {
              v29[1] = (uint64_t)&result[v28];
            }
          }
          else
          {
            result = (char *)malloc_type_realloc(*((void **)this + 3), v28, 0xF6EA6B1uLL);
          }
          *((_QWORD *)this + 3) = result;
        }
        else
        {
          result = (char *)*((_QWORD *)this + 3);
        }
        v11 = &result[*((_QWORD *)this + 4)];
        v12 = *(_WORD *)__src;
        v11[2] = __src[2];
        *(_WORD *)v11 = v12;
        v7 = *((_QWORD *)this + 4) + 3;
      }
    }
    else
    {
      v4 = (4 * a2) | 1;
      *(_WORD *)__src = v4;
      if (*(_QWORD *)this)
        return (char *)std::ostream::write();
      v9 = *((_QWORD *)this + 5);
      if (*((_QWORD *)this + 4) + 2 > v9)
      {
        v44 = (4 * a2) | 1;
        v23 = 2 * v9 + 4;
        *((_QWORD *)this + 5) = v23;
        v24 = (uint64_t *)*((_QWORD *)this + 2);
        if (v24)
        {
          result = (char *)*v24;
          v25 = v24[1] - *v24;
          v26 = v23 >= v25;
          v27 = v23 - v25;
          if (v27 != 0 && v26)
          {
            std::vector<char>::__append(*((std::vector<char> **)this + 2), v27);
            result = (char *)**((_QWORD **)this + 2);
          }
          else if (!v26)
          {
            v24[1] = (uint64_t)&result[v23];
          }
        }
        else
        {
          result = (char *)malloc_type_realloc(*((void **)this + 3), v23, 0xF6EA6B1uLL);
        }
        *((_QWORD *)this + 3) = result;
        v4 = v44;
      }
      else
      {
        result = (char *)*((_QWORD *)this + 3);
      }
      *(_WORD *)&result[*((_QWORD *)this + 4)] = v4;
      v7 = *((_QWORD *)this + 4) + 2;
    }
  }
  else
  {
    v3 = 2 * a2;
    __src[0] = 2 * a2;
    if (*(_QWORD *)this)
      return (char *)std::ostream::write();
    v5 = *((_QWORD *)this + 5);
    if (*((_QWORD *)this + 4) + 1 > v5)
    {
      v43 = 2 * a2;
      v18 = 2 * v5 + 2;
      *((_QWORD *)this + 5) = v18;
      v19 = (uint64_t *)*((_QWORD *)this + 2);
      if (v19)
      {
        result = (char *)*v19;
        v20 = v19[1] - *v19;
        v21 = v18 >= v20;
        v22 = v18 - v20;
        if (v22 != 0 && v21)
        {
          std::vector<char>::__append(*((std::vector<char> **)this + 2), v22);
          result = (char *)**((_QWORD **)this + 2);
        }
        else if (!v21)
        {
          v19[1] = (uint64_t)&result[v18];
        }
      }
      else
      {
        result = (char *)malloc_type_realloc(*((void **)this + 3), v18, 0xF6EA6B1uLL);
      }
      *((_QWORD *)this + 3) = result;
      v3 = v43;
    }
    else
    {
      result = (char *)*((_QWORD *)this + 3);
    }
    result[*((_QWORD *)this + 4)] = v3;
    v7 = *((_QWORD *)this + 4) + 1;
  }
  *((_QWORD *)this + 4) = v7;
  return result;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[3];

  v8 = (_QWORD *)(a1 + 24);
  v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::__rehash<true>(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11)
          v24 %= v11;
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  i = (unsigned __int8 *)v26[0];
  ++*v8;
  return i;
}

void sub_21819DE18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **__p, uint64_t a13)
{
  if (__p)
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100]((uint64_t)&a13, __p);
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  std::string *v9;
  __int128 *v10;
  __int128 v11;

  v7 = a1 + 16;
  v8 = operator new(0x30uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  v9 = (std::string *)(v8 + 2);
  v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
  }
  else
  {
    v11 = *v10;
    v8[4] = *((_QWORD *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  v8[5] = 0;
  *(_BYTE *)(a4 + 16) = 1;
}

void sub_21819DEC8(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

_BYTE *turi::oarchive::direct_assign<unsigned char>(uint64_t a1, _BYTE *a2)
{
  _BYTE *result;
  unint64_t v5;
  size_t v6;
  _QWORD *v7;
  size_t v8;
  BOOL v9;
  std::vector<char>::size_type v10;

  if (*(_QWORD *)a1)
    return (_BYTE *)std::ostream::write();
  v5 = *(_QWORD *)(a1 + 40);
  if (*(_QWORD *)(a1 + 32) + 1 > v5)
  {
    v6 = 2 * v5 + 2;
    *(_QWORD *)(a1 + 40) = v6;
    v7 = *(_QWORD **)(a1 + 16);
    if (v7)
    {
      result = (_BYTE *)*v7;
      v8 = v7[1] - *v7;
      v9 = v6 >= v8;
      v10 = v6 - v8;
      if (v10 != 0 && v9)
      {
        std::vector<char>::__append(*(std::vector<char> **)(a1 + 16), v10);
        result = **(_BYTE ***)(a1 + 16);
      }
      else if (!v9)
      {
        v7[1] = &result[v6];
      }
    }
    else
    {
      result = malloc_type_realloc(*(void **)(a1 + 24), v6, 0xF6EA6B1uLL);
    }
    *(_QWORD *)(a1 + 24) = result;
  }
  else
  {
    result = *(_BYTE **)(a1 + 24);
  }
  result[(*(_QWORD *)(a1 + 32))++] = *a2;
  return result;
}

char *turi::oarchive::direct_assign<unsigned long long>(uint64_t a1, _QWORD *a2)
{
  char *result;
  unint64_t v5;
  size_t v6;
  char **v7;
  size_t v8;
  BOOL v9;
  std::vector<char>::size_type v10;

  if (*(_QWORD *)a1)
    return (char *)std::ostream::write();
  v5 = *(_QWORD *)(a1 + 40);
  if (*(_QWORD *)(a1 + 32) + 8 > v5)
  {
    v6 = 2 * v5 + 16;
    *(_QWORD *)(a1 + 40) = v6;
    v7 = *(char ***)(a1 + 16);
    if (v7)
    {
      result = *v7;
      v8 = v7[1] - *v7;
      v9 = v6 >= v8;
      v10 = v6 - v8;
      if (v10 != 0 && v9)
      {
        std::vector<char>::__append(*(std::vector<char> **)(a1 + 16), v10);
        result = **(char ***)(a1 + 16);
      }
      else if (!v9)
      {
        v7[1] = &result[v6];
      }
    }
    else
    {
      result = (char *)malloc_type_realloc(*(void **)(a1 + 24), v6, 0xF6EA6B1uLL);
    }
    *(_QWORD *)(a1 + 24) = result;
  }
  else
  {
    result = *(char **)(a1 + 24);
  }
  *(_QWORD *)&result[*(_QWORD *)(a1 + 32)] = *a2;
  *(_QWORD *)(a1 + 32) += 8;
  return result;
}

void turi::v2_block_impl::encode_nd_vector(turi::v2_block_impl::block_info &,turi::oarchive &,std::vector<turi::flexible_type> const&)::$_0::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray_v2_type_encoding.cpp", 118);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"val->is_valid()", 15);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray_v2_type_encoding.cpp", "operator()", 372, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::v2_block_impl::encode_nd_vector(turi::v2_block_impl::block_info &,turi::oarchive &,std::vector<turi::flexible_type> const&)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_21819E174(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

uint64_t turi::flexible_type_impl::ndarray<double>::elements(_QWORD *a1)
{
  if (!turi::flexible_type_impl::ndarray<double>::is_full(a1))
    turi::flexible_type_impl::ndarray<double>::elements(void)const::{lambda(void)#1}::operator()();
  return *a1;
}

void turi::dense_bitset::bit_pos_iterator::operator!=(turi::dense_bitset::bit_pos_iterator const&)const::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/util/dense_bitset.hpp", 92);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"db == other.db", 14);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/util/dense_bitset.hpp", "operator()", 287, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::dense_bitset::bit_pos_iterator::operator!=(turi::dense_bitset::bit_pos_iterator const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_21819E330(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::v2_block_impl::decode_double_stream_legacy::~decode_double_stream_legacy(turi::v2_block_impl::decode_double_stream_legacy *this)
{
  unint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  void *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  void *v29;
  void *v30;
  void **v31;

  switch(*((_BYTE *)this + 1068))
  {
    case 2:
      v2 = (unint64_t *)*((_QWORD *)this + 132);
      do
      {
        v3 = __ldaxr(v2);
        v4 = v3 - 1;
      }
      while (__stlxr(v4, v2));
      if (!v4)
      {
        v5 = *((_QWORD *)this + 132);
        if (v5)
        {
          if (*(char *)(v5 + 31) < 0)
            operator delete(*(void **)(v5 + 8));
          v6 = (_QWORD *)v5;
          v7 = 0x1012C404EF22A49;
          goto LABEL_42;
        }
      }
      break;
    case 3:
      v8 = (unint64_t *)*((_QWORD *)this + 132);
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        v11 = (_QWORD *)*((_QWORD *)this + 132);
        if (v11)
        {
          v12 = (void *)v11[1];
          if (v12)
          {
            v11[2] = v12;
            operator delete(v12);
          }
          v6 = v11;
          v7 = 0x1080C409938AC02;
          goto LABEL_42;
        }
      }
      break;
    case 4:
      v13 = (unint64_t *)*((_QWORD *)this + 132);
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        v16 = *((_QWORD *)this + 132);
        if (v16)
        {
          v31 = (void **)(v16 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v31);
          goto LABEL_26;
        }
      }
      break;
    case 5:
      v17 = (unint64_t *)*((_QWORD *)this + 132);
      do
      {
        v18 = __ldaxr(v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v17));
      if (!v19)
      {
        v16 = *((_QWORD *)this + 132);
        if (v16)
        {
          v31 = (void **)(v16 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v31);
LABEL_26:
          v6 = (_QWORD *)v16;
          v7 = 0x1020C405E66F15BLL;
          goto LABEL_42;
        }
      }
      break;
    case 8:
      v20 = (unint64_t *)*((_QWORD *)this + 132);
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (!v22)
      {
        v23 = *((_QWORD *)this + 132);
        if (v23)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v23 + 16));
          v6 = (_QWORD *)v23;
          v24 = -235920773;
          goto LABEL_41;
        }
      }
      break;
    case 9:
      v25 = (unint64_t *)*((_QWORD *)this + 132);
      do
      {
        v26 = __ldaxr(v25);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, v25));
      if (!v27)
      {
        v28 = (_QWORD *)*((_QWORD *)this + 132);
        if (v28)
        {
          v29 = (void *)v28[6];
          if (v29)
          {
            v28[7] = v29;
            operator delete(v29);
          }
          v30 = (void *)v28[3];
          if (v30)
          {
            v28[4] = v30;
            operator delete(v30);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v28 + 1));
          v6 = v28;
          v24 = 2071181815;
LABEL_41:
          v7 = v24 | 0x1030C4000000000;
LABEL_42:
          MEMORY[0x219A19A08](v6, v7);
        }
      }
      break;
    default:
      break;
  }
  *((_QWORD *)this + 132) = 0;
  *((_DWORD *)this + 266) = 0;
  *((_BYTE *)this + 1068) = 0;
}

void turi::v2_block_impl::decode_string_stream::~decode_string_stream(turi::v2_block_impl::decode_string_stream *this)
{
  unint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  void *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  void *v29;
  void *v30;
  void **v31;

  switch(*((_BYTE *)this + 92))
  {
    case 2:
      v2 = (unint64_t *)*((_QWORD *)this + 10);
      do
      {
        v3 = __ldaxr(v2);
        v4 = v3 - 1;
      }
      while (__stlxr(v4, v2));
      if (!v4)
      {
        v5 = *((_QWORD *)this + 10);
        if (v5)
        {
          if (*(char *)(v5 + 31) < 0)
            operator delete(*(void **)(v5 + 8));
          v6 = (_QWORD *)v5;
          v7 = 0x1012C404EF22A49;
          goto LABEL_42;
        }
      }
      break;
    case 3:
      v8 = (unint64_t *)*((_QWORD *)this + 10);
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        v11 = (_QWORD *)*((_QWORD *)this + 10);
        if (v11)
        {
          v12 = (void *)v11[1];
          if (v12)
          {
            v11[2] = v12;
            operator delete(v12);
          }
          v6 = v11;
          v7 = 0x1080C409938AC02;
          goto LABEL_42;
        }
      }
      break;
    case 4:
      v13 = (unint64_t *)*((_QWORD *)this + 10);
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        v16 = *((_QWORD *)this + 10);
        if (v16)
        {
          v31 = (void **)(v16 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v31);
          goto LABEL_26;
        }
      }
      break;
    case 5:
      v17 = (unint64_t *)*((_QWORD *)this + 10);
      do
      {
        v18 = __ldaxr(v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v17));
      if (!v19)
      {
        v16 = *((_QWORD *)this + 10);
        if (v16)
        {
          v31 = (void **)(v16 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v31);
LABEL_26:
          v6 = (_QWORD *)v16;
          v7 = 0x1020C405E66F15BLL;
          goto LABEL_42;
        }
      }
      break;
    case 8:
      v20 = (unint64_t *)*((_QWORD *)this + 10);
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (!v22)
      {
        v23 = *((_QWORD *)this + 10);
        if (v23)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v23 + 16));
          v6 = (_QWORD *)v23;
          v24 = -235920773;
          goto LABEL_41;
        }
      }
      break;
    case 9:
      v25 = (unint64_t *)*((_QWORD *)this + 10);
      do
      {
        v26 = __ldaxr(v25);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, v25));
      if (!v27)
      {
        v28 = (_QWORD *)*((_QWORD *)this + 10);
        if (v28)
        {
          v29 = (void *)v28[6];
          if (v29)
          {
            v28[7] = v29;
            operator delete(v29);
          }
          v30 = (void *)v28[3];
          if (v30)
          {
            v28[4] = v30;
            operator delete(v30);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v28 + 1));
          v6 = v28;
          v24 = 2071181815;
LABEL_41:
          v7 = v24 | 0x1030C4000000000;
LABEL_42:
          MEMORY[0x219A19A08](v6, v7);
        }
      }
      break;
    default:
      break;
  }
  *((_QWORD *)this + 10) = 0;
  *((_DWORD *)this + 22) = 0;
  *((_BYTE *)this + 92) = 0;
  v31 = (void **)((char *)this + 56);
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v31);
  v31 = (void **)((char *)this + 24);
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v31);
}

void turi::v2_block_impl::decode_vector_stream::~decode_vector_stream(turi::v2_block_impl::decode_vector_stream *this)
{
  unint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  void *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  void *v29;
  void *v30;
  void **v31;

  switch(*((_BYTE *)this + 108))
  {
    case 2:
      v2 = (unint64_t *)*((_QWORD *)this + 12);
      do
      {
        v3 = __ldaxr(v2);
        v4 = v3 - 1;
      }
      while (__stlxr(v4, v2));
      if (!v4)
      {
        v5 = *((_QWORD *)this + 12);
        if (v5)
        {
          if (*(char *)(v5 + 31) < 0)
            operator delete(*(void **)(v5 + 8));
          v6 = (_QWORD *)v5;
          v7 = 0x1012C404EF22A49;
          goto LABEL_42;
        }
      }
      break;
    case 3:
      v8 = (unint64_t *)*((_QWORD *)this + 12);
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        v11 = (_QWORD *)*((_QWORD *)this + 12);
        if (v11)
        {
          v12 = (void *)v11[1];
          if (v12)
          {
            v11[2] = v12;
            operator delete(v12);
          }
          v6 = v11;
          v7 = 0x1080C409938AC02;
          goto LABEL_42;
        }
      }
      break;
    case 4:
      v13 = (unint64_t *)*((_QWORD *)this + 12);
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        v16 = *((_QWORD *)this + 12);
        if (v16)
        {
          v31 = (void **)(v16 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v31);
          goto LABEL_26;
        }
      }
      break;
    case 5:
      v17 = (unint64_t *)*((_QWORD *)this + 12);
      do
      {
        v18 = __ldaxr(v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v17));
      if (!v19)
      {
        v16 = *((_QWORD *)this + 12);
        if (v16)
        {
          v31 = (void **)(v16 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v31);
LABEL_26:
          v6 = (_QWORD *)v16;
          v7 = 0x1020C405E66F15BLL;
          goto LABEL_42;
        }
      }
      break;
    case 8:
      v20 = (unint64_t *)*((_QWORD *)this + 12);
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (!v22)
      {
        v23 = *((_QWORD *)this + 12);
        if (v23)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v23 + 16));
          v6 = (_QWORD *)v23;
          v24 = -235920773;
          goto LABEL_41;
        }
      }
      break;
    case 9:
      v25 = (unint64_t *)*((_QWORD *)this + 12);
      do
      {
        v26 = __ldaxr(v25);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, v25));
      if (!v27)
      {
        v28 = (_QWORD *)*((_QWORD *)this + 12);
        if (v28)
        {
          v29 = (void *)v28[6];
          if (v29)
          {
            v28[7] = v29;
            operator delete(v29);
          }
          v30 = (void *)v28[3];
          if (v30)
          {
            v28[4] = v30;
            operator delete(v30);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v28 + 1));
          v6 = v28;
          v24 = 2071181815;
LABEL_41:
          v7 = v24 | 0x1030C4000000000;
LABEL_42:
          MEMORY[0x219A19A08](v6, v7);
        }
      }
      break;
    default:
      break;
  }
  *((_QWORD *)this + 12) = 0;
  *((_DWORD *)this + 26) = 0;
  *((_BYTE *)this + 108) = 0;
  v31 = (void **)((char *)this + 56);
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v31);
  v31 = (void **)((char *)this + 24);
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v31);
}

void turi::v2_block_impl::decode_ndvector_stream::~decode_ndvector_stream(turi::v2_block_impl::decode_ndvector_stream *this)
{
  void *v2;
  void *v3;
  void **v4;

  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)this + 232);
  v2 = (void *)*((_QWORD *)this + 25);
  if (v2)
  {
    *((_QWORD *)this + 26) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 22);
  if (v3)
  {
    *((_QWORD *)this + 23) = v3;
    operator delete(v3);
  }
  v4 = (void **)((char *)this + 120);
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v4);
  v4 = (void **)((char *)this + 96);
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v4);
  v4 = (void **)((char *)this + 72);
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v4);
  v4 = (void **)((char *)this + 48);
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v4);
  v4 = (void **)((char *)this + 24);
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v4);
}

void turi::integer_pack::frame_of_reference_encode_128<turi::oarchive>(unsigned long long const*,unsigned long,turi::oarchive &)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/integer_pack.hpp", 107);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/integer_pack.hpp", "operator()", 415, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  void turi::integer_pack::frame_of_reference_encode_128<turi::oarchive>(unsigned long long const*,unsigned long,turi::oarchive &)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_21819EB90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::integer_pack::frame_of_reference_decode_128<turi::iarchive>(turi::iarchive &,unsigned long,unsigned long long *)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/integer_pack.hpp", 107);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/integer_pack.hpp", "operator()", 488, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  void turi::integer_pack::frame_of_reference_decode_128<turi::iarchive>(turi::iarchive &,unsigned long,unsigned long long *)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_21819ED10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void **std::vector<turi::flexible_type>::__append(uint64_t *a1, unint64_t a2, uint64_t *a3)
{
  void **result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  int v19;
  unint64_t *v21;
  unint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  int v26;
  unint64_t *v28;
  unint64_t v29;
  void *v30[2];
  char *v31;
  char *v32;
  void **v33;

  v8 = a1[2];
  result = (void **)(a1 + 2);
  v7 = v8;
  v9 = (uint64_t)*(result - 1);
  if (a2 <= (v8 - v9) >> 4)
  {
    if (a2)
    {
      v16 = v9 + 16 * a2;
      do
      {
        *(_QWORD *)v9 = 0;
        *(_DWORD *)(v9 + 8) = 0;
        *(_BYTE *)(v9 + 12) = 0;
        if ((uint64_t *)v9 != a3)
        {
          v17 = *a3;
          *(_QWORD *)(v9 + 5) = *(uint64_t *)((char *)a3 + 5);
          *(_QWORD *)v9 = v17;
          LODWORD(v17) = *((unsigned __int8 *)a3 + 12);
          *(_BYTE *)(v9 + 12) = v17;
          v18 = v17 > 9;
          v19 = (1 << v17) & 0x33C;
          if (!v18 && v19 != 0)
          {
            v21 = *(unint64_t **)v9;
            do
              v22 = __ldaxr(v21);
            while (__stlxr(v22 + 1, v21));
          }
        }
        v9 += 16;
      }
      while (v9 != v16);
      v9 = v16;
    }
    a1[1] = v9;
  }
  else
  {
    v10 = v9 - *a1;
    v11 = a2 + (v10 >> 4);
    if (v11 >> 60)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v12 = v10 >> 4;
    v13 = v7 - *a1;
    if (v13 >> 3 > v11)
      v11 = v13 >> 3;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0)
      v14 = 0xFFFFFFFFFFFFFFFLL;
    else
      v14 = v11;
    v33 = result;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::flexible_type>>((uint64_t)result, v14);
    else
      v15 = 0;
    v23 = &v15[16 * v12];
    v30[0] = v15;
    v30[1] = v23;
    v31 = v23;
    v32 = &v15[16 * v14];
    v24 = &v23[16 * a2];
    do
    {
      *(_QWORD *)v23 = 0;
      *((_DWORD *)v23 + 2) = 0;
      v23[12] = 0;
      if (v23 != (char *)a3)
      {
        v25 = *a3;
        *(_QWORD *)(v23 + 5) = *(uint64_t *)((char *)a3 + 5);
        *(_QWORD *)v23 = v25;
        LODWORD(v25) = *((unsigned __int8 *)a3 + 12);
        v23[12] = v25;
        v18 = v25 > 9;
        v26 = (1 << v25) & 0x33C;
        if (!v18 && v26 != 0)
        {
          v28 = *(unint64_t **)v23;
          do
            v29 = __ldaxr(v28);
          while (__stlxr(v29 + 1, v28));
        }
      }
      v23 += 16;
    }
    while (v23 != v24);
    v31 = v24;
    std::vector<turi::flexible_type>::__swap_out_circular_buffer(a1, v30);
    return std::__split_buffer<turi::flexible_type>::~__split_buffer(v30);
  }
  return result;
}

void sub_21819EF44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<turi::flexible_type>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t _GLOBAL__sub_I_sarray_v2_type_encoding_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

turi::sframe *turi::sframe::sframe(turi::sframe *this, const turi::sframe *a2)
{
  _OWORD *v4;
  uint64_t **v5;
  std::string *v6;
  int v7;
  int *v8;
  file_logger *v9;
  file_logger *started;
  _QWORD *v11;
  _QWORD *v12;
  const std::locale::facet *v13;
  __int128 v14;
  _QWORD *exception;
  char *v17;
  std::string *v18;
  std::locale v19;

  *((_QWORD *)this + 1) = -1;
  v4 = (_OWORD *)((char *)this + 8);
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 11) = (char *)this + 96;
  v5 = (uint64_t **)((char *)this + 88);
  *(_QWORD *)this = &off_24D931248;
  *((_QWORD *)this + 13) = 0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_QWORD *)this + 10) = 0;
  *((_OWORD *)this + 7) = 0u;
  v6 = (std::string *)((char *)this + 112);
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 13) = 0u;
  v17 = (char *)this + 184;
  v18 = (std::string *)((char *)this + 136);
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  v7 = pthread_mutex_init((pthread_mutex_t *)((char *)this + 224), 0);
  assert_msg(v7 == 0, "Mutex create error %d", v7);
  *((_WORD *)this + 144) = 0;
  v8 = (int *)global_logger();
  if (v8[169] <= 1)
  {
    if (cppipc::must_cancel((cppipc *)v8))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v9 = (file_logger *)global_logger();
    started = file_logger::start_stream(v9, 1, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe.cpp", "sframe", 23, 1);
    v11 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v11 && *((_BYTE *)v11 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11 + 2, (uint64_t)"Function entry", 14);
    v12 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v12)
    {
      if (*((_BYTE *)v12 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v12 + *(_QWORD *)(v12[2] - 24) + 16));
        v13 = std::locale::use_facet(&v19, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 10);
        std::locale::~locale(&v19);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  if (*((_BYTE *)a2 + 288))
  {
    if (*((_BYTE *)a2 + 289))
      turi::sframe::sframe(turi::sframe const&)::$_0::operator()();
    v14 = *(_OWORD *)((char *)a2 + 24);
    *v4 = *(_OWORD *)((char *)a2 + 8);
    v4[1] = v14;
    if (this != a2)
    {
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)((char *)this + 40), *((std::string **)a2 + 5), *((__int128 **)a2 + 6), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 6) - *((_QWORD *)a2 + 5)) >> 3));
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)((char *)this + 64), *((std::string **)a2 + 8), *((__int128 **)a2 + 9), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 9) - *((_QWORD *)a2 + 8)) >> 3));
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>(v5, *((__int128 **)a2 + 11), (__int128 *)a2 + 6);
    }
    std::string::operator=(v6, (const std::string *)((char *)a2 + 112));
    std::string::operator=(v18, (const std::string *)((char *)a2 + 136));
    if (this != a2)
      std::vector<std::shared_ptr<turi::fileio::file_ownership_handle>>::__assign_with_size[abi:ne180100]<std::shared_ptr<turi::fileio::file_ownership_handle>*,std::shared_ptr<turi::fileio::file_ownership_handle>*>((uint64_t)v17, *((uint64_t **)a2 + 23), *((uint64_t **)a2 + 24), (uint64_t)(*((_QWORD *)a2 + 24) - *((_QWORD *)a2 + 23)) >> 4);
    *((_WORD *)this + 144) = 1;
  }
  return this;
}

void sub_21819F248(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, pthread_mutex_t *a10, uint64_t a11, void **a12, uint64_t a13, std::locale a14)
{
  void **v14;
  uint64_t v15;
  uint64_t v16;

  std::locale::~locale(&a14);
  turi::mutex::~mutex(a10);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v16);
  a13 = a11;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  if (*(char *)(v15 + 159) < 0)
    operator delete(*a12);
  turi::sframe_index_file_information::~sframe_index_file_information(v14);
  _Unwind_Resume(a1);
}

uint64_t turi::sframe::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  assert_msg(*(_BYTE *)(a1 + 289) == 0, "Cannot copy over an array which is currently writing");
  turi::sframe::reset((turi::sframe *)a1);
  if (*(_BYTE *)(a2 + 288))
  {
    assert_msg(*(_BYTE *)(a2 + 289) == 0, "Cannot copy an array which is writing");
    v4 = *(_OWORD *)(a2 + 8);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
    if (a1 == a2)
    {
      std::string::operator=((std::string *)(a1 + 112), (const std::string *)(a2 + 112));
      std::string::operator=((std::string *)(a1 + 136), (const std::string *)(a2 + 136));
    }
    else
    {
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)(a1 + 40), *(std::string **)(a2 + 40), *(__int128 **)(a2 + 48), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 48) - *(_QWORD *)(a2 + 40)) >> 3));
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)(a1 + 64), *(std::string **)(a2 + 64), *(__int128 **)(a2 + 72), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 72) - *(_QWORD *)(a2 + 64)) >> 3));
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>((uint64_t **)(a1 + 88), *(__int128 **)(a2 + 88), (__int128 *)(a2 + 96));
      std::string::operator=((std::string *)(a1 + 112), (const std::string *)(a2 + 112));
      std::string::operator=((std::string *)(a1 + 136), (const std::string *)(a2 + 136));
      std::vector<std::shared_ptr<turi::fileio::file_ownership_handle>>::__assign_with_size[abi:ne180100]<std::shared_ptr<turi::fileio::file_ownership_handle>*,std::shared_ptr<turi::fileio::file_ownership_handle>*>(a1 + 184, *(uint64_t **)(a2 + 184), *(uint64_t **)(a2 + 192), (uint64_t)(*(_QWORD *)(a2 + 192) - *(_QWORD *)(a2 + 184)) >> 4);
    }
    *(_WORD *)(a1 + 288) = 1;
  }
  else
  {
    *(_BYTE *)(a1 + 288) = 0;
  }
  return a1;
}

{
  __int128 v4;
  void **v5;
  __int128 v6;
  void **v7;
  __int128 v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  void **v13;
  uint64_t i;
  uint64_t v15;
  _BYTE v17[56];
  __int128 v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  void **v25;

  v4 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = v4;
  std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(a1 + 40));
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(a1 + 64));
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__move_assign(a1 + 88, (_QWORD *)(a2 + 88));
  v5 = (void **)(a1 + 112);
  if (*(char *)(a1 + 135) < 0)
    operator delete(*v5);
  v6 = *(_OWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_OWORD *)v5 = v6;
  *(_BYTE *)(a2 + 135) = 0;
  *(_BYTE *)(a2 + 112) = 0;
  v7 = (void **)(a1 + 136);
  if (*(char *)(a1 + 159) < 0)
    operator delete(*v7);
  v8 = *(_OWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_OWORD *)v7 = v8;
  *(_BYTE *)(a2 + 159) = 0;
  *(_BYTE *)(a2 + 136) = 0;
  std::vector<std::shared_ptr<turi::fileio::file_ownership_handle>>::__vdeallocate((void **)(a1 + 184));
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a2 + 184) = 0;
  *(_QWORD *)(a2 + 192) = 0;
  *(_QWORD *)(a2 + 200) = 0;
  std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100](a1 + 208, (__int128 *)(a2 + 208));
  *(_BYTE *)(a1 + 288) = *(_BYTE *)(a2 + 288);
  *(_BYTE *)(a1 + 289) = *(_BYTE *)(a2 + 289);
  *(_QWORD *)v17 = -1;
  v21 = 0;
  v22 = 0;
  memset(&v17[8], 0, 48);
  v18 = 0u;
  v19 = 0;
  v20 = &v21;
  v24 = 0;
  v23 = 0uLL;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)v17;
  *(_OWORD *)(a2 + 24) = *(_OWORD *)&v17[16];
  std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(a2 + 40));
  *(_OWORD *)(a2 + 40) = *(_OWORD *)&v17[32];
  *(_QWORD *)(a2 + 56) = *(_QWORD *)&v17[48];
  memset(&v17[32], 0, 24);
  std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(a2 + 64));
  v10 = a2 + 96;
  v9 = *(_QWORD **)(a2 + 96);
  *(_OWORD *)(a2 + 64) = v18;
  *(_QWORD *)(a2 + 80) = v19;
  v19 = 0;
  v18 = 0uLL;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a2 + 88, v9);
  v11 = v21;
  *(_QWORD *)(a2 + 88) = v20;
  *(_QWORD *)(a2 + 96) = v11;
  v12 = v22;
  *(_QWORD *)(a2 + 104) = v22;
  if (v12)
  {
    v11[2] = v10;
    v11 = 0;
    v20 = &v21;
    v21 = 0;
    v22 = 0;
  }
  else
  {
    *(_QWORD *)(a2 + 88) = v10;
  }
  v13 = (void **)(a2 + 112);
  if (*(char *)(a2 + 135) < 0)
  {
    operator delete(*v13);
    v11 = v21;
  }
  *(_OWORD *)v13 = v23;
  *(_QWORD *)(a2 + 128) = v24;
  HIBYTE(v24) = 0;
  LOBYTE(v23) = 0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v20, v11);
  v25 = (void **)&v18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v25);
  v25 = (void **)&v17[32];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v25);
  MEMORY[0x219A19390](a2 + 136, "");
  v15 = *(_QWORD *)(a2 + 184);
  for (i = *(_QWORD *)(a2 + 192); i != v15; i = std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](i - 16))
    ;
  *(_QWORD *)(a2 + 192) = v15;
  *(_WORD *)(a2 + 288) = 0;
  return a1;
}

uint64_t turi::sframe::reset(turi::sframe *this)
{
  int *v2;
  file_logger *v3;
  file_logger *started;
  _QWORD *v5;
  _QWORD *v6;
  const std::locale::facet *v7;
  __int128 v8;
  _QWORD *v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  void **v13;
  uint64_t result;
  uint64_t v15;
  _QWORD *exception;
  _BYTE v17[56];
  __int128 v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  void **v25;

  v2 = (int *)global_logger();
  if (v2[169] <= 1)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = file_logger::start_stream(v3, 1, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe.cpp", "reset", 698, 1);
    v5 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v5 && *((_BYTE *)v5 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Function entry", 14);
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v6 + *(_QWORD *)(v6[2] - 24) + 16));
        v7 = std::locale::use_facet((const std::locale *)v17, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v7->__vftable[2].~facet_0)(v7, 10);
        std::locale::~locale((std::locale *)v17);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  MEMORY[0x219A19390]((char *)this + 136, "");
  *(_QWORD *)v17 = -1;
  memset(&v17[8], 0, 48);
  v18 = 0u;
  v8 = *(_OWORD *)&v17[16];
  *(_OWORD *)((char *)this + 8) = *(_OWORD *)v17;
  v21 = 0;
  v22 = 0;
  v19 = 0;
  v20 = &v21;
  v24 = 0;
  v23 = 0uLL;
  *(_OWORD *)((char *)this + 24) = v8;
  std::vector<std::string>::__vdeallocate((std::vector<std::string> *)((char *)this + 40));
  *(_OWORD *)((char *)this + 40) = *(_OWORD *)&v17[32];
  *((_QWORD *)this + 7) = *(_QWORD *)&v17[48];
  memset(&v17[32], 0, 24);
  std::vector<std::string>::__vdeallocate((std::vector<std::string> *)((char *)this + 64));
  *((_OWORD *)this + 4) = v18;
  v10 = (char *)this + 96;
  v9 = (_QWORD *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 10) = v19;
  v19 = 0;
  v18 = 0uLL;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 88, v9);
  v11 = v21;
  *((_QWORD *)this + 11) = v20;
  *((_QWORD *)this + 12) = v11;
  v12 = v22;
  *((_QWORD *)this + 13) = v22;
  if (v12)
  {
    v11[2] = v10;
    v11 = 0;
    v20 = &v21;
    v21 = 0;
    v22 = 0;
  }
  else
  {
    *((_QWORD *)this + 11) = v10;
  }
  v13 = (void **)((char *)this + 112);
  if (*((char *)this + 135) < 0)
  {
    operator delete(*v13);
    v11 = v21;
  }
  *(_OWORD *)v13 = v23;
  *((_QWORD *)this + 16) = v24;
  HIBYTE(v24) = 0;
  LOBYTE(v23) = 0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v20, v11);
  v25 = (void **)&v18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v25);
  v25 = (void **)&v17[32];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v25);
  v15 = *((_QWORD *)this + 23);
  for (result = *((_QWORD *)this + 24);
        result != v15;
  *((_QWORD *)this + 24) = v15;
  return result;
}

void sub_21819F6B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

turi::sframe *turi::sframe::sframe(turi::sframe *this, __int128 **a2)
{
  uint64_t *v4;
  int v5;
  int *v6;
  file_logger *v7;
  file_logger *started;
  _QWORD *v9;
  _QWORD *v10;
  const std::locale::facet *v11;
  std::string::size_type v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  __int128 **v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t *v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t *v39;
  void *v40;
  void *v41;
  unsigned int v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t *v46;
  void *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t *v54;
  uint64_t v55;
  BOOL v56;
  int v57;
  unint64_t *v59;
  unint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  std::string *v65;
  uint64_t v66;
  _QWORD *exception;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  void *__p[3];
  void *v73[3];
  std::string v74;
  void **v75;
  std::string v76;
  std::string *v77;
  _BYTE v78[24];
  _BYTE *v79;
  _BYTE v80[24];
  _BYTE *v81;
  uint64_t v82;

  v82 = *MEMORY[0x24BDAC8D0];
  *((_QWORD *)this + 1) = -1;
  *(_QWORD *)this = &off_24D931248;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = (char *)this + 96;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 13) = 0u;
  v4 = (uint64_t *)((char *)this + 208);
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  v69 = (char *)this + 208;
  v5 = pthread_mutex_init((pthread_mutex_t *)((char *)this + 224), 0);
  assert_msg(v5 == 0, "Mutex create error %d", v5);
  *((_WORD *)this + 144) = 0;
  v6 = (int *)global_logger();
  if (v6[169] <= 1)
  {
    if (cppipc::must_cancel((cppipc *)v6))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v7 = (file_logger *)global_logger();
    started = file_logger::start_stream(v7, 1, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe.cpp", "sframe", 54, 1);
    v9 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v9 && *((_BYTE *)v9 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9 + 2, (uint64_t)"Function entry", 14);
    v10 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v10)
    {
      if (*((_BYTE *)v10 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(_QWORD *)(v10[2] - 24) + 16));
        v11 = std::locale::use_facet((const std::locale *)&v76, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
        std::locale::~locale((std::locale *)&v76);
        v4 = (uint64_t *)v69;
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  memset(&v74, 0, sizeof(v74));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v74, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  std::vector<turi::flex_type_enum>::vector(v73, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v74.__r_.__value_.__l.__size_ - v74.__r_.__value_.__r.__words[0]) >> 3));
  std::vector<std::vector<turi::flexible_type> const*,std::allocator<std::vector<turi::flexible_type> const*>>::vector(__p, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v74.__r_.__value_.__l.__size_ - v74.__r_.__value_.__r.__words[0]) >> 3));
  v12 = v74.__r_.__value_.__r.__words[0];
  if (v74.__r_.__value_.__l.__size_ != v74.__r_.__value_.__r.__words[0])
  {
    v13 = 0;
    v14 = 0;
    do
    {
      v15 = (_BYTE *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)(a2 + 3), (const void **)(v12 + v13));
      *((_BYTE *)v73[0] + v14) = *v15;
      v16 = std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)(a2 + 6), (const void **)(v74.__r_.__value_.__r.__words[0] + v13));
      *((_QWORD *)__p[0] + v14++) = v16;
      v12 = v74.__r_.__value_.__r.__words[0];
      v13 += 24;
    }
    while (v14 < 0xAAAAAAAAAAAAAAABLL
                * ((uint64_t)(v74.__r_.__value_.__l.__size_ - v74.__r_.__value_.__r.__words[0]) >> 3));
  }
  std::string::basic_string[abi:ne180100]<0>(&v76, "");
  turi::sframe::open_for_write((uint64_t)this, &v74, v73, &v76, 1, 1);
  if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v76.__r_.__value_.__l.__data_);
  v17 = *v4;
  std::string::basic_string[abi:ne180100]<0>(&v76, "disable_padding");
  (*(void (**)(uint64_t, std::string *, uint64_t))(*(_QWORD *)v17 + 24))(v17, &v76, 1);
  if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v76.__r_.__value_.__l.__data_);
  (*(void (**)(std::string *__return_ptr, turi::sframe *, _QWORD))(*(_QWORD *)this + 32))(&v76, this, 0);
  std::vector<turi::flexible_type>::vector(&v70, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v74.__r_.__value_.__l.__size_ - v74.__r_.__value_.__r.__words[0]) >> 3));
  v18 = (__int128 **)a2[6];
  if (v18 != a2 + 7)
  {
    v19 = (char *)v18[8] - (char *)v18[7];
    if (v19)
    {
      v20 = 0;
      v21 = v19 >> 4;
      do
      {
        v22 = v70;
        if (v71 != v70)
        {
          v23 = 0;
          do
          {
            v24 = **((_QWORD **)__p[0] + v23) + 16 * v20;
            v25 = v22 + 16 * v23;
            if (v24 != v25)
            {
              switch(*(_BYTE *)(v25 + 12))
              {
                case 2:
                  v26 = *(unint64_t **)v25;
                  do
                  {
                    v27 = __ldaxr(v26);
                    v28 = v27 - 1;
                  }
                  while (__stlxr(v28, v26));
                  if (!v28)
                  {
                    v29 = *(unint64_t **)v25;
                    if (!*(_QWORD *)v25)
                      goto LABEL_64;
                    if (*((char *)v29 + 31) < 0)
                      operator delete((void *)v29[1]);
                    v30 = v29;
                    v31 = 0x1012C404EF22A49;
                    goto LABEL_63;
                  }
                  break;
                case 3:
                  v43 = *(unint64_t **)v25;
                  do
                  {
                    v44 = __ldaxr(v43);
                    v45 = v44 - 1;
                  }
                  while (__stlxr(v45, v43));
                  if (!v45)
                  {
                    v46 = *(unint64_t **)v25;
                    if (!*(_QWORD *)v25)
                      goto LABEL_64;
                    v47 = (void *)v46[1];
                    if (v47)
                    {
                      v46[2] = (unint64_t)v47;
                      operator delete(v47);
                    }
                    v30 = v46;
                    v31 = 0x1080C409938AC02;
                    goto LABEL_63;
                  }
                  break;
                case 4:
                  v32 = *(unint64_t **)v25;
                  do
                  {
                    v33 = __ldaxr(v32);
                    v34 = v33 - 1;
                  }
                  while (__stlxr(v34, v32));
                  if (!v34)
                  {
                    v35 = *(unint64_t **)v25;
                    if (!*(_QWORD *)v25)
                      goto LABEL_64;
                    v75 = (void **)(v35 + 1);
                    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v75);
                    goto LABEL_56;
                  }
                  break;
                case 5:
                  v48 = *(unint64_t **)v25;
                  do
                  {
                    v49 = __ldaxr(v48);
                    v50 = v49 - 1;
                  }
                  while (__stlxr(v50, v48));
                  if (!v50)
                  {
                    v35 = *(unint64_t **)v25;
                    if (!*(_QWORD *)v25)
                      goto LABEL_64;
                    v75 = (void **)(v35 + 1);
                    std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v75);
LABEL_56:
                    v30 = v35;
                    v31 = 0x1020C405E66F15BLL;
                    goto LABEL_63;
                  }
                  break;
                case 8:
                  v51 = *(unint64_t **)v25;
                  do
                  {
                    v52 = __ldaxr(v51);
                    v53 = v52 - 1;
                  }
                  while (__stlxr(v53, v51));
                  if (!v53)
                  {
                    v54 = *(unint64_t **)v25;
                    if (!*(_QWORD *)v25)
                      goto LABEL_64;
                    boost::detail::shared_count::~shared_count((unsigned int **)v54 + 2);
                    v30 = v54;
                    v42 = -235920773;
                    goto LABEL_62;
                  }
                  break;
                case 9:
                  v36 = *(unint64_t **)v25;
                  do
                  {
                    v37 = __ldaxr(v36);
                    v38 = v37 - 1;
                  }
                  while (__stlxr(v38, v36));
                  if (!v38)
                  {
                    v39 = *(unint64_t **)v25;
                    if (*(_QWORD *)v25)
                    {
                      v40 = (void *)v39[6];
                      if (v40)
                      {
                        v39[7] = (unint64_t)v40;
                        operator delete(v40);
                      }
                      v41 = (void *)v39[3];
                      if (v41)
                      {
                        v39[4] = (unint64_t)v41;
                        operator delete(v41);
                      }
                      std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v39 + 1));
                      v30 = v39;
                      v42 = 2071181815;
LABEL_62:
                      v31 = v42 | 0x1030C4000000000;
LABEL_63:
                      MEMORY[0x219A19A08](v30, v31);
                    }
LABEL_64:
                    *(_QWORD *)v25 = 0;
                  }
                  break;
                default:
                  break;
              }
              v55 = *(_QWORD *)v24;
              *(_QWORD *)(v25 + 5) = *(_QWORD *)(v24 + 5);
              *(_QWORD *)v25 = v55;
              LODWORD(v55) = *(unsigned __int8 *)(v24 + 12);
              *(_BYTE *)(v25 + 12) = v55;
              v56 = v55 > 9;
              v57 = (1 << v55) & 0x33C;
              if (!v56 && v57 != 0)
              {
                v59 = *(unint64_t **)v25;
                do
                  v60 = __ldaxr(v59);
                while (__stlxr(v60 + 1, v59));
              }
            }
            ++v23;
            v22 = v70;
          }
          while (v23 < (v71 - v70) >> 4);
        }
        if (!v77)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(std::string *, uint64_t *))(v77->__r_.__value_.__r.__words[0] + 48))(v77, &v70);
        ++v20;
      }
      while (v20 != v21);
    }
  }
  (*(void (**)(turi::sframe *))(*(_QWORD *)this + 40))(this);
  v75 = (void **)&v70;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v75);
  v61 = v81;
  if (v81 == v80)
  {
    v62 = 4;
    v61 = v80;
  }
  else
  {
    if (!v81)
      goto LABEL_79;
    v62 = 5;
  }
  (*(void (**)(void))(*v61 + 8 * v62))();
LABEL_79:
  v63 = v79;
  if (v79 == v78)
  {
    v64 = 4;
    v63 = v78;
  }
  else
  {
    if (!v79)
      goto LABEL_84;
    v64 = 5;
  }
  (*(void (**)(void))(*v63 + 8 * v64))();
LABEL_84:
  v65 = v77;
  if (v77 == &v76)
  {
    v66 = 4;
    v65 = &v76;
  }
  else
  {
    if (!v77)
      goto LABEL_89;
    v66 = 5;
  }
  (*(void (**)(void))(v65->__r_.__value_.__r.__words[0] + 8 * v66))();
LABEL_89:
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v73[0])
  {
    v73[1] = v73[0];
    operator delete(v73[0]);
  }
  v76.__r_.__value_.__r.__words[0] = (std::string::size_type)&v74;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v76);
  return this;
}

void sub_21819FE08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, pthread_mutex_t *a10, uint64_t a11, void **a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,std::locale a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  uint64_t v32;

  std::locale::~locale(&a27);
  turi::mutex::~mutex(a10);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](a13);
  a23 = v32 + 184;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  a23 = a11;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  if (*(char *)(v32 + 159) < 0)
    operator delete(*(void **)(v32 + 136));
  turi::sframe_index_file_information::~sframe_index_file_information(a12);
  _Unwind_Resume(a1);
}

void turi::sframe::init_from_csvs(_BYTE *a1@<X0>, uint64_t a2@<X1>, unsigned __int8 *a3@<X2>, char a4@<W3>, char a5@<W4>, char a6@<W5>, uint64_t **a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  void *__p[2];
  char v17;
  __int16 v18;
  char v19;
  uint64_t v20[3];
  std::string v21;
  __int128 v22;
  __int16 v23;
  char v24;
  char **v25;
  char *v26[2];
  _BYTE v27[40];
  std::string *v28;

  v26[0] = 0;
  v26[1] = 0;
  v25 = v26;
  memset(v27, 0, sizeof(v27));
  LOBYTE(v23) = a4;
  HIBYTE(v23) = a5;
  v24 = a6;
  if (&v25 != (char ***)a7)
    std::__tree<std::__value_type<std::string,turi::flex_type_enum>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flex_type_enum>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flex_type_enum>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,turi::flex_type_enum>,std::__tree_node<std::__value_type<std::string,turi::flex_type_enum>,void *> *,long>>((uint64_t **)&v25, *a7, a7 + 1);
  if (v27 != (_BYTE *)a8)
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)v27, *(std::string **)a8, *(__int128 **)(a8 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a8 + 8) - *(_QWORD *)a8) >> 3));
  *(_QWORD *)&v27[24] = a10;
  *(_QWORD *)&v27[32] = a11;
  v18 = v23;
  v19 = v24;
  std::map<std::string,turi::flex_type_enum>::map[abi:ne180100](v20, (const void ***)&v25);
  memset(&v21, 0, sizeof(v21));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v21, *(__int128 **)v27, *(__int128 **)&v27[8], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v27[8] - *(_QWORD *)v27) >> 3));
  v22 = *(_OWORD *)&v27[24];
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  turi::parse_csvs_to_sframe(a2, a3, (unsigned __int8 *)&v18, a1, (uint64_t)__p, a9);
  if (v17 < 0)
    operator delete(__p[0]);
  v28 = &v21;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v28);
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)v20, (char *)v20[1]);
  v28 = (std::string *)v27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v28);
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)&v25, v26[0]);
}

void sub_2181A0344(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char *a24)
{
  if (a14 < 0)
    operator delete(__p);
  turi::csv_file_handling_options::~csv_file_handling_options(&a15);
  turi::csv_file_handling_options::~csv_file_handling_options(&a24);
  _Unwind_Resume(a1);
}

void turi::sframe::~sframe(turi::sframe *this)
{
  int *v2;
  file_logger *v3;
  file_logger *started;
  _QWORD *v5;
  _QWORD *v6;
  const std::locale::facet *v7;
  _QWORD *exception;
  std::locale v9;

  *(_QWORD *)this = &off_24D931248;
  v2 = (int *)global_logger();
  if (v2[169] <= 1)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = file_logger::start_stream(v3, 1, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe.cpp", "~sframe", 127, 1);
    v5 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v5 && *((_BYTE *)v5 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Function entry", 14);
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v6 + *(_QWORD *)(v6[2] - 24) + 16));
        v7 = std::locale::use_facet(&v9, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v7->__vftable[2].~facet_0)(v7, 10);
        std::locale::~locale(&v9);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  turi::mutex::~mutex((pthread_mutex_t *)((char *)this + 224));
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)this + 208);
  v9.__locale_ = (turi::sframe *)((char *)this + 184);
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v9);
  v9.__locale_ = (turi::sframe *)((char *)this + 160);
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v9);
  if (*((char *)this + 159) < 0)
    operator delete(*((void **)this + 17));
  if (*((char *)this + 135) < 0)
    operator delete(*((void **)this + 14));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 88, *((_QWORD **)this + 12));
  v9.__locale_ = (turi::sframe *)((char *)this + 64);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v9);
  v9.__locale_ = (turi::sframe *)((char *)this + 40);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v9);
}

{
  turi::sframe::~sframe(this);
  JUMPOUT(0x219A19A08);
}

void sub_2181A056C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  __clang_call_terminate(a1);
}

void turi::sframe::create_arrays_for_reading(uint64_t a1, __int128 *a2)
{
  int *v4;
  file_logger *v5;
  file_logger *started;
  _QWORD *v7;
  _QWORD *v8;
  const std::locale::facet *v9;
  int *v10;
  file_logger *v11;
  file_logger *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  const std::locale::facet *v19;
  __int128 v20;
  unint64_t v21;
  std::string::size_type v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t i;
  __int128 *v28;
  __int128 v29;
  uint64_t *v30;
  void **v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  __int128 *v36;
  __int128 v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  __int128 *v41;
  __int128 v42;
  uint64_t *v43;
  std::string *v44;
  _QWORD *exception;
  __int128 *v46;
  std::string v47;
  void *v48;
  char v49;
  void *__p;
  void *v51;
  uint64_t v52;
  _QWORD *v53[3];
  std::string v54;
  std::string v55;
  std::string __str;
  std::string v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  __int128 v61;
  uint64_t v62;
  std::string v63;
  std::string v64;
  uint64_t *v65;
  _QWORD *v66;
  uint64_t v67;
  __int128 *v68[3];

  v4 = (int *)global_logger();
  if (v4[169] <= 1)
  {
    if (cppipc::must_cancel((cppipc *)v4))
      goto LABEL_79;
    v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 1, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe.cpp", "create_arrays_for_reading", 131, 1);
    v7 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v7 && *((_BYTE *)v7 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7 + 2, (uint64_t)"Function entry", 14);
    v8 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v8)
    {
      if (*((_BYTE *)v8 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(_QWORD *)(v8[2] - 24) + 16));
        v9 = std::locale::use_facet((const std::locale *)&v57, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
        std::locale::~locale((std::locale *)&v57);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
LABEL_80:
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  v10 = (int *)global_logger();
  if (v10[169] > 1)
    goto LABEL_23;
  if (cppipc::must_cancel((cppipc *)v10))
LABEL_79:
    log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
  v11 = (file_logger *)global_logger();
  v12 = file_logger::start_stream(v11, 1, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe.cpp", "create_arrays_for_reading", 132, 1);
  v13 = pthread_getspecific(*((_QWORD *)v12 + 74));
  if (v13 && *((_BYTE *)v13 + 280))
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13 + 2, (uint64_t)"Opening Frame for Reading of size (", 35);
  v14 = file_logger::operator<<<unsigned long>((uint64_t)v12);
  v15 = pthread_getspecific(*(_QWORD *)(v14 + 592));
  if (v15 && *((_BYTE *)v15 + 280))
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15 + 2, (uint64_t)",", 1);
  v16 = file_logger::operator<<<unsigned long>(v14);
  v17 = pthread_getspecific(*(_QWORD *)(v16 + 592));
  if (v17 && *((_BYTE *)v17 + 280))
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17 + 2, (uint64_t)")", 1);
  v18 = pthread_getspecific(*(_QWORD *)(v16 + 592));
  if (v18)
  {
    if (*((_BYTE *)v18 + 280))
    {
      std::ios_base::getloc((const std::ios_base *)((char *)v18 + *(_QWORD *)(v18[2] - 24) + 16));
      v19 = std::locale::use_facet((const std::locale *)&v57, MEMORY[0x24BEDB350]);
      ((void (*)(const std::locale::facet *, uint64_t))v19->__vftable[2].~facet_0)(v19, 10);
      std::locale::~locale((std::locale *)&v57);
      std::ostream::put();
      std::ostream::flush();
      file_logger::stream_flush((file_logger *)v16);
      if (*(_DWORD *)(v16 + 600) == 7)
        goto LABEL_80;
    }
  }
LABEL_23:
  turi::sframe::reset((turi::sframe *)a1);
  *(_BYTE *)(a1 + 289) = 0;
  v20 = *a2;
  *(_OWORD *)(a1 + 24) = a2[1];
  *(_OWORD *)(a1 + 8) = v20;
  if ((__int128 *)(a1 + 8) != a2)
  {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)(a1 + 40), *((std::string **)a2 + 4), *((__int128 **)a2 + 5), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 3));
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)(a1 + 64), *((std::string **)a2 + 7), *((__int128 **)a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 8) - *((_QWORD *)a2 + 7)) >> 3));
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>((uint64_t **)(a1 + 88), *((__int128 **)a2 + 10), (__int128 *)((char *)a2 + 88));
  }
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)((char *)a2 + 104));
  if (*(_QWORD *)(a1 + 24))
  {
    v21 = 0;
    do
    {
      v22 = operator new();
      turi::sarray<turi::flexible_type>::sarray(v22);
      v57.__r_.__value_.__r.__words[0] = v22;
      v23 = *(_QWORD *)(a1 + 192);
      if (v23 >= *(_QWORD *)(a1 + 200))
      {
        v24 = std::vector<std::shared_ptr<turi::sarray<turi::flexible_type>>>::__emplace_back_slow_path<turi::sarray<turi::flexible_type>*>((uint64_t *)(a1 + 184), (uint64_t *)&v57);
      }
      else
      {
        std::shared_ptr<turi::sarray<turi::flexible_type>>::shared_ptr[abi:ne180100]<turi::sarray<turi::flexible_type>,void>(*(_QWORD **)(a1 + 192), v22);
        v24 = v23 + 16;
        *(_QWORD *)(a1 + 192) = v23 + 16;
      }
      *(_QWORD *)(a1 + 192) = v24;
      ++v21;
      v25 = *(_QWORD *)(a1 + 24);
    }
    while (v21 < v25);
    v46 = a2;
    v66 = 0;
    v67 = 0;
    v65 = (uint64_t *)&v66;
    if (v25)
    {
      v26 = 0;
      for (i = 0; i < v32; ++i)
      {
        v28 = (__int128 *)(*(_QWORD *)(a1 + 64) + v26);
        if (*((char *)v28 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v63, *(const std::string::value_type **)v28, *((_QWORD *)v28 + 1));
        }
        else
        {
          v29 = *v28;
          v63.__r_.__value_.__r.__words[2] = *((_QWORD *)v28 + 2);
          *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v29;
        }
        turi::parse_v2_segment_filename((uint64_t)&v63, &v57);
        v64 = v57;
        memset(&v57, 0, sizeof(v57));
        if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v63.__r_.__value_.__l.__data_);
        if (!std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)&v65, (const void **)&v64.__r_.__value_.__l.__data_))
        {
          if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&__str, v64.__r_.__value_.__l.__data_, v64.__r_.__value_.__l.__size_);
          else
            __str = v64;
          turi::read_array_group_index_file(&__str, (uint64_t)&v57);
          v68[0] = (__int128 *)&v64;
          v30 = std::__tree<std::__value_type<std::string,turi::group_index_file_information>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::group_index_file_information>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::group_index_file_information>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v65, (const void **)&v64.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v68);
          v31 = (void **)(v30 + 7);
          if (*((char *)v30 + 79) < 0)
            operator delete(*v31);
          *(_OWORD *)v31 = *(_OWORD *)&v57.__r_.__value_.__l.__data_;
          v30[9] = v57.__r_.__value_.__r.__words[2];
          *((_BYTE *)&v57.__r_.__value_.__s + 23) = 0;
          v57.__r_.__value_.__s.__data_[0] = 0;
          *((_OWORD *)v30 + 5) = v58;
          std::vector<std::string>::__vdeallocate((std::vector<std::string> *)v30 + 4);
          *((_OWORD *)v30 + 6) = v59;
          v30[14] = v60;
          v60 = 0;
          v59 = 0uLL;
          std::vector<turi::index_file_information>::__vdeallocate((void **)v30 + 15);
          *(_OWORD *)(v30 + 15) = v61;
          v30[17] = v62;
          v62 = 0;
          v61 = 0uLL;
          v68[0] = &v61;
          std::vector<turi::index_file_information>::__destroy_vector::operator()[abi:ne180100]((void ***)v68);
          v68[0] = &v59;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v68);
          if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v57.__r_.__value_.__l.__data_);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__str.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v64.__r_.__value_.__l.__data_);
        v32 = *(_QWORD *)(a1 + 24);
        v26 += 24;
      }
      if (v32)
      {
        v33 = 0;
        v34 = 0;
        v35 = 0;
        while (1)
        {
          memset(&v64, 0, sizeof(v64));
          v36 = (__int128 *)(*(_QWORD *)(a1 + 64) + v34);
          if (*((char *)v36 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v55, *(const std::string::value_type **)v36, *((_QWORD *)v36 + 1));
          }
          else
          {
            v37 = *v36;
            v55.__r_.__value_.__r.__words[2] = *((_QWORD *)v36 + 2);
            *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v37;
          }
          turi::parse_v2_segment_filename((uint64_t)&v55, &v57);
          if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v64.__r_.__value_.__l.__data_);
          v64 = v57;
          v38 = v58;
          *((_BYTE *)&v57.__r_.__value_.__s + 23) = 0;
          v57.__r_.__value_.__s.__data_[0] = 0;
          if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v55.__r_.__value_.__l.__data_);
          v57.__r_.__value_.__r.__words[0] = (std::string::size_type)&v64;
          v39 = std::__tree<std::__value_type<std::string,turi::group_index_file_information>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::group_index_file_information>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::group_index_file_information>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v65, (const void **)&v64.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&v57);
          v40 = *(_QWORD *)(*(_QWORD *)(a1 + 184) + v33);
          if (*((_DWORD *)v39 + 20) != 1)
            break;
          v41 = (__int128 *)(*((_QWORD *)v46 + 7) + v34);
          if (*((char *)v41 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v54, *(const std::string::value_type **)v41, *((_QWORD *)v41 + 1));
          }
          else
          {
            v42 = *v41;
            v54.__r_.__value_.__r.__words[2] = *((_QWORD *)v41 + 2);
            *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v42;
          }
          turi::sarray<turi::flexible_type>::open_for_read(v40, &v54);
          if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
          {
            v44 = &v54;
LABEL_72:
            operator delete(v44->__r_.__value_.__l.__data_);
          }
LABEL_73:
          if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v64.__r_.__value_.__l.__data_);
          ++v35;
          v34 += 24;
          v33 += 16;
          if (v35 >= *(_QWORD *)(a1 + 24))
            goto LABEL_78;
        }
        v57.__r_.__value_.__r.__words[0] = (std::string::size_type)&v64;
        v43 = std::__tree<std::__value_type<std::string,turi::group_index_file_information>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::group_index_file_information>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::group_index_file_information>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v65, (const void **)&v64.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&v57);
        turi::index_file_information::index_file_information(&v47, (const turi::index_file_information *)(v43[15] + 144 * v38));
        turi::sarray<turi::flexible_type>::open_for_read(v40, (uint64_t)&v47);
        std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v53, v53[1]);
        v57.__r_.__value_.__r.__words[0] = (std::string::size_type)&v52;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v57);
        if (__p)
        {
          v51 = __p;
          operator delete(__p);
        }
        if (v49 < 0)
          operator delete(v48);
        if ((SHIBYTE(v47.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_73;
        v44 = &v47;
        goto LABEL_72;
      }
    }
  }
  else
  {
    v66 = 0;
    v67 = 0;
    v65 = (uint64_t *)&v66;
  }
LABEL_78:
  turi::sframe::keep_array_file_ref((turi::sframe *)a1);
  std::__tree<std::__value_type<std::string,turi::group_index_file_information>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::group_index_file_information>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::group_index_file_information>>>::destroy((uint64_t)&v65, v66);
}

void sub_2181A0D30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,std::locale a51)
{
  std::locale::~locale(&a51);
  _Unwind_Resume(a1);
}

void turi::sframe::keep_array_file_ref(turi::sframe *this)
{
  turi::sframe *v1;
  pthread_mutex_t *instance;
  unint64_t v3;
  _OWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  _QWORD *v14;
  char *v15;
  __int128 v16;
  int64x2_t v17;
  _OWORD *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  pthread_mutex_t *v23;
  unint64_t v24;
  _OWORD *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  _QWORD *v34;
  _QWORD *v35;
  char *v36;
  __int128 v37;
  int64x2_t v38;
  _OWORD *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  __int128 *v46;
  __int128 v47;
  turi::fileio::file_handle_pool *v48;
  _OWORD *v49;
  int64x2_t *v50;
  pthread_mutex_t *v51;
  unint64_t v52;
  _OWORD *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  uint64_t v59;
  char *v60;
  _QWORD *v61;
  _QWORD *v62;
  char *v63;
  __int128 v64;
  int64x2_t v65;
  _OWORD *v66;
  uint64_t v67;
  std::__shared_weak_count *size;
  unint64_t *v69;
  unint64_t v70;
  _QWORD *v71;
  _OWORD *v72;
  BOOL v73;
  std::string __p;
  std::string v75;
  __int128 v76;
  uint64_t v77;
  std::string v78;
  uint64_t v79;
  char *v80;

  v1 = this;
  if (*((char *)this + 159) < 0)
  {
    if (!*((_QWORD *)this + 18))
      goto LABEL_23;
  }
  else if (!*((_BYTE *)this + 159))
  {
    goto LABEL_23;
  }
  instance = turi::fileio::file_handle_pool::get_instance(this);
  turi::fileio::file_handle_pool::register_file((uint64_t)instance, (__int128 *)((char *)v1 + 136), (uint64_t *)&v76);
  this = (turi::sframe *)((char *)v1 + 176);
  v3 = *((_QWORD *)v1 + 22);
  v4 = (_OWORD *)*((_QWORD *)v1 + 21);
  if ((unint64_t)v4 >= v3)
  {
    v5 = *((_QWORD *)v1 + 20);
    v6 = ((uint64_t)v4 - v5) >> 4;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 60)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v8 = v3 - v5;
    if (v8 >> 3 > v7)
      v7 = v8 >> 3;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
      v9 = 0xFFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    v80 = (char *)v1 + 176;
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::flexible_type>>((uint64_t)this, v9);
    v12 = &v10[16 * v6];
    *(_OWORD *)v12 = v76;
    v76 = 0uLL;
    v14 = (_QWORD *)*((_QWORD *)v1 + 20);
    v13 = (_QWORD *)*((_QWORD *)v1 + 21);
    if (v13 == v14)
    {
      v17 = vdupq_n_s64((unint64_t)v13);
      v15 = &v10[16 * v6];
    }
    else
    {
      v15 = &v10[16 * v6];
      do
      {
        v16 = *((_OWORD *)v13 - 1);
        v13 -= 2;
        *((_OWORD *)v15 - 1) = v16;
        v15 -= 16;
        *v13 = 0;
        v13[1] = 0;
      }
      while (v13 != v14);
      v17 = *((int64x2_t *)v1 + 10);
    }
    v18 = v12 + 16;
    *((_QWORD *)v1 + 20) = v15;
    *((_QWORD *)v1 + 21) = v12 + 16;
    *(int64x2_t *)&v78.__r_.__value_.__r.__words[1] = v17;
    v19 = *((_QWORD *)v1 + 22);
    *((_QWORD *)v1 + 22) = &v10[16 * v11];
    v79 = v19;
    v78.__r_.__value_.__r.__words[0] = v17.i64[0];
    this = (turi::sframe *)std::__split_buffer<std::shared_ptr<turi::group_aggregate_value>>::~__split_buffer((uint64_t)&v78);
    v20 = (std::__shared_weak_count *)*((_QWORD *)&v76 + 1);
    *((_QWORD *)v1 + 21) = v18;
    if (v20)
    {
      p_shared_owners = (unint64_t *)&v20->__shared_owners_;
      do
        v22 = __ldaxr(p_shared_owners);
      while (__stlxr(v22 - 1, p_shared_owners));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
  }
  else
  {
    *v4 = v76;
    *((_QWORD *)v1 + 21) = v4 + 1;
  }
LABEL_23:
  if (*((char *)v1 + 135) < 0)
  {
    if (!*((_QWORD *)v1 + 15))
      goto LABEL_45;
  }
  else if (!*((_BYTE *)v1 + 135))
  {
    goto LABEL_45;
  }
  v23 = turi::fileio::file_handle_pool::get_instance(this);
  turi::fileio::file_handle_pool::register_file((uint64_t)v23, (__int128 *)v1 + 7, (uint64_t *)&v76);
  v24 = *((_QWORD *)v1 + 22);
  v25 = (_OWORD *)*((_QWORD *)v1 + 21);
  if ((unint64_t)v25 >= v24)
  {
    v26 = *((_QWORD *)v1 + 20);
    v27 = ((uint64_t)v25 - v26) >> 4;
    v28 = v27 + 1;
    if ((unint64_t)(v27 + 1) >> 60)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v29 = v24 - v26;
    if (v29 >> 3 > v28)
      v28 = v29 >> 3;
    if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF0)
      v30 = 0xFFFFFFFFFFFFFFFLL;
    else
      v30 = v28;
    v80 = (char *)v1 + 176;
    v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::flexible_type>>((uint64_t)v1 + 176, v30);
    v33 = &v31[16 * v27];
    *(_OWORD *)v33 = v76;
    v76 = 0uLL;
    v35 = (_QWORD *)*((_QWORD *)v1 + 20);
    v34 = (_QWORD *)*((_QWORD *)v1 + 21);
    if (v34 == v35)
    {
      v38 = vdupq_n_s64((unint64_t)v34);
      v36 = &v31[16 * v27];
    }
    else
    {
      v36 = &v31[16 * v27];
      do
      {
        v37 = *((_OWORD *)v34 - 1);
        v34 -= 2;
        *((_OWORD *)v36 - 1) = v37;
        v36 -= 16;
        *v34 = 0;
        v34[1] = 0;
      }
      while (v34 != v35);
      v38 = *((int64x2_t *)v1 + 10);
    }
    v39 = v33 + 16;
    *((_QWORD *)v1 + 20) = v36;
    *((_QWORD *)v1 + 21) = v33 + 16;
    *(int64x2_t *)&v78.__r_.__value_.__r.__words[1] = v38;
    v40 = *((_QWORD *)v1 + 22);
    *((_QWORD *)v1 + 22) = &v31[16 * v32];
    v79 = v40;
    v78.__r_.__value_.__r.__words[0] = v38.i64[0];
    std::__split_buffer<std::shared_ptr<turi::group_aggregate_value>>::~__split_buffer((uint64_t)&v78);
    v41 = (std::__shared_weak_count *)*((_QWORD *)&v76 + 1);
    *((_QWORD *)v1 + 21) = v39;
    if (v41)
    {
      v42 = (unint64_t *)&v41->__shared_owners_;
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
      }
    }
  }
  else
  {
    *v25 = v76;
    *((_QWORD *)v1 + 21) = v25 + 1;
  }
LABEL_45:
  *((_QWORD *)&v76 + 1) = 0;
  v77 = 0;
  *(_QWORD *)&v76 = (char *)&v76 + 8;
  if (*((_QWORD *)v1 + 3))
  {
    v44 = 0;
    v45 = 0;
    do
    {
      v46 = (__int128 *)(*((_QWORD *)v1 + 8) + v44);
      if (*((char *)v46 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v46, *((_QWORD *)v46 + 1));
      }
      else
      {
        v47 = *v46;
        __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v46 + 2);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v47;
      }
      turi::parse_v2_segment_filename((uint64_t)&__p, &v78);
      v75 = v78;
      memset(&v78, 0, sizeof(v78));
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v48 = (turi::fileio::file_handle_pool *)std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)&v76, (const void **)&v75.__r_.__value_.__l.__data_, (uint64_t)&v75);
      if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v75.__r_.__value_.__l.__data_);
      ++v45;
      v44 += 24;
    }
    while (v45 < *((_QWORD *)v1 + 3));
    v49 = (_OWORD *)v76;
    if ((__int128 *)v76 != (__int128 *)((char *)&v76 + 8))
    {
      v50 = (int64x2_t *)((char *)v1 + 160);
      do
      {
        v51 = turi::fileio::file_handle_pool::get_instance(v48);
        v48 = (turi::fileio::file_handle_pool *)turi::fileio::file_handle_pool::register_file((uint64_t)v51, v49 + 2, (uint64_t *)&v75);
        v53 = (_OWORD *)*((_QWORD *)v1 + 21);
        v52 = *((_QWORD *)v1 + 22);
        if ((unint64_t)v53 >= v52)
        {
          v54 = ((uint64_t)v53 - v50->i64[0]) >> 4;
          v55 = v54 + 1;
          if ((unint64_t)(v54 + 1) >> 60)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          v56 = v52 - v50->i64[0];
          if (v56 >> 3 > v55)
            v55 = v56 >> 3;
          if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFF0)
            v57 = 0xFFFFFFFFFFFFFFFLL;
          else
            v57 = v55;
          v80 = (char *)v1 + 176;
          v58 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::flexible_type>>((uint64_t)v1 + 176, v57);
          v60 = &v58[16 * v54];
          *(_OWORD *)v60 = *(_OWORD *)&v75.__r_.__value_.__l.__data_;
          *(_OWORD *)&v75.__r_.__value_.__l.__data_ = 0uLL;
          v62 = (_QWORD *)*((_QWORD *)v1 + 20);
          v61 = (_QWORD *)*((_QWORD *)v1 + 21);
          if (v61 == v62)
          {
            v65 = vdupq_n_s64((unint64_t)v61);
            v63 = &v58[16 * v54];
          }
          else
          {
            v63 = &v58[16 * v54];
            do
            {
              v64 = *((_OWORD *)v61 - 1);
              v61 -= 2;
              *((_OWORD *)v63 - 1) = v64;
              v63 -= 16;
              *v61 = 0;
              v61[1] = 0;
            }
            while (v61 != v62);
            v65 = *v50;
          }
          v66 = v60 + 16;
          *((_QWORD *)v1 + 20) = v63;
          *((_QWORD *)v1 + 21) = v60 + 16;
          *(int64x2_t *)&v78.__r_.__value_.__r.__words[1] = v65;
          v67 = *((_QWORD *)v1 + 22);
          *((_QWORD *)v1 + 22) = &v58[16 * v59];
          v79 = v67;
          v78.__r_.__value_.__r.__words[0] = v65.i64[0];
          v48 = (turi::fileio::file_handle_pool *)std::__split_buffer<std::shared_ptr<turi::group_aggregate_value>>::~__split_buffer((uint64_t)&v78);
          size = (std::__shared_weak_count *)v75.__r_.__value_.__l.__size_;
          *((_QWORD *)v1 + 21) = v66;
          if (size)
          {
            v69 = (unint64_t *)&size->__shared_owners_;
            do
              v70 = __ldaxr(v69);
            while (__stlxr(v70 - 1, v69));
            if (!v70)
            {
              ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
              std::__shared_weak_count::__release_weak(size);
            }
          }
        }
        else
        {
          *v53 = *(_OWORD *)&v75.__r_.__value_.__l.__data_;
          *((_QWORD *)v1 + 21) = v53 + 1;
        }
        v71 = (_QWORD *)*((_QWORD *)v49 + 1);
        if (v71)
        {
          do
          {
            v72 = v71;
            v71 = (_QWORD *)*v71;
          }
          while (v71);
        }
        else
        {
          do
          {
            v72 = (_OWORD *)*((_QWORD *)v49 + 2);
            v73 = *(_QWORD *)v72 == (_QWORD)v49;
            v49 = v72;
          }
          while (!v73);
        }
        v49 = v72;
      }
      while (v72 != (__int128 *)((char *)&v76 + 8));
    }
  }
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)&v76, *((char **)&v76 + 1));
}

void sub_2181A1334(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23,uint64_t a24)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  _Unwind_Resume(a1);
}

__n128 turi::sframe::create_arrays_for_reading(uint64_t a1, uint64_t **a2, const void ***a3, char a4)
{
  int *v7;
  file_logger *v8;
  file_logger *started;
  _QWORD *v10;
  _QWORD *v11;
  const std::locale::facet *v12;
  __n128 result;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  unint64_t v35;
  __int128 v36;
  unint64_t v37;
  unint64_t v38;
  __int128 v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  std::string *v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  std::string *v49;
  std::string *v50;
  __int128 v51;
  uint64_t v52;
  int v53;
  void *v54;
  std::string *v55;
  __int128 v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *exception;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  void *v70[2];
  char v71;
  void *__p[2];
  std::string::size_type v73;
  std::__split_buffer<std::string> v74[7];

  v7 = (int *)global_logger();
  if (v7[169] <= 1)
  {
    if (cppipc::must_cancel((cppipc *)v7))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v8 = (file_logger *)global_logger();
    started = file_logger::start_stream(v8, 1, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe.cpp", "create_arrays_for_reading", 180, 1);
    v10 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v10 && *((_BYTE *)v10 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10 + 2, (uint64_t)"Function entry", 14);
    v11 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v11)
    {
      if (*((_BYTE *)v11 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(_QWORD *)(v11[2] - 24) + 16));
        v12 = std::locale::use_facet((const std::locale *)v74, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
        std::locale::~locale((std::locale *)v74);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  turi::sframe::reset((turi::sframe *)a1);
  *(_BYTE *)(a1 + 289) = 0;
  v14 = a2[1];
  if (*a2 != v14)
  {
    if ((uint64_t **)(a1 + 184) != a2)
      std::vector<std::shared_ptr<turi::fileio::file_ownership_handle>>::__assign_with_size[abi:ne180100]<std::shared_ptr<turi::fileio::file_ownership_handle>*,std::shared_ptr<turi::fileio::file_ownership_handle>*>(a1 + 184, *a2, v14, ((char *)v14 - (char *)*a2) >> 4);
    std::vector<std::string>::resize((std::vector<std::string> *)(a1 + 64), (uint64_t)(*(_QWORD *)(a1 + 192) - *(_QWORD *)(a1 + 184)) >> 4);
    *(_QWORD *)(a1 + 8) = 0;
    v16 = *(uint64_t **)(a1 + 184);
    v15 = *(uint64_t **)(a1 + 192);
    *(_QWORD *)(a1 + 24) = ((char *)v15 - (char *)v16) >> 4;
    v17 = *v16;
    if (!*(_BYTE *)(*v16 + 248))
      goto LABEL_18;
    v18 = *(uint64_t **)(v17 + 80);
    v19 = *(_QWORD *)(v17 + 88) - (_QWORD)v18;
    if (v19)
    {
      v20 = 0;
      v21 = v19 >> 3;
      if (v21 <= 1)
        v21 = 1;
      do
      {
        v22 = *v18++;
        v20 += v22;
        --v21;
      }
      while (v21);
    }
    else
    {
LABEL_18:
      v20 = 0;
    }
    *(_QWORD *)(a1 + 32) = v20;
    if (v16 != v15)
    {
      v23 = v16;
      do
      {
        v24 = *v23;
        if (*(_BYTE *)(*v23 + 248) && (v25 = *(uint64_t **)(v24 + 80), (v26 = *(_QWORD *)(v24 + 88) - (_QWORD)v25) != 0))
        {
          v27 = 0;
          v28 = v26 >> 3;
          if (v28 <= 1)
            v28 = 1;
          do
          {
            v29 = *v25++;
            v27 += v29;
            --v28;
          }
          while (v28);
        }
        else
        {
          v27 = 0;
        }
        if (v27 != v20)
        {
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v74);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v74[0].__end_, (uint64_t)"Columns do not have the same length! ", 37);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v74[0].__end_, (uint64_t)"Expected ", 9);
          std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v74[0].__end_, (uint64_t)", found ", 8);
          v60 = *v23;
          if (*(_BYTE *)(*v23 + 248))
          {
            v62 = v60 + 80;
            v61 = *(uint64_t **)(v60 + 80);
            v63 = *(_QWORD *)(v62 + 8) - (_QWORD)v61;
            if (v63)
            {
              v65 = 0;
              v66 = v63 >> 3;
              if (v66 <= 1)
                v66 = 1;
              do
              {
                v67 = *v61++;
                v65 += v67;
                --v66;
              }
              while (v66);
            }
          }
          v68 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)".", 1);
          __p[0] = v74;
          turi::sframe::create_arrays_for_reading(std::vector<std::shared_ptr<turi::sarray<turi::flexible_type>>> const&,std::vector<std::string> const&,BOOL)::$_0::operator()();
        }
        v23 += 2;
      }
      while (v23 != v15);
    }
    if ((a4 & 1) != 0)
    {
      std::set<std::string>::set[abi:ne180100]<std::__wrap_iter<std::string*>>((uint64_t)v74, *a3, a3[1]);
      if ((std::__split_buffer<std::string>::pointer)(0xAAAAAAAAAAAAAAABLL * (a3[1] - *a3)) != v74[0].__end_)
        turi::sframe::create_arrays_for_reading(std::vector<std::shared_ptr<turi::sarray<turi::flexible_type>>> const&,std::vector<std::string> const&,BOOL)::$_1::operator()();
      std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)v74, (char *)v74[0].__begin_);
      v16 = *(uint64_t **)(a1 + 184);
      v15 = *(uint64_t **)(a1 + 192);
    }
    if (v15 != v16)
    {
      v30 = 0;
      v31 = 0;
      v32 = 0;
      v33 = (_QWORD *)(a1 + 40);
      while (0xAAAAAAAAAAAAAAABLL * (a3[1] - *a3) > v32)
      {
        turi::sframe::generate_valid_column_name(a1, (uint64_t)&(*a3)[v31], (uint64_t)__p);
        v35 = *(_QWORD *)(a1 + 48);
        v34 = *(_QWORD *)(a1 + 56);
        if (v35 >= v34)
        {
          v40 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v35 - *v33) >> 3);
          v41 = v40 + 1;
          if (v40 + 1 > 0xAAAAAAAAAAAAAAALL)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          v42 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v34 - *v33) >> 3);
          if (2 * v42 > v41)
            v41 = 2 * v42;
          if (v42 >= 0x555555555555555)
            v43 = 0xAAAAAAAAAAAAAAALL;
          else
            v43 = v41;
          v74[0].__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 56);
          if (v43)
            v44 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>(a1 + 56, v43);
          else
            v44 = 0;
          v50 = v44 + v40;
          v74[0].__first_ = v44;
          v74[0].__begin_ = v50;
          v74[0].__end_cap_.__value_ = &v44[v43];
          v51 = *(_OWORD *)__p;
          v50->__r_.__value_.__r.__words[2] = v73;
          *(_OWORD *)&v50->__r_.__value_.__l.__data_ = v51;
          __p[1] = 0;
          v73 = 0;
          __p[0] = 0;
          v74[0].__end_ = v50 + 1;
          std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)(a1 + 40), v74);
          v52 = *(_QWORD *)(a1 + 48);
          std::__split_buffer<std::string>::~__split_buffer(v74);
          v53 = SHIBYTE(v73);
          *(_QWORD *)(a1 + 48) = v52;
          if ((v53 & 0x80000000) == 0)
            goto LABEL_65;
          v54 = __p[0];
          goto LABEL_64;
        }
        v36 = *(_OWORD *)__p;
        *(_QWORD *)(v35 + 16) = v73;
        *(_OWORD *)v35 = v36;
        *(_QWORD *)(a1 + 48) = v35 + 24;
LABEL_65:
        turi::sarray<turi::flexible_type>::get_index_file((*a2)[v30], (std::string *)v74);
        v59 = *(_QWORD *)(a1 + 64) + v31 * 8;
        if (*(char *)(v59 + 23) < 0)
          operator delete(*(void **)v59);
        result = *(__n128 *)&v74[0].__first_;
        *(_QWORD *)(v59 + 16) = v74[0].__end_;
        *(__n128 *)v59 = result;
        ++v32;
        v31 += 3;
        v30 += 2;
        if (v32 >= (uint64_t)(*(_QWORD *)(a1 + 192) - *(_QWORD *)(a1 + 184)) >> 4)
          return result;
      }
      std::string::basic_string[abi:ne180100]<0>(v70, "");
      turi::sframe::generate_valid_column_name(a1, (uint64_t)v70, (uint64_t)__p);
      v37 = *(_QWORD *)(a1 + 48);
      v38 = *(_QWORD *)(a1 + 56);
      if (v37 >= v38)
      {
        v45 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v37 - *v33) >> 3);
        v46 = v45 + 1;
        if (v45 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v47 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v38 - *v33) >> 3);
        if (2 * v47 > v46)
          v46 = 2 * v47;
        if (v47 >= 0x555555555555555)
          v48 = 0xAAAAAAAAAAAAAAALL;
        else
          v48 = v46;
        v74[0].__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 56);
        if (v48)
          v49 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>(a1 + 56, v48);
        else
          v49 = 0;
        v55 = v49 + v45;
        v74[0].__first_ = v49;
        v74[0].__begin_ = v55;
        v74[0].__end_cap_.__value_ = &v49[v48];
        v56 = *(_OWORD *)__p;
        v55->__r_.__value_.__r.__words[2] = v73;
        *(_OWORD *)&v55->__r_.__value_.__l.__data_ = v56;
        __p[1] = 0;
        v73 = 0;
        __p[0] = 0;
        v74[0].__end_ = v55 + 1;
        std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)(a1 + 40), v74);
        v57 = *(_QWORD *)(a1 + 48);
        std::__split_buffer<std::string>::~__split_buffer(v74);
        v58 = SHIBYTE(v73);
        *(_QWORD *)(a1 + 48) = v57;
        if (v58 < 0)
          operator delete(__p[0]);
      }
      else
      {
        v39 = *(_OWORD *)__p;
        *(_QWORD *)(v37 + 16) = v73;
        *(_OWORD *)v37 = v39;
        __p[1] = 0;
        v73 = 0;
        __p[0] = 0;
        *(_QWORD *)(a1 + 48) = v37 + 24;
      }
      if ((v71 & 0x80000000) == 0)
        goto LABEL_65;
      v54 = v70[0];
LABEL_64:
      operator delete(v54);
      goto LABEL_65;
    }
  }
  return result;
}

void sub_2181A19F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,std::locale a23,uint64_t a24)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a23);
  _Unwind_Resume(a1);
}

void turi::sframe::generate_valid_column_name(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  std::string *v6;
  std::string::size_type size;
  std::string *v8;
  std::string::size_type v9;
  char v10;
  uint64_t v11;
  int v12;
  const std::string::value_type *v13;
  std::string::size_type v14;
  std::string *v15;
  __int128 v16;
  unint64_t v17;
  int v18;
  const std::string::value_type *v19;
  std::string::size_type v20;
  std::string *v21;
  std::string::size_type v22;
  char v23;
  std::string v24;
  std::string __str;
  _QWORD v26[3];

  v26[2] = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v5 = *(unsigned __int8 *)(a2 + 23);
  if ((v5 & 0x80u) != 0)
    v5 = *(_QWORD *)(a2 + 8);
  if (v5)
  {
    std::string::operator=((std::string *)a3, (const std::string *)a2);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__str, "X");
    std::to_string(&v24, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 48) - *(_QWORD *)(a1 + 40)) >> 3) + 1);
    if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v6 = &v24;
    else
      v6 = (std::string *)v24.__r_.__value_.__r.__words[0];
    if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v24.__r_.__value_.__r.__words[2]);
    else
      size = v24.__r_.__value_.__l.__size_;
    v8 = std::string::append(&__str, (const std::string::value_type *)v6, size);
    v9 = v8->__r_.__value_.__r.__words[0];
    v26[0] = v8->__r_.__value_.__l.__size_;
    *(_QWORD *)((char *)v26 + 7) = *(std::string::size_type *)((char *)&v8->__r_.__value_.__r.__words[1] + 7);
    v10 = HIBYTE(v8->__r_.__value_.__r.__words[2]);
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    if (*(char *)(a3 + 23) < 0)
      operator delete(*(void **)a3);
    v11 = v26[0];
    *(_QWORD *)a3 = v9;
    *(_QWORD *)(a3 + 8) = v11;
    *(_QWORD *)(a3 + 15) = *(_QWORD *)((char *)v26 + 7);
    *(_BYTE *)(a3 + 23) = v10;
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v24.__r_.__value_.__l.__data_);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (turi::sframe::contains_column(a1, (unsigned __int8 **)a3))
  {
    std::string::append((std::string *)a3, ".");
    std::to_string(&v24, 1uLL);
    v12 = *(char *)(a3 + 23);
    if (v12 >= 0)
      v13 = (const std::string::value_type *)a3;
    else
      v13 = *(const std::string::value_type **)a3;
    if (v12 >= 0)
      v14 = *(unsigned __int8 *)(a3 + 23);
    else
      v14 = *(_QWORD *)(a3 + 8);
    v15 = std::string::insert(&v24, 0, v13, v14);
    v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v24.__r_.__value_.__l.__data_);
    v17 = 2;
    while (turi::sframe::contains_column(a1, (unsigned __int8 **)&__str))
    {
      std::to_string(&v24, v17);
      v18 = *(char *)(a3 + 23);
      if (v18 >= 0)
        v19 = (const std::string::value_type *)a3;
      else
        v19 = *(const std::string::value_type **)a3;
      if (v18 >= 0)
        v20 = *(unsigned __int8 *)(a3 + 23);
      else
        v20 = *(_QWORD *)(a3 + 8);
      v21 = std::string::insert(&v24, 0, v19, v20);
      v22 = v21->__r_.__value_.__r.__words[0];
      v26[0] = v21->__r_.__value_.__l.__size_;
      *(_QWORD *)((char *)v26 + 7) = *(std::string::size_type *)((char *)&v21->__r_.__value_.__r.__words[1] + 7);
      v23 = HIBYTE(v21->__r_.__value_.__r.__words[2]);
      v21->__r_.__value_.__l.__size_ = 0;
      v21->__r_.__value_.__r.__words[2] = 0;
      v21->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      __str.__r_.__value_.__r.__words[0] = v22;
      __str.__r_.__value_.__l.__size_ = v26[0];
      *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v26 + 7);
      *((_BYTE *)&__str.__r_.__value_.__s + 23) = v23;
      if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v24.__r_.__value_.__l.__data_);
      ++v17;
    }
    std::string::operator=((std::string *)a3, &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
  }
}

void sub_2181A1D1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v21 + 23) < 0)
    operator delete(*(void **)v21);
  _Unwind_Resume(exception_object);
}

void turi::sarray<turi::flexible_type>::get_index_file(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  if (!*(_BYTE *)(a1 + 248))
    turi::sarray<turi::flexible_type>::get_index_file(void)const::{lambda(void)#1}::operator()();
  if (*(char *)(a1 + 175) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(a1 + 152), *(_QWORD *)(a1 + 160));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 152);
    a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 168);
  }
}

uint64_t turi::sframe::create_arrays_for_writing(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t a4, const std::string *a5, int a6)
{
  int *v11;
  file_logger *v12;
  file_logger *started;
  _QWORD *v14;
  _QWORD *v15;
  const std::locale::facet *v16;
  int *v17;
  file_logger *v18;
  file_logger *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  const std::locale::facet *v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  uint64_t v31;
  std::vector<std::string>::size_type v32;
  _QWORD *v33;
  unsigned __int8 *v34;
  unint64_t i;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  unint64_t v39;
  unint64_t v40;
  __int128 v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  std::string *v48;
  std::string *v49;
  __int128 v50;
  uint64_t v51;
  int v52;
  unsigned __int8 *v53;
  unsigned __int8 v54;
  uint64_t v55;
  uint64_t v56;
  size_t v57;
  unsigned __int8 *v58;
  unsigned __int8 *v59;
  const void **v60;
  unsigned __int8 *v61;
  turi::fileio::fixed_size_cache_manager *v62;
  int v63;
  std::string::size_type size;
  const std::string *v65;
  std::__split_buffer<std::string>::pointer first;
  std::__split_buffer<std::string>::pointer end_high;
  uint64_t v68;
  char *v69;
  std::string::size_type v70;
  int v71;
  int v72;
  uint64_t instance;
  void **v74;
  uint64_t v75;
  std::__split_buffer<std::string>::pointer begin;
  uint64_t v77;
  int v78;
  _QWORD *v79;
  turi::fileio::fixed_size_cache_manager *v80;
  uint64_t v81;
  size_t v82;
  _QWORD *v83;
  std::string *p_p;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _OWORD *v91;
  void **v92;
  _QWORD *exception;
  _QWORD *v95;
  uint64_t v96;
  _QWORD *v97;
  void *v99[2];
  char v100;
  _QWORD v101[2];
  char v102;
  std::string v103;
  void *v104[2];
  char v105;
  std::string v106;
  std::string v107;
  std::string __p;
  _BYTE v109[24];
  uint64_t v110;
  std::string v111;
  std::__split_buffer<std::string> v112;
  void **v113;

  v11 = (int *)global_logger();
  if (v11[169] <= 1)
  {
    if (cppipc::must_cancel((cppipc *)v11))
      goto LABEL_147;
    v12 = (file_logger *)global_logger();
    started = file_logger::start_stream(v12, 1, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe.cpp", "create_arrays_for_writing", 236, 1);
    v14 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v14 && *((_BYTE *)v14 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14 + 2, (uint64_t)"Function entry", 14);
    v15 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v15)
    {
      if (*((_BYTE *)v15 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v15 + *(_QWORD *)(v15[2] - 24) + 16));
        v16 = std::locale::use_facet((const std::locale *)&v112, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v16->__vftable[2].~facet_0)(v16, 10);
        std::locale::~locale((std::locale *)&v112);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  v17 = (int *)global_logger();
  if (v17[169] > 1)
    goto LABEL_31;
  if (cppipc::must_cancel((cppipc *)v17))
LABEL_147:
    log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
  v18 = (file_logger *)global_logger();
  v19 = file_logger::start_stream(v18, 1, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe.cpp", "create_arrays_for_writing", 237, 1);
  v20 = pthread_getspecific(*((_QWORD *)v19 + 74));
  if (v20 && *((_BYTE *)v20 + 280))
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20 + 2, (uint64_t)"Opening Frame for writing to ", 29);
  if (SHIBYTE(a5->__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v111, a5->__r_.__value_.__l.__data_, a5->__r_.__value_.__l.__size_);
  else
    v111 = *a5;
  v21 = file_logger::operator<<<std::string>((uint64_t)v19, (uint64_t)&v111);
  v22 = pthread_getspecific(*(_QWORD *)(v21 + 592));
  if (v22 && *((_BYTE *)v22 + 280))
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22 + 2, (uint64_t)" with ", 6);
  v23 = file_logger::operator<<<unsigned long>(v21);
  v24 = pthread_getspecific(*(_QWORD *)(v23 + 592));
  if (v24 && *((_BYTE *)v24 + 280))
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24 + 2, (uint64_t)" segments and ", 14);
  v25 = file_logger::operator<<<unsigned long>(v23);
  v26 = pthread_getspecific(*(_QWORD *)(v25 + 592));
  if (v26 && *((_BYTE *)v26 + 280))
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26 + 2, (uint64_t)" columns", 8);
  v27 = pthread_getspecific(*(_QWORD *)(v25 + 592));
  if (v27)
  {
    if (*((_BYTE *)v27 + 280))
    {
      std::ios_base::getloc((const std::ios_base *)((char *)v27 + *(_QWORD *)(v27[2] - 24) + 16));
      v28 = std::locale::use_facet((const std::locale *)&v112, MEMORY[0x24BEDB350]);
      ((void (*)(const std::locale::facet *, uint64_t))v28->__vftable[2].~facet_0)(v28, 10);
      std::locale::~locale((std::locale *)&v112);
      std::ostream::put();
      std::ostream::flush();
      file_logger::stream_flush((file_logger *)v25);
      if (*(_DWORD *)(v25 + 600) == 7)
      {
        __print_back_trace();
        v95 = __cxa_allocate_exception(8uLL);
        *v95 = "LOG_FATAL encountered";
        __cxa_throw(v95, MEMORY[0x24BEDB718], 0);
      }
    }
  }
  if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v111.__r_.__value_.__l.__data_);
LABEL_31:
  v96 = a4;
  v97 = a3;
  turi::sframe::reset((turi::sframe *)a1);
  *(_BYTE *)(a1 + 289) = 1;
  std::vector<std::string>::resize((std::vector<std::string> *)(a1 + 64), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 3));
  *(_QWORD *)(a1 + 8) = 0;
  v29 = (unsigned __int8 *)*a2;
  v30 = (unsigned __int8 *)a2[1];
  *(_QWORD *)(a1 + 24) = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v30[-*a2] >> 3);
  *(_QWORD *)(a1 + 32) = 0;
  std::unordered_set<std::string>::unordered_set<std::__wrap_iter<std::string*>>((uint64_t)v109, v29, v30);
  v31 = v110;
  v32 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 3);
  v33 = (_QWORD *)(a1 + 40);
  std::vector<std::string>::reserve((std::vector<std::string> *)(a1 + 40), v32);
  v34 = (unsigned __int8 *)*a2;
  if (a2[1] != *a2)
  {
    for (i = 0; i < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - (_QWORD)v34) >> 3); ++i)
    {
      v36 = (uint64_t)&v34[24 * i];
      if (*(char *)(v36 + 23) < 0)
        v37 = *(_QWORD *)(v36 + 8);
      else
        v37 = *(unsigned __int8 *)(v36 + 23);
      if (v37)
        v38 = v31 == v32;
      else
        v38 = 0;
      if (v38)
      {
        v42 = *(_QWORD *)(a1 + 48);
        if (v42 >= *(_QWORD *)(a1 + 56))
        {
          v43 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)(a1 + 40), (__int128 *)v36);
        }
        else
        {
          std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>(a1 + 40, (__int128 *)v36);
          v43 = v42 + 24;
        }
        *(_QWORD *)(a1 + 48) = v43;
      }
      else
      {
        turi::sframe::generate_valid_column_name(a1, v36, (uint64_t)&__p);
        v40 = *(_QWORD *)(a1 + 48);
        v39 = *(_QWORD *)(a1 + 56);
        if (v40 >= v39)
        {
          v44 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v40 - *v33) >> 3);
          v45 = v44 + 1;
          if (v44 + 1 > 0xAAAAAAAAAAAAAAALL)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          v46 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v39 - *v33) >> 3);
          if (2 * v46 > v45)
            v45 = 2 * v46;
          if (v46 >= 0x555555555555555)
            v47 = 0xAAAAAAAAAAAAAAALL;
          else
            v47 = v45;
          v112.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 56);
          if (v47)
            v48 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>(a1 + 56, v47);
          else
            v48 = 0;
          v49 = v48 + v44;
          v112.__first_ = v48;
          v112.__begin_ = v49;
          v112.__end_cap_.__value_ = &v48[v47];
          v50 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          v49->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
          *(_OWORD *)&v49->__r_.__value_.__l.__data_ = v50;
          memset(&__p, 0, sizeof(__p));
          v112.__end_ = v49 + 1;
          std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)(a1 + 40), &v112);
          v51 = *(_QWORD *)(a1 + 48);
          std::__split_buffer<std::string>::~__split_buffer(&v112);
          v52 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
          *(_QWORD *)(a1 + 48) = v51;
          if (v52 < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
        }
        else
        {
          v41 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          *(_QWORD *)(v40 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
          *(_OWORD *)v40 = v41;
          *(_QWORD *)(a1 + 48) = v40 + 24;
        }
      }
      v34 = (unsigned __int8 *)*a2;
      if (!a6)
        continue;
      v53 = &v34[24 * i];
      v54 = v53[23];
      if ((char)v54 < 0)
      {
        if (!*((_QWORD *)v53 + 1))
          continue;
      }
      else if (!v53[23])
      {
        continue;
      }
      v55 = *(_QWORD *)(a1 + 48);
      v56 = *(unsigned __int8 *)(v55 - 1);
      v57 = *(_QWORD *)(v55 - 16);
      if ((v56 & 0x80u) == 0)
        v58 = (unsigned __int8 *)*(unsigned __int8 *)(v55 - 1);
      else
        v58 = *(unsigned __int8 **)(v55 - 16);
      if ((v54 & 0x80u) == 0)
        v59 = (unsigned __int8 *)v53[23];
      else
        v59 = (unsigned __int8 *)*((_QWORD *)v53 + 1);
      if (v58 != v59)
        goto LABEL_145;
      v60 = (const void **)(v55 - 24);
      if ((v54 & 0x80u) == 0)
        v61 = &v34[24 * i];
      else
        v61 = *(unsigned __int8 **)v53;
      if ((v56 & 0x80) != 0)
      {
        if (memcmp(*v60, v61, v57))
          goto LABEL_145;
      }
      else if ((_DWORD)v56)
      {
        while (*(unsigned __int8 *)v60 == *v61)
        {
          v60 = (const void **)((char *)v60 + 1);
          ++v61;
          if (!--v56)
            goto LABEL_78;
        }
LABEL_145:
        turi::sframe::create_arrays_for_writing(std::vector<std::string> const&,std::vector<turi::flex_type_enum> const&,unsigned long,std::string const&,BOOL)::$_0::operator()();
      }
LABEL_78:
      ;
    }
  }
  v62 = (turi::fileio::fixed_size_cache_manager *)std::string::basic_string[abi:ne180100]<0>(&v112, ".frame_idx");
  v63 = SHIBYTE(a5->__r_.__value_.__r.__words[2]);
  if (v63 >= 0)
    size = HIBYTE(a5->__r_.__value_.__r.__words[2]);
  else
    size = a5->__r_.__value_.__l.__size_;
  if (size)
  {
    v65 = (const std::string *)a5->__r_.__value_.__r.__words[0];
    if (v63 >= 0)
      v65 = a5;
    first = (std::__split_buffer<std::string>::pointer)&v112;
    if (SHIBYTE(v112.__end_) < 0)
      first = v112.__first_;
    end_high = (std::__split_buffer<std::string>::pointer)HIBYTE(v112.__end_);
    if (SHIBYTE(v112.__end_) < 0)
      end_high = v112.__begin_;
    v68 = (uint64_t)&v65[-1].__r_.__value_.__r.__words[2] + 7;
    v69 = (char *)&first[-1].__r_.__value_.__r.__words[2] + 7;
    v70 = size;
    while (v70 && end_high)
    {
      v71 = *(unsigned __int8 *)(v68 + v70);
      v72 = end_high->__r_.__value_.__s.__data_[(_QWORD)v69];
      --v70;
      end_high = (std::__split_buffer<std::string>::pointer)((char *)end_high - 1);
      if (v71 != v72)
        goto LABEL_93;
    }
    if (end_high)
    {
LABEL_93:
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v112;
      turi::sframe::create_arrays_for_writing(std::vector<std::string> const&,std::vector<turi::flex_type_enum> const&,unsigned long,std::string const&,BOOL)::$_1::operator()();
    }
    std::string::operator=((std::string *)(a1 + 136), a5);
  }
  else
  {
    instance = turi::fileio::fixed_size_cache_manager::get_instance(v62);
    if (SHIBYTE(v112.__end_) < 0)
    {
      std::string::__init_copy_ctor_external(&v107, (const std::string::value_type *)v112.__first_, (std::string::size_type)v112.__begin_);
    }
    else
    {
      *(_OWORD *)&v107.__r_.__value_.__l.__data_ = *(_OWORD *)&v112.__first_;
      v107.__r_.__value_.__r.__words[2] = (std::string::size_type)v112.__end_;
    }
    turi::fileio::fixed_size_cache_manager::get_temp_cache_id(instance, (uint64_t)&v107, &__p);
    v74 = (void **)(a1 + 136);
    if (*(char *)(a1 + 159) < 0)
      operator delete(*v74);
    *(_OWORD *)v74 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(_QWORD *)(a1 + 152) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
    __p.__r_.__value_.__s.__data_[0] = 0;
    if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v107.__r_.__value_.__l.__data_);
  }
  if (*(char *)(a1 + 159) < 0)
    v75 = *(_QWORD *)(a1 + 144);
  else
    v75 = *(unsigned __int8 *)(a1 + 159);
  begin = (std::__split_buffer<std::string>::pointer)HIBYTE(v112.__end_);
  if (SHIBYTE(v112.__end_) < 0)
    begin = v112.__begin_;
  std::string::basic_string(&__p, (const std::string *)(a1 + 136), 0, v75 - (_QWORD)begin, (std::allocator<char> *)&v106);
  v77 = operator new();
  *(_QWORD *)v77 = &unk_24D91E6C0;
  *(_BYTE *)(v77 + 8) = 0;
  v78 = pthread_mutex_init((pthread_mutex_t *)(v77 + 24), 0);
  assert_msg(v78 == 0, "Mutex create error %d", v78);
  v79 = (_QWORD *)(a1 + 208);
  *(_QWORD *)(v77 + 160) = 0;
  *(_OWORD *)(v77 + 128) = 0u;
  *(_OWORD *)(v77 + 144) = 0u;
  *(_OWORD *)(v77 + 96) = 0u;
  *(_OWORD *)(v77 + 112) = 0u;
  *(_QWORD *)(v77 + 88) = 128;
  *(_OWORD *)(v77 + 168) = 0u;
  *(_OWORD *)(v77 + 184) = 0u;
  *(_OWORD *)(v77 + 200) = 0u;
  *(_OWORD *)(v77 + 216) = 0u;
  *(_OWORD *)(v77 + 232) = 0u;
  *(_OWORD *)(v77 + 248) = 0u;
  *(_BYTE *)(v77 + 376) = 0;
  *(_OWORD *)(v77 + 280) = 0u;
  *(_OWORD *)(v77 + 296) = 0u;
  *(_OWORD *)(v77 + 312) = 0u;
  *(_OWORD *)(v77 + 328) = 0u;
  *(_OWORD *)(v77 + 344) = 0u;
  *(_OWORD *)(v77 + 360) = 0u;
  *(_QWORD *)(v77 + 384) = 0;
  *(_QWORD *)(v77 + 392) = 0;
  *(_QWORD *)(v77 + 400) = 0;
  std::shared_ptr<turi::sarray_group_format_writer<turi::flexible_type>>::reset[abi:ne180100]<turi::sarray_group_format_writer_v2<turi::flexible_type>,void>((_QWORD *)(a1 + 208), v77);
  if (size)
  {
    v81 = *v79;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v82 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v82 = __p.__r_.__value_.__l.__size_;
    std::string::basic_string[abi:ne180100]((uint64_t)v101, v82 + 5);
    if (v102 >= 0)
      v83 = v101;
    else
      v83 = (_QWORD *)v101[0];
    if (v82)
    {
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      memmove(v83, p_p, v82);
    }
    strcpy((char *)v83 + v82, ".sidx");
    (*(void (**)(uint64_t, _QWORD *, uint64_t, _QWORD))(*(_QWORD *)v81 + 16))(v81, v101, v96, *(_QWORD *)(a1 + 24));
    if (v102 < 0)
    {
      v85 = (void *)v101[0];
LABEL_131:
      operator delete(v85);
    }
  }
  else
  {
    v86 = turi::fileio::fixed_size_cache_manager::get_instance(v80);
    std::string::basic_string[abi:ne180100]<0>(v104, ".sidx");
    turi::fileio::fixed_size_cache_manager::get_temp_cache_id(v86, (uint64_t)v104, &v106);
    if (v105 < 0)
      operator delete(v104[0]);
    v87 = *v79;
    if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v103, v106.__r_.__value_.__l.__data_, v106.__r_.__value_.__l.__size_);
    else
      v103 = v106;
    (*(void (**)(uint64_t, std::string *, uint64_t, _QWORD))(*(_QWORD *)v87 + 16))(v87, &v103, v96, *(_QWORD *)(a1 + 24));
    if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v103.__r_.__value_.__l.__data_);
    if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
    {
      v85 = (void *)v106.__r_.__value_.__r.__words[0];
      goto LABEL_131;
    }
  }
  if (*(_QWORD *)(a1 + 24))
  {
    v88 = 0;
    v89 = 120;
    do
    {
      std::to_string(&v106, *(char *)(*v97 + v88));
      v90 = *(_QWORD *)((*(uint64_t (**)(_QWORD))(*(_QWORD *)*v79 + 32))(*v79) + 64);
      std::string::basic_string[abi:ne180100]<0>(v99, "__type__");
      v113 = v99;
      v91 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(v90 + v89), (const void **)v99, (uint64_t)&std::piecewise_construct, (_OWORD **)&v113);
      v92 = (void **)v91 + 7;
      if (*((char *)v91 + 79) < 0)
        operator delete(*v92);
      *(std::string *)v92 = v106;
      *((_BYTE *)&v106.__r_.__value_.__s + 23) = 0;
      v106.__r_.__value_.__s.__data_[0] = 0;
      if (v100 < 0)
      {
        operator delete(v99[0]);
        if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v106.__r_.__value_.__l.__data_);
      }
      ++v88;
      v89 += 144;
    }
    while (v88 < *(_QWORD *)(a1 + 24));
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v112.__end_) < 0)
    operator delete(v112.__first_);
  return std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v109);
}

void sub_2181A2874(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *__p,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  uint64_t v58;

  if (a45 < 0)
    operator delete(__p);
  if (a58 < 0)
    operator delete(a53);
  if (*(char *)(v58 - 121) < 0)
    operator delete(*(void **)(v58 - 144));
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v58 - 216);
  _Unwind_Resume(a1);
}

void std::shared_ptr<turi::sarray_group_format_writer<turi::flexible_type>>::reset[abi:ne180100]<turi::sarray_group_format_writer_v2<turi::flexible_type>,void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  __int128 v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int128 v7;

  std::shared_ptr<turi::sarray_group_format_writer<turi::flexible_type>>::shared_ptr[abi:ne180100]<turi::sarray_group_format_writer_v2<turi::flexible_type>,void>(&v7, a2);
  v3 = (std::__shared_weak_count *)a1[1];
  v4 = v7;
  *(_QWORD *)&v7 = *a1;
  *((_QWORD *)&v7 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void turi::sframe::append(turi::sframe *this@<X0>, const turi::sframe *a2@<X1>, turi::sframe *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 *v9;
  __int128 v10;
  uint64_t v11;
  __int128 *v12;
  __int128 v13;
  std::string::size_type size;
  std::string::size_type v15;
  int v16;
  std::string *p_p;
  uint64_t v18;
  std::string *v19;
  int v20;
  int v21;
  int v22;
  int v23;
  BOOL v25;
  BOOL v26;
  int v27;
  uint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t *v33;
  std::string __p;
  std::string v35;
  std::string v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v35.__r_.__value_.__s.__data_[0] = *((_BYTE *)this + 289);
  if (v35.__r_.__value_.__s.__data_[0])
  {
    v36.__r_.__value_.__r.__words[0] = (std::string::size_type)&v35;
    turi::sframe::append(turi::sframe const&)const::$_0::operator()();
  }
  v35.__r_.__value_.__s.__data_[0] = *((_BYTE *)a2 + 289);
  if (v35.__r_.__value_.__s.__data_[0])
  {
    v36.__r_.__value_.__r.__words[0] = (std::string::size_type)&v35;
    turi::sframe::append(turi::sframe const&)const::$_1::operator()();
  }
  if (*((_BYTE *)a2 + 288))
  {
    if (*((_BYTE *)this + 288))
    {
      v35.__r_.__value_.__r.__words[0] = *((_QWORD *)this + 1);
      __p.__r_.__value_.__r.__words[0] = *((_QWORD *)a2 + 1);
      if (v35.__r_.__value_.__r.__words[0] != __p.__r_.__value_.__r.__words[0])
      {
        v36.__r_.__value_.__r.__words[0] = (std::string::size_type)&v35;
        v36.__r_.__value_.__l.__size_ = (std::string::size_type)&__p;
        turi::sframe::append(turi::sframe const&)const::$_2::operator()();
      }
      v6 = *((_QWORD *)this + 5);
      v7 = *((_QWORD *)this + 6);
      v35.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAABLL * ((v7 - v6) >> 3);
      __p.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAABLL
                                       * ((uint64_t)(*((_QWORD *)a2 + 6) - *((_QWORD *)a2 + 5)) >> 3);
      if (v35.__r_.__value_.__r.__words[0] != __p.__r_.__value_.__r.__words[0])
      {
        v36.__r_.__value_.__r.__words[0] = (std::string::size_type)&v35;
        v36.__r_.__value_.__l.__size_ = (std::string::size_type)&__p;
        turi::sframe::append(turi::sframe const&)const::$_3::operator()();
      }
      if (v7 != v6)
      {
        v8 = 0;
        do
        {
          if (0xAAAAAAAAAAAAAAABLL * ((v7 - v6) >> 3) <= v8)
            turi::sframe::column_name(unsigned long)const::{lambda(void)#1}::operator()();
          v9 = (__int128 *)(v6 + 24 * v8);
          if (*((char *)v9 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v36, *(const std::string::value_type **)v9, *((_QWORD *)v9 + 1));
          }
          else
          {
            v10 = *v9;
            v36.__r_.__value_.__r.__words[2] = *((_QWORD *)v9 + 2);
            *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v10;
          }
          v11 = *((_QWORD *)a2 + 5);
          if (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)a2 + 6) - v11) >> 3) <= v8)
            turi::sframe::column_name(unsigned long)const::{lambda(void)#1}::operator()();
          v12 = (__int128 *)(v11 + 24 * v8);
          if (*((char *)v12 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v35, *(const std::string::value_type **)v12, *((_QWORD *)v12 + 1));
          }
          else
          {
            v13 = *v12;
            v35.__r_.__value_.__r.__words[2] = *((_QWORD *)v12 + 2);
            *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v13;
          }
          if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&__p, v35.__r_.__value_.__l.__data_, v35.__r_.__value_.__l.__size_);
          else
            __p = v35;
          if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(v36.__r_.__value_.__r.__words[2]);
          else
            size = v36.__r_.__value_.__l.__size_;
          v15 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          v16 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v15 = __p.__r_.__value_.__l.__size_;
          if (size == v15)
          {
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              p_p = &__p;
            else
              p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
            if ((*((_BYTE *)&v36.__r_.__value_.__s + 23) & 0x80) != 0)
            {
              v26 = memcmp(v36.__r_.__value_.__l.__data_, p_p, v36.__r_.__value_.__l.__size_) == 0;
              if (v16 < 0)
                goto LABEL_41;
            }
            else if (*((_BYTE *)&v36.__r_.__value_.__s + 23))
            {
              v18 = HIBYTE(v36.__r_.__value_.__r.__words[2]) - 1;
              v19 = &v36;
              do
              {
                v21 = v19->__r_.__value_.__s.__data_[0];
                v19 = (std::string *)((char *)v19 + 1);
                v20 = v21;
                v23 = p_p->__r_.__value_.__s.__data_[0];
                p_p = (std::string *)((char *)p_p + 1);
                v22 = v23;
                v25 = v18-- != 0;
                v26 = v20 == v22;
              }
              while (v20 == v22 && v25);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              {
LABEL_41:
                operator delete(__p.__r_.__value_.__l.__data_);
                if (!v26)
                {
LABEL_68:
                  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v36;
                  __p.__r_.__value_.__l.__size_ = (std::string::size_type)&v35;
                  turi::sframe::append(turi::sframe const&)const::$_4::operator()((uint64_t *)&__p);
                }
                goto LABEL_42;
              }
            }
            else
            {
              v26 = 1;
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                goto LABEL_41;
            }
          }
          else
          {
            v26 = 0;
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              goto LABEL_41;
          }
          if (!v26)
            goto LABEL_68;
LABEL_42:
          if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v35.__r_.__value_.__l.__data_);
          if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v36.__r_.__value_.__l.__data_);
          v27 = turi::sframe::column_type(this, v8);
          LODWORD(v35.__r_.__value_.__l.__data_) = v27;
          LODWORD(__p.__r_.__value_.__l.__data_) = turi::sframe::column_type(a2, v8);
          if (v27 != LODWORD(__p.__r_.__value_.__l.__data_))
          {
            v36.__r_.__value_.__r.__words[0] = (std::string::size_type)&v35;
            v36.__r_.__value_.__l.__size_ = (std::string::size_type)&__p;
            turi::sframe::append(turi::sframe const&)const::$_5::operator()();
          }
          ++v8;
          v6 = *((_QWORD *)this + 5);
          v7 = *((_QWORD *)this + 6);
        }
        while (v8 < 0xAAAAAAAAAAAAAAABLL * ((v7 - v6) >> 3));
      }
      turi::sframe::sframe(a3, this);
      v28 = (uint64_t *)*((_QWORD *)a3 + 23);
      if (*((uint64_t **)a3 + 24) == v28)
      {
        *((_QWORD *)a3 + 4) += *((_QWORD *)a2 + 4);
      }
      else
      {
        v29 = 0;
        do
        {
          turi::sarray<turi::flexible_type>::append(v28[2 * v29], *(_QWORD *)(*((_QWORD *)a2 + 23) + 16 * v29), (uint64_t)&v36);
          std::allocate_shared[abi:ne180100]<turi::sarray<turi::flexible_type>,std::allocator<turi::sarray<turi::flexible_type>>,turi::sarray<turi::flexible_type>,void>((uint64_t)&v36, &v35);
          std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100](*((_QWORD *)a3 + 23) + 16 * v29, (__int128 *)&v35);
          v30 = (std::__shared_weak_count *)v35.__r_.__value_.__l.__size_;
          if (v35.__r_.__value_.__l.__size_)
          {
            v31 = (unint64_t *)(v35.__r_.__value_.__l.__size_ + 8);
            do
              v32 = __ldaxr(v31);
            while (__stlxr(v32 - 1, v31));
            if (!v32)
            {
              ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
              std::__shared_weak_count::__release_weak(v30);
            }
          }
          turi::sarray<turi::flexible_type>::~sarray((uint64_t)&v36);
          ++v29;
          v28 = (uint64_t *)*((_QWORD *)a3 + 23);
          v33 = (uint64_t *)*((_QWORD *)a3 + 24);
        }
        while (v29 < ((char *)v33 - (char *)v28) >> 4);
        *((_QWORD *)a3 + 4) += *((_QWORD *)a2 + 4);
        while (v28 != v33)
        {
          turi::sarray<turi::flexible_type>::try_compact(*v28);
          v28 += 2;
        }
      }
    }
    else
    {
      turi::sframe::sframe(a3, a2);
    }
  }
  else
  {
    turi::sframe::sframe(a3, this);
  }
}

void sub_2181A2F0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a18 < 0)
    operator delete(__p);
  if (a25 < 0)
    operator delete(a20);
  _Unwind_Resume(exception_object);
}

void turi::sframe::append(turi::sframe const&)const::$_0::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe.cpp", 101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"writing", 7);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"false", 5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe.cpp", "operator()", 307, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::sframe::append(turi::sframe const&)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2181A30FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::sframe::append(turi::sframe const&)const::$_1::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe.cpp", 101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"other.writing", 13);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"false", 5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe.cpp", "operator()", 308, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::sframe::append(turi::sframe const&)::$_1::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2181A330C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::sframe::append(turi::sframe const&)const::$_2::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe.cpp", 101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"index_info.version", 18);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"other.index_info.version", 24);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe.cpp", "operator()", 315, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::sframe::append(turi::sframe const&)::$_2::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2181A3520(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::sframe::append(turi::sframe const&)const::$_3::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe.cpp", 101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"column_names().size()", 21);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"other.column_names().size()", 27);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe.cpp", "operator()", 317, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::sframe::append(turi::sframe const&)::$_3::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2181A3734(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::sframe::append(turi::sframe const&)const::$_4::operator()(uint64_t *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  file_logger *v23;
  _QWORD *v24;
  void *__p;
  char v26;
  _QWORD v27[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v27);
  v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"Assertion failed: (", 19);
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe.cpp", 101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)":", 1);
  v4 = (_QWORD *)std::ostream::operator<<();
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"): ", 3);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"column_name(i)", 14);
  v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"==", 2);
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"other.column_name(i)", 20);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"  [", 3);
  v10 = *(char *)(*a1 + 23);
  if (v10 >= 0)
    v11 = *a1;
  else
    v11 = *(_QWORD *)*a1;
  if (v10 >= 0)
    v12 = *(unsigned __int8 *)(*a1 + 23);
  else
    v12 = *(_QWORD *)(*a1 + 8);
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, v11, v12);
  LOBYTE(v24) = 32;
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)&v24, 1);
  v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"==", 2);
  LOBYTE(v24) = 32;
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)&v24, 1);
  v17 = a1[1];
  v18 = *(char *)(v17 + 23);
  if (v18 >= 0)
    v19 = a1[1];
  else
    v19 = *(_QWORD *)v17;
  if (v18 >= 0)
    v20 = *(unsigned __int8 *)(v17 + 23);
  else
    v20 = *(_QWORD *)(v17 + 8);
  v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, v19, v20);
  v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v22);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v23 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe.cpp", "operator()", 319, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v23, (uint64_t)&__p);
    if (v26 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v24 = v27;
  turi::sframe::append(turi::sframe const&)::$_4::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2181A3970(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::sframe::append(turi::sframe const&)const::$_5::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe.cpp", 101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"(int)column_type(i)", 19);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"(int)other.column_type(i)", 25);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe.cpp", "operator()", 320, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::sframe::append(turi::sframe const&)::$_5::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2181A3B84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::sframe::get_reader(turi::sframe *this@<X0>, turi::sframe_reader **a2@<X8>)
{
  int *v4;
  file_logger *v5;
  file_logger *started;
  _QWORD *v7;
  _QWORD *v8;
  const std::locale::facet *v9;
  turi::sframe_reader *v10;
  _QWORD *exception;
  std::locale v12;

  v4 = (int *)global_logger();
  if (v4[169] <= 1)
  {
    if (cppipc::must_cancel((cppipc *)v4))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 1, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe.cpp", "get_reader", 340, 1);
    v7 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v7 && *((_BYTE *)v7 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7 + 2, (uint64_t)"Function entry", 14);
    v8 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v8)
    {
      if (*((_BYTE *)v8 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(_QWORD *)(v8[2] - 24) + 16));
        v9 = std::locale::use_facet(&v12, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
        std::locale::~locale(&v12);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  assert_msg(*((unsigned __int8 *)this + 288), "Invalid SFrame");
  assert_msg(*((_BYTE *)this + 289) == 0, "SFrame not opened for reading");
  v10 = (turi::sframe_reader *)operator new();
  *(_OWORD *)v10 = 0u;
  *((_OWORD *)v10 + 1) = 0u;
  *((_OWORD *)v10 + 2) = 0u;
  *((_OWORD *)v10 + 3) = 0u;
  *((_OWORD *)v10 + 4) = 0u;
  *((_OWORD *)v10 + 5) = 0u;
  *((_OWORD *)v10 + 6) = 0u;
  *((_OWORD *)v10 + 7) = 0u;
  *((_OWORD *)v10 + 8) = 0u;
  *((_OWORD *)v10 + 9) = 0u;
  *((_OWORD *)v10 + 10) = 0u;
  *((_OWORD *)v10 + 11) = 0u;
  *((_OWORD *)v10 + 12) = 0u;
  *((_OWORD *)v10 + 13) = 0u;
  *((_OWORD *)v10 + 14) = 0u;
  *((_OWORD *)v10 + 15) = 0u;
  *((_OWORD *)v10 + 16) = 0u;
  *((_OWORD *)v10 + 17) = 0u;
  *((_OWORD *)v10 + 18) = 0u;
  *((_OWORD *)v10 + 19) = 0u;
  turi::sframe_reader::sframe_reader(v10);
  *a2 = v10;
  turi::sframe_reader::init(v10, this, -1);
}

void sub_2181A3DE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

void turi::sframe::get_reader(turi::sframe *this@<X0>, uint64_t a2@<X1>, turi::sframe_reader **a3@<X8>)
{
  int *v6;
  file_logger *v7;
  file_logger *started;
  _QWORD *v9;
  _QWORD *v10;
  const std::locale::facet *v11;
  turi::sframe_reader *v12;
  _QWORD *exception;
  std::locale v14;

  v6 = (int *)global_logger();
  if (v6[169] <= 1)
  {
    if (cppipc::must_cancel((cppipc *)v6))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v7 = (file_logger *)global_logger();
    started = file_logger::start_stream(v7, 1, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe.cpp", "get_reader", 349, 1);
    v9 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v9 && *((_BYTE *)v9 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9 + 2, (uint64_t)"Function entry", 14);
    v10 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v10)
    {
      if (*((_BYTE *)v10 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(_QWORD *)(v10[2] - 24) + 16));
        v11 = std::locale::use_facet(&v14, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
        std::locale::~locale(&v14);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  assert_msg(*((unsigned __int8 *)this + 288), "Invalid SFrame");
  assert_msg(*((_BYTE *)this + 289) == 0, "SFrame not opened for reading");
  v12 = (turi::sframe_reader *)operator new();
  *(_OWORD *)v12 = 0u;
  *((_OWORD *)v12 + 1) = 0u;
  *((_OWORD *)v12 + 2) = 0u;
  *((_OWORD *)v12 + 3) = 0u;
  *((_OWORD *)v12 + 4) = 0u;
  *((_OWORD *)v12 + 5) = 0u;
  *((_OWORD *)v12 + 6) = 0u;
  *((_OWORD *)v12 + 7) = 0u;
  *((_OWORD *)v12 + 8) = 0u;
  *((_OWORD *)v12 + 9) = 0u;
  *((_OWORD *)v12 + 10) = 0u;
  *((_OWORD *)v12 + 11) = 0u;
  *((_OWORD *)v12 + 12) = 0u;
  *((_OWORD *)v12 + 13) = 0u;
  *((_OWORD *)v12 + 14) = 0u;
  *((_OWORD *)v12 + 15) = 0u;
  *((_OWORD *)v12 + 16) = 0u;
  *((_OWORD *)v12 + 17) = 0u;
  *((_OWORD *)v12 + 18) = 0u;
  *((_OWORD *)v12 + 19) = 0u;
  turi::sframe_reader::sframe_reader(v12);
  *a3 = v12;
  turi::sframe_reader::init(v12, this, a2);
}

void sub_2181A4010(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

void turi::sframe::get_reader(uint64_t a1@<X0>, uint64_t **a2@<X1>, turi::sframe_reader **a3@<X8>)
{
  int *v6;
  file_logger *v7;
  file_logger *started;
  _QWORD *v9;
  _QWORD *v10;
  const std::locale::facet *v11;
  turi::sframe_reader *v12;
  _QWORD *exception;
  std::locale v14;

  v6 = (int *)global_logger();
  if (v6[169] <= 1)
  {
    if (cppipc::must_cancel((cppipc *)v6))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v7 = (file_logger *)global_logger();
    started = file_logger::start_stream(v7, 1, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe.cpp", "get_reader", 359, 1);
    v9 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v9 && *((_BYTE *)v9 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9 + 2, (uint64_t)"Function entry", 14);
    v10 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v10)
    {
      if (*((_BYTE *)v10 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(_QWORD *)(v10[2] - 24) + 16));
        v11 = std::locale::use_facet(&v14, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
        std::locale::~locale(&v14);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  assert_msg(*(unsigned __int8 *)(a1 + 288), "Invalid SFrame");
  assert_msg(*(_BYTE *)(a1 + 289) == 0, "SFrame not opened for reading");
  v12 = (turi::sframe_reader *)operator new();
  *(_OWORD *)v12 = 0u;
  *((_OWORD *)v12 + 1) = 0u;
  *((_OWORD *)v12 + 2) = 0u;
  *((_OWORD *)v12 + 3) = 0u;
  *((_OWORD *)v12 + 4) = 0u;
  *((_OWORD *)v12 + 5) = 0u;
  *((_OWORD *)v12 + 6) = 0u;
  *((_OWORD *)v12 + 7) = 0u;
  *((_OWORD *)v12 + 8) = 0u;
  *((_OWORD *)v12 + 9) = 0u;
  *((_OWORD *)v12 + 10) = 0u;
  *((_OWORD *)v12 + 11) = 0u;
  *((_OWORD *)v12 + 12) = 0u;
  *((_OWORD *)v12 + 13) = 0u;
  *((_OWORD *)v12 + 14) = 0u;
  *((_OWORD *)v12 + 15) = 0u;
  *((_OWORD *)v12 + 16) = 0u;
  *((_OWORD *)v12 + 17) = 0u;
  *((_OWORD *)v12 + 18) = 0u;
  *((_OWORD *)v12 + 19) = 0u;
  turi::sframe_reader::sframe_reader(v12);
  *a3 = v12;
  turi::sframe_reader::init((uint64_t)v12, a1, a2);
}

void sub_2181A423C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

uint64_t turi::copy<turi::sarray<turi::flexible_type> &,std::insert_iterator<std::vector<turi::flexible_type>>,void>(uint64_t a1, uint64_t *a2, uint64_t a3, unint64_t a4)
{
  int *v8;
  file_logger *v9;
  file_logger *started;
  _QWORD *v11;
  _QWORD *v12;
  const std::locale::facet *v13;
  BOOL v14;
  unint64_t v15;
  unint64_t i;
  _QWORD **v17;
  uint64_t result;
  _QWORD *exception;
  uint64_t v20;
  _QWORD v21[6];
  std::locale v22;
  uint64_t v23;
  _QWORD v24[5];

  v24[4] = *MEMORY[0x24BDAC8D0];
  v8 = (int *)global_logger();
  if (v8[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v8))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v9 = (file_logger *)global_logger();
    started = file_logger::start_stream(v9, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/algorithm.hpp", "copy", 442, 1);
    v11 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v11 && *((_BYTE *)v11 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11 + 2, (uint64_t)"Function entry", 14);
    v12 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v12)
    {
      if (*((_BYTE *)v12 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v12 + *(_QWORD *)(v12[2] - 24) + 16));
        v13 = std::locale::use_facet(&v22, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 10);
        std::locale::~locale(&v22);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  if (*(_BYTE *)(a1 + 248))
    v14 = *(_BYTE *)(a1 + 249) == 0;
  else
    v14 = 0;
  if (!v14)
    turi::copy<turi::sarray<turi::flexible_type> &,std::insert_iterator<std::vector<turi::flexible_type>>,void>(turi::sarray<turi::flexible_type> &,std::insert_iterator<std::vector<turi::flexible_type>>,unsigned long)::{lambda(void)#1}::operator()();
  turi::sarray<turi::flexible_type>::get_reader(a1, &v20);
  v15 = 0;
  for (i = 0; i < (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 16))(v20); ++i)
  {
    (*(void (**)(std::locale *__return_ptr, uint64_t, unint64_t))(*(_QWORD *)v20 + 32))(&v22, v20, i);
    (*(void (**)(_QWORD *__return_ptr, uint64_t, unint64_t))(*(_QWORD *)v20 + 40))(v21, v20, i);
    if (v15 >= a4)
    {
LABEL_23:
      turi::sarray_iterator<turi::flexible_type>::~sarray_iterator((uint64_t)v21);
      turi::sarray_iterator<turi::flexible_type>::~sarray_iterator((uint64_t)&v22);
      break;
    }
    while (v22.__locale_ != (std::locale::__imp *)v21[0] || v23 != v21[1] || v24[2] != v21[4])
    {
      v17 = std::vector<turi::flexible_type>::insert(a2, a3, (uint64_t)v24);
      turi::sarray_iterator<turi::flexible_type>::operator++((uint64_t)&v22);
      a3 = (uint64_t)(v17 + 2);
      if (a4 == ++v15)
        goto LABEL_23;
    }
    turi::sarray_iterator<turi::flexible_type>::~sarray_iterator((uint64_t)v21);
    turi::sarray_iterator<turi::flexible_type>::~sarray_iterator((uint64_t)&v22);
  }
  result = v20;
  v20 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_2181A454C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::locale a16)
{
  std::locale::~locale(&a16);
  _Unwind_Resume(a1);
}

uint64_t turi::sframe::select_column@<X0>(uint64_t this@<X0>, unint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  __int128 v3;
  unint64_t *v4;
  unint64_t v5;

  if (*(_QWORD *)(this + 24) <= a2)
    turi::sframe::select_column(unsigned long)const::$_0::operator()();
  v3 = *(_OWORD *)(*(_QWORD *)(this + 184) + 16 * a2);
  *a3 = v3;
  if (*((_QWORD *)&v3 + 1))
  {
    v4 = (unint64_t *)(*((_QWORD *)&v3 + 1) + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return this;
}

uint64_t turi::sframe::select_column@<X0>(uint64_t a1@<X0>, unsigned __int8 **a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v5;

  v5 = std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), a2);
  if (v5 == *(_QWORD *)(a1 + 48))
    turi::sframe::column_index(std::string const&)const::{lambda(void)#1}::operator()();
  return turi::sframe::select_column(a1, 0xAAAAAAAAAAAAAAABLL * ((v5 - *(_QWORD *)(a1 + 40)) >> 3), a3);
}

void turi::sframe::select_columns(uint64_t *a1@<X0>, const void ***a2@<X1>, uint64_t a3@<X8>)
{
  int *v6;
  file_logger *v7;
  file_logger *started;
  _QWORD *v9;
  _QWORD *v10;
  const std::locale::facet *v11;
  const void **v12;
  const void **v13;
  uint64_t v14;
  _QWORD *exception;
  std::locale v16;
  uint64_t v17;
  uint64_t v18;
  const void **v19;
  std::locale *v20;

  v6 = (int *)global_logger();
  if (v6[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v6))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v7 = (file_logger *)global_logger();
    started = file_logger::start_stream(v7, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe.cpp", "select_columns", 401, 1);
    v9 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v9 && *((_BYTE *)v9 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9 + 2, (uint64_t)"Function entry", 14);
    v10 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v10)
    {
      if (*((_BYTE *)v10 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(_QWORD *)(v10[2] - 24) + 16));
        v11 = std::locale::use_facet(&v16, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
        std::locale::~locale(&v16);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  v16.__locale_ = 0;
  v17 = 0;
  v18 = 0;
  v12 = *a2;
  v13 = a2[1];
  if (*a2 != v13)
  {
    do
    {
      v14 = std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(a1[5], a1[6], (unsigned __int8 **)v12);
      if (v14 == a1[6])
      {
        v19 = v12;
        turi::sframe::column_index(std::string const&)const::{lambda(void)#1}::operator()();
      }
      std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::push_back[abi:ne180100]((char **)&v16, (__int128 *)(a1[23] - 0x5555555555555550 * ((unint64_t)(v14 - a1[5]) >> 3)));
      v12 += 3;
    }
    while (v12 != v13);
  }
  turi::sframe::sframe(a3, (uint64_t **)&v16, a2, 1);
  v20 = &v16;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
}

void sub_2181A4878(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

void turi::sframe::add_column(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int *v8;
  file_logger *v9;
  file_logger *started;
  _QWORD *v11;
  _QWORD *v12;
  const std::locale::facet *v13;
  uint64_t v14;
  std::string::size_type v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::locale::__imp *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _OWORD *size;
  __int128 v29;
  std::string::size_type v30;
  _QWORD *exception;
  std::string v32;
  std::locale v33;
  _QWORD *v34;
  _QWORD *v35;
  std::string *v36;
  char v37;
  std::string v38;
  __int128 v39;

  *(_QWORD *)&v39 = *MEMORY[0x24BDAC8D0];
  v8 = (int *)global_logger();
  if (v8[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v8))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v9 = (file_logger *)global_logger();
    started = file_logger::start_stream(v9, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe.cpp", "add_column", 413, 1);
    v11 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v11 && *((_BYTE *)v11 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11 + 2, (uint64_t)"Function entry", 14);
    v12 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v12)
    {
      if (*((_BYTE *)v12 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v12 + *(_QWORD *)(v12[2] - 24) + 16));
        v13 = std::locale::use_facet(&v33, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 10);
        std::locale::~locale(&v33);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  if (*(_QWORD *)(a1 + 24))
  {
    if (*(_BYTE *)(a1 + 288))
      v14 = *(_QWORD *)(a1 + 32);
    else
      v14 = 0;
    v22 = *(_QWORD *)a2;
    if (*(_BYTE *)(*(_QWORD *)a2 + 248)
      && (v23 = *(uint64_t **)(v22 + 80), (v24 = *(_QWORD *)(v22 + 88) - (_QWORD)v23) != 0))
    {
      v25 = 0;
      v26 = v24 >> 3;
      if (v26 <= 1)
        v26 = 1;
      do
      {
        v27 = *v23++;
        v25 += v27;
        --v26;
      }
      while (v26);
    }
    else
    {
      v25 = 0;
    }
    if (v14 != v25)
      turi::sframe::add_column(std::shared_ptr<turi::sarray<turi::flexible_type>>,std::string const&)const::$_0::operator()();
    v33.__locale_ = 0;
    v34 = 0;
    v35 = 0;
    std::vector<std::shared_ptr<turi::query_eval::planner_node>>::__init_with_size[abi:ne180100]<std::shared_ptr<turi::query_eval::planner_node>*,std::shared_ptr<turi::query_eval::planner_node>*>((char *)&v33, *(_QWORD **)(a1 + 184), *(_QWORD **)(a1 + 192), (uint64_t)(*(_QWORD *)(a1 + 192) - *(_QWORD *)(a1 + 184)) >> 4);
    memset(&v32, 0, sizeof(v32));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v32, *(__int128 **)(a1 + 40), *(__int128 **)(a1 + 48), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 48) - *(_QWORD *)(a1 + 40)) >> 3));
    std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::push_back[abi:ne180100]((char **)&v33, a2);
    if (turi::sframe::contains_column(a1, (unsigned __int8 **)a3))
    {
      v38.__r_.__value_.__r.__words[0] = a3;
      turi::sframe::add_column(std::shared_ptr<turi::sarray<turi::flexible_type>>,std::string const&)const::$_1::operator()();
    }
    turi::sframe::generate_valid_column_name(a1, a3, (uint64_t)&v38);
    size = (_OWORD *)v32.__r_.__value_.__l.__size_;
    if (v32.__r_.__value_.__l.__size_ >= v32.__r_.__value_.__r.__words[2])
    {
      v30 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v32, (__int128 *)&v38);
    }
    else
    {
      if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v32.__r_.__value_.__l.__size_, v38.__r_.__value_.__l.__data_, v38.__r_.__value_.__l.__size_);
      }
      else
      {
        v29 = *(_OWORD *)&v38.__r_.__value_.__l.__data_;
        *(_QWORD *)(v32.__r_.__value_.__l.__size_ + 16) = *((_QWORD *)&v38.__r_.__value_.__l + 2);
        *size = v29;
      }
      v30 = (std::string::size_type)size + 24;
    }
    v32.__r_.__value_.__l.__size_ = v30;
    turi::sframe::sframe(a4, (uint64_t **)&v33, (const void ***)&v32, 1);
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v38.__r_.__value_.__l.__data_);
    v38.__r_.__value_.__r.__words[0] = (std::string::size_type)&v32;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v38);
    v32.__r_.__value_.__r.__words[0] = (std::string::size_type)&v33;
  }
  else
  {
    v16 = *(_QWORD *)a2;
    v15 = *((_QWORD *)a2 + 1);
    v38.__r_.__value_.__r.__words[0] = *(_QWORD *)a2;
    v38.__r_.__value_.__l.__size_ = v15;
    if (v15)
    {
      v17 = (unint64_t *)(v15 + 8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    v33.__locale_ = 0;
    v34 = 0;
    v35 = 0;
    v32.__r_.__value_.__r.__words[0] = (std::string::size_type)&v33;
    v32.__r_.__value_.__s.__data_[8] = 0;
    v19 = (std::locale::__imp *)operator new(0x10uLL);
    v33.__locale_ = v19;
    v35 = (_QWORD *)((char *)v19 + 16);
    *(_QWORD *)v19 = v16;
    *((_QWORD *)v19 + 1) = v15;
    if (v15)
    {
      v20 = (unint64_t *)(v15 + 8);
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
    v34 = (_QWORD *)((char *)v19 + 16);
    std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&v38);
    if (*(char *)(a3 + 23) < 0)
      std::string::__init_copy_ctor_external(&v38, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
    else
      v38 = *(std::string *)a3;
    memset(&v32, 0, sizeof(v32));
    v36 = &v32;
    v37 = 0;
    v32.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
    v32.__r_.__value_.__l.__size_ = v32.__r_.__value_.__r.__words[0];
    v32.__r_.__value_.__r.__words[2] = v32.__r_.__value_.__r.__words[0] + 24;
    v32.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v32.__r_.__value_.__r.__words[2], (__int128 *)&v38, &v39, (std::string *)v32.__r_.__value_.__l.__data_);
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v38.__r_.__value_.__l.__data_);
    turi::sframe::sframe(a4, (uint64_t **)&v33, (const void ***)&v32, 1);
    v38.__r_.__value_.__r.__words[0] = (std::string::size_type)&v32;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v38);
    v32.__r_.__value_.__r.__words[0] = (std::string::size_type)&v33;
  }
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v32);
}

void sub_2181A4CDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::locale *a9, uint64_t a10, uint64_t a11, std::locale a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, std::locale **__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  __p = &a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  a9 = &a12;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  _Unwind_Resume(a1);
}

std::string *turi::sframe::set_column_name(uint64_t a1, unint64_t a2, std::string *__str)
{
  if (*(_QWORD *)(a1 + 24) <= a2)
    turi::sframe::set_column_name(unsigned long,std::string const&)::$_0::operator()();
  return std::string::operator=((std::string *)(*(_QWORD *)(a1 + 40) + 24 * a2), __str);
}

void turi::sframe::set_column_name(unsigned long,std::string const&)::$_0::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe.cpp", 101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"i", 1);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"<", 1);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"num_columns()", 13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"<", 1);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe.cpp", "operator()", 470, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::sframe::set_column_name(unsigned long,std::string const&)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2181A4F84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::sframe::remove_column(turi::sframe *this@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void ***v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  std::string::size_type v11;
  std::string::size_type v12;
  std::string::size_type i;
  std::string v14;
  std::string *v15;
  void ***v16;
  uint64_t v17;
  char v18;
  std::string *v19;

  v14.__r_.__value_.__r.__words[0] = a2;
  v19 = (std::string *)*((_QWORD *)this + 3);
  if ((unint64_t)v19 <= a2)
  {
    v15 = &v14;
    v16 = (void ***)&v19;
    turi::sframe::remove_column(unsigned long)const::$_0::operator()();
  }
  v15 = 0;
  v16 = 0;
  v17 = 0;
  std::vector<std::shared_ptr<turi::query_eval::planner_node>>::__init_with_size[abi:ne180100]<std::shared_ptr<turi::query_eval::planner_node>*,std::shared_ptr<turi::query_eval::planner_node>*>((char *)&v15, *((_QWORD **)this + 23), *((_QWORD **)this + 24), (uint64_t)(*((_QWORD *)this + 24) - *((_QWORD *)this + 23)) >> 4);
  memset(&v14, 0, sizeof(v14));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v14, *((__int128 **)this + 5), *((__int128 **)this + 6), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 6) - *((_QWORD *)this + 5)) >> 3));
  v6 = v16;
  v7 = (uint64_t *)((char *)v15 + 16 * a2);
  v8 = (uint64_t)(v7 + 2);
  if (v7 + 2 != (uint64_t *)v16)
  {
    v9 = (uint64_t *)((char *)v15 + 16 * a2);
    do
    {
      std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)v9, (__int128 *)v9 + 1);
      v7 += 2;
      v10 = v9 + 4;
      v9 += 2;
    }
    while (v10 != (uint64_t *)v6);
    v8 = (uint64_t)v16;
  }
  while ((uint64_t *)v8 != v7)
    v8 = std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v8 - 16);
  v16 = (void ***)v7;
  std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::string *,std::string *,std::string *>((uint64_t)&v18, (__int128 *)(v14.__r_.__value_.__r.__words[0] + 24 * a2 + 24), (__int128 *)v14.__r_.__value_.__l.__size_, v14.__r_.__value_.__r.__words[0] + 24 * a2);
  v12 = v11;
  for (i = v14.__r_.__value_.__l.__size_; i != v12; i -= 24)
  {
    if (*(char *)(i - 1) < 0)
      operator delete(*(void **)(i - 24));
  }
  v14.__r_.__value_.__l.__size_ = v12;
  turi::sframe::sframe(a3, (uint64_t **)&v15, (const void ***)&v14, 1);
  v19 = &v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v19);
  v14.__r_.__value_.__r.__words[0] = (std::string::size_type)&v15;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v14);
}

void turi::sframe::remove_column(unsigned long)const::$_0::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe.cpp", 101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"i", 1);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"<", 1);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"num_columns()", 13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"<", 1);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe.cpp", "operator()", 475, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::sframe::remove_column(unsigned long)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2181A5348(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::sframe::swap_columns(turi::sframe *this@<X0>, std::string::size_type a2@<X1>, std::string::size_type a3@<X2>, uint64_t a4@<X8>)
{
  void **v5;
  uint64_t *v9;
  __int128 v10;
  std::string::size_type v11;
  std::string::size_type v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  std::string v16;
  std::string *v17;
  void ***v18;
  uint64_t v19;
  std::string *v20;

  v16.__r_.__value_.__r.__words[0] = a2;
  v5 = (void **)*((_QWORD *)this + 3);
  v20 = (std::string *)v5;
  if ((unint64_t)v5 <= a2)
  {
    v17 = &v16;
    v18 = (void ***)&v20;
    turi::sframe::swap_columns(unsigned long,unsigned long)const::$_0::operator()();
  }
  v16.__r_.__value_.__r.__words[0] = a3;
  v20 = (std::string *)v5;
  if ((unint64_t)v5 <= a3)
  {
    v17 = &v16;
    v18 = (void ***)&v20;
    turi::sframe::swap_columns(unsigned long,unsigned long)const::$_1::operator()();
  }
  v17 = 0;
  v18 = 0;
  v19 = 0;
  std::vector<std::shared_ptr<turi::query_eval::planner_node>>::__init_with_size[abi:ne180100]<std::shared_ptr<turi::query_eval::planner_node>*,std::shared_ptr<turi::query_eval::planner_node>*>((char *)&v17, *((_QWORD **)this + 23), *((_QWORD **)this + 24), (uint64_t)(*((_QWORD *)this + 24) - *((_QWORD *)this + 23)) >> 4);
  memset(&v16, 0, sizeof(v16));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v16, *((__int128 **)this + 5), *((__int128 **)this + 6), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 6) - *((_QWORD *)this + 5)) >> 3));
  v9 = (uint64_t *)v17;
  v10 = *((_OWORD *)&v17->__r_.__value_.__l.__data_ + a2);
  *((_OWORD *)&v17->__r_.__value_.__l.__data_ + a2) = *((_OWORD *)&v17->__r_.__value_.__l.__data_ + a3);
  *(_OWORD *)&v9[2 * a3] = v10;
  v11 = v16.__r_.__value_.__r.__words[0] + 24 * a2;
  v12 = v16.__r_.__value_.__r.__words[0] + 24 * a3;
  v13 = *(_QWORD *)(v11 + 16);
  v14 = *(_OWORD *)v11;
  v15 = *(_QWORD *)(v12 + 16);
  *(_OWORD *)v11 = *(_OWORD *)v12;
  *(_QWORD *)(v11 + 16) = v15;
  *(_OWORD *)v12 = v14;
  *(_QWORD *)(v12 + 16) = v13;
  turi::sframe::sframe(a4, (uint64_t **)&v17, (const void ***)&v16, 1);
  v20 = &v16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
  v16.__r_.__value_.__r.__words[0] = (std::string::size_type)&v17;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v16);
}

void turi::sframe::swap_columns(unsigned long,unsigned long)const::$_0::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe.cpp", 101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"column_1", 8);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"<", 1);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"num_columns()", 13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"<", 1);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe.cpp", "operator()", 485, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::sframe::swap_columns(unsigned long,unsigned long)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2181A56CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::sframe::swap_columns(unsigned long,unsigned long)const::$_1::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe.cpp", 101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"column_2", 8);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"<", 1);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"num_columns()", 13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"<", 1);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe.cpp", "operator()", 486, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::sframe::swap_columns(unsigned long,unsigned long)::$_1::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2181A58E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::sframe::replace_column(uint64_t a1@<X0>, _QWORD *a2@<X1>, std::string *a3@<X2>, uint64_t *a4@<X8>)
{
  std::string *v8;
  __int128 v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  std::string::size_type v21;
  std::string::size_type v22;
  __int128 v23;
  std::string v24;
  std::string v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  if (!turi::sframe::contains_column(a1, (unsigned __int8 **)a3))
    turi::sframe::replace_column(std::shared_ptr<turi::sarray<turi::flexible_type>>,std::string const&)const::$_0::operator()();
  std::operator+<char>();
  v8 = std::string::append(&v25, "__");
  v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v24.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
  while (turi::sframe::contains_column(a1, (unsigned __int8 **)&v24))
    std::string::append(&v24, "__");
  v10 = a2[1];
  *(_QWORD *)&v23 = *a2;
  *((_QWORD *)&v23 + 1) = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  turi::sframe::add_column(a1, &v23, (uint64_t)&v24, (uint64_t)a4);
  v13 = (std::__shared_weak_count *)*((_QWORD *)&v23 + 1);
  if (*((_QWORD *)&v23 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(a4[5], a4[6], (unsigned __int8 **)a3);
  v17 = a4[6];
  if (v16 == v17)
  {
    v25.__r_.__value_.__r.__words[0] = (std::string::size_type)a3;
    turi::sframe::column_index(std::string const&)const::{lambda(void)#1}::operator()();
  }
  v18 = v16;
  v19 = a4[5];
  v20 = std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(v19, v17, (unsigned __int8 **)&v24);
  if (v20 == a4[6])
  {
    v25.__r_.__value_.__r.__words[0] = (std::string::size_type)&v24;
    turi::sframe::column_index(std::string const&)const::{lambda(void)#1}::operator()();
  }
  v21 = 0xAAAAAAAAAAAAAAABLL * ((v18 - v19) >> 3);
  v22 = 0xAAAAAAAAAAAAAAABLL * ((v20 - a4[5]) >> 3);
  turi::sframe::swap_columns((turi::sframe *)a4, v21, v22, (uint64_t)&v25);
  turi::sframe::operator=((uint64_t)a4, (uint64_t)&v25);
  turi::sframe::~sframe((turi::sframe *)&v25);
  turi::sframe::remove_column((turi::sframe *)a4, v22, (uint64_t)&v25);
  turi::sframe::operator=((uint64_t)a4, (uint64_t)&v25);
  turi::sframe::~sframe((turi::sframe *)&v25);
  turi::sframe::set_column_name((uint64_t)a4, v21, a3);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
}

void sub_2181A5BB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  turi::sframe *v23;

  turi::sframe::~sframe((turi::sframe *)&a18);
  turi::sframe::~sframe(v23);
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void turi::sframe::replace_column(std::shared_ptr<turi::sarray<turi::flexible_type>>,std::string const&)const::$_0::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe.cpp", 101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"contains_column(column_name)", 28);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe.cpp", "operator()", 499, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::sframe::replace_column(std::shared_ptr<turi::sarray<turi::flexible_type>>,std::string const&)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2181A5D28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

BOOL turi::sframe::set_num_segments(turi::sframe *this, uint64_t a2)
{
  int *v4;
  file_logger *v5;
  file_logger *started;
  _QWORD *v7;
  _QWORD *v8;
  const std::locale::facet *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  _QWORD *exception;
  std::string v21;
  std::string v22;

  v4 = (int *)global_logger();
  if (v4[169] <= 1)
  {
    if (cppipc::must_cancel((cppipc *)v4))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 1, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe.cpp", "set_num_segments", 520, 1);
    v7 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v7 && *((_BYTE *)v7 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7 + 2, (uint64_t)"Function entry", 14);
    v8 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v8)
    {
      if (*((_BYTE *)v8 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(_QWORD *)(v8[2] - 24) + 16));
        v9 = std::locale::use_facet((const std::locale *)&v22, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
        std::locale::~locale((std::locale *)&v22);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  assert_msg(*((unsigned __int8 *)this + 288), "Invalid SFrame");
  assert_msg(*((_BYTE *)this + 289) == 0, "SFrame not opened for writing");
  if (a2 && (*(uint64_t (**)(turi::sframe *))(*(_QWORD *)this + 24))(this) != a2)
  {
    v11 = *((_QWORD *)this + 26);
    v10 = (_QWORD *)((char *)this + 208);
    v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 32))(v11);
    if (*(char *)(v12 + 23) < 0)
      std::string::__init_copy_ctor_external(&v22, *(const std::string::value_type **)v12, *(_QWORD *)(v12 + 8));
    else
      v22 = *(std::string *)v12;
    v13 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v10 + 32))(*v10);
    v15 = *(_QWORD *)(v13 + 64);
    v14 = *(_QWORD *)(v13 + 72);
    v16 = operator new();
    *(_QWORD *)(v16 + 400) = 0;
    *(_OWORD *)(v16 + 368) = 0u;
    *(_OWORD *)(v16 + 384) = 0u;
    *(_OWORD *)(v16 + 336) = 0u;
    *(_OWORD *)(v16 + 352) = 0u;
    *(_OWORD *)(v16 + 304) = 0u;
    *(_OWORD *)(v16 + 320) = 0u;
    *(_OWORD *)(v16 + 272) = 0u;
    *(_OWORD *)(v16 + 288) = 0u;
    *(_OWORD *)(v16 + 240) = 0u;
    *(_OWORD *)(v16 + 256) = 0u;
    *(_OWORD *)(v16 + 208) = 0u;
    *(_OWORD *)(v16 + 224) = 0u;
    *(_OWORD *)(v16 + 176) = 0u;
    *(_OWORD *)(v16 + 192) = 0u;
    *(_OWORD *)(v16 + 144) = 0u;
    *(_OWORD *)(v16 + 160) = 0u;
    *(_OWORD *)(v16 + 112) = 0u;
    *(_OWORD *)(v16 + 128) = 0u;
    *(_OWORD *)(v16 + 80) = 0u;
    *(_OWORD *)(v16 + 96) = 0u;
    *(_OWORD *)(v16 + 64) = 0u;
    *(_OWORD *)v16 = 0u;
    *(_OWORD *)(v16 + 16) = 0u;
    *(_QWORD *)v16 = &unk_24D91E6C0;
    *(_OWORD *)(v16 + 32) = 0u;
    *(_OWORD *)(v16 + 48) = 0u;
    v17 = pthread_mutex_init((pthread_mutex_t *)(v16 + 24), 0);
    assert_msg(v17 == 0, "Mutex create error %d", v17);
    *(_QWORD *)(v16 + 160) = 0;
    *(_OWORD *)(v16 + 128) = 0u;
    *(_OWORD *)(v16 + 144) = 0u;
    *(_OWORD *)(v16 + 96) = 0u;
    *(_OWORD *)(v16 + 112) = 0u;
    *(_QWORD *)(v16 + 88) = 128;
    *(_OWORD *)(v16 + 168) = 0u;
    *(_OWORD *)(v16 + 184) = 0u;
    *(_OWORD *)(v16 + 200) = 0u;
    *(_OWORD *)(v16 + 216) = 0u;
    *(_OWORD *)(v16 + 232) = 0u;
    *(_OWORD *)(v16 + 248) = 0u;
    *(_BYTE *)(v16 + 376) = 0;
    *(_OWORD *)(v16 + 280) = 0u;
    *(_OWORD *)(v16 + 296) = 0u;
    *(_OWORD *)(v16 + 312) = 0u;
    *(_OWORD *)(v16 + 328) = 0u;
    *(_OWORD *)(v16 + 344) = 0u;
    *(_OWORD *)(v16 + 360) = 0u;
    *(_QWORD *)(v16 + 384) = 0;
    *(_QWORD *)(v16 + 392) = 0;
    *(_QWORD *)(v16 + 400) = 0;
    std::shared_ptr<turi::sarray_group_format_writer<turi::flexible_type>>::reset[abi:ne180100]<turi::sarray_group_format_writer_v2<turi::flexible_type>,void>(v10, v16);
    v18 = *v10;
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v21, v22.__r_.__value_.__l.__data_, v22.__r_.__value_.__l.__size_);
    else
      v21 = v22;
    (*(void (**)(uint64_t, std::string *, uint64_t, unint64_t))(*(_QWORD *)v18 + 16))(v18, &v21, a2, 0x8E38E38E38E38E39 * ((v14 - v15) >> 4));
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v21.__r_.__value_.__l.__data_);
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v22.__r_.__value_.__l.__data_);
  }
  return a2 != 0;
}

void sub_2181A60FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::locale a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a16 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18.__locale_);
  _Unwind_Resume(exception_object);
}

void turi::sframe::get_output_iterator(size_t *this@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  unint64_t v7;
  char v8;
  char *v9;
  char *v10;
  char *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  void *__p[2];
  uint64_t v19;
  __int128 v20;
  void *v21[2];
  uint64_t v22;
  __int128 v23;
  void *v24[2];
  uint64_t v25;
  __int128 v26;
  void *v27;
  _BYTE *v28;
  _BYTE v29[24];
  _BYTE *v30;
  _BYTE v31[24];
  _BYTE *v32;
  _BYTE v33[24];
  _BYTE *v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  assert_msg(*((unsigned __int8 *)this + 288), "Invalid SFrame");
  assert_msg(*((unsigned __int8 *)this + 289), "SFrame not opened for writing");
  v6 = (*(uint64_t (**)(size_t *))(*this + 24))(this) > a2
    || (*(uint64_t (**)(size_t *))(*this + 24))(this) == 0;
  assert_msg(v6, "Invalid segment ID");
  std::vector<turi::flex_type_enum>::vector(&v27, this[3]);
  if (this[3])
  {
    v7 = 0;
    do
    {
      v8 = turi::sframe::column_type((turi::sframe *)this, v7);
      *((_BYTE *)v27 + v7++) = v8;
    }
    while (v7 < this[3]);
  }
  v24[1] = 0;
  v25 = 0;
  v24[0] = 0;
  std::vector<turi::flex_type_enum>::__init_with_size[abi:ne180100]<turi::flex_type_enum*,turi::flex_type_enum*>(v24, v27, (uint64_t)v28, v28 - (_BYTE *)v27);
  *(_QWORD *)&v26 = this;
  *((_QWORD *)&v26 + 1) = a2;
  v34 = 0;
  v9 = (char *)operator new(0x30uLL);
  *(_QWORD *)v9 = &off_24D931328;
  *(_OWORD *)(v9 + 8) = *(_OWORD *)v24;
  *((_QWORD *)v9 + 3) = v25;
  v24[0] = 0;
  v24[1] = 0;
  v25 = 0;
  *((_OWORD *)v9 + 2) = v26;
  v34 = v9;
  v21[1] = 0;
  v22 = 0;
  v21[0] = 0;
  std::vector<turi::flex_type_enum>::__init_with_size[abi:ne180100]<turi::flex_type_enum*,turi::flex_type_enum*>(v21, v27, (uint64_t)v28, v28 - (_BYTE *)v27);
  *(_QWORD *)&v23 = this;
  *((_QWORD *)&v23 + 1) = a2;
  v32 = 0;
  v10 = (char *)operator new(0x30uLL);
  *(_QWORD *)v10 = &off_24D9313B8;
  *(_OWORD *)(v10 + 8) = *(_OWORD *)v21;
  *((_QWORD *)v10 + 3) = v22;
  v21[0] = 0;
  v21[1] = 0;
  v22 = 0;
  *((_OWORD *)v10 + 2) = v23;
  v32 = v10;
  __p[1] = 0;
  v19 = 0;
  __p[0] = 0;
  std::vector<turi::flex_type_enum>::__init_with_size[abi:ne180100]<turi::flex_type_enum*,turi::flex_type_enum*>(__p, v27, (uint64_t)v28, v28 - (_BYTE *)v27);
  *(_QWORD *)&v20 = this;
  *((_QWORD *)&v20 + 1) = a2;
  v30 = 0;
  v11 = (char *)operator new(0x30uLL);
  *(_QWORD *)v11 = &off_24D931448;
  *(_OWORD *)(v11 + 8) = *(_OWORD *)__p;
  *((_QWORD *)v11 + 3) = v19;
  __p[0] = 0;
  __p[1] = 0;
  v19 = 0;
  *((_OWORD *)v11 + 2) = v20;
  v30 = v11;
  turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>::sframe_function_output_iterator(a3, (uint64_t)v33, (uint64_t)v31, (uint64_t)v29);
  v12 = v30;
  if (v30 == v29)
  {
    v13 = 4;
    v12 = v29;
  }
  else
  {
    if (!v30)
      goto LABEL_12;
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_12:
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v14 = v32;
  if (v32 == v31)
  {
    v15 = 4;
    v14 = v31;
  }
  else
  {
    if (!v32)
      goto LABEL_19;
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_19:
  if (v21[0])
  {
    v21[1] = v21[0];
    operator delete(v21[0]);
  }
  v16 = v34;
  if (v34 == v33)
  {
    v17 = 4;
    v16 = v33;
  }
  else
  {
    if (!v34)
      goto LABEL_26;
    v17 = 5;
  }
  (*(void (**)(void))(*v16 + 8 * v17))();
LABEL_26:
  if (v24[0])
  {
    v24[1] = v24[0];
    operator delete(v24[0]);
  }
  if (v27)
  {
    v28 = v27;
    operator delete(v27);
  }
}

void sub_2181A6470(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28)
{
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;

  v31 = *(_QWORD **)(v29 - 128);
  if (v31 == v28)
  {
    v32 = 4;
    v31 = (_QWORD *)(v29 - 152);
  }
  else
  {
    if (!v31)
      goto LABEL_6;
    v32 = 5;
  }
  (*(void (**)(void))(*v31 + 8 * v32))();
LABEL_6:
  if (__p)
    operator delete(__p);
  v33 = *(_QWORD **)(v29 - 96);
  if (v33 == (_QWORD *)(v29 - 120))
  {
    v34 = 4;
    v33 = (_QWORD *)(v29 - 120);
  }
  else
  {
    if (!v33)
      goto LABEL_13;
    v34 = 5;
  }
  (*(void (**)(void))(*v33 + 8 * v34))();
LABEL_13:
  if (a15)
    operator delete(a15);
  v35 = *(_QWORD **)(v29 - 64);
  if (v35 == (_QWORD *)(v29 - 88))
  {
    v36 = 4;
    v35 = (_QWORD *)(v29 - 88);
  }
  else
  {
    if (!v35)
      goto LABEL_20;
    v36 = 5;
  }
  (*(void (**)(void))(*v35 + 8 * v36))();
LABEL_20:
  if (a21)
    operator delete(a21);
  if (a27)
    operator delete(a27);
  _Unwind_Resume(exception_object);
}

uint64_t turi::sframe::flush_write_to_segment(turi::sframe *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 26);
  if (!v1)
    turi::sframe::flush_write_to_segment(unsigned long)::$_0::operator()();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 112))(v1);
}

void turi::sframe::close(turi::sframe *this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  int *v6;
  file_logger *v7;
  file_logger *started;
  _QWORD *v9;
  _QWORD *v10;
  const std::locale::facet *v11;
  turi::fileio::file_handle_pool *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  std::string::size_type size;
  pthread_mutex_t *instance;
  unint64_t v24;
  _OWORD *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  _QWORD *v34;
  _QWORD *v35;
  char *v36;
  __int128 v37;
  int64x2_t v38;
  _OWORD *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *p_shared_owners;
  unint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *exception;
  std::string v52;
  void *v53;
  char v54;
  void *__p;
  void *v56;
  uint64_t v57;
  _QWORD *v58[3];
  std::string v59;
  __int128 v60;
  std::string v61;
  __int128 v62;
  std::string v63;
  std::string v64;
  std::locale v65;
  int64x2_t v66;
  uint64_t v67;
  char *v68;

  v2 = (_QWORD *)((char *)this + 208);
  (*(void (**)(_QWORD))(**((_QWORD **)this + 26) + 40))(*((_QWORD *)this + 26));
  (*(void (**)(_QWORD))(*(_QWORD *)*v2 + 48))(*v2);
  v3 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v2 + 32))(*v2);
  v4 = v3;
  if (*(char *)(v3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v61, *(const std::string::value_type **)v3, *(_QWORD *)(v3 + 8));
  }
  else
  {
    v5 = *(_OWORD *)v3;
    v61.__r_.__value_.__r.__words[2] = *(_QWORD *)(v3 + 16);
    *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v5;
  }
  v62 = *(_OWORD *)(v4 + 24);
  memset(&v63, 0, sizeof(v63));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v63, *(__int128 **)(v4 + 40), *(__int128 **)(v4 + 48), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v4 + 48) - *(_QWORD *)(v4 + 40)) >> 3));
  memset(&v64, 0, sizeof(v64));
  std::vector<turi::index_file_information>::__init_with_size[abi:ne180100]<turi::index_file_information*,turi::index_file_information*>(&v64, *(turi::index_file_information **)(v4 + 64), *(turi::index_file_information **)(v4 + 72), 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(v4 + 72) - *(_QWORD *)(v4 + 64)) >> 4));
  v6 = (int *)global_logger();
  if (v6[169] <= 1)
  {
    if (cppipc::must_cancel((cppipc *)v6))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v7 = (file_logger *)global_logger();
    started = file_logger::start_stream(v7, 1, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe.cpp", "close", 635, 1);
    v9 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v9 && *((_BYTE *)v9 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9 + 2, (uint64_t)"Function entry", 14);
    v10 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v10)
    {
      if (*((_BYTE *)v10 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(_QWORD *)(v10[2] - 24) + 16));
        v11 = std::locale::use_facet(&v65, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
        std::locale::~locale(&v65);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  assert_msg(*((unsigned __int8 *)this + 288), "Invalid SFrame");
  v12 = (turi::fileio::file_handle_pool *)assert_msg(*((unsigned __int8 *)this + 289), "SFrame not opened for writing");
  v13 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 4) = 0;
  if (v13)
  {
    v14 = *(_QWORD *)((*(uint64_t (**)(_QWORD))(*(_QWORD *)*v2 + 32))(*v2) + 64);
    v15 = *(uint64_t **)(v14 + 72);
    v16 = *(uint64_t **)(v14 + 80);
    if (v15 != v16)
    {
      v17 = *((_QWORD *)this + 4);
      do
      {
        v18 = *v15++;
        v17 += v18;
        *((_QWORD *)this + 4) = v17;
      }
      while (v15 != v16);
    }
    std::vector<std::string>::resize((std::vector<std::string> *)((char *)this + 64), *((_QWORD *)this + 3));
    if (*((_QWORD *)this + 3))
    {
      v19 = 0;
      v20 = 0;
      v21 = 0;
      do
      {
        v12 = (turi::fileio::file_handle_pool *)std::string::operator=((std::string *)(*((_QWORD *)this + 8) + v19), (const std::string *)(v64.__r_.__value_.__r.__words[0] + v20));
        ++v21;
        v20 += 144;
        v19 += 24;
      }
      while (v21 < *((_QWORD *)this + 3));
    }
  }
  size = HIBYTE(v61.__r_.__value_.__r.__words[2]);
  if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v61.__r_.__value_.__l.__size_;
  if (size)
  {
    instance = turi::fileio::file_handle_pool::get_instance(v12);
    turi::fileio::file_handle_pool::register_file((uint64_t)instance, (__int128 *)&v61, (uint64_t *)&v60);
    v24 = *((_QWORD *)this + 22);
    v25 = (_OWORD *)*((_QWORD *)this + 21);
    if ((unint64_t)v25 >= v24)
    {
      v26 = *((_QWORD *)this + 20);
      v27 = ((uint64_t)v25 - v26) >> 4;
      v28 = v27 + 1;
      if ((unint64_t)(v27 + 1) >> 60)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      v29 = v24 - v26;
      if (v29 >> 3 > v28)
        v28 = v29 >> 3;
      if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF0)
        v30 = 0xFFFFFFFFFFFFFFFLL;
      else
        v30 = v28;
      v68 = (char *)this + 176;
      v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::flexible_type>>((uint64_t)this + 176, v30);
      v33 = &v31[16 * v27];
      *(_OWORD *)v33 = v60;
      v60 = 0uLL;
      v35 = (_QWORD *)*((_QWORD *)this + 20);
      v34 = (_QWORD *)*((_QWORD *)this + 21);
      if (v34 == v35)
      {
        v38 = vdupq_n_s64((unint64_t)v34);
        v36 = &v31[16 * v27];
      }
      else
      {
        v36 = &v31[16 * v27];
        do
        {
          v37 = *((_OWORD *)v34 - 1);
          v34 -= 2;
          *((_OWORD *)v36 - 1) = v37;
          v36 -= 16;
          *v34 = 0;
          v34[1] = 0;
        }
        while (v34 != v35);
        v38 = *((int64x2_t *)this + 10);
      }
      v39 = v33 + 16;
      *((_QWORD *)this + 20) = v36;
      *((_QWORD *)this + 21) = v33 + 16;
      v66 = v38;
      v40 = *((_QWORD *)this + 22);
      *((_QWORD *)this + 22) = &v31[16 * v32];
      v67 = v40;
      v65.__locale_ = (std::locale::__imp *)v38.i64[0];
      std::__split_buffer<std::shared_ptr<turi::group_aggregate_value>>::~__split_buffer((uint64_t)&v65);
      v41 = (std::__shared_weak_count *)*((_QWORD *)&v60 + 1);
      *((_QWORD *)this + 21) = v39;
      if (v41)
      {
        p_shared_owners = (unint64_t *)&v41->__shared_owners_;
        do
          v43 = __ldaxr(p_shared_owners);
        while (__stlxr(v43 - 1, p_shared_owners));
        if (!v43)
        {
          ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
          std::__shared_weak_count::__release_weak(v41);
        }
      }
    }
    else
    {
      *v25 = v60;
      *((_QWORD *)this + 21) = v25 + 1;
    }
  }
  std::shared_ptr<turi::neural_net::Subscriber<std::unique_ptr<turi::style_transfer::Checkpoint>>>::reset[abi:ne180100](v2);
  if (*((char *)this + 159) < 0)
    std::string::__init_copy_ctor_external(&v59, *((const std::string::value_type **)this + 17), *((_QWORD *)this + 18));
  else
    v59 = *(std::string *)((char *)this + 136);
  turi::write_sframe_index_file((uint64_t)&v59, (_QWORD *)this + 1);
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v59.__r_.__value_.__l.__data_);
  *((_WORD *)this + 144) = 1;
  v44 = (uint64_t *)((char *)this + 184);
  std::vector<std::shared_ptr<turi::sframe_rows const>>::resize((uint64_t)this + 184, *((_QWORD *)this + 3));
  if (*((_QWORD *)this + 3))
  {
    v45 = 0;
    v46 = 0;
    v47 = 0;
    do
    {
      v48 = *v44;
      v49 = operator new();
      *(_QWORD *)(v49 + 272) = 0;
      *(_OWORD *)(v49 + 240) = 0u;
      *(_OWORD *)(v49 + 256) = 0u;
      *(_OWORD *)(v49 + 208) = 0u;
      *(_OWORD *)(v49 + 224) = 0u;
      *(_OWORD *)(v49 + 176) = 0u;
      *(_OWORD *)(v49 + 192) = 0u;
      *(_OWORD *)(v49 + 144) = 0u;
      *(_OWORD *)(v49 + 160) = 0u;
      *(_OWORD *)(v49 + 112) = 0u;
      *(_OWORD *)(v49 + 128) = 0u;
      *(_OWORD *)(v49 + 80) = 0u;
      *(_OWORD *)(v49 + 96) = 0u;
      *(_OWORD *)(v49 + 48) = 0u;
      *(_OWORD *)(v49 + 64) = 0u;
      *(_OWORD *)(v49 + 16) = 0u;
      *(_OWORD *)(v49 + 32) = 0u;
      *(_OWORD *)v49 = 0u;
      turi::sarray<turi::flexible_type>::sarray(v49);
      std::shared_ptr<turi::sarray<turi::flexible_type>>::reset[abi:ne180100]<turi::sarray<turi::flexible_type>,void>((_QWORD *)(v48 + v46), v49);
      v50 = *(_QWORD *)(*v44 + v46);
      turi::index_file_information::index_file_information(&v52, (const turi::index_file_information *)(v64.__r_.__value_.__r.__words[0] + v45));
      turi::sarray<turi::flexible_type>::open_for_read(v50, (uint64_t)&v52);
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v58, v58[1]);
      v65.__locale_ = (std::locale::__imp *)&v57;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v65);
      if (__p)
      {
        v56 = __p;
        operator delete(__p);
      }
      if (v54 < 0)
        operator delete(v53);
      if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v52.__r_.__value_.__l.__data_);
      ++v47;
      v46 += 16;
      v45 += 144;
    }
    while (v47 < *((_QWORD *)this + 3));
  }
  turi::sframe::keep_array_file_ref(this);
  v65.__locale_ = (std::locale::__imp *)&v64;
  std::vector<turi::index_file_information>::__destroy_vector::operator()[abi:ne180100]((void ***)&v65);
  v65.__locale_ = (std::locale::__imp *)&v63;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v65);
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v61.__r_.__value_.__l.__data_);
}

void sub_2181A6B78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,char a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  uint64_t v43;

  std::locale::~locale((std::locale *)(v43 - 136));
  turi::group_index_file_information::~group_index_file_information(&a38);
  _Unwind_Resume(a1);
}

void turi::sframe::save(turi *a1, uint64_t a2)
{
  int v4;
  const std::string::value_type *v5;
  uint64_t v6;
  void **v7;
  unint64_t v8;
  const std::string::value_type *v9;
  char *v10;
  int v11;
  int v12;
  std::string __p;
  void **v14;
  void *v15[2];
  unsigned __int8 v16;

  if (!*((_BYTE *)a1 + 288))
    turi::sframe::save(std::string)const::$_0::operator()();
  if (*((_BYTE *)a1 + 289))
    turi::sframe::save(std::string)const::$_1::operator()();
  std::string::basic_string[abi:ne180100]<0>(v15, ".frame_idx");
  v4 = *(char *)(a2 + 23);
  if (v4 >= 0)
    v5 = (const std::string::value_type *)a2;
  else
    v5 = *(const std::string::value_type **)a2;
  v6 = *(unsigned __int8 *)(a2 + 23);
  if (v4 < 0)
    v6 = *(_QWORD *)(a2 + 8);
  v7 = (void **)v15[0];
  if ((v16 & 0x80u) == 0)
    v7 = v15;
  v8 = v16;
  if ((v16 & 0x80u) != 0)
    v8 = (unint64_t)v15[1];
  v9 = v5 - 1;
  v10 = (char *)v7 - 1;
  while (v6 && v8)
  {
    v11 = v9[v6];
    v12 = v10[v8];
    --v6;
    --v8;
    if (v11 != v12)
      goto LABEL_16;
  }
  if (v8)
  {
LABEL_16:
    v14 = v15;
    turi::sframe::save(std::string)const::$_2::operator()();
  }
  if (v4 < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  turi::sframe_save(a1, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if ((char)v16 < 0)
    operator delete(v15[0]);
}

void turi::sframe::save(std::string)const::$_0::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe.cpp", 101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"inited", 6);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe.cpp", "operator()", 721, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::sframe::save(std::string)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2181A6E78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::sframe::save(std::string)const::$_1::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe.cpp", 101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"!(writing)", 10);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe.cpp", "operator()", 722, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::sframe::save(std::string)::$_1::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2181A6FF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::sframe::save(turi::sframe *this, turi::oarchive *a2)
{
  size_t v3;
  void **v4;
  void **v5;
  void *__p[2];
  char v7;
  void *v8[2];
  unsigned __int8 v9;

  turi::oarchive::get_prefix(a2, (unsigned __int8 *)v8);
  if ((v9 & 0x80u) == 0)
    v3 = v9;
  else
    v3 = (size_t)v8[1];
  v4 = __p;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v3 + 10);
  if (v7 < 0)
    v4 = (void **)__p[0];
  if (v3)
  {
    if ((v9 & 0x80u) == 0)
      v5 = v8;
    else
      v5 = (void **)v8[0];
    memmove(v4, v5, v3);
  }
  strcpy((char *)v4 + v3, ".frame_idx");
  turi::sframe::save(this, (uint64_t)__p);
  if (v7 < 0)
    operator delete(__p[0]);
  if ((char)v9 < 0)
    operator delete(v8[0]);
}

void sub_2181A7160(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

void turi::sframe::load(turi::sframe *this, turi::iarchive *a2)
{
  size_t size;
  void **v4;
  std::string *v5;
  _BYTE v6[32];
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9[5];
  char v10;
  void *__p[2];
  char v12;
  _BYTE v13[32];
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16[5];
  char v17;
  std::string v18;
  void **v19;

  turi::iarchive::get_prefix(a2, &v18);
  if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v18.__r_.__value_.__r.__words[2]);
  else
    size = v18.__r_.__value_.__l.__size_;
  v4 = __p;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, size + 10);
  if (v12 < 0)
    v4 = (void **)__p[0];
  if (size)
  {
    if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v5 = &v18;
    else
      v5 = (std::string *)v18.__r_.__value_.__r.__words[0];
    memmove(v4, v5, size);
  }
  strcpy((char *)v4 + size, ".frame_idx");
  turi::read_sframe_index_file((std::string::size_type)__p, (uint64_t)v13);
  if (v12 < 0)
    operator delete(__p[0]);
  turi::sframe_index_file_information::sframe_index_file_information((turi::sframe_index_file_information *)v6, (const turi::sframe_index_file_information *)v13);
  turi::sframe::open_for_read((uint64_t)this, (const turi::sframe_index_file_information *)v6);
  if (v10 < 0)
    operator delete(v9[3]);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v9, v9[1]);
  v19 = (void **)&v8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v19);
  v19 = (void **)&v7;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v19);
  if (v17 < 0)
    operator delete(v16[3]);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v16, v16[1]);
  v19 = (void **)&v15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v19);
  v19 = (void **)&v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v19);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
}

void sub_2181A730C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32)
{
  uint64_t v32;

  turi::sframe_index_file_information::~sframe_index_file_information(&a10);
  turi::sframe_index_file_information::~sframe_index_file_information(&a32);
  if (*(char *)(v32 - 41) < 0)
    operator delete(*(void **)(v32 - 64));
  _Unwind_Resume(a1);
}

void turi::sframe::open_for_read(uint64_t a1, const turi::sframe_index_file_information *a2)
{
  int *v4;
  file_logger *v5;
  file_logger *started;
  _QWORD *v7;
  _QWORD *v8;
  const std::locale::facet *v9;
  _QWORD *exception;
  __int128 v11[2];
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14[5];
  char v15;
  std::locale v16;

  v4 = (int *)global_logger();
  if (v4[169] <= 1)
  {
    if (cppipc::must_cancel((cppipc *)v4))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 1, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe.hpp", "open_for_read", 216, 1);
    v7 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v7 && *((_BYTE *)v7 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7 + 2, (uint64_t)"Function entry", 14);
    v8 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v8)
    {
      if (*((_BYTE *)v8 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(_QWORD *)(v8[2] - 24) + 16));
        v9 = std::locale::use_facet(&v16, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
        std::locale::~locale(&v16);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  assert_msg(*(_BYTE *)(a1 + 288) == 0, "Attempting to init an SFrame which has already been inited.");
  *(_BYTE *)(a1 + 288) = 1;
  turi::sframe_index_file_information::sframe_index_file_information((turi::sframe_index_file_information *)v11, a2);
  turi::sframe::create_arrays_for_reading(a1, v11);
  if (v15 < 0)
    operator delete(v14[3]);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v14, v14[1]);
  v16.__locale_ = (std::locale::__imp *)&v13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v16);
  v16.__locale_ = (std::locale::__imp *)&v12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v16);
}

void sub_2181A7528(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::locale::~locale((std::locale *)(v1 - 56));
  _Unwind_Resume(a1);
}

uint64_t turi::sframe::delete_files_on_destruction(turi::sframe *this)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *i;
  uint64_t v7;

  v2 = (uint64_t *)*((_QWORD *)this + 23);
  v3 = (uint64_t *)*((_QWORD *)this + 24);
  while (v2 != v3)
  {
    v4 = *v2;
    v2 += 2;
    turi::sarray<turi::flexible_type>::delete_files_on_destruction(v4);
  }
  v5 = (uint64_t *)*((_QWORD *)this + 20);
  for (i = (uint64_t *)*((_QWORD *)this + 21); v5 != i; *(_BYTE *)(v7 + 24) = 1)
  {
    v7 = *v5;
    v5 += 2;
  }
  return 1;
}

void turi::sarray<turi::flexible_type>::delete_files_on_destruction(uint64_t a1)
{
  __int128 **v1;
  __int128 **v2;
  std::locale::id *v3;
  int *v4;
  file_logger *v5;
  file_logger *started;
  _QWORD *v7;
  __int128 *v8;
  __int128 v9;
  uint64_t v10;
  _QWORD *v11;
  const std::locale::facet *v12;
  __int128 *v13;
  _QWORD *exception;
  std::string __p;
  std::locale v16;

  v1 = *(__int128 ***)(a1 + 256);
  v2 = *(__int128 ***)(a1 + 264);
  if (v1 != v2)
  {
    v3 = (std::locale::id *)MEMORY[0x24BEDB350];
    do
    {
      v4 = (int *)global_logger();
      if (v4[169] <= 2)
      {
        if (cppipc::must_cancel((cppipc *)v4))
          log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
        v5 = (file_logger *)global_logger();
        started = file_logger::start_stream(v5, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray.hpp", "delete_files_on_destruction", 705, 1);
        v7 = pthread_getspecific(*((_QWORD *)started + 74));
        if (v7 && *((_BYTE *)v7 + 280))
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7 + 2, (uint64_t)"Will delete data file: ", 23);
        v8 = *v1;
        if (*((char *)*v1 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
        }
        else
        {
          v9 = *v8;
          __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v8 + 2);
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v9;
        }
        v10 = file_logger::operator<<<std::string>((uint64_t)started, (uint64_t)&__p);
        v11 = pthread_getspecific(*(_QWORD *)(v10 + 592));
        if (v11)
        {
          if (*((_BYTE *)v11 + 280))
          {
            std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(_QWORD *)(v11[2] - 24) + 16));
            v12 = std::locale::use_facet(&v16, v3);
            ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
            std::locale::~locale(&v16);
            std::ostream::put();
            std::ostream::flush();
            file_logger::stream_flush((file_logger *)v10);
            if (*(_DWORD *)(v10 + 600) == 7)
            {
              __print_back_trace();
              exception = __cxa_allocate_exception(8uLL);
              *exception = "LOG_FATAL encountered";
              __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
            }
          }
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      v13 = *v1;
      v1 += 2;
      *((_BYTE *)v13 + 24) = 1;
    }
    while (v1 != v2);
  }
}

void sub_2181A7784(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::locale a15)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t turi::sframe::num_segments(turi::sframe *this)
{
  _QWORD **v2;
  uint64_t v3;

  assert_msg(*((unsigned __int8 *)this + 288), "Invalid SFrame");
  if (*((_BYTE *)this + 289))
  {
    v2 = (_QWORD **)((char *)this + 208);
    v3 = 15;
    return (*(uint64_t (**)(void))(**v2 + 8 * v3))();
  }
  if (*((_QWORD *)this + 3))
  {
    v2 = (_QWORD **)*((_QWORD *)this + 23);
    v3 = 3;
    return (*(uint64_t (**)(void))(**v2 + 8 * v3))();
  }
  return 0;
}

void sub_2181A7978(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void std::vector<turi::index_file_information>::__vdeallocate(void **a1)
{
  void *v1;
  uint64_t v3;
  void *v4;

  v1 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 144;
        std::allocator<turi::index_file_information>::destroy[abi:ne180100]((uint64_t)(a1 + 2), v3);
      }
      while ((void *)v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

turi::sframe_reader *turi::sframe_reader::sframe_reader(turi::sframe_reader *this)
{
  int v2;

  *(_QWORD *)this = off_24D931518;
  *((_BYTE *)this + 8) = 0;
  *((_QWORD *)this + 2) = -1;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = (char *)this + 104;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  v2 = pthread_mutex_init((pthread_mutex_t *)((char *)this + 168), 0);
  assert_msg(v2 == 0, "Mutex create error %d", v2);
  *((_QWORD *)this + 38) = 0;
  *((_QWORD *)this + 39) = 0;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_QWORD *)this + 29) = 128;
  return this;
}

void sub_2181A7B38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  void **v11;

  a10 = (void **)(v10 + 144);
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&a10);
  turi::sframe_index_file_information::~sframe_index_file_information(v11);
  _Unwind_Resume(a1);
}

std::string *std::vector<turi::index_file_information>::__init_with_size[abi:ne180100]<turi::index_file_information*,turi::index_file_information*>(std::string *result, turi::index_file_information *a2, turi::index_file_information *a3, unint64_t a4)
{
  std::string *v6;

  if (a4)
  {
    v6 = result;
    std::vector<turi::index_file_information>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::index_file_information>,turi::index_file_information*,turi::index_file_information*,turi::index_file_information*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_2181A7BC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<turi::index_file_information>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<turi::index_file_information>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x1C71C71C71C71C8)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::index_file_information>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[144 * v4];
  return result;
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::index_file_information>,turi::index_file_information*,turi::index_file_information*,turi::index_file_information*>(uint64_t a1, turi::index_file_information *a2, turi::index_file_information *a3, std::string *this)
{
  std::string *v4;
  const turi::index_file_information *v6;
  _QWORD v8[3];
  char v9;
  std::string *v10;
  std::string *v11;

  v4 = this;
  v10 = this;
  v11 = this;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      turi::index_file_information::index_file_information(v4, v6);
      v6 = (const turi::index_file_information *)((char *)v6 + 144);
      v4 = v11 + 6;
      v11 += 6;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::index_file_information>,turi::index_file_information*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_2181A7CC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::index_file_information>,turi::index_file_information*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::index_file_information>,turi::index_file_information*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<turi::index_file_information>,turi::index_file_information*>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<turi::index_file_information>,turi::index_file_information*>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (uint64_t *)a1[1];
  v1 = (uint64_t *)a1[2];
  v3 = *v1;
  v4 = *v2;
  if (*v1 != *v2)
  {
    v5 = *a1;
    do
    {
      v3 -= 144;
      std::allocator<turi::index_file_information>::destroy[abi:ne180100](v5, v3);
    }
    while (v3 != v4);
  }
}

_QWORD *std::vector<std::vector<turi::flexible_type> const*,std::allocator<std::vector<turi::flexible_type> const*>>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned long>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_2181A7DB0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<std::shared_ptr<turi::sarray<turi::flexible_type>>>::__emplace_back_slow_path<turi::sarray<turi::flexible_type>*>(uint64_t *a1, uint64_t *a2)
{
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  __int128 v15;
  int64x2_t v16;
  char *v17;
  char *v19;
  int64x2_t v20;
  char *v21;
  _QWORD *v22;

  v3 = (_QWORD *)*a1;
  v4 = (a1[1] - *a1) >> 4;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2] - (_QWORD)v3;
  if (v8 >> 3 > v5)
    v5 = v8 >> 3;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
    v9 = 0xFFFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  v22 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::flexible_type>>(v7, v9);
  else
    v10 = 0;
  v19 = v10;
  v20.i64[0] = (uint64_t)&v10[16 * v4];
  v20.i64[1] = v20.i64[0];
  v21 = &v10[16 * v9];
  std::shared_ptr<turi::sarray<turi::flexible_type>>::shared_ptr[abi:ne180100]<turi::sarray<turi::flexible_type>,void>(v20.i64[0], *a2);
  v11 = v20.i64[0];
  v12 = v20.i64[0] + 16;
  v20.i64[1] = v20.i64[0] + 16;
  v14 = (_QWORD *)*a1;
  v13 = (_QWORD *)a1[1];
  if (v13 == (_QWORD *)*a1)
  {
    v16 = vdupq_n_s64((unint64_t)v13);
  }
  else
  {
    do
    {
      v15 = *((_OWORD *)v13 - 1);
      v13 -= 2;
      *(_OWORD *)(v11 - 16) = v15;
      v11 -= 16;
      *v13 = 0;
      v13[1] = 0;
    }
    while (v13 != v14);
    v16 = *(int64x2_t *)a1;
    v12 = v20.i64[1];
  }
  *a1 = v11;
  a1[1] = v12;
  v20 = v16;
  v17 = (char *)a1[2];
  a1[2] = (uint64_t)v21;
  v21 = v17;
  v19 = (char *)v16.i64[0];
  std::__split_buffer<std::shared_ptr<turi::group_aggregate_value>>::~__split_buffer((uint64_t)&v19);
  return v12;
}

void sub_2181A7ED8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<turi::group_aggregate_value>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,turi::group_index_file_information>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::group_index_file_information>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::group_index_file_information>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,turi::group_index_file_information>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::group_index_file_information>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::group_index_file_information>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,turi::group_index_file_information>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::group_index_file_information>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::group_index_file_information>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,turi::group_index_file_information>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,turi::group_index_file_information>,0>(uint64_t a1)
{
  void **v2;

  v2 = (void **)(a1 + 88);
  std::vector<turi::index_file_information>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = (void **)(a1 + 64);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t *std::__tree<std::__value_type<std::string,turi::group_index_file_information>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::group_index_file_information>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::group_index_file_information>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    std::__tree<std::__value_type<std::string,turi::group_index_file_information>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::group_index_file_information>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::group_index_file_information>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,turi::group_index_file_information>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,turi::group_index_file_information>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

double std::__tree<std::__value_type<std::string,turi::group_index_file_information>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::group_index_file_information>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::group_index_file_information>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>@<D0>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *v7;
  __int128 *v8;
  __int128 v9;
  double result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x90uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = (std::string *)(v6 + 32);
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    *((_QWORD *)v6 + 6) = *((_QWORD *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  *((_QWORD *)v6 + 17) = 0;
  result = 0.0;
  *(_OWORD *)(v6 + 120) = 0u;
  *(_OWORD *)(v6 + 104) = 0u;
  *(_OWORD *)(v6 + 88) = 0u;
  *(_OWORD *)(v6 + 72) = 0u;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_2181A80D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,turi::group_index_file_information>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,turi::group_index_file_information>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,turi::group_index_file_information>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,turi::group_index_file_information>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,turi::group_index_file_information>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

void turi::sarray<turi::flexible_type>::get_index_file(void)const::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray.hpp", 101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"inited", 6);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray.hpp", "operator()", 341, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::sarray<turi::flexible_type>::get_index_file(void)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2181A8224(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<turi::sarray_group_format_writer<turi::flexible_type>>::shared_ptr[abi:ne180100]<turi::sarray_group_format_writer_v2<turi::flexible_type>,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_24D9312B0;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_2181A8304(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_pointer<turi::sarray_group_format_writer_v2<turi::flexible_type> *,std::shared_ptr<turi::sarray_group_format_writer<turi::flexible_type>>::__shared_ptr_default_delete<turi::sarray_group_format_writer<turi::flexible_type>,turi::sarray_group_format_writer_v2<turi::flexible_type>>,std::allocator<turi::sarray_group_format_writer_v2<turi::flexible_type>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<turi::sarray_group_format_writer_v2<turi::flexible_type> *,std::shared_ptr<turi::sarray_group_format_writer<turi::flexible_type>>::__shared_ptr_default_delete<turi::sarray_group_format_writer<turi::flexible_type>,turi::sarray_group_format_writer_v2<turi::flexible_type>>,std::allocator<turi::sarray_group_format_writer_v2<turi::flexible_type>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

_QWORD *std::allocate_shared[abi:ne180100]<turi::sarray<turi::flexible_type>,std::allocator<turi::sarray<turi::flexible_type>>,turi::sarray<turi::flexible_type>,void>@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x130uLL);
  result = std::__shared_ptr_emplace<turi::sarray<turi::flexible_type>>::__shared_ptr_emplace[abi:ne180100]<turi::sarray<turi::flexible_type>,std::allocator<turi::sarray<turi::flexible_type>>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_2181A83C0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<turi::sarray<turi::flexible_type>>::__shared_ptr_emplace[abi:ne180100]<turi::sarray<turi::flexible_type>,std::allocator<turi::sarray<turi::flexible_type>>,0>(_QWORD *a1, uint64_t a2)
{
  a1[2] = 0;
  *a1 = &unk_24D91E608;
  a1[1] = 0;
  turi::sarray<turi::flexible_type>::sarray((uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_2181A840C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_2181A847C(_Unwind_Exception *a1)
{
  uint64_t v1;

  turi::sarray<turi::flexible_type>::~sarray(v1);
  _Unwind_Resume(a1);
}

void turi::copy<turi::sarray<turi::flexible_type> &,std::insert_iterator<std::vector<turi::flexible_type>>,void>(turi::sarray<turi::flexible_type> &,std::insert_iterator<std::vector<turi::flexible_type>>,unsigned long)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/algorithm.hpp", 104);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"array.is_opened_for_read()", 26);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/algorithm.hpp", "operator()", 443, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  void turi::copy<turi::sarray<turi::flexible_type> &,std::insert_iterator<std::vector<turi::flexible_type>>,void>(turi::sarray<turi::flexible_type> &,std::insert_iterator<std::vector<turi::flexible_type>>,unsigned long)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2181A8588(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<turi::sframe::get_output_iterator(unsigned long)::$_0,std::allocator<turi::sframe::get_output_iterator(unsigned long)::$_0>,void ()(std::vector<turi::flexible_type> const&)>::~__func(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24D931328;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void std::__function::__func<turi::sframe::get_output_iterator(unsigned long)::$_0,std::allocator<turi::sframe::get_output_iterator(unsigned long)::$_0>,void ()(std::vector<turi::flexible_type> const&)>::~__func(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24D931328;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x219A19A08);
}

_QWORD *std::__function::__func<turi::sframe::get_output_iterator(unsigned long)::$_0,std::allocator<turi::sframe::get_output_iterator(unsigned long)::$_0>,void ()(std::vector<turi::flexible_type> const&)>::__clone(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x30uLL);
  *v2 = &off_24D931328;
  v2[2] = 0;
  v2[3] = 0;
  v2[1] = 0;
  std::vector<turi::flex_type_enum>::__init_with_size[abi:ne180100]<turi::flex_type_enum*,turi::flex_type_enum*>(v2 + 1, *(const void **)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8));
  *((_OWORD *)v2 + 2) = *(_OWORD *)(a1 + 32);
  return v2;
}

void sub_2181A86EC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

__n128 std::__function::__func<turi::sframe::get_output_iterator(unsigned long)::$_0,std::allocator<turi::sframe::get_output_iterator(unsigned long)::$_0>,void ()(std::vector<turi::flexible_type> const&)>::__clone(uint64_t a1, __n128 *a2)
{
  __n128 result;

  a2->n128_u64[0] = (unint64_t)&off_24D931328;
  a2[1].n128_u64[0] = 0;
  a2[1].n128_u64[1] = 0;
  a2->n128_u64[1] = 0;
  std::vector<turi::flex_type_enum>::__init_with_size[abi:ne180100]<turi::flex_type_enum*,turi::flex_type_enum*>(&a2->n128_u64[1], *(const void **)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8));
  result = *(__n128 *)(a1 + 32);
  a2[2] = result;
  return result;
}

void std::__function::__func<turi::sframe::get_output_iterator(unsigned long)::$_0,std::allocator<turi::sframe::get_output_iterator(unsigned long)::$_0>,void ()(std::vector<turi::flexible_type> const&)>::destroy(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
}

void std::__function::__func<turi::sframe::get_output_iterator(unsigned long)::$_0,std::allocator<turi::sframe::get_output_iterator(unsigned long)::$_0>,void ()(std::vector<turi::flexible_type> const&)>::destroy_deallocate(_QWORD *__p)
{
  void *v2;

  v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

void std::__function::__func<turi::sframe::get_output_iterator(unsigned long)::$_0,std::allocator<turi::sframe::get_output_iterator(unsigned long)::$_0>,void ()(std::vector<turi::flexible_type> const&)>::operator()(uint64_t a1, uint64_t *a2)
{
  turi::sframe::get_output_iterator(unsigned long)::$_0::operator()((unsigned __int8 **)(a1 + 8), a2);
}

uint64_t std::__function::__func<turi::sframe::get_output_iterator(unsigned long)::$_0,std::allocator<turi::sframe::get_output_iterator(unsigned long)::$_0>,void ()(std::vector<turi::flexible_type> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::sframe::get_output_iterator(unsigned long)::$_0,std::allocator<turi::sframe::get_output_iterator(unsigned long)::$_0>,void ()(std::vector<turi::flexible_type> const&)>::target_type()
{
}

void turi::sframe::get_output_iterator(unsigned long)::$_0::operator()(unsigned __int8 **a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  uint64_t v9;
  unsigned __int8 *v10;
  int v11;
  int v12;
  int v13;
  __int128 v15;
  uint64_t v16;
  unint64_t v17;
  turi::flexible_type_impl *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t *v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t *v43;
  void *v44;
  void *v45;
  unsigned int v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t *v50;
  void *v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t *v58;
  uint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t *v75;
  unint64_t *v76;
  unint64_t v77;
  unint64_t v78;
  unsigned int v79;
  unint64_t *v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t *v83;
  void *v84;
  unint64_t *v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t *v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t *v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t *v95;
  double v96;
  double v97;
  uint64_t v98;
  _QWORD *v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  double v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  unint64_t v107;
  unint64_t v108;
  double v109;
  uint64_t v110;
  _QWORD *v111;
  unint64_t v112;
  unint64_t v113;
  __int128 v114;
  double v115;
  char **v116;
  uint64_t v117;
  _QWORD *v118;
  unint64_t v119;
  unint64_t v120;
  double v121;
  uint64_t v122;
  _QWORD *v123;
  unint64_t v124;
  unint64_t v125;
  uint64_t *v126;
  uint64_t v127;
  _QWORD *v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t *v131;
  _QWORD *v132;
  unint64_t v133;
  unint64_t v134;
  void *v135;
  unint64_t *v136;
  _QWORD *v137;
  unint64_t v138;
  unint64_t v139;
  void *v140;
  char *v141;
  uint64_t *v142;
  uint64_t *v143;
  _QWORD *v144;
  unint64_t *v146;
  _QWORD *v147;
  unint64_t v148;
  BOOL v149;
  unint64_t *v150;
  _QWORD *v151;
  uint64_t v152;
  unint64_t v153;
  unint64_t v154;
  _QWORD *v155;
  _QWORD *v156;
  void *v157;
  void *v158;
  unint64_t *v159;
  _QWORD *v160;
  unint64_t v161;
  unint64_t v162;
  void *v163;
  uint64_t *v164;
  unint64_t *v165;
  _QWORD *v166;
  uint64_t v167;
  unint64_t v168;
  unint64_t v169;
  _QWORD *v170;
  uint64_t v171;
  unint64_t *v172;
  _QWORD *v173;
  uint64_t v174;
  unint64_t v175;
  BOOL v176;
  unint64_t *v177;
  _QWORD *v178;
  unint64_t v179;
  BOOL v180;
  uint64_t v181;
  _QWORD *v182;
  unint64_t v183;
  unint64_t v184;
  uint64_t v185;
  _QWORD *v186;
  unint64_t v187;
  _QWORD *v188;
  unint64_t v189;
  _QWORD *v190;
  unint64_t v191;
  unint64_t *v192;
  _QWORD *v193;
  uint64_t v194;
  unint64_t v195;
  unint64_t v196;
  _QWORD *v197;
  _QWORD *v198;
  unint64_t *v199;
  _QWORD *v200;
  unint64_t v201;
  unint64_t v202;
  void *v203;
  _QWORD *v204;
  void *v205;
  _QWORD *v206;
  unint64_t v207;
  _QWORD *v208;
  uint64_t v209;
  unint64_t v210;
  _QWORD *v211;
  uint64_t v212;
  unint64_t v213;
  _QWORD *v214;
  uint64_t v215;
  unint64_t v216;
  _QWORD *v217;
  unint64_t v218;
  uint64_t v219;
  _QWORD *v220;
  unint64_t v221;
  unint64_t v222;
  uint64_t v223;
  unint64_t *v224;
  _QWORD *v225;
  unint64_t v226;
  unint64_t v227;
  _QWORD *v228;
  unint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  unsigned int *v234;
  unsigned int v235;
  __int128 v236;
  __int128 v237;
  unint64_t v238;
  BOOL v239;
  _QWORD *v240;
  uint64_t v241;
  unint64_t v242;
  _QWORD *v243;
  unint64_t v244;
  _QWORD *v245;
  unint64_t v246;
  _QWORD *v247;
  unint64_t v248;
  BOOL v249;
  _QWORD *v250;
  uint64_t v251;
  unint64_t v252;
  _QWORD *v253;
  unsigned int v254;
  uint64_t v255;
  _QWORD *v256;
  unint64_t v257;
  unint64_t v258;
  uint64_t v259;
  std::string::size_type v260;
  int v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  unsigned int *v266;
  unsigned int v267;
  __int128 v268;
  __int128 v269;
  unint64_t v270;
  unint64_t v271;
  uint64_t v272;
  __int128 v273;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  unint64_t *v277;
  _QWORD *v278;
  uint64_t v279;
  unint64_t v280;
  unint64_t v281;
  _QWORD *v282;
  void *v283;
  void *v284;
  _QWORD *v285;
  unint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  unsigned int *v290;
  unsigned int v291;
  __int128 v292;
  __int128 v293;
  unint64_t v294;
  _QWORD *v295;
  unint64_t v296;
  void *v297;
  uint64_t v298;
  unint64_t *v299;
  _QWORD *v300;
  unint64_t v301;
  unint64_t v302;
  unint64_t *v303;
  _QWORD *v304;
  unint64_t v305;
  unint64_t v306;
  uint64_t v307;
  _QWORD *v308;
  unint64_t v309;
  unint64_t v310;
  int v311;
  _QWORD *v312;
  unint64_t v313;
  _QWORD *v314;
  unint64_t v315;
  _QWORD *v316;
  unint64_t v317;
  int v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  unsigned int *v322;
  unsigned int v323;
  __int128 v324;
  __int128 v325;
  unint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  unsigned int *v330;
  unsigned int v331;
  __int128 v332;
  __int128 v333;
  unint64_t v334;
  _QWORD *v335;
  unint64_t v336;
  _QWORD *v337;
  unint64_t v338;
  _QWORD *v339;
  unint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  unsigned int *v344;
  unsigned int v345;
  __int128 v346;
  __int128 v347;
  unint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  unsigned int *v352;
  unsigned int v353;
  __int128 v354;
  __int128 v355;
  unint64_t v356;
  _QWORD *v357;
  unint64_t v358;
  _QWORD *v359;
  unint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  unsigned int *v364;
  unsigned int v365;
  __int128 v366;
  __int128 v367;
  unint64_t v368;
  _QWORD *v369;
  unint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  unsigned int *v374;
  unsigned int v375;
  __int128 v376;
  __int128 v377;
  unint64_t v378;
  _QWORD *v379;
  unint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  unsigned int *v384;
  unsigned int v385;
  __int128 v386;
  __int128 v387;
  unint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t *v391;
  uint64_t *v392;
  unint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  unint64_t *v397;
  uint64_t v398;
  uint64_t v399;
  unint64_t v400;
  _QWORD *v401;
  std::string::size_type v402;
  uint64_t v403;
  uint64_t v404;
  unint64_t v405;
  uint64_t v406;
  uint64_t *v407;
  unint64_t v408;
  uint64_t v409;
  uint64_t v410;
  unint64_t v411;
  uint64_t *v412;
  uint64_t v413;
  unint64_t v414;
  uint64_t *v415;
  uint64_t *v416;
  unint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  _QWORD *v423;
  uint64_t *v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  _QWORD *v428;
  _QWORD *v429;
  _QWORD *v430;
  uint64_t v431;
  __int128 v432;
  std::string *v433;
  __int128 v434;
  std::string *v435;
  __int128 v436;
  unint64_t v437;
  const std::string::value_type *v438;
  std::string *v439;
  __int128 v440;
  file_logger *v441;
  uint64_t v442;
  std::bad_cast *exception;
  std::string v444;
  _QWORD v445[3];
  std::string v446;
  std::string __p;
  std::string v448;
  _BYTE v449[32];
  _BYTE v450[32];
  uint64_t v451;

  v5 = *a2;
  v4 = a2[1];
  v6 = (v4 - *a2) >> 4;
  v7 = *a1;
  if (v6 != a1[1] - *a1)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v449);
    v428 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v449[16], (uint64_t)"Can not write to SFrame, got the wrong number of columns. ", 58);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v428, (uint64_t)"Expected: ", 10);
    v429 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v429, (uint64_t)" columns. Got: ", 15);
    v430 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v430, (uint64_t)" columns.", 9);
    v448.__r_.__value_.__r.__words[0] = (std::string::size_type)v449;
    turi::sframe::get_output_iterator(unsigned long)::$_0::operator() const(std::vector<turi::flexible_type> const&)::{lambda(void)#1}::operator()();
  }
  v8 = a1[3];
  if (v4 == v5)
  {
LABEL_14:
    (*(void (**)(_QWORD, unsigned __int8 *, uint64_t *))(**((_QWORD **)v8 + 26) + 56))(*((_QWORD *)v8 + 26), a1[4], a2);
    return;
  }
  if (v6 <= 1)
    v9 = 1;
  else
    v9 = v6;
  v10 = (unsigned __int8 *)(v5 + 12);
  while (1)
  {
    v12 = *v10;
    v10 += 16;
    v11 = v12;
    if (v12 != 7)
    {
      v13 = *v7;
      if (v13 != 7 && v11 != v13)
        break;
    }
    ++v7;
    if (!--v9)
      goto LABEL_14;
  }
  std::vector<turi::flexible_type>::vector(v445, v6);
  v16 = *a2;
  if (a2[1] == *a2)
  {
LABEL_607:
    (*(void (**)(_QWORD, unsigned __int8 *, _QWORD *))(**((_QWORD **)v8 + 26) + 64))(*((_QWORD *)v8 + 26), a1[4], v445);
    *(_QWORD *)v449 = v445;
    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v449);
    return;
  }
  v17 = 0;
  while (1)
  {
    v18 = (turi::flexible_type_impl *)(v16 + 16 * v17);
    v19 = *((char *)v18 + 12);
    if (v19 == 7 || (v27 = (char)(*a1)[v17], v27 == 7) || (v28 = (*a1)[v17], v28 == v19))
    {
      if (v16 != v445[0])
      {
        v20 = v445[0] + 16 * v17;
        switch(*(_BYTE *)(v20 + 12))
        {
          case 2:
            v21 = *(unint64_t **)v20;
            do
            {
              v22 = __ldaxr(v21);
              v23 = v22 - 1;
            }
            while (__stlxr(v23, v21));
            if (!v23)
            {
              v24 = *(unint64_t **)v20;
              if (!*(_QWORD *)v20)
                goto LABEL_72;
              if (*((char *)v24 + 31) < 0)
                operator delete((void *)v24[1]);
              v25 = v24;
              v26 = 0x1012C404EF22A49;
              goto LABEL_71;
            }
            break;
          case 3:
            v47 = *(unint64_t **)v20;
            do
            {
              v48 = __ldaxr(v47);
              v49 = v48 - 1;
            }
            while (__stlxr(v49, v47));
            if (!v49)
            {
              v50 = *(unint64_t **)v20;
              if (!*(_QWORD *)v20)
                goto LABEL_72;
              v51 = (void *)v50[1];
              if (v51)
              {
                v50[2] = (unint64_t)v51;
                operator delete(v51);
              }
              v25 = v50;
              v26 = 0x1080C409938AC02;
              goto LABEL_71;
            }
            break;
          case 4:
            v36 = *(unint64_t **)v20;
            do
            {
              v37 = __ldaxr(v36);
              v38 = v37 - 1;
            }
            while (__stlxr(v38, v36));
            if (!v38)
            {
              v39 = *(unint64_t **)v20;
              if (!*(_QWORD *)v20)
                goto LABEL_72;
              *(_QWORD *)v449 = v39 + 1;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v449);
              goto LABEL_64;
            }
            break;
          case 5:
            v52 = *(unint64_t **)v20;
            do
            {
              v53 = __ldaxr(v52);
              v54 = v53 - 1;
            }
            while (__stlxr(v54, v52));
            if (!v54)
            {
              v39 = *(unint64_t **)v20;
              if (!*(_QWORD *)v20)
                goto LABEL_72;
              *(_QWORD *)v449 = v39 + 1;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v449);
LABEL_64:
              v25 = v39;
              v26 = 0x1020C405E66F15BLL;
              goto LABEL_71;
            }
            break;
          case 8:
            v55 = *(unint64_t **)v20;
            do
            {
              v56 = __ldaxr(v55);
              v57 = v56 - 1;
            }
            while (__stlxr(v57, v55));
            if (!v57)
            {
              v58 = *(unint64_t **)v20;
              if (!*(_QWORD *)v20)
                goto LABEL_72;
              boost::detail::shared_count::~shared_count((unsigned int **)v58 + 2);
              v25 = v58;
              v46 = -235920773;
              goto LABEL_70;
            }
            break;
          case 9:
            v40 = *(unint64_t **)v20;
            do
            {
              v41 = __ldaxr(v40);
              v42 = v41 - 1;
            }
            while (__stlxr(v42, v40));
            if (!v42)
            {
              v43 = *(unint64_t **)v20;
              if (*(_QWORD *)v20)
              {
                v44 = (void *)v43[6];
                if (v44)
                {
                  v43[7] = (unint64_t)v44;
                  operator delete(v44);
                }
                v45 = (void *)v43[3];
                if (v45)
                {
                  v43[4] = (unint64_t)v45;
                  operator delete(v45);
                }
                std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v43 + 1));
                v25 = v43;
                v46 = 2071181815;
LABEL_70:
                v26 = v46 | 0x1030C4000000000;
LABEL_71:
                MEMORY[0x219A19A08](v25, v26);
              }
LABEL_72:
              *(_QWORD *)v20 = 0;
            }
            break;
          default:
            break;
        }
        v59 = *(_QWORD *)v18;
        *(_QWORD *)(v20 + 5) = *(_QWORD *)((char *)v18 + 5);
        *(_QWORD *)v20 = v59;
        LODWORD(v59) = *((unsigned __int8 *)v18 + 12);
        *(_BYTE *)(v20 + 12) = v59;
        switch((int)v59)
        {
          case 2:
            v60 = *(unint64_t **)v20;
            do
              v61 = __ldaxr(v60);
            while (__stlxr(v61 + 1, v60));
            break;
          case 3:
            v66 = *(unint64_t **)v20;
            do
              v67 = __ldaxr(v66);
            while (__stlxr(v67 + 1, v66));
            break;
          case 4:
            v62 = *(unint64_t **)v20;
            do
              v63 = __ldaxr(v62);
            while (__stlxr(v63 + 1, v62));
            break;
          case 5:
            v68 = *(unint64_t **)v20;
            do
              v69 = __ldaxr(v68);
            while (__stlxr(v69 + 1, v68));
            break;
          case 8:
            v70 = *(unint64_t **)v20;
            do
              v71 = __ldaxr(v70);
            while (__stlxr(v71 + 1, v70));
            break;
          case 9:
            v64 = *(unint64_t **)v20;
            do
              v65 = __ldaxr(v64);
            while (__stlxr(v65 + 1, v64));
            break;
          default:
            goto LABEL_546;
        }
      }
      goto LABEL_546;
    }
    if (!turi::flex_type_is_convertible(turi::flex_type_enum,turi::flex_type_enum)::castable[10 * *((char *)v18 + 12)
                                                                                            + v27])
      break;
    v29 = v445[0] + 16 * v17;
    switch(*(_BYTE *)(v29 + 12))
    {
      case 2:
        v30 = *(unint64_t **)v29;
        do
        {
          v31 = __ldaxr(v30);
          v32 = v31 - 1;
        }
        while (__stlxr(v32, v30));
        if (!v32)
        {
          v33 = *(unint64_t **)v29;
          if (!*(_QWORD *)v29)
            goto LABEL_122;
          if (*((char *)v33 + 31) < 0)
            operator delete((void *)v33[1]);
          v34 = v33;
          v35 = 0x1012C404EF22A49;
          goto LABEL_121;
        }
        break;
      case 3:
        v80 = *(unint64_t **)v29;
        do
        {
          v81 = __ldaxr(v80);
          v82 = v81 - 1;
        }
        while (__stlxr(v82, v80));
        if (!v82)
        {
          v83 = *(unint64_t **)v29;
          if (!*(_QWORD *)v29)
            goto LABEL_122;
          v84 = (void *)v83[1];
          if (v84)
          {
            v83[2] = (unint64_t)v84;
            operator delete(v84);
          }
          v34 = v83;
          v35 = 0x1080C409938AC02;
          goto LABEL_121;
        }
        break;
      case 4:
        v72 = *(unint64_t **)v29;
        do
        {
          v73 = __ldaxr(v72);
          v74 = v73 - 1;
        }
        while (__stlxr(v74, v72));
        if (!v74)
        {
          v75 = *(unint64_t **)v29;
          if (!*(_QWORD *)v29)
            goto LABEL_122;
          *(_QWORD *)v449 = v75 + 1;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v449);
          goto LABEL_114;
        }
        break;
      case 5:
        v85 = *(unint64_t **)v29;
        do
        {
          v86 = __ldaxr(v85);
          v87 = v86 - 1;
        }
        while (__stlxr(v87, v85));
        if (!v87)
        {
          v75 = *(unint64_t **)v29;
          if (!*(_QWORD *)v29)
            goto LABEL_122;
          *(_QWORD *)v449 = v75 + 1;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v449);
LABEL_114:
          v34 = v75;
          v35 = 0x1020C405E66F15BLL;
          goto LABEL_121;
        }
        break;
      case 8:
        v88 = *(unint64_t **)v29;
        do
        {
          v89 = __ldaxr(v88);
          v90 = v89 - 1;
        }
        while (__stlxr(v90, v88));
        if (!v90)
        {
          v91 = *(unint64_t **)v29;
          if (!*(_QWORD *)v29)
            goto LABEL_122;
          boost::detail::shared_count::~shared_count((unsigned int **)v91 + 2);
          v34 = v91;
          v79 = -235920773;
          goto LABEL_120;
        }
        break;
      case 9:
        v76 = *(unint64_t **)v29;
        do
        {
          v77 = __ldaxr(v76);
          v78 = v77 - 1;
        }
        while (__stlxr(v78, v76));
        if (!v78)
        {
          if (*(_QWORD *)v29)
          {
            v34 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*(_QWORD **)v29);
            v79 = 2071181815;
LABEL_120:
            v35 = v79 | 0x1030C4000000000;
LABEL_121:
            MEMORY[0x219A19A08](v34, v35);
          }
LABEL_122:
          *(_QWORD *)v29 = 0;
        }
        break;
      default:
        break;
    }
    *(_QWORD *)v29 = 0;
    *(_DWORD *)(v29 + 8) = 0;
    *(_BYTE *)(v29 + 12) = v28;
    switch(v28)
    {
      case 2:
      case 3:
      case 4:
      case 5:
        v92 = operator new();
        *(_QWORD *)v92 = 0;
        *(_QWORD *)(v92 + 16) = 0;
        *(_QWORD *)(v92 + 24) = 0;
        *(_QWORD *)(v92 + 8) = 0;
        goto LABEL_127;
      case 6:
        *(_QWORD *)v29 = 0x1900000000000000;
        *(_DWORD *)(v29 + 8) = 0;
        break;
      case 8:
        v92 = operator new();
        *(_QWORD *)v92 = 0;
        *(_QWORD *)&v15 = 0;
        *(_OWORD *)(v92 + 8) = 0u;
        *(_OWORD *)(v92 + 24) = 0u;
        *(_OWORD *)(v92 + 40) = 0u;
        *(_QWORD *)(v92 + 56) = 0;
        *(_QWORD *)(v92 + 64) = 3;
LABEL_127:
        *(_QWORD *)v29 = v92;
        *(_QWORD *)v92 = 1;
        break;
      case 9:
        v93 = (_QWORD *)operator new();
        std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::pair[abi:ne180100]<true,0>(v93);
        *(_QWORD *)v29 = v93;
        *v93 = 1;
        break;
      default:
        break;
    }
    if (*a2 != v445[0])
    {
      v94 = *a2 + 16 * v17;
      v95 = (uint64_t *)(v445[0] + 16 * v17);
      switch(*(_BYTE *)(v94 + 12))
      {
        case 0:
          switch(*((_BYTE *)v95 + 12))
          {
            case 0:
              v96 = *(double *)v94;
              goto LABEL_185;
            case 1:
              *(double *)&v15 = (double)*(uint64_t *)v94;
              goto LABEL_409;
            case 2:
              v219 = *v95;
              if (*(_QWORD *)*v95 != 1)
              {
                v220 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v220, *v95);
                *v95 = (uint64_t)v220;
                *v220 = 1;
                do
                {
                  v221 = __ldaxr((unint64_t *)v219);
                  v222 = v221 - 1;
                }
                while (__stlxr(v222, (unint64_t *)v219));
                if (!v222)
                {
                  if (*(char *)(v219 + 31) < 0)
                    operator delete(*(void **)(v219 + 8));
                  MEMORY[0x219A19A08](v219, 0x1012C404EF22A49);
                }
              }
              v223 = *v95;
              std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v449);
              std::ostream::operator<<();
              std::stringbuf::str();
              goto LABEL_375;
            case 3:
              v146 = (unint64_t *)*v95;
              if (*(_QWORD *)*v95 == 1)
                goto LABEL_545;
              v188 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v188, *v95);
              *v95 = (uint64_t)v188;
              *v188 = 1;
              do
              {
                v189 = __ldaxr(v146);
                v149 = --v189 == 0;
              }
              while (__stlxr(v189, v146));
              goto LABEL_420;
            case 4:
              v177 = (unint64_t *)*v95;
              if (*(_QWORD *)*v95 == 1)
                goto LABEL_545;
              v312 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v312, *v95);
              *v95 = (uint64_t)v312;
              *v312 = 1;
              do
              {
                v313 = __ldaxr(v177);
                v249 = --v313 == 0;
              }
              while (__stlxr(v313, v177));
              goto LABEL_530;
            case 5:
              v177 = (unint64_t *)*v95;
              if (*(_QWORD *)*v95 == 1)
                goto LABEL_545;
              v337 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v337, *v95);
              *v95 = (uint64_t)v337;
              *v337 = 1;
              do
              {
                v338 = __ldaxr(v177);
                v180 = --v338 == 0;
              }
              while (__stlxr(v338, v177));
              goto LABEL_517;
            case 6:
              *v95 = *(_QWORD *)v94 & 0xFFFFFFFFFFFFFFLL | 0x5900000000000000;
              *((_DWORD *)v95 + 2) = 0;
              goto LABEL_546;
            case 7:
              goto LABEL_545;
            case 8:
              v230 = *v95;
              if (*(_QWORD *)*v95 == 1)
                goto LABEL_545;
              v341 = operator new();
              v342 = *v95;
              *(_QWORD *)v341 = *(_QWORD *)*v95;
              *(_QWORD *)(v341 + 8) = *(_QWORD *)(v342 + 8);
              v343 = *(_QWORD *)(v342 + 16);
              *(_QWORD *)(v341 + 16) = v343;
              if (v343)
              {
                v344 = (unsigned int *)(v343 + 8);
                do
                  v345 = __ldxr(v344);
                while (__stxr(v345 + 1, v344));
              }
              v346 = *(_OWORD *)(v342 + 24);
              v347 = *(_OWORD *)(v342 + 40);
              *(_OWORD *)(v341 + 56) = *(_OWORD *)(v342 + 56);
              *(_OWORD *)(v341 + 40) = v347;
              *(_OWORD *)(v341 + 24) = v346;
              *v95 = v341;
              *(_QWORD *)v341 = 1;
              do
              {
                v348 = __ldaxr((unint64_t *)v230);
                v239 = --v348 == 0;
              }
              while (__stlxr(v348, (unint64_t *)v230));
              goto LABEL_540;
            case 9:
              v172 = (unint64_t *)*v95;
              if (*(_QWORD *)*v95 == 1)
                goto LABEL_545;
              v211 = (_QWORD *)operator new();
              v212 = *v95 + 8;
              *v211 = *(_QWORD *)*v95;
              turi::flexible_type_impl::ndarray<double>::ndarray(v211 + 1, v212);
              *v95 = (uint64_t)v211;
              *v211 = 1;
              do
              {
                v213 = __ldaxr(v172);
                v176 = --v213 == 0;
              }
              while (__stlxr(v213, v172));
              goto LABEL_364;
            default:
              goto LABEL_624;
          }
        case 1:
          switch(*((_BYTE *)v95 + 12))
          {
            case 0:
              *(_QWORD *)&v15 = *(_QWORD *)v94;
              *(_QWORD *)&v96 = (uint64_t)*(double *)v94;
              goto LABEL_185;
            case 1:
              *(_QWORD *)&v15 = *(_QWORD *)v94;
              goto LABEL_409;
            case 2:
              v255 = *v95;
              if (*(_QWORD *)*v95 != 1)
              {
                v256 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v256, *v95);
                *v95 = (uint64_t)v256;
                *v256 = 1;
                do
                {
                  v257 = __ldaxr((unint64_t *)v255);
                  v258 = v257 - 1;
                }
                while (__stlxr(v258, (unint64_t *)v255));
                if (!v258)
                {
                  if (*(char *)(v255 + 31) < 0)
                    operator delete(*(void **)(v255 + 8));
                  MEMORY[0x219A19A08](v255, 0x1012C404EF22A49);
                }
              }
              v223 = *v95;
              std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v449);
              std::ostream::operator<<();
              std::stringbuf::str();
LABEL_375:
              v259 = v223 + 8;
              std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)v449);
              if (*(char *)(v223 + 31) < 0)
                operator delete(*(void **)v259);
              v15 = *(_OWORD *)&v448.__r_.__value_.__l.__data_;
              v260 = v448.__r_.__value_.__r.__words[2];
              goto LABEL_552;
            case 3:
              v146 = (unint64_t *)*v95;
              if (*(_QWORD *)*v95 == 1)
                goto LABEL_545;
              v190 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v190, *v95);
              *v95 = (uint64_t)v190;
              *v190 = 1;
              do
              {
                v191 = __ldaxr(v146);
                v149 = --v191 == 0;
              }
              while (__stlxr(v191, v146));
              goto LABEL_420;
            case 4:
              v177 = (unint64_t *)*v95;
              if (*(_QWORD *)*v95 == 1)
                goto LABEL_545;
              v314 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v314, *v95);
              *v95 = (uint64_t)v314;
              *v314 = 1;
              do
              {
                v315 = __ldaxr(v177);
                v249 = --v315 == 0;
              }
              while (__stlxr(v315, v177));
              goto LABEL_530;
            case 5:
              v177 = (unint64_t *)*v95;
              if (*(_QWORD *)*v95 == 1)
                goto LABEL_545;
              v339 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v339, *v95);
              *v95 = (uint64_t)v339;
              *v339 = 1;
              do
              {
                v340 = __ldaxr(v177);
                v180 = --v340 == 0;
              }
              while (__stlxr(v340, v177));
              goto LABEL_517;
            case 6:
              *(_QWORD *)&v15 = *(_QWORD *)v94;
              v261 = (int)((*(double *)v94 - (double)(uint64_t)floor(*(double *)v94)) * 1000000.0);
              if (v261 >= 999999)
                v261 = 999999;
              if (v261 >= 0xF4240)
                turi::flex_date_time::set_microsecond(int)::{lambda(void)#1}::operator()();
              *v95 = vcvtmd_s64_f64(*(double *)&v15) & 0xFFFFFFFFFFFFFFLL | 0x5900000000000000;
              *((_DWORD *)v95 + 2) = v261;
              goto LABEL_546;
            case 7:
              goto LABEL_545;
            case 8:
              v230 = *v95;
              if (*(_QWORD *)*v95 == 1)
                goto LABEL_545;
              v349 = operator new();
              v350 = *v95;
              *(_QWORD *)v349 = *(_QWORD *)*v95;
              *(_QWORD *)(v349 + 8) = *(_QWORD *)(v350 + 8);
              v351 = *(_QWORD *)(v350 + 16);
              *(_QWORD *)(v349 + 16) = v351;
              if (v351)
              {
                v352 = (unsigned int *)(v351 + 8);
                do
                  v353 = __ldxr(v352);
                while (__stxr(v353 + 1, v352));
              }
              v354 = *(_OWORD *)(v350 + 24);
              v355 = *(_OWORD *)(v350 + 40);
              *(_OWORD *)(v349 + 56) = *(_OWORD *)(v350 + 56);
              *(_OWORD *)(v349 + 40) = v355;
              *(_OWORD *)(v349 + 24) = v354;
              *v95 = v349;
              *(_QWORD *)v349 = 1;
              do
              {
                v356 = __ldaxr((unint64_t *)v230);
                v239 = --v356 == 0;
              }
              while (__stlxr(v356, (unint64_t *)v230));
              goto LABEL_540;
            case 9:
              v172 = (unint64_t *)*v95;
              if (*(_QWORD *)*v95 == 1)
                goto LABEL_545;
              v214 = (_QWORD *)operator new();
              v215 = *v95 + 8;
              *v214 = *(_QWORD *)*v95;
              turi::flexible_type_impl::ndarray<double>::ndarray(v214 + 1, v215);
              *v95 = (uint64_t)v214;
              *v214 = 1;
              do
              {
                v216 = __ldaxr(v172);
                v176 = --v216 == 0;
              }
              while (__stlxr(v216, v172));
              goto LABEL_364;
            default:
              goto LABEL_624;
          }
        case 2:
          switch(*((_BYTE *)v95 + 12))
          {
            case 0:
            case 1:
            case 6:
            case 7:
              goto LABEL_545;
            case 2:
              v109 = *(double *)v94;
              v110 = *v95;
              if (*(_QWORD *)*v95 != 1)
              {
                v111 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v111, *v95);
                *v95 = (uint64_t)v111;
                *v111 = 1;
                do
                {
                  v112 = __ldaxr((unint64_t *)v110);
                  v113 = v112 - 1;
                }
                while (__stlxr(v113, (unint64_t *)v110));
                if (!v113)
                {
                  if (*(char *)(v110 + 31) < 0)
                    operator delete(*(void **)(v110 + 8));
                  MEMORY[0x219A19A08](v110, 0x1012C404EF22A49);
                }
              }
              v102 = *v95;
              if (*(char *)(*(_QWORD *)&v109 + 31) < 0)
              {
                std::string::__init_copy_ctor_external((std::string *)v449, *(const std::string::value_type **)(*(_QWORD *)&v109 + 8), *(_QWORD *)(*(_QWORD *)&v109 + 16));
              }
              else
              {
                v114 = *(_OWORD *)(*(_QWORD *)&v109 + 8);
                *(_QWORD *)&v449[16] = *(_QWORD *)(*(_QWORD *)&v109 + 24);
                *(_OWORD *)v449 = v114;
              }
              goto LABEL_549;
            case 3:
              v146 = (unint64_t *)*v95;
              if (*(_QWORD *)*v95 == 1)
                goto LABEL_545;
              v147 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v147, *v95);
              *v95 = (uint64_t)v147;
              *v147 = 1;
              do
              {
                v148 = __ldaxr(v146);
                v149 = --v148 == 0;
              }
              while (__stlxr(v148, v146));
              goto LABEL_420;
            case 4:
              v177 = (unint64_t *)*v95;
              if (*(_QWORD *)*v95 == 1)
                goto LABEL_545;
              v285 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v285, *v95);
              *v95 = (uint64_t)v285;
              *v285 = 1;
              do
              {
                v286 = __ldaxr(v177);
                v249 = --v286 == 0;
              }
              while (__stlxr(v286, v177));
              goto LABEL_530;
            case 5:
              v177 = (unint64_t *)*v95;
              if (*(_QWORD *)*v95 == 1)
                goto LABEL_545;
              v217 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v217, *v95);
              *v95 = (uint64_t)v217;
              *v217 = 1;
              do
              {
                v218 = __ldaxr(v177);
                v180 = --v218 == 0;
              }
              while (__stlxr(v218, v177));
              goto LABEL_517;
            case 8:
              v230 = *v95;
              if (*(_QWORD *)*v95 == 1)
                goto LABEL_545;
              v287 = operator new();
              v288 = *v95;
              *(_QWORD *)v287 = *(_QWORD *)*v95;
              *(_QWORD *)(v287 + 8) = *(_QWORD *)(v288 + 8);
              v289 = *(_QWORD *)(v288 + 16);
              *(_QWORD *)(v287 + 16) = v289;
              if (v289)
              {
                v290 = (unsigned int *)(v289 + 8);
                do
                  v291 = __ldxr(v290);
                while (__stxr(v291 + 1, v290));
              }
              v292 = *(_OWORD *)(v288 + 24);
              v293 = *(_OWORD *)(v288 + 40);
              *(_OWORD *)(v287 + 56) = *(_OWORD *)(v288 + 56);
              *(_OWORD *)(v287 + 40) = v293;
              *(_OWORD *)(v287 + 24) = v292;
              *v95 = v287;
              *(_QWORD *)v287 = 1;
              do
              {
                v294 = __ldaxr((unint64_t *)v230);
                v239 = --v294 == 0;
              }
              while (__stlxr(v294, (unint64_t *)v230));
              goto LABEL_540;
            case 9:
              v172 = (unint64_t *)*v95;
              if (*(_QWORD *)*v95 == 1)
                goto LABEL_545;
              v173 = (_QWORD *)operator new();
              v174 = *v95 + 8;
              *v173 = *(_QWORD *)*v95;
              turi::flexible_type_impl::ndarray<double>::ndarray(v173 + 1, v174);
              *v95 = (uint64_t)v173;
              *v173 = 1;
              do
              {
                v175 = __ldaxr(v172);
                v176 = --v175 == 0;
              }
              while (__stlxr(v175, v172));
              goto LABEL_364;
            default:
              goto LABEL_624;
          }
        case 3:
          v115 = *(double *)v94;
          v116 = (char **)(*(_QWORD *)&v115 + 8);
          switch(*((_BYTE *)v95 + 12))
          {
            case 0:
            case 1:
            case 6:
            case 7:
              goto LABEL_545;
            case 2:
              v117 = *v95;
              if (*(_QWORD *)*v95 != 1)
              {
                v118 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v118, *v95);
                *v95 = (uint64_t)v118;
                *v118 = 1;
                do
                {
                  v119 = __ldaxr((unint64_t *)v117);
                  v120 = v119 - 1;
                }
                while (__stlxr(v120, (unint64_t *)v117));
                if (!v120)
                {
                  if (*(char *)(v117 + 31) < 0)
                    operator delete(*(void **)(v117 + 8));
                  MEMORY[0x219A19A08](v117, 0x1012C404EF22A49);
                }
              }
              v102 = *v95;
              turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v448, (_QWORD *)(*(_QWORD *)&v115 + 8));
              goto LABEL_549;
            case 3:
              v159 = (unint64_t *)*v95;
              if (*(_QWORD *)*v95 != 1)
              {
                v160 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v160, *v95);
                *v95 = (uint64_t)v160;
                *v160 = 1;
                do
                {
                  v161 = __ldaxr(v159);
                  v162 = v161 - 1;
                }
                while (__stlxr(v162, v159));
                if (!v162)
                {
                  v163 = (void *)v159[1];
                  if (v163)
                  {
                    v159[2] = (unint64_t)v163;
                    operator delete(v163);
                  }
                  MEMORY[0x219A19A08](v159, 0x1080C409938AC02);
                }
              }
              if (*v95 == *(_QWORD *)&v115)
                goto LABEL_546;
              v141 = (char *)(*v95 + 8);
              v164 = (uint64_t *)(*(_QWORD *)&v115 + 16);
              goto LABEL_240;
            case 4:
              v303 = (unint64_t *)*v95;
              if (*(_QWORD *)*v95 != 1)
              {
                v304 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v304, *v95);
                *v95 = (uint64_t)v304;
                *v304 = 1;
                do
                {
                  v305 = __ldaxr(v303);
                  v306 = v305 - 1;
                }
                while (__stlxr(v306, v303));
                if (!v306)
                {
                  *(_QWORD *)v449 = v303 + 1;
                  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v449);
                  MEMORY[0x219A19A08](v303, 0x1020C405E66F15BLL);
                }
              }
              std::vector<turi::flexible_type>::__assign_with_size[abi:ne180100]<std::__wrap_iter<double const*>,std::__wrap_iter<double const*>>((char **)(*v95 + 8), *(_QWORD **)(*(_QWORD *)&v115 + 8), *(_QWORD **)(*(_QWORD *)&v115 + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v115 + 16) - *(_QWORD *)(*(_QWORD *)&v115 + 8)) >> 3);
              goto LABEL_546;
            case 5:
              v177 = (unint64_t *)*v95;
              if (*(_QWORD *)*v95 == 1)
                goto LABEL_545;
              v243 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v243, *v95);
              *v95 = (uint64_t)v243;
              *v243 = 1;
              do
              {
                v244 = __ldaxr(v177);
                v180 = --v244 == 0;
              }
              while (__stlxr(v244, v177));
              goto LABEL_517;
            case 8:
              v230 = *v95;
              if (*(_QWORD *)*v95 == 1)
                goto LABEL_545;
              v319 = operator new();
              v320 = *v95;
              *(_QWORD *)v319 = *(_QWORD *)*v95;
              *(_QWORD *)(v319 + 8) = *(_QWORD *)(v320 + 8);
              v321 = *(_QWORD *)(v320 + 16);
              *(_QWORD *)(v319 + 16) = v321;
              if (v321)
              {
                v322 = (unsigned int *)(v321 + 8);
                do
                  v323 = __ldxr(v322);
                while (__stxr(v323 + 1, v322));
              }
              v324 = *(_OWORD *)(v320 + 24);
              v325 = *(_OWORD *)(v320 + 40);
              *(_OWORD *)(v319 + 56) = *(_OWORD *)(v320 + 56);
              *(_OWORD *)(v319 + 40) = v325;
              *(_OWORD *)(v319 + 24) = v324;
              *v95 = v319;
              *(_QWORD *)v319 = 1;
              do
              {
                v326 = __ldaxr((unint64_t *)v230);
                v239 = --v326 == 0;
              }
              while (__stlxr(v326, (unint64_t *)v230));
              goto LABEL_540;
            case 9:
              v192 = (unint64_t *)*v95;
              if (*(_QWORD *)*v95 != 1)
              {
                v193 = (_QWORD *)operator new();
                v194 = *v95 + 8;
                *v193 = *(_QWORD *)*v95;
                turi::flexible_type_impl::ndarray<double>::ndarray(v193 + 1, v194);
                *v95 = (uint64_t)v193;
                *v193 = 1;
                do
                {
                  v195 = __ldaxr(v192);
                  v196 = v195 - 1;
                }
                while (__stlxr(v196, v192));
                if (!v196)
                {
                  v197 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v192);
                  MEMORY[0x219A19A08](v197, 0x1030C407B73B9F7);
                }
              }
              v198 = (_QWORD *)*v95;
              memset(&v448, 0, sizeof(v448));
              memset(&__p, 0, sizeof(__p));
              std::allocate_shared[abi:ne180100]<std::vector<double>,std::allocator<std::vector<double>>,std::vector<double> const&,void>((uint64_t)v116, &v446);
              turi::flexible_type_impl::ndarray<double>::ndarray(v449, &v446, (uint64_t)&v448, (uint64_t)&__p, 0);
              std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&v446);
              if (__p.__r_.__value_.__r.__words[0])
              {
                __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
                operator delete(__p.__r_.__value_.__l.__data_);
              }
              if (v448.__r_.__value_.__r.__words[0])
              {
                v448.__r_.__value_.__l.__size_ = v448.__r_.__value_.__r.__words[0];
                operator delete(v448.__r_.__value_.__l.__data_);
              }
              goto LABEL_398;
            default:
              goto LABEL_624;
          }
        case 4:
          v97 = *(double *)v94;
          switch(*((_BYTE *)v95 + 12))
          {
            case 0:
            case 1:
            case 6:
            case 7:
              goto LABEL_545;
            case 2:
              v98 = *v95;
              if (*(_QWORD *)*v95 != 1)
              {
                v99 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v99, *v95);
                *v95 = (uint64_t)v99;
                *v99 = 1;
                do
                {
                  v100 = __ldaxr((unint64_t *)v98);
                  v101 = v100 - 1;
                }
                while (__stlxr(v101, (unint64_t *)v98));
                if (!v101)
                {
                  if (*(char *)(v98 + 31) < 0)
                    operator delete(*(void **)(v98 + 8));
                  MEMORY[0x219A19A08](v98, 0x1012C404EF22A49);
                }
              }
              v102 = *v95;
              turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v448, (uint64_t *)(*(_QWORD *)&v97 + 8));
              goto LABEL_549;
            case 3:
              v131 = (unint64_t *)*v95;
              if (*(_QWORD *)*v95 != 1)
              {
                v132 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v132, *v95);
                *v95 = (uint64_t)v132;
                *v132 = 1;
                do
                {
                  v133 = __ldaxr(v131);
                  v134 = v133 - 1;
                }
                while (__stlxr(v134, v131));
                if (!v134)
                {
                  v135 = (void *)v131[1];
                  if (v135)
                  {
                    v131[2] = (unint64_t)v135;
                    operator delete(v135);
                  }
                  MEMORY[0x219A19A08](v131, 0x1080C409938AC02);
                }
              }
              turi::flexible_type_impl::soft_assignment_visitor::operator()((uint64_t)v449, (_QWORD *)(*v95 + 8), (_QWORD *)(*(_QWORD *)&v97 + 8));
              goto LABEL_546;
            case 4:
              v224 = (unint64_t *)*v95;
              if (*(_QWORD *)*v95 != 1)
              {
                v225 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v225, *v95);
                *v95 = (uint64_t)v225;
                *v225 = 1;
                do
                {
                  v226 = __ldaxr(v224);
                  v227 = v226 - 1;
                }
                while (__stlxr(v227, v224));
                if (!v227)
                {
                  *(_QWORD *)v449 = v224 + 1;
                  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v449);
                  MEMORY[0x219A19A08](v224, 0x1020C405E66F15BLL);
                }
              }
              if (*v95 != *(_QWORD *)&v97)
                std::vector<turi::flexible_type>::__assign_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(*v95 + 8, *(uint64_t **)(*(_QWORD *)&v97 + 8), *(uint64_t **)(*(_QWORD *)&v97 + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v97 + 16) - *(_QWORD *)(*(_QWORD *)&v97 + 8)) >> 4);
              goto LABEL_546;
            case 5:
              v177 = (unint64_t *)*v95;
              if (*(_QWORD *)*v95 == 1)
                goto LABEL_545;
              v178 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v178, *v95);
              *v95 = (uint64_t)v178;
              *v178 = 1;
              do
              {
                v179 = __ldaxr(v177);
                v180 = --v179 == 0;
              }
              while (__stlxr(v179, v177));
              goto LABEL_517;
            case 8:
              v230 = *v95;
              if (*(_QWORD *)*v95 == 1)
                goto LABEL_545;
              v231 = operator new();
              v232 = *v95;
              *(_QWORD *)v231 = *(_QWORD *)*v95;
              *(_QWORD *)(v231 + 8) = *(_QWORD *)(v232 + 8);
              v233 = *(_QWORD *)(v232 + 16);
              *(_QWORD *)(v231 + 16) = v233;
              if (v233)
              {
                v234 = (unsigned int *)(v233 + 8);
                do
                  v235 = __ldxr(v234);
                while (__stxr(v235 + 1, v234));
              }
              v236 = *(_OWORD *)(v232 + 24);
              v237 = *(_OWORD *)(v232 + 40);
              *(_OWORD *)(v231 + 56) = *(_OWORD *)(v232 + 56);
              *(_OWORD *)(v231 + 40) = v237;
              *(_OWORD *)(v231 + 24) = v236;
              *v95 = v231;
              *(_QWORD *)v231 = 1;
              do
              {
                v238 = __ldaxr((unint64_t *)v230);
                v239 = --v238 == 0;
              }
              while (__stlxr(v238, (unint64_t *)v230));
              goto LABEL_540;
            case 9:
              v150 = (unint64_t *)*v95;
              if (*(_QWORD *)*v95 != 1)
              {
                v151 = (_QWORD *)operator new();
                v152 = *v95 + 8;
                *v151 = *(_QWORD *)*v95;
                turi::flexible_type_impl::ndarray<double>::ndarray(v151 + 1, v152);
                *v95 = (uint64_t)v151;
                *v151 = 1;
                do
                {
                  v153 = __ldaxr(v150);
                  v154 = v153 - 1;
                }
                while (__stlxr(v154, v150));
                if (!v154)
                {
                  v155 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v150);
                  MEMORY[0x219A19A08](v155, 0x1030C407B73B9F7);
                }
              }
              v156 = (_QWORD *)*v95;
              memset(&v448, 0, sizeof(v448));
              std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&v448, *(uint64_t **)(*(_QWORD *)&v97 + 8), *(uint64_t **)(*(_QWORD *)&v97 + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v97 + 16) - *(_QWORD *)(*(_QWORD *)&v97 + 8)) >> 4);
              turi::flexible_type_impl::get_ndvec_visitor::operator()((uint64_t *)&v448, v449);
              std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)(v156 + 1), (__int128 *)v449);
              v157 = (void *)v156[3];
              if (v157)
              {
                v156[4] = v157;
                operator delete(v157);
                v156[3] = 0;
                v156[4] = 0;
                v156[5] = 0;
              }
              v158 = (void *)v156[6];
              *(_OWORD *)(v156 + 3) = *(_OWORD *)&v449[16];
              v156[5] = *(_QWORD *)v450;
              *(_OWORD *)&v449[16] = 0uLL;
              *(_QWORD *)v450 = 0;
              if (v158)
              {
                v156[7] = v158;
                operator delete(v158);
                v156[6] = 0;
                v156[7] = 0;
                v156[8] = 0;
              }
              *((_OWORD *)v156 + 3) = *(_OWORD *)&v450[8];
              v156[8] = *(_QWORD *)&v450[24];
              memset(&v450[8], 0, 24);
              v156[9] = v451;
              turi::flexible_type_impl::ndarray<double>::~ndarray(v449);
              __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v448;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
              goto LABEL_546;
            default:
              goto LABEL_624;
          }
        case 5:
          v121 = *(double *)v94;
          switch(*((_BYTE *)v95 + 12))
          {
            case 0:
            case 1:
            case 6:
            case 7:
              goto LABEL_545;
            case 2:
              v122 = *v95;
              if (*(_QWORD *)*v95 != 1)
              {
                v123 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v123, *v95);
                *v95 = (uint64_t)v123;
                *v123 = 1;
                do
                {
                  v124 = __ldaxr((unint64_t *)v122);
                  v125 = v124 - 1;
                }
                while (__stlxr(v125, (unint64_t *)v122));
                if (!v125)
                {
                  if (*(char *)(v122 + 31) < 0)
                    operator delete(*(void **)(v122 + 8));
                  MEMORY[0x219A19A08](v122, 0x1012C404EF22A49);
                }
              }
              v102 = *v95;
              turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v448, (_QWORD *)(*(_QWORD *)&v121 + 8));
              goto LABEL_549;
            case 3:
              v146 = (unint64_t *)*v95;
              if (*(_QWORD *)*v95 == 1)
                goto LABEL_545;
              v186 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v186, *v95);
              *v95 = (uint64_t)v186;
              *v186 = 1;
              do
              {
                v187 = __ldaxr(v146);
                v149 = --v187 == 0;
              }
              while (__stlxr(v187, v146));
              goto LABEL_420;
            case 4:
              v177 = (unint64_t *)*v95;
              if (*(_QWORD *)*v95 == 1)
                goto LABEL_545;
              v357 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v357, *v95);
              *v95 = (uint64_t)v357;
              *v357 = 1;
              do
              {
                v358 = __ldaxr(v177);
                v249 = --v358 == 0;
              }
              while (__stlxr(v358, v177));
              goto LABEL_530;
            case 5:
              v299 = (unint64_t *)*v95;
              if (*(_QWORD *)*v95 != 1)
              {
                v300 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v300, *v95);
                *v95 = (uint64_t)v300;
                *v300 = 1;
                do
                {
                  v301 = __ldaxr(v299);
                  v302 = v301 - 1;
                }
                while (__stlxr(v302, v299));
                if (!v302)
                {
                  *(_QWORD *)v449 = v299 + 1;
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v449);
                  MEMORY[0x219A19A08](v299, 0x1020C405E66F15BLL);
                }
              }
              if (*v95 != *(_QWORD *)&v121)
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__assign_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>((char **)(*v95 + 8), *(uint64_t **)(*(_QWORD *)&v121 + 8), *(uint64_t **)(*(_QWORD *)&v121 + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v121 + 16) - *(_QWORD *)(*(_QWORD *)&v121 + 8)) >> 5);
              goto LABEL_546;
            case 8:
              v230 = *v95;
              if (*(_QWORD *)*v95 == 1)
                goto LABEL_545;
              v361 = operator new();
              v362 = *v95;
              *(_QWORD *)v361 = *(_QWORD *)*v95;
              *(_QWORD *)(v361 + 8) = *(_QWORD *)(v362 + 8);
              v363 = *(_QWORD *)(v362 + 16);
              *(_QWORD *)(v361 + 16) = v363;
              if (v363)
              {
                v364 = (unsigned int *)(v363 + 8);
                do
                  v365 = __ldxr(v364);
                while (__stxr(v365 + 1, v364));
              }
              v366 = *(_OWORD *)(v362 + 24);
              v367 = *(_OWORD *)(v362 + 40);
              *(_OWORD *)(v361 + 56) = *(_OWORD *)(v362 + 56);
              *(_OWORD *)(v361 + 40) = v367;
              *(_OWORD *)(v361 + 24) = v366;
              *v95 = v361;
              *(_QWORD *)v361 = 1;
              do
              {
                v368 = __ldaxr((unint64_t *)v230);
                v239 = --v368 == 0;
              }
              while (__stlxr(v368, (unint64_t *)v230));
              goto LABEL_540;
            case 9:
              v172 = (unint64_t *)*v95;
              if (*(_QWORD *)*v95 == 1)
                goto LABEL_545;
              v240 = (_QWORD *)operator new();
              v241 = *v95 + 8;
              *v240 = *(_QWORD *)*v95;
              turi::flexible_type_impl::ndarray<double>::ndarray(v240 + 1, v241);
              *v95 = (uint64_t)v240;
              *v240 = 1;
              do
              {
                v242 = __ldaxr(v172);
                v176 = --v242 == 0;
              }
              while (__stlxr(v242, v172));
              goto LABEL_364;
            default:
              goto LABEL_624;
          }
        case 6:
          switch(*((_BYTE *)v95 + 12))
          {
            case 0:
              *(_QWORD *)&v96 = (uint64_t)(*(_QWORD *)v94 << 8) >> 8;
              goto LABEL_185;
            case 1:
              *(double *)&v15 = (double)*(int *)(v94 + 8) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)v94 << 8) >> 8);
LABEL_409:
              *v95 = v15;
              goto LABEL_546;
            case 2:
              v307 = *v95;
              if (*(_QWORD *)*v95 != 1)
              {
                v308 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v308, *v95);
                *v95 = (uint64_t)v308;
                *v308 = 1;
                do
                {
                  v309 = __ldaxr((unint64_t *)v307);
                  v310 = v309 - 1;
                }
                while (__stlxr(v310, (unint64_t *)v307));
                if (!v310)
                {
                  if (*(char *)(v307 + 31) < 0)
                    operator delete(*(void **)(v307 + 8));
                  MEMORY[0x219A19A08](v307, 0x1012C404EF22A49);
                }
              }
              v102 = *v95;
              v311 = *(_DWORD *)(v94 + 8);
              v448.__r_.__value_.__r.__words[0] = *(_QWORD *)v94;
              LODWORD(v448.__r_.__value_.__r.__words[1]) = v311;
              turi::flexible_type_impl::get_string_visitor::operator()((turi::flexible_type_impl *)&v448, (std::string *)v449);
              goto LABEL_549;
            case 3:
              v146 = (unint64_t *)*v95;
              if (*(_QWORD *)*v95 == 1)
                goto LABEL_545;
              v228 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v228, *v95);
              *v95 = (uint64_t)v228;
              *v228 = 1;
              do
              {
                v229 = __ldaxr(v146);
                v149 = --v229 == 0;
              }
              while (__stlxr(v229, v146));
              goto LABEL_420;
            case 4:
              v177 = (unint64_t *)*v95;
              if (*(_QWORD *)*v95 == 1)
                goto LABEL_545;
              v359 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v359, *v95);
              *v95 = (uint64_t)v359;
              *v359 = 1;
              do
              {
                v360 = __ldaxr(v177);
                v249 = --v360 == 0;
              }
              while (__stlxr(v360, v177));
              goto LABEL_530;
            case 5:
              v177 = (unint64_t *)*v95;
              if (*(_QWORD *)*v95 == 1)
                goto LABEL_545;
              v369 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v369, *v95);
              *v95 = (uint64_t)v369;
              *v369 = 1;
              do
              {
                v370 = __ldaxr(v177);
                v180 = --v370 == 0;
              }
              while (__stlxr(v370, v177));
              goto LABEL_517;
            case 6:
              v318 = *(_DWORD *)(v94 + 8);
              *v95 = *(_QWORD *)v94;
              *((_DWORD *)v95 + 2) = v318;
              goto LABEL_546;
            case 7:
              goto LABEL_545;
            case 8:
              v230 = *v95;
              if (*(_QWORD *)*v95 == 1)
                goto LABEL_545;
              v371 = operator new();
              v372 = *v95;
              *(_QWORD *)v371 = *(_QWORD *)*v95;
              *(_QWORD *)(v371 + 8) = *(_QWORD *)(v372 + 8);
              v373 = *(_QWORD *)(v372 + 16);
              *(_QWORD *)(v371 + 16) = v373;
              if (v373)
              {
                v374 = (unsigned int *)(v373 + 8);
                do
                  v375 = __ldxr(v374);
                while (__stxr(v375 + 1, v374));
              }
              v376 = *(_OWORD *)(v372 + 24);
              v377 = *(_OWORD *)(v372 + 40);
              *(_OWORD *)(v371 + 56) = *(_OWORD *)(v372 + 56);
              *(_OWORD *)(v371 + 40) = v377;
              *(_OWORD *)(v371 + 24) = v376;
              *v95 = v371;
              *(_QWORD *)v371 = 1;
              do
              {
                v378 = __ldaxr((unint64_t *)v230);
                v239 = --v378 == 0;
              }
              while (__stlxr(v378, (unint64_t *)v230));
              goto LABEL_540;
            case 9:
              v172 = (unint64_t *)*v95;
              if (*(_QWORD *)*v95 == 1)
                goto LABEL_545;
              v250 = (_QWORD *)operator new();
              v251 = *v95 + 8;
              *v250 = *(_QWORD *)*v95;
              turi::flexible_type_impl::ndarray<double>::ndarray(v250 + 1, v251);
              *v95 = (uint64_t)v250;
              *v250 = 1;
              do
              {
                v252 = __ldaxr(v172);
                v176 = --v252 == 0;
              }
              while (__stlxr(v252, v172));
              goto LABEL_364;
            default:
              goto LABEL_624;
          }
        case 7:
          switch(*((_BYTE *)v95 + 12))
          {
            case 0:
            case 6:
              goto LABEL_545;
            case 1:
              v96 = NAN;
LABEL_185:
              *(double *)v95 = v96;
              goto LABEL_546;
            case 2:
              v181 = *v95;
              if (*(_QWORD *)*v95 != 1)
              {
                v182 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v182, *v95);
                *v95 = (uint64_t)v182;
                *v182 = 1;
                do
                {
                  v183 = __ldaxr((unint64_t *)v181);
                  v184 = v183 - 1;
                }
                while (__stlxr(v184, (unint64_t *)v181));
                if (!v184)
                {
                  if (*(char *)(v181 + 31) < 0)
                    operator delete(*(void **)(v181 + 8));
                  MEMORY[0x219A19A08](v181, 0x1012C404EF22A49);
                }
              }
              v185 = *v95 + 8;
              if (*(char *)(*v95 + 31) < 0)
                operator delete(*(void **)v185);
              *(_QWORD *)v185 = 0;
              *(_QWORD *)(v185 + 8) = 0;
              *(_QWORD *)(v185 + 16) = 0;
              goto LABEL_546;
            case 3:
              v146 = (unint64_t *)*v95;
              if (*(_QWORD *)*v95 == 1)
                goto LABEL_545;
              v295 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v295, *v95);
              *v95 = (uint64_t)v295;
              *v295 = 1;
              do
              {
                v296 = __ldaxr(v146);
                v149 = --v296 == 0;
              }
              while (__stlxr(v296, v146));
LABEL_420:
              if (!v149)
                goto LABEL_545;
              v297 = (void *)v146[1];
              if (v297)
              {
                v146[2] = (unint64_t)v297;
                operator delete(v297);
              }
              v253 = v146;
              v298 = 0x1080C409938AC02;
              goto LABEL_544;
            case 4:
              v177 = (unint64_t *)*v95;
              if (*(_QWORD *)*v95 == 1)
                goto LABEL_545;
              v316 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v316, *v95);
              *v95 = (uint64_t)v316;
              *v316 = 1;
              do
              {
                v317 = __ldaxr(v177);
                v249 = --v317 == 0;
              }
              while (__stlxr(v317, v177));
              goto LABEL_530;
            case 5:
              v177 = (unint64_t *)*v95;
              if (*(_QWORD *)*v95 == 1)
                goto LABEL_545;
              v245 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v245, *v95);
              *v95 = (uint64_t)v245;
              *v245 = 1;
              do
              {
                v246 = __ldaxr(v177);
                v180 = --v246 == 0;
              }
              while (__stlxr(v246, v177));
              goto LABEL_517;
            case 7:
              goto LABEL_546;
            case 8:
              v230 = *v95;
              if (*(_QWORD *)*v95 == 1)
                goto LABEL_545;
              v327 = operator new();
              v328 = *v95;
              *(_QWORD *)v327 = *(_QWORD *)*v95;
              *(_QWORD *)(v327 + 8) = *(_QWORD *)(v328 + 8);
              v329 = *(_QWORD *)(v328 + 16);
              *(_QWORD *)(v327 + 16) = v329;
              if (v329)
              {
                v330 = (unsigned int *)(v329 + 8);
                do
                  v331 = __ldxr(v330);
                while (__stxr(v331 + 1, v330));
              }
              v332 = *(_OWORD *)(v328 + 24);
              v333 = *(_OWORD *)(v328 + 40);
              *(_OWORD *)(v327 + 56) = *(_OWORD *)(v328 + 56);
              *(_OWORD *)(v327 + 40) = v333;
              *(_OWORD *)(v327 + 24) = v332;
              *v95 = v327;
              *(_QWORD *)v327 = 1;
              do
              {
                v334 = __ldaxr((unint64_t *)v230);
                v239 = --v334 == 0;
              }
              while (__stlxr(v334, (unint64_t *)v230));
              goto LABEL_540;
            case 9:
              v172 = (unint64_t *)*v95;
              if (*(_QWORD *)*v95 == 1)
                goto LABEL_545;
              v208 = (_QWORD *)operator new();
              v209 = *v95 + 8;
              *v208 = *(_QWORD *)*v95;
              turi::flexible_type_impl::ndarray<double>::ndarray(v208 + 1, v209);
              *v95 = (uint64_t)v208;
              *v208 = 1;
              do
              {
                v210 = __ldaxr(v172);
                v176 = --v210 == 0;
              }
              while (__stlxr(v210, v172));
LABEL_364:
              if (!v176)
                goto LABEL_545;
              v253 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v172);
              v254 = 2071181815;
              goto LABEL_543;
            default:
              goto LABEL_624;
          }
        case 8:
          v126 = (uint64_t *)(*(_QWORD *)v94 + 8);
          switch(*((_BYTE *)v95 + 12))
          {
            case 0:
            case 1:
            case 6:
            case 7:
              goto LABEL_545;
            case 2:
              v127 = *v95;
              if (*(_QWORD *)*v95 != 1)
              {
                v128 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v128, *v95);
                *v95 = (uint64_t)v128;
                *v128 = 1;
                do
                {
                  v129 = __ldaxr((unint64_t *)v127);
                  v130 = v129 - 1;
                }
                while (__stlxr(v130, (unint64_t *)v127));
                if (!v130)
                {
                  if (*(char *)(v127 + 31) < 0)
                    operator delete(*(void **)(v127 + 8));
                  MEMORY[0x219A19A08](v127, 0x1012C404EF22A49);
                }
              }
              v102 = *v95;
              turi::flexible_type_impl::get_string_visitor::operator()();
              goto LABEL_549;
            case 3:
              v199 = (unint64_t *)*v95;
              if (*(_QWORD *)*v95 != 1)
              {
                v200 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v200, *v95);
                *v95 = (uint64_t)v200;
                *v200 = 1;
                do
                {
                  v201 = __ldaxr(v199);
                  v202 = v201 - 1;
                }
                while (__stlxr(v202, v199));
                if (!v202)
                {
                  v203 = (void *)v199[1];
                  if (v203)
                  {
                    v199[2] = (unint64_t)v203;
                    operator delete(v203);
                  }
                  *(double *)&v15 = MEMORY[0x219A19A08](v199, 0x1080C409938AC02);
                }
              }
              v204 = (_QWORD *)*v95;
              turi::flexible_type_impl::get_vec_visitor::operator()(v126, (double **)v449, v15);
              v205 = (void *)v204[1];
              if (v205)
              {
                v204[2] = v205;
                operator delete(v205);
                v204[1] = 0;
                v204[2] = 0;
                v204[3] = 0;
              }
              *(_QWORD *)&v15 = *(_QWORD *)v449;
              *(_OWORD *)(v204 + 1) = *(_OWORD *)v449;
              v204[3] = *(_QWORD *)&v449[16];
              goto LABEL_546;
            case 4:
              v177 = (unint64_t *)*v95;
              if (*(_QWORD *)*v95 == 1)
                goto LABEL_545;
              v379 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v379, *v95);
              *v95 = (uint64_t)v379;
              *v379 = 1;
              do
              {
                v380 = __ldaxr(v177);
                v249 = --v380 == 0;
              }
              while (__stlxr(v380, v177));
              goto LABEL_530;
            case 5:
              v177 = (unint64_t *)*v95;
              if (*(_QWORD *)*v95 == 1)
                goto LABEL_545;
              v335 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v335, *v95);
              *v95 = (uint64_t)v335;
              *v335 = 1;
              do
              {
                v336 = __ldaxr(v177);
                v180 = --v336 == 0;
              }
              while (__stlxr(v336, v177));
              goto LABEL_517;
            case 8:
              v230 = *v95;
              if (*(_QWORD *)*v95 == 1)
                goto LABEL_545;
              v381 = operator new();
              v382 = *v95;
              *(_QWORD *)v381 = *(_QWORD *)*v95;
              *(_QWORD *)(v381 + 8) = *(_QWORD *)(v382 + 8);
              v383 = *(_QWORD *)(v382 + 16);
              *(_QWORD *)(v381 + 16) = v383;
              if (v383)
              {
                v384 = (unsigned int *)(v383 + 8);
                do
                  v385 = __ldxr(v384);
                while (__stxr(v385 + 1, v384));
              }
              v386 = *(_OWORD *)(v382 + 24);
              v387 = *(_OWORD *)(v382 + 40);
              *(_OWORD *)(v381 + 56) = *(_OWORD *)(v382 + 56);
              *(_OWORD *)(v381 + 40) = v387;
              *(_OWORD *)(v381 + 24) = v386;
              *v95 = v381;
              *(_QWORD *)v381 = 1;
              do
              {
                v388 = __ldaxr((unint64_t *)v230);
                v239 = --v388 == 0;
              }
              while (__stlxr(v388, (unint64_t *)v230));
LABEL_540:
              if (!v239)
                goto LABEL_545;
              boost::detail::shared_count::~shared_count((unsigned int **)(v230 + 16));
              v253 = (_QWORD *)v230;
              v254 = -235920773;
LABEL_543:
              v298 = v254 | 0x1030C4000000000;
              goto LABEL_544;
            case 9:
              v277 = (unint64_t *)*v95;
              if (*(_QWORD *)*v95 != 1)
              {
                v278 = (_QWORD *)operator new();
                v279 = *v95 + 8;
                *v278 = *(_QWORD *)*v95;
                turi::flexible_type_impl::ndarray<double>::ndarray(v278 + 1, v279);
                *v95 = (uint64_t)v278;
                *v278 = 1;
                do
                {
                  v280 = __ldaxr(v277);
                  v281 = v280 - 1;
                }
                while (__stlxr(v281, v277));
                if (!v281)
                {
                  v282 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v277);
                  *(double *)&v15 = MEMORY[0x219A19A08](v282, 0x1030C407B73B9F7);
                }
              }
              v198 = (_QWORD *)*v95;
              turi::flexible_type_impl::get_ndvec_visitor::operator()(v126, v449, v15);
LABEL_398:
              std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)(v198 + 1), (__int128 *)v449);
              v283 = (void *)v198[3];
              if (v283)
              {
                v198[4] = v283;
                operator delete(v283);
                v198[3] = 0;
                v198[4] = 0;
                v198[5] = 0;
              }
              v284 = (void *)v198[6];
              *(_OWORD *)(v198 + 3) = *(_OWORD *)&v449[16];
              v198[5] = *(_QWORD *)v450;
              *(_OWORD *)&v449[16] = 0uLL;
              *(_QWORD *)v450 = 0;
              if (v284)
              {
                v198[7] = v284;
                operator delete(v284);
                v198[6] = 0;
                v198[7] = 0;
                v198[8] = 0;
              }
              *((_OWORD *)v198 + 3) = *(_OWORD *)&v450[8];
              v198[8] = *(_QWORD *)&v450[24];
              memset(&v450[8], 0, 24);
              v198[9] = v451;
              goto LABEL_606;
            default:
              goto LABEL_624;
          }
        case 9:
          v103 = *(double *)v94;
          v104 = *(_QWORD *)&v103 + 8;
          switch(*((_BYTE *)v95 + 12))
          {
            case 0:
            case 1:
            case 6:
            case 7:
              goto LABEL_545;
            case 2:
              v105 = *v95;
              if (*(_QWORD *)*v95 != 1)
              {
                v106 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v106, *v95);
                *v95 = (uint64_t)v106;
                *v106 = 1;
                do
                {
                  v107 = __ldaxr((unint64_t *)v105);
                  v108 = v107 - 1;
                }
                while (__stlxr(v108, (unint64_t *)v105));
                if (!v108)
                {
                  if (*(char *)(v105 + 31) < 0)
                    operator delete(*(void **)(v105 + 8));
                  MEMORY[0x219A19A08](v105, 0x1012C404EF22A49);
                }
              }
              v102 = *v95;
              turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v448, (_QWORD *)(*(_QWORD *)&v103 + 8));
LABEL_549:
              v259 = v102 + 8;
              if (*(char *)(v102 + 31) < 0)
                operator delete(*(void **)v259);
              v15 = *(_OWORD *)v449;
              v260 = *(_QWORD *)&v449[16];
LABEL_552:
              *(_QWORD *)(v259 + 16) = v260;
              *(_OWORD *)v259 = v15;
              goto LABEL_546;
            case 3:
              v136 = (unint64_t *)*v95;
              if (*(_QWORD *)*v95 != 1)
              {
                v137 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v137, *v95);
                *v95 = (uint64_t)v137;
                *v137 = 1;
                do
                {
                  v138 = __ldaxr(v136);
                  v139 = v138 - 1;
                }
                while (__stlxr(v139, v136));
                if (!v139)
                {
                  v140 = (void *)v136[1];
                  if (v140)
                  {
                    v136[2] = (unint64_t)v140;
                    operator delete(v140);
                  }
                  MEMORY[0x219A19A08](v136, 0x1080C409938AC02);
                }
              }
              v141 = (char *)(*v95 + 8);
              if (*(_QWORD *)(*(_QWORD *)&v103 + 72))
                goto LABEL_559;
              v143 = *(uint64_t **)(*(_QWORD *)&v103 + 24);
              v142 = *(uint64_t **)(*(_QWORD *)&v103 + 32);
              v144 = *(_QWORD **)(*(_QWORD *)&v103 + 8);
              if (v142 == v143 || v144 == 0)
              {
                v389 = 0;
              }
              else
              {
                v389 = 1;
                do
                {
                  v390 = *v143++;
                  v389 *= v390;
                }
                while (v143 != v142);
              }
              if (v389 == (uint64_t)(v144[1] - *v144) >> 3
                && turi::flexible_type_impl::ndarray<double>::last_index((_QWORD *)(*(_QWORD *)&v103 + 8)) == (uint64_t)(*(_QWORD *)(*(_QWORD *)v104 + 8) - **(_QWORD **)v104) >> 3)
              {
                if (!turi::flexible_type_impl::ndarray<double>::is_full((_QWORD *)(*(_QWORD *)&v103 + 8)))
                  turi::flexible_type_impl::ndarray<double>::elements(void)const::{lambda(void)#1}::operator()();
                v116 = *(char ***)v104;
                if (v141 != (char *)v116)
                {
                  v164 = (uint64_t *)(v116 + 1);
LABEL_240:
                  std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(v141, *v116, *v164, (*v164 - (uint64_t)*v116) >> 3);
                }
              }
              else
              {
LABEL_559:
                if (!turi::flexible_type_impl::ndarray<double>::is_valid((_QWORD *)(*(_QWORD *)&v103 + 8)))
                  turi::flexible_type_impl::ndarray<double>::compact(void)const::{lambda(void)#1}::operator()();
                if (turi::flexible_type_impl::ndarray<double>::is_full((_QWORD *)(*(_QWORD *)&v103 + 8)))
                {
                  turi::flexible_type_impl::ndarray<double>::ndarray(v449, *(_QWORD *)&v103 + 8);
                }
                else
                {
                  memset(&v448, 0, sizeof(v448));
                  memset(&__p, 0, sizeof(__p));
                  memset(&v446, 0, sizeof(v446));
                  turi::flexible_type_impl::ndarray<double>::ndarray(v449, (uint64_t)&v448, (uint64_t)&__p, (uint64_t)&v446, 0);
                  if (v446.__r_.__value_.__r.__words[0])
                  {
                    v446.__r_.__value_.__l.__size_ = v446.__r_.__value_.__r.__words[0];
                    operator delete(v446.__r_.__value_.__l.__data_);
                  }
                  if (__p.__r_.__value_.__r.__words[0])
                  {
                    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
                    operator delete(__p.__r_.__value_.__l.__data_);
                  }
                  if (v448.__r_.__value_.__r.__words[0])
                  {
                    v448.__r_.__value_.__l.__size_ = v448.__r_.__value_.__r.__words[0];
                    operator delete(v448.__r_.__value_.__l.__data_);
                  }
                  v451 = 0;
                  if (&v449[16] != (_BYTE *)(*(_QWORD *)&v103 + 24))
                    std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(&v449[16], *(char **)(*(_QWORD *)&v103 + 24), *(_QWORD *)(*(_QWORD *)&v103 + 32), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v103 + 32) - *(_QWORD *)(*(_QWORD *)&v103 + 24)) >> 3);
                  v392 = *(uint64_t **)(*(_QWORD *)&v103 + 24);
                  v391 = *(uint64_t **)(*(_QWORD *)&v103 + 32);
                  if (v391 == v392 || !*(_QWORD *)v104)
                  {
                    v393 = 0;
                  }
                  else
                  {
                    v393 = 1;
                    do
                    {
                      v394 = *v392++;
                      v393 *= v394;
                    }
                    while (v392 != v391);
                  }
                  std::vector<double>::resize(*(uint64_t *)v449, v393);
                  std::vector<unsigned long>::resize((uint64_t)&v450[8], (uint64_t)(*(_QWORD *)(*(_QWORD *)&v103 + 32) - *(_QWORD *)(*(_QWORD *)&v103 + 24)) >> 3);
                  if (*(_QWORD *)&v449[24] != *(_QWORD *)&v449[16]
                    && *(_QWORD *)(*(_QWORD *)v449 + 8) != **(_QWORD **)v449)
                  {
                    std::vector<std::pair<unsigned long,unsigned long>>::vector(&v448, (uint64_t)(*(_QWORD *)(*(_QWORD *)&v103 + 56) - *(_QWORD *)(*(_QWORD *)&v103 + 48)) >> 3);
                    v395 = *(_QWORD *)(*(_QWORD *)&v103 + 48);
                    v396 = *(_QWORD *)(*(_QWORD *)&v103 + 56);
                    v397 = (unint64_t *)v448.__r_.__value_.__r.__words[0];
                    v398 = v396 - v395;
                    if (v396 != v395)
                    {
                      v399 = 0;
                      v400 = v398 >> 3;
                      if (v400 <= 1)
                        v400 = 1;
                      v401 = (_QWORD *)(v448.__r_.__value_.__r.__words[0] + 8);
                      do
                      {
                        *(v401 - 1) = *(_QWORD *)(v395 + 8 * v399);
                        *v401 = v399++;
                        v401 += 2;
                      }
                      while (v400 != v399);
                    }
                    std::sort[abi:ne180100]<std::reverse_iterator<std::__wrap_iter<std::pair<unsigned long,unsigned long> *>>>(v448.__r_.__value_.__l.__size_, (unint64_t *)v448.__r_.__value_.__l.__size_, (uint64_t)v397, v397);
                    v402 = v448.__r_.__value_.__r.__words[0];
                    v403 = *(_QWORD *)&v450[8];
                    *(_QWORD *)(*(_QWORD *)&v450[8] + 8 * *(_QWORD *)(v448.__r_.__value_.__r.__words[0] + 8)) = 1;
                    v404 = *(_QWORD *)(*(_QWORD *)&v103 + 56) - *(_QWORD *)(*(_QWORD *)&v103 + 48);
                    if ((unint64_t)v404 >= 9)
                    {
                      v405 = v404 >> 3;
                      v406 = *(_QWORD *)&v449[16];
                      if (v405 <= 2)
                        v405 = 2;
                      v407 = (uint64_t *)(v402 + 24);
                      v408 = v405 - 1;
                      do
                      {
                        v409 = *(_QWORD *)(v406 + 8 * *(v407 - 2)) * *(_QWORD *)(v403 + 8 * *(v407 - 2));
                        v410 = *v407;
                        v407 += 2;
                        *(_QWORD *)(v403 + 8 * v410) = v409;
                        --v408;
                      }
                      while (v408);
                    }
                    v411 = (uint64_t)(*(_QWORD *)(*(_QWORD *)&v103 + 32) - *(_QWORD *)(*(_QWORD *)&v103 + 24)) >> 3;
                    v446.__r_.__value_.__r.__words[0] = 0;
                    std::vector<unsigned long>::vector(&__p, v411, &v446);
                    do
                    {
                      v412 = (uint64_t *)__p.__r_.__value_.__r.__words[0];
                      if (__p.__r_.__value_.__l.__size_ == __p.__r_.__value_.__r.__words[0])
                      {
                        v421 = 0;
                        v422 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)&v103 + 8)
                                         + 8 * *(_QWORD *)(*(_QWORD *)&v103 + 72));
                        v423 = *(_QWORD **)v449;
                      }
                      else
                      {
                        v413 = 0;
                        v414 = (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 3;
                        v415 = *(uint64_t **)(*(_QWORD *)&v103 + 48);
                        if (v414 <= 1)
                          v414 = 1;
                        v416 = (uint64_t *)__p.__r_.__value_.__r.__words[0];
                        v417 = v414;
                        do
                        {
                          v419 = *v416++;
                          v418 = v419;
                          v420 = *v415++;
                          v413 += v420 * v418;
                          --v417;
                        }
                        while (v417);
                        v421 = 0;
                        v422 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)&v103 + 8)
                                         + 8 * (*(_QWORD *)(*(_QWORD *)&v103 + 72) + v413));
                        v423 = *(_QWORD **)v449;
                        v424 = *(uint64_t **)&v450[8];
                        do
                        {
                          v426 = *v412++;
                          v425 = v426;
                          v427 = *v424++;
                          v421 += v427 * v425;
                          --v414;
                        }
                        while (v414);
                      }
                      *(_QWORD *)(*v423 + 8 * v421) = v422;
                    }
                    while (turi::flexible_type_impl::ndarray<double>::increment_index<unsigned long>(*(_QWORD *)&v103 + 8, (uint64_t *)&__p));
                    if (__p.__r_.__value_.__r.__words[0])
                    {
                      __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
                      operator delete(__p.__r_.__value_.__l.__data_);
                    }
                    if (v448.__r_.__value_.__r.__words[0])
                    {
                      v448.__r_.__value_.__l.__size_ = v448.__r_.__value_.__r.__words[0];
                      operator delete(v448.__r_.__value_.__l.__data_);
                    }
                  }
                }
                turi::flexible_type_impl::ndarray<double>::ensure_unique((uint64_t *)v449);
                if (!turi::flexible_type_impl::ndarray<double>::is_full(v449))
                  turi::flexible_type_impl::ndarray<double>::elements(void)::{lambda(void)#1}::operator()();
                if (v141 != *(char **)v449)
                  std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(v141, **(char ***)v449, *(_QWORD *)(*(_QWORD *)v449 + 8), (uint64_t)(*(_QWORD *)(*(_QWORD *)v449 + 8) - **(_QWORD **)v449) >> 3);
LABEL_606:
                turi::flexible_type_impl::ndarray<double>::~ndarray(v449);
              }
              goto LABEL_546;
            case 4:
              v177 = (unint64_t *)*v95;
              if (*(_QWORD *)*v95 == 1)
                goto LABEL_545;
              v247 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v247, *v95);
              *v95 = (uint64_t)v247;
              *v247 = 1;
              do
              {
                v248 = __ldaxr(v177);
                v249 = --v248 == 0;
              }
              while (__stlxr(v248, v177));
LABEL_530:
              if (!v249)
                goto LABEL_545;
              *(_QWORD *)v449 = v177 + 1;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v449);
              break;
            case 5:
              v177 = (unint64_t *)*v95;
              if (*(_QWORD *)*v95 == 1)
                goto LABEL_545;
              v206 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v206, *v95);
              *v95 = (uint64_t)v206;
              *v206 = 1;
              do
              {
                v207 = __ldaxr(v177);
                v180 = --v207 == 0;
              }
              while (__stlxr(v207, v177));
LABEL_517:
              if (!v180)
                goto LABEL_545;
              *(_QWORD *)v449 = v177 + 1;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v449);
              break;
            case 8:
              v262 = *v95;
              if (*(_QWORD *)*v95 != 1)
              {
                v263 = operator new();
                v264 = *v95;
                *(_QWORD *)v263 = *(_QWORD *)*v95;
                *(_QWORD *)(v263 + 8) = *(_QWORD *)(v264 + 8);
                v265 = *(_QWORD *)(v264 + 16);
                *(_QWORD *)(v263 + 16) = v265;
                if (v265)
                {
                  v266 = (unsigned int *)(v265 + 8);
                  do
                    v267 = __ldxr(v266);
                  while (__stxr(v267 + 1, v266));
                }
                v268 = *(_OWORD *)(v264 + 24);
                v269 = *(_OWORD *)(v264 + 40);
                *(_OWORD *)(v263 + 56) = *(_OWORD *)(v264 + 56);
                *(_OWORD *)(v263 + 40) = v269;
                *(_OWORD *)(v263 + 24) = v268;
                *v95 = v263;
                *(_QWORD *)v263 = 1;
                do
                {
                  v270 = __ldaxr((unint64_t *)v262);
                  v271 = v270 - 1;
                }
                while (__stlxr(v271, (unint64_t *)v262));
                if (!v271)
                {
                  boost::detail::shared_count::~shared_count((unsigned int **)(v262 + 16));
                  MEMORY[0x219A19A08](v262, 0x1030C40F1F0227BLL);
                }
              }
              v272 = *v95;
              turi::flexible_type_impl::get_img_visitor::operator()(v104, (turi::image_type *)v449);
              v273 = *(_OWORD *)v449;
              *(_OWORD *)v449 = 0uLL;
              v274 = *(_OWORD *)(v272 + 8);
              *(_OWORD *)(v272 + 8) = v273;
              *(_OWORD *)&v448.__r_.__value_.__l.__data_ = v274;
              boost::detail::shared_count::~shared_count((unsigned int **)&v448.__r_.__value_.__l.__size_);
              v275 = *(_OWORD *)&v449[16];
              v276 = *(_OWORD *)v450;
              *(_OWORD *)(v272 + 56) = *(_OWORD *)&v450[16];
              *(_OWORD *)(v272 + 40) = v276;
              *(_OWORD *)(v272 + 24) = v275;
              boost::detail::shared_count::~shared_count((unsigned int **)&v449[8]);
              goto LABEL_546;
            case 9:
              v165 = (unint64_t *)*v95;
              if (*(_QWORD *)*v95 != 1)
              {
                v166 = (_QWORD *)operator new();
                v167 = *v95 + 8;
                *v166 = *(_QWORD *)*v95;
                turi::flexible_type_impl::ndarray<double>::ndarray(v166 + 1, v167);
                *v95 = (uint64_t)v166;
                *v166 = 1;
                do
                {
                  v168 = __ldaxr(v165);
                  v169 = v168 - 1;
                }
                while (__stlxr(v169, v165));
                if (!v169)
                {
                  v170 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v165);
                  MEMORY[0x219A19A08](v170, 0x1030C407B73B9F7);
                }
              }
              v171 = *v95;
              std::shared_ptr<turi::neural_net::mps_command_queue>::operator=[abi:ne180100]((_QWORD *)(v171 + 8), (uint64_t *)(*(_QWORD *)&v103 + 8));
              if (v171 != *(_QWORD *)&v103)
              {
                std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((char *)(v171 + 24), *(char **)(*(_QWORD *)&v103 + 24), *(_QWORD *)(*(_QWORD *)&v103 + 32), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v103 + 32) - *(_QWORD *)(*(_QWORD *)&v103 + 24)) >> 3);
                std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((char *)(v171 + 48), *(char **)(*(_QWORD *)&v103 + 48), *(_QWORD *)(*(_QWORD *)&v103 + 56), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v103 + 56) - *(_QWORD *)(*(_QWORD *)&v103 + 48)) >> 3);
              }
              *(_QWORD *)(v171 + 72) = *(_QWORD *)(*(_QWORD *)&v103 + 72);
              goto LABEL_546;
            default:
              goto LABEL_624;
          }
          v253 = v177;
          v298 = 0x1020C405E66F15BLL;
LABEL_544:
          MEMORY[0x219A19A08](v253, v298);
LABEL_545:
          turi::flexible_type_fail(0);
          break;
        default:
          goto LABEL_624;
      }
    }
LABEL_546:
    ++v17;
    v16 = *a2;
    if (v17 >= (a2[1] - *a2) >> 4)
      goto LABEL_607;
  }
  switch(*((_BYTE *)v18 + 12))
  {
    case 0:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v449);
      std::ostream::operator<<();
      std::stringbuf::str();
      goto LABEL_615;
    case 1:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v449);
      std::ostream::operator<<();
      std::stringbuf::str();
LABEL_615:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)v449);
      goto LABEL_626;
    case 2:
      v431 = *(_QWORD *)v18;
      if (*(char *)(*(_QWORD *)v18 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v446, *(const std::string::value_type **)(v431 + 8), *(_QWORD *)(v431 + 16));
      }
      else
      {
        v432 = *(_OWORD *)(v431 + 8);
        v446.__r_.__value_.__r.__words[2] = *(_QWORD *)(v431 + 24);
        *(_OWORD *)&v446.__r_.__value_.__l.__data_ = v432;
      }
      goto LABEL_626;
    case 3:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v449, (_QWORD *)(*(_QWORD *)v18 + 8));
      goto LABEL_626;
    case 4:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v449, (uint64_t *)(*(_QWORD *)v18 + 8));
      goto LABEL_626;
    case 5:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v449, (_QWORD *)(*(_QWORD *)v18 + 8));
      goto LABEL_626;
    case 6:
      turi::flexible_type_impl::get_string_visitor::operator()(v18, &v446);
      goto LABEL_626;
    case 8:
      turi::flexible_type_impl::get_string_visitor::operator()();
      goto LABEL_626;
    case 9:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v449, (_QWORD *)(*(_QWORD *)v18 + 8));
LABEL_626:
      v433 = std::string::insert(&v446, 0, "Cannot convert ");
      v434 = *(_OWORD *)&v433->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v433->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v434;
      v433->__r_.__value_.__l.__size_ = 0;
      v433->__r_.__value_.__r.__words[2] = 0;
      v433->__r_.__value_.__r.__words[0] = 0;
      v435 = std::string::append(&__p, " to ");
      v436 = *(_OWORD *)&v435->__r_.__value_.__l.__data_;
      v448.__r_.__value_.__r.__words[2] = v435->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v448.__r_.__value_.__l.__data_ = v436;
      v435->__r_.__value_.__l.__size_ = 0;
      v435->__r_.__value_.__r.__words[2] = 0;
      v435->__r_.__value_.__r.__words[0] = 0;
      v437 = (char)(*a1)[v17];
      if (v437 > 9)
        v438 = "undefined";
      else
        v438 = off_24D9314B8[v437];
      v439 = std::string::append(&v448, v438);
      v440 = *(_OWORD *)&v439->__r_.__value_.__l.__data_;
      *(_QWORD *)&v449[16] = *((_QWORD *)&v439->__r_.__value_.__l + 2);
      *(_OWORD *)v449 = v440;
      v439->__r_.__value_.__l.__size_ = 0;
      v439->__r_.__value_.__r.__words[2] = 0;
      v439->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v448.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v448.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v446.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v446.__r_.__value_.__l.__data_);
      if (*((int *)global_logger() + 169) <= 6)
      {
        v441 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe.cpp", "operator()", 573, 1);
        if ((v449[23] & 0x80000000) != 0)
          std::string::__init_copy_ctor_external(&v444, *(const std::string::value_type **)v449, *(std::string::size_type *)&v449[8]);
        else
          v444 = *(std::string *)v449;
        v442 = file_logger::operator<<<std::string>((uint64_t)v441, (uint64_t)&v444);
        file_logger::operator<<(v442, (void (*)(_BYTE *))std::endl[abi:ne180100]<char,std::char_traits<char>>);
        if (SHIBYTE(v444.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v444.__r_.__value_.__l.__data_);
      }
      exception = (std::bad_cast *)__cxa_allocate_exception(0x20uLL);
      turi::bad_cast::bad_cast(exception, (__int128 *)v449);
    default:
LABEL_624:
      turi::flexible_type_fail(0);
      __break(1u);
      break;
  }
}

void sub_2181AB844(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,char *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (__p)
  {
    a39 = (uint64_t)__p;
    operator delete(__p);
  }
  turi::flexible_type_impl::ndarray<double>::~ndarray(&a45);
  a31 = &a21;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a31);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<turi::sframe::get_output_iterator(unsigned long)::$_1,std::allocator<turi::sframe::get_output_iterator(unsigned long)::$_1>,void ()(std::vector<turi::flexible_type> &&)>::~__func(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24D9313B8;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void std::__function::__func<turi::sframe::get_output_iterator(unsigned long)::$_1,std::allocator<turi::sframe::get_output_iterator(unsigned long)::$_1>,void ()(std::vector<turi::flexible_type> &&)>::~__func(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24D9313B8;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x219A19A08);
}

_QWORD *std::__function::__func<turi::sframe::get_output_iterator(unsigned long)::$_1,std::allocator<turi::sframe::get_output_iterator(unsigned long)::$_1>,void ()(std::vector<turi::flexible_type> &&)>::__clone(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x30uLL);
  *v2 = &off_24D9313B8;
  v2[2] = 0;
  v2[3] = 0;
  v2[1] = 0;
  std::vector<turi::flex_type_enum>::__init_with_size[abi:ne180100]<turi::flex_type_enum*,turi::flex_type_enum*>(v2 + 1, *(const void **)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8));
  *((_OWORD *)v2 + 2) = *(_OWORD *)(a1 + 32);
  return v2;
}

void sub_2181ABC0C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

__n128 std::__function::__func<turi::sframe::get_output_iterator(unsigned long)::$_1,std::allocator<turi::sframe::get_output_iterator(unsigned long)::$_1>,void ()(std::vector<turi::flexible_type> &&)>::__clone(uint64_t a1, __n128 *a2)
{
  __n128 result;

  a2->n128_u64[0] = (unint64_t)&off_24D9313B8;
  a2[1].n128_u64[0] = 0;
  a2[1].n128_u64[1] = 0;
  a2->n128_u64[1] = 0;
  std::vector<turi::flex_type_enum>::__init_with_size[abi:ne180100]<turi::flex_type_enum*,turi::flex_type_enum*>(&a2->n128_u64[1], *(const void **)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8));
  result = *(__n128 *)(a1 + 32);
  a2[2] = result;
  return result;
}

void std::__function::__func<turi::sframe::get_output_iterator(unsigned long)::$_1,std::allocator<turi::sframe::get_output_iterator(unsigned long)::$_1>,void ()(std::vector<turi::flexible_type> &&)>::destroy(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
}

void std::__function::__func<turi::sframe::get_output_iterator(unsigned long)::$_1,std::allocator<turi::sframe::get_output_iterator(unsigned long)::$_1>,void ()(std::vector<turi::flexible_type> &&)>::destroy_deallocate(_QWORD *__p)
{
  void *v2;

  v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

uint64_t std::__function::__func<turi::sframe::get_output_iterator(unsigned long)::$_1,std::allocator<turi::sframe::get_output_iterator(unsigned long)::$_1>,void ()(std::vector<turi::flexible_type> &&)>::operator()(uint64_t a1, uint64_t *a2, __n128 a3)
{
  return turi::sframe::get_output_iterator(unsigned long)::$_1::operator()((_QWORD *)(a1 + 8), a2, a3);
}

uint64_t std::__function::__func<turi::sframe::get_output_iterator(unsigned long)::$_1,std::allocator<turi::sframe::get_output_iterator(unsigned long)::$_1>,void ()(std::vector<turi::flexible_type> &&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::sframe::get_output_iterator(unsigned long)::$_1,std::allocator<turi::sframe::get_output_iterator(unsigned long)::$_1>,void ()(std::vector<turi::flexible_type> &&)>::target_type()
{
}

uint64_t turi::sframe::get_output_iterator(unsigned long)::$_1::operator()(_QWORD *a1, uint64_t *a2, __n128 a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  unint64_t v29;
  __int128 v30;
  uint64_t v31;
  char **v32;
  _QWORD *v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t *v40;
  _QWORD *v41;
  unint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  unint64_t v45;
  unint64_t v46;
  void *v47;
  _QWORD *v48;
  unint64_t v49;
  unint64_t v50;
  void *v51;
  char *v52;
  uint64_t *v53;
  uint64_t *v54;
  _QWORD *v55;
  _QWORD *v57;
  unint64_t v58;
  BOOL v59;
  _QWORD *v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  void *v66;
  void *v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  _QWORD *v71;
  unint64_t v72;
  unint64_t v73;
  void *v74;
  uint64_t *v75;
  _QWORD *v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  unint64_t v84;
  BOOL v85;
  _QWORD *v86;
  unint64_t v87;
  BOOL v88;
  _QWORD *v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  unint64_t v94;
  _QWORD *v95;
  unint64_t v96;
  _QWORD *v97;
  unint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  _QWORD *v103;
  _QWORD *v104;
  std::__shared_weak_count *size;
  unint64_t *v106;
  unint64_t v107;
  void *v108;
  void *v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  _QWORD *v113;
  unint64_t v114;
  unint64_t v115;
  void *v116;
  _QWORD *v117;
  void *v118;
  _QWORD *v119;
  unint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  unint64_t v123;
  _QWORD *v124;
  uint64_t v125;
  unint64_t v126;
  _QWORD *v127;
  uint64_t v128;
  unint64_t v129;
  _QWORD *v130;
  unint64_t v131;
  _QWORD *v132;
  unint64_t v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  std::string::size_type v137;
  _QWORD *v138;
  unint64_t v139;
  unint64_t v140;
  _QWORD *v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unsigned int *v146;
  unsigned int v147;
  __int128 v148;
  __int128 v149;
  unint64_t v150;
  BOOL v151;
  _QWORD *v152;
  uint64_t v153;
  unint64_t v154;
  _QWORD *v155;
  unint64_t v156;
  _QWORD *v157;
  unint64_t v158;
  _QWORD *v159;
  unint64_t v160;
  BOOL v161;
  _QWORD *v162;
  uint64_t v163;
  unint64_t v164;
  uint64_t v165;
  _QWORD *v166;
  unint64_t v167;
  unint64_t v168;
  uint64_t v169;
  int v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  unsigned int *v174;
  unsigned int v175;
  __int128 v176;
  __int128 v177;
  unint64_t v178;
  unint64_t v179;
  uint64_t v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  _QWORD *v185;
  uint64_t v186;
  unint64_t v187;
  unint64_t v188;
  _QWORD *v189;
  _QWORD *v190;
  void *v191;
  void *v192;
  unint64_t *v193;
  _QWORD *v194;
  unint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  unsigned int *v199;
  unsigned int v200;
  __int128 v201;
  __int128 v202;
  unint64_t v203;
  _QWORD *v204;
  unint64_t v205;
  void *v206;
  _QWORD *v207;
  unint64_t v208;
  unint64_t v209;
  _QWORD *v210;
  unint64_t v211;
  unint64_t v212;
  _QWORD *v213;
  unint64_t v214;
  unint64_t v215;
  int v216;
  _QWORD *v217;
  unint64_t v218;
  _QWORD *v219;
  unint64_t v220;
  _QWORD *v221;
  unint64_t v222;
  int v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  unsigned int *v227;
  unsigned int v228;
  __int128 v229;
  __int128 v230;
  unint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  unsigned int *v235;
  unsigned int v236;
  __int128 v237;
  __int128 v238;
  unint64_t v239;
  _QWORD *v240;
  unint64_t v241;
  _QWORD *v242;
  unint64_t v243;
  _QWORD *v244;
  unint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  unsigned int *v249;
  unsigned int v250;
  __int128 v251;
  __int128 v252;
  unint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  unsigned int *v257;
  unsigned int v258;
  __int128 v259;
  __int128 v260;
  unint64_t v261;
  _QWORD *v262;
  unint64_t v263;
  _QWORD *v264;
  unint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  unsigned int *v269;
  unsigned int v270;
  __int128 v271;
  __int128 v272;
  unint64_t v273;
  _QWORD *v274;
  unint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  unsigned int *v279;
  unsigned int v280;
  __int128 v281;
  __int128 v282;
  unint64_t v283;
  _QWORD *v284;
  unint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  unsigned int *v289;
  unsigned int v290;
  __int128 v291;
  __int128 v292;
  unint64_t v293;
  uint64_t v294;
  unint64_t *v295;
  unint64_t v296;
  unint64_t v297;
  unint64_t *v298;
  unint64_t *v299;
  uint64_t v300;
  unint64_t *v301;
  unint64_t v302;
  unint64_t v303;
  unint64_t *v304;
  unint64_t *v305;
  unint64_t v306;
  unint64_t v307;
  unint64_t *v308;
  void *v309;
  void *v310;
  unsigned int v311;
  unint64_t *v312;
  unint64_t v313;
  unint64_t v314;
  unint64_t *v315;
  void *v316;
  unint64_t *v317;
  unint64_t v318;
  unint64_t v319;
  unint64_t *v320;
  unint64_t v321;
  unint64_t v322;
  unint64_t *v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t *v327;
  uint64_t *v328;
  unint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  unint64_t *v333;
  uint64_t v334;
  uint64_t v335;
  unint64_t v336;
  _QWORD *v337;
  std::string::size_type v338;
  uint64_t v339;
  uint64_t v340;
  unint64_t v341;
  uint64_t v342;
  uint64_t *v343;
  unint64_t v344;
  uint64_t v345;
  uint64_t v346;
  unint64_t v347;
  __int128 v348;
  int64_t v349;
  unint64_t v350;
  unint64_t v351;
  uint64_t v352;
  uint64_t *v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t *v356;
  uint64_t *v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t *v364;
  uint64_t *v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  unint64_t v371;
  uint64_t v372;
  unint64_t v373;
  uint64_t v374;
  unint64_t v375;
  unint64_t *v376;
  unint64_t v377;
  unint64_t v378;
  unint64_t v379;
  unint64_t *v380;
  unint64_t v381;
  unint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  unint64_t *v386;
  unint64_t v387;
  unint64_t v388;
  uint64_t v389;
  unint64_t *v390;
  unint64_t v391;
  unint64_t v392;
  uint64_t v393;
  void *v394;
  void *v395;
  unsigned int v396;
  unint64_t *v397;
  unint64_t v398;
  unint64_t v399;
  uint64_t v400;
  void *v401;
  unint64_t *v402;
  unint64_t v403;
  unint64_t v404;
  unint64_t *v405;
  unint64_t v406;
  unint64_t v407;
  uint64_t v408;
  uint64_t result;
  _QWORD *v410;
  _QWORD *v411;
  _QWORD *v412;
  turi::flexible_type_impl *v413;
  uint64_t v414;
  __int128 v415;
  std::string *v416;
  __int128 v417;
  std::string *v418;
  __int128 v419;
  unint64_t v420;
  const std::string::value_type *v421;
  std::string *v422;
  __int128 v423;
  file_logger *v424;
  uint64_t v425;
  std::bad_cast *exception;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  std::string v432;
  std::string __p;
  std::string v434;
  std::string v435;
  _BYTE v436[32];
  _BYTE v437[32];
  uint64_t v438;
  void *v439;
  char v440;
  _BYTE v441[167];
  uint64_t v442[5];

  v442[2] = *MEMORY[0x24BDAC8D0];
  v5 = *a2;
  v6 = a2[1];
  if (a1[1] - *a1 != (v6 - *a2) >> 4)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v436);
    v410 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v436[16], (uint64_t)"Can not write to SFrame, got the wrong number of columns. ", 58);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v410, (uint64_t)"Expected: ", 10);
    v411 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v411, (uint64_t)" columns. Got: ", 15);
    v412 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v412, (uint64_t)" columns.", 9);
    v435.__r_.__value_.__r.__words[0] = (std::string::size_type)v436;
    turi::sframe::get_output_iterator(unsigned long)::$_1::operator() const(std::vector<turi::flexible_type> &&)::{lambda(void)#1}::operator()();
  }
  v431 = a1[3];
  if (v6 == v5)
    return (*(uint64_t (**)(_QWORD, _QWORD, uint64_t *))(**(_QWORD **)(v431 + 208) + 64))(*(_QWORD *)(v431 + 208), a1[4], a2);
  v7 = 0;
  v430 = *MEMORY[0x24BEDB7F0];
  v428 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  v429 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v427 = MEMORY[0x24BEDB848] + 16;
  do
  {
    v8 = *(unsigned __int8 *)(v5 + 16 * v7 + 12);
    v9 = *(char *)(*a1 + v7);
    v10 = *(unsigned __int8 *)(*a1 + v7);
    if (v9 == 7 || v8 == 7 || v8 == v10)
      goto LABEL_510;
    if (!turi::flex_type_is_convertible(turi::flex_type_enum,turi::flex_type_enum)::castable[10 * (char)v8 + v9])
    {
      v413 = (turi::flexible_type_impl *)(v5 + 16 * v7);
      switch((char)v8)
      {
        case 0:
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v436);
          std::ostream::operator<<();
          std::stringbuf::str();
          goto LABEL_630;
        case 1:
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v436);
          std::ostream::operator<<();
          std::stringbuf::str();
LABEL_630:
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)v436);
          break;
        case 2:
          v414 = *(_QWORD *)v413;
          if (*(char *)(*(_QWORD *)v413 + 31) < 0)
          {
            std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v414 + 8), *(_QWORD *)(v414 + 16));
          }
          else
          {
            v415 = *(_OWORD *)(v414 + 8);
            __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(v414 + 24);
            *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v415;
          }
          break;
        case 3:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v436, (_QWORD *)(*(_QWORD *)v413 + 8));
          break;
        case 4:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v436, (uint64_t *)(*(_QWORD *)v413 + 8));
          break;
        case 5:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v436, (_QWORD *)(*(_QWORD *)v413 + 8));
          break;
        case 6:
          turi::flexible_type_impl::get_string_visitor::operator()(v413, &__p);
          break;
        case 8:
          turi::flexible_type_impl::get_string_visitor::operator()();
          break;
        case 9:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v436, (_QWORD *)(*(_QWORD *)v413 + 8));
          break;
        default:
          turi::apply_binary_op_ff();
      }
      v416 = std::string::insert(&__p, 0, "Cannot convert ");
      v417 = *(_OWORD *)&v416->__r_.__value_.__l.__data_;
      v434.__r_.__value_.__r.__words[2] = v416->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v434.__r_.__value_.__l.__data_ = v417;
      v416->__r_.__value_.__l.__size_ = 0;
      v416->__r_.__value_.__r.__words[2] = 0;
      v416->__r_.__value_.__r.__words[0] = 0;
      v418 = std::string::append(&v434, " to ");
      v419 = *(_OWORD *)&v418->__r_.__value_.__l.__data_;
      v435.__r_.__value_.__r.__words[2] = v418->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v435.__r_.__value_.__l.__data_ = v419;
      v418->__r_.__value_.__l.__size_ = 0;
      v418->__r_.__value_.__r.__words[2] = 0;
      v418->__r_.__value_.__r.__words[0] = 0;
      v420 = *(char *)(*a1 + v7);
      if (v420 > 9)
        v421 = "undefined";
      else
        v421 = off_24D9314B8[v420];
      v422 = std::string::append(&v435, v421);
      v423 = *(_OWORD *)&v422->__r_.__value_.__l.__data_;
      *(_QWORD *)&v436[16] = *((_QWORD *)&v422->__r_.__value_.__l + 2);
      *(_OWORD *)v436 = v423;
      v422->__r_.__value_.__l.__size_ = 0;
      v422->__r_.__value_.__r.__words[2] = 0;
      v422->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v435.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v435.__r_.__value_.__l.__data_);
      if (SHIBYTE(v434.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v434.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (*((int *)global_logger() + 169) <= 6)
      {
        v424 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe.cpp", "operator()", 604, 1);
        if ((v436[23] & 0x80000000) != 0)
          std::string::__init_copy_ctor_external(&v432, *(const std::string::value_type **)v436, *(std::string::size_type *)&v436[8]);
        else
          v432 = *(std::string *)v436;
        v425 = file_logger::operator<<<std::string>((uint64_t)v424, (uint64_t)&v432);
        file_logger::operator<<(v425, (void (*)(_BYTE *))std::endl[abi:ne180100]<char,std::char_traits<char>>);
        if (SHIBYTE(v432.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v432.__r_.__value_.__l.__data_);
      }
      exception = (std::bad_cast *)__cxa_allocate_exception(0x20uLL);
      turi::bad_cast::bad_cast(exception, (__int128 *)v436);
    }
    v13 = 0;
    memset(v442, 0, 13);
    BYTE4(v442[1]) = v10;
    switch(v10)
    {
      case 2:
      case 3:
      case 4:
      case 5:
        v13 = operator new();
        *(_QWORD *)v13 = 0;
        *(_QWORD *)(v13 + 16) = 0;
        *(_QWORD *)(v13 + 24) = 0;
        *(_QWORD *)(v13 + 8) = 0;
        goto LABEL_16;
      case 6:
        v13 = 0x1900000000000000;
        v442[0] = 0x1900000000000000;
        LODWORD(v442[1]) = 0;
        break;
      case 8:
        v13 = operator new();
        *(_QWORD *)v13 = 0;
        a3.n128_u16[0] = 0;
        a3.n128_u8[2] = 0;
        a3.n128_u8[3] = 0;
        a3.n128_u8[4] = 0;
        a3.n128_u8[5] = 0;
        a3.n128_u8[6] = 0;
        a3.n128_u8[7] = 0;
        *(_OWORD *)(v13 + 8) = 0u;
        *(_OWORD *)(v13 + 24) = 0u;
        *(_OWORD *)(v13 + 40) = 0u;
        *(_QWORD *)(v13 + 56) = 0;
        *(_QWORD *)(v13 + 64) = 3;
        goto LABEL_16;
      case 9:
        v13 = operator new();
        std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::pair[abi:ne180100]<true,0>((_QWORD *)v13);
LABEL_16:
        v442[0] = v13;
        *(_QWORD *)v13 = 1;
        break;
      default:
        break;
    }
    v14 = *a2 + 16 * v7;
    if ((uint64_t *)v14 == v442)
      goto LABEL_464;
    switch(*(_BYTE *)(v14 + 12))
    {
      case 0:
        switch(BYTE4(v442[1]))
        {
          case 0:
            v15 = *(_QWORD *)v14;
            goto LABEL_74;
          case 1:
            a3.n128_f64[0] = (double)*(uint64_t *)v14;
            goto LABEL_329;
          case 2:
            if (*(_QWORD *)v13 != 1)
            {
              v132 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v132, v442[0]);
              v442[0] = (uint64_t)v132;
              *v132 = 1;
              do
              {
                v133 = __ldaxr((unint64_t *)v13);
                v134 = v133 - 1;
              }
              while (__stlxr(v134, (unint64_t *)v13));
              if (!v134)
              {
                if (*(char *)(v13 + 31) < 0)
                  operator delete(*(void **)(v13 + 8));
                MEMORY[0x219A19A08](v13, 0x1012C404EF22A49);
              }
            }
            v135 = v442[0];
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v436);
            std::ostream::operator<<();
            std::stringbuf::str();
            *(_QWORD *)v436 = v430;
            *(_QWORD *)&v436[*(_QWORD *)(v430 - 24)] = v429;
            *(_QWORD *)&v436[16] = v428;
            *(_QWORD *)&v436[24] = v427;
            if (v440 < 0)
              operator delete(v439);
            v136 = v135 + 8;
            std::streambuf::~streambuf();
            std::iostream::~basic_iostream();
            MEMORY[0x219A198F4](v441);
            if (*(char *)(v135 + 31) < 0)
              goto LABEL_239;
            goto LABEL_240;
          case 3:
            if (*(_QWORD *)v13 == 1)
              goto LABEL_463;
            v95 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v95, v442[0]);
            v442[0] = (uint64_t)v95;
            *v95 = 1;
            do
            {
              v96 = __ldaxr((unint64_t *)v13);
              v59 = --v96 == 0;
            }
            while (__stlxr(v96, (unint64_t *)v13));
            goto LABEL_340;
          case 4:
            if (*(_QWORD *)v13 == 1)
              goto LABEL_463;
            v217 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v217, v442[0]);
            v442[0] = (uint64_t)v217;
            *v217 = 1;
            do
            {
              v218 = __ldaxr((unint64_t *)v13);
              v161 = --v218 == 0;
            }
            while (__stlxr(v218, (unint64_t *)v13));
            goto LABEL_449;
          case 5:
            if (*(_QWORD *)v13 == 1)
              goto LABEL_463;
            v242 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v242, v442[0]);
            v442[0] = (uint64_t)v242;
            *v242 = 1;
            do
            {
              v243 = __ldaxr((unint64_t *)v13);
              v88 = --v243 == 0;
            }
            while (__stlxr(v243, (unint64_t *)v13));
            goto LABEL_436;
          case 6:
            v442[0] = *(_QWORD *)v14 & 0xFFFFFFFFFFFFFFLL | 0x5900000000000000;
            LODWORD(v442[1]) = 0;
            goto LABEL_464;
          case 7:
            goto LABEL_463;
          case 8:
            if (*(_QWORD *)v13 == 1)
              goto LABEL_463;
            v246 = operator new();
            v247 = v442[0];
            *(_QWORD *)v246 = *(_QWORD *)v442[0];
            *(_QWORD *)(v246 + 8) = *(_QWORD *)(v247 + 8);
            v248 = *(_QWORD *)(v247 + 16);
            *(_QWORD *)(v246 + 16) = v248;
            if (v248)
            {
              v249 = (unsigned int *)(v248 + 8);
              do
                v250 = __ldxr(v249);
              while (__stxr(v250 + 1, v249));
            }
            v251 = *(_OWORD *)(v247 + 24);
            v252 = *(_OWORD *)(v247 + 40);
            *(_OWORD *)(v246 + 56) = *(_OWORD *)(v247 + 56);
            *(_OWORD *)(v246 + 40) = v252;
            *(_OWORD *)(v246 + 24) = v251;
            v442[0] = v246;
            *(_QWORD *)v246 = 1;
            do
            {
              v253 = __ldaxr((unint64_t *)v13);
              v151 = --v253 == 0;
            }
            while (__stlxr(v253, (unint64_t *)v13));
            goto LABEL_459;
          case 9:
            if (*(_QWORD *)v13 == 1)
              goto LABEL_463;
            v124 = (_QWORD *)operator new();
            v125 = v442[0] + 8;
            *v124 = *(_QWORD *)v442[0];
            turi::flexible_type_impl::ndarray<double>::ndarray(v124 + 1, v125);
            v442[0] = (uint64_t)v124;
            *v124 = 1;
            do
            {
              v126 = __ldaxr((unint64_t *)v13);
              v85 = --v126 == 0;
            }
            while (__stlxr(v126, (unint64_t *)v13));
            goto LABEL_279;
          default:
            goto LABEL_640;
        }
      case 1:
        switch(BYTE4(v442[1]))
        {
          case 0:
            a3.n128_u64[0] = *(_QWORD *)v14;
            v15 = (uint64_t)*(double *)v14;
            goto LABEL_74;
          case 1:
            a3.n128_u64[0] = *(_QWORD *)v14;
            goto LABEL_329;
          case 2:
            if (*(_QWORD *)v13 != 1)
            {
              v166 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v166, v442[0]);
              v442[0] = (uint64_t)v166;
              *v166 = 1;
              do
              {
                v167 = __ldaxr((unint64_t *)v13);
                v168 = v167 - 1;
              }
              while (__stlxr(v168, (unint64_t *)v13));
              if (!v168)
              {
                if (*(char *)(v13 + 31) < 0)
                  operator delete(*(void **)(v13 + 8));
                MEMORY[0x219A19A08](v13, 0x1012C404EF22A49);
              }
            }
            v169 = v442[0];
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v436);
            std::ostream::operator<<();
            std::stringbuf::str();
            *(_QWORD *)v436 = v430;
            *(_QWORD *)&v436[*(_QWORD *)(v430 - 24)] = v429;
            *(_QWORD *)&v436[16] = v428;
            *(_QWORD *)&v436[24] = MEMORY[0x24BEDB848] + 16;
            if (v440 < 0)
              operator delete(v439);
            v136 = v169 + 8;
            std::streambuf::~streambuf();
            std::iostream::~basic_iostream();
            MEMORY[0x219A198F4](v441);
            if (*(char *)(v169 + 31) < 0)
LABEL_239:
              operator delete(*(void **)v136);
LABEL_240:
            a3 = *(__n128 *)&v435.__r_.__value_.__l.__data_;
            v137 = v435.__r_.__value_.__r.__words[2];
            goto LABEL_516;
          case 3:
            if (*(_QWORD *)v13 == 1)
              goto LABEL_463;
            v97 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v97, v442[0]);
            v442[0] = (uint64_t)v97;
            *v97 = 1;
            do
            {
              v98 = __ldaxr((unint64_t *)v13);
              v59 = --v98 == 0;
            }
            while (__stlxr(v98, (unint64_t *)v13));
            goto LABEL_340;
          case 4:
            if (*(_QWORD *)v13 == 1)
              goto LABEL_463;
            v219 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v219, v442[0]);
            v442[0] = (uint64_t)v219;
            *v219 = 1;
            do
            {
              v220 = __ldaxr((unint64_t *)v13);
              v161 = --v220 == 0;
            }
            while (__stlxr(v220, (unint64_t *)v13));
            goto LABEL_449;
          case 5:
            if (*(_QWORD *)v13 == 1)
              goto LABEL_463;
            v244 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v244, v442[0]);
            v442[0] = (uint64_t)v244;
            *v244 = 1;
            do
            {
              v245 = __ldaxr((unint64_t *)v13);
              v88 = --v245 == 0;
            }
            while (__stlxr(v245, (unint64_t *)v13));
            goto LABEL_436;
          case 6:
            a3.n128_u64[0] = *(_QWORD *)v14;
            v170 = (int)((*(double *)v14 - (double)(uint64_t)floor(*(double *)v14)) * 1000000.0);
            if (v170 >= 999999)
              v170 = 999999;
            if (v170 >= 0xF4240)
              turi::flex_date_time::set_microsecond(int)::{lambda(void)#1}::operator()();
            v442[0] = vcvtmd_s64_f64(a3.n128_f64[0]) & 0xFFFFFFFFFFFFFFLL | 0x5900000000000000;
            LODWORD(v442[1]) = v170;
            goto LABEL_464;
          case 7:
            goto LABEL_463;
          case 8:
            if (*(_QWORD *)v13 == 1)
              goto LABEL_463;
            v254 = operator new();
            v255 = v442[0];
            *(_QWORD *)v254 = *(_QWORD *)v442[0];
            *(_QWORD *)(v254 + 8) = *(_QWORD *)(v255 + 8);
            v256 = *(_QWORD *)(v255 + 16);
            *(_QWORD *)(v254 + 16) = v256;
            if (v256)
            {
              v257 = (unsigned int *)(v256 + 8);
              do
                v258 = __ldxr(v257);
              while (__stxr(v258 + 1, v257));
            }
            v259 = *(_OWORD *)(v255 + 24);
            v260 = *(_OWORD *)(v255 + 40);
            *(_OWORD *)(v254 + 56) = *(_OWORD *)(v255 + 56);
            *(_OWORD *)(v254 + 40) = v260;
            *(_OWORD *)(v254 + 24) = v259;
            v442[0] = v254;
            *(_QWORD *)v254 = 1;
            do
            {
              v261 = __ldaxr((unint64_t *)v13);
              v151 = --v261 == 0;
            }
            while (__stlxr(v261, (unint64_t *)v13));
            goto LABEL_459;
          case 9:
            if (*(_QWORD *)v13 == 1)
              goto LABEL_463;
            v127 = (_QWORD *)operator new();
            v128 = v442[0] + 8;
            *v127 = *(_QWORD *)v442[0];
            turi::flexible_type_impl::ndarray<double>::ndarray(v127 + 1, v128);
            v442[0] = (uint64_t)v127;
            *v127 = 1;
            do
            {
              v129 = __ldaxr((unint64_t *)v13);
              v85 = --v129 == 0;
            }
            while (__stlxr(v129, (unint64_t *)v13));
            goto LABEL_279;
          default:
            goto LABEL_640;
        }
      case 2:
        switch(BYTE4(v442[1]))
        {
          case 0:
          case 1:
          case 6:
          case 7:
            goto LABEL_463;
          case 2:
            v26 = *(_QWORD *)v14;
            if (*(_QWORD *)v13 != 1)
            {
              v27 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v27, v442[0]);
              v442[0] = (uint64_t)v27;
              *v27 = 1;
              do
              {
                v28 = __ldaxr((unint64_t *)v13);
                v29 = v28 - 1;
              }
              while (__stlxr(v29, (unint64_t *)v13));
              if (!v29)
              {
                if (*(char *)(v13 + 31) < 0)
                  operator delete(*(void **)(v13 + 8));
                MEMORY[0x219A19A08](v13, 0x1012C404EF22A49);
              }
            }
            v20 = v442[0];
            if (*(char *)(v26 + 31) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)v436, *(const std::string::value_type **)(v26 + 8), *(_QWORD *)(v26 + 16));
            }
            else
            {
              v30 = *(_OWORD *)(v26 + 8);
              *(_QWORD *)&v436[16] = *(_QWORD *)(v26 + 24);
              *(_OWORD *)v436 = v30;
            }
            goto LABEL_513;
          case 3:
            if (*(_QWORD *)v13 == 1)
              goto LABEL_463;
            v57 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v57, v442[0]);
            v442[0] = (uint64_t)v57;
            *v57 = 1;
            do
            {
              v58 = __ldaxr((unint64_t *)v13);
              v59 = --v58 == 0;
            }
            while (__stlxr(v58, (unint64_t *)v13));
            goto LABEL_340;
          case 4:
            if (*(_QWORD *)v13 == 1)
              goto LABEL_463;
            v194 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v194, v442[0]);
            v442[0] = (uint64_t)v194;
            *v194 = 1;
            do
            {
              v195 = __ldaxr((unint64_t *)v13);
              v161 = --v195 == 0;
            }
            while (__stlxr(v195, (unint64_t *)v13));
            goto LABEL_449;
          case 5:
            if (*(_QWORD *)v13 == 1)
              goto LABEL_463;
            v130 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v130, v442[0]);
            v442[0] = (uint64_t)v130;
            *v130 = 1;
            do
            {
              v131 = __ldaxr((unint64_t *)v13);
              v88 = --v131 == 0;
            }
            while (__stlxr(v131, (unint64_t *)v13));
            goto LABEL_436;
          case 8:
            if (*(_QWORD *)v13 == 1)
              goto LABEL_463;
            v196 = operator new();
            v197 = v442[0];
            *(_QWORD *)v196 = *(_QWORD *)v442[0];
            *(_QWORD *)(v196 + 8) = *(_QWORD *)(v197 + 8);
            v198 = *(_QWORD *)(v197 + 16);
            *(_QWORD *)(v196 + 16) = v198;
            if (v198)
            {
              v199 = (unsigned int *)(v198 + 8);
              do
                v200 = __ldxr(v199);
              while (__stxr(v200 + 1, v199));
            }
            v201 = *(_OWORD *)(v197 + 24);
            v202 = *(_OWORD *)(v197 + 40);
            *(_OWORD *)(v196 + 56) = *(_OWORD *)(v197 + 56);
            *(_OWORD *)(v196 + 40) = v202;
            *(_OWORD *)(v196 + 24) = v201;
            v442[0] = v196;
            *(_QWORD *)v196 = 1;
            do
            {
              v203 = __ldaxr((unint64_t *)v13);
              v151 = --v203 == 0;
            }
            while (__stlxr(v203, (unint64_t *)v13));
            goto LABEL_459;
          case 9:
            if (*(_QWORD *)v13 == 1)
              goto LABEL_463;
            v82 = (_QWORD *)operator new();
            v83 = v442[0] + 8;
            *v82 = *(_QWORD *)v442[0];
            turi::flexible_type_impl::ndarray<double>::ndarray(v82 + 1, v83);
            v442[0] = (uint64_t)v82;
            *v82 = 1;
            do
            {
              v84 = __ldaxr((unint64_t *)v13);
              v85 = --v84 == 0;
            }
            while (__stlxr(v84, (unint64_t *)v13));
            goto LABEL_279;
          default:
            goto LABEL_640;
        }
      case 3:
        v31 = *(_QWORD *)v14;
        v32 = (char **)(v31 + 8);
        switch(BYTE4(v442[1]))
        {
          case 0:
          case 1:
          case 6:
          case 7:
            goto LABEL_463;
          case 2:
            if (*(_QWORD *)v13 != 1)
            {
              v33 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v33, v442[0]);
              v442[0] = (uint64_t)v33;
              *v33 = 1;
              do
              {
                v34 = __ldaxr((unint64_t *)v13);
                v35 = v34 - 1;
              }
              while (__stlxr(v35, (unint64_t *)v13));
              if (!v35)
              {
                if (*(char *)(v13 + 31) < 0)
                  operator delete(*(void **)(v13 + 8));
                MEMORY[0x219A19A08](v13, 0x1012C404EF22A49);
              }
            }
            v20 = v442[0];
            turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v435, (_QWORD *)(v31 + 8));
            goto LABEL_513;
          case 3:
            if (*(_QWORD *)v13 != 1)
            {
              v71 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v71, v442[0]);
              v442[0] = (uint64_t)v71;
              *v71 = 1;
              do
              {
                v72 = __ldaxr((unint64_t *)v13);
                v73 = v72 - 1;
              }
              while (__stlxr(v73, (unint64_t *)v13));
              if (!v73)
              {
                v74 = *(void **)(v13 + 8);
                if (v74)
                {
                  *(_QWORD *)(v13 + 16) = v74;
                  operator delete(v74);
                }
                MEMORY[0x219A19A08](v13, 0x1080C409938AC02);
              }
            }
            if (v442[0] == v31)
              goto LABEL_464;
            v52 = (char *)(v442[0] + 8);
            v75 = (uint64_t *)(v31 + 16);
            goto LABEL_136;
          case 4:
            if (*(_QWORD *)v13 != 1)
            {
              v210 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v210, v442[0]);
              v442[0] = (uint64_t)v210;
              *v210 = 1;
              do
              {
                v211 = __ldaxr((unint64_t *)v13);
                v212 = v211 - 1;
              }
              while (__stlxr(v212, (unint64_t *)v13));
              if (!v212)
              {
                *(_QWORD *)v436 = v13 + 8;
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v436);
                MEMORY[0x219A19A08](v13, 0x1020C405E66F15BLL);
              }
            }
            std::vector<turi::flexible_type>::__assign_with_size[abi:ne180100]<std::__wrap_iter<double const*>,std::__wrap_iter<double const*>>((char **)(v442[0] + 8), *(_QWORD **)(v31 + 8), *(_QWORD **)(v31 + 16), (uint64_t)(*(_QWORD *)(v31 + 16) - *(_QWORD *)(v31 + 8)) >> 3);
            goto LABEL_464;
          case 5:
            if (*(_QWORD *)v13 == 1)
              goto LABEL_463;
            v155 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v155, v442[0]);
            v442[0] = (uint64_t)v155;
            *v155 = 1;
            do
            {
              v156 = __ldaxr((unint64_t *)v13);
              v88 = --v156 == 0;
            }
            while (__stlxr(v156, (unint64_t *)v13));
            goto LABEL_436;
          case 8:
            if (*(_QWORD *)v13 == 1)
              goto LABEL_463;
            v224 = operator new();
            v225 = v442[0];
            *(_QWORD *)v224 = *(_QWORD *)v442[0];
            *(_QWORD *)(v224 + 8) = *(_QWORD *)(v225 + 8);
            v226 = *(_QWORD *)(v225 + 16);
            *(_QWORD *)(v224 + 16) = v226;
            if (v226)
            {
              v227 = (unsigned int *)(v226 + 8);
              do
                v228 = __ldxr(v227);
              while (__stxr(v228 + 1, v227));
            }
            v229 = *(_OWORD *)(v225 + 24);
            v230 = *(_OWORD *)(v225 + 40);
            *(_OWORD *)(v224 + 56) = *(_OWORD *)(v225 + 56);
            *(_OWORD *)(v224 + 40) = v230;
            *(_OWORD *)(v224 + 24) = v229;
            v442[0] = v224;
            *(_QWORD *)v224 = 1;
            do
            {
              v231 = __ldaxr((unint64_t *)v13);
              v151 = --v231 == 0;
            }
            while (__stlxr(v231, (unint64_t *)v13));
            goto LABEL_459;
          case 9:
            if (*(_QWORD *)v13 != 1)
            {
              v99 = (_QWORD *)operator new();
              v100 = v442[0] + 8;
              *v99 = *(_QWORD *)v442[0];
              turi::flexible_type_impl::ndarray<double>::ndarray(v99 + 1, v100);
              v442[0] = (uint64_t)v99;
              *v99 = 1;
              do
              {
                v101 = __ldaxr((unint64_t *)v13);
                v102 = v101 - 1;
              }
              while (__stlxr(v102, (unint64_t *)v13));
              if (!v102)
              {
                v103 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)v13);
                MEMORY[0x219A19A08](v103, 0x1030C407B73B9F7);
              }
            }
            v104 = (_QWORD *)v442[0];
            memset(&v435, 0, sizeof(v435));
            memset(&v434, 0, sizeof(v434));
            std::allocate_shared[abi:ne180100]<std::vector<double>,std::allocator<std::vector<double>>,std::vector<double> const&,void>((uint64_t)v32, &__p);
            turi::flexible_type_impl::ndarray<double>::ndarray(v436, &__p, (uint64_t)&v435, (uint64_t)&v434, 0);
            size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
            if (__p.__r_.__value_.__l.__size_)
            {
              v106 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
              do
                v107 = __ldaxr(v106);
              while (__stlxr(v107 - 1, v106));
              if (!v107)
              {
                ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
                std::__shared_weak_count::__release_weak(size);
              }
            }
            if (v434.__r_.__value_.__r.__words[0])
            {
              v434.__r_.__value_.__l.__size_ = v434.__r_.__value_.__r.__words[0];
              operator delete(v434.__r_.__value_.__l.__data_);
            }
            if (v435.__r_.__value_.__r.__words[0])
            {
              v435.__r_.__value_.__l.__size_ = v435.__r_.__value_.__r.__words[0];
              operator delete(v435.__r_.__value_.__l.__data_);
            }
            std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)(v104 + 1), (__int128 *)v436);
            v108 = (void *)v104[3];
            if (v108)
            {
              v104[4] = v108;
              operator delete(v108);
              v104[3] = 0;
              v104[4] = 0;
              v104[5] = 0;
            }
            v109 = (void *)v104[6];
            *(_OWORD *)(v104 + 3) = *(_OWORD *)&v436[16];
            v104[5] = *(_QWORD *)v437;
            *(_OWORD *)&v436[16] = 0uLL;
            *(_QWORD *)v437 = 0;
            if (v109)
            {
              v104[7] = v109;
              operator delete(v109);
              v104[6] = 0;
              v104[7] = 0;
              v104[8] = 0;
              v109 = *(void **)&v436[16];
            }
            a3.n128_u64[0] = *(_QWORD *)&v437[8];
            *((_OWORD *)v104 + 3) = *(_OWORD *)&v437[8];
            v104[8] = *(_QWORD *)&v437[24];
            memset(&v437[8], 0, 24);
            v104[9] = v438;
            if (v109)
            {
              *(_QWORD *)&v436[24] = v109;
              operator delete(v109);
            }
            v110 = *(std::__shared_weak_count **)&v436[8];
            if (!*(_QWORD *)&v436[8])
              goto LABEL_464;
            v111 = (unint64_t *)(*(_QWORD *)&v436[8] + 8);
            do
              v112 = __ldaxr(v111);
            while (__stlxr(v112 - 1, v111));
            goto LABEL_321;
          default:
            goto LABEL_640;
        }
      case 4:
        v16 = *(_QWORD *)v14;
        switch(BYTE4(v442[1]))
        {
          case 0:
          case 1:
          case 6:
          case 7:
            goto LABEL_463;
          case 2:
            if (*(_QWORD *)v13 != 1)
            {
              v17 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v17, v442[0]);
              v442[0] = (uint64_t)v17;
              *v17 = 1;
              do
              {
                v18 = __ldaxr((unint64_t *)v13);
                v19 = v18 - 1;
              }
              while (__stlxr(v19, (unint64_t *)v13));
              if (!v19)
              {
                if (*(char *)(v13 + 31) < 0)
                  operator delete(*(void **)(v13 + 8));
                MEMORY[0x219A19A08](v13, 0x1012C404EF22A49);
              }
            }
            v20 = v442[0];
            turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v435, (uint64_t *)(v16 + 8));
            goto LABEL_513;
          case 3:
            if (*(_QWORD *)v13 != 1)
            {
              v44 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v44, v442[0]);
              v442[0] = (uint64_t)v44;
              *v44 = 1;
              do
              {
                v45 = __ldaxr((unint64_t *)v13);
                v46 = v45 - 1;
              }
              while (__stlxr(v46, (unint64_t *)v13));
              if (!v46)
              {
                v47 = *(void **)(v13 + 8);
                if (v47)
                {
                  *(_QWORD *)(v13 + 16) = v47;
                  operator delete(v47);
                }
                MEMORY[0x219A19A08](v13, 0x1080C409938AC02);
              }
            }
            turi::flexible_type_impl::soft_assignment_visitor::operator()((uint64_t)v436, (_QWORD *)(v442[0] + 8), (_QWORD *)(v16 + 8));
            goto LABEL_464;
          case 4:
            if (*(_QWORD *)v13 != 1)
            {
              v138 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v138, v442[0]);
              v442[0] = (uint64_t)v138;
              *v138 = 1;
              do
              {
                v139 = __ldaxr((unint64_t *)v13);
                v140 = v139 - 1;
              }
              while (__stlxr(v140, (unint64_t *)v13));
              if (!v140)
              {
                *(_QWORD *)v436 = v13 + 8;
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v436);
                MEMORY[0x219A19A08](v13, 0x1020C405E66F15BLL);
              }
            }
            if (v442[0] != v16)
              std::vector<turi::flexible_type>::__assign_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v442[0] + 8, *(uint64_t **)(v16 + 8), *(uint64_t **)(v16 + 16), (uint64_t)(*(_QWORD *)(v16 + 16) - *(_QWORD *)(v16 + 8)) >> 4);
            goto LABEL_464;
          case 5:
            if (*(_QWORD *)v13 == 1)
              goto LABEL_463;
            v86 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v86, v442[0]);
            v442[0] = (uint64_t)v86;
            *v86 = 1;
            do
            {
              v87 = __ldaxr((unint64_t *)v13);
              v88 = --v87 == 0;
            }
            while (__stlxr(v87, (unint64_t *)v13));
            goto LABEL_436;
          case 8:
            if (*(_QWORD *)v13 == 1)
              goto LABEL_463;
            v143 = operator new();
            v144 = v442[0];
            *(_QWORD *)v143 = *(_QWORD *)v442[0];
            *(_QWORD *)(v143 + 8) = *(_QWORD *)(v144 + 8);
            v145 = *(_QWORD *)(v144 + 16);
            *(_QWORD *)(v143 + 16) = v145;
            if (v145)
            {
              v146 = (unsigned int *)(v145 + 8);
              do
                v147 = __ldxr(v146);
              while (__stxr(v147 + 1, v146));
            }
            v148 = *(_OWORD *)(v144 + 24);
            v149 = *(_OWORD *)(v144 + 40);
            *(_OWORD *)(v143 + 56) = *(_OWORD *)(v144 + 56);
            *(_OWORD *)(v143 + 40) = v149;
            *(_OWORD *)(v143 + 24) = v148;
            v442[0] = v143;
            *(_QWORD *)v143 = 1;
            do
            {
              v150 = __ldaxr((unint64_t *)v13);
              v151 = --v150 == 0;
            }
            while (__stlxr(v150, (unint64_t *)v13));
            goto LABEL_459;
          case 9:
            if (*(_QWORD *)v13 != 1)
            {
              v60 = (_QWORD *)operator new();
              v61 = v442[0] + 8;
              *v60 = *(_QWORD *)v442[0];
              turi::flexible_type_impl::ndarray<double>::ndarray(v60 + 1, v61);
              v442[0] = (uint64_t)v60;
              *v60 = 1;
              do
              {
                v62 = __ldaxr((unint64_t *)v13);
                v63 = v62 - 1;
              }
              while (__stlxr(v63, (unint64_t *)v13));
              if (!v63)
              {
                v64 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)v13);
                MEMORY[0x219A19A08](v64, 0x1030C407B73B9F7);
              }
            }
            v65 = (_QWORD *)v442[0];
            memset(&v435, 0, sizeof(v435));
            std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&v435, *(uint64_t **)(v16 + 8), *(uint64_t **)(v16 + 16), (uint64_t)(*(_QWORD *)(v16 + 16) - *(_QWORD *)(v16 + 8)) >> 4);
            turi::flexible_type_impl::get_ndvec_visitor::operator()((uint64_t *)&v435, v436);
            std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)(v65 + 1), (__int128 *)v436);
            v66 = (void *)v65[3];
            if (v66)
            {
              v65[4] = v66;
              operator delete(v66);
              v65[3] = 0;
              v65[4] = 0;
              v65[5] = 0;
            }
            v67 = (void *)v65[6];
            *(_OWORD *)(v65 + 3) = *(_OWORD *)&v436[16];
            v65[5] = *(_QWORD *)v437;
            *(_OWORD *)&v436[16] = 0uLL;
            *(_QWORD *)v437 = 0;
            if (v67)
            {
              v65[7] = v67;
              operator delete(v67);
              v65[6] = 0;
              v65[7] = 0;
              v65[8] = 0;
              v67 = *(void **)&v436[16];
            }
            *((_OWORD *)v65 + 3) = *(_OWORD *)&v437[8];
            v65[8] = *(_QWORD *)&v437[24];
            memset(&v437[8], 0, 24);
            v65[9] = v438;
            if (v67)
            {
              *(_QWORD *)&v436[24] = v67;
              operator delete(v67);
            }
            v68 = *(std::__shared_weak_count **)&v436[8];
            if (*(_QWORD *)&v436[8])
            {
              v69 = (unint64_t *)(*(_QWORD *)&v436[8] + 8);
              do
                v70 = __ldaxr(v69);
              while (__stlxr(v70 - 1, v69));
              if (!v70)
              {
                ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
                std::__shared_weak_count::__release_weak(v68);
              }
            }
            v434.__r_.__value_.__r.__words[0] = (std::string::size_type)&v435;
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v434);
            goto LABEL_464;
          default:
            goto LABEL_640;
        }
      case 5:
        v36 = *(_QWORD *)v14;
        switch(BYTE4(v442[1]))
        {
          case 0:
          case 1:
          case 6:
          case 7:
            goto LABEL_463;
          case 2:
            if (*(_QWORD *)v13 != 1)
            {
              v37 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v37, v442[0]);
              v442[0] = (uint64_t)v37;
              *v37 = 1;
              do
              {
                v38 = __ldaxr((unint64_t *)v13);
                v39 = v38 - 1;
              }
              while (__stlxr(v39, (unint64_t *)v13));
              if (!v39)
              {
                if (*(char *)(v13 + 31) < 0)
                  operator delete(*(void **)(v13 + 8));
                MEMORY[0x219A19A08](v13, 0x1012C404EF22A49);
              }
            }
            v20 = v442[0];
            turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v435, (_QWORD *)(v36 + 8));
            goto LABEL_513;
          case 3:
            if (*(_QWORD *)v13 == 1)
              goto LABEL_463;
            v93 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v93, v442[0]);
            v442[0] = (uint64_t)v93;
            *v93 = 1;
            do
            {
              v94 = __ldaxr((unint64_t *)v13);
              v59 = --v94 == 0;
            }
            while (__stlxr(v94, (unint64_t *)v13));
            goto LABEL_340;
          case 4:
            if (*(_QWORD *)v13 == 1)
              goto LABEL_463;
            v262 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v262, v442[0]);
            v442[0] = (uint64_t)v262;
            *v262 = 1;
            do
            {
              v263 = __ldaxr((unint64_t *)v13);
              v161 = --v263 == 0;
            }
            while (__stlxr(v263, (unint64_t *)v13));
            goto LABEL_449;
          case 5:
            if (*(_QWORD *)v13 != 1)
            {
              v207 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v207, v442[0]);
              v442[0] = (uint64_t)v207;
              *v207 = 1;
              do
              {
                v208 = __ldaxr((unint64_t *)v13);
                v209 = v208 - 1;
              }
              while (__stlxr(v209, (unint64_t *)v13));
              if (!v209)
              {
                *(_QWORD *)v436 = v13 + 8;
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v436);
                MEMORY[0x219A19A08](v13, 0x1020C405E66F15BLL);
              }
            }
            if (v442[0] != v36)
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__assign_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>((char **)(v442[0] + 8), *(uint64_t **)(v36 + 8), *(uint64_t **)(v36 + 16), (uint64_t)(*(_QWORD *)(v36 + 16) - *(_QWORD *)(v36 + 8)) >> 5);
            goto LABEL_464;
          case 8:
            if (*(_QWORD *)v13 == 1)
              goto LABEL_463;
            v266 = operator new();
            v267 = v442[0];
            *(_QWORD *)v266 = *(_QWORD *)v442[0];
            *(_QWORD *)(v266 + 8) = *(_QWORD *)(v267 + 8);
            v268 = *(_QWORD *)(v267 + 16);
            *(_QWORD *)(v266 + 16) = v268;
            if (v268)
            {
              v269 = (unsigned int *)(v268 + 8);
              do
                v270 = __ldxr(v269);
              while (__stxr(v270 + 1, v269));
            }
            v271 = *(_OWORD *)(v267 + 24);
            v272 = *(_OWORD *)(v267 + 40);
            *(_OWORD *)(v266 + 56) = *(_OWORD *)(v267 + 56);
            *(_OWORD *)(v266 + 40) = v272;
            *(_OWORD *)(v266 + 24) = v271;
            v442[0] = v266;
            *(_QWORD *)v266 = 1;
            do
            {
              v273 = __ldaxr((unint64_t *)v13);
              v151 = --v273 == 0;
            }
            while (__stlxr(v273, (unint64_t *)v13));
            goto LABEL_459;
          case 9:
            if (*(_QWORD *)v13 == 1)
              goto LABEL_463;
            v152 = (_QWORD *)operator new();
            v153 = v442[0] + 8;
            *v152 = *(_QWORD *)v442[0];
            turi::flexible_type_impl::ndarray<double>::ndarray(v152 + 1, v153);
            v442[0] = (uint64_t)v152;
            *v152 = 1;
            do
            {
              v154 = __ldaxr((unint64_t *)v13);
              v85 = --v154 == 0;
            }
            while (__stlxr(v154, (unint64_t *)v13));
            goto LABEL_279;
          default:
            goto LABEL_640;
        }
      case 6:
        switch(BYTE4(v442[1]))
        {
          case 0:
            v15 = (uint64_t)(*(_QWORD *)v14 << 8) >> 8;
            goto LABEL_74;
          case 1:
            a3.n128_f64[0] = (double)*(int *)(v14 + 8) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)v14 << 8) >> 8);
LABEL_329:
            v442[0] = a3.n128_u64[0];
            goto LABEL_464;
          case 2:
            if (*(_QWORD *)v13 != 1)
            {
              v213 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v213, v442[0]);
              v442[0] = (uint64_t)v213;
              *v213 = 1;
              do
              {
                v214 = __ldaxr((unint64_t *)v13);
                v215 = v214 - 1;
              }
              while (__stlxr(v215, (unint64_t *)v13));
              if (!v215)
              {
                if (*(char *)(v13 + 31) < 0)
                  operator delete(*(void **)(v13 + 8));
                MEMORY[0x219A19A08](v13, 0x1012C404EF22A49);
              }
            }
            v20 = v442[0];
            v216 = *(_DWORD *)(v14 + 8);
            v435.__r_.__value_.__r.__words[0] = *(_QWORD *)v14;
            LODWORD(v435.__r_.__value_.__r.__words[1]) = v216;
            turi::flexible_type_impl::get_string_visitor::operator()((turi::flexible_type_impl *)&v435, (std::string *)v436);
            goto LABEL_513;
          case 3:
            if (*(_QWORD *)v13 == 1)
              goto LABEL_463;
            v141 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v141, v442[0]);
            v442[0] = (uint64_t)v141;
            *v141 = 1;
            do
            {
              v142 = __ldaxr((unint64_t *)v13);
              v59 = --v142 == 0;
            }
            while (__stlxr(v142, (unint64_t *)v13));
            goto LABEL_340;
          case 4:
            if (*(_QWORD *)v13 == 1)
              goto LABEL_463;
            v264 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v264, v442[0]);
            v442[0] = (uint64_t)v264;
            *v264 = 1;
            do
            {
              v265 = __ldaxr((unint64_t *)v13);
              v161 = --v265 == 0;
            }
            while (__stlxr(v265, (unint64_t *)v13));
            goto LABEL_449;
          case 5:
            if (*(_QWORD *)v13 == 1)
              goto LABEL_463;
            v274 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v274, v442[0]);
            v442[0] = (uint64_t)v274;
            *v274 = 1;
            do
            {
              v275 = __ldaxr((unint64_t *)v13);
              v88 = --v275 == 0;
            }
            while (__stlxr(v275, (unint64_t *)v13));
            goto LABEL_436;
          case 6:
            v223 = *(_DWORD *)(v14 + 8);
            v442[0] = *(_QWORD *)v14;
            LODWORD(v442[1]) = v223;
            goto LABEL_464;
          case 7:
            goto LABEL_463;
          case 8:
            if (*(_QWORD *)v13 == 1)
              goto LABEL_463;
            v276 = operator new();
            v277 = v442[0];
            *(_QWORD *)v276 = *(_QWORD *)v442[0];
            *(_QWORD *)(v276 + 8) = *(_QWORD *)(v277 + 8);
            v278 = *(_QWORD *)(v277 + 16);
            *(_QWORD *)(v276 + 16) = v278;
            if (v278)
            {
              v279 = (unsigned int *)(v278 + 8);
              do
                v280 = __ldxr(v279);
              while (__stxr(v280 + 1, v279));
            }
            v281 = *(_OWORD *)(v277 + 24);
            v282 = *(_OWORD *)(v277 + 40);
            *(_OWORD *)(v276 + 56) = *(_OWORD *)(v277 + 56);
            *(_OWORD *)(v276 + 40) = v282;
            *(_OWORD *)(v276 + 24) = v281;
            v442[0] = v276;
            *(_QWORD *)v276 = 1;
            do
            {
              v283 = __ldaxr((unint64_t *)v13);
              v151 = --v283 == 0;
            }
            while (__stlxr(v283, (unint64_t *)v13));
            goto LABEL_459;
          case 9:
            if (*(_QWORD *)v13 == 1)
              goto LABEL_463;
            v162 = (_QWORD *)operator new();
            v163 = v442[0] + 8;
            *v162 = *(_QWORD *)v442[0];
            turi::flexible_type_impl::ndarray<double>::ndarray(v162 + 1, v163);
            v442[0] = (uint64_t)v162;
            *v162 = 1;
            do
            {
              v164 = __ldaxr((unint64_t *)v13);
              v85 = --v164 == 0;
            }
            while (__stlxr(v164, (unint64_t *)v13));
            goto LABEL_279;
          default:
            goto LABEL_640;
        }
      case 7:
        switch(BYTE4(v442[1]))
        {
          case 0:
          case 6:
            goto LABEL_463;
          case 1:
            v15 = 0x7FF8000000000000;
LABEL_74:
            v442[0] = v15;
            goto LABEL_464;
          case 2:
            if (*(_QWORD *)v13 != 1)
            {
              v89 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v89, v442[0]);
              v442[0] = (uint64_t)v89;
              *v89 = 1;
              do
              {
                v90 = __ldaxr((unint64_t *)v13);
                v91 = v90 - 1;
              }
              while (__stlxr(v91, (unint64_t *)v13));
              if (!v91)
              {
                if (*(char *)(v13 + 31) < 0)
                  operator delete(*(void **)(v13 + 8));
                MEMORY[0x219A19A08](v13, 0x1012C404EF22A49);
              }
            }
            v92 = v442[0] + 8;
            if (*(char *)(v442[0] + 31) < 0)
              operator delete(*(void **)v92);
            *(_QWORD *)v92 = 0;
            *(_QWORD *)(v92 + 8) = 0;
            *(_QWORD *)(v92 + 16) = 0;
            goto LABEL_464;
          case 3:
            if (*(_QWORD *)v13 == 1)
              goto LABEL_463;
            v204 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v204, v442[0]);
            v442[0] = (uint64_t)v204;
            *v204 = 1;
            do
            {
              v205 = __ldaxr((unint64_t *)v13);
              v59 = --v205 == 0;
            }
            while (__stlxr(v205, (unint64_t *)v13));
LABEL_340:
            if (!v59)
              goto LABEL_463;
            v165 = 0x1080C409938AC02;
            v206 = *(void **)(v13 + 8);
            if (v206)
            {
              *(_QWORD *)(v13 + 16) = v206;
              operator delete(v206);
            }
            goto LABEL_462;
          case 4:
            if (*(_QWORD *)v13 == 1)
              goto LABEL_463;
            v221 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v221, v442[0]);
            v442[0] = (uint64_t)v221;
            *v221 = 1;
            do
            {
              v222 = __ldaxr((unint64_t *)v13);
              v161 = --v222 == 0;
            }
            while (__stlxr(v222, (unint64_t *)v13));
            goto LABEL_449;
          case 5:
            if (*(_QWORD *)v13 == 1)
              goto LABEL_463;
            v157 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v157, v442[0]);
            v442[0] = (uint64_t)v157;
            *v157 = 1;
            do
            {
              v158 = __ldaxr((unint64_t *)v13);
              v88 = --v158 == 0;
            }
            while (__stlxr(v158, (unint64_t *)v13));
            goto LABEL_436;
          case 7:
            goto LABEL_464;
          case 8:
            if (*(_QWORD *)v13 == 1)
              goto LABEL_463;
            v232 = operator new();
            v233 = v442[0];
            *(_QWORD *)v232 = *(_QWORD *)v442[0];
            *(_QWORD *)(v232 + 8) = *(_QWORD *)(v233 + 8);
            v234 = *(_QWORD *)(v233 + 16);
            *(_QWORD *)(v232 + 16) = v234;
            if (v234)
            {
              v235 = (unsigned int *)(v234 + 8);
              do
                v236 = __ldxr(v235);
              while (__stxr(v236 + 1, v235));
            }
            v237 = *(_OWORD *)(v233 + 24);
            v238 = *(_OWORD *)(v233 + 40);
            *(_OWORD *)(v232 + 56) = *(_OWORD *)(v233 + 56);
            *(_OWORD *)(v232 + 40) = v238;
            *(_OWORD *)(v232 + 24) = v237;
            v442[0] = v232;
            *(_QWORD *)v232 = 1;
            do
            {
              v239 = __ldaxr((unint64_t *)v13);
              v151 = --v239 == 0;
            }
            while (__stlxr(v239, (unint64_t *)v13));
            goto LABEL_459;
          case 9:
            if (*(_QWORD *)v13 == 1)
              goto LABEL_463;
            v121 = (_QWORD *)operator new();
            v122 = v442[0] + 8;
            *v121 = *(_QWORD *)v442[0];
            turi::flexible_type_impl::ndarray<double>::ndarray(v121 + 1, v122);
            v442[0] = (uint64_t)v121;
            *v121 = 1;
            do
            {
              v123 = __ldaxr((unint64_t *)v13);
              v85 = --v123 == 0;
            }
            while (__stlxr(v123, (unint64_t *)v13));
LABEL_279:
            if (!v85)
              goto LABEL_463;
            v165 = 0x1030C407B73B9F7;
            std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)v13);
            goto LABEL_462;
          default:
            goto LABEL_640;
        }
      case 8:
        v40 = (uint64_t *)(*(_QWORD *)v14 + 8);
        switch(BYTE4(v442[1]))
        {
          case 0:
          case 1:
          case 6:
          case 7:
            goto LABEL_463;
          case 2:
            if (*(_QWORD *)v13 != 1)
            {
              v41 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v41, v442[0]);
              v442[0] = (uint64_t)v41;
              *v41 = 1;
              do
              {
                v42 = __ldaxr((unint64_t *)v13);
                v43 = v42 - 1;
              }
              while (__stlxr(v43, (unint64_t *)v13));
              if (!v43)
              {
                if (*(char *)(v13 + 31) < 0)
                  operator delete(*(void **)(v13 + 8));
                MEMORY[0x219A19A08](v13, 0x1012C404EF22A49);
              }
            }
            v20 = v442[0];
            turi::flexible_type_impl::get_string_visitor::operator()();
            goto LABEL_513;
          case 3:
            if (*(_QWORD *)v13 != 1)
            {
              v113 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v113, v442[0]);
              v442[0] = (uint64_t)v113;
              *v113 = 1;
              do
              {
                v114 = __ldaxr((unint64_t *)v13);
                v115 = v114 - 1;
              }
              while (__stlxr(v115, (unint64_t *)v13));
              if (!v115)
              {
                v116 = *(void **)(v13 + 8);
                if (v116)
                {
                  *(_QWORD *)(v13 + 16) = v116;
                  operator delete(v116);
                }
                a3.n128_f64[0] = MEMORY[0x219A19A08](v13, 0x1080C409938AC02);
              }
            }
            v117 = (_QWORD *)v442[0];
            turi::flexible_type_impl::get_vec_visitor::operator()(v40, (double **)v436, a3.n128_u64[0]);
            v118 = (void *)v117[1];
            if (v118)
            {
              v117[2] = v118;
              operator delete(v118);
              v117[1] = 0;
              v117[2] = 0;
              v117[3] = 0;
            }
            a3.n128_u64[0] = *(_QWORD *)v436;
            *(_OWORD *)(v117 + 1) = *(_OWORD *)v436;
            v117[3] = *(_QWORD *)&v436[16];
            goto LABEL_464;
          case 4:
            if (*(_QWORD *)v13 == 1)
              goto LABEL_463;
            v284 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v284, v442[0]);
            v442[0] = (uint64_t)v284;
            *v284 = 1;
            do
            {
              v285 = __ldaxr((unint64_t *)v13);
              v161 = --v285 == 0;
            }
            while (__stlxr(v285, (unint64_t *)v13));
            goto LABEL_449;
          case 5:
            if (*(_QWORD *)v13 == 1)
              goto LABEL_463;
            v240 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v240, v442[0]);
            v442[0] = (uint64_t)v240;
            *v240 = 1;
            do
            {
              v241 = __ldaxr((unint64_t *)v13);
              v88 = --v241 == 0;
            }
            while (__stlxr(v241, (unint64_t *)v13));
            goto LABEL_436;
          case 8:
            if (*(_QWORD *)v13 == 1)
              goto LABEL_463;
            v286 = operator new();
            v287 = v442[0];
            *(_QWORD *)v286 = *(_QWORD *)v442[0];
            *(_QWORD *)(v286 + 8) = *(_QWORD *)(v287 + 8);
            v288 = *(_QWORD *)(v287 + 16);
            *(_QWORD *)(v286 + 16) = v288;
            if (v288)
            {
              v289 = (unsigned int *)(v288 + 8);
              do
                v290 = __ldxr(v289);
              while (__stxr(v290 + 1, v289));
            }
            v291 = *(_OWORD *)(v287 + 24);
            v292 = *(_OWORD *)(v287 + 40);
            *(_OWORD *)(v286 + 56) = *(_OWORD *)(v287 + 56);
            *(_OWORD *)(v286 + 40) = v292;
            *(_OWORD *)(v286 + 24) = v291;
            v442[0] = v286;
            *(_QWORD *)v286 = 1;
            do
            {
              v293 = __ldaxr((unint64_t *)v13);
              v151 = --v293 == 0;
            }
            while (__stlxr(v293, (unint64_t *)v13));
LABEL_459:
            if (!v151)
              goto LABEL_463;
            v165 = 0x1030C40F1F0227BLL;
            boost::detail::shared_count::~shared_count((unsigned int **)(v13 + 16));
            goto LABEL_462;
          case 9:
            if (*(_QWORD *)v13 != 1)
            {
              v185 = (_QWORD *)operator new();
              v186 = v442[0] + 8;
              *v185 = *(_QWORD *)v442[0];
              turi::flexible_type_impl::ndarray<double>::ndarray(v185 + 1, v186);
              v442[0] = (uint64_t)v185;
              *v185 = 1;
              do
              {
                v187 = __ldaxr((unint64_t *)v13);
                v188 = v187 - 1;
              }
              while (__stlxr(v188, (unint64_t *)v13));
              if (!v188)
              {
                v189 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)v13);
                a3.n128_f64[0] = MEMORY[0x219A19A08](v189, 0x1030C407B73B9F7);
              }
            }
            v190 = (_QWORD *)v442[0];
            turi::flexible_type_impl::get_ndvec_visitor::operator()(v40, v436, a3.n128_u64[0]);
            std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)(v190 + 1), (__int128 *)v436);
            v191 = (void *)v190[3];
            if (v191)
            {
              v190[4] = v191;
              operator delete(v191);
              v190[3] = 0;
              v190[4] = 0;
              v190[5] = 0;
            }
            v192 = (void *)v190[6];
            *(_OWORD *)(v190 + 3) = *(_OWORD *)&v436[16];
            v190[5] = *(_QWORD *)v437;
            *(_OWORD *)&v436[16] = 0uLL;
            *(_QWORD *)v437 = 0;
            if (v192)
            {
              v190[7] = v192;
              operator delete(v192);
              v190[6] = 0;
              v190[7] = 0;
              v190[8] = 0;
              v192 = *(void **)&v436[16];
            }
            a3.n128_u64[0] = *(_QWORD *)&v437[8];
            *((_OWORD *)v190 + 3) = *(_OWORD *)&v437[8];
            v190[8] = *(_QWORD *)&v437[24];
            memset(&v437[8], 0, 24);
            v190[9] = v438;
            if (v192)
            {
              *(_QWORD *)&v436[24] = v192;
              operator delete(v192);
            }
            v110 = *(std::__shared_weak_count **)&v436[8];
            if (*(_QWORD *)&v436[8])
            {
              v193 = (unint64_t *)(*(_QWORD *)&v436[8] + 8);
              do
                v112 = __ldaxr(v193);
              while (__stlxr(v112 - 1, v193));
LABEL_321:
              if (!v112)
              {
                ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
                std::__shared_weak_count::__release_weak(v110);
              }
            }
            goto LABEL_464;
          default:
            goto LABEL_640;
        }
      case 9:
        v21 = *(_QWORD *)v14;
        v22 = v21 + 8;
        switch(BYTE4(v442[1]))
        {
          case 0:
          case 1:
          case 6:
          case 7:
            goto LABEL_463;
          case 2:
            if (*(_QWORD *)v13 != 1)
            {
              v23 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v23, v442[0]);
              v442[0] = (uint64_t)v23;
              *v23 = 1;
              do
              {
                v24 = __ldaxr((unint64_t *)v13);
                v25 = v24 - 1;
              }
              while (__stlxr(v25, (unint64_t *)v13));
              if (!v25)
              {
                if (*(char *)(v13 + 31) < 0)
                  operator delete(*(void **)(v13 + 8));
                MEMORY[0x219A19A08](v13, 0x1012C404EF22A49);
              }
            }
            v20 = v442[0];
            turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v435, (_QWORD *)(v21 + 8));
LABEL_513:
            v136 = v20 + 8;
            if (*(char *)(v20 + 31) < 0)
              operator delete(*(void **)v136);
            a3 = *(__n128 *)v436;
            v137 = *(_QWORD *)&v436[16];
LABEL_516:
            *(_QWORD *)(v136 + 16) = v137;
            *(__n128 *)v136 = a3;
            goto LABEL_464;
          case 3:
            if (*(_QWORD *)v13 != 1)
            {
              v48 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v48, v442[0]);
              v442[0] = (uint64_t)v48;
              *v48 = 1;
              do
              {
                v49 = __ldaxr((unint64_t *)v13);
                v50 = v49 - 1;
              }
              while (__stlxr(v50, (unint64_t *)v13));
              if (!v50)
              {
                v51 = *(void **)(v13 + 8);
                if (v51)
                {
                  *(_QWORD *)(v13 + 16) = v51;
                  operator delete(v51);
                }
                MEMORY[0x219A19A08](v13, 0x1080C409938AC02);
              }
            }
            v52 = (char *)(v442[0] + 8);
            if (!*(_QWORD *)(v21 + 72))
            {
              v54 = *(uint64_t **)(v21 + 24);
              v53 = *(uint64_t **)(v21 + 32);
              v55 = *(_QWORD **)(v21 + 8);
              if (v53 == v54 || v55 == 0)
              {
                v325 = 0;
              }
              else
              {
                v325 = 1;
                do
                {
                  v326 = *v54++;
                  v325 *= v326;
                }
                while (v54 != v53);
              }
              if (v325 == (uint64_t)(v55[1] - *v55) >> 3
                && turi::flexible_type_impl::ndarray<double>::last_index((_QWORD *)(v21 + 8)) == (uint64_t)(*(_QWORD *)(*(_QWORD *)v22 + 8) - **(_QWORD **)v22) >> 3)
              {
                if (!turi::flexible_type_impl::ndarray<double>::is_full((_QWORD *)(v21 + 8)))
                  turi::flexible_type_impl::ndarray<double>::elements(void)const::{lambda(void)#1}::operator()();
                v32 = *(char ***)v22;
                if (v52 != (char *)v32)
                {
                  v75 = (uint64_t *)(v32 + 1);
LABEL_136:
                  std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(v52, *v32, *v75, (*v75 - (uint64_t)*v32) >> 3);
                }
                goto LABEL_464;
              }
            }
            if (!turi::flexible_type_impl::ndarray<double>::is_valid((_QWORD *)(v21 + 8)))
              turi::flexible_type_impl::ndarray<double>::compact(void)const::{lambda(void)#1}::operator()();
            if (turi::flexible_type_impl::ndarray<double>::is_full((_QWORD *)(v21 + 8)))
            {
              turi::flexible_type_impl::ndarray<double>::ndarray(v436, v21 + 8);
              goto LABEL_576;
            }
            memset(&v435, 0, sizeof(v435));
            memset(&v434, 0, sizeof(v434));
            memset(&__p, 0, sizeof(__p));
            turi::flexible_type_impl::ndarray<double>::ndarray(v436, (uint64_t)&v435, (uint64_t)&v434, (uint64_t)&__p, 0);
            if (__p.__r_.__value_.__r.__words[0])
            {
              __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            if (v434.__r_.__value_.__r.__words[0])
            {
              v434.__r_.__value_.__l.__size_ = v434.__r_.__value_.__r.__words[0];
              operator delete(v434.__r_.__value_.__l.__data_);
            }
            if (v435.__r_.__value_.__r.__words[0])
            {
              v435.__r_.__value_.__l.__size_ = v435.__r_.__value_.__r.__words[0];
              operator delete(v435.__r_.__value_.__l.__data_);
            }
            v438 = 0;
            if (&v436[16] != (_BYTE *)(v21 + 24))
              std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(&v436[16], *(char **)(v21 + 24), *(_QWORD *)(v21 + 32), (uint64_t)(*(_QWORD *)(v21 + 32) - *(_QWORD *)(v21 + 24)) >> 3);
            v328 = *(uint64_t **)(v21 + 24);
            v327 = *(uint64_t **)(v21 + 32);
            if (v327 == v328 || !*(_QWORD *)v22)
            {
              v329 = 0;
            }
            else
            {
              v329 = 1;
              do
              {
                v330 = *v328++;
                v329 *= v330;
              }
              while (v328 != v327);
            }
            std::vector<double>::resize(*(uint64_t *)v436, v329);
            std::vector<unsigned long>::resize((uint64_t)&v437[8], (uint64_t)(*(_QWORD *)(v21 + 32) - *(_QWORD *)(v21 + 24)) >> 3);
            if (*(_QWORD *)&v436[24] == *(_QWORD *)&v436[16] || *(_QWORD *)(*(_QWORD *)v436 + 8) == **(_QWORD **)v436)
              goto LABEL_576;
            std::vector<std::pair<unsigned long,unsigned long>>::vector(&v435, (uint64_t)(*(_QWORD *)(v21 + 56) - *(_QWORD *)(v21 + 48)) >> 3);
            v331 = *(_QWORD *)(v21 + 48);
            v332 = *(_QWORD *)(v21 + 56);
            v333 = (unint64_t *)v435.__r_.__value_.__r.__words[0];
            v334 = v332 - v331;
            if (v332 != v331)
            {
              v335 = 0;
              v336 = v334 >> 3;
              if (v336 <= 1)
                v336 = 1;
              v337 = (_QWORD *)(v435.__r_.__value_.__r.__words[0] + 8);
              do
              {
                *(v337 - 1) = *(_QWORD *)(v331 + 8 * v335);
                *v337 = v335++;
                v337 += 2;
              }
              while (v336 != v335);
            }
            std::sort[abi:ne180100]<std::reverse_iterator<std::__wrap_iter<std::pair<unsigned long,unsigned long> *>>>(v435.__r_.__value_.__l.__size_, (unint64_t *)v435.__r_.__value_.__l.__size_, (uint64_t)v333, v333);
            v338 = v435.__r_.__value_.__r.__words[0];
            v339 = *(_QWORD *)&v437[8];
            *(_QWORD *)(*(_QWORD *)&v437[8] + 8 * *(_QWORD *)(v435.__r_.__value_.__r.__words[0] + 8)) = 1;
            v340 = *(_QWORD *)(v21 + 56) - *(_QWORD *)(v21 + 48);
            if ((unint64_t)v340 >= 9)
            {
              v341 = v340 >> 3;
              v342 = *(_QWORD *)&v436[16];
              if (v341 <= 2)
                v341 = 2;
              v343 = (uint64_t *)(v338 + 24);
              v344 = v341 - 1;
              do
              {
                v345 = *(_QWORD *)(v342 + 8 * *(v343 - 2)) * *(_QWORD *)(v339 + 8 * *(v343 - 2));
                v346 = *v343;
                v343 += 2;
                *(_QWORD *)(v339 + 8 * v346) = v345;
                --v344;
              }
              while (v344);
            }
            v347 = (uint64_t)(*(_QWORD *)(v21 + 32) - *(_QWORD *)(v21 + 24)) >> 3;
            __p.__r_.__value_.__r.__words[0] = 0;
            std::vector<unsigned long>::vector(&v434, v347, &__p);
            v348 = *(_OWORD *)&v434.__r_.__value_.__l.__data_;
            v349 = v434.__r_.__value_.__l.__size_ - v434.__r_.__value_.__r.__words[0];
            v350 = (uint64_t)(v434.__r_.__value_.__l.__size_ - v434.__r_.__value_.__r.__words[0]) >> 3;
            v351 = v350 - 1;
            if (v350 <= 1)
              v352 = 1;
            else
              v352 = (uint64_t)(v434.__r_.__value_.__l.__size_ - v434.__r_.__value_.__r.__words[0]) >> 3;
            v353 = *(uint64_t **)&v437[8];
            v354 = **(_QWORD **)v436;
            break;
          case 4:
            if (*(_QWORD *)v13 == 1)
              goto LABEL_463;
            v159 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v159, v442[0]);
            v442[0] = (uint64_t)v159;
            *v159 = 1;
            do
            {
              v160 = __ldaxr((unint64_t *)v13);
              v161 = --v160 == 0;
            }
            while (__stlxr(v160, (unint64_t *)v13));
LABEL_449:
            if (!v161)
              goto LABEL_463;
            *(_QWORD *)v436 = v13 + 8;
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v436);
            goto LABEL_452;
          case 5:
            if (*(_QWORD *)v13 == 1)
              goto LABEL_463;
            v119 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v119, v442[0]);
            v442[0] = (uint64_t)v119;
            *v119 = 1;
            do
            {
              v120 = __ldaxr((unint64_t *)v13);
              v88 = --v120 == 0;
            }
            while (__stlxr(v120, (unint64_t *)v13));
LABEL_436:
            if (!v88)
              goto LABEL_463;
            *(_QWORD *)v436 = v13 + 8;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v436);
LABEL_452:
            v165 = 0x1020C405E66F15BLL;
LABEL_462:
            MEMORY[0x219A19A08](v13, v165);
LABEL_463:
            turi::flexible_type_fail(0);
            goto LABEL_464;
          case 8:
            if (*(_QWORD *)v13 != 1)
            {
              v171 = operator new();
              v172 = v442[0];
              *(_QWORD *)v171 = *(_QWORD *)v442[0];
              *(_QWORD *)(v171 + 8) = *(_QWORD *)(v172 + 8);
              v173 = *(_QWORD *)(v172 + 16);
              *(_QWORD *)(v171 + 16) = v173;
              if (v173)
              {
                v174 = (unsigned int *)(v173 + 8);
                do
                  v175 = __ldxr(v174);
                while (__stxr(v175 + 1, v174));
              }
              v176 = *(_OWORD *)(v172 + 24);
              v177 = *(_OWORD *)(v172 + 40);
              *(_OWORD *)(v171 + 56) = *(_OWORD *)(v172 + 56);
              *(_OWORD *)(v171 + 40) = v177;
              *(_OWORD *)(v171 + 24) = v176;
              v442[0] = v171;
              *(_QWORD *)v171 = 1;
              do
              {
                v178 = __ldaxr((unint64_t *)v13);
                v179 = v178 - 1;
              }
              while (__stlxr(v179, (unint64_t *)v13));
              if (!v179)
              {
                boost::detail::shared_count::~shared_count((unsigned int **)(v13 + 16));
                MEMORY[0x219A19A08](v13, 0x1030C40F1F0227BLL);
              }
            }
            v180 = v442[0];
            turi::flexible_type_impl::get_img_visitor::operator()(v22, (turi::image_type *)v436);
            v181 = *(_OWORD *)v436;
            *(_OWORD *)v436 = 0uLL;
            v182 = *(_OWORD *)(v180 + 8);
            *(_OWORD *)(v180 + 8) = v181;
            *(_OWORD *)&v435.__r_.__value_.__l.__data_ = v182;
            boost::detail::shared_count::~shared_count((unsigned int **)&v435.__r_.__value_.__l.__size_);
            v183 = *(_OWORD *)&v436[16];
            v184 = *(_OWORD *)v437;
            *(_OWORD *)(v180 + 56) = *(_OWORD *)&v437[16];
            *(_OWORD *)(v180 + 40) = v184;
            *(_OWORD *)(v180 + 24) = v183;
            boost::detail::shared_count::~shared_count((unsigned int **)&v436[8]);
            goto LABEL_464;
          case 9:
            if (*(_QWORD *)v13 != 1)
            {
              v76 = (_QWORD *)operator new();
              v77 = v442[0] + 8;
              *v76 = *(_QWORD *)v442[0];
              turi::flexible_type_impl::ndarray<double>::ndarray(v76 + 1, v77);
              v442[0] = (uint64_t)v76;
              *v76 = 1;
              do
              {
                v78 = __ldaxr((unint64_t *)v13);
                v79 = v78 - 1;
              }
              while (__stlxr(v79, (unint64_t *)v13));
              if (!v79)
              {
                v80 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)v13);
                MEMORY[0x219A19A08](v80, 0x1030C407B73B9F7);
              }
            }
            v81 = v442[0];
            std::shared_ptr<turi::neural_net::mps_command_queue>::operator=[abi:ne180100]((_QWORD *)(v442[0] + 8), (uint64_t *)(v21 + 8));
            if (v81 != v21)
            {
              std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((char *)(v81 + 24), *(char **)(v21 + 24), *(_QWORD *)(v21 + 32), (uint64_t)(*(_QWORD *)(v21 + 32) - *(_QWORD *)(v21 + 24)) >> 3);
              std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((char *)(v81 + 48), *(char **)(v21 + 48), *(_QWORD *)(v21 + 56), (uint64_t)(*(_QWORD *)(v21 + 56) - *(_QWORD *)(v21 + 48)) >> 3);
            }
            *(_QWORD *)(v81 + 72) = *(_QWORD *)(v21 + 72);
            goto LABEL_464;
          default:
            goto LABEL_640;
        }
        break;
      default:
LABEL_640:
        result = turi::flexible_type_fail(0);
        __break(1u);
        return result;
    }
    while (1)
    {
      if (*((_QWORD *)&v348 + 1) == (_QWORD)v348)
      {
        v362 = 0;
        v363 = *(_QWORD *)(**(_QWORD **)(v21 + 8) + 8 * *(_QWORD *)(v21 + 72));
      }
      else
      {
        v355 = 0;
        v356 = *(uint64_t **)(v21 + 48);
        v357 = (uint64_t *)v348;
        v358 = v352;
        do
        {
          v360 = *v357++;
          v359 = v360;
          v361 = *v356++;
          v355 += v361 * v359;
          --v358;
        }
        while (v358);
        v362 = 0;
        v363 = *(_QWORD *)(**(_QWORD **)(v21 + 8) + 8 * (*(_QWORD *)(v21 + 72) + v355));
        v364 = (uint64_t *)v348;
        v365 = v353;
        v366 = v352;
        do
        {
          v368 = *v364++;
          v367 = v368;
          v369 = *v365++;
          v362 += v369 * v367;
          --v366;
        }
        while (v366);
      }
      *(_QWORD *)(v354 + 8 * v362) = v363;
      v370 = v350;
      v371 = v350 - 1;
      if (v349 < 1)
        goto LABEL_570;
      v372 = *(_QWORD *)(v21 + 24);
      v373 = *(_QWORD *)(v348 + 8 * v351) + 1;
      *(_QWORD *)(v348 + 8 * v351) = v373;
      if (v373 >= *(_QWORD *)(v372 + 8 * v351))
        break;
      v370 = 1;
      v371 = v350 - 1;
LABEL_570:
      if ((v371 & 0x8000000000000000) != 0 || !v370)
        goto LABEL_572;
    }
    v374 = v372 - 16;
    v375 = v350;
    v376 = (unint64_t *)(v348 + (v349 & 0xFFFFFFFFFFFFFFF8) - 16);
    while (1)
    {
      v377 = v375 - 1;
      v376[1] = 0;
      if ((uint64_t)(v375 - 1) <= 0)
        break;
      v378 = *v376 + 1;
      *v376-- = v378;
      v379 = *(_QWORD *)(v374 + 8 * v375--);
      if (v378 < v379)
      {
        v371 = v377 - 1;
        v370 = 1;
        goto LABEL_570;
      }
    }
LABEL_572:
    if ((_QWORD)v348)
    {
      v434.__r_.__value_.__l.__size_ = v348;
      operator delete((void *)v348);
    }
    if (v435.__r_.__value_.__r.__words[0])
    {
      v435.__r_.__value_.__l.__size_ = v435.__r_.__value_.__r.__words[0];
      operator delete(v435.__r_.__value_.__l.__data_);
    }
LABEL_576:
    turi::flexible_type_impl::ndarray<double>::ensure_unique((uint64_t *)v436);
    if (!turi::flexible_type_impl::ndarray<double>::is_full(v436))
      turi::flexible_type_impl::ndarray<double>::elements(void)::{lambda(void)#1}::operator()();
    if (v52 != *(char **)v436)
      std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(v52, **(char ***)v436, *(_QWORD *)(*(_QWORD *)v436 + 8), (uint64_t)(*(_QWORD *)(*(_QWORD *)v436 + 8) - **(_QWORD **)v436) >> 3);
    turi::flexible_type_impl::ndarray<double>::~ndarray(v436);
LABEL_464:
    v294 = *a2 + 16 * v7;
    if (v442 == (uint64_t *)v294)
    {
      switch(BYTE4(v442[1]))
      {
        case 2:
          v380 = (unint64_t *)v442[0];
          do
          {
            v381 = __ldaxr(v380);
            v382 = v381 - 1;
          }
          while (__stlxr(v382, v380));
          if (!v382)
          {
            v383 = v442[0];
            if (v442[0])
            {
              if (*(char *)(v442[0] + 31) < 0)
                operator delete(*(void **)(v442[0] + 8));
              v384 = v383;
              v385 = 0x1012C404EF22A49;
              goto LABEL_621;
            }
          }
          break;
        case 3:
          v397 = (unint64_t *)v442[0];
          do
          {
            v398 = __ldaxr(v397);
            v399 = v398 - 1;
          }
          while (__stlxr(v399, v397));
          if (!v399)
          {
            v400 = v442[0];
            if (v442[0])
            {
              v401 = *(void **)(v442[0] + 8);
              if (v401)
              {
                *(_QWORD *)(v442[0] + 16) = v401;
                operator delete(v401);
              }
              v384 = v400;
              v385 = 0x1080C409938AC02;
              goto LABEL_621;
            }
          }
          break;
        case 4:
          v386 = (unint64_t *)v442[0];
          do
          {
            v387 = __ldaxr(v386);
            v388 = v387 - 1;
          }
          while (__stlxr(v388, v386));
          if (!v388)
          {
            v389 = v442[0];
            if (v442[0])
            {
              *(_QWORD *)v436 = v442[0] + 8;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v436);
              goto LABEL_614;
            }
          }
          break;
        case 5:
          v402 = (unint64_t *)v442[0];
          do
          {
            v403 = __ldaxr(v402);
            v404 = v403 - 1;
          }
          while (__stlxr(v404, v402));
          if (!v404)
          {
            v389 = v442[0];
            if (v442[0])
            {
              *(_QWORD *)v436 = v442[0] + 8;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v436);
LABEL_614:
              v384 = v389;
              v385 = 0x1020C405E66F15BLL;
              goto LABEL_621;
            }
          }
          break;
        case 8:
          v405 = (unint64_t *)v442[0];
          do
          {
            v406 = __ldaxr(v405);
            v407 = v406 - 1;
          }
          while (__stlxr(v407, v405));
          if (!v407)
          {
            v408 = v442[0];
            if (v442[0])
            {
              boost::detail::shared_count::~shared_count((unsigned int **)(v442[0] + 16));
              v384 = v408;
              v396 = -235920773;
              goto LABEL_620;
            }
          }
          break;
        case 9:
          v390 = (unint64_t *)v442[0];
          do
          {
            v391 = __ldaxr(v390);
            v392 = v391 - 1;
          }
          while (__stlxr(v392, v390));
          if (!v392)
          {
            v393 = v442[0];
            if (v442[0])
            {
              v394 = *(void **)(v442[0] + 48);
              if (v394)
              {
                *(_QWORD *)(v442[0] + 56) = v394;
                operator delete(v394);
              }
              v395 = *(void **)(v393 + 24);
              if (v395)
              {
                *(_QWORD *)(v393 + 32) = v395;
                operator delete(v395);
              }
              std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v393 + 8);
              v384 = v393;
              v396 = 2071181815;
LABEL_620:
              v385 = v396 | 0x1030C4000000000;
LABEL_621:
              MEMORY[0x219A19A08](v384, v385);
            }
          }
          break;
        default:
          break;
      }
    }
    else
    {
      switch(*(_BYTE *)(v294 + 12))
      {
        case 2:
          v295 = *(unint64_t **)v294;
          do
          {
            v296 = __ldaxr(v295);
            v297 = v296 - 1;
          }
          while (__stlxr(v297, v295));
          if (!v297)
          {
            v298 = *(unint64_t **)v294;
            if (!*(_QWORD *)v294)
              goto LABEL_507;
            if (*((char *)v298 + 31) < 0)
              operator delete((void *)v298[1]);
            v299 = v298;
            v300 = 0x1012C404EF22A49;
            goto LABEL_506;
          }
          break;
        case 3:
          v312 = *(unint64_t **)v294;
          do
          {
            v313 = __ldaxr(v312);
            v314 = v313 - 1;
          }
          while (__stlxr(v314, v312));
          if (!v314)
          {
            v315 = *(unint64_t **)v294;
            if (!*(_QWORD *)v294)
              goto LABEL_507;
            v316 = (void *)v315[1];
            if (v316)
            {
              v315[2] = (unint64_t)v316;
              operator delete(v316);
            }
            v299 = v315;
            v300 = 0x1080C409938AC02;
            goto LABEL_506;
          }
          break;
        case 4:
          v301 = *(unint64_t **)v294;
          do
          {
            v302 = __ldaxr(v301);
            v303 = v302 - 1;
          }
          while (__stlxr(v303, v301));
          if (!v303)
          {
            v304 = *(unint64_t **)v294;
            if (!*(_QWORD *)v294)
              goto LABEL_507;
            *(_QWORD *)v436 = v304 + 1;
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v436);
            goto LABEL_499;
          }
          break;
        case 5:
          v317 = *(unint64_t **)v294;
          do
          {
            v318 = __ldaxr(v317);
            v319 = v318 - 1;
          }
          while (__stlxr(v319, v317));
          if (!v319)
          {
            v304 = *(unint64_t **)v294;
            if (!*(_QWORD *)v294)
              goto LABEL_507;
            *(_QWORD *)v436 = v304 + 1;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v436);
LABEL_499:
            v299 = v304;
            v300 = 0x1020C405E66F15BLL;
            goto LABEL_506;
          }
          break;
        case 8:
          v320 = *(unint64_t **)v294;
          do
          {
            v321 = __ldaxr(v320);
            v322 = v321 - 1;
          }
          while (__stlxr(v322, v320));
          if (!v322)
          {
            v323 = *(unint64_t **)v294;
            if (!*(_QWORD *)v294)
              goto LABEL_507;
            boost::detail::shared_count::~shared_count((unsigned int **)v323 + 2);
            v299 = v323;
            v311 = -235920773;
            goto LABEL_505;
          }
          break;
        case 9:
          v305 = *(unint64_t **)v294;
          do
          {
            v306 = __ldaxr(v305);
            v307 = v306 - 1;
          }
          while (__stlxr(v307, v305));
          if (!v307)
          {
            v308 = *(unint64_t **)v294;
            if (*(_QWORD *)v294)
            {
              v309 = (void *)v308[6];
              if (v309)
              {
                v308[7] = (unint64_t)v309;
                operator delete(v309);
              }
              v310 = (void *)v308[3];
              if (v310)
              {
                v308[4] = (unint64_t)v310;
                operator delete(v310);
              }
              std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v308 + 1));
              v299 = v308;
              v311 = 2071181815;
LABEL_505:
              v300 = v311 | 0x1030C4000000000;
LABEL_506:
              MEMORY[0x219A19A08](v299, v300);
            }
LABEL_507:
            *(_QWORD *)v294 = 0;
          }
          break;
        default:
          break;
      }
      v324 = v442[0];
      *(_QWORD *)(v294 + 5) = *(uint64_t *)((char *)v442 + 5);
      *(_QWORD *)v294 = v324;
      *(_BYTE *)(v294 + 12) = BYTE4(v442[1]);
    }
    v5 = *a2;
LABEL_510:
    ++v7;
  }
  while (v7 < (a2[1] - v5) >> 4);
  return (*(uint64_t (**)(_QWORD, _QWORD, uint64_t *))(**(_QWORD **)(v431 + 208) + 64))(*(_QWORD *)(v431 + 208), a1[4], a2);
}

void sub_2181AEE58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  uint64_t v54;
  unint64_t *v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t v64;
  _QWORD *v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t v68;
  _QWORD *v69;
  unsigned int v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t v73;
  _QWORD *v74;
  void *v75;
  unint64_t *v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t *v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;

  if (__p)
  {
    a43 = (uint64_t)__p;
    operator delete(__p);
  }
  turi::flexible_type_impl::ndarray<double>::~ndarray(&a49);
  switch(*(_BYTE *)(v54 - 124))
  {
    case 2:
      v56 = *(unint64_t **)(v54 - 136);
      do
      {
        v57 = __ldaxr(v56);
        v58 = v57 - 1;
      }
      while (__stlxr(v58, v56));
      if (v58)
        goto LABEL_41;
      v59 = *(_QWORD *)(v54 - 136);
      if (!v59)
        goto LABEL_41;
      if (*(char *)(v59 + 31) < 0)
        operator delete(*(void **)(v59 + 8));
      v60 = (_QWORD *)v59;
      v61 = 0x1012C404EF22A49;
      goto LABEL_40;
    case 3:
      v71 = *(unint64_t **)(v54 - 136);
      do
      {
        v72 = __ldaxr(v71);
        v73 = v72 - 1;
      }
      while (__stlxr(v73, v71));
      if (v73)
        goto LABEL_41;
      v74 = *(_QWORD **)(v54 - 136);
      if (!v74)
        goto LABEL_41;
      v75 = (void *)v74[1];
      if (v75)
      {
        v74[2] = v75;
        operator delete(v75);
      }
      v60 = v74;
      v61 = 0x1080C409938AC02;
      goto LABEL_40;
    case 4:
      v62 = *(unint64_t **)(v54 - 136);
      do
      {
        v63 = __ldaxr(v62);
        v64 = v63 - 1;
      }
      while (__stlxr(v64, v62));
      if (v64)
        goto LABEL_41;
      v65 = *(_QWORD **)(v54 - 136);
      if (!v65)
        goto LABEL_41;
      a35 = v65 + 1;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a35);
      goto LABEL_33;
    case 5:
      v76 = *(unint64_t **)(v54 - 136);
      do
      {
        v77 = __ldaxr(v76);
        v78 = v77 - 1;
      }
      while (__stlxr(v78, v76));
      if (v78)
        goto LABEL_41;
      v65 = *(_QWORD **)(v54 - 136);
      if (!v65)
        goto LABEL_41;
      a35 = v65 + 1;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a35);
LABEL_33:
      v60 = v65;
      v61 = 0x1020C405E66F15BLL;
      goto LABEL_40;
    case 8:
      v79 = *(unint64_t **)(v54 - 136);
      do
      {
        v80 = __ldaxr(v79);
        v81 = v80 - 1;
      }
      while (__stlxr(v81, v79));
      if (v81)
        goto LABEL_41;
      v82 = *(_QWORD *)(v54 - 136);
      if (!v82)
        goto LABEL_41;
      boost::detail::shared_count::~shared_count((unsigned int **)(v82 + 16));
      v60 = (_QWORD *)v82;
      v70 = -235920773;
      goto LABEL_39;
    case 9:
      v66 = *(unint64_t **)(v54 - 136);
      do
      {
        v67 = __ldaxr(v66);
        v68 = v67 - 1;
      }
      while (__stlxr(v68, v66));
      if (v68)
        goto LABEL_41;
      v69 = *(_QWORD **)(v54 - 136);
      if (!v69)
        goto LABEL_41;
      v60 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v69);
      v70 = 2071181815;
LABEL_39:
      v61 = v70 | 0x1030C4000000000;
LABEL_40:
      MEMORY[0x219A19A08](v60, v61);
LABEL_41:
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_41;
  }
}

_QWORD *std::__function::__func<turi::sframe::get_output_iterator(unsigned long)::$_2,std::allocator<turi::sframe::get_output_iterator(unsigned long)::$_2>,void ()(turi::sframe_rows const&)>::~__func(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24D931448;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void std::__function::__func<turi::sframe::get_output_iterator(unsigned long)::$_2,std::allocator<turi::sframe::get_output_iterator(unsigned long)::$_2>,void ()(turi::sframe_rows const&)>::~__func(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24D931448;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x219A19A08);
}

_QWORD *std::__function::__func<turi::sframe::get_output_iterator(unsigned long)::$_2,std::allocator<turi::sframe::get_output_iterator(unsigned long)::$_2>,void ()(turi::sframe_rows const&)>::__clone(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x30uLL);
  *v2 = &off_24D931448;
  v2[2] = 0;
  v2[3] = 0;
  v2[1] = 0;
  std::vector<turi::flex_type_enum>::__init_with_size[abi:ne180100]<turi::flex_type_enum*,turi::flex_type_enum*>(v2 + 1, *(const void **)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8));
  *((_OWORD *)v2 + 2) = *(_OWORD *)(a1 + 32);
  return v2;
}

void sub_2181AF3B8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

__n128 std::__function::__func<turi::sframe::get_output_iterator(unsigned long)::$_2,std::allocator<turi::sframe::get_output_iterator(unsigned long)::$_2>,void ()(turi::sframe_rows const&)>::__clone(uint64_t a1, __n128 *a2)
{
  __n128 result;

  a2->n128_u64[0] = (unint64_t)&off_24D931448;
  a2[1].n128_u64[0] = 0;
  a2[1].n128_u64[1] = 0;
  a2->n128_u64[1] = 0;
  std::vector<turi::flex_type_enum>::__init_with_size[abi:ne180100]<turi::flex_type_enum*,turi::flex_type_enum*>(&a2->n128_u64[1], *(const void **)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8));
  result = *(__n128 *)(a1 + 32);
  a2[2] = result;
  return result;
}

void std::__function::__func<turi::sframe::get_output_iterator(unsigned long)::$_2,std::allocator<turi::sframe::get_output_iterator(unsigned long)::$_2>,void ()(turi::sframe_rows const&)>::destroy(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
}

void std::__function::__func<turi::sframe::get_output_iterator(unsigned long)::$_2,std::allocator<turi::sframe::get_output_iterator(unsigned long)::$_2>,void ()(turi::sframe_rows const&)>::destroy_deallocate(_QWORD *__p)
{
  void *v2;

  v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

void std::__function::__func<turi::sframe::get_output_iterator(unsigned long)::$_2,std::allocator<turi::sframe::get_output_iterator(unsigned long)::$_2>,void ()(turi::sframe_rows const&)>::operator()(_QWORD *a1, turi::sframe_rows *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t *v6[2];
  _QWORD v7[33];
  void **v8;

  if (a1[2] - a1[1] != (uint64_t)(*((_QWORD *)a2 + 1) - *(_QWORD *)a2) >> 4)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v6);
    v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Write to sframe with row size mismatch. ", 40);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Expected: ", 10);
    v5 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)" Actual: ", 9);
    std::ostream::operator<<();
    v8 = (void **)v6;
    turi::sframe::get_output_iterator(unsigned long)::$_2::operator() const(turi::sframe_rows const&)::{lambda(void)#1}::operator()();
  }
  v3 = a1[4];
  v2 = a1[5];
  turi::sframe_rows::type_check(a2, a1 + 1, v6);
  (*(void (**)(_QWORD, uint64_t, uint64_t **))(**(_QWORD **)(v3 + 208) + 88))(*(_QWORD *)(v3 + 208), v2, v6);
  v8 = (void **)v6;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v8);
}

void sub_2181AF560(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  uint64_t v29;

  a9 = *MEMORY[0x24BEDB7F0];
  v29 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(uint64_t *)((char *)&a9 + *(_QWORD *)(a9 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  a11 = v29;
  a12 = MEMORY[0x24BEDB848] + 16;
  if (a25 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x219A198F4](&a28);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<turi::sframe::get_output_iterator(unsigned long)::$_2,std::allocator<turi::sframe::get_output_iterator(unsigned long)::$_2>,void ()(turi::sframe_rows const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::sframe::get_output_iterator(unsigned long)::$_2,std::allocator<turi::sframe::get_output_iterator(unsigned long)::$_2>,void ()(turi::sframe_rows const&)>::target_type()
{
}

void __cxx_global_var_init_35()
{
  int v0;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, "Mutex create error %d", v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_sframe_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

uint64_t turi::sframe_fast_compact(turi *this, const turi::sframe *a2)
{
  char v3;
  unint64_t v4;
  char v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  __int128 v10;

  if (*((_QWORD *)this + 3))
  {
    v3 = 0;
    v4 = 0;
    do
    {
      turi::sframe::select_column((uint64_t)this, v4, &v10);
      v5 = turi::sarray_fast_compact<turi::flexible_type>(v10);
      v6 = (std::__shared_weak_count *)*((_QWORD *)&v10 + 1);
      if (*((_QWORD *)&v10 + 1))
      {
        v7 = (unint64_t *)(*((_QWORD *)&v10 + 1) + 8);
        do
          v8 = __ldaxr(v7);
        while (__stlxr(v8 - 1, v7));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      v3 |= v5;
      ++v4;
    }
    while (v4 < *((_QWORD *)this + 3));
  }
  else
  {
    v3 = 0;
  }
  return v3 & 1;
}

void sub_2181AF7CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2181AF974(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_4_6()
{
  int v0;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, "Mutex create error %d", v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_sframe_compact_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

BOOL turi::sframe_config::$_0::__invoke(turi::sframe_config::$_0 *this)
{
  return (unint64_t)this - 1024 < 0xFFFFFFFFFFFFC01;
}

BOOL turi::sframe_config::$_1::__invoke(turi::sframe_config::$_1 *this)
{
  return (uint64_t)this > 0;
}

void _GLOBAL__sub_I_sframe_config_cpp()
{
  void **v0;
  uint64_t v1;
  void **v2;
  uint64_t v3;
  void *__p[2];
  char v5;
  void *v6;
  BOOL (*v7)(turi::sframe_config::$_0 *);
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  std::string::basic_string[abi:ne180100]<0>(__p, "TURI_SFRAME_SORT_BUFFER_SIZE");
  v6 = &unk_24D921BF0;
  v7 = turi::sframe_config::$_0::__invoke;
  v8 = &v6;
  turi::globals::register_global<long long>::register_global(&turi::sframe_config::__SFRAME_SORT_BUFFER_SIZE__register__instance, __p, &turi::sframe_config::SFRAME_SORT_BUFFER_SIZE, 1, &v6);
  v0 = v8;
  if (v8 == &v6)
  {
    v1 = 4;
    v0 = &v6;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v1 = 5;
  }
  (*((void (**)(void))*v0 + v1))();
LABEL_6:
  if (v5 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "TURI_SFRAME_READ_BATCH_SIZE");
  v6 = &unk_24D921BF0;
  v7 = turi::sframe_config::$_1::__invoke;
  v8 = &v6;
  turi::globals::register_global<long long>::register_global(&turi::sframe_config::__SFRAME_READ_BATCH_SIZE__register__instance, __p, &turi::sframe_config::SFRAME_READ_BATCH_SIZE, 1, &v6);
  v2 = v8;
  if (v8 == &v6)
  {
    v3 = 4;
    v2 = &v6;
  }
  else
  {
    if (!v8)
      goto LABEL_13;
    v3 = 5;
  }
  (*((void (**)(void))*v2 + v3))();
LABEL_13:
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_2181AFC9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, char *a18)
{
  char *v18;
  char *v20;
  uint64_t v21;

  v20 = a18;
  if (a18 == v18)
  {
    v21 = 4;
    v20 = &a15;
  }
  else
  {
    if (!a18)
      goto LABEL_6;
    v21 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
LABEL_6:
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL turi::$_0::__invoke(turi::$_0 *this)
{
  return (uint64_t)this > 0;
}

{
  return (uint64_t)this > 0;
}

{
  return (uint64_t)this > 0;
}

BOOL turi::$_1::__invoke(uint64_t this)
{
  return this > 63;
}

BOOL turi::$_2::__invoke(uint64_t this)
{
  return this > 1023;
}

BOOL turi::$_3::__invoke(turi::$_3 *this)
{
  return (uint64_t)this > 0;
}

BOOL turi::$_4::__invoke(uint64_t this)
{
  return this > 1023;
}

BOOL turi::$_5::__invoke(uint64_t this)
{
  return this > 63;
}

BOOL turi::$_6::__invoke(uint64_t this)
{
  return this > 1023;
}

BOOL turi::$_7::__invoke(uint64_t this)
{
  return this > 1023;
}

BOOL turi::$_8::__invoke(uint64_t this)
{
  return this > 1023;
}

BOOL turi::$_9::__invoke(turi::$_9 *this)
{
  return (unint64_t)this < 2;
}

BOOL turi::$_10::__invoke(uint64_t this)
{
  return this > 128;
}

BOOL turi::$_11::__invoke(uint64_t this)
{
  return this > 1;
}

BOOL turi::$_12::__invoke(turi::$_12 *this)
{
  return (uint64_t)this > 0;
}

void _GLOBAL__sub_I_sframe_constants_cpp()
{
  void **v0;
  uint64_t v1;
  void **v2;
  uint64_t v3;
  void **v4;
  uint64_t v5;
  void **v6;
  uint64_t v7;
  void **v8;
  uint64_t v9;
  void **v10;
  uint64_t v11;
  void **v12;
  uint64_t v13;
  void **v14;
  uint64_t v15;
  void **v16;
  uint64_t v17;
  void **v18;
  uint64_t v19;
  void **v20;
  uint64_t v21;
  void **v22;
  uint64_t v23;
  void **v24;
  uint64_t v25;
  void **v26;
  uint64_t v27;
  void *__p[2];
  char v29;
  void *v30;
  void *v31;
  void **v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  std::string::basic_string[abi:ne180100]<0>(__p, "TURI_SFRAME_DEFAULT_NUM_SEGMENTS");
  v30 = &unk_24D921BF0;
  v31 = turi::$_0::__invoke;
  v32 = &v30;
  turi::globals::register_global<long long>::register_global(&turi::__SFRAME_DEFAULT_NUM_SEGMENTS__register__instance, __p, &turi::SFRAME_DEFAULT_NUM_SEGMENTS, 1, &v30);
  v0 = v32;
  if (v32 == &v30)
  {
    v1 = 4;
    v0 = &v30;
  }
  else
  {
    if (!v32)
      goto LABEL_6;
    v1 = 5;
  }
  (*((void (**)(void))*v0 + v1))();
LABEL_6:
  if (v29 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "TURI_SFRAME_FILE_HANDLE_POOL_SIZE");
  v30 = &unk_24D921BF0;
  v31 = turi::$_1::__invoke;
  v32 = &v30;
  turi::globals::register_global<long long>::register_global(&turi::__SFRAME_FILE_HANDLE_POOL_SIZE__register__instance, __p, &turi::SFRAME_FILE_HANDLE_POOL_SIZE, 1, &v30);
  v2 = v32;
  if (v32 == &v30)
  {
    v3 = 4;
    v2 = &v30;
  }
  else
  {
    if (!v32)
      goto LABEL_13;
    v3 = 5;
  }
  (*((void (**)(void))*v2 + v3))();
LABEL_13:
  if (v29 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "TURI_SFRAME_DEFAULT_BLOCK_SIZE");
  v30 = &unk_24D921BF0;
  v31 = turi::$_2::__invoke;
  v32 = &v30;
  turi::globals::register_global<long long>::register_global(&turi::__SFRAME_DEFAULT_BLOCK_SIZE__register__instance, __p, &turi::SFRAME_DEFAULT_BLOCK_SIZE, 1, &v30);
  v4 = v32;
  if (v32 == &v30)
  {
    v5 = 4;
    v4 = &v30;
  }
  else
  {
    if (!v32)
      goto LABEL_20;
    v5 = 5;
  }
  (*((void (**)(void))*v4 + v5))();
LABEL_20:
  if (v29 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "TURI_SFRAME_MAX_BLOCKS_IN_CACHE");
  v30 = &unk_24D921BF0;
  v31 = turi::$_3::__invoke;
  v32 = &v30;
  turi::globals::register_global<long long>::register_global(&turi::__SFRAME_MAX_BLOCKS_IN_CACHE__register__instance, __p, &turi::SFRAME_MAX_BLOCKS_IN_CACHE, 1, &v30);
  v6 = v32;
  if (v32 == &v30)
  {
    v7 = 4;
    v6 = &v30;
  }
  else
  {
    if (!v32)
      goto LABEL_27;
    v7 = 5;
  }
  (*((void (**)(void))*v6 + v7))();
LABEL_27:
  if (v29 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "TURI_SFRAME_CSV_PARSER_READ_SIZE");
  v30 = &unk_24D921BF0;
  v31 = turi::$_4::__invoke;
  v32 = &v30;
  turi::globals::register_global<long long>::register_global(&turi::__SFRAME_CSV_PARSER_READ_SIZE__register__instance, __p, &turi::SFRAME_CSV_PARSER_READ_SIZE, 1, &v30);
  v8 = v32;
  if (v32 == &v30)
  {
    v9 = 4;
    v8 = &v30;
  }
  else
  {
    if (!v32)
      goto LABEL_34;
    v9 = 5;
  }
  (*((void (**)(void))*v8 + v9))();
LABEL_34:
  if (v29 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "TURI_SFRAME_GROUPBY_BUFFER_NUM_ROWS");
  v30 = &unk_24D921BF0;
  v31 = turi::$_5::__invoke;
  v32 = &v30;
  turi::globals::register_global<long long>::register_global(&turi::__SFRAME_GROUPBY_BUFFER_NUM_ROWS__register__instance, __p, &turi::SFRAME_GROUPBY_BUFFER_NUM_ROWS, 1, &v30);
  v10 = v32;
  if (v32 == &v30)
  {
    v11 = 4;
    v10 = &v30;
  }
  else
  {
    if (!v32)
      goto LABEL_41;
    v11 = 5;
  }
  (*((void (**)(void))*v10 + v11))();
LABEL_41:
  if (v29 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "TURI_SFRAME_JOIN_BUFFER_NUM_CELLS");
  v30 = &unk_24D921BF0;
  v31 = turi::$_6::__invoke;
  v32 = &v30;
  turi::globals::register_global<long long>::register_global(&turi::__SFRAME_JOIN_BUFFER_NUM_CELLS__register__instance, __p, &turi::SFRAME_JOIN_BUFFER_NUM_CELLS, 1, &v30);
  v12 = v32;
  if (v32 == &v30)
  {
    v13 = 4;
    v12 = &v30;
  }
  else
  {
    if (!v32)
      goto LABEL_48;
    v13 = 5;
  }
  (*((void (**)(void))*v12 + v13))();
LABEL_48:
  if (v29 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "TURI_SFRAME_WRITER_MAX_BUFFERED_CELLS");
  v30 = &unk_24D921BF0;
  v31 = turi::$_7::__invoke;
  v32 = &v30;
  turi::globals::register_global<long long>::register_global(&turi::__SFRAME_WRITER_MAX_BUFFERED_CELLS__register__instance, __p, &turi::SFRAME_WRITER_MAX_BUFFERED_CELLS, 1, &v30);
  v14 = v32;
  if (v32 == &v30)
  {
    v15 = 4;
    v14 = &v30;
  }
  else
  {
    if (!v32)
      goto LABEL_55;
    v15 = 5;
  }
  (*((void (**)(void))*v14 + v15))();
LABEL_55:
  if (v29 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "TURI_SFRAME_WRITER_MAX_BUFFERED_CELLS_PER_BLOCK");
  v30 = &unk_24D921BF0;
  v31 = turi::$_8::__invoke;
  v32 = &v30;
  turi::globals::register_global<long long>::register_global(&turi::__SFRAME_WRITER_MAX_BUFFERED_CELLS_PER_BLOCK__register__instance, __p, &turi::SFRAME_WRITER_MAX_BUFFERED_CELLS_PER_BLOCK, 1, &v30);
  v16 = v32;
  if (v32 == &v30)
  {
    v17 = 4;
    v16 = &v30;
  }
  else
  {
    if (!v32)
      goto LABEL_62;
    v17 = 5;
  }
  (*((void (**)(void))*v16 + v17))();
LABEL_62:
  if (v29 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "TURI_SFRAME_IO_READ_LOCK");
  v30 = &unk_24D921BF0;
  v31 = turi::$_9::__invoke;
  v32 = &v30;
  turi::globals::register_global<long long>::register_global(&turi::__SFRAME_IO_READ_LOCK__register__instance, __p, &turi::SFRAME_IO_READ_LOCK, 1, &v30);
  v18 = v32;
  if (v32 == &v30)
  {
    v19 = 4;
    v18 = &v30;
  }
  else
  {
    if (!v32)
      goto LABEL_69;
    v19 = 5;
  }
  (*((void (**)(void))*v18 + v19))();
LABEL_69:
  if (v29 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "TURI_SFRAME_SORT_PIVOT_ESTIMATION_SAMPLE_SIZE");
  v30 = &unk_24D921BF0;
  v31 = turi::$_10::__invoke;
  v32 = &v30;
  turi::globals::register_global<long long>::register_global(&turi::__SFRAME_SORT_PIVOT_ESTIMATION_SAMPLE_SIZE__register__instance, __p, &turi::SFRAME_SORT_PIVOT_ESTIMATION_SAMPLE_SIZE, 1, &v30);
  v20 = v32;
  if (v32 == &v30)
  {
    v21 = 4;
    v20 = &v30;
  }
  else
  {
    if (!v32)
      goto LABEL_76;
    v21 = 5;
  }
  (*((void (**)(void))*v20 + v21))();
LABEL_76:
  if (v29 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "TURI_SFRAME_SORT_MAX_SEGMENTS");
  v30 = &unk_24D921BF0;
  v31 = turi::$_11::__invoke;
  v32 = &v30;
  turi::globals::register_global<long long>::register_global(&turi::__SFRAME_SORT_MAX_SEGMENTS__register__instance, __p, &turi::SFRAME_SORT_MAX_SEGMENTS, 1, &v30);
  v22 = v32;
  if (v32 == &v30)
  {
    v23 = 4;
    v22 = &v30;
  }
  else
  {
    if (!v32)
      goto LABEL_83;
    v23 = 5;
  }
  (*((void (**)(void))*v22 + v23))();
LABEL_83:
  if (v29 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "TURI_FAST_COMPACT_BLOCKS_IN_SMALL_SEGMENT");
  v30 = &unk_24D921BF0;
  v31 = turi::$_12::__invoke;
  v32 = &v30;
  turi::globals::register_global<long long>::register_global(&turi::__FAST_COMPACT_BLOCKS_IN_SMALL_SEGMENT__register__instance, __p, &turi::FAST_COMPACT_BLOCKS_IN_SMALL_SEGMENT, 1, &v30);
  v24 = v32;
  if (v32 == &v30)
  {
    v25 = 4;
    v24 = &v30;
  }
  else
  {
    if (!v32)
      goto LABEL_90;
    v25 = 5;
  }
  (*((void (**)(void))*v24 + v25))();
LABEL_90:
  if (v29 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "TURI_SFRAME_COMPACTION_THRESHOLD");
  v32 = 0;
  turi::globals::register_global<long long>::register_global(&turi::__SFRAME_COMPACTION_THRESHOLD__register__instance, __p, &turi::SFRAME_COMPACTION_THRESHOLD, 1, &v30);
  v26 = v32;
  if (v32 == &v30)
  {
    v27 = 4;
    v26 = &v30;
  }
  else
  {
    if (!v32)
      goto LABEL_97;
    v27 = 5;
  }
  (*((void (**)(void))*v26 + v27))();
LABEL_97:
  if (v29 < 0)
    operator delete(__p[0]);
}

void sub_2181B0538(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, char *a18)
{
  char *v18;
  char *v20;
  uint64_t v21;

  v20 = a18;
  if (a18 == v18)
  {
    v21 = 4;
    v20 = &a15;
  }
  else
  {
    if (!a18)
      goto LABEL_6;
    v21 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
LABEL_6:
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

