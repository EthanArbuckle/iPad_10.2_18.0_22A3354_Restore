void CoreML::NeuralNetworkShaper::shapeReorganizeDataLayer(uint64_t **this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  uint64_t **v3;
  turi::neural_net::float_scalar *v4;
  CoreML::ShapeConstraint *v5;
  const CoreML::ShapeRange *v6;
  const CoreML::ShapeRange *v7;
  const CoreML::ShapeRange *v8;
  const CoreML::ShapeRange *v9;
  CoreML::Specification::ReorganizeDataLayerParams *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE v25[32];
  __int128 *v26[3];
  int v27;

  v3 = this + 4;
  v26[0] = *(__int128 **)(*((_QWORD *)a2 + 4) + 8);
  v4 = (turi::neural_net::float_scalar *)(std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(this + 4, (const void **)v26[0], (uint64_t)&std::piecewise_construct, v26)+ 7);
  v26[0] = *(__int128 **)(*((_QWORD *)a2 + 7) + 8);
  v5 = (CoreML::ShapeConstraint *)(std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, (const void **)v26[0], (uint64_t)&std::piecewise_construct, v26)+ 7);
  CoreML::ShapeConstraint::setName((uint64_t)v5, *(const std::string **)(*((_QWORD *)a2 + 7) + 8));
  turi::neural_net::float_scalar::~float_scalar(v4);
  CoreML::ShapeConstraint::updateSequenceRange(v5, v6);
  v7 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::batchRange(v4);
  CoreML::ShapeConstraint::updateBatchRange(v5, v7);
  turi::neural_net::float_scalar::~float_scalar(v5);
  CoreML::ShapeConstraint::updateSequenceRange(v4, v8);
  v9 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::batchRange(v5);
  CoreML::ShapeConstraint::updateBatchRange(v4, v9);
  if (*((_DWORD *)a2 + 35) == 345)
    v11 = (uint64_t *)*((_QWORD *)a2 + 16);
  else
    v11 = CoreML::Specification::ReorganizeDataLayerParams::default_instance(v10);
  CoreML::Specification::ReorganizeDataLayerParams::ReorganizeDataLayerParams((CoreML::Specification::ReorganizeDataLayerParams *)v26, (const CoreML::Specification::ReorganizeDataLayerParams *)v11);
  v12 = (uint64_t)v26[2];
  if (v27)
  {
    v13 = CoreML::ShapeConstraint::channelRange(v4);
    CoreML::ShapeRange::operator/(v13, v12 * v12, (uint64_t)v25);
    CoreML::ShapeConstraint::updateChannelRange(v5, (const CoreML::ShapeRange *)v25);
    v14 = CoreML::ShapeConstraint::heightRange(v4);
    CoreML::ShapeRange::operator*(v14, v12, (uint64_t)v25);
    CoreML::ShapeConstraint::updateHeightRange(v5, (const CoreML::ShapeRange *)v25);
    v15 = CoreML::ShapeConstraint::widthRange(v4);
    CoreML::ShapeRange::operator*(v15, v12, (uint64_t)v25);
    CoreML::ShapeConstraint::updateWidthRange(v5, (const CoreML::ShapeRange *)v25);
    v16 = CoreML::ShapeConstraint::channelRange(v5);
    CoreML::ShapeRange::operator*(v16, v12 * v12, (uint64_t)v25);
    CoreML::ShapeConstraint::updateChannelRange(v4, (const CoreML::ShapeRange *)v25);
    v17 = CoreML::ShapeConstraint::heightRange(v5);
    CoreML::ShapeRange::operator/(v17, v12, (uint64_t)v25);
    CoreML::ShapeConstraint::updateHeightRange(v4, (const CoreML::ShapeRange *)v25);
    v18 = CoreML::ShapeConstraint::widthRange(v5);
    CoreML::ShapeRange::operator/(v18, v12, (uint64_t)v25);
  }
  else
  {
    v19 = CoreML::ShapeConstraint::channelRange(v4);
    CoreML::ShapeRange::operator*(v19, v12 * v12, (uint64_t)v25);
    CoreML::ShapeConstraint::updateChannelRange(v5, (const CoreML::ShapeRange *)v25);
    v20 = CoreML::ShapeConstraint::heightRange(v4);
    CoreML::ShapeRange::operator/(v20, v12, (uint64_t)v25);
    CoreML::ShapeConstraint::updateHeightRange(v5, (const CoreML::ShapeRange *)v25);
    v21 = CoreML::ShapeConstraint::widthRange(v4);
    CoreML::ShapeRange::operator/(v21, v12, (uint64_t)v25);
    CoreML::ShapeConstraint::updateWidthRange(v5, (const CoreML::ShapeRange *)v25);
    v22 = CoreML::ShapeConstraint::channelRange(v5);
    CoreML::ShapeRange::operator/(v22, v12 * v12, (uint64_t)v25);
    CoreML::ShapeConstraint::updateChannelRange(v4, (const CoreML::ShapeRange *)v25);
    v23 = CoreML::ShapeConstraint::heightRange(v5);
    CoreML::ShapeRange::operator*(v23, v12, (uint64_t)v25);
    CoreML::ShapeConstraint::updateHeightRange(v4, (const CoreML::ShapeRange *)v25);
    v24 = CoreML::ShapeConstraint::widthRange(v5);
    CoreML::ShapeRange::operator*(v24, v12, (uint64_t)v25);
  }
  CoreML::ShapeConstraint::updateWidthRange(v4, (const CoreML::ShapeRange *)v25);
  CoreML::Specification::ReorganizeDataLayerParams::~ReorganizeDataLayerParams((CoreML::Specification::ReorganizeDataLayerParams *)v26);
}

void sub_2183B90DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  CoreML::Specification::ReorganizeDataLayerParams::~ReorganizeDataLayerParams((CoreML::Specification::ReorganizeDataLayerParams *)va);
  _Unwind_Resume(a1);
}

void CoreML::NeuralNetworkShaper::shapeSliceLayer(uint64_t **this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  uint64_t **v3;
  turi::neural_net::float_scalar *v4;
  CoreML::ShapeConstraint *v5;
  const CoreML::ShapeRange *v6;
  const CoreML::ShapeRange *v7;
  const CoreML::ShapeRange *v8;
  const CoreML::ShapeRange *v9;
  CoreML::Specification::SliceLayerParams *v10;
  uint64_t *v11;
  int v12;
  int v13;
  int v14;
  int v15;
  unsigned int v16;
  int v17;
  const CoreML::ShapeRange *v18;
  const CoreML::ShapeRange *v19;
  const CoreML::ShapeRange *v20;
  _OWORD *v21;
  const CoreML::ShapeRange *v22;
  const CoreML::ShapeRange *v23;
  const CoreML::ShapeRange *v24;
  const CoreML::ShapeRange *v25;
  const CoreML::ShapeRange *v26;
  const CoreML::ShapeRange *v27;
  const CoreML::ShapeRange *v28;
  const CoreML::ShapeRange *v29;
  __int128 v30;
  int v31;
  int v32;
  signed int v33;
  const CoreML::ShapeRange *v34;
  const CoreML::ShapeRange *v35;
  const CoreML::ShapeRange *v36;
  const CoreML::ShapeRange *v37;
  const CoreML::ShapeRange *v38;
  const CoreML::ShapeRange *v39;
  const CoreML::ShapeRange *v40;
  const CoreML::ShapeRange *v41;
  const CoreML::ShapeRange *v42;
  const CoreML::ShapeRange *v43;
  const CoreML::ShapeRange *v44;
  std::runtime_error *v45;
  std::runtime_error *exception;
  __int128 v47[2];
  _BYTE v48[32];
  _BYTE v49[32];
  _OWORD v50[2];
  __int128 *v51[2];
  int v52;
  int v53;
  int v54;
  int v55;

  v3 = this + 4;
  v51[0] = *(__int128 **)(*((_QWORD *)a2 + 4) + 8);
  v4 = (turi::neural_net::float_scalar *)(std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(this + 4, (const void **)v51[0], (uint64_t)&std::piecewise_construct, v51)+ 7);
  v51[0] = *(__int128 **)(*((_QWORD *)a2 + 7) + 8);
  v5 = (CoreML::ShapeConstraint *)(std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, (const void **)v51[0], (uint64_t)&std::piecewise_construct, v51)+ 7);
  CoreML::ShapeConstraint::setName((uint64_t)v5, *(const std::string **)(*((_QWORD *)a2 + 7) + 8));
  turi::neural_net::float_scalar::~float_scalar(v4);
  CoreML::ShapeConstraint::updateSequenceRange(v5, v6);
  v7 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::batchRange(v4);
  CoreML::ShapeConstraint::updateBatchRange(v5, v7);
  turi::neural_net::float_scalar::~float_scalar(v5);
  CoreML::ShapeConstraint::updateSequenceRange(v4, v8);
  v9 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::batchRange(v5);
  CoreML::ShapeConstraint::updateBatchRange(v4, v9);
  if (*((_DWORD *)a2 + 35) == 350)
    v11 = (uint64_t *)*((_QWORD *)a2 + 16);
  else
    v11 = CoreML::Specification::SliceLayerParams::default_instance(v10);
  CoreML::Specification::SliceLayerParams::SliceLayerParams((CoreML::Specification::SliceLayerParams *)v51, (const CoreML::Specification::SliceLayerParams *)v11);
  v12 = v52;
  v13 = v53;
  v14 = v54;
  v15 = v55;
  if (v52 < 0 || (v16 = v53, v53 <= 0))
  {
    if ((v52 & 0x80000000) == 0 || v53 > 0)
    {
      CoreML::ShapeRange::ShapeRange((uint64_t)v50);
      if (v15)
      {
        if (v15 == 1)
        {
          v21 = (_OWORD *)CoreML::ShapeConstraint::heightRange(v4);
        }
        else
        {
          if (v15 != 2)
          {
            exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(exception, "Slice layer axis incorrect -- should be caught in validator.");
            __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
          }
          v21 = (_OWORD *)CoreML::ShapeConstraint::widthRange(v4);
        }
      }
      else
      {
        v21 = (_OWORD *)CoreML::ShapeConstraint::channelRange(v4);
      }
      v30 = v21[1];
      v50[0] = *v21;
      v50[1] = v30;
      if (v13 < 1)
        v31 = v12;
      else
        v31 = -v12;
      if (v13 >= 0)
        v32 = v13;
      else
        v32 = -v13;
      v33 = v32 + v31 + 1;
      CoreML::ShapeRange::operator-((uint64_t)v50, v33, (uint64_t)v47);
      CoreML::ShapeRange::operator/(v47, v14, (uint64_t)v48);
      CoreML::ShapeRange::operator+((uint64_t)v48, 1u, (uint64_t)v49);
      if (v15)
      {
        if (v15 != 1)
        {
          v34 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::channelRange(v4);
          CoreML::ShapeConstraint::updateChannelRange(v5, v34);
          v35 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::heightRange(v4);
          CoreML::ShapeConstraint::updateHeightRange(v5, v35);
          CoreML::ShapeConstraint::updateWidthRange(v5, (const CoreML::ShapeRange *)v49);
          v36 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::channelRange(v5);
          CoreML::ShapeConstraint::updateChannelRange(v4, v36);
          v37 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::heightRange(v5);
          CoreML::ShapeConstraint::updateHeightRange(v4, v37);
          CoreML::ShapeConstraint::lowerBoundWidth(v4, v33);
          goto LABEL_34;
        }
        v38 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::channelRange(v4);
        CoreML::ShapeConstraint::updateChannelRange(v5, v38);
        CoreML::ShapeConstraint::updateHeightRange(v5, (const CoreML::ShapeRange *)v49);
        v39 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::widthRange(v4);
        CoreML::ShapeConstraint::updateWidthRange(v5, v39);
        v40 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::channelRange(v5);
        CoreML::ShapeConstraint::updateChannelRange(v4, v40);
        CoreML::ShapeConstraint::lowerBoundHeight(v4, v33);
      }
      else
      {
        CoreML::ShapeConstraint::updateChannelRange(v5, (const CoreML::ShapeRange *)v49);
        v41 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::heightRange(v4);
        CoreML::ShapeConstraint::updateHeightRange(v5, v41);
        v42 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::widthRange(v4);
        CoreML::ShapeConstraint::updateWidthRange(v5, v42);
        CoreML::ShapeConstraint::lowerBoundChannel(v4, v33);
        v43 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::heightRange(v5);
        CoreML::ShapeConstraint::updateHeightRange(v4, v43);
      }
      v44 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::widthRange(v5);
      CoreML::ShapeConstraint::updateWidthRange(v4, v44);
      goto LABEL_34;
    }
    v16 = -v52;
  }
  v17 = (v53 + ~v52) / v54 + 1;
  if (v55 == 2)
  {
    v26 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::channelRange(v4);
    CoreML::ShapeConstraint::updateChannelRange(v5, v26);
    v27 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::heightRange(v4);
    CoreML::ShapeConstraint::updateHeightRange(v5, v27);
    CoreML::ShapeConstraint::setWidth(v5, v17);
    v28 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::channelRange(v5);
    CoreML::ShapeConstraint::updateChannelRange(v4, v28);
    v29 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::heightRange(v5);
    CoreML::ShapeConstraint::updateHeightRange(v4, v29);
    CoreML::ShapeConstraint::lowerBoundWidth(v4, v16);
  }
  else
  {
    if (v55 == 1)
    {
      v22 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::channelRange(v4);
      CoreML::ShapeConstraint::updateChannelRange(v5, v22);
      CoreML::ShapeConstraint::setHeight(v5, v17);
      v23 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::widthRange(v4);
      CoreML::ShapeConstraint::updateWidthRange(v5, v23);
      v24 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::channelRange(v5);
      CoreML::ShapeConstraint::updateChannelRange(v4, v24);
      CoreML::ShapeConstraint::lowerBoundHeight(v4, v16);
    }
    else
    {
      if (v55)
      {
        v45 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v45, "Slice layer axis incorrect -- should be caught in validator.");
        __cxa_throw(v45, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
      }
      CoreML::ShapeConstraint::setChannel(v5, v17);
      v18 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::heightRange(v4);
      CoreML::ShapeConstraint::updateHeightRange(v5, v18);
      v19 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::widthRange(v4);
      CoreML::ShapeConstraint::updateWidthRange(v5, v19);
      CoreML::ShapeConstraint::lowerBoundChannel(v4, v16);
      v20 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::heightRange(v5);
      CoreML::ShapeConstraint::updateHeightRange(v4, v20);
    }
    v25 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::widthRange(v5);
    CoreML::ShapeConstraint::updateWidthRange(v4, v25);
  }
LABEL_34:
  CoreML::Specification::SliceLayerParams::~SliceLayerParams((CoreML::Specification::SliceLayerParams *)v51);
}

void sub_2183B9624(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  __cxa_free_exception(v1);
  CoreML::Specification::SliceLayerParams::~SliceLayerParams((CoreML::Specification::SliceLayerParams *)(v2 - 112));
  _Unwind_Resume(a1);
}

uint64_t CoreML::NeuralNetworkShaper::shapeSimpleRecurrentLayer(uint64_t **this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  uint64_t **v3;
  CoreML::ShapeConstraint *v4;
  CoreML::ShapeConstraint *v5;
  uint64_t *v6;
  CoreML::ShapeConstraint *v7;
  std::string *v8;
  uint64_t *v9;
  unint64_t v10;
  const CoreML::ShapeRange *v11;
  const void **v13;

  v3 = this + 4;
  v13 = *(const void ***)(*((_QWORD *)a2 + 4) + 8);
  v4 = (CoreML::ShapeConstraint *)(std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(this + 4, v13, (uint64_t)&std::piecewise_construct, (__int128 **)&v13)+ 7);
  v13 = *(const void ***)(*((_QWORD *)a2 + 7) + 8);
  v5 = (CoreML::ShapeConstraint *)(std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, v13, (uint64_t)&std::piecewise_construct, (__int128 **)&v13)+ 7);
  CoreML::ShapeConstraint::setName((uint64_t)v5, *(const std::string **)(*((_QWORD *)a2 + 7) + 8));
  v13 = *(const void ***)(*((_QWORD *)a2 + 4) + 16);
  v6 = std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, v13, (uint64_t)&std::piecewise_construct, (__int128 **)&v13);
  v13 = *(const void ***)(*((_QWORD *)a2 + 7) + 16);
  v7 = (CoreML::ShapeConstraint *)(std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, v13, (uint64_t)&std::piecewise_construct, (__int128 **)&v13)+ 7);
  v8 = CoreML::ShapeConstraint::setName((uint64_t)v7, *(const std::string **)(*((_QWORD *)a2 + 7) + 16));
  if (*((_DWORD *)a2 + 35) == 400)
    v9 = (uint64_t *)*((_QWORD *)a2 + 16);
  else
    v9 = CoreML::Specification::SimpleRecurrentLayerParams::default_instance((CoreML::Specification::SimpleRecurrentLayerParams *)v8);
  v10 = v9[7];
  CoreML::ShapeConstraint::setChannel(v4, v9[6]);
  CoreML::ShapeConstraint::setHeight(v4, 1uLL);
  CoreML::ShapeConstraint::setWidth(v4, 1uLL);
  CoreML::ShapeConstraint::setChannel(v5, v10);
  CoreML::ShapeConstraint::setHeight(v5, 1uLL);
  CoreML::ShapeConstraint::setWidth(v5, 1uLL);
  if (*((_BYTE *)v9 + 64))
  {
    turi::neural_net::float_scalar::~float_scalar(v4);
    CoreML::ShapeConstraint::updateSequenceRange(v5, v11);
  }
  else
  {
    CoreML::ShapeConstraint::setSequence(v5, 1uLL);
  }
  CoreML::ShapeConstraint::setSequence((CoreML::ShapeConstraint *)(v6 + 7), 1uLL);
  CoreML::ShapeConstraint::setChannel((CoreML::ShapeConstraint *)(v6 + 7), v10);
  CoreML::ShapeConstraint::setHeight((CoreML::ShapeConstraint *)(v6 + 7), 1uLL);
  CoreML::ShapeConstraint::setWidth((CoreML::ShapeConstraint *)(v6 + 7), 1uLL);
  CoreML::ShapeConstraint::setSequence(v7, 1uLL);
  CoreML::ShapeConstraint::setChannel(v7, v10);
  CoreML::ShapeConstraint::setHeight(v7, 1uLL);
  return CoreML::ShapeConstraint::setWidth(v7, 1uLL);
}

void CoreML::NeuralNetworkShaper::shapeGRULayer(uint64_t **this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  uint64_t **v3;
  CoreML::ShapeConstraint *v4;
  CoreML::ShapeConstraint *v5;
  std::string *v6;
  uint64_t *v7;
  unint64_t v8;
  const CoreML::ShapeRange *v9;
  CoreML::ShapeConstraint *v10;
  CoreML::ShapeConstraint *v11;
  const void **v12;

  v3 = this + 4;
  v12 = *(const void ***)(*((_QWORD *)a2 + 4) + 8);
  v4 = (CoreML::ShapeConstraint *)(std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(this + 4, v12, (uint64_t)&std::piecewise_construct, (__int128 **)&v12)+ 7);
  v12 = *(const void ***)(*((_QWORD *)a2 + 7) + 8);
  v5 = (CoreML::ShapeConstraint *)(std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, v12, (uint64_t)&std::piecewise_construct, (__int128 **)&v12)+ 7);
  v6 = CoreML::ShapeConstraint::setName((uint64_t)v5, *(const std::string **)(*((_QWORD *)a2 + 7) + 8));
  if (*((_DWORD *)a2 + 35) == 410)
    v7 = (uint64_t *)*((_QWORD *)a2 + 16);
  else
    v7 = CoreML::Specification::GRULayerParams::default_instance((CoreML::Specification::GRULayerParams *)v6);
  v8 = v7[15];
  CoreML::ShapeConstraint::setChannel(v4, v7[14]);
  CoreML::ShapeConstraint::setHeight(v4, 1uLL);
  CoreML::ShapeConstraint::setWidth(v4, 1uLL);
  CoreML::ShapeConstraint::setChannel(v5, v8);
  CoreML::ShapeConstraint::setHeight(v5, 1uLL);
  CoreML::ShapeConstraint::setWidth(v5, 1uLL);
  if (*((_BYTE *)v7 + 128))
  {
    turi::neural_net::float_scalar::~float_scalar(v4);
    CoreML::ShapeConstraint::updateSequenceRange(v5, v9);
  }
  else
  {
    CoreML::ShapeConstraint::setSequence(v5, 1uLL);
  }
  if (*((int *)a2 + 6) >= 2)
  {
    v12 = *(const void ***)(*((_QWORD *)a2 + 4) + 16);
    v10 = (CoreML::ShapeConstraint *)(std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, v12, (uint64_t)&std::piecewise_construct, (__int128 **)&v12)+ 7);
    v12 = *(const void ***)(*((_QWORD *)a2 + 7) + 16);
    v11 = (CoreML::ShapeConstraint *)(std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, v12, (uint64_t)&std::piecewise_construct, (__int128 **)&v12)+ 7);
    CoreML::ShapeConstraint::setName((uint64_t)v11, *(const std::string **)(*((_QWORD *)a2 + 7) + 16));
    CoreML::ShapeConstraint::setSequence(v10, 1uLL);
    CoreML::ShapeConstraint::setChannel(v10, v8);
    CoreML::ShapeConstraint::setHeight(v10, 1uLL);
    CoreML::ShapeConstraint::setWidth(v10, 1uLL);
    CoreML::ShapeConstraint::setSequence(v11, 1uLL);
    CoreML::ShapeConstraint::setChannel(v11, v8);
    CoreML::ShapeConstraint::setHeight(v11, 1uLL);
    CoreML::ShapeConstraint::setWidth(v11, 1uLL);
  }
}

void CoreML::NeuralNetworkShaper::shapeUnidirectionalLSTMLayer(uint64_t **this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  uint64_t **v3;
  CoreML::ShapeConstraint *v4;
  CoreML::ShapeConstraint *v5;
  std::string *v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t *v9;
  const CoreML::ShapeRange *v10;
  CoreML::ShapeConstraint *v11;
  CoreML::ShapeConstraint *v12;
  CoreML::ShapeConstraint *v13;
  CoreML::ShapeConstraint *v14;
  const void **v15;

  v3 = this + 4;
  v15 = *(const void ***)(*((_QWORD *)a2 + 4) + 8);
  v4 = (CoreML::ShapeConstraint *)(std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(this + 4, v15, (uint64_t)&std::piecewise_construct, (__int128 **)&v15)+ 7);
  v15 = *(const void ***)(*((_QWORD *)a2 + 7) + 8);
  v5 = (CoreML::ShapeConstraint *)(std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, v15, (uint64_t)&std::piecewise_construct, (__int128 **)&v15)+ 7);
  v6 = CoreML::ShapeConstraint::setName((uint64_t)v5, *(const std::string **)(*((_QWORD *)a2 + 7) + 8));
  if (*((_DWORD *)a2 + 35) == 420)
    v7 = (uint64_t *)*((_QWORD *)a2 + 16);
  else
    v7 = CoreML::Specification::UniDirectionalLSTMLayerParams::default_instance((CoreML::Specification::UniDirectionalLSTMLayerParams *)v6);
  v8 = v7[8];
  CoreML::ShapeConstraint::setChannel(v4, v7[7]);
  CoreML::ShapeConstraint::setHeight(v4, 1uLL);
  CoreML::ShapeConstraint::setWidth(v4, 1uLL);
  CoreML::ShapeConstraint::setChannel(v5, v8);
  CoreML::ShapeConstraint::setHeight(v5, 1uLL);
  CoreML::ShapeConstraint::setWidth(v5, 1uLL);
  v9 = (uint64_t *)v7[5];
  if (!v9)
    v9 = &CoreML::Specification::_LSTMParams_default_instance_;
  if (*((_BYTE *)v9 + 20))
  {
    turi::neural_net::float_scalar::~float_scalar(v4);
    CoreML::ShapeConstraint::updateSequenceRange(v5, v10);
  }
  else
  {
    CoreML::ShapeConstraint::setSequence(v5, 1uLL);
  }
  if (*((int *)a2 + 6) >= 3)
  {
    v15 = *(const void ***)(*((_QWORD *)a2 + 4) + 16);
    v11 = (CoreML::ShapeConstraint *)(std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, v15, (uint64_t)&std::piecewise_construct, (__int128 **)&v15)+ 7);
    v15 = *(const void ***)(*((_QWORD *)a2 + 7) + 16);
    v12 = (CoreML::ShapeConstraint *)(std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, v15, (uint64_t)&std::piecewise_construct, (__int128 **)&v15)+ 7);
    CoreML::ShapeConstraint::setName((uint64_t)v12, *(const std::string **)(*((_QWORD *)a2 + 7) + 16));
    v15 = *(const void ***)(*((_QWORD *)a2 + 4) + 24);
    v13 = (CoreML::ShapeConstraint *)(std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, v15, (uint64_t)&std::piecewise_construct, (__int128 **)&v15)+ 7);
    v15 = *(const void ***)(*((_QWORD *)a2 + 7) + 24);
    v14 = (CoreML::ShapeConstraint *)(std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, v15, (uint64_t)&std::piecewise_construct, (__int128 **)&v15)+ 7);
    CoreML::ShapeConstraint::setName((uint64_t)v14, *(const std::string **)(*((_QWORD *)a2 + 7) + 24));
    CoreML::ShapeConstraint::setSequence(v11, 1uLL);
    CoreML::ShapeConstraint::setChannel(v11, v8);
    CoreML::ShapeConstraint::setHeight(v11, 1uLL);
    CoreML::ShapeConstraint::setWidth(v11, 1uLL);
    CoreML::ShapeConstraint::setSequence(v13, 1uLL);
    CoreML::ShapeConstraint::setChannel(v13, v8);
    CoreML::ShapeConstraint::setHeight(v13, 1uLL);
    CoreML::ShapeConstraint::setWidth(v13, 1uLL);
    CoreML::ShapeConstraint::setSequence(v12, 1uLL);
    CoreML::ShapeConstraint::setChannel(v12, v8);
    CoreML::ShapeConstraint::setHeight(v12, 1uLL);
    CoreML::ShapeConstraint::setWidth(v12, 1uLL);
    CoreML::ShapeConstraint::setSequence(v14, 1uLL);
    CoreML::ShapeConstraint::setChannel(v14, v8);
    CoreML::ShapeConstraint::setHeight(v14, 1uLL);
    CoreML::ShapeConstraint::setWidth(v14, 1uLL);
  }
}

void CoreML::NeuralNetworkShaper::shapeBidirectionalLSTMLayer(uint64_t **this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  uint64_t **v3;
  CoreML::ShapeConstraint *v4;
  CoreML::ShapeConstraint *v5;
  std::string *v6;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  const CoreML::ShapeRange *v11;
  CoreML::ShapeConstraint *v12;
  CoreML::ShapeConstraint *v13;
  CoreML::ShapeConstraint *v14;
  CoreML::ShapeConstraint *v15;
  CoreML::ShapeConstraint *v16;
  CoreML::ShapeConstraint *v17;
  CoreML::ShapeConstraint *v18;
  CoreML::ShapeConstraint *v19;
  const void **v20;

  v3 = this + 4;
  v20 = *(const void ***)(*((_QWORD *)a2 + 4) + 8);
  v4 = (CoreML::ShapeConstraint *)(std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(this + 4, v20, (uint64_t)&std::piecewise_construct, (__int128 **)&v20)+ 7);
  v20 = *(const void ***)(*((_QWORD *)a2 + 7) + 8);
  v5 = (CoreML::ShapeConstraint *)(std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, v20, (uint64_t)&std::piecewise_construct, (__int128 **)&v20)+ 7);
  v6 = CoreML::ShapeConstraint::setName((uint64_t)v5, *(const std::string **)(*((_QWORD *)a2 + 7) + 8));
  if (*((_DWORD *)a2 + 35) == 430)
    v7 = (uint64_t *)*((_QWORD *)a2 + 16);
  else
    v7 = CoreML::Specification::BiDirectionalLSTMLayerParams::default_instance((CoreML::Specification::BiDirectionalLSTMLayerParams *)v6);
  v9 = v7[12];
  v8 = v7[13];
  CoreML::ShapeConstraint::upperBoundSequence(v4, 0x2710uLL);
  CoreML::ShapeConstraint::setChannel(v4, v9);
  CoreML::ShapeConstraint::setHeight(v4, 1uLL);
  CoreML::ShapeConstraint::setWidth(v4, 1uLL);
  CoreML::ShapeConstraint::setChannel(v5, 2 * v8);
  CoreML::ShapeConstraint::setHeight(v5, 1uLL);
  CoreML::ShapeConstraint::setWidth(v5, 1uLL);
  v10 = (uint64_t *)v7[11];
  if (!v10)
    v10 = &CoreML::Specification::_LSTMParams_default_instance_;
  if (*((_BYTE *)v10 + 20))
  {
    turi::neural_net::float_scalar::~float_scalar(v4);
    CoreML::ShapeConstraint::updateSequenceRange(v5, v11);
  }
  else
  {
    CoreML::ShapeConstraint::setSequence(v5, 1uLL);
  }
  if (*((int *)a2 + 6) >= 5)
  {
    v20 = *(const void ***)(*((_QWORD *)a2 + 4) + 16);
    v12 = (CoreML::ShapeConstraint *)(std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, v20, (uint64_t)&std::piecewise_construct, (__int128 **)&v20)+ 7);
    v20 = *(const void ***)(*((_QWORD *)a2 + 7) + 16);
    v13 = (CoreML::ShapeConstraint *)(std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, v20, (uint64_t)&std::piecewise_construct, (__int128 **)&v20)+ 7);
    CoreML::ShapeConstraint::setName((uint64_t)v13, *(const std::string **)(*((_QWORD *)a2 + 7) + 16));
    v20 = *(const void ***)(*((_QWORD *)a2 + 4) + 24);
    v14 = (CoreML::ShapeConstraint *)(std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, v20, (uint64_t)&std::piecewise_construct, (__int128 **)&v20)+ 7);
    v20 = *(const void ***)(*((_QWORD *)a2 + 7) + 24);
    v15 = (CoreML::ShapeConstraint *)(std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, v20, (uint64_t)&std::piecewise_construct, (__int128 **)&v20)+ 7);
    CoreML::ShapeConstraint::setName((uint64_t)v15, *(const std::string **)(*((_QWORD *)a2 + 7) + 24));
    v20 = *(const void ***)(*((_QWORD *)a2 + 4) + 32);
    v19 = (CoreML::ShapeConstraint *)(std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, v20, (uint64_t)&std::piecewise_construct, (__int128 **)&v20)+ 7);
    v20 = *(const void ***)(*((_QWORD *)a2 + 7) + 32);
    v16 = (CoreML::ShapeConstraint *)(std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, v20, (uint64_t)&std::piecewise_construct, (__int128 **)&v20)+ 7);
    CoreML::ShapeConstraint::setName((uint64_t)v16, *(const std::string **)(*((_QWORD *)a2 + 7) + 32));
    v20 = *(const void ***)(*((_QWORD *)a2 + 4) + 40);
    v17 = (CoreML::ShapeConstraint *)(std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, v20, (uint64_t)&std::piecewise_construct, (__int128 **)&v20)+ 7);
    v20 = *(const void ***)(*((_QWORD *)a2 + 7) + 40);
    v18 = (CoreML::ShapeConstraint *)(std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, v20, (uint64_t)&std::piecewise_construct, (__int128 **)&v20)+ 7);
    CoreML::ShapeConstraint::setName((uint64_t)v18, *(const std::string **)(*((_QWORD *)a2 + 7) + 40));
    CoreML::ShapeConstraint::setSequence(v12, 1uLL);
    CoreML::ShapeConstraint::setChannel(v12, v8);
    CoreML::ShapeConstraint::setHeight(v12, 1uLL);
    CoreML::ShapeConstraint::setWidth(v12, 1uLL);
    CoreML::ShapeConstraint::setSequence(v14, 1uLL);
    CoreML::ShapeConstraint::setChannel(v14, v8);
    CoreML::ShapeConstraint::setHeight(v14, 1uLL);
    CoreML::ShapeConstraint::setWidth(v14, 1uLL);
    CoreML::ShapeConstraint::setSequence(v13, 1uLL);
    CoreML::ShapeConstraint::setChannel(v13, v8);
    CoreML::ShapeConstraint::setHeight(v13, 1uLL);
    CoreML::ShapeConstraint::setWidth(v13, 1uLL);
    CoreML::ShapeConstraint::setSequence(v15, 1uLL);
    CoreML::ShapeConstraint::setChannel(v15, v8);
    CoreML::ShapeConstraint::setHeight(v15, 1uLL);
    CoreML::ShapeConstraint::setWidth(v15, 1uLL);
    CoreML::ShapeConstraint::setSequence(v19, 1uLL);
    CoreML::ShapeConstraint::setChannel(v19, v8);
    CoreML::ShapeConstraint::setHeight(v19, 1uLL);
    CoreML::ShapeConstraint::setWidth(v19, 1uLL);
    CoreML::ShapeConstraint::setSequence(v17, 1uLL);
    CoreML::ShapeConstraint::setChannel(v17, v8);
    CoreML::ShapeConstraint::setHeight(v17, 1uLL);
    CoreML::ShapeConstraint::setWidth(v17, 1uLL);
    CoreML::ShapeConstraint::setSequence(v16, 1uLL);
    CoreML::ShapeConstraint::setChannel(v16, v8);
    CoreML::ShapeConstraint::setHeight(v16, 1uLL);
    CoreML::ShapeConstraint::setWidth(v16, 1uLL);
    CoreML::ShapeConstraint::setSequence(v18, 1uLL);
    CoreML::ShapeConstraint::setChannel(v18, v8);
    CoreML::ShapeConstraint::setHeight(v18, 1uLL);
    CoreML::ShapeConstraint::setWidth(v18, 1uLL);
  }
}

std::string *CoreML::NeuralNetworkShaper::shapeCustomLayer(std::string *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  uint64_t **p_size;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  BOOL v7;
  BOOL v8;
  const void **v9;

  if (*((int *)a2 + 12) >= 1)
  {
    p_size = (uint64_t **)&this[1].__r_.__value_.__l.__size_;
    v4 = 1;
    do
    {
      v9 = *(const void ***)(*((_QWORD *)a2 + 7) + 8 * v4);
      v5 = std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(p_size, v9, (uint64_t)&std::piecewise_construct, (__int128 **)&v9);
      this = CoreML::ShapeConstraint::setName((uint64_t)(v5 + 7), *(const std::string **)(*((_QWORD *)a2 + 7) + 8 * v4));
      v6 = *((int *)a2 + 12);
      v8 = __OFSUB__(v4, v6);
      v7 = v4 - v6 < 0;
      ++v4;
    }
    while (v7 != v8);
  }
  return this;
}

void CoreML::NeuralNetworkShaper::shapeResizeBilinearLayer(uint64_t **this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  uint64_t **v3;
  turi::neural_net::float_scalar *v4;
  turi::neural_net::float_scalar *v5;
  CoreML::ShapeRange *v6;
  CoreML::ShapeRange *v7;
  const CoreML::ShapeRange *v8;
  CoreML::ShapeRange *v9;
  const CoreML::ShapeRange *v10;
  CoreML::ShapeRange *v11;
  const CoreML::ShapeRange *v12;
  CoreML::Specification::ResizeBilinearLayerParams *v13;
  uint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  CoreML::ShapeRange *v17;
  CoreML::ShapeRange *v18;
  const CoreML::ShapeRange *v19;
  CoreML::ShapeRange *v20;
  const CoreML::ShapeRange *v21;
  CoreML::ShapeRange *v22;
  const CoreML::ShapeRange *v23;
  _BYTE v24[32];
  __int128 *v25[2];
  int v26;
  uint64_t v27;

  v3 = this + 4;
  v25[0] = *(__int128 **)(*((_QWORD *)a2 + 4) + 8);
  v4 = (turi::neural_net::float_scalar *)(std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(this + 4, (const void **)v25[0], (uint64_t)&std::piecewise_construct, v25)+ 7);
  v25[0] = *(__int128 **)(*((_QWORD *)a2 + 7) + 8);
  v5 = (turi::neural_net::float_scalar *)(std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, (const void **)v25[0], (uint64_t)&std::piecewise_construct, v25)+ 7);
  CoreML::ShapeConstraint::setName((uint64_t)v5, *(const std::string **)(*((_QWORD *)a2 + 7) + 8));
  turi::neural_net::float_scalar::~float_scalar(v5);
  v7 = v6;
  turi::neural_net::float_scalar::~float_scalar(v4);
  CoreML::ShapeRange::intersect(v7, v8, (uint64_t)v25);
  CoreML::ShapeConstraint::updateSequenceRange(v5, (const CoreML::ShapeRange *)v25);
  v9 = (CoreML::ShapeRange *)CoreML::ShapeConstraint::batchRange(v5);
  v10 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::batchRange(v4);
  CoreML::ShapeRange::intersect(v9, v10, (uint64_t)v25);
  CoreML::ShapeConstraint::updateBatchRange(v5, (const CoreML::ShapeRange *)v25);
  v11 = (CoreML::ShapeRange *)CoreML::ShapeConstraint::channelRange(v5);
  v12 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::channelRange(v4);
  CoreML::ShapeRange::intersect(v11, v12, (uint64_t)v25);
  CoreML::ShapeConstraint::updateChannelRange(v5, (const CoreML::ShapeRange *)v25);
  if (*((_DWORD *)a2 + 35) == 211)
    v14 = (uint64_t *)*((_QWORD *)a2 + 16);
  else
    v14 = CoreML::Specification::ResizeBilinearLayerParams::default_instance(v13);
  CoreML::Specification::ResizeBilinearLayerParams::ResizeBilinearLayerParams((CoreML::Specification::ResizeBilinearLayerParams *)v25, (const CoreML::Specification::ResizeBilinearLayerParams *)v14);
  if (v26 == 2)
  {
    if (*(_QWORD *)(v27 + 8) <= 1uLL)
      v15 = 1;
    else
      v15 = *(_QWORD *)(v27 + 8);
    if (*(_QWORD *)(v27 + 16) <= 1uLL)
      v16 = 1;
    else
      v16 = *(_QWORD *)(v27 + 16);
  }
  else
  {
    v15 = 1;
    v16 = 1;
  }
  CoreML::ShapeConstraint::setHeight(v5, v15);
  CoreML::ShapeConstraint::setWidth(v5, v16);
  turi::neural_net::float_scalar::~float_scalar(v4);
  v18 = v17;
  turi::neural_net::float_scalar::~float_scalar(v5);
  CoreML::ShapeRange::intersect(v18, v19, (uint64_t)v24);
  CoreML::ShapeConstraint::updateSequenceRange(v4, (const CoreML::ShapeRange *)v24);
  v20 = (CoreML::ShapeRange *)CoreML::ShapeConstraint::batchRange(v4);
  v21 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::batchRange(v5);
  CoreML::ShapeRange::intersect(v20, v21, (uint64_t)v24);
  CoreML::ShapeConstraint::updateBatchRange(v4, (const CoreML::ShapeRange *)v24);
  v22 = (CoreML::ShapeRange *)CoreML::ShapeConstraint::channelRange(v4);
  v23 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::channelRange(v5);
  CoreML::ShapeRange::intersect(v22, v23, (uint64_t)v24);
  CoreML::ShapeConstraint::updateChannelRange(v4, (const CoreML::ShapeRange *)v24);
  CoreML::Specification::ResizeBilinearLayerParams::~ResizeBilinearLayerParams((CoreML::Specification::ResizeBilinearLayerParams *)v25);
}

void sub_2183BA400(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  CoreML::Specification::ResizeBilinearLayerParams::~ResizeBilinearLayerParams((CoreML::Specification::ResizeBilinearLayerParams *)va);
  _Unwind_Resume(a1);
}

void CoreML::NeuralNetworkShaper::shapeCropResizeLayer(uint64_t **this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  uint64_t **v3;
  CoreML::ShapeConstraint *v4;
  turi::neural_net::float_scalar *v5;
  turi::neural_net::float_scalar *v6;
  CoreML::ShapeRange *v7;
  CoreML::ShapeRange *v8;
  const CoreML::ShapeRange *v9;
  CoreML::ShapeRange *v10;
  const CoreML::ShapeRange *v11;
  CoreML::ShapeRange *v12;
  const CoreML::ShapeRange *v13;
  CoreML::Specification::CropResizeLayerParams *v14;
  uint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  CoreML::ShapeRange *v18;
  const CoreML::ShapeRange *v19;
  CoreML::ShapeRange *v20;
  CoreML::ShapeRange *v21;
  const CoreML::ShapeRange *v22;
  _BYTE v23[32];
  __int128 *v24[2];
  int v25;
  uint64_t v26;

  v3 = this + 4;
  v24[0] = *(__int128 **)(*((_QWORD *)a2 + 4) + 8);
  v4 = (CoreML::ShapeConstraint *)(std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(this + 4, (const void **)v24[0], (uint64_t)&std::piecewise_construct, v24)+ 7);
  v24[0] = *(__int128 **)(*((_QWORD *)a2 + 4) + 16);
  v5 = (turi::neural_net::float_scalar *)(std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, (const void **)v24[0], (uint64_t)&std::piecewise_construct, v24)+ 7);
  v24[0] = *(__int128 **)(*((_QWORD *)a2 + 7) + 8);
  v6 = (turi::neural_net::float_scalar *)(std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, (const void **)v24[0], (uint64_t)&std::piecewise_construct, v24)+ 7);
  CoreML::ShapeConstraint::setName((uint64_t)v6, *(const std::string **)(*((_QWORD *)a2 + 7) + 8));
  turi::neural_net::float_scalar::~float_scalar(v6);
  v8 = v7;
  turi::neural_net::float_scalar::~float_scalar(v5);
  CoreML::ShapeRange::intersect(v8, v9, (uint64_t)v24);
  CoreML::ShapeConstraint::updateSequenceRange(v6, (const CoreML::ShapeRange *)v24);
  v10 = (CoreML::ShapeRange *)CoreML::ShapeConstraint::batchRange(v6);
  v11 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::batchRange(v4);
  CoreML::ShapeRange::intersect(v10, v11, (uint64_t)v24);
  CoreML::ShapeConstraint::updateBatchRange(v6, (const CoreML::ShapeRange *)v24);
  v12 = (CoreML::ShapeRange *)CoreML::ShapeConstraint::channelRange(v6);
  v13 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::channelRange(v4);
  CoreML::ShapeRange::intersect(v12, v13, (uint64_t)v24);
  CoreML::ShapeConstraint::updateChannelRange(v6, (const CoreML::ShapeRange *)v24);
  if (*((_DWORD *)a2 + 35) == 212)
    v15 = (uint64_t *)*((_QWORD *)a2 + 16);
  else
    v15 = CoreML::Specification::CropResizeLayerParams::default_instance(v14);
  CoreML::Specification::CropResizeLayerParams::CropResizeLayerParams((CoreML::Specification::CropResizeLayerParams *)v24, (const CoreML::Specification::CropResizeLayerParams *)v15);
  if (v25 == 2)
  {
    if (*(_QWORD *)(v26 + 8) <= 1uLL)
      v16 = 1;
    else
      v16 = *(_QWORD *)(v26 + 8);
    if (*(_QWORD *)(v26 + 16) <= 1uLL)
      v17 = 1;
    else
      v17 = *(_QWORD *)(v26 + 16);
  }
  else
  {
    v16 = 1;
    v17 = 1;
  }
  CoreML::ShapeConstraint::setHeight(v6, v16);
  CoreML::ShapeConstraint::setWidth(v6, v17);
  v18 = (CoreML::ShapeRange *)CoreML::ShapeConstraint::channelRange(v4);
  v19 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::channelRange(v6);
  CoreML::ShapeRange::intersect(v18, v19, (uint64_t)v23);
  CoreML::ShapeConstraint::updateChannelRange(v4, (const CoreML::ShapeRange *)v23);
  turi::neural_net::float_scalar::~float_scalar(v5);
  v21 = v20;
  turi::neural_net::float_scalar::~float_scalar(v6);
  CoreML::ShapeRange::intersect(v21, v22, (uint64_t)v23);
  CoreML::ShapeConstraint::updateSequenceRange(v5, (const CoreML::ShapeRange *)v23);
  CoreML::ShapeConstraint::setBatch(v5, 1uLL);
  CoreML::ShapeRange::ShapeRange((CoreML::ShapeRange *)v23, 4uLL, 5uLL);
  CoreML::ShapeConstraint::updateChannelRange(v5, (const CoreML::ShapeRange *)v23);
  CoreML::ShapeConstraint::setWidth(v5, 1uLL);
  CoreML::ShapeConstraint::setHeight(v5, 1uLL);
  CoreML::Specification::CropResizeLayerParams::~CropResizeLayerParams((CoreML::Specification::CropResizeLayerParams *)v24);
}

void sub_2183BA67C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  CoreML::Specification::CropResizeLayerParams::~CropResizeLayerParams((CoreML::Specification::CropResizeLayerParams *)va);
  _Unwind_Resume(a1);
}

void CoreML::NeuralNetworkShaper::ProcessLayer(uint64_t **this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  int v2;
  std::runtime_error *exception;

  v2 = *((_DWORD *)a2 + 35);
  if (v2 <= 244)
  {
    if (v2 <= 179)
    {
      if (v2 <= 149)
      {
        if (v2 > 129)
        {
          if (v2 != 130)
          {
            if (v2 == 140)
            {
              CoreML::NeuralNetworkShaper::shapeInnerProductLayer(this, a2);
              return;
            }
            goto LABEL_88;
          }
LABEL_71:
          CoreML::NeuralNetworkShaper::shapeUnchanged(this, a2);
          return;
        }
        if (v2 != 100)
        {
          if (v2 == 120)
          {
            CoreML::NeuralNetworkShaper::shapePoolingLayer(this, a2);
            return;
          }
          if (!v2)
          {
            exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(exception, "Layer type not found.");
            goto LABEL_89;
          }
          goto LABEL_88;
        }
        CoreML::NeuralNetworkShaper::shapeConvolutionLayer(this, a2);
      }
      else
      {
        if (v2 > 164)
        {
          if (v2 != 165 && v2 != 170 && v2 != 175)
            goto LABEL_88;
          goto LABEL_71;
        }
        if (v2 != 150)
        {
          if (v2 != 160)
            goto LABEL_88;
          goto LABEL_71;
        }
        CoreML::NeuralNetworkShaper::shapeEmbeddingLayer(this, a2);
      }
    }
    else if (v2 > 211)
    {
      if (v2 > 229)
      {
        if (v2 == 230 || v2 == 231 || v2 == 240)
        {
          CoreML::NeuralNetworkShaper::shapeBroadcastLayer(this, a2);
          return;
        }
        goto LABEL_88;
      }
      if (v2 != 212)
      {
        if (v2 != 220)
          goto LABEL_88;
        goto LABEL_71;
      }
      CoreML::NeuralNetworkShaper::shapeCropResizeLayer(this, a2);
    }
    else
    {
      if (v2 <= 199)
      {
        if (v2 != 180)
        {
          if (v2 == 190)
          {
            CoreML::NeuralNetworkShaper::shapeCropLayer(this, a2);
            return;
          }
          goto LABEL_88;
        }
        goto LABEL_71;
      }
      switch(v2)
      {
        case 200:
          CoreML::NeuralNetworkShaper::shapePaddingLayer(this, a2);
          break;
        case 210:
          CoreML::NeuralNetworkShaper::shapeUpsampleLayer(this, a2);
          break;
        case 211:
          CoreML::NeuralNetworkShaper::shapeResizeBilinearLayer(this, a2);
          return;
        default:
          goto LABEL_88;
      }
    }
  }
  else if (v2 > 319)
  {
    if (v2 > 399)
    {
      if (v2 <= 419)
      {
        if (v2 != 400)
        {
          if (v2 == 410)
          {
            CoreML::NeuralNetworkShaper::shapeGRULayer(this, a2);
            return;
          }
          goto LABEL_88;
        }
        CoreML::NeuralNetworkShaper::shapeSimpleRecurrentLayer(this, a2);
      }
      else
      {
        switch(v2)
        {
          case 420:
            CoreML::NeuralNetworkShaper::shapeUnidirectionalLSTMLayer(this, a2);
            break;
          case 430:
            CoreML::NeuralNetworkShaper::shapeBidirectionalLSTMLayer(this, a2);
            break;
          case 500:
            CoreML::NeuralNetworkShaper::shapeCustomLayer((std::string *)this, a2);
            return;
          default:
            goto LABEL_88;
        }
      }
    }
    else if (v2 <= 339)
    {
      if (v2 != 320)
      {
        if (v2 == 330)
        {
          CoreML::NeuralNetworkShaper::shapeSplitLayer(this, a2);
          return;
        }
        goto LABEL_88;
      }
      CoreML::NeuralNetworkShaper::shapeConcatLayer(this, a2);
    }
    else
    {
      switch(v2)
      {
        case 340:
          CoreML::NeuralNetworkShaper::shapeSequenceRepeatLayer(this, a2);
          break;
        case 345:
          CoreML::NeuralNetworkShaper::shapeReorganizeDataLayer(this, a2);
          break;
        case 350:
          CoreML::NeuralNetworkShaper::shapeSliceLayer(this, a2);
          return;
        default:
          goto LABEL_88;
      }
    }
  }
  else
  {
    if (v2 <= 279)
    {
      if (v2 > 259)
      {
        if (v2 != 260 && v2 != 261)
        {
          if (v2 == 270)
          {
            CoreML::NeuralNetworkShaper::shapeDotLayer(this, a2);
            return;
          }
          goto LABEL_88;
        }
        goto LABEL_71;
      }
      if (v2 != 245 && v2 != 250)
      {
LABEL_88:
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Shape inference not implemented for this layer type.");
LABEL_89:
        __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
      }
      goto LABEL_71;
    }
    if (v2 <= 299)
    {
      if (v2 != 280)
      {
        if (v2 == 290)
        {
          CoreML::NeuralNetworkShaper::shapeLoadConstantLayer(this, a2);
          return;
        }
        goto LABEL_88;
      }
      CoreML::NeuralNetworkShaper::shapeReduceLayer(this, a2);
    }
    else
    {
      switch(v2)
      {
        case 300:
          CoreML::NeuralNetworkShaper::shapeReshapeLayer(this, a2);
          break;
        case 301:
          CoreML::NeuralNetworkShaper::shapeFlattenLayer(this, a2);
          break;
        case 310:
          CoreML::NeuralNetworkShaper::shapePermuteLayer(this, a2);
          return;
        default:
          goto LABEL_88;
      }
    }
  }
}

void sub_2183BAA00(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *CoreML::NeuralNetworkShaper::PassColorsDown(char *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  uint64_t v2;
  const void ***v3;
  uint64_t v4;
  uint64_t **v6;
  uint64_t v7;
  const void ***v8;
  uint64_t v9;
  uint64_t v10;
  const void ***v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t **v14;
  _QWORD *v15;
  _QWORD *v16;
  BOOL v17;
  const void ***v18;
  const void **v19;

  v2 = *((_QWORD *)a2 + 4);
  if (v2)
    v3 = (const void ***)(v2 + 8);
  else
    v3 = 0;
  v4 = *((int *)a2 + 6);
  if ((_DWORD)v4)
  {
    v18 = &v3[v4];
    v6 = (uint64_t **)(this + 8);
    do
    {
      v19 = *v3;
      this = (char *)std::__tree<std::__value_type<std::string,std::set<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v6, v19, (uint64_t)&std::piecewise_construct, (__int128 **)&v19);
      v7 = *((_QWORD *)a2 + 7);
      if (v7)
        v8 = (const void ***)(v7 + 8);
      else
        v8 = 0;
      v9 = *((int *)a2 + 12);
      if ((_DWORD)v9)
      {
        v10 = (uint64_t)this;
        v11 = &v8[v9];
        v12 = this + 64;
        do
        {
          v19 = *v8;
          this = (char *)std::__tree<std::__value_type<std::string,std::set<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v6, v19, (uint64_t)&std::piecewise_construct, (__int128 **)&v19);
          v13 = *(_QWORD **)(v10 + 56);
          if (v13 != v12)
          {
            v14 = (uint64_t **)(this + 56);
            do
            {
              LODWORD(v19) = *((_DWORD *)v13 + 7);
              this = (char *)std::__tree<int>::__emplace_unique_key_args<int,int const&>(v14, (int *)&v19, &v19);
              v15 = (_QWORD *)v13[1];
              if (v15)
              {
                do
                {
                  v16 = v15;
                  v15 = (_QWORD *)*v15;
                }
                while (v15);
              }
              else
              {
                do
                {
                  v16 = (_QWORD *)v13[2];
                  v17 = *v16 == (_QWORD)v13;
                  v13 = v16;
                }
                while (!v17);
              }
              v13 = v16;
            }
            while (v16 != v12);
          }
          ++v8;
        }
        while (v8 != v11);
      }
      ++v3;
    }
    while (v3 != v18);
  }
  return this;
}

char *CoreML::NeuralNetworkShaper::PassColorsUp(char *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  uint64_t v2;
  const void ***v3;
  uint64_t v4;
  uint64_t **v6;
  uint64_t v7;
  const void ***v8;
  uint64_t v9;
  uint64_t v10;
  const void ***v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t **v14;
  _QWORD *v15;
  _QWORD *v16;
  BOOL v17;
  const void ***v18;
  const void **v19;

  v2 = *((_QWORD *)a2 + 7);
  if (v2)
    v3 = (const void ***)(v2 + 8);
  else
    v3 = 0;
  v4 = *((int *)a2 + 12);
  if ((_DWORD)v4)
  {
    v18 = &v3[v4];
    v6 = (uint64_t **)(this + 8);
    do
    {
      v19 = *v3;
      this = (char *)std::__tree<std::__value_type<std::string,std::set<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v6, v19, (uint64_t)&std::piecewise_construct, (__int128 **)&v19);
      v7 = *((_QWORD *)a2 + 4);
      if (v7)
        v8 = (const void ***)(v7 + 8);
      else
        v8 = 0;
      v9 = *((int *)a2 + 6);
      if ((_DWORD)v9)
      {
        v10 = (uint64_t)this;
        v11 = &v8[v9];
        v12 = this + 64;
        do
        {
          v19 = *v8;
          this = (char *)std::__tree<std::__value_type<std::string,std::set<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v6, v19, (uint64_t)&std::piecewise_construct, (__int128 **)&v19);
          v13 = *(_QWORD **)(v10 + 56);
          if (v13 != v12)
          {
            v14 = (uint64_t **)(this + 56);
            do
            {
              LODWORD(v19) = *((_DWORD *)v13 + 7);
              this = (char *)std::__tree<int>::__emplace_unique_key_args<int,int const&>(v14, (int *)&v19, &v19);
              v15 = (_QWORD *)v13[1];
              if (v15)
              {
                do
                {
                  v16 = v15;
                  v15 = (_QWORD *)*v15;
                }
                while (v15);
              }
              else
              {
                do
                {
                  v16 = (_QWORD *)v13[2];
                  v17 = *v16 == (_QWORD)v13;
                  v13 = v16;
                }
                while (!v17);
              }
              v13 = v16;
            }
            while (v16 != v12);
          }
          ++v8;
        }
        while (v8 != v11);
      }
      ++v3;
    }
    while (v3 != v18);
  }
  return this;
}

BOOL CoreML::NeuralNetworkShaper::AllShapesDone(CoreML::NeuralNetworkShaper *this)
{
  char *v1;
  char *v2;
  int v3;
  int v4;
  _BOOL8 result;
  char *v6;
  char *v7;
  BOOL v8;

  v1 = (char *)*((_QWORD *)this + 1);
  v2 = (char *)this + 16;
  if (v1 == (char *)this + 16)
    return 1;
  v3 = *(_DWORD *)this;
  do
  {
    v4 = *((_DWORD *)v1 + 18);
    result = v3 == v4;
    if (v3 != v4)
      break;
    v6 = (char *)*((_QWORD *)v1 + 1);
    if (v6)
    {
      do
      {
        v7 = v6;
        v6 = *(char **)v6;
      }
      while (v6);
    }
    else
    {
      do
      {
        v7 = (char *)*((_QWORD *)v1 + 2);
        v8 = *(_QWORD *)v7 == (_QWORD)v1;
        v1 = v7;
      }
      while (!v8);
    }
    v1 = v7;
  }
  while (v7 != v2);
  return result;
}

uint64_t CoreML::NeuralNetworkShaper::NeuralNetworkShaper(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v8;
  uint64_t **v9;
  int v10;
  uint64_t v11;
  CoreML::ShapeConstraint *v12;
  uint64_t *v13;
  const CoreML::Specification::FeatureType *v14;
  uint64_t v15;
  uint64_t v16;
  const CoreML::Specification::NeuralNetworkLayer *v17;
  uint64_t i;
  const CoreML::Specification::NeuralNetworkLayer *v19;
  _BOOL4 v20;
  __int128 *v21;
  uint64_t *v22;
  _BOOL4 v23;
  __int128 *v24;
  __int128 *v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t j;
  uint64_t v29;
  const void **v30;
  size_t v31;
  size_t v32;
  const void *v33;
  uint64_t v34;
  int v35;
  size_t v36;
  const void *v37;
  size_t v38;
  BOOL v39;
  const void *v40;
  uint64_t v41;
  int v42;
  size_t v43;
  const void *v44;
  size_t v45;
  BOOL v46;
  CoreML::ShapeConstraint *v47;
  CoreML::ShapeConstraint *v48;
  uint64_t *v49;
  int v50;
  unint64_t v51;
  CoreML::Specification::ImageFeatureType *v52;
  uint64_t *v53;
  uint64_t *v54;
  uint64_t *v55;
  uint64_t *v56;
  int v57;
  uint64_t *v58;
  uint64_t *v59;
  CoreML::Specification::ImageFeatureType *v60;
  uint64_t *v61;
  uint64_t *v62;
  CoreML::Specification::ArrayFeatureType *v63;
  uint64_t *v64;
  uint64_t *v65;
  uint64_t *v66;
  uint64_t *v67;
  unint64_t *v68;
  CoreML::Specification::ArrayFeatureType *v69;
  uint64_t *v70;
  uint64_t *v71;
  unint64_t v72;
  uint64_t v74;
  uint64_t **v75;
  const void **v76;
  _QWORD *v77[2];
  int v78;

  v8 = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 8) = a1 + 16;
  v9 = (uint64_t **)(a1 + 8);
  *(_DWORD *)a1 = v8;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  v74 = a1 + 40;
  v75 = (uint64_t **)(a1 + 32);
  *(_QWORD *)(a1 + 48) = 0;
  v78 = 0;
  if (*(int *)(a2 + 24) >= 1)
  {
    v10 = 0;
    do
    {
      v11 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8 * v10 + 8);
      v76 = *(const void ***)(v11 + 16);
      v12 = (CoreML::ShapeConstraint *)(std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v75, v76, (uint64_t)&std::piecewise_construct, (__int128 **)&v76)+ 7);
      CoreML::ShapeConstraint::setName((uint64_t)v12, *(const std::string **)(v11 + 16));
      v76 = *(const void ***)(v11 + 16);
      v13 = std::__tree<std::__value_type<std::string,std::set<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v9, v76, (uint64_t)&std::piecewise_construct, (__int128 **)&v76);
      std::__tree<int>::__emplace_unique_key_args<int,int const&>((uint64_t **)v13 + 7, &v78, &v78);
      if (a4)
      {
        if (*(_QWORD *)(v11 + 32))
          v14 = *(const CoreML::Specification::FeatureType **)(v11 + 32);
        else
          v14 = (const CoreML::Specification::FeatureType *)&CoreML::Specification::_FeatureType_default_instance_;
        CoreML::ShapeConstraint::updateConstraint(v12, v14);
      }
      v10 = v78 + 1;
      v78 = v10;
    }
    while (v10 < *(_DWORD *)(a2 + 24));
  }
  do
  {
    std::map<std::string,std::set<int>>::map[abi:ne180100]((uint64_t *)&v76, (const void ***)v9);
    LODWORD(v15) = *(_DWORD *)(a3 + 8);
    if ((int)v15 >= 1)
    {
      v16 = 0;
      do
      {
        v17 = *(const CoreML::Specification::NeuralNetworkLayer **)(*(_QWORD *)(a3 + 16) + 8 * v16 + 8);
        CoreML::NeuralNetworkShaper::PassColorsDown((char *)a1, v17);
        CoreML::NeuralNetworkShaper::ProcessLayer((uint64_t **)a1, v17);
        ++v16;
        v15 = *(int *)(a3 + 8);
      }
      while (v16 < v15);
    }
    for (i = v15; (int)i > 0; --i)
    {
      v19 = *(const CoreML::Specification::NeuralNetworkLayer **)(*(_QWORD *)(a3 + 16) + 8 * i);
      CoreML::NeuralNetworkShaper::PassColorsUp((char *)a1, v19);
      CoreML::NeuralNetworkShaper::ProcessLayer((uint64_t **)a1, v19);
    }
    v20 = CoreML::NeuralNetworkShaper::AllShapesDone((CoreML::NeuralNetworkShaper *)a1);
    if (v77[1] == *(_QWORD **)(a1 + 24))
    {
      v21 = (__int128 *)v76;
      if (v76 == (const void **)v77)
      {
        v23 = 1;
      }
      else
      {
        v22 = *v9;
        do
        {
          v23 = std::__equal_to::operator()[abi:ne180100]<std::pair<std::string const,std::set<int>>,std::pair<std::string const,std::set<int>>>((uint64_t)&v78, (unsigned __int8 *)v21 + 32, (unsigned __int8 *)v22 + 32);
          if (!v23)
            break;
          v24 = (__int128 *)*((_QWORD *)v21 + 1);
          v25 = v21;
          if (v24)
          {
            do
            {
              v21 = v24;
              v24 = *(__int128 **)v24;
            }
            while (v24);
          }
          else
          {
            do
            {
              v21 = (__int128 *)*((_QWORD *)v25 + 2);
              v39 = *(_QWORD *)v21 == (_QWORD)v25;
              v25 = v21;
            }
            while (!v39);
          }
          v26 = (uint64_t *)v22[1];
          if (v26)
          {
            do
            {
              v27 = v26;
              v26 = (uint64_t *)*v26;
            }
            while (v26);
          }
          else
          {
            do
            {
              v27 = (uint64_t *)v22[2];
              v39 = *v27 == (_QWORD)v22;
              v22 = v27;
            }
            while (!v39);
          }
          v22 = v27;
        }
        while (v21 != (__int128 *)v77);
      }
    }
    else
    {
      v23 = 0;
    }
    std::__tree<std::__value_type<std::string,std::set<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<int>>>>::destroy((uint64_t)&v76, v77[0]);
  }
  while (!v23 && !v20);
  if (a4 && *(int *)(a2 + 48) >= 1)
  {
    for (j = 0; j < *(int *)(a2 + 48); ++j)
    {
      v29 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * j + 8);
      v30 = *(const void ***)(v29 + 16);
      v31 = *((unsigned __int8 *)v30 + 23);
      v32 = v31;
      v33 = v30;
      if (*((char *)v30 + 23) < 0)
      {
        v33 = *v30;
        v32 = (size_t)v30[1];
      }
      v34 = *(_QWORD *)(a2 + 96);
      v35 = *(char *)(v34 + 23);
      if (v35 >= 0)
        v36 = *(unsigned __int8 *)(v34 + 23);
      else
        v36 = *(_QWORD *)(v34 + 8);
      if (v35 >= 0)
        v37 = *(const void **)(a2 + 96);
      else
        v37 = *(const void **)v34;
      if (v36 >= v32)
        v38 = v32;
      else
        v38 = v36;
      v39 = !memcmp(v33, v37, v38) && v36 == v32;
      if (v39)
        continue;
      v40 = v30;
      if ((v31 & 0x80) != 0)
      {
        v40 = *v30;
        v31 = (size_t)v30[1];
      }
      v41 = *(_QWORD *)(a2 + 88);
      v42 = *(char *)(v41 + 23);
      v43 = v42 >= 0 ? *(unsigned __int8 *)(v41 + 23) : *(_QWORD *)(v41 + 8);
      v44 = v42 >= 0 ? *(const void **)(a2 + 88) : *(const void **)v41;
      v45 = v43 >= v31 ? v31 : v43;
      v46 = !memcmp(v40, v44, v45) && v43 == v31;
      if (v46
        || v74 == std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>((uint64_t)v75, v30))
      {
        continue;
      }
      v47 = (CoreML::ShapeConstraint *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)v75, *(const void ***)(v29 + 16));
      v48 = v47;
      v49 = *(uint64_t **)(v29 + 32);
      if (!v49)
        v49 = &CoreML::Specification::_FeatureType_default_instance_;
      v50 = *((_DWORD *)v49 + 9);
      if (v50 == 5)
      {
        v55 = (uint64_t *)v49[3];
      }
      else
      {
        if (v50 == 4)
        {
          if (*(_DWORD *)(v49[3] + 32) == 10)
            v51 = 1;
          else
            v51 = 3;
          v52 = (CoreML::Specification::ImageFeatureType *)CoreML::ShapeConstraint::setChannel(v47, v51);
          v53 = *(uint64_t **)(v29 + 32);
          if (!v53)
            v53 = &CoreML::Specification::_FeatureType_default_instance_;
          if (*((_DWORD *)v53 + 9) == 4)
            v54 = (uint64_t *)v53[3];
          else
            v54 = CoreML::Specification::ImageFeatureType::default_instance(v52);
          v60 = (CoreML::Specification::ImageFeatureType *)CoreML::ShapeConstraint::setHeight(v48, v54[3]);
          v61 = *(uint64_t **)(v29 + 32);
          if (!v61)
            v61 = &CoreML::Specification::_FeatureType_default_instance_;
          if (*((_DWORD *)v61 + 9) == 4)
            v62 = (uint64_t *)v61[3];
          else
            v62 = CoreML::Specification::ImageFeatureType::default_instance(v60);
          v68 = (unint64_t *)(v62 + 2);
LABEL_113:
          v72 = *v68;
          goto LABEL_116;
        }
        v55 = CoreML::Specification::ArrayFeatureType::default_instance(v47);
      }
      v56 = *(uint64_t **)(v29 + 32);
      if (!v56)
        v56 = &CoreML::Specification::_FeatureType_default_instance_;
      v57 = *((_DWORD *)v56 + 9);
      if (*((_DWORD *)v55 + 4) == 3)
      {
        if (v57 == 5)
          v58 = (uint64_t *)v56[3];
        else
          v58 = CoreML::Specification::ArrayFeatureType::default_instance((CoreML::Specification::ArrayFeatureType *)v55);
        v63 = (CoreML::Specification::ArrayFeatureType *)CoreML::ShapeConstraint::setChannel(v48, *(_QWORD *)(v58[3] + 8));
        v64 = *(uint64_t **)(v29 + 32);
        if (!v64)
          v64 = &CoreML::Specification::_FeatureType_default_instance_;
        if (*((_DWORD *)v64 + 9) == 5)
          v65 = (uint64_t *)v64[3];
        else
          v65 = CoreML::Specification::ArrayFeatureType::default_instance(v63);
        v69 = (CoreML::Specification::ArrayFeatureType *)CoreML::ShapeConstraint::setHeight(v48, *(_QWORD *)(v65[3] + 16));
        v70 = *(uint64_t **)(v29 + 32);
        if (!v70)
          v70 = &CoreML::Specification::_FeatureType_default_instance_;
        if (*((_DWORD *)v70 + 9) == 5)
          v71 = (uint64_t *)v70[3];
        else
          v71 = CoreML::Specification::ArrayFeatureType::default_instance(v69);
        v68 = (unint64_t *)(v71[3] + 24);
        goto LABEL_113;
      }
      if (v57 == 5)
        v59 = (uint64_t *)v56[3];
      else
        v59 = CoreML::Specification::ArrayFeatureType::default_instance((CoreML::Specification::ArrayFeatureType *)v55);
      if (*((_DWORD *)v59 + 4) != 1)
        continue;
      v66 = *(uint64_t **)(v29 + 32);
      if (!v66)
        v66 = &CoreML::Specification::_FeatureType_default_instance_;
      if (*((_DWORD *)v66 + 9) == 5)
        v67 = (uint64_t *)v66[3];
      else
        v67 = CoreML::Specification::ArrayFeatureType::default_instance((CoreML::Specification::ArrayFeatureType *)v59);
      CoreML::ShapeConstraint::setChannel(v48, *(_QWORD *)(v67[3] + 8));
      CoreML::ShapeConstraint::setHeight(v48, 1uLL);
      v72 = 1;
LABEL_116:
      CoreML::ShapeConstraint::setWidth(v48, v72);
    }
  }
  return a1;
}

void sub_2183BB258(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD **a10, _QWORD **a11, uint64_t a12)
{
  uint64_t v12;

  std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::destroy(a12, *a11);
  std::__tree<std::__value_type<std::string,std::set<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<int>>>>::destroy(v12, *a10);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,CoreML::ShapeConstraint>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,CoreML::ShapeConstraint>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

std::string *std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0xF0uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = std::pair<std::string const,CoreML::ShapeConstraint>::pair[abi:ne180100]<std::string const&>((std::string *)(v6 + 32), *a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_2183BB3A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,CoreML::ShapeConstraint>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,CoreML::ShapeConstraint>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,CoreML::ShapeConstraint>::pair[abi:ne180100]<std::string const&>(std::string *this, __int128 *a2)
{
  __int128 v3;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v3 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
  }
  CoreML::ShapeConstraint::ShapeConstraint((CoreML::ShapeConstraint *)&this[1]);
  return this;
}

void sub_2183BB410(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,CoreML::ShapeConstraint>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,CoreML::ShapeConstraint>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,CoreML::ShapeConstraint>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

_QWORD *std::vector<CoreML::ShapeRange>::vector(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__vallocate[abi:ne180100](a1, a2);
    v4 = a1[1];
    v5 = v4 + 32 * a2;
    v6 = 32 * a2;
    do
    {
      CoreML::ShapeRange::ShapeRange(v4);
      v4 += 32;
      v6 -= 32;
    }
    while (v6);
    a1[1] = v5;
  }
  return a1;
}

void sub_2183BB4D4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::__tree<std::__value_type<std::string,std::set<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    std::__tree<std::__value_type<std::string,std::set<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<int>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::set<int>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::set<int>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void std::__tree<std::__value_type<std::string,std::set<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<int>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  std::string *v7;
  __int128 *v8;
  __int128 v9;

  v5 = a1 + 8;
  v6 = operator new(0x50uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = (std::string *)(v6 + 4);
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    v6[6] = *((_QWORD *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  v6[8] = 0;
  v6[9] = 0;
  v6[7] = v6 + 8;
  *(_BYTE *)(a3 + 16) = 1;
}

void sub_2183BB620(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::set<int>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::set<int>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::set<int>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::set<int>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::set<int>>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

uint64_t *std::map<std::string,std::set<int>>::map[abi:ne180100](uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<std::string,std::set<int>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::set<int>>,std::__tree_node<std::__value_type<std::string,std::set<int>>,void *> *,long>>>(a1, *a2, a2 + 1);
  return a1;
}

void sub_2183BB6B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::string,std::set<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<int>>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,std::set<int>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::set<int>>,std::__tree_node<std::__value_type<std::string,std::set<int>>,void *> *,long>>>(uint64_t *result, const void **a2, const void ***a3)
{
  const void **v4;
  uint64_t **v5;
  uint64_t *v6;
  const void **v7;
  const void ***v8;
  BOOL v9;

  if (a2 != (const void **)a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = std::__tree<std::__value_type<std::string,std::set<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<int>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::set<int>> const&>(v5, v6, v4 + 4, (__int128 *)v4 + 2);
      v7 = (const void **)v4[1];
      if (v7)
      {
        do
        {
          v8 = (const void ***)v7;
          v7 = (const void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (const void ***)v4[2];
          v9 = *v8 == v4;
          v4 = (const void **)v8;
        }
        while (!v9);
      }
      v4 = (const void **)v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,std::set<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<int>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::set<int>> const&>(uint64_t **a1, uint64_t *a2, const void **a3, __int128 *a4)
{
  const void **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;
  const void **v12;

  v6 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_equal<std::string>(a1, a2, &v12, &v11, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    std::__tree<std::__value_type<std::string,std::set<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<int>>>>::__construct_node<std::pair<std::string const,std::set<int>> const&>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, (uint64_t)v12, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::set<int>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::set<int>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

std::string *std::__tree<std::__value_type<std::string,std::set<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<int>>>>::__construct_node<std::pair<std::string const,std::set<int>> const&>@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x50uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = std::pair<std::string const,std::set<int>>::pair[abi:ne180100]((std::string *)(v6 + 32), a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_2183BB838(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::set<int>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::set<int>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,std::set<int>>::pair[abi:ne180100](std::string *this, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  std::set<int>::set[abi:ne180100]((uint64_t *)&this[1], (uint64_t)a2 + 24);
  return this;
}

void sub_2183BB8A8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t *std::set<int>::set[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::set<int>::insert[abi:ne180100]<std::__tree_const_iterator<int,std::__tree_node<int,void *> *,long>>(a1, *(int **)a2, (int *)(a2 + 8));
  return a1;
}

void sub_2183BB900(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::set<int>::insert[abi:ne180100]<std::__tree_const_iterator<int,std::__tree_node<int,void *> *,long>>(uint64_t *result, int *a2, int *a3)
{
  int *v4;
  uint64_t **v5;
  uint64_t *v6;
  int *v7;
  int *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = std::__tree<int>::__emplace_hint_unique_key_args<int,int const&>(v5, v6, v4 + 7, v4 + 7);
      v7 = (int *)*((_QWORD *)v4 + 1);
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = *(int **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (int *)*((_QWORD *)v4 + 2);
          v9 = *(_QWORD *)v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<int>::__emplace_hint_unique_key_args<int,int const&>(uint64_t **a1, uint64_t *a2, int *a3, _DWORD *a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v10;
  uint64_t *v11;

  v6 = std::__tree<int>::__find_equal<int>(a1, a2, &v11, &v10, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v7 + 7) = *a4;
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, (uint64_t)v11, v8, v7);
  }
  return v7;
}

uint64_t *std::__tree<int>::__find_equal<int>(_QWORD *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, int *a5)
{
  uint64_t *v5;
  int v6;
  int v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  BOOL v14;
  int v15;
  uint64_t v16;
  uint64_t *v17;
  int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  int v22;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, v7 = *((_DWORD *)a2 + 7), *a5 < v7))
  {
    v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (uint64_t *)*a2;
      do
      {
        v10 = v9;
        v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      v13 = a2;
      do
      {
        v10 = (uint64_t *)v13[2];
        v14 = *v10 == (_QWORD)v13;
        v13 = v10;
      }
      while (v14);
    }
    v15 = *a5;
    if (*((_DWORD *)v10 + 7) < *a5)
      goto LABEL_17;
    v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v17 = (uint64_t *)v16;
          v18 = *(_DWORD *)(v16 + 28);
          if (v15 >= v18)
            break;
          v16 = *v17;
          v5 = v17;
          if (!*v17)
            goto LABEL_29;
        }
        if (v18 >= v15)
          break;
        v5 = v17 + 1;
        v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  v11 = a2[1];
  if (v11)
  {
    v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      v14 = *a4 == (_QWORD)v19;
      v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((_DWORD *)a4 + 7))
  {
    v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v21 = (uint64_t *)v20;
          v22 = *(_DWORD *)(v20 + 28);
          if (v6 >= v22)
            break;
          v20 = *v21;
          v5 = v21;
          if (!*v21)
            goto LABEL_48;
        }
        if (v22 >= v6)
          break;
        v5 = v21 + 1;
        v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

BOOL std::__equal_to::operator()[abi:ne180100]<std::pair<std::string const,std::set<int>>,std::pair<std::string const,std::set<int>>>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  _QWORD *v13;
  int v14;
  int v15;
  _BOOL8 result;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  BOOL v19;
  _QWORD *v20;
  _QWORD *v21;

  v4 = a2[23];
  v5 = *((_QWORD *)a2 + 1);
  if ((v4 & 0x80u) == 0)
    v6 = a2[23];
  else
    v6 = *((_QWORD *)a2 + 1);
  v7 = a3[23];
  v8 = (char)v7;
  if ((v7 & 0x80u) != 0)
    v7 = *((_QWORD *)a3 + 1);
  if (v6 != v7)
    return 0;
  if (v8 >= 0)
    v10 = a3;
  else
    v10 = *(unsigned __int8 **)a3;
  if ((v4 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a2, v10, v5))
      return 0;
  }
  else if ((_DWORD)v4)
  {
    v11 = a2;
    while (*v11 == *v10)
    {
      ++v11;
      ++v10;
      if (!--v4)
        goto LABEL_17;
    }
    return 0;
  }
LABEL_17:
  if (*((_QWORD *)a2 + 5) != *((_QWORD *)a3 + 5))
    return 0;
  v12 = (unsigned __int8 *)*((_QWORD *)a2 + 3);
  if (v12 == a2 + 32)
    return 1;
  v13 = (_QWORD *)*((_QWORD *)a3 + 3);
  do
  {
    v14 = *((_DWORD *)v12 + 7);
    v15 = *((_DWORD *)v13 + 7);
    result = v14 == v15;
    if (v14 != v15)
      break;
    v17 = (unsigned __int8 *)*((_QWORD *)v12 + 1);
    v18 = v12;
    if (v17)
    {
      do
      {
        v12 = v17;
        v17 = *(unsigned __int8 **)v17;
      }
      while (v17);
    }
    else
    {
      do
      {
        v12 = (unsigned __int8 *)*((_QWORD *)v18 + 2);
        v19 = *(_QWORD *)v12 == (_QWORD)v18;
        v18 = v12;
      }
      while (!v19);
    }
    v20 = (_QWORD *)v13[1];
    if (v20)
    {
      do
      {
        v21 = v20;
        v20 = (_QWORD *)*v20;
      }
      while (v20);
    }
    else
    {
      do
      {
        v21 = (_QWORD *)v13[2];
        v19 = *v21 == (_QWORD)v13;
        v13 = v21;
      }
      while (!v19);
    }
    v13 = v21;
  }
  while (v12 != a2 + 32);
  return result;
}

uint64_t _GLOBAL__sub_I_NeuralNetworkShapes_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void CoreML::Specification::CoreMLModels::protobuf_AudioFeaturePrint_2eproto::TableStruct::InitDefaultsImpl(CoreML::Specification::CoreMLModels::protobuf_AudioFeaturePrint_2eproto::TableStruct *this, uint64_t a2, uint64_t a3, const char *a4)
{
  _tc_google::protobuf::internal *v4;

  _tc_google::protobuf::internal::VerifyVersion((_tc_google::protobuf::internal *)0x2DD278, (_tc_google::protobuf::internal *)0x2DD278, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/external/coremltools_wrap/coremltools/mlmodel/build/format/AudioFeaturePrint.pb.cc", a4);
  _tc_google::protobuf::internal::InitProtobufDefaults(v4);
  qword_254FFA768 = 0;
  *(_QWORD *)&dword_254FFA770 = 0;
  CoreML::Specification::CoreMLModels::_AudioFeaturePrint_Sound_default_instance_ = (uint64_t)&off_24D93D7F0;
  byte_254FFA778 = 1;
  CoreML::Specification::CoreMLModels::_AudioFeaturePrint_default_instance_ = (uint64_t)&off_24D93D888;
  unk_254FFA788 = 0;
  qword_254FFA798 = 0;
  byte_254FFA7A0 = 1;
}

void CoreML::Specification::CoreMLModels::protobuf_AudioFeaturePrint_2eproto::InitDefaults(CoreML::Specification::CoreMLModels::protobuf_AudioFeaturePrint_2eproto *this)
{
  unint64_t v1;
  _QWORD v2[2];
  char v3;

  v1 = atomic_load(&CoreML::Specification::CoreMLModels::protobuf_AudioFeaturePrint_2eproto::InitDefaults(void)::once);
  if (v1 != 2)
  {
    v2[0] = &off_24D93BCB0;
    v2[1] = CoreML::Specification::CoreMLModels::protobuf_AudioFeaturePrint_2eproto::TableStruct::InitDefaultsImpl;
    v3 = 0;
    _tc_google::protobuf::GoogleOnceInitImpl(&CoreML::Specification::CoreMLModels::protobuf_AudioFeaturePrint_2eproto::InitDefaults(void)::once, (uint64_t)v2);
    _tc_google::protobuf::internal::FunctionClosure0::~FunctionClosure0((_tc_google::protobuf::internal::FunctionClosure0 *)v2);
  }
}

void sub_2183BBE20(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  _tc_google::protobuf::internal::FunctionClosure0::~FunctionClosure0((_tc_google::protobuf::internal::FunctionClosure0 *)va);
  _Unwind_Resume(a1);
}

CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound *CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound::AudioFeaturePrint_Sound(CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound *this)
{
  *(_QWORD *)this = &off_24D93D7F0;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound *)&CoreML::Specification::CoreMLModels::_AudioFeaturePrint_Sound_default_instance_)
    CoreML::Specification::CoreMLModels::protobuf_AudioFeaturePrint_2eproto::InitDefaults(this);
  *((_QWORD *)this + 2) = 0;
  return this;
}

void sub_2183BBE80(_Unwind_Exception *a1)
{
  uint64_t *v1;

  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound::~AudioFeaturePrint_Sound(CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound *this)
{
  *(_QWORD *)this = &off_24D93D7F0;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  *(_QWORD *)this = &off_24D93D7F0;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
  JUMPOUT(0x219A19A08);
}

CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound *CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound::New(CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound *this, _tc_google::protobuf::Arena *a2)
{
  CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound *v3;

  v3 = (CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound *)operator new();
  CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound::AudioFeaturePrint_Sound(v3);
  if (a2)
    _tc_google::protobuf::Arena::Own<CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound>(a2, v3);
  return v3;
}

void sub_2183BBF54(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40CC6EE3FDLL);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound>);
  return result;
}

uint64_t CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound::Clear(uint64_t this)
{
  *(_DWORD *)(this + 16) = 0;
  return this;
}

uint64_t CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound::MergePartialFromCodedStream(CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound *this, char **a2, unsigned int a3)
{
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  BOOL v10;
  char *v11;
  int v12;
  uint64_t Varint32Fallback;

  do
  {
    while (1)
    {
      v5 = *a2;
      if (*a2 >= a2[1])
      {
        v6 = 0;
LABEL_6:
        TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v6);
        v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v7 & 0x100000000) == 0)
          break;
        goto LABEL_7;
      }
      v6 = *v5;
      if (*v5 < 1)
        goto LABEL_6;
      *a2 = v5 + 1;
      v7 = v6 | 0x100000000;
      if ((v7 & 0x100000000) == 0)
        break;
LABEL_7:
      if (v7 != 8 || (v7 & 0xFFFFFFF8) != 8)
        break;
      v11 = *a2;
      if (*a2 >= a2[1])
      {
        v12 = 0;
      }
      else
      {
        v12 = *v11;
        if ((*v11 & 0x80000000) == 0)
        {
          *a2 = v11 + 1;
          goto LABEL_22;
        }
      }
      Varint32Fallback = _tc_google::protobuf::io::CodedInputStream::ReadVarint32Fallback((_tc_google::protobuf::io::CodedInputStream *)a2, v12);
      v12 = Varint32Fallback;
      if (Varint32Fallback < 0)
        return 0;
LABEL_22:
      *((_DWORD *)this + 4) = v12;
    }
    if ((_DWORD)v7)
      v10 = (v7 & 7) == 4;
    else
      v10 = 1;
    if (v10)
      return 1;
  }
  while ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v7, a3) & 1) != 0);
  return 0;
}

uint64_t CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  signed int v5;

  v5 = *(_DWORD *)(this + 16);
  if (v5)
    return _tc_google::protobuf::internal::WireFormatLite::WriteInt32(1, v5, a2, a4);
  return this;
}

uint64_t CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound::ByteSizeLong(CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound *this)
{
  int v1;
  uint64_t v2;

  v1 = *((_DWORD *)this + 4);
  if (v1)
  {
    if (v1 < 0)
      v2 = 11;
    else
      v2 = ((9 * (__clz(v1 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
  else
  {
    v2 = 0;
  }
  *((_DWORD *)this + 5) = v2;
  return v2;
}

std::string *CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound::CheckTypeAndMergeFrom(std::string *this, const _tc_google::protobuf::MessageLite *a2)
{
  std::string *v3;
  uint64_t v4;
  int v5;

  v3 = this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_DWORD *)a2 + 4);
  if (v5)
    LODWORD(v3->__r_.__value_.__r.__words[2]) = v5;
  return this;
}

uint64_t CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound::IsInitialized(CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound *this)
{
  return 1;
}

_QWORD *CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.CoreMLModels.AudioFeaturePrint.Sound");
}

CoreML::Specification::CoreMLModels::AudioFeaturePrint *CoreML::Specification::CoreMLModels::AudioFeaturePrint::AudioFeaturePrint(CoreML::Specification::CoreMLModels::AudioFeaturePrint *this)
{
  *(_QWORD *)this = &off_24D93D888;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::CoreMLModels::AudioFeaturePrint *)&CoreML::Specification::CoreMLModels::_AudioFeaturePrint_default_instance_)
    CoreML::Specification::CoreMLModels::protobuf_AudioFeaturePrint_2eproto::InitDefaults(this);
  *((_QWORD *)this + 3) = 0;
  return this;
}

void sub_2183BC188(_Unwind_Exception *a1)
{
  uint64_t *v1;

  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::CoreMLModels::AudioFeaturePrint::~AudioFeaturePrint(CoreML::Specification::CoreMLModels::AudioFeaturePrint *this)
{
  int v2;
  uint64_t v3;

  *(_QWORD *)this = &off_24D93D888;
  v2 = *((_DWORD *)this + 7);
  if (v2)
  {
    if (v2 == 20)
    {
      v3 = *((_QWORD *)this + 2);
      if (v3)
        (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    }
    *((_DWORD *)this + 7) = 0;
  }
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  CoreML::Specification::CoreMLModels::AudioFeaturePrint::~AudioFeaturePrint(this);
  JUMPOUT(0x219A19A08);
}

uint64_t *CoreML::Specification::CoreMLModels::AudioFeaturePrint::default_instance(CoreML::Specification::CoreMLModels::AudioFeaturePrint *this)
{
  CoreML::Specification::CoreMLModels::protobuf_AudioFeaturePrint_2eproto::InitDefaults(this);
  return &CoreML::Specification::CoreMLModels::_AudioFeaturePrint_default_instance_;
}

CoreML::Specification::CoreMLModels::AudioFeaturePrint *CoreML::Specification::CoreMLModels::AudioFeaturePrint::New(CoreML::Specification::CoreMLModels::AudioFeaturePrint *this, _tc_google::protobuf::Arena *a2)
{
  CoreML::Specification::CoreMLModels::AudioFeaturePrint *v3;

  v3 = (CoreML::Specification::CoreMLModels::AudioFeaturePrint *)operator new();
  CoreML::Specification::CoreMLModels::AudioFeaturePrint::AudioFeaturePrint(v3);
  if (a2)
    _tc_google::protobuf::Arena::Own<CoreML::Specification::CoreMLModels::AudioFeaturePrint>(a2, v3);
  return v3;
}

void sub_2183BC290(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C406A65A86DLL);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::CoreMLModels::AudioFeaturePrint>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::CoreMLModels::AudioFeaturePrint>);
  return result;
}

uint64_t CoreML::Specification::CoreMLModels::AudioFeaturePrint::Clear(uint64_t this)
{
  uint64_t v1;

  v1 = this;
  if (*(_DWORD *)(this + 28) == 20)
  {
    this = *(_QWORD *)(this + 16);
    if (this)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
  }
  *(_DWORD *)(v1 + 28) = 0;
  return this;
}

uint64_t CoreML::Specification::CoreMLModels::AudioFeaturePrint::MergePartialFromCodedStream(CoreML::Specification::CoreMLModels::AudioFeaturePrint *this, _tc_google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  unsigned __int8 *v5;
  unint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound *v11;
  char *v12;
  int VarintSizeAsIntFallback;
  unint64_t v14;
  unsigned int v15;
  int v16;
  uint64_t result;
  unsigned int TagFallback;

  while (1)
  {
    while (1)
    {
      v5 = *(unsigned __int8 **)a2;
      v6 = *((_QWORD *)a2 + 1);
      if (*(_QWORD *)a2 < v6)
        break;
      v8 = 0;
LABEL_22:
      TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v8);
      v9 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x3FFF) << 32);
      if ((v9 & 0x100000000) == 0)
        goto LABEL_23;
LABEL_8:
      if (v9 != 162 || (v9 & 0xFFFFFFF8) != 0xA0)
        goto LABEL_23;
      if (*((_DWORD *)this + 7) == 20)
      {
        v11 = (CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound *)*((_QWORD *)this + 2);
      }
      else
      {
        *((_DWORD *)this + 7) = 20;
        v11 = (CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound *)operator new();
        CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound::AudioFeaturePrint_Sound(v11);
        *((_QWORD *)this + 2) = v11;
      }
      v12 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v12 < 0)
      {
        VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (VarintSizeAsIntFallback < 0)
          return 0;
      }
      else
      {
        VarintSizeAsIntFallback = *v12;
        *(_QWORD *)a2 = v12 + 1;
      }
      v14 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, VarintSizeAsIntFallback);
      if ((v14 & 0x8000000000000000) == 0)
      {
        v16 = v14;
        result = CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound::MergePartialFromCodedStream(v11, (char **)a2, v15);
        if (!(_DWORD)result)
          return result;
        if (_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v16))
          continue;
      }
      return 0;
    }
    v7 = v5 + 1;
    v8 = *v5;
    if ((char)*v5 < 1)
    {
      if ((unint64_t)v7 < v6)
      {
        v10 = *v7;
        if ((v8 & ~v10) >= 0x80)
        {
          *(_QWORD *)a2 = v5 + 2;
          v9 = (v8 + (v10 << 7) - 128) | 0x100000000;
          goto LABEL_8;
        }
      }
      goto LABEL_22;
    }
    *(_QWORD *)a2 = v7;
    v9 = v8 | 0x100000000;
    if ((v9 & 0x100000000) != 0)
      goto LABEL_8;
LABEL_23:
    if (!(_DWORD)v9 || (v9 & 7) == 4)
      return 1;
    if ((_tc_google::protobuf::internal::WireFormatLite::SkipField(a2, (_tc_google::protobuf::io::CodedInputStream *)v9, a3) & 1) == 0)return 0;
  }
}

void sub_2183BC4A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40CC6EE3FDLL);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::CoreMLModels::AudioFeaturePrint::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  if (*(_DWORD *)(this + 28) == 20)
    return _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0x14, *(_QWORD *)(this + 16), a2, a4);
  return this;
}

uint64_t CoreML::Specification::CoreMLModels::AudioFeaturePrint::ByteSizeLong(CoreML::Specification::CoreMLModels::AudioFeaturePrint *this)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;

  if (*((_DWORD *)this + 7) == 20)
  {
    v1 = *((_QWORD *)this + 2);
    v2 = *(_DWORD *)(v1 + 16);
    if (v2)
    {
      if (v2 < 0)
        v3 = 11;
      else
        v3 = ((9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    else
    {
      v3 = 0;
    }
    *(_DWORD *)(v1 + 20) = v3;
    v4 = v3 + 3;
  }
  else
  {
    v4 = 0;
  }
  *((_DWORD *)this + 6) = v4;
  return v4;
}

void CoreML::Specification::CoreMLModels::AudioFeaturePrint::MergeFrom(CoreML::Specification::CoreMLModels::AudioFeaturePrint *this, const CoreML::Specification::CoreMLModels::AudioFeaturePrint *a2)
{
  uint64_t v4;
  uint64_t v5;
  CoreML::Specification::CoreMLModels::protobuf_AudioFeaturePrint_2eproto *v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;

  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  if (*((_DWORD *)a2 + 7) == 20)
  {
    if (*((_DWORD *)this + 7) == 20)
    {
      v5 = *((_QWORD *)this + 2);
    }
    else
    {
      *((_DWORD *)this + 7) = 20;
      v5 = operator new();
      v6 = CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound::AudioFeaturePrint_Sound((CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound *)v5);
      *((_QWORD *)this + 2) = v5;
      if (*((_DWORD *)a2 + 7) != 20)
      {
        CoreML::Specification::CoreMLModels::protobuf_AudioFeaturePrint_2eproto::InitDefaults(v6);
        v7 = &CoreML::Specification::CoreMLModels::_AudioFeaturePrint_Sound_default_instance_;
        goto LABEL_9;
      }
    }
    v7 = (uint64_t *)*((_QWORD *)a2 + 2);
LABEL_9:
    v8 = v7[1];
    if ((v8 & 1) != 0)
      _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)(v5 + 8), v8 & 0xFFFFFFFFFFFFFFFELL);
    v9 = *((_DWORD *)v7 + 4);
    if (v9)
      *(_DWORD *)(v5 + 16) = v9;
  }
}

void sub_2183BC61C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40CC6EE3FDLL);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::CoreMLModels::AudioFeaturePrint::IsInitialized(CoreML::Specification::CoreMLModels::AudioFeaturePrint *this)
{
  return 1;
}

_QWORD *CoreML::Specification::CoreMLModels::AudioFeaturePrint::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.CoreMLModels.AudioFeaturePrint");
}

CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound *CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound::New(CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound *this)
{
  return CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound::New(this, 0);
}

CoreML::Specification::CoreMLModels::AudioFeaturePrint *CoreML::Specification::CoreMLModels::AudioFeaturePrint::New(CoreML::Specification::CoreMLModels::AudioFeaturePrint *this)
{
  return CoreML::Specification::CoreMLModels::AudioFeaturePrint::New(this, 0);
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::CoreMLModels::AudioFeaturePrint>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t _GLOBAL__sub_I_AudioFeaturePrint_pb_cc()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void turi::wrap_image(turi *this@<X0>, const turi::image_type *a2@<X1>, _OWORD *a3@<X8>)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  __int128 v12;
  __int128 v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  const turi::flexible_type *v19;
  void *v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  __int128 v26;
  __int128 v27;
  char *v28;
  __int128 v29;
  __int128 v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  void *v45;
  void *v46;
  unsigned int v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  void *v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  void *v74;
  void *v75;
  unsigned int v76;
  unint64_t *v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  void *v81;
  unint64_t *v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t *v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  void *v89;
  uint64_t image_data;
  id v91;
  void *v92;
  std::__shared_weak_count *v93;
  unint64_t *p_shared_owners;
  unint64_t v95;
  _QWORD v96[5];
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  __n128 (*v104)(__n128 *, __n128 *);
  uint64_t (*v105)(uint64_t);
  const char *v106;
  char *v107;
  std::__shared_weak_count *v108;
  std::string v109;
  std::string *v110;
  _BYTE v111[13];
  uint64_t v112;
  int v113;
  char v114;
  uint64_t v115;

  v115 = *MEMORY[0x24BDAC8D0];
  v5 = (void *)MEMORY[0x219A19FE4](this, a2);
  v101 = 0;
  v102 = &v101;
  v104 = __Block_byref_object_copy__3;
  v105 = __Block_byref_object_dispose__3;
  v103 = 0x4012000000;
  v106 = "";
  *(_QWORD *)&v111[5] = 0x800000000000000;
  *(_QWORD *)v111 = 0;
  v6 = operator new();
  *(_QWORD *)v6 = 0;
  *(_OWORD *)(v6 + 8) = 0u;
  *(_OWORD *)(v6 + 24) = 0u;
  *(_OWORD *)(v6 + 40) = 0u;
  *(_QWORD *)(v6 + 56) = 0;
  *(_QWORD *)(v6 + 64) = 3;
  *(_QWORD *)v111 = v6;
  *(_QWORD *)v6 = 1;
  if (*(_QWORD *)v6 != 1)
  {
    v7 = operator new();
    v8 = *(_QWORD *)v111;
    *(_QWORD *)v7 = **(_QWORD **)v111;
    *(_QWORD *)(v7 + 8) = *(_QWORD *)(v8 + 8);
    v9 = *(_QWORD *)(v8 + 16);
    *(_QWORD *)(v7 + 16) = v9;
    if (v9)
    {
      v10 = (unsigned int *)(v9 + 8);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
    v12 = *(_OWORD *)(v8 + 24);
    v13 = *(_OWORD *)(v8 + 40);
    *(_OWORD *)(v7 + 56) = *(_OWORD *)(v8 + 56);
    *(_OWORD *)(v7 + 40) = v13;
    *(_OWORD *)(v7 + 24) = v12;
    *(_QWORD *)v111 = v7;
    *(_QWORD *)v7 = 1;
    do
    {
      v14 = __ldaxr((unint64_t *)v6);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unint64_t *)v6));
    if (!v15)
    {
      boost::detail::shared_count::~shared_count((unsigned int **)(v6 + 16));
      MEMORY[0x219A19A08](v6, 0x1030C40F1F0227BLL);
    }
  }
  v16 = *(_QWORD *)v111;
  boost::shared_ptr<char []>::operator=((__int128 *)(*(_QWORD *)v111 + 8), (uint64_t *)this);
  v18 = *((_OWORD *)this + 2);
  v17 = *((_OWORD *)this + 3);
  *(_OWORD *)(v16 + 24) = *((_OWORD *)this + 1);
  *(_OWORD *)(v16 + 40) = v18;
  *(_OWORD *)(v16 + 56) = v17;
  turi::image_util::encode_image((uint64_t)v111, v19, &v112);
  switch(v114)
  {
    case 0:
    case 1:
    case 6:
      turi::flexible_type_fail(0);
      goto LABEL_16;
    case 2:
      if (*(char *)(v112 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v109, *(const std::string::value_type **)(v112 + 8), *(_QWORD *)(v112 + 16));
      }
      else
      {
        v21 = *(_OWORD *)(v112 + 8);
        v109.__r_.__value_.__r.__words[2] = *(_QWORD *)(v112 + 24);
        *(_OWORD *)&v109.__r_.__value_.__l.__data_ = v21;
      }
      turi::flexible_type_fail(0);
      v98 = 0u;
      v99 = 0u;
      v97 = 0u;
      *(_QWORD *)&v100 = 0;
      *((_QWORD *)&v100 + 1) = 3;
      if ((SHIBYTE(v109.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_27;
      v20 = (void *)v109.__r_.__value_.__r.__words[0];
      break;
    case 3:
      memset(&v109, 0, sizeof(v109));
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v109, *(const void **)(v112 + 8), *(_QWORD *)(v112 + 16), (uint64_t)(*(_QWORD *)(v112 + 16) - *(_QWORD *)(v112 + 8)) >> 3);
      turi::flexible_type_fail(0);
      v98 = 0u;
      v99 = 0u;
      v97 = 0u;
      *(_QWORD *)&v100 = 0;
      *((_QWORD *)&v100 + 1) = 3;
      v20 = (void *)v109.__r_.__value_.__r.__words[0];
      if (!v109.__r_.__value_.__r.__words[0])
        goto LABEL_27;
      v109.__r_.__value_.__l.__size_ = v109.__r_.__value_.__r.__words[0];
      break;
    case 4:
      memset(&v109, 0, sizeof(v109));
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&v109, *(uint64_t **)(v112 + 8), *(uint64_t **)(v112 + 16), (uint64_t)(*(_QWORD *)(v112 + 16) - *(_QWORD *)(v112 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v98 = 0u;
      v99 = 0u;
      v97 = 0u;
      *(_QWORD *)&v100 = 0;
      *((_QWORD *)&v100 + 1) = 3;
      v110 = &v109;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v110);
      goto LABEL_27;
    case 5:
      memset(&v109, 0, sizeof(v109));
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&v109, *(uint64_t **)(v112 + 8), *(uint64_t **)(v112 + 16), (uint64_t)(*(_QWORD *)(v112 + 16) - *(_QWORD *)(v112 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v98 = 0u;
      v99 = 0u;
      v97 = 0u;
      *(_QWORD *)&v100 = 0;
      *((_QWORD *)&v100 + 1) = 3;
      v110 = &v109;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v110);
      goto LABEL_27;
    case 7:
LABEL_16:
      v98 = 0u;
      v99 = 0u;
      v97 = 0u;
      *(_QWORD *)&v100 = 0;
      *((_QWORD *)&v100 + 1) = 3;
      goto LABEL_27;
    case 8:
      v22 = v112;
      v23 = *(_QWORD *)(v112 + 16);
      *(_QWORD *)&v97 = *(_QWORD *)(v112 + 8);
      *((_QWORD *)&v97 + 1) = v23;
      if (v23)
      {
        v24 = (unsigned int *)(v23 + 8);
        do
          v25 = __ldxr(v24);
        while (__stxr(v25 + 1, v24));
      }
      v26 = *(_OWORD *)(v22 + 24);
      v27 = *(_OWORD *)(v22 + 56);
      v99 = *(_OWORD *)(v22 + 40);
      v100 = v27;
      v98 = v26;
      goto LABEL_27;
    case 9:
      turi::flexible_type_impl::get_img_visitor::operator()(v112 + 8, (turi::image_type *)&v97);
      goto LABEL_27;
    default:
      turi::flexible_type_fail(0);
      __break(1u);
      return;
  }
  operator delete(v20);
LABEL_27:
  v28 = (char *)operator new(0x58uLL);
  v29 = v98;
  *(_OWORD *)(v28 + 24) = v97;
  *(_OWORD *)(v28 + 40) = v29;
  v30 = v100;
  *(_OWORD *)(v28 + 56) = v99;
  *((_QWORD *)v28 + 2) = 0;
  *(_QWORD *)v28 = &unk_24D93D950;
  *((_QWORD *)v28 + 1) = 0;
  v97 = 0uLL;
  *(_OWORD *)(v28 + 72) = v30;
  v107 = v28 + 24;
  v108 = (std::__shared_weak_count *)v28;
  boost::detail::shared_count::~shared_count((unsigned int **)&v97 + 1);
  switch(v114)
  {
    case 2:
      v31 = (unint64_t *)v112;
      do
      {
        v32 = __ldaxr(v31);
        v33 = v32 - 1;
      }
      while (__stlxr(v33, v31));
      if (!v33)
      {
        v34 = v112;
        if (v112)
        {
          if (*(char *)(v112 + 31) < 0)
            operator delete(*(void **)(v112 + 8));
          v35 = v34;
          v36 = 0x1012C404EF22A49;
          goto LABEL_68;
        }
      }
      break;
    case 3:
      v48 = (unint64_t *)v112;
      do
      {
        v49 = __ldaxr(v48);
        v50 = v49 - 1;
      }
      while (__stlxr(v50, v48));
      if (!v50)
      {
        v51 = v112;
        if (v112)
        {
          v52 = *(void **)(v112 + 8);
          if (v52)
          {
            *(_QWORD *)(v112 + 16) = v52;
            operator delete(v52);
          }
          v35 = v51;
          v36 = 0x1080C409938AC02;
          goto LABEL_68;
        }
      }
      break;
    case 4:
      v37 = (unint64_t *)v112;
      do
      {
        v38 = __ldaxr(v37);
        v39 = v38 - 1;
      }
      while (__stlxr(v39, v37));
      if (!v39)
      {
        v40 = v112;
        if (v112)
        {
          v109.__r_.__value_.__r.__words[0] = v112 + 8;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v109);
          goto LABEL_61;
        }
      }
      break;
    case 5:
      v53 = (unint64_t *)v112;
      do
      {
        v54 = __ldaxr(v53);
        v55 = v54 - 1;
      }
      while (__stlxr(v55, v53));
      if (!v55)
      {
        v40 = v112;
        if (v112)
        {
          v109.__r_.__value_.__r.__words[0] = v112 + 8;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v109);
LABEL_61:
          v35 = v40;
          v36 = 0x1020C405E66F15BLL;
          goto LABEL_68;
        }
      }
      break;
    case 8:
      v56 = (unint64_t *)v112;
      do
      {
        v57 = __ldaxr(v56);
        v58 = v57 - 1;
      }
      while (__stlxr(v58, v56));
      if (!v58)
      {
        v59 = v112;
        if (v112)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v112 + 16));
          v35 = v59;
          v47 = -235920773;
          goto LABEL_67;
        }
      }
      break;
    case 9:
      v41 = (unint64_t *)v112;
      do
      {
        v42 = __ldaxr(v41);
        v43 = v42 - 1;
      }
      while (__stlxr(v43, v41));
      if (!v43)
      {
        v44 = v112;
        if (v112)
        {
          v45 = *(void **)(v112 + 48);
          if (v45)
          {
            *(_QWORD *)(v112 + 56) = v45;
            operator delete(v45);
          }
          v46 = *(void **)(v44 + 24);
          if (v46)
          {
            *(_QWORD *)(v44 + 32) = v46;
            operator delete(v46);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v44 + 8);
          v35 = v44;
          v47 = 2071181815;
LABEL_67:
          v36 = v47 | 0x1030C4000000000;
LABEL_68:
          MEMORY[0x219A19A08](v35, v36);
        }
      }
      break;
    default:
      break;
  }
  v112 = 0;
  v113 = 0;
  v114 = 0;
  switch(v111[12])
  {
    case 2:
      v60 = *(unint64_t **)v111;
      do
      {
        v61 = __ldaxr(v60);
        v62 = v61 - 1;
      }
      while (__stlxr(v62, v60));
      if (!v62)
      {
        v63 = *(_QWORD *)v111;
        if (*(_QWORD *)v111)
        {
          if (*(char *)(*(_QWORD *)v111 + 31) < 0)
            operator delete(*(void **)(*(_QWORD *)v111 + 8));
          v64 = v63;
          v65 = 0x1012C404EF22A49;
          goto LABEL_110;
        }
      }
      break;
    case 3:
      v77 = *(unint64_t **)v111;
      do
      {
        v78 = __ldaxr(v77);
        v79 = v78 - 1;
      }
      while (__stlxr(v79, v77));
      if (!v79)
      {
        v80 = *(_QWORD *)v111;
        if (*(_QWORD *)v111)
        {
          v81 = *(void **)(*(_QWORD *)v111 + 8);
          if (v81)
          {
            *(_QWORD *)(*(_QWORD *)v111 + 16) = v81;
            operator delete(v81);
          }
          v64 = v80;
          v65 = 0x1080C409938AC02;
          goto LABEL_110;
        }
      }
      break;
    case 4:
      v66 = *(unint64_t **)v111;
      do
      {
        v67 = __ldaxr(v66);
        v68 = v67 - 1;
      }
      while (__stlxr(v68, v66));
      if (!v68)
      {
        v69 = *(_QWORD *)v111;
        if (*(_QWORD *)v111)
        {
          v109.__r_.__value_.__r.__words[0] = *(_QWORD *)v111 + 8;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v109);
          goto LABEL_103;
        }
      }
      break;
    case 5:
      v82 = *(unint64_t **)v111;
      do
      {
        v83 = __ldaxr(v82);
        v84 = v83 - 1;
      }
      while (__stlxr(v84, v82));
      if (!v84)
      {
        v69 = *(_QWORD *)v111;
        if (*(_QWORD *)v111)
        {
          v109.__r_.__value_.__r.__words[0] = *(_QWORD *)v111 + 8;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v109);
LABEL_103:
          v64 = v69;
          v65 = 0x1020C405E66F15BLL;
          goto LABEL_110;
        }
      }
      break;
    case 8:
      v85 = *(unint64_t **)v111;
      do
      {
        v86 = __ldaxr(v85);
        v87 = v86 - 1;
      }
      while (__stlxr(v87, v85));
      if (!v87)
      {
        v88 = *(_QWORD *)v111;
        if (*(_QWORD *)v111)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)v111 + 16));
          v64 = v88;
          v76 = -235920773;
          goto LABEL_109;
        }
      }
      break;
    case 9:
      v70 = *(unint64_t **)v111;
      do
      {
        v71 = __ldaxr(v70);
        v72 = v71 - 1;
      }
      while (__stlxr(v72, v70));
      if (!v72)
      {
        v73 = *(_QWORD *)v111;
        if (*(_QWORD *)v111)
        {
          v74 = *(void **)(*(_QWORD *)v111 + 48);
          if (v74)
          {
            *(_QWORD *)(*(_QWORD *)v111 + 56) = v74;
            operator delete(v74);
          }
          v75 = *(void **)(v73 + 24);
          if (v75)
          {
            *(_QWORD *)(v73 + 32) = v75;
            operator delete(v75);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v73 + 8);
          v64 = v73;
          v76 = 2071181815;
LABEL_109:
          v65 = v76 | 0x1030C4000000000;
LABEL_110:
          MEMORY[0x219A19A08](v64, v65);
        }
      }
      break;
    default:
      break;
  }
  v96[0] = MEMORY[0x24BDAC760];
  v96[1] = 3221225472;
  v96[2] = ___ZN4turi10wrap_imageERKNS_10image_typeE_block_invoke;
  v96[3] = &unk_24D91A378;
  v96[4] = &v101;
  v89 = (void *)MEMORY[0x219A1A134](v96);
  image_data = turi::image_type::get_image_data((turi::image_type *)v102[6]);
  v91 = objc_alloc(MEMORY[0x24BDBCE50]);
  v92 = (void *)objc_msgSend(v91, "initWithBytesNoCopy:length:deallocator:", image_data, *(_QWORD *)(v102[6] + 40), v89);
  objc_msgSend(MEMORY[0x24BDBF660], "imageWithData:", v92);
  v109.__r_.__value_.__r.__words[0] = objc_claimAutoreleasedReturnValue();
  if (!v109.__r_.__value_.__r.__words[0])
    turi::wrap_image(turi::image_type const&)::$_0::operator()();
  std::allocate_shared[abi:ne180100]<turi::neural_net::CoreImageImage,std::allocator<turi::neural_net::CoreImageImage>,CIImage * {__strong}&,void>((CIImage **)&v109, &v97);
  *a3 = v97;

  _Block_object_dispose(&v101, 8);
  v93 = v108;
  if (v108)
  {
    p_shared_owners = (unint64_t *)&v108->__shared_owners_;
    do
      v95 = __ldaxr(p_shared_owners);
    while (__stlxr(v95 - 1, p_shared_owners));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
  objc_autoreleasePoolPop(v5);
}

void sub_2183BCFB0(_Unwind_Exception *a1)
{
  uint64_t v1;
  unint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  unsigned int v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  void *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  unsigned int v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  _QWORD *v48;
  void *v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;

  *(_QWORD *)(v1 - 112) = v1 - 144;
  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v1 - 112));
  switch(*(_BYTE *)(v1 - 76))
  {
    case 2:
      v3 = *(unint64_t **)(v1 - 88);
      do
      {
        v4 = __ldaxr(v3);
        v5 = v4 - 1;
      }
      while (__stlxr(v5, v3));
      if (v5)
        goto LABEL_39;
      v6 = *(_QWORD *)(v1 - 88);
      if (!v6)
        goto LABEL_39;
      if (*(char *)(v6 + 31) < 0)
        operator delete(*(void **)(v6 + 8));
      v7 = (_QWORD *)v6;
      v8 = 0x1012C404EF22A49;
      goto LABEL_38;
    case 3:
      v18 = *(unint64_t **)(v1 - 88);
      do
      {
        v19 = __ldaxr(v18);
        v20 = v19 - 1;
      }
      while (__stlxr(v20, v18));
      if (v20)
        goto LABEL_39;
      v21 = *(_QWORD **)(v1 - 88);
      if (!v21)
        goto LABEL_39;
      v22 = (void *)v21[1];
      if (v22)
      {
        v21[2] = v22;
        operator delete(v22);
      }
      v7 = v21;
      v8 = 0x1080C409938AC02;
      goto LABEL_38;
    case 4:
      v9 = *(unint64_t **)(v1 - 88);
      do
      {
        v10 = __ldaxr(v9);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v9));
      if (v11)
        goto LABEL_39;
      v12 = *(_QWORD **)(v1 - 88);
      if (!v12)
        goto LABEL_39;
      *(_QWORD *)(v1 - 112) = v12 + 1;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)(v1 - 112));
      goto LABEL_31;
    case 5:
      v23 = *(unint64_t **)(v1 - 88);
      do
      {
        v24 = __ldaxr(v23);
        v25 = v24 - 1;
      }
      while (__stlxr(v25, v23));
      if (v25)
        goto LABEL_39;
      v12 = *(_QWORD **)(v1 - 88);
      if (!v12)
        goto LABEL_39;
      *(_QWORD *)(v1 - 112) = v12 + 1;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v1 - 112));
LABEL_31:
      v7 = v12;
      v8 = 0x1020C405E66F15BLL;
      goto LABEL_38;
    case 8:
      v26 = *(unint64_t **)(v1 - 88);
      do
      {
        v27 = __ldaxr(v26);
        v28 = v27 - 1;
      }
      while (__stlxr(v28, v26));
      if (v28)
        goto LABEL_39;
      v29 = *(_QWORD *)(v1 - 88);
      if (!v29)
        goto LABEL_39;
      boost::detail::shared_count::~shared_count((unsigned int **)(v29 + 16));
      v7 = (_QWORD *)v29;
      v17 = -235920773;
      goto LABEL_37;
    case 9:
      v13 = *(unint64_t **)(v1 - 88);
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (v15)
        goto LABEL_39;
      v16 = *(_QWORD **)(v1 - 88);
      if (!v16)
        goto LABEL_39;
      v7 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v16);
      v17 = 2071181815;
LABEL_37:
      v8 = v17 | 0x1030C4000000000;
LABEL_38:
      MEMORY[0x219A19A08](v7, v8);
LABEL_39:
      *(_QWORD *)(v1 - 88) = 0;
      *(_DWORD *)(v1 - 80) = 0;
      *(_BYTE *)(v1 - 76) = 0;
      switch(*(_BYTE *)(v1 - 92))
      {
        case 2:
          v30 = *(unint64_t **)(v1 - 104);
          do
          {
            v31 = __ldaxr(v30);
            v32 = v31 - 1;
          }
          while (__stlxr(v32, v30));
          if (v32)
            goto LABEL_77;
          v33 = *(_QWORD *)(v1 - 104);
          if (!v33)
            goto LABEL_77;
          if (*(char *)(v33 + 31) < 0)
            operator delete(*(void **)(v33 + 8));
          v34 = (_QWORD *)v33;
          v35 = 0x1012C404EF22A49;
          goto LABEL_76;
        case 3:
          v45 = *(unint64_t **)(v1 - 104);
          do
          {
            v46 = __ldaxr(v45);
            v47 = v46 - 1;
          }
          while (__stlxr(v47, v45));
          if (v47)
            goto LABEL_77;
          v48 = *(_QWORD **)(v1 - 104);
          if (!v48)
            goto LABEL_77;
          v49 = (void *)v48[1];
          if (v49)
          {
            v48[2] = v49;
            operator delete(v49);
          }
          v34 = v48;
          v35 = 0x1080C409938AC02;
          goto LABEL_76;
        case 4:
          v36 = *(unint64_t **)(v1 - 104);
          do
          {
            v37 = __ldaxr(v36);
            v38 = v37 - 1;
          }
          while (__stlxr(v38, v36));
          if (v38)
            goto LABEL_77;
          v39 = *(_QWORD **)(v1 - 104);
          if (!v39)
            goto LABEL_77;
          *(_QWORD *)(v1 - 112) = v39 + 1;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)(v1 - 112));
          goto LABEL_75;
        case 5:
          v50 = *(unint64_t **)(v1 - 104);
          do
          {
            v51 = __ldaxr(v50);
            v52 = v51 - 1;
          }
          while (__stlxr(v52, v50));
          if (v52)
            goto LABEL_77;
          v39 = *(_QWORD **)(v1 - 104);
          if (!v39)
            goto LABEL_77;
          *(_QWORD *)(v1 - 112) = v39 + 1;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v1 - 112));
LABEL_75:
          v34 = v39;
          v35 = 0x1020C405E66F15BLL;
          goto LABEL_76;
        case 8:
          v53 = *(unint64_t **)(v1 - 104);
          do
          {
            v54 = __ldaxr(v53);
            v55 = v54 - 1;
          }
          while (__stlxr(v55, v53));
          if (v55)
            goto LABEL_77;
          v56 = *(_QWORD *)(v1 - 104);
          if (!v56)
            goto LABEL_77;
          boost::detail::shared_count::~shared_count((unsigned int **)(v56 + 16));
          v34 = (_QWORD *)v56;
          v44 = -235920773;
          goto LABEL_74;
        case 9:
          v40 = *(unint64_t **)(v1 - 104);
          do
          {
            v41 = __ldaxr(v40);
            v42 = v41 - 1;
          }
          while (__stlxr(v42, v40));
          if (v42)
            goto LABEL_77;
          v43 = *(_QWORD **)(v1 - 104);
          if (!v43)
            goto LABEL_77;
          v34 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v43);
          v44 = 2071181815;
LABEL_74:
          v35 = v44 | 0x1030C4000000000;
LABEL_76:
          MEMORY[0x219A19A08](v34, v35);
LABEL_77:
          _Unwind_Resume(a1);
          return;
        default:
          goto LABEL_77;
      }
    default:
      goto LABEL_39;
  }
}

__n128 __Block_byref_object_copy__3(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = a2[3];
  a1[3] = result;
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  return result;
}

uint64_t __Block_byref_object_dispose__3(uint64_t a1)
{
  return std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](a1 + 48);
}

void ___ZN4turi10wrap_imageERKNS_10image_typeE_block_invoke(uint64_t a1)
{
  std::shared_ptr<turi::neural_net::Subscriber<std::unique_ptr<turi::style_transfer::Checkpoint>>>::reset[abi:ne180100]((_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 48));
}

void std::__shared_ptr_emplace<turi::image_type>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D93D950;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::image_type>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D93D950;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

void std::__shared_ptr_emplace<turi::image_type>::__on_zero_shared(uint64_t a1)
{
  boost::detail::shared_count::~shared_count((unsigned int **)(a1 + 32));
}

_QWORD *std::allocate_shared[abi:ne180100]<turi::neural_net::CoreImageImage,std::allocator<turi::neural_net::CoreImageImage>,CIImage * {__strong}&,void>@<X0>(CIImage **a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x28uLL);
  result = std::__shared_ptr_emplace<turi::neural_net::CoreImageImage>::__shared_ptr_emplace[abi:ne180100]<CIImage * {__strong}&,std::allocator<turi::neural_net::CoreImageImage>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_2183BD57C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<turi::neural_net::CoreImageImage>::__shared_ptr_emplace[abi:ne180100]<CIImage * {__strong}&,std::allocator<turi::neural_net::CoreImageImage>,0>(_QWORD *a1, CIImage **a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_24D93D9A0;
  turi::neural_net::CoreImageImage::CoreImageImage((turi::neural_net::CoreImageImage *)(a1 + 3), *a2);
  return a1;
}

void sub_2183BD5CC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<turi::neural_net::CoreImageImage>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D93D9A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::neural_net::CoreImageImage>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D93D9A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__shared_ptr_emplace<turi::neural_net::CoreImageImage>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void _GLOBAL__sub_I_image_utils_Apple_mm()
{
  void *v0;

  v0 = (void *)MEMORY[0x219A19FE4]();
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  objc_autoreleasePoolPop(v0);
}

float turi::neural_net::xavier_weight_initializer::xavier_weight_initializer(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  float result;

  result = sqrtf(3.0 / (float)((float)((float)a3 * 0.5) + (float)((float)a2 * 0.5)));
  *(float *)a1 = -result;
  *(float *)(a1 + 4) = result;
  *(_QWORD *)(a1 + 8) = a4;
  return result;
}

uint64_t turi::neural_net::xavier_weight_initializer::operator()(uint64_t result, float *a2, float *a3)
{
  float *v4;
  uint64_t v5;
  float v6;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = result;
    do
    {
      v6 = *(float *)(v5 + 4) - *(float *)v5;
      result = std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(*(std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> **)(v5 + 8));
      *v4++ = *(float *)v5 + (float)(v6 * (float)((float)result * 2.3283e-10));
    }
    while (v4 != a3);
  }
  return result;
}

uint64_t turi::neural_net::uniform_weight_initializer::uniform_weight_initializer(uint64_t result, uint64_t a2, float a3, float a4)
{
  *(float *)result = a3;
  *(float *)(result + 4) = a4;
  *(_QWORD *)(result + 8) = a2;
  return result;
}

float *turi::neural_net::scalar_weight_initializer::scalar_weight_initializer(float *this, float a2)
{
  *this = a2;
  return this;
}

float turi::neural_net::scalar_weight_initializer::operator()(float *a1, _DWORD *a2, _DWORD *a3)
{
  float result;

  while (a2 != a3)
  {
    result = *a1;
    *a2++ = *(_DWORD *)a1;
  }
  return result;
}

_QWORD *turi::neural_net::lstm_weight_initializers::create_with_xavier_method@<X0>(unint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  float v5;
  float v6;
  float v7;
  __int128 v9;
  __int128 v10;

  v5 = (float)a2 * 0.5;
  v6 = sqrtf(3.0 / (float)(v5 + (float)((float)a1 * 0.5)));
  *(float *)&v10 = -v6;
  *((float *)&v10 + 1) = v6;
  *((_QWORD *)&v10 + 1) = a3;
  v7 = sqrtf(3.0 / (float)(v5 + v5));
  *(float *)&v9 = -v7;
  *((float *)&v9 + 1) = v7;
  *((_QWORD *)&v9 + 1) = a3;
  a4[3] = 0;
  a4[7] = 0;
  a4[11] = 0;
  a4[15] = 0;
  a4[19] = 0;
  a4[23] = 0;
  a4[27] = 0;
  a4[31] = 0;
  a4[35] = 0;
  a4[39] = 0;
  a4[43] = 0;
  a4[47] = 0;
  std::function<void ()(float *,float *)>::operator=<turi::neural_net::xavier_weight_initializer &,void>(a4, &v10);
  std::function<void ()(float *,float *)>::operator=<turi::neural_net::xavier_weight_initializer &,void>(a4 + 4, &v10);
  std::function<void ()(float *,float *)>::operator=<turi::neural_net::xavier_weight_initializer &,void>(a4 + 8, &v10);
  std::function<void ()(float *,float *)>::operator=<turi::neural_net::xavier_weight_initializer &,void>(a4 + 12, &v10);
  std::function<void ()(float *,float *)>::operator=<turi::neural_net::xavier_weight_initializer &,void>(a4 + 16, &v9);
  std::function<void ()(float *,float *)>::operator=<turi::neural_net::xavier_weight_initializer &,void>(a4 + 20, &v9);
  std::function<void ()(float *,float *)>::operator=<turi::neural_net::xavier_weight_initializer &,void>(a4 + 24, &v9);
  std::function<void ()(float *,float *)>::operator=<turi::neural_net::xavier_weight_initializer &,void>(a4 + 28, &v9);
  std::function<void ()(float *,float *)>::operator=<turi::neural_net::zero_weight_initializer,void>(a4 + 32);
  std::function<void ()(float *,float *)>::operator=<turi::neural_net::zero_weight_initializer,void>(a4 + 36);
  std::function<void ()(float *,float *)>::operator=<turi::neural_net::zero_weight_initializer,void>(a4 + 40);
  return std::function<void ()(float *,float *)>::operator=<turi::neural_net::zero_weight_initializer,void>(a4 + 44);
}

void sub_2183BD87C(_Unwind_Exception *a1)
{
  turi::neural_net::lstm_weight_initializers *v1;

  turi::neural_net::lstm_weight_initializers::~lstm_weight_initializers(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::function<void ()(float *,float *)>::operator=<turi::neural_net::xavier_weight_initializer &,void>(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24D91A1A0;
  v7 = *a2;
  v8 = &v6;
  std::__function::__value_func<void ()(float *,float *)>::swap[abi:ne180100](&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *std::function<void ()(float *,float *)>::operator=<turi::neural_net::zero_weight_initializer,void>(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = &unk_24D91A230;
  v6 = v5;
  std::__function::__value_func<void ()(float *,float *)>::swap[abi:ne180100](v5, a1);
  v2 = v6;
  if (v6 == v5)
  {
    v3 = 4;
    v2 = v5;
    goto LABEL_5;
  }
  if (v6)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return a1;
}

_QWORD *turi::neural_net::lstm_weight_initializers::create_with_zero@<X0>(_QWORD *a1@<X8>)
{
  a1[3] = 0;
  a1[7] = 0;
  a1[11] = 0;
  a1[15] = 0;
  a1[19] = 0;
  a1[23] = 0;
  a1[27] = 0;
  a1[31] = 0;
  a1[35] = 0;
  a1[39] = 0;
  a1[43] = 0;
  a1[47] = 0;
  std::function<void ()(float *,float *)>::operator=<turi::neural_net::zero_weight_initializer,void>(a1);
  std::function<void ()(float *,float *)>::operator=<turi::neural_net::zero_weight_initializer,void>(a1 + 4);
  std::function<void ()(float *,float *)>::operator=<turi::neural_net::zero_weight_initializer,void>(a1 + 8);
  std::function<void ()(float *,float *)>::operator=<turi::neural_net::zero_weight_initializer,void>(a1 + 12);
  std::function<void ()(float *,float *)>::operator=<turi::neural_net::zero_weight_initializer,void>(a1 + 16);
  std::function<void ()(float *,float *)>::operator=<turi::neural_net::zero_weight_initializer,void>(a1 + 20);
  std::function<void ()(float *,float *)>::operator=<turi::neural_net::zero_weight_initializer,void>(a1 + 24);
  std::function<void ()(float *,float *)>::operator=<turi::neural_net::zero_weight_initializer,void>(a1 + 28);
  std::function<void ()(float *,float *)>::operator=<turi::neural_net::zero_weight_initializer,void>(a1 + 32);
  std::function<void ()(float *,float *)>::operator=<turi::neural_net::zero_weight_initializer,void>(a1 + 36);
  std::function<void ()(float *,float *)>::operator=<turi::neural_net::zero_weight_initializer,void>(a1 + 40);
  return std::function<void ()(float *,float *)>::operator=<turi::neural_net::zero_weight_initializer,void>(a1 + 44);
}

void sub_2183BDAD4(_Unwind_Exception *a1)
{
  turi::neural_net::lstm_weight_initializers *v1;

  turi::neural_net::lstm_weight_initializers::~lstm_weight_initializers(v1);
  _Unwind_Resume(a1);
}

void turi::neural_net::lstm_weight_initializers::~lstm_weight_initializers(turi::neural_net::lstm_weight_initializers *this)
{
  char *v2;
  char *v3;
  uint64_t v4;
  turi::neural_net::lstm_weight_initializers *v5;
  uint64_t v6;
  turi::neural_net::lstm_weight_initializers *v7;
  uint64_t v8;
  turi::neural_net::lstm_weight_initializers *v9;
  uint64_t v10;
  turi::neural_net::lstm_weight_initializers *v11;
  uint64_t v12;
  turi::neural_net::lstm_weight_initializers *v13;
  uint64_t v14;
  turi::neural_net::lstm_weight_initializers *v15;
  uint64_t v16;
  turi::neural_net::lstm_weight_initializers *v17;
  uint64_t v18;
  turi::neural_net::lstm_weight_initializers *v19;
  uint64_t v20;
  turi::neural_net::lstm_weight_initializers *v21;
  uint64_t v22;
  turi::neural_net::lstm_weight_initializers *v23;
  uint64_t v24;
  turi::neural_net::lstm_weight_initializers *v25;
  uint64_t v26;

  v2 = (char *)this + 352;
  v3 = (char *)*((_QWORD *)this + 47);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  v5 = (turi::neural_net::lstm_weight_initializers *)*((_QWORD *)this + 43);
  if (v5 == (turi::neural_net::lstm_weight_initializers *)((char *)this + 320))
  {
    v6 = 4;
    v5 = (turi::neural_net::lstm_weight_initializers *)((char *)this + 320);
  }
  else
  {
    if (!v5)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v5 + 8 * v6))();
LABEL_11:
  v7 = (turi::neural_net::lstm_weight_initializers *)*((_QWORD *)this + 39);
  if (v7 == (turi::neural_net::lstm_weight_initializers *)((char *)this + 288))
  {
    v8 = 4;
    v7 = (turi::neural_net::lstm_weight_initializers *)((char *)this + 288);
  }
  else
  {
    if (!v7)
      goto LABEL_16;
    v8 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v7 + 8 * v8))();
LABEL_16:
  v9 = (turi::neural_net::lstm_weight_initializers *)*((_QWORD *)this + 35);
  if (v9 == (turi::neural_net::lstm_weight_initializers *)((char *)this + 256))
  {
    v10 = 4;
    v9 = (turi::neural_net::lstm_weight_initializers *)((char *)this + 256);
  }
  else
  {
    if (!v9)
      goto LABEL_21;
    v10 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v9 + 8 * v10))();
LABEL_21:
  v11 = (turi::neural_net::lstm_weight_initializers *)*((_QWORD *)this + 31);
  if (v11 == (turi::neural_net::lstm_weight_initializers *)((char *)this + 224))
  {
    v12 = 4;
    v11 = (turi::neural_net::lstm_weight_initializers *)((char *)this + 224);
  }
  else
  {
    if (!v11)
      goto LABEL_26;
    v12 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v11 + 8 * v12))();
LABEL_26:
  v13 = (turi::neural_net::lstm_weight_initializers *)*((_QWORD *)this + 27);
  if (v13 == (turi::neural_net::lstm_weight_initializers *)((char *)this + 192))
  {
    v14 = 4;
    v13 = (turi::neural_net::lstm_weight_initializers *)((char *)this + 192);
  }
  else
  {
    if (!v13)
      goto LABEL_31;
    v14 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v13 + 8 * v14))();
LABEL_31:
  v15 = (turi::neural_net::lstm_weight_initializers *)*((_QWORD *)this + 23);
  if (v15 == (turi::neural_net::lstm_weight_initializers *)((char *)this + 160))
  {
    v16 = 4;
    v15 = (turi::neural_net::lstm_weight_initializers *)((char *)this + 160);
  }
  else
  {
    if (!v15)
      goto LABEL_36;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_36:
  v17 = (turi::neural_net::lstm_weight_initializers *)*((_QWORD *)this + 19);
  if (v17 == (turi::neural_net::lstm_weight_initializers *)((char *)this + 128))
  {
    v18 = 4;
    v17 = (turi::neural_net::lstm_weight_initializers *)((char *)this + 128);
  }
  else
  {
    if (!v17)
      goto LABEL_41;
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_41:
  v19 = (turi::neural_net::lstm_weight_initializers *)*((_QWORD *)this + 15);
  if (v19 == (turi::neural_net::lstm_weight_initializers *)((char *)this + 96))
  {
    v20 = 4;
    v19 = (turi::neural_net::lstm_weight_initializers *)((char *)this + 96);
  }
  else
  {
    if (!v19)
      goto LABEL_46;
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_46:
  v21 = (turi::neural_net::lstm_weight_initializers *)*((_QWORD *)this + 11);
  if (v21 == (turi::neural_net::lstm_weight_initializers *)((char *)this + 64))
  {
    v22 = 4;
    v21 = (turi::neural_net::lstm_weight_initializers *)((char *)this + 64);
  }
  else
  {
    if (!v21)
      goto LABEL_51;
    v22 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
LABEL_51:
  v23 = (turi::neural_net::lstm_weight_initializers *)*((_QWORD *)this + 7);
  if (v23 == (turi::neural_net::lstm_weight_initializers *)((char *)this + 32))
  {
    v24 = 4;
    v23 = (turi::neural_net::lstm_weight_initializers *)((char *)this + 32);
  }
  else
  {
    if (!v23)
      goto LABEL_56;
    v24 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v23 + 8 * v24))();
LABEL_56:
  v25 = (turi::neural_net::lstm_weight_initializers *)*((_QWORD *)this + 3);
  if (v25 == this)
  {
    v26 = 4;
    v25 = this;
  }
  else
  {
    if (!v25)
      return;
    v26 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v25 + 8 * v26))();
}

_QWORD *std::__function::__value_func<void ()(float *,float *)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_2183BDED8(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

uint64_t _GLOBAL__sub_I_weight_init_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void CoreML::Specification::protobuf_LinkedModel_2eproto::TableStruct::InitDefaultsImpl(CoreML::Specification::protobuf_LinkedModel_2eproto::TableStruct *this, uint64_t a2, uint64_t a3, const char *a4)
{
  _tc_google::protobuf::internal *v4;
  CoreML::Specification::protobuf_Parameters_2eproto *v5;

  _tc_google::protobuf::internal::VerifyVersion((_tc_google::protobuf::internal *)0x2DD278, (_tc_google::protobuf::internal *)0x2DD278, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/external/coremltools_wrap/coremltools/mlmodel/build/format/LinkedModel.pb.cc", a4);
  _tc_google::protobuf::internal::InitProtobufDefaults(v4);
  CoreML::Specification::protobuf_Parameters_2eproto::InitDefaults(v5);
  CoreML::Specification::_LinkedModel_default_instance_ = (uint64_t)&off_24D93D9F0;
  unk_254FFA7B8 = 0;
  qword_254FFA7C8 = 0;
  byte_254FFA7D0 = 1;
  CoreML::Specification::_LinkedModelFile_default_instance_ = (uint64_t)&off_24D93DA88;
  *(_QWORD *)algn_254FFA7E8 = 0;
  dword_254FFA800 = 0;
  byte_254FFA808 = 1;
  qword_254FFA7F0 = (uint64_t)&CoreML::Specification::_StringParameter_default_instance_;
  unk_254FFA7F8 = &CoreML::Specification::_StringParameter_default_instance_;
}

void CoreML::Specification::protobuf_LinkedModel_2eproto::InitDefaults(CoreML::Specification::protobuf_LinkedModel_2eproto *this)
{
  unint64_t v1;
  _QWORD v2[2];
  char v3;

  v1 = atomic_load(&CoreML::Specification::protobuf_LinkedModel_2eproto::InitDefaults(void)::once);
  if (v1 != 2)
  {
    v2[0] = &off_24D93BCB0;
    v2[1] = CoreML::Specification::protobuf_LinkedModel_2eproto::TableStruct::InitDefaultsImpl;
    v3 = 0;
    _tc_google::protobuf::GoogleOnceInitImpl(&CoreML::Specification::protobuf_LinkedModel_2eproto::InitDefaults(void)::once, (uint64_t)v2);
    _tc_google::protobuf::internal::FunctionClosure0::~FunctionClosure0((_tc_google::protobuf::internal::FunctionClosure0 *)v2);
  }
}

void sub_2183BE004(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  _tc_google::protobuf::internal::FunctionClosure0::~FunctionClosure0((_tc_google::protobuf::internal::FunctionClosure0 *)va);
  _Unwind_Resume(a1);
}

CoreML::Specification::LinkedModel *CoreML::Specification::LinkedModel::LinkedModel(CoreML::Specification::LinkedModel *this)
{
  *(_QWORD *)this = &off_24D93D9F0;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::LinkedModel *)&CoreML::Specification::_LinkedModel_default_instance_)
    CoreML::Specification::protobuf_LinkedModel_2eproto::InitDefaults(this);
  *((_QWORD *)this + 3) = 0;
  return this;
}

void sub_2183BE064(_Unwind_Exception *a1)
{
  uint64_t *v1;

  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::LinkedModelFile::MergeFrom(CoreML::Specification::LinkedModelFile *this, const CoreML::Specification::LinkedModelFile *a2)
{
  uint64_t v4;
  const CoreML::Specification::V5::TensorValue_RepeatedBytes *v5;
  CoreML::Specification::StringParameter *v6;
  const CoreML::Specification::V5::TensorValue_RepeatedBytes *v7;
  const CoreML::Specification::V5::TensorValue_RepeatedBytes *v8;
  CoreML::Specification::StringParameter *v9;
  const CoreML::Specification::V5::TensorValue_RepeatedBytes *v10;

  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  if (a2 != (const CoreML::Specification::LinkedModelFile *)&CoreML::Specification::_LinkedModelFile_default_instance_)
  {
    v5 = (const CoreML::Specification::V5::TensorValue_RepeatedBytes *)*((_QWORD *)a2 + 2);
    if (v5)
    {
      v6 = (CoreML::Specification::StringParameter *)*((_QWORD *)this + 2);
      if (!v6)
      {
        v6 = (CoreML::Specification::StringParameter *)operator new();
        CoreML::Specification::StringParameter::StringParameter(v6);
        *((_QWORD *)this + 2) = v6;
        v5 = (const CoreML::Specification::V5::TensorValue_RepeatedBytes *)*((_QWORD *)a2 + 2);
      }
      if (v5)
        v7 = v5;
      else
        v7 = (const CoreML::Specification::V5::TensorValue_RepeatedBytes *)&CoreML::Specification::_StringParameter_default_instance_;
      CoreML::Specification::V5::TensorValue_RepeatedBytes::MergeFrom(v6, v7);
    }
    v8 = (const CoreML::Specification::V5::TensorValue_RepeatedBytes *)*((_QWORD *)a2 + 3);
    if (v8)
    {
      v9 = (CoreML::Specification::StringParameter *)*((_QWORD *)this + 3);
      if (!v9)
      {
        v9 = (CoreML::Specification::StringParameter *)operator new();
        CoreML::Specification::StringParameter::StringParameter(v9);
        *((_QWORD *)this + 3) = v9;
        v8 = (const CoreML::Specification::V5::TensorValue_RepeatedBytes *)*((_QWORD *)a2 + 3);
      }
      if (v8)
        v10 = v8;
      else
        v10 = (const CoreML::Specification::V5::TensorValue_RepeatedBytes *)&CoreML::Specification::_StringParameter_default_instance_;
      CoreML::Specification::V5::TensorValue_RepeatedBytes::MergeFrom(v9, v10);
    }
  }
}

void sub_2183BE16C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C4084265165);
  _Unwind_Resume(a1);
}

void CoreML::Specification::LinkedModel::~LinkedModel(CoreML::Specification::LinkedModel *this)
{
  int v2;
  uint64_t v3;

  *(_QWORD *)this = &off_24D93D9F0;
  v2 = *((_DWORD *)this + 7);
  if (v2)
  {
    if (v2 == 1)
    {
      v3 = *((_QWORD *)this + 2);
      if (v3)
        (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    }
    *((_DWORD *)this + 7) = 0;
  }
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  CoreML::Specification::LinkedModel::~LinkedModel(this);
  JUMPOUT(0x219A19A08);
}

uint64_t *CoreML::Specification::LinkedModel::default_instance(CoreML::Specification::LinkedModel *this)
{
  CoreML::Specification::protobuf_LinkedModel_2eproto::InitDefaults(this);
  return &CoreML::Specification::_LinkedModel_default_instance_;
}

CoreML::Specification::LinkedModel *CoreML::Specification::LinkedModel::New(CoreML::Specification::LinkedModel *this, _tc_google::protobuf::Arena *a2)
{
  CoreML::Specification::LinkedModel *v3;

  v3 = (CoreML::Specification::LinkedModel *)operator new();
  CoreML::Specification::LinkedModel::LinkedModel(v3);
  if (a2)
    _tc_google::protobuf::Arena::Own<CoreML::Specification::LinkedModel>(a2, v3);
  return v3;
}

void sub_2183BE284(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C406A65A86DLL);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::LinkedModel>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::LinkedModel>);
  return result;
}

uint64_t CoreML::Specification::LinkedModel::Clear(uint64_t this)
{
  uint64_t v1;

  v1 = this;
  if (*(_DWORD *)(this + 28) == 1)
  {
    this = *(_QWORD *)(this + 16);
    if (this)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
  }
  *(_DWORD *)(v1 + 28) = 0;
  return this;
}

BOOL CoreML::Specification::LinkedModel::MergePartialFromCodedStream(CoreML::Specification::LinkedModel *this, char **a2, unsigned int a3)
{
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  CoreML::Specification::LinkedModelFile *v11;
  char *v12;
  int VarintSizeAsIntFallback;
  unint64_t v14;
  unsigned int v15;
  int v16;
  _BOOL8 result;

  while (1)
  {
    while (1)
    {
      v5 = *a2;
      if (*a2 >= a2[1])
      {
        v6 = 0;
LABEL_6:
        TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v6);
        v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v7 & 0x100000000) == 0)
          break;
        goto LABEL_7;
      }
      v6 = *v5;
      if (*v5 < 1)
        goto LABEL_6;
      *a2 = v5 + 1;
      v7 = v6 | 0x100000000;
      if ((v7 & 0x100000000) == 0)
        break;
LABEL_7:
      if (v7 != 10 || (v7 & 0xFFFFFFF8) != 8)
        break;
      if (*((_DWORD *)this + 7) == 1)
      {
        v11 = (CoreML::Specification::LinkedModelFile *)*((_QWORD *)this + 2);
      }
      else
      {
        *((_DWORD *)this + 7) = 1;
        v11 = (CoreML::Specification::LinkedModelFile *)operator new();
        CoreML::Specification::LinkedModelFile::LinkedModelFile(v11);
        *((_QWORD *)this + 2) = v11;
      }
      v12 = *a2;
      if (*a2 >= a2[1] || *v12 < 0)
      {
        VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
        if (VarintSizeAsIntFallback < 0)
          return 0;
      }
      else
      {
        VarintSizeAsIntFallback = *v12;
        *a2 = v12 + 1;
      }
      v14 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, VarintSizeAsIntFallback);
      if ((v14 & 0x8000000000000000) == 0)
      {
        v16 = v14;
        result = CoreML::Specification::LinkedModelFile::MergePartialFromCodedStream(v11, a2, v15);
        if (!result)
          return result;
        if (_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v16))
        {
          continue;
        }
      }
      return 0;
    }
    if (!(_DWORD)v7 || (v7 & 7) == 4)
      return 1;
    if ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v7, a3) & 1) == 0)return 0;
  }
}

void sub_2183BE464(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C40C9A46F13);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::LinkedModel::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  if (*(_DWORD *)(this + 28) == 1)
    return _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(this + 16), a2, a4);
  return this;
}

uint64_t CoreML::Specification::LinkedModel::ByteSizeLong(CoreML::Specification::LinkedModelFile **this)
{
  uint64_t v2;
  uint64_t result;

  if (*((_DWORD *)this + 7) == 1)
  {
    v2 = CoreML::Specification::LinkedModelFile::ByteSizeLong(this[2]);
    result = v2 + ((9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
  else
  {
    result = 0;
  }
  *((_DWORD *)this + 6) = result;
  return result;
}

void CoreML::Specification::LinkedModel::MergeFrom(CoreML::Specification::LinkedModel *this, const CoreML::Specification::LinkedModel *a2)
{
  uint64_t v4;
  CoreML::Specification::LinkedModelFile *v5;
  CoreML::Specification::protobuf_LinkedModel_2eproto *v6;
  const CoreML::Specification::LinkedModelFile *v7;

  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  if (*((_DWORD *)a2 + 7) == 1)
  {
    if (*((_DWORD *)this + 7) == 1)
    {
      v5 = (CoreML::Specification::LinkedModelFile *)*((_QWORD *)this + 2);
    }
    else
    {
      *((_DWORD *)this + 7) = 1;
      v5 = (CoreML::Specification::LinkedModelFile *)operator new();
      v6 = CoreML::Specification::LinkedModelFile::LinkedModelFile(v5);
      *((_QWORD *)this + 2) = v5;
      if (*((_DWORD *)a2 + 7) != 1)
      {
        CoreML::Specification::protobuf_LinkedModel_2eproto::InitDefaults(v6);
        v7 = (const CoreML::Specification::LinkedModelFile *)&CoreML::Specification::_LinkedModelFile_default_instance_;
        goto LABEL_10;
      }
    }
    v7 = (const CoreML::Specification::LinkedModelFile *)*((_QWORD *)a2 + 2);
LABEL_10:
    CoreML::Specification::LinkedModelFile::MergeFrom(v5, v7);
  }
}

void sub_2183BE5C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C40C9A46F13);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::LinkedModel::IsInitialized(CoreML::Specification::LinkedModel *this)
{
  return 1;
}

_QWORD *CoreML::Specification::LinkedModel::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.LinkedModel");
}

CoreML::Specification::LinkedModelFile *CoreML::Specification::LinkedModelFile::LinkedModelFile(CoreML::Specification::LinkedModelFile *this)
{
  *(_QWORD *)this = &off_24D93DA88;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::LinkedModelFile *)&CoreML::Specification::_LinkedModelFile_default_instance_)
    CoreML::Specification::protobuf_LinkedModel_2eproto::InitDefaults(this);
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  return this;
}

void sub_2183BE650(_Unwind_Exception *a1)
{
  uint64_t *v1;

  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

CoreML::Specification::LinkedModelFile *CoreML::Specification::LinkedModelFile::LinkedModelFile(CoreML::Specification::LinkedModelFile *this, const CoreML::Specification::LinkedModelFile *a2)
{
  uint64_t v4;
  CoreML::Specification::StringParameter *v5;
  CoreML::Specification::StringParameter *v6;

  *(_QWORD *)this = &off_24D93DA88;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 8) = 0;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  if (a2 == (const CoreML::Specification::LinkedModelFile *)&CoreML::Specification::_LinkedModelFile_default_instance_)
  {
    v6 = 0;
    *((_QWORD *)this + 2) = 0;
  }
  else
  {
    if (*((_QWORD *)a2 + 2))
    {
      v5 = (CoreML::Specification::StringParameter *)operator new();
      CoreML::Specification::StringParameter::StringParameter(v5, *((const CoreML::Specification::StringParameter **)a2 + 2));
    }
    else
    {
      v5 = 0;
    }
    *((_QWORD *)this + 2) = v5;
    if (*((_QWORD *)a2 + 3))
    {
      v6 = (CoreML::Specification::StringParameter *)operator new();
      CoreML::Specification::StringParameter::StringParameter(v6, *((const CoreML::Specification::StringParameter **)a2 + 3));
    }
    else
    {
      v6 = 0;
    }
  }
  *((_QWORD *)this + 3) = v6;
  return this;
}

void sub_2183BE748(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;

  MEMORY[0x219A19A08](v2, 0x10A1C4084265165);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::LinkedModelFile::~LinkedModelFile(CoreML::Specification::LinkedModelFile *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_24D93DA88;
  if (this != (CoreML::Specification::LinkedModelFile *)&CoreML::Specification::_LinkedModelFile_default_instance_)
  {
    v2 = *((_QWORD *)this + 2);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    v3 = *((_QWORD *)this + 3);
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  CoreML::Specification::LinkedModelFile::~LinkedModelFile(this);
  JUMPOUT(0x219A19A08);
}

uint64_t *CoreML::Specification::LinkedModelFile::default_instance(CoreML::Specification::LinkedModelFile *this)
{
  CoreML::Specification::protobuf_LinkedModel_2eproto::InitDefaults(this);
  return &CoreML::Specification::_LinkedModelFile_default_instance_;
}

CoreML::Specification::LinkedModelFile *CoreML::Specification::LinkedModelFile::New(CoreML::Specification::LinkedModelFile *this, _tc_google::protobuf::Arena *a2)
{
  CoreML::Specification::LinkedModelFile *v3;

  v3 = (CoreML::Specification::LinkedModelFile *)operator new();
  CoreML::Specification::LinkedModelFile::LinkedModelFile(v3);
  if (a2)
    _tc_google::protobuf::Arena::Own<CoreML::Specification::LinkedModelFile>(a2, v3);
  return v3;
}

void sub_2183BE884(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C40C9A46F13);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::LinkedModelFile>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::LinkedModelFile>);
  return result;
}

uint64_t CoreML::Specification::LinkedModelFile::Clear(CoreML::Specification::LinkedModelFile *this)
{
  uint64_t v2;
  uint64_t result;

  v2 = *((_QWORD *)this + 2);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 2) = 0;
  result = *((_QWORD *)this + 3);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 3) = 0;
  return result;
}

BOOL CoreML::Specification::LinkedModelFile::MergePartialFromCodedStream(CoreML::Specification::LinkedModelFile *this, char **a2, unsigned int a3)
{
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  CoreML::Specification::StringParameter *v10;
  char *v11;
  int VarintSizeAsIntFallback;
  unint64_t v14;
  unsigned int v15;
  int v16;
  _BOOL8 result;

  while (1)
  {
    while (1)
    {
      v5 = *a2;
      if (*a2 >= a2[1])
      {
        v6 = 0;
LABEL_6:
        TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v6);
        v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v7 & 0x100000000) == 0)
          goto LABEL_21;
        goto LABEL_7;
      }
      v6 = *v5;
      if (*v5 < 1)
        goto LABEL_6;
      *a2 = v5 + 1;
      v7 = v6 | 0x100000000;
      if ((v7 & 0x100000000) == 0)
        goto LABEL_21;
LABEL_7:
      if (v7 >> 3 != 2)
        break;
      if (v7 != 18)
        goto LABEL_21;
      v10 = (CoreML::Specification::StringParameter *)*((_QWORD *)this + 3);
      if (!v10)
      {
        v10 = (CoreML::Specification::StringParameter *)operator new();
        CoreML::Specification::StringParameter::StringParameter(v10);
        *((_QWORD *)this + 3) = v10;
      }
LABEL_18:
      v11 = *a2;
      if (*a2 >= a2[1] || *v11 < 0)
      {
        VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
        if (VarintSizeAsIntFallback < 0)
          return 0;
      }
      else
      {
        VarintSizeAsIntFallback = *v11;
        *a2 = v11 + 1;
      }
      v14 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, VarintSizeAsIntFallback);
      if ((v14 & 0x8000000000000000) == 0)
      {
        v16 = v14;
        result = CoreML::Specification::StringParameter::MergePartialFromCodedStream(v10, a2, v15);
        if (!result)
          return result;
        if (_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v16))
        {
          continue;
        }
      }
      return 0;
    }
    if (v7 >> 3 == 1 && v7 == 10)
    {
      v10 = (CoreML::Specification::StringParameter *)*((_QWORD *)this + 2);
      if (!v10)
      {
        v10 = (CoreML::Specification::StringParameter *)operator new();
        CoreML::Specification::StringParameter::StringParameter(v10);
        *((_QWORD *)this + 2) = v10;
      }
      goto LABEL_18;
    }
LABEL_21:
    if (!(_DWORD)v7 || (v7 & 7) == 4)
      return 1;
    if ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v7, a3) & 1) == 0)return 0;
  }
}

void sub_2183BEA98(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C4084265165);
  _Unwind_Resume(a1);
}

uint64_t *CoreML::Specification::LinkedModelFile::SerializeWithCachedSizes(uint64_t *this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  if (this != &CoreML::Specification::_LinkedModelFile_default_instance_)
  {
    v5 = this;
    v6 = this[2];
    if (v6)
      this = (uint64_t *)_tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)1, v6, a2, a4);
    v7 = v5[3];
    if (v7)
      return (uint64_t *)_tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)2, v7, a2, a4);
  }
  return this;
}

uint64_t CoreML::Specification::LinkedModelFile::ByteSizeLong(CoreML::Specification::LinkedModelFile *this)
{
  CoreML::Specification::StringParameter *v2;
  uint64_t v3;
  uint64_t v4;
  CoreML::Specification::StringParameter *v5;
  uint64_t v6;

  if (this == (CoreML::Specification::LinkedModelFile *)&CoreML::Specification::_LinkedModelFile_default_instance_)
  {
    v4 = 0;
  }
  else
  {
    v2 = (CoreML::Specification::StringParameter *)*((_QWORD *)this + 2);
    if (v2)
    {
      v3 = CoreML::Specification::StringParameter::ByteSizeLong(v2);
      v4 = v3 + ((9 * (__clz(v3 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    else
    {
      v4 = 0;
    }
    v5 = (CoreML::Specification::StringParameter *)*((_QWORD *)this + 3);
    if (v5)
    {
      v6 = CoreML::Specification::StringParameter::ByteSizeLong(v5);
      v4 += v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
  }
  *((_DWORD *)this + 8) = v4;
  return v4;
}

uint64_t CoreML::Specification::LinkedModelFile::IsInitialized(CoreML::Specification::LinkedModelFile *this)
{
  return 1;
}

_QWORD *CoreML::Specification::LinkedModelFile::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.LinkedModelFile");
}

CoreML::Specification::LinkedModel *CoreML::Specification::LinkedModel::New(CoreML::Specification::LinkedModel *this)
{
  return CoreML::Specification::LinkedModel::New(this, 0);
}

CoreML::Specification::LinkedModelFile *CoreML::Specification::LinkedModelFile::New(CoreML::Specification::LinkedModelFile *this)
{
  return CoreML::Specification::LinkedModelFile::New(this, 0);
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::LinkedModel>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::LinkedModelFile>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t _GLOBAL__sub_I_LinkedModel_pb_cc()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

double CoreML::Specification::protobuf_BayesianProbitRegressor_2eproto::TableStruct::InitDefaultsImpl(CoreML::Specification::protobuf_BayesianProbitRegressor_2eproto::TableStruct *this, uint64_t a2, uint64_t a3, const char *a4)
{
  _tc_google::protobuf::internal *v4;
  double result;

  _tc_google::protobuf::internal::VerifyVersion((_tc_google::protobuf::internal *)0x2DD278, (_tc_google::protobuf::internal *)0x2DD278, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/external/coremltools_wrap/coremltools/mlmodel/build/format/BayesianProbitRegressor.pb.cc", a4);
  _tc_google::protobuf::internal::InitProtobufDefaults(v4);
  CoreML::Specification::_BayesianProbitRegressor_Gaussian_default_instance_ = (uint64_t)&off_24D93DB50;
  *(_QWORD *)algn_254FFA818 = 0;
  qword_254FFA820 = 0;
  unk_254FFA828 = 0;
  dword_254FFA830 = 0;
  byte_254FFA838 = 1;
  CoreML::Specification::_BayesianProbitRegressor_FeatureValueWeight_default_instance_ = (uint64_t)&off_24D93DBE8;
  *(_QWORD *)algn_254FFA848 = 0;
  unk_254FFA858 = 0;
  CoreML::Specification::_BayesianProbitRegressor_FeatureWeight_default_instance_ = (uint64_t)&off_24D93DC80;
  result = 0.0;
  unk_254FFA870 = 0u;
  unk_254FFA880 = 0u;
  qword_254FFA890 = 0;
  byte_254FFA898 = 1;
  byte_254FFA860 = 1;
  CoreML::Specification::_BayesianProbitRegressor_default_instance_ = (uint64_t)&off_24D93DD18;
  unk_254FFA8B8 = 0u;
  unk_254FFA8A8 = 0u;
  qword_254FFA8C8 = (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string;
  unk_254FFA8D0 = &_tc_google::protobuf::internal::fixed_address_empty_string;
  qword_254FFA8D8 = (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string;
  unk_254FFA8E0 = &_tc_google::protobuf::internal::fixed_address_empty_string;
  qword_254FFA8E8 = (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string;
  unk_254FFA8F0 = &_tc_google::protobuf::internal::fixed_address_empty_string;
  qword_254FFA8F8 = (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string;
  unk_254FFA900 = &_tc_google::protobuf::internal::fixed_address_empty_string;
  byte_254FFA918 = 1;
  qword_254FFA850 = (uint64_t)&CoreML::Specification::_BayesianProbitRegressor_Gaussian_default_instance_;
  qword_254FFA908 = (uint64_t)&CoreML::Specification::_BayesianProbitRegressor_Gaussian_default_instance_;
  unk_254FFA910 = 0;
  return result;
}

void CoreML::Specification::protobuf_BayesianProbitRegressor_2eproto::InitDefaults(CoreML::Specification::protobuf_BayesianProbitRegressor_2eproto *this)
{
  unint64_t v1;
  _QWORD v2[2];
  char v3;

  v1 = atomic_load(&CoreML::Specification::protobuf_BayesianProbitRegressor_2eproto::InitDefaults(void)::once);
  if (v1 != 2)
  {
    v2[0] = &off_24D93BCB0;
    v2[1] = CoreML::Specification::protobuf_BayesianProbitRegressor_2eproto::TableStruct::InitDefaultsImpl;
    v3 = 0;
    _tc_google::protobuf::GoogleOnceInitImpl(&CoreML::Specification::protobuf_BayesianProbitRegressor_2eproto::InitDefaults(void)::once, (uint64_t)v2);
    _tc_google::protobuf::internal::FunctionClosure0::~FunctionClosure0((_tc_google::protobuf::internal::FunctionClosure0 *)v2);
  }
}

void sub_2183BED90(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  _tc_google::protobuf::internal::FunctionClosure0::~FunctionClosure0((_tc_google::protobuf::internal::FunctionClosure0 *)va);
  _Unwind_Resume(a1);
}

CoreML::Specification::BayesianProbitRegressor_Gaussian *CoreML::Specification::BayesianProbitRegressor_Gaussian::BayesianProbitRegressor_Gaussian(CoreML::Specification::BayesianProbitRegressor_Gaussian *this)
{
  *(_QWORD *)this = &off_24D93DB50;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::BayesianProbitRegressor_Gaussian *)&CoreML::Specification::_BayesianProbitRegressor_Gaussian_default_instance_)
    CoreML::Specification::protobuf_BayesianProbitRegressor_2eproto::InitDefaults(this);
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  return this;
}

void sub_2183BEDF4(_Unwind_Exception *a1)
{
  uint64_t *v1;

  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::BayesianProbitRegressor_Gaussian::~BayesianProbitRegressor_Gaussian(CoreML::Specification::BayesianProbitRegressor_Gaussian *this)
{
  *(_QWORD *)this = &off_24D93DB50;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  *(_QWORD *)this = &off_24D93DB50;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
  JUMPOUT(0x219A19A08);
}

CoreML::Specification::BayesianProbitRegressor_Gaussian *CoreML::Specification::BayesianProbitRegressor_Gaussian::New(CoreML::Specification::BayesianProbitRegressor_Gaussian *this, _tc_google::protobuf::Arena *a2)
{
  CoreML::Specification::BayesianProbitRegressor_Gaussian *v3;

  v3 = (CoreML::Specification::BayesianProbitRegressor_Gaussian *)operator new();
  CoreML::Specification::BayesianProbitRegressor_Gaussian::BayesianProbitRegressor_Gaussian(v3);
  if (a2)
    _tc_google::protobuf::Arena::Own<CoreML::Specification::BayesianProbitRegressor_Gaussian>(a2, v3);
  return v3;
}

void sub_2183BEEC8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40B7564605);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::BayesianProbitRegressor_Gaussian>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::BayesianProbitRegressor_Gaussian>);
  return result;
}

uint64_t CoreML::Specification::BayesianProbitRegressor_Gaussian::Clear(uint64_t this)
{
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  return this;
}

uint64_t CoreML::Specification::BayesianProbitRegressor_Gaussian::MergePartialFromCodedStream(CoreML::Specification::BayesianProbitRegressor_Gaussian *this, char **a2, unsigned int a3)
{
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  BOOL v14;
  uint64_t v15;
  unint64_t v17;

  while (1)
  {
    while (1)
    {
      while (1)
      {
        v5 = *a2;
        if (*a2 < a2[1])
          break;
        v6 = 0;
LABEL_6:
        TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v6);
        v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v7 & 0x100000000) != 0)
          goto LABEL_7;
LABEL_20:
        if ((_DWORD)v7)
          v14 = (v7 & 7) == 4;
        else
          v14 = 1;
        v15 = v14;
        if (v14
          || (_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v7, a3) & 1) == 0)
        {
          return v15;
        }
      }
      v6 = *v5;
      if (*v5 < 1)
        goto LABEL_6;
      *a2 = v5 + 1;
      v7 = v6 | 0x100000000;
      if ((v7 & 0x100000000) == 0)
        goto LABEL_20;
LABEL_7:
      if (v7 >> 3 == 2)
        break;
      if (v7 >> 3 != 1 || v7 != 9)
        goto LABEL_20;
      v17 = 0;
      v10 = (unint64_t *)*a2;
      if ((int)(*((_DWORD *)a2 + 2) - *a2) < 8)
      {
        if (!_tc_google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((unint64_t **)a2, &v17))
          return 0;
        v11 = v17;
      }
      else
      {
        v11 = *v10;
        *a2 = (char *)(v10 + 1);
      }
      *((_QWORD *)this + 2) = v11;
    }
    if (v7 != 17)
      goto LABEL_20;
    v17 = 0;
    v12 = (unint64_t *)*a2;
    if ((int)(*((_DWORD *)a2 + 2) - *a2) >= 8)
    {
      v13 = *v12;
      *a2 = (char *)(v12 + 1);
      goto LABEL_19;
    }
    if (!_tc_google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((unint64_t **)a2, &v17))
      return 0;
    v13 = v17;
LABEL_19:
    *((_QWORD *)this + 3) = v13;
  }
}

uint64_t CoreML::Specification::BayesianProbitRegressor_Gaussian::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, _tc_google::protobuf::io::CodedOutputStream *a3)
{
  uint64_t v4;
  double v5;
  double v6;

  v4 = this;
  v5 = *(double *)(this + 16);
  if (v5 != 0.0)
    this = _tc_google::protobuf::internal::WireFormatLite::WriteDouble((_tc_google::protobuf::internal::WireFormatLite *)1, a2, v5, a3);
  v6 = *(double *)(v4 + 24);
  if (v6 != 0.0)
    return _tc_google::protobuf::internal::WireFormatLite::WriteDouble((_tc_google::protobuf::internal::WireFormatLite *)2, a2, v6, a3);
  return this;
}

uint64_t CoreML::Specification::BayesianProbitRegressor_Gaussian::ByteSizeLong(CoreML::Specification::BayesianProbitRegressor_Gaussian *this)
{
  uint64_t v1;

  v1 = 9;
  if (*((double *)this + 2) == 0.0)
    v1 = 0;
  if (*((double *)this + 3) != 0.0)
    v1 += 9;
  *((_DWORD *)this + 8) = v1;
  return v1;
}

uint64_t CoreML::Specification::BayesianProbitRegressor_Gaussian::IsInitialized(CoreML::Specification::BayesianProbitRegressor_Gaussian *this)
{
  return 1;
}

_QWORD *CoreML::Specification::BayesianProbitRegressor_Gaussian::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.BayesianProbitRegressor.Gaussian");
}

CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight *CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight::BayesianProbitRegressor_FeatureValueWeight(CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight *this)
{
  *(_QWORD *)this = &off_24D93DBE8;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight *)&CoreML::Specification::_BayesianProbitRegressor_FeatureValueWeight_default_instance_)
    CoreML::Specification::protobuf_BayesianProbitRegressor_2eproto::InitDefaults(this);
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  return this;
}

void sub_2183BF148(_Unwind_Exception *a1)
{
  uint64_t *v1;

  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight::~BayesianProbitRegressor_FeatureValueWeight(CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24D93DBE8;
  if (this != (CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight *)&CoreML::Specification::_BayesianProbitRegressor_FeatureValueWeight_default_instance_)
  {
    v2 = *((_QWORD *)this + 2);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight::~BayesianProbitRegressor_FeatureValueWeight(this);
  JUMPOUT(0x219A19A08);
}

CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight *CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight::New(CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight *this, _tc_google::protobuf::Arena *a2)
{
  CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight *v3;

  v3 = (CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight *)operator new();
  CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight::BayesianProbitRegressor_FeatureValueWeight(v3);
  if (a2)
    _tc_google::protobuf::Arena::Own<CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight>(a2, v3);
  return v3;
}

void sub_2183BF22C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C406A65A86DLL);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight>);
  return result;
}

uint64_t CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight::Clear(CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 2);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 2) = 0;
  *((_DWORD *)this + 6) = 0;
  return result;
}

uint64_t CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight::MergePartialFromCodedStream(CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight *this, char **a2, unsigned int a3)
{
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  char *v10;
  int v11;
  CoreML::Specification::BayesianProbitRegressor_Gaussian *v12;
  char *v13;
  int VarintSizeAsIntFallback;
  unint64_t v16;
  unsigned int v17;
  int v18;
  uint64_t result;
  uint64_t Varint32Fallback;

  while (1)
  {
    while (1)
    {
      while (1)
      {
        v5 = *a2;
        if (*a2 >= a2[1])
        {
          v6 = 0;
LABEL_6:
          TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v6);
          v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
          if ((v7 & 0x100000000) == 0)
            goto LABEL_22;
          goto LABEL_7;
        }
        v6 = *v5;
        if (*v5 < 1)
          goto LABEL_6;
        *a2 = v5 + 1;
        v7 = v6 | 0x100000000;
        if ((v7 & 0x100000000) == 0)
          goto LABEL_22;
LABEL_7:
        if (v7 >> 3 != 2)
          break;
        if (v7 != 18)
          goto LABEL_22;
        v12 = (CoreML::Specification::BayesianProbitRegressor_Gaussian *)*((_QWORD *)this + 2);
        if (!v12)
        {
          v12 = (CoreML::Specification::BayesianProbitRegressor_Gaussian *)operator new();
          CoreML::Specification::BayesianProbitRegressor_Gaussian::BayesianProbitRegressor_Gaussian(v12);
          *((_QWORD *)this + 2) = v12;
        }
        v13 = *a2;
        if (*a2 >= a2[1] || *v13 < 0)
        {
          VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
          if (VarintSizeAsIntFallback < 0)
            return 0;
        }
        else
        {
          VarintSizeAsIntFallback = *v13;
          *a2 = v13 + 1;
        }
        v16 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, VarintSizeAsIntFallback);
        if ((v16 & 0x8000000000000000) == 0)
        {
          v18 = v16;
          result = CoreML::Specification::BayesianProbitRegressor_Gaussian::MergePartialFromCodedStream(v12, a2, v17);
          if (!(_DWORD)result)
            return result;
          if (_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v18))
          {
            continue;
          }
        }
        return 0;
      }
      if (v7 >> 3 != 1 || v7 != 8)
        break;
      v10 = *a2;
      if (*a2 >= a2[1])
      {
        v11 = 0;
        goto LABEL_34;
      }
      v11 = *v10;
      if (*v10 < 0)
      {
LABEL_34:
        Varint32Fallback = _tc_google::protobuf::io::CodedInputStream::ReadVarint32Fallback((_tc_google::protobuf::io::CodedInputStream *)a2, v11);
        *((_DWORD *)this + 6) = Varint32Fallback;
        if (Varint32Fallback < 0)
          return 0;
      }
      else
      {
        *((_DWORD *)this + 6) = v11;
        *a2 = v10 + 1;
      }
    }
LABEL_22:
    if (!(_DWORD)v7 || (v7 & 7) == 4)
      return 1;
    if ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v7, a3) & 1) == 0)return 0;
  }
}

void sub_2183BF43C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40B7564605);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t *v5;
  unsigned int v6;
  uint64_t v7;

  v5 = (uint64_t *)this;
  v6 = *(_DWORD *)(this + 24);
  if (v6)
    this = _tc_google::protobuf::internal::WireFormatLite::WriteUInt32(1, v6, a2, a4);
  if (v5 != &CoreML::Specification::_BayesianProbitRegressor_FeatureValueWeight_default_instance_)
  {
    v7 = v5[2];
    if (v7)
      return _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)2, v7, a2, a4);
  }
  return this;
}

uint64_t CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight::ByteSizeLong(CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight *this)
{
  uint64_t v1;
  uint64_t v2;
  int v3;

  if (this == (CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight *)&CoreML::Specification::_BayesianProbitRegressor_FeatureValueWeight_default_instance_)
  {
    v1 = 0;
  }
  else
  {
    v1 = *((_QWORD *)this + 2);
    if (v1)
    {
      v2 = 9;
      if (*(double *)(v1 + 16) == 0.0)
        v2 = 0;
      if (*(double *)(v1 + 24) != 0.0)
        v2 += 9;
      *(_DWORD *)(v1 + 32) = v2;
      v1 = v2 + ((9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
  }
  v3 = *((_DWORD *)this + 6);
  if (v3)
    v1 += ((9 * (__clz(v3 | 1) ^ 0x1F) + 73) >> 6) + 1;
  *((_DWORD *)this + 7) = v1;
  return v1;
}

std::string *CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight::MergeFrom(std::string *this, const CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight *a2)
{
  std::string *v3;
  uint64_t v4;
  const CoreML::Specification::SigmoidKernel *v5;
  CoreML::Specification::BayesianProbitRegressor_Gaussian *v7;
  const CoreML::Specification::SigmoidKernel *v8;
  int v9;

  v3 = this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = (const CoreML::Specification::SigmoidKernel *)*((_QWORD *)a2 + 2);
  if (a2 != (const CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight *)&CoreML::Specification::_BayesianProbitRegressor_FeatureValueWeight_default_instance_
    && v5 != 0)
  {
    v7 = (CoreML::Specification::BayesianProbitRegressor_Gaussian *)v3->__r_.__value_.__r.__words[2];
    if (!v7)
    {
      v7 = (CoreML::Specification::BayesianProbitRegressor_Gaussian *)operator new();
      CoreML::Specification::BayesianProbitRegressor_Gaussian::BayesianProbitRegressor_Gaussian(v7);
      v3->__r_.__value_.__r.__words[2] = (std::string::size_type)v7;
      v5 = (const CoreML::Specification::SigmoidKernel *)*((_QWORD *)a2 + 2);
    }
    if (v5)
      v8 = v5;
    else
      v8 = (const CoreML::Specification::SigmoidKernel *)&CoreML::Specification::_BayesianProbitRegressor_Gaussian_default_instance_;
    this = CoreML::Specification::SigmoidKernel::MergeFrom((std::string *)v7, v8);
  }
  v9 = *((_DWORD *)a2 + 6);
  if (v9)
    LODWORD(v3[1].__r_.__value_.__l.__data_) = v9;
  return this;
}

void sub_2183BF600(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40B7564605);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight::IsInitialized(CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight *this)
{
  return 1;
}

_QWORD *CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.BayesianProbitRegressor.FeatureValueWeight");
}

CoreML::Specification::BayesianProbitRegressor_FeatureWeight *CoreML::Specification::BayesianProbitRegressor_FeatureWeight::BayesianProbitRegressor_FeatureWeight(CoreML::Specification::BayesianProbitRegressor_FeatureWeight *this)
{
  *(_QWORD *)this = &off_24D93DC80;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  if (this != (CoreML::Specification::BayesianProbitRegressor_FeatureWeight *)&CoreML::Specification::_BayesianProbitRegressor_FeatureWeight_default_instance_)
    CoreML::Specification::protobuf_BayesianProbitRegressor_2eproto::InitDefaults(this);
  *((_QWORD *)this + 5) = 0;
  return this;
}

void sub_2183BF69C(_Unwind_Exception *a1)
{
  uint64_t *v1;
  _QWORD *v2;

  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Destroy<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMRegressor_DoubleArray>::TypeHandler>(v2);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::BayesianProbitRegressor_FeatureWeight::~BayesianProbitRegressor_FeatureWeight(CoreML::Specification::BayesianProbitRegressor_FeatureWeight *this)
{
  *(_QWORD *)this = &off_24D93DC80;
  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Destroy<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMRegressor_DoubleArray>::TypeHandler>((_QWORD *)this + 2);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  CoreML::Specification::BayesianProbitRegressor_FeatureWeight::~BayesianProbitRegressor_FeatureWeight(this);
  JUMPOUT(0x219A19A08);
}

CoreML::Specification::BayesianProbitRegressor_FeatureWeight *CoreML::Specification::BayesianProbitRegressor_FeatureWeight::New(CoreML::Specification::BayesianProbitRegressor_FeatureWeight *this, _tc_google::protobuf::Arena *a2)
{
  CoreML::Specification::BayesianProbitRegressor_FeatureWeight *v3;

  v3 = (CoreML::Specification::BayesianProbitRegressor_FeatureWeight *)operator new();
  CoreML::Specification::BayesianProbitRegressor_FeatureWeight::BayesianProbitRegressor_FeatureWeight(v3);
  if (a2)
    _tc_google::protobuf::Arena::Own<CoreML::Specification::BayesianProbitRegressor_FeatureWeight>(a2, v3);
  return v3;
}

void sub_2183BF770(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C408C5061CCLL);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::BayesianProbitRegressor_FeatureWeight>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::BayesianProbitRegressor_FeatureWeight>);
  return result;
}

uint64_t CoreML::Specification::BayesianProbitRegressor_FeatureWeight::Clear(CoreML::Specification::BayesianProbitRegressor_FeatureWeight *this)
{
  uint64_t result;

  result = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Clear<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight>::TypeHandler>((uint64_t)this + 16);
  *((_DWORD *)this + 10) = 0;
  return result;
}

uint64_t CoreML::Specification::BayesianProbitRegressor_FeatureWeight::MergePartialFromCodedStream(CoreML::Specification::BayesianProbitRegressor_FeatureWeight *this, char **a2, unsigned int a3)
{
  _tc_google::protobuf::internal::RepeatedPtrFieldBase *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int TagFallback;
  char *v11;
  int v12;
  CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight *v13;
  char *v14;
  int VarintSizeAsIntFallback;
  unint64_t v17;
  unsigned int v18;
  int v19;
  uint64_t result;
  uint64_t Varint32Fallback;

  v5 = (CoreML::Specification::BayesianProbitRegressor_FeatureWeight *)((char *)this + 16);
  while (1)
  {
    while (1)
    {
      while (1)
      {
        v6 = *a2;
        if (*a2 >= a2[1])
        {
          v7 = 0;
LABEL_7:
          TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v7);
          v8 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
          if ((v8 & 0x100000000) == 0)
            goto LABEL_21;
          goto LABEL_8;
        }
        v7 = *v6;
        if (*v6 < 1)
          goto LABEL_7;
        *a2 = v6 + 1;
        v8 = v7 | 0x100000000;
        if ((v8 & 0x100000000) == 0)
          goto LABEL_21;
LABEL_8:
        if (v8 >> 3 != 2)
          break;
        if (v8 != 18)
          goto LABEL_21;
        v13 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight>::TypeHandler>(v5);
        v14 = *a2;
        if (*a2 >= a2[1] || *v14 < 0)
        {
          VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
          if (VarintSizeAsIntFallback < 0)
            return 0;
        }
        else
        {
          VarintSizeAsIntFallback = *v14;
          *a2 = v14 + 1;
        }
        v17 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, VarintSizeAsIntFallback);
        if ((v17 & 0x8000000000000000) == 0)
        {
          v19 = v17;
          result = CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight::MergePartialFromCodedStream(v13, a2, v18);
          if (!(_DWORD)result)
            return result;
          if (_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v19))
          {
            continue;
          }
        }
        return 0;
      }
      if (v8 >> 3 != 1 || v8 != 8)
        break;
      v11 = *a2;
      if (*a2 >= a2[1])
      {
        v12 = 0;
        goto LABEL_33;
      }
      v12 = *v11;
      if (*v11 < 0)
      {
LABEL_33:
        Varint32Fallback = _tc_google::protobuf::io::CodedInputStream::ReadVarint32Fallback((_tc_google::protobuf::io::CodedInputStream *)a2, v12);
        *((_DWORD *)this + 10) = Varint32Fallback;
        if (Varint32Fallback < 0)
          return 0;
      }
      else
      {
        *((_DWORD *)this + 10) = v12;
        *a2 = v11 + 1;
      }
    }
LABEL_21:
    if (!(_DWORD)v8 || (v8 & 7) == 4)
      return 1;
    if ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v8, a3) & 1) == 0)return 0;
  }
}

uint64_t CoreML::Specification::BayesianProbitRegressor_FeatureWeight::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  unsigned int v6;
  int v7;
  int i;

  v5 = this;
  v6 = *(_DWORD *)(this + 40);
  if (v6)
    this = _tc_google::protobuf::internal::WireFormatLite::WriteUInt32(1, v6, a2, a4);
  v7 = *(_DWORD *)(v5 + 24);
  if (v7)
  {
    for (i = 0; i != v7; ++i)
      this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)2, *(_QWORD *)(*(_QWORD *)(v5 + 32) + 8 * i + 8), a2, a4);
  }
  return this;
}

uint64_t CoreML::Specification::BayesianProbitRegressor_FeatureWeight::ByteSizeLong(CoreML::Specification::BayesianProbitRegressor_FeatureWeight *this)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v2 = *((_DWORD *)this + 6);
  if (v2)
  {
    v3 = 0;
    v4 = *((unsigned int *)this + 6);
    do
    {
      v5 = CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight::ByteSizeLong(*(CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight **)(*((_QWORD *)this + 4) + 8 * v3 + 8));
      v4 += v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6);
      ++v3;
    }
    while (v2 != v3);
  }
  else
  {
    v4 = 0;
  }
  v6 = *((_DWORD *)this + 10);
  if (v6)
    v4 += ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6) + 1;
  *((_DWORD *)this + 11) = v4;
  return v4;
}

std::string *CoreML::Specification::BayesianProbitRegressor_FeatureWeight::MergeFrom(std::string *this, const CoreML::Specification::BayesianProbitRegressor_FeatureWeight *a2)
{
  std::string *v3;
  uint64_t v4;
  signed int v5;
  CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight **v6;
  unsigned int *v7;
  int v8;
  int *size;
  int v10;

  v3 = this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_DWORD *)a2 + 6);
  if (v5)
  {
    v6 = (CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight **)(*((_QWORD *)a2 + 4) + 8);
    v7 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((_tc_google::protobuf::internal::RepeatedPtrFieldBase *)&v3->__r_.__value_.__r.__words[2], *((_DWORD *)a2 + 6));
    this = _tc_google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight>::TypeHandler>((std::string *)&v3->__r_.__value_.__r.__words[2], (std::string **)v7, v6, v5, *(_DWORD *)v3[1].__r_.__value_.__l.__size_ - LODWORD(v3[1].__r_.__value_.__l.__data_));
    v8 = LODWORD(v3[1].__r_.__value_.__l.__data_) + v5;
    LODWORD(v3[1].__r_.__value_.__l.__data_) = v8;
    size = (int *)v3[1].__r_.__value_.__l.__size_;
    if (*size < v8)
      *size = v8;
  }
  v10 = *((_DWORD *)a2 + 10);
  if (v10)
    LODWORD(v3[1].__r_.__value_.__r.__words[2]) = v10;
  return this;
}

uint64_t CoreML::Specification::BayesianProbitRegressor_FeatureWeight::IsInitialized(CoreML::Specification::BayesianProbitRegressor_FeatureWeight *this)
{
  return 1;
}

_QWORD *CoreML::Specification::BayesianProbitRegressor_FeatureWeight::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.BayesianProbitRegressor.FeatureWeight");
}

CoreML::Specification::BayesianProbitRegressor *CoreML::Specification::BayesianProbitRegressor::BayesianProbitRegressor(CoreML::Specification::BayesianProbitRegressor *this)
{
  *(_QWORD *)this = &off_24D93DD18;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  if (this != (CoreML::Specification::BayesianProbitRegressor *)&CoreML::Specification::_BayesianProbitRegressor_default_instance_)
    CoreML::Specification::protobuf_BayesianProbitRegressor_2eproto::InitDefaults(this);
  *((_QWORD *)this + 5) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 6) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 7) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 8) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 9) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 10) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 11) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 12) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = 0;
  return this;
}

void sub_2183BFBBC(_Unwind_Exception *a1)
{
  uint64_t *v1;
  _QWORD *v2;

  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Destroy<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMRegressor_DoubleArray>::TypeHandler>(v2);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::BayesianProbitRegressor::~BayesianProbitRegressor(CoreML::Specification::BayesianProbitRegressor *this)
{
  *(_QWORD *)this = &off_24D93DD18;
  CoreML::Specification::BayesianProbitRegressor::SharedDtor((uint64_t *)this);
  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Destroy<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMRegressor_DoubleArray>::TypeHandler>((_QWORD *)this + 2);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  CoreML::Specification::BayesianProbitRegressor::~BayesianProbitRegressor(this);
  JUMPOUT(0x219A19A08);
}

uint64_t *CoreML::Specification::BayesianProbitRegressor::SharedDtor(uint64_t *this)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = this;
  v2 = this[5];
  if ((uint64_t *)v2 != &_tc_google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    this = (uint64_t *)MEMORY[0x219A19A08](v2, 0x1012C40EC159624);
  }
  v4 = v1[6];
  if ((uint64_t *)v4 != &_tc_google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0)
      operator delete(*(void **)v4);
    this = (uint64_t *)MEMORY[0x219A19A08](v4, 0x1012C40EC159624);
  }
  v6 = v1[7];
  if ((uint64_t *)v6 != &_tc_google::protobuf::internal::fixed_address_empty_string && v6 != 0)
  {
    if (*(char *)(v6 + 23) < 0)
      operator delete(*(void **)v6);
    this = (uint64_t *)MEMORY[0x219A19A08](v6, 0x1012C40EC159624);
  }
  v8 = v1[8];
  if ((uint64_t *)v8 != &_tc_google::protobuf::internal::fixed_address_empty_string && v8 != 0)
  {
    if (*(char *)(v8 + 23) < 0)
      operator delete(*(void **)v8);
    this = (uint64_t *)MEMORY[0x219A19A08](v8, 0x1012C40EC159624);
  }
  v10 = v1[9];
  if ((uint64_t *)v10 != &_tc_google::protobuf::internal::fixed_address_empty_string && v10)
  {
    if (*(char *)(v10 + 23) < 0)
      operator delete(*(void **)v10);
    this = (uint64_t *)MEMORY[0x219A19A08](v10, 0x1012C40EC159624);
  }
  v11 = v1[10];
  if ((uint64_t *)v11 != &_tc_google::protobuf::internal::fixed_address_empty_string && v11)
  {
    if (*(char *)(v11 + 23) < 0)
      operator delete(*(void **)v11);
    this = (uint64_t *)MEMORY[0x219A19A08](v11, 0x1012C40EC159624);
  }
  v12 = v1[11];
  if ((uint64_t *)v12 != &_tc_google::protobuf::internal::fixed_address_empty_string && v12)
  {
    if (*(char *)(v12 + 23) < 0)
      operator delete(*(void **)v12);
    this = (uint64_t *)MEMORY[0x219A19A08](v12, 0x1012C40EC159624);
  }
  v13 = v1[12];
  if ((uint64_t *)v13 != &_tc_google::protobuf::internal::fixed_address_empty_string && v13)
  {
    if (*(char *)(v13 + 23) < 0)
      operator delete(*(void **)v13);
    this = (uint64_t *)MEMORY[0x219A19A08](v13, 0x1012C40EC159624);
  }
  if (v1 != &CoreML::Specification::_BayesianProbitRegressor_default_instance_)
  {
    this = (uint64_t *)v1[13];
    if (this)
      return (uint64_t *)(*(uint64_t (**)(uint64_t *))(*this + 8))(this);
  }
  return this;
}

uint64_t *CoreML::Specification::BayesianProbitRegressor::default_instance(CoreML::Specification::BayesianProbitRegressor *this)
{
  CoreML::Specification::protobuf_BayesianProbitRegressor_2eproto::InitDefaults(this);
  return &CoreML::Specification::_BayesianProbitRegressor_default_instance_;
}

CoreML::Specification::BayesianProbitRegressor *CoreML::Specification::BayesianProbitRegressor::New(CoreML::Specification::BayesianProbitRegressor *this, _tc_google::protobuf::Arena *a2)
{
  CoreML::Specification::BayesianProbitRegressor *v3;

  v3 = (CoreML::Specification::BayesianProbitRegressor *)operator new();
  CoreML::Specification::BayesianProbitRegressor::BayesianProbitRegressor(v3);
  if (a2)
    _tc_google::protobuf::Arena::Own<CoreML::Specification::BayesianProbitRegressor>(a2, v3);
  return v3;
}

void sub_2183BFED8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C4092A090F6);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::BayesianProbitRegressor>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::BayesianProbitRegressor>);
  return result;
}

uint64_t CoreML::Specification::BayesianProbitRegressor::Clear(CoreML::Specification::BayesianProbitRegressor *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Clear<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::BayesianProbitRegressor_FeatureWeight>::TypeHandler>((uint64_t)this + 16);
  v2 = *((_QWORD *)this + 5);
  if ((uint64_t *)v2 != &_tc_google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(_BYTE **)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 23) = 0;
    }
  }
  v3 = *((_QWORD *)this + 6);
  if ((uint64_t *)v3 != &_tc_google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v3 + 23) < 0)
    {
      **(_BYTE **)v3 = 0;
      *(_QWORD *)(v3 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v3 = 0;
      *(_BYTE *)(v3 + 23) = 0;
    }
  }
  v4 = *((_QWORD *)this + 7);
  if ((uint64_t *)v4 != &_tc_google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v4 + 23) < 0)
    {
      **(_BYTE **)v4 = 0;
      *(_QWORD *)(v4 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v4 = 0;
      *(_BYTE *)(v4 + 23) = 0;
    }
  }
  v5 = *((_QWORD *)this + 8);
  if ((uint64_t *)v5 != &_tc_google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v5 + 23) < 0)
    {
      **(_BYTE **)v5 = 0;
      *(_QWORD *)(v5 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v5 = 0;
      *(_BYTE *)(v5 + 23) = 0;
    }
  }
  v6 = *((_QWORD *)this + 9);
  if ((uint64_t *)v6 != &_tc_google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v6 + 23) < 0)
    {
      **(_BYTE **)v6 = 0;
      *(_QWORD *)(v6 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v6 = 0;
      *(_BYTE *)(v6 + 23) = 0;
    }
  }
  v7 = *((_QWORD *)this + 10);
  if ((uint64_t *)v7 != &_tc_google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v7 + 23) < 0)
    {
      **(_BYTE **)v7 = 0;
      *(_QWORD *)(v7 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v7 = 0;
      *(_BYTE *)(v7 + 23) = 0;
    }
  }
  v8 = *((_QWORD *)this + 11);
  if ((uint64_t *)v8 != &_tc_google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v8 + 23) < 0)
    {
      **(_BYTE **)v8 = 0;
      *(_QWORD *)(v8 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v8 = 0;
      *(_BYTE *)(v8 + 23) = 0;
    }
  }
  v9 = *((_QWORD *)this + 12);
  if ((uint64_t *)v9 != &_tc_google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v9 + 23) < 0)
    {
      **(_BYTE **)v9 = 0;
      *(_QWORD *)(v9 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v9 = 0;
      *(_BYTE *)(v9 + 23) = 0;
    }
  }
  result = *((_QWORD *)this + 13);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 13) = 0;
  *((_DWORD *)this + 28) = 0;
  return result;
}

uint64_t CoreML::Specification::BayesianProbitRegressor::MergePartialFromCodedStream(CoreML::Specification::BayesianProbitRegressor *this, _tc_google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  std::string **v5;
  std::string **v6;
  std::string **v7;
  std::string **v8;
  unsigned __int8 *v9;
  unint64_t v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  unsigned int TagFallback;
  char *v17;
  int v18;
  CoreML::Specification::BayesianProbitRegressor_Gaussian *v19;
  char *v20;
  int VarintSizeAsIntFallback;
  CoreML::Specification::BayesianProbitRegressor_FeatureWeight *v22;
  char *v23;
  int v24;
  std::string *v25;
  uint64_t result;
  std::string *v27;
  const char *size;
  std::string *v29;
  std::string *v30;
  std::string *v31;
  std::string *v32;
  std::string *v33;
  std::string *v34;
  std::string *v35;
  unint64_t v36;
  unsigned int v37;
  int v38;
  unint64_t v39;
  unsigned int v40;
  const char *v41;
  uint64_t Varint32Fallback;
  _tc_google::protobuf::internal::RepeatedPtrFieldBase *v43;
  std::string **v44;
  std::string **v45;
  std::string **v46;
  std::string **v47;

  v46 = (std::string **)((char *)this + 88);
  v47 = (std::string **)((char *)this + 96);
  v44 = (std::string **)((char *)this + 72);
  v45 = (std::string **)((char *)this + 80);
  v5 = (std::string **)((char *)this + 64);
  v6 = (std::string **)((char *)this + 56);
  v7 = (std::string **)((char *)this + 48);
  v8 = (std::string **)((char *)this + 40);
  v43 = (CoreML::Specification::BayesianProbitRegressor *)((char *)this + 16);
  while (1)
  {
    while (1)
    {
      v9 = *(unsigned __int8 **)a2;
      v10 = *((_QWORD *)a2 + 1);
      if (*(_QWORD *)a2 >= v10)
      {
        v12 = 0;
        goto LABEL_16;
      }
      v11 = v9 + 1;
      v12 = *v9;
      if ((char)*v9 >= 1)
        break;
      if ((unint64_t)v11 < v10)
      {
        v14 = *v11;
        if ((v12 & ~v14) >= 0x80)
        {
          *(_QWORD *)a2 = v9 + 2;
          v13 = (v12 + (v14 << 7) - 128) | 0x100000000;
          goto LABEL_17;
        }
      }
LABEL_16:
      TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v12);
      v13 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x3FFF) << 32);
      if ((v13 & 0x100000000) == 0)
        goto LABEL_9;
LABEL_17:
      switch(v13 >> 3)
      {
        case 1u:
          if (v13 != 8)
            goto LABEL_9;
          v17 = *(char **)a2;
          if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1))
          {
            v18 = 0;
          }
          else
          {
            v18 = *v17;
            if ((*v17 & 0x80000000) == 0)
            {
              *((_DWORD *)this + 28) = v18;
              *(_QWORD *)a2 = v17 + 1;
              continue;
            }
          }
          Varint32Fallback = _tc_google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v18);
          *((_DWORD *)this + 28) = Varint32Fallback;
          if (Varint32Fallback < 0)
            return 0;
          break;
        case 2u:
          if (v13 != 18)
            goto LABEL_9;
          v19 = (CoreML::Specification::BayesianProbitRegressor_Gaussian *)*((_QWORD *)this + 13);
          if (!v19)
          {
            v19 = (CoreML::Specification::BayesianProbitRegressor_Gaussian *)operator new();
            CoreML::Specification::BayesianProbitRegressor_Gaussian::BayesianProbitRegressor_Gaussian(v19);
            *((_QWORD *)this + 13) = v19;
          }
          v20 = *(char **)a2;
          if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v20 < 0)
          {
            VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
            if (VarintSizeAsIntFallback < 0)
              return 0;
          }
          else
          {
            VarintSizeAsIntFallback = *v20;
            *(_QWORD *)a2 = v20 + 1;
          }
          v39 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, VarintSizeAsIntFallback);
          if ((v39 & 0x8000000000000000) != 0)
            return 0;
          v38 = v39;
          result = CoreML::Specification::BayesianProbitRegressor_Gaussian::MergePartialFromCodedStream(v19, (char **)a2, v40);
          if (!(_DWORD)result)
            return result;
LABEL_87:
          if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v38))
            return 0;
          continue;
        case 3u:
          if (v13 != 26)
            goto LABEL_9;
          v22 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::BayesianProbitRegressor_FeatureWeight>::TypeHandler>(v43);
          v23 = *(char **)a2;
          if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v23 < 0)
          {
            v24 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
            if (v24 < 0)
              return 0;
          }
          else
          {
            v24 = *v23;
            *(_QWORD *)a2 = v23 + 1;
          }
          v36 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v24);
          if ((v36 & 0x8000000000000000) != 0)
            return 0;
          v38 = v36;
          result = CoreML::Specification::BayesianProbitRegressor_FeatureWeight::MergePartialFromCodedStream(v22, (char **)a2, v37);
          if (!(_DWORD)result)
            return result;
          goto LABEL_87;
        case 0xAu:
          if (v13 != 82)
            goto LABEL_9;
          v25 = *v8;
          if (*v8 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string)
          {
            _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v8, (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string);
            v25 = *v8;
          }
          result = _tc_google::protobuf::internal::WireFormatLite::ReadBytes((char **)a2, v25);
          if (!(_DWORD)result)
            return result;
          v27 = *v8;
          if (SHIBYTE((*v8)->__r_.__value_.__r.__words[2]) < 0)
          {
            v27 = (std::string *)v27->__r_.__value_.__r.__words[0];
            size = (const char *)(*v8)->__r_.__value_.__l.__size_;
          }
          else
          {
            size = (const char *)HIBYTE((*v8)->__r_.__value_.__r.__words[2]);
          }
          v41 = "CoreML.Specification.BayesianProbitRegressor.regressionInputFeatureName";
          goto LABEL_105;
        case 0xBu:
          if (v13 != 90)
            goto LABEL_9;
          v29 = *v7;
          if (*v7 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string)
          {
            _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v7, (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string);
            v29 = *v7;
          }
          result = _tc_google::protobuf::internal::WireFormatLite::ReadBytes((char **)a2, v29);
          if (!(_DWORD)result)
            return result;
          v27 = *v7;
          if (SHIBYTE((*v7)->__r_.__value_.__r.__words[2]) < 0)
          {
            v27 = (std::string *)v27->__r_.__value_.__r.__words[0];
            size = (const char *)(*v7)->__r_.__value_.__l.__size_;
          }
          else
          {
            size = (const char *)HIBYTE((*v7)->__r_.__value_.__r.__words[2]);
          }
          v41 = "CoreML.Specification.BayesianProbitRegressor.optimismInputFeatureName";
          goto LABEL_105;
        case 0xCu:
          if (v13 != 98)
            goto LABEL_9;
          v30 = *v6;
          if (*v6 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string)
          {
            _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v6, (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string);
            v30 = *v6;
          }
          result = _tc_google::protobuf::internal::WireFormatLite::ReadBytes((char **)a2, v30);
          if (!(_DWORD)result)
            return result;
          v27 = *v6;
          if (SHIBYTE((*v6)->__r_.__value_.__r.__words[2]) < 0)
          {
            v27 = (std::string *)v27->__r_.__value_.__r.__words[0];
            size = (const char *)(*v6)->__r_.__value_.__l.__size_;
          }
          else
          {
            size = (const char *)HIBYTE((*v6)->__r_.__value_.__r.__words[2]);
          }
          v41 = "CoreML.Specification.BayesianProbitRegressor.samplingScaleInputFeatureName";
          goto LABEL_105;
        case 0xDu:
          if (v13 != 106)
            goto LABEL_9;
          v31 = *v5;
          if (*v5 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string)
          {
            _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v5, (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string);
            v31 = *v5;
          }
          result = _tc_google::protobuf::internal::WireFormatLite::ReadBytes((char **)a2, v31);
          if (!(_DWORD)result)
            return result;
          v27 = *v5;
          if (SHIBYTE((*v5)->__r_.__value_.__r.__words[2]) < 0)
          {
            v27 = (std::string *)v27->__r_.__value_.__r.__words[0];
            size = (const char *)(*v5)->__r_.__value_.__l.__size_;
          }
          else
          {
            size = (const char *)HIBYTE((*v5)->__r_.__value_.__r.__words[2]);
          }
          v41 = "CoreML.Specification.BayesianProbitRegressor.samplingTruncationInputFeatureName";
          goto LABEL_105;
        case 0x14u:
          if (v13 != 162)
            goto LABEL_9;
          v32 = *v44;
          if (*v44 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string)
          {
            _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v44, (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string);
            v32 = *v44;
          }
          result = _tc_google::protobuf::internal::WireFormatLite::ReadBytes((char **)a2, v32);
          if (!(_DWORD)result)
            return result;
          v27 = *v44;
          if (SHIBYTE((*v44)->__r_.__value_.__r.__words[2]) < 0)
          {
            v27 = (std::string *)v27->__r_.__value_.__r.__words[0];
            size = (const char *)(*v44)->__r_.__value_.__l.__size_;
          }
          else
          {
            size = (const char *)HIBYTE((*v44)->__r_.__value_.__r.__words[2]);
          }
          v41 = "CoreML.Specification.BayesianProbitRegressor.meanOutputFeatureName";
          goto LABEL_105;
        case 0x15u:
          if (v13 != 170)
            goto LABEL_9;
          v33 = *v45;
          if (*v45 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string)
          {
            _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v45, (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string);
            v33 = *v45;
          }
          result = _tc_google::protobuf::internal::WireFormatLite::ReadBytes((char **)a2, v33);
          if (!(_DWORD)result)
            return result;
          v27 = *v45;
          if (SHIBYTE((*v45)->__r_.__value_.__r.__words[2]) < 0)
          {
            v27 = (std::string *)v27->__r_.__value_.__r.__words[0];
            size = (const char *)(*v45)->__r_.__value_.__l.__size_;
          }
          else
          {
            size = (const char *)HIBYTE((*v45)->__r_.__value_.__r.__words[2]);
          }
          v41 = "CoreML.Specification.BayesianProbitRegressor.varianceOutputFeatureName";
          goto LABEL_105;
        case 0x16u:
          if (v13 != 178)
            goto LABEL_9;
          v34 = *v46;
          if (*v46 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string)
          {
            _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v46, (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string);
            v34 = *v46;
          }
          result = _tc_google::protobuf::internal::WireFormatLite::ReadBytes((char **)a2, v34);
          if (!(_DWORD)result)
            return result;
          v27 = *v46;
          if (SHIBYTE((*v46)->__r_.__value_.__r.__words[2]) < 0)
          {
            v27 = (std::string *)v27->__r_.__value_.__r.__words[0];
            size = (const char *)(*v46)->__r_.__value_.__l.__size_;
          }
          else
          {
            size = (const char *)HIBYTE((*v46)->__r_.__value_.__r.__words[2]);
          }
          v41 = "CoreML.Specification.BayesianProbitRegressor.pessimisticProbabilityOutputFeatureName";
          goto LABEL_105;
        case 0x17u:
          if (v13 != 186)
            goto LABEL_9;
          v35 = *v47;
          if (*v47 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string)
          {
            _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v47, (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string);
            v35 = *v47;
          }
          result = _tc_google::protobuf::internal::WireFormatLite::ReadBytes((char **)a2, v35);
          if (!(_DWORD)result)
            return result;
          v27 = *v47;
          if (SHIBYTE((*v47)->__r_.__value_.__r.__words[2]) < 0)
          {
            v27 = (std::string *)v27->__r_.__value_.__r.__words[0];
            size = (const char *)(*v47)->__r_.__value_.__l.__size_;
          }
          else
          {
            size = (const char *)HIBYTE((*v47)->__r_.__value_.__r.__words[2]);
          }
          v41 = "CoreML.Specification.BayesianProbitRegressor.sampledProbabilityOutputFeatureName";
LABEL_105:
          if (!_tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String((_tc_google::protobuf::internal *)v27, size, 0, (uint64_t)v41))return 0;
          continue;
        default:
          goto LABEL_9;
      }
    }
    *(_QWORD *)a2 = v11;
    v13 = v12 | 0x100000000;
    if ((v13 & 0x100000000) != 0)
      goto LABEL_17;
LABEL_9:
    if (!(_DWORD)v13 || (v13 & 7) == 4)
      return 1;
    if ((_tc_google::protobuf::internal::WireFormatLite::SkipField(a2, (_tc_google::protobuf::io::CodedInputStream *)v13, a3) & 1) == 0)return 0;
  }
}

void sub_2183C0688(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40B7564605);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::BayesianProbitRegressor::SerializeWithCachedSizes(CoreML::Specification::BayesianProbitRegressor *this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  unsigned int v6;
  uint64_t v7;
  int v8;
  int i;
  _tc_google::protobuf::internal *v10;
  const char *v11;
  _tc_google::protobuf::internal *v12;
  const char *v13;
  _tc_google::protobuf::internal *v14;
  const char *v15;
  _tc_google::protobuf::internal *v16;
  const char *v17;
  _tc_google::protobuf::internal *v18;
  const char *v19;
  _tc_google::protobuf::internal *v20;
  const char *v21;
  _tc_google::protobuf::internal *v22;
  const char *v23;
  uint64_t result;
  const char *v25;

  v6 = *((_DWORD *)this + 28);
  if (v6)
    _tc_google::protobuf::internal::WireFormatLite::WriteUInt32(1, v6, a2, a4);
  if (this != (CoreML::Specification::BayesianProbitRegressor *)&CoreML::Specification::_BayesianProbitRegressor_default_instance_)
  {
    v7 = *((_QWORD *)this + 13);
    if (v7)
      _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)2, v7, a2, a4);
  }
  v8 = *((_DWORD *)this + 6);
  if (v8)
  {
    for (i = 0; i != v8; ++i)
      _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)3, *(_QWORD *)(*((_QWORD *)this + 4) + 8 * i + 8), a2, a4);
  }
  v10 = (_tc_google::protobuf::internal *)*((_QWORD *)this + 5);
  if (*((char *)v10 + 23) < 0)
  {
    v11 = (const char *)*((_QWORD *)v10 + 1);
    if (!v11)
      goto LABEL_15;
    v10 = *(_tc_google::protobuf::internal **)v10;
    goto LABEL_14;
  }
  v11 = (const char *)*((unsigned __int8 *)v10 + 23);
  if (*((_BYTE *)v10 + 23))
  {
LABEL_14:
    _tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String(v10, v11, 1, (uint64_t)"CoreML.Specification.BayesianProbitRegressor.regressionInputFeatureName");
    _tc_google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(10, *((_QWORD *)this + 5), a2);
  }
LABEL_15:
  v12 = (_tc_google::protobuf::internal *)*((_QWORD *)this + 6);
  if (*((char *)v12 + 23) < 0)
  {
    v13 = (const char *)*((_QWORD *)v12 + 1);
    if (!v13)
      goto LABEL_21;
    v12 = *(_tc_google::protobuf::internal **)v12;
    goto LABEL_20;
  }
  v13 = (const char *)*((unsigned __int8 *)v12 + 23);
  if (*((_BYTE *)v12 + 23))
  {
LABEL_20:
    _tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String(v12, v13, 1, (uint64_t)"CoreML.Specification.BayesianProbitRegressor.optimismInputFeatureName");
    _tc_google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(11, *((_QWORD *)this + 6), a2);
  }
LABEL_21:
  v14 = (_tc_google::protobuf::internal *)*((_QWORD *)this + 7);
  if (*((char *)v14 + 23) < 0)
  {
    v15 = (const char *)*((_QWORD *)v14 + 1);
    if (!v15)
      goto LABEL_27;
    v14 = *(_tc_google::protobuf::internal **)v14;
    goto LABEL_26;
  }
  v15 = (const char *)*((unsigned __int8 *)v14 + 23);
  if (*((_BYTE *)v14 + 23))
  {
LABEL_26:
    _tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String(v14, v15, 1, (uint64_t)"CoreML.Specification.BayesianProbitRegressor.samplingScaleInputFeatureName");
    _tc_google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(12, *((_QWORD *)this + 7), a2);
  }
LABEL_27:
  v16 = (_tc_google::protobuf::internal *)*((_QWORD *)this + 8);
  if (*((char *)v16 + 23) < 0)
  {
    v17 = (const char *)*((_QWORD *)v16 + 1);
    if (!v17)
      goto LABEL_33;
    v16 = *(_tc_google::protobuf::internal **)v16;
    goto LABEL_32;
  }
  v17 = (const char *)*((unsigned __int8 *)v16 + 23);
  if (*((_BYTE *)v16 + 23))
  {
LABEL_32:
    _tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String(v16, v17, 1, (uint64_t)"CoreML.Specification.BayesianProbitRegressor.samplingTruncationInputFeatureName");
    _tc_google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(13, *((_QWORD *)this + 8), a2);
  }
LABEL_33:
  v18 = (_tc_google::protobuf::internal *)*((_QWORD *)this + 9);
  if (*((char *)v18 + 23) < 0)
  {
    v19 = (const char *)*((_QWORD *)v18 + 1);
    if (!v19)
      goto LABEL_39;
    v18 = *(_tc_google::protobuf::internal **)v18;
    goto LABEL_38;
  }
  v19 = (const char *)*((unsigned __int8 *)v18 + 23);
  if (*((_BYTE *)v18 + 23))
  {
LABEL_38:
    _tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String(v18, v19, 1, (uint64_t)"CoreML.Specification.BayesianProbitRegressor.meanOutputFeatureName");
    _tc_google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(20, *((_QWORD *)this + 9), a2);
  }
LABEL_39:
  v20 = (_tc_google::protobuf::internal *)*((_QWORD *)this + 10);
  if (*((char *)v20 + 23) < 0)
  {
    v21 = (const char *)*((_QWORD *)v20 + 1);
    if (!v21)
      goto LABEL_45;
    v20 = *(_tc_google::protobuf::internal **)v20;
    goto LABEL_44;
  }
  v21 = (const char *)*((unsigned __int8 *)v20 + 23);
  if (*((_BYTE *)v20 + 23))
  {
LABEL_44:
    _tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String(v20, v21, 1, (uint64_t)"CoreML.Specification.BayesianProbitRegressor.varianceOutputFeatureName");
    _tc_google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(21, *((_QWORD *)this + 10), a2);
  }
LABEL_45:
  v22 = (_tc_google::protobuf::internal *)*((_QWORD *)this + 11);
  if (*((char *)v22 + 23) < 0)
  {
    v23 = (const char *)*((_QWORD *)v22 + 1);
    if (!v23)
      goto LABEL_51;
    v22 = *(_tc_google::protobuf::internal **)v22;
    goto LABEL_50;
  }
  v23 = (const char *)*((unsigned __int8 *)v22 + 23);
  if (*((_BYTE *)v22 + 23))
  {
LABEL_50:
    _tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String(v22, v23, 1, (uint64_t)"CoreML.Specification.BayesianProbitRegressor.pessimisticProbabilityOutputFeatureName");
    _tc_google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(22, *((_QWORD *)this + 11), a2);
  }
LABEL_51:
  result = *((_QWORD *)this + 12);
  if (*(char *)(result + 23) < 0)
  {
    v25 = *(const char **)(result + 8);
    if (!v25)
      return result;
    result = *(_QWORD *)result;
    goto LABEL_56;
  }
  v25 = (const char *)*(unsigned __int8 *)(result + 23);
  if (*(_BYTE *)(result + 23))
  {
LABEL_56:
    _tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String((_tc_google::protobuf::internal *)result, v25, 1, (uint64_t)"CoreML.Specification.BayesianProbitRegressor.sampledProbabilityOutputFeatureName");
    return _tc_google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(23, *((_QWORD *)this + 12), a2);
  }
  return result;
}

uint64_t CoreML::Specification::BayesianProbitRegressor::ByteSizeLong(CoreML::Specification::BayesianProbitRegressor *this)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;

  v2 = *((_DWORD *)this + 6);
  if (v2)
  {
    v3 = 0;
    v4 = *((unsigned int *)this + 6);
    do
    {
      v5 = CoreML::Specification::BayesianProbitRegressor_FeatureWeight::ByteSizeLong(*(CoreML::Specification::BayesianProbitRegressor_FeatureWeight **)(*((_QWORD *)this + 4) + 8 * v3 + 8));
      v4 += v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6);
      ++v3;
    }
    while (v2 != v3);
  }
  else
  {
    v4 = 0;
  }
  v6 = *((_QWORD *)this + 5);
  v7 = *(unsigned __int8 *)(v6 + 23);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(_QWORD *)(v6 + 8))
      goto LABEL_11;
  }
  else if (!*(_BYTE *)(v6 + 23))
  {
    goto LABEL_11;
  }
  v8 = *(_QWORD *)(v6 + 8);
  if ((v7 & 0x80u) == 0)
    v8 = v7;
  v4 += v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_11:
  v9 = *((_QWORD *)this + 6);
  v10 = *(unsigned __int8 *)(v9 + 23);
  if (*(char *)(v9 + 23) < 0)
  {
    if (!*(_QWORD *)(v9 + 8))
      goto LABEL_16;
  }
  else if (!*(_BYTE *)(v9 + 23))
  {
    goto LABEL_16;
  }
  v11 = *(_QWORD *)(v9 + 8);
  if ((v10 & 0x80u) == 0)
    v11 = v10;
  v4 += v11 + ((9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_16:
  v12 = *((_QWORD *)this + 7);
  v13 = *(unsigned __int8 *)(v12 + 23);
  if (*(char *)(v12 + 23) < 0)
  {
    if (!*(_QWORD *)(v12 + 8))
      goto LABEL_21;
  }
  else if (!*(_BYTE *)(v12 + 23))
  {
    goto LABEL_21;
  }
  v14 = *(_QWORD *)(v12 + 8);
  if ((v13 & 0x80u) == 0)
    v14 = v13;
  v4 += v14 + ((9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_21:
  v15 = *((_QWORD *)this + 8);
  v16 = *(unsigned __int8 *)(v15 + 23);
  if (*(char *)(v15 + 23) < 0)
  {
    if (!*(_QWORD *)(v15 + 8))
      goto LABEL_26;
  }
  else if (!*(_BYTE *)(v15 + 23))
  {
    goto LABEL_26;
  }
  v17 = *(_QWORD *)(v15 + 8);
  if ((v16 & 0x80u) == 0)
    v17 = v16;
  v4 += v17 + ((9 * (__clz(v17 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_26:
  v18 = *((_QWORD *)this + 9);
  v19 = *(unsigned __int8 *)(v18 + 23);
  if (*(char *)(v18 + 23) < 0)
  {
    if (!*(_QWORD *)(v18 + 8))
      goto LABEL_31;
  }
  else if (!*(_BYTE *)(v18 + 23))
  {
    goto LABEL_31;
  }
  v20 = *(_QWORD *)(v18 + 8);
  if ((v19 & 0x80u) == 0)
    v20 = v19;
  v4 += v20 + ((9 * (__clz(v20 | 1) ^ 0x1F) + 73) >> 6) + 2;
LABEL_31:
  v21 = *((_QWORD *)this + 10);
  v22 = *(unsigned __int8 *)(v21 + 23);
  if (*(char *)(v21 + 23) < 0)
  {
    if (!*(_QWORD *)(v21 + 8))
      goto LABEL_36;
  }
  else if (!*(_BYTE *)(v21 + 23))
  {
    goto LABEL_36;
  }
  v23 = *(_QWORD *)(v21 + 8);
  if ((v22 & 0x80u) == 0)
    v23 = v22;
  v4 += v23 + ((9 * (__clz(v23 | 1) ^ 0x1F) + 73) >> 6) + 2;
LABEL_36:
  v24 = *((_QWORD *)this + 11);
  v25 = *(unsigned __int8 *)(v24 + 23);
  if (*(char *)(v24 + 23) < 0)
  {
    if (!*(_QWORD *)(v24 + 8))
      goto LABEL_41;
  }
  else if (!*(_BYTE *)(v24 + 23))
  {
    goto LABEL_41;
  }
  v26 = *(_QWORD *)(v24 + 8);
  if ((v25 & 0x80u) == 0)
    v26 = v25;
  v4 += v26 + ((9 * (__clz(v26 | 1) ^ 0x1F) + 73) >> 6) + 2;
LABEL_41:
  v27 = *((_QWORD *)this + 12);
  v28 = *(unsigned __int8 *)(v27 + 23);
  if (*(char *)(v27 + 23) < 0)
  {
    if (!*(_QWORD *)(v27 + 8))
      goto LABEL_46;
  }
  else if (!*(_BYTE *)(v27 + 23))
  {
    goto LABEL_46;
  }
  v29 = *(_QWORD *)(v27 + 8);
  if ((v28 & 0x80u) == 0)
    v29 = v28;
  v4 += v29 + ((9 * (__clz(v29 | 1) ^ 0x1F) + 73) >> 6) + 2;
LABEL_46:
  if (this != (CoreML::Specification::BayesianProbitRegressor *)&CoreML::Specification::_BayesianProbitRegressor_default_instance_)
  {
    v30 = *((_QWORD *)this + 13);
    if (v30)
    {
      v31 = 9;
      if (*(double *)(v30 + 16) == 0.0)
        v31 = 0;
      if (*(double *)(v30 + 24) != 0.0)
        v31 += 9;
      *(_DWORD *)(v30 + 32) = v31;
      v4 += v31 + ((9 * (__clz(v31 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
  }
  v32 = *((_DWORD *)this + 28);
  if (v32)
    v4 += ((9 * (__clz(v32 | 1) ^ 0x1F) + 73) >> 6) + 1;
  *((_DWORD *)this + 29) = v4;
  return v4;
}

void CoreML::Specification::BayesianProbitRegressor::MergeFrom(CoreML::Specification::BayesianProbitRegressor *this, const CoreML::Specification::BayesianProbitRegressor *a2)
{
  uint64_t v4;
  signed int v5;
  CoreML::Specification::BayesianProbitRegressor_FeatureWeight **v6;
  unsigned int *v7;
  int v8;
  int *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  const CoreML::Specification::SigmoidKernel *v26;
  CoreML::Specification::BayesianProbitRegressor_Gaussian *v27;
  const CoreML::Specification::SigmoidKernel *v28;
  int v29;

  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_DWORD *)a2 + 6);
  if (v5)
  {
    v6 = (CoreML::Specification::BayesianProbitRegressor_FeatureWeight **)(*((_QWORD *)a2 + 4) + 8);
    v7 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((CoreML::Specification::BayesianProbitRegressor *)((char *)this + 16), *((_DWORD *)a2 + 6));
    _tc_google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::BayesianProbitRegressor_FeatureWeight>::TypeHandler>((std::string *)((char *)this + 16), (std::string **)v7, v6, v5, **((_DWORD **)this + 4) - *((_DWORD *)this + 6));
    v8 = *((_DWORD *)this + 6) + v5;
    *((_DWORD *)this + 6) = v8;
    v9 = (int *)*((_QWORD *)this + 4);
    if (*v9 < v8)
      *v9 = v8;
  }
  v10 = *((_QWORD *)a2 + 5);
  if (*(char *)(v10 + 23) < 0)
  {
    if (!*(_QWORD *)(v10 + 8))
      goto LABEL_14;
  }
  else if (!*(_BYTE *)(v10 + 23))
  {
    goto LABEL_14;
  }
  v11 = (uint64_t *)*((_QWORD *)this + 5);
  if (v11 != (uint64_t *)v10)
  {
    if (v11 == &_tc_google::protobuf::internal::fixed_address_empty_string)
      _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 5, v10);
    else
      std::string::operator=(*((std::string **)this + 5), (const std::string *)v10);
  }
LABEL_14:
  v12 = *((_QWORD *)a2 + 6);
  if (*(char *)(v12 + 23) < 0)
  {
    if (!*(_QWORD *)(v12 + 8))
      goto LABEL_22;
  }
  else if (!*(_BYTE *)(v12 + 23))
  {
    goto LABEL_22;
  }
  v13 = (uint64_t *)*((_QWORD *)this + 6);
  if (v13 != (uint64_t *)v12)
  {
    if (v13 == &_tc_google::protobuf::internal::fixed_address_empty_string)
      _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 6, v12);
    else
      std::string::operator=(*((std::string **)this + 6), (const std::string *)v12);
  }
LABEL_22:
  v14 = *((_QWORD *)a2 + 7);
  if (*(char *)(v14 + 23) < 0)
  {
    if (!*(_QWORD *)(v14 + 8))
      goto LABEL_30;
  }
  else if (!*(_BYTE *)(v14 + 23))
  {
    goto LABEL_30;
  }
  v15 = (uint64_t *)*((_QWORD *)this + 7);
  if (v15 != (uint64_t *)v14)
  {
    if (v15 == &_tc_google::protobuf::internal::fixed_address_empty_string)
      _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 7, v14);
    else
      std::string::operator=(*((std::string **)this + 7), (const std::string *)v14);
  }
LABEL_30:
  v16 = *((_QWORD *)a2 + 8);
  if (*(char *)(v16 + 23) < 0)
  {
    if (!*(_QWORD *)(v16 + 8))
      goto LABEL_38;
  }
  else if (!*(_BYTE *)(v16 + 23))
  {
    goto LABEL_38;
  }
  v17 = (uint64_t *)*((_QWORD *)this + 8);
  if (v17 != (uint64_t *)v16)
  {
    if (v17 == &_tc_google::protobuf::internal::fixed_address_empty_string)
      _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 8, v16);
    else
      std::string::operator=(*((std::string **)this + 8), (const std::string *)v16);
  }
LABEL_38:
  v18 = *((_QWORD *)a2 + 9);
  if (*(char *)(v18 + 23) < 0)
  {
    if (!*(_QWORD *)(v18 + 8))
      goto LABEL_46;
  }
  else if (!*(_BYTE *)(v18 + 23))
  {
    goto LABEL_46;
  }
  v19 = (uint64_t *)*((_QWORD *)this + 9);
  if (v19 != (uint64_t *)v18)
  {
    if (v19 == &_tc_google::protobuf::internal::fixed_address_empty_string)
      _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 9, v18);
    else
      std::string::operator=(*((std::string **)this + 9), (const std::string *)v18);
  }
LABEL_46:
  v20 = *((_QWORD *)a2 + 10);
  if (*(char *)(v20 + 23) < 0)
  {
    if (!*(_QWORD *)(v20 + 8))
      goto LABEL_54;
  }
  else if (!*(_BYTE *)(v20 + 23))
  {
    goto LABEL_54;
  }
  v21 = (uint64_t *)*((_QWORD *)this + 10);
  if (v21 != (uint64_t *)v20)
  {
    if (v21 == &_tc_google::protobuf::internal::fixed_address_empty_string)
      _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 10, v20);
    else
      std::string::operator=(*((std::string **)this + 10), (const std::string *)v20);
  }
LABEL_54:
  v22 = *((_QWORD *)a2 + 11);
  if (*(char *)(v22 + 23) < 0)
  {
    if (!*(_QWORD *)(v22 + 8))
      goto LABEL_62;
  }
  else if (!*(_BYTE *)(v22 + 23))
  {
    goto LABEL_62;
  }
  v23 = (uint64_t *)*((_QWORD *)this + 11);
  if (v23 != (uint64_t *)v22)
  {
    if (v23 == &_tc_google::protobuf::internal::fixed_address_empty_string)
      _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 11, v22);
    else
      std::string::operator=(*((std::string **)this + 11), (const std::string *)v22);
  }
LABEL_62:
  v24 = *((_QWORD *)a2 + 12);
  if (*(char *)(v24 + 23) < 0)
  {
    if (!*(_QWORD *)(v24 + 8))
      goto LABEL_70;
  }
  else if (!*(_BYTE *)(v24 + 23))
  {
    goto LABEL_70;
  }
  v25 = (uint64_t *)*((_QWORD *)this + 12);
  if (v25 != (uint64_t *)v24)
  {
    if (v25 == &_tc_google::protobuf::internal::fixed_address_empty_string)
      _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 12, v24);
    else
      std::string::operator=(*((std::string **)this + 12), (const std::string *)v24);
  }
LABEL_70:
  if (a2 != (const CoreML::Specification::BayesianProbitRegressor *)&CoreML::Specification::_BayesianProbitRegressor_default_instance_)
  {
    v26 = (const CoreML::Specification::SigmoidKernel *)*((_QWORD *)a2 + 13);
    if (v26)
    {
      v27 = (CoreML::Specification::BayesianProbitRegressor_Gaussian *)*((_QWORD *)this + 13);
      if (!v27)
      {
        v27 = (CoreML::Specification::BayesianProbitRegressor_Gaussian *)operator new();
        CoreML::Specification::BayesianProbitRegressor_Gaussian::BayesianProbitRegressor_Gaussian(v27);
        *((_QWORD *)this + 13) = v27;
        v26 = (const CoreML::Specification::SigmoidKernel *)*((_QWORD *)a2 + 13);
      }
      if (v26)
        v28 = v26;
      else
        v28 = (const CoreML::Specification::SigmoidKernel *)&CoreML::Specification::_BayesianProbitRegressor_Gaussian_default_instance_;
      CoreML::Specification::SigmoidKernel::MergeFrom((std::string *)v27, v28);
    }
  }
  v29 = *((_DWORD *)a2 + 28);
  if (v29)
    *((_DWORD *)this + 28) = v29;
}

void sub_2183C10C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40B7564605);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::BayesianProbitRegressor::IsInitialized(CoreML::Specification::BayesianProbitRegressor *this)
{
  return 1;
}

_QWORD *CoreML::Specification::BayesianProbitRegressor::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.BayesianProbitRegressor");
}

CoreML::Specification::BayesianProbitRegressor_Gaussian *CoreML::Specification::BayesianProbitRegressor_Gaussian::New(CoreML::Specification::BayesianProbitRegressor_Gaussian *this)
{
  return CoreML::Specification::BayesianProbitRegressor_Gaussian::New(this, 0);
}

CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight *CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight::New(CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight *this)
{
  return CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight::New(this, 0);
}

CoreML::Specification::BayesianProbitRegressor_FeatureWeight *CoreML::Specification::BayesianProbitRegressor_FeatureWeight::New(CoreML::Specification::BayesianProbitRegressor_FeatureWeight *this)
{
  return CoreML::Specification::BayesianProbitRegressor_FeatureWeight::New(this, 0);
}

CoreML::Specification::BayesianProbitRegressor *CoreML::Specification::BayesianProbitRegressor::New(CoreML::Specification::BayesianProbitRegressor *this)
{
  return CoreML::Specification::BayesianProbitRegressor::New(this, 0);
}

uint64_t CoreML::Specification::BayesianProbitRegressor::GetCachedSize(CoreML::Specification::BayesianProbitRegressor *this)
{
  return *((unsigned int *)this + 29);
}

CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight *_tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight>::TypeHandler>(_tc_google::protobuf::internal::RepeatedPtrFieldBase *this)
{
  int *v2;
  uint64_t v3;
  int v4;
  CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight *Aligned;
  _tc_google::protobuf::Arena *v6;
  uint64_t v7;
  uint64_t v8;

  v2 = (int *)*((_QWORD *)this + 2);
  if (!v2)
  {
    v4 = *((_DWORD *)this + 3);
LABEL_6:
    _tc_google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)this, v4 + 1);
    v2 = (int *)*((_QWORD *)this + 2);
    v4 = *v2;
    goto LABEL_7;
  }
  v3 = *((int *)this + 2);
  v4 = *v2;
  if ((int)v3 < *v2)
  {
    *((_DWORD *)this + 2) = v3 + 1;
    return *(CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight **)&v2[2 * v3 + 2];
  }
  if (v4 == *((_DWORD *)this + 3))
    goto LABEL_6;
LABEL_7:
  *v2 = v4 + 1;
  v6 = *(_tc_google::protobuf::Arena **)this;
  if (*(_QWORD *)this)
  {
    CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight::BayesianProbitRegressor_FeatureValueWeight(Aligned);
    _tc_google::protobuf::Arena::AddListNode(v6, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight>);
  }
  else
  {
    Aligned = (CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight *)operator new();
    CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight::BayesianProbitRegressor_FeatureValueWeight(Aligned);
  }
  v7 = *((_QWORD *)this + 2);
  v8 = *((int *)this + 2);
  *((_DWORD *)this + 2) = v8 + 1;
  *(_QWORD *)(v7 + 8 * v8 + 8) = Aligned;
  return Aligned;
}

void sub_2183C1220(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C406A65A86DLL);
  _Unwind_Resume(a1);
}

uint64_t _tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

CoreML::Specification::BayesianProbitRegressor_FeatureWeight *_tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::BayesianProbitRegressor_FeatureWeight>::TypeHandler>(_tc_google::protobuf::internal::RepeatedPtrFieldBase *this)
{
  int *v2;
  uint64_t v3;
  int v4;
  CoreML::Specification::BayesianProbitRegressor_FeatureWeight *Aligned;
  _tc_google::protobuf::Arena *v6;
  uint64_t v7;
  uint64_t v8;

  v2 = (int *)*((_QWORD *)this + 2);
  if (!v2)
  {
    v4 = *((_DWORD *)this + 3);
LABEL_6:
    _tc_google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)this, v4 + 1);
    v2 = (int *)*((_QWORD *)this + 2);
    v4 = *v2;
    goto LABEL_7;
  }
  v3 = *((int *)this + 2);
  v4 = *v2;
  if ((int)v3 < *v2)
  {
    *((_DWORD *)this + 2) = v3 + 1;
    return *(CoreML::Specification::BayesianProbitRegressor_FeatureWeight **)&v2[2 * v3 + 2];
  }
  if (v4 == *((_DWORD *)this + 3))
    goto LABEL_6;
LABEL_7:
  *v2 = v4 + 1;
  v6 = *(_tc_google::protobuf::Arena **)this;
  if (*(_QWORD *)this)
  {
    CoreML::Specification::BayesianProbitRegressor_FeatureWeight::BayesianProbitRegressor_FeatureWeight(Aligned);
    _tc_google::protobuf::Arena::AddListNode(v6, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::BayesianProbitRegressor_FeatureWeight>);
  }
  else
  {
    Aligned = (CoreML::Specification::BayesianProbitRegressor_FeatureWeight *)operator new();
    CoreML::Specification::BayesianProbitRegressor_FeatureWeight::BayesianProbitRegressor_FeatureWeight(Aligned);
  }
  v7 = *((_QWORD *)this + 2);
  v8 = *((int *)this + 2);
  *((_DWORD *)this + 2) = v8 + 1;
  *(_QWORD *)(v7 + 8 * v8 + 8) = Aligned;
  return Aligned;
}

void sub_2183C1348(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C408C5061CCLL);
  _Unwind_Resume(a1);
}

uint64_t _tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::BayesianProbitRegressor_FeatureWeight>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t _tc_google::protobuf::internal::RepeatedPtrFieldBase::Clear<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight>::TypeHandler>(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(unsigned int *)(result + 8);
  if ((int)v1 >= 1)
  {
    v2 = result;
    v3 = *(_QWORD *)(result + 16) + 8;
    do
    {
      v4 = *(_QWORD *)v3;
      result = *(_QWORD *)(*(_QWORD *)v3 + 16);
      if (result)
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      *(_QWORD *)(v4 + 16) = 0;
      *(_DWORD *)(v4 + 24) = 0;
      v3 += 8;
      --v1;
    }
    while (v1);
    *(_DWORD *)(v2 + 8) = 0;
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::RepeatedPtrFieldBase::Clear<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::BayesianProbitRegressor_FeatureWeight>::TypeHandler>(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;

  v1 = *(unsigned int *)(result + 8);
  if ((int)v1 >= 1)
  {
    v2 = result;
    v3 = (uint64_t *)(*(_QWORD *)(result + 16) + 8);
    do
    {
      v4 = *v3++;
      result = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Clear<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight>::TypeHandler>(v4 + 16);
      *(_DWORD *)(v4 + 40) = 0;
      --v1;
    }
    while (v1);
    *(_DWORD *)(v2 + 8) = 0;
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::BayesianProbitRegressor_Gaussian>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::BayesianProbitRegressor_FeatureWeight>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

std::string *_tc_google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight>::TypeHandler>(std::string *result, std::string **a2, CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight **a3, signed int a4, signed int a5)
{
  _tc_google::protobuf::Arena **v9;
  uint64_t v10;
  CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight **v11;
  std::string **v12;
  CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight *v13;
  CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight *v14;
  std::string *v15;
  int v16;
  _tc_google::protobuf::Arena *v17;
  CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight **v18;
  CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight **v19;
  CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight *v20;
  CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight *Aligned;

  v9 = (_tc_google::protobuf::Arena **)result;
  if (a5 >= a4)
    v10 = a4;
  else
    v10 = a5;
  if ((int)v10 >= 1)
  {
    v11 = a3;
    v12 = a2;
    do
    {
      v14 = *v11++;
      v13 = v14;
      v15 = *v12++;
      result = _tc_google::protobuf::internal::GenericTypeHandler<CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight>::Merge(v13, v15);
      --v10;
    }
    while (v10);
  }
  v16 = a4 - a5;
  if (a4 > a5)
  {
    v17 = *v9;
    v18 = &a3[a5];
    v19 = (CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight **)&a2[a5];
    do
    {
      v20 = *v18;
      if (v17)
      {
        CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight::BayesianProbitRegressor_FeatureValueWeight(Aligned);
        _tc_google::protobuf::Arena::AddListNode(v17, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight>);
      }
      else
      {
        Aligned = (CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight *)operator new();
        CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight::BayesianProbitRegressor_FeatureValueWeight(Aligned);
      }
      result = _tc_google::protobuf::internal::GenericTypeHandler<CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight>::Merge(v20, (std::string *)Aligned);
      *v19++ = Aligned;
      ++v18;
      --v16;
    }
    while (v16);
  }
  return result;
}

void sub_2183C1574(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C406A65A86DLL);
  _Unwind_Resume(a1);
}

std::string *_tc_google::protobuf::internal::GenericTypeHandler<CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight>::Merge(CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight *a1, std::string *this)
{
  return CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight::MergeFrom(this, a1);
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::BayesianProbitRegressor>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

std::string *_tc_google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::BayesianProbitRegressor_FeatureWeight>::TypeHandler>(std::string *result, std::string **a2, CoreML::Specification::BayesianProbitRegressor_FeatureWeight **a3, signed int a4, signed int a5)
{
  _tc_google::protobuf::Arena **v9;
  uint64_t v10;
  CoreML::Specification::BayesianProbitRegressor_FeatureWeight **v11;
  std::string **v12;
  CoreML::Specification::BayesianProbitRegressor_FeatureWeight *v13;
  CoreML::Specification::BayesianProbitRegressor_FeatureWeight *v14;
  std::string *v15;
  int v16;
  _tc_google::protobuf::Arena *v17;
  CoreML::Specification::BayesianProbitRegressor_FeatureWeight **v18;
  CoreML::Specification::BayesianProbitRegressor_FeatureWeight **v19;
  CoreML::Specification::BayesianProbitRegressor_FeatureWeight *v20;
  CoreML::Specification::BayesianProbitRegressor_FeatureWeight *Aligned;

  v9 = (_tc_google::protobuf::Arena **)result;
  if (a5 >= a4)
    v10 = a4;
  else
    v10 = a5;
  if ((int)v10 >= 1)
  {
    v11 = a3;
    v12 = a2;
    do
    {
      v14 = *v11++;
      v13 = v14;
      v15 = *v12++;
      result = _tc_google::protobuf::internal::GenericTypeHandler<CoreML::Specification::BayesianProbitRegressor_FeatureWeight>::Merge(v13, v15);
      --v10;
    }
    while (v10);
  }
  v16 = a4 - a5;
  if (a4 > a5)
  {
    v17 = *v9;
    v18 = &a3[a5];
    v19 = (CoreML::Specification::BayesianProbitRegressor_FeatureWeight **)&a2[a5];
    do
    {
      v20 = *v18;
      if (v17)
      {
        CoreML::Specification::BayesianProbitRegressor_FeatureWeight::BayesianProbitRegressor_FeatureWeight(Aligned);
        _tc_google::protobuf::Arena::AddListNode(v17, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::BayesianProbitRegressor_FeatureWeight>);
      }
      else
      {
        Aligned = (CoreML::Specification::BayesianProbitRegressor_FeatureWeight *)operator new();
        CoreML::Specification::BayesianProbitRegressor_FeatureWeight::BayesianProbitRegressor_FeatureWeight(Aligned);
      }
      result = _tc_google::protobuf::internal::GenericTypeHandler<CoreML::Specification::BayesianProbitRegressor_FeatureWeight>::Merge(v20, (std::string *)Aligned);
      *v19++ = Aligned;
      ++v18;
      --v16;
    }
    while (v16);
  }
  return result;
}

void sub_2183C16C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C408C5061CCLL);
  _Unwind_Resume(a1);
}

std::string *_tc_google::protobuf::internal::GenericTypeHandler<CoreML::Specification::BayesianProbitRegressor_FeatureWeight>::Merge(CoreML::Specification::BayesianProbitRegressor_FeatureWeight *a1, std::string *this)
{
  return CoreML::Specification::BayesianProbitRegressor_FeatureWeight::MergeFrom(this, a1);
}

uint64_t _GLOBAL__sub_I_BayesianProbitRegressor_pb_cc()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

uint64_t xgboost_old::gbm::CreateGradBooster(xgboost_old::gbm *this, const char *a2)
{
  const char *v3;
  uint64_t v4;

  if (!strcmp("gbtree", (const char *)this))
  {
    v4 = operator new();
    *(_QWORD *)v4 = &unk_24D93DE10;
    xgboost_old::gbm::GBTree::TrainParam::TrainParam((xgboost_old::gbm::GBTree::TrainParam *)(v4 + 8));
    *(_OWORD *)(v4 + 176) = 0u;
    *(_OWORD *)(v4 + 192) = 0u;
    *(_OWORD *)(v4 + 144) = 0u;
    *(_OWORD *)(v4 + 160) = 0u;
    *(_OWORD *)(v4 + 112) = 0u;
    *(_OWORD *)(v4 + 128) = 0u;
    *(_OWORD *)(v4 + 80) = 0u;
    *(_OWORD *)(v4 + 96) = 0u;
    *(_OWORD *)(v4 + 48) = 0u;
    *(_OWORD *)(v4 + 64) = 0u;
    *(_DWORD *)(v4 + 72) = 1;
    *(_OWORD *)(v4 + 208) = 0u;
    *(_OWORD *)(v4 + 224) = 0u;
    *(_OWORD *)(v4 + 240) = 0u;
    *(_OWORD *)(v4 + 256) = 0u;
    *(_OWORD *)(v4 + 272) = 0u;
    *(_OWORD *)(v4 + 288) = 0u;
    *(_OWORD *)(v4 + 304) = 0u;
    *(_OWORD *)(v4 + 320) = 0u;
    *(_OWORD *)(v4 + 336) = 0u;
    *(_OWORD *)(v4 + 352) = 0u;
    *(_QWORD *)(v4 + 368) = 0;
  }
  else
  {
    if (strcmp("gblinear", (const char *)this))
      xgboost_old::utils::Error((xgboost_old::utils *)"unknown booster type: %s", v3, this);
    v4 = operator new();
    *(_QWORD *)v4 = &unk_24D93DF38;
    *(_QWORD *)(v4 + 8) = 0x100000000;
    *(_OWORD *)(v4 + 16) = 0u;
    *(_OWORD *)(v4 + 32) = 0u;
    *(_OWORD *)(v4 + 48) = 0u;
    *(_OWORD *)(v4 + 64) = 0u;
    *(_OWORD *)(v4 + 80) = 0u;
    *(_OWORD *)(v4 + 96) = 0u;
    *(_OWORD *)(v4 + 112) = 0u;
    *(_OWORD *)(v4 + 128) = 0u;
    *(_OWORD *)(v4 + 144) = 0u;
    *(_QWORD *)(v4 + 160) = 0;
    *(_OWORD *)(v4 + 168) = xmmword_2186FB1F0;
    *(_QWORD *)(v4 + 192) = 0;
    *(_QWORD *)(v4 + 200) = 0;
    *(_QWORD *)(v4 + 184) = 0;
  }
  return v4;
}

void sub_2183C186C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10B3C406AF4250DLL);
  _Unwind_Resume(a1);
}

void xgboost_old::utils::Error(xgboost_old::utils *this, const char *a2, ...)
{
  void *v3;
  std::runtime_error *exception;
  va_list va;

  va_start(va, a2);
  v3 = operator new(0x1008uLL);
  bzero(v3, 0x1001uLL);
  vsnprintf((char *)v3, 0x1000uLL, (const char *)this, va);
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, (const char *)v3);
  __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
}

void sub_2183C1908(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t xgboost_old::gbm::GBTree::SetParam(xgboost_old::gbm::GBTree *this, char *__s1, char *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t result;
  void *v9[2];
  uint64_t v10;
  void *v11[2];
  uint64_t v12;
  void *v13[2];
  uint64_t v14;
  void *__p[2];
  uint64_t v16;

  if (!strncmp(__s1, "bst:", 4uLL))
  {
    std::string::basic_string[abi:ne180100]<0>(v11, __s1 + 4);
    std::string::basic_string[abi:ne180100]<0>(v9, a3);
    *(_OWORD *)v13 = *(_OWORD *)v11;
    v14 = v12;
    v11[1] = 0;
    v12 = 0;
    *(_OWORD *)__p = *(_OWORD *)v9;
    v16 = v10;
    v9[0] = 0;
    v9[1] = 0;
    v10 = 0;
    v11[0] = 0;
    std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100]((std::vector<std::pair<std::string, std::string>> *)((char *)this + 304), (__int128 *)v13);
    if (SHIBYTE(v16) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v14) < 0)
      operator delete(v13[0]);
    if (SHIBYTE(v10) < 0)
      operator delete(v9[0]);
    if (SHIBYTE(v12) < 0)
      operator delete(v11[0]);
    v6 = *((_QWORD *)this + 44);
    if (*((_QWORD *)this + 45) != v6)
    {
      v7 = 0;
      do
      {
        (***(void (****)(_QWORD, const char *, char *))(v6 + 8 * v7))(*(_QWORD *)(v6 + 8 * v7), __s1 + 4, a3);
        ++v7;
        v6 = *((_QWORD *)this + 44);
      }
      while (v7 < (*((_QWORD *)this + 45) - v6) >> 3);
    }
  }
  if (!strcmp(__s1, "silent"))
    (**(void (***)(xgboost_old::gbm::GBTree *, const char *, char *))this)(this, "bst:silent", a3);
  result = xgboost_old::gbm::GBTree::TrainParam::SetParam((xgboost_old::gbm::GBTree *)((char *)this + 8), __s1, a3);
  if (*((_QWORD *)this + 27) == *((_QWORD *)this + 26))
    return xgboost_old::gbm::GBTree::ModelParam::SetParam((xgboost_old::gbm::GBTree *)((char *)this + 48), __s1, a3);
  return result;
}

void sub_2183C1AAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  std::pair<std::string,std::string>::~pair((uint64_t)&a21);
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(a1);
}

void xgboost_old::gbm::GBTree::LoadModel(xgboost_old::gbm::GBTree *this, dmlc::Stream *a2, int a3)
{
  _BOOL8 v6;
  const char *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BOOL8 v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  const char *v16;
  _BOOL8 v17;
  const char *v18;

  xgboost_old::gbm::GBTree::Clear(this);
  v6 = (**(uint64_t (***)(dmlc::Stream *, char *, uint64_t))a2)(a2, (char *)this + 48, 160) != 0;
  xgboost_old::utils::Check(v6, "GBTree: invalid model file", v7);
  std::vector<turi::neural_net::GraphLayer *>::resize((uint64_t)this + 208, *((int *)this + 12));
  if (*((_QWORD *)this + 27) != *((_QWORD *)this + 26))
  {
    v8 = 0;
    do
    {
      v9 = operator new();
      *(_OWORD *)v9 = 0u;
      *(_OWORD *)(v9 + 16) = 0u;
      *(_OWORD *)(v9 + 32) = 0u;
      *(_OWORD *)(v9 + 48) = 0u;
      *(_OWORD *)(v9 + 64) = 0u;
      *(_OWORD *)(v9 + 80) = 0u;
      *(_OWORD *)(v9 + 96) = 0u;
      *(_OWORD *)(v9 + 112) = 0u;
      *(_OWORD *)(v9 + 128) = 0u;
      *(_OWORD *)(v9 + 144) = 0u;
      *(_OWORD *)(v9 + 160) = 0u;
      *(_OWORD *)(v9 + 176) = 0u;
      *(_OWORD *)(v9 + 192) = 0u;
      *(_OWORD *)(v9 + 208) = 0u;
      *(_OWORD *)(v9 + 224) = 0u;
      *(_QWORD *)(v9 + 240) = 0;
      xgboost_old::tree::TreeModel<float,xgboost_old::tree::RTreeNodeStat>::TreeModel((_OWORD *)v9);
      *(_QWORD *)(*((_QWORD *)this + 26) + 8 * v8) = v9;
      xgboost_old::tree::TreeModel<float,xgboost_old::tree::RTreeNodeStat>::LoadModel(*(_QWORD *)(*((_QWORD *)this + 26) + 8 * v8++), (uint64_t (***)(_QWORD, uint64_t, uint64_t))a2);
    }
    while (v8 < (uint64_t)(*((_QWORD *)this + 27) - *((_QWORD *)this + 26)) >> 3);
  }
  std::vector<int>::resize((std::vector<unsigned int> *)((char *)this + 232), *((int *)this + 12));
  v10 = *((int *)this + 12);
  if ((_DWORD)v10)
  {
    v11 = (**(uint64_t (***)(dmlc::Stream *, _QWORD, uint64_t))a2)(a2, *((_QWORD *)this + 29), 4 * v10) != 0;
    xgboost_old::utils::Check(v11, "GBTree: invalid model file", v12);
  }
  v13 = *((_QWORD *)this + 8);
  if (v13)
  {
    if (a3)
    {
      std::vector<float>::resize((uint64_t)this + 256, v13 * *((int *)this + 18) + v13 * *((int *)this + 18) * *((int *)this + 19));
      v14 = *((_QWORD *)this + 8) * *((int *)this + 18);
      std::vector<int>::resize((std::vector<unsigned int> *)((char *)this + 280), v14 + v14 * *((int *)this + 19));
      v15 = (**(uint64_t (***)(dmlc::Stream *, _QWORD, _QWORD))a2)(a2, *((_QWORD *)this + 32), *((_QWORD *)this + 33) - *((_QWORD *)this + 32)) != 0;
      xgboost_old::utils::Check(v15, "GBTree: invalid model file", v16);
      v17 = (**(uint64_t (***)(dmlc::Stream *, _QWORD, _QWORD))a2)(a2, *((_QWORD *)this + 35), *((_QWORD *)this + 36) - *((_QWORD *)this + 35)) != 0;
      xgboost_old::utils::Check(v17, "GBTree: invalid model file", v18);
    }
  }
}

void sub_2183C1CC0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10B0C406D2B3AE9);
  _Unwind_Resume(a1);
}

uint64_t xgboost_old::gbm::GBTree::SaveModel(uint64_t a1, uint64_t a2, const char *a3)
{
  int v3;
  __int128 *v6;
  uint64_t result;
  const char *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;

  v3 = (int)a3;
  v6 = (__int128 *)(a1 + 48);
  xgboost_old::utils::Assert(*(_DWORD *)(a1 + 48) == ((*(_QWORD *)(a1 + 216) - *(_QWORD *)(a1 + 208)) >> 3), "GBTree", a3);
  if (v3)
  {
    result = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)a2 + 8))(a2, v6, 160);
  }
  else
  {
    v9 = v6[7];
    v29 = v6[6];
    v30 = v9;
    v10 = v6[9];
    v31 = v6[8];
    v32 = v10;
    v11 = v6[3];
    v25 = v6[2];
    v26 = v11;
    v12 = v6[5];
    v27 = v6[4];
    v28 = v12;
    v13 = v6[1];
    v22 = *v6;
    v24 = *((_QWORD *)&v13 + 1);
    v23 = 0;
    result = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)a2 + 8))(a2, &v22, 160);
  }
  v14 = *(_QWORD *)(a1 + 208);
  if (*(_QWORD *)(a1 + 216) != v14)
  {
    v15 = 0;
    do
    {
      result = xgboost_old::tree::TreeModel<float,xgboost_old::tree::RTreeNodeStat>::SaveModel(*(uint64_t **)(v14 + 8 * v15++), a2, v8);
      v14 = *(_QWORD *)(a1 + 208);
    }
    while (v15 < (*(_QWORD *)(a1 + 216) - v14) >> 3);
  }
  if (*(_QWORD *)(a1 + 240) != *(_QWORD *)(a1 + 232))
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 8))(a2);
  if (*(_QWORD *)(a1 + 64) && v3)
  {
    v17 = *(_QWORD *)(a1 + 256);
    v16 = *(_QWORD *)(a1 + 264);
    if (v16 == v17)
      v18 = 0;
    else
      v18 = *(_QWORD *)(a1 + 256);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 8))(a2, v18, v16 - v17);
    v20 = *(_QWORD *)(a1 + 280);
    v19 = *(_QWORD *)(a1 + 288);
    if (v19 == v20)
      v21 = 0;
    else
      v21 = *(_QWORD *)(a1 + 280);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 8))(a2, v21, v19 - v20);
  }
  return result;
}

void xgboost_old::gbm::GBTree::LoadLegacyModel(xgboost_old::gbm::GBTree *this, dmlc::Stream *a2, int a3)
{
  _BOOL8 v6;
  const char *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BOOL8 v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  const char *v16;
  _BOOL8 v17;
  const char *v18;

  xgboost_old::gbm::GBTree::Clear(this);
  v6 = (**(uint64_t (***)(dmlc::Stream *, char *, uint64_t))a2)(a2, (char *)this + 48, 160) != 0;
  xgboost_old::utils::Check(v6, "GBTree: invalid model file", v7);
  std::vector<turi::neural_net::GraphLayer *>::resize((uint64_t)this + 208, *((int *)this + 12));
  if (*((_QWORD *)this + 27) != *((_QWORD *)this + 26))
  {
    v8 = 0;
    do
    {
      v9 = operator new();
      *(_OWORD *)v9 = 0u;
      *(_OWORD *)(v9 + 16) = 0u;
      *(_OWORD *)(v9 + 32) = 0u;
      *(_OWORD *)(v9 + 48) = 0u;
      *(_OWORD *)(v9 + 64) = 0u;
      *(_OWORD *)(v9 + 80) = 0u;
      *(_OWORD *)(v9 + 96) = 0u;
      *(_OWORD *)(v9 + 112) = 0u;
      *(_OWORD *)(v9 + 128) = 0u;
      *(_OWORD *)(v9 + 144) = 0u;
      *(_OWORD *)(v9 + 160) = 0u;
      *(_OWORD *)(v9 + 176) = 0u;
      *(_OWORD *)(v9 + 192) = 0u;
      *(_OWORD *)(v9 + 208) = 0u;
      *(_OWORD *)(v9 + 224) = 0u;
      *(_QWORD *)(v9 + 240) = 0;
      xgboost_old::tree::TreeModel<float,xgboost_old::tree::RTreeNodeStat>::TreeModel((_OWORD *)v9);
      *(_QWORD *)(*((_QWORD *)this + 26) + 8 * v8) = v9;
      xgboost_old::tree::RegTree::LoadLegacyModel(*(xgboost_old::tree::RegTree **)(*((_QWORD *)this + 26) + 8 * v8++), a2);
    }
    while (v8 < (uint64_t)(*((_QWORD *)this + 27) - *((_QWORD *)this + 26)) >> 3);
  }
  std::vector<int>::resize((std::vector<unsigned int> *)((char *)this + 232), *((int *)this + 12));
  v10 = *((int *)this + 12);
  if ((_DWORD)v10)
  {
    v11 = (**(uint64_t (***)(dmlc::Stream *, _QWORD, uint64_t))a2)(a2, *((_QWORD *)this + 29), 4 * v10) != 0;
    xgboost_old::utils::Check(v11, "GBTree: invalid model file", v12);
  }
  v13 = *((_QWORD *)this + 8);
  if (v13)
  {
    if (a3)
    {
      std::vector<float>::resize((uint64_t)this + 256, v13 * *((int *)this + 18) + v13 * *((int *)this + 18) * *((int *)this + 19));
      v14 = *((_QWORD *)this + 8) * *((int *)this + 18);
      std::vector<int>::resize((std::vector<unsigned int> *)((char *)this + 280), v14 + v14 * *((int *)this + 19));
      v15 = (**(uint64_t (***)(dmlc::Stream *, _QWORD, _QWORD))a2)(a2, *((_QWORD *)this + 32), *((_QWORD *)this + 33) - *((_QWORD *)this + 32)) != 0;
      xgboost_old::utils::Check(v15, "GBTree: invalid model file", v16);
      v17 = (**(uint64_t (***)(dmlc::Stream *, _QWORD, _QWORD))a2)(a2, *((_QWORD *)this + 35), *((_QWORD *)this + 36) - *((_QWORD *)this + 35)) != 0;
      xgboost_old::utils::Check(v17, "GBTree: invalid model file", v18);
    }
  }
}

void sub_2183C2004(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10B0C406D2B3AE9);
  _Unwind_Resume(a1);
}

uint64_t xgboost_old::gbm::GBTree::InitModel(xgboost_old::gbm::GBTree *this)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  std::vector<unsigned int>::size_type v5;
  const char *v6;
  const char *v7;
  std::vector<unsigned int>::value_type __x;
  int v10;

  *((_QWORD *)this + 33) = *((_QWORD *)this + 32);
  *((_QWORD *)this + 36) = *((_QWORD *)this + 35);
  v2 = *((_QWORD *)this + 8) * *((int *)this + 18);
  v3 = v2 + v2 * *((int *)this + 19);
  v10 = 0;
  std::vector<float>::resize((uint64_t)this + 256, v3, &v10);
  v4 = *((_QWORD *)this + 8) * *((int *)this + 18);
  v5 = v4 + v4 * *((int *)this + 19);
  __x = 0;
  std::vector<unsigned int>::resize((std::vector<unsigned int> *)((char *)this + 280), v5, &__x);
  xgboost_old::utils::Assert(*((_DWORD *)this + 12) == 0, "GBTree: model already initialized", v6);
  return xgboost_old::utils::Assert(*((_QWORD *)this + 27) == *((_QWORD *)this + 26), "GBTree: model already initialized", v7);
}

void xgboost_old::gbm::GBTree::ResetPredBuffer(xgboost_old::gbm::GBTree *this, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  std::vector<unsigned int>::size_type v5;
  std::vector<unsigned int>::value_type __x;
  int v7;

  *((_QWORD *)this + 8) = a2;
  *((_QWORD *)this + 33) = *((_QWORD *)this + 32);
  *((_QWORD *)this + 36) = *((_QWORD *)this + 35);
  v3 = *((int *)this + 18) * a2 + *((int *)this + 18) * a2 * *((int *)this + 19);
  v7 = 0;
  std::vector<float>::resize((uint64_t)this + 256, v3, &v7);
  v4 = *((_QWORD *)this + 8) * *((int *)this + 18);
  v5 = v4 + v4 * *((int *)this + 19);
  __x = 0;
  std::vector<unsigned int>::resize((std::vector<unsigned int> *)((char *)this + 280), v5, &__x);
}

BOOL xgboost_old::gbm::GBTree::AllowLazyCheckPoint(xgboost_old::gbm::GBTree *this)
{
  return !*((_DWORD *)this + 5) || *((_DWORD *)this + 18) == 1;
}

void xgboost_old::gbm::GBTree::DoBoost(xgboost_old::gbm::GBTree *a1, uint64_t a2, const char *a3, uint64_t *a4, _QWORD *a5)
{
  int v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *__p;
  void *v15;
  int *v16;
  int *v17;
  int v18;
  void *v19;
  _BYTE *v20;
  int v21;
  uint64_t v22[3];

  memset(v22, 0, sizeof(v22));
  v10 = *((_DWORD *)a1 + 18);
  if (v10 == 1)
  {
    xgboost_old::gbm::GBTree::BoostNewTrees(a1, (uint64_t)a5, a2, (uint64_t)a3, a4, 0, (uint64_t **)&__p);
    std::vector<std::vector<xgboost_old::tree::RegTree *>>::push_back[abi:ne180100](v22, (uint64_t)&__p);
    v11 = __p;
    if (!__p)
      goto LABEL_11;
    v15 = __p;
    goto LABEL_10;
  }
  v21 = *((_DWORD *)a1 + 18);
  xgboost_old::utils::Check(((uint64_t)(a5[1] - *a5) >> 3) % (unint64_t)v10 == 0, "must have exactly ngroup*nrow gpairs", a3);
  std::vector<xgboost_old::bst_gpair>::vector(&v19, ((uint64_t)(a5[1] - *a5) >> 3) / (unint64_t)v10);
  v18 = 0;
  if (v10 >= 1)
  {
    do
    {
      __p = &v19;
      v15 = a5;
      v16 = &v21;
      v17 = &v18;
      turi::parallel_for<xgboost_old::gbm::GBTree::DoBoost(xgboost_old::IFMatrix *,long long,xgboost_old::BoosterInfo const&,std::vector<xgboost_old::bst_gpair> *)::{lambda(unsigned long)#1}>(0, ((unint64_t)(v20 - (_BYTE *)v19) >> 3), (uint64_t)&__p);
      xgboost_old::gbm::GBTree::BoostNewTrees(a1, (uint64_t)&v19, a2, (uint64_t)a3, a4, v18, (uint64_t **)&__p);
      std::vector<std::vector<xgboost_old::tree::RegTree *>>::push_back[abi:ne180100](v22, (uint64_t)&__p);
      if (__p)
      {
        v15 = __p;
        operator delete(__p);
      }
      ++v18;
    }
    while (v18 < v21);
  }
  v11 = v19;
  if (v19)
  {
    v20 = v19;
LABEL_10:
    operator delete(v11);
  }
LABEL_11:
  if (*((int *)a1 + 18) >= 1)
  {
    v12 = 0;
    v13 = 0;
    do
    {
      xgboost_old::gbm::GBTree::CommitModel((uint64_t)a1, (uint64_t *)(v22[0] + v12), v13++);
      v12 += 24;
    }
    while (v13 < *((int *)a1 + 18));
  }
  __p = v22;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
}

void sub_2183C2334(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  __p = &a18;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t xgboost_old::gbm::GBTree::Predict(uint64_t a1, uint64_t (***a2)(_QWORD), uint64_t a3, _QWORD *a4, uint64_t a5, int a6)
{
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  unsigned int *v19;
  unint64_t v20;
  void *__p;
  void *v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t *v26;
  int *v27;
  uint64_t v28;
  int v29;
  uint64_t v30;

  v30 = a3;
  v29 = a6;
  v10 = turi::thread::cpu_count((turi::thread *)a1);
  v11 = -1431655765 * ((uint64_t)(*(_QWORD *)(a1 + 336) - *(_QWORD *)(a1 + 328)) >> 3);
  if (v11 < v10)
  {
    __p = 0;
    v22 = 0;
    v23 = 0;
    std::vector<xgboost_old::tree::RegTree::FVec>::resize((uint64_t *)(a1 + 328), v10, (uint64_t)&__p);
    if (__p)
    {
      v22 = __p;
      operator delete(__p);
    }
    v12 = v10 - v11;
    v13 = 24 * v11;
    do
    {
      v14 = *(_QWORD *)(a1 + 328) + v13;
      std::vector<xgboost_old::tree::RegTree::FVec::Entry>::resize(v14, *(int *)(a1 + 56));
      v15 = *(_QWORD *)(v14 + 8) - *(_QWORD *)v14;
      if (v15 >= 1)
        memset(*(void **)v14, 255, 4 * (((unint64_t)v15 >> 2) - ((unint64_t)v15 > 3)) + 4);
      v13 += 24;
      --v12;
    }
    while (v12);
  }
  v16 = *(int *)(a1 + 76);
  v28 = *a4 * *(int *)(a1 + 72);
  std::vector<float>::resize(a5, v28 + v28 * v16);
  v17 = (**a2)(a2);
  (*(void (**)(uint64_t))(*(_QWORD *)v17 + 16))(v17);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 24))(v17);
  if ((_DWORD)result)
  {
    do
    {
      v19 = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 32))(v17);
      v20 = *v19;
      __p = (void *)a1;
      v22 = v19;
      v23 = a4;
      v24 = &v30;
      v25 = a5;
      v26 = &v28;
      v27 = &v29;
      turi::parallel_for<xgboost_old::gbm::GBTree::Predict(xgboost_old::IFMatrix *,long long,xgboost_old::BoosterInfo const&,std::vector<float> *,unsigned int)::{lambda(unsigned long)#1}>(0, v20, (uint64_t)&__p);
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 24))(v17);
    }
    while ((result & 1) != 0);
  }
  return result;
}

void sub_2183C2548(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void xgboost_old::gbm::GBTree::Predict(uint64_t a1, uint64_t a2, _QWORD *a3, int a4, int a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *__p;
  void *v16;
  uint64_t v17;

  if (*(_QWORD *)(a1 + 336) == *(_QWORD *)(a1 + 328))
  {
    __p = 0;
    v16 = 0;
    v17 = 0;
    std::vector<xgboost_old::tree::RegTree::FVec>::resize((uint64_t *)(a1 + 328), 1uLL, (uint64_t)&__p);
    if (__p)
    {
      v16 = __p;
      operator delete(__p);
    }
    v10 = *(_QWORD *)(a1 + 328);
    std::vector<xgboost_old::tree::RegTree::FVec::Entry>::resize(v10, *(int *)(a1 + 56));
    v11 = *(_QWORD *)(v10 + 8) - *(_QWORD *)v10;
    if (v11 >= 1)
      memset(*(void **)v10, 255, 4 * (((unint64_t)v11 >> 2) - ((unint64_t)v11 > 3)) + 4);
  }
  std::vector<float>::resize((uint64_t)a3, *(int *)(a1 + 72) + *(int *)(a1 + 72) * (uint64_t)*(int *)(a1 + 76));
  LODWORD(v12) = *(_DWORD *)(a1 + 72);
  if ((int)v12 >= 1)
  {
    v13 = 0;
    v14 = 0;
    do
    {
      xgboost_old::gbm::GBTree::Pred(a1, a2, -1, v14++, a5, *(_QWORD **)(a1 + 328), (float *)(*a3 + v13), (int)v12, a4);
      v13 += 4;
      v12 = *(int *)(a1 + 72);
    }
    while (v14 < v12);
  }
}

void sub_2183C268C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t xgboost_old::gbm::GBTree::PredictLeaf(uint64_t a1, uint64_t (***a2)(_QWORD), _QWORD *a3, uint64_t a4, unsigned int a5)
{
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  unsigned int *v20;
  unint64_t v21;
  void *__p;
  void *v23;
  unsigned int *v24;
  _QWORD *v25;
  uint64_t v26;
  unsigned int v27;

  v10 = turi::thread::cpu_count((turi::thread *)a1);
  v11 = -1431655765 * ((uint64_t)(*(_QWORD *)(a1 + 336) - *(_QWORD *)(a1 + 328)) >> 3);
  if (v11 < v10)
  {
    __p = 0;
    v23 = 0;
    v24 = 0;
    std::vector<xgboost_old::tree::RegTree::FVec>::resize((uint64_t *)(a1 + 328), v10, (uint64_t)&__p);
    if (__p)
    {
      v23 = __p;
      operator delete(__p);
    }
    v12 = v10 - v11;
    v13 = 24 * v11;
    do
    {
      v14 = *(_QWORD *)(a1 + 328) + v13;
      std::vector<xgboost_old::tree::RegTree::FVec::Entry>::resize(v14, *(int *)(a1 + 56));
      v15 = *(_QWORD *)(v14 + 8) - *(_QWORD *)v14;
      if (v15 >= 1)
        memset(*(void **)v14, 255, 4 * (((unint64_t)v15 >> 2) - ((unint64_t)v15 > 3)) + 4);
      v13 += 24;
      --v12;
    }
    while (v12);
  }
  v27 = a5;
  if (!a5)
  {
    v17 = *(_QWORD *)(a1 + 216) - *(_QWORD *)(a1 + 208);
    goto LABEL_12;
  }
  v16 = a5;
  v17 = *(_QWORD *)(a1 + 216) - *(_QWORD *)(a1 + 208);
  if (a5 > (unint64_t)(v17 >> 3))
  {
LABEL_12:
    v27 = (unint64_t)v17 >> 3;
    v16 = v27;
  }
  std::vector<float>::resize(a4, *a3 * v16);
  v18 = (**a2)(a2);
  (*(void (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 24))(v18);
  if ((_DWORD)result)
  {
    do
    {
      v20 = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 32))(v18);
      v21 = *v20;
      __p = v20;
      v23 = (void *)a1;
      v24 = &v27;
      v25 = a3;
      v26 = a4;
      turi::parallel_for<xgboost_old::gbm::GBTree::PredPath(xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<float> *,unsigned int)::{lambda(unsigned long)#1}>(0, v21, (uint64_t)&__p);
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 24))(v18);
    }
    while ((result & 1) != 0);
  }
  return result;
}

void sub_2183C2864(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void xgboost_old::gbm::GBTree::DumpModel(xgboost_old::gbm::GBTree *this@<X0>, const xgboost_old::utils::FeatMap *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  char v6;
  unint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  std::string *v18;
  std::string *v19;
  __int128 v20;
  uint64_t v21;
  int v22;
  std::string __p;
  std::__split_buffer<std::string> __v;

  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  v5 = *((_QWORD *)this + 26);
  if (*((_QWORD *)this + 27) != v5)
  {
    v6 = a3;
    v9 = 0;
    v10 = (a3 >> 1) & 1;
    do
    {
      xgboost_old::tree::TreeModel<float,xgboost_old::tree::RTreeNodeStat>::DumpModel(*(_QWORD *)(v5 + 8 * v9), a2, v6 & 1, v10, &__p);
      v12 = *(_QWORD *)(a4 + 8);
      v11 = *(_QWORD *)(a4 + 16);
      if (v12 >= v11)
      {
        v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - *(_QWORD *)a4) >> 3);
        v15 = v14 + 1;
        if (v14 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - *(_QWORD *)a4) >> 3);
        if (2 * v16 > v15)
          v15 = 2 * v16;
        if (v16 >= 0x555555555555555)
          v17 = 0xAAAAAAAAAAAAAAALL;
        else
          v17 = v15;
        __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a4 + 16);
        if (v17)
          v18 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>(a4 + 16, v17);
        else
          v18 = 0;
        v19 = v18 + v14;
        __v.__first_ = v18;
        __v.__begin_ = v19;
        __v.__end_cap_.__value_ = &v18[v17];
        v20 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        v19->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v19->__r_.__value_.__l.__data_ = v20;
        memset(&__p, 0, sizeof(__p));
        __v.__end_ = v19 + 1;
        std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a4, &__v);
        v21 = *(_QWORD *)(a4 + 8);
        std::__split_buffer<std::string>::~__split_buffer(&__v);
        v22 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
        *(_QWORD *)(a4 + 8) = v21;
        if (v22 < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      else
      {
        v13 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        *(_QWORD *)(v12 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
        *(_OWORD *)v12 = v13;
        *(_QWORD *)(a4 + 8) = v12 + 24;
      }
      ++v9;
      v5 = *((_QWORD *)this + 26);
    }
    while (v9 < (*((_QWORD *)this + 27) - v5) >> 3);
  }
}

void sub_2183C2A20(_Unwind_Exception *__p, uint64_t a2, int a3, __int16 a4, char a5, char a6, std::__split_buffer<std::string> *a7, uint64_t a8, void *__pa, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__pa);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__pa);
  _Unwind_Resume(__p);
}

void xgboost_old::gbm::GBTree::~GBTree(xgboost_old::gbm::GBTree *this)
{
  xgboost_old::gbm::GBTree::~GBTree(this);
  JUMPOUT(0x219A19A08);
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void **v7;

  *(_QWORD *)this = &unk_24D93DE10;
  xgboost_old::gbm::GBTree::Clear(this);
  v2 = (void *)*((_QWORD *)this + 44);
  if (v2)
  {
    *((_QWORD *)this + 45) = v2;
    operator delete(v2);
  }
  v7 = (void **)((char *)this + 328);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v7);
  v7 = (void **)((char *)this + 304);
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&v7);
  v3 = (void *)*((_QWORD *)this + 35);
  if (v3)
  {
    *((_QWORD *)this + 36) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 32);
  if (v4)
  {
    *((_QWORD *)this + 33) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 29);
  if (v5)
  {
    *((_QWORD *)this + 30) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 26);
  if (v6)
  {
    *((_QWORD *)this + 27) = v6;
    operator delete(v6);
  }
  if (*((char *)this + 47) < 0)
    operator delete(*((void **)this + 3));
}

void xgboost_old::gbm::IGradBooster::LoadLegacyModel()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = "Load legacy model not implemented";
  __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
}

xgboost_old::gbm::GBTree::TrainParam *xgboost_old::gbm::GBTree::TrainParam::TrainParam(xgboost_old::gbm::GBTree::TrainParam *this)
{
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *(_DWORD *)this = 0;
  MEMORY[0x219A19390]((char *)this + 16, "grow_colmaker,prune");
  *(_QWORD *)((char *)this + 4) = 1;
  *((_DWORD *)this + 3) = 0;
  return this;
}

void sub_2183C2B10(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 39) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t xgboost_old::gbm::GBTree::TrainParam::SetParam(xgboost_old::gbm::GBTree::TrainParam *this, const char *__s1, const char *a3)
{
  const char *v6;
  uint64_t result;

  if (!strcmp(__s1, "updater"))
  {
    v6 = (char *)this + 16;
    if (*((char *)this + 39) < 0)
      v6 = (const char *)*((_QWORD *)this + 2);
    if (strcmp(v6, a3))
    {
      MEMORY[0x219A19390]((char *)this + 16, a3);
      *((_DWORD *)this + 2) = 0;
    }
  }
  if (!strcmp(__s1, "dsplit") && !strcmp(a3, "col"))
    *((_DWORD *)this + 3) = 1;
  if (!strcmp(__s1, "nthread"))
    *(_DWORD *)this = atoi(a3);
  result = strcmp(__s1, "num_parallel_tree");
  if (!(_DWORD)result)
  {
    result = atoi(a3);
    *((_DWORD *)this + 1) = result;
  }
  return result;
}

uint64_t xgboost_old::gbm::GBTree::ModelParam::SetParam(xgboost_old::gbm::GBTree::ModelParam *this, const char *a2, const char *a3)
{
  uint64_t result;

  if (!strcmp("num_pbuffer", a2))
    *((_QWORD *)this + 2) = atol(a3);
  if (!strcmp("num_output_group", a2))
    *((_DWORD *)this + 6) = atol(a3);
  if (!strcmp("bst:num_roots", a2))
    *((_DWORD *)this + 1) = atoi(a3);
  if (!strcmp("bst:num_feature", a2))
    *((_DWORD *)this + 2) = atoi(a3);
  result = strcmp("bst:size_leaf_vector", a2);
  if (!(_DWORD)result)
  {
    result = atoi(a3);
    *((_DWORD *)this + 7) = result;
  }
  return result;
}

_QWORD *xgboost_old::gbm::GBTree::Clear(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v1 = this;
  v2 = this[26];
  v3 = this[27];
  if (v3 == v2)
  {
    v2 = this[27];
  }
  else
  {
    v4 = 0;
    do
    {
      v5 = *(_QWORD *)(v2 + 8 * v4);
      if (v5)
      {
        v6 = *(void **)(v5 + 72);
        if (v6)
        {
          *(_QWORD *)(v5 + 80) = v6;
          operator delete(v6);
        }
        v7 = *(void **)(v5 + 48);
        if (v7)
        {
          *(_QWORD *)(v5 + 56) = v7;
          operator delete(v7);
        }
        v8 = *(void **)(v5 + 24);
        if (v8)
        {
          *(_QWORD *)(v5 + 32) = v8;
          operator delete(v8);
        }
        v9 = *(void **)v5;
        if (*(_QWORD *)v5)
        {
          *(_QWORD *)(v5 + 8) = v9;
          operator delete(v9);
        }
        this = (_QWORD *)MEMORY[0x219A19A08](v5, 0x10B0C406D2B3AE9);
        v2 = v1[26];
        v3 = v1[27];
      }
      ++v4;
    }
    while (v4 < (v3 - v2) >> 3);
  }
  v10 = v1[44];
  v11 = v1[45];
  if (v11 == v10)
  {
    v10 = v1[45];
  }
  else
  {
    v12 = 0;
    do
    {
      this = *(_QWORD **)(v10 + 8 * v12);
      if (this)
      {
        this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 32))(this);
        v10 = v1[44];
        v11 = v1[45];
      }
      ++v12;
    }
    while (v12 < (v11 - v10) >> 3);
    v2 = v1[26];
  }
  v1[45] = v10;
  v1[27] = v2;
  v1[33] = v1[32];
  v1[36] = v1[35];
  return this;
}

uint64_t xgboost_old::utils::Check(uint64_t this, const char *a2, const char *a3, ...)
{
  void *v4;
  std::runtime_error *exception;
  va_list va;

  va_start(va, a3);
  if ((this & 1) == 0)
  {
    v4 = operator new(0x1008uLL);
    bzero(v4, 0x1001uLL);
    vsnprintf((char *)v4, 0x1000uLL, a2, va);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, (const char *)v4);
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  return this;
}

void sub_2183C2E70(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t xgboost_old::tree::TreeModel<float,xgboost_old::tree::RTreeNodeStat>::LoadModel(uint64_t a1, uint64_t (***a2)(_QWORD, uint64_t, uint64_t))
{
  _BOOL8 v4;
  const char *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  const char *v15;
  uint64_t v16;
  const char *v17;
  unint64_t v18;
  void **v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  _DWORD *v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  int v33;
  unint64_t v35;

  v4 = (**a2)(a2, a1 + 96, 148) != 0;
  xgboost_old::utils::Check(v4, "TreeModel: wrong format", v5);
  std::vector<xgboost_old::tree::TreeModel<float,xgboost_old::tree::RTreeNodeStat>::Node,std::allocator<xgboost_old::tree::TreeModel<float,xgboost_old::tree::RTreeNodeStat>::Node>>::resize(a1, *(int *)(a1 + 100));
  std::vector<xgboost_old::tree::RTreeNodeStat>::resize(a1 + 48, *(int *)(a1 + 100));
  xgboost_old::utils::Assert(*(_DWORD *)(a1 + 100) != 0, "invalid model", v6);
  v7 = *(_QWORD *)(a1 + 8);
  if (v7 == *(_QWORD *)a1)
    v8 = 0;
  else
    v8 = *(_QWORD *)a1;
  v9 = (**a2)(a2, v8, v7 - *(_QWORD *)a1) != 0;
  xgboost_old::utils::Check(v9, "TreeModel: wrong format", v10);
  v12 = *(_QWORD *)(a1 + 48);
  v11 = *(_QWORD *)(a1 + 56);
  if (v11 == v12)
    v13 = 0;
  else
    v13 = *(_QWORD *)(a1 + 48);
  v14 = (**a2)(a2, v13, v11 - v12) != 0;
  xgboost_old::utils::Check(v14, "TreeModel: wrong format", v15);
  if (*(_DWORD *)(a1 + 116))
  {
    v35 = 0;
    v16 = (**a2)(a2, (uint64_t)&v35, 8);
    if (v16)
    {
      v18 = v35;
      std::vector<float>::resize(a1 + 72, v35);
      if (!v35 || (v16 = (**a2)(a2, *(_QWORD *)(a1 + 72), 4 * v18)) != 0)
        v16 = 1;
    }
    xgboost_old::utils::Check(v16, "TreeModel: wrong format", v17);
  }
  v19 = (void **)(a1 + 24);
  std::vector<int>::resize((std::vector<unsigned int> *)(a1 + 24), 0);
  v21 = *(unsigned int *)(a1 + 100);
  v22 = *(int *)(a1 + 96);
  if ((int)v22 < (int)v21)
  {
    do
    {
      if (*(_DWORD *)(*(_QWORD *)a1 + 20 * v22 + 12) == -1)
      {
        v24 = *(char **)(a1 + 32);
        v23 = *(_QWORD *)(a1 + 40);
        if ((unint64_t)v24 >= v23)
        {
          v26 = (char *)*v19;
          v27 = (v24 - (_BYTE *)*v19) >> 2;
          v28 = v27 + 1;
          if ((unint64_t)(v27 + 1) >> 62)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          v29 = v23 - (_QWORD)v26;
          if (v29 >> 1 > v28)
            v28 = v29 >> 1;
          if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFFCLL)
            v30 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v30 = v28;
          if (v30)
          {
            v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(a1 + 40, v30);
            v26 = *(char **)(a1 + 24);
            v24 = *(char **)(a1 + 32);
          }
          else
          {
            v31 = 0;
          }
          v32 = &v31[4 * v27];
          *(_DWORD *)v32 = v22;
          v25 = v32 + 4;
          while (v24 != v26)
          {
            v33 = *((_DWORD *)v24 - 1);
            v24 -= 4;
            *((_DWORD *)v32 - 1) = v33;
            v32 -= 4;
          }
          *(_QWORD *)(a1 + 24) = v32;
          *(_QWORD *)(a1 + 32) = v25;
          *(_QWORD *)(a1 + 40) = &v31[4 * v30];
          if (v26)
            operator delete(v26);
        }
        else
        {
          *(_DWORD *)v24 = v22;
          v25 = v24 + 4;
        }
        *(_QWORD *)(a1 + 32) = v25;
        v21 = *(unsigned int *)(a1 + 100);
      }
      ++v22;
    }
    while (v22 < (int)v21);
  }
  return xgboost_old::utils::Assert(*(_DWORD *)(a1 + 104) == ((uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 2), "number of deleted nodes do not match, num_deleted=%d, dnsize=%lu, num_nodes=%d", v20, *(unsigned int *)(a1 + 104), (uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 2, v21);
}

_OWORD *xgboost_old::tree::TreeModel<float,xgboost_old::tree::RTreeNodeStat>::TreeModel(_OWORD *a1)
{
  a1[3] = 0u;
  *(_OWORD *)((char *)a1 + 228) = 0u;
  *(_OWORD *)((char *)a1 + 212) = 0u;
  *(_OWORD *)((char *)a1 + 196) = 0u;
  *(_OWORD *)((char *)a1 + 180) = 0u;
  *(_OWORD *)((char *)a1 + 164) = 0u;
  *(_OWORD *)((char *)a1 + 148) = 0u;
  *(_OWORD *)((char *)a1 + 132) = 0u;
  *(_OWORD *)((char *)a1 + 116) = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[6] = xmmword_2186C17C0;
  std::vector<xgboost_old::tree::TreeModel<float,xgboost_old::tree::RTreeNodeStat>::Node,std::allocator<xgboost_old::tree::TreeModel<float,xgboost_old::tree::RTreeNodeStat>::Node>>::resize((uint64_t)a1, 1uLL);
  return a1;
}

void sub_2183C3198(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;

  v5 = *(void **)(v1 + 72);
  if (v5)
  {
    *(_QWORD *)(v1 + 80) = v5;
    operator delete(v5);
  }
  xgboost_old::tree::TreeModel<float,xgboost_old::tree::RTreeNodeStat>::TreeModel(v2, v3, v1);
  _Unwind_Resume(a1);
}

void std::vector<xgboost_old::tree::TreeModel<float,xgboost_old::tree::RTreeNodeStat>::Node,std::allocator<xgboost_old::tree::TreeModel<float,xgboost_old::tree::RTreeNodeStat>::Node>>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;

  v2 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2);
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<xgboost_old::tree::TreeModel<float,xgboost_old::tree::RTreeNodeStat>::Node,std::allocator<xgboost_old::tree::TreeModel<float,xgboost_old::tree::RTreeNodeStat>::Node>>::__append((void **)a1, v4);
  }
  else if (!v3)
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 20 * a2;
  }
}

void std::vector<xgboost_old::tree::TreeModel<float,xgboost_old::tree::RTreeNodeStat>::Node,std::allocator<xgboost_old::tree::TreeModel<float,xgboost_old::tree::RTreeNodeStat>::Node>>::__append(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  void *v13;
  uint64_t v14;
  _DWORD *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  _DWORD *v19;
  char *v20;
  char *v21;
  char *v22;
  __int128 v23;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v6[-v7] >> 2) >= a2)
  {
    if (a2)
    {
      v13 = (void *)(v7 + 20 * a2);
      v14 = 20 * a2;
      v15 = (_DWORD *)(v7 + 12);
      do
      {
        *v15 = 0;
        v15 += 5;
        v14 -= 20;
      }
      while (v14);
    }
    else
    {
      v13 = *(void **)(v4 - 8);
    }
    a1[1] = v13;
  }
  else
  {
    v8 = 0xCCCCCCCCCCCCCCCDLL * ((v7 - (uint64_t)*a1) >> 2);
    v9 = v8 + a2;
    if (v8 + a2 > 0xCCCCCCCCCCCCCCCLL)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - (_BYTE *)*a1) >> 2);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x666666666666666)
      v11 = 0xCCCCCCCCCCCCCCCLL;
    else
      v11 = v9;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<xgboost_old::tree::TreeModel<float,xgboost_old::tree::RTreeNodeStat>::Node>>(v4, v11);
    else
      v12 = 0;
    v16 = &v12[20 * v8];
    v17 = &v16[20 * a2];
    v18 = 20 * a2;
    v19 = v16 + 12;
    do
    {
      *v19 = 0;
      v19 += 5;
      v18 -= 20;
    }
    while (v18);
    v20 = &v12[20 * v11];
    v22 = (char *)*a1;
    v21 = (char *)a1[1];
    if (v21 != *a1)
    {
      do
      {
        v23 = *(_OWORD *)(v21 - 20);
        *((_DWORD *)v16 - 1) = *((_DWORD *)v21 - 1);
        *(_OWORD *)(v16 - 20) = v23;
        v16 -= 20;
        v21 -= 20;
      }
      while (v21 != v22);
      v21 = (char *)*a1;
    }
    *a1 = v16;
    a1[1] = v17;
    a1[2] = v20;
    if (v21)
      operator delete(v21);
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<xgboost_old::tree::TreeModel<float,xgboost_old::tree::RTreeNodeStat>::Node>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xCCCCCCCCCCCCCCDLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(20 * a2);
}

void std::vector<xgboost_old::tree::RTreeNodeStat>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 4;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 16 * a2;
  }
  else
  {
    std::vector<xgboost_old::tree::RTreeNodeStat>::__append((void **)a1, a2 - v2);
  }
}

uint64_t xgboost_old::utils::Assert(uint64_t this, const char *a2, const char *a3, ...)
{
  void *v4;
  va_list va;

  va_start(va, a3);
  if ((this & 1) == 0)
  {
    v4 = operator new(0x1008uLL);
    bzero(v4, 0x1001uLL);
    vsnprintf((char *)v4, 0x1000uLL, a2, va);
    fprintf((FILE *)*MEMORY[0x24BDAC8D8], "AssertError:%s\n", (const char *)v4);
    exit(-1);
  }
  return this;
}

void sub_2183C3454(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::vector<xgboost_old::tree::RTreeNodeStat>::__append(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 4)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 16 * a2);
      v7 += 16 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = v7 - (_BYTE *)*a1;
    v9 = a2 + (v8 >> 4);
    if (v9 >> 60)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 4;
    v11 = v5 - (_BYTE *)*a1;
    if (v11 >> 3 > v9)
      v9 = v11 >> 3;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
      v12 = 0xFFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::flexible_type>>(v4, v12);
    else
      v13 = 0;
    v14 = &v13[16 * v10];
    v15 = &v13[16 * v12];
    bzero(v14, 16 * a2);
    v16 = &v14[16 * a2];
    v18 = (char *)*a1;
    v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        *((_OWORD *)v14 - 1) = *((_OWORD *)v17 - 1);
        v14 -= 16;
        v17 -= 16;
      }
      while (v17 != v18);
      v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
      operator delete(v17);
  }
}

uint64_t xgboost_old::tree::TreeModel<float,xgboost_old::tree::RTreeNodeStat>::SaveModel(uint64_t *a1, uint64_t a2, const char *a3)
{
  uint64_t *v5;
  const char *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;

  v5 = a1 + 12;
  xgboost_old::utils::Assert(*((_DWORD *)a1 + 25) == -858993459 * ((unint64_t)(a1[1] - *a1) >> 2), "Tree::SaveModel", a3);
  xgboost_old::utils::Assert(*((_DWORD *)a1 + 25) == ((unint64_t)(a1[7] - a1[6]) >> 4), "Tree::SaveModel", v6);
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a2 + 8))(a2, v5, 148);
  xgboost_old::utils::Assert(*((_DWORD *)a1 + 25) != 0, "invalid model", v7);
  v8 = a1[1];
  if (v8 == *a1)
    v9 = 0;
  else
    v9 = *a1;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 8))(a2, v9, v8 - *a1);
  if (a1[7] == a1[6])
    v10 = 0;
  else
    v10 = a1[6];
  result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)a2 + 8))(a2, v10, 0xCCCCCCCCCCCCCCD0 * ((unint64_t)(a1[1] - *a1) >> 2));
  if (*((_DWORD *)a1 + 29))
  {
    v12 = (a1[10] - a1[9]) >> 2;
    result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a2 + 8))(a2, &v12, 8);
    if (v12)
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 8))(a2, a1[9], a1[10] - a1[9]);
  }
  return result;
}

uint64_t xgboost_old::tree::RegTree::LoadLegacyModel(xgboost_old::tree::RegTree *this, dmlc::Stream *a2)
{
  _BOOL8 v4;
  const char *v5;
  const char *v6;
  void *v7;
  _BOOL8 v8;
  const char *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  float v14;
  void *v15;
  _BOOL8 v16;
  const char *v17;
  uint64_t v18;
  _BYTE *v19;
  double *v20;
  float *v21;
  float v22;
  int v23;
  uint64_t v24;
  const char *v25;
  unint64_t v26;
  _BYTE *v27;
  unint64_t v28;
  float *v29;
  double *v30;
  double v31;
  float v32;
  void **v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  _DWORD *v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  char *v46;
  int v47;
  void *__p;
  _BYTE *v50;
  uint64_t v51;
  unint64_t v52;

  v4 = (**(uint64_t (***)(dmlc::Stream *, char *, uint64_t))a2)(a2, (char *)this + 96, 148) != 0;
  xgboost_old::utils::Check(v4, "TreeModel: wrong format", v5);
  std::vector<xgboost_old::tree::TreeModel<float,xgboost_old::tree::RTreeNodeStat>::Node,std::allocator<xgboost_old::tree::TreeModel<float,xgboost_old::tree::RTreeNodeStat>::Node>>::resize((uint64_t)this, *((int *)this + 25));
  std::vector<xgboost_old::tree::RTreeNodeStat>::resize((uint64_t)this + 48, *((int *)this + 25));
  xgboost_old::utils::Assert(*((_DWORD *)this + 25) != 0, "invalid model", v6);
  __p = 0;
  v50 = 0;
  v51 = 0;
  std::vector<xgboost_old::tree::LegacyNode>::resize((uint64_t)&__p, *((int *)this + 25));
  if (v50 == __p)
    v7 = 0;
  else
    v7 = __p;
  v8 = (**(uint64_t (***)(dmlc::Stream *, void *, int64_t))a2)(a2, v7, v50 - (_BYTE *)__p) != 0;
  xgboost_old::utils::Check(v8, "TreeModel: wrong format", v9);
  v10 = *((_DWORD *)this + 25);
  if (v10)
  {
    v11 = 0;
    v12 = 0;
    v13 = 0;
    do
    {
      *(_OWORD *)(*(_QWORD *)this + v12) = *(_OWORD *)((char *)__p + v11);
      v14 = *(double *)((char *)__p + v11 + 16);
      *(float *)(*(_QWORD *)this + v12 + 16) = v14;
      ++v13;
      v12 += 20;
      v11 += 24;
    }
    while (v13 < *((int *)this + 25));
    v10 = *((_DWORD *)this + 25);
  }
  if (__p)
  {
    v50 = __p;
    operator delete(__p);
    v10 = *((_DWORD *)this + 25);
  }
  __p = 0;
  v50 = 0;
  v51 = 0;
  std::vector<xgboost_old::tree::LegacyRTreeNodeStat>::resize((uint64_t)&__p, v10);
  if (v50 == __p)
    v15 = 0;
  else
    v15 = __p;
  v16 = (**(uint64_t (***)(dmlc::Stream *, void *, int64_t))a2)(a2, v15, v50 - (_BYTE *)__p) != 0;
  xgboost_old::utils::Check(v16, "TreeModel: wrong format", v17);
  v18 = *((int *)this + 25);
  v19 = __p;
  if ((_DWORD)v18)
  {
    v20 = (double *)((char *)__p + 24);
    v21 = (float *)(*((_QWORD *)this + 6) + 12);
    do
    {
      *(float32x2_t *)(v21 - 3) = vcvt_f32_f64(*(float64x2_t *)(v20 - 3));
      v22 = *(v20 - 1);
      *(v21 - 1) = v22;
      v23 = *(_DWORD *)v20;
      v20 += 4;
      *(_DWORD *)v21 = v23;
      v21 += 4;
      --v18;
    }
    while (v18);
  }
  else if (!__p)
  {
    goto LABEL_19;
  }
  v50 = v19;
  operator delete(v19);
LABEL_19:
  if (!*((_DWORD *)this + 29))
    goto LABEL_32;
  __p = 0;
  v50 = 0;
  v51 = 0;
  v52 = 0;
  v24 = (**(uint64_t (***)(dmlc::Stream *, unint64_t *, uint64_t))a2)(a2, &v52, 8);
  if (v24)
  {
    v26 = v52;
    std::vector<double>::resize((uint64_t)&__p, v52);
    if (!v52 || (v24 = (**(uint64_t (***)(dmlc::Stream *, void *, uint64_t))a2)(a2, __p, 8 * v26)) != 0)
      v24 = 1;
  }
  xgboost_old::utils::Check(v24, "TreeModel: wrong format", v25);
  v27 = __p;
  if (v50 == __p)
  {
    if (!__p)
      goto LABEL_32;
  }
  else
  {
    v28 = (v50 - (_BYTE *)__p) >> 3;
    v29 = (float *)*((_QWORD *)this + 9);
    if (v28 <= 1)
      v28 = 1;
    v30 = (double *)__p;
    do
    {
      v31 = *v30++;
      v32 = v31;
      *v29++ = v32;
      --v28;
    }
    while (v28);
  }
  v50 = v27;
  operator delete(v27);
LABEL_32:
  v33 = (void **)((char *)this + 24);
  std::vector<int>::resize((std::vector<unsigned int> *)this + 1, 0);
  v35 = *((unsigned int *)this + 25);
  v36 = *((int *)this + 24);
  if ((int)v36 < (int)v35)
  {
    do
    {
      if (*(_DWORD *)(*(_QWORD *)this + 20 * v36 + 12) == -1)
      {
        v38 = (char *)*((_QWORD *)this + 4);
        v37 = *((_QWORD *)this + 5);
        if ((unint64_t)v38 >= v37)
        {
          v40 = (char *)*v33;
          v41 = (v38 - (_BYTE *)*v33) >> 2;
          v42 = v41 + 1;
          if ((unint64_t)(v41 + 1) >> 62)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          v43 = v37 - (_QWORD)v40;
          if (v43 >> 1 > v42)
            v42 = v43 >> 1;
          if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFFCLL)
            v44 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v44 = v42;
          if (v44)
          {
            v45 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)this + 40, v44);
            v40 = (char *)*((_QWORD *)this + 3);
            v38 = (char *)*((_QWORD *)this + 4);
          }
          else
          {
            v45 = 0;
          }
          v46 = &v45[4 * v41];
          *(_DWORD *)v46 = v36;
          v39 = v46 + 4;
          while (v38 != v40)
          {
            v47 = *((_DWORD *)v38 - 1);
            v38 -= 4;
            *((_DWORD *)v46 - 1) = v47;
            v46 -= 4;
          }
          *((_QWORD *)this + 3) = v46;
          *((_QWORD *)this + 4) = v39;
          *((_QWORD *)this + 5) = &v45[4 * v44];
          if (v40)
            operator delete(v40);
        }
        else
        {
          *(_DWORD *)v38 = v36;
          v39 = v38 + 4;
        }
        *((_QWORD *)this + 4) = v39;
        v35 = *((unsigned int *)this + 25);
      }
      ++v36;
    }
    while (v36 < (int)v35);
  }
  return xgboost_old::utils::Assert(*((_DWORD *)this + 26) == ((uint64_t)(*((_QWORD *)this + 4) - *((_QWORD *)this + 3)) >> 2), "number of deleted nodes do not match, num_deleted=%d, dnsize=%lu, num_nodes=%d", v34, *((unsigned int *)this + 26), (uint64_t)(*((_QWORD *)this + 4) - *((_QWORD *)this + 3)) >> 2, v35);
}

void sub_2183C3A8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::vector<xgboost_old::tree::LegacyNode>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;

  v2 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3);
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<xgboost_old::tree::LegacyNode>::__append((void **)a1, v4);
  }
  else if (!v3)
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 24 * a2;
  }
}

void std::vector<xgboost_old::tree::LegacyRTreeNodeStat>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 5;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 32 * a2;
  }
  else
  {
    std::vector<xgboost_old::tree::LegacyRTreeNodeStat>::__append((void **)a1, a2 - v2);
  }
}

void std::vector<xgboost_old::tree::LegacyNode>::__append(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  char *v14;
  char *v15;
  size_t v16;
  char *v17;
  char *v18;
  char *v19;
  __int128 v20;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (_BYTE *)*a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (_BYTE *)*a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>(v4, v11);
    else
      v12 = 0;
    v14 = &v12[24 * v8];
    v15 = &v12[24 * v11];
    v16 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v14, v16);
    v17 = &v14[v16];
    v19 = (char *)*a1;
    v18 = (char *)a1[1];
    if (v18 != *a1)
    {
      do
      {
        v20 = *(_OWORD *)(v18 - 24);
        *((_QWORD *)v14 - 1) = *((_QWORD *)v18 - 1);
        *(_OWORD *)(v14 - 24) = v20;
        v14 -= 24;
        v18 -= 24;
      }
      while (v18 != v19);
      v18 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v17;
    a1[2] = v15;
    if (v18)
      operator delete(v18);
  }
}

void std::vector<xgboost_old::tree::LegacyRTreeNodeStat>::__append(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  __int128 v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 5)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 32 * a2);
      v7 += 32 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = v7 - (_BYTE *)*a1;
    v9 = a2 + (v8 >> 5);
    if (v9 >> 59)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 5;
    v11 = v5 - (_BYTE *)*a1;
    if (v11 >> 4 > v9)
      v9 = v11 >> 4;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0)
      v12 = 0x7FFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>>(v4, v12);
    else
      v13 = 0;
    v14 = &v13[32 * v10];
    v15 = &v13[32 * v12];
    bzero(v14, 32 * a2);
    v16 = &v14[32 * a2];
    v18 = (char *)*a1;
    v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        v19 = *((_OWORD *)v17 - 1);
        *((_OWORD *)v14 - 2) = *((_OWORD *)v17 - 2);
        *((_OWORD *)v14 - 1) = v19;
        v14 -= 32;
        v17 -= 32;
      }
      while (v17 != v18);
      v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
      operator delete(v17);
  }
}

void std::vector<float>::resize(uint64_t a1, unint64_t a2, _DWORD *a3)
{
  unint64_t v3;

  v3 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2;
  if (a2 <= v3)
  {
    if (a2 < v3)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 4 * a2;
  }
  else
  {
    std::vector<float>::__append((void **)a1, a2 - v3, a3);
  }
}

void std::vector<unsigned int>::resize(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __sz, std::vector<unsigned int>::const_reference __x)
{
  std::vector<unsigned int>::size_type v3;

  v3 = this->__end_ - this->__begin_;
  if (__sz <= v3)
  {
    if (__sz < v3)
      this->__end_ = &this->__begin_[__sz];
  }
  else
  {
    std::vector<unsigned int>::__append(this, __sz - v3, __x);
  }
}

void std::vector<float>::__append(void **a1, unint64_t a2, _DWORD *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  _DWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  _DWORD *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *i;
  int v25;

  v8 = a1[2];
  v6 = (uint64_t)(a1 + 2);
  v7 = v8;
  v9 = *(_DWORD **)(v6 - 8);
  if (a2 <= (v8 - (_BYTE *)v9) >> 2)
  {
    if (a2)
    {
      v16 = 4 * a2;
      v17 = &v9[a2];
      do
      {
        *v9++ = *a3;
        v16 -= 4;
      }
      while (v16);
      v9 = v17;
    }
    a1[1] = v9;
  }
  else
  {
    v10 = (char *)v9 - (_BYTE *)*a1;
    v11 = a2 + (v10 >> 2);
    if (v11 >> 62)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v12 = v10 >> 2;
    v13 = v7 - (_BYTE *)*a1;
    if (v13 >> 1 > v11)
      v11 = v13 >> 1;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL)
      v14 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v14 = v11;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v6, v14);
    else
      v15 = 0;
    v18 = &v15[4 * v12];
    v19 = &v18[4 * a2];
    v20 = 4 * a2;
    v21 = v18;
    do
    {
      *(_DWORD *)v21 = *a3;
      v21 += 4;
      v20 -= 4;
    }
    while (v20);
    v22 = &v15[4 * v14];
    v23 = (char *)*a1;
    for (i = (char *)a1[1]; i != v23; i -= 4)
    {
      v25 = *((_DWORD *)i - 1);
      *((_DWORD *)v18 - 1) = v25;
      v18 -= 4;
    }
    *a1 = v18;
    a1[1] = v19;
    a1[2] = v22;
    if (v23)
      operator delete(v23);
  }
}

void std::vector<unsigned int>::__append(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __n, std::vector<unsigned int>::const_reference __x)
{
  std::__compressed_pair<unsigned int *> *p_end_cap;
  unsigned int *v7;
  unsigned int *value;
  unsigned int *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  std::vector<unsigned int>::size_type v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int *v19;
  std::vector<unsigned int>::size_type v20;
  unsigned int *v21;
  unsigned int *v22;
  std::vector<unsigned int>::pointer begin;
  std::vector<unsigned int>::pointer i;
  unsigned int v25;

  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  v7 = value;
  v9 = p_end_cap[-1].__value_;
  if (__n <= value - v9)
  {
    if (__n)
    {
      v16 = 4 * __n;
      v17 = &v9[__n];
      do
      {
        *v9++ = *__x;
        v16 -= 4;
      }
      while (v16);
      v9 = v17;
    }
    this->__end_ = v9;
  }
  else
  {
    v10 = (char *)v9 - (char *)this->__begin_;
    v11 = __n + (v10 >> 2);
    if (v11 >> 62)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v12 = v10 >> 2;
    v13 = (char *)v7 - (char *)this->__begin_;
    if (v13 >> 1 > v11)
      v11 = v13 >> 1;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL)
      v14 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v14 = v11;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)p_end_cap, v14);
    else
      v15 = 0;
    v18 = (unsigned int *)&v15[4 * v12];
    v19 = &v18[__n];
    v20 = 4 * __n;
    v21 = v18;
    do
    {
      *v21++ = *__x;
      v20 -= 4;
    }
    while (v20);
    v22 = (unsigned int *)&v15[4 * v14];
    begin = this->__begin_;
    for (i = this->__end_; i != begin; --i)
    {
      v25 = *(i - 1);
      *--v18 = v25;
    }
    this->__begin_ = v18;
    this->__end_ = v19;
    this->__end_cap_.__value_ = v22;
    if (begin)
      operator delete(begin);
  }
}

uint64_t std::vector<std::vector<xgboost_old::tree::RegTree *>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  _QWORD v16[5];

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD **)(result - 8);
  if ((unint64_t)v7 >= v6)
  {
    v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x555555555555555)
      v12 = 0xAAAAAAAAAAAAAAALL;
    else
      v12 = v10;
    v16[4] = result;
    v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>(result, v12);
    v14 = &v13[24 * v9];
    v16[0] = v13;
    v16[1] = v14;
    v16[3] = &v13[24 * v15];
    *((_QWORD *)v14 + 1) = 0;
    *((_QWORD *)v14 + 2) = 0;
    *(_QWORD *)v14 = 0;
    *(_OWORD *)v14 = *(_OWORD *)a2;
    *((_QWORD *)v14 + 2) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v16[2] = v14 + 24;
    std::vector<std::vector<xgboost_old::tree::RegTree *>>::__swap_out_circular_buffer(a1, v16);
    v8 = (_QWORD *)a1[1];
    result = std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)v16);
  }
  else
  {
    *v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
    *(_OWORD *)v7 = *(_OWORD *)a2;
    v7[2] = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return result;
}

void sub_2183C414C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void xgboost_old::gbm::GBTree::BoostNewTrees(xgboost_old::gbm::GBTree *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, int a6@<W5>, uint64_t **a7@<X8>)
{
  xgboost_old::gbm::GBTree *v7;
  uint64_t **v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  const char *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v40;
  _QWORD *v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  unint64_t v46;
  uint64_t v49;
  xgboost_old::gbm::GBTree *v50;
  uint64_t **v51;
  _QWORD v55[6];
  uint64_t v56;
  int v57;
  uint64_t v58;

  v7 = a1;
  v8 = a7;
  *a7 = 0;
  a7[1] = 0;
  a7[2] = 0;
  xgboost_old::gbm::GBTree::InitUpdater(a1);
  if (*((int *)v7 + 3) >= 1)
  {
    v9 = 0;
    v49 = (uint64_t)(v8 + 2);
    v50 = v7;
    v51 = v8;
    do
    {
      v10 = operator new();
      *(_QWORD *)(v10 + 240) = 0;
      *(_OWORD *)(v10 + 208) = 0u;
      *(_OWORD *)(v10 + 224) = 0u;
      *(_OWORD *)(v10 + 176) = 0u;
      *(_OWORD *)(v10 + 192) = 0u;
      *(_OWORD *)(v10 + 144) = 0u;
      *(_OWORD *)(v10 + 160) = 0u;
      *(_OWORD *)(v10 + 112) = 0u;
      *(_OWORD *)(v10 + 128) = 0u;
      *(_OWORD *)(v10 + 80) = 0u;
      *(_OWORD *)(v10 + 96) = 0u;
      *(_OWORD *)(v10 + 48) = 0u;
      *(_OWORD *)(v10 + 64) = 0u;
      *(_OWORD *)(v10 + 16) = 0u;
      *(_OWORD *)(v10 + 32) = 0u;
      *(_OWORD *)v10 = 0u;
      xgboost_old::tree::TreeModel<float,xgboost_old::tree::RTreeNodeStat>::TreeModel((_OWORD *)v10);
      v12 = v8[1];
      v11 = (unint64_t)v8[2];
      if ((unint64_t)v12 >= v11)
      {
        v14 = v12 - *v8;
        if ((unint64_t)(v14 + 1) >> 61)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v15 = v11 - (_QWORD)*v8;
        v16 = v15 >> 2;
        if (v15 >> 2 <= (unint64_t)(v14 + 1))
          v16 = v14 + 1;
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
          v17 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v17 = v16;
        if (v17)
          v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v49, v17);
        else
          v18 = 0;
        v19 = (uint64_t *)&v18[8 * v14];
        *v19 = v10;
        v13 = v19 + 1;
        v21 = (char *)*v8;
        v20 = (char *)v8[1];
        if (v20 != (char *)*v8)
        {
          do
          {
            v22 = *((_QWORD *)v20 - 1);
            v20 -= 8;
            *--v19 = v22;
          }
          while (v20 != v21);
          v20 = (char *)*v8;
        }
        *v8 = v19;
        v8[1] = v13;
        v8[2] = (uint64_t *)&v18[8 * v17];
        if (v20)
          operator delete(v20);
      }
      else
      {
        *v12 = v10;
        v13 = v12 + 1;
      }
      v8[1] = v13;
      v23 = *((_QWORD *)v7 + 38);
      v24 = *((_QWORD *)v7 + 39) - v23;
      if (v24)
      {
        v25 = v24 / 48;
        v26 = *(v13 - 1);
        if (v25 <= 1)
          v27 = 1;
        else
          v27 = v25;
        do
        {
          v28 = (const char *)v23;
          if (*(char *)(v23 + 23) < 0)
            v28 = *(const char **)v23;
          v29 = (const char *)(v23 + 24);
          if (*(char *)(v23 + 47) < 0)
            v29 = *(const char **)v29;
          if (!strcmp("num_roots", v28))
            *(_DWORD *)(v26 + 96) = atoi(v29);
          if (!strcmp("num_feature", v28))
            *(_DWORD *)(v26 + 112) = atoi(v29);
          if (!strcmp("size_leaf_vector", v28))
            *(_DWORD *)(v26 + 116) = atoi(v29);
          v23 += 48;
          --v27;
        }
        while (v27);
        v7 = v50;
        v8 = v51;
      }
      else
      {
        v26 = *(v13 - 1);
      }
      v30 = *(int *)(v26 + 96);
      *(_DWORD *)(v26 + 100) = v30;
      std::vector<xgboost_old::tree::TreeModel<float,xgboost_old::tree::RTreeNodeStat>::Node,std::allocator<xgboost_old::tree::TreeModel<float,xgboost_old::tree::RTreeNodeStat>::Node>>::resize(v26, v30);
      std::vector<xgboost_old::tree::RTreeNodeStat>::resize(v26 + 48, *(int *)(v26 + 100));
      v31 = *(int *)(v26 + 116) * (uint64_t)*(int *)(v26 + 100);
      LODWORD(v55[0]) = 0;
      std::vector<float>::resize(v26 + 72, v31, v55);
      if (*(int *)(v26 + 100) >= 1)
      {
        v32 = 0;
        v33 = 0;
        v34 = *(_QWORD *)v26;
        do
        {
          v35 = v34 + v32;
          *(_DWORD *)(v35 + 16) = 0;
          *(_QWORD *)(v35 + 4) = -1;
          v34 = *(_QWORD *)v26;
          *(_DWORD *)(*(_QWORD *)v26 + v32) = -1;
          ++v33;
          v32 += 20;
        }
        while (v33 < *(int *)(v26 + 100));
      }
      ++v9;
    }
    while (v9 < *((_DWORD *)v7 + 3));
  }
  v37 = *((_QWORD *)v7 + 44);
  v36 = *((_QWORD *)v7 + 45);
  if (v36 == v37)
  {
    v37 = *((_QWORD *)v7 + 45);
  }
  else
  {
    v38 = 0;
    do
    {
      (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t *, uint64_t **))(**(_QWORD **)(v37 + 8 * v38) + 8))(*(_QWORD *)(v37 + 8 * v38), a2, a3, a5, v8);
      ++v38;
      v37 = *((_QWORD *)v7 + 44);
      v36 = *((_QWORD *)v7 + 45);
    }
    while (v38 < (v36 - v37) >> 3);
  }
  if ((a4 & 0x8000000000000000) == 0 && v36 != v37 && (char *)v8[1] - (char *)*v8 == 8)
  {
    if ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v36 - 8) + 16))(*(_QWORD *)(v36 - 8)))
    {
      v40 = *a5;
      v41 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 64))(a3);
      xgboost_old::utils::Check(v40 == (uint64_t)(v41[1] - *v41) >> 2, "distributed mode is not compatible with prob_buffer_row", v42);
      v43 = **v8;
      v44 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)v7 + 45) - 8) + 16))(*(_QWORD *)(*((_QWORD *)v7 + 45) - 8));
      v58 = a4;
      v57 = a6;
      v56 = v44;
      v45 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 64))(a3);
      v46 = ((v45[1] - *v45) >> 2);
      v55[0] = v45;
      v55[1] = v7;
      v55[2] = &v58;
      v55[3] = &v57;
      v55[4] = &v56;
      v55[5] = v43;
      turi::parallel_for<xgboost_old::gbm::GBTree::UpdateBufferByPosition(xgboost_old::IFMatrix *,long long,int,xgboost_old::tree::RegTree const&,int const*)::{lambda(unsigned long)#1}>(0, v46, (uint64_t)v55);
    }
  }
}

void sub_2183C4558(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;
  void *v16;

  v16 = *(void **)v14;
  if (*(_QWORD *)v14)
  {
    *(_QWORD *)(v14 + 8) = v16;
    operator delete(v16);
  }
  _Unwind_Resume(exception_object);
}

void turi::parallel_for<xgboost_old::gbm::GBTree::DoBoost(xgboost_old::IFMatrix *,long long,xgboost_old::BoosterInfo const&,std::vector<xgboost_old::bst_gpair> *)::{lambda(unsigned long)#1}>(turi::thread_pool *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v5;
  turi::thread_pool *instance;
  turi::thread *v7;
  turi::thread_pool *tls_data;
  BOOL v9;
  turi::thread_pool *v10;
  uint64_t v11;
  double v12;
  double v13;
  turi::thread *v14;
  unint64_t v15;
  uint64_t v16[4];
  _BYTE v17[192];
  uint64_t v18;

  v5 = (unint64_t)a1;
  v18 = *MEMORY[0x24BDAC8D0];
  instance = (turi::thread_pool *)turi::thread_pool::get_instance(a1);
  v7 = (turi::thread *)turi::thread_pool::size(instance);
  tls_data = (turi::thread_pool *)turi::thread::get_tls_data(v7);
  if (*((_BYTE *)tls_data + 8))
    v9 = 0;
  else
    v9 = (unint64_t)v7 > 1;
  if (v9)
  {
    v10 = (turi::thread_pool *)turi::thread_pool::get_instance(tls_data);
    turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)v17, v10);
    v11 = 0;
    v12 = (double)(a2 - v5) / (double)(unint64_t)v7;
    v13 = (double)v5;
    do
    {
      v14 = (turi::thread *)(v11 + 1);
      v15 = (unint64_t)(v13 + v12 * (double)(unint64_t)(v11 + 1));
      if ((turi::thread *)v11 == (turi::thread *)((char *)v7 - 1))
        v15 = a2;
      v16[2] = (unint64_t)(v13 + v12 * (double)(unint64_t)v11);
      v16[3] = v15;
      v16[0] = (uint64_t)boost::function0<void>::assign_to<void turi::parallel_for<xgboost_old::gbm::GBTree::DoBoost(xgboost_old::IFMatrix *,long long,xgboost_old::BoosterInfo const&,std::vector<xgboost_old::bst_gpair> *)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::gbm::GBTree::DoBoost(xgboost_old::IFMatrix *,long long,xgboost_old::BoosterInfo const&,std::vector<xgboost_old::bst_gpair> *)::{lambda(unsigned long)#1} const&)::{lambda(void)#1}>(xgboost_old::gbm::GBTree::DoBoost(xgboost_old::IFMatrix *,long long,xgboost_old::BoosterInfo const&,std::vector<xgboost_old::bst_gpair> *)::{lambda(unsigned long)#1})::stored_vtable
             + 1;
      v16[1] = a3;
      turi::parallel_task_queue::launch((uint64_t)v17, (uint64_t)v16, v11);
      boost::function0<void>::~function0(v16);
      v11 = (uint64_t)v14;
    }
    while (v14 != v7);
    turi::parallel_task_queue::join((turi::parallel_task_queue *)v17);
    turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)v17);
  }
  else if (a2 > v5)
  {
    do
    {
      *(_QWORD *)(**(_QWORD **)a3 + 8 * v5) = *(_QWORD *)(**(_QWORD **)(a3 + 8)
                                                        + 8 * (**(int **)(a3 + 24) + v5 * **(int **)(a3 + 16)));
      ++v5;
    }
    while (a2 != v5);
  }
}

void sub_2183C4714(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)va);
  _Unwind_Resume(a1);
}

void xgboost_old::gbm::GBTree::CommitModel(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v8;
  char **v9;
  void **v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  _DWORD *v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  int v33;

  v4 = *a2;
  v5 = a2[1] - *a2;
  if (v5)
  {
    v8 = 0;
    v9 = (char **)(a1 + 208);
    v10 = (void **)(a1 + 232);
    do
    {
      v12 = *(_QWORD **)(a1 + 216);
      v11 = *(_QWORD *)(a1 + 224);
      if ((unint64_t)v12 >= v11)
      {
        v14 = ((char *)v12 - *v9) >> 3;
        if ((unint64_t)(v14 + 1) >> 61)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v15 = v11 - (_QWORD)*v9;
        v16 = v15 >> 2;
        if (v15 >> 2 <= (unint64_t)(v14 + 1))
          v16 = v14 + 1;
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
          v17 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v17 = v16;
        if (v17)
          v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a1 + 224, v17);
        else
          v18 = 0;
        v19 = &v18[8 * v14];
        *(_QWORD *)v19 = *(_QWORD *)(v4 + 8 * v8);
        v13 = v19 + 8;
        v21 = *(char **)(a1 + 208);
        v20 = *(char **)(a1 + 216);
        if (v20 != v21)
        {
          do
          {
            v22 = *((_QWORD *)v20 - 1);
            v20 -= 8;
            *((_QWORD *)v19 - 1) = v22;
            v19 -= 8;
          }
          while (v20 != v21);
          v20 = *v9;
        }
        *(_QWORD *)(a1 + 208) = v19;
        *(_QWORD *)(a1 + 216) = v13;
        *(_QWORD *)(a1 + 224) = &v18[8 * v17];
        if (v20)
          operator delete(v20);
      }
      else
      {
        *v12 = *(_QWORD *)(v4 + 8 * v8);
        v13 = v12 + 1;
      }
      *(_QWORD *)(a1 + 216) = v13;
      v24 = *(char **)(a1 + 240);
      v23 = *(_QWORD *)(a1 + 248);
      if ((unint64_t)v24 >= v23)
      {
        v26 = (char *)*v10;
        v27 = (v24 - (_BYTE *)*v10) >> 2;
        v28 = v27 + 1;
        if ((unint64_t)(v27 + 1) >> 62)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v29 = v23 - (_QWORD)v26;
        if (v29 >> 1 > v28)
          v28 = v29 >> 1;
        if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFFCLL)
          v30 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v30 = v28;
        if (v30)
        {
          v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(a1 + 248, v30);
          v26 = *(char **)(a1 + 232);
          v24 = *(char **)(a1 + 240);
        }
        else
        {
          v31 = 0;
        }
        v32 = &v31[4 * v27];
        *(_DWORD *)v32 = a3;
        v25 = v32 + 4;
        while (v24 != v26)
        {
          v33 = *((_DWORD *)v24 - 1);
          v24 -= 4;
          *((_DWORD *)v32 - 1) = v33;
          v32 -= 4;
        }
        *(_QWORD *)(a1 + 232) = v32;
        *(_QWORD *)(a1 + 240) = v25;
        *(_QWORD *)(a1 + 248) = &v31[4 * v30];
        if (v26)
          operator delete(v26);
      }
      else
      {
        *(_DWORD *)v24 = a3;
        v25 = v24 + 4;
      }
      *(_QWORD *)(a1 + 240) = v25;
      ++v8;
      v4 = *a2;
      v5 = a2[1] - *a2;
    }
    while (v8 < v5 >> 3);
  }
  *(_DWORD *)(a1 + 48) += v5 >> 3;
}

uint64_t std::vector<std::vector<xgboost_old::tree::RegTree *>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<xgboost_old::tree::RegTree *>>,std::reverse_iterator<std::vector<xgboost_old::tree::RegTree *>*>,std::reverse_iterator<std::vector<xgboost_old::tree::RegTree *>*>,std::reverse_iterator<std::vector<xgboost_old::tree::RegTree *>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<xgboost_old::tree::RegTree *>>,std::reverse_iterator<std::vector<xgboost_old::tree::RegTree *>*>,std::reverse_iterator<std::vector<xgboost_old::tree::RegTree *>*>,std::reverse_iterator<std::vector<xgboost_old::tree::RegTree *>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<xgboost_old::tree::RegTree *>>,std::reverse_iterator<std::vector<xgboost_old::tree::RegTree *>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<xgboost_old::tree::RegTree *>>,std::reverse_iterator<std::vector<xgboost_old::tree::RegTree *>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void xgboost_old::gbm::GBTree::InitUpdater(xgboost_old::gbm::GBTree *this)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  std::string *p_p;
  char *v7;
  const char *v8;
  char **v9;
  uint64_t Updater;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  _QWORD *v29;
  std::string __p;

  if (!*((_DWORD *)this + 4))
  {
    v3 = *((_QWORD *)this + 44);
    v2 = *((_QWORD *)this + 45);
    if (v2 == v3)
    {
      v3 = *((_QWORD *)this + 45);
    }
    else
    {
      v4 = 0;
      do
      {
        v5 = *(_QWORD *)(v3 + 8 * v4);
        if (v5)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
          v3 = *((_QWORD *)this + 44);
          v2 = *((_QWORD *)this + 45);
        }
        ++v4;
      }
      while (v4 < (v2 - v3) >> 3);
    }
    *((_QWORD *)this + 45) = v3;
    if (*((char *)this + 47) < 0)
      std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)this + 3), *((_QWORD *)this + 4));
    else
      __p = *(std::string *)((_BYTE *)this + 1);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    v7 = strtok((char *)p_p, ",");
    if (v7)
    {
      v9 = (char **)((char *)this + 352);
      do
      {
        Updater = xgboost_old::tree::CreateUpdater((xgboost_old::tree *)v7, v8);
        v11 = Updater;
        v13 = (uint64_t *)*((_QWORD *)this + 45);
        v12 = *((_QWORD *)this + 46);
        if ((unint64_t)v13 >= v12)
        {
          v15 = ((char *)v13 - *v9) >> 3;
          if ((unint64_t)(v15 + 1) >> 61)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          v16 = v12 - (_QWORD)*v9;
          v17 = v16 >> 2;
          if (v16 >> 2 <= (unint64_t)(v15 + 1))
            v17 = v15 + 1;
          if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
            v18 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v18 = v17;
          if (v18)
            v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)this + 368, v18);
          else
            v19 = 0;
          v20 = (uint64_t *)&v19[8 * v15];
          *v20 = v11;
          v14 = v20 + 1;
          v22 = (char *)*((_QWORD *)this + 44);
          v21 = (char *)*((_QWORD *)this + 45);
          if (v21 != v22)
          {
            do
            {
              v23 = *((_QWORD *)v21 - 1);
              v21 -= 8;
              *--v20 = v23;
            }
            while (v21 != v22);
            v21 = *v9;
          }
          *((_QWORD *)this + 44) = v20;
          *((_QWORD *)this + 45) = v14;
          *((_QWORD *)this + 46) = &v19[8 * v18];
          if (v21)
            operator delete(v21);
        }
        else
        {
          *v13 = Updater;
          v14 = v13 + 1;
        }
        *((_QWORD *)this + 45) = v14;
        v24 = *((_QWORD *)this + 38);
        if (*((_QWORD *)this + 39) != v24)
        {
          v25 = 0;
          v26 = 0;
          do
          {
            v27 = (uint64_t *)(v24 + v25);
            if (*((char *)v27 + 23) < 0)
              v28 = (uint64_t *)*v27;
            else
              v28 = v27;
            v29 = v27 + 3;
            if (*((char *)v27 + 47) < 0)
              v29 = (_QWORD *)*v29;
            (***(void (****)(_QWORD, uint64_t *, _QWORD *))(*((_QWORD *)this + 45) - 8))(*(_QWORD *)(*((_QWORD *)this + 45) - 8), v28, v29);
            ++v26;
            v24 = *((_QWORD *)this + 38);
            v25 += 48;
          }
          while (v26 < 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 39) - v24) >> 4));
        }
        v7 = strtok(0, ",");
      }
      while (v7);
    }
    *((_DWORD *)this + 4) = 1;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_2183C4CC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void turi::parallel_for<xgboost_old::gbm::GBTree::UpdateBufferByPosition(xgboost_old::IFMatrix *,long long,int,xgboost_old::tree::RegTree const&,int const*)::{lambda(unsigned long)#1}>(turi::thread_pool *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v5;
  turi::thread_pool *instance;
  turi::thread *v7;
  turi::thread_pool *tls_data;
  const char *v9;
  BOOL v10;
  turi::thread_pool *v11;
  uint64_t v12;
  double v13;
  double v14;
  turi::thread *v15;
  unint64_t v16;
  uint64_t v17[4];
  _BYTE v18[192];
  uint64_t v19;

  v5 = (unint64_t)a1;
  v19 = *MEMORY[0x24BDAC8D0];
  instance = (turi::thread_pool *)turi::thread_pool::get_instance(a1);
  v7 = (turi::thread *)turi::thread_pool::size(instance);
  tls_data = (turi::thread_pool *)turi::thread::get_tls_data(v7);
  if (*((_BYTE *)tls_data + 8))
    v10 = 0;
  else
    v10 = (unint64_t)v7 > 1;
  if (v10)
  {
    v11 = (turi::thread_pool *)turi::thread_pool::get_instance(tls_data);
    turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)v18, v11);
    v12 = 0;
    v13 = (double)(a2 - v5) / (double)(unint64_t)v7;
    v14 = (double)v5;
    do
    {
      v15 = (turi::thread *)(v12 + 1);
      v16 = (unint64_t)(v14 + v13 * (double)(unint64_t)(v12 + 1));
      if ((turi::thread *)v12 == (turi::thread *)((char *)v7 - 1))
        v16 = a2;
      v17[2] = (unint64_t)(v14 + v13 * (double)(unint64_t)v12);
      v17[3] = v16;
      v17[0] = (uint64_t)boost::function0<void>::assign_to<void turi::parallel_for<xgboost_old::gbm::GBTree::UpdateBufferByPosition(xgboost_old::IFMatrix *,long long,int,xgboost_old::tree::RegTree const&,int const*)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::gbm::GBTree::UpdateBufferByPosition(xgboost_old::IFMatrix *,long long,int,xgboost_old::tree::RegTree const&,int const*)::{lambda(unsigned long)#1} const&)::{lambda(void)#1}>(xgboost_old::gbm::GBTree::UpdateBufferByPosition(xgboost_old::IFMatrix *,long long,int,xgboost_old::tree::RegTree const&,int const*)::{lambda(unsigned long)#1})::stored_vtable
             + 1;
      v17[1] = a3;
      turi::parallel_task_queue::launch((uint64_t)v18, (uint64_t)v17, v12);
      boost::function0<void>::~function0(v17);
      v12 = (uint64_t)v15;
    }
    while (v15 != v7);
    turi::parallel_task_queue::join((turi::parallel_task_queue *)v18);
    turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)v18);
  }
  else if (a2 > v5)
  {
    do
      xgboost_old::gbm::GBTree::UpdateBufferByPosition(xgboost_old::IFMatrix *,long long,int,xgboost_old::tree::RegTree const&,int const*)::{lambda(unsigned long)#1}::operator()(a3, v5++, v9);
    while (a2 != v5);
  }
}

void sub_2183C4E34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)va);
  _Unwind_Resume(a1);
}

uint64_t xgboost_old::gbm::GBTree::UpdateBufferByPosition(xgboost_old::IFMatrix *,long long,int,xgboost_old::tree::RegTree const&,int const*)::{lambda(unsigned long)#1}::operator()(uint64_t a1, uint64_t a2, const char *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float *v15;
  float *v16;
  float v17;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(unsigned int *)(**(_QWORD **)a1 + 4 * a2);
  v6 = **(_QWORD **)(a1 + 16) + v5;
  if (v6 < 0)
  {
    v8 = -1;
  }
  else
  {
    v7 = **(int **)(a1 + 24);
    xgboost_old::utils::Check(*(_QWORD *)(v4 + 64) > v6, "buffer_index exceed num_pbuffer", a3);
    v8 = v6 + *(_QWORD *)(v4 + 64) * v7 + (v6 + *(_QWORD *)(v4 + 64) * v7) * *(int *)(v4 + 76);
  }
  v9 = *(int *)(**(_QWORD **)(a1 + 32) + 4 * v5);
  xgboost_old::utils::Assert(*(unsigned int *)(*(_QWORD *)(v4 + 280) + 4 * v8) == (uint64_t)(*(_QWORD *)(v4 + 216) - *(_QWORD *)(v4 + 208)) >> 3, "cached buffer not up to date", a3);
  result = xgboost_old::utils::Assert(v9 >= 0, "invalid leaf position", v10);
  v12 = *(_QWORD *)(a1 + 40);
  v13 = *(_QWORD *)(v4 + 256);
  *(float *)(v13 + 4 * v8) = *(float *)(*(_QWORD *)v12 + 20 * (int)v9 + 16) + *(float *)(v13 + 4 * v8);
  v14 = *(unsigned int *)(v4 + 76);
  if ((int)v14 >= 1)
  {
    v15 = (float *)(*(_QWORD *)(v12 + 72) + 4 * *(_DWORD *)(v12 + 116) * (int)v9);
    v16 = (float *)(v13 + 4 * v8 + 4);
    do
    {
      v17 = *v15++;
      *v16 = v17 + *v16;
      ++v16;
      --v14;
    }
    while (v14);
  }
  *(_DWORD *)(*(_QWORD *)(v4 + 280) + 4 * v8) += *(_DWORD *)(v4 + 12);
  return result;
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<xgboost_old::gbm::GBTree::UpdateBufferByPosition(xgboost_old::IFMatrix *,long long,int,xgboost_old::tree::RegTree const&,int const*)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::gbm::GBTree::UpdateBufferByPosition(xgboost_old::IFMatrix *,long long,int,xgboost_old::tree::RegTree const&,int const*)::{lambda(unsigned long)#1} const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v4;
  __int128 v5;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x80000002186FAF5FLL & 0x7FFFFFFFFFFFFFFFLL)
        || (result = strcmp((const char *)result, (const char *)(0x80000002186FAF5FLL & 0x7FFFFFFFFFFFFFFFLL)),
            !(_DWORD)result))
      {
        *(_QWORD *)a2 = v4;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
    }
  }
  else
  {
    v5 = *(_OWORD *)result;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

uint64_t boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<xgboost_old::gbm::GBTree::UpdateBufferByPosition(xgboost_old::IFMatrix *,long long,int,xgboost_old::tree::RegTree const&,int const*)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::gbm::GBTree::UpdateBufferByPosition(xgboost_old::IFMatrix *,long long,int,xgboost_old::tree::RegTree const&,int const*)::{lambda(unsigned long)#1} const&)::{lambda(void)#1},void>::invoke(uint64_t result, uint64_t a2, const char *a3)
{
  unint64_t v3;
  uint64_t *v4;

  v3 = *(_QWORD *)(result + 8);
  if (v3 < *(_QWORD *)(result + 16))
  {
    v4 = (uint64_t *)result;
    do
      result = xgboost_old::gbm::GBTree::UpdateBufferByPosition(xgboost_old::IFMatrix *,long long,int,xgboost_old::tree::RegTree const&,int const*)::{lambda(unsigned long)#1}::operator()(*v4, v3++, a3);
    while (v3 < v4[2]);
  }
  return result;
}

_QWORD *std::vector<xgboost_old::bst_gpair>::vector(_QWORD *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned long>::__vallocate[abi:ne180100](a1, a2);
    a1[1] += 8 * a2;
  }
  return a1;
}

void sub_2183C50C4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<xgboost_old::gbm::GBTree::DoBoost(xgboost_old::IFMatrix *,long long,xgboost_old::BoosterInfo const&,std::vector<xgboost_old::bst_gpair> *)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::gbm::GBTree::DoBoost(xgboost_old::IFMatrix *,long long,xgboost_old::BoosterInfo const&,std::vector<xgboost_old::bst_gpair> *)::{lambda(unsigned long)#1} const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v4;
  __int128 v5;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x80000002186FAFE6 & 0x7FFFFFFFFFFFFFFFLL)
        || (result = strcmp((const char *)result, (const char *)(0x80000002186FAFE6 & 0x7FFFFFFFFFFFFFFFLL)),
            !(_DWORD)result))
      {
        *(_QWORD *)a2 = v4;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
    }
  }
  else
  {
    v5 = *(_OWORD *)result;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

_QWORD *boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<xgboost_old::gbm::GBTree::DoBoost(xgboost_old::IFMatrix *,long long,xgboost_old::BoosterInfo const&,std::vector<xgboost_old::bst_gpair> *)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::gbm::GBTree::DoBoost(xgboost_old::IFMatrix *,long long,xgboost_old::BoosterInfo const&,std::vector<xgboost_old::bst_gpair> *)::{lambda(unsigned long)#1} const&)::{lambda(void)#1},void>::invoke(_QWORD *result)
{
  unint64_t i;

  for (i = result[1]; i < result[2]; ++i)
    *(_QWORD *)(**(_QWORD **)*result + 8 * i) = *(_QWORD *)(**(_QWORD **)(*result + 8)
                                                          + 8
                                                          * (**(int **)(*result + 24) + i * **(int **)(*result + 16)));
  return result;
}

void turi::parallel_for<xgboost_old::gbm::GBTree::Predict(xgboost_old::IFMatrix *,long long,xgboost_old::BoosterInfo const&,std::vector<float> *,unsigned int)::{lambda(unsigned long)#1}>(turi::thread_pool *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v5;
  turi::thread_pool *instance;
  turi::thread *v7;
  turi::thread_pool *tls_data;
  BOOL v9;
  turi::thread_pool *v10;
  uint64_t v11;
  double v12;
  double v13;
  turi::thread *v14;
  unint64_t v15;
  uint64_t v16[4];
  _BYTE v17[192];
  uint64_t v18;

  v5 = (unint64_t)a1;
  v18 = *MEMORY[0x24BDAC8D0];
  instance = (turi::thread_pool *)turi::thread_pool::get_instance(a1);
  v7 = (turi::thread *)turi::thread_pool::size(instance);
  tls_data = (turi::thread_pool *)turi::thread::get_tls_data(v7);
  if (*((_BYTE *)tls_data + 8))
    v9 = 0;
  else
    v9 = (unint64_t)v7 > 1;
  if (v9)
  {
    v10 = (turi::thread_pool *)turi::thread_pool::get_instance(tls_data);
    turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)v17, v10);
    v11 = 0;
    v12 = (double)(a2 - v5) / (double)(unint64_t)v7;
    v13 = (double)v5;
    do
    {
      v14 = (turi::thread *)(v11 + 1);
      v15 = (unint64_t)(v13 + v12 * (double)(unint64_t)(v11 + 1));
      if ((turi::thread *)v11 == (turi::thread *)((char *)v7 - 1))
        v15 = a2;
      v16[2] = (unint64_t)(v13 + v12 * (double)(unint64_t)v11);
      v16[3] = v15;
      v16[0] = (uint64_t)boost::function0<void>::assign_to<void turi::parallel_for<xgboost_old::gbm::GBTree::Predict(xgboost_old::IFMatrix *,long long,xgboost_old::BoosterInfo const&,std::vector<float> *,unsigned int)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::gbm::GBTree::Predict(xgboost_old::IFMatrix *,long long,xgboost_old::BoosterInfo const&,std::vector<float> *,unsigned int)::{lambda(unsigned long)#1} const&)::{lambda(void)#1}>(xgboost_old::gbm::GBTree::Predict(xgboost_old::IFMatrix *,long long,xgboost_old::BoosterInfo const&,std::vector<float> *,unsigned int)::{lambda(unsigned long)#1})::stored_vtable
             + 1;
      v16[1] = a3;
      turi::parallel_task_queue::launch((uint64_t)v17, (uint64_t)v16, v11);
      boost::function0<void>::~function0(v16);
      v11 = (uint64_t)v14;
    }
    while (v14 != v7);
    turi::parallel_task_queue::join((turi::parallel_task_queue *)v17);
    turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)v17);
  }
  else if (a2 > v5)
  {
    do
      xgboost_old::gbm::GBTree::Predict(xgboost_old::IFMatrix *,long long,xgboost_old::BoosterInfo const&,std::vector<float> *,unsigned int)::{lambda(unsigned long)#1}::operator()(a3, v5++);
    while (a2 != v5);
  }
}

void sub_2183C5318(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)va);
  _Unwind_Resume(a1);
}

void std::vector<xgboost_old::tree::RegTree::FVec>::resize(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;

  v4 = a1[1];
  v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  v6 = a2 >= v5;
  v7 = a2 - v5;
  if (v7 != 0 && v6)
  {
    std::vector<xgboost_old::tree::RegTree::FVec>::__append(a1, v7, a3);
  }
  else if (!v6)
  {
    v8 = *a1 + 24 * a2;
    if (v4 != v8)
    {
      v9 = a1[1];
      do
      {
        v11 = *(void **)(v9 - 24);
        v9 -= 24;
        v10 = v11;
        if (v11)
        {
          *(_QWORD *)(v4 - 16) = v10;
          operator delete(v10);
        }
        v4 = v9;
      }
      while (v9 != v8);
    }
    a1[1] = v8;
  }
}

_QWORD *std::vector<xgboost_old::tree::RegTree::FVec>::__append(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  _QWORD *result;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  _QWORD *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  _QWORD *v21;

  v8 = a1[2];
  result = a1 + 2;
  v7 = v8;
  v9 = (_QWORD *)*(result - 1);
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - (uint64_t)v9) >> 3) >= a2)
  {
    if (a2)
    {
      v15 = &v9[3 * a2];
      v16 = 24 * a2;
      do
      {
        *v9 = 0;
        v9[1] = 0;
        v9[2] = 0;
        result = std::vector<float>::__init_with_size[abi:ne180100]<float const*,float const*>(v9, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
        v9 += 3;
        v16 -= 24;
      }
      while (v16);
      v9 = v15;
    }
    a1[1] = (uint64_t)v9;
  }
  else
  {
    v10 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v9 - *a1) >> 3);
    v11 = v10 + a2;
    if (v10 + a2 > 0xAAAAAAAAAAAAAAALL)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v12 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    if (2 * v12 > v11)
      v11 = 2 * v12;
    if (v12 >= 0x555555555555555)
      v13 = 0xAAAAAAAAAAAAAAALL;
    else
      v13 = v11;
    v21 = result;
    if (v13)
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>((uint64_t)result, v13);
    else
      v14 = 0;
    v17 = v14;
    v18 = &v14[24 * v10];
    v19 = v18;
    v20 = &v14[24 * v13];
    std::__split_buffer<xgboost_old::tree::RegTree::FVec>::__construct_at_end(&v17, a2, a3);
    std::vector<xgboost_old::tree::RegTree::FVec>::__swap_out_circular_buffer(a1, &v17);
    return (_QWORD *)std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)&v17);
  }
  return result;
}

void sub_2183C5528(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::__split_buffer<xgboost_old::tree::RegTree::FVec>::__construct_at_end(_QWORD *result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v6;
  uint64_t v7;

  v3 = result;
  v4 = (_QWORD *)result[2];
  if (a2)
  {
    v6 = &v4[3 * a2];
    v7 = 24 * a2;
    do
    {
      *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      result = std::vector<float>::__init_with_size[abi:ne180100]<float const*,float const*>(v4, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
      v4 += 3;
      v7 -= 24;
    }
    while (v7);
    v4 = v6;
  }
  v3[2] = v4;
  return result;
}

void sub_2183C55C0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 16) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<xgboost_old::tree::RegTree::FVec>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<xgboost_old::tree::RegTree::FVec>,std::reverse_iterator<xgboost_old::tree::RegTree::FVec*>,std::reverse_iterator<xgboost_old::tree::RegTree::FVec*>,std::reverse_iterator<xgboost_old::tree::RegTree::FVec*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<xgboost_old::tree::RegTree::FVec>,std::reverse_iterator<xgboost_old::tree::RegTree::FVec*>,std::reverse_iterator<xgboost_old::tree::RegTree::FVec*>,std::reverse_iterator<xgboost_old::tree::RegTree::FVec*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<xgboost_old::tree::RegTree::FVec>,std::reverse_iterator<xgboost_old::tree::RegTree::FVec*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<xgboost_old::tree::RegTree::FVec>,std::reverse_iterator<xgboost_old::tree::RegTree::FVec*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::vector<xgboost_old::tree::RegTree::FVec::Entry>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 4 * a2;
  }
  else
  {
    std::vector<xgboost_old::tree::RegTree::FVec::Entry>::__append((void **)a1, a2 - v2);
  }
}

void std::vector<xgboost_old::tree::RegTree::FVec::Entry>::__append(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  int v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 2)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 4 * a2);
      v7 += 4 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = v7 - (_BYTE *)*a1;
    v9 = a2 + (v8 >> 2);
    if (v9 >> 62)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 2;
    v11 = v5 - (_BYTE *)*a1;
    if (v11 >> 1 > v9)
      v9 = v11 >> 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL)
      v12 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v4, v12);
    else
      v13 = 0;
    v14 = &v13[4 * v10];
    v15 = &v13[4 * v12];
    bzero(v14, 4 * a2);
    v16 = &v14[4 * a2];
    v18 = (char *)*a1;
    v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        v19 = *((_DWORD *)v17 - 1);
        v17 -= 4;
        *((_DWORD *)v14 - 1) = v19;
        v14 -= 4;
      }
      while (v17 != v18);
      v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
      operator delete(v17);
  }
}

void xgboost_old::gbm::GBTree::Predict(xgboost_old::IFMatrix *,long long,xgboost_old::BoosterInfo const&,std::vector<float> *,unsigned int)::{lambda(unsigned long)#1}::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  _QWORD v20[2];

  v4 = *(_QWORD *)a1;
  v5 = *(_DWORD *)turi::thread::get_tls_data((turi::thread *)a1);
  v6 = *(_QWORD *)(v4 + 328);
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + a2;
  xgboost_old::utils::Assert(v7 < **(_QWORD **)(a1 + 16), "data row index exceed bound", v8);
  LODWORD(v9) = *(_DWORD *)(v4 + 72);
  if ((int)v9 >= 1)
  {
    v10 = 0;
    v11 = (_QWORD *)(v6 + 24 * v5);
    do
    {
      v12 = *(_QWORD *)(a1 + 16);
      v13 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 16);
      v14 = *(_QWORD *)(v13 + 8 * a2);
      v15 = *(_QWORD *)(v13 + 8 * (a2 + 1)) - v14;
      v20[0] = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24) + 8 * v14;
      v20[1] = v15;
      v16 = **(_QWORD **)(a1 + 24);
      if (v16 < 0)
        v17 = -1;
      else
        v17 = v16 + v7;
      v18 = *(_QWORD *)(v12 + 16);
      if (*(_QWORD *)(v12 + 24) == v18)
        v19 = 0;
      else
        v19 = *(_DWORD *)(v18 + 4 * v7);
      xgboost_old::gbm::GBTree::Pred(v4, (uint64_t)v20, v17, v10, v19, v11, (float *)(**(_QWORD **)(a1 + 32) + 4 * (v10 + v7 * (int)v9)), **(_QWORD **)(a1 + 40), **(_DWORD **)(a1 + 48));
      ++v10;
      v9 = *(int *)(v4 + 72);
    }
    while (v10 < v9);
  }
}

void xgboost_old::gbm::GBTree::Pred(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, _QWORD *a6, float *a7, uint64_t a8, int a9)
{
  int v17;
  unint64_t v18;
  const char *v19;
  uint64_t v20;
  float v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  _DWORD *v26;
  int *v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t i;
  unint64_t v35;
  uint64_t v36;
  float *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  float v43;
  float v44;
  uint64_t v45;
  int *v46;
  uint64_t v47;
  int *v48;
  float v49;
  uint64_t v50;
  float *v51;
  float *v52;
  float v53;
  uint64_t v54;
  unint64_t j;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int *v59;
  _DWORD *v60;
  int v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  float *v66;
  int v67;
  void *__p[3];

  v17 = a9;
  v18 = *(int *)(a1 + 76);
  v67 = 0;
  std::vector<float>::vector(__p, v18, &v67);
  if (a3 < 0)
  {
    v22 = 0;
    v23 = 0;
    if (!a9)
      v17 = -1;
    v21 = 0.0;
    v20 = -1;
  }
  else
  {
    xgboost_old::utils::Check(*(_QWORD *)(a1 + 64) > a3, "buffer_index exceed num_pbuffer", v19);
    v20 = (a3 + *(_QWORD *)(a1 + 64) * a4) * (*(int *)(a1 + 76) + 1);
    v21 = 0.0;
    if (a9)
    {
      v22 = 0;
      v23 = 0;
    }
    else if (v20 < 0)
    {
      v22 = 0;
      v23 = 0;
      v17 = -1;
    }
    else
    {
      v24 = *(unsigned int *)(a1 + 76);
      v23 = *(_DWORD *)(*(_QWORD *)(a1 + 280) + 4 * v20);
      v25 = *(_QWORD *)(a1 + 256);
      v21 = *(float *)(v25 + 4 * v20);
      if ((int)v24 >= 1)
      {
        v26 = __p[0];
        v27 = (int *)(v25 + 4 * v20 + 4);
        do
        {
          v28 = *v27++;
          *v26++ = v28;
          --v24;
        }
        while (v24);
      }
      v17 = -1;
      v22 = 1;
    }
  }
  v29 = *(_QWORD *)(a1 + 208);
  v30 = (*(_QWORD *)(a1 + 216) - v29) >> 3;
  if (v30 != v23)
  {
    v31 = v23;
    v32 = *(unsigned int *)(a2 + 8);
    if ((_DWORD)v32)
    {
      v33 = 0;
      for (i = 0; i < v32; ++i)
      {
        v35 = *(unsigned int *)(*(_QWORD *)a2 + v33);
        if (v35 < (uint64_t)(a6[1] - *a6) >> 2)
        {
          *(_DWORD *)(*a6 + 4 * v35) = *(_DWORD *)(*(_QWORD *)a2 + v33 + 4);
          v32 = *(unsigned int *)(a2 + 8);
        }
        v33 += 8;
      }
      v29 = *(_QWORD *)(a1 + 208);
      v30 = (*(_QWORD *)(a1 + 216) - v29) >> 3;
    }
    else
    {
      v32 = 0;
    }
    if (v30 > v31)
    {
      v36 = *(_QWORD *)(a1 + 232);
      v37 = (float *)__p[0];
      do
      {
        if (*(_DWORD *)(v36 + 4 * v31) == a4)
        {
          v38 = *(uint64_t **)(v29 + 8 * v31);
          v39 = *v38;
          LODWORD(v40) = a5;
          v41 = a5;
          if (*(_DWORD *)(*v38 + 20 * a5 + 4) != -1)
          {
            v40 = a5;
            do
            {
              v42 = *(_DWORD *)(v39 + 20 * v40 + 12);
              v43 = *(float *)(*a6 + 4 * (v42 & 0x7FFFFFFF));
              if (v43 == NAN)
              {
                v47 = v39 + 20 * v40;
                v48 = (int *)(v47 + 4);
                v46 = (int *)(v47 + 8);
                if (v42 < 0)
                  v46 = v48;
              }
              else
              {
                v44 = *(float *)(v39 + 20 * v40 + 16);
                v45 = v39 + 20 * v40;
                if (v44 <= v43)
                  v46 = (int *)(v45 + 8);
                else
                  v46 = (int *)(v45 + 4);
              }
              v41 = *v46;
              v40 = v41;
            }
            while (*(_DWORD *)(v39 + 20 * v41 + 4) != -1);
          }
          v49 = *(float *)(v39 + 20 * (int)v40 + 16);
          v50 = *(unsigned int *)(a1 + 76);
          if ((int)v50 >= 1)
          {
            v51 = (float *)(v38[9] + 4 * *((_DWORD *)v38 + 29) * v41);
            v52 = v37;
            do
            {
              v53 = *v51++;
              *v52 = v53 + *v52;
              ++v52;
              --v50;
            }
            while (v50);
          }
          v21 = v21 + v49;
          if (!--v17)
            break;
        }
        ++v31;
      }
      while (v31 != v30);
    }
    if (v32)
    {
      v54 = 0;
      for (j = 0; j < v32; ++j)
      {
        v56 = *(unsigned int *)(*(_QWORD *)a2 + v54);
        if (v56 < (uint64_t)(a6[1] - *a6) >> 2)
        {
          *(_DWORD *)(*a6 + 4 * v56) = -1;
          v32 = *(unsigned int *)(a2 + 8);
        }
        v54 += 8;
      }
    }
  }
  if (v22)
  {
    *(_DWORD *)(*(_QWORD *)(a1 + 280) + 4 * v20) = (*(_QWORD *)(a1 + 216) - *(_QWORD *)(a1 + 208)) >> 3;
    v57 = *(_QWORD *)(a1 + 256);
    *(float *)(v57 + 4 * v20) = v21;
    v58 = *(unsigned int *)(a1 + 76);
    if ((int)v58 <= 0)
    {
      *a7 = v21;
      v63 = (char *)__p[0];
LABEL_53:
      if (!v63)
        return;
      goto LABEL_54;
    }
    v59 = (int *)__p[0];
    v60 = (_DWORD *)(v57 + 4 * v20 + 4);
    do
    {
      v61 = *v59++;
      *v60++ = v61;
      --v58;
    }
    while (v58);
  }
  v62 = *(unsigned int *)(a1 + 76);
  *a7 = v21;
  v63 = (char *)__p[0];
  if ((int)v62 < 1)
    goto LABEL_53;
  v64 = 0;
  v65 = 4 * v62;
  v66 = &a7[a8];
  do
  {
    *v66 = *(float *)&v63[v64];
    v64 += 4;
    v66 += a8;
  }
  while (v65 != v64);
LABEL_54:
  __p[1] = v63;
  operator delete(v63);
}

void sub_2183C5CF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<xgboost_old::gbm::GBTree::Predict(xgboost_old::IFMatrix *,long long,xgboost_old::BoosterInfo const&,std::vector<float> *,unsigned int)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::gbm::GBTree::Predict(xgboost_old::IFMatrix *,long long,xgboost_old::BoosterInfo const&,std::vector<float> *,unsigned int)::{lambda(unsigned long)#1} const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v4;
  __int128 v5;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x80000002186FB08ELL & 0x7FFFFFFFFFFFFFFFLL)
        || (result = strcmp((const char *)result, (const char *)(0x80000002186FB08ELL & 0x7FFFFFFFFFFFFFFFLL)),
            !(_DWORD)result))
      {
        *(_QWORD *)a2 = v4;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
    }
  }
  else
  {
    v5 = *(_OWORD *)result;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

void boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<xgboost_old::gbm::GBTree::Predict(xgboost_old::IFMatrix *,long long,xgboost_old::BoosterInfo const&,std::vector<float> *,unsigned int)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::gbm::GBTree::Predict(xgboost_old::IFMatrix *,long long,xgboost_old::BoosterInfo const&,std::vector<float> *,unsigned int)::{lambda(unsigned long)#1} const&)::{lambda(void)#1},void>::invoke(uint64_t *a1)
{
  unint64_t i;

  for (i = a1[1]; i < a1[2]; ++i)
    xgboost_old::gbm::GBTree::Predict(xgboost_old::IFMatrix *,long long,xgboost_old::BoosterInfo const&,std::vector<float> *,unsigned int)::{lambda(unsigned long)#1}::operator()(*a1, i);
}

void turi::parallel_for<xgboost_old::gbm::GBTree::PredPath(xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<float> *,unsigned int)::{lambda(unsigned long)#1}>(turi::thread_pool *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v5;
  turi::thread_pool *instance;
  turi::thread *v7;
  turi::thread_pool *tls_data;
  BOOL v9;
  turi::thread_pool *v10;
  uint64_t v11;
  double v12;
  double v13;
  turi::thread *v14;
  unint64_t v15;
  uint64_t v16[4];
  _BYTE v17[192];
  uint64_t v18;

  v5 = (unint64_t)a1;
  v18 = *MEMORY[0x24BDAC8D0];
  instance = (turi::thread_pool *)turi::thread_pool::get_instance(a1);
  v7 = (turi::thread *)turi::thread_pool::size(instance);
  tls_data = (turi::thread_pool *)turi::thread::get_tls_data(v7);
  if (*((_BYTE *)tls_data + 8))
    v9 = 0;
  else
    v9 = (unint64_t)v7 > 1;
  if (v9)
  {
    v10 = (turi::thread_pool *)turi::thread_pool::get_instance(tls_data);
    turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)v17, v10);
    v11 = 0;
    v12 = (double)(a2 - v5) / (double)(unint64_t)v7;
    v13 = (double)v5;
    do
    {
      v14 = (turi::thread *)(v11 + 1);
      v15 = (unint64_t)(v13 + v12 * (double)(unint64_t)(v11 + 1));
      if ((turi::thread *)v11 == (turi::thread *)((char *)v7 - 1))
        v15 = a2;
      v16[2] = (unint64_t)(v13 + v12 * (double)(unint64_t)v11);
      v16[3] = v15;
      v16[0] = (uint64_t)boost::function0<void>::assign_to<void turi::parallel_for<xgboost_old::gbm::GBTree::PredPath(xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<float> *,unsigned int)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::gbm::GBTree::PredPath(xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<float> *,unsigned int)::{lambda(unsigned long)#1} const&)::{lambda(void)#1}>(xgboost_old::gbm::GBTree::PredPath(xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<float> *,unsigned int)::{lambda(unsigned long)#1})::stored_vtable
             + 1;
      v16[1] = a3;
      turi::parallel_task_queue::launch((uint64_t)v17, (uint64_t)v16, v11);
      boost::function0<void>::~function0(v16);
      v11 = (uint64_t)v14;
    }
    while (v14 != v7);
    turi::parallel_task_queue::join((turi::parallel_task_queue *)v17);
    turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)v17);
  }
  else if (a2 > v5)
  {
    do
      xgboost_old::gbm::GBTree::PredPath(xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<float> *,unsigned int)::{lambda(unsigned long)#1}::operator()(a3, v5++);
    while (a2 != v5);
  }
}

void sub_2183C5F48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)va);
  _Unwind_Resume(a1);
}

uint64_t xgboost_old::gbm::GBTree::PredPath(xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<float> *,unsigned int)::{lambda(unsigned long)#1}::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  float v24;
  float v25;
  uint64_t v26;
  int *v27;
  uint64_t v28;
  int *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int *v34;
  uint64_t v35;
  unsigned int v36;

  v4 = *(_QWORD *)(a1 + 8);
  result = (uint64_t)turi::thread::get_tls_data((turi::thread *)a1);
  v6 = (_QWORD *)(*(_QWORD *)(v4 + 328) + 24 * *(int *)result);
  v8 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  v7 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  v9 = *(_QWORD *)(v7 + 8 * a2);
  v10 = *(_QWORD *)(v7 + 8 * (a2 + 1)) - v9;
  if ((_DWORD)v10)
  {
    v11 = (_DWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 24) + 8 * v9 + 4);
    do
    {
      v12 = *(v11 - 1);
      if (v12 < (uint64_t)(v6[1] - *v6) >> 2)
        *(_DWORD *)(*v6 + 4 * v12) = *v11;
      v11 += 2;
      --v10;
    }
    while (v10);
  }
  v13 = **(unsigned int **)(a1 + 16);
  if ((_DWORD)v13)
  {
    v14 = 0;
    v15 = v8 + a2;
    v16 = *(_QWORD *)(v4 + 208);
    v18 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16);
    v17 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 24);
    v19 = **(_QWORD **)(a1 + 32);
    result = 20;
    do
    {
      if (v17 == v18)
        v20 = 0;
      else
        v20 = *(_DWORD *)(v18 + 4 * v15);
      v21 = **(_QWORD **)(v16 + 8 * v14);
      if (*(_DWORD *)(v21 + 20 * v20 + 4) != -1)
      {
        v22 = v20;
        do
        {
          v23 = *(_DWORD *)(v21 + 20 * v22 + 12);
          v24 = *(float *)(*v6 + 4 * (v23 & 0x7FFFFFFF));
          if (v24 == NAN)
          {
            v28 = v21 + 20 * v22;
            v29 = (int *)(v28 + 4);
            v27 = (int *)(v28 + 8);
            if (v23 < 0)
              v27 = v29;
          }
          else
          {
            v25 = *(float *)(v21 + 20 * v22 + 16);
            v26 = v21 + 20 * v22;
            if (v25 <= v24)
              v27 = (int *)(v26 + 8);
            else
              v27 = (int *)(v26 + 4);
          }
          v30 = *v27;
          v22 = v30;
        }
        while (*(_DWORD *)(v21 + 20 * v30 + 4) != -1);
        v20 = v30;
      }
      *(float *)(v19 + 4 * (v15 * v13 + v14++)) = (float)v20;
    }
    while (v14 != v13);
  }
  v31 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  v32 = *(_QWORD *)(v31 + 8 * a2);
  v33 = *(_QWORD *)(v31 + 8 * (a2 + 1)) - v32;
  if ((_DWORD)v33)
  {
    v34 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)a1 + 24) + 8 * v32);
    do
    {
      v36 = *v34;
      v34 += 2;
      v35 = v36;
      if (v36 < (unint64_t)((uint64_t)(v6[1] - *v6) >> 2))
        *(_DWORD *)(*v6 + 4 * v35) = -1;
      --v33;
    }
    while (v33);
  }
  return result;
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<xgboost_old::gbm::GBTree::PredPath(xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<float> *,unsigned int)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::gbm::GBTree::PredPath(xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<float> *,unsigned int)::{lambda(unsigned long)#1} const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v4;
  __int128 v5;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x80000002186FB127 & 0x7FFFFFFFFFFFFFFFLL)
        || (result = strcmp((const char *)result, (const char *)(0x80000002186FB127 & 0x7FFFFFFFFFFFFFFFLL)),
            !(_DWORD)result))
      {
        *(_QWORD *)a2 = v4;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
    }
  }
  else
  {
    v5 = *(_OWORD *)result;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

uint64_t boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<xgboost_old::gbm::GBTree::PredPath(xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<float> *,unsigned int)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::gbm::GBTree::PredPath(xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<float> *,unsigned int)::{lambda(unsigned long)#1} const&)::{lambda(void)#1},void>::invoke(uint64_t result)
{
  unint64_t v1;
  uint64_t *v2;

  v1 = *(_QWORD *)(result + 8);
  if (v1 < *(_QWORD *)(result + 16))
  {
    v2 = (uint64_t *)result;
    do
      result = xgboost_old::gbm::GBTree::PredPath(xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<float> *,unsigned int)::{lambda(unsigned long)#1}::operator()(*v2, v1++);
    while (v1 < v2[2]);
  }
  return result;
}

internalJSONNode *xgboost_old::tree::TreeModel<float,xgboost_old::tree::RTreeNodeStat>::DumpModel@<X0>(uint64_t a1@<X0>, xgboost_old::utils::FeatMap *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, std::string *a5@<X8>)
{
  std::string::size_type v9;
  const internalJSONNode *v10;
  std::string::size_type v11;
  unint64_t v12;
  std::string::size_type v13;
  internalJSONNode *v14;
  const internalJSONNode *v15;
  internalJSONNode *v16;
  unint64_t v17;
  internalJSONNode *v18;
  uint64_t v19;
  internalJSONNode *v20;
  const internalJSONNode *v21;
  internalJSONNode *v22;
  unint64_t v23;
  internalJSONNode *v24;
  const internalJSONNode *v25;
  unint64_t v26;
  internalJSONNode *v27;
  jsonSingletonEMPTY_JSON_STRING *v28;
  internalJSONNode *v29;
  uint64_t v30;
  internalJSONNode *v31;
  uint64_t v32;
  internalJSONNode *result;
  uint64_t v34;
  int v35;
  std::string::size_type v36;
  __int128 *Value;
  __int128 v38;
  std::string __p;
  std::string __str;
  uint64_t v41;
  void *v42;
  char v43;
  uint64_t v44;
  internalJSONNode *v45;

  if (a4)
  {
    internalJSONNode::newInternal((internalJSONNode *)4);
    __p.__r_.__value_.__r.__words[0] = v9;
    std::string::basic_string[abi:ne180100]<0>(&__str, "vertices");
    v11 = __p.__r_.__value_.__r.__words[0];
    v12 = *(_QWORD *)(__p.__r_.__value_.__r.__words[0] + 80);
    if (v12 >= 2)
    {
      *(_QWORD *)(__p.__r_.__value_.__r.__words[0] + 80) = v12 - 1;
      internalJSONNode::newInternal((internalJSONNode *)v11, v10);
      v11 = v13;
    }
    __p.__r_.__value_.__r.__words[0] = v11;
    std::string::operator=((std::string *)(v11 + 8), &__str);
    *(_BYTE *)(v11 + 32) = 1;
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    internalJSONNode::newInternal((internalJSONNode *)4);
    v45 = v14;
    std::string::basic_string[abi:ne180100]<0>(&__str, "edges");
    v16 = v45;
    v17 = *((_QWORD *)v45 + 10);
    if (v17 >= 2)
    {
      *((_QWORD *)v45 + 10) = v17 - 1;
      internalJSONNode::newInternal(v16, v15);
      v16 = v18;
    }
    v45 = v16;
    std::string::operator=((std::string *)((char *)v16 + 8), &__str);
    *((_BYTE *)v16 + 32) = 1;
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    if (*(int *)(a1 + 96) >= 1)
    {
      v19 = 0;
      do
      {
        xgboost_old::tree::TreeModel<float,xgboost_old::tree::RTreeNodeStat>::DumpJson((uint64_t *)a1, v19, (internalJSONNode **)&__p, &v45, a2, 0, a3);
        v19 = (v19 + 1);
      }
      while ((int)v19 < *(_DWORD *)(a1 + 96));
    }
    internalJSONNode::newInternal((internalJSONNode *)5);
    v22 = v20;
    v23 = *((_QWORD *)v20 + 10);
    if (v23 >= 2)
    {
      *((_QWORD *)v20 + 10) = v23 - 1;
      internalJSONNode::newInternal(v20, v21);
      v22 = v24;
    }
    internalJSONNode::push_back(v22, (uint64_t *)&__p);
    v26 = *((_QWORD *)v22 + 10);
    if (v26 >= 2)
    {
      *((_QWORD *)v22 + 10) = v26 - 1;
      internalJSONNode::newInternal(v22, v25);
      v22 = v27;
    }
    v28 = (jsonSingletonEMPTY_JSON_STRING *)internalJSONNode::push_back(v22, (uint64_t *)&v45);
    if ((*(_BYTE *)v22 & 0xFE) == 4)
    {
      a5->__r_.__value_.__r.__words[0] = 0;
      a5->__r_.__value_.__l.__size_ = 0;
      a5->__r_.__value_.__r.__words[2] = 0;
      std::string::reserve(a5, 0x400uLL);
      internalJSONNode::Write((std::string *)v22, 0xFFFFFFFFuLL, 1, a5);
    }
    else
    {
      Value = jsonSingletonEMPTY_JSON_STRING::getValue(v28);
      if (*((char *)Value + 23) < 0)
      {
        std::string::__init_copy_ctor_external(a5, *(const std::string::value_type **)Value, *((_QWORD *)Value + 1));
      }
      else
      {
        v38 = *Value;
        a5->__r_.__value_.__r.__words[2] = *((_QWORD *)Value + 2);
        *(_OWORD *)&a5->__r_.__value_.__l.__data_ = v38;
      }
    }
    v30 = *((_QWORD *)v22 + 10) - 1;
    *((_QWORD *)v22 + 10) = v30;
    if (!v30)
      internalJSONNode::deleteInternal(v22, v29);
    v31 = v45;
    if (v45)
    {
      v32 = *((_QWORD *)v45 + 10) - 1;
      *((_QWORD *)v45 + 10) = v32;
      if (!v32)
        internalJSONNode::deleteInternal(v31, v29);
    }
    result = (internalJSONNode *)__p.__r_.__value_.__r.__words[0];
    if (__p.__r_.__value_.__r.__words[0])
    {
      v34 = *(_QWORD *)(__p.__r_.__value_.__r.__words[0] + 80) - 1;
      *(_QWORD *)(__p.__r_.__value_.__r.__words[0] + 80) = v34;
      if (!v34)
        return internalJSONNode::deleteInternal(result, v29);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](&__str, &__p, 24);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (*(int *)(a1 + 96) >= 1)
    {
      v35 = 0;
      do
        xgboost_old::tree::TreeModel<float,xgboost_old::tree::RTreeNodeStat>::Dump((_QWORD *)a1, v35++, (uint64_t)&__str, a2, 0, a3);
      while (v35 < *(_DWORD *)(a1 + 96));
    }
    std::stringbuf::str();
    __str.__r_.__value_.__r.__words[0] = *MEMORY[0x24BEDB7F0];
    v36 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words
                              + *(_QWORD *)(__str.__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0]
                                                                                                  + 64);
    __str.__r_.__value_.__r.__words[2] = v36;
    v41 = MEMORY[0x24BEDB848] + 16;
    if (v43 < 0)
      operator delete(v42);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    return (internalJSONNode *)MEMORY[0x219A198F4](&v44);
  }
  return result;
}

void sub_2183C6568(void *a1)
{
  __cxa_call_unexpected(a1);
}

void sub_2183C659C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

internalJSONNode *xgboost_old::tree::TreeModel<float,xgboost_old::tree::RTreeNodeStat>::DumpJson(uint64_t *a1, uint64_t a2, internalJSONNode **a3, internalJSONNode **a4, xgboost_old::utils::FeatMap *a5, int a6, uint64_t a7)
{
  internalJSONNode *v14;
  internalJSONNode *v15;
  internalJSONNode *v16;
  internalJSONNode *v17;
  const internalJSONNode *v18;
  internalJSONNode *v19;
  unint64_t v20;
  internalJSONNode *v21;
  internalJSONNode *v22;
  uint64_t v23;
  const internalJSONNode *v24;
  internalJSONNode *v25;
  unint64_t v26;
  internalJSONNode *v27;
  internalJSONNode *v28;
  uint64_t v29;
  const internalJSONNode *v30;
  unint64_t v31;
  internalJSONNode *v32;
  internalJSONNode *v33;
  internalJSONNode *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  float v38;
  unint64_t v39;
  const char *v40;
  const char *v41;
  char *v42;
  const internalJSONNode *v43;
  internalJSONNode *v44;
  unint64_t v45;
  internalJSONNode *v46;
  const char *v47;
  internalJSONNode *v48;
  uint64_t v49;
  const char *v50;
  const internalJSONNode *v51;
  internalJSONNode *v52;
  unint64_t v53;
  internalJSONNode *v54;
  internalJSONNode *v55;
  uint64_t v56;
  const internalJSONNode *v57;
  internalJSONNode *v58;
  unint64_t v59;
  internalJSONNode *v60;
  internalJSONNode *v61;
  uint64_t v62;
  const internalJSONNode *v63;
  internalJSONNode *v64;
  unint64_t v65;
  internalJSONNode *v66;
  internalJSONNode *v67;
  uint64_t v68;
  const internalJSONNode *v69;
  internalJSONNode *v70;
  unint64_t v71;
  internalJSONNode *v72;
  internalJSONNode *v73;
  uint64_t v74;
  const internalJSONNode *v75;
  internalJSONNode *v76;
  unint64_t v77;
  internalJSONNode *v78;
  internalJSONNode *v79;
  uint64_t v80;
  const internalJSONNode *v81;
  internalJSONNode *v82;
  unint64_t v83;
  internalJSONNode *v84;
  internalJSONNode *v85;
  uint64_t v86;
  const internalJSONNode *v87;
  internalJSONNode *v88;
  unint64_t v89;
  internalJSONNode *v90;
  internalJSONNode *v91;
  uint64_t v92;
  const internalJSONNode *v93;
  internalJSONNode *v94;
  unint64_t v95;
  internalJSONNode *v96;
  uint64_t v97;
  internalJSONNode *v98;
  unint64_t v99;
  internalJSONNode *v100;
  const internalJSONNode *v101;
  internalJSONNode *v102;
  unint64_t v103;
  internalJSONNode *v104;
  internalJSONNode *v105;
  uint64_t v106;
  const internalJSONNode *v107;
  internalJSONNode *v108;
  unint64_t v109;
  internalJSONNode *v110;
  internalJSONNode *v111;
  uint64_t v112;
  const internalJSONNode *v113;
  internalJSONNode *v114;
  unint64_t v115;
  internalJSONNode *v116;
  internalJSONNode *v117;
  uint64_t v118;
  const internalJSONNode *v119;
  internalJSONNode *v120;
  unint64_t v121;
  internalJSONNode *v122;
  internalJSONNode *v123;
  uint64_t v124;
  const internalJSONNode *v125;
  internalJSONNode *v126;
  unint64_t v127;
  internalJSONNode *v128;
  internalJSONNode *v129;
  uint64_t v130;
  const internalJSONNode *v131;
  internalJSONNode *v132;
  unint64_t v133;
  internalJSONNode *v134;
  internalJSONNode *v135;
  uint64_t v136;
  const internalJSONNode *v137;
  internalJSONNode *v138;
  unint64_t v139;
  internalJSONNode *v140;
  internalJSONNode *v141;
  uint64_t v142;
  const internalJSONNode *v143;
  internalJSONNode *v144;
  unint64_t v145;
  internalJSONNode *v146;
  internalJSONNode *v147;
  uint64_t v148;
  uint64_t v149;
  int v150;
  unsigned int *v151;
  unsigned int *v152;
  const internalJSONNode *v153;
  internalJSONNode *v154;
  unint64_t v155;
  internalJSONNode *v156;
  internalJSONNode *v157;
  uint64_t v158;
  const internalJSONNode *v159;
  internalJSONNode *v160;
  unint64_t v161;
  internalJSONNode *v162;
  internalJSONNode *v163;
  uint64_t v164;
  const internalJSONNode *v165;
  internalJSONNode *v166;
  unint64_t v167;
  internalJSONNode *v168;
  internalJSONNode *v169;
  uint64_t v170;
  const internalJSONNode *v171;
  internalJSONNode *v172;
  unint64_t v173;
  internalJSONNode *v174;
  internalJSONNode *v175;
  uint64_t v176;
  const internalJSONNode *v177;
  internalJSONNode *v178;
  unint64_t v179;
  internalJSONNode *v180;
  internalJSONNode *v181;
  uint64_t v182;
  const internalJSONNode *v183;
  unint64_t v184;
  internalJSONNode *v185;
  internalJSONNode *v186;
  internalJSONNode *v187;
  uint64_t v188;
  const internalJSONNode *v189;
  internalJSONNode *v190;
  unint64_t v191;
  const internalJSONNode *v192;
  internalJSONNode *v193;
  unint64_t v194;
  internalJSONNode *v195;
  internalJSONNode *v196;
  uint64_t v197;
  const internalJSONNode *v198;
  internalJSONNode *v199;
  unint64_t v200;
  internalJSONNode *v201;
  internalJSONNode *v202;
  uint64_t v203;
  uint64_t v204;
  int v205;
  unsigned int *v206;
  unsigned int *v207;
  BOOL v208;
  unsigned int *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  int v213;
  unsigned int *v214;
  unsigned int *v215;
  const internalJSONNode *v216;
  internalJSONNode *v217;
  unint64_t v218;
  internalJSONNode *v219;
  internalJSONNode *v220;
  uint64_t v221;
  const internalJSONNode *v222;
  internalJSONNode *v223;
  unint64_t v224;
  internalJSONNode *v225;
  internalJSONNode *v226;
  uint64_t v227;
  const internalJSONNode *v228;
  internalJSONNode *v229;
  unint64_t v230;
  internalJSONNode *v231;
  internalJSONNode *v232;
  uint64_t v233;
  const internalJSONNode *v234;
  internalJSONNode *v235;
  unint64_t v236;
  internalJSONNode *v237;
  internalJSONNode *v238;
  uint64_t v239;
  const internalJSONNode *v240;
  internalJSONNode *v241;
  unint64_t v242;
  internalJSONNode *v243;
  internalJSONNode *v244;
  uint64_t v245;
  const internalJSONNode *v246;
  unint64_t v247;
  internalJSONNode *v248;
  internalJSONNode *v249;
  internalJSONNode *v250;
  uint64_t v251;
  const internalJSONNode *v252;
  internalJSONNode *v253;
  unint64_t v254;
  internalJSONNode *v255;
  internalJSONNode *v256;
  uint64_t v257;
  const internalJSONNode *v258;
  internalJSONNode *v259;
  unint64_t v260;
  internalJSONNode *v261;
  internalJSONNode *v262;
  uint64_t v263;
  uint64_t v264;
  int v265;
  unsigned int *v266;
  unsigned int *v267;
  const internalJSONNode *v268;
  internalJSONNode *v269;
  unint64_t v270;
  internalJSONNode *v271;
  internalJSONNode *v272;
  uint64_t v273;
  const internalJSONNode *v274;
  internalJSONNode *v275;
  unint64_t v276;
  internalJSONNode *v277;
  internalJSONNode *v278;
  uint64_t v279;
  const internalJSONNode *v280;
  internalJSONNode *v281;
  unint64_t v282;
  internalJSONNode *v283;
  internalJSONNode *v284;
  uint64_t v285;
  const internalJSONNode *v286;
  internalJSONNode *v287;
  unint64_t v288;
  internalJSONNode *v289;
  internalJSONNode *v290;
  uint64_t v291;
  const internalJSONNode *v292;
  internalJSONNode *v293;
  unint64_t v294;
  internalJSONNode *v295;
  internalJSONNode *v296;
  uint64_t v297;
  const internalJSONNode *v298;
  unint64_t v299;
  internalJSONNode *v300;
  internalJSONNode *v301;
  internalJSONNode *v302;
  uint64_t v303;
  internalJSONNode *v304;
  internalJSONNode *v305;
  uint64_t v306;
  internalJSONNode *v307;
  unint64_t v308;
  const internalJSONNode *v309;
  internalJSONNode *v310;
  unint64_t v311;
  const internalJSONNode *v312;
  internalJSONNode *v313;
  unint64_t v314;
  uint64_t v315;
  internalJSONNode *v316;
  uint64_t v317;
  internalJSONNode *result;
  uint64_t v319;
  internalJSONNode *v320[2];
  char v321;
  internalJSONNode *v322;
  void *__p[2];
  char v324;
  internalJSONNode *v325;
  internalJSONNode *v326;
  internalJSONNode *v327;

  internalJSONNode::newInternal((internalJSONNode *)5);
  v327 = v14;
  internalJSONNode::newInternal((internalJSONNode *)5);
  v326 = v15;
  internalJSONNode::newInternal((internalJSONNode *)5);
  v17 = v16;
  v325 = v16;
  std::string::basic_string[abi:ne180100]<0>(__p, "id");
  JSONNode::JSONNode(v320, __p, a2);
  v19 = v327;
  v20 = *((_QWORD *)v327 + 10);
  if (v20 >= 2)
  {
    *((_QWORD *)v327 + 10) = v20 - 1;
    internalJSONNode::newInternal(v19, v18);
  }
  v327 = v19;
  internalJSONNode::push_back(v19, (uint64_t *)v320);
  v22 = v320[0];
  if (v320[0])
  {
    v23 = *((_QWORD *)v320[0] + 10) - 1;
    *((_QWORD *)v320[0] + 10) = v23;
    if (!v23)
      internalJSONNode::deleteInternal(v22, v21);
  }
  if (v324 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "src");
  JSONNode::JSONNode(v320, __p, a2);
  v25 = v326;
  v26 = *((_QWORD *)v326 + 10);
  if (v26 >= 2)
  {
    *((_QWORD *)v326 + 10) = v26 - 1;
    internalJSONNode::newInternal(v25, v24);
  }
  v326 = v25;
  internalJSONNode::push_back(v25, (uint64_t *)v320);
  v28 = v320[0];
  if (v320[0])
  {
    v29 = *((_QWORD *)v320[0] + 10) - 1;
    *((_QWORD *)v320[0] + 10) = v29;
    if (!v29)
      internalJSONNode::deleteInternal(v28, v27);
  }
  if (v324 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "src");
  JSONNode::JSONNode(v320, __p, a2);
  v31 = *((_QWORD *)v17 + 10);
  if (v31 >= 2)
  {
    *((_QWORD *)v17 + 10) = v31 - 1;
    internalJSONNode::newInternal(v17, v30);
    v17 = v32;
  }
  v325 = v17;
  internalJSONNode::push_back(v17, (uint64_t *)v320);
  v34 = v320[0];
  if (v320[0])
  {
    v35 = *((_QWORD *)v320[0] + 10) - 1;
    *((_QWORD *)v320[0] + 10) = v35;
    if (!v35)
      internalJSONNode::deleteInternal(v34, v33);
  }
  if (v324 < 0)
    operator delete(__p[0]);
  v36 = (int)a2;
  v37 = *a1;
  if (*(_DWORD *)(*a1 + 20 * (int)a2 + 4) != -1)
  {
    v38 = *(float *)(v37 + 20 * (int)a2 + 16);
    xgboost_old::tree::TreeModel<float,xgboost_old::tree::RTreeNodeStat>::float_to_hexadecimal(__p, v38);
    v39 = *(_DWORD *)(*a1 + 20 * (int)a2 + 12) & 0x7FFFFFFF;
    xgboost_old::utils::Assert(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a5 + 1) - *(_QWORD *)a5) >> 3) > v39, "Invalid feature", v40);
    std::string::basic_string[abi:ne180100]<0>(v320, "name");
    v42 = xgboost_old::utils::FeatMap::name(a5, v39, v41);
    JSONNode::JSONNode(&v322, v320, v42);
    v44 = v327;
    v45 = *((_QWORD *)v327 + 10);
    if (v45 >= 2)
    {
      *((_QWORD *)v327 + 10) = v45 - 1;
      internalJSONNode::newInternal(v44, v43);
    }
    v327 = v44;
    internalJSONNode::push_back(v44, (uint64_t *)&v322);
    v48 = v322;
    if (v322)
    {
      v49 = *((_QWORD *)v322 + 10) - 1;
      *((_QWORD *)v322 + 10) = v49;
      if (!v49)
        internalJSONNode::deleteInternal(v48, v46);
    }
    if (v321 < 0)
      operator delete(v320[0]);
    xgboost_old::utils::Assert(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a5 + 1) - *(_QWORD *)a5) >> 3) > v39, "utils::FMap::name feature index exceed bound", v47);
    switch(*(_DWORD *)(*((_QWORD *)a5 + 3) + 4 * v39))
    {
      case 0:
        std::string::basic_string[abi:ne180100]<0>(v320, "type");
        JSONNode::JSONNode(&v322, v320, "indicator");
        v102 = v327;
        v103 = *((_QWORD *)v327 + 10);
        if (v103 >= 2)
        {
          *((_QWORD *)v327 + 10) = v103 - 1;
          internalJSONNode::newInternal(v102, v101);
        }
        v327 = v102;
        internalJSONNode::push_back(v102, (uint64_t *)&v322);
        v105 = v322;
        if (v322)
        {
          v106 = *((_QWORD *)v322 + 10) - 1;
          *((_QWORD *)v322 + 10) = v106;
          if (!v106)
            internalJSONNode::deleteInternal(v105, v104);
        }
        if (v321 < 0)
          operator delete(v320[0]);
        std::string::basic_string[abi:ne180100]<0>(v320, "value");
        JSONNode::JSONNode(&v322, v320, 1);
        v108 = v327;
        v109 = *((_QWORD *)v327 + 10);
        if (v109 >= 2)
        {
          *((_QWORD *)v327 + 10) = v109 - 1;
          internalJSONNode::newInternal(v108, v107);
        }
        v327 = v108;
        internalJSONNode::push_back(v108, (uint64_t *)&v322);
        v111 = v322;
        if (v322)
        {
          v112 = *((_QWORD *)v322 + 10) - 1;
          *((_QWORD *)v322 + 10) = v112;
          if (!v112)
            internalJSONNode::deleteInternal(v111, v110);
        }
        if (v321 < 0)
          operator delete(v320[0]);
        std::string::basic_string[abi:ne180100]<0>(v320, "value_hexadecimal");
        JSONNode::JSONNode(&v322, v320, __p);
        v114 = v327;
        v115 = *((_QWORD *)v327 + 10);
        if (v115 >= 2)
        {
          *((_QWORD *)v327 + 10) = v115 - 1;
          internalJSONNode::newInternal(v114, v113);
        }
        v327 = v114;
        internalJSONNode::push_back(v114, (uint64_t *)&v322);
        v117 = v322;
        if (v322)
        {
          v118 = *((_QWORD *)v322 + 10) - 1;
          *((_QWORD *)v322 + 10) = v118;
          if (!v118)
            internalJSONNode::deleteInternal(v117, v116);
        }
        if (v321 < 0)
        {
          operator delete(v320[0]);
          if (!(_DWORD)a7)
            goto LABEL_215;
        }
        else if (!(_DWORD)a7)
        {
          goto LABEL_215;
        }
        std::string::basic_string[abi:ne180100]<0>(v320, "gain");
        JSONNode::JSONNode(&v322, v320, *(float *)(a1[6] + 16 * v36));
        v193 = v327;
        v194 = *((_QWORD *)v327 + 10);
        if (v194 >= 2)
        {
          *((_QWORD *)v327 + 10) = v194 - 1;
          internalJSONNode::newInternal(v193, v192);
        }
        v327 = v193;
        internalJSONNode::push_back(v193, (uint64_t *)&v322);
        v196 = v322;
        if (v322)
        {
          v197 = *((_QWORD *)v322 + 10) - 1;
          *((_QWORD *)v322 + 10) = v197;
          if (!v197)
            internalJSONNode::deleteInternal(v196, v195);
        }
        if (v321 < 0)
          operator delete(v320[0]);
        std::string::basic_string[abi:ne180100]<0>(v320, "cover");
        JSONNode::JSONNode(&v322, v320, *(float *)(a1[6] + 16 * v36 + 4));
        v199 = v327;
        v200 = *((_QWORD *)v327 + 10);
        if (v200 >= 2)
        {
          *((_QWORD *)v327 + 10) = v200 - 1;
          internalJSONNode::newInternal(v199, v198);
        }
        v327 = v199;
        internalJSONNode::push_back(v199, (uint64_t *)&v322);
        v202 = v322;
        if (v322)
        {
          v203 = *((_QWORD *)v322 + 10) - 1;
          *((_QWORD *)v322 + 10) = v203;
          if (!v203)
            internalJSONNode::deleteInternal(v202, v201);
        }
        if (v321 < 0)
          operator delete(v320[0]);
LABEL_215:
        v204 = *a1 + 20 * (int)v36;
        v205 = *(_DWORD *)(v204 + 12);
        v206 = (unsigned int *)(v204 + 8);
        v207 = (unsigned int *)(v204 + 4);
        v208 = v205 < 0;
        if (v205 >= 0)
          v209 = v207;
        else
          v209 = v206;
        if (!v208)
          v207 = v206;
        v210 = *v207;
        v211 = *v209;
        std::string::basic_string[abi:ne180100]<0>(v320, "missing_child");
        v212 = *a1 + 20 * (int)v36;
        v213 = *(_DWORD *)(v212 + 12);
        v214 = (unsigned int *)(v212 + 4);
        v215 = (unsigned int *)(v212 + 8);
        if (v213 < 0)
          v215 = v214;
        JSONNode::JSONNode(&v322, v320, *v215);
        v217 = v327;
        v218 = *((_QWORD *)v327 + 10);
        if (v218 >= 2)
        {
          *((_QWORD *)v327 + 10) = v218 - 1;
          internalJSONNode::newInternal(v217, v216);
        }
        v327 = v217;
        internalJSONNode::push_back(v217, (uint64_t *)&v322);
        v220 = v322;
        if (v322)
        {
          v221 = *((_QWORD *)v322 + 10) - 1;
          *((_QWORD *)v322 + 10) = v221;
          if (!v221)
            internalJSONNode::deleteInternal(v220, v219);
        }
        if (v321 < 0)
          operator delete(v320[0]);
        std::string::basic_string[abi:ne180100]<0>(v320, "yes_child");
        JSONNode::JSONNode(&v322, v320, v211);
        v223 = v327;
        v224 = *((_QWORD *)v327 + 10);
        if (v224 >= 2)
        {
          *((_QWORD *)v327 + 10) = v224 - 1;
          internalJSONNode::newInternal(v223, v222);
        }
        v327 = v223;
        internalJSONNode::push_back(v223, (uint64_t *)&v322);
        v226 = v322;
        if (v322)
        {
          v227 = *((_QWORD *)v322 + 10) - 1;
          *((_QWORD *)v322 + 10) = v227;
          if (!v227)
            internalJSONNode::deleteInternal(v226, v225);
        }
        if (v321 < 0)
          operator delete(v320[0]);
        std::string::basic_string[abi:ne180100]<0>(v320, "no_child");
        JSONNode::JSONNode(&v322, v320, v210);
        v229 = v327;
        v230 = *((_QWORD *)v327 + 10);
        if (v230 >= 2)
        {
          *((_QWORD *)v327 + 10) = v230 - 1;
          internalJSONNode::newInternal(v229, v228);
        }
        v327 = v229;
        internalJSONNode::push_back(v229, (uint64_t *)&v322);
        v232 = v322;
        if (v322)
        {
          v233 = *((_QWORD *)v322 + 10) - 1;
          *((_QWORD *)v322 + 10) = v233;
          if (!v233)
            internalJSONNode::deleteInternal(v232, v231);
        }
        if (v321 < 0)
          operator delete(v320[0]);
        std::string::basic_string[abi:ne180100]<0>(v320, "dst");
        JSONNode::JSONNode(&v322, v320, v211);
        v235 = v326;
        v236 = *((_QWORD *)v326 + 10);
        if (v236 >= 2)
        {
          *((_QWORD *)v326 + 10) = v236 - 1;
          internalJSONNode::newInternal(v235, v234);
        }
        v326 = v235;
        internalJSONNode::push_back(v235, (uint64_t *)&v322);
        v238 = v322;
        if (v322)
        {
          v239 = *((_QWORD *)v322 + 10) - 1;
          *((_QWORD *)v322 + 10) = v239;
          if (!v239)
            internalJSONNode::deleteInternal(v238, v237);
        }
        if (v321 < 0)
          operator delete(v320[0]);
        std::string::basic_string[abi:ne180100]<0>(v320, "value");
        JSONNode::JSONNode(&v322, v320, "yes");
        v241 = v326;
        v242 = *((_QWORD *)v326 + 10);
        if (v242 >= 2)
        {
          *((_QWORD *)v326 + 10) = v242 - 1;
          internalJSONNode::newInternal(v241, v240);
        }
        v326 = v241;
        internalJSONNode::push_back(v241, (uint64_t *)&v322);
        v244 = v322;
        if (v322)
        {
          v245 = *((_QWORD *)v322 + 10) - 1;
          *((_QWORD *)v322 + 10) = v245;
          if (!v245)
            internalJSONNode::deleteInternal(v244, v243);
        }
        if (v321 < 0)
          operator delete(v320[0]);
        std::string::basic_string[abi:ne180100]<0>(v320, "dst");
        JSONNode::JSONNode(&v322, v320, v210);
        v247 = *((_QWORD *)v17 + 10);
        if (v247 >= 2)
        {
          *((_QWORD *)v17 + 10) = v247 - 1;
          internalJSONNode::newInternal(v17, v246);
          v17 = v248;
        }
        v325 = v17;
        internalJSONNode::push_back(v17, (uint64_t *)&v322);
        v250 = v322;
        if (v322)
        {
          v251 = *((_QWORD *)v322 + 10) - 1;
          *((_QWORD *)v322 + 10) = v251;
          if (!v251)
            internalJSONNode::deleteInternal(v250, v249);
        }
        if (v321 < 0)
          operator delete(v320[0]);
        std::string::basic_string[abi:ne180100]<0>(v320, "value");
        JSONNode::JSONNode(&v322, v320, "no");
        v190 = v325;
        v191 = *((_QWORD *)v325 + 10);
        if (v191 >= 2)
          goto LABEL_326;
        goto LABEL_327;
      case 1:
      case 3:
        std::string::basic_string[abi:ne180100]<0>(v320, "type");
        JSONNode::JSONNode(&v322, v320, "float");
        v52 = v327;
        v53 = *((_QWORD *)v327 + 10);
        if (v53 >= 2)
        {
          *((_QWORD *)v327 + 10) = v53 - 1;
          internalJSONNode::newInternal(v52, v51);
        }
        v327 = v52;
        internalJSONNode::push_back(v52, (uint64_t *)&v322);
        v55 = v322;
        if (v322)
        {
          v56 = *((_QWORD *)v322 + 10) - 1;
          *((_QWORD *)v322 + 10) = v56;
          if (!v56)
            internalJSONNode::deleteInternal(v55, v54);
        }
        if (v321 < 0)
          operator delete(v320[0]);
        std::string::basic_string[abi:ne180100]<0>(v320, "value");
        JSONNode::JSONNode(&v322, v320, v38);
        v58 = v327;
        v59 = *((_QWORD *)v327 + 10);
        if (v59 >= 2)
        {
          *((_QWORD *)v327 + 10) = v59 - 1;
          internalJSONNode::newInternal(v58, v57);
        }
        v327 = v58;
        internalJSONNode::push_back(v58, (uint64_t *)&v322);
        v61 = v322;
        if (v322)
        {
          v62 = *((_QWORD *)v322 + 10) - 1;
          *((_QWORD *)v322 + 10) = v62;
          if (!v62)
            internalJSONNode::deleteInternal(v61, v60);
        }
        if (v321 < 0)
          operator delete(v320[0]);
        std::string::basic_string[abi:ne180100]<0>(v320, "value_hexadecimal");
        JSONNode::JSONNode(&v322, v320, __p);
        v64 = v327;
        v65 = *((_QWORD *)v327 + 10);
        if (v65 >= 2)
        {
          *((_QWORD *)v327 + 10) = v65 - 1;
          internalJSONNode::newInternal(v64, v63);
        }
        v327 = v64;
        internalJSONNode::push_back(v64, (uint64_t *)&v322);
        v67 = v322;
        if (v322)
        {
          v68 = *((_QWORD *)v322 + 10) - 1;
          *((_QWORD *)v322 + 10) = v68;
          if (!v68)
            internalJSONNode::deleteInternal(v67, v66);
        }
        if (v321 < 0)
        {
          operator delete(v320[0]);
          if (!(_DWORD)a7)
            goto LABEL_154;
        }
        else if (!(_DWORD)a7)
        {
          goto LABEL_154;
        }
        std::string::basic_string[abi:ne180100]<0>(v320, "gain");
        JSONNode::JSONNode(&v322, v320, *(float *)(a1[6] + 16 * v36));
        v138 = v327;
        v139 = *((_QWORD *)v327 + 10);
        if (v139 >= 2)
        {
          *((_QWORD *)v327 + 10) = v139 - 1;
          internalJSONNode::newInternal(v138, v137);
        }
        v327 = v138;
        internalJSONNode::push_back(v138, (uint64_t *)&v322);
        v141 = v322;
        if (v322)
        {
          v142 = *((_QWORD *)v322 + 10) - 1;
          *((_QWORD *)v322 + 10) = v142;
          if (!v142)
            internalJSONNode::deleteInternal(v141, v140);
        }
        if (v321 < 0)
          operator delete(v320[0]);
        std::string::basic_string[abi:ne180100]<0>(v320, "cover");
        JSONNode::JSONNode(&v322, v320, *(float *)(a1[6] + 16 * v36 + 4));
        v144 = v327;
        v145 = *((_QWORD *)v327 + 10);
        if (v145 >= 2)
        {
          *((_QWORD *)v327 + 10) = v145 - 1;
          internalJSONNode::newInternal(v144, v143);
        }
        v327 = v144;
        internalJSONNode::push_back(v144, (uint64_t *)&v322);
        v147 = v322;
        if (v322)
        {
          v148 = *((_QWORD *)v322 + 10) - 1;
          *((_QWORD *)v322 + 10) = v148;
          if (!v148)
            internalJSONNode::deleteInternal(v147, v146);
        }
        if (v321 < 0)
          operator delete(v320[0]);
LABEL_154:
        std::string::basic_string[abi:ne180100]<0>(v320, "missing_child");
        v149 = *a1 + 20 * (int)v36;
        v150 = *(_DWORD *)(v149 + 12);
        v151 = (unsigned int *)(v149 + 4);
        v152 = (unsigned int *)(v149 + 8);
        if (v150 < 0)
          v152 = v151;
        JSONNode::JSONNode(&v322, v320, *v152);
        v154 = v327;
        v155 = *((_QWORD *)v327 + 10);
        if (v155 >= 2)
        {
          *((_QWORD *)v327 + 10) = v155 - 1;
          internalJSONNode::newInternal(v154, v153);
        }
        v327 = v154;
        internalJSONNode::push_back(v154, (uint64_t *)&v322);
        v157 = v322;
        if (v322)
        {
          v158 = *((_QWORD *)v322 + 10) - 1;
          *((_QWORD *)v322 + 10) = v158;
          if (!v158)
            internalJSONNode::deleteInternal(v157, v156);
        }
        if (v321 < 0)
          operator delete(v320[0]);
        std::string::basic_string[abi:ne180100]<0>(v320, "yes_child");
        JSONNode::JSONNode(&v322, v320, *(unsigned int *)(*a1 + 20 * (int)v36 + 4));
        v160 = v327;
        v161 = *((_QWORD *)v327 + 10);
        if (v161 >= 2)
        {
          *((_QWORD *)v327 + 10) = v161 - 1;
          internalJSONNode::newInternal(v160, v159);
        }
        v327 = v160;
        internalJSONNode::push_back(v160, (uint64_t *)&v322);
        v163 = v322;
        if (v322)
        {
          v164 = *((_QWORD *)v322 + 10) - 1;
          *((_QWORD *)v322 + 10) = v164;
          if (!v164)
            internalJSONNode::deleteInternal(v163, v162);
        }
        if (v321 < 0)
          operator delete(v320[0]);
        std::string::basic_string[abi:ne180100]<0>(v320, "no_child");
        JSONNode::JSONNode(&v322, v320, *(unsigned int *)(*a1 + 20 * (int)v36 + 8));
        v166 = v327;
        v167 = *((_QWORD *)v327 + 10);
        if (v167 >= 2)
        {
          *((_QWORD *)v327 + 10) = v167 - 1;
          internalJSONNode::newInternal(v166, v165);
        }
        v327 = v166;
        internalJSONNode::push_back(v166, (uint64_t *)&v322);
        v169 = v322;
        if (v322)
        {
          v170 = *((_QWORD *)v322 + 10) - 1;
          *((_QWORD *)v322 + 10) = v170;
          if (!v170)
            internalJSONNode::deleteInternal(v169, v168);
        }
        if (v321 < 0)
          operator delete(v320[0]);
        std::string::basic_string[abi:ne180100]<0>(v320, "dst");
        JSONNode::JSONNode(&v322, v320, *(unsigned int *)(*a1 + 20 * (int)v36 + 4));
        v172 = v326;
        v173 = *((_QWORD *)v326 + 10);
        if (v173 >= 2)
        {
          *((_QWORD *)v326 + 10) = v173 - 1;
          internalJSONNode::newInternal(v172, v171);
        }
        v326 = v172;
        internalJSONNode::push_back(v172, (uint64_t *)&v322);
        v175 = v322;
        if (v322)
        {
          v176 = *((_QWORD *)v322 + 10) - 1;
          *((_QWORD *)v322 + 10) = v176;
          if (!v176)
            internalJSONNode::deleteInternal(v175, v174);
        }
        if (v321 < 0)
          operator delete(v320[0]);
        std::string::basic_string[abi:ne180100]<0>(v320, "value");
        JSONNode::JSONNode(&v322, v320, "yes");
        v178 = v326;
        v179 = *((_QWORD *)v326 + 10);
        if (v179 >= 2)
        {
          *((_QWORD *)v326 + 10) = v179 - 1;
          internalJSONNode::newInternal(v178, v177);
        }
        v326 = v178;
        internalJSONNode::push_back(v178, (uint64_t *)&v322);
        v181 = v322;
        if (v322)
        {
          v182 = *((_QWORD *)v322 + 10) - 1;
          *((_QWORD *)v322 + 10) = v182;
          if (!v182)
            internalJSONNode::deleteInternal(v181, v180);
        }
        if (v321 < 0)
          operator delete(v320[0]);
        std::string::basic_string[abi:ne180100]<0>(v320, "dst");
        JSONNode::JSONNode(&v322, v320, *(unsigned int *)(*a1 + 20 * (int)v36 + 8));
        v184 = *((_QWORD *)v17 + 10);
        if (v184 >= 2)
        {
          *((_QWORD *)v17 + 10) = v184 - 1;
          internalJSONNode::newInternal(v17, v183);
          v17 = v185;
        }
        v325 = v17;
        internalJSONNode::push_back(v17, (uint64_t *)&v322);
        v187 = v322;
        if (v322)
        {
          v188 = *((_QWORD *)v322 + 10) - 1;
          *((_QWORD *)v322 + 10) = v188;
          if (!v188)
            internalJSONNode::deleteInternal(v187, v186);
        }
        if (v321 < 0)
          operator delete(v320[0]);
        std::string::basic_string[abi:ne180100]<0>(v320, "value");
        JSONNode::JSONNode(&v322, v320, "no");
        v190 = v325;
        v191 = *((_QWORD *)v325 + 10);
        if (v191 >= 2)
          goto LABEL_326;
        goto LABEL_327;
      case 2:
        std::string::basic_string[abi:ne180100]<0>(v320, "type");
        JSONNode::JSONNode(&v322, v320, "integer");
        v120 = v327;
        v121 = *((_QWORD *)v327 + 10);
        if (v121 >= 2)
        {
          *((_QWORD *)v327 + 10) = v121 - 1;
          internalJSONNode::newInternal(v120, v119);
        }
        v327 = v120;
        internalJSONNode::push_back(v120, (uint64_t *)&v322);
        v123 = v322;
        if (v322)
        {
          v124 = *((_QWORD *)v322 + 10) - 1;
          *((_QWORD *)v322 + 10) = v124;
          if (!v124)
            internalJSONNode::deleteInternal(v123, v122);
        }
        if (v321 < 0)
          operator delete(v320[0]);
        std::string::basic_string[abi:ne180100]<0>(v320, "value");
        JSONNode::JSONNode(&v322, v320, v38);
        v126 = v327;
        v127 = *((_QWORD *)v327 + 10);
        if (v127 >= 2)
        {
          *((_QWORD *)v327 + 10) = v127 - 1;
          internalJSONNode::newInternal(v126, v125);
        }
        v327 = v126;
        internalJSONNode::push_back(v126, (uint64_t *)&v322);
        v129 = v322;
        if (v322)
        {
          v130 = *((_QWORD *)v322 + 10) - 1;
          *((_QWORD *)v322 + 10) = v130;
          if (!v130)
            internalJSONNode::deleteInternal(v129, v128);
        }
        if (v321 < 0)
          operator delete(v320[0]);
        std::string::basic_string[abi:ne180100]<0>(v320, "value_hexadecimal");
        JSONNode::JSONNode(&v322, v320, __p);
        v132 = v327;
        v133 = *((_QWORD *)v327 + 10);
        if (v133 >= 2)
        {
          *((_QWORD *)v327 + 10) = v133 - 1;
          internalJSONNode::newInternal(v132, v131);
        }
        v327 = v132;
        internalJSONNode::push_back(v132, (uint64_t *)&v322);
        v135 = v322;
        if (v322)
        {
          v136 = *((_QWORD *)v322 + 10) - 1;
          *((_QWORD *)v322 + 10) = v136;
          if (!v136)
            internalJSONNode::deleteInternal(v135, v134);
        }
        if (v321 < 0)
        {
          operator delete(v320[0]);
          if (!(_DWORD)a7)
            goto LABEL_281;
        }
        else if (!(_DWORD)a7)
        {
          goto LABEL_281;
        }
        std::string::basic_string[abi:ne180100]<0>(v320, "gain");
        JSONNode::JSONNode(&v322, v320, *(float *)(a1[6] + 16 * v36));
        v253 = v327;
        v254 = *((_QWORD *)v327 + 10);
        if (v254 >= 2)
        {
          *((_QWORD *)v327 + 10) = v254 - 1;
          internalJSONNode::newInternal(v253, v252);
        }
        v327 = v253;
        internalJSONNode::push_back(v253, (uint64_t *)&v322);
        v256 = v322;
        if (v322)
        {
          v257 = *((_QWORD *)v322 + 10) - 1;
          *((_QWORD *)v322 + 10) = v257;
          if (!v257)
            internalJSONNode::deleteInternal(v256, v255);
        }
        if (v321 < 0)
          operator delete(v320[0]);
        std::string::basic_string[abi:ne180100]<0>(v320, "cover");
        JSONNode::JSONNode(&v322, v320, *(float *)(a1[6] + 16 * v36 + 4));
        v259 = v327;
        v260 = *((_QWORD *)v327 + 10);
        if (v260 >= 2)
        {
          *((_QWORD *)v327 + 10) = v260 - 1;
          internalJSONNode::newInternal(v259, v258);
        }
        v327 = v259;
        internalJSONNode::push_back(v259, (uint64_t *)&v322);
        v262 = v322;
        if (v322)
        {
          v263 = *((_QWORD *)v322 + 10) - 1;
          *((_QWORD *)v322 + 10) = v263;
          if (!v263)
            internalJSONNode::deleteInternal(v262, v261);
        }
        if (v321 < 0)
          operator delete(v320[0]);
LABEL_281:
        std::string::basic_string[abi:ne180100]<0>(v320, "missing_child");
        v264 = *a1 + 20 * (int)v36;
        v265 = *(_DWORD *)(v264 + 12);
        v266 = (unsigned int *)(v264 + 4);
        v267 = (unsigned int *)(v264 + 8);
        if (v265 < 0)
          v267 = v266;
        JSONNode::JSONNode(&v322, v320, *v267);
        v269 = v327;
        v270 = *((_QWORD *)v327 + 10);
        if (v270 >= 2)
        {
          *((_QWORD *)v327 + 10) = v270 - 1;
          internalJSONNode::newInternal(v269, v268);
        }
        v327 = v269;
        internalJSONNode::push_back(v269, (uint64_t *)&v322);
        v272 = v322;
        if (v322)
        {
          v273 = *((_QWORD *)v322 + 10) - 1;
          *((_QWORD *)v322 + 10) = v273;
          if (!v273)
            internalJSONNode::deleteInternal(v272, v271);
        }
        if (v321 < 0)
          operator delete(v320[0]);
        std::string::basic_string[abi:ne180100]<0>(v320, "yes_child");
        JSONNode::JSONNode(&v322, v320, *(unsigned int *)(*a1 + 20 * (int)v36 + 4));
        v275 = v327;
        v276 = *((_QWORD *)v327 + 10);
        if (v276 >= 2)
        {
          *((_QWORD *)v327 + 10) = v276 - 1;
          internalJSONNode::newInternal(v275, v274);
        }
        v327 = v275;
        internalJSONNode::push_back(v275, (uint64_t *)&v322);
        v278 = v322;
        if (v322)
        {
          v279 = *((_QWORD *)v322 + 10) - 1;
          *((_QWORD *)v322 + 10) = v279;
          if (!v279)
            internalJSONNode::deleteInternal(v278, v277);
        }
        if (v321 < 0)
          operator delete(v320[0]);
        std::string::basic_string[abi:ne180100]<0>(v320, "no_child");
        JSONNode::JSONNode(&v322, v320, *(unsigned int *)(*a1 + 20 * (int)v36 + 8));
        v281 = v327;
        v282 = *((_QWORD *)v327 + 10);
        if (v282 >= 2)
        {
          *((_QWORD *)v327 + 10) = v282 - 1;
          internalJSONNode::newInternal(v281, v280);
        }
        v327 = v281;
        internalJSONNode::push_back(v281, (uint64_t *)&v322);
        v284 = v322;
        if (v322)
        {
          v285 = *((_QWORD *)v322 + 10) - 1;
          *((_QWORD *)v322 + 10) = v285;
          if (!v285)
            internalJSONNode::deleteInternal(v284, v283);
        }
        if (v321 < 0)
          operator delete(v320[0]);
        std::string::basic_string[abi:ne180100]<0>(v320, "dst");
        JSONNode::JSONNode(&v322, v320, *(unsigned int *)(*a1 + 20 * (int)v36 + 4));
        v287 = v326;
        v288 = *((_QWORD *)v326 + 10);
        if (v288 >= 2)
        {
          *((_QWORD *)v326 + 10) = v288 - 1;
          internalJSONNode::newInternal(v287, v286);
        }
        v326 = v287;
        internalJSONNode::push_back(v287, (uint64_t *)&v322);
        v290 = v322;
        if (v322)
        {
          v291 = *((_QWORD *)v322 + 10) - 1;
          *((_QWORD *)v322 + 10) = v291;
          if (!v291)
            internalJSONNode::deleteInternal(v290, v289);
        }
        if (v321 < 0)
          operator delete(v320[0]);
        std::string::basic_string[abi:ne180100]<0>(v320, "value");
        JSONNode::JSONNode(&v322, v320, "yes");
        v293 = v326;
        v294 = *((_QWORD *)v326 + 10);
        if (v294 >= 2)
        {
          *((_QWORD *)v326 + 10) = v294 - 1;
          internalJSONNode::newInternal(v293, v292);
        }
        v326 = v293;
        internalJSONNode::push_back(v293, (uint64_t *)&v322);
        v296 = v322;
        if (v322)
        {
          v297 = *((_QWORD *)v322 + 10) - 1;
          *((_QWORD *)v322 + 10) = v297;
          if (!v297)
            internalJSONNode::deleteInternal(v296, v295);
        }
        if (v321 < 0)
          operator delete(v320[0]);
        std::string::basic_string[abi:ne180100]<0>(v320, "dst");
        JSONNode::JSONNode(&v322, v320, *(unsigned int *)(*a1 + 20 * (int)v36 + 8));
        v299 = *((_QWORD *)v17 + 10);
        if (v299 >= 2)
        {
          *((_QWORD *)v17 + 10) = v299 - 1;
          internalJSONNode::newInternal(v17, v298);
          v17 = v300;
        }
        v325 = v17;
        internalJSONNode::push_back(v17, (uint64_t *)&v322);
        v302 = v322;
        if (v322)
        {
          v303 = *((_QWORD *)v322 + 10) - 1;
          *((_QWORD *)v322 + 10) = v303;
          if (!v303)
            internalJSONNode::deleteInternal(v302, v301);
        }
        if (v321 < 0)
          operator delete(v320[0]);
        std::string::basic_string[abi:ne180100]<0>(v320, "value");
        JSONNode::JSONNode(&v322, v320, "no");
        v190 = v325;
        v191 = *((_QWORD *)v325 + 10);
        if (v191 >= 2)
        {
LABEL_326:
          *((_QWORD *)v325 + 10) = v191 - 1;
          internalJSONNode::newInternal(v190, v189);
        }
LABEL_327:
        v325 = v190;
        internalJSONNode::push_back(v190, (uint64_t *)&v322);
        v305 = v322;
        if (v322)
        {
          v306 = *((_QWORD *)v322 + 10) - 1;
          *((_QWORD *)v322 + 10) = v306;
          if (!v306)
            internalJSONNode::deleteInternal(v305, v304);
        }
        if (v321 < 0)
          operator delete(v320[0]);
        v307 = *a3;
        v308 = *((_QWORD *)*a3 + 10);
        if (v308 >= 2)
        {
          *((_QWORD *)v307 + 10) = v308 - 1;
          internalJSONNode::newInternal(v307, v304);
        }
        *a3 = v307;
        internalJSONNode::push_back(v307, (uint64_t *)&v327);
        v310 = *a4;
        v311 = *((_QWORD *)*a4 + 10);
        if (v311 >= 2)
        {
          *((_QWORD *)v310 + 10) = v311 - 1;
          internalJSONNode::newInternal(v310, v309);
        }
        *a4 = v310;
        internalJSONNode::push_back(v310, (uint64_t *)&v326);
        v313 = *a4;
        v314 = *((_QWORD *)*a4 + 10);
        if (v314 >= 2)
        {
          *((_QWORD *)v313 + 10) = v314 - 1;
          internalJSONNode::newInternal(v313, v312);
        }
        *a4 = v313;
        internalJSONNode::push_back(v313, (uint64_t *)&v325);
        xgboost_old::tree::TreeModel<float,xgboost_old::tree::RTreeNodeStat>::DumpJson(a1, *(unsigned int *)(*a1 + 20 * (int)v36 + 4), a3, a4, a5, (a6 + 1), a7);
        xgboost_old::tree::TreeModel<float,xgboost_old::tree::RTreeNodeStat>::DumpJson(a1, *(unsigned int *)(*a1 + 20 * (int)v36 + 8), a3, a4, a5, (a6 + 1), a7);
        if (v324 < 0)
          operator delete(__p[0]);
        v17 = v325;
        break;
      default:
        xgboost_old::utils::Error((xgboost_old::utils *)"unknown fmap type", v50);
    }
    goto LABEL_341;
  }
  xgboost_old::tree::TreeModel<float,xgboost_old::tree::RTreeNodeStat>::float_to_hexadecimal(__p, *(float *)(v37 + 20 * (int)a2 + 16));
  std::string::basic_string[abi:ne180100]<0>(v320, "type");
  JSONNode::JSONNode(&v322, v320, "leaf");
  v70 = v327;
  v71 = *((_QWORD *)v327 + 10);
  if (v71 >= 2)
  {
    *((_QWORD *)v327 + 10) = v71 - 1;
    internalJSONNode::newInternal(v70, v69);
  }
  v327 = v70;
  internalJSONNode::push_back(v70, (uint64_t *)&v322);
  v73 = v322;
  if (v322)
  {
    v74 = *((_QWORD *)v322 + 10) - 1;
    *((_QWORD *)v322 + 10) = v74;
    if (!v74)
      internalJSONNode::deleteInternal(v73, v72);
  }
  if (v321 < 0)
    operator delete(v320[0]);
  std::string::basic_string[abi:ne180100]<0>(v320, "value");
  JSONNode::JSONNode(&v322, v320, *(float *)(*a1 + 20 * (int)a2 + 16));
  v76 = v327;
  v77 = *((_QWORD *)v327 + 10);
  if (v77 >= 2)
  {
    *((_QWORD *)v327 + 10) = v77 - 1;
    internalJSONNode::newInternal(v76, v75);
  }
  v327 = v76;
  internalJSONNode::push_back(v76, (uint64_t *)&v322);
  v79 = v322;
  if (v322)
  {
    v80 = *((_QWORD *)v322 + 10) - 1;
    *((_QWORD *)v322 + 10) = v80;
    if (!v80)
      internalJSONNode::deleteInternal(v79, v78);
  }
  if (v321 < 0)
    operator delete(v320[0]);
  std::string::basic_string[abi:ne180100]<0>(v320, "value_hexadecimal");
  JSONNode::JSONNode(&v322, v320, __p);
  v82 = v327;
  v83 = *((_QWORD *)v327 + 10);
  if (v83 >= 2)
  {
    *((_QWORD *)v327 + 10) = v83 - 1;
    internalJSONNode::newInternal(v82, v81);
  }
  v327 = v82;
  internalJSONNode::push_back(v82, (uint64_t *)&v322);
  v85 = v322;
  if (v322)
  {
    v86 = *((_QWORD *)v322 + 10) - 1;
    *((_QWORD *)v322 + 10) = v86;
    if (!v86)
      internalJSONNode::deleteInternal(v85, v84);
  }
  if ((v321 & 0x80000000) == 0)
  {
    if (!(_DWORD)a7)
      goto LABEL_90;
LABEL_76:
    std::string::basic_string[abi:ne180100]<0>(v320, "gain");
    JSONNode::JSONNode(&v322, v320, *(float *)(a1[6] + 16 * (int)a2));
    v88 = v327;
    v89 = *((_QWORD *)v327 + 10);
    if (v89 >= 2)
    {
      *((_QWORD *)v327 + 10) = v89 - 1;
      internalJSONNode::newInternal(v88, v87);
    }
    v327 = v88;
    internalJSONNode::push_back(v88, (uint64_t *)&v322);
    v91 = v322;
    if (v322)
    {
      v92 = *((_QWORD *)v322 + 10) - 1;
      *((_QWORD *)v322 + 10) = v92;
      if (!v92)
        internalJSONNode::deleteInternal(v91, v90);
    }
    if (v321 < 0)
      operator delete(v320[0]);
    std::string::basic_string[abi:ne180100]<0>(v320, "cover");
    JSONNode::JSONNode(&v322, v320, *(float *)(a1[6] + 16 * (int)a2 + 4));
    v94 = v327;
    v95 = *((_QWORD *)v327 + 10);
    if (v95 >= 2)
    {
      *((_QWORD *)v327 + 10) = v95 - 1;
      internalJSONNode::newInternal(v94, v93);
    }
    v327 = v94;
    internalJSONNode::push_back(v94, (uint64_t *)&v322);
    v96 = v322;
    if (v322)
    {
      v97 = *((_QWORD *)v322 + 10) - 1;
      *((_QWORD *)v322 + 10) = v97;
      if (!v97)
        internalJSONNode::deleteInternal(v96, v84);
    }
    if (v321 < 0)
      operator delete(v320[0]);
    goto LABEL_90;
  }
  operator delete(v320[0]);
  if ((_DWORD)a7)
    goto LABEL_76;
LABEL_90:
  v98 = *a3;
  v99 = *((_QWORD *)*a3 + 10);
  if (v99 >= 2)
  {
    *((_QWORD *)v98 + 10) = v99 - 1;
    internalJSONNode::newInternal(v98, v84);
  }
  *a3 = v98;
  internalJSONNode::push_back(v98, (uint64_t *)&v327);
  if (v324 < 0)
    operator delete(__p[0]);
LABEL_341:
  if (v17)
  {
    v315 = *((_QWORD *)v17 + 10) - 1;
    *((_QWORD *)v17 + 10) = v315;
    if (!v315)
      internalJSONNode::deleteInternal(v17, v100);
  }
  v316 = v326;
  if (v326)
  {
    v317 = *((_QWORD *)v326 + 10) - 1;
    *((_QWORD *)v326 + 10) = v317;
    if (!v317)
      internalJSONNode::deleteInternal(v316, v100);
  }
  result = v327;
  if (v327)
  {
    v319 = *((_QWORD *)v327 + 10) - 1;
    *((_QWORD *)v327 + 10) = v319;
    if (!v319)
      return internalJSONNode::deleteInternal(result, v100);
  }
  return result;
}

void sub_2183C7F24(_Unwind_Exception *exception_object, internalJSONNode *a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,internalJSONNode *a22,internalJSONNode *a23,internalJSONNode *a24)
{
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  if (a21 < 0)
    operator delete(__p);
  if (a22)
  {
    v25 = *((_QWORD *)a22 + 10) - 1;
    *((_QWORD *)a22 + 10) = v25;
    if (!v25)
      internalJSONNode::deleteInternal(a22, a2);
  }
  if (a23)
  {
    v26 = *((_QWORD *)a23 + 10) - 1;
    *((_QWORD *)a23 + 10) = v26;
    if (!v26)
      internalJSONNode::deleteInternal(a23, a2);
  }
  if (a24)
  {
    v27 = *((_QWORD *)a24 + 10) - 1;
    *((_QWORD *)a24 + 10) = v27;
    if (!v27)
      internalJSONNode::deleteInternal(a24, a2);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *xgboost_old::tree::TreeModel<float,xgboost_old::tree::RTreeNodeStat>::Dump(_QWORD *a1, int a2, uint64_t a3, xgboost_old::utils::FeatMap *a4, int a5, uint64_t a6)
{
  int v12;
  uint64_t v13;
  unint64_t v14;
  const char *v15;
  _QWORD *v16;
  _QWORD *v17;
  const char *v18;
  char *v19;
  size_t v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  const char *v32;
  char *v33;
  size_t v34;
  _QWORD *v35;
  _QWORD *v36;
  char v37;
  char v38;
  char v39;

  if (a5 >= 1)
  {
    v12 = a5;
    do
    {
      v37 = 9;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)(a3 + 16), (uint64_t)&v37, 1);
      --v12;
    }
    while (v12);
  }
  v13 = a2;
  if (*(_DWORD *)(*a1 + 20 * a2 + 4) == -1)
  {
    v22 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)":leaf=", 6);
    std::ostream::operator<<();
    if ((_DWORD)a6)
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)(a3 + 16), (uint64_t)",cover=", 7);
      std::ostream::operator<<();
    }
    v38 = 10;
    return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)(a3 + 16), (uint64_t)&v38, 1);
  }
  else
  {
    v14 = *(_DWORD *)(*a1 + 20 * a2 + 12) & 0x7FFFFFFF;
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a4 + 1) - *(_QWORD *)a4) >> 3) > v14)
    {
      xgboost_old::utils::Assert(1, "utils::FMap::name feature index exceed bound", (const char *)a3);
      switch(*(_DWORD *)(*((_QWORD *)a4 + 3) + 4 * v14))
      {
        case 0:
          v30 = (_QWORD *)std::ostream::operator<<();
          v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)":[", 2);
          v33 = xgboost_old::utils::FeatMap::name(a4, v14, v32);
          v34 = strlen(v33);
          v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)v33, v34);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"] yes=", 6);
          v36 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)",no=", 4);
          goto LABEL_13;
        case 1:
        case 2:
        case 3:
          v16 = (_QWORD *)std::ostream::operator<<();
          v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)":[", 2);
          v19 = xgboost_old::utils::FeatMap::name(a4, v14, v18);
          v20 = strlen(v19);
          v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)v19, v20);
          goto LABEL_12;
        default:
          xgboost_old::utils::Error((xgboost_old::utils *)"unknown fmap type", v15);
      }
    }
    v24 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)":[f", 3);
    v21 = (_QWORD *)std::ostream::operator<<();
LABEL_12:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"<", 1);
    v25 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"] yes=", 6);
    v26 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)",no=", 4);
    v27 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)",missing=", 9);
LABEL_13:
    std::ostream::operator<<();
    if ((_DWORD)a6)
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)(a3 + 16), (uint64_t)",gain=", 6);
      v28 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)",cover=", 7);
      std::ostream::operator<<();
    }
    v39 = 10;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)(a3 + 16), (uint64_t)&v39, 1);
    v29 = (a5 + 1);
    xgboost_old::tree::TreeModel<float,xgboost_old::tree::RTreeNodeStat>::Dump(a1, *(unsigned int *)(*a1 + 20 * v13 + 4), a3, a4, v29, a6);
    return (_QWORD *)xgboost_old::tree::TreeModel<float,xgboost_old::tree::RTreeNodeStat>::Dump(a1, *(unsigned int *)(*a1 + 20 * v13 + 8), a3, a4, v29, a6);
  }
}

_QWORD *xgboost_old::tree::TreeModel<float,xgboost_old::tree::RTreeNodeStat>::float_to_hexadecimal@<X0>(_QWORD *a1@<X8>, float a2@<S0>)
{
  char __str[9];
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  snprintf(__str, 9uLL, "%02X%02X%02X%02X", LOBYTE(a2), BYTE1(a2), BYTE2(a2), HIBYTE(LODWORD(a2)));
  __str[8] = 0;
  return std::string::basic_string[abi:ne180100]<0>(a1, __str);
}

char *xgboost_old::utils::FeatMap::name(xgboost_old::utils::FeatMap *this, unint64_t a2, const char *a3)
{
  char *result;

  xgboost_old::utils::Assert(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 3) > a2, "utils::FMap::name feature index exceed bound", a3);
  result = (char *)(*(_QWORD *)this + 24 * a2);
  if (result[23] < 0)
    return *(char **)result;
  return result;
}

void xgboost_old::gbm::GBLinear::SetParam(xgboost_old::gbm::GBLinear *this, const char *__s1, const char *a3)
{
  if (!strncmp(__s1, "bst:", 4uLL))
    xgboost_old::gbm::GBLinear::ParamTrain::SetParam((xgboost_old::gbm::GBLinear *)((char *)this + 168), __s1 + 4, a3);
  if (*((_QWORD *)this + 19) == *((_QWORD *)this + 18))
  {
    if (!strcmp(__s1, "bst:num_feature"))
      *((_DWORD *)this + 2) = atoi(a3);
    if (!strcmp(__s1, "num_output_group"))
      *((_DWORD *)this + 3) = atoi(a3);
  }
}

void xgboost_old::gbm::GBLinear::LoadModel(xgboost_old::gbm::GBLinear *this, dmlc::Stream *a2)
{
  _BOOL8 v4;
  const char *v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;

  v4 = (**(uint64_t (***)(dmlc::Stream *, char *, uint64_t))a2)(a2, (char *)this + 8, 136) != 0;
  xgboost_old::utils::Assert(v4, "Load LinearBooster", v5);
  v8 = 0;
  if ((**(uint64_t (***)(dmlc::Stream *, unint64_t *, uint64_t))a2)(a2, &v8, 8))
  {
    v6 = (_QWORD *)((char *)this + 144);
    v7 = v8;
    std::vector<float>::resize((uint64_t)v6, v8);
    if (v8)
      (**(void (***)(dmlc::Stream *, _QWORD, uint64_t))a2)(a2, *v6, 4 * v7);
  }
}

uint64_t xgboost_old::gbm::GBLinear::SaveModel(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 8))(a2, a1 + 8, 136);
  v5 = (uint64_t)(*(_QWORD *)(a1 + 152) - *(_QWORD *)(a1 + 144)) >> 2;
  result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a2 + 8))(a2, &v5, 8);
  if (v5)
    return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 8))(a2, *(_QWORD *)(a1 + 144), *(_QWORD *)(a1 + 152) - *(_QWORD *)(a1 + 144));
  return result;
}

void xgboost_old::gbm::GBLinear::InitModel(xgboost_old::gbm::GBLinear *this)
{
  void *v2;
  uint64_t v3;

  std::vector<float>::resize((uint64_t)this + 144, (*((_DWORD *)this + 3) + *((_DWORD *)this + 3) * *((_DWORD *)this + 2)));
  v2 = (void *)*((_QWORD *)this + 18);
  v3 = *((_QWORD *)this + 19) - (_QWORD)v2;
  if (v3 >= 1)
    bzero(v2, 4 * (((unint64_t)v3 >> 2) - ((unint64_t)v3 > 3)) + 4);
}

uint64_t xgboost_old::gbm::GBLinear::DoBoost(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v8;
  int **v9;
  uint64_t v10;
  int *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  int *v19;
  double v20;
  int v21;
  uint64_t v22;
  float v23;
  float v24;
  float v25;
  uint64_t v26;
  uint64_t v27;
  int *v28;
  int v29;
  uint64_t v30;
  float v31;
  uint64_t v32;
  uint64_t result;
  unsigned int *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  float *v44;
  uint64_t v45;
  double v46;
  uint64_t v47;
  float *v48;
  double v49;
  uint64_t v50;
  float v51;
  float v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  float v62;
  uint64_t v63;
  uint64_t v64;
  float *v65;
  uint64_t v66;
  float v67;

  v8 = *(unsigned int *)(a1 + 12);
  v9 = (int **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 64))(a2);
  if ((int)v8 >= 1)
  {
    v10 = 0;
    v11 = *v9;
    v12 = (char *)v9[1] - (char *)*v9;
    v13 = v12 & 0x3FFFFFFFCLL;
    v14 = *(_QWORD *)(a1 + 144) + 4 * (*(_DWORD *)(a1 + 12) * *(_DWORD *)(a1 + 8));
    v15 = (v12 >> 2);
    do
    {
      if (v13)
      {
        v16 = *a5;
        v17 = 0.0;
        v18 = v15;
        v19 = v11;
        v20 = 0.0;
        do
        {
          v21 = *v19++;
          v22 = (v10 + v21 * v8);
          v23 = *(float *)(v16 + 8 * v22 + 4);
          if (v23 >= 0.0)
          {
            v17 = v17 + *(float *)(v16 + 8 * v22);
            v20 = v20 + v23;
          }
          --v18;
        }
        while (v18);
      }
      else
      {
        v20 = 0.0;
        v17 = 0.0;
      }
      v24 = *(float *)(v14 + 4 * v10);
      v25 = -(v17 + *(float *)(a1 + 180) * v24) / (v20 + *(float *)(a1 + 180)) * *(float *)(a1 + 168);
      *(float *)(v14 + 4 * v10) = v24 + v25;
      if (v13)
      {
        v26 = *a5;
        v27 = v15;
        v28 = v11;
        do
        {
          v29 = *v28++;
          v30 = (v10 + v29 * v8);
          v31 = *(float *)(v26 + 8 * v30 + 4);
          if (v31 >= 0.0)
            *(float *)(v26 + 8 * v30) = *(float *)(v26 + 8 * v30) + (float)(v31 * v25);
          --v27;
        }
        while (v27);
      }
      ++v10;
    }
    while (v10 != v8);
  }
  v32 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 8))(a2);
  for (result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 24))(v32);
        (_DWORD)result;
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 24))(v32))
  {
    v34 = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 32))(v32);
    v35 = *v34;
    if (*v34)
    {
      v36 = 0;
      v37 = *((_QWORD *)v34 + 1);
      v38 = *((_QWORD *)v34 + 2);
      do
      {
        if ((int)v8 >= 1)
        {
          v39 = 0;
          v40 = (uint64_t *)(v38 + 16 * v36);
          v41 = *v40;
          v42 = *((unsigned int *)v40 + 2);
          v43 = *(_QWORD *)(a1 + 144) + 4 * *(int *)(a1 + 12) * (unint64_t)*(unsigned int *)(v37 + 4 * v36);
          v44 = (float *)(v41 + 4);
          do
          {
            if (v42)
            {
              v45 = *a5;
              v46 = 0.0;
              v47 = v42;
              v48 = v44;
              v49 = 0.0;
              do
              {
                v50 = (v39 + *((_DWORD *)v48 - 1) * v8);
                v51 = *(float *)(v45 + 8 * v50 + 4);
                if (v51 >= 0.0)
                {
                  v49 = v49 + (float)(*v48 * *(float *)(v45 + 8 * v50));
                  v46 = v46 + (float)(*v48 * (float)(v51 * *v48));
                }
                v48 += 2;
                --v47;
              }
              while (v47);
              v52 = *(float *)(v43 + 4 * v39);
              v53 = 0.0;
              if (v46 >= 0.00000999999975)
              {
                v54 = *(float *)(a1 + 172);
                v55 = v49 + v54 * v52;
                v56 = v46 + v54;
                v57 = v52 - v55 / (v46 + v54);
                v58 = *(float *)(a1 + 176);
                v59 = -v52;
                if (v57 >= 0.0)
                {
                  v61 = -(v55 + v58) / v56;
                  if (v61 >= v59)
                    v53 = v61;
                  else
                    v53 = -v52;
                }
                else
                {
                  v60 = -(v55 - v58) / v56;
                  if (v60 <= v59)
                    v53 = v60;
                  else
                    v53 = -v52;
                }
              }
              v62 = v53 * *(float *)(a1 + 168);
              *(float *)(v43 + 4 * v39) = v52 + v62;
              v63 = *a5;
              v64 = v42;
              v65 = v44;
              do
              {
                v66 = (v39 + *((_DWORD *)v65 - 1) * v8);
                v67 = *(float *)(v63 + 8 * v66 + 4);
                if (v67 >= 0.0)
                  *(float *)(v63 + 8 * v66) = *(float *)(v63 + 8 * v66) + (float)((float)(v67 * *v65) * v62);
                v65 += 2;
                --v64;
              }
              while (v64);
            }
            else
            {
              *(float *)(v43 + 4 * v39) = *(float *)(v43 + 4 * v39) + (float)(*(float *)(a1 + 168) * 0.0);
            }
            ++v39;
          }
          while (v39 != v8);
        }
        ++v36;
      }
      while (v36 != v35);
    }
  }
  return result;
}

uint64_t xgboost_old::gbm::GBLinear::Predict(uint64_t a1, uint64_t (***a2)(_QWORD), const char *a3, uint64_t a4, _QWORD *a5, int a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  _QWORD *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  float v27;
  uint64_t v28;
  float *v29;
  unsigned int v30;

  xgboost_old::utils::Check(a6 == 0, "GBLinear::Predict ntrees is only valid for gbtree predictor", a3);
  std::vector<float>::resize((uint64_t)a5, 0);
  v9 = (**a2)(a2);
  v10 = *(int *)(a1 + 12);
  for (result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9);
        (_DWORD)result;
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9))
  {
    v12 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 32))(v9);
    xgboost_old::utils::Assert(v12[1] * v10 == (uint64_t)(a5[1] - *a5) >> 2, "base_rowid is not set correctly", v13);
    std::vector<float>::resize((uint64_t)a5, *v12 * v10 + ((uint64_t)(a5[1] - *a5) >> 2));
    v14 = *(unsigned int *)v12;
    if (*(_DWORD *)v12)
    {
      v15 = 0;
      v16 = v12[2];
      v17 = v12[1];
      v18 = v12[3] + 4;
      do
      {
        if ((int)v10 <= 0)
        {
          ++v15;
        }
        else
        {
          v19 = 0;
          v20 = *(_QWORD *)(v16 + 8 * v15);
          v21 = *a5 + 4 * (v17 + v15) * v10;
          v22 = *(unsigned int *)(a1 + 12);
          ++v15;
          do
          {
            if ((int)v22 >= 1)
            {
              v23 = 0;
              v24 = (*(_DWORD *)(v16 + 8 * v15) - v20);
              v25 = *(_DWORD *)(a1 + 8);
              v26 = *(_QWORD *)(a1 + 144);
              do
              {
                v27 = *(float *)(v26 + 4 * v25 * v22 + 4 * v23);
                if (v24)
                {
                  v28 = v24;
                  v29 = (float *)(v18 + 8 * v20);
                  do
                  {
                    v30 = *((_DWORD *)v29 - 1);
                    if (v30 < v25)
                      v27 = v27
                          + (float)(*v29 * *(float *)(v26 + 4 * v23 + 4 * v30 * (unint64_t)v22));
                    v29 += 2;
                    --v28;
                  }
                  while (v28);
                }
                *(float *)(v21 + 4 * v23++) = v27;
              }
              while (v23 != v22);
            }
            ++v19;
          }
          while (v19 != (_DWORD)v10);
        }
      }
      while (v15 != v14);
    }
  }
  return result;
}

uint64_t xgboost_old::gbm::GBLinear::Predict(uint64_t result, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  float *v12;
  unsigned int v13;

  v3 = *(unsigned int *)(result + 12);
  if ((int)v3 >= 1)
  {
    v4 = 0;
    if (a3[1] == *a3)
      v5 = 0;
    else
      v5 = *a3;
    v6 = *(_DWORD *)(result + 8);
    v7 = *(_QWORD *)(result + 144);
    v8 = *(unsigned int *)(a2 + 8);
    do
    {
      v9 = 0;
      v10 = *(_QWORD *)a2 + 4;
      do
      {
        v11 = *(float *)(v7 + 4 * v6 * v3 + 4 * v9);
        if ((_DWORD)v8)
        {
          result = v8;
          v12 = (float *)v10;
          do
          {
            v13 = *((_DWORD *)v12 - 1);
            if (v13 < v6)
              v11 = v11 + (float)(*v12 * *(float *)(v7 + 4 * v9 + 4 * v13 * (unint64_t)v3));
            v12 += 2;
            --result;
          }
          while (result);
        }
        *(float *)(v5 + 4 * v9++) = v11;
      }
      while (v9 != v3);
      ++v4;
    }
    while (v4 != (_DWORD)v3);
  }
  return result;
}

void xgboost_old::gbm::GBLinear::PredictLeaf(uint64_t a1, const char *a2)
{
  xgboost_old::utils::Error((xgboost_old::utils *)"gblinear does not support predict leaf index", a2);
}

uint64_t xgboost_old::gbm::GBLinear::DumpModel@<X0>(xgboost_old::gbm::GBLinear *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5;
  std::locale::id *v6;
  _QWORD *v7;
  const std::locale::facet *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  std::locale::id *v13;
  unint64_t v14;
  _QWORD *v15;
  const std::locale::facet *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  std::string *v23;
  std::string *v24;
  uint64_t v25;
  uint64_t v26;
  void *__p[2];
  std::string::size_type v29;
  _QWORD v30[2];
  _QWORD v31[11];
  char v32;
  uint64_t v33;
  std::__split_buffer<std::string> v34;

  std::string::basic_string[abi:ne180100]<0>(&v34, "");
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](v30, (const std::string *)&v34, 24);
  if (SHIBYTE(v34.__end_) < 0)
    operator delete(v34.__first_);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"bias:\n", 6);
  if (*((int *)this + 3) >= 1)
  {
    v5 = 0;
    v6 = (std::locale::id *)MEMORY[0x24BEDB350];
    do
    {
      v7 = (_QWORD *)std::ostream::operator<<();
      std::ios_base::getloc((const std::ios_base *)((char *)v7 + *(_QWORD *)(*v7 - 24)));
      v8 = std::locale::use_facet((const std::locale *)&v34, v6);
      ((void (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 10);
      std::locale::~locale((std::locale *)&v34);
      std::ostream::put();
      std::ostream::flush();
      ++v5;
    }
    while (v5 < *((int *)this + 3));
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"weight:\n", 8);
  v9 = *((_DWORD *)this + 3);
  if (v9 >= 1)
  {
    v10 = 0;
    v11 = 0;
    LODWORD(v12) = *((_DWORD *)this + 2);
    v13 = (std::locale::id *)MEMORY[0x24BEDB350];
    do
    {
      if ((_DWORD)v12)
      {
        v14 = 0;
        do
        {
          v15 = (_QWORD *)std::ostream::operator<<();
          std::ios_base::getloc((const std::ios_base *)((char *)v15 + *(_QWORD *)(*v15 - 24)));
          v16 = std::locale::use_facet((const std::locale *)&v34, v13);
          ((void (*)(const std::locale::facet *, uint64_t))v16->__vftable[2].~facet_0)(v16, 10);
          std::locale::~locale((std::locale *)&v34);
          std::ostream::put();
          std::ostream::flush();
          ++v14;
          v12 = *((unsigned int *)this + 2);
        }
        while (v14 < v12);
        v9 = *((_DWORD *)this + 3);
      }
      ++v11;
      v10 += 4;
    }
    while (v11 < v9);
  }
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  std::stringbuf::str();
  v17 = *(_QWORD *)(a2 + 16);
  v18 = *(_QWORD *)(a2 + 8);
  if (v18 >= v17)
  {
    v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18 - *(_QWORD *)a2) >> 3);
    v20 = v19 + 1;
    if (v19 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17 - *(_QWORD *)a2) >> 3);
    if (2 * v21 > v20)
      v20 = 2 * v21;
    if (v21 >= 0x555555555555555)
      v22 = 0xAAAAAAAAAAAAAAALL;
    else
      v22 = v20;
    v34.__end_cap_.__value_ = (std::allocator<std::string> *)(a2 + 16);
    if (v22)
      v23 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>(a2 + 16, v22);
    else
      v23 = 0;
    v24 = v23 + v19;
    v34.__first_ = v23;
    v34.__begin_ = v24;
    v34.__end_cap_.__value_ = &v23[v22];
    v24->__r_.__value_.__r.__words[2] = v29;
    *(_OWORD *)&v24->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    v34.__end_ = v24 + 1;
    std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a2, &v34);
    v25 = *(_QWORD *)(a2 + 8);
    std::__split_buffer<std::string>::~__split_buffer(&v34);
    *(_QWORD *)(a2 + 8) = v25;
  }
  else
  {
    *(_QWORD *)(v18 + 16) = v29;
    *(_OWORD *)v18 = *(_OWORD *)__p;
    *(_QWORD *)(a2 + 8) = v18 + 24;
  }
  v30[0] = *MEMORY[0x24BEDB7F0];
  v26 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v30 + *(_QWORD *)(v30[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v31[0] = v26;
  v31[1] = MEMORY[0x24BEDB848] + 16;
  if (v32 < 0)
    operator delete((void *)v31[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x219A198F4](&v33);
}

void sub_2183C91F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)(v16 - 120));
  if (a15 < 0)
    operator delete(__p);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void xgboost_old::gbm::GBLinear::~GBLinear(xgboost_old::gbm::GBLinear *this)
{
  xgboost_old::gbm::GBLinear::~GBLinear(this);
  JUMPOUT(0x219A19A08);
}

{
  void *v2;
  void *v3;

  *(_QWORD *)this = &unk_24D93DF38;
  v2 = (void *)*((_QWORD *)this + 23);
  if (v2)
  {
    *((_QWORD *)this + 24) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 18);
  if (v3)
  {
    *((_QWORD *)this + 19) = v3;
    operator delete(v3);
  }
}

float xgboost_old::gbm::GBLinear::ParamTrain::SetParam(xgboost_old::gbm::GBLinear::ParamTrain *this, const char *a2, const char *a3)
{
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float result;

  if (!strcmp("eta", a2))
  {
    v6 = atof(a3);
    *(float *)this = v6;
  }
  if (!strcmp("lambda", a2))
  {
    v7 = atof(a3);
    *((float *)this + 1) = v7;
  }
  if (!strcmp("alpha", a2))
  {
    v8 = atof(a3);
    *((float *)this + 2) = v8;
  }
  if (!strcmp("lambda_bias", a2))
  {
    v9 = atof(a3);
    *((float *)this + 3) = v9;
  }
  if (!strcmp("learning_rate", a2))
  {
    v10 = atof(a3);
    *(float *)this = v10;
  }
  if (!strcmp("reg_lambda", a2))
  {
    v11 = atof(a3);
    *((float *)this + 1) = v11;
  }
  if (!strcmp("reg_alpha", a2))
  {
    v12 = atof(a3);
    *((float *)this + 2) = v12;
  }
  if (!strcmp("reg_lambda_bias", a2))
  {
    result = atof(a3);
    *((float *)this + 3) = result;
  }
  return result;
}

uint64_t _GLOBAL__sub_I_gbm_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

uint64_t dmlc::Stream::Create(dmlc::Stream *this, char *a2, const char *a3)
{
  _BOOL8 v6;
  const char *v7;
  _BOOL8 v8;
  const char *v9;
  int v10;
  FILE *v11;
  int v12;
  BOOL v13;
  const char *v14;
  uint64_t v15;
  const char *v16;
  int v17;
  _BYTE *v18;
  _BYTE *p_p;
  const char *v20;
  uint64_t result;
  void *__p;
  uint64_t v23;
  unsigned __int8 v24;

  v6 = strncmp((const char *)this, "s3://", 5uLL) != 0;
  xgboost_old::utils::Check(v6, "%s", v7, "xgboost is compiled in local mode\nto use hdfs, s3 or distributed version, compile with make dmlc=1");
  v8 = strncmp((const char *)this, "hdfs://", 7uLL) != 0;
  xgboost_old::utils::Check(v8, "%s", v9, "xgboost is compiled in local mode\nto use hdfs, s3 or distributed version, compile with make dmlc=1");
  v10 = strcmp((const char *)this, "stdin");
  if (v10)
    v11 = 0;
  else
    v11 = (FILE *)*MEMORY[0x24BDAC8E0];
  v12 = strcmp((const char *)this, "stdout");
  if (!v12)
    v11 = (FILE *)*MEMORY[0x24BDAC8E8];
  if (v10)
    v13 = v12 == 0;
  else
    v13 = 1;
  if (!strncmp((const char *)this, "file://", 7uLL))
    v15 = 7;
  else
    v15 = 0;
  v16 = (char *)this + v15;
  if (v13)
    goto LABEL_31;
  std::string::basic_string[abi:ne180100]<0>(&__p, a2);
  v17 = v24;
  if ((char)v24 < 0)
  {
    if (v23 != 1)
      goto LABEL_23;
    v18 = __p;
  }
  else
  {
    if (v24 != 1)
    {
LABEL_21:
      if (v17 != 1)
        goto LABEL_27;
      p_p = &__p;
      goto LABEL_25;
    }
    v18 = &__p;
  }
  if (*v18 == 119)
  {
    MEMORY[0x219A19390](&__p, "wb");
    v17 = v24;
  }
  if ((v17 & 0x80) == 0)
    goto LABEL_21;
LABEL_23:
  if (v23 != 1)
    goto LABEL_27;
  p_p = __p;
LABEL_25:
  if (*p_p == 114)
  {
    MEMORY[0x219A19390](&__p, "rb");
    LOBYTE(v17) = v24;
  }
LABEL_27:
  if ((v17 & 0x80u) == 0)
    v20 = (const char *)&__p;
  else
    v20 = (const char *)__p;
  v11 = fopen(v16, v20);
  if ((char)v24 < 0)
  {
    operator delete(__p);
    if (v11)
      goto LABEL_32;
    goto LABEL_34;
  }
LABEL_31:
  if (v11)
  {
LABEL_32:
    result = operator new();
    *(_QWORD *)result = &unk_24D93DFD0;
    *(_QWORD *)(result + 8) = v11;
    *(_BYTE *)(result + 16) = v13;
    return result;
  }
LABEL_34:
  xgboost_old::utils::Check((uint64_t)a3, "fail to open file %s", v14, v16);
  return 0;
}

void sub_2183C96A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

size_t xgboost_old::utils::StdFile::Read(FILE **this, void *__ptr, size_t a3)
{
  return fread(__ptr, 1uLL, a3, this[1]);
}

size_t xgboost_old::utils::StdFile::Write(FILE **this, const void *__ptr, size_t __size)
{
  return fwrite(__ptr, __size, 1uLL, this[1]);
}

void xgboost_old::utils::StdFile::~StdFile(xgboost_old::utils::StdFile *this)
{
  FILE *v2;

  *(_QWORD *)this = &unk_24D93DFD0;
  v2 = (FILE *)*((_QWORD *)this + 1);
  if (v2)
  {
    if (!*((_BYTE *)this + 16))
    {
      fclose(v2);
      *((_QWORD *)this + 1) = 0;
    }
  }
}

{
  FILE *v2;

  *(_QWORD *)this = &unk_24D93DFD0;
  v2 = (FILE *)*((_QWORD *)this + 1);
  if (v2)
  {
    if (!*((_BYTE *)this + 16))
    {
      fclose(v2);
      *((_QWORD *)this + 1) = 0;
    }
  }
  JUMPOUT(0x219A19A08);
}

uint64_t xgboost_old::utils::StdFile::Seek(FILE **this, uint64_t a2)
{
  return fseek(this[1], a2, 0);
}

void xgboost_old::utils::StdFile::Tell(xgboost_old::utils::StdFile *this)
{
  JUMPOUT(0x219A19DD4);
}

BOOL xgboost_old::utils::StdFile::AtEnd(FILE **this)
{
  return feof(this[1]) != 0;
}

uint64_t _GLOBAL__sub_I_dmlc_simple_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

xgboost_old::io::DMatrixSimple *xgboost_old::io::DMatrixSimple::DMatrixSimple(xgboost_old::io::DMatrixSimple *this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;

  *((_DWORD *)this + 2) = -21759;
  *((_OWORD *)this + 1) = 0u;
  v2 = (_QWORD *)((char *)this + 16);
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_QWORD *)this + 22) = 0;
  *(_QWORD *)this = &unk_24D93E040;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  v3 = operator new();
  v4 = operator new();
  *(_QWORD *)v4 = &unk_24D93E0B8;
  *(_BYTE *)(v4 + 8) = 1;
  *(_QWORD *)(v4 + 16) = this;
  *(_QWORD *)v3 = &unk_24D93E128;
  *(_QWORD *)(v3 + 8) = &unk_24D93E1B8;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 136) = 0u;
  *(_OWORD *)(v3 + 152) = 0u;
  *(_OWORD *)(v3 + 168) = 0u;
  *(_QWORD *)(v3 + 120) = v2;
  *(_QWORD *)(v3 + 128) = v4;
  *((_QWORD *)this + 29) = v3;
  v5 = (_QWORD *)*((_QWORD *)this + 23);
  *((_QWORD *)this + 24) = v5;
  v6 = *((_QWORD *)this + 25);
  if ((unint64_t)v5 >= v6)
  {
    v8 = v6 - (_QWORD)v5;
    v9 = v8 >> 2;
    if ((unint64_t)(v8 >> 2) <= 1)
      v9 = 1;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v10 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v10 = v9;
    v11 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)this + 200, v10);
    v12 = (char *)*((_QWORD *)this + 23);
    v13 = (char *)*((_QWORD *)this + 24);
    v15 = &v11[v14];
    *v11 = 0;
    v7 = v11 + 1;
    while (v13 != v12)
    {
      v16 = *((_QWORD *)v13 - 1);
      v13 -= 8;
      *--v11 = v16;
    }
    *((_QWORD *)this + 23) = v11;
    *((_QWORD *)this + 24) = v7;
    *((_QWORD *)this + 25) = v15;
    if (v12)
      operator delete(v12);
  }
  else
  {
    *v5 = 0;
    v7 = v5 + 1;
  }
  *((_QWORD *)this + 24) = v7;
  *((_QWORD *)this + 27) = *((_QWORD *)this + 26);
  *((_QWORD *)this + 11) = *((_QWORD *)this + 10);
  *((_QWORD *)this + 14) = *((_QWORD *)this + 13);
  *((_QWORD *)this + 17) = *((_QWORD *)this + 16);
  *((_QWORD *)this + 5) = *((_QWORD *)this + 4);
  *((_QWORD *)this + 20) = *((_QWORD *)this + 19);
  *v2 = 0;
  v2[1] = 0;
  return this;
}

void sub_2183C99B0(_Unwind_Exception *a1)
{
  xgboost_old::learner::DMatrix *v1;
  uint64_t v2;
  void **v3;
  void *v5;
  void *v6;

  MEMORY[0x219A19A08](v2, 0x10F1C401CF98B50);
  v5 = (void *)*((_QWORD *)v1 + 26);
  if (v5)
  {
    *((_QWORD *)v1 + 27) = v5;
    operator delete(v5);
  }
  v6 = *v3;
  if (*v3)
  {
    *((_QWORD *)v1 + 24) = v6;
    operator delete(v6);
  }
  xgboost_old::learner::DMatrix::~DMatrix(v1);
  _Unwind_Resume(a1);
}

void xgboost_old::learner::DMatrix::~DMatrix(xgboost_old::learner::DMatrix *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  *(_QWORD *)this = &unk_24D93E090;
  v2 = (void *)*((_QWORD *)this + 19);
  if (v2)
  {
    *((_QWORD *)this + 20) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 16);
  if (v3)
  {
    *((_QWORD *)this + 17) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 13);
  if (v4)
  {
    *((_QWORD *)this + 14) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 10);
  if (v5)
  {
    *((_QWORD *)this + 11) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 7);
  if (v6)
  {
    *((_QWORD *)this + 8) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 4);
  if (v7)
  {
    *((_QWORD *)this + 5) = v7;
    operator delete(v7);
  }
}

uint64_t xgboost_old::io::DMatrixSimple::fmat(xgboost_old::io::DMatrixSimple *this)
{
  return *((_QWORD *)this + 29);
}

void xgboost_old::io::DMatrixSimple::~DMatrixSimple(xgboost_old::io::DMatrixSimple *this)
{
  xgboost_old::io::DMatrixSimple::~DMatrixSimple(this);
  JUMPOUT(0x219A19A08);
}

{
  uint64_t v2;
  void *v3;
  void *v4;

  *(_QWORD *)this = &unk_24D93E040;
  v2 = *((_QWORD *)this + 29);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 80))(v2);
  v3 = (void *)*((_QWORD *)this + 26);
  if (v3)
  {
    *((_QWORD *)this + 27) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 23);
  if (v4)
  {
    *((_QWORD *)this + 24) = v4;
    operator delete(v4);
  }
  xgboost_old::learner::DMatrix::~DMatrix(this);
}

uint64_t xgboost_old::io::DMatrixSimple::OneBatchIter::BeforeFirst(uint64_t this)
{
  *(_BYTE *)(this + 8) = 1;
  return this;
}

BOOL xgboost_old::io::DMatrixSimple::OneBatchIter::Next(xgboost_old::io::DMatrixSimple::OneBatchIter *this)
{
  int v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v1 = *((unsigned __int8 *)this + 8);
  if (*((_BYTE *)this + 8))
  {
    *((_BYTE *)this + 8) = 0;
    v2 = (_QWORD *)*((_QWORD *)this + 2);
    v3 = v2[23];
    v4 = (v2[24] - v3) >> 3;
    if (v2[24] == v3)
      v3 = 0;
    *((_QWORD *)this + 3) = v4 - 1;
    *((_QWORD *)this + 4) = 0;
    v6 = v2 + 26;
    v5 = v2[26];
    if (v6[1] == v5)
      v5 = 0;
    *((_QWORD *)this + 5) = v3;
    *((_QWORD *)this + 6) = v5;
  }
  return v1 != 0;
}

void xgboost_old::io::DMatrixSimple::OneBatchIter::~OneBatchIter(xgboost_old::io::DMatrixSimple::OneBatchIter *this)
{
  JUMPOUT(0x219A19A08);
}

uint64_t xgboost_old::io::FMatrixS::RowIterator(xgboost_old::io::FMatrixS *this)
{
  (*(void (**)(_QWORD))(**((_QWORD **)this + 16) + 16))(*((_QWORD *)this + 16));
  return *((_QWORD *)this + 16);
}

uint64_t xgboost_old::io::FMatrixS::ColIterator(xgboost_old::io::FMatrixS *this)
{
  std::vector<unsigned int> *v2;
  std::vector<unsigned int>::size_type v3;
  uint64_t v4;
  std::vector<unsigned int>::pointer begin;
  uint64_t result;

  v2 = (std::vector<unsigned int> *)((char *)this + 16);
  v3 = (*(uint64_t (**)(xgboost_old::io::FMatrixS *))(*(_QWORD *)this + 40))(this);
  std::vector<int>::resize(v2, v3);
  if (v3)
  {
    v4 = 0;
    begin = v2->__begin_;
    do
    {
      begin[v4] = v4;
      ++v4;
    }
    while (v3 != v4);
  }
  result = (uint64_t)this + 8;
  *((_QWORD *)this + 11) = 0;
  return result;
}

_QWORD *xgboost_old::io::FMatrixS::ColIterator(_QWORD *a1, uint64_t *a2)
{
  std::vector<unsigned int> *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _DWORD *v11;
  _DWORD *v12;
  std::vector<unsigned int>::pointer begin;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  int v20;
  _QWORD *result;

  v4 = (std::vector<unsigned int> *)(a1 + 2);
  v5 = (*(uint64_t (**)(_QWORD *))(*a1 + 40))(a1);
  std::vector<int>::resize(v4, 0);
  v7 = *a2;
  v6 = a2[1];
  if (v6 != *a2)
  {
    v8 = 0;
    do
    {
      v9 = *(unsigned int *)(v7 + 4 * v8);
      if (v5 > v9)
      {
        v11 = (_DWORD *)a1[3];
        v10 = a1[4];
        if ((unint64_t)v11 >= v10)
        {
          begin = v4->__begin_;
          v14 = v11 - v4->__begin_;
          v15 = v14 + 1;
          if ((unint64_t)(v14 + 1) >> 62)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          v16 = v10 - (_QWORD)begin;
          if (v16 >> 1 > v15)
            v15 = v16 >> 1;
          if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL)
            v17 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v17 = v15;
          if (v17)
          {
            v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)(a1 + 4), v17);
            begin = (std::vector<unsigned int>::pointer)a1[2];
            v11 = (_DWORD *)a1[3];
            LODWORD(v9) = *(_DWORD *)(v7 + 4 * v8);
          }
          else
          {
            v18 = 0;
          }
          v19 = &v18[4 * v14];
          *(_DWORD *)v19 = v9;
          v12 = v19 + 4;
          while (v11 != begin)
          {
            v20 = *--v11;
            *((_DWORD *)v19 - 1) = v20;
            v19 -= 4;
          }
          a1[2] = v19;
          a1[3] = v12;
          a1[4] = &v18[4 * v17];
          if (begin)
            operator delete(begin);
        }
        else
        {
          *v11 = v9;
          v12 = v11 + 1;
        }
        a1[3] = v12;
        v7 = *a2;
        v6 = a2[1];
      }
      ++v8;
    }
    while (v8 < (v6 - v7) >> 2);
  }
  result = a1 + 1;
  a1[11] = 0;
  return result;
}

void xgboost_old::io::FMatrixS::InitColAccess(uint64_t a1, uint64_t **a2, unint64_t a3, float a4)
{
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1) & 1) == 0)
    xgboost_old::io::FMatrixS::InitColData(a1, a2, a3, a4);
}

BOOL xgboost_old::io::FMatrixS::HaveColAccess(xgboost_old::io::FMatrixS *this)
{
  return *((_QWORD *)this + 21) != *((_QWORD *)this + 20);
}

uint64_t xgboost_old::io::FMatrixS::NumCol(xgboost_old::io::FMatrixS *this)
{
  uint64_t v2;
  const char *v3;

  v2 = (*(uint64_t (**)(xgboost_old::io::FMatrixS *))(*(_QWORD *)this + 32))(this);
  xgboost_old::utils::Check(v2, "NumCol:need column access", v3);
  return (uint64_t)(*((_QWORD *)this + 21) - *((_QWORD *)this + 20)) >> 3;
}

uint64_t xgboost_old::io::FMatrixS::GetColSize(xgboost_old::io::FMatrixS *this, uint64_t a2)
{
  return *(_QWORD *)(*((_QWORD *)this + 20) + 8 * a2);
}

float xgboost_old::io::FMatrixS::GetColDensity(xgboost_old::io::FMatrixS *this, uint64_t a2)
{
  uint64_t v2;

  v2 = (uint64_t)(*((_QWORD *)this + 18) - *((_QWORD *)this + 17)) >> 2;
  return 1.0
       - (float)((float)(unint64_t)(v2 - *(_QWORD *)(*((_QWORD *)this + 20) + 8 * a2))
               / (float)(unint64_t)v2);
}

uint64_t xgboost_old::io::FMatrixS::buffered_rowset(xgboost_old::io::FMatrixS *this)
{
  return (uint64_t)this + 136;
}

void xgboost_old::io::FMatrixS::~FMatrixS(xgboost_old::io::FMatrixS *this)
{
  xgboost_old::io::FMatrixS::~FMatrixS(this);
  JUMPOUT(0x219A19A08);
}

{
  uint64_t v2;
  void *v3;
  void *v4;

  *(_QWORD *)this = &unk_24D93E128;
  v2 = *((_QWORD *)this + 16);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 48))(v2);
  v3 = (void *)*((_QWORD *)this + 20);
  if (v3)
  {
    *((_QWORD *)this + 21) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 17);
  if (v4)
  {
    *((_QWORD *)this + 18) = v4;
    operator delete(v4);
  }
  xgboost_old::io::FMatrixS::ColBatchIter::~ColBatchIter((xgboost_old::io::FMatrixS *)((char *)this + 8));
}

uint64_t xgboost_old::io::FMatrixS::ColBatchIter::BeforeFirst(uint64_t this)
{
  *(_QWORD *)(this + 80) = 0;
  return this;
}

BOOL xgboost_old::io::FMatrixS::ColBatchIter::Next(xgboost_old::io::FMatrixS::ColBatchIter *this)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v18;

  v1 = *((_QWORD *)this + 10);
  v2 = *((_QWORD *)this + 7);
  v3 = (*((_QWORD *)this + 8) - v2) >> 3;
  if (v1 < v3)
  {
    *((_QWORD *)this + 10) = v1 + 1;
    v5 = *(_QWORD **)(v2 + 8 * v1);
    v6 = (uint64_t)(*((_QWORD *)this + 2) - *((_QWORD *)this + 1)) >> 2;
    *((_QWORD *)this + 11) = v6;
    *(_QWORD *)&v18 = 0;
    DWORD2(v18) = 0;
    std::vector<xgboost_old::SparseBatch::Inst>::resize((uint64_t)this + 32, v6, &v18);
    v7 = *((_QWORD *)this + 4);
    v8 = *((_QWORD *)this + 5);
    if (v8 == v7)
    {
      v7 = *((_QWORD *)this + 5);
    }
    else
    {
      v9 = 0;
      v10 = 0;
      do
      {
        v11 = *(unsigned int *)(*((_QWORD *)this + 1) + 4 * v10);
        if (v5[4] == v5[3])
          v12 = 0;
        else
          v12 = v5[3];
        v13 = *(_QWORD *)(*v5 + 8 * v11);
        v14 = *(_QWORD *)(*v5 + 8 * (v11 + 1)) - v13;
        v15 = v7 + v9;
        *(_QWORD *)v15 = v12 + 8 * v13;
        *(_DWORD *)(v15 + 8) = v14;
        ++v10;
        v7 = *((_QWORD *)this + 4);
        v8 = *((_QWORD *)this + 5);
        v9 += 16;
      }
      while (v10 < (v8 - v7) >> 4);
    }
    if (*((_QWORD *)this + 2) == *((_QWORD *)this + 1))
      v16 = 0;
    else
      v16 = *((_QWORD *)this + 1);
    if (v8 == v7)
      v7 = 0;
    *((_QWORD *)this + 12) = v16;
    *((_QWORD *)this + 13) = v7;
  }
  return v1 < v3;
}

uint64_t xgboost_old::io::FMatrixS::ColBatchIter::Value(xgboost_old::io::FMatrixS::ColBatchIter *this)
{
  return (uint64_t)this + 88;
}

void xgboost_old::io::FMatrixS::ColBatchIter::~ColBatchIter(xgboost_old::io::FMatrixS::ColBatchIter *this)
{
  xgboost_old::io::FMatrixS::ColBatchIter::~ColBatchIter(this);
  JUMPOUT(0x219A19A08);
}

{
  _QWORD *v2;
  _QWORD *v3;
  char *v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;

  *(_QWORD *)this = &unk_24D93E1B8;
  v4 = (char *)this + 56;
  v2 = (_QWORD *)*((_QWORD *)this + 7);
  v3 = (_QWORD *)*((_QWORD *)v4 + 1);
  if (v3 == v2)
  {
    v2 = v3;
  }
  else
  {
    v5 = 0;
    do
    {
      v6 = v2[v5];
      if (v6)
      {
        v7 = *(void **)(v6 + 48);
        if (v7)
        {
          *(_QWORD *)(v6 + 56) = v7;
          operator delete(v7);
        }
        v8 = *(void **)(v6 + 24);
        if (v8)
        {
          *(_QWORD *)(v6 + 32) = v8;
          operator delete(v8);
        }
        v9 = *(void **)v6;
        if (*(_QWORD *)v6)
        {
          *(_QWORD *)(v6 + 8) = v9;
          operator delete(v9);
        }
        MEMORY[0x219A19A08](v6, 0x30C40F4AB5C29);
        v2 = (_QWORD *)*((_QWORD *)this + 7);
        v3 = (_QWORD *)*((_QWORD *)this + 8);
      }
      ++v5;
    }
    while (v5 < v3 - v2);
  }
  *((_QWORD *)this + 8) = v2;
  if (v2)
    operator delete(v2);
  v10 = (void *)*((_QWORD *)this + 4);
  if (v10)
  {
    *((_QWORD *)this + 5) = v10;
    operator delete(v10);
  }
  v11 = (void *)*((_QWORD *)this + 1);
  if (v11)
  {
    *((_QWORD *)this + 2) = v11;
    operator delete(v11);
  }
}

void std::vector<xgboost_old::SparseBatch::Inst>::resize(uint64_t a1, unint64_t a2, _OWORD *a3)
{
  unint64_t v3;

  v3 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 4;
  if (a2 <= v3)
  {
    if (a2 < v3)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 16 * a2;
  }
  else
  {
    std::vector<xgboost_old::SparseBatch::Inst>::__append((char **)a1, a2 - v3, a3);
  }
}

void std::vector<xgboost_old::SparseBatch::Inst>::__append(char **a1, unint64_t a2, _OWORD *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  int v26;

  v8 = a1[2];
  v6 = (uint64_t)(a1 + 2);
  v7 = v8;
  v9 = *(char **)(v6 - 8);
  if (a2 <= (v8 - v9) >> 4)
  {
    if (a2)
    {
      v16 = 16 * a2;
      v17 = &v9[16 * a2];
      do
      {
        *(_OWORD *)v9 = *a3;
        v9 += 16;
        v16 -= 16;
      }
      while (v16);
      v9 = v17;
    }
    a1[1] = v9;
  }
  else
  {
    v10 = v9 - *a1;
    v11 = a2 + (v10 >> 4);
    if (v11 >> 60)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v12 = v10 >> 4;
    v13 = v7 - *a1;
    if (v13 >> 3 > v11)
      v11 = v13 >> 3;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0)
      v14 = 0xFFFFFFFFFFFFFFFLL;
    else
      v14 = v11;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::flexible_type>>(v6, v14);
    else
      v15 = 0;
    v18 = &v15[16 * v12];
    v19 = &v18[16 * a2];
    v20 = 16 * a2;
    v21 = v18;
    do
    {
      *(_OWORD *)v21 = *a3;
      v21 += 16;
      v20 -= 16;
    }
    while (v20);
    v22 = &v15[16 * v14];
    v24 = *a1;
    v23 = a1[1];
    if (v23 != *a1)
    {
      do
      {
        v25 = *((_QWORD *)v23 - 2);
        v23 -= 16;
        v26 = *((_DWORD *)v23 + 2);
        *((_QWORD *)v18 - 2) = v25;
        v18 -= 16;
        *((_DWORD *)v18 + 2) = v26;
      }
      while (v23 != v24);
      v23 = *a1;
    }
    *a1 = v18;
    a1[1] = v19;
    a1[2] = v22;
    if (v23)
      operator delete(v23);
  }
}

void xgboost_old::io::SparsePage::~SparsePage(xgboost_old::io::SparsePage *this)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)*((_QWORD *)this + 6);
  if (v2)
  {
    *((_QWORD *)this + 7) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 3);
  if (v3)
  {
    *((_QWORD *)this + 4) = v3;
    operator delete(v3);
  }
  v4 = *(void **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v4;
    operator delete(v4);
  }
}

void xgboost_old::io::FMatrixS::InitColData(uint64_t a1, uint64_t **a2, unint64_t a3, float a4)
{
  uint64_t v8;
  uint64_t v9;
  char **v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  xgboost_old::io::SparsePage *v16;
  unint64_t v17;
  xgboost_old::io::SparsePage **v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  xgboost_old::io::SparsePage **v25;
  char *v26;
  char *v27;
  char *v28;
  xgboost_old::io::SparsePage *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;

  v8 = *(_QWORD *)(a1 + 64);
  v9 = *(_QWORD *)(a1 + 72);
  v10 = (char **)(a1 + 64);
  if (v9 == v8)
  {
    v8 = *(_QWORD *)(a1 + 72);
  }
  else
  {
    v11 = 0;
    do
    {
      v12 = *(_QWORD *)(v8 + 8 * v11);
      if (v12)
      {
        v13 = *(void **)(v12 + 48);
        if (v13)
        {
          *(_QWORD *)(v12 + 56) = v13;
          operator delete(v13);
        }
        v14 = *(void **)(v12 + 24);
        if (v14)
        {
          *(_QWORD *)(v12 + 32) = v14;
          operator delete(v14);
        }
        v15 = *(void **)v12;
        if (*(_QWORD *)v12)
        {
          *(_QWORD *)(v12 + 8) = v15;
          operator delete(v15);
        }
        MEMORY[0x219A19A08](v12, 0x30C40F4AB5C29);
        v8 = *(_QWORD *)(a1 + 64);
        v9 = *(_QWORD *)(a1 + 72);
      }
      ++v11;
    }
    while (v11 < (v9 - v8) >> 3);
  }
  *(_QWORD *)(a1 + 72) = v8;
  if (**(_QWORD **)(a1 + 120) >= a3)
  {
    xgboost_old::io::FMatrixS::MakeManyBatch(a1, a2, a3, a4);
  }
  else
  {
    v16 = (xgboost_old::io::SparsePage *)operator new();
    xgboost_old::io::SparsePage::SparsePage(v16);
    xgboost_old::io::FMatrixS::MakeOneBatch(a1, (uint64_t)a2, v16, a4);
    v17 = *(_QWORD *)(a1 + 80);
    v18 = *(xgboost_old::io::SparsePage ***)(a1 + 72);
    if ((unint64_t)v18 >= v17)
    {
      v20 = ((char *)v18 - *v10) >> 3;
      if ((unint64_t)(v20 + 1) >> 61)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      v21 = v17 - (_QWORD)*v10;
      v22 = v21 >> 2;
      if (v21 >> 2 <= (unint64_t)(v20 + 1))
        v22 = v20 + 1;
      if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8)
        v23 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v23 = v22;
      if (v23)
        v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a1 + 80, v23);
      else
        v24 = 0;
      v25 = (xgboost_old::io::SparsePage **)&v24[8 * v20];
      v26 = &v24[8 * v23];
      *v25 = v16;
      v19 = v25 + 1;
      v28 = *(char **)(a1 + 64);
      v27 = *(char **)(a1 + 72);
      if (v27 != v28)
      {
        do
        {
          v29 = (xgboost_old::io::SparsePage *)*((_QWORD *)v27 - 1);
          v27 -= 8;
          *--v25 = v29;
        }
        while (v27 != v28);
        v27 = *v10;
      }
      *(_QWORD *)(a1 + 64) = v25;
      *(_QWORD *)(a1 + 72) = v19;
      *(_QWORD *)(a1 + 80) = v26;
      if (v27)
        operator delete(v27);
    }
    else
    {
      *v18 = v16;
      v19 = v18 + 1;
    }
    *(_QWORD *)(a1 + 72) = v19;
  }
  std::vector<unsigned long>::resize(a1 + 160, *(_QWORD *)(*(_QWORD *)(a1 + 120) + 8));
  v30 = *(_QWORD **)(a1 + 160);
  v31 = *(_QWORD *)(a1 + 168) - (_QWORD)v30;
  if (v31 >= 1)
    bzero(*(void **)(a1 + 160), 8 * (((unint64_t)v31 >> 3) - ((unint64_t)v31 > 7)) + 8);
  v32 = *(_QWORD *)(a1 + 64);
  v33 = *(_QWORD *)(a1 + 72);
  v34 = v33 - v32;
  if (v33 != v32)
  {
    v35 = 0;
    v36 = v34 >> 3;
    if (v36 <= 1)
      v36 = 1;
    do
    {
      v37 = *(uint64_t **)(v32 + 8 * v35);
      v38 = *v37;
      v39 = ((v37[1] - *v37) >> 3) - 1;
      if (v39)
      {
        v40 = (_QWORD *)(v38 + 8);
        v41 = v30;
        do
        {
          *v41++ += *v40 - *(v40 - 1);
          ++v40;
          --v39;
        }
        while (v39);
      }
      ++v35;
    }
    while (v35 != v36);
  }
}

void sub_2183CA460(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x30C40F4AB5C29);
  _Unwind_Resume(a1);
}

void xgboost_old::io::FMatrixS::MakeOneBatch(uint64_t a1, uint64_t a2, _QWORD *a3, float a4)
{
  void **v7;
  int v8;
  _QWORD *v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  int v31;
  int v32;
  unint64_t v33;
  char *v34;
  _DWORD *v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  char *v42;
  int v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  unint64_t v57;
  _QWORD *v58;
  unint64_t i;
  uint64_t v60;
  uint64_t v61;
  const char *v62;
  unint64_t *v63;
  unint64_t v64;
  _QWORD *v65;
  unint64_t v66;
  uint64_t *v68;
  void **p_p;
  uint64_t v70;
  uint64_t **v71;
  uint64_t *v72;
  _QWORD *v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void *__p;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;

  v80 = 0;
  v81 = a3;
  v7 = (void **)(a1 + 136);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a1 + 136);
  __p = 0;
  v79 = 0;
  v8 = turi::thread::cpu_count((turi::thread *)a1);
  v9 = (_QWORD *)*a3;
  a3[1] = *a3;
  v10 = a3[2];
  if ((unint64_t)v9 >= v10)
  {
    v12 = v10 - (_QWORD)v9;
    v13 = v12 >> 2;
    if ((unint64_t)(v12 >> 2) <= 1)
      v13 = 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v13;
    v15 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a3 + 2), v14);
    v16 = (char *)*a3;
    v17 = (char *)a3[1];
    v19 = &v15[v18];
    *v15 = 0;
    v11 = v15 + 1;
    while (v17 != v16)
    {
      v20 = *((_QWORD *)v17 - 1);
      v17 -= 8;
      *--v15 = v20;
    }
    *a3 = v15;
    a3[1] = v11;
    a3[2] = v19;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *v9 = 0;
    v11 = v9 + 1;
  }
  a3[1] = v11;
  a3[4] = a3[3];
  v72 = a3;
  v73 = a3 + 3;
  v74 = &v75;
  v75 = 0;
  v76 = 0;
  v77 = 0;
  v21 = *(_QWORD *)(*(_QWORD *)(a1 + 120) + 8);
  std::vector<std::vector<unsigned long>>::resize(&v75, v8);
  v22 = v75;
  if (v76 != v75)
  {
    v23 = 0;
    v24 = 0;
    do
    {
      std::vector<unsigned long>::resize(v22 + v23, v21);
      v22 = *v74;
      v25 = *v74 + v23;
      v26 = *(void **)v25;
      v27 = *(_QWORD *)(v25 + 8) - *(_QWORD *)v25;
      if (v27 >= 1)
        bzero(v26, 8 * (((unint64_t)v27 >> 3) - ((unint64_t)v27 > 7)) + 8);
      ++v24;
      v23 += 24;
    }
    while (v24 < 0xAAAAAAAAAAAAAAABLL * ((v74[1] - v22) >> 3));
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 128) + 16))(*(_QWORD *)(a1 + 128));
  while ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 128) + 24))(*(_QWORD *)(a1 + 128)))
  {
    v28 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 128) + 32))(*(_QWORD *)(a1 + 128));
    std::vector<BOOL>::resize((uint64_t)&__p, *(_QWORD *)v28 + v79, 1);
    v29 = *(_QWORD *)v28;
    if (*(uint64_t *)v28 >= 1)
    {
      v30 = 0;
      do
      {
        v31 = *(_DWORD *)(v28 + 8);
        if (a4 == 1.0 || (double)rand() * 4.65661287e-10 < a4)
        {
          v32 = v31 + v30;
          v34 = *(char **)(a1 + 144);
          v33 = *(_QWORD *)(a1 + 152);
          if ((unint64_t)v34 >= v33)
          {
            v36 = (char *)*v7;
            v37 = (v34 - (_BYTE *)*v7) >> 2;
            v38 = v37 + 1;
            if ((unint64_t)(v37 + 1) >> 62)
              std::vector<float>::__throw_length_error[abi:ne180100]();
            v39 = v33 - (_QWORD)v36;
            if (v39 >> 1 > v38)
              v38 = v39 >> 1;
            if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFFCLL)
              v40 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v40 = v38;
            if (v40)
            {
              v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(a1 + 152, v40);
              v36 = *(char **)(a1 + 136);
              v34 = *(char **)(a1 + 144);
            }
            else
            {
              v41 = 0;
            }
            v42 = &v41[4 * v37];
            *(_DWORD *)v42 = v32;
            v35 = v42 + 4;
            while (v34 != v36)
            {
              v43 = *((_DWORD *)v34 - 1);
              v34 -= 4;
              *((_DWORD *)v42 - 1) = v43;
              v42 -= 4;
            }
            *(_QWORD *)(a1 + 136) = v42;
            *(_QWORD *)(a1 + 144) = v35;
            *(_QWORD *)(a1 + 152) = &v41[4 * v40];
            if (v36)
              operator delete(v36);
          }
          else
          {
            *(_DWORD *)v34 = v32;
            v35 = v34 + 4;
          }
          *(_QWORD *)(a1 + 144) = v35;
        }
        else
        {
          *(_QWORD *)((char *)__p + ((v30 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v30);
        }
        ++v30;
      }
      while (v30 != v29);
    }
    v68 = (uint64_t *)v28;
    p_p = &__p;
    v70 = a2;
    v71 = &v72;
    turi::parallel_for<xgboost_old::io::FMatrixS::MakeOneBatch(std::vector<BOOL> const&,float,xgboost_old::io::SparsePage *)::{lambda(unsigned long)#1}>(0, v29, (turi::thread *)&v68);
  }
  v44 = v74;
  v45 = v74[1];
  if (v45 == *v74)
  {
    v49 = 0xAAAAAAAAAAAAAAABLL * ((v45 - *v74) >> 3);
  }
  else
  {
    v46 = 0;
    v47 = 0;
    v45 = *v74;
    do
    {
      v48 = (uint64_t)(*(_QWORD *)(v45 + v46 + 8) - *(_QWORD *)(v45 + v46)) >> 3;
      if (v48 >= (v72[1] - *v72) >> 3)
      {
        std::vector<unsigned long>::resize((uint64_t)v72, v48 + 1);
        v44 = v74;
        v45 = *v74;
      }
      ++v47;
      v49 = 0xAAAAAAAAAAAAAAABLL * ((v44[1] - v45) >> 3);
      v46 += 24;
    }
    while (v47 < v49);
  }
  v50 = *v72;
  v51 = v72[1] - *v72;
  if ((unint64_t)v51 < 9)
  {
    v52 = 0;
  }
  else
  {
    v52 = 0;
    v53 = 0;
    v54 = v51 >> 3;
    if (v54 <= 2)
      v54 = 2;
    v55 = (_QWORD *)(v45 + 8);
    v56 = 1;
    do
    {
      v57 = v56;
      v58 = v55;
      for (i = v49; i; --i)
      {
        v60 = *(v58 - 1);
        if (v53 < (*v58 - v60) >> 3)
        {
          v61 = *(_QWORD *)(v60 + 8 * v53);
          *(_QWORD *)(v60 + 8 * v53) = v52;
          v52 += v61;
        }
        v58 += 3;
      }
      *(_QWORD *)(v50 + 8 * v57) = v52;
      v56 = v57 + 1;
      v53 = v57;
    }
    while (v57 + 1 != v54);
  }
  std::vector<xgboost_old::SparseBatch::Entry>::resize((uint64_t)v73, v52);
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 128) + 16))(*(_QWORD *)(a1 + 128));
  while ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 128) + 24))(*(_QWORD *)(a1 + 128)))
  {
    v63 = (unint64_t *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 128) + 32))(*(_QWORD *)(a1 + 128));
    v64 = *v63;
    v68 = (uint64_t *)v63;
    p_p = &__p;
    v70 = a2;
    v71 = &v72;
    turi::parallel_for<xgboost_old::io::FMatrixS::MakeOneBatch(std::vector<BOOL> const&,float,xgboost_old::io::SparsePage *)::{lambda(unsigned long)#2}>(0, v64, (uint64_t)&v68);
  }
  v65 = v81;
  xgboost_old::utils::Assert(((uint64_t)(v81[1] - *v81) >> 3) - 1 == *(_QWORD *)(*(_QWORD *)(a1 + 120) + 8), "inconsistent col data", v62);
  v66 = ((v65[1] - *v65) >> 3) - 1;
  v68 = (uint64_t *)&v81;
  turi::parallel_for<xgboost_old::io::FMatrixS::MakeOneBatch(std::vector<BOOL> const&,float,xgboost_old::io::SparsePage *)::{lambda(unsigned long)#3}>(0, v66, &v68);
  v68 = &v75;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v68);
  if (__p)
    operator delete(__p);
}

void sub_2183CA9B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p)
{
  a12 = a10;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void xgboost_old::io::FMatrixS::MakeManyBatch(uint64_t a1, uint64_t **a2, unint64_t a3, float a4)
{
  void **v8;
  char *v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char **v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  int v24;
  unint64_t v25;
  char *v26;
  _DWORD *v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  xgboost_old::io::SparsePage *v39;
  void *v40;
  void *v41;
  uint64_t v42;
  unint64_t v43;
  xgboost_old::io::SparsePage **v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  xgboost_old::io::SparsePage **v51;
  char *v52;
  char *v53;
  xgboost_old::io::SparsePage *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  char *v65;
  uint64_t v66;
  xgboost_old::io::SparsePage *v67;
  void *v68;
  void *v69;
  uint64_t v70;
  unint64_t v71;
  xgboost_old::io::SparsePage **v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  char *v78;
  xgboost_old::io::SparsePage **v79;
  char *v80;
  char *v81;
  char *v82;
  xgboost_old::io::SparsePage *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  void *v88;
  void *v89;
  char *v90;
  unint64_t v91;
  void *v92;
  void *v93;
  void *__p;
  void *v95;

  v8 = (void **)(a1 + 136);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a1 + 136);
  xgboost_old::io::SparsePage::SparsePage((xgboost_old::io::SparsePage *)&v89);
  v9 = (char *)v89;
  v90 = (char *)v89;
  if ((unint64_t)v89 >= v91)
  {
    v11 = (uint64_t)(v91 - (_QWORD)v89) >> 2;
    if (v11 <= 1)
      v11 = 1;
    if (v91 - (unint64_t)v89 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v91, v12);
    v14 = (char *)v89;
    v15 = v90;
    v17 = &v13[8 * v16];
    *(_QWORD *)v13 = 0;
    v10 = v13 + 8;
    while (v15 != v14)
    {
      v18 = *((_QWORD *)v15 - 1);
      v15 -= 8;
      *((_QWORD *)v13 - 1) = v18;
      v13 -= 8;
    }
    v89 = v13;
    v90 = v10;
    v91 = (unint64_t)v17;
    if (v14)
      operator delete(v14);
  }
  else
  {
    *(_QWORD *)v89 = 0;
    v10 = v9 + 8;
  }
  v90 = v10;
  v93 = v92;
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 128) + 16))(*(_QWORD *)(a1 + 128));
  v19 = 0;
  v20 = (char **)(a1 + 64);
  v84 = a1 + 80;
  while ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 128) + 24))(*(_QWORD *)(a1 + 128)))
  {
    v21 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 128) + 32))(*(_QWORD *)(a1 + 128));
    if (*(_QWORD *)v21)
    {
      v22 = 0;
      do
      {
        v23 = *(_DWORD *)(v21 + 8);
        if (a4 == 1.0 || (double)rand() * 4.65661287e-10 < a4)
        {
          v24 = v23 + v22;
          v26 = *(char **)(a1 + 144);
          v25 = *(_QWORD *)(a1 + 152);
          if ((unint64_t)v26 >= v25)
          {
            v28 = (char *)*v8;
            v29 = (v26 - (_BYTE *)*v8) >> 2;
            v30 = v29 + 1;
            if ((unint64_t)(v29 + 1) >> 62)
              std::vector<float>::__throw_length_error[abi:ne180100]();
            v31 = v25 - (_QWORD)v28;
            if (v31 >> 1 > v30)
              v30 = v31 >> 1;
            if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFFCLL)
              v32 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v32 = v30;
            if (v32)
            {
              v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(a1 + 152, v32);
              v28 = *(char **)(a1 + 136);
              v26 = *(char **)(a1 + 144);
            }
            else
            {
              v33 = 0;
            }
            v34 = &v33[4 * v29];
            *(_DWORD *)v34 = v24;
            v27 = v34 + 4;
            while (v26 != v28)
            {
              v35 = *((_DWORD *)v26 - 1);
              v26 -= 4;
              *((_DWORD *)v34 - 1) = v35;
              v34 -= 4;
            }
            *(_QWORD *)(a1 + 136) = v34;
            *(_QWORD *)(a1 + 144) = v27;
            *(_QWORD *)(a1 + 152) = &v33[4 * v32];
            if (v28)
              operator delete(v28);
          }
          else
          {
            *(_DWORD *)v26 = v24;
            v27 = v26 + 4;
          }
          *(_QWORD *)(a1 + 144) = v27;
          v36 = *(_QWORD *)(v21 + 16) + 8 * v22;
          v37 = *(_QWORD *)(v21 + 24) + 8 * *(_QWORD *)v36;
          v38 = *(_DWORD *)(v36 + 8) - *(_QWORD *)v36;
          v85 = v37;
          v86 = v38;
          xgboost_old::io::SparsePage::Push((uint64_t)&v89, (uint64_t)&v85);
        }
        if (((v90 - (_BYTE *)v89) >> 3) - 1 >= a3)
        {
          v39 = (xgboost_old::io::SparsePage *)operator new();
          xgboost_old::io::SparsePage::SparsePage(v39);
          v40 = v89;
          if (v90 == v89)
            v40 = 0;
          if (v93 == v92)
            v41 = 0;
          else
            v41 = v92;
          v87 = v40;
          v88 = v41;
          v85 = ((v90 - (_BYTE *)v89) >> 3) - 1;
          v86 = 0;
          if (*(_QWORD *)(a1 + 144) == *(_QWORD *)(a1 + 136))
            v42 = 0;
          else
            v42 = *(_QWORD *)(a1 + 136);
          xgboost_old::io::FMatrixS::MakeColPage((turi::thread *)a1, &v85, v42 + 4 * v19, a2, v39);
          v44 = *(xgboost_old::io::SparsePage ***)(a1 + 72);
          v43 = *(_QWORD *)(a1 + 80);
          if ((unint64_t)v44 >= v43)
          {
            v46 = ((char *)v44 - *v20) >> 3;
            if ((unint64_t)(v46 + 1) >> 61)
              std::vector<float>::__throw_length_error[abi:ne180100]();
            v47 = v43 - (_QWORD)*v20;
            v48 = v47 >> 2;
            if (v47 >> 2 <= (unint64_t)(v46 + 1))
              v48 = v46 + 1;
            if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF8)
              v49 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v49 = v48;
            if (v49)
              v50 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v84, v49);
            else
              v50 = 0;
            v51 = (xgboost_old::io::SparsePage **)&v50[8 * v46];
            *v51 = v39;
            v45 = v51 + 1;
            v53 = *(char **)(a1 + 64);
            v52 = *(char **)(a1 + 72);
            if (v52 != v53)
            {
              do
              {
                v54 = (xgboost_old::io::SparsePage *)*((_QWORD *)v52 - 1);
                v52 -= 8;
                *--v51 = v54;
              }
              while (v52 != v53);
              v52 = *v20;
            }
            *(_QWORD *)(a1 + 64) = v51;
            *(_QWORD *)(a1 + 72) = v45;
            *(_QWORD *)(a1 + 80) = &v50[8 * v49];
            if (v52)
              operator delete(v52);
          }
          else
          {
            *v44 = v39;
            v45 = v44 + 1;
          }
          *(_QWORD *)(a1 + 72) = v45;
          v56 = *(_QWORD *)(a1 + 136);
          v55 = *(_QWORD *)(a1 + 144);
          v57 = (char *)v89;
          v90 = (char *)v89;
          if ((unint64_t)v89 >= v91)
          {
            v59 = (uint64_t)(v91 - (_QWORD)v89) >> 2;
            if (v59 <= 1)
              v59 = 1;
            if (v91 - (unint64_t)v89 >= 0x7FFFFFFFFFFFFFF8)
              v60 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v60 = v59;
            v62 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v91, v60);
            v63 = (char *)v89;
            v64 = v90;
            *(_QWORD *)v62 = 0;
            v58 = v62 + 8;
            v65 = v62;
            while (v64 != v63)
            {
              v66 = *((_QWORD *)v64 - 1);
              v64 -= 8;
              *((_QWORD *)v65 - 1) = v66;
              v65 -= 8;
            }
            v89 = v65;
            v90 = v62 + 8;
            v91 = (unint64_t)&v62[8 * v61];
            if (v63)
              operator delete(v63);
          }
          else
          {
            *(_QWORD *)v89 = 0;
            v58 = v57 + 8;
          }
          v19 = (v55 - v56) >> 2;
          v90 = v58;
          v93 = v92;
        }
        ++v22;
      }
      while (v22 < *(_QWORD *)v21);
    }
  }
  if (v90 - (_BYTE *)v89 != 8)
  {
    v67 = (xgboost_old::io::SparsePage *)operator new();
    xgboost_old::io::SparsePage::SparsePage(v67);
    v68 = v89;
    if (v90 == v89)
      v68 = 0;
    if (v93 == v92)
      v69 = 0;
    else
      v69 = v92;
    v87 = v68;
    v88 = v69;
    v85 = ((v90 - (_BYTE *)v89) >> 3) - 1;
    v86 = 0;
    if (*(_QWORD *)(a1 + 144) == *(_QWORD *)(a1 + 136))
      v70 = 0;
    else
      v70 = *(_QWORD *)(a1 + 136);
    xgboost_old::io::FMatrixS::MakeColPage((turi::thread *)a1, &v85, v70 + 4 * v19, a2, v67);
    v72 = *(xgboost_old::io::SparsePage ***)(a1 + 72);
    v71 = *(_QWORD *)(a1 + 80);
    if ((unint64_t)v72 >= v71)
    {
      v74 = ((char *)v72 - *v20) >> 3;
      if ((unint64_t)(v74 + 1) >> 61)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      v75 = v71 - (_QWORD)*v20;
      v76 = v75 >> 2;
      if (v75 >> 2 <= (unint64_t)(v74 + 1))
        v76 = v74 + 1;
      if ((unint64_t)v75 >= 0x7FFFFFFFFFFFFFF8)
        v77 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v77 = v76;
      if (v77)
        v78 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v84, v77);
      else
        v78 = 0;
      v79 = (xgboost_old::io::SparsePage **)&v78[8 * v74];
      v80 = &v78[8 * v77];
      *v79 = v67;
      v73 = v79 + 1;
      v82 = *(char **)(a1 + 64);
      v81 = *(char **)(a1 + 72);
      if (v81 != v82)
      {
        do
        {
          v83 = (xgboost_old::io::SparsePage *)*((_QWORD *)v81 - 1);
          v81 -= 8;
          *--v79 = v83;
        }
        while (v81 != v82);
        v81 = *v20;
      }
      *(_QWORD *)(a1 + 64) = v79;
      *(_QWORD *)(a1 + 72) = v73;
      *(_QWORD *)(a1 + 80) = v80;
      if (v81)
        operator delete(v81);
    }
    else
    {
      *v72 = v67;
      v73 = v72 + 1;
    }
    *(_QWORD *)(a1 + 72) = v73;
  }
  if (__p)
  {
    v95 = __p;
    operator delete(__p);
  }
  if (v92)
  {
    v93 = v92;
    operator delete(v92);
  }
  if (v89)
  {
    v90 = (char *)v89;
    operator delete(v89);
  }
}

void sub_2183CAFC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  xgboost_old::io::SparsePage::~SparsePage((xgboost_old::io::SparsePage *)va);
  _Unwind_Resume(a1);
}

xgboost_old::io::SparsePage *xgboost_old::io::SparsePage::SparsePage(xgboost_old::io::SparsePage *this)
{
  _QWORD *v2;
  char *v3;
  char *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  *((_QWORD *)this + 8) = 0;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  v2 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)this + 16, 1uLL);
  v3 = *(char **)this;
  v4 = (char *)*((_QWORD *)this + 1);
  v6 = &v2[v5];
  *v2 = 0;
  v7 = v2 + 1;
  while (v4 != v3)
  {
    v8 = *((_QWORD *)v4 - 1);
    v4 -= 8;
    *--v2 = v8;
  }
  *(_QWORD *)this = v2;
  *((_QWORD *)this + 1) = v7;
  *((_QWORD *)this + 2) = v6;
  if (v3)
    operator delete(v3);
  *((_QWORD *)this + 1) = v7;
  *((_QWORD *)this + 4) = *((_QWORD *)this + 3);
  return this;
}

void sub_2183CB0B8(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  _QWORD *v3;
  void *v5;

  v5 = *(void **)(v1 + 48);
  if (v5)
  {
    *(_QWORD *)(v1 + 56) = v5;
    operator delete(v5);
  }
  xgboost_old::io::SparsePage::SparsePage(v2, v1, v3);
  _Unwind_Resume(a1);
}

void turi::parallel_for<xgboost_old::io::FMatrixS::MakeOneBatch(std::vector<BOOL> const&,float,xgboost_old::io::SparsePage *)::{lambda(unsigned long)#1}>(turi::thread_pool *a1, unint64_t a2, turi::thread *a3)
{
  unint64_t v5;
  turi::thread_pool *instance;
  turi::thread *v7;
  turi::thread_pool *tls_data;
  BOOL v9;
  turi::thread_pool *v10;
  uint64_t v11;
  double v12;
  double v13;
  turi::thread *v14;
  unint64_t v15;
  uint64_t v16[4];
  _BYTE v17[192];
  uint64_t v18;

  v5 = (unint64_t)a1;
  v18 = *MEMORY[0x24BDAC8D0];
  instance = (turi::thread_pool *)turi::thread_pool::get_instance(a1);
  v7 = (turi::thread *)turi::thread_pool::size(instance);
  tls_data = (turi::thread_pool *)turi::thread::get_tls_data(v7);
  if (*((_BYTE *)tls_data + 8))
    v9 = 0;
  else
    v9 = (unint64_t)v7 > 1;
  if (v9)
  {
    v10 = (turi::thread_pool *)turi::thread_pool::get_instance(tls_data);
    turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)v17, v10);
    v11 = 0;
    v12 = (double)(a2 - v5) / (double)(unint64_t)v7;
    v13 = (double)v5;
    do
    {
      v14 = (turi::thread *)(v11 + 1);
      v15 = (unint64_t)(v13 + v12 * (double)(unint64_t)(v11 + 1));
      if ((turi::thread *)v11 == (turi::thread *)((char *)v7 - 1))
        v15 = a2;
      v16[2] = (unint64_t)(v13 + v12 * (double)(unint64_t)v11);
      v16[3] = v15;
      v16[0] = (uint64_t)boost::function0<void>::assign_to<void turi::parallel_for<xgboost_old::io::FMatrixS::MakeOneBatch(std::vector<BOOL> const&,float,xgboost_old::io::SparsePage *)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::io::FMatrixS::MakeOneBatch(std::vector<BOOL> const&,float,xgboost_old::io::SparsePage *)::{lambda(unsigned long)#1} const&)::{lambda(void)#1}>(xgboost_old::io::FMatrixS::MakeOneBatch(std::vector<BOOL> const&,float,xgboost_old::io::SparsePage *)::{lambda(unsigned long)#1})::stored_vtable
             + 1;
      v16[1] = (uint64_t)a3;
      turi::parallel_task_queue::launch((uint64_t)v17, (uint64_t)v16, v11);
      boost::function0<void>::~function0(v16);
      v11 = (uint64_t)v14;
    }
    while (v14 != v7);
    turi::parallel_task_queue::join((turi::parallel_task_queue *)v17);
    turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)v17);
  }
  else if (a2 > v5)
  {
    do
      xgboost_old::io::FMatrixS::MakeOneBatch(std::vector<BOOL> const&,float,xgboost_old::io::SparsePage *)::{lambda(unsigned long)#1}::operator()(a3, v5++);
    while (a2 != v5);
  }
}

void sub_2183CB234(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)va);
  _Unwind_Resume(a1);
}

void turi::parallel_for<xgboost_old::io::FMatrixS::MakeOneBatch(std::vector<BOOL> const&,float,xgboost_old::io::SparsePage *)::{lambda(unsigned long)#2}>(turi::thread_pool *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v5;
  turi::thread_pool *instance;
  turi::thread *v7;
  turi::thread_pool *tls_data;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int *v18;
  unint64_t v19;
  int v20;
  int v21;
  _QWORD *v22;
  uint64_t v23;
  _DWORD *v24;
  turi::thread_pool *v25;
  uint64_t v26;
  double v27;
  double v28;
  turi::thread *v29;
  unint64_t v30;
  uint64_t v31[4];
  _BYTE v32[192];
  uint64_t v33;

  v5 = (unint64_t)a1;
  v33 = *MEMORY[0x24BDAC8D0];
  instance = (turi::thread_pool *)turi::thread_pool::get_instance(a1);
  v7 = (turi::thread *)turi::thread_pool::size(instance);
  tls_data = (turi::thread_pool *)turi::thread::get_tls_data(v7);
  if (*((_BYTE *)tls_data + 8))
    v9 = 0;
  else
    v9 = (unint64_t)v7 > 1;
  if (v9)
  {
    v25 = (turi::thread_pool *)turi::thread_pool::get_instance(tls_data);
    turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)v32, v25);
    v26 = 0;
    v27 = (double)(a2 - v5) / (double)(unint64_t)v7;
    v28 = (double)v5;
    do
    {
      v29 = (turi::thread *)(v26 + 1);
      v30 = (unint64_t)(v28 + v27 * (double)(unint64_t)(v26 + 1));
      if ((turi::thread *)v26 == (turi::thread *)((char *)v7 - 1))
        v30 = a2;
      v31[2] = (unint64_t)(v28 + v27 * (double)(unint64_t)v26);
      v31[3] = v30;
      v31[0] = (uint64_t)boost::function0<void>::assign_to<void turi::parallel_for<xgboost_old::io::FMatrixS::MakeOneBatch(std::vector<BOOL> const&,float,xgboost_old::io::SparsePage *)::{lambda(unsigned long)#2}>(unsigned long,unsigned long,xgboost_old::io::FMatrixS::MakeOneBatch(std::vector<BOOL> const&,float,xgboost_old::io::SparsePage *)::{lambda(unsigned long)#2} const&)::{lambda(void)#1}>(xgboost_old::io::FMatrixS::MakeOneBatch(std::vector<BOOL> const&,float,xgboost_old::io::SparsePage *)::{lambda(unsigned long)#2})::stored_vtable
             + 1;
      v31[1] = a3;
      turi::parallel_task_queue::launch((uint64_t)v32, (uint64_t)v31, v26);
      boost::function0<void>::~function0(v31);
      v26 = (uint64_t)v29;
    }
    while (v29 != v7);
    turi::parallel_task_queue::join((turi::parallel_task_queue *)v32);
    turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)v32);
  }
  else if (a2 > v5)
  {
    do
    {
      tls_data = (turi::thread_pool *)turi::thread::get_tls_data(tls_data);
      v10 = *(_QWORD *)a3;
      if (((*(_QWORD *)(**(_QWORD **)(a3 + 8) + 8 * ((*(_DWORD *)(*(_QWORD *)a3 + 8) + v5) >> 6)) >> (*(_BYTE *)(*(_QWORD *)a3 + 8) + v5)) & 1) != 0)
      {
        v11 = *(_QWORD *)(v10 + 16);
        v12 = *(_QWORD *)(v11 + 8 * v5);
        v13 = v5 + 1;
        v14 = *(_QWORD *)(v11 + 8 * (v5 + 1)) - v12;
        if ((_DWORD)v14)
        {
          v15 = *(_QWORD *)(a3 + 24);
          v16 = **(_QWORD **)(a3 + 16);
          v17 = *(_QWORD *)tls_data;
          v18 = (int *)(*(_QWORD *)(v10 + 24) + 8 * v12 + 4);
          do
          {
            v19 = *(v18 - 1);
            if (((*(_QWORD *)(v16 + ((v19 >> 3) & 0x1FFFFFF8)) >> v19) & 1) != 0)
            {
              v20 = *(_DWORD *)(v10 + 8) + v5;
              v21 = *v18;
              v22 = *(_QWORD **)(v15 + 8);
              tls_data = *(turi::thread_pool **)(**(_QWORD **)(v15 + 16) + 24 * v17);
              v23 = *((_QWORD *)tls_data + v19);
              *((_QWORD *)tls_data + v19) = v23 + 1;
              v24 = (_DWORD *)(*v22 + 8 * v23);
              *v24 = v20;
              v24[1] = v21;
            }
            v18 += 2;
            --v14;
          }
          while (v14);
        }
      }
      else
      {
        v13 = v5 + 1;
      }
      v5 = v13;
    }
    while (v13 != a2);
  }
}

void sub_2183CB460(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)va);
  _Unwind_Resume(a1);
}

void turi::parallel_for<xgboost_old::io::FMatrixS::MakeOneBatch(std::vector<BOOL> const&,float,xgboost_old::io::SparsePage *)::{lambda(unsigned long)#3}>(turi::thread_pool *a1, unint64_t a2, _QWORD **a3)
{
  unint64_t v5;
  turi::thread_pool *instance;
  turi::thread *v7;
  turi::thread_pool *tls_data;
  BOOL v9;
  _QWORD *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  turi::thread_pool *v16;
  uint64_t v17;
  double v18;
  double v19;
  turi::thread *v20;
  unint64_t v21;
  uint64_t v22[4];
  uint64_t (*v23[25])(uint64_t *, uint64_t *);

  v5 = (unint64_t)a1;
  v23[24] = *(uint64_t (**)(uint64_t *, uint64_t *))MEMORY[0x24BDAC8D0];
  instance = (turi::thread_pool *)turi::thread_pool::get_instance(a1);
  v7 = (turi::thread *)turi::thread_pool::size(instance);
  tls_data = (turi::thread_pool *)turi::thread::get_tls_data(v7);
  if (*((_BYTE *)tls_data + 8))
    v9 = 0;
  else
    v9 = (unint64_t)v7 > 1;
  if (v9)
  {
    v16 = (turi::thread_pool *)turi::thread_pool::get_instance(tls_data);
    turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)v23, v16);
    v17 = 0;
    v18 = (double)(a2 - v5) / (double)(unint64_t)v7;
    v19 = (double)v5;
    do
    {
      v20 = (turi::thread *)(v17 + 1);
      v21 = (unint64_t)(v19 + v18 * (double)(unint64_t)(v17 + 1));
      if ((turi::thread *)v17 == (turi::thread *)((char *)v7 - 1))
        v21 = a2;
      v22[2] = (unint64_t)(v19 + v18 * (double)(unint64_t)v17);
      v22[3] = v21;
      v22[0] = (uint64_t)boost::function0<void>::assign_to<void turi::parallel_for<xgboost_old::io::FMatrixS::MakeOneBatch(std::vector<BOOL> const&,float,xgboost_old::io::SparsePage *)::{lambda(unsigned long)#3}>(unsigned long,unsigned long,xgboost_old::io::FMatrixS::MakeOneBatch(std::vector<BOOL> const&,float,xgboost_old::io::SparsePage *)::{lambda(unsigned long)#3} const&)::{lambda(void)#1}>(xgboost_old::io::FMatrixS::MakeOneBatch(std::vector<BOOL> const&,float,xgboost_old::io::SparsePage *)::{lambda(unsigned long)#3})::stored_vtable
             + 1;
      v22[1] = (uint64_t)a3;
      turi::parallel_task_queue::launch((uint64_t)v23, (uint64_t)v22, v17);
      boost::function0<void>::~function0(v22);
      v17 = (uint64_t)v20;
    }
    while (v20 != v7);
    turi::parallel_task_queue::join((turi::parallel_task_queue *)v23);
    turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)v23);
  }
  else if (a2 > v5)
  {
    do
    {
      v10 = (_QWORD *)**a3;
      v11 = (unint64_t *)(*v10 + 8 * v5);
      v12 = *v11;
      v13 = v11[1];
      if (v12 < v13)
      {
        v15 = v10 + 3;
        v14 = v10[3];
        if (v15[1] == v14)
          v14 = 0;
        v23[0] = (uint64_t (*)(uint64_t *, uint64_t *))xgboost_old::SparseBatch::Entry::CmpValue;
        std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(xgboost_old::SparseBatch::Entry const&,xgboost_old::SparseBatch::Entry const&),xgboost_old::SparseBatch::Entry*,false>(v14 + 8 * v12, (uint64_t *)(v14 + 8 * v13), v23, 126 - 2 * __clz((uint64_t)(8 * v13 - 8 * v12) >> 3), 1);
      }
      ++v5;
    }
    while (a2 != v5);
  }
}

void sub_2183CB62C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)va);
  _Unwind_Resume(a1);
}

void std::vector<std::vector<unsigned long>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;

  v3 = a1[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<unsigned long>>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 24 * a2;
    if (v3 != v7)
    {
      v8 = a1[1];
      do
      {
        v10 = *(void **)(v8 - 24);
        v8 -= 24;
        v9 = v10;
        if (v10)
        {
          *(_QWORD *)(v3 - 16) = v9;
          operator delete(v9);
        }
        v3 = v8;
      }
      while (v8 != v7);
    }
    a1[1] = v7;
  }
}

void std::vector<std::vector<unsigned long>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  size_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    v19 = v4;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>(v4, v11);
    else
      v12 = 0;
    v15 = v12;
    v16 = &v12[24 * v8];
    v18 = &v12[24 * v11];
    v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    v17 = &v16[v14];
    std::vector<std::vector<unsigned long>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)&v15);
  }
}

void sub_2183CB83C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void xgboost_old::io::FMatrixS::MakeOneBatch(std::vector<BOOL> const&,float,xgboost_old::io::SparsePage *)::{lambda(unsigned long)#1}::operator()(turi::thread *a1, uint64_t a2)
{
  _BYTE *tls_data;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  int v10;
  unint64_t v11;
  unsigned int v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;

  tls_data = turi::thread::get_tls_data(a1);
  v5 = *(_QWORD *)a1;
  if (((*(_QWORD *)(**((_QWORD **)a1 + 1) + 8 * ((*(_DWORD *)(*(_QWORD *)a1 + 8) + a2) >> 6)) >> (*(_BYTE *)(*(_QWORD *)a1 + 8) + a2)) & 1) != 0)
  {
    v6 = *(_QWORD *)(v5 + 16) + 8 * a2;
    v7 = *(_QWORD *)v6;
    LODWORD(v6) = *(_DWORD *)(v6 + 8);
    v8 = (v6 - v7);
    if ((_DWORD)v6 != (_DWORD)v7)
    {
      v9 = (unsigned int *)(*(_QWORD *)(v5 + 24) + 8 * v7);
      v10 = *(_QWORD *)tls_data;
      do
      {
        v12 = *v9;
        v9 += 2;
        v11 = v12;
        if (((*(_QWORD *)(**((_QWORD **)a1 + 2) + (((unint64_t)v12 >> 3) & 0x1FFFFFF8)) >> v12) & 1) != 0)
        {
          v13 = (uint64_t *)(**(_QWORD **)(*((_QWORD *)a1 + 3) + 16) + 24 * v10);
          v14 = *v13;
          if (v11 >= (v13[1] - *v13) >> 3)
          {
            v15 = 0;
            std::vector<unsigned long>::resize((uint64_t)v13, v11 + 1, &v15);
            v14 = *v13;
          }
          ++*(_QWORD *)(v14 + 8 * v11);
        }
        --v8;
      }
      while (v8);
    }
  }
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<xgboost_old::io::FMatrixS::MakeOneBatch(std::vector<BOOL> const&,float,xgboost_old::io::SparsePage *)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::io::FMatrixS::MakeOneBatch(std::vector<BOOL> const&,float,xgboost_old::io::SparsePage *)::{lambda(unsigned long)#1} const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v4;
  __int128 v5;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x80000002186FB25FLL & 0x7FFFFFFFFFFFFFFFLL)
        || (result = strcmp((const char *)result, (const char *)(0x80000002186FB25FLL & 0x7FFFFFFFFFFFFFFFLL)),
            !(_DWORD)result))
      {
        *(_QWORD *)a2 = v4;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
    }
  }
  else
  {
    v5 = *(_OWORD *)result;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

void boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<xgboost_old::io::FMatrixS::MakeOneBatch(std::vector<BOOL> const&,float,xgboost_old::io::SparsePage *)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::io::FMatrixS::MakeOneBatch(std::vector<BOOL> const&,float,xgboost_old::io::SparsePage *)::{lambda(unsigned long)#1} const&)::{lambda(void)#1},void>::invoke(uint64_t a1)
{
  unint64_t i;

  for (i = *(_QWORD *)(a1 + 8); i < *(_QWORD *)(a1 + 16); ++i)
    xgboost_old::io::FMatrixS::MakeOneBatch(std::vector<BOOL> const&,float,xgboost_old::io::SparsePage *)::{lambda(unsigned long)#1}::operator()(*(turi::thread **)a1, i);
}

void std::vector<xgboost_old::SparseBatch::Entry>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 8 * a2;
  }
  else
  {
    std::vector<xgboost_old::SparseBatch::Entry>::__append((char **)a1, a2 - v2);
  }
}

void std::vector<xgboost_old::SparseBatch::Entry>::__append(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;

  v4 = (uint64_t)(a1 + 2);
  v5 = a1[2];
  v6 = a1[1];
  if (a2 <= (v5 - v6) >> 3)
  {
    a1[1] = &v6[8 * a2];
  }
  else
  {
    v7 = *a1;
    v8 = v6 - *a1;
    v9 = a2 + (v8 >> 3);
    if (v9 >> 61)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 3;
    v11 = v5 - v7;
    if (v11 >> 2 > v9)
      v9 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    if (v12)
    {
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v4, v12);
      v7 = *a1;
      v6 = a1[1];
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[8 * v10];
    v15 = &v13[8 * v12];
    v16 = &v14[8 * a2];
    if (v6 != v7)
    {
      do
      {
        v17 = *((_QWORD *)v6 - 1);
        v6 -= 8;
        *((_QWORD *)v14 - 1) = v17;
        v14 -= 8;
      }
      while (v6 != v7);
      v7 = *a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v7)
      operator delete(v7);
  }
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<xgboost_old::io::FMatrixS::MakeOneBatch(std::vector<BOOL> const&,float,xgboost_old::io::SparsePage *)::{lambda(unsigned long)#2}>(unsigned long,unsigned long,xgboost_old::io::FMatrixS::MakeOneBatch(std::vector<BOOL> const&,float,xgboost_old::io::SparsePage *)::{lambda(unsigned long)#2} const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v4;
  __int128 v5;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x800000021872A32CLL & 0x7FFFFFFFFFFFFFFFLL)
        || (result = strcmp((const char *)result, (const char *)(0x800000021872A32CLL & 0x7FFFFFFFFFFFFFFFLL)),
            !(_DWORD)result))
      {
        *(_QWORD *)a2 = v4;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
    }
  }
  else
  {
    v5 = *(_OWORD *)result;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

uint64_t **boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<xgboost_old::io::FMatrixS::MakeOneBatch(std::vector<BOOL> const&,float,xgboost_old::io::SparsePage *)::{lambda(unsigned long)#2}>(unsigned long,unsigned long,xgboost_old::io::FMatrixS::MakeOneBatch(std::vector<BOOL> const&,float,xgboost_old::io::SparsePage *)::{lambda(unsigned long)#2} const&)::{lambda(void)#1},void>::invoke(uint64_t **result)
{
  unint64_t v1;
  uint64_t **v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  int *v11;
  unint64_t v12;
  int v13;
  int v14;
  _QWORD *v15;
  uint64_t *v16;
  _DWORD *v17;

  v1 = (unint64_t)result[1];
  if (v1 < (unint64_t)result[2])
  {
    v2 = result;
    do
    {
      v3 = *v2;
      result = (uint64_t **)turi::thread::get_tls_data((turi::thread *)result);
      v4 = *v3;
      if (((*(_QWORD *)(*(_QWORD *)v3[1] + 8 * ((*(_DWORD *)(*v3 + 8) + v1) >> 6)) >> (*(_BYTE *)(*v3 + 8) + v1)) & 1) != 0)
      {
        v5 = *(_QWORD *)(v4 + 16);
        v6 = *(_QWORD *)(v5 + 8 * v1);
        v7 = v1 + 1;
        v8 = *(_QWORD *)(v5 + 8 * (v1 + 1)) - v6;
        if ((_DWORD)v8)
        {
          v9 = *(_QWORD *)v3[2];
          v10 = *result;
          v11 = (int *)(*(_QWORD *)(v4 + 24) + 8 * v6 + 4);
          do
          {
            v12 = *(v11 - 1);
            if (((*(_QWORD *)(v9 + ((v12 >> 3) & 0x1FFFFFF8)) >> v12) & 1) != 0)
            {
              v13 = *(_DWORD *)(v4 + 8) + v1;
              v14 = *v11;
              v15 = *(_QWORD **)(v3[3] + 8);
              result = *(uint64_t ***)(**(_QWORD **)(v3[3] + 16) + 24 * (int)v10);
              v16 = result[v12];
              result[v12] = (uint64_t *)((char *)v16 + 1);
              v17 = (_DWORD *)(*v15 + 8 * (_QWORD)v16);
              *v17 = v13;
              v17[1] = v14;
            }
            v11 += 2;
            --v8;
          }
          while (v8);
        }
      }
      else
      {
        v7 = v1 + 1;
      }
      v1 = v7;
    }
    while (v7 < (unint64_t)v2[2]);
  }
  return result;
}

BOOL xgboost_old::SparseBatch::Entry::CmpValue(uint64_t a1, uint64_t a2)
{
  return *(float *)(a1 + 4) < *(float *)(a2 + 4);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(xgboost_old::SparseBatch::Entry const&,xgboost_old::SparseBatch::Entry const&),xgboost_old::SparseBatch::Entry*,false>(uint64_t result, uint64_t *a2, uint64_t (**a3)(uint64_t *, uint64_t *), uint64_t a4, char a5)
{
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  char v19;
  BOOL v20;
  uint64_t v21;

  v8 = (uint64_t *)result;
LABEL_2:
  v9 = a2 - 1;
  v10 = v8;
LABEL_3:
  v11 = 1 - a4;
  while (2)
  {
    v8 = v10;
    v12 = v11;
    v13 = (char *)a2 - (char *)v10;
    v14 = a2 - v10;
    switch(v14)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        result = (*a3)(a2 - 1, v10);
        if ((_DWORD)result)
        {
          v21 = *v10;
          *v10 = *v9;
          *v9 = v21;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost_old::SparseBatch::Entry const&,xgboost_old::SparseBatch::Entry const&),xgboost_old::SparseBatch::Entry*>(v10, v10 + 1, a2 - 1, a3);
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost_old::SparseBatch::Entry const&,xgboost_old::SparseBatch::Entry const&),xgboost_old::SparseBatch::Entry*>(v10, v10 + 1, v10 + 2, a2 - 1, a3);
      case 5uLL:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost_old::SparseBatch::Entry const&,xgboost_old::SparseBatch::Entry const&),xgboost_old::SparseBatch::Entry*>(v10, v10 + 1, v10 + 2, v10 + 3, a2 - 1, a3);
      default:
        if (v13 <= 191)
        {
          if ((a5 & 1) != 0)
            return std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost_old::SparseBatch::Entry const&,xgboost_old::SparseBatch::Entry const&),xgboost_old::SparseBatch::Entry*>((uint64_t)v10, a2, (uint64_t (**)(_QWORD *, _QWORD))a3);
          else
            return std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost_old::SparseBatch::Entry const&,xgboost_old::SparseBatch::Entry const&),xgboost_old::SparseBatch::Entry*>((uint64_t)v10, a2, (uint64_t (**)(_QWORD *, _QWORD))a3);
        }
        if (v12 != 1)
        {
          v15 = v14 >> 1;
          v16 = &v10[v14 >> 1];
          if ((unint64_t)v13 < 0x401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost_old::SparseBatch::Entry const&,xgboost_old::SparseBatch::Entry const&),xgboost_old::SparseBatch::Entry*>(&v10[v14 >> 1], v10, a2 - 1, a3);
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost_old::SparseBatch::Entry const&,xgboost_old::SparseBatch::Entry const&),xgboost_old::SparseBatch::Entry*>(v10, &v10[v14 >> 1], a2 - 1, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost_old::SparseBatch::Entry const&,xgboost_old::SparseBatch::Entry const&),xgboost_old::SparseBatch::Entry*>(v10 + 1, v16 - 1, a2 - 2, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost_old::SparseBatch::Entry const&,xgboost_old::SparseBatch::Entry const&),xgboost_old::SparseBatch::Entry*>(v10 + 2, &v10[v15 + 1], a2 - 3, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost_old::SparseBatch::Entry const&,xgboost_old::SparseBatch::Entry const&),xgboost_old::SparseBatch::Entry*>(v16 - 1, v16, &v10[v15 + 1], a3);
            v17 = *v10;
            *v10 = *v16;
            *v16 = v17;
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          if (((*a3)(v10 - 1, v10) & 1) == 0)
          {
            result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,xgboost_old::SparseBatch::Entry *,BOOL (*&)(xgboost_old::SparseBatch::Entry const&,xgboost_old::SparseBatch::Entry const&)>(v10, a2, a3);
            v10 = (uint64_t *)result;
            goto LABEL_17;
          }
LABEL_12:
          v18 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,xgboost_old::SparseBatch::Entry *,BOOL (*&)(xgboost_old::SparseBatch::Entry const&,xgboost_old::SparseBatch::Entry const&)>(v10, a2, a3);
          if ((v19 & 1) == 0)
            goto LABEL_15;
          v20 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost_old::SparseBatch::Entry const&,xgboost_old::SparseBatch::Entry const&),xgboost_old::SparseBatch::Entry*>(v10, v18, a3);
          v10 = v18 + 1;
          result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost_old::SparseBatch::Entry const&,xgboost_old::SparseBatch::Entry const&),xgboost_old::SparseBatch::Entry*>(v18 + 1, a2, a3);
          if (!(_DWORD)result)
          {
            v11 = v12 + 1;
            if (v20)
              continue;
LABEL_15:
            result = std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(xgboost_old::SparseBatch::Entry const&,xgboost_old::SparseBatch::Entry const&),xgboost_old::SparseBatch::Entry*,false>(v8, v18, a3, -v12, a5 & 1);
            v10 = v18 + 1;
LABEL_17:
            a5 = 0;
            a4 = -v12;
            goto LABEL_3;
          }
          a4 = -v12;
          a2 = v18;
          if (v20)
            return result;
          goto LABEL_2;
        }
        if (v10 != a2)
          return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost_old::SparseBatch::Entry const&,xgboost_old::SparseBatch::Entry const&),xgboost_old::SparseBatch::Entry*,xgboost_old::SparseBatch::Entry*>((char *)v10, (char *)a2, (char *)a2, (unsigned int (**)(char *, uint64_t))a3);
        return result;
    }
  }
}

uint64_t std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost_old::SparseBatch::Entry const&,xgboost_old::SparseBatch::Entry const&),xgboost_old::SparseBatch::Entry*>(uint64_t result, _QWORD *a2, uint64_t (**a3)(_QWORD *, _QWORD))
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD v14[9];

  if ((_QWORD *)result != a2)
  {
    v14[7] = v3;
    v14[8] = v4;
    v6 = (_QWORD *)result;
    v7 = (_QWORD *)(result + 8);
    if ((_QWORD *)(result + 8) != a2)
    {
      v9 = 0;
      v10 = (_QWORD *)result;
      do
      {
        v11 = v10;
        v10 = v7;
        result = (*a3)(v7, v11);
        if ((_DWORD)result)
        {
          v14[0] = *v10;
          v12 = v9;
          while (1)
          {
            *(_QWORD *)((char *)v6 + v12 + 8) = *(_QWORD *)((char *)v6 + v12);
            if (!v12)
              break;
            v12 -= 8;
            result = (*a3)(v14, (char *)v6 + v12);
            if ((result & 1) == 0)
            {
              v13 = (_QWORD *)((char *)v6 + v12 + 8);
              goto LABEL_10;
            }
          }
          v13 = v6;
LABEL_10:
          *v13 = v14[0];
        }
        v7 = v10 + 1;
        v9 += 8;
      }
      while (v10 + 1 != a2);
    }
  }
  return result;
}

uint64_t std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost_old::SparseBatch::Entry const&,xgboost_old::SparseBatch::Entry const&),xgboost_old::SparseBatch::Entry*>(uint64_t result, _QWORD *a2, uint64_t (**a3)(_QWORD *, _QWORD))
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD v12[9];

  if ((_QWORD *)result != a2)
  {
    v12[7] = v3;
    v12[8] = v4;
    v6 = (_QWORD *)result;
    v7 = (_QWORD *)(result + 8);
    if ((_QWORD *)(result + 8) != a2)
    {
      v9 = result - 8;
      do
      {
        v10 = v6;
        v6 = v7;
        result = (*a3)(v7, v10);
        if ((_DWORD)result)
        {
          v12[0] = *v6;
          v11 = v9;
          do
          {
            *(_QWORD *)(v11 + 16) = *(_QWORD *)(v11 + 8);
            result = (*a3)(v12, v11);
            v11 -= 8;
          }
          while ((result & 1) != 0);
          *(_QWORD *)(v11 + 16) = v12[0];
        }
        v7 = v6 + 1;
        v9 += 8;
      }
      while (v6 + 1 != a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost_old::SparseBatch::Entry const&,xgboost_old::SparseBatch::Entry const&),xgboost_old::SparseBatch::Entry*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t (**a4)(uint64_t *, uint64_t *))
{
  char v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v8 = (*a4)(a2, a1);
  result = (*a4)(a3, a2);
  if ((v8 & 1) == 0)
  {
    if (!(_DWORD)result)
      return result;
    v11 = *a2;
    *a2 = *a3;
    *a3 = v11;
    if (!(*a4)(a2, a1))
      return 1;
    v12 = *a1;
    *a1 = *a2;
    *a2 = v12;
    return 2;
  }
  v10 = *a1;
  if (!(_DWORD)result)
  {
    *a1 = *a2;
    *a2 = v10;
    if (!(*a4)(a3, a2))
      return 1;
    v13 = *a2;
    *a2 = *a3;
    *a3 = v13;
    return 2;
  }
  *a1 = *a3;
  *a3 = v10;
  return 1;
}

uint64_t *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,xgboost_old::SparseBatch::Entry *,BOOL (*&)(xgboost_old::SparseBatch::Entry const&,xgboost_old::SparseBatch::Entry const&)>(uint64_t *a1, uint64_t *a2, uint64_t (**a3)(uint64_t *, uint64_t *))
{
  uint64_t *v4;
  uint64_t *v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t v11;

  v4 = a2;
  v11 = *a1;
  if (((*a3)(&v11, a2 - 1) & 1) != 0)
  {
    v6 = a1;
    do
      ++v6;
    while (((*a3)(&v11, v6) & 1) == 0);
  }
  else
  {
    v7 = a1 + 1;
    do
    {
      v6 = v7;
      if (v7 >= v4)
        break;
      v8 = (*a3)(&v11, v7);
      v7 = v6 + 1;
    }
    while (!v8);
  }
  if (v6 < v4)
  {
    do
      --v4;
    while (((*a3)(&v11, v4) & 1) != 0);
  }
  while (v6 < v4)
  {
    v9 = *v6;
    *v6 = *v4;
    *v4 = v9;
    do
      ++v6;
    while (!(*a3)(&v11, v6));
    do
      --v4;
    while (((*a3)(&v11, v4) & 1) != 0);
  }
  if (v6 - 1 != a1)
    *a1 = *(v6 - 1);
  *(v6 - 1) = v11;
  return v6;
}

uint64_t *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,xgboost_old::SparseBatch::Entry *,BOOL (*&)(xgboost_old::SparseBatch::Entry const&,xgboost_old::SparseBatch::Entry const&)>(uint64_t *a1, uint64_t *a2, uint64_t (**a3)(uint64_t *, uint64_t *))
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v13;

  v6 = 0;
  v13 = *a1;
  do
    ++v6;
  while (((*a3)(&a1[v6], &v13) & 1) != 0);
  v7 = &a1[v6];
  v8 = &a1[v6 - 1];
  if (v6 == 1)
  {
    do
    {
      if (v7 >= a2)
        break;
      --a2;
    }
    while (((*a3)(a2, &v13) & 1) == 0);
  }
  else
  {
    do
      --a2;
    while (!(*a3)(a2, &v13));
  }
  if (v7 < a2)
  {
    v9 = &a1[v6];
    v10 = a2;
    do
    {
      v11 = *v9;
      *v9 = *v10;
      *v10 = v11;
      do
        ++v9;
      while (((*a3)(v9, &v13) & 1) != 0);
      do
        --v10;
      while (!(*a3)(v10, &v13));
    }
    while (v9 < v10);
    v8 = v9 - 1;
  }
  if (v8 != a1)
    *a1 = *v8;
  *v8 = v13;
  return v8;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost_old::SparseBatch::Entry const&,xgboost_old::SparseBatch::Entry const&),xgboost_old::SparseBatch::Entry*>(uint64_t *a1, uint64_t *a2, uint64_t (**a3)(uint64_t *, uint64_t *))
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = a2 - 1;
      if ((*a3)(a2 - 1, a1))
      {
        v9 = *a1;
        *a1 = *v8;
        *v8 = v9;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost_old::SparseBatch::Entry const&,xgboost_old::SparseBatch::Entry const&),xgboost_old::SparseBatch::Entry*>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost_old::SparseBatch::Entry const&,xgboost_old::SparseBatch::Entry const&),xgboost_old::SparseBatch::Entry*>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost_old::SparseBatch::Entry const&,xgboost_old::SparseBatch::Entry const&),xgboost_old::SparseBatch::Entry*>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v10 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost_old::SparseBatch::Entry const&,xgboost_old::SparseBatch::Entry const&),xgboost_old::SparseBatch::Entry*>(a1, a1 + 1, a1 + 2, a3);
      v11 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)(v11, v10))
    {
      v17 = *v11;
      v14 = v12;
      while (1)
      {
        v15 = (uint64_t *)((char *)a1 + v14);
        *(uint64_t *)((char *)a1 + v14 + 24) = *(uint64_t *)((char *)a1 + v14 + 16);
        if (v14 == -16)
          break;
        v14 -= 8;
        if (((*a3)(&v17, v15 + 1) & 1) == 0)
        {
          v16 = (uint64_t *)((char *)a1 + v14 + 24);
          goto LABEL_12;
        }
      }
      v16 = a1;
LABEL_12:
      *v16 = v17;
      if (++v13 == 8)
        return v11 + 1 == a2;
    }
    v10 = v11;
    v12 += 8;
    if (++v11 == a2)
      return 1;
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost_old::SparseBatch::Entry const&,xgboost_old::SparseBatch::Entry const&),xgboost_old::SparseBatch::Entry*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t (**a5)(uint64_t *, uint64_t *))
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost_old::SparseBatch::Entry const&,xgboost_old::SparseBatch::Entry const&),xgboost_old::SparseBatch::Entry*>(a1, a2, a3, a5);
  result = (*a5)(a4, a3);
  if ((_DWORD)result)
  {
    v11 = *a3;
    *a3 = *a4;
    *a4 = v11;
    result = (*a5)(a3, a2);
    if ((_DWORD)result)
    {
      v12 = *a2;
      *a2 = *a3;
      *a3 = v12;
      result = (*a5)(a2, a1);
      if ((_DWORD)result)
      {
        v13 = *a1;
        *a1 = *a2;
        *a2 = v13;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost_old::SparseBatch::Entry const&,xgboost_old::SparseBatch::Entry const&),xgboost_old::SparseBatch::Entry*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t (**a6)(uint64_t *, uint64_t *))
{
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost_old::SparseBatch::Entry const&,xgboost_old::SparseBatch::Entry const&),xgboost_old::SparseBatch::Entry*>(a1, a2, a3, a4, a6);
  result = (*a6)(a5, a4);
  if ((_DWORD)result)
  {
    v13 = *a4;
    *a4 = *a5;
    *a5 = v13;
    result = (*a6)(a4, a3);
    if ((_DWORD)result)
    {
      v14 = *a3;
      *a3 = *a4;
      *a4 = v14;
      result = (*a6)(a3, a2);
      if ((_DWORD)result)
      {
        v15 = *a2;
        *a2 = *a3;
        *a3 = v15;
        result = (*a6)(a2, a1);
        if ((_DWORD)result)
        {
          v16 = *a1;
          *a1 = *a2;
          *a2 = v16;
        }
      }
    }
  }
  return result;
}

char *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost_old::SparseBatch::Entry const&,xgboost_old::SparseBatch::Entry const&),xgboost_old::SparseBatch::Entry*,xgboost_old::SparseBatch::Entry*>(char *a1, char *a2, char *a3, unsigned int (**a4)(char *, uint64_t))
{
  char *v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v24;
  uint64_t v25;

  if (a1 != a2)
  {
    v6 = a2;
    v8 = a2 - a1;
    v9 = (a2 - a1) >> 3;
    if (a2 - a1 >= 9)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[8 * v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost_old::SparseBatch::Entry const&,xgboost_old::SparseBatch::Entry const&),xgboost_old::SparseBatch::Entry*>((uint64_t)a1, (unsigned int (**)(_QWORD, _QWORD))a4, v9, v12);
        v12 -= 8;
        --v11;
      }
      while (v11);
    }
    v13 = v6;
    if (v6 != a3)
    {
      v14 = v6;
      do
      {
        if ((*a4)(v14, (uint64_t)a1))
        {
          v15 = *(_QWORD *)v14;
          *(_QWORD *)v14 = *(_QWORD *)a1;
          *(_QWORD *)a1 = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost_old::SparseBatch::Entry const&,xgboost_old::SparseBatch::Entry const&),xgboost_old::SparseBatch::Entry*>((uint64_t)a1, (unsigned int (**)(_QWORD, _QWORD))a4, v9, a1);
        }
        v14 += 8;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 < 9)
    {
      return v13;
    }
    else
    {
      v24 = v13;
      v16 = (unint64_t)v8 >> 3;
      do
      {
        v17 = 0;
        v25 = *(_QWORD *)a1;
        v18 = a1;
        do
        {
          v19 = &v18[8 * v17 + 8];
          v20 = (2 * v17) | 1;
          v21 = 2 * v17 + 2;
          if (v21 < v16 && (*a4)(&v18[8 * v17 + 8], (uint64_t)&v18[8 * v17 + 16]))
          {
            v19 += 8;
            v20 = v21;
          }
          *(_QWORD *)v18 = *(_QWORD *)v19;
          v18 = v19;
          v17 = v20;
        }
        while (v20 <= (uint64_t)((unint64_t)(v16 - 2) >> 1));
        v6 -= 8;
        if (v19 == v6)
        {
          *(_QWORD *)v19 = v25;
        }
        else
        {
          *(_QWORD *)v19 = *(_QWORD *)v6;
          *(_QWORD *)v6 = v25;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost_old::SparseBatch::Entry const&,xgboost_old::SparseBatch::Entry const&),xgboost_old::SparseBatch::Entry*>((uint64_t)a1, (uint64_t)(v19 + 8), (uint64_t (**)(_QWORD *, uint64_t))a4, (v19 + 8 - a1) >> 3);
        }
      }
      while (v16-- > 2);
      return v24;
    }
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost_old::SparseBatch::Entry const&,xgboost_old::SparseBatch::Entry const&),xgboost_old::SparseBatch::Entry*>(uint64_t result, unsigned int (**a2)(_QWORD, _QWORD), uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[13];

  v6 = a3 - 2;
  if (a3 >= 2)
  {
    v19[11] = v4;
    v19[12] = v5;
    v7 = a4;
    v8 = result;
    v9 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) >= ((uint64_t)a4 - result) >> 3)
    {
      v12 = ((uint64_t)a4 - result) >> 2;
      v13 = v12 + 1;
      v14 = (_QWORD *)(result + 8 * (v12 + 1));
      v15 = v12 + 2;
      if (v12 + 2 < a3 && (*a2)(v14, v14 + 1))
      {
        ++v14;
        v13 = v15;
      }
      result = ((uint64_t (*)(_QWORD *, _QWORD *))*a2)(v14, v7);
      if ((result & 1) == 0)
      {
        v19[0] = *v7;
        do
        {
          v16 = v14;
          *v7 = *v14;
          if (v9 < v13)
            break;
          v17 = (2 * v13) | 1;
          v14 = (_QWORD *)(v8 + 8 * v17);
          v18 = 2 * v13 + 2;
          if (v18 < a3)
          {
            if ((*a2)(v8 + 8 * v17, v14 + 1))
            {
              ++v14;
              v17 = v18;
            }
          }
          result = ((uint64_t (*)(_QWORD *, _QWORD *))*a2)(v14, v19);
          v7 = v16;
          v13 = v17;
        }
        while (!(_DWORD)result);
        *v16 = v19[0];
      }
    }
  }
  return result;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost_old::SparseBatch::Entry const&,xgboost_old::SparseBatch::Entry const&),xgboost_old::SparseBatch::Entry*>(uint64_t result, uint64_t a2, uint64_t (**a3)(_QWORD *, uint64_t), uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD v13[9];

  v6 = a4 - 2;
  if (a4 >= 2)
  {
    v13[7] = v4;
    v13[8] = v5;
    v8 = result;
    v9 = v6 >> 1;
    v10 = (_QWORD *)(result + 8 * (v6 >> 1));
    v11 = (_QWORD *)(a2 - 8);
    result = (*a3)(v10, a2 - 8);
    if ((_DWORD)result)
    {
      v13[0] = *v11;
      do
      {
        v12 = v10;
        *v11 = *v10;
        if (!v9)
          break;
        v9 = (v9 - 1) >> 1;
        v10 = (_QWORD *)(v8 + 8 * v9);
        result = (*a3)(v10, (uint64_t)v13);
        v11 = v12;
      }
      while ((result & 1) != 0);
      *v12 = v13[0];
    }
  }
  return result;
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<xgboost_old::io::FMatrixS::MakeOneBatch(std::vector<BOOL> const&,float,xgboost_old::io::SparsePage *)::{lambda(unsigned long)#3}>(unsigned long,unsigned long,xgboost_old::io::FMatrixS::MakeOneBatch(std::vector<BOOL> const&,float,xgboost_old::io::SparsePage *)::{lambda(unsigned long)#3} const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v4;
  __int128 v5;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x800000021872A3BCLL & 0x7FFFFFFFFFFFFFFFLL)
        || (result = strcmp((const char *)result, (const char *)(0x800000021872A3BCLL & 0x7FFFFFFFFFFFFFFFLL)),
            !(_DWORD)result))
      {
        *(_QWORD *)a2 = v4;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
    }
  }
  else
  {
    v5 = *(_OWORD *)result;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

uint64_t boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<xgboost_old::io::FMatrixS::MakeOneBatch(std::vector<BOOL> const&,float,xgboost_old::io::SparsePage *)::{lambda(unsigned long)#3}>(unsigned long,unsigned long,xgboost_old::io::FMatrixS::MakeOneBatch(std::vector<BOOL> const&,float,xgboost_old::io::SparsePage *)::{lambda(unsigned long)#3} const&)::{lambda(void)#1},void>::invoke(uint64_t result)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  BOOL (*v11)(uint64_t, uint64_t);

  v2 = *(_QWORD *)(result + 8);
  v1 = *(_QWORD *)(result + 16);
  if (v2 < v1)
  {
    v3 = result;
    do
    {
      v4 = ***(_QWORD ****)v3;
      v5 = (unint64_t *)(*v4 + 8 * v2);
      v6 = *v5;
      v7 = v5[1];
      if (v6 < v7)
      {
        v9 = v4 + 3;
        v8 = v4[3];
        if (v9[1] == v8)
          v10 = 0;
        else
          v10 = v8;
        v11 = xgboost_old::SparseBatch::Entry::CmpValue;
        result = std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(xgboost_old::SparseBatch::Entry const&,xgboost_old::SparseBatch::Entry const&),xgboost_old::SparseBatch::Entry*,false>(v10 + 8 * v6, (uint64_t *)(v10 + 8 * v7), (uint64_t (**)(uint64_t *, uint64_t *))&v11, 126 - 2 * __clz((uint64_t)(8 * v7 - 8 * v6) >> 3), 1);
        v1 = *(_QWORD *)(v3 + 16);
      }
      ++v2;
    }
    while (v2 < v1);
  }
  return result;
}

void xgboost_old::io::SparsePage::Push(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v4 = a1 + 16;
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD **)(a1 + 8);
  v7 = *(v6 - 1) + *(unsigned int *)(a2 + 8);
  if ((unint64_t)v6 >= v5)
  {
    v9 = *(_QWORD **)a1;
    v10 = ((uint64_t)v6 - *(_QWORD *)a1) >> 3;
    v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 61)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v12 = v5 - (_QWORD)v9;
    if (v12 >> 2 > v11)
      v11 = v12 >> 2;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v11;
    if (v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v4, v13);
      v9 = *(_QWORD **)a1;
      v6 = *(_QWORD **)(a1 + 8);
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[8 * v10];
    v16 = &v14[8 * v13];
    *(_QWORD *)v15 = v7;
    v8 = v15 + 8;
    while (v6 != v9)
    {
      v17 = *--v6;
      *((_QWORD *)v15 - 1) = v17;
      v15 -= 8;
    }
    *(_QWORD *)a1 = v15;
    *(_QWORD *)(a1 + 8) = v8;
    *(_QWORD *)(a1 + 16) = v16;
    if (v9)
      operator delete(v9);
  }
  else
  {
    *v6 = v7;
    v8 = v6 + 1;
  }
  v18 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 8) = v8;
  v19 = *(_QWORD *)(a1 + 32) - v18;
  std::vector<xgboost_old::SparseBatch::Entry>::resize(a1 + 24, *(unsigned int *)(a2 + 8) + (v19 >> 3));
  v20 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v20)
  {
    if (*(_QWORD *)(a1 + 32) == *(_QWORD *)(a1 + 24))
      v21 = 0;
    else
      v21 = *(_QWORD *)(a1 + 24);
    memcpy((void *)(v21 + 8 * (v19 >> 3)), *(const void **)a2, 8 * v20);
  }
}

void xgboost_old::io::FMatrixS::MakeColPage(turi::thread *a1, uint64_t *a2, uint64_t a3, uint64_t **a4, _QWORD *a5)
{
  int v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  unint64_t i;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  const char *v49;
  unint64_t v50;
  uint64_t *v51;
  uint64_t **v52;
  uint64_t *v53;
  uint64_t *v54;
  _QWORD *v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;

  v60 = a5;
  v61 = a3;
  v9 = turi::thread::cpu_count(a1);
  v10 = (_QWORD *)*a5;
  a5[1] = *a5;
  v11 = a5[2];
  if ((unint64_t)v10 >= v11)
  {
    v13 = v11 - (_QWORD)v10;
    v14 = v13 >> 2;
    if ((unint64_t)(v13 >> 2) <= 1)
      v14 = 1;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      v15 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v15 = v14;
    v16 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a5 + 2), v15);
    v17 = (char *)*a5;
    v18 = (char *)a5[1];
    v20 = &v16[v19];
    *v16 = 0;
    v12 = v16 + 1;
    while (v18 != v17)
    {
      v21 = *((_QWORD *)v18 - 1);
      v18 -= 8;
      *--v16 = v21;
    }
    *a5 = v16;
    a5[1] = v12;
    a5[2] = v20;
    if (v17)
      operator delete(v17);
  }
  else
  {
    *v10 = 0;
    v12 = v10 + 1;
  }
  a5[1] = v12;
  a5[4] = a5[3];
  v54 = a5;
  v55 = a5 + 3;
  v56 = &v57;
  v57 = 0;
  v58 = 0;
  v59 = 0;
  v22 = *(_QWORD *)(*((_QWORD *)a1 + 15) + 8);
  std::vector<std::vector<unsigned long>>::resize(&v57, v9);
  v23 = v57;
  if (v58 != v57)
  {
    v24 = 0;
    v25 = 0;
    do
    {
      std::vector<unsigned long>::resize(v23 + v24, v22);
      v23 = *v56;
      v26 = *v56 + v24;
      v27 = *(void **)v26;
      v28 = *(_QWORD *)(v26 + 8) - *(_QWORD *)v26;
      if (v28 >= 1)
        bzero(v27, 8 * (((unint64_t)v28 >> 3) - ((unint64_t)v28 > 7)) + 8);
      ++v25;
      v24 += 24;
    }
    while (v25 < 0xAAAAAAAAAAAAAAABLL * ((v56[1] - v23) >> 3));
  }
  v29 = *(unsigned int *)a2;
  v51 = a2;
  v52 = a4;
  v53 = (uint64_t *)&v54;
  turi::parallel_for<xgboost_old::io::FMatrixS::MakeColPage(xgboost_old::RowBatch const&,unsigned int const*,std::vector<BOOL> const&,xgboost_old::io::SparsePage *)::{lambda(unsigned long)#1}>(0, v29, (uint64_t)&v51);
  v30 = v56;
  v31 = v56[1];
  if (v31 == *v56)
  {
    v35 = 0xAAAAAAAAAAAAAAABLL * ((v31 - *v56) >> 3);
  }
  else
  {
    v32 = 0;
    v33 = 0;
    v31 = *v56;
    do
    {
      v34 = (uint64_t)(*(_QWORD *)(v31 + v32 + 8) - *(_QWORD *)(v31 + v32)) >> 3;
      if (v34 >= (v54[1] - *v54) >> 3)
      {
        std::vector<unsigned long>::resize((uint64_t)v54, v34 + 1);
        v30 = v56;
        v31 = *v56;
      }
      ++v33;
      v35 = 0xAAAAAAAAAAAAAAABLL * ((v30[1] - v31) >> 3);
      v32 += 24;
    }
    while (v33 < v35);
  }
  v36 = *v54;
  v37 = v54[1] - *v54;
  if ((unint64_t)v37 < 9)
  {
    v38 = 0;
  }
  else
  {
    v38 = 0;
    v39 = 0;
    v40 = v37 >> 3;
    if (v40 <= 2)
      v40 = 2;
    v41 = (_QWORD *)(v31 + 8);
    v42 = 1;
    do
    {
      v43 = v42;
      v44 = v41;
      for (i = v35; i; --i)
      {
        v46 = *(v44 - 1);
        if (v39 < (*v44 - v46) >> 3)
        {
          v47 = *(_QWORD *)(v46 + 8 * v39);
          *(_QWORD *)(v46 + 8 * v39) = v38;
          v38 += v47;
        }
        v44 += 3;
      }
      *(_QWORD *)(v36 + 8 * v43) = v38;
      v42 = v43 + 1;
      v39 = v43;
    }
    while (v43 + 1 != v40);
  }
  std::vector<xgboost_old::SparseBatch::Entry>::resize((uint64_t)v55, v38);
  v51 = a2;
  v52 = &v54;
  v53 = &v61;
  turi::parallel_for<xgboost_old::io::FMatrixS::MakeColPage(xgboost_old::RowBatch const&,unsigned int const*,std::vector<BOOL> const&,xgboost_old::io::SparsePage *)::{lambda(unsigned long)#2}>(0, v29, (uint64_t)&v51);
  v48 = v60;
  xgboost_old::utils::Assert(((uint64_t)(v60[1] - *v60) >> 3) - 1 == *(_QWORD *)(*((_QWORD *)a1 + 15) + 8), "inconsistent col data", v49);
  v50 = ((v48[1] - *v48) >> 3) - 1;
  v51 = (uint64_t *)&v60;
  turi::parallel_for<xgboost_old::io::FMatrixS::MakeColPage(xgboost_old::RowBatch const&,unsigned int const*,std::vector<BOOL> const&,xgboost_old::io::SparsePage *)::{lambda(unsigned long)#3}>(0, v50, &v51);
  v51 = &v57;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v51);
}

void sub_2183CD1BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void turi::parallel_for<xgboost_old::io::FMatrixS::MakeColPage(xgboost_old::RowBatch const&,unsigned int const*,std::vector<BOOL> const&,xgboost_old::io::SparsePage *)::{lambda(unsigned long)#1}>(turi::thread_pool *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v5;
  turi::thread_pool *instance;
  turi::thread *v7;
  turi::thread_pool *tls_data;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  int v15;
  unint64_t v16;
  unsigned int v17;
  uint64_t *v18;
  uint64_t v19;
  turi::thread_pool *v20;
  uint64_t v21;
  double v22;
  double v23;
  turi::thread *v24;
  unint64_t v25;
  uint64_t v26[4];
  _QWORD v27[25];

  v5 = (unint64_t)a1;
  v27[24] = *MEMORY[0x24BDAC8D0];
  instance = (turi::thread_pool *)turi::thread_pool::get_instance(a1);
  v7 = (turi::thread *)turi::thread_pool::size(instance);
  tls_data = (turi::thread_pool *)turi::thread::get_tls_data(v7);
  if (*((_BYTE *)tls_data + 8))
    v9 = 0;
  else
    v9 = (unint64_t)v7 > 1;
  if (v9)
  {
    v20 = (turi::thread_pool *)turi::thread_pool::get_instance(tls_data);
    turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)v27, v20);
    v21 = 0;
    v22 = (double)(a2 - v5) / (double)(unint64_t)v7;
    v23 = (double)v5;
    do
    {
      v24 = (turi::thread *)(v21 + 1);
      v25 = (unint64_t)(v23 + v22 * (double)(unint64_t)(v21 + 1));
      if ((turi::thread *)v21 == (turi::thread *)((char *)v7 - 1))
        v25 = a2;
      v26[2] = (unint64_t)(v23 + v22 * (double)(unint64_t)v21);
      v26[3] = v25;
      v26[0] = (uint64_t)boost::function0<void>::assign_to<void turi::parallel_for<xgboost_old::io::FMatrixS::MakeColPage(xgboost_old::RowBatch const&,unsigned int const*,std::vector<BOOL> const&,xgboost_old::io::SparsePage *)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::io::FMatrixS::MakeColPage(xgboost_old::RowBatch const&,unsigned int const*,std::vector<BOOL> const&,xgboost_old::io::SparsePage *)::{lambda(unsigned long)#1} const&)::{lambda(void)#1}>(xgboost_old::io::FMatrixS::MakeColPage(xgboost_old::RowBatch const&,unsigned int const*,std::vector<BOOL> const&,xgboost_old::io::SparsePage *)::{lambda(unsigned long)#1})::stored_vtable
             + 1;
      v26[1] = a3;
      turi::parallel_task_queue::launch((uint64_t)v27, (uint64_t)v26, v21);
      boost::function0<void>::~function0(v26);
      v21 = (uint64_t)v24;
    }
    while (v24 != v7);
    turi::parallel_task_queue::join((turi::parallel_task_queue *)v27);
    turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)v27);
  }
  else if (a2 > v5)
  {
    do
    {
      tls_data = (turi::thread_pool *)turi::thread::get_tls_data(tls_data);
      v10 = *(_QWORD *)(*(_QWORD *)a3 + 16);
      v11 = *(_QWORD *)(v10 + 8 * v5++);
      v12 = *(_QWORD *)(v10 + 8 * v5);
      v13 = (v12 - v11);
      if ((_DWORD)v12 != (_DWORD)v11)
      {
        v14 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)a3 + 24) + 8 * v11);
        v15 = *(_DWORD *)tls_data;
        do
        {
          v17 = *v14;
          v14 += 2;
          v16 = v17;
          if (((*(_QWORD *)(**(_QWORD **)(a3 + 8) + (((unint64_t)v17 >> 3) & 0x1FFFFFF8)) >> v17) & 1) != 0)
          {
            v18 = (uint64_t *)(**(_QWORD **)(*(_QWORD *)(a3 + 16) + 16) + 24 * v15);
            v19 = *v18;
            if (v16 >= (v18[1] - *v18) >> 3)
            {
              v27[0] = 0;
              std::vector<unsigned long>::resize((uint64_t)v18, v16 + 1, v27);
              v19 = *v18;
            }
            ++*(_QWORD *)(v19 + 8 * v16);
          }
          --v13;
        }
        while (v13);
      }
    }
    while (v5 != a2);
  }
}

void sub_2183CD3D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)va);
  _Unwind_Resume(a1);
}

void turi::parallel_for<xgboost_old::io::FMatrixS::MakeColPage(xgboost_old::RowBatch const&,unsigned int const*,std::vector<BOOL> const&,xgboost_old::io::SparsePage *)::{lambda(unsigned long)#2}>(turi::thread_pool *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v5;
  turi::thread_pool *instance;
  turi::thread *v7;
  turi::thread_pool *tls_data;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  _DWORD *v22;
  turi::thread_pool *v23;
  uint64_t v24;
  double v25;
  double v26;
  turi::thread *v27;
  unint64_t v28;
  uint64_t v29[4];
  _BYTE v30[192];
  uint64_t v31;

  v5 = (unint64_t)a1;
  v31 = *MEMORY[0x24BDAC8D0];
  instance = (turi::thread_pool *)turi::thread_pool::get_instance(a1);
  v7 = (turi::thread *)turi::thread_pool::size(instance);
  tls_data = (turi::thread_pool *)turi::thread::get_tls_data(v7);
  if (*((_BYTE *)tls_data + 8))
    v9 = 0;
  else
    v9 = (unint64_t)v7 > 1;
  if (v9)
  {
    v23 = (turi::thread_pool *)turi::thread_pool::get_instance(tls_data);
    turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)v30, v23);
    v24 = 0;
    v25 = (double)(a2 - v5) / (double)(unint64_t)v7;
    v26 = (double)v5;
    do
    {
      v27 = (turi::thread *)(v24 + 1);
      v28 = (unint64_t)(v26 + v25 * (double)(unint64_t)(v24 + 1));
      if ((turi::thread *)v24 == (turi::thread *)((char *)v7 - 1))
        v28 = a2;
      v29[2] = (unint64_t)(v26 + v25 * (double)(unint64_t)v24);
      v29[3] = v28;
      v29[0] = (uint64_t)boost::function0<void>::assign_to<void turi::parallel_for<xgboost_old::io::FMatrixS::MakeColPage(xgboost_old::RowBatch const&,unsigned int const*,std::vector<BOOL> const&,xgboost_old::io::SparsePage *)::{lambda(unsigned long)#2}>(unsigned long,unsigned long,xgboost_old::io::FMatrixS::MakeColPage(xgboost_old::RowBatch const&,unsigned int const*,std::vector<BOOL> const&,xgboost_old::io::SparsePage *)::{lambda(unsigned long)#2} const&)::{lambda(void)#1}>(xgboost_old::io::FMatrixS::MakeColPage(xgboost_old::RowBatch const&,unsigned int const*,std::vector<BOOL> const&,xgboost_old::io::SparsePage *)::{lambda(unsigned long)#2})::stored_vtable
             + 1;
      v29[1] = a3;
      turi::parallel_task_queue::launch((uint64_t)v30, (uint64_t)v29, v24);
      boost::function0<void>::~function0(v29);
      v24 = (uint64_t)v27;
    }
    while (v27 != v7);
    turi::parallel_task_queue::join((turi::parallel_task_queue *)v30);
    turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)v30);
  }
  else if (a2 > v5)
  {
    do
    {
      tls_data = (turi::thread_pool *)turi::thread::get_tls_data(tls_data);
      v10 = *(_QWORD *)(*(_QWORD *)a3 + 16);
      v11 = *(_QWORD *)(v10 + 8 * v5);
      v12 = v5 + 1;
      v13 = *(_QWORD *)(v10 + 8 * (v5 + 1)) - v11;
      if ((_DWORD)v13)
      {
        v14 = **(_QWORD **)(a3 + 16);
        v15 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a3 + 8) + 16) + 24 * *(int *)tls_data);
        v16 = **(_QWORD **)(*(_QWORD *)(a3 + 8) + 8);
        v17 = (int *)(*(_QWORD *)(*(_QWORD *)a3 + 24) + 8 * v11 + 4);
        do
        {
          v18 = *(v17 - 1);
          v19 = *v17;
          v20 = *(_DWORD *)(v14 + 4 * v5);
          v21 = *(_QWORD *)(v15 + 8 * v18);
          tls_data = (turi::thread_pool *)(v21 + 1);
          *(_QWORD *)(v15 + 8 * v18) = v21 + 1;
          v22 = (_DWORD *)(v16 + 8 * v21);
          *v22 = v20;
          v22[1] = v19;
          v17 += 2;
          --v13;
        }
        while (v13);
      }
      ++v5;
    }
    while (v12 != a2);
  }
}

void sub_2183CD5B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)va);
  _Unwind_Resume(a1);
}

void turi::parallel_for<xgboost_old::io::FMatrixS::MakeColPage(xgboost_old::RowBatch const&,unsigned int const*,std::vector<BOOL> const&,xgboost_old::io::SparsePage *)::{lambda(unsigned long)#3}>(turi::thread_pool *a1, unint64_t a2, _QWORD **a3)
{
  unint64_t v5;
  turi::thread_pool *instance;
  turi::thread *v7;
  turi::thread_pool *tls_data;
  BOOL v9;
  _QWORD *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  turi::thread_pool *v16;
  uint64_t v17;
  double v18;
  double v19;
  turi::thread *v20;
  unint64_t v21;
  uint64_t v22[4];
  uint64_t (*v23[25])(uint64_t *, uint64_t *);

  v5 = (unint64_t)a1;
  v23[24] = *(uint64_t (**)(uint64_t *, uint64_t *))MEMORY[0x24BDAC8D0];
  instance = (turi::thread_pool *)turi::thread_pool::get_instance(a1);
  v7 = (turi::thread *)turi::thread_pool::size(instance);
  tls_data = (turi::thread_pool *)turi::thread::get_tls_data(v7);
  if (*((_BYTE *)tls_data + 8))
    v9 = 0;
  else
    v9 = (unint64_t)v7 > 1;
  if (v9)
  {
    v16 = (turi::thread_pool *)turi::thread_pool::get_instance(tls_data);
    turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)v23, v16);
    v17 = 0;
    v18 = (double)(a2 - v5) / (double)(unint64_t)v7;
    v19 = (double)v5;
    do
    {
      v20 = (turi::thread *)(v17 + 1);
      v21 = (unint64_t)(v19 + v18 * (double)(unint64_t)(v17 + 1));
      if ((turi::thread *)v17 == (turi::thread *)((char *)v7 - 1))
        v21 = a2;
      v22[2] = (unint64_t)(v19 + v18 * (double)(unint64_t)v17);
      v22[3] = v21;
      v22[0] = (uint64_t)boost::function0<void>::assign_to<void turi::parallel_for<xgboost_old::io::FMatrixS::MakeColPage(xgboost_old::RowBatch const&,unsigned int const*,std::vector<BOOL> const&,xgboost_old::io::SparsePage *)::{lambda(unsigned long)#3}>(unsigned long,unsigned long,xgboost_old::io::FMatrixS::MakeColPage(xgboost_old::RowBatch const&,unsigned int const*,std::vector<BOOL> const&,xgboost_old::io::SparsePage *)::{lambda(unsigned long)#3} const&)::{lambda(void)#1}>(xgboost_old::io::FMatrixS::MakeColPage(xgboost_old::RowBatch const&,unsigned int const*,std::vector<BOOL> const&,xgboost_old::io::SparsePage *)::{lambda(unsigned long)#3})::stored_vtable
             + 1;
      v22[1] = (uint64_t)a3;
      turi::parallel_task_queue::launch((uint64_t)v23, (uint64_t)v22, v17);
      boost::function0<void>::~function0(v22);
      v17 = (uint64_t)v20;
    }
    while (v20 != v7);
    turi::parallel_task_queue::join((turi::parallel_task_queue *)v23);
    turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)v23);
  }
  else if (a2 > v5)
  {
    do
    {
      v10 = (_QWORD *)**a3;
      v11 = (unint64_t *)(*v10 + 8 * v5);
      v12 = *v11;
      v13 = v11[1];
      if (v12 < v13)
      {
        v15 = v10 + 3;
        v14 = v10[3];
        if (v15[1] == v14)
          v14 = 0;
        v23[0] = (uint64_t (*)(uint64_t *, uint64_t *))xgboost_old::SparseBatch::Entry::CmpValue;
        std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(xgboost_old::SparseBatch::Entry const&,xgboost_old::SparseBatch::Entry const&),xgboost_old::SparseBatch::Entry*,false>(v14 + 8 * v12, (uint64_t *)(v14 + 8 * v13), v23, 126 - 2 * __clz((uint64_t)(8 * v13 - 8 * v12) >> 3), 1);
      }
      ++v5;
    }
    while (a2 != v5);
  }
}

void sub_2183CD784(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)va);
  _Unwind_Resume(a1);
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<xgboost_old::io::FMatrixS::MakeColPage(xgboost_old::RowBatch const&,unsigned int const*,std::vector<BOOL> const&,xgboost_old::io::SparsePage *)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::io::FMatrixS::MakeColPage(xgboost_old::RowBatch const&,unsigned int const*,std::vector<BOOL> const&,xgboost_old::io::SparsePage *)::{lambda(unsigned long)#1} const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v4;
  __int128 v5;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x800000021872A44CLL & 0x7FFFFFFFFFFFFFFFLL)
        || (result = strcmp((const char *)result, (const char *)(0x800000021872A44CLL & 0x7FFFFFFFFFFFFFFFLL)),
            !(_DWORD)result))
      {
        *(_QWORD *)a2 = v4;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
    }
  }
  else
  {
    v5 = *(_OWORD *)result;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

void boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<xgboost_old::io::FMatrixS::MakeColPage(xgboost_old::RowBatch const&,unsigned int const*,std::vector<BOOL> const&,xgboost_old::io::SparsePage *)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::io::FMatrixS::MakeColPage(xgboost_old::RowBatch const&,unsigned int const*,std::vector<BOOL> const&,xgboost_old::io::SparsePage *)::{lambda(unsigned long)#1} const&)::{lambda(void)#1},void>::invoke(uint64_t *tls_data)
{
  unint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  int v9;
  unint64_t v10;
  unsigned int v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;

  v1 = tls_data[1];
  if (v1 < tls_data[2])
  {
    v2 = tls_data;
    do
    {
      v3 = *v2;
      tls_data = (uint64_t *)turi::thread::get_tls_data((turi::thread *)tls_data);
      v4 = *(_QWORD *)(*(_QWORD *)v3 + 16);
      v5 = *(_QWORD *)(v4 + 8 * v1++);
      v6 = *(_QWORD *)(v4 + 8 * v1);
      v7 = (v6 - v5);
      if ((_DWORD)v6 != (_DWORD)v5)
      {
        v8 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)v3 + 24) + 8 * v5);
        v9 = *(_DWORD *)tls_data;
        do
        {
          v11 = *v8;
          v8 += 2;
          v10 = v11;
          if (((*(_QWORD *)(**(_QWORD **)(v3 + 8) + (((unint64_t)v11 >> 3) & 0x1FFFFFF8)) >> v11) & 1) != 0)
          {
            v12 = (uint64_t *)(**(_QWORD **)(*(_QWORD *)(v3 + 16) + 16) + 24 * v9);
            v13 = *v12;
            if (v10 >= (v12[1] - *v12) >> 3)
            {
              v14 = 0;
              std::vector<unsigned long>::resize((uint64_t)v12, v10 + 1, &v14);
              v13 = *v12;
            }
            ++*(_QWORD *)(v13 + 8 * v10);
          }
          --v7;
        }
        while (v7);
      }
    }
    while (v1 < v2[2]);
  }
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<xgboost_old::io::FMatrixS::MakeColPage(xgboost_old::RowBatch const&,unsigned int const*,std::vector<BOOL> const&,xgboost_old::io::SparsePage *)::{lambda(unsigned long)#2}>(unsigned long,unsigned long,xgboost_old::io::FMatrixS::MakeColPage(xgboost_old::RowBatch const&,unsigned int const*,std::vector<BOOL> const&,xgboost_old::io::SparsePage *)::{lambda(unsigned long)#2} const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v4;
  __int128 v5;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x800000021872A4ECLL & 0x7FFFFFFFFFFFFFFFLL)
        || (result = strcmp((const char *)result, (const char *)(0x800000021872A4ECLL & 0x7FFFFFFFFFFFFFFFLL)),
            !(_DWORD)result))
      {
        *(_QWORD *)a2 = v4;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
    }
  }
  else
  {
    v5 = *(_OWORD *)result;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

uint64_t *boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<xgboost_old::io::FMatrixS::MakeColPage(xgboost_old::RowBatch const&,unsigned int const*,std::vector<BOOL> const&,xgboost_old::io::SparsePage *)::{lambda(unsigned long)#2}>(unsigned long,unsigned long,xgboost_old::io::FMatrixS::MakeColPage(xgboost_old::RowBatch const&,unsigned int const*,std::vector<BOOL> const&,xgboost_old::io::SparsePage *)::{lambda(unsigned long)#2} const&)::{lambda(void)#1},void>::invoke(uint64_t *result)
{
  unint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _DWORD *v16;

  v1 = result[1];
  if (v1 < result[2])
  {
    v2 = result;
    do
    {
      v3 = *v2;
      result = (uint64_t *)turi::thread::get_tls_data((turi::thread *)result);
      v4 = *(_QWORD *)(*(_QWORD *)v3 + 16);
      v5 = *(_QWORD *)(v4 + 8 * v1);
      v6 = v1 + 1;
      v7 = *(_QWORD *)(v4 + 8 * (v1 + 1)) - v5;
      if ((_DWORD)v7)
      {
        v8 = **(_QWORD **)(v3 + 16);
        v9 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(v3 + 8) + 16) + 24 * *(int *)result);
        v10 = **(_QWORD **)(*(_QWORD *)(v3 + 8) + 8);
        v11 = (int *)(*(_QWORD *)(*(_QWORD *)v3 + 24) + 8 * v5 + 4);
        do
        {
          v12 = *(_DWORD *)(v8 + 4 * v1);
          v13 = *(v11 - 1);
          v14 = *(_QWORD *)(v9 + 8 * v13);
          *(_QWORD *)(v9 + 8 * v13) = v14 + 1;
          v15 = *v11;
          v11 += 2;
          v16 = (_DWORD *)(v10 + 8 * v14);
          *v16 = v12;
          v16[1] = v15;
          --v7;
        }
        while (v7);
      }
      ++v1;
    }
    while (v6 < v2[2]);
  }
  return result;
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<xgboost_old::io::FMatrixS::MakeColPage(xgboost_old::RowBatch const&,unsigned int const*,std::vector<BOOL> const&,xgboost_old::io::SparsePage *)::{lambda(unsigned long)#3}>(unsigned long,unsigned long,xgboost_old::io::FMatrixS::MakeColPage(xgboost_old::RowBatch const&,unsigned int const*,std::vector<BOOL> const&,xgboost_old::io::SparsePage *)::{lambda(unsigned long)#3} const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v4;
  __int128 v5;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x80000002186FB2EELL & 0x7FFFFFFFFFFFFFFFLL)
        || (result = strcmp((const char *)result, (const char *)(0x80000002186FB2EELL & 0x7FFFFFFFFFFFFFFFLL)),
            !(_DWORD)result))
      {
        *(_QWORD *)a2 = v4;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
    }
  }
  else
  {
    v5 = *(_OWORD *)result;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

uint64_t boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<xgboost_old::io::FMatrixS::MakeColPage(xgboost_old::RowBatch const&,unsigned int const*,std::vector<BOOL> const&,xgboost_old::io::SparsePage *)::{lambda(unsigned long)#3}>(unsigned long,unsigned long,xgboost_old::io::FMatrixS::MakeColPage(xgboost_old::RowBatch const&,unsigned int const*,std::vector<BOOL> const&,xgboost_old::io::SparsePage *)::{lambda(unsigned long)#3} const&)::{lambda(void)#1},void>::invoke(uint64_t result)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  BOOL (*v11)(uint64_t, uint64_t);

  v2 = *(_QWORD *)(result + 8);
  v1 = *(_QWORD *)(result + 16);
  if (v2 < v1)
  {
    v3 = result;
    do
    {
      v4 = ***(_QWORD ****)v3;
      v5 = (unint64_t *)(*v4 + 8 * v2);
      v6 = *v5;
      v7 = v5[1];
      if (v6 < v7)
      {
        v9 = v4 + 3;
        v8 = v4[3];
        if (v9[1] == v8)
          v10 = 0;
        else
          v10 = v8;
        v11 = xgboost_old::SparseBatch::Entry::CmpValue;
        result = std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(xgboost_old::SparseBatch::Entry const&,xgboost_old::SparseBatch::Entry const&),xgboost_old::SparseBatch::Entry*,false>(v10 + 8 * v6, (uint64_t *)(v10 + 8 * v7), (uint64_t (**)(uint64_t *, uint64_t *))&v11, 126 - 2 * __clz((uint64_t)(8 * v7 - 8 * v6) >> 3), 1);
        v1 = *(_QWORD *)(v3 + 16);
      }
      ++v2;
    }
    while (v2 < v1);
  }
  return result;
}

void xgboost_old::utils::Printf(xgboost_old::utils *this, const char *a2, ...)
{
  void *v3;
  va_list va;

  va_start(va, a2);
  v3 = operator new(0x1008uLL);
  bzero(v3, 0x1001uLL);
  vsnprintf((char *)v3, 0x1000uLL, (const char *)this, va);
  printf("%s", (const char *)v3);
  operator delete(v3);
}

uint64_t xgboost_old::utils::SPrintf(xgboost_old::utils *this, char *a2, const char *a3, const char *a4, ...)
{
  va_list va;

  va_start(va, a4);
  return vsnprintf((char *)this, (size_t)a2, a3, va);
}

uint64_t _GLOBAL__sub_I_io_cpp_0()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

uint64_t xgboost_old::tree::CreateUpdater(xgboost_old::tree *this, const char *a2)
{
  const char *v3;
  uint64_t v4;

  if (!strcmp((const char *)this, "prune"))
  {
    v4 = operator new();
    *(_OWORD *)(v4 + 16) = 0u;
    *(_OWORD *)(v4 + 32) = 0u;
    *(_OWORD *)(v4 + 48) = 0u;
    *(_OWORD *)(v4 + 64) = 0u;
    *(_OWORD *)(v4 + 80) = 0u;
    *(_QWORD *)v4 = &unk_24D93E300;
    *(_QWORD *)(v4 + 8) = &unk_24D93E780;
    *(_DWORD *)(v4 + 20) = 1050253722;
    *(_DWORD *)(v4 + 28) = 6;
    __asm { FMOV            V0.2S, #1.0 }
    *(_QWORD *)(v4 + 32) = _D0;
    *(_DWORD *)(v4 + 44) = 0;
    __asm { FMOV            V0.4S, #1.0 }
    *(_OWORD *)(v4 + 52) = _Q0;
    *(_DWORD *)(v4 + 76) = 0;
    *(_QWORD *)(v4 + 68) = 0x400000003DCCCCCDLL;
    *(_DWORD *)(v4 + 84) = 1;
  }
  else if (!strcmp((const char *)this, "refresh"))
  {
    v4 = operator new();
    *(_OWORD *)(v4 + 80) = 0u;
    *(_OWORD *)(v4 + 96) = 0u;
    *(_QWORD *)v4 = &unk_24D93E3C0;
    *(_QWORD *)(v4 + 8) = 1050253722;
    *(_DWORD *)(v4 + 16) = 6;
    __asm { FMOV            V0.2S, #1.0 }
    *(_QWORD *)(v4 + 20) = _D0;
    *(_QWORD *)(v4 + 28) = 0;
    *(_OWORD *)(v4 + 36) = xmmword_2186FD4F0;
    *(_QWORD *)(v4 + 52) = 0x3DCCCCCD3F800000;
    *(_DWORD *)(v4 + 60) = 0x40000000;
    *(_OWORD *)(v4 + 64) = xmmword_2186CF1A0;
    rabit::engine::ReduceHandle::ReduceHandle((_QWORD *)(v4 + 80));
    turi::neural_net::float_scalar::~float_scalar((turi::neural_net::float_scalar *)(v4 + 80));
  }
  else if (!strcmp((const char *)this, "grow_colmaker"))
  {
    v4 = operator new();
    *(_QWORD *)v4 = &unk_24D93E550;
    *(_QWORD *)(v4 + 8) = 1050253722;
    *(_DWORD *)(v4 + 16) = 6;
    __asm { FMOV            V0.2S, #1.0 }
    *(_QWORD *)(v4 + 20) = _D0;
    *(_QWORD *)(v4 + 28) = 0;
    *(_OWORD *)(v4 + 36) = xmmword_2186FD4F0;
    *(_QWORD *)(v4 + 52) = 0x3DCCCCCD3F800000;
    *(_DWORD *)(v4 + 60) = 0x40000000;
    *(_OWORD *)(v4 + 64) = xmmword_2186CF1A0;
  }
  else if (!strcmp((const char *)this, "sync"))
  {
    v4 = operator new();
    *(_QWORD *)v4 = &unk_24D93E780;
  }
  else if (!strcmp((const char *)this, "grow_histmaker"))
  {
    v4 = operator new();
    bzero((void *)v4, 0x228uLL);
    xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::CQHistMaker(v4);
  }
  else if (!strcmp((const char *)this, "grow_skmaker"))
  {
    v4 = operator new();
    *(_OWORD *)v4 = 0u;
    *(_OWORD *)(v4 + 16) = 0u;
    *(_OWORD *)(v4 + 32) = 0u;
    *(_OWORD *)(v4 + 48) = 0u;
    *(_OWORD *)(v4 + 64) = 0u;
    *(_OWORD *)(v4 + 80) = 0u;
    *(_OWORD *)(v4 + 96) = 0u;
    *(_OWORD *)(v4 + 112) = 0u;
    *(_OWORD *)(v4 + 128) = 0u;
    *(_OWORD *)(v4 + 144) = 0u;
    *(_OWORD *)(v4 + 160) = 0u;
    *(_OWORD *)(v4 + 176) = 0u;
    *(_OWORD *)(v4 + 192) = 0u;
    *(_OWORD *)(v4 + 208) = 0u;
    *(_OWORD *)(v4 + 224) = 0u;
    *(_OWORD *)(v4 + 240) = 0u;
    *(_OWORD *)(v4 + 256) = 0u;
    *(_OWORD *)(v4 + 272) = 0u;
    *(_OWORD *)(v4 + 288) = 0u;
    *(_OWORD *)(v4 + 304) = 0u;
    *(_OWORD *)(v4 + 320) = 0u;
    *(_OWORD *)(v4 + 336) = 0u;
    *(_QWORD *)(v4 + 352) = 0;
    xgboost_old::tree::SketchMaker::SketchMaker((xgboost_old::tree::SketchMaker *)v4);
  }
  else
  {
    if (strcmp((const char *)this, "distcol"))
      xgboost_old::utils::Error((xgboost_old::utils *)"unknown updater:%s", v3, this);
    v4 = operator new();
    xgboost_old::tree::DistColMaker<xgboost_old::tree::GradStats>::DistColMaker(v4);
  }
  return v4;
}

void sub_2183CE0EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10F1C40AB30E009);
  _Unwind_Resume(a1);
}

uint64_t xgboost_old::tree::TreePruner::SetParam(xgboost_old::tree::TreePruner *this, const char *a2, const char *a3)
{
  uint64_t result;

  xgboost_old::tree::TrainParam::SetParam((xgboost_old::tree::TreePruner *)((char *)this + 20), a2, a3);
  result = strcmp(a2, "silent");
  if (!(_DWORD)result)
  {
    result = atoi(a3);
    *((_DWORD *)this + 4) = result;
  }
  return result;
}

void xgboost_old::tree::TreePruner::Update(uint64_t a1, uint64_t a2, const char *a3, uint64_t a4, uint64_t *a5)
{
  float v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v7 = *(float *)(a1 + 20);
  v8 = *a5;
  v9 = a5[1] - *a5;
  *(float *)(a1 + 20) = v7 / (float)(unint64_t)(v9 >> 3);
  if (v9)
  {
    v10 = 0;
    do
    {
      xgboost_old::tree::TreePruner::DoPrune(a1, *(_QWORD *)(v8 + 8 * v10++), a3);
      v8 = *a5;
    }
    while (v10 < (a5[1] - *a5) >> 3);
  }
  *(float *)(a1 + 20) = v7;
  xgboost_old::tree::TreeSyncher::SyncTrees((rabit::engine *)(a1 + 8), a5);
}

void xgboost_old::tree::TreePruner::~TreePruner(xgboost_old::tree::TreePruner *this)
{
  JUMPOUT(0x219A19A08);
}

uint64_t xgboost_old::tree::TrainParam::SetParam(xgboost_old::tree::TrainParam *this, const char *__s1, const char *a3)
{
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  uint64_t result;

  if (!strcmp(__s1, "gamma"))
  {
    v6 = atof(a3);
    *((float *)this + 1) = v6;
  }
  if (!strcmp(__s1, "eta"))
  {
    v7 = atof(a3);
    *(float *)this = v7;
  }
  if (!strcmp(__s1, "lambda"))
  {
    v8 = atof(a3);
    *((float *)this + 4) = v8;
  }
  if (!strcmp(__s1, "alpha"))
  {
    v9 = atof(a3);
    *((float *)this + 5) = v9;
  }
  if (!strcmp(__s1, "learning_rate"))
  {
    v10 = atof(a3);
    *(float *)this = v10;
  }
  if (!strcmp(__s1, "min_child_weight"))
  {
    v11 = atof(a3);
    *((float *)this + 3) = v11;
  }
  if (!strcmp(__s1, "min_split_loss"))
  {
    v12 = atof(a3);
    *((float *)this + 1) = v12;
  }
  if (!strcmp(__s1, "max_delta_step"))
  {
    v13 = atof(a3);
    *((float *)this + 7) = v13;
  }
  if (!strcmp(__s1, "reg_lambda"))
  {
    v14 = atof(a3);
    *((float *)this + 4) = v14;
  }
  if (!strcmp(__s1, "reg_alpha"))
  {
    v15 = atof(a3);
    *((float *)this + 5) = v15;
  }
  if (!strcmp(__s1, "subsample"))
  {
    v16 = atof(a3);
    *((float *)this + 8) = v16;
  }
  if (!strcmp(__s1, "colsample_bylevel"))
  {
    v17 = atof(a3);
    *((float *)this + 9) = v17;
  }
  if (!strcmp(__s1, "colsample_bytree"))
  {
    v18 = atof(a3);
    *((float *)this + 10) = v18;
  }
  if (!strcmp(__s1, "sketch_eps"))
  {
    v19 = atof(a3);
    *((float *)this + 12) = v19;
  }
  if (!strcmp(__s1, "sketch_ratio"))
  {
    v20 = atof(a3);
    *((float *)this + 13) = v20;
  }
  if (!strcmp(__s1, "opt_dense_col"))
  {
    v21 = atof(a3);
    *((float *)this + 11) = v21;
  }
  if (!strcmp(__s1, "size_leaf_vector"))
    *((_DWORD *)this + 14) = atoi(a3);
  if (!strcmp(__s1, "cache_opt"))
    *((_DWORD *)this + 16) = atoi(a3);
  if (!strcmp(__s1, "max_depth"))
    *((_DWORD *)this + 2) = atoi(a3);
  if (!strcmp(__s1, "nthread"))
    *((_DWORD *)this + 17) = atoi(a3);
  if (!strcmp(__s1, "parallel_option"))
    *((_DWORD *)this + 15) = atoi(a3);
  result = strcmp(__s1, "default_direction");
  if (!(_DWORD)result)
  {
    if (!strcmp(a3, "learn"))
      *((_DWORD *)this + 6) = 0;
    if (!strcmp(a3, "left"))
      *((_DWORD *)this + 6) = 1;
    result = strcmp(a3, "right");
    if (!(_DWORD)result)
      *((_DWORD *)this + 6) = 2;
  }
  return result;
}

void xgboost_old::tree::TreePruner::DoPrune(uint64_t a1, uint64_t a2, const char *a3)
{
  int v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;

  v5 = *(_DWORD *)(a2 + 100);
  if (v5 < 1)
  {
    v9 = 0;
  }
  else
  {
    v6 = (_DWORD *)(*(_QWORD *)(a2 + 48) + 12);
    v7 = *(unsigned int *)(a2 + 100);
    do
    {
      *v6 = 0;
      v6 += 4;
      --v7;
    }
    while (v7);
    v8 = 0;
    v9 = 0;
    v10 = *(_QWORD *)a2;
    do
    {
      if (*(_DWORD *)(v10 + 20 * v8 + 4) == -1)
      {
        v11 = *(_DWORD *)(v10 + 20 * v8);
        if (v11 != -1)
        {
          v12 = v11 & 0x7FFFFFFF;
          v13 = *(_QWORD *)(a2 + 48);
          v14 = v13 + 16 * v12;
          v15 = *(_DWORD *)(v14 + 12);
          *(_DWORD *)(v14 + 12) = v15 + 1;
          if (v15 >= 1)
          {
            while (1)
            {
              v16 = v9;
              if (*(float *)(a1 + 24) <= *(float *)(v13 + 16 * v12))
                break;
              xgboost_old::tree::TreeModel<float,xgboost_old::tree::RTreeNodeStat>::ChangeToLeaf((uint64_t *)a2, v12, a3, *(float *)(a1 + 20) * *(float *)(v13 + 16 * v12 + 8));
              v10 = *(_QWORD *)a2;
              v17 = *(_DWORD *)(*(_QWORD *)a2 + 20 * v12);
              if (v17 != -1)
              {
                v12 = v17 & 0x7FFFFFFF;
                v13 = *(_QWORD *)(a2 + 48);
                v18 = v13 + 16 * v12;
                v19 = *(_DWORD *)(v18 + 12);
                *(_DWORD *)(v18 + 12) = v19 + 1;
                v9 = (v9 + 2);
                if (v19 >= 1)
                  continue;
              }
              v9 = (v16 + 2);
              break;
            }
          }
          v5 = *(_DWORD *)(a2 + 100);
        }
      }
      ++v8;
    }
    while (v8 < v5);
  }
  if (!*(_DWORD *)(a1 + 16))
  {
    v20 = *(unsigned int *)(a2 + 96);
    v21 = (v5 - (v20 + *(_DWORD *)(a2 + 104)));
    if ((int)v20 < 1)
    {
      v23 = 0;
    }
    else
    {
      v22 = 0;
      LODWORD(v23) = 0;
      do
      {
        v24 = xgboost_old::tree::TreeModel<float,xgboost_old::tree::RTreeNodeStat>::MaxDepth((_QWORD *)a2, v22);
        if ((int)v23 <= v24)
          v23 = v24;
        else
          v23 = v23;
        ++v22;
      }
      while (v22 < *(_DWORD *)(a2 + 96));
    }
    xgboost_old::utils::Printf((xgboost_old::utils *)"tree prunning end, %d roots, %d extra nodes, %d pruned nodes ,max_depth=%d\n", (const char *)a2, v20, v21, v9, v23);
  }
}

void xgboost_old::tree::TreeSyncher::Update(rabit::engine *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  xgboost_old::tree::TreeSyncher::SyncTrees(a1, a5);
}

double xgboost_old::tree::TreeModel<float,xgboost_old::tree::RTreeNodeStat>::ChangeToLeaf(uint64_t *a1, int a2, const char *a3, float a4)
{
  uint64_t v7;
  const char *v8;
  int v9;
  const char *v10;
  const char *v11;
  unint64_t v12;
  void **v13;
  char *v14;
  _DWORD *v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  int v24;
  uint64_t v25;
  int v26;
  unint64_t v27;
  char *v28;
  _DWORD *v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  double result;

  v7 = 5 * a2;
  xgboost_old::utils::Assert(*(_DWORD *)(*a1 + 20 * *(int *)(*a1 + 20 * a2 + 4) + 4) == -1, "can not delete a non terminal child", a3);
  xgboost_old::utils::Assert(*(_DWORD *)(*a1 + 20 * *(int *)(*a1 + 4 * v7 + 8) + 4) == -1, "can not delete a non terminal child", v8);
  v9 = *(_DWORD *)(*a1 + 4 * v7 + 4);
  xgboost_old::utils::Assert(*((_DWORD *)a1 + 24) <= v9, "can not delete root", v10);
  v12 = a1[5];
  v13 = (void **)(a1 + 3);
  v14 = (char *)a1[4];
  if ((unint64_t)v14 >= v12)
  {
    v16 = (char *)*v13;
    v17 = (v14 - (_BYTE *)*v13) >> 2;
    v18 = v17 + 1;
    if ((unint64_t)(v17 + 1) >> 62)
      goto LABEL_34;
    v19 = v12 - (_QWORD)v16;
    if (v19 >> 1 > v18)
      v18 = v19 >> 1;
    if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL)
      v20 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v20 = v18;
    if (v20)
    {
      v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)(a1 + 5), v20);
      v16 = (char *)a1[3];
      v14 = (char *)a1[4];
    }
    else
    {
      v21 = 0;
    }
    v22 = &v21[4 * v17];
    v23 = &v21[4 * v20];
    *(_DWORD *)v22 = v9;
    v15 = v22 + 4;
    while (v14 != v16)
    {
      v24 = *((_DWORD *)v14 - 1);
      v14 -= 4;
      *((_DWORD *)v22 - 1) = v24;
      v22 -= 4;
    }
    a1[3] = (uint64_t)v22;
    a1[4] = (uint64_t)v15;
    a1[5] = (uint64_t)v23;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *(_DWORD *)v14 = v9;
    v15 = v14 + 4;
  }
  a1[4] = (uint64_t)v15;
  v25 = *a1;
  *(_DWORD *)(*a1 + 20 * v9 + 12) = -1;
  ++*((_DWORD *)a1 + 26);
  v26 = *(_DWORD *)(v25 + 20 * a2 + 8);
  xgboost_old::utils::Assert(*((_DWORD *)a1 + 24) <= v26, "can not delete root", v11);
  v28 = (char *)a1[4];
  v27 = a1[5];
  if ((unint64_t)v28 < v27)
  {
    *(_DWORD *)v28 = v26;
    v29 = v28 + 4;
    goto LABEL_33;
  }
  v30 = (char *)*v13;
  v31 = (v28 - (_BYTE *)*v13) >> 2;
  v32 = v31 + 1;
  if ((unint64_t)(v31 + 1) >> 62)
LABEL_34:
    std::vector<float>::__throw_length_error[abi:ne180100]();
  v33 = v27 - (_QWORD)v30;
  if (v33 >> 1 > v32)
    v32 = v33 >> 1;
  if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFFCLL)
    v34 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v34 = v32;
  if (v34)
  {
    v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)(a1 + 5), v34);
    v30 = (char *)a1[3];
    v28 = (char *)a1[4];
  }
  else
  {
    v35 = 0;
  }
  v36 = &v35[4 * v31];
  v37 = &v35[4 * v34];
  *(_DWORD *)v36 = v26;
  v29 = v36 + 4;
  while (v28 != v30)
  {
    v38 = *((_DWORD *)v28 - 1);
    v28 -= 4;
    *((_DWORD *)v36 - 1) = v38;
    v36 -= 4;
  }
  a1[3] = (uint64_t)v36;
  a1[4] = (uint64_t)v29;
  a1[5] = (uint64_t)v37;
  if (v30)
    operator delete(v30);
LABEL_33:
  a1[4] = (uint64_t)v29;
  v39 = *a1;
  *(_DWORD *)(*a1 + 20 * v26 + 12) = -1;
  ++*((_DWORD *)a1 + 26);
  v40 = v39 + 20 * a2;
  *(float *)(v40 + 16) = a4;
  result = NAN;
  *(_QWORD *)(v40 + 4) = -1;
  return result;
}

uint64_t xgboost_old::tree::TreeModel<float,xgboost_old::tree::RTreeNodeStat>::MaxDepth(_QWORD *a1, int a2)
{
  unsigned int v4;
  int v5;

  if (*(_DWORD *)(*a1 + 20 * a2 + 4) == -1)
    return 0;
  v4 = ((uint64_t (*)(void))xgboost_old::tree::TreeModel<float,xgboost_old::tree::RTreeNodeStat>::MaxDepth)() + 1;
  v5 = xgboost_old::tree::TreeModel<float,xgboost_old::tree::RTreeNodeStat>::MaxDepth(a1, *(unsigned int *)(*a1 + 20 * a2 + 8));
  if ((int)v4 <= v5 + 1)
    return (v5 + 1);
  else
    return v4;
}

void xgboost_old::tree::TreeSyncher::SyncTrees(rabit::engine *a1, uint64_t *a2)
{
  uint64_t *Engine;
  rabit::engine *v4;
  uint64_t *v5;
  rabit::engine *v6;
  const char *v7;
  uint64_t v8;
  unint64_t v9;
  std::string::size_type size;
  uint64_t *v11;
  rabit::engine *v12;
  std::string::size_type v13;
  int v14;
  std::string::size_type v15;
  uint64_t *v16;
  std::string *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t (**v20[2])(_QWORD, uint64_t, uint64_t);
  uint64_t v21;
  std::string v22;
  std::string::size_type v23;

  Engine = rabit::engine::GetEngine(a1);
  v4 = (rabit::engine *)(*(uint64_t (**)(uint64_t *))(*Engine + 64))(Engine);
  if ((_DWORD)v4 != 1)
  {
    memset(&v22, 0, sizeof(v22));
    v20[0] = (uint64_t (**)(_QWORD, uint64_t, uint64_t))&unk_24D93E360;
    v20[1] = (uint64_t (**)(_QWORD, uint64_t, uint64_t))&v22;
    v21 = 0;
    v5 = rabit::engine::GetEngine(v4);
    v6 = (rabit::engine *)(*(uint64_t (**)(uint64_t *))(*v5 + 56))(v5);
    if (!(_DWORD)v6)
    {
      v8 = *a2;
      if (a2[1] != *a2)
      {
        v9 = 0;
        do
        {
          v6 = (rabit::engine *)xgboost_old::tree::TreeModel<float,xgboost_old::tree::RTreeNodeStat>::SaveModel(*(uint64_t **)(v8 + 8 * v9++), (uint64_t)v20, v7);
          v8 = *a2;
        }
        while (v9 < (a2[1] - *a2) >> 3);
      }
    }
    v21 = 0;
    size = HIBYTE(v22.__r_.__value_.__r.__words[2]);
    if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = v22.__r_.__value_.__l.__size_;
    v23 = size;
    v11 = rabit::engine::GetEngine(v6);
    v12 = (rabit::engine *)(*(uint64_t (**)(uint64_t *, std::string::size_type *, uint64_t, _QWORD))(*v11 + 8))(v11, &v23, 8, 0);
    if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v13 = HIBYTE(v22.__r_.__value_.__r.__words[2]);
    else
      v13 = v22.__r_.__value_.__l.__size_;
    if (v13 != v23)
    {
      std::string::resize(&v22, v23, 0);
      v13 = v23;
    }
    if (v13)
    {
      v14 = SHIBYTE(v22.__r_.__value_.__r.__words[2]);
      v15 = v22.__r_.__value_.__r.__words[0];
      v16 = rabit::engine::GetEngine(v12);
      if (v14 >= 0)
        v17 = &v22;
      else
        v17 = (std::string *)v15;
      (*(void (**)(uint64_t *, std::string *, std::string::size_type, _QWORD))(*v16 + 8))(v16, v17, v13, 0);
    }
    v18 = *a2;
    if (a2[1] != *a2)
    {
      v19 = 0;
      do
      {
        xgboost_old::tree::TreeModel<float,xgboost_old::tree::RTreeNodeStat>::LoadModel(*(_QWORD *)(v18 + 8 * v19++), v20);
        v18 = *a2;
      }
      while (v19 < (a2[1] - *a2) >> 3);
    }
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v22.__r_.__value_.__l.__data_);
  }
}

void sub_2183CEC08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t rabit::utils::MemoryBufferStream::Seek(uint64_t this, uint64_t a2)
{
  *(_QWORD *)(this + 16) = a2;
  return this;
}

size_t rabit::utils::MemoryBufferStream::Read(rabit::utils::MemoryBufferStream *this, void *a2, const char *a3)
{
  size_t v3;
  uint64_t v6;
  unint64_t v7;
  uint64_t **v8;
  uint64_t v9;

  v3 = (size_t)a3;
  v6 = *((_QWORD *)this + 1);
  if (*(char *)(v6 + 23) < 0)
    v7 = *(_QWORD *)(v6 + 8);
  else
    v7 = *(unsigned __int8 *)(v6 + 23);
  xgboost_old::utils::Assert(*((_QWORD *)this + 2) <= v7, "read can not have position excceed buffer length", a3);
  v8 = (uint64_t **)*((_QWORD *)this + 1);
  if ((*((char *)v8 + 23) & 0x80000000) == 0)
  {
    v9 = *((_QWORD *)this + 2);
    if ((unint64_t)*((unsigned __int8 *)v8 + 23) - v9 < v3)
      v3 = *((unsigned __int8 *)v8 + 23) - v9;
    if (!v3)
      goto LABEL_14;
LABEL_13:
    memcpy(a2, (char *)v8 + v9, v3);
    v9 = *((_QWORD *)this + 2);
    goto LABEL_14;
  }
  v9 = *((_QWORD *)this + 2);
  if ((unint64_t)v8[1] - v9 < v3)
    v3 = (size_t)v8[1] - v9;
  if (v3)
  {
    v8 = (uint64_t **)*v8;
    goto LABEL_13;
  }
LABEL_14:
  *((_QWORD *)this + 2) = v9 + v3;
  return v3;
}

char *rabit::utils::MemoryBufferStream::Write(char *this, const void *__src, size_t __n)
{
  _QWORD *v5;
  std::string *v6;
  char *v7;
  std::string::size_type v8;
  int v9;
  std::string::size_type size;

  if (__n)
  {
    v5 = this;
    v7 = this + 8;
    v6 = (std::string *)*((_QWORD *)this + 1);
    v8 = *((_QWORD *)v7 + 1) + __n;
    v9 = SHIBYTE(v6->__r_.__value_.__r.__words[2]);
    if (v9 < 0)
      size = v6->__r_.__value_.__l.__size_;
    else
      size = HIBYTE(v6->__r_.__value_.__r.__words[2]);
    if (v8 > size)
    {
      std::string::resize(v6, v8, 0);
      v6 = (std::string *)v5[1];
      LOBYTE(v9) = *((_BYTE *)&v6->__r_.__value_.__s + 23);
    }
    if ((v9 & 0x80) != 0)
      v6 = (std::string *)v6->__r_.__value_.__r.__words[0];
    this = (char *)memcpy((char *)v6 + v5[2], __src, __n);
    v5[2] += __n;
  }
  return this;
}

BOOL rabit::utils::MemoryBufferStream::AtEnd(rabit::utils::MemoryBufferStream *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 1);
  if (*(char *)(v1 + 23) < 0)
    v2 = *(_QWORD *)(v1 + 8);
  else
    v2 = *(unsigned __int8 *)(v1 + 23);
  return *((_QWORD *)this + 2) == v2;
}

uint64_t xgboost_old::tree::TreeRefresher<xgboost_old::tree::GradStats>::SetParam(uint64_t a1, const char *a2, const char *a3)
{
  return xgboost_old::tree::TrainParam::SetParam((xgboost_old::tree::TrainParam *)(a1 + 8), a2, a3);
}

void xgboost_old::tree::TreeRefresher<xgboost_old::tree::GradStats>::Update(float *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  void **v9;
  void **p_p;
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  _QWORD *v14;
  void *v15;
  _QWORD *v16;
  uint64_t v17;
  float v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  unint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31[3];
  uint64_t v32;
  _BYTE v33[24];
  _BYTE *v34;
  void *__p;
  void *v36;
  uint64_t v37;
  void **v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v32 = a3;
  if (a5[1] == *a5)
    return;
  memset(v31, 0, sizeof(v31));
  v28 = 0;
  v29 = 0;
  v30 = 0;
  v27 = turi::thread::cpu_count((turi::thread *)a1);
  __p = 0;
  v36 = 0;
  v37 = 0;
  std::vector<xgboost_old::tree::RegTree::FVec>::resize((uint64_t *)((char *)&v27 + 4), (int)v27, (uint64_t)&__p);
  if (__p)
  {
    v36 = __p;
    operator delete(__p);
  }
  __p = 0;
  v36 = 0;
  v37 = 0;
  std::vector<std::vector<xgboost_old::tree::GradStats>>::resize(v31, (int)v27, (uint64_t)&__p);
  if (__p)
  {
    v36 = __p;
    operator delete(__p);
  }
  v9 = (void **)operator new(0x28uLL);
  *v9 = &unk_24D93E410;
  v9[1] = a5;
  v9[2] = v31;
  v9[3] = a1;
  v9[4] = (char *)&v27 + 4;
  v38 = v9;
  turi::in_parallel((turi::thread_pool *)&__p);
  p_p = v38;
  if (v38 == &__p)
  {
    v11 = 4;
    p_p = &__p;
  }
  else
  {
    if (!v38)
      goto LABEL_11;
    v11 = 5;
  }
  (*((void (**)(void))*p_p + v11))();
LABEL_11:
  v12 = *(_BYTE **)v31[0];
  v13 = *(_BYTE **)(v31[0] + 8);
  v34 = 0;
  v14 = operator new(0x40uLL);
  *v14 = &unk_24D93E490;
  v14[1] = &v32;
  if (v13 == v12)
    v15 = 0;
  else
    v15 = v12;
  v14[2] = (char *)&v27 + 4;
  v14[3] = a5;
  v14[4] = a2;
  v14[5] = a4;
  v14[6] = v31;
  v14[7] = &v27;
  v34 = v14;
  rabit::engine::ReduceHandle::Allreduce((rabit::engine::ReduceHandle *)(a1 + 20), v15, 0x10uLL, (v13 - v12) >> 4, (uint64_t (*)(void *, void *))rabit::InvokeLambda_, v33);
  v16 = v34;
  if (v34 == v33)
  {
    v17 = 4;
    v16 = v33;
    goto LABEL_18;
  }
  if (v34)
  {
    v17 = 5;
LABEL_18:
    (*(void (**)(void))(*v16 + 8 * v17))();
  }
  v18 = a1[2];
  v19 = *a5;
  v20 = a5[1];
  v21 = v20 == *a5;
  a1[2] = v18 / (float)(unint64_t)((v20 - *a5) >> 3);
  if (!v21)
  {
    v22 = 0;
    v23 = 0;
    do
    {
      v24 = *(_QWORD *)(v19 + 8 * v22);
      if (*(int *)(v24 + 96) >= 1)
      {
        v25 = 0;
        do
        {
          v26 = *(_QWORD *)v31[0];
          if (*(_QWORD *)(v31[0] + 8) == *(_QWORD *)v31[0])
            v26 = 0;
          xgboost_old::tree::TreeRefresher<xgboost_old::tree::GradStats>::Refresh(a1, v26 + 16 * v23, v25++, (uint64_t *)v24);
          v19 = *a5;
          v24 = *(_QWORD *)(*a5 + 8 * v22);
        }
        while (v25 < *(_DWORD *)(v24 + 96));
        v20 = a5[1];
      }
      v23 += *(_DWORD *)(v24 + 100);
      ++v22;
    }
    while (v22 < (v20 - v19) >> 3);
  }
  a1[2] = v18;
  __p = (char *)&v27 + 4;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p = v31;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
}

void sub_2183CF04C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char *a21,char *__p,uint64_t a23,uint64_t a24,uint64_t a25)
{
  char *v25;
  char *v27;
  uint64_t v28;

  v27 = a21;
  if (a21 == v25)
  {
    v28 = 4;
    v27 = &a18;
  }
  else
  {
    if (!a21)
      goto LABEL_6;
    v28 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v27 + 8 * v28))();
LABEL_6:
  __p = &a11;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p = &a14;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

_QWORD *xgboost_old::tree::TreeRefresher<xgboost_old::tree::GradStats>::~TreeRefresher(_QWORD *a1)
{
  *a1 = &unk_24D93E3C0;
  turi::neural_net::float_scalar::~float_scalar((turi::neural_net::float_scalar *)(a1 + 10));
  return a1;
}

void xgboost_old::tree::TreeRefresher<xgboost_old::tree::GradStats>::~TreeRefresher(_QWORD *a1)
{
  *a1 = &unk_24D93E3C0;
  turi::neural_net::float_scalar::~float_scalar((turi::neural_net::float_scalar *)(a1 + 10));
  JUMPOUT(0x219A19A08);
}

float64x2_t rabit::ReducerSafe_<xgboost_old::tree::GradStats,&xgboost_old::tree::GradStats::Reduce>(float64x2_t *a1, float64x2_t *a2, int a3)
{
  uint64_t v3;
  float64x2_t v4;
  float64x2_t result;

  if (a3 >= 1)
  {
    v3 = a3;
    do
    {
      v4 = *a1++;
      result = vaddq_f64(*a2, v4);
      *a2++ = result;
      --v3;
    }
    while (v3);
  }
  return result;
}

void std::vector<std::vector<xgboost_old::tree::GradStats>>::resize(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;

  v4 = a1[1];
  v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  v6 = a2 >= v5;
  v7 = a2 - v5;
  if (v7 != 0 && v6)
  {
    std::vector<std::vector<xgboost_old::tree::GradStats>>::__append(a1, v7, a3);
  }
  else if (!v6)
  {
    v8 = *a1 + 24 * a2;
    if (v4 != v8)
    {
      v9 = a1[1];
      do
      {
        v11 = *(void **)(v9 - 24);
        v9 -= 24;
        v10 = v11;
        if (v11)
        {
          *(_QWORD *)(v4 - 16) = v10;
          operator delete(v10);
        }
        v4 = v9;
      }
      while (v9 != v8);
    }
    a1[1] = v8;
  }
}

double xgboost_old::tree::TreeRefresher<xgboost_old::tree::GradStats>::Refresh(float *a1, uint64_t a2, int a3, uint64_t *a4)
{
  double *v7;
  double v8;
  double v9;
  double v10;
  double v11;
  float v12;
  double v13;
  double v14;
  BOOL v15;
  double v16;
  float v17;
  double v18;
  int v19;
  float v20;
  float *v21;
  float v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  double *v28;
  double v29;
  double v30;
  double v31;
  double v32;
  float v33;
  float v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double *v45;
  double v46;
  double v47;
  float v48;
  float v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  float v61;
  float v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  float v72;
  double result;

  while (1)
  {
    v7 = (double *)(a2 + 16 * a3);
    v8 = *v7;
    v9 = v7[1];
    v10 = a1[5];
    v11 = 0.0;
    if (v9 >= v10)
    {
      v12 = a1[7];
      v13 = *v7;
      if (v12 != 0.0)
      {
        v14 = v12;
        v15 = v8 < -v12;
        v16 = v8 + v12;
        if (!v15)
          v16 = 0.0;
        if (v8 > v14)
          v13 = v8 - v14;
        else
          v13 = v16;
      }
      v11 = -v13 / (v9 + a1[6]);
      v17 = a1[9];
      if (v17 != 0.0)
      {
        if (v11 > v17)
          v11 = v17;
        v18 = (float)-v17;
        if (v11 < v18)
          v11 = v18;
      }
    }
    v19 = a3;
    v20 = v11;
    v21 = (float *)(a4[6] + 16 * a3);
    v22 = v9;
    v21[1] = v22;
    v21[2] = v20;
    v23 = *a4;
    v24 = *a4 + 20 * a3;
    v27 = *(int *)(v24 + 4);
    v26 = (_QWORD *)(v24 + 4);
    v25 = v27;
    if ((_DWORD)v27 == -1)
      break;
    v28 = (double *)(a2 + 16 * v25);
    v29 = v28[1];
    v30 = 0.0;
    v31 = 0.0;
    if (v29 >= v10)
    {
      v32 = *v28;
      v33 = a1[9];
      v34 = a1[7];
      if (v33 == 0.0)
      {
        if (v34 == 0.0)
        {
          v35 = v32 * v32;
        }
        else
        {
          v43 = v34;
          if (v32 <= v43)
          {
            v44 = 0.0;
            if (v32 < -v43)
              v44 = v32 + v43;
          }
          else
          {
            v44 = v32 - v43;
          }
          v35 = v44 * v44;
        }
        v31 = v35 / (v29 + a1[6]);
      }
      else
      {
        v36 = v34;
        v37 = v32 + v34;
        if (v32 >= -v34)
          v37 = 0.0;
        if (v32 > v36)
          v37 = v32 - v36;
        if (v34 == 0.0)
          v37 = *v28;
        v38 = v29 + a1[6];
        v39 = -v37 / v38;
        if (v39 > v33)
          v39 = v33;
        v40 = (float)-v33;
        if (v39 >= v40)
          v40 = v39;
        v41 = v38 * 0.5 * (v40 * v40) + v32 * v40;
        v42 = v41 + v36 * fabs(v40);
        if (v34 != 0.0)
          v41 = v42;
        v31 = v41 * -2.0;
      }
    }
    v45 = (double *)(a2 + 16 * *(int *)(v23 + 20 * v19 + 8));
    v46 = v45[1];
    if (v46 >= v10)
    {
      v47 = *v45;
      v48 = a1[9];
      v49 = a1[7];
      if (v48 == 0.0)
      {
        if (v49 == 0.0)
        {
          v50 = v47 * v47;
        }
        else
        {
          v58 = v49;
          if (v47 <= v58)
          {
            v59 = 0.0;
            if (v47 < -v58)
              v59 = v47 + v58;
          }
          else
          {
            v59 = v47 - v58;
          }
          v50 = v59 * v59;
        }
        v30 = v50 / (v46 + a1[6]);
      }
      else
      {
        v51 = v49;
        v52 = v47 + v49;
        if (v47 >= -v49)
          v52 = 0.0;
        if (v47 > v51)
          v52 = v47 - v51;
        if (v49 == 0.0)
          v52 = *v45;
        v53 = v46 + a1[6];
        v54 = -v52 / v53;
        if (v54 > v48)
          v54 = v48;
        v55 = (float)-v48;
        if (v54 >= v55)
          v55 = v54;
        v56 = v53 * 0.5 * (v55 * v55) + v47 * v55;
        v57 = v56 + v51 * fabs(v55);
        if (v49 != 0.0)
          v56 = v57;
        v30 = v56 * -2.0;
      }
    }
    v60 = 0.0;
    if (v9 >= v10)
    {
      v61 = a1[9];
      v62 = a1[7];
      if (v61 == 0.0)
      {
        if (v62 == 0.0)
        {
          v63 = v8 * v8;
        }
        else
        {
          v71 = v62;
          if (v8 <= v71)
          {
            if (v8 < -v71)
              v60 = v8 + v71;
          }
          else
          {
            v60 = v8 - v71;
          }
          v63 = v60 * v60;
        }
        v60 = v63 / (v9 + a1[6]);
      }
      else
      {
        v64 = v62;
        v65 = v8;
        if (v62 != 0.0)
        {
          v65 = v8 + v64;
          if (v8 >= -v64)
            v65 = 0.0;
          if (v8 > v64)
            v65 = v8 - v64;
        }
        v66 = v9 + a1[6];
        v67 = -v65 / v66;
        if (v67 > v61)
          v67 = v61;
        v68 = (float)-v61;
        if (v67 >= v68)
          v68 = v67;
        v69 = v66 * 0.5 * (v68 * v68) + v8 * v68;
        v70 = v69 + v64 * fabs(v68);
        if (v62 != 0.0)
          v69 = v70;
        v60 = v69 * -2.0;
      }
    }
    v72 = v31 + v30 - v60;
    *v21 = v72;
    xgboost_old::tree::TreeRefresher<xgboost_old::tree::GradStats>::Refresh(a1, a2);
    a3 = *(_DWORD *)(*a4 + 20 * v19 + 8);
  }
  *(float *)(v23 + 20 * v19 + 16) = a1[2] * v20;
  result = NAN;
  *v26 = -1;
  return result;
}

_QWORD *std::vector<std::vector<xgboost_old::tree::GradStats>>::__append(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  _QWORD *result;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  _QWORD *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  _QWORD *v21;

  v8 = a1[2];
  result = a1 + 2;
  v7 = v8;
  v9 = (_QWORD *)*(result - 1);
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - (uint64_t)v9) >> 3) >= a2)
  {
    if (a2)
    {
      v15 = &v9[3 * a2];
      v16 = 24 * a2;
      do
      {
        *v9 = 0;
        v9[1] = 0;
        v9[2] = 0;
        result = std::vector<xgboost_old::tree::GradStats>::__init_with_size[abi:ne180100]<xgboost_old::tree::GradStats*,xgboost_old::tree::GradStats*>(v9, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 4);
        v9 += 3;
        v16 -= 24;
      }
      while (v16);
      v9 = v15;
    }
    a1[1] = (uint64_t)v9;
  }
  else
  {
    v10 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v9 - *a1) >> 3);
    v11 = v10 + a2;
    if (v10 + a2 > 0xAAAAAAAAAAAAAAALL)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v12 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    if (2 * v12 > v11)
      v11 = 2 * v12;
    if (v12 >= 0x555555555555555)
      v13 = 0xAAAAAAAAAAAAAAALL;
    else
      v13 = v11;
    v21 = result;
    if (v13)
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>((uint64_t)result, v13);
    else
      v14 = 0;
    v17 = v14;
    v18 = &v14[24 * v10];
    v19 = v18;
    v20 = &v14[24 * v13];
    std::__split_buffer<std::vector<xgboost_old::tree::GradStats>>::__construct_at_end(&v17, a2, a3);
    std::vector<std::vector<xgboost_old::tree::GradStats>>::__swap_out_circular_buffer(a1, &v17);
    return (_QWORD *)std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)&v17);
  }
  return result;
}

void sub_2183CF7A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::__split_buffer<std::vector<xgboost_old::tree::GradStats>>::__construct_at_end(_QWORD *result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v6;
  uint64_t v7;

  v3 = result;
  v4 = (_QWORD *)result[2];
  if (a2)
  {
    v6 = &v4[3 * a2];
    v7 = 24 * a2;
    do
    {
      *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      result = std::vector<xgboost_old::tree::GradStats>::__init_with_size[abi:ne180100]<xgboost_old::tree::GradStats*,xgboost_old::tree::GradStats*>(v4, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 4);
      v4 += 3;
      v7 -= 24;
    }
    while (v7);
    v4 = v6;
  }
  v3[2] = v4;
  return result;
}

void sub_2183CF83C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 16) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<xgboost_old::tree::GradStats>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<xgboost_old::tree::GradStats>>,std::reverse_iterator<std::vector<xgboost_old::tree::GradStats>*>,std::reverse_iterator<std::vector<xgboost_old::tree::GradStats>*>,std::reverse_iterator<std::vector<xgboost_old::tree::GradStats>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

_QWORD *std::vector<xgboost_old::tree::GradStats>::__init_with_size[abi:ne180100]<xgboost_old::tree::GradStats*,xgboost_old::tree::GradStats*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<turi::flexible_type>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_2183CF914(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<xgboost_old::tree::GradStats>>,std::reverse_iterator<std::vector<xgboost_old::tree::GradStats>*>,std::reverse_iterator<std::vector<xgboost_old::tree::GradStats>*>,std::reverse_iterator<std::vector<xgboost_old::tree::GradStats>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<xgboost_old::tree::GradStats>>,std::reverse_iterator<std::vector<xgboost_old::tree::GradStats>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<xgboost_old::tree::GradStats>>,std::reverse_iterator<std::vector<xgboost_old::tree::GradStats>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::__function::__func<xgboost_old::tree::TreeRefresher<xgboost_old::tree::GradStats>::Update(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<xgboost_old::tree::RegTree *> const&)::{lambda(unsigned long,unsigned long)#1},std::allocator<xgboost_old::tree::TreeRefresher<xgboost_old::tree::GradStats>::Update(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<xgboost_old::tree::RegTree *> const&)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

__n128 std::__function::__func<xgboost_old::tree::TreeRefresher<xgboost_old::tree::GradStats>::Update(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<xgboost_old::tree::RegTree *> const&)::{lambda(unsigned long,unsigned long)#1},std::allocator<xgboost_old::tree::TreeRefresher<xgboost_old::tree::GradStats>::Update(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<xgboost_old::tree::RegTree *> const&)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &unk_24D93E410;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<xgboost_old::tree::TreeRefresher<xgboost_old::tree::GradStats>::Update(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<xgboost_old::tree::RegTree *> const&)::{lambda(unsigned long,unsigned long)#1},std::allocator<xgboost_old::tree::TreeRefresher<xgboost_old::tree::GradStats>::Update(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<xgboost_old::tree::RegTree *> const&)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24D93E410;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void *std::__function::__func<xgboost_old::tree::TreeRefresher<xgboost_old::tree::GradStats>::Update(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<xgboost_old::tree::RegTree *> const&)::{lambda(unsigned long,unsigned long)#1},std::allocator<xgboost_old::tree::TreeRefresher<xgboost_old::tree::GradStats>::Update(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<xgboost_old::tree::RegTree *> const&)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::operator()(uint64_t a1, uint64_t *a2)
{
  return std::__invoke_void_return_wrapper<void,true>::__call[abi:ne180100]<xgboost_old::tree::TreeRefresher<xgboost_old::tree::GradStats>::Update(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<xgboost_old::tree::RegTree *> const&)::{lambda(unsigned long,unsigned long)#1} &,unsigned long,unsigned long>((uint64_t ***)(a1 + 8), a2);
}

uint64_t std::__function::__func<xgboost_old::tree::TreeRefresher<xgboost_old::tree::GradStats>::Update(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<xgboost_old::tree::RegTree *> const&)::{lambda(unsigned long,unsigned long)#1},std::allocator<xgboost_old::tree::TreeRefresher<xgboost_old::tree::GradStats>::Update(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<xgboost_old::tree::RegTree *> const&)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<xgboost_old::tree::TreeRefresher<xgboost_old::tree::GradStats>::Update(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<xgboost_old::tree::RegTree *> const&)::{lambda(unsigned long,unsigned long)#1},std::allocator<xgboost_old::tree::TreeRefresher<xgboost_old::tree::GradStats>::Update(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<xgboost_old::tree::RegTree *> const&)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::target_type()
{
}

void *std::__invoke_void_return_wrapper<void,true>::__call[abi:ne180100]<xgboost_old::tree::TreeRefresher<xgboost_old::tree::GradStats>::Update(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<xgboost_old::tree::RegTree *> const&)::{lambda(unsigned long,unsigned long)#1} &,unsigned long,unsigned long>(uint64_t ***a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void **v13;
  void *result;
  uint64_t v15;
  __int128 v16;

  v3 = *a2;
  v4 = **a1;
  v5 = (char *)(*a1)[1] - (char *)v4;
  if (v5)
  {
    LODWORD(v6) = 0;
    v7 = v5 >> 3;
    if (v7 <= 1)
      v7 = 1;
    do
    {
      v8 = *v4++;
      v6 = *(int *)(v8 + 100) + (uint64_t)(int)v6;
      --v7;
    }
    while (v7);
  }
  else
  {
    v6 = 0;
  }
  v9 = (uint64_t)&(*a1[1])[3 * v3];
  v16 = 0uLL;
  std::vector<xgboost_old::tree::GradStats>::resize(v9, v6, &v16);
  v10 = (uint64_t)&(*a1[1])[3 * v3];
  v11 = *(void **)v10;
  v12 = *(_QWORD *)(v10 + 8) - *(_QWORD *)v10;
  if (v12 >= 1)
    bzero(v11, 16 * (((unint64_t)v12 >> 4) - ((unint64_t)v12 > 0xF)) + 16);
  v13 = (void **)&(*a1[3])[3 * v3];
  std::vector<xgboost_old::tree::RegTree::FVec::Entry>::resize((uint64_t)v13, *(int *)(***a1 + 112));
  result = *v13;
  v15 = (_BYTE *)v13[1] - (_BYTE *)*v13;
  if (v15 >= 1)
    return memset(result, 255, 4 * (((unint64_t)v15 >> 2) - ((unint64_t)v15 > 3)) + 4);
  return result;
}

void std::vector<xgboost_old::tree::GradStats>::resize(uint64_t a1, unint64_t a2, _OWORD *a3)
{
  unint64_t v3;

  v3 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 4;
  if (a2 <= v3)
  {
    if (a2 < v3)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 16 * a2;
  }
  else
  {
    std::vector<xgboost_old::tree::GradStats>::__append((void **)a1, a2 - v3, a3);
  }
}

void std::vector<xgboost_old::tree::GradStats>::__append(void **a1, unint64_t a2, _OWORD *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  _OWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  _OWORD *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;

  v8 = a1[2];
  v6 = (uint64_t)(a1 + 2);
  v7 = v8;
  v9 = *(_OWORD **)(v6 - 8);
  if (a2 <= (v8 - (_BYTE *)v9) >> 4)
  {
    if (a2)
    {
      v16 = 16 * a2;
      v17 = &v9[a2];
      do
      {
        *v9++ = *a3;
        v16 -= 16;
      }
      while (v16);
      v9 = v17;
    }
    a1[1] = v9;
  }
  else
  {
    v10 = (char *)v9 - (_BYTE *)*a1;
    v11 = a2 + (v10 >> 4);
    if (v11 >> 60)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v12 = v10 >> 4;
    v13 = v7 - (_BYTE *)*a1;
    if (v13 >> 3 > v11)
      v11 = v13 >> 3;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0)
      v14 = 0xFFFFFFFFFFFFFFFLL;
    else
      v14 = v11;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::flexible_type>>(v6, v14);
    else
      v15 = 0;
    v18 = &v15[16 * v12];
    v19 = &v18[16 * a2];
    v20 = 16 * a2;
    v21 = v18;
    do
    {
      *(_OWORD *)v21 = *a3;
      v21 += 16;
      v20 -= 16;
    }
    while (v20);
    v22 = &v15[16 * v14];
    v24 = (char *)*a1;
    v23 = (char *)a1[1];
    if (v23 != *a1)
    {
      do
      {
        *((_OWORD *)v18 - 1) = *((_OWORD *)v23 - 1);
        v18 -= 16;
        v23 -= 16;
      }
      while (v23 != v24);
      v23 = (char *)*a1;
    }
    *a1 = v18;
    a1[1] = v19;
    a1[2] = v22;
    if (v23)
      operator delete(v23);
  }
}

uint64_t rabit::InvokeLambda_(rabit *this, void *a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 3);
  if (!v2)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 48))(v2);
}

void std::__function::__func<xgboost_old::tree::TreeRefresher<xgboost_old::tree::GradStats>::Update(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<xgboost_old::tree::RegTree *> const&)::{lambda(void)#1},std::allocator<xgboost_old::tree::TreeRefresher<xgboost_old::tree::GradStats>::Update(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<xgboost_old::tree::RegTree *> const&)::{lambda(void)#1}>,void ()(void)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

__n128 std::__function::__func<xgboost_old::tree::TreeRefresher<xgboost_old::tree::GradStats>::Update(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<xgboost_old::tree::RegTree *> const&)::{lambda(void)#1},std::allocator<xgboost_old::tree::TreeRefresher<xgboost_old::tree::GradStats>::Update(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<xgboost_old::tree::RegTree *> const&)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x40uLL);
  *(_QWORD *)v2 = &unk_24D93E490;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  *((_QWORD *)v2 + 7) = *(_QWORD *)(a1 + 56);
  return result;
}

__n128 std::__function::__func<xgboost_old::tree::TreeRefresher<xgboost_old::tree::GradStats>::Update(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<xgboost_old::tree::RegTree *> const&)::{lambda(void)#1},std::allocator<xgboost_old::tree::TreeRefresher<xgboost_old::tree::GradStats>::Update(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<xgboost_old::tree::RegTree *> const&)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &unk_24D93E490;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  v4 = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<xgboost_old::tree::TreeRefresher<xgboost_old::tree::GradStats>::Update(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<xgboost_old::tree::RegTree *> const&)::{lambda(void)#1},std::allocator<xgboost_old::tree::TreeRefresher<xgboost_old::tree::GradStats>::Update(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<xgboost_old::tree::RegTree *> const&)::{lambda(void)#1}>,void ()(void)>::operator()(uint64_t a1)
{
  xgboost_old::tree::TreeRefresher<xgboost_old::tree::GradStats>::Update(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<xgboost_old::tree::RegTree *> const&)::{lambda(void)#1}::operator()(a1 + 8);
}

uint64_t std::__function::__func<xgboost_old::tree::TreeRefresher<xgboost_old::tree::GradStats>::Update(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<xgboost_old::tree::RegTree *> const&)::{lambda(void)#1},std::allocator<xgboost_old::tree::TreeRefresher<xgboost_old::tree::GradStats>::Update(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<xgboost_old::tree::RegTree *> const&)::{lambda(void)#1}>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<xgboost_old::tree::TreeRefresher<xgboost_old::tree::GradStats>::Update(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<xgboost_old::tree::RegTree *> const&)::{lambda(void)#1},std::allocator<xgboost_old::tree::TreeRefresher<xgboost_old::tree::GradStats>::Update(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<xgboost_old::tree::RegTree *> const&)::{lambda(void)#1}>,void ()(void)>::target_type()
{
}

void xgboost_old::tree::TreeRefresher<xgboost_old::tree::GradStats>::Update(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<xgboost_old::tree::RegTree *> const&)::{lambda(void)#1}::operator()(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  const char *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int *v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  v2 = (****(uint64_t (*****)(_QWORD))a1)(**(_QWORD **)a1);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2))
  {
    do
    {
      v3 = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2);
      xgboost_old::utils::Check(*(_QWORD *)v3 < 0xFFFFFFFFuLL, "too large batch size ", v4);
      v5 = *v3;
      v8 = v3;
      v9 = *(_OWORD *)(a1 + 8);
      v10 = *(_OWORD *)(a1 + 24);
      v11 = *(_QWORD *)(a1 + 40);
      turi::parallel_for<xgboost_old::tree::TreeRefresher<xgboost_old::tree::GradStats>::Update(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<xgboost_old::tree::RegTree *> const&)::{lambda(void)#1}::operator() const(void)::{lambda(unsigned long)#1}>(0, v5, (uint64_t)&v8);
    }
    while (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2) & 1) != 0);
  }
  v6 = *(_QWORD *)(a1 + 40);
  v7 = ((*(_QWORD *)(*(_QWORD *)v6 + 8) - **(_QWORD **)v6) >> 4);
  v8 = *(unsigned int **)(a1 + 48);
  *(_QWORD *)&v9 = v6;
  turi::parallel_for<xgboost_old::tree::TreeRefresher<xgboost_old::tree::GradStats>::Update(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<xgboost_old::tree::RegTree *> const&)::{lambda(void)#1}::operator() const(void)::{lambda(unsigned long)#2}>(0, v7, &v8);
}

void turi::parallel_for<xgboost_old::tree::TreeRefresher<xgboost_old::tree::GradStats>::Update(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<xgboost_old::tree::RegTree *> const&)::{lambda(void)#1}::operator() const(void)::{lambda(unsigned long)#1}>(turi::thread_pool *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v5;
  turi::thread_pool *instance;
  turi::thread *v7;
  turi::thread_pool *tls_data;
  BOOL v9;
  turi::thread_pool *v10;
  uint64_t v11;
  double v12;
  double v13;
  turi::thread *v14;
  unint64_t v15;
  uint64_t v16[4];
  _BYTE v17[192];
  uint64_t v18;

  v5 = (unint64_t)a1;
  v18 = *MEMORY[0x24BDAC8D0];
  instance = (turi::thread_pool *)turi::thread_pool::get_instance(a1);
  v7 = (turi::thread *)turi::thread_pool::size(instance);
  tls_data = (turi::thread_pool *)turi::thread::get_tls_data(v7);
  if (*((_BYTE *)tls_data + 8))
    v9 = 0;
  else
    v9 = (unint64_t)v7 > 1;
  if (v9)
  {
    v10 = (turi::thread_pool *)turi::thread_pool::get_instance(tls_data);
    turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)v17, v10);
    v11 = 0;
    v12 = (double)(a2 - v5) / (double)(unint64_t)v7;
    v13 = (double)v5;
    do
    {
      v14 = (turi::thread *)(v11 + 1);
      v15 = (unint64_t)(v13 + v12 * (double)(unint64_t)(v11 + 1));
      if ((turi::thread *)v11 == (turi::thread *)((char *)v7 - 1))
        v15 = a2;
      v16[2] = (unint64_t)(v13 + v12 * (double)(unint64_t)v11);
      v16[3] = v15;
      v16[0] = (uint64_t)boost::function0<void>::assign_to<void turi::parallel_for<xgboost_old::tree::TreeRefresher<xgboost_old::tree::GradStats>::Update(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<xgboost_old::tree::RegTree *> const&)::{lambda(void)#1}::operator() const(void)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::tree::TreeRefresher<xgboost_old::tree::GradStats>::Update(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<xgboost_old::tree::RegTree *> const&)::{lambda(void)#1}::operator() const(void)::{lambda(unsigned long)#1} const&)::{lambda(void)#1}>(xgboost_old::tree::TreeRefresher<xgboost_old::tree::GradStats>::Update(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<xgboost_old::tree::RegTree *> const&)::{lambda(void)#1}::operator() const(void)::{lambda(unsigned long)#1})::stored_vtable
             + 1;
      v16[1] = a3;
      turi::parallel_task_queue::launch((uint64_t)v17, (uint64_t)v16, v11);
      boost::function0<void>::~function0(v16);
      v11 = (uint64_t)v14;
    }
    while (v14 != v7);
    turi::parallel_task_queue::join((turi::parallel_task_queue *)v17);
    turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)v17);
  }
  else if (a2 > v5)
  {
    do
      xgboost_old::tree::TreeRefresher<xgboost_old::tree::GradStats>::Update(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<xgboost_old::tree::RegTree *> const&)::{lambda(void)#1}::operator() const(void)::{lambda(unsigned long)#1}::operator()(a3, v5++);
    while (a2 != v5);
  }
}

void sub_2183D00B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)va);
  _Unwind_Resume(a1);
}

void turi::parallel_for<xgboost_old::tree::TreeRefresher<xgboost_old::tree::GradStats>::Update(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<xgboost_old::tree::RegTree *> const&)::{lambda(void)#1}::operator() const(void)::{lambda(unsigned long)#2}>(turi::thread_pool *a1, unint64_t a2, unsigned int **a3)
{
  unint64_t v5;
  turi::thread_pool *instance;
  turi::thread *v7;
  turi::thread_pool *tls_data;
  BOOL v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  float64x2_t v14;
  uint64_t v15;
  uint64_t v16;
  turi::thread_pool *v17;
  uint64_t v18;
  double v19;
  double v20;
  turi::thread *v21;
  unint64_t v22;
  uint64_t v23[4];
  _BYTE v24[192];
  uint64_t v25;

  v5 = (unint64_t)a1;
  v25 = *MEMORY[0x24BDAC8D0];
  instance = (turi::thread_pool *)turi::thread_pool::get_instance(a1);
  v7 = (turi::thread *)turi::thread_pool::size(instance);
  tls_data = (turi::thread_pool *)turi::thread::get_tls_data(v7);
  if (*((_BYTE *)tls_data + 8))
    v9 = 0;
  else
    v9 = (unint64_t)v7 > 1;
  if (v9)
  {
    v17 = (turi::thread_pool *)turi::thread_pool::get_instance(tls_data);
    turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)v24, v17);
    v18 = 0;
    v19 = (double)(a2 - v5) / (double)(unint64_t)v7;
    v20 = (double)v5;
    do
    {
      v21 = (turi::thread *)(v18 + 1);
      v22 = (unint64_t)(v20 + v19 * (double)(unint64_t)(v18 + 1));
      if ((turi::thread *)v18 == (turi::thread *)((char *)v7 - 1))
        v22 = a2;
      v23[2] = (unint64_t)(v20 + v19 * (double)(unint64_t)v18);
      v23[3] = v22;
      v23[0] = (uint64_t)boost::function0<void>::assign_to<void turi::parallel_for<xgboost_old::tree::TreeRefresher<xgboost_old::tree::GradStats>::Update(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<xgboost_old::tree::RegTree *> const&)::{lambda(void)#1}::operator() const(void)::{lambda(unsigned long)#2}>(unsigned long,unsigned long,xgboost_old::tree::TreeRefresher<xgboost_old::tree::GradStats>::Update(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<xgboost_old::tree::RegTree *> const&)::{lambda(void)#1}::operator() const(void)::{lambda(unsigned long)#2} const&)::{lambda(void)#1}>(xgboost_old::tree::TreeRefresher<xgboost_old::tree::GradStats>::Update(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<xgboost_old::tree::RegTree *> const&)::{lambda(void)#1}::operator() const(void)::{lambda(unsigned long)#2})::stored_vtable
             + 1;
      v23[1] = (uint64_t)a3;
      turi::parallel_task_queue::launch((uint64_t)v24, (uint64_t)v23, v18);
      boost::function0<void>::~function0(v23);
      v18 = (uint64_t)v21;
    }
    while (v21 != v7);
    turi::parallel_task_queue::join((turi::parallel_task_queue *)v24);
    turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)v24);
  }
  else if (a2 > v5)
  {
    v10 = a3[1];
    v11 = **a3;
    do
    {
      if ((int)v11 >= 2)
      {
        v12 = (uint64_t *)(*(_QWORD *)v10 + 24);
        v13 = **(_QWORD **)v10;
        v14 = *(float64x2_t *)(v13 + 16 * v5);
        v15 = v11 - 1;
        do
        {
          v16 = *v12;
          v12 += 3;
          v14 = vaddq_f64(v14, *(float64x2_t *)(v16 + 16 * v5));
          *(float64x2_t *)(v13 + 16 * v5) = v14;
          --v15;
        }
        while (v15);
      }
      ++v5;
    }
    while (v5 != a2);
  }
}

void sub_2183D025C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)va);
  _Unwind_Resume(a1);
}

int *xgboost_old::tree::TreeRefresher<xgboost_old::tree::GradStats>::Update(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<xgboost_old::tree::RegTree *> const&)::{lambda(void)#1}::operator() const(void)::{lambda(unsigned long)#1}::operator()(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  int *result;
  int v8;
  uint64_t v9;
  uint64_t *v10;
  _DWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  float32x2_t v25;
  uint64_t v26;
  uint64_t v27;
  float64x2_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  float v35;
  float v36;
  uint64_t v37;
  int *v38;
  uint64_t v39;
  int *v40;
  uint64_t v41;
  unsigned int v42;

  v2 = a2;
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 16) + 8 * a2;
  v5 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)a1 + 24) + 8 * *(_QWORD *)v4);
  v6 = *(_DWORD *)(v4 + 8) - *(_QWORD *)v4;
  result = (int *)turi::thread::get_tls_data((turi::thread *)a1);
  v8 = *result;
  v9 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  v10 = (uint64_t *)(**(_QWORD **)(a1 + 8) + 24 * *result);
  if ((_DWORD)v6)
  {
    v11 = v5 + 1;
    v12 = v6;
    do
    {
      v13 = *(v11 - 1);
      if (v13 < (v10[1] - *v10) >> 2)
        *(_DWORD *)(*v10 + 4 * v13) = *v11;
      v11 += 2;
      --v12;
    }
    while (v12);
  }
  v14 = **(_QWORD **)(a1 + 16);
  v15 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v16 = v15 - v14;
  if (v15 != v14)
  {
    v17 = 0;
    v18 = 0;
    v19 = v9 + v2;
    v20 = v16 >> 3;
    v21 = *(_QWORD *)(a1 + 32);
    v23 = (uint64_t *)(**(_QWORD **)(a1 + 40) + 24 * v8);
    v22 = *v23;
    if (v23[1] == *v23)
      v22 = 0;
    v24 = (v9 + v2);
    v25 = *(float32x2_t *)(**(_QWORD **)(a1 + 24) + 8 * v19);
    v27 = *(_QWORD *)(v21 + 16);
    v26 = *(_QWORD *)(v21 + 24);
    v28 = vcvtq_f64_f32(v25);
    if (v20 <= 1)
      v20 = 1;
    do
    {
      if (v26 == v27)
        v29 = 0;
      else
        v29 = *(int *)(v27 + 4 * v24);
      v30 = *(uint64_t **)(v14 + 8 * v17);
      v31 = v22 + 16 * v18;
      *(float64x2_t *)(v31 + 16 * v29) = vaddq_f64(*(float64x2_t *)(v31 + 16 * v29), v28);
      v32 = *v30;
      if (*(_DWORD *)(*v30 + 20 * (int)v29 + 4) != -1)
      {
        v33 = *v10;
        do
        {
          v34 = *(_DWORD *)(v32 + 20 * v29 + 12);
          v35 = *(float *)(v33 + 4 * (v34 & 0x7FFFFFFF));
          if (v35 == NAN)
          {
            v39 = v32 + 20 * v29;
            v40 = (int *)(v39 + 4);
            v38 = (int *)(v39 + 8);
            if (v34 < 0)
              v38 = v40;
          }
          else
          {
            v36 = *(float *)(v32 + 20 * v29 + 16);
            v37 = v32 + 20 * v29;
            if (v36 <= v35)
              v38 = (int *)(v37 + 8);
            else
              v38 = (int *)(v37 + 4);
          }
          v29 = *v38;
          *(float64x2_t *)(v31 + 16 * v29) = vaddq_f64(*(float64x2_t *)(v31 + 16 * v29), v28);
        }
        while (*(_DWORD *)(v32 + 20 * (int)v29 + 4) != -1);
      }
      result = (int *)*((unsigned int *)v30 + 25);
      v18 += (int)result;
      ++v17;
    }
    while (v17 != v20);
  }
  for (; v6; --v6)
  {
    v42 = *v5;
    v5 += 2;
    v41 = v42;
    if (v42 < (unint64_t)((v10[1] - *v10) >> 2))
      *(_DWORD *)(*v10 + 4 * v41) = -1;
  }
  return result;
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<xgboost_old::tree::TreeRefresher<xgboost_old::tree::GradStats>::Update(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<xgboost_old::tree::RegTree *> const&)::{lambda(void)#1}::operator() const(void)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::tree::TreeRefresher<xgboost_old::tree::GradStats>::Update(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<xgboost_old::tree::RegTree *> const&)::{lambda(void)#1}::operator() const(void)::{lambda(unsigned long)#1} const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v4;
  __int128 v5;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x80000002186FB6D6 & 0x7FFFFFFFFFFFFFFFLL)
        || (result = strcmp((const char *)result, (const char *)(0x80000002186FB6D6 & 0x7FFFFFFFFFFFFFFFLL)),
            !(_DWORD)result))
      {
        *(_QWORD *)a2 = v4;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
    }
  }
  else
  {
    v5 = *(_OWORD *)result;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

int *boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<xgboost_old::tree::TreeRefresher<xgboost_old::tree::GradStats>::Update(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<xgboost_old::tree::RegTree *> const&)::{lambda(void)#1}::operator() const(void)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::tree::TreeRefresher<xgboost_old::tree::GradStats>::Update(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<xgboost_old::tree::RegTree *> const&)::{lambda(void)#1}::operator() const(void)::{lambda(unsigned long)#1} const&)::{lambda(void)#1},void>::invoke(int *result)
{
  unint64_t v1;
  uint64_t *v2;

  v1 = *((_QWORD *)result + 1);
  if (v1 < *((_QWORD *)result + 2))
  {
    v2 = (uint64_t *)result;
    do
      result = xgboost_old::tree::TreeRefresher<xgboost_old::tree::GradStats>::Update(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<xgboost_old::tree::RegTree *> const&)::{lambda(void)#1}::operator() const(void)::{lambda(unsigned long)#1}::operator()(*v2, v1++);
    while (v1 < v2[2]);
  }
  return result;
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<xgboost_old::tree::TreeRefresher<xgboost_old::tree::GradStats>::Update(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<xgboost_old::tree::RegTree *> const&)::{lambda(void)#1}::operator() const(void)::{lambda(unsigned long)#2}>(unsigned long,unsigned long,xgboost_old::tree::TreeRefresher<xgboost_old::tree::GradStats>::Update(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<xgboost_old::tree::RegTree *> const&)::{lambda(void)#1}::operator() const(void)::{lambda(unsigned long)#2} const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v4;
  __int128 v5;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x80000002186FB7C5 & 0x7FFFFFFFFFFFFFFFLL)
        || (result = strcmp((const char *)result, (const char *)(0x80000002186FB7C5 & 0x7FFFFFFFFFFFFFFFLL)),
            !(_DWORD)result))
      {
        *(_QWORD *)a2 = v4;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
    }
  }
  else
  {
    v5 = *(_OWORD *)result;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

unsigned int ***boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<xgboost_old::tree::TreeRefresher<xgboost_old::tree::GradStats>::Update(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<xgboost_old::tree::RegTree *> const&)::{lambda(void)#1}::operator() const(void)::{lambda(unsigned long)#2}>(unsigned long,unsigned long,xgboost_old::tree::TreeRefresher<xgboost_old::tree::GradStats>::Update(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<xgboost_old::tree::RegTree *> const&)::{lambda(void)#1}::operator() const(void)::{lambda(unsigned long)#2} const&)::{lambda(void)#1},void>::invoke(unsigned int ***result)
{
  unsigned int **v1;
  unsigned int **v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  float64x2_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = result[1];
  v2 = result[2];
  if (v1 < v2)
  {
    v3 = (uint64_t)*result;
    v4 = ***result;
    do
    {
      if ((int)v4 >= 2)
      {
        v5 = **(uint64_t ***)(v3 + 8);
        v8 = *v5;
        v6 = v5 + 3;
        v7 = v8;
        v9 = *(float64x2_t *)(v8 + 16 * (_QWORD)v1);
        v10 = v4 - 1;
        do
        {
          v11 = *v6;
          v6 += 3;
          v9 = vaddq_f64(v9, *(float64x2_t *)(v11 + 16 * (_QWORD)v1));
          *(float64x2_t *)(v7 + 16 * (_QWORD)v1) = v9;
          --v10;
        }
        while (v10);
      }
      v1 = (unsigned int **)((char *)v1 + 1);
    }
    while (v1 != v2);
  }
  return result;
}

void xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Update(uint64_t a1, uint64_t *a2, const char *a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  float *v6;
  float v7;
  uint64_t v8;
  unint64_t v13;
  uint64_t v14[3];
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 __p;
  uint64_t v22;
  void **v23;

  v5 = *a5;
  v6 = (float *)(a1 + 8);
  v7 = *(float *)(a1 + 8);
  v8 = a5[1] - *a5;
  *(float *)(a1 + 8) = v7 / (float)(unint64_t)(v8 >> 3);
  if (v8)
  {
    v13 = 0;
    do
    {
      v14[0] = (uint64_t)&unk_24D93E5A0;
      v14[1] = (uint64_t)v6;
      v15 = 0u;
      v16 = 0u;
      v17 = 0u;
      v18 = 0u;
      v19 = 0u;
      v20 = 0u;
      __p = 0u;
      v22 = 0;
      xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::Update(v14, a2, a3, a4, *(_QWORD *)(v5 + 8 * v13));
      v14[0] = (uint64_t)&unk_24D93E5A0;
      if ((_QWORD)__p)
      {
        *((_QWORD *)&__p + 1) = __p;
        operator delete((void *)__p);
      }
      if (*((_QWORD *)&v19 + 1))
      {
        *(_QWORD *)&v20 = *((_QWORD *)&v19 + 1);
        operator delete(*((void **)&v19 + 1));
      }
      v23 = (void **)&v18;
      std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v23);
      if (*((_QWORD *)&v16 + 1))
      {
        *(_QWORD *)&v17 = *((_QWORD *)&v16 + 1);
        operator delete(*((void **)&v16 + 1));
      }
      if ((_QWORD)v15)
      {
        *((_QWORD *)&v15 + 1) = v15;
        operator delete((void *)v15);
      }
      ++v13;
      v5 = *a5;
    }
    while (v13 < (a5[1] - *a5) >> 3);
  }
  *v6 = v7;
}

void sub_2183D0790(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::~Builder((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::~ColMaker()
{
  JUMPOUT(0x219A19A08);
}

float xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::Update(uint64_t *a1, uint64_t *a2, const char *a3, uint64_t a4, uint64_t a5)
{
  float result;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  float v18;
  uint64_t v19;
  uint64_t v20;
  double *v21;
  float *v22;
  _QWORD v23[3];

  xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::InitData((uint64_t)a1, a2, a3, (uint64_t *)(a4 + 16), a5);
  xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::InitNewNode(a1, a1 + 15, (uint64_t)a2, (uint64_t)a3, a4, a5);
  if (*(int *)(a1[1] + 8) <= 0)
  {
    v14 = a1[15];
    v15 = a1[16];
  }
  else
  {
    v11 = 0;
    do
    {
      xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::FindSplit((uint64_t)a1, v11, a1 + 15, (uint64_t)a2, (uint64_t)a3, a4, (_QWORD *)a5);
      (*(void (**)(uint64_t *, uint64_t *, const char *, uint64_t))(*a1 + 24))(a1, a1 + 15, a3, a5);
      v12 = (_QWORD *)(*(uint64_t (**)(const char *))(*(_QWORD *)a3 + 64))(a3);
      v13 = ((v12[1] - *v12) >> 2);
      v23[0] = v12;
      v23[1] = a1;
      v23[2] = a5;
      turi::parallel_for<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::ResetPosition(std::vector<int> const&,xgboost_old::IFMatrix *,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#1}>(0, v13, (uint64_t)v23);
      xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::UpdateQueueExpand((int)a1, (_QWORD *)a5, (char *)a1 + 120);
      xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::InitNewNode(a1, a1 + 15, (uint64_t)a2, (uint64_t)a3, a4, a5);
      v14 = a1[15];
      v15 = a1[16];
      if (v15 == v14)
        break;
      v11 = (v11 + 1);
    }
    while ((int)v11 < *(_DWORD *)(a1[1] + 8));
  }
  if (v15 != v14)
  {
    v16 = 0;
    result = NAN;
    do
    {
      v17 = *(_DWORD *)(v14 + 4 * v16);
      v18 = *(float *)(a1[12] + 40 * v17 + 20) * *(float *)a1[1];
      v19 = *(_QWORD *)a5 + 20 * v17;
      *(float *)(v19 + 16) = v18;
      *(_QWORD *)(v19 + 4) = -1;
      ++v16;
      v14 = a1[15];
    }
    while (v16 < (a1[16] - v14) >> 2);
  }
  v20 = *(unsigned int *)(a5 + 100);
  if ((int)v20 >= 1)
  {
    v21 = (double *)(a1[12] + 24);
    v22 = (float *)(*(_QWORD *)(a5 + 48) + 8);
    do
    {
      *(v22 - 2) = *(float *)v21;
      *v22 = *((float *)v21 - 1);
      result = *(v21 - 2);
      *(v22 - 1) = result;
      v21 += 5;
      v22 += 4;
      --v20;
    }
    while (v20);
  }
  return result;
}

uint64_t xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::~Builder(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void **v7;

  *(_QWORD *)a1 = &unk_24D93E5A0;
  v2 = *(void **)(a1 + 120);
  if (v2)
  {
    *(_QWORD *)(a1 + 128) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 96);
  if (v3)
  {
    *(_QWORD *)(a1 + 104) = v3;
    operator delete(v3);
  }
  v7 = (void **)(a1 + 72);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v7);
  v4 = *(void **)(a1 + 48);
  if (v4)
  {
    *(_QWORD *)(a1 + 56) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 24);
  if (v5)
  {
    *(_QWORD *)(a1 + 32) = v5;
    operator delete(v5);
  }
  return a1;
}

void xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::UpdateSolution(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v10 = *a2;
  v11 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 60);
  if (v11 == 2)
    v11 = *(_DWORD *)(a1 + 16) > 2 * (int)v10;
  v12 = *a2;
  if (v11)
  {
    if ((_DWORD)v10)
    {
      v13 = 0;
      do
      {
        v14 = a2[1];
        v15 = *(_OWORD *)(a2[2] + 16 * v13);
        xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::ParallelFindSplit((_QWORD *)a1, &v15, *(_DWORD *)(v14 + 4 * v13++), a4, a3, a5);
      }
      while (v12 != v13);
    }
  }
  else
  {
    *(_QWORD *)&v15 = a2;
    *((_QWORD *)&v15 + 1) = a1;
    v16 = a4;
    v17 = a3;
    v18 = a5;
    turi::parallel_for<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::UpdateSolution(xgboost_old::ColBatch const&,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix const&,xgboost_old::BoosterInfo const&)::{lambda(unsigned long)#1}>(0, v10, (turi::thread *)&v15);
  }
}

uint64_t xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::SyncBestSolution(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  float v12;
  float v13;
  uint64_t *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  float v19;
  int v20;
  _BOOL4 v21;

  v2 = *a2;
  v3 = a2[1];
  v4 = v3 - *a2;
  if (v3 != *a2)
  {
    v5 = 0;
    v6 = v4 >> 2;
    v7 = *(_QWORD *)(result + 96);
    v8 = *(unsigned int *)(result + 16);
    if (v6 <= 1)
      v6 = 1;
    do
    {
      if ((int)v8 >= 1)
      {
        v9 = *(_DWORD *)(v2 + 4 * v5);
        v10 = v7 + 40 * v9;
        v12 = *(float *)(v10 + 24);
        v11 = v10 + 24;
        v13 = v12;
        v14 = *(uint64_t **)(result + 72);
        v15 = *(_DWORD *)(v11 + 4);
        v16 = v8;
        do
        {
          v17 = *v14;
          v18 = *v14 + 56 * v9;
          v19 = *(float *)(v18 + 40);
          v20 = *(_DWORD *)(v18 + 44);
          if ((v15 & 0x7FFFFFFFu) <= (v20 & 0x7FFFFFFFu))
            v21 = v13 < v19;
          else
            v21 = v13 <= v19;
          if (v21)
          {
            *(float *)v11 = v19;
            *(_DWORD *)(v11 + 4) = v20;
            *(_DWORD *)(v11 + 8) = *(_DWORD *)(v17 + 56 * v9 + 48);
            v13 = v19;
            v15 = v20;
          }
          v14 += 3;
          --v16;
        }
        while (v16);
      }
      ++v5;
    }
    while (v5 != v6);
  }
  return result;
}

void xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::SetNonDefaultPosition(uint64_t a1, uint64_t *a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v6;
  uint64_t v7;
  std::vector<unsigned int>::pointer end;
  unint64_t v10;
  int v11;
  int v12;
  unsigned int *v13;
  std::vector<unsigned int>::pointer begin;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  int *v23;
  uint64_t v24;
  unint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD v33[4];
  int v34;
  _QWORD v35[2];
  std::vector<unsigned int> __p;

  memset(&__p, 0, sizeof(__p));
  v7 = *a2;
  v6 = a2[1];
  if (v6 != *a2)
  {
    end = 0;
    v10 = 0;
    do
    {
      v11 = *(_DWORD *)(v7 + 4 * v10);
      if (*(_DWORD *)(*a4 + 20 * v11 + 4) != -1)
      {
        v12 = *(_DWORD *)(*a4 + 20 * v11 + 12) & 0x7FFFFFFF;
        if (end >= __p.__end_cap_.__value_)
        {
          begin = __p.__begin_;
          v15 = end - __p.__begin_;
          v16 = v15 + 1;
          if ((unint64_t)(v15 + 1) >> 62)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          v17 = (char *)__p.__end_cap_.__value_ - (char *)__p.__begin_;
          if (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 1 > v16)
            v16 = v17 >> 1;
          if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL)
            v18 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v18 = v16;
          if (v18)
          {
            v18 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&__p.__end_cap_, v18);
            v20 = v19;
            begin = __p.__begin_;
            end = __p.__end_;
          }
          else
          {
            v20 = 0;
          }
          v21 = (unsigned int *)(v18 + 4 * v15);
          *v21 = v12;
          v13 = v21 + 1;
          while (end != begin)
          {
            v22 = *--end;
            *--v21 = v22;
          }
          __p.__begin_ = v21;
          __p.__end_ = v13;
          __p.__end_cap_.__value_ = (unsigned int *)(v18 + 4 * v20);
          if (begin)
            operator delete(begin);
        }
        else
        {
          *end = v12;
          v13 = end + 1;
        }
        __p.__end_ = v13;
        end = v13;
        v7 = *a2;
        v6 = a2[1];
      }
      ++v10;
    }
    while (v10 < (v6 - v7) >> 2);
  }
  std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
  v23 = std::__unique[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<unsigned int *>,std::__wrap_iter<unsigned int *>,std::__equal_to &>((int *)__p.__begin_, (int *)__p.__end_);
  std::vector<int>::resize(&__p, ((char *)v23 - (char *)__p.__begin_) >> 2);
  v24 = (*(uint64_t (**)(uint64_t, std::vector<unsigned int> *))(*(_QWORD *)a3 + 16))(a3, &__p);
  while ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v24 + 24))(v24))
  {
    v25 = (unint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 32))(v24);
    if (*v25)
    {
      v26 = 0;
      v27 = 0;
      do
      {
        v28 = v25[1];
        v29 = (uint64_t *)(v25[2] + v26);
        v31 = *v29;
        v30 = v29[1];
        v35[0] = v31;
        v35[1] = v30;
        v34 = 0;
        v34 = *(_DWORD *)(v28 + 4 * v27);
        v33[0] = v35;
        v33[1] = a1;
        v33[2] = a4;
        v33[3] = &v34;
        turi::parallel_for<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::SetNonDefaultPosition(std::vector<int> const&,xgboost_old::IFMatrix *,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#1}>(0, v30, (uint64_t)v33);
        ++v27;
        v26 += 16;
      }
      while (v27 < *v25);
    }
  }
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
}

void sub_2183D0E20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void turi::parallel_for<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::UpdateSolution(xgboost_old::ColBatch const&,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix const&,xgboost_old::BoosterInfo const&)::{lambda(unsigned long)#1}>(turi::thread_pool *a1, unint64_t a2, turi::thread *a3)
{
  unint64_t v5;
  turi::thread_pool *instance;
  turi::thread *v7;
  turi::thread_pool *tls_data;
  BOOL v9;
  turi::thread_pool *v10;
  uint64_t v11;
  double v12;
  double v13;
  turi::thread *v14;
  unint64_t v15;
  uint64_t v16[4];
  _BYTE v17[192];
  uint64_t v18;

  v5 = (unint64_t)a1;
  v18 = *MEMORY[0x24BDAC8D0];
  instance = (turi::thread_pool *)turi::thread_pool::get_instance(a1);
  v7 = (turi::thread *)turi::thread_pool::size(instance);
  tls_data = (turi::thread_pool *)turi::thread::get_tls_data(v7);
  if (*((_BYTE *)tls_data + 8))
    v9 = 0;
  else
    v9 = (unint64_t)v7 > 1;
  if (v9)
  {
    v10 = (turi::thread_pool *)turi::thread_pool::get_instance(tls_data);
    turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)v17, v10);
    v11 = 0;
    v12 = (double)(a2 - v5) / (double)(unint64_t)v7;
    v13 = (double)v5;
    do
    {
      v14 = (turi::thread *)(v11 + 1);
      v15 = (unint64_t)(v13 + v12 * (double)(unint64_t)(v11 + 1));
      if ((turi::thread *)v11 == (turi::thread *)((char *)v7 - 1))
        v15 = a2;
      v16[2] = (unint64_t)(v13 + v12 * (double)(unint64_t)v11);
      v16[3] = v15;
      v16[0] = (uint64_t)boost::function0<void>::assign_to<void turi::parallel_for<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::UpdateSolution(xgboost_old::ColBatch const&,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix const&,xgboost_old::BoosterInfo const&)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::UpdateSolution(xgboost_old::ColBatch const&,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix const&,xgboost_old::BoosterInfo const&)::{lambda(unsigned long)#1} const&)::{lambda(void)#1}>(xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::UpdateSolution(xgboost_old::ColBatch const&,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix const&,xgboost_old::BoosterInfo const&)::{lambda(unsigned long)#1})::stored_vtable
             + 1;
      v16[1] = (uint64_t)a3;
      turi::parallel_task_queue::launch((uint64_t)v17, (uint64_t)v16, v11);
      boost::function0<void>::~function0(v16);
      v11 = (uint64_t)v14;
    }
    while (v14 != v7);
    turi::parallel_task_queue::join((turi::parallel_task_queue *)v17);
    turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)v17);
  }
  else if (a2 > v5)
  {
    do
      xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::UpdateSolution(xgboost_old::ColBatch const&,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix const&,xgboost_old::BoosterInfo const&)::{lambda(unsigned long)#1}::operator()(a3, v5++);
    while (a2 != v5);
  }
}

void sub_2183D0FAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)va);
  _Unwind_Resume(a1);
}

int *xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::ParallelFindSplit(_QWORD *a1, _DWORD *a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  int v16;
  uint64_t v17;
  int *v18;
  int *v19;
  uint64_t v20;
  unint64_t v21;
  int *v22;
  int *result;
  uint64_t v24;
  BOOL v25;
  BOOL v26;
  unsigned int v27;
  _QWORD v28[3];
  int *v29;
  BOOL *v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v27 = a3;
  v11 = a2[2];
  if (v11)
    v12 = *(float *)(*(_QWORD *)a2 + 4) != *(float *)(*(_QWORD *)a2 + 8 * (v11 - 1) + 4);
  else
    v12 = 1;
  v13 = a1[1];
  v14 = a3;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a4 + 56))(a4, a3);
  v16 = *(_DWORD *)(v13 + 24);
  if (v16 == 2)
  {
    v12 = 1;
  }
  else if (v16 || *(float *)(v13 + 44) <= v15)
  {
    v12 = 0;
  }
  v26 = v12;
  v17 = a1[1];
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a4 + 56))(a4, v14);
  v25 = *(_DWORD *)(v17 + 24) != 2;
  v18 = (int *)operator new(0x30uLL);
  *(_QWORD *)v18 = &unk_24D93E600;
  *((_QWORD *)v18 + 1) = a1;
  *((_QWORD *)v18 + 2) = a1 + 15;
  *((_QWORD *)v18 + 3) = a2;
  *((_QWORD *)v18 + 4) = a5;
  *((_QWORD *)v18 + 5) = a6;
  v29 = v18;
  turi::in_parallel((turi::thread_pool *)v28);
  v19 = v29;
  if (v29 == (int *)v28)
  {
    v20 = 4;
    v19 = (int *)v28;
  }
  else
  {
    if (!v29)
      goto LABEL_14;
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_14:
  v21 = ((a1[16] - a1[15]) >> 2);
  v28[0] = a1 + 15;
  v28[1] = a1;
  v28[2] = &v26;
  v29 = (int *)&v27;
  v30 = &v25;
  turi::parallel_for<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::ParallelFindSplit(xgboost_old::SparseBatch::Inst const&,unsigned int,xgboost_old::IFMatrix const&,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::BoosterInfo const&)::{lambda(unsigned long)#1}>(0, v21, (uint64_t)v28);
  v22 = (int *)operator new(0x40uLL);
  *(_QWORD *)v22 = &unk_24D93E6A0;
  *((_QWORD *)v22 + 1) = a1;
  *((_QWORD *)v22 + 2) = a2;
  *((_QWORD *)v22 + 3) = a5;
  *((_QWORD *)v22 + 4) = a6;
  *((_QWORD *)v22 + 5) = &v26;
  *((_QWORD *)v22 + 6) = &v27;
  *((_QWORD *)v22 + 7) = &v25;
  v29 = v22;
  turi::in_parallel((turi::thread_pool *)v28);
  result = v29;
  if (v29 == (int *)v28)
  {
    v24 = 4;
    result = (int *)v28;
  }
  else
  {
    if (!v29)
      return result;
    v24 = 5;
  }
  return (int *)(*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v24))();
}

void sub_2183D11F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char *a14)
{
  char *v14;
  char *v16;
  uint64_t v17;

  v16 = a14;
  if (a14 == v14)
  {
    v17 = 4;
    v16 = &a11;
  }
  else
  {
    if (!a14)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::UpdateSolution(xgboost_old::ColBatch const&,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix const&,xgboost_old::BoosterInfo const&)::{lambda(unsigned long)#1}::operator()(turi::thread *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BOOL4 v11;
  uint64_t v12;
  float v13;
  int v14;
  _BOOL4 v15;
  uint64_t v16;
  uint64_t result;

  v4 = *((_QWORD *)a1 + 1);
  v5 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)a1 + 8) + 4 * a2);
  v6 = *(_QWORD *)turi::thread::get_tls_data(a1);
  v7 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)a1 + 16) + 16 * a2);
  v9 = *v7;
  v8 = v7[1];
  v10 = v8;
  if ((_DWORD)v8)
    v11 = *(float *)(v9 + 4) != *(float *)(v9 + 8 * (v8 - 1) + 4);
  else
    v11 = 1;
  v12 = *(_QWORD *)(v4 + 8);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)a1 + 2) + 56))(*((_QWORD *)a1 + 2), v5);
  v14 = *(_DWORD *)(v12 + 24);
  if (v14 == 2 || !v14 && (*(float *)(v12 + 44) > v13 ? (v15 = v11) : (v15 = 0), v15))
    xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::EnumerateSplit(v4, (unsigned int *)v9, (unsigned int *)(v9 + 8 * v10), 1, v5, *((uint64_t **)a1 + 3), *((_QWORD *)a1 + 4), (uint64_t *)(*(_QWORD *)(v4 + 72) + 24 * (int)v6));
  v16 = *(_QWORD *)(v4 + 8);
  result = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a1 + 2) + 56))(*((_QWORD *)a1 + 2), v5);
  if (*(_DWORD *)(v16 + 24) != 2)
    return xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::EnumerateSplit(v4, (unsigned int *)(v9 - 8 + 8 * v10), (unsigned int *)(v9 - 8), -1, v5, *((uint64_t **)a1 + 3), *((_QWORD *)a1 + 4), (uint64_t *)(*(_QWORD *)(v4 + 72) + 24 * (int)v6));
  return result;
}

uint64_t xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::EnumerateSplit(uint64_t result, unsigned int *a2, unsigned int *a3, int a4, unsigned int a5, uint64_t *a6, uint64_t a7, uint64_t *a8)
{
  int *v8;
  _DWORD *v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  float v20;
  float64x2_t *v21;
  double v22;
  float *v23;
  uint64_t v24;
  float v25;
  float v26;
  float *v27;
  double v28;
  float64x2_t v29;
  uint64_t v30;
  double *v31;
  double v32;
  double v33;
  double v34;
  float v35;
  float v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  float v49;
  float v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  float v61;
  uint64_t v62;
  uint64_t v63;
  float v64;
  _BOOL4 v65;
  _BOOL4 v66;
  _BOOL4 v67;
  uint64_t v68;
  uint64_t v69;
  float *v70;
  double v71;
  unsigned int v72;
  int v73;
  int v74;
  double *v75;
  double v76;
  double v77;
  double v79;
  double v80;
  double v81;
  float v82;
  float v83;
  double v84;
  double v85;
  double v86;
  double v87;
  double v88;
  double v89;
  double v90;
  double v91;
  double v92;
  double v93;
  double v94;
  double v95;
  float v96;
  float v97;
  double v98;
  double v99;
  double v100;
  double v101;
  double v102;
  double v103;
  double v104;
  double v105;
  double v106;
  double v107;
  float v108;
  uint64_t v109;
  uint64_t v110;
  float v111;
  _BOOL4 v112;
  _BOOL4 v113;
  _BOOL4 v114;
  uint64_t v115;
  float v116;
  float v117;

  if (*(_DWORD *)(*(_QWORD *)(result + 8) + 64))
    return xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::EnumerateSplitCacheOpt(result, a2, a3, a4, a5, a6, a8);
  v9 = *(_DWORD **)(result + 120);
  v8 = *(int **)(result + 128);
  if (v8 == v9)
  {
    v13 = v8 - v9;
  }
  else
  {
    v10 = 0;
    v8 = *(int **)(result + 120);
    do
    {
      v11 = (_QWORD *)(*a8 + 56 * v8[v10]);
      *v11 = 0;
      v11[1] = 0;
      ++v10;
      v8 = *(int **)(result + 120);
      v12 = *(_QWORD *)(result + 128) - (_QWORD)v8;
    }
    while (v10 < v12 >> 2);
    v13 = v12 >> 2;
  }
  if (a2 != a3)
  {
    v14 = *(_QWORD *)(result + 48);
    v15 = *a8;
    v16 = a5 | 0x80000000;
    if (a4 != -1)
      v16 = a5;
    v17 = *a6;
    do
    {
      v18 = *a2;
      v19 = *(_DWORD *)(v14 + 4 * v18);
      if ((v19 & 0x80000000) == 0)
      {
        v20 = *((float *)a2 + 1);
        v21 = (float64x2_t *)(v15 + 56 * v19);
        v22 = v21->f64[1];
        if (v22 == 0.0)
        {
          *v21 = vaddq_f64(*v21, vcvtq_f64_f32(*(float32x2_t *)(v17 + 8 * v18)));
          v23 = (float *)(v15 + 56 * v19 + 32);
        }
        else
        {
          v24 = v15 + 56 * v19;
          v25 = *(float *)(v24 + 32);
          v23 = (float *)(v24 + 32);
          v26 = v25;
          if (vabds_f32(v20, v25) <= 0.00002)
          {
            v29.f64[0] = v21->f64[0];
          }
          else
          {
            v27 = *(float **)(result + 8);
            v28 = v27[3];
            v29.f64[0] = v21->f64[0];
            if (v22 >= v28)
            {
              v30 = *(_QWORD *)(result + 96);
              v31 = (double *)(v30 + 40 * v19);
              v32 = v31[1] - v22;
              if (v32 >= v28)
              {
                v33 = 0.0;
                v34 = 0.0;
                if (v22 >= v28)
                {
                  v35 = v27[7];
                  v36 = v27[5];
                  if (v35 == 0.0)
                  {
                    if (v36 == 0.0)
                    {
                      v37 = v29.f64[0] * v29.f64[0];
                    }
                    else
                    {
                      v46 = v36;
                      if (v29.f64[0] <= v46)
                      {
                        v47 = 0.0;
                        if (v29.f64[0] < -v46)
                          v47 = v29.f64[0] + v46;
                      }
                      else
                      {
                        v47 = v29.f64[0] - v46;
                      }
                      v37 = v47 * v47;
                    }
                    v34 = v37 / (v22 + v27[4]);
                  }
                  else
                  {
                    v38 = v36;
                    v39 = v29.f64[0] + v36;
                    if (v29.f64[0] >= -v36)
                      v39 = 0.0;
                    if (v29.f64[0] > v38)
                      v39 = v29.f64[0] - v38;
                    if (v36 == 0.0)
                      v39 = v21->f64[0];
                    v40 = v22 + v27[4];
                    v41 = -v39 / v40;
                    if (v41 > v35)
                      v41 = v35;
                    v42 = (float)-v35;
                    if (v41 >= v42)
                      v42 = v41;
                    v43 = v40 * 0.5 * (v42 * v42) + v29.f64[0] * v42;
                    v44 = v43 + v38 * fabs(v42);
                    if (v36 == 0.0)
                      v45 = v43;
                    else
                      v45 = v44;
                    v34 = v45 * -2.0;
                  }
                }
                if (v32 >= v28)
                {
                  v48 = *v31 - v29.f64[0];
                  v49 = v27[7];
                  v50 = v27[5];
                  if (v49 == 0.0)
                  {
                    if (v50 == 0.0)
                    {
                      v51 = v48 * v48;
                    }
                    else
                    {
                      v59 = v50;
                      if (v48 <= v59)
                      {
                        v60 = 0.0;
                        if (v48 < -v59)
                          v60 = v48 + v59;
                      }
                      else
                      {
                        v60 = v48 - v59;
                      }
                      v51 = v60 * v60;
                    }
                    v33 = v51 / (v32 + v27[4]);
                  }
                  else
                  {
                    v52 = v50;
                    v53 = v48 + v50;
                    if (v48 >= -v50)
                      v53 = 0.0;
                    if (v48 > v52)
                      v53 = v48 - v52;
                    if (v50 == 0.0)
                      v53 = *v31 - v29.f64[0];
                    v54 = v32 + v27[4];
                    v55 = -v53 / v54;
                    if (v55 > v49)
                      v55 = v49;
                    v56 = (float)-v49;
                    if (v55 >= v56)
                      v56 = v55;
                    v57 = v54 * 0.5 * (v56 * v56) + v48 * v56;
                    v58 = v57 + v52 * fabs(v56);
                    if (v50 != 0.0)
                      v57 = v58;
                    v33 = v57 * -2.0;
                  }
                }
                v61 = v34 + v33 - *(float *)(v30 + 40 * v19 + 16);
                v62 = v15 + 56 * v19;
                v64 = *(float *)(v62 + 40);
                v63 = v62 + 40;
                v65 = v64 < v61;
                v66 = v64 <= v61;
                if ((*(_DWORD *)(v63 + 4) & 0x7FFFFFFFu) <= a5)
                  v67 = v65;
                else
                  v67 = v66;
                if (v67)
                {
                  *(float *)v63 = v61;
                  *(_DWORD *)(v63 + 4) = v16;
                  *(float *)(v15 + 56 * v19 + 48) = (float)(v20 + v26) * 0.5;
                }
              }
            }
          }
          v29.f64[1] = v22;
          *v21 = vaddq_f64(v29, vcvtq_f64_f32(*(float32x2_t *)(v17 + 8 * v18)));
        }
        *v23 = v20;
      }
      a2 += 2 * a4;
    }
    while (a2 != a3);
  }
  if (v13)
  {
    v68 = *a8;
    v69 = *(_QWORD *)(result + 96);
    v70 = *(float **)(result + 8);
    v71 = v70[3];
    v72 = a5 | 0x80000000;
    if (a4 != -1)
      v72 = a5;
    do
    {
      v74 = *v8++;
      v73 = v74;
      result = v68 + 56 * v74;
      v75 = (double *)(v69 + 40 * v74);
      v76 = *(double *)(result + 8);
      v77 = v75[1] - v76;
      if (v76 >= v71 && v77 >= v71)
      {
        v79 = *(double *)result;
        v80 = 0.0;
        v81 = 0.0;
        if (v76 >= v71)
        {
          v82 = v70[7];
          v83 = v70[5];
          if (v82 == 0.0)
          {
            if (v83 == 0.0)
            {
              v84 = v79 * v79;
            }
            else
            {
              v93 = v83;
              if (v79 <= v93)
              {
                v94 = 0.0;
                if (v79 < -v93)
                  v94 = v79 + v93;
              }
              else
              {
                v94 = v79 - v93;
              }
              v84 = v94 * v94;
            }
            v81 = v84 / (v76 + v70[4]);
          }
          else
          {
            v85 = v83;
            v86 = v79 + v83;
            if (v79 >= -v83)
              v86 = 0.0;
            if (v79 > v85)
              v86 = v79 - v85;
            if (v83 == 0.0)
              v86 = *(double *)result;
            v87 = v76 + v70[4];
            v88 = -v86 / v87;
            if (v88 > v82)
              v88 = v82;
            v89 = (float)-v82;
            if (v88 >= v89)
              v89 = v88;
            v90 = v87 * 0.5 * (v89 * v89) + v79 * v89;
            v91 = v90 + v85 * fabs(v89);
            if (v83 == 0.0)
              v92 = v90;
            else
              v92 = v91;
            v81 = v92 * -2.0;
          }
        }
        if (v77 >= v71)
        {
          v95 = *v75 - v79;
          v96 = v70[7];
          v97 = v70[5];
          if (v96 == 0.0)
          {
            if (v97 == 0.0)
            {
              v98 = v95 * v95;
            }
            else
            {
              v106 = v97;
              if (v95 <= v106)
              {
                v107 = 0.0;
                if (v95 < -v106)
                  v107 = v95 + v106;
              }
              else
              {
                v107 = v95 - v106;
              }
              v98 = v107 * v107;
            }
            v80 = v98 / (v77 + v70[4]);
          }
          else
          {
            v99 = v97;
            v100 = v95 + v97;
            if (v95 >= -v97)
              v100 = 0.0;
            if (v95 > v99)
              v100 = v95 - v99;
            if (v97 == 0.0)
              v100 = v95;
            v101 = v77 + v70[4];
            v102 = -v100 / v101;
            if (v102 > v96)
              v102 = v96;
            v103 = (float)-v96;
            if (v102 >= v103)
              v103 = v102;
            v104 = v101 * 0.5 * (v103 * v103) + v95 * v103;
            v105 = v104 + v99 * fabs(v103);
            if (v97 != 0.0)
              v104 = v105;
            v80 = v104 * -2.0;
          }
        }
        v108 = v81 + v80 - *(float *)(v69 + 40 * v73 + 16);
        v109 = v68 + 56 * v73;
        v111 = *(float *)(v109 + 40);
        v110 = v109 + 40;
        result = v110 + 4;
        v112 = v111 < v108;
        v113 = v111 <= v108;
        if ((*(_DWORD *)(v110 + 4) & 0x7FFFFFFFu) <= a5)
          v114 = v112;
        else
          v114 = v113;
        if (v114)
        {
          v115 = v68 + 56 * v73;
          v116 = *(float *)(v115 + 32);
          v117 = fabsf(v116) + 0.00001;
          if (a4 != 1)
            v117 = -v117;
          *(float *)v110 = v108;
          *(_DWORD *)result = v72;
          *(float *)(v115 + 48) = v116 + v117;
        }
      }
      --v13;
    }
    while (v13);
  }
  return result;
}

uint64_t xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::EnumerateSplitCacheOpt(uint64_t result, unsigned int *a2, unsigned int *a3, int a4, unsigned int a5, uint64_t *a6, uint64_t *a7)
{
  unsigned int *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  unsigned int *v13;
  unsigned int *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  float *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _DWORD *v31;
  unsigned int *v32;
  uint64_t v33;
  float *v34;
  int *v35;
  int v36;
  int v37;
  int *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  float *v43;
  double v44;
  unsigned int v45;
  int v46;
  int v47;
  float64x2_t *v48;
  float64x2_t v49;
  double v50;
  double v52;
  double v53;
  double v54;
  float v55;
  float v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  float v67;
  float v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  float v78;
  uint64_t v79;
  uint64_t v80;
  float v81;
  _BOOL4 v82;
  _BOOL4 v83;
  _BOOL4 v84;
  uint64_t v85;
  float v86;
  float v87;
  uint64_t v89;
  float64x2_t v93;
  _BYTE v94[4];
  _BYTE v95[252];
  _DWORD v96[32];
  uint64_t v97;

  v8 = a2;
  v9 = (_QWORD *)result;
  v97 = *MEMORY[0x24BDAC8D0];
  v10 = *(_QWORD *)(result + 120);
  if (*(_QWORD *)(result + 128) != v10)
  {
    v11 = 0;
    do
    {
      v12 = (_QWORD *)(*a7 + 56 * *(int *)(v10 + 4 * v11));
      *v12 = 0;
      v12[1] = 0;
      ++v11;
      v10 = *(_QWORD *)(result + 120);
    }
    while (v11 < (*(_QWORD *)(result + 128) - v10) >> 2);
  }
  v93 = 0uLL;
  if (a4 <= 0)
    v13 = a2;
  else
    v13 = a3;
  if (a4 <= 0)
    v14 = a3;
  else
    v14 = a2;
  v15 = 32;
  if (a4 <= 0)
    v15 = -32;
  v16 = (((char *)v13 - (char *)v14) >> 3) / v15;
  v17 = &a2[64 * v16];
  if (v16)
  {
    v18 = 8 * a4;
    v89 = 256 * a4;
    do
    {
      v19 = 0;
      v20 = v9[6];
      v21 = *a6;
      v22 = v8;
      do
      {
        v23 = *v22;
        v96[v19] = *(_DWORD *)(v20 + 4 * v23);
        *(_QWORD *)&v94[8 * v19++] = *(_QWORD *)(v21 + 8 * v23);
        v22 = (unsigned int *)((char *)v22 + v18);
      }
      while (v19 != 32);
      v24 = 0;
      v25 = 4;
      v26 = (float *)v95;
      do
      {
        v27 = v96[v24];
        if ((v27 & 0x80000000) == 0)
          result = xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::UpdateEnumeration((uint64_t)v9, v27, a4, a5, v93.f64, a7, *(v26 - 1), *v26, *(float *)((char *)v8 + v25));
        ++v24;
        v26 += 2;
        v25 += v18;
      }
      while (v24 != 32);
      v8 = (unsigned int *)((char *)v8 + v89);
    }
    while (v8 != v17);
  }
  if (v17 != a3)
  {
    v28 = v9[6];
    v29 = *a6;
    v30 = v94;
    v31 = v96;
    v32 = v17;
    do
    {
      v33 = *v32;
      *v31++ = *(_DWORD *)(v28 + 4 * v33);
      *v30++ = *(_QWORD *)(v29 + 8 * v33);
      v32 += 2 * a4;
    }
    while (v32 != a3);
    v34 = (float *)v95;
    v35 = v96;
    do
    {
      v37 = *v35++;
      v36 = v37;
      if ((v37 & 0x80000000) == 0)
        result = xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::UpdateEnumeration((uint64_t)v9, v36, a4, a5, v93.f64, a7, *(v34 - 1), *v34, *((float *)v17 + 1));
      v34 += 2;
      v17 += 2 * a4;
    }
    while (v17 != a3);
  }
  v38 = (int *)v9[15];
  v39 = v9[16] - (_QWORD)v38;
  if (v39)
  {
    v40 = v39 >> 2;
    v41 = *a7;
    v42 = v9[12];
    v43 = (float *)v9[1];
    v44 = v43[3];
    v45 = a5 | 0x80000000;
    if (a4 != -1)
      v45 = a5;
    if (v40 <= 1)
      v40 = 1;
    do
    {
      v47 = *v38++;
      v46 = v47;
      v48 = (float64x2_t *)(v41 + 56 * v47);
      result = 40 * v47;
      v49 = vsubq_f64(*(float64x2_t *)(v42 + result), *v48);
      v93 = v49;
      v50 = v48->f64[1];
      if (v50 >= v44 && v49.f64[1] >= v44)
      {
        v52 = 0.0;
        v53 = 0.0;
        if (v50 >= v44)
        {
          v54 = v48->f64[0];
          v55 = v43[7];
          v56 = v43[5];
          if (v55 == 0.0)
          {
            if (v56 == 0.0)
            {
              v57 = v54 * v54;
            }
            else
            {
              v65 = v56;
              if (v54 <= v65)
              {
                v66 = 0.0;
                if (v54 < -v65)
                  v66 = v54 + v65;
              }
              else
              {
                v66 = v54 - v65;
              }
              v57 = v66 * v66;
            }
            v53 = v57 / (v50 + v43[4]);
          }
          else
          {
            v58 = v56;
            v59 = v54 + v56;
            if (v54 >= -v56)
              v59 = 0.0;
            if (v54 > v58)
              v59 = v54 - v58;
            if (v56 == 0.0)
              v59 = v48->f64[0];
            v60 = v50 + v43[4];
            v61 = -v59 / v60;
            if (v61 > v55)
              v61 = v55;
            v62 = (float)-v55;
            if (v61 >= v62)
              v62 = v61;
            v63 = v60 * 0.5 * (v62 * v62) + v54 * v62;
            v64 = v63 + v58 * fabs(v62);
            if (v56 != 0.0)
              v63 = v64;
            v53 = v63 * -2.0;
          }
        }
        if (v49.f64[1] >= v44)
        {
          v67 = v43[7];
          v68 = v43[5];
          if (v67 == 0.0)
          {
            if (v68 == 0.0)
            {
              v52 = vmulq_f64(v49, v49).f64[0] / (v49.f64[1] + v43[4]);
            }
            else
            {
              v76 = v68;
              v77 = v49.f64[0] + v76;
              if (v49.f64[0] >= -v76)
                v77 = 0.0;
              if (v49.f64[0] > v76)
                v49.f64[0] = v49.f64[0] - v76;
              else
                v49.f64[0] = v77;
              v52 = v49.f64[0] * v49.f64[0] / (v49.f64[1] + v43[4]);
            }
          }
          else
          {
            v69 = v68;
            v70 = v49.f64[0] + v68;
            if (v49.f64[0] >= -v68)
              v70 = 0.0;
            if (v49.f64[0] > v69)
              v70 = v49.f64[0] - v69;
            if (v68 == 0.0)
              v70 = v49.f64[0];
            v71 = v49.f64[1] + v43[4];
            v72 = -v70 / v71;
            if (v72 > v67)
              v72 = v67;
            v73 = (float)-v67;
            if (v72 >= v73)
              v73 = v72;
            v74 = v71 * 0.5 * (v73 * v73) + v49.f64[0] * v73;
            v75 = v74 + v69 * fabs(v73);
            if (v68 != 0.0)
              v74 = v75;
            v52 = v74 * -2.0;
          }
        }
        v78 = v53 + v52 - *(float *)(v42 + 40 * v46 + 16);
        v79 = v41 + 56 * v46;
        v81 = *(float *)(v79 + 40);
        v80 = v79 + 40;
        result = v80 + 4;
        v82 = v81 < v78;
        v83 = v81 <= v78;
        if ((*(_DWORD *)(v80 + 4) & 0x7FFFFFFFu) <= a5)
          v84 = v82;
        else
          v84 = v83;
        if (v84)
        {
          v85 = v41 + 56 * v46;
          v86 = *(float *)(v85 + 32);
          v87 = fabsf(v86) + 0.00001;
          if (a4 != 1)
            v87 = -v87;
          *(float *)v80 = v78;
          *(_DWORD *)result = v45;
          *(float *)(v85 + 48) = v86 + v87;
        }
      }
      --v40;
    }
    while (v40);
  }
  return result;
}

uint64_t xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::UpdateEnumeration(uint64_t result, int a2, int a3, unsigned int a4, double *a5, uint64_t *a6, float a7, float a8, float a9)
{
  uint64_t v9;
  double *v10;
  double v11;
  float *v12;
  uint64_t v13;
  float v14;
  float v15;
  float *v16;
  double v17;
  double v18;
  uint64_t v19;
  double *v20;
  double v21;
  double v22;
  double v23;
  double v24;
  float v25;
  float v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  float v38;
  float v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  float v50;
  uint64_t v51;
  uint64_t v52;
  float v53;
  unsigned int *v54;
  _BOOL4 v55;
  _BOOL4 v56;
  _BOOL4 v57;
  float v58;
  unsigned int v59;

  v9 = *a6;
  v10 = (double *)(*a6 + 56 * a2);
  v11 = v10[1];
  if (v11 == 0.0)
  {
    *v10 = *v10 + a7;
    v10[1] = v11 + a8;
    v12 = (float *)(v9 + 56 * a2 + 32);
  }
  else
  {
    v13 = v9 + 56 * a2;
    v14 = *(float *)(v13 + 32);
    v12 = (float *)(v13 + 32);
    v15 = v14;
    if (vabds_f32(a9, v14) <= 0.00002)
    {
      v18 = *v10;
    }
    else
    {
      v16 = *(float **)(result + 8);
      v17 = v16[3];
      v18 = *v10;
      if (v11 >= v17)
      {
        v19 = *(_QWORD *)(result + 96);
        v20 = (double *)(v19 + 40 * a2);
        v21 = *v20 - v18;
        v22 = v20[1] - v11;
        *a5 = v21;
        a5[1] = v22;
        v18 = *v10;
        v11 = v10[1];
        if (v22 >= v17)
        {
          v23 = 0.0;
          v24 = 0.0;
          if (v11 >= v17)
          {
            v25 = v16[7];
            v26 = v16[5];
            if (v25 == 0.0)
            {
              if (v26 == 0.0)
              {
                v27 = v18 * v18;
              }
              else
              {
                v36 = v26;
                if (v18 <= v36)
                {
                  v37 = 0.0;
                  if (v18 < -v36)
                    v37 = v18 + v36;
                }
                else
                {
                  v37 = v18 - v36;
                }
                v27 = v37 * v37;
              }
              v24 = v27 / (v11 + v16[4]);
            }
            else
            {
              v28 = v26;
              v29 = v18 + v26;
              if (v18 >= -v26)
                v29 = 0.0;
              if (v18 > v28)
                v29 = v18 - v28;
              if (v26 == 0.0)
                v29 = *v10;
              v30 = v11 + v16[4];
              v31 = -v29 / v30;
              if (v31 > v25)
                v31 = v25;
              v32 = (float)-v25;
              if (v31 >= v32)
                v32 = v31;
              v33 = v30 * 0.5 * (v32 * v32) + v18 * v32;
              v34 = v33 + v28 * fabs(v32);
              if (v26 == 0.0)
                v35 = v33;
              else
                v35 = v34;
              v24 = v35 * -2.0;
            }
          }
          if (v22 >= v17)
          {
            v38 = v16[7];
            v39 = v16[5];
            if (v38 == 0.0)
            {
              if (v39 == 0.0)
              {
                v40 = v21 * v21;
              }
              else
              {
                v48 = v39;
                if (v21 <= v48)
                {
                  v49 = 0.0;
                  if (v21 < -v48)
                    v49 = v21 + v48;
                }
                else
                {
                  v49 = v21 - v48;
                }
                v40 = v49 * v49;
              }
              v23 = v40 / (v22 + v16[4]);
            }
            else
            {
              v41 = v39;
              v42 = v21 + v39;
              if (v21 >= -v39)
                v42 = 0.0;
              if (v21 > v41)
                v42 = v21 - v41;
              if (v39 == 0.0)
                v42 = v21;
              v43 = v22 + v16[4];
              v44 = -v42 / v43;
              if (v44 > v38)
                v44 = v38;
              v45 = (float)-v38;
              if (v44 >= v45)
                v45 = v44;
              v46 = v43 * 0.5 * (v45 * v45) + v21 * v45;
              v47 = v46 + v41 * fabs(v45);
              if (v39 != 0.0)
                v46 = v47;
              v23 = v46 * -2.0;
            }
          }
          v50 = v24 + v23 - *(float *)(v19 + 40 * a2 + 16);
          v51 = v9 + 56 * a2;
          v53 = *(float *)(v51 + 40);
          v52 = v51 + 40;
          v54 = (unsigned int *)(v52 + 4);
          v55 = v53 < v50;
          v56 = v53 <= v50;
          if ((*(_DWORD *)(v52 + 4) & 0x7FFFFFFFu) <= a4)
            v57 = v55;
          else
            v57 = v56;
          if (v57)
          {
            v58 = (float)(v15 + a9) * 0.5;
            *(float *)v52 = v50;
            v59 = a4 | 0x80000000;
            if (a3 != -1)
              v59 = a4;
            *v54 = v59;
            *(float *)(v9 + 56 * a2 + 48) = v58;
          }
        }
      }
    }
    *v10 = v18 + a7;
    v10[1] = v11 + a8;
  }
  *v12 = a9;
  return result;
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::UpdateSolution(xgboost_old::ColBatch const&,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix const&,xgboost_old::BoosterInfo const&)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::UpdateSolution(xgboost_old::ColBatch const&,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix const&,xgboost_old::BoosterInfo const&)::{lambda(unsigned long)#1} const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v4;
  __int128 v5;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x80000002186FB9D5 & 0x7FFFFFFFFFFFFFFFLL)
        || (result = strcmp((const char *)result, (const char *)(0x80000002186FB9D5 & 0x7FFFFFFFFFFFFFFFLL)),
            !(_DWORD)result))
      {
        *(_QWORD *)a2 = v4;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
    }
  }
  else
  {
    v5 = *(_OWORD *)result;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

uint64_t boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::UpdateSolution(xgboost_old::ColBatch const&,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix const&,xgboost_old::BoosterInfo const&)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::UpdateSolution(xgboost_old::ColBatch const&,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix const&,xgboost_old::BoosterInfo const&)::{lambda(unsigned long)#1} const&)::{lambda(void)#1},void>::invoke(uint64_t result)
{
  unint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(result + 8);
  if (v1 < *(_QWORD *)(result + 16))
  {
    v2 = result;
    do
      result = xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::UpdateSolution(xgboost_old::ColBatch const&,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix const&,xgboost_old::BoosterInfo const&)::{lambda(unsigned long)#1}::operator()(*(turi::thread **)v2, v1++);
    while (v1 < *(_QWORD *)(v2 + 16));
  }
  return result;
}

void turi::parallel_for<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::ParallelFindSplit(xgboost_old::SparseBatch::Inst const&,unsigned int,xgboost_old::IFMatrix const&,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::BoosterInfo const&)::{lambda(unsigned long)#1}>(turi::thread_pool *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v5;
  turi::thread_pool *instance;
  turi::thread *v7;
  turi::thread_pool *tls_data;
  BOOL v9;
  turi::thread_pool *v10;
  uint64_t v11;
  double v12;
  double v13;
  turi::thread *v14;
  unint64_t v15;
  uint64_t v16[4];
  _BYTE v17[192];
  uint64_t v18;

  v5 = (unint64_t)a1;
  v18 = *MEMORY[0x24BDAC8D0];
  instance = (turi::thread_pool *)turi::thread_pool::get_instance(a1);
  v7 = (turi::thread *)turi::thread_pool::size(instance);
  tls_data = (turi::thread_pool *)turi::thread::get_tls_data(v7);
  if (*((_BYTE *)tls_data + 8))
    v9 = 0;
  else
    v9 = (unint64_t)v7 > 1;
  if (v9)
  {
    v10 = (turi::thread_pool *)turi::thread_pool::get_instance(tls_data);
    turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)v17, v10);
    v11 = 0;
    v12 = (double)(a2 - v5) / (double)(unint64_t)v7;
    v13 = (double)v5;
    do
    {
      v14 = (turi::thread *)(v11 + 1);
      v15 = (unint64_t)(v13 + v12 * (double)(unint64_t)(v11 + 1));
      if ((turi::thread *)v11 == (turi::thread *)((char *)v7 - 1))
        v15 = a2;
      v16[2] = (unint64_t)(v13 + v12 * (double)(unint64_t)v11);
      v16[3] = v15;
      v16[0] = (uint64_t)boost::function0<void>::assign_to<void turi::parallel_for<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::ParallelFindSplit(xgboost_old::SparseBatch::Inst const&,unsigned int,xgboost_old::IFMatrix const&,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::BoosterInfo const&)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::ParallelFindSplit(xgboost_old::SparseBatch::Inst const&,unsigned int,xgboost_old::IFMatrix const&,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::BoosterInfo const&)::{lambda(unsigned long)#1} const&)::{lambda(void)#1}>(xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::ParallelFindSplit(xgboost_old::SparseBatch::Inst const&,unsigned int,xgboost_old::IFMatrix const&,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::BoosterInfo const&)::{lambda(unsigned long)#1})::stored_vtable
             + 1;
      v16[1] = a3;
      turi::parallel_task_queue::launch((uint64_t)v17, (uint64_t)v16, v11);
      boost::function0<void>::~function0(v16);
      v11 = (uint64_t)v14;
    }
    while (v14 != v7);
    turi::parallel_task_queue::join((turi::parallel_task_queue *)v17);
    turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)v17);
  }
  else if (a2 > v5)
  {
    do
      xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::ParallelFindSplit(xgboost_old::SparseBatch::Inst const&,unsigned int,xgboost_old::IFMatrix const&,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::BoosterInfo const&)::{lambda(unsigned long)#1}::operator()(a3, v5++);
    while (a2 != v5);
  }
}

void sub_2183D2480(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)va);
  _Unwind_Resume(a1);
}

void std::__function::__func<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::ParallelFindSplit(xgboost_old::SparseBatch::Inst const&,unsigned int,xgboost_old::IFMatrix const&,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::BoosterInfo const&)::{lambda(unsigned long,unsigned long)#1},std::allocator<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::ParallelFindSplit(xgboost_old::SparseBatch::Inst const&,unsigned int,xgboost_old::IFMatrix const&,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::BoosterInfo const&)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

__n128 std::__function::__func<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::ParallelFindSplit(xgboost_old::SparseBatch::Inst const&,unsigned int,xgboost_old::IFMatrix const&,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::BoosterInfo const&)::{lambda(unsigned long,unsigned long)#1},std::allocator<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::ParallelFindSplit(xgboost_old::SparseBatch::Inst const&,unsigned int,xgboost_old::IFMatrix const&,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::BoosterInfo const&)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &unk_24D93E600;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 std::__function::__func<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::ParallelFindSplit(xgboost_old::SparseBatch::Inst const&,unsigned int,xgboost_old::IFMatrix const&,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::BoosterInfo const&)::{lambda(unsigned long,unsigned long)#1},std::allocator<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::ParallelFindSplit(xgboost_old::SparseBatch::Inst const&,unsigned int,xgboost_old::IFMatrix const&,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::BoosterInfo const&)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &unk_24D93E600;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

double *std::__function::__func<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::ParallelFindSplit(xgboost_old::SparseBatch::Inst const&,unsigned int,xgboost_old::IFMatrix const&,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::BoosterInfo const&)::{lambda(unsigned long,unsigned long)#1},std::allocator<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::ParallelFindSplit(xgboost_old::SparseBatch::Inst const&,unsigned int,xgboost_old::IFMatrix const&,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::BoosterInfo const&)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::operator()(uint64_t a1, uint64_t *a2, unint64_t *a3)
{
  return std::__invoke_void_return_wrapper<void,true>::__call[abi:ne180100]<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::ParallelFindSplit(xgboost_old::SparseBatch::Inst const&,unsigned int,xgboost_old::IFMatrix const&,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::BoosterInfo const&)::{lambda(unsigned long,unsigned long)#1} &,unsigned long,unsigned long>((double *)(a1 + 8), a2, a3);
}

uint64_t std::__function::__func<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::ParallelFindSplit(xgboost_old::SparseBatch::Inst const&,unsigned int,xgboost_old::IFMatrix const&,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::BoosterInfo const&)::{lambda(unsigned long,unsigned long)#1},std::allocator<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::ParallelFindSplit(xgboost_old::SparseBatch::Inst const&,unsigned int,xgboost_old::IFMatrix const&,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::BoosterInfo const&)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::ParallelFindSplit(xgboost_old::SparseBatch::Inst const&,unsigned int,xgboost_old::IFMatrix const&,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::BoosterInfo const&)::{lambda(unsigned long,unsigned long)#1},std::allocator<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::ParallelFindSplit(xgboost_old::SparseBatch::Inst const&,unsigned int,xgboost_old::IFMatrix const&,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::BoosterInfo const&)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::target_type()
{
}

double *std::__invoke_void_return_wrapper<void,true>::__call[abi:ne180100]<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::ParallelFindSplit(xgboost_old::SparseBatch::Inst const&,unsigned int,xgboost_old::IFMatrix const&,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::BoosterInfo const&)::{lambda(unsigned long,unsigned long)#1} &,unsigned long,unsigned long>(double *result, uint64_t *a2, unint64_t *a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  uint64_t v23;
  double v24;
  float64x2_t v25;

  v3 = *a2;
  v4 = *a3;
  v5 = *(_QWORD *)result;
  v6 = (uint64_t *)*((_QWORD *)result + 1);
  v7 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)result + 72) + 24 * *a2);
  v8 = *v6;
  if (v6[1] != *v6)
  {
    v9 = 0;
    do
    {
      v10 = (_QWORD *)(*v7 + 56 * *(int *)(v8 + 4 * v9));
      *v10 = 0;
      v10[1] = 0;
      ++v9;
      v8 = **((_QWORD **)result + 1);
    }
    while (v9 < (*(_QWORD *)(*((_QWORD *)result + 1) + 8) - v8) >> 2);
  }
  v11 = (uint64_t *)*((_QWORD *)result + 2);
  v12 = *((unsigned int *)v11 + 2);
  v13 = (v4 + v12 - 1) / v4;
  v14 = v13 * v3 + v13;
  if (v14 >= v12)
    v14 = *((unsigned int *)v11 + 2);
  v15 = v13 * v3;
  if ((int)v13 * (int)v3 < v14)
  {
    v16 = *v11;
    v17 = *(_QWORD *)(v5 + 48);
    v18 = v15;
    v19 = (_QWORD *)*((_QWORD *)result + 3);
    do
    {
      v20 = *(unsigned int *)(v16 + 8 * v18);
      v21 = *(_DWORD *)(v17 + 4 * v20);
      if ((v21 & 0x80000000) == 0)
      {
        v22 = *(_DWORD *)(v16 + 8 * v18 + 4);
        v23 = *v7;
        result = (double *)(*v7 + 56 * v21);
        v24 = result[1];
        if (v24 == 0.0)
          *(_DWORD *)(v23 + 56 * v21 + 36) = v22;
        v25.f64[0] = *result;
        v25.f64[1] = v24;
        *(float64x2_t *)result = vaddq_f64(v25, vcvtq_f64_f32(*(float32x2_t *)(*v19 + 8 * v20)));
        *(_DWORD *)(v23 + 56 * v21 + 32) = v22;
      }
      ++v18;
    }
    while (v18 != v14);
  }
  return result;
}

uint64_t xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::ParallelFindSplit(xgboost_old::SparseBatch::Inst const&,unsigned int,xgboost_old::IFMatrix const&,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::BoosterInfo const&)::{lambda(unsigned long)#1}::operator()(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  double *v11;
  double v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double *v20;
  float v21;
  float v22;
  float v23;
  uint64_t v24;
  double *v25;
  double v26;
  double v27;
  float *v28;
  double v29;
  double v31;
  double v32;
  double v33;
  float v34;
  float v35;
  double v36;
  double v37;
  uint64_t v38;
  double *v39;
  double v40;
  float *v41;
  double v42;
  double v44;
  double v45;
  double v46;
  float v47;
  float v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  float v69;
  float v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;
  float v81;
  uint64_t v82;
  uint64_t v83;
  float v84;
  unsigned int v85;
  _BOOL4 v86;
  _BOOL4 v87;
  _BOOL4 v88;
  double v89;
  double v90;
  double v91;
  float v92;
  float v93;
  double v94;
  double v95;
  double v96;
  double v97;
  double v98;
  double v99;
  double v100;
  double v101;
  double v102;
  double v103;
  float v104;
  uint64_t v105;
  uint64_t v106;
  float v107;
  unsigned int v108;
  _BOOL4 v109;
  _BOOL4 v110;
  _BOOL4 v111;
  uint64_t v112;
  double *v113;
  double v114;
  float *v115;
  double v116;
  uint64_t v118;
  uint64_t v119;
  double v120;
  double v121;
  float v122;
  float v123;
  double v124;
  double v125;
  double v126;
  double v127;
  double v128;
  double v129;
  double v130;
  double v131;
  double v132;
  double v133;
  uint64_t v134;
  double v135;
  float v136;
  float v137;
  double v138;
  double v139;
  double v140;
  double v141;
  double v142;
  double v143;
  double v144;
  double v145;
  double v146;
  double v147;
  float v148;
  uint64_t v149;
  uint64_t v150;
  float v151;
  unsigned int v152;
  _BOOL4 v153;
  _BOOL4 v154;
  _BOOL4 v155;
  uint64_t v156;
  float v157;

  v2 = *(_QWORD *)(result + 8);
  v3 = *(int *)(**(_QWORD **)result + 4 * a2);
  v4 = *(unsigned int *)(v2 + 16);
  if ((int)v4 >= 1)
  {
    v5 = 0;
    v6 = *(_QWORD *)(v2 + 72);
    v7 = 0.0;
    v8 = 56 * v3;
    v9 = 0.0;
    do
    {
      v10 = *(_QWORD *)(v6 + v5);
      v11 = (double *)(v10 + 56 * (int)v3);
      v12 = *v11;
      v13 = v11[1];
      *v11 = v9;
      v11[1] = v7;
      if (v5)
      {
        v14 = *(_QWORD *)(v6 + v5 - 24) + v8;
        v15 = v10 + v8;
        v16 = *(_DWORD *)(v14 + 32);
        *(_DWORD *)(v14 + 32) = *(_DWORD *)(v15 + 36);
        *(_DWORD *)(v15 + 36) = v16;
      }
      v9 = v9 + v12;
      v7 = v7 + v13;
      v5 += 24;
    }
    while (24 * v4 != v5);
    v17 = 0;
    v18 = *(_QWORD *)(v2 + 72);
    while (1)
    {
      v19 = *(_QWORD *)(v18 + v17);
      v20 = (double *)(v19 + 56 * (int)v3);
      v20[2] = v9;
      v20[3] = v7;
      if (!v17)
        break;
      v21 = *(float *)(*(_QWORD *)(v18 + v17 - 24) + v8 + 32);
      v22 = *(float *)(v19 + v8 + 36);
      if (vabds_f32(v21, v22) > 0.00002)
      {
        v23 = (float)(v21 - v22) * 0.5;
        if (**(_BYTE **)(result + 16))
        {
          v24 = *(_QWORD *)(v2 + 96);
          v25 = (double *)(v24 + 40 * (int)v3);
          v26 = v20[1];
          v27 = v25[1] - v26;
          v28 = *(float **)(v2 + 8);
          v29 = v28[3];
          if (v27 >= v29 && v26 >= v29)
          {
            v31 = *v20;
            v32 = 0.0;
            v33 = 0.0;
            if (v26 >= v29)
            {
              v34 = v28[7];
              v35 = v28[5];
              if (v34 == 0.0)
              {
                if (v35 == 0.0)
                {
                  v36 = v31 * v31;
                }
                else
                {
                  v89 = v35;
                  if (v31 <= v89)
                  {
                    v90 = 0.0;
                    if (v31 < -v89)
                      v90 = v31 + v89;
                  }
                  else
                  {
                    v90 = v31 - v89;
                  }
                  v36 = v90 * v90;
                }
                v33 = v36 / (v26 + v28[4]);
              }
              else
              {
                v60 = v35;
                v61 = v31 + v35;
                if (v31 >= -v35)
                  v61 = 0.0;
                if (v31 > v60)
                  v61 = v31 - v60;
                if (v35 == 0.0)
                  v61 = *v20;
                v62 = v26 + v28[4];
                v63 = -v61 / v62;
                if (v63 > v34)
                  v63 = v34;
                v64 = (float)-v34;
                if (v63 >= v64)
                  v64 = v63;
                v65 = v62 * 0.5 * (v64 * v64) + v31 * v64;
                v66 = v65 + v60 * fabs(v64);
                if (v35 == 0.0)
                  v67 = v65;
                else
                  v67 = v66;
                v33 = v67 * -2.0;
              }
            }
            if (v27 >= v29)
            {
              v91 = *v25 - v31;
              v92 = v28[7];
              v93 = v28[5];
              if (v92 == 0.0)
              {
                if (v93 == 0.0)
                {
                  v94 = v91 * v91;
                }
                else
                {
                  v102 = v93;
                  if (v91 <= v102)
                  {
                    v103 = 0.0;
                    if (v91 < -v102)
                      v103 = v91 + v102;
                  }
                  else
                  {
                    v103 = v91 - v102;
                  }
                  v94 = v103 * v103;
                }
                v32 = v94 / (v27 + v28[4]);
              }
              else
              {
                v95 = v93;
                v96 = v91 + v93;
                if (v91 >= -v93)
                  v96 = 0.0;
                if (v91 > v95)
                  v96 = v91 - v95;
                if (v93 == 0.0)
                  v96 = v91;
                v97 = v27 + v28[4];
                v98 = -v96 / v97;
                if (v98 > v92)
                  v98 = v92;
                v99 = (float)-v92;
                if (v98 >= v99)
                  v99 = v98;
                v100 = v97 * 0.5 * (v99 * v99) + v91 * v99;
                v101 = v100 + v95 * fabs(v99);
                if (v93 != 0.0)
                  v100 = v101;
                v32 = v100 * -2.0;
              }
            }
            v104 = v33 + v32 - *(float *)(v24 + 40 * (int)v3 + 16);
            v105 = v19 + 56 * (int)v3;
            v107 = *(float *)(v105 + 40);
            v106 = v105 + 40;
            v108 = **(_DWORD **)(result + 24);
            v109 = v107 < v104;
            v110 = v107 <= v104;
            if ((*(_DWORD *)(v106 + 4) & 0x7FFFFFFFu) <= v108)
              v111 = v109;
            else
              v111 = v110;
            if (v111)
            {
              *(float *)v106 = v104;
              *(_DWORD *)(v106 + 4) = v108;
              *(float *)(v19 + 56 * (int)v3 + 48) = v23;
            }
          }
        }
        goto LABEL_19;
      }
LABEL_90:
      v17 += 24;
      if (24 * v4 == v17)
        goto LABEL_127;
    }
    v23 = *(float *)(v19 + 56 * (int)v3 + 36) + -0.00001;
LABEL_19:
    if (**(_BYTE **)(result + 32))
    {
      v37 = v7 - v20[1];
      v38 = *(_QWORD *)(v2 + 96);
      v39 = (double *)(v38 + 40 * (int)v3);
      v40 = v39[1] - v37;
      v41 = *(float **)(v2 + 8);
      v42 = v41[3];
      if (v40 >= v42 && v37 >= v42)
      {
        v44 = v9 - *v20;
        v45 = 0.0;
        v46 = 0.0;
        if (v37 >= v42)
        {
          v47 = v41[7];
          v48 = v41[5];
          if (v47 == 0.0)
          {
            if (v48 == 0.0)
            {
              v49 = v44 * v44;
            }
            else
            {
              v58 = v48;
              if (v44 <= v58)
              {
                v59 = 0.0;
                if (v44 < -v58)
                  v59 = v44 + v58;
              }
              else
              {
                v59 = v44 - v58;
              }
              v49 = v59 * v59;
            }
            v46 = v49 / (v37 + v41[4]);
          }
          else
          {
            v50 = v48;
            v51 = v44 + v48;
            if (v44 >= -v48)
              v51 = 0.0;
            if (v44 > v50)
              v51 = v44 - v50;
            if (v48 == 0.0)
              v51 = v9 - *v20;
            v52 = v37 + v41[4];
            v53 = -v51 / v52;
            if (v53 > v47)
              v53 = v47;
            v54 = (float)-v47;
            if (v53 >= v54)
              v54 = v53;
            v55 = v52 * 0.5 * (v54 * v54) + v44 * v54;
            v56 = v55 + v50 * fabs(v54);
            if (v48 == 0.0)
              v57 = v55;
            else
              v57 = v56;
            v46 = v57 * -2.0;
          }
        }
        if (v40 >= v42)
        {
          v68 = *v39 - v44;
          v69 = v41[7];
          v70 = v41[5];
          if (v69 == 0.0)
          {
            if (v70 == 0.0)
            {
              v71 = v68 * v68;
            }
            else
            {
              v79 = v70;
              if (v68 <= v79)
              {
                v80 = 0.0;
                if (v68 < -v79)
                  v80 = v68 + v79;
              }
              else
              {
                v80 = v68 - v79;
              }
              v71 = v80 * v80;
            }
            v45 = v71 / (v40 + v41[4]);
          }
          else
          {
            v72 = v70;
            v73 = v68 + v70;
            if (v68 >= -v70)
              v73 = 0.0;
            if (v68 > v72)
              v73 = v68 - v72;
            if (v70 == 0.0)
              v73 = v68;
            v74 = v40 + v41[4];
            v75 = -v73 / v74;
            if (v75 > v69)
              v75 = v69;
            v76 = (float)-v69;
            if (v75 >= v76)
              v76 = v75;
            v77 = v74 * 0.5 * (v76 * v76) + v68 * v76;
            v78 = v77 + v72 * fabs(v76);
            if (v70 != 0.0)
              v77 = v78;
            v45 = v77 * -2.0;
          }
        }
        v81 = v46 + v45 - *(float *)(v38 + 40 * (int)v3 + 16);
        v82 = v19 + 56 * (int)v3;
        v84 = *(float *)(v82 + 40);
        v83 = v82 + 40;
        v85 = **(_DWORD **)(result + 24);
        v86 = v84 < v81;
        v87 = v84 <= v81;
        if ((*(_DWORD *)(v83 + 4) & 0x7FFFFFFFu) <= v85)
          v88 = v86;
        else
          v88 = v87;
        if (v88)
        {
          *(float *)v83 = v81;
          *(_DWORD *)(v83 + 4) = v85 | 0x80000000;
          *(float *)(v19 + 56 * (int)v3 + 48) = v23;
        }
      }
    }
    goto LABEL_90;
  }
  v7 = 0.0;
  v9 = 0.0;
LABEL_127:
  if (**(_BYTE **)(result + 32))
  {
    v112 = *(_QWORD *)(v2 + 96);
    v113 = (double *)(v112 + 40 * (int)v3);
    v114 = v113[1] - v7;
    v115 = *(float **)(v2 + 8);
    v116 = v115[3];
    if (v114 >= v116 && v7 >= v116)
    {
      v118 = *(_QWORD *)(v2 + 72);
      v119 = 24 * ((int)v4 - 1);
      v120 = 0.0;
      v121 = 0.0;
      if (v7 >= v116)
      {
        v122 = v115[7];
        v123 = v115[5];
        if (v122 == 0.0)
        {
          if (v123 == 0.0)
          {
            v124 = v9 * v9;
          }
          else
          {
            v132 = v123;
            if (v9 <= v132)
            {
              v133 = 0.0;
              if (v9 < -v132)
                v133 = v9 + v132;
            }
            else
            {
              v133 = v9 - v132;
            }
            v124 = v133 * v133;
          }
          v121 = v124 / (v7 + v115[4]);
        }
        else
        {
          v125 = v123;
          v126 = v9;
          if (v123 != 0.0)
          {
            v126 = v9 + v125;
            if (v9 >= -v125)
              v126 = 0.0;
            if (v9 > v125)
              v126 = v9 - v125;
          }
          v127 = v7 + v115[4];
          v128 = -v126 / v127;
          if (v128 > v122)
            v128 = v122;
          v129 = (float)-v122;
          if (v128 >= v129)
            v129 = v128;
          v130 = v127 * 0.5 * (v129 * v129) + v9 * v129;
          v131 = v130 + v125 * fabs(v129);
          if (v123 != 0.0)
            v130 = v131;
          v121 = v130 * -2.0;
        }
      }
      v134 = *(_QWORD *)(v118 + v119);
      if (v114 >= v116)
      {
        v135 = *v113 - v9;
        v136 = v115[7];
        v137 = v115[5];
        if (v136 == 0.0)
        {
          if (v137 == 0.0)
          {
            v138 = v135 * v135;
          }
          else
          {
            v146 = v137;
            if (v135 <= v146)
            {
              v147 = 0.0;
              if (v135 < -v146)
                v147 = v135 + v146;
            }
            else
            {
              v147 = v135 - v146;
            }
            v138 = v147 * v147;
          }
          v120 = v138 / (v114 + v115[4]);
        }
        else
        {
          v139 = v137;
          v140 = v135 + v137;
          if (v135 >= -v137)
            v140 = 0.0;
          if (v135 > v139)
            v140 = v135 - v139;
          if (v137 == 0.0)
            v140 = v135;
          v141 = v114 + v115[4];
          v142 = -v140 / v141;
          if (v142 > v136)
            v142 = v136;
          v143 = (float)-v136;
          if (v142 >= v143)
            v143 = v142;
          v144 = v141 * 0.5 * (v143 * v143) + v135 * v143;
          v145 = v144 + v139 * fabs(v143);
          if (v137 != 0.0)
            v144 = v145;
          v120 = v144 * -2.0;
        }
      }
      v148 = v121 + v120 - *(float *)(v112 + 40 * (int)v3 + 16);
      v149 = v134 + 56 * (int)v3;
      v151 = *(float *)(v149 + 40);
      v150 = v149 + 40;
      v152 = **(_DWORD **)(result + 24);
      v153 = v151 < v148;
      v154 = v151 <= v148;
      if ((*(_DWORD *)(v150 + 4) & 0x7FFFFFFFu) <= v152)
        v155 = v153;
      else
        v155 = v154;
      if (v155)
      {
        v156 = v134 + 56 * (int)v3;
        v157 = *(float *)(v156 + 32) + 0.00001;
        *(float *)v150 = v148;
        *(_DWORD *)(v150 + 4) = v152 | 0x80000000;
        *(float *)(v156 + 48) = v157;
      }
    }
  }
  return result;
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::ParallelFindSplit(xgboost_old::SparseBatch::Inst const&,unsigned int,xgboost_old::IFMatrix const&,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::BoosterInfo const&)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::ParallelFindSplit(xgboost_old::SparseBatch::Inst const&,unsigned int,xgboost_old::IFMatrix const&,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::BoosterInfo const&)::{lambda(unsigned long)#1} const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v4;
  __int128 v5;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x80000002186FBC61 & 0x7FFFFFFFFFFFFFFFLL)
        || (result = strcmp((const char *)result, (const char *)(0x80000002186FBC61 & 0x7FFFFFFFFFFFFFFFLL)),
            !(_DWORD)result))
      {
        *(_QWORD *)a2 = v4;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
    }
  }
  else
  {
    v5 = *(_OWORD *)result;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

uint64_t boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::ParallelFindSplit(xgboost_old::SparseBatch::Inst const&,unsigned int,xgboost_old::IFMatrix const&,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::BoosterInfo const&)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::ParallelFindSplit(xgboost_old::SparseBatch::Inst const&,unsigned int,xgboost_old::IFMatrix const&,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::BoosterInfo const&)::{lambda(unsigned long)#1} const&)::{lambda(void)#1},void>::invoke(uint64_t result)
{
  unint64_t v1;
  uint64_t *v2;

  v1 = *(_QWORD *)(result + 8);
  if (v1 < *(_QWORD *)(result + 16))
  {
    v2 = (uint64_t *)result;
    do
      result = xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::ParallelFindSplit(xgboost_old::SparseBatch::Inst const&,unsigned int,xgboost_old::IFMatrix const&,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::BoosterInfo const&)::{lambda(unsigned long)#1}::operator()(*v2, v1++);
    while (v1 < v2[2]);
  }
  return result;
}

void std::__function::__func<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::ParallelFindSplit(xgboost_old::SparseBatch::Inst const&,unsigned int,xgboost_old::IFMatrix const&,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::BoosterInfo const&)::{lambda(unsigned long,unsigned long)#2},std::allocator<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::ParallelFindSplit(xgboost_old::SparseBatch::Inst const&,unsigned int,xgboost_old::IFMatrix const&,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::BoosterInfo const&)::{lambda(unsigned long,unsigned long)#2}>,void ()(unsigned long,unsigned long)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

__n128 std::__function::__func<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::ParallelFindSplit(xgboost_old::SparseBatch::Inst const&,unsigned int,xgboost_old::IFMatrix const&,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::BoosterInfo const&)::{lambda(unsigned long,unsigned long)#2},std::allocator<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::ParallelFindSplit(xgboost_old::SparseBatch::Inst const&,unsigned int,xgboost_old::IFMatrix const&,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::BoosterInfo const&)::{lambda(unsigned long,unsigned long)#2}>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x40uLL);
  *(_QWORD *)v2 = &unk_24D93E6A0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  *((_QWORD *)v2 + 7) = *(_QWORD *)(a1 + 56);
  return result;
}

__n128 std::__function::__func<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::ParallelFindSplit(xgboost_old::SparseBatch::Inst const&,unsigned int,xgboost_old::IFMatrix const&,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::BoosterInfo const&)::{lambda(unsigned long,unsigned long)#2},std::allocator<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::ParallelFindSplit(xgboost_old::SparseBatch::Inst const&,unsigned int,xgboost_old::IFMatrix const&,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::BoosterInfo const&)::{lambda(unsigned long,unsigned long)#2}>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &unk_24D93E6A0;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  v4 = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

_QWORD *std::__function::__func<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::ParallelFindSplit(xgboost_old::SparseBatch::Inst const&,unsigned int,xgboost_old::IFMatrix const&,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::BoosterInfo const&)::{lambda(unsigned long,unsigned long)#2},std::allocator<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::ParallelFindSplit(xgboost_old::SparseBatch::Inst const&,unsigned int,xgboost_old::IFMatrix const&,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::BoosterInfo const&)::{lambda(unsigned long,unsigned long)#2}>,void ()(unsigned long,unsigned long)>::operator()(uint64_t a1, uint64_t *a2, unint64_t *a3)
{
  return xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::ParallelFindSplit(xgboost_old::SparseBatch::Inst const&,unsigned int,xgboost_old::IFMatrix const&,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::BoosterInfo const&)::{lambda(unsigned long,unsigned long)#2}::operator()((_QWORD *)(a1 + 8), *a2, *a3);
}

uint64_t std::__function::__func<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::ParallelFindSplit(xgboost_old::SparseBatch::Inst const&,unsigned int,xgboost_old::IFMatrix const&,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::BoosterInfo const&)::{lambda(unsigned long,unsigned long)#2},std::allocator<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::ParallelFindSplit(xgboost_old::SparseBatch::Inst const&,unsigned int,xgboost_old::IFMatrix const&,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::BoosterInfo const&)::{lambda(unsigned long,unsigned long)#2}>,void ()(unsigned long,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::ParallelFindSplit(xgboost_old::SparseBatch::Inst const&,unsigned int,xgboost_old::IFMatrix const&,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::BoosterInfo const&)::{lambda(unsigned long,unsigned long)#2},std::allocator<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::ParallelFindSplit(xgboost_old::SparseBatch::Inst const&,unsigned int,xgboost_old::IFMatrix const&,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::BoosterInfo const&)::{lambda(unsigned long,unsigned long)#2}>,void ()(unsigned long,unsigned long)>::target_type()
{
}

_QWORD *xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::ParallelFindSplit(xgboost_old::SparseBatch::Inst const&,unsigned int,xgboost_old::IFMatrix const&,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::BoosterInfo const&)::{lambda(unsigned long,unsigned long)#2}::operator()(_QWORD *result, uint64_t a2, unint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  float v14;
  uint64_t v15;
  float64x2_t *v16;
  double v17;
  float *v18;
  uint64_t v19;
  float v20;
  float v21;
  float64x2_t v22;
  uint64_t v23;
  double *v24;
  double v25;
  float *v26;
  double v27;
  double v29;
  double v30;
  float v31;
  float v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  float v45;
  float v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  float v57;
  uint64_t v58;
  uint64_t v59;
  float v60;
  unsigned int v61;
  _BOOL4 v62;
  _BOOL4 v63;
  _BOOL4 v64;
  uint64_t v65;
  double v66;
  uint64_t v67;
  double *v68;
  double v69;
  float *v70;
  double v71;
  double v73;
  double v74;
  double v75;
  float v76;
  float v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double v82;
  double v83;
  double v84;
  double v85;
  double v86;
  double v87;
  double v88;
  double v89;
  float v90;
  float v91;
  double v92;
  double v93;
  double v94;
  double v95;
  double v96;
  double v97;
  double v98;
  double v99;
  double v100;
  double v101;
  float v102;
  uint64_t v103;
  uint64_t v104;
  float v105;
  unsigned int v106;
  _BOOL4 v107;
  _BOOL4 v108;
  _BOOL4 v109;

  v3 = (uint64_t *)result[1];
  v4 = *((unsigned int *)v3 + 2);
  v5 = (a3 + v4 - 1) / a3;
  v6 = v5 + v5 * a2;
  if (v4 >= v6)
    v4 = v6;
  else
    v4 = v4;
  LODWORD(v7) = v5 * a2;
  if (v4 > (int)v5 * (int)a2)
  {
    v8 = *result;
    v9 = (uint64_t *)(*(_QWORD *)(*result + 72) + 24 * a2);
    v10 = *v3;
    v11 = *(_QWORD *)(*result + 48);
    v7 = v7;
    do
    {
      v12 = *(unsigned int *)(v10 + 8 * v7);
      v13 = *(_DWORD *)(v11 + 4 * v12);
      if ((v13 & 0x80000000) == 0)
      {
        v14 = *(float *)(v10 + 8 * v7 + 4);
        v15 = *v9;
        v16 = (float64x2_t *)(*v9 + 56 * v13);
        v17 = v16->f64[1];
        if (v17 == 0.0)
        {
          *v16 = vaddq_f64(*v16, vcvtq_f64_f32(*(float32x2_t *)(*(_QWORD *)result[2] + 8 * v12)));
          v18 = (float *)(v15 + 56 * v13 + 36);
        }
        else
        {
          v19 = v15 + 56 * v13;
          v20 = *(float *)(v19 + 36);
          v18 = (float *)(v19 + 36);
          v21 = v20;
          if (vabds_f32(v14, v20) <= 0.00002)
          {
            v22.f64[0] = v16->f64[0];
          }
          else
          {
            v22.f64[0] = v16->f64[0];
            if (*(_BYTE *)result[4])
            {
              v23 = *(_QWORD *)(v8 + 96);
              v24 = (double *)(v23 + 40 * v13);
              v25 = v24[1] - v17;
              v26 = *(float **)(v8 + 8);
              v27 = v26[3];
              if (v25 >= v27 && v17 >= v27)
              {
                v29 = 0.0;
                v30 = 0.0;
                if (v17 >= v27)
                {
                  v31 = v26[7];
                  v32 = v26[5];
                  if (v31 == 0.0)
                  {
                    if (v32 == 0.0)
                    {
                      v33 = v22.f64[0] * v22.f64[0];
                    }
                    else
                    {
                      v42 = v32;
                      if (v22.f64[0] <= v42)
                      {
                        v43 = 0.0;
                        if (v22.f64[0] < -v42)
                          v43 = v22.f64[0] + v42;
                      }
                      else
                      {
                        v43 = v22.f64[0] - v42;
                      }
                      v33 = v43 * v43;
                    }
                    v30 = v33 / (v17 + v26[4]);
                  }
                  else
                  {
                    v34 = v32;
                    v35 = v22.f64[0] + v32;
                    if (v22.f64[0] >= -v32)
                      v35 = 0.0;
                    if (v22.f64[0] > v34)
                      v35 = v22.f64[0] - v34;
                    if (v32 == 0.0)
                      v35 = v16->f64[0];
                    v36 = v17 + v26[4];
                    v37 = -v35 / v36;
                    if (v37 > v31)
                      v37 = v31;
                    v38 = (float)-v31;
                    if (v37 >= v38)
                      v38 = v37;
                    v39 = v36 * 0.5 * (v38 * v38) + v22.f64[0] * v38;
                    v40 = v39 + v34 * fabs(v38);
                    if (v32 == 0.0)
                      v41 = v39;
                    else
                      v41 = v40;
                    v30 = v41 * -2.0;
                  }
                }
                if (v25 >= v27)
                {
                  v44 = *v24 - v22.f64[0];
                  v45 = v26[7];
                  v46 = v26[5];
                  if (v45 == 0.0)
                  {
                    if (v46 == 0.0)
                    {
                      v47 = v44 * v44;
                    }
                    else
                    {
                      v55 = v46;
                      if (v44 <= v55)
                      {
                        v56 = 0.0;
                        if (v44 < -v55)
                          v56 = v44 + v55;
                      }
                      else
                      {
                        v56 = v44 - v55;
                      }
                      v47 = v56 * v56;
                    }
                    v29 = v47 / (v25 + v26[4]);
                  }
                  else
                  {
                    v48 = v46;
                    v49 = v44 + v46;
                    if (v44 >= -v46)
                      v49 = 0.0;
                    if (v44 > v48)
                      v49 = v44 - v48;
                    if (v46 == 0.0)
                      v49 = *v24 - v22.f64[0];
                    v50 = v25 + v26[4];
                    v51 = -v49 / v50;
                    if (v51 > v45)
                      v51 = v45;
                    v52 = (float)-v45;
                    if (v51 >= v52)
                      v52 = v51;
                    v53 = v50 * 0.5 * (v52 * v52) + v44 * v52;
                    v54 = v53 + v48 * fabs(v52);
                    if (v46 != 0.0)
                      v53 = v54;
                    v29 = v53 * -2.0;
                  }
                }
                v57 = v30 + v29 - *(float *)(v23 + 40 * v13 + 16);
                v58 = v15 + 56 * v13;
                v60 = *(float *)(v58 + 40);
                v59 = v58 + 40;
                v61 = *(_DWORD *)result[5];
                v62 = v60 < v57;
                v63 = v60 <= v57;
                if ((*(_DWORD *)(v59 + 4) & 0x7FFFFFFFu) <= v61)
                  v64 = v62;
                else
                  v64 = v63;
                if (v64)
                {
                  *(float *)v59 = v57;
                  *(_DWORD *)(v59 + 4) = v61;
                  *(float *)(v15 + 56 * v13 + 48) = (float)(v14 + v21) * 0.5;
                }
              }
            }
            if (*(_BYTE *)result[6])
            {
              v65 = v15 + 56 * v13;
              v66 = *(double *)(v65 + 24) - v17;
              v67 = *(_QWORD *)(v8 + 96);
              v68 = (double *)(v67 + 40 * v13);
              v69 = v68[1] - v66;
              v70 = *(float **)(v8 + 8);
              v71 = v70[3];
              if (v69 >= v71 && v66 >= v71)
              {
                v73 = *(double *)(v65 + 16) - v22.f64[0];
                v74 = 0.0;
                v75 = 0.0;
                if (v66 >= v71)
                {
                  v76 = v70[7];
                  v77 = v70[5];
                  if (v76 == 0.0)
                  {
                    if (v77 == 0.0)
                    {
                      v78 = v73 * v73;
                    }
                    else
                    {
                      v87 = v77;
                      if (v73 <= v87)
                      {
                        v88 = 0.0;
                        if (v73 < -v87)
                          v88 = v73 + v87;
                      }
                      else
                      {
                        v88 = v73 - v87;
                      }
                      v78 = v88 * v88;
                    }
                    v75 = v78 / (v66 + v70[4]);
                  }
                  else
                  {
                    v79 = v77;
                    v80 = v73 + v77;
                    if (v73 >= -v77)
                      v80 = 0.0;
                    if (v73 > v79)
                      v80 = v73 - v79;
                    if (v77 == 0.0)
                      v80 = *(double *)(v65 + 16) - v22.f64[0];
                    v81 = v66 + v70[4];
                    v82 = -v80 / v81;
                    if (v82 > v76)
                      v82 = v76;
                    v83 = (float)-v76;
                    if (v82 >= v83)
                      v83 = v82;
                    v84 = v81 * 0.5 * (v83 * v83) + v73 * v83;
                    v85 = v84 + v79 * fabs(v83);
                    if (v77 == 0.0)
                      v86 = v84;
                    else
                      v86 = v85;
                    v75 = v86 * -2.0;
                  }
                }
                if (v69 >= v71)
                {
                  v89 = *v68 - v73;
                  v90 = v70[7];
                  v91 = v70[5];
                  if (v90 == 0.0)
                  {
                    if (v91 == 0.0)
                    {
                      v92 = v89 * v89;
                    }
                    else
                    {
                      v100 = v91;
                      if (v89 <= v100)
                      {
                        v101 = 0.0;
                        if (v89 < -v100)
                          v101 = v89 + v100;
                      }
                      else
                      {
                        v101 = v89 - v100;
                      }
                      v92 = v101 * v101;
                    }
                    v74 = v92 / (v69 + v70[4]);
                  }
                  else
                  {
                    v93 = v91;
                    v94 = v89 + v91;
                    if (v89 >= -v91)
                      v94 = 0.0;
                    if (v89 > v93)
                      v94 = v89 - v93;
                    if (v91 == 0.0)
                      v94 = v89;
                    v95 = v69 + v70[4];
                    v96 = -v94 / v95;
                    if (v96 > v90)
                      v96 = v90;
                    v97 = (float)-v90;
                    if (v96 >= v97)
                      v97 = v96;
                    v98 = v95 * 0.5 * (v97 * v97) + v89 * v97;
                    v99 = v98 + v93 * fabs(v97);
                    if (v91 != 0.0)
                      v98 = v99;
                    v74 = v98 * -2.0;
                  }
                }
                v102 = v75 + v74 - *(float *)(v67 + 40 * v13 + 16);
                v103 = v15 + 56 * v13;
                v105 = *(float *)(v103 + 40);
                v104 = v103 + 40;
                v106 = *(_DWORD *)result[5];
                v107 = v105 < v102;
                v108 = v105 <= v102;
                if ((*(_DWORD *)(v104 + 4) & 0x7FFFFFFFu) <= v106)
                  v109 = v107;
                else
                  v109 = v108;
                if (v109)
                {
                  *(float *)v104 = v102;
                  *(_DWORD *)(v104 + 4) = v106 | 0x80000000;
                  *(float *)(v15 + 56 * v13 + 48) = (float)(v14 + v21) * 0.5;
                }
              }
            }
          }
          v22.f64[1] = v17;
          *v16 = vaddq_f64(v22, vcvtq_f64_f32(*(float32x2_t *)(*(_QWORD *)result[2] + 8 * v12)));
        }
        *v18 = v14;
      }
      ++v7;
    }
    while (v7 != v4);
  }
  return result;
}

void turi::parallel_for<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::SetNonDefaultPosition(std::vector<int> const&,xgboost_old::IFMatrix *,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#1}>(turi::thread_pool *a1, unint64_t a2, uint64_t a3)
{
  turi::thread_pool *instance;
  turi::thread *v7;
  turi::thread_pool *tls_data;
  BOOL v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  float *v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  turi::thread_pool *v19;
  uint64_t v20;
  double v21;
  double v22;
  turi::thread *v23;
  unint64_t v24;
  uint64_t v25[4];
  _BYTE v26[192];
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  instance = (turi::thread_pool *)turi::thread_pool::get_instance(a1);
  v7 = (turi::thread *)turi::thread_pool::size(instance);
  tls_data = (turi::thread_pool *)turi::thread::get_tls_data(v7);
  if (*((_BYTE *)tls_data + 8))
    v9 = 0;
  else
    v9 = (unint64_t)v7 > 1;
  if (v9)
  {
    v19 = (turi::thread_pool *)turi::thread_pool::get_instance(tls_data);
    turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)v26, v19);
    v20 = 0;
    v21 = (double)(a2 - (unint64_t)a1) / (double)(unint64_t)v7;
    v22 = (double)(unint64_t)a1;
    do
    {
      v23 = (turi::thread *)(v20 + 1);
      v24 = (unint64_t)(v22 + v21 * (double)(unint64_t)(v20 + 1));
      if ((turi::thread *)v20 == (turi::thread *)((char *)v7 - 1))
        v24 = a2;
      v25[2] = (unint64_t)(v22 + v21 * (double)(unint64_t)v20);
      v25[3] = v24;
      v25[0] = (uint64_t)boost::function0<void>::assign_to<void turi::parallel_for<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::SetNonDefaultPosition(std::vector<int> const&,xgboost_old::IFMatrix *,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::SetNonDefaultPosition(std::vector<int> const&,xgboost_old::IFMatrix *,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#1} const&)::{lambda(void)#1}>(xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::SetNonDefaultPosition(std::vector<int> const&,xgboost_old::IFMatrix *,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#1})::stored_vtable
             + 1;
      v25[1] = a3;
      turi::parallel_task_queue::launch((uint64_t)v26, (uint64_t)v25, v20);
      boost::function0<void>::~function0(v25);
      v20 = (uint64_t)v23;
    }
    while (v23 != v7);
    turi::parallel_task_queue::join((turi::parallel_task_queue *)v26);
    turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)v26);
  }
  else
  {
    v10 = a2 - (_QWORD)a1;
    if (a2 > (unint64_t)a1)
    {
      v11 = *(_QWORD *)(*(_QWORD *)(a3 + 8) + 48);
      v12 = *(_DWORD **)(a3 + 24);
      v13 = **(_QWORD **)(a3 + 16);
      v14 = (float *)(**(_QWORD **)a3 + 8 * (_QWORD)a1 + 4);
      do
      {
        v15 = *((unsigned int *)v14 - 1);
        v16 = *(_DWORD *)(v11 + 4 * v15);
        v17 = v16 ^ (v16 >> 31);
        v18 = *(_DWORD *)(v13 + 20 * v17 + 4);
        if (v18 != -1 && (*(_DWORD *)(v13 + 20 * v17 + 12) & 0x7FFFFFFF) == *v12)
        {
          if (*v14 >= *(float *)(v13 + 20 * v17 + 16))
            v18 = *(_DWORD *)(v13 + 20 * v17 + 8);
          *(_DWORD *)(v11 + 4 * v15) = v18 ^ (v16 >> 31);
        }
        v14 += 2;
        --v10;
      }
      while (v10);
    }
  }
}

void sub_2183D3934(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)va);
  _Unwind_Resume(a1);
}

int *std::__unique[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<unsigned int *>,std::__wrap_iter<unsigned int *>,std::__equal_to &>(int *a1, int *a2)
{
  int *result;
  int *v4;
  int v5;
  int v6;
  int *v7;
  int v8;

  result = a2;
  if (a1 != a2)
  {
    v4 = a1 + 1;
    do
    {
      if (v4 == a2)
        return a2;
      v5 = *(v4 - 1);
      v6 = *v4++;
    }
    while (v5 != v6);
    v7 = v4 - 2;
    while (v4 != a2)
    {
      v8 = v5;
      v5 = *v4;
      if (v8 != *v4)
      {
        v7[1] = v5;
        ++v7;
      }
      ++v4;
    }
    return v7 + 1;
  }
  return result;
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::SetNonDefaultPosition(std::vector<int> const&,xgboost_old::IFMatrix *,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::SetNonDefaultPosition(std::vector<int> const&,xgboost_old::IFMatrix *,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#1} const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v4;
  __int128 v5;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x80000002186FBEFCLL & 0x7FFFFFFFFFFFFFFFLL)
        || (result = strcmp((const char *)result, (const char *)(0x80000002186FBEFCLL & 0x7FFFFFFFFFFFFFFFLL)),
            !(_DWORD)result))
      {
        *(_QWORD *)a2 = v4;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
    }
  }
  else
  {
    v5 = *(_OWORD *)result;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

float *boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::SetNonDefaultPosition(std::vector<int> const&,xgboost_old::IFMatrix *,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::SetNonDefaultPosition(std::vector<int> const&,xgboost_old::IFMatrix *,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#1} const&)::{lambda(void)#1},void>::invoke(float *result)
{
  unint64_t v1;
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  float *v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;

  v2 = *((_QWORD *)result + 1);
  v1 = *((_QWORD *)result + 2);
  v3 = v1 > v2;
  v4 = v1 - v2;
  if (v3)
  {
    v5 = *(_QWORD *)result;
    v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)result + 8) + 48);
    v7 = **(_QWORD **)(*(_QWORD *)result + 16);
    v8 = (float *)(***(_QWORD ***)result + 8 * v2 + 4);
    do
    {
      v9 = *((unsigned int *)v8 - 1);
      v10 = *(_DWORD *)(v6 + 4 * v9);
      v11 = v10 ^ (v10 >> 31);
      v12 = *(_DWORD *)(v7 + 20 * v11 + 4);
      if (v12 != -1)
      {
        result = (float *)(*(_DWORD *)(v7 + 20 * v11 + 12) & 0x7FFFFFFF);
        if ((_DWORD)result == **(_DWORD **)(v5 + 24))
        {
          result = (float *)(v7 + 20 * v11);
          if (*v8 >= result[4])
            v12 = *(_DWORD *)(v7 + 20 * v11 + 8);
          *(_DWORD *)(v6 + 4 * v9) = v12 ^ (v10 >> 31);
        }
      }
      v8 += 2;
      --v4;
    }
    while (v4);
  }
  return result;
}

void xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::InitData(uint64_t a1, uint64_t *a2, const char *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t *v10;
  uint64_t *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  void **v31;
  unint64_t v32;
  char *v33;
  _DWORD *v34;
  char *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  char *v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  BOOL v49;
  unsigned int v50;
  int v51;
  std::vector<unsigned int>::size_type v52;
  turi::thread *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  void **v58;
  char *v59;
  int v60;
  _QWORD *v61;
  char *v62;
  char *v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  char *v68;
  char *v69;
  int v70;
  void *__p;
  void *v72;
  uint64_t v73;

  xgboost_old::utils::Assert(*(_DWORD *)(a5 + 100) == *(_DWORD *)(a5 + 96), "ColMaker: can only grow new tree", a3);
  v10 = (uint64_t *)(*(uint64_t (**)(const char *))(*(_QWORD *)a3 + 64))(a3);
  v11 = (uint64_t *)(a1 + 48);
  std::vector<int>::resize((std::vector<unsigned int> *)(a1 + 48), (a2[1] - *a2) >> 3);
  v14 = *v10;
  v13 = v10[1];
  if (a4[1] == *a4)
  {
    if (v13 != v14)
    {
      v18 = 0;
      v19 = (v13 - v14) >> 2;
      v20 = *v11;
      if (v19 <= 1)
        v19 = 1;
      do
        *(_DWORD *)(v20 + 4 * *(unsigned int *)(v14 + 4 * v18++)) = 0;
      while (v19 != v18);
      goto LABEL_10;
    }
LABEL_17:
    v25 = 1;
    goto LABEL_20;
  }
  if (v13 == v14)
    goto LABEL_17;
  v15 = 0;
  do
  {
    v16 = *(unsigned int *)(v14 + 4 * v15);
    v17 = *a4;
    *(_DWORD *)(*v11 + 4 * v16) = *(_DWORD *)(*a4 + 4 * v16);
    xgboost_old::utils::Assert(*(_DWORD *)(v17 + 4 * v16) < *(_DWORD *)(a5 + 96), "root index exceed setting", v12);
    ++v15;
    v14 = *v10;
    v13 = v10[1];
  }
  while (v15 < (v13 - *v10) >> 2);
LABEL_10:
  if (v13 == v14)
  {
    v25 = 1;
  }
  else
  {
    v21 = 0;
    v22 = (v13 - v14) >> 2;
    v23 = *a2;
    if (v22 <= 1)
      v22 = 1;
    do
    {
      v24 = *(unsigned int *)(v14 + 4 * v21);
      if (*(float *)(v23 + 8 * v24 + 4) < 0.0)
        *(_DWORD *)(*v11 + 4 * v24) = ~*(_DWORD *)(*v11 + 4 * v24);
      ++v21;
    }
    while (v22 != v21);
    v25 = 0;
  }
  v13 = v14;
LABEL_20:
  if (*(float *)(*(_QWORD *)(a1 + 8) + 32) < 1.0 && (v25 & 1) == 0)
  {
    v26 = 0;
    do
    {
      v27 = *(unsigned int *)(v13 + 4 * v26);
      if (*(float *)(*a2 + 8 * v27 + 4) >= 0.0)
      {
        v28 = *(float *)(*(_QWORD *)(a1 + 8) + 32);
        if ((double)rand() * 4.65661287e-10 >= v28)
          *(_DWORD *)(*v11 + 4 * v27) = ~*(_DWORD *)(*v11 + 4 * v27);
      }
      ++v26;
      v13 = *v10;
    }
    while (v26 < (v10[1] - *v10) >> 2);
  }
  v29 = (*(unsigned int (**)(const char *))(*(_QWORD *)a3 + 40))(a3);
  if (v29)
  {
    v30 = 0;
    v31 = (void **)(a1 + 24);
    do
    {
      if ((*(uint64_t (**)(const char *, uint64_t))(*(_QWORD *)a3 + 48))(a3, v30))
      {
        v33 = *(char **)(a1 + 32);
        v32 = *(_QWORD *)(a1 + 40);
        if ((unint64_t)v33 >= v32)
        {
          v35 = (char *)*v31;
          v36 = (v33 - (_BYTE *)*v31) >> 2;
          v37 = v36 + 1;
          if ((unint64_t)(v36 + 1) >> 62)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          v38 = v32 - (_QWORD)v35;
          if (v38 >> 1 > v37)
            v37 = v38 >> 1;
          if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFFCLL)
            v39 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v39 = v37;
          if (v39)
          {
            v40 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(a1 + 40, v39);
            v35 = *(char **)(a1 + 24);
            v33 = *(char **)(a1 + 32);
          }
          else
          {
            v40 = 0;
          }
          v41 = &v40[4 * v36];
          *(_DWORD *)v41 = v30;
          v34 = v41 + 4;
          while (v33 != v35)
          {
            v42 = *((_DWORD *)v33 - 1);
            v33 -= 4;
            *((_DWORD *)v41 - 1) = v42;
            v41 -= 4;
          }
          *(_QWORD *)(a1 + 24) = v41;
          *(_QWORD *)(a1 + 32) = v34;
          *(_QWORD *)(a1 + 40) = &v40[4 * v39];
          if (v35)
            operator delete(v35);
        }
        else
        {
          *(_DWORD *)v33 = v30;
          v34 = v33 + 4;
        }
        *(_QWORD *)(a1 + 32) = v34;
      }
      ++v30;
    }
    while (v30 != v29);
  }
  v44 = *(_QWORD *)(a1 + 24);
  v43 = *(_QWORD *)(a1 + 32);
  v45 = (unint64_t)(v43 - v44) >> 2;
  v46 = (v45 - 1);
  v47 = v43 - v44;
  v48 = (float)(*(float *)(*(_QWORD *)(a1 + 8) + 40) * (float)(unint64_t)(v47 >> 2));
  if (v47)
    v49 = (_DWORD)v45 == 1;
  else
    v49 = 1;
  if (!v49)
  {
    do
    {
      v50 = vcvtmd_u64_f64((double)rand() * 4.65661287e-10 * (double)v45);
      v51 = *(_DWORD *)(v44 + 4 * v46);
      *(_DWORD *)(v44 + 4 * v46) = *(_DWORD *)(v44 + 4 * v50);
      *(_DWORD *)(v44 + 4 * v50) = v51;
      LODWORD(v45) = v45 - 1;
      --v46;
    }
    while ((_DWORD)v46);
  }
  if (v48 <= 1)
    v52 = 1;
  else
    v52 = v48;
  std::vector<int>::resize((std::vector<unsigned int> *)(a1 + 24), v52);
  *(_DWORD *)(a1 + 16) = turi::thread::cpu_count(v53);
  std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)(a1 + 72));
  v54 = *(int *)(a1 + 16);
  __p = 0;
  v72 = 0;
  v73 = 0;
  std::vector<std::vector<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::ThreadEntry,std::allocator<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::ThreadEntry>>>::resize((uint64_t *)(a1 + 72), v54, (uint64_t)&__p);
  if (__p)
  {
    v72 = __p;
    operator delete(__p);
  }
  v55 = *(_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 80) != v55)
  {
    v56 = 0;
    v57 = 0;
    do
    {
      *(_QWORD *)(v55 + v56 + 8) = *(_QWORD *)(v55 + v56);
      std::vector<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::ThreadEntry,std::allocator<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::ThreadEntry>>::reserve((void **)(v55 + v56), 0x100uLL);
      ++v57;
      v55 = *(_QWORD *)(a1 + 72);
      v56 += 24;
    }
    while (v57 < 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 80) - v55) >> 3));
  }
  std::vector<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::NodeEntry,std::allocator<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::NodeEntry>>::reserve((void **)(a1 + 96), 0x100uLL);
  v58 = (void **)(a1 + 120);
  std::vector<int>::reserve((std::vector<unsigned int> *)(a1 + 120), 0x100uLL);
  v59 = *(char **)(a1 + 120);
  *(_QWORD *)(a1 + 128) = v59;
  if (*(int *)(a5 + 96) >= 1)
  {
    v60 = 0;
    v61 = (_QWORD *)(a1 + 136);
    do
    {
      if ((unint64_t)v59 >= *v61)
      {
        v63 = (char *)*v58;
        v64 = (v59 - (_BYTE *)*v58) >> 2;
        v65 = v64 + 1;
        if ((unint64_t)(v64 + 1) >> 62)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v66 = *v61 - (_QWORD)v63;
        if (v66 >> 1 > v65)
          v65 = v66 >> 1;
        if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFFCLL)
          v67 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v67 = v65;
        if (v67)
        {
          v68 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(a1 + 136, v67);
          v63 = *(char **)(a1 + 120);
          v59 = *(char **)(a1 + 128);
        }
        else
        {
          v68 = 0;
        }
        v69 = &v68[4 * v64];
        *(_DWORD *)v69 = v60;
        v62 = v69 + 4;
        while (v59 != v63)
        {
          v70 = *((_DWORD *)v59 - 1);
          v59 -= 4;
          *((_DWORD *)v69 - 1) = v70;
          v69 -= 4;
        }
        *(_QWORD *)(a1 + 120) = v69;
        *(_QWORD *)(a1 + 128) = v62;
        *(_QWORD *)(a1 + 136) = &v68[4 * v67];
        if (v63)
          operator delete(v63);
      }
      else
      {
        *(_DWORD *)v59 = v60;
        v62 = v59 + 4;
      }
      *(_QWORD *)(a1 + 128) = v62;
      ++v60;
      v59 = v62;
    }
    while (v60 < *(_DWORD *)(a5 + 96));
  }
}

void sub_2183D4028(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::InitNewNode(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  unint64_t v26;
  uint64_t v27;
  float *v28;
  double v29;
  int v30;
  double v31;
  double v32;
  char *v33;
  unint64_t v34;
  uint64_t v35;
  double *v36;
  double *v37;
  double v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  float v51;
  double v52;
  double v53;
  float v54;
  double v55;
  float v56;
  __int128 v57;
  __int128 v58;
  int v59;
  uint64_t v60;
  int v61;

  v12 = a1[9];
  if (a1[10] != v12)
  {
    v13 = 0;
    v14 = 0;
    do
    {
      v15 = *(int *)(a6 + 100);
      v60 = 0;
      v61 = 0;
      v57 = 0u;
      v58 = 0u;
      std::vector<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::ThreadEntry,std::allocator<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::ThreadEntry>>::resize(v12 + v13, v15, &v57);
      ++v14;
      v12 = a1[9];
      v13 += 24;
    }
    while (v14 < 0xAAAAAAAAAAAAAAABLL * ((a1[10] - v12) >> 3));
  }
  v16 = *(int *)(a6 + 100);
  v59 = 0;
  v57 = 0u;
  v58 = 0u;
  std::vector<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::NodeEntry,std::allocator<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::NodeEntry>>::resize((uint64_t)(a1 + 12), v16, &v57);
  v17 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a4 + 64))(a4);
  v18 = ((v17[1] - *v17) >> 2);
  *(_QWORD *)&v57 = v17;
  *((_QWORD *)&v57 + 1) = a1;
  *(_QWORD *)&v58 = a3;
  *((_QWORD *)&v58 + 1) = a5;
  turi::parallel_for<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::InitNewNode(std::vector<int> const&,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix const&,xgboost_old::BoosterInfo const&,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#1}>(0, v18, (uint64_t)&v57);
  v19 = *a2;
  v20 = a2[1];
  v21 = v20 - *a2;
  if (v20 != *a2)
  {
    v22 = 0;
    v23 = v21 >> 2;
    v25 = (char *)a1[9];
    v24 = (char *)a1[10];
    v26 = (v24 - v25) / 24;
    v27 = a1[12];
    v28 = (float *)a1[1];
    v29 = v28[3];
    if (v26 <= 1)
      v26 = 1;
    if (v23 <= 1)
      v23 = 1;
    while (1)
    {
      v30 = *(_DWORD *)(v19 + 4 * v22);
      v31 = 0.0;
      v32 = 0.0;
      if (v24 != v25)
      {
        v33 = v25;
        v34 = v26;
        do
        {
          v35 = *(_QWORD *)v33;
          v33 += 24;
          v36 = (double *)(v35 + 56 * v30);
          v31 = v31 + *v36;
          v32 = v32 + v36[1];
          --v34;
        }
        while (v34);
      }
      v37 = (double *)(v27 + 40 * v30);
      *v37 = v31;
      v37[1] = v32;
      if (v32 >= v29)
        break;
      *(_DWORD *)(v27 + 40 * v30 + 16) = 0;
      v38 = 0.0;
LABEL_45:
      v56 = v38;
      *(float *)(v27 + 40 * v30 + 20) = v56;
      if (++v22 == v23)
        return;
    }
    v39 = v28[7];
    v40 = v28[5];
    v41 = -v39;
    if (v39 == 0.0)
    {
      if (v40 == 0.0)
      {
        v42 = v28[4];
        v43 = v31 * v31 / (v32 + v42);
        *(float *)(v27 + 40 * v30 + 16) = v43;
        goto LABEL_40;
      }
      v52 = v40;
      if (v31 <= v40)
      {
        v53 = 0.0;
        if (v31 < -v52)
          v53 = v31 + v52;
      }
      else
      {
        v53 = v31 - v52;
      }
      v42 = v28[4];
      v54 = v53 * v53 / (v32 + v42);
      *(float *)(v27 + 40 * v30 + 16) = v54;
    }
    else
    {
      v44 = v40;
      v45 = v31;
      if (v40 != 0.0)
      {
        v46 = v31 + v44;
        if (v31 >= -v44)
          v46 = 0.0;
        v45 = v31 - v44;
        if (v31 <= v44)
          v45 = v46;
      }
      v42 = v28[4];
      v47 = v32 + v42;
      v48 = -v45 / v47;
      if (v48 > v39)
        v48 = v39;
      if (v48 < v41)
        v48 = v41;
      v49 = v47 * 0.5 * (v48 * v48) + v31 * v48;
      v50 = v49 + v44 * fabs(v48);
      if (v40 == 0.0)
        v50 = v49;
      v51 = v50 * -2.0;
      *(float *)(v27 + 40 * v30 + 16) = v51;
      if (v40 == 0.0)
        goto LABEL_40;
    }
    v55 = v40;
    if (v31 <= v55)
    {
      if (v31 >= -v55)
        v31 = 0.0;
      else
        v31 = v31 + v55;
    }
    else
    {
      v31 = v31 - v55;
    }
LABEL_40:
    v38 = -v31 / (v32 + v42);
    if (v39 != 0.0)
    {
      if (v38 > v39)
        v38 = v39;
      if (v38 < v41)
        v38 = v41;
    }
    goto LABEL_45;
  }
}

void xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::FindSplit(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, _QWORD *a7)
{
  const char *v13;
  float v14;
  std::vector<unsigned int>::pointer begin;
  unint64_t v16;
  uint64_t v17;
  unsigned int v19;
  unsigned int v20;
  std::vector<unsigned int>::size_type v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  std::vector<unsigned int> v35;

  memset(&v35, 0, sizeof(v35));
  std::vector<float>::__init_with_size[abi:ne180100]<float const*,float const*>(&v35, *(const void **)(a1 + 24), *(_QWORD *)(a1 + 32), (uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 2);
  v14 = *(float *)(*(_QWORD *)(a1 + 8) + 36);
  if (v14 != 1.0)
  {
    begin = v35.__begin_;
    v16 = (unint64_t)((char *)v35.__end_ - (char *)v35.__begin_) >> 2;
    v17 = (v16 - 1);
    if (v35.__end_ != v35.__begin_ && (_DWORD)v16 != 1)
    {
      do
      {
        v19 = vcvtmd_u64_f64((double)rand() * 4.65661287e-10 * (double)v16);
        v20 = begin[v17];
        begin[v17] = begin[v19];
        begin[v19] = v20;
        LODWORD(v16) = v16 - 1;
        --v17;
      }
      while ((_DWORD)v17);
      v14 = *(float *)(*(_QWORD *)(a1 + 8) + 36);
    }
    v21 = (float)(v14
                              * (float)(unint64_t)((uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 2));
    xgboost_old::utils::Check((_DWORD)v21 != 0, "colsample_bylevel is too small that no feature can be included", v13);
    std::vector<int>::resize(&v35, v21);
  }
  v22 = (*(uint64_t (**)(uint64_t, std::vector<unsigned int> *))(*(_QWORD *)a5 + 16))(a5, &v35);
  while ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v22 + 24))(v22))
  {
    v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 32))(v22);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 8))(a1, v23, a4, a5, a6);
  }
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 16))(a1, a3);
  v25 = *a3;
  if (a3[1] != *a3)
  {
    v26 = 0;
    do
    {
      v27 = *(int *)(v25 + 4 * v26);
      v28 = *(_QWORD *)(a1 + 96);
      if (*(float *)(v28 + 40 * (int)v27 + 24) <= 0.00001)
      {
        v34 = *a7 + 20 * (int)v27;
        *(float *)(v34 + 16) = *(float *)(v28 + 40 * (int)v27 + 20) * **(float **)(a1 + 8);
        *(_QWORD *)(v34 + 4) = -1;
      }
      else
      {
        xgboost_old::tree::TreeModel<float,xgboost_old::tree::RTreeNodeStat>::AddChilds((uint64_t)a7, v27, v24);
        v29 = v28 + 40 * (int)v27;
        v30 = *(_DWORD *)(v29 + 32);
        v31 = *a7 + 20 * v27;
        *(_DWORD *)(v31 + 12) = *(_DWORD *)(v29 + 28);
        *(_DWORD *)(v31 + 16) = v30;
        v32 = *a7 + 20 * *(int *)(*a7 + 20 * v27 + 4);
        *(_DWORD *)(v32 + 16) = 0;
        *(_QWORD *)(v32 + 4) = 0xFFFFFFFFLL;
        v33 = *a7 + 20 * *(int *)(*a7 + 20 * v27 + 8);
        *(_DWORD *)(v33 + 16) = 0;
        *(_QWORD *)(v33 + 4) = 0xFFFFFFFFLL;
      }
      ++v26;
      v25 = *a3;
    }
    while (v26 < (a3[1] - *a3) >> 2);
  }
  if (v35.__begin_)
  {
    v35.__end_ = v35.__begin_;
    operator delete(v35.__begin_);
  }
}

void sub_2183D4618(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::UpdateQueueExpand(int a1, _QWORD *a2, char *a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v7;
  unint64_t v8;
  int v9;
  int v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  int v20;
  int v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  int v29;
  char *v30;
  void *__p;
  char *v32;
  char *v33;

  __p = 0;
  v32 = 0;
  v33 = 0;
  v5 = *(_QWORD *)a3;
  v4 = *((_QWORD *)a3 + 1);
  if (v4 == *(_QWORD *)a3)
  {
    v30 = 0;
    v7 = 0;
  }
  else
  {
    v7 = 0;
    v8 = 0;
    do
    {
      v9 = *(_DWORD *)(v5 + 4 * v8);
      v10 = *(_DWORD *)(*a2 + 20 * v9 + 4);
      if (v10 != -1)
      {
        v11 = v33;
        if (v7 >= v33)
        {
          v13 = (char *)__p;
          v14 = (v7 - (_BYTE *)__p) >> 2;
          v15 = v14 + 1;
          if ((unint64_t)(v14 + 1) >> 62)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          v16 = v33 - (_BYTE *)__p;
          if ((v33 - (_BYTE *)__p) >> 1 > v15)
            v15 = v16 >> 1;
          if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL)
            v17 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v17 = v15;
          if (v17)
          {
            v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v33, v17);
            v13 = (char *)__p;
            v7 = v32;
          }
          else
          {
            v18 = 0;
          }
          v19 = &v18[4 * v14];
          *(_DWORD *)v19 = v10;
          v12 = v19 + 4;
          while (v7 != v13)
          {
            v20 = *((_DWORD *)v7 - 1);
            v7 -= 4;
            *((_DWORD *)v19 - 1) = v20;
            v19 -= 4;
          }
          v11 = &v18[4 * v17];
          __p = v19;
          v32 = v12;
          v33 = v11;
          if (v13)
          {
            operator delete(v13);
            v11 = v33;
          }
        }
        else
        {
          *(_DWORD *)v7 = v10;
          v12 = v7 + 4;
        }
        v32 = v12;
        v21 = *(_DWORD *)(*a2 + 20 * v9 + 8);
        if (v12 >= v11)
        {
          v22 = (char *)__p;
          v23 = (v12 - (_BYTE *)__p) >> 2;
          v24 = v23 + 1;
          if ((unint64_t)(v23 + 1) >> 62)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          v25 = v11 - (_BYTE *)__p;
          if (v25 >> 1 > v24)
            v24 = v25 >> 1;
          if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL)
            v26 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v26 = v24;
          if (v26)
          {
            v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v33, v26);
            v22 = (char *)__p;
            v12 = v32;
          }
          else
          {
            v27 = 0;
          }
          v28 = &v27[4 * v23];
          *(_DWORD *)v28 = v21;
          v7 = v28 + 4;
          while (v12 != v22)
          {
            v29 = *((_DWORD *)v12 - 1);
            v12 -= 4;
            *((_DWORD *)v28 - 1) = v29;
            v28 -= 4;
          }
          __p = v28;
          v32 = v7;
          v33 = &v27[4 * v26];
          if (v22)
            operator delete(v22);
        }
        else
        {
          *(_DWORD *)v12 = v21;
          v7 = v12 + 4;
        }
        v32 = v7;
        v5 = *(_QWORD *)a3;
        v4 = *((_QWORD *)a3 + 1);
      }
      ++v8;
    }
    while (v8 < (v4 - v5) >> 2);
    v30 = (char *)__p;
  }
  if (&__p != (void **)a3)
  {
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>(a3, v30, (uint64_t)v7, (v7 - v30) >> 2);
    v30 = (char *)__p;
  }
  if (v30)
  {
    v32 = v30;
    operator delete(v30);
  }
}

void sub_2183D488C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::vector<std::vector<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::ThreadEntry,std::allocator<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::ThreadEntry>>>::resize(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;

  v4 = a1[1];
  v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  v6 = a2 >= v5;
  v7 = a2 - v5;
  if (v7 != 0 && v6)
  {
    std::vector<std::vector<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::ThreadEntry,std::allocator<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::ThreadEntry>>>::__append(a1, v7, a3);
  }
  else if (!v6)
  {
    v8 = *a1 + 24 * a2;
    if (v4 != v8)
    {
      v9 = a1[1];
      do
      {
        v11 = *(void **)(v9 - 24);
        v9 -= 24;
        v10 = v11;
        if (v11)
        {
          *(_QWORD *)(v4 - 16) = v10;
          operator delete(v10);
        }
        v4 = v9;
      }
      while (v9 != v8);
    }
    a1[1] = v8;
  }
}

void std::vector<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::ThreadEntry,std::allocator<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::ThreadEntry>>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (0x6DB6DB6DB6DB6DB7 * ((v4 - (_BYTE *)*a1) >> 3) < a2)
  {
    if (a2 >= 0x492492492492493)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::toolkit_class_specification>>(v3, a2);
    v7 = &v6[v5];
    v9 = &v6[56 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *(_OWORD *)(v10 - 56);
        v14 = *(_OWORD *)(v10 - 40);
        v15 = *(_OWORD *)(v10 - 24);
        *((_DWORD *)v12 - 2) = *((_DWORD *)v10 - 2);
        *(_OWORD *)(v12 - 24) = v15;
        *(_OWORD *)(v12 - 40) = v14;
        *(_OWORD *)(v12 - 56) = v13;
        v12 -= 56;
        v10 -= 56;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void std::vector<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::NodeEntry,std::allocator<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::NodeEntry>>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  __int128 v13;
  __int128 v14;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (0xCCCCCCCCCCCCCCCDLL * ((v4 - (_BYTE *)*a1) >> 3) < a2)
  {
    if (a2 >= 0x666666666666667)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,turi::flexible_type>>>(v3, a2);
    v7 = &v6[v5];
    v9 = &v6[40 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *(_OWORD *)(v10 - 40);
        v14 = *(_OWORD *)(v10 - 24);
        *((_DWORD *)v12 - 2) = *((_DWORD *)v10 - 2);
        *(_OWORD *)(v12 - 24) = v14;
        *(_OWORD *)(v12 - 40) = v13;
        v12 -= 40;
        v10 -= 40;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void std::vector<int>::reserve(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __n)
{
  std::__compressed_pair<unsigned int *> *p_end_cap;
  unsigned int *value;
  int64_t v5;
  char *v6;
  unsigned int *v7;
  uint64_t v8;
  unsigned int *v9;
  std::vector<unsigned int>::pointer begin;
  unsigned int *end;
  unsigned int *v12;
  unsigned int v13;

  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  if (__n > value - this->__begin_)
  {
    if (__n >> 62)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v5 = (char *)this->__end_ - (char *)this->__begin_;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)p_end_cap, __n);
    v7 = (unsigned int *)&v6[v5 & 0xFFFFFFFFFFFFFFFCLL];
    v9 = (unsigned int *)&v6[4 * v8];
    begin = this->__begin_;
    end = this->__end_;
    v12 = v7;
    if (end != this->__begin_)
    {
      v12 = v7;
      do
      {
        v13 = *--end;
        *--v12 = v13;
      }
      while (end != begin);
    }
    this->__begin_ = v12;
    this->__end_ = v7;
    this->__end_cap_.__value_ = v9;
    if (begin)
      operator delete(begin);
  }
}

_QWORD *std::vector<std::vector<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::ThreadEntry,std::allocator<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::ThreadEntry>>>::__append(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  _QWORD *result;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  _QWORD *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  _QWORD *v21;

  v8 = a1[2];
  result = a1 + 2;
  v7 = v8;
  v9 = (_QWORD *)*(result - 1);
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - (uint64_t)v9) >> 3) >= a2)
  {
    if (a2)
    {
      v15 = &v9[3 * a2];
      v16 = 24 * a2;
      do
      {
        *v9 = 0;
        v9[1] = 0;
        v9[2] = 0;
        result = std::vector<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::ThreadEntry,std::allocator<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::ThreadEntry>>::__init_with_size[abi:ne180100]<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::ThreadEntry*,xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::ThreadEntry*>(v9, *(const void **)a3, *(_QWORD *)(a3 + 8), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3));
        v9 += 3;
        v16 -= 24;
      }
      while (v16);
      v9 = v15;
    }
    a1[1] = (uint64_t)v9;
  }
  else
  {
    v10 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v9 - *a1) >> 3);
    v11 = v10 + a2;
    if (v10 + a2 > 0xAAAAAAAAAAAAAAALL)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v12 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    if (2 * v12 > v11)
      v11 = 2 * v12;
    if (v12 >= 0x555555555555555)
      v13 = 0xAAAAAAAAAAAAAAALL;
    else
      v13 = v11;
    v21 = result;
    if (v13)
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>((uint64_t)result, v13);
    else
      v14 = 0;
    v17 = v14;
    v18 = &v14[24 * v10];
    v19 = v18;
    v20 = &v14[24 * v13];
    std::__split_buffer<std::vector<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::ThreadEntry,std::allocator<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::ThreadEntry>>>::__construct_at_end(&v17, a2, a3);
    std::vector<std::vector<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::ThreadEntry,std::allocator<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::ThreadEntry>>>::__swap_out_circular_buffer(a1, &v17);
    return (_QWORD *)std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)&v17);
  }
  return result;
}

void sub_2183D4CF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::__split_buffer<std::vector<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::ThreadEntry,std::allocator<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::ThreadEntry>>>::__construct_at_end(_QWORD *result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v6;
  uint64_t v7;

  v3 = result;
  v4 = (_QWORD *)result[2];
  if (a2)
  {
    v6 = &v4[3 * a2];
    v7 = 24 * a2;
    do
    {
      *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      result = std::vector<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::ThreadEntry,std::allocator<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::ThreadEntry>>::__init_with_size[abi:ne180100]<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::ThreadEntry*,xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::ThreadEntry*>(v4, *(const void **)a3, *(_QWORD *)(a3 + 8), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3));
      v4 += 3;
      v7 -= 24;
    }
    while (v7);
    v4 = v6;
  }
  v3[2] = v4;
  return result;
}

void sub_2183D4D9C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 16) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::ThreadEntry,std::allocator<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::ThreadEntry>>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::ThreadEntry,std::allocator<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::ThreadEntry>>>,std::reverse_iterator<std::vector<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::ThreadEntry,std::allocator<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::ThreadEntry>>*>,std::reverse_iterator<std::vector<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::ThreadEntry,std::allocator<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::ThreadEntry>>*>,std::reverse_iterator<std::vector<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::ThreadEntry,std::allocator<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::ThreadEntry>>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

_QWORD *std::vector<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::ThreadEntry,std::allocator<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::ThreadEntry>>::__init_with_size[abi:ne180100]<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::ThreadEntry*,xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::ThreadEntry*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::ThreadEntry,std::allocator<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::ThreadEntry>>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8 - 4);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_2183D4E74(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::ThreadEntry,std::allocator<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::ThreadEntry>>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x492492492492493)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::toolkit_class_specification>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[56 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::ThreadEntry,std::allocator<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::ThreadEntry>>>,std::reverse_iterator<std::vector<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::ThreadEntry,std::allocator<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::ThreadEntry>>*>,std::reverse_iterator<std::vector<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::ThreadEntry,std::allocator<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::ThreadEntry>>*>,std::reverse_iterator<std::vector<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::ThreadEntry,std::allocator<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::ThreadEntry>>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::ThreadEntry,std::allocator<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::ThreadEntry>>>,std::reverse_iterator<std::vector<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::ThreadEntry,std::allocator<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::ThreadEntry>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::ThreadEntry,std::allocator<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::ThreadEntry>>>,std::reverse_iterator<std::vector<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::ThreadEntry,std::allocator<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::ThreadEntry>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::vector<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::ThreadEntry,std::allocator<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::ThreadEntry>>::resize(uint64_t a1, unint64_t a2, __int128 *a3)
{
  unint64_t v3;
  BOOL v4;
  unint64_t v5;

  v3 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3);
  v4 = a2 >= v3;
  v5 = a2 - v3;
  if (v5 != 0 && v4)
  {
    std::vector<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::ThreadEntry,std::allocator<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::ThreadEntry>>::__append((void **)a1, v5, a3);
  }
  else if (!v4)
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 56 * a2;
  }
}

void std::vector<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::NodeEntry,std::allocator<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::NodeEntry>>::resize(uint64_t a1, unint64_t a2, __int128 *a3)
{
  unint64_t v3;
  BOOL v4;
  unint64_t v5;

  v3 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3);
  v4 = a2 >= v3;
  v5 = a2 - v3;
  if (v5 != 0 && v4)
  {
    std::vector<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::NodeEntry,std::allocator<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::NodeEntry>>::__append((void **)a1, v5, a3);
  }
  else if (!v4)
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 40 * a2;
  }
}

void turi::parallel_for<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::InitNewNode(std::vector<int> const&,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix const&,xgboost_old::BoosterInfo const&,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#1}>(turi::thread_pool *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v5;
  turi::thread_pool *instance;
  turi::thread *v7;
  turi::thread_pool *tls_data;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  turi::thread_pool *v14;
  uint64_t v15;
  double v16;
  double v17;
  turi::thread *v18;
  unint64_t v19;
  uint64_t v20[4];
  _BYTE v21[192];
  uint64_t v22;

  v5 = (unint64_t)a1;
  v22 = *MEMORY[0x24BDAC8D0];
  instance = (turi::thread_pool *)turi::thread_pool::get_instance(a1);
  v7 = (turi::thread *)turi::thread_pool::size(instance);
  tls_data = (turi::thread_pool *)turi::thread::get_tls_data(v7);
  if (*((_BYTE *)tls_data + 8))
    v9 = 0;
  else
    v9 = (unint64_t)v7 > 1;
  if (v9)
  {
    v14 = (turi::thread_pool *)turi::thread_pool::get_instance(tls_data);
    turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)v21, v14);
    v15 = 0;
    v16 = (double)(a2 - v5) / (double)(unint64_t)v7;
    v17 = (double)v5;
    do
    {
      v18 = (turi::thread *)(v15 + 1);
      v19 = (unint64_t)(v17 + v16 * (double)(unint64_t)(v15 + 1));
      if ((turi::thread *)v15 == (turi::thread *)((char *)v7 - 1))
        v19 = a2;
      v20[2] = (unint64_t)(v17 + v16 * (double)(unint64_t)v15);
      v20[3] = v19;
      v20[0] = (uint64_t)boost::function0<void>::assign_to<void turi::parallel_for<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::InitNewNode(std::vector<int> const&,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix const&,xgboost_old::BoosterInfo const&,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::InitNewNode(std::vector<int> const&,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix const&,xgboost_old::BoosterInfo const&,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#1} const&)::{lambda(void)#1}>(xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::InitNewNode(std::vector<int> const&,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix const&,xgboost_old::BoosterInfo const&,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#1})::stored_vtable
             + 1;
      v20[1] = a3;
      turi::parallel_task_queue::launch((uint64_t)v21, (uint64_t)v20, v15);
      boost::function0<void>::~function0(v20);
      v15 = (uint64_t)v18;
    }
    while (v18 != v7);
    turi::parallel_task_queue::join((turi::parallel_task_queue *)v21);
    turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)v21);
  }
  else if (a2 > v5)
  {
    do
    {
      v10 = *(_QWORD *)(a3 + 8);
      v11 = *(unsigned int *)(**(_QWORD **)a3 + 4 * v5);
      tls_data = (turi::thread_pool *)turi::thread::get_tls_data(tls_data);
      v12 = *(_DWORD *)(*(_QWORD *)(v10 + 48) + 4 * v11);
      if ((v12 & 0x80000000) == 0)
      {
        v13 = *(_QWORD *)(*(_QWORD *)(v10 + 72) + 24 * *(int *)tls_data);
        *(float64x2_t *)(v13 + 56 * v12) = vaddq_f64(*(float64x2_t *)(v13 + 56 * v12), vcvtq_f64_f32(*(float32x2_t *)(**(_QWORD **)(a3 + 16) + 8 * v11)));
      }
      ++v5;
    }
    while (a2 != v5);
  }
}

void sub_2183D51D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)va);
  _Unwind_Resume(a1);
}

void std::vector<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::ThreadEntry,std::allocator<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::ThreadEntry>>::__append(void **a1, unint64_t a2, __int128 *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  _QWORD *v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  char *v27;
  char *v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;

  v8 = a1[2];
  v6 = (uint64_t)(a1 + 2);
  v7 = v8;
  v9 = *(_QWORD **)(v6 - 8);
  if (0x6DB6DB6DB6DB6DB7 * ((v8 - (_BYTE *)v9) >> 3) >= a2)
  {
    if (a2)
    {
      v15 = &v9[7 * a2];
      v16 = 56 * a2;
      do
      {
        v17 = *a3;
        v18 = a3[1];
        v19 = a3[2];
        v9[6] = *((_QWORD *)a3 + 6);
        *((_OWORD *)v9 + 1) = v18;
        *((_OWORD *)v9 + 2) = v19;
        *(_OWORD *)v9 = v17;
        v9 += 7;
        v16 -= 56;
      }
      while (v16);
      v9 = v15;
    }
    a1[1] = v9;
  }
  else
  {
    v10 = 0x6DB6DB6DB6DB6DB7 * (((char *)v9 - (_BYTE *)*a1) >> 3);
    v11 = v10 + a2;
    if (v10 + a2 > 0x492492492492492)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v12 = 0x6DB6DB6DB6DB6DB7 * ((v7 - (_BYTE *)*a1) >> 3);
    if (2 * v12 > v11)
      v11 = 2 * v12;
    if (v12 >= 0x249249249249249)
      v13 = 0x492492492492492;
    else
      v13 = v11;
    if (v13)
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::toolkit_class_specification>>(v6, v13);
    else
      v14 = 0;
    v20 = &v14[56 * v10];
    v21 = 56 * a2;
    v22 = &v20[56 * a2];
    v23 = v20;
    do
    {
      v24 = *a3;
      v25 = a3[1];
      v26 = a3[2];
      *((_QWORD *)v23 + 6) = *((_QWORD *)a3 + 6);
      *((_OWORD *)v23 + 1) = v25;
      *((_OWORD *)v23 + 2) = v26;
      *(_OWORD *)v23 = v24;
      v23 += 56;
      v21 -= 56;
    }
    while (v21);
    v27 = &v14[56 * v13];
    v29 = (char *)*a1;
    v28 = (char *)a1[1];
    if (v28 != *a1)
    {
      do
      {
        v30 = *(_OWORD *)(v28 - 56);
        v31 = *(_OWORD *)(v28 - 40);
        v32 = *(_OWORD *)(v28 - 24);
        *((_DWORD *)v20 - 2) = *((_DWORD *)v28 - 2);
        *(_OWORD *)(v20 - 24) = v32;
        *(_OWORD *)(v20 - 40) = v31;
        *(_OWORD *)(v20 - 56) = v30;
        v20 -= 56;
        v28 -= 56;
      }
      while (v28 != v29);
      v28 = (char *)*a1;
    }
    *a1 = v20;
    a1[1] = v22;
    a1[2] = v27;
    if (v28)
      operator delete(v28);
  }
}

void std::vector<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::NodeEntry,std::allocator<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::NodeEntry>>::__append(void **a1, unint64_t a2, __int128 *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  _QWORD *v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  __int128 v23;
  __int128 v24;
  char *v25;
  char *v26;
  char *v27;
  __int128 v28;
  __int128 v29;

  v8 = a1[2];
  v6 = (uint64_t)(a1 + 2);
  v7 = v8;
  v9 = *(_QWORD **)(v6 - 8);
  if (0xCCCCCCCCCCCCCCCDLL * ((v8 - (_BYTE *)v9) >> 3) >= a2)
  {
    if (a2)
    {
      v15 = &v9[5 * a2];
      v16 = 40 * a2;
      do
      {
        v17 = *a3;
        v18 = a3[1];
        v9[4] = *((_QWORD *)a3 + 4);
        *(_OWORD *)v9 = v17;
        *((_OWORD *)v9 + 1) = v18;
        v9 += 5;
        v16 -= 40;
      }
      while (v16);
      v9 = v15;
    }
    a1[1] = v9;
  }
  else
  {
    v10 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v9 - (_BYTE *)*a1) >> 3);
    v11 = v10 + a2;
    if (v10 + a2 > 0x666666666666666)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v12 = 0xCCCCCCCCCCCCCCCDLL * ((v7 - (_BYTE *)*a1) >> 3);
    if (2 * v12 > v11)
      v11 = 2 * v12;
    if (v12 >= 0x333333333333333)
      v13 = 0x666666666666666;
    else
      v13 = v11;
    if (v13)
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,turi::flexible_type>>>(v6, v13);
    else
      v14 = 0;
    v19 = &v14[40 * v10];
    v20 = &v19[40 * a2];
    v21 = 40 * a2;
    v22 = v19;
    do
    {
      v23 = *a3;
      v24 = a3[1];
      *((_QWORD *)v22 + 4) = *((_QWORD *)a3 + 4);
      *(_OWORD *)v22 = v23;
      *((_OWORD *)v22 + 1) = v24;
      v22 += 40;
      v21 -= 40;
    }
    while (v21);
    v25 = &v14[40 * v13];
    v27 = (char *)*a1;
    v26 = (char *)a1[1];
    if (v26 != *a1)
    {
      do
      {
        v28 = *(_OWORD *)(v26 - 40);
        v29 = *(_OWORD *)(v26 - 24);
        *((_DWORD *)v19 - 2) = *((_DWORD *)v26 - 2);
        *(_OWORD *)(v19 - 24) = v29;
        *(_OWORD *)(v19 - 40) = v28;
        v19 -= 40;
        v26 -= 40;
      }
      while (v26 != v27);
      v26 = (char *)*a1;
    }
    *a1 = v19;
    a1[1] = v20;
    a1[2] = v25;
    if (v26)
      operator delete(v26);
  }
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::InitNewNode(std::vector<int> const&,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix const&,xgboost_old::BoosterInfo const&,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::InitNewNode(std::vector<int> const&,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix const&,xgboost_old::BoosterInfo const&,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#1} const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v4;
  __int128 v5;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x80000002186FBFBALL & 0x7FFFFFFFFFFFFFFFLL)
        || (result = strcmp((const char *)result, (const char *)(0x80000002186FBFBALL & 0x7FFFFFFFFFFFFFFFLL)),
            !(_DWORD)result))
      {
        *(_QWORD *)a2 = v4;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
    }
  }
  else
  {
    v5 = *(_OWORD *)result;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

_QWORD *boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::InitNewNode(std::vector<int> const&,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix const&,xgboost_old::BoosterInfo const&,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::InitNewNode(std::vector<int> const&,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix const&,xgboost_old::BoosterInfo const&,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#1} const&)::{lambda(void)#1},void>::invoke(_QWORD *result)
{
  unint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;

  v1 = result[1];
  if (v1 < result[2])
  {
    v2 = result;
    do
    {
      v3 = *v2;
      v4 = *(_QWORD *)(*v2 + 8);
      v5 = *(unsigned int *)(**(_QWORD **)*v2 + 4 * v1);
      result = turi::thread::get_tls_data((turi::thread *)result);
      v6 = *(_DWORD *)(*(_QWORD *)(v4 + 48) + 4 * v5);
      if ((v6 & 0x80000000) == 0)
      {
        v7 = *(_QWORD *)(*(_QWORD *)(v4 + 72) + 24 * *(int *)result);
        *(float64x2_t *)(v7 + 56 * v6) = vaddq_f64(*(float64x2_t *)(v7 + 56 * v6), vcvtq_f64_f32(*(float32x2_t *)(**(_QWORD **)(v3 + 16) + 8 * v5)));
      }
      ++v1;
    }
    while (v1 < v2[2]);
  }
  return result;
}

void xgboost_old::tree::TreeModel<float,xgboost_old::tree::RTreeNodeStat>::AddChilds(uint64_t a1, int a2, const char *a3)
{
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_DWORD *)(a1 + 104);
  if (!v5)
  {
    v7 = *(_DWORD *)(a1 + 100);
    *(_DWORD *)(a1 + 100) = v7 + 1;
    xgboost_old::utils::Check(v7 != 2147483646, "number of nodes in the tree exceed 2^31", a3);
    std::vector<xgboost_old::tree::TreeModel<float,xgboost_old::tree::RTreeNodeStat>::Node,std::allocator<xgboost_old::tree::TreeModel<float,xgboost_old::tree::RTreeNodeStat>::Node>>::resize(a1, *(int *)(a1 + 100));
    std::vector<xgboost_old::tree::RTreeNodeStat>::resize(a1 + 48, *(int *)(a1 + 100));
    std::vector<float>::resize(a1 + 72, *(int *)(a1 + 116) * (uint64_t)*(int *)(a1 + 100));
    v8 = *(_DWORD *)(a1 + 104);
    if (v8)
      goto LABEL_3;
LABEL_5:
    v10 = *(_DWORD *)(a1 + 100);
    *(_DWORD *)(a1 + 100) = v10 + 1;
    xgboost_old::utils::Check(v10 != 2147483646, "number of nodes in the tree exceed 2^31", a3);
    std::vector<xgboost_old::tree::TreeModel<float,xgboost_old::tree::RTreeNodeStat>::Node,std::allocator<xgboost_old::tree::TreeModel<float,xgboost_old::tree::RTreeNodeStat>::Node>>::resize(a1, *(int *)(a1 + 100));
    std::vector<xgboost_old::tree::RTreeNodeStat>::resize(a1 + 48, *(int *)(a1 + 100));
    std::vector<float>::resize(a1 + 72, *(int *)(a1 + 116) * (uint64_t)*(int *)(a1 + 100));
    goto LABEL_6;
  }
  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(_DWORD *)(v6 - 4);
  *(_QWORD *)(a1 + 32) = v6 - 4;
  v8 = v5 - 1;
  *(_DWORD *)(a1 + 104) = v8;
  if (!v8)
    goto LABEL_5;
LABEL_3:
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_DWORD *)(v9 - 4);
  *(_QWORD *)(a1 + 32) = v9 - 4;
  *(_DWORD *)(a1 + 104) = v8 - 1;
LABEL_6:
  v11 = *(_QWORD *)a1;
  v12 = *(_QWORD *)a1 + 20 * a2;
  *(_DWORD *)(v12 + 4) = v7;
  *(_DWORD *)(v12 + 8) = v10;
  *(_DWORD *)(v11 + 20 * v7) = a2 | 0x80000000;
  *(_DWORD *)(v11 + 20 * v10) = a2;
}

void turi::parallel_for<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::ResetPosition(std::vector<int> const&,xgboost_old::IFMatrix *,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#1}>(turi::thread_pool *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v5;
  turi::thread_pool *instance;
  turi::thread *v7;
  turi::thread_pool *tls_data;
  const char *v9;
  BOOL v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  turi::thread_pool *v20;
  uint64_t v21;
  double v22;
  double v23;
  turi::thread *v24;
  unint64_t v25;
  uint64_t v26[4];
  _BYTE v27[192];
  uint64_t v28;

  v5 = (unint64_t)a1;
  v28 = *MEMORY[0x24BDAC8D0];
  instance = (turi::thread_pool *)turi::thread_pool::get_instance(a1);
  v7 = (turi::thread *)turi::thread_pool::size(instance);
  tls_data = (turi::thread_pool *)turi::thread::get_tls_data(v7);
  if (*((_BYTE *)tls_data + 8))
    v10 = 0;
  else
    v10 = (unint64_t)v7 > 1;
  if (v10)
  {
    v20 = (turi::thread_pool *)turi::thread_pool::get_instance(tls_data);
    turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)v27, v20);
    v21 = 0;
    v22 = (double)(a2 - v5) / (double)(unint64_t)v7;
    v23 = (double)v5;
    do
    {
      v24 = (turi::thread *)(v21 + 1);
      v25 = (unint64_t)(v23 + v22 * (double)(unint64_t)(v21 + 1));
      if ((turi::thread *)v21 == (turi::thread *)((char *)v7 - 1))
        v25 = a2;
      v26[2] = (unint64_t)(v23 + v22 * (double)(unint64_t)v21);
      v26[3] = v25;
      v26[0] = (uint64_t)boost::function0<void>::assign_to<void turi::parallel_for<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::ResetPosition(std::vector<int> const&,xgboost_old::IFMatrix *,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::ResetPosition(std::vector<int> const&,xgboost_old::IFMatrix *,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#1} const&)::{lambda(void)#1}>(xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::ResetPosition(std::vector<int> const&,xgboost_old::IFMatrix *,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#1})::stored_vtable
             + 1;
      v26[1] = a3;
      turi::parallel_task_queue::launch((uint64_t)v27, (uint64_t)v26, v21);
      boost::function0<void>::~function0(v26);
      v21 = (uint64_t)v24;
    }
    while (v24 != v7);
    turi::parallel_task_queue::join((turi::parallel_task_queue *)v27);
    turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)v27);
  }
  else if (a2 > v5)
  {
    while (1)
    {
      v11 = *(_QWORD *)(a3 + 8);
      v12 = *(unsigned int *)(**(_QWORD **)a3 + 4 * v5);
      v13 = *(_QWORD *)(v11 + 48);
      if (v12 >= (*(_QWORD *)(v11 + 56) - v13) >> 2)
      {
        xgboost_old::utils::Printf((xgboost_old::utils *)"ridx exceed bound\n", v9);
        v13 = *(_QWORD *)(v11 + 48);
      }
      v14 = *(_DWORD *)(v13 + 4 * v12);
      v15 = v14 ^ (v14 >> 31);
      v16 = **(_QWORD **)(a3 + 16);
      v17 = *(_DWORD *)(v16 + 20 * v15 + 4);
      if (v17 != -1)
        break;
      if (*(_DWORD *)(v16 + 20 * (int)v15 + 8) == -1)
      {
        v19 = ~(_DWORD)v15;
LABEL_14:
        *(_DWORD *)(v13 + 4 * v12) = v19;
      }
      if (a2 == ++v5)
        return;
    }
    v18 = v14 >> 31;
    if ((*(_DWORD *)(v16 + 20 * (int)v15 + 12) & 0x80000000) != 0)
      v19 = v17 ^ v18;
    else
      v19 = *(_DWORD *)(v16 + 20 * (int)v15 + 8) ^ v18;
    goto LABEL_14;
  }
}

void sub_2183D5980(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)va);
  _Unwind_Resume(a1);
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::ResetPosition(std::vector<int> const&,xgboost_old::IFMatrix *,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::ResetPosition(std::vector<int> const&,xgboost_old::IFMatrix *,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#1} const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v4;
  __int128 v5;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x80000002186FC0A5 & 0x7FFFFFFFFFFFFFFFLL)
        || (result = strcmp((const char *)result, (const char *)(0x80000002186FC0A5 & 0x7FFFFFFFFFFFFFFFLL)),
            !(_DWORD)result))
      {
        *(_QWORD *)a2 = v4;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
    }
  }
  else
  {
    v5 = *(_OWORD *)result;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

void boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::ResetPosition(std::vector<int> const&,xgboost_old::IFMatrix *,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::ResetPosition(std::vector<int> const&,xgboost_old::IFMatrix *,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#1} const&)::{lambda(void)#1},void>::invoke(_QWORD *a1, const char *a2)
{
  unint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;

  v2 = a1[1];
  if (v2 < a1[2])
  {
    while (1)
    {
      v4 = *a1;
      v5 = *(_QWORD *)(*a1 + 8);
      v6 = *(unsigned int *)(**(_QWORD **)*a1 + 4 * v2);
      v7 = *(_QWORD *)(v5 + 48);
      if (v6 >= (*(_QWORD *)(v5 + 56) - v7) >> 2)
      {
        xgboost_old::utils::Printf((xgboost_old::utils *)"ridx exceed bound\n", a2);
        v7 = *(_QWORD *)(v5 + 48);
      }
      v8 = *(_DWORD *)(v7 + 4 * v6);
      v9 = v8 ^ (v8 >> 31);
      v10 = **(_QWORD **)(v4 + 16);
      v11 = *(_DWORD *)(v10 + 20 * v9 + 4);
      if (v11 != -1)
        break;
      if (*(_DWORD *)(v10 + 20 * (int)v9 + 8) == -1)
      {
        v13 = ~(_DWORD)v9;
LABEL_10:
        *(_DWORD *)(v7 + 4 * v6) = v13;
      }
      if (++v2 >= a1[2])
        return;
    }
    v12 = v8 >> 31;
    if ((*(_DWORD *)(v10 + 20 * (int)v9 + 12) & 0x80000000) != 0)
      v13 = v11 ^ v12;
    else
      v13 = *(_DWORD *)(v10 + 20 * (int)v9 + 8) ^ v12;
    goto LABEL_10;
  }
}

uint64_t xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::CQHistMaker(uint64_t a1)
{
  turi::neural_net::float_scalar *v7;

  *(_QWORD *)(a1 + 8) = 1050253722;
  *(_DWORD *)(a1 + 16) = 6;
  __asm { FMOV            V0.2S, #1.0 }
  *(_QWORD *)(a1 + 20) = _D0;
  *(_QWORD *)(a1 + 28) = 0;
  *(_OWORD *)(a1 + 36) = xmmword_2186FD4F0;
  *(_QWORD *)(a1 + 52) = 0x3DCCCCCD3F800000;
  *(_DWORD *)(a1 + 60) = 0x40000000;
  *(_OWORD *)(a1 + 64) = xmmword_2186CF1A0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_QWORD *)(a1 + 144) = 0;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_QWORD *)a1 = &unk_24D93E880;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  v7 = (turi::neural_net::float_scalar *)(a1 + 224);
  *(_QWORD *)(a1 + 216) = 0;
  rabit::engine::ReduceHandle::ReduceHandle((_QWORD *)(a1 + 224));
  turi::neural_net::float_scalar::~float_scalar(v7);
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)a1 = &unk_24D93E7D0;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  rabit::engine::ReduceHandle::ReduceHandle((_QWORD *)(a1 + 472));
  *(_QWORD *)(a1 + 504) = 0;
  *(_QWORD *)(a1 + 512) = 0;
  *(_QWORD *)(a1 + 520) = 0;
  turi::neural_net::float_scalar::~float_scalar((turi::neural_net::float_scalar *)(a1 + 472));
  *(_QWORD *)(a1 + 544) = 0;
  *(_OWORD *)(a1 + 528) = 0u;
  return a1;
}

void sub_2183D5C88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  turi::neural_net::float_scalar *v11;
  void **v12;
  void **v13;
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  if (*(char *)(v10 + 527) < 0)
    operator delete(*v13);
  turi::neural_net::float_scalar::~float_scalar(v11);
  a10 = v10 + 448;
  std::vector<xgboost_old::tree::HistMaker<xgboost_old::tree::GradStats>::HistSet,std::allocator<xgboost_old::tree::HistMaker<xgboost_old::tree::GradStats>::HistSet>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  v15 = *(void **)(v10 + 424);
  if (v15)
  {
    *(_QWORD *)(v10 + 432) = v15;
    operator delete(v15);
  }
  a10 = v10 + 400;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  a10 = v10 + 376;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  a10 = v10 + 352;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  v16 = *(void **)(v10 + 328);
  if (v16)
  {
    *(_QWORD *)(v10 + 336) = v16;
    operator delete(v16);
  }
  v17 = *(void **)(v10 + 304);
  if (v17)
  {
    *(_QWORD *)(v10 + 312) = v17;
    operator delete(v17);
  }
  v18 = *v12;
  if (*v12)
  {
    *(_QWORD *)(v10 + 288) = v18;
    operator delete(v18);
  }
  xgboost_old::tree::HistMaker<xgboost_old::tree::GradStats>::~HistMaker(v10);
  _Unwind_Resume(a1);
}

void xgboost_old::tree::HistMaker<xgboost_old::tree::GradStats>::~HistMaker(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void **v5;

  *(_QWORD *)a1 = &unk_24D93E880;
  v2 = *(void **)(a1 + 256);
  if (v2)
  {
    *(_QWORD *)(a1 + 264) = v2;
    operator delete(v2);
  }
  turi::neural_net::float_scalar::~float_scalar((turi::neural_net::float_scalar *)(a1 + 224));
  v5 = (void **)(a1 + 200);
  std::vector<xgboost_old::tree::HistMaker<xgboost_old::tree::GradStats>::HistSet,std::allocator<xgboost_old::tree::HistMaker<xgboost_old::tree::GradStats>::HistSet>>::__destroy_vector::operator()[abi:ne180100](&v5);
  v3 = *(void **)(a1 + 176);
  if (v3)
  {
    *(_QWORD *)(a1 + 184) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 152);
  if (v4)
  {
    *(_QWORD *)(a1 + 160) = v4;
    operator delete(v4);
  }
  xgboost_old::tree::BaseMaker::~BaseMaker((xgboost_old::tree::BaseMaker *)a1);
}

uint64_t xgboost_old::tree::HistMaker<xgboost_old::tree::GradStats>::Update(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  float *v5;
  float v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v13;

  v5 = (float *)result;
  v6 = *(float *)(result + 8);
  v7 = *a5;
  v8 = a5[1] - *a5;
  *(float *)(result + 8) = v6 / (float)(unint64_t)(v8 >> 3);
  if (v8)
  {
    v13 = 0;
    do
    {
      result = (*(uint64_t (**)(float *, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v5 + 48))(v5, a2, a3, a4, *(_QWORD *)(v7 + 8 * v13++));
      v7 = *a5;
    }
    while (v13 < (a5[1] - *a5) >> 3);
  }
  v5[2] = v6;
  return result;
}

void xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::~CQHistMaker(uint64_t a1)
{
  xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::~CQHistMaker(a1);
  JUMPOUT(0x219A19A08);
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void **v6;

  *(_QWORD *)a1 = &unk_24D93E7D0;
  v6 = (void **)(a1 + 528);
  std::vector<xgboost_old::utils::WXQuantileSketch<float,float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  if (*(char *)(a1 + 527) < 0)
    operator delete(*(void **)(a1 + 504));
  turi::neural_net::float_scalar::~float_scalar((turi::neural_net::float_scalar *)(a1 + 472));
  v6 = (void **)(a1 + 448);
  std::vector<xgboost_old::tree::HistMaker<xgboost_old::tree::GradStats>::HistSet,std::allocator<xgboost_old::tree::HistMaker<xgboost_old::tree::GradStats>::HistSet>>::__destroy_vector::operator()[abi:ne180100](&v6);
  v2 = *(void **)(a1 + 424);
  if (v2)
  {
    *(_QWORD *)(a1 + 432) = v2;
    operator delete(v2);
  }
  v6 = (void **)(a1 + 400);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  v6 = (void **)(a1 + 376);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  v6 = (void **)(a1 + 352);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  v3 = *(void **)(a1 + 328);
  if (v3)
  {
    *(_QWORD *)(a1 + 336) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 304);
  if (v4)
  {
    *(_QWORD *)(a1 + 312) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 280);
  if (v5)
  {
    *(_QWORD *)(a1 + 288) = v5;
    operator delete(v5);
  }
  xgboost_old::tree::HistMaker<xgboost_old::tree::GradStats>::~HistMaker(a1);
}

void xgboost_old::tree::BaseMaker::SetNonDefaultPositionCol(uint64_t a1, uint64_t *a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v6;
  uint64_t v7;
  std::vector<unsigned int>::pointer end;
  unint64_t v10;
  int v11;
  int v12;
  unsigned int *v13;
  std::vector<unsigned int>::pointer begin;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  int *v23;
  uint64_t v24;
  unint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD v33[4];
  int v34;
  _QWORD v35[2];
  std::vector<unsigned int> __p;

  memset(&__p, 0, sizeof(__p));
  v7 = *a2;
  v6 = a2[1];
  if (v6 != *a2)
  {
    end = 0;
    v10 = 0;
    do
    {
      v11 = *(_DWORD *)(v7 + 4 * v10);
      if (*(_DWORD *)(*a4 + 20 * v11 + 4) != -1)
      {
        v12 = *(_DWORD *)(*a4 + 20 * v11 + 12) & 0x7FFFFFFF;
        if (end >= __p.__end_cap_.__value_)
        {
          begin = __p.__begin_;
          v15 = end - __p.__begin_;
          v16 = v15 + 1;
          if ((unint64_t)(v15 + 1) >> 62)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          v17 = (char *)__p.__end_cap_.__value_ - (char *)__p.__begin_;
          if (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 1 > v16)
            v16 = v17 >> 1;
          if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL)
            v18 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v18 = v16;
          if (v18)
          {
            v18 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&__p.__end_cap_, v18);
            v20 = v19;
            begin = __p.__begin_;
            end = __p.__end_;
          }
          else
          {
            v20 = 0;
          }
          v21 = (unsigned int *)(v18 + 4 * v15);
          *v21 = v12;
          v13 = v21 + 1;
          while (end != begin)
          {
            v22 = *--end;
            *--v21 = v22;
          }
          __p.__begin_ = v21;
          __p.__end_ = v13;
          __p.__end_cap_.__value_ = (unsigned int *)(v18 + 4 * v20);
          if (begin)
            operator delete(begin);
        }
        else
        {
          *end = v12;
          v13 = end + 1;
        }
        __p.__end_ = v13;
        end = v13;
        v7 = *a2;
        v6 = a2[1];
      }
      ++v10;
    }
    while (v10 < (v6 - v7) >> 2);
  }
  std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
  v23 = std::__unique[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<unsigned int *>,std::__wrap_iter<unsigned int *>,std::__equal_to &>((int *)__p.__begin_, (int *)__p.__end_);
  std::vector<int>::resize(&__p, ((char *)v23 - (char *)__p.__begin_) >> 2);
  v24 = (*(uint64_t (**)(uint64_t, std::vector<unsigned int> *))(*(_QWORD *)a3 + 16))(a3, &__p);
  while ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v24 + 24))(v24))
  {
    v25 = (unint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 32))(v24);
    if (*v25)
    {
      v26 = 0;
      v27 = 0;
      do
      {
        v28 = v25[1];
        v29 = (uint64_t *)(v25[2] + v26);
        v31 = *v29;
        v30 = v29[1];
        v35[0] = v31;
        v35[1] = v30;
        v34 = 0;
        v34 = *(_DWORD *)(v28 + 4 * v27);
        v33[0] = v35;
        v33[1] = a1;
        v33[2] = a4;
        v33[3] = &v34;
        turi::parallel_for<xgboost_old::tree::BaseMaker::SetNonDefaultPositionCol(std::vector<int> const&,xgboost_old::IFMatrix *,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#1}>(0, v30, (uint64_t)v33);
        ++v27;
        v26 += 16;
      }
      while (v27 < *v25);
    }
  }
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
}

void sub_2183D610C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void xgboost_old::tree::HistMaker<xgboost_old::tree::GradStats>::Update(_QWORD *a1, _QWORD *a2, const char *a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  float v15;
  uint64_t v16;

  xgboost_old::tree::BaseMaker::InitData((uint64_t)a1, a2, a3, (uint64_t *)(a4 + 16), (uint64_t)a5);
  (*(void (**)(_QWORD *, const char *, uint64_t *, _QWORD *))(*a1 + 64))(a1, a3, a5, a1 + 32);
  if (*((int *)a1 + 4) <= 0)
  {
    v11 = a1[10];
    v12 = a1[11];
  }
  else
  {
    v10 = 0;
    do
    {
      (*(void (**)(_QWORD *, _QWORD *, const char *, uint64_t, _QWORD *, uint64_t *))(*a1 + 56))(a1, a2, a3, a4, a1 + 32, a5);
      (*(void (**)(_QWORD *, _QWORD *, const char *, uint64_t, _QWORD *, uint64_t *))(*a1 + 80))(a1, a2, a3, a4, a1 + 32, a5);
      xgboost_old::tree::HistMaker<xgboost_old::tree::GradStats>::FindSplit((uint64_t)a1, v10, (uint64_t)a2, (uint64_t)a3, a4, a1 + 32, a5);
      (*(void (**)(_QWORD *, const char *, uint64_t *))(*a1 + 72))(a1, a3, a5);
      xgboost_old::tree::BaseMaker::UpdateQueueExpand((uint64_t)a1, (uint64_t)a5);
      v11 = a1[10];
      v12 = a1[11];
      if (v12 == v11)
        break;
      v10 = (v10 + 1);
    }
    while ((int)v10 < *((_DWORD *)a1 + 4));
  }
  if (v12 != v11)
  {
    v13 = 0;
    do
    {
      v14 = *(int *)(v11 + 4 * v13);
      v15 = *(float *)(a5[6] + 16 * v14 + 8) * *((float *)a1 + 2);
      v16 = *a5 + 20 * (int)v14;
      *(float *)(v16 + 16) = v15;
      *(_QWORD *)(v16 + 4) = -1;
      ++v13;
      v11 = a1[10];
    }
    while (v13 < (a1[11] - v11) >> 2);
  }
}

uint64_t xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::ResetPosAndPropose(uint64_t a1, _QWORD *a2, uint64_t a3, _QWORD *a4, uint64_t *a5, uint64_t a6)
{
  const char *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int v14;
  unint64_t v15;
  uint64_t v16;
  float v17;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _DWORD *v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  int v30;
  const char *v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  double v35;
  unint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  uint64_t *v39;
  unint64_t v40;
  const char *v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  _DWORD *v56;
  void **v57;
  unint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  _DWORD *v63;
  char *v64;
  char *v65;
  uint64_t v66;
  _DWORD *v67;
  int v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  unint64_t v75;
  float *v76;
  unint64_t i;
  float v78;
  float *v79;
  float *v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  char *v85;
  float *v86;
  int v87;
  float v88;
  float v89;
  float *v90;
  float v91;
  float v92;
  unint64_t v93;
  float *v94;
  float *v95;
  float *v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  char *v101;
  float *v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  char *v107;
  float *v108;
  int v109;
  unint64_t v110;
  unint64_t v111;
  char *v112;
  char *v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  unint64_t v117;
  char *v118;
  char *v119;
  _DWORD *v120;
  int v121;
  float *v122;
  int v123;
  unint64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  int v128;
  unint64_t v129;
  char *v130;
  _DWORD *v131;
  char *v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  unint64_t v136;
  char *v137;
  char *v138;
  int v139;
  unint64_t v140;
  unint64_t v141;
  char *v142;
  char *v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  unint64_t v147;
  char *v148;
  char *v149;
  int v150;
  uint64_t v153;
  void **v155;
  uint64_t v157;
  _QWORD *v158;
  int v159;
  uint64_t v160;
  _BYTE v161[24];
  _BYTE *v162;
  uint64_t v163;

  v163 = *MEMORY[0x24BDAC8D0];
  v160 = a3;
  v158 = (_QWORD *)(a1 + 304);
  std::vector<int>::resize((std::vector<unsigned int> *)(a1 + 304), *(int *)(a6 + 112));
  v10 = *(void **)(a1 + 304);
  v11 = *(_QWORD *)(a1 + 312) - (_QWORD)v10;
  if (v11 >= 1)
    memset(v10, 255, 4 * (((unint64_t)v11 >> 2) - ((unint64_t)v11 > 3)) + 4);
  *(_QWORD *)(a1 + 336) = *(_QWORD *)(a1 + 328);
  v12 = *a5;
  if (a5[1] != *a5)
  {
    v13 = 0;
    do
    {
      v14 = 2 * *(_DWORD *)(v12 + 4 * v13);
      v15 = v14 | 1;
      xgboost_old::utils::Assert(v15 < (uint64_t)(*(_QWORD *)(a1 + 288) - *(_QWORD *)(a1 + 280)) >> 2, "FeatHelper fid exceed query bound ", v9);
      v16 = *(_QWORD *)(a1 + 280);
      v17 = *(float *)(v16 + 4 * v14);
      if (v17 == -3.4028e38 || *(float *)(v16 + 4 * v15) == (float)-v17)
      {
        v12 = *a5;
        *(_DWORD *)(*v158 + 4 * *(unsigned int *)(*a5 + 4 * v13)) = -2;
      }
      else
      {
        v19 = *(char **)(a1 + 328);
        v20 = *(char **)(a1 + 336);
        v21 = *a5;
        v22 = (v20 - v19) >> 2;
        *(_DWORD *)(*(_QWORD *)(a1 + 304) + 4 * *(unsigned int *)(*a5 + 4 * v13)) = v22;
        v23 = *(_QWORD *)(a1 + 344);
        if ((unint64_t)v20 >= v23)
        {
          v25 = v22 + 1;
          if ((unint64_t)(v22 + 1) >> 62)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          v26 = v23 - (_QWORD)v19;
          if (v26 >> 1 > v25)
            v25 = v26 >> 1;
          if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFFCLL)
            v27 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v27 = v25;
          if (v27)
          {
            v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(a1 + 344, v27);
            v19 = *(char **)(a1 + 328);
            v20 = *(char **)(a1 + 336);
          }
          else
          {
            v28 = 0;
          }
          v29 = &v28[4 * v22];
          *(_DWORD *)v29 = *(_DWORD *)(v21 + 4 * v13);
          v24 = v29 + 4;
          while (v20 != v19)
          {
            v30 = *((_DWORD *)v20 - 1);
            v20 -= 4;
            *((_DWORD *)v29 - 1) = v30;
            v29 -= 4;
          }
          *(_QWORD *)(a1 + 328) = v29;
          *(_QWORD *)(a1 + 336) = v24;
          *(_QWORD *)(a1 + 344) = &v28[4 * v27];
          if (v19)
            operator delete(v19);
        }
        else
        {
          *(_DWORD *)v20 = *(_DWORD *)(v21 + 4 * v13);
          v24 = v20 + 4;
        }
        *(_QWORD *)(a1 + 336) = v24;
        v12 = *a5;
      }
      ++v13;
    }
    while (v13 < (a5[1] - v12) >> 2);
  }
  xgboost_old::tree::BaseMaker::GetNodeStats<xgboost_old::tree::GradStats>((turi::thread *)a1, a2, a3, a6, (uint64_t)a4, (uint64_t *)(a1 + 376), (_QWORD *)(a1 + 424));
  std::vector<xgboost_old::utils::WXQuantileSketch<float,float>>::resize((uint64_t *)(a1 + 528), ((uint64_t)(*(_QWORD *)(a1 + 336) - *(_QWORD *)(a1 + 328)) >> 2)* ((uint64_t)(*(_QWORD *)(a1 + 88) - *(_QWORD *)(a1 + 80)) >> 2));
  v32 = *(_QWORD *)(a1 + 528);
  if (*(_QWORD *)(a1 + 536) == v32)
  {
    v38 = 0;
  }
  else
  {
    v33 = 0;
    do
    {
      v34 = 0;
      v35 = *(float *)(a1 + 56);
      do
        v36 = vcvtpd_u64_f64((double)++v34 / v35) + 1;
      while (v36 << v34 < *a4);
      v37 = (_QWORD *)(v32 + 136 * v33);
      v37[4] = v34;
      v37[5] = v36;
      xgboost_old::utils::Assert(v35 * (double)v36 >= (double)v34, "invalid init parameter", v31);
      std::vector<xgboost_old::SparseBatch::Entry>::resize((uint64_t)v37, 1uLL);
      v37[3] = 0;
      v37[10] = v37[9];
      v37[7] = v37[6];
      ++v33;
      v32 = *(_QWORD *)(a1 + 528);
      v38 = 0xF0F0F0F0F0F0F0F1 * ((*(_QWORD *)(a1 + 536) - v32) >> 3);
    }
    while (v33 < v38);
  }
  v39 = (uint64_t *)(a1 + 448);
  std::vector<xgboost_old::utils::QuantileSketchTemplate<float,float,xgboost_old::utils::WXQSummary<float,float>>::SummaryContainer,std::allocator<xgboost_old::utils::QuantileSketchTemplate<float,float,xgboost_old::utils::WXQSummary<float,float>>::SummaryContainer>>::resize((uint64_t *)(a1 + 448), v38);
  v40 = (float)(*(float *)(a1 + 60) / *(float *)(a1 + 56));
  xgboost_old::utils::Check((_DWORD)v40 != 0, "sketch_ratio/sketch_eps must be bigger than 1", v41);
  v159 = v40;
  v43 = *(_QWORD *)(a1 + 536);
  v44 = *(_QWORD *)(a1 + 528);
  if (v43 != v44)
  {
    v45 = 0;
    v46 = 0;
    do
    {
      v47 = *v39;
      v48 = *v39 + v45;
      if (v40 > (uint64_t)(*(_QWORD *)(v48 + 24) - *(_QWORD *)(v48 + 16)) >> 4)
      {
        std::vector<xgboost_old::utils::WQSummary<float,float>::Entry,std::allocator<xgboost_old::utils::WQSummary<float,float>::Entry>>::resize(v48 + 16, v40);
        if (*(_QWORD *)(v48 + 24) == *(_QWORD *)(v48 + 16))
          v49 = 0;
        else
          v49 = *(_QWORD *)(v48 + 16);
        *(_QWORD *)(v47 + v45) = v49;
        v43 = *(_QWORD *)(a1 + 536);
        v44 = *(_QWORD *)(a1 + 528);
      }
      ++v46;
      v45 += 40;
    }
    while (v46 < 0xF0F0F0F0F0F0F0F1 * ((v43 - v44) >> 3));
  }
  v50 = *(_QWORD *)(a1 + 448);
  v51 = *(_QWORD *)(a1 + 456) - v50;
  if (v51)
  {
    v52 = 0xCCCCCCCCCCCCCCCDLL * (v51 >> 3);
    v53 = operator new(0x30uLL);
    *v53 = &unk_24D93EA68;
    v53[1] = a1;
    v53[2] = &v160;
    v53[3] = a2;
    v53[4] = a6;
    v53[5] = &v159;
    v162 = v53;
    rabit::SerializeReducer<xgboost_old::utils::QuantileSketchTemplate<float,float,xgboost_old::utils::WXQSummary<float,float>>::SummaryContainer>::Allreduce(a1 + 472, v50, (16 * v40) | 8, v52, (uint64_t)rabit::InvokeLambda_, (uint64_t)v161);
    v54 = v162;
    if (v162 == v161)
    {
      v55 = 4;
      v54 = v161;
    }
    else
    {
      if (!v162)
        goto LABEL_50;
      v55 = 5;
    }
    (*(void (**)(void))(*v54 + 8 * v55))();
  }
LABEL_50:
  v56 = *(_DWORD **)(a1 + 152);
  v57 = (void **)(a1 + 176);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a1 + 176);
  *(_QWORD *)(a1 + 160) = v56;
  v155 = (void **)(a1 + 152);
  v58 = *(_QWORD *)(a1 + 168);
  if ((unint64_t)v56 >= v58)
  {
    v60 = v58 - (_QWORD)v56;
    v61 = v60 >> 1;
    if ((unint64_t)(v60 >> 1) <= 1)
      v61 = 1;
    if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFFCLL)
      v62 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v62 = v61;
    v63 = std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(a1 + 168, v62);
    v64 = *(char **)(a1 + 152);
    v65 = *(char **)(a1 + 160);
    v67 = &v63[v66];
    *v63 = 0;
    v59 = (char *)(v63 + 1);
    while (v65 != v64)
    {
      v68 = *((_DWORD *)v65 - 1);
      v65 -= 4;
      *--v63 = v68;
    }
    *(_QWORD *)(a1 + 152) = v63;
    *(_QWORD *)(a1 + 160) = v59;
    *(_QWORD *)(a1 + 168) = v67;
    if (v64)
      operator delete(v64);
  }
  else
  {
    *v56 = 0;
    v59 = (char *)(v56 + 1);
  }
  *(_QWORD *)(a1 + 160) = v59;
  v69 = *(_QWORD *)(a1 + 88) - *(_QWORD *)(a1 + 80);
  if (v69)
  {
    v153 = a1 + 168;
    v157 = 0;
    v70 = (_QWORD *)(a1 + 192);
    while (1)
    {
      v71 = *a5;
      if (a5[1] != *a5)
        break;
LABEL_153:
      v130 = *(char **)(a1 + 184);
      v129 = *(_QWORD *)(a1 + 192);
      if ((unint64_t)v130 >= v129)
      {
        v132 = (char *)*v57;
        v133 = (v130 - (_BYTE *)*v57) >> 2;
        v134 = v133 + 1;
        if ((unint64_t)(v133 + 1) >> 62)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v135 = v129 - (_QWORD)v132;
        if (v135 >> 1 > v134)
          v134 = v135 >> 1;
        if ((unint64_t)v135 >= 0x7FFFFFFFFFFFFFFCLL)
          v136 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v136 = v134;
        if (v136)
        {
          v137 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(a1 + 192, v136);
          v132 = *(char **)(a1 + 176);
          v130 = *(char **)(a1 + 184);
        }
        else
        {
          v137 = 0;
        }
        v138 = &v137[4 * v133];
        *(_DWORD *)v138 = 0;
        v131 = v138 + 4;
        while (v130 != v132)
        {
          v139 = *((_DWORD *)v130 - 1);
          v130 -= 4;
          *((_DWORD *)v138 - 1) = v139;
          v138 -= 4;
        }
        *(_QWORD *)(a1 + 176) = v138;
        *(_QWORD *)(a1 + 184) = v131;
        *(_QWORD *)(a1 + 192) = &v137[4 * v136];
        if (v132)
          operator delete(v132);
      }
      else
      {
        *(_DWORD *)v130 = 0;
        v131 = v130 + 4;
      }
      *(_QWORD *)(a1 + 184) = v131;
      v140 = ((unint64_t)v131 - *(_QWORD *)(a1 + 176)) >> 2;
      v142 = *(char **)(a1 + 160);
      v141 = *(_QWORD *)(a1 + 168);
      if ((unint64_t)v142 >= v141)
      {
        v143 = (char *)*v155;
        v144 = (v142 - (_BYTE *)*v155) >> 2;
        v145 = v144 + 1;
        if ((unint64_t)(v144 + 1) >> 62)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v146 = v141 - (_QWORD)v143;
        if (v146 >> 1 > v145)
          v145 = v146 >> 1;
        if ((unint64_t)v146 >= 0x7FFFFFFFFFFFFFFCLL)
          v147 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v147 = v145;
        if (v147)
        {
          v148 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v153, v147);
          v143 = *(char **)(a1 + 152);
          v142 = *(char **)(a1 + 160);
        }
        else
        {
          v148 = 0;
        }
        v149 = &v148[4 * v144];
        *(_DWORD *)v149 = v140;
        v59 = v149 + 4;
        while (v142 != v143)
        {
          v150 = *((_DWORD *)v142 - 1);
          v142 -= 4;
          *((_DWORD *)v149 - 1) = v150;
          v149 -= 4;
        }
        *(_QWORD *)(a1 + 152) = v149;
        *(_QWORD *)(a1 + 160) = v59;
        *(_QWORD *)(a1 + 168) = &v148[4 * v147];
        if (v143)
          operator delete(v143);
      }
      else
      {
        *(_DWORD *)v142 = v140;
        v59 = v142 + 4;
      }
      *(_QWORD *)(a1 + 160) = v59;
      v69 = *(_QWORD *)(a1 + 88) - *(_QWORD *)(a1 + 80);
      if (++v157 >= (unint64_t)(v69 >> 2))
        return xgboost_old::utils::Assert((v69 >> 2) + (v69 >> 2) * ((a5[1] - *a5) >> 2) + 1 == (v59 - (_BYTE *)*v155) >> 2, "cut space inconsistent", v42);
    }
    v72 = 0;
    while (1)
    {
      v73 = *(unsigned int *)(*v158 + 4 * *(unsigned int *)(v71 + 4 * v72));
      if ((v73 & 0x80000000) != 0)
      {
        xgboost_old::utils::Assert((_DWORD)v73 == -2, "BUG in mark", v42);
        v91 = *(float *)(*(_QWORD *)(a1 + 280) + 4 * ((2 * *(_DWORD *)(*a5 + 4 * v72)) | 1u));
        v92 = (float)(v91 + fabsf(v91)) + 0.00001;
        v94 = *(float **)(a1 + 184);
        v93 = *(_QWORD *)(a1 + 192);
        if ((unint64_t)v94 >= v93)
        {
          v102 = (float *)*v57;
          v103 = ((char *)v94 - (_BYTE *)*v57) >> 2;
          v104 = v103 + 1;
          if ((unint64_t)(v103 + 1) >> 62)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          v105 = v93 - (_QWORD)v102;
          if (v105 >> 1 > v104)
            v104 = v105 >> 1;
          if ((unint64_t)v105 >= 0x7FFFFFFFFFFFFFFCLL)
            v106 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v106 = v104;
          if (v106)
          {
            v107 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(a1 + 192, v106);
            v102 = *(float **)(a1 + 176);
            v94 = *(float **)(a1 + 184);
          }
          else
          {
            v107 = 0;
          }
          v122 = (float *)&v107[4 * v103];
          *v122 = v92;
          v95 = v122 + 1;
          while (v94 != v102)
          {
            v123 = *((_DWORD *)v94-- - 1);
            *((_DWORD *)v122-- - 1) = v123;
          }
          *(_QWORD *)(a1 + 176) = v122;
          *(_QWORD *)(a1 + 184) = v95;
          *(_QWORD *)(a1 + 192) = &v107[4 * v106];
          if (v102)
            operator delete(v102);
        }
        else
        {
          *v94 = v92;
          v95 = v94 + 1;
        }
        *(_QWORD *)(a1 + 184) = v95;
        v110 = ((unint64_t)v95 - *(_QWORD *)(a1 + 176)) >> 2;
        v112 = *(char **)(a1 + 160);
        v124 = *(_QWORD *)(a1 + 168);
        if ((unint64_t)v112 >= v124)
        {
          v113 = (char *)*v155;
          v125 = (v112 - (_BYTE *)*v155) >> 2;
          v126 = v125 + 1;
          if ((unint64_t)(v125 + 1) >> 62)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          v127 = v124 - (_QWORD)v113;
          if (v127 >> 1 > v126)
            v126 = v127 >> 1;
          if ((unint64_t)v127 >= 0x7FFFFFFFFFFFFFFCLL)
            v117 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v117 = v126;
          if (v117)
          {
            v118 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v153, v117);
            v113 = *(char **)(a1 + 152);
            v112 = *(char **)(a1 + 160);
          }
          else
          {
            v118 = 0;
          }
          v119 = &v118[4 * v125];
          *(_DWORD *)v119 = v110;
          v120 = v119 + 4;
          while (v112 != v113)
          {
            v128 = *((_DWORD *)v112 - 1);
            v112 -= 4;
            *((_DWORD *)v119 - 1) = v128;
            v119 -= 4;
          }
          goto LABEL_150;
        }
      }
      else
      {
        v74 = (_QWORD *)(*(_QWORD *)(a1 + 448)
                       + 40 * (v73 + ((uint64_t)(*(_QWORD *)(a1 + 336) - *(_QWORD *)(a1 + 328)) >> 2) * v157));
        v75 = v74[1];
        v76 = *(float **)(a1 + 184);
        if (v75 >= 2)
        {
          for (i = 1; i < v75; ++i)
          {
            v78 = *(float *)(*v74 + 16 * i + 12) + -0.00001;
            if (i == 1 || v78 > *(v76 - 1))
            {
              if ((unint64_t)v76 >= *v70)
              {
                v80 = (float *)*v57;
                v81 = ((char *)v76 - (_BYTE *)*v57) >> 2;
                v82 = v81 + 1;
                if ((unint64_t)(v81 + 1) >> 62)
                  std::vector<float>::__throw_length_error[abi:ne180100]();
                v83 = *v70 - (_QWORD)v80;
                if (v83 >> 1 > v82)
                  v82 = v83 >> 1;
                if ((unint64_t)v83 >= 0x7FFFFFFFFFFFFFFCLL)
                  v84 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v84 = v82;
                if (v84)
                {
                  v85 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(a1 + 192, v84);
                  v80 = *(float **)(a1 + 176);
                  v76 = *(float **)(a1 + 184);
                }
                else
                {
                  v85 = 0;
                }
                v86 = (float *)&v85[4 * v81];
                *v86 = v78;
                v79 = v86 + 1;
                while (v76 != v80)
                {
                  v87 = *((_DWORD *)v76-- - 1);
                  *((_DWORD *)v86-- - 1) = v87;
                }
                *(_QWORD *)(a1 + 176) = v86;
                *(_QWORD *)(a1 + 184) = v79;
                *(_QWORD *)(a1 + 192) = &v85[4 * v84];
                if (v80)
                  operator delete(v80);
              }
              else
              {
                *v76 = v78;
                v79 = v76 + 1;
              }
              *(_QWORD *)(a1 + 184) = v79;
              v75 = v74[1];
              v76 = v79;
            }
          }
        }
        if (v75)
        {
          v88 = *(float *)(*v74 + 16 * v75 - 4);
          v89 = (float)(v88 + fabsf(v88)) + 0.00001;
          if ((unint64_t)v76 >= *v70)
          {
            v96 = (float *)*v57;
            v97 = ((char *)v76 - (_BYTE *)*v57) >> 2;
            v98 = v97 + 1;
            if ((unint64_t)(v97 + 1) >> 62)
              std::vector<float>::__throw_length_error[abi:ne180100]();
            v99 = *v70 - (_QWORD)v96;
            if (v99 >> 1 > v98)
              v98 = v99 >> 1;
            if ((unint64_t)v99 >= 0x7FFFFFFFFFFFFFFCLL)
              v100 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v100 = v98;
            if (v100)
            {
              v101 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(a1 + 192, v100);
              v96 = *(float **)(a1 + 176);
              v76 = *(float **)(a1 + 184);
            }
            else
            {
              v101 = 0;
            }
            v108 = (float *)&v101[4 * v97];
            *v108 = v89;
            v90 = v108 + 1;
            while (v76 != v96)
            {
              v109 = *((_DWORD *)v76-- - 1);
              *((_DWORD *)v108-- - 1) = v109;
            }
            *(_QWORD *)(a1 + 176) = v108;
            *(_QWORD *)(a1 + 184) = v90;
            *(_QWORD *)(a1 + 192) = &v101[4 * v100];
            if (v96)
              operator delete(v96);
          }
          else
          {
            *v76 = v89;
            v90 = v76 + 1;
          }
          *(_QWORD *)(a1 + 184) = v90;
          v76 = v90;
        }
        v110 = ((unint64_t)v76 - *(_QWORD *)(a1 + 176)) >> 2;
        v112 = *(char **)(a1 + 160);
        v111 = *(_QWORD *)(a1 + 168);
        if ((unint64_t)v112 >= v111)
        {
          v113 = (char *)*v155;
          v114 = (v112 - (_BYTE *)*v155) >> 2;
          v115 = v114 + 1;
          if ((unint64_t)(v114 + 1) >> 62)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          v116 = v111 - (_QWORD)v113;
          if (v116 >> 1 > v115)
            v115 = v116 >> 1;
          if ((unint64_t)v116 >= 0x7FFFFFFFFFFFFFFCLL)
            v117 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v117 = v115;
          if (v117)
          {
            v118 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v153, v117);
            v113 = *(char **)(a1 + 152);
            v112 = *(char **)(a1 + 160);
          }
          else
          {
            v118 = 0;
          }
          v119 = &v118[4 * v114];
          *(_DWORD *)v119 = v110;
          v120 = v119 + 4;
          while (v112 != v113)
          {
            v121 = *((_DWORD *)v112 - 1);
            v112 -= 4;
            *((_DWORD *)v119 - 1) = v121;
            v119 -= 4;
          }
LABEL_150:
          *(_QWORD *)(a1 + 152) = v119;
          *(_QWORD *)(a1 + 160) = v120;
          *(_QWORD *)(a1 + 168) = &v118[4 * v117];
          if (v113)
            operator delete(v113);
          goto LABEL_152;
        }
      }
      *(_DWORD *)v112 = v110;
      v120 = v112 + 4;
LABEL_152:
      *(_QWORD *)(a1 + 160) = v120;
      ++v72;
      v71 = *a5;
      if (v72 >= (a5[1] - *a5) >> 2)
        goto LABEL_153;
    }
  }
  return xgboost_old::utils::Assert((v69 >> 2) + (v69 >> 2) * ((a5[1] - *a5) >> 2) + 1 == (v59 - (_BYTE *)*v155) >> 2, "cut space inconsistent", v42);
}

void sub_2183D6E28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char *a19)
{
  char *v19;
  char *v21;
  uint64_t v22;

  v21 = a19;
  if (a19 == v19)
  {
    v22 = 4;
    v21 = &a16;
  }
  else
  {
    if (!a19)
      goto LABEL_6;
    v22 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::InitWorkSet(uint64_t a1, uint64_t a2, uint64_t a3, std::vector<unsigned int> *a4)
{
  uint64_t *v6;
  const char *v7;

  v6 = (uint64_t *)(a1 + 280);
  xgboost_old::tree::BaseMaker::FMetaHelper::InitByCol(a1 + 280, a2, a3);
  xgboost_old::tree::BaseMaker::FMetaHelper::SampleCol(v6, a4, v7, *(float *)(a1 + 48));
}

void xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::ResetPositionAfterSplit(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  unint64_t v7;
  _QWORD v8[3];

  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 40))(a1, a1 + 80, a2, a3);
  v6 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 64))(a2);
  v7 = ((v6[1] - *v6) >> 2);
  v8[0] = v6;
  v8[1] = a1;
  v8[2] = a3;
  turi::parallel_for<xgboost_old::tree::BaseMaker::ResetPositionCol(std::vector<int> const&,xgboost_old::IFMatrix *,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#1}>(0, v7, (uint64_t)v8);
}

_QWORD *xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::CreateHist(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  _QWORD *v32;
  _QWORD *result;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  _BYTE v37[24];
  _BYTE *v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v35 = a3;
  std::vector<int>::resize((std::vector<unsigned int> *)(a1 + 304), *(int *)(a6 + 112));
  v11 = *(_QWORD *)(a1 + 304);
  v12 = *(_QWORD *)(a1 + 312) - v11;
  if (v12 >= 1)
    memset(*(void **)(a1 + 304), 255, 4 * (((unint64_t)v12 >> 2) - ((unint64_t)v12 > 3)) + 4);
  v13 = *a5;
  v14 = a5[1];
  v15 = v14 - *a5;
  if (v14 != *a5)
  {
    v16 = 0;
    v17 = v15 >> 2;
    if (v17 <= 1)
      v17 = 1;
    do
    {
      *(_DWORD *)(v11 + 4 * *(unsigned int *)(v13 + 4 * v16)) = v16;
      ++v16;
    }
    while (v17 != v16);
  }
  v18 = a1 + 200;
  std::vector<xgboost_old::tree::HistMaker<xgboost_old::tree::GradStats>::HistSet,std::allocator<xgboost_old::tree::HistMaker<xgboost_old::tree::GradStats>::HistSet>>::resize((uint64_t *)(a1 + 200), 1uLL);
  v19 = *(_QWORD **)(a1 + 200);
  v20 = (uint64_t)(v19 + 2);
  v21 = v19[2];
  if (v19[3] != v21)
  {
    v22 = 0;
    v23 = 0;
    do
    {
      v24 = (_QWORD *)(v21 + v22);
      *v24 = 0;
      v24[1] = 0;
      ++v23;
      v19 = *(_QWORD **)v18;
      v21 = *(_QWORD *)(*(_QWORD *)v18 + 16);
      v22 += 16;
    }
    while (v23 < (*(_QWORD *)(*(_QWORD *)v18 + 24) - v21) >> 4);
    v20 = (uint64_t)(v19 + 2);
  }
  if (*(_QWORD *)(a1 + 160) == *(_QWORD *)(a1 + 152))
    v25 = 0;
  else
    v25 = *(_QWORD *)(a1 + 152);
  *v19 = v25;
  v26 = *(_QWORD *)(a1 + 176);
  v27 = *(_QWORD *)(a1 + 184) - v26;
  if (!v27)
    v26 = 0;
  v19[1] = v26;
  v36 = 0uLL;
  std::vector<xgboost_old::tree::GradStats>::resize(v20, v27 >> 2, &v36);
  v28 = *(_QWORD *)(*(_QWORD *)(a1 + 200) + 16);
  v29 = *(_QWORD *)(*(_QWORD *)(a1 + 200) + 24);
  v30 = v29 - v28;
  if (v29 == v28)
    v31 = 0;
  else
    v31 = *(void **)(*(_QWORD *)(a1 + 200) + 16);
  v32 = operator new(0x38uLL);
  *v32 = &unk_24D93EB28;
  v32[1] = a1;
  v32[2] = &v35;
  v32[3] = a5;
  v32[4] = a2;
  v32[5] = a4;
  v32[6] = a6;
  v38 = v32;
  rabit::engine::ReduceHandle::Allreduce((rabit::engine::ReduceHandle *)(a1 + 224), v31, 0x10uLL, v30 >> 4, (uint64_t (*)(void *, void *))rabit::InvokeLambda_, v37);
  result = v38;
  if (v38 == v37)
  {
    v34 = 4;
    result = v37;
  }
  else
  {
    if (!v38)
      return result;
    v34 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8 * v34))(result);
}

void sub_2183D7130(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v15;
  char *v17;
  uint64_t v18;

  v17 = a15;
  if (a15 == v15)
  {
    v18 = 4;
    v17 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t xgboost_old::tree::HistMaker<xgboost_old::tree::GradStats>::ThreadWSpace::~ThreadWSpace(uint64_t a1)
{
  void *v2;
  void *v3;
  void **v5;

  v5 = (void **)(a1 + 48);
  std::vector<xgboost_old::tree::HistMaker<xgboost_old::tree::GradStats>::HistSet,std::allocator<xgboost_old::tree::HistMaker<xgboost_old::tree::GradStats>::HistSet>>::__destroy_vector::operator()[abi:ne180100](&v5);
  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
  v3 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v3;
    operator delete(v3);
  }
  return a1;
}

void xgboost_old::tree::BaseMaker::~BaseMaker(xgboost_old::tree::BaseMaker *this)
{
  void *v2;
  void *v3;
  void *v4;

  *(_QWORD *)this = &unk_24D93E8E8;
  v2 = (void *)*((_QWORD *)this + 16);
  if (v2)
  {
    *((_QWORD *)this + 17) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 13);
  if (v3)
  {
    *((_QWORD *)this + 14) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 10);
  if (v4)
  {
    *((_QWORD *)this + 11) = v4;
    operator delete(v4);
  }
}

void xgboost_old::tree::HistMaker<xgboost_old::tree::GradStats>::InitWorkSet(int a1, int a2, uint64_t a3, std::vector<unsigned int> *this)
{
  std::vector<unsigned int>::pointer begin;
  unsigned int *end;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  std::vector<int>::resize(this, *(int *)(a3 + 112));
  begin = this->__begin_;
  end = this->__end_;
  v7 = (char *)end - (char *)this->__begin_;
  if (end != this->__begin_)
  {
    v8 = 0;
    v9 = v7 >> 2;
    if (v9 <= 1)
      v9 = 1;
    do
    {
      begin[v8] = v8;
      ++v8;
    }
    while (v9 != v8);
  }
}

void std::vector<xgboost_old::tree::HistMaker<xgboost_old::tree::GradStats>::HistSet,std::allocator<xgboost_old::tree::HistMaker<xgboost_old::tree::GradStats>::HistSet>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<xgboost_old::tree::HistMaker<xgboost_old::tree::GradStats>::HistSet,std::allocator<xgboost_old::tree::HistMaker<xgboost_old::tree::GradStats>::HistSet>>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<xgboost_old::tree::HistMaker<xgboost_old::tree::GradStats>::HistSet,std::allocator<xgboost_old::tree::HistMaker<xgboost_old::tree::GradStats>::HistSet>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;
  void *v4;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 40)
  {
    v4 = *(void **)(i - 24);
    if (v4)
    {
      *(_QWORD *)(i - 16) = v4;
      operator delete(v4);
    }
  }
  a1[1] = v2;
}

void rabit::SerializeReducerFunc_<xgboost_old::utils::QuantileSketchTemplate<float,float,xgboost_old::utils::WXQSummary<float,float>>::SummaryContainer>(uint64_t a1, uint64_t a2, int a3, turi::style_transfer::ResNet16ModelTrainer *this)
{
  signed int v6;
  const char *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  size_t v13;
  size_t v14;
  uint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  const char *v18;
  _BOOL8 v19;
  const char *v20;
  uint64_t v21;
  void *v22;
  _BOOL8 v23;
  const char *v24;
  _QWORD v26[3];
  uint64_t v27;
  uint64_t (**v28)(void **, _QWORD, uint64_t);
  uint64_t v29;
  uint64_t v30;
  size_t v31;
  __int128 v32;
  void *__p[2];
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;

  v6 = turi::style_transfer::ResNet16ModelTrainer::SupportsLossComponents(this);
  v37 = 0;
  v35 = 0u;
  v36 = 0u;
  v34 = 0;
  v32 = 0u;
  *(_OWORD *)__p = 0u;
  if (a3 >= 1)
  {
    v8 = v6;
    v9 = 0;
    v10 = v6;
    v11 = a3;
    do
    {
      v28 = (uint64_t (**)(void **, _QWORD, uint64_t))&unk_24D93E928;
      v29 = a1 + v9;
      v30 = v10;
      v31 = 0;
      v26[0] = &unk_24D93E928;
      v26[1] = a2 + v9;
      v26[2] = v10;
      v27 = 0;
      xgboost_old::utils::Assert(v8 > 7, "read can not have position excceed buffer length", v7);
      v13 = v31;
      if (v30 - v31 >= 8)
        v14 = 8;
      else
        v14 = v30 - v31;
      if (v14)
        memcpy((char *)&v35 + 8, (const void *)(v29 + v31), v14);
      v31 = v14 + v13;
      xgboost_old::utils::Check(v14 != 0, "invalid SummaryArray 1", v12);
      v15 = *((_QWORD *)&v35 + 1);
      if (*((_QWORD *)&v35 + 1) > (unint64_t)((uint64_t)(*((_QWORD *)&v36 + 1) - v36) >> 4))
      {
        std::vector<xgboost_old::utils::WQSummary<float,float>::Entry,std::allocator<xgboost_old::utils::WQSummary<float,float>::Entry>>::resize((uint64_t)&v36, *((unint64_t *)&v35 + 1));
        v15 = *((_QWORD *)&v35 + 1);
        if (*((_QWORD *)&v36 + 1) == (_QWORD)v36)
          v16 = 0;
        else
          v16 = v36;
        *(_QWORD *)&v35 = v16;
      }
      if (v15)
      {
        v17 = (*v28)((void **)&v28, v35, 16 * v15) != 0;
        xgboost_old::utils::Check(v17, "invalid SummaryArray 2", v18);
      }
      v19 = (*(uint64_t (**)(_QWORD *, char *, uint64_t))v26[0])(v26, (char *)&v32 + 8, 8) != 0;
      xgboost_old::utils::Check(v19, "invalid SummaryArray 1", v20);
      v21 = *((_QWORD *)&v32 + 1);
      if (*((_QWORD *)&v32 + 1) > (unint64_t)(((char *)__p[1] - (char *)__p[0]) >> 4))
      {
        std::vector<xgboost_old::utils::WQSummary<float,float>::Entry,std::allocator<xgboost_old::utils::WQSummary<float,float>::Entry>>::resize((uint64_t)__p, *((unint64_t *)&v32 + 1));
        v21 = *((_QWORD *)&v32 + 1);
        if (__p[1] == __p[0])
          v22 = 0;
        else
          v22 = __p[0];
        *(_QWORD *)&v32 = v22;
      }
      if (v21)
      {
        v23 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))v26[0])(v26, v32, 16 * v21) != 0;
        xgboost_old::utils::Check(v23, "invalid SummaryArray 2", v24);
      }
      xgboost_old::utils::QuantileSketchTemplate<float,float,xgboost_old::utils::WXQSummary<float,float>>::SummaryContainer::Reduce((uint64_t)&v32, (uint64_t)&v35, v10);
      v27 = 0;
      (*(void (**)(_QWORD *, char *, uint64_t))(v26[0] + 8))(v26, (char *)&v32 + 8, 8);
      if (*((_QWORD *)&v32 + 1))
        (*(void (**)(_QWORD *, _QWORD, uint64_t))(v26[0] + 8))(v26, v32, 16 * *((_QWORD *)&v32 + 1));
      v9 += v10;
      --v11;
    }
    while (v11);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  if ((_QWORD)v36)
  {
    *((_QWORD *)&v36 + 1) = v36;
    operator delete((void *)v36);
  }
}

void sub_2183D7598(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24)
{
  uint64_t v24;
  void *v26;

  if (__p)
    operator delete(__p);
  v26 = *(void **)(v24 - 112);
  if (v26)
  {
    *(_QWORD *)(v24 - 104) = v26;
    operator delete(v26);
  }
  _Unwind_Resume(exception_object);
}

void xgboost_old::utils::QuantileSketchTemplate<float,float,xgboost_old::utils::WXQSummary<float,float>>::SummaryContainer::Reduce(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void *v11;
  __int128 v12;
  void *__p[2];
  uint64_t v14;

  v5 = (unint64_t)(a3 - 8) >> 4;
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v6 = a1 + 16;
  if (v5 > (v8 - v7) >> 4)
  {
    std::vector<xgboost_old::utils::WQSummary<float,float>::Entry,std::allocator<xgboost_old::utils::WQSummary<float,float>::Entry>>::resize(v6, v5);
    if (*(_QWORD *)(a1 + 24) == *(_QWORD *)(a1 + 16))
      v9 = 0;
    else
      v9 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)a1 = v9;
  }
  v14 = 0;
  v12 = 0u;
  *(_OWORD *)__p = 0u;
  v10 = *(_QWORD *)(a2 + 8) + *(_QWORD *)(a1 + 8);
  if (v10)
  {
    std::vector<xgboost_old::utils::WQSummary<float,float>::Entry,std::allocator<xgboost_old::utils::WQSummary<float,float>::Entry>>::resize((uint64_t)__p, v10);
    if (__p[1] == __p[0])
      v11 = 0;
    else
      v11 = __p[0];
    *(_QWORD *)&v12 = v11;
  }
  xgboost_old::utils::WQSummary<float,float>::SetCombine((float32x2_t **)&v12, (float32x2_t **)a1, (float32x2_t **)a2);
  xgboost_old::utils::WXQSummary<float,float>::SetPrune((_QWORD *)a1, (uint64_t)&v12, (uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 4);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_2183D7688(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t rabit::utils::MemoryFixSizeBuffer::Seek(uint64_t this, uint64_t a2)
{
  *(_QWORD *)(this + 24) = a2;
  return this;
}

size_t rabit::utils::MemoryFixSizeBuffer::Read(rabit::utils::MemoryFixSizeBuffer *this, void *a2, const char *a3)
{
  size_t v3;
  uint64_t v6;

  v3 = (size_t)a3;
  xgboost_old::utils::Assert((unint64_t)&a3[*((_QWORD *)this + 3)] <= *((_QWORD *)this + 2), "read can not have position excceed buffer length", a3);
  v6 = *((_QWORD *)this + 3);
  if (*((_QWORD *)this + 2) - v6 < v3)
    v3 = *((_QWORD *)this + 2) - v6;
  if (v3)
  {
    memcpy(a2, (const void *)(*((_QWORD *)this + 1) + v6), v3);
    v6 = *((_QWORD *)this + 3);
  }
  *((_QWORD *)this + 3) = v6 + v3;
  return v3;
}

_QWORD *rabit::utils::MemoryFixSizeBuffer::Write(_QWORD *this, const void *a2, size_t a3)
{
  uint64_t v5;

  if (a3)
  {
    v5 = (uint64_t)this;
    xgboost_old::utils::Assert(this[3] + a3 <= this[2], "write position exceed fixed buffer size", (const char *)a3);
    this = memcpy((void *)(*(_QWORD *)(v5 + 8) + *(_QWORD *)(v5 + 24)), a2, a3);
    *(_QWORD *)(v5 + 24) += a3;
  }
  return this;
}

void rabit::utils::MemoryFixSizeBuffer::~MemoryFixSizeBuffer(rabit::utils::MemoryFixSizeBuffer *this)
{
  JUMPOUT(0x219A19A08);
}

BOOL rabit::utils::MemoryFixSizeBuffer::AtEnd(rabit::utils::MemoryFixSizeBuffer *this)
{
  return *((_QWORD *)this + 3) == *((_QWORD *)this + 2);
}

void std::vector<xgboost_old::utils::WQSummary<float,float>::Entry,std::allocator<xgboost_old::utils::WQSummary<float,float>::Entry>>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 4;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 16 * a2;
  }
  else
  {
    std::vector<xgboost_old::utils::WQSummary<float,float>::Entry,std::allocator<xgboost_old::utils::WQSummary<float,float>::Entry>>::__append((char **)a1, a2 - v2);
  }
}

void std::vector<xgboost_old::utils::WQSummary<float,float>::Entry,std::allocator<xgboost_old::utils::WQSummary<float,float>::Entry>>::__append(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;

  v4 = (uint64_t)(a1 + 2);
  v5 = a1[2];
  v6 = a1[1];
  if (a2 <= (v5 - v6) >> 4)
  {
    a1[1] = &v6[16 * a2];
  }
  else
  {
    v7 = *a1;
    v8 = v6 - *a1;
    v9 = a2 + (v8 >> 4);
    if (v9 >> 60)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 4;
    v11 = v5 - v7;
    if (v11 >> 3 > v9)
      v9 = v11 >> 3;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
      v12 = 0xFFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    if (v12)
    {
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::flexible_type>>(v4, v12);
      v7 = *a1;
      v6 = a1[1];
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[16 * v10];
    v15 = &v13[16 * v12];
    v16 = &v14[16 * a2];
    if (v6 != v7)
    {
      do
      {
        *((_OWORD *)v14 - 1) = *((_OWORD *)v6 - 1);
        v14 -= 16;
        v6 -= 16;
      }
      while (v6 != v7);
      v7 = *a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v7)
      operator delete(v7);
  }
}

void *xgboost_old::utils::WQSummary<float,float>::SetCombine(float32x2_t **a1, float32x2_t **a2, float32x2_t **a3)
{
  float32x2_t *v5;
  float32x2_t *v6;
  uint64_t v8;
  float32x2_t *v9;
  uint64_t v10;
  float32x2_t *v11;
  uint64_t v12;
  float32x2_t *v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float32_t v18;
  float32x2_t *v19;
  float *v20;
  float v21;
  __int32 v22;
  float v23;
  __int32 v24;
  uint64_t v25;
  float v26;
  float32x2_t *v27;
  float32x2_t *v28;
  float32_t v29;
  float32x2_t v30;
  float32x2_t *v31;
  float32x2_t *v32;
  float32x2_t *v33;
  size_t v34;
  float v36;
  float32_t v37;
  float32x2_t v38;
  unint64_t v39;
  float *v40;
  float v41;
  unint64_t v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;

  v5 = a2[1];
  v6 = a3[1];
  if (!v5)
  {
    a1[1] = v6;
    v32 = *a1;
    v33 = *a3;
    v34 = 16 * (_QWORD)v6;
    return memcpy(v32, v33, v34);
  }
  if (!v6)
  {
    a1[1] = v5;
    v32 = *a1;
    v33 = *a2;
    v34 = 16 * (_QWORD)v5;
    return memcpy(v32, v33, v34);
  }
  v8 = 0;
  v9 = *a2;
  v10 = (uint64_t)&(*a2)[2 * (_QWORD)v5];
  v11 = *a3;
  v12 = (uint64_t)&(*a3)[2 * (_QWORD)v6];
  v13 = *a1;
  v14 = 0.0;
  v15 = 0.0;
  do
  {
    v16 = v9[1].f32[1];
    v17 = v11[1].f32[1];
    if (v16 == v17)
    {
      v18 = v9[1].f32[0] + v11[1].f32[0];
      v19 = &v13[v8];
      *v19 = vadd_f32(*v9, *v11);
      v19[1].f32[0] = v18;
      v19[1].f32[1] = v16;
      v15 = v9->f32[0] + v9[1].f32[0];
      v14 = v11->f32[0] + v11[1].f32[0];
      v9 += 2;
LABEL_9:
      v11 += 2;
      goto LABEL_10;
    }
    v20 = (float *)&v13[v8];
    if (v16 >= v17)
    {
      v23 = v11->f32[1] + (float)(v9->f32[1] - v9[1].f32[0]);
      v24 = v11[1].i32[0];
      v13[v8].f32[0] = v15 + v11->f32[0];
      v20[1] = v23;
      *((_DWORD *)v20 + 2) = v24;
      v20[3] = v17;
      v14 = v11->f32[0] + v11[1].f32[0];
      goto LABEL_9;
    }
    v21 = v9->f32[1] + (float)(v11->f32[1] - v11[1].f32[0]);
    v22 = v9[1].i32[0];
    v13[v8].f32[0] = v14 + v9->f32[0];
    v20[1] = v21;
    *((_DWORD *)v20 + 2) = v22;
    v20[3] = v16;
    v15 = v9->f32[0] + v9[1].f32[0];
    v9 += 2;
LABEL_10:
    v8 += 2;
  }
  while (v9 != (float32x2_t *)v10 && v11 != (float32x2_t *)v12);
  if (v9 == (float32x2_t *)v10)
  {
    v31 = &v13[v8];
  }
  else
  {
    v25 = 0;
    v26 = *(float *)(v12 - 12);
    do
    {
      v27 = &v9[v25];
      v28 = &v13[v25 + v8];
      v29 = v26 + v9[v25].f32[1];
      v30 = v9[v25 + 1];
      v28->f32[0] = v14 + v9[v25].f32[0];
      v28->f32[1] = v29;
      v28[1] = v30;
      v25 += 2;
    }
    while (&v27[2] != (float32x2_t *)v10);
    v31 = &v13[v8 + v25];
  }
  if (v11 != (float32x2_t *)v12)
  {
    v36 = *(float *)(v10 - 12);
    do
    {
      v37 = v36 + v11->f32[1];
      v38 = v11[1];
      v31->f32[0] = v15 + v11->f32[0];
      v31->f32[1] = v37;
      v31[1] = v38;
      v31 += 2;
      v11 += 2;
    }
    while (v11 != (float32x2_t *)v12);
  }
  v39 = ((char *)v31 - (char *)v13) >> 4;
  a1[1] = (float32x2_t *)v39;
  if (v31 == v13)
  {
    v41 = 0.0;
    v43 = 0.0;
    v44 = 0.0;
  }
  else
  {
    v40 = (float *)v13 + 1;
    v41 = 0.0;
    v42 = v39;
    v43 = 0.0;
    v44 = 0.0;
    v45 = 0.0;
    v46 = 0.0;
    do
    {
      if (*(v40 - 1) >= v46)
      {
        v46 = *(v40 - 1);
      }
      else
      {
        *(v40 - 1) = v46;
        if (v41 < (float)(v46 - v46))
          v41 = v46 - v46;
      }
      if (*v40 >= v45)
      {
        v45 = *v40;
      }
      else
      {
        *v40 = v45;
        if (v43 < (float)(v45 - v45))
          v43 = v45 - v45;
      }
      v47 = v46 + v40[1];
      if (v45 < v47)
      {
        *v40 = v47;
        if (v44 < (float)(v47 - v47))
          v44 = v47 - v47;
        v45 = v47;
      }
      v40 += 4;
      --v42;
    }
    while (v42);
  }
  if (v41 > 10.0 || v43 > 10.0 || v44 > 10.0)
  {
    xgboost_old::utils::Printf((xgboost_old::utils *)"INFO: mingap=%g, maxgap=%g, wgap=%g\n", (const char *)a2, v41, v43, v44);
    v39 = (unint64_t)a1[1];
  }
  return (void *)xgboost_old::utils::Assert((float32x2_t *)v39 <= (float32x2_t *)((char *)a2[1] + (_QWORD)a3[1]), "bug in combine", (const char *)a3);
}

_QWORD *xgboost_old::utils::WXQSummary<float,float>::SetPrune(_QWORD *result, uint64_t a2, unint64_t a3)
{
  _QWORD *v4;
  unint64_t v5;
  _OWORD *v6;
  float v7;
  float v8;
  unint64_t v10;
  float v11;
  float v12;
  uint64_t v13;
  unint64_t v14;
  float *v15;
  float v16;
  uint64_t i;
  float v18;
  const char *v19;
  const char *v20;
  const char *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  float *v28;
  unint64_t v29;
  unint64_t v30;
  float v31;
  float v32;
  unint64_t v33;
  float *v34;
  float v35;
  float *v36;
  float *v37;
  _OWORD *v38;
  uint64_t v39;
  _OWORD *v40;
  uint64_t v41;
  _OWORD *v42;
  uint64_t v43;

  v4 = result;
  v5 = *(_QWORD *)(a2 + 8);
  if (v5 <= a3)
  {
    result[1] = v5;
    return memcpy((void *)*result, *(const void **)a2, 16 * v5);
  }
  else
  {
    v6 = *(_OWORD **)a2;
    v7 = *(float *)(*(_QWORD *)a2 + 4);
    v8 = *(float *)(*(_QWORD *)a2 + 16 * (v5 - 1)) - v7;
    if (v8 == 0.0)
    {
      *(_OWORD *)*result = *v6;
      *(_OWORD *)(*result + 16) = *(_OWORD *)(*(_QWORD *)a2 + 16 * *(_QWORD *)(a2 + 8) - 16);
      result[1] = 2;
    }
    else
    {
      v10 = a3 - 1;
      if (v8 >= 0.001)
        v11 = *(float *)(*(_QWORD *)a2 + 16 * (v5 - 1)) - v7;
      else
        v11 = 0.001;
      v12 = (float)(v11 + v11) / (float)v10;
      if (v5 < 2)
      {
        v14 = 0;
        v13 = 0;
        v16 = 0.0;
      }
      else
      {
        v13 = 0;
        v14 = 0;
        v15 = (float *)v6 + 6;
        v16 = 0.0;
        for (i = 1; i != v5; ++i)
        {
          v18 = *(v15 - 1) - *v15;
          if ((float)(*(v15 - 2) + *v15) > (float)(v12 + v18))
          {
            if (i - 1 != v13)
              v16 = v16 + (float)(v18 - (float)(*(float *)&v6[v13] + *((float *)&v6[v13] + 2)));
            ++v14;
            v13 = i;
          }
          v15 += 4;
        }
      }
      if (v13 != v5 - 2)
        v16 = v16
            + (float)((float)(*((float *)&v6[v5 - 1] + 1) - *((float *)&v6[v5 - 1] + 2))
                    - (float)(*(float *)&v6[v13] + *((float *)&v6[v13] + 2)));
      if (v14 >= a3 - 2)
      {
        xgboost_old::utils::Printf((xgboost_old::utils *)"LOG: check quantile stats, nbig=%lu, n=%lu\n", (const char *)a2, v14, a3 - 1);
        xgboost_old::utils::Printf((xgboost_old::utils *)"LOG: srcsize=%lu, maxsize=%lu, range=%g, chunk=%g\n", v19, *(_QWORD *)(a2 + 8), a3, v11, v12);
        if (*(_QWORD *)(a2 + 8))
        {
          v22 = 0;
          v23 = 0;
          do
          {
            xgboost_old::utils::Printf((xgboost_old::utils *)"[%lu] rmin=%g, rmax=%g, wmin=%g, v=%g\n", v20, v23++, *(float *)(*(_QWORD *)a2 + v22), *(float *)(*(_QWORD *)a2 + v22 + 4), *(float *)(*(_QWORD *)a2 + v22 + 8), *(float *)(*(_QWORD *)a2 + v22 + 12));
            v22 += 16;
          }
          while (v23 < *(_QWORD *)(a2 + 8));
        }
        result = (_QWORD *)xgboost_old::utils::Assert(0, "quantile: too many large chunk", v21);
        v6 = *(_OWORD **)a2;
      }
      *(_OWORD *)*v4 = *v6;
      v4[1] = 1;
      v24 = *(_QWORD *)(a2 + 8);
      if (v24 >= 2)
      {
        v25 = 0;
        v26 = 0;
        v27 = v10 - v14;
        v28 = *(float **)a2;
        v29 = 1;
        v30 = 1;
        do
        {
          if (v29 == v24 - 1
            || (float)(v28[4 * v29] + v28[4 * v29 + 2]) > (float)(v12 + (float)(v28[4 * v29 + 1] - v28[4 * v29 + 2])))
          {
            if (v26 != v29 - 1 && v30 < v27)
            {
              v31 = (float)(v28[4 * v29 + 1] - v28[4 * v29 + 2]) + (float)(v28[4 * v29 + 1] - v28[4 * v29 + 2]);
              while (1)
              {
                v32 = (float)(v7 + (float)((float)(v16 * (float)v30) / (float)(v10 - v14)))
                    + (float)(v7 + (float)((float)(v16 * (float)v30) / (float)(v10 - v14)));
                v28 = *(float **)a2;
                if (v32 >= v31)
                  break;
                v33 = v26 <= v29 ? v29 : v26;
                v34 = &v28[4 * v26 + 5];
                while (v33 != v26)
                {
                  ++v26;
                  v35 = *v34 + *(v34 - 1);
                  v34 += 4;
                  if (v32 < v35)
                  {
                    --v26;
                    goto LABEL_40;
                  }
                }
                v26 = v33;
LABEL_40:
                if (v26 == v29)
                  break;
                v36 = &v28[4 * v26];
                v37 = &v28[4 * v26 + 4];
                if (v32 >= (float)((float)(*v36 + v36[2]) + (float)(v37[1] - v37[2])))
                {
                  if (v26 + 1 != v25)
                  {
                    v40 = (_OWORD *)*v4;
                    v41 = v4[1];
                    v4[1] = v41 + 1;
                    v40[v41] = *(_OWORD *)v37;
                    v25 = v26 + 1;
                  }
                }
                else if (v26 != v25)
                {
                  v38 = (_OWORD *)*v4;
                  v39 = v4[1];
                  v4[1] = v39 + 1;
                  v38[v39] = *(_OWORD *)v36;
                  v25 = v26;
                }
                if (++v30 >= v27)
                {
                  v28 = *(float **)a2;
                  v30 = v10 - v14;
                  break;
                }
              }
            }
            if (v25 != v29)
            {
              v42 = (_OWORD *)*v4;
              v43 = v4[1];
              v4[1] = v43 + 1;
              v42[v43] = *(_OWORD *)&v28[4 * v29];
              v28 = *(float **)a2;
            }
            v7 = v7 + (float)((float)(v28[4 * v29] + v28[4 * v29 + 2]) - (float)(v28[4 * v29 + 1] - v28[4 * v29 + 2]));
            v24 = *(_QWORD *)(a2 + 8);
            v26 = v29;
            v25 = v29;
          }
          ++v29;
        }
        while (v29 < v24);
      }
    }
  }
  return result;
}

void std::vector<xgboost_old::utils::WXQuantileSketch<float,float>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 136;
        std::allocator<xgboost_old::utils::WXQuantileSketch<float,float>>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<xgboost_old::utils::WXQuantileSketch<float,float>>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v3 = *(void **)(a2 + 112);
  if (v3)
  {
    *(_QWORD *)(a2 + 120) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a2 + 72);
  if (v4)
  {
    *(_QWORD *)(a2 + 80) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a2 + 48);
  if (v5)
  {
    *(_QWORD *)(a2 + 56) = v5;
    operator delete(v5);
  }
  v6 = *(void **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)(a2 + 8) = v6;
    operator delete(v6);
  }
}

void turi::parallel_for<xgboost_old::tree::BaseMaker::SetNonDefaultPositionCol(std::vector<int> const&,xgboost_old::IFMatrix *,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#1}>(turi::thread_pool *a1, unint64_t a2, uint64_t a3)
{
  turi::thread_pool *instance;
  turi::thread *v7;
  turi::thread_pool *tls_data;
  BOOL v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  float *v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  turi::thread_pool *v19;
  uint64_t v20;
  double v21;
  double v22;
  turi::thread *v23;
  unint64_t v24;
  uint64_t v25[4];
  _BYTE v26[192];
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  instance = (turi::thread_pool *)turi::thread_pool::get_instance(a1);
  v7 = (turi::thread *)turi::thread_pool::size(instance);
  tls_data = (turi::thread_pool *)turi::thread::get_tls_data(v7);
  if (*((_BYTE *)tls_data + 8))
    v9 = 0;
  else
    v9 = (unint64_t)v7 > 1;
  if (v9)
  {
    v19 = (turi::thread_pool *)turi::thread_pool::get_instance(tls_data);
    turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)v26, v19);
    v20 = 0;
    v21 = (double)(a2 - (unint64_t)a1) / (double)(unint64_t)v7;
    v22 = (double)(unint64_t)a1;
    do
    {
      v23 = (turi::thread *)(v20 + 1);
      v24 = (unint64_t)(v22 + v21 * (double)(unint64_t)(v20 + 1));
      if ((turi::thread *)v20 == (turi::thread *)((char *)v7 - 1))
        v24 = a2;
      v25[2] = (unint64_t)(v22 + v21 * (double)(unint64_t)v20);
      v25[3] = v24;
      v25[0] = (uint64_t)boost::function0<void>::assign_to<void turi::parallel_for<xgboost_old::tree::BaseMaker::SetNonDefaultPositionCol(std::vector<int> const&,xgboost_old::IFMatrix *,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::tree::BaseMaker::SetNonDefaultPositionCol(std::vector<int> const&,xgboost_old::IFMatrix *,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#1} const&)::{lambda(void)#1}>(xgboost_old::tree::BaseMaker::SetNonDefaultPositionCol(std::vector<int> const&,xgboost_old::IFMatrix *,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#1})::stored_vtable
             + 1;
      v25[1] = a3;
      turi::parallel_task_queue::launch((uint64_t)v26, (uint64_t)v25, v20);
      boost::function0<void>::~function0(v25);
      v20 = (uint64_t)v23;
    }
    while (v23 != v7);
    turi::parallel_task_queue::join((turi::parallel_task_queue *)v26);
    turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)v26);
  }
  else
  {
    v10 = a2 - (_QWORD)a1;
    if (a2 > (unint64_t)a1)
    {
      v11 = *(_QWORD *)(*(_QWORD *)(a3 + 8) + 128);
      v12 = *(_DWORD **)(a3 + 24);
      v13 = **(_QWORD **)(a3 + 16);
      v14 = (float *)(**(_QWORD **)a3 + 8 * (_QWORD)a1 + 4);
      do
      {
        v15 = *((unsigned int *)v14 - 1);
        v16 = *(_DWORD *)(v11 + 4 * v15);
        v17 = v16 ^ (v16 >> 31);
        v18 = *(_DWORD *)(v13 + 20 * v17 + 4);
        if (v18 != -1 && (*(_DWORD *)(v13 + 20 * v17 + 12) & 0x7FFFFFFF) == *v12)
        {
          if (*v14 >= *(float *)(v13 + 20 * v17 + 16))
            v18 = *(_DWORD *)(v13 + 20 * v17 + 8);
          *(_DWORD *)(v11 + 4 * v15) = v18 ^ (v16 >> 31);
        }
        v14 += 2;
        --v10;
      }
      while (v10);
    }
  }
}

void sub_2183D83B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)va);
  _Unwind_Resume(a1);
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<xgboost_old::tree::BaseMaker::SetNonDefaultPositionCol(std::vector<int> const&,xgboost_old::IFMatrix *,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::tree::BaseMaker::SetNonDefaultPositionCol(std::vector<int> const&,xgboost_old::IFMatrix *,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#1} const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v4;
  __int128 v5;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x80000002186FC223 & 0x7FFFFFFFFFFFFFFFLL)
        || (result = strcmp((const char *)result, (const char *)(0x80000002186FC223 & 0x7FFFFFFFFFFFFFFFLL)),
            !(_DWORD)result))
      {
        *(_QWORD *)a2 = v4;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
    }
  }
  else
  {
    v5 = *(_OWORD *)result;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

float *boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<xgboost_old::tree::BaseMaker::SetNonDefaultPositionCol(std::vector<int> const&,xgboost_old::IFMatrix *,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::tree::BaseMaker::SetNonDefaultPositionCol(std::vector<int> const&,xgboost_old::IFMatrix *,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#1} const&)::{lambda(void)#1},void>::invoke(float *result)
{
  unint64_t v1;
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  float *v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;

  v2 = *((_QWORD *)result + 1);
  v1 = *((_QWORD *)result + 2);
  v3 = v1 > v2;
  v4 = v1 - v2;
  if (v3)
  {
    v5 = *(_QWORD *)result;
    v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)result + 8) + 128);
    v7 = **(_QWORD **)(*(_QWORD *)result + 16);
    v8 = (float *)(***(_QWORD ***)result + 8 * v2 + 4);
    do
    {
      v9 = *((unsigned int *)v8 - 1);
      v10 = *(_DWORD *)(v6 + 4 * v9);
      v11 = v10 ^ (v10 >> 31);
      v12 = *(_DWORD *)(v7 + 20 * v11 + 4);
      if (v12 != -1)
      {
        result = (float *)(*(_DWORD *)(v7 + 20 * v11 + 12) & 0x7FFFFFFF);
        if ((_DWORD)result == **(_DWORD **)(v5 + 24))
        {
          result = (float *)(v7 + 20 * v11);
          if (*v8 >= result[4])
            v12 = *(_DWORD *)(v7 + 20 * v11 + 8);
          *(_DWORD *)(v6 + 4 * v9) = v12 ^ (v10 >> 31);
        }
      }
      v8 += 2;
      --v4;
    }
    while (v4);
  }
  return result;
}

void xgboost_old::tree::BaseMaker::InitData(uint64_t a1, _QWORD *a2, const char *a3, uint64_t *a4, uint64_t a5)
{
  const char *v9;
  int *v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  float *v16;
  int *v17;
  unint64_t v19;
  uint64_t v20;
  double v21;
  int v22;
  void **v23;
  char *v24;
  int v25;
  _QWORD *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  int v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;

  xgboost_old::utils::Assert(*(_DWORD *)(a5 + 100) == *(_DWORD *)(a5 + 96), "TreeMaker: can only grow new tree", a3);
  std::vector<int>::resize((std::vector<unsigned int> *)(a1 + 128), (uint64_t)(a2[1] - *a2) >> 3);
  if (a4[1] == *a4)
  {
    v10 = *(int **)(a1 + 128);
    v13 = *(char **)(a1 + 136);
    v14 = v13 - (char *)v10;
    if (v13 - (char *)v10 >= 1)
      bzero(*(void **)(a1 + 128), 4 * (((unint64_t)v14 >> 2) - ((unint64_t)v14 > 3)) + 4);
  }
  else
  {
    v10 = *(int **)(a1 + 128);
    if (*(int **)(a1 + 136) == v10)
      goto LABEL_24;
    v11 = 0;
    do
    {
      v12 = *a4;
      v10[v11] = *(_DWORD *)(*a4 + 4 * v11);
      xgboost_old::utils::Assert(*(_DWORD *)(v12 + 4 * v11++) < *(_DWORD *)(a5 + 96), "root index exceed setting", v9);
      v10 = *(int **)(a1 + 128);
      v13 = *(char **)(a1 + 136);
      v14 = v13 - (char *)v10;
    }
    while (v11 < (v13 - (char *)v10) >> 2);
  }
  if (v13 != (char *)v10)
  {
    v15 = v14 >> 2;
    if ((unint64_t)(v14 >> 2) <= 1)
      v15 = 1;
    v16 = (float *)(*a2 + 4);
    v17 = v10;
    do
    {
      if (*v16 < 0.0)
        *v17 = ~*v17;
      ++v17;
      v16 += 2;
      --v15;
    }
    while (v15);
  }
  if (*(float *)(a1 + 40) < 1.0 && v13 != (char *)v10)
  {
    v19 = 0;
    v20 = 4;
    do
    {
      if (*(float *)(*a2 + v20) >= 0.0)
      {
        v21 = *(float *)(a1 + 40);
        v22 = rand();
        v10 = *(int **)(a1 + 128);
        if ((double)v22 * 4.65661287e-10 >= v21)
          v10[v19] = ~v10[v19];
      }
      ++v19;
      v20 += 8;
    }
    while (v19 < (uint64_t)(*(_QWORD *)(a1 + 136) - (_QWORD)v10) >> 2);
  }
LABEL_24:
  v23 = (void **)(a1 + 80);
  std::vector<int>::reserve((std::vector<unsigned int> *)(a1 + 80), 0x100uLL);
  v24 = *(char **)(a1 + 80);
  *(_QWORD *)(a1 + 88) = v24;
  if (*(int *)(a5 + 96) >= 1)
  {
    v25 = 0;
    v26 = (_QWORD *)(a1 + 96);
    do
    {
      if ((unint64_t)v24 >= *v26)
      {
        v28 = (char *)*v23;
        v29 = (v24 - (_BYTE *)*v23) >> 2;
        v30 = v29 + 1;
        if ((unint64_t)(v29 + 1) >> 62)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v31 = *v26 - (_QWORD)v28;
        if (v31 >> 1 > v30)
          v30 = v31 >> 1;
        if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFFCLL)
          v32 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v32 = v30;
        if (v32)
        {
          v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(a1 + 96, v32);
          v28 = *(char **)(a1 + 80);
          v24 = *(char **)(a1 + 88);
        }
        else
        {
          v33 = 0;
        }
        v34 = &v33[4 * v29];
        *(_DWORD *)v34 = v25;
        v27 = v34 + 4;
        while (v24 != v28)
        {
          v35 = *((_DWORD *)v24 - 1);
          v24 -= 4;
          *((_DWORD *)v34 - 1) = v35;
          v34 -= 4;
        }
        *(_QWORD *)(a1 + 80) = v34;
        *(_QWORD *)(a1 + 88) = v27;
        *(_QWORD *)(a1 + 96) = &v33[4 * v32];
        if (v28)
          operator delete(v28);
      }
      else
      {
        *(_DWORD *)v24 = v25;
        v27 = v24 + 4;
      }
      *(_QWORD *)(a1 + 88) = v27;
      ++v25;
      v24 = v27;
    }
    while (v25 < *(_DWORD *)(a5 + 96));
  }
  v36 = *(void **)(a1 + 104);
  v37 = *(_QWORD *)(a1 + 112) - (_QWORD)v36;
  if (v37 >= 1)
    memset(v36, 255, 4 * (((unint64_t)v37 >> 2) - ((unint64_t)v37 > 3)) + 4);
  std::vector<int>::resize((std::vector<unsigned int> *)(a1 + 104), *(int *)(a5 + 100));
  v38 = *(_QWORD *)(a1 + 80);
  v39 = *(_QWORD *)(a1 + 88);
  v40 = v39 - v38;
  if (v39 != v38)
  {
    v41 = 0;
    v42 = v40 >> 2;
    v43 = *(_QWORD *)(a1 + 104);
    if (v42 <= 1)
      v42 = 1;
    do
    {
      *(_DWORD *)(v43 + 4 * *(int *)(v38 + 4 * v41)) = v41;
      ++v41;
    }
    while (v42 != v41);
  }
}

void xgboost_old::tree::HistMaker<xgboost_old::tree::GradStats>::FindSplit(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6, uint64_t *a7)
{
  unint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double *v15;
  double v16;
  double v17;
  double v18;
  float v19;
  double v20;
  double v21;
  BOOL v22;
  double v23;
  float v24;
  double v25;
  uint64_t v26;
  char *v27;
  float v28;
  float *v29;
  float v30;
  float v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  float v41;
  double v42;
  double v43;
  double v44;
  double v45;
  float v46;
  double v47;
  double v48;
  double v49;
  uint64_t v50;
  float v51;
  uint64_t v52;
  uint64_t v53;
  float v54;
  uint64_t v55;
  double v56;
  float v57;
  double v58;
  double v59;
  double v60;
  float v61;
  double v62;
  float v63;
  uint64_t v64;
  float v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68[5];
  void *__p[3];
  void *v70[3];
  uint64_t v71;

  v71 = (uint64_t)(a6[1] - *a6) >> 2;
  std::vector<xgboost_old::tree::SplitEntry>::vector(v70, (uint64_t)(*(_QWORD *)(a1 + 88) - *(_QWORD *)(a1 + 80)) >> 2);
  std::vector<xgboost_old::tree::GradStats>::vector(__p, (uint64_t)(*(_QWORD *)(a1 + 88) - *(_QWORD *)(a1 + 80)) >> 2);
  v10 = *(_QWORD *)(a1 + 88) - *(_QWORD *)(a1 + 80);
  v68[0] = a1;
  v68[1] = (uint64_t)v70;
  v68[2] = (uint64_t)&v71;
  v68[3] = (uint64_t)a6;
  v68[4] = (uint64_t)__p;
  v67 = (v10 >> 2);
  turi::parallel_for<xgboost_old::tree::HistMaker<xgboost_old::tree::GradStats>::FindSplit(int,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<unsigned int> const&,xgboost_old::tree::RegTree *)::{lambda(unsigned long)#1}>(0, v67, v68);
  if ((v10 & 0x3FFFFFFFCLL) != 0)
  {
    v12 = 0;
    v13 = 0;
    v14 = 0;
    do
    {
      v15 = (double *)(*(_QWORD *)(*(_QWORD *)(a1 + 200) + 16)
                     + 16 * *(unsigned int *)(**(_QWORD **)(a1 + 200) + 4 * (v14 + v14 * v71 + v71)));
      v16 = v15[1];
      v17 = 0.0;
      if (v16 >= *(float *)(a1 + 20))
      {
        v18 = *v15;
        v19 = *(float *)(a1 + 28);
        v20 = v19;
        v21 = *v15 + v19;
        if (*v15 >= -v19)
          v21 = 0.0;
        v22 = v18 <= v20;
        v23 = v18 - v20;
        if (v22)
          v23 = v21;
        if (v19 != 0.0)
          v18 = v23;
        v17 = -v18 / (v16 + *(float *)(a1 + 24));
        v24 = *(float *)(a1 + 36);
        if (v24 != 0.0)
        {
          if (v17 > v24)
            v17 = v24;
          v25 = (float)-v24;
          if (v17 < v25)
            v17 = v25;
        }
      }
      v26 = *(int *)(*(_QWORD *)(a1 + 80) + 4 * v14);
      v27 = (char *)v70[0];
      v28 = v17;
      v29 = (float *)(a7[6] + 16 * v26);
      v30 = v16;
      v29[1] = v30;
      v29[2] = v28;
      v31 = *(float *)&v27[v13];
      *v29 = v31;
      if (v31 <= 0.00001)
      {
        v66 = *a7 + 20 * (int)v26;
        *(float *)(v66 + 16) = *(float *)(a1 + 8) * v28;
        *(_QWORD *)(v66 + 4) = -1;
      }
      else
      {
        xgboost_old::tree::TreeModel<float,xgboost_old::tree::RTreeNodeStat>::AddChilds((uint64_t)a7, v26, v11);
        v32 = *(_DWORD *)&v27[v13 + 8];
        v33 = *a7 + 20 * v26;
        *(_DWORD *)(v33 + 12) = *(_DWORD *)&v27[v13 + 4];
        *(_DWORD *)(v33 + 16) = v32;
        v34 = *a7 + 20 * *(int *)(*a7 + 20 * v26 + 4);
        *(_DWORD *)(v34 + 16) = 0;
        *(_QWORD *)(v34 + 4) = 0xFFFFFFFFLL;
        v35 = *a7 + 20 * *(int *)(*a7 + 20 * v26 + 8);
        *(_DWORD *)(v35 + 16) = 0;
        *(_QWORD *)(v35 + 4) = 0xFFFFFFFFLL;
        v36 = *(double *)((char *)__p[0] + v12);
        v37 = *(double *)((char *)__p[0] + v12 + 8);
        v38 = *(float *)(a1 + 20);
        v39 = 0.0;
        v40 = 0.0;
        if (v37 >= v38)
        {
          v41 = *(float *)(a1 + 28);
          v42 = v41;
          v43 = v36 + v41;
          if (v36 >= -v41)
            v43 = 0.0;
          v22 = v36 <= v42;
          v44 = v36 - v42;
          if (v22)
            v44 = v43;
          if (v41 == 0.0)
            v45 = *(double *)((char *)__p[0] + v12);
          else
            v45 = v44;
          v40 = -v45 / (v37 + *(float *)(a1 + 24));
          v46 = *(float *)(a1 + 36);
          if (v46 != 0.0)
          {
            if (v40 > v46)
              v40 = v46;
            v47 = (float)-v46;
            if (v40 < v47)
              v40 = v47;
          }
        }
        v48 = *v15;
        v49 = v15[1] - v37;
        v50 = *a7;
        v51 = v40;
        v52 = a7[6];
        v53 = v52 + 16 * *(int *)(*a7 + 20 * v26 + 4);
        v54 = v37;
        *(float *)(v53 + 4) = v54;
        *(float *)(v53 + 8) = v51;
        v55 = *(int *)(v50 + 20 * (int)v26 + 8);
        if (v49 >= v38)
        {
          v56 = v48 - v36;
          v57 = *(float *)(a1 + 28);
          v58 = v57;
          v59 = v56 + v57;
          if (v56 >= -v57)
            v59 = 0.0;
          v22 = v56 <= v58;
          v60 = v56 - v58;
          if (v22)
            v60 = v59;
          if (v57 != 0.0)
            v56 = v60;
          v39 = -v56 / (v49 + *(float *)(a1 + 24));
          v61 = *(float *)(a1 + 36);
          if (v61 != 0.0)
          {
            if (v39 > v61)
              v39 = v61;
            v62 = (float)-v61;
            if (v39 < v62)
              v39 = v62;
          }
        }
        v63 = v39;
        v64 = v52 + 16 * v55;
        v65 = v49;
        *(float *)(v64 + 4) = v65;
        *(float *)(v64 + 8) = v63;
      }
      ++v14;
      v13 += 12;
      v12 += 16;
    }
    while (v67 != v14);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v70[0])
  {
    v70[1] = v70[0];
    operator delete(v70[0]);
  }
}

void sub_2183D8C10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20)
{
  if (__p)
    operator delete(__p);
  if (a19)
    operator delete(a19);
  _Unwind_Resume(exception_object);
}

void xgboost_old::tree::BaseMaker::UpdateQueueExpand(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  unint64_t v7;
  int v8;
  int v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  int v19;
  int v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  int v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char *v37;
  void *__p;
  char *v39;
  char *v40;

  __p = 0;
  v39 = 0;
  v40 = 0;
  v4 = *(_QWORD *)(a1 + 80);
  v37 = (char *)(a1 + 80);
  v5 = *(_QWORD *)(a1 + 88);
  if (v5 == v4)
  {
    v6 = 0;
  }
  else
  {
    v6 = 0;
    v7 = 0;
    do
    {
      v8 = *(_DWORD *)(v4 + 4 * v7);
      v9 = *(_DWORD *)(*(_QWORD *)a2 + 20 * v8 + 4);
      if (v9 != -1)
      {
        v10 = v40;
        if (v6 >= v40)
        {
          v12 = (char *)__p;
          v13 = (v6 - (_BYTE *)__p) >> 2;
          v14 = v13 + 1;
          if ((unint64_t)(v13 + 1) >> 62)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          v15 = v40 - (_BYTE *)__p;
          if ((v40 - (_BYTE *)__p) >> 1 > v14)
            v14 = v15 >> 1;
          if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL)
            v16 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v16 = v14;
          if (v16)
          {
            v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v40, v16);
            v12 = (char *)__p;
            v6 = v39;
          }
          else
          {
            v17 = 0;
          }
          v18 = &v17[4 * v13];
          *(_DWORD *)v18 = v9;
          v11 = v18 + 4;
          while (v6 != v12)
          {
            v19 = *((_DWORD *)v6 - 1);
            v6 -= 4;
            *((_DWORD *)v18 - 1) = v19;
            v18 -= 4;
          }
          v10 = &v17[4 * v16];
          __p = v18;
          v39 = v11;
          v40 = v10;
          if (v12)
          {
            operator delete(v12);
            v10 = v40;
          }
        }
        else
        {
          *(_DWORD *)v6 = v9;
          v11 = v6 + 4;
        }
        v39 = v11;
        v20 = *(_DWORD *)(*(_QWORD *)a2 + 20 * v8 + 8);
        if (v11 >= v10)
        {
          v21 = (char *)__p;
          v22 = (v11 - (_BYTE *)__p) >> 2;
          v23 = v22 + 1;
          if ((unint64_t)(v22 + 1) >> 62)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          v24 = v10 - (_BYTE *)__p;
          if (v24 >> 1 > v23)
            v23 = v24 >> 1;
          if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFFCLL)
            v25 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v25 = v23;
          if (v25)
          {
            v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v40, v25);
            v21 = (char *)__p;
            v11 = v39;
          }
          else
          {
            v26 = 0;
          }
          v27 = &v26[4 * v22];
          *(_DWORD *)v27 = v20;
          v6 = v27 + 4;
          while (v11 != v21)
          {
            v28 = *((_DWORD *)v11 - 1);
            v11 -= 4;
            *((_DWORD *)v27 - 1) = v28;
            v27 -= 4;
          }
          __p = v27;
          v39 = v6;
          v40 = &v26[4 * v25];
          if (v21)
            operator delete(v21);
        }
        else
        {
          *(_DWORD *)v11 = v20;
          v6 = v11 + 4;
        }
        v39 = v6;
        v4 = *(_QWORD *)(a1 + 80);
        v5 = *(_QWORD *)(a1 + 88);
      }
      ++v7;
    }
    while (v7 < (v5 - v4) >> 2);
  }
  if (v37 != (char *)&__p)
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>(v37, (char *)__p, (uint64_t)v6, (v6 - (_BYTE *)__p) >> 2);
  v29 = *(void **)(a1 + 104);
  v30 = *(_QWORD *)(a1 + 112) - (_QWORD)v29;
  if (v30 >= 1)
    memset(v29, 255, 4 * (((unint64_t)v30 >> 2) - ((unint64_t)v30 > 3)) + 4);
  std::vector<int>::resize((std::vector<unsigned int> *)(a1 + 104), *(int *)(a2 + 100));
  v31 = *(_QWORD *)(a1 + 80);
  v32 = *(_QWORD *)(a1 + 88);
  v33 = v32 - v31;
  if (v32 != v31)
  {
    v34 = 0;
    v35 = v33 >> 2;
    v36 = *(_QWORD *)(a1 + 104);
    if (v35 <= 1)
      v35 = 1;
    do
    {
      *(_DWORD *)(v36 + 4 * *(int *)(v31 + 4 * v34)) = v34;
      ++v34;
    }
    while (v35 != v34);
  }
  if (__p)
  {
    v39 = (char *)__p;
    operator delete(__p);
  }
}

void sub_2183D8F08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void turi::parallel_for<xgboost_old::tree::HistMaker<xgboost_old::tree::GradStats>::FindSplit(int,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<unsigned int> const&,xgboost_old::tree::RegTree *)::{lambda(unsigned long)#1}>(turi::thread_pool *a1, unint64_t a2, uint64_t *a3)
{
  unint64_t v5;
  turi::thread_pool *instance;
  turi::thread *v7;
  turi::thread_pool *tls_data;
  const char *v9;
  BOOL v10;
  turi::thread_pool *v11;
  uint64_t v12;
  double v13;
  double v14;
  turi::thread *v15;
  unint64_t v16;
  uint64_t v17[4];
  _BYTE v18[192];
  uint64_t v19;

  v5 = (unint64_t)a1;
  v19 = *MEMORY[0x24BDAC8D0];
  instance = (turi::thread_pool *)turi::thread_pool::get_instance(a1);
  v7 = (turi::thread *)turi::thread_pool::size(instance);
  tls_data = (turi::thread_pool *)turi::thread::get_tls_data(v7);
  if (*((_BYTE *)tls_data + 8))
    v10 = 0;
  else
    v10 = (unint64_t)v7 > 1;
  if (v10)
  {
    v11 = (turi::thread_pool *)turi::thread_pool::get_instance(tls_data);
    turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)v18, v11);
    v12 = 0;
    v13 = (double)(a2 - v5) / (double)(unint64_t)v7;
    v14 = (double)v5;
    do
    {
      v15 = (turi::thread *)(v12 + 1);
      v16 = (unint64_t)(v14 + v13 * (double)(unint64_t)(v12 + 1));
      if ((turi::thread *)v12 == (turi::thread *)((char *)v7 - 1))
        v16 = a2;
      v17[2] = (unint64_t)(v14 + v13 * (double)(unint64_t)v12);
      v17[3] = v16;
      v17[0] = (uint64_t)boost::function0<void>::assign_to<void turi::parallel_for<xgboost_old::tree::HistMaker<xgboost_old::tree::GradStats>::FindSplit(int,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<unsigned int> const&,xgboost_old::tree::RegTree *)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::tree::HistMaker<xgboost_old::tree::GradStats>::FindSplit(int,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<unsigned int> const&,xgboost_old::tree::RegTree *)::{lambda(unsigned long)#1} const&)::{lambda(void)#1}>(xgboost_old::tree::HistMaker<xgboost_old::tree::GradStats>::FindSplit(int,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<unsigned int> const&,xgboost_old::tree::RegTree *)::{lambda(unsigned long)#1})::stored_vtable
             + 1;
      v17[1] = (uint64_t)a3;
      turi::parallel_task_queue::launch((uint64_t)v18, (uint64_t)v17, v12);
      boost::function0<void>::~function0(v17);
      v12 = (uint64_t)v15;
    }
    while (v15 != v7);
    turi::parallel_task_queue::join((turi::parallel_task_queue *)v18);
    turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)v18);
  }
  else if (a2 > v5)
  {
    do
      xgboost_old::tree::HistMaker<xgboost_old::tree::GradStats>::FindSplit(int,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<unsigned int> const&,xgboost_old::tree::RegTree *)::{lambda(unsigned long)#1}::operator()(a3, v5++, v9);
    while (a2 != v5);
  }
}

void sub_2183D9084(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)va);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<xgboost_old::tree::SplitEntry>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<xgboost_old::tree::SplitEntry>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    v5 = 12 * ((12 * a2 - 12) / 0xC) + 12;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_2183D912C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<xgboost_old::tree::SplitEntry>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x1555555555555556)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<xgboost_old::tree::SplitEntry>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[12 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<xgboost_old::tree::SplitEntry>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1555555555555556)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(12 * a2);
}

_QWORD *std::vector<xgboost_old::tree::GradStats>::vector(_QWORD *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<turi::flexible_type>::__vallocate[abi:ne180100](a1, a2);
    a1[1] += 16 * a2;
  }
  return a1;
}

void sub_2183D9220(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t xgboost_old::tree::HistMaker<xgboost_old::tree::GradStats>::FindSplit(int,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<unsigned int> const&,xgboost_old::tree::RegTree *)::{lambda(unsigned long)#1}::operator()(uint64_t *a1, uint64_t a2, const char *a3)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  float64x2_t *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[2];
  int v17;

  v5 = *a1;
  result = xgboost_old::utils::Assert(*(_DWORD *)(*(_QWORD *)(*a1 + 104) + 4 * *(int *)(*(_QWORD *)(*a1 + 80) + 4 * a2)) == (_DWORD)a2, "node2workindex inconsistent", a3);
  v7 = *(_QWORD *)a1[3];
  if (*(_QWORD *)(a1[3] + 8) != v7)
  {
    v8 = 0;
    v9 = *(_QWORD *)a1[1] + 12 * a2;
    v10 = (float64x2_t *)(*(_QWORD *)(*(_QWORD *)(v5 + 200) + 16)
                        + 16
                        * *(unsigned int *)(**(_QWORD **)(v5 + 200) + 4
                                                                    * (a2 + a2 * *(_QWORD *)a1[2] + *(_QWORD *)a1[2])));
    do
    {
      v11 = *(_QWORD **)(v5 + 200);
      v12 = *v11 + 4 * a2 * (*(_QWORD *)a1[2] + 1);
      v13 = *(unsigned int *)(v12 + 4 * v8);
      v14 = v11[1] + 4 * v13;
      v15 = v11[2] + 16 * v13;
      LODWORD(v12) = *(_DWORD *)(v12 + 4 * v8 + 4) - v13;
      v16[0] = v14;
      v16[1] = v15;
      v17 = v12;
      result = (uint64_t)xgboost_old::tree::HistMaker<xgboost_old::tree::GradStats>::EnumerateSplit((float *)v5, (uint64_t)v16, v10, *(_DWORD *)(v7 + 4 * v8++), v9, (float64x2_t *)(*(_QWORD *)a1[4] + 16 * a2));
      v7 = *(_QWORD *)a1[3];
    }
    while (v8 < (*(_QWORD *)(a1[3] + 8) - v7) >> 2);
  }
  return result;
}

float *xgboost_old::tree::HistMaker<xgboost_old::tree::GradStats>::EnumerateSplit(float *result, uint64_t a2, float64x2_t *a3, unsigned int a4, uint64_t a5, float64x2_t *a6)
{
  int v6;
  double v7;
  double v8;
  double v9;
  double v10;
  float v11;
  float v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  float64x2_t *v23;
  int *v24;
  float64x2_t v25;
  uint64_t v26;
  float64x2_t *v27;
  double v28;
  double v29;
  double v30;
  float v31;
  float v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  float v45;
  float v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  float v56;
  _BOOL4 v57;
  int v58;
  uint64_t v59;
  int *v60;
  int v61;
  float64x2_t v62;
  float64x2_t v63;
  double v64;
  double v65;
  float v66;
  float v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  float v79;
  float v80;
  double v81;
  double v82;
  double v83;
  double v84;
  double v85;
  double v86;
  double v87;
  double v88;
  double v89;
  double v90;
  float v91;
  _BOOL4 v92;
  int v93;

  v6 = *(_DWORD *)(a2 + 16);
  if (v6)
  {
    v7 = a3->f64[1];
    v8 = result[5];
    v9 = 0.0;
    if (v7 >= v8)
    {
      v10 = a3->f64[0];
      v11 = result[9];
      v12 = result[7];
      if (v11 == 0.0)
      {
        if (v12 == 0.0)
        {
          v13 = v10 * v10;
        }
        else
        {
          v21 = v12;
          if (v10 <= v21)
          {
            v22 = 0.0;
            if (v10 < -v21)
              v22 = v10 + v21;
          }
          else
          {
            v22 = v10 - v21;
          }
          v13 = v22 * v22;
        }
        v9 = v13 / (v7 + result[6]);
      }
      else
      {
        v14 = v12;
        v15 = a3->f64[0];
        if (v12 != 0.0)
        {
          v15 = v10 + v14;
          if (v10 >= -v14)
            v15 = 0.0;
          if (v10 > v14)
            v15 = v10 - v14;
        }
        v16 = v7 + result[6];
        v17 = -v15 / v16;
        if (v17 > v11)
          v17 = v11;
        v18 = (float)-v11;
        if (v17 >= v18)
          v18 = v17;
        v19 = v16 * 0.5 * (v18 * v18) + v10 * v18;
        v20 = v19 + v14 * fabs(v18);
        if (v12 != 0.0)
          v19 = v20;
        v9 = v19 * -2.0;
      }
    }
    v24 = *(int **)a2;
    v23 = *(float64x2_t **)(a2 + 8);
    v25 = 0uLL;
    v26 = *(unsigned int *)(a2 + 16);
    v27 = v23;
    do
    {
      v25 = vaddq_f64(v25, *v27);
      if (v25.f64[1] >= v8)
      {
        v28 = a3->f64[1] - v25.f64[1];
        if (v28 >= v8)
        {
          v29 = 0.0;
          v30 = 0.0;
          if (v25.f64[1] >= v8)
          {
            v31 = result[9];
            v32 = result[7];
            if (v31 == 0.0)
            {
              if (v32 == 0.0)
              {
                v30 = vmulq_f64(v25, v25).f64[0] / (v25.f64[1] + result[6]);
              }
              else
              {
                v41 = v32;
                v42 = v25.f64[0] + v41;
                if (v25.f64[0] >= -v41)
                  v42 = 0.0;
                if (v25.f64[0] > v41)
                  v43 = v25.f64[0] - v41;
                else
                  v43 = v42;
                v30 = v43 * v43 / (v25.f64[1] + result[6]);
              }
            }
            else
            {
              v33 = v32;
              v34 = v25.f64[0] + v32;
              if (v25.f64[0] >= -v32)
                v34 = 0.0;
              if (v25.f64[0] > v33)
                v34 = v25.f64[0] - v33;
              if (v32 == 0.0)
                v34 = v25.f64[0];
              v35 = v25.f64[1] + result[6];
              v36 = -v34 / v35;
              if (v36 > v31)
                v36 = v31;
              v37 = (float)-v31;
              if (v36 >= v37)
                v37 = v36;
              v38 = v35 * 0.5 * (v37 * v37) + v25.f64[0] * v37;
              v39 = v38 + v33 * fabs(v37);
              if (v32 == 0.0)
                v40 = v38;
              else
                v40 = v39;
              v30 = v40 * -2.0;
            }
          }
          if (v28 >= v8)
          {
            v44 = a3->f64[0] - v25.f64[0];
            v45 = result[9];
            v46 = result[7];
            if (v45 == 0.0)
            {
              if (v46 != 0.0)
              {
                v47 = v46;
                v48 = v44 + v47;
                if (v44 >= -v47)
                  v48 = 0.0;
                if (v44 > v47)
                  v44 = v44 - v47;
                else
                  v44 = v48;
              }
              v29 = v44 * v44 / (v28 + result[6]);
            }
            else
            {
              v49 = v46;
              v50 = v44 + v46;
              if (v44 >= -v46)
                v50 = 0.0;
              if (v44 > v49)
                v50 = v44 - v49;
              if (v46 == 0.0)
                v50 = a3->f64[0] - v25.f64[0];
              v51 = v28 + result[6];
              v52 = -v50 / v51;
              if (v52 > v45)
                v52 = v45;
              v53 = (float)-v45;
              if (v52 >= v53)
                v53 = v52;
              v54 = v51 * 0.5 * (v53 * v53) + v44 * v53;
              v55 = v54 + v49 * fabs(v53);
              if (v46 != 0.0)
                v54 = v55;
              v29 = v54 * -2.0;
            }
          }
          v56 = v30 + v29 - v9;
          if ((*(_DWORD *)(a5 + 4) & 0x7FFFFFFFu) <= a4)
            v57 = *(float *)a5 < v56;
          else
            v57 = *(float *)a5 <= v56;
          if (v57)
          {
            v58 = *v24;
            *(float *)a5 = v56;
            *(_DWORD *)(a5 + 4) = a4;
            *(_DWORD *)(a5 + 8) = v58;
            *a6 = v25;
          }
        }
      }
      ++v27;
      ++v24;
      --v26;
    }
    while (v26);
    v59 = (v6 - 1);
    if (v6 != 1)
    {
      v60 = *(int **)a2;
      v61 = v6 - 2;
      v62 = 0uLL;
      do
      {
        v62 = vaddq_f64(v62, v23[v59]);
        if (v62.f64[1] >= v8)
        {
          v63 = vsubq_f64(*a3, v62);
          if (v63.f64[1] >= v8)
          {
            v64 = 0.0;
            v65 = 0.0;
            if (v62.f64[1] >= v8)
            {
              v66 = result[9];
              v67 = result[7];
              if (v66 == 0.0)
              {
                if (v67 == 0.0)
                {
                  v65 = vmulq_f64(v62, v62).f64[0] / (v62.f64[1] + result[6]);
                }
                else
                {
                  v76 = v67;
                  v77 = v62.f64[0] + v76;
                  if (v62.f64[0] >= -v76)
                    v77 = 0.0;
                  if (v62.f64[0] > v76)
                    v78 = v62.f64[0] - v76;
                  else
                    v78 = v77;
                  v65 = v78 * v78 / (v62.f64[1] + result[6]);
                }
              }
              else
              {
                v68 = v67;
                v69 = v62.f64[0] + v67;
                if (v62.f64[0] >= -v67)
                  v69 = 0.0;
                if (v62.f64[0] > v68)
                  v69 = v62.f64[0] - v68;
                if (v67 == 0.0)
                  v69 = v62.f64[0];
                v70 = v62.f64[1] + result[6];
                v71 = -v69 / v70;
                if (v71 > v66)
                  v71 = v66;
                v72 = (float)-v66;
                if (v71 >= v72)
                  v72 = v71;
                v73 = v70 * 0.5 * (v72 * v72) + v62.f64[0] * v72;
                v74 = v73 + v68 * fabs(v72);
                if (v67 == 0.0)
                  v75 = v73;
                else
                  v75 = v74;
                v65 = v75 * -2.0;
              }
            }
            if (v63.f64[1] >= v8)
            {
              v79 = result[9];
              v80 = result[7];
              if (v79 == 0.0)
              {
                if (v80 == 0.0)
                {
                  v64 = vmulq_f64(v63, v63).f64[0] / (v63.f64[1] + result[6]);
                }
                else
                {
                  v88 = v80;
                  v89 = v63.f64[0] + v88;
                  if (v63.f64[0] >= -v88)
                    v89 = 0.0;
                  if (v63.f64[0] > v88)
                    v90 = v63.f64[0] - v88;
                  else
                    v90 = v89;
                  v64 = v90 * v90 / (v63.f64[1] + result[6]);
                }
              }
              else
              {
                v81 = v80;
                v82 = v63.f64[0] + v80;
                if (v63.f64[0] >= -v80)
                  v82 = 0.0;
                if (v63.f64[0] > v81)
                  v82 = v63.f64[0] - v81;
                if (v80 == 0.0)
                  v82 = v63.f64[0];
                v83 = v63.f64[1] + result[6];
                v84 = -v82 / v83;
                if (v84 > v79)
                  v84 = v79;
                v85 = (float)-v79;
                if (v84 >= v85)
                  v85 = v84;
                v86 = v83 * 0.5 * (v85 * v85) + v63.f64[0] * v85;
                v87 = v86 + v81 * fabs(v85);
                if (v80 != 0.0)
                  v86 = v87;
                v64 = v86 * -2.0;
              }
            }
            v91 = v65 + v64 - v9;
            if ((*(_DWORD *)(a5 + 4) & 0x7FFFFFFFu) <= a4)
              v92 = *(float *)a5 < v91;
            else
              v92 = *(float *)a5 <= v91;
            if (v92)
            {
              v93 = v60[v61];
              *(float *)a5 = v91;
              *(_DWORD *)(a5 + 4) = a4 | 0x80000000;
              *(_DWORD *)(a5 + 8) = v93;
              *a6 = v63;
            }
          }
        }
        --v61;
        --v59;
      }
      while ((_DWORD)v59);
    }
  }
  return result;
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<xgboost_old::tree::HistMaker<xgboost_old::tree::GradStats>::FindSplit(int,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<unsigned int> const&,xgboost_old::tree::RegTree *)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::tree::HistMaker<xgboost_old::tree::GradStats>::FindSplit(int,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<unsigned int> const&,xgboost_old::tree::RegTree *)::{lambda(unsigned long)#1} const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v4;
  __int128 v5;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x80000002186FC2CCLL & 0x7FFFFFFFFFFFFFFFLL)
        || (result = strcmp((const char *)result, (const char *)(0x80000002186FC2CCLL & 0x7FFFFFFFFFFFFFFFLL)),
            !(_DWORD)result))
      {
        *(_QWORD *)a2 = v4;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
    }
  }
  else
  {
    v5 = *(_OWORD *)result;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

uint64_t boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<xgboost_old::tree::HistMaker<xgboost_old::tree::GradStats>::FindSplit(int,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<unsigned int> const&,xgboost_old::tree::RegTree *)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::tree::HistMaker<xgboost_old::tree::GradStats>::FindSplit(int,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<unsigned int> const&,xgboost_old::tree::RegTree *)::{lambda(unsigned long)#1} const&)::{lambda(void)#1},void>::invoke(uint64_t result, uint64_t a2, const char *a3)
{
  unint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(result + 8);
  if (v3 < *(_QWORD *)(result + 16))
  {
    v4 = result;
    do
      result = xgboost_old::tree::HistMaker<xgboost_old::tree::GradStats>::FindSplit(int,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<unsigned int> const&,xgboost_old::tree::RegTree *)::{lambda(unsigned long)#1}::operator()(*(uint64_t **)v4, v3++, a3);
    while (v3 < *(_QWORD *)(v4 + 16));
  }
  return result;
}

void xgboost_old::tree::BaseMaker::GetNodeStats<xgboost_old::tree::GradStats>(turi::thread *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, _QWORD *a7)
{
  int v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  float64x2_t *v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  float64x2_t v27;
  uint64_t v28;
  _QWORD v29[3];
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  v14 = turi::thread::cpu_count(a1);
  std::vector<std::vector<xgboost_old::tree::GradStats>>::resize(a6, v14);
  std::vector<xgboost_old::utils::WQSummary<float,float>::Entry,std::allocator<xgboost_old::utils::WQSummary<float,float>::Entry>>::resize((uint64_t)a7, *(int *)(a4 + 100));
  v15 = operator new(0x20uLL);
  *v15 = &unk_24D93E9C8;
  v15[1] = a6;
  v15[2] = a4;
  v15[3] = a1;
  v30 = v15;
  turi::in_parallel((turi::thread_pool *)v29);
  v16 = v30;
  if (v30 == v29)
  {
    v17 = 4;
    v16 = v29;
  }
  else
  {
    if (!v30)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*v16 + 8 * v17))();
LABEL_6:
  v18 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 64))(a3);
  v19 = ((v18[1] - *v18) >> 2);
  v29[0] = v18;
  v29[1] = a1;
  v29[2] = a6;
  v30 = a2;
  v31 = a5;
  turi::parallel_for<void xgboost_old::tree::BaseMaker::GetNodeStats<xgboost_old::tree::GradStats>(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix const&,xgboost_old::tree::RegTree const&,xgboost_old::BoosterInfo const&,std::vector<std::vector<xgboost_old::tree::GradStats>> *,std::vector<xgboost_old::tree::GradStats>*)::{lambda(unsigned long)#1}>(0, v19, (uint64_t)v29);
  v20 = *((_QWORD *)a1 + 10);
  if (*((_QWORD *)a1 + 11) != v20)
  {
    v21 = 0;
    do
    {
      v22 = *(int *)(v20 + 4 * v21);
      v23 = (float64x2_t *)(*a7 + 16 * v22);
      v23->f64[0] = 0.0;
      v23->f64[1] = 0.0;
      v24 = (uint64_t *)*a6;
      v25 = a6[1] - *a6;
      if (v25)
      {
        v26 = v25 / 24;
        if (v26 <= 1)
          v26 = 1;
        v27.f64[0] = 0.0;
        v27.f64[1] = v23->f64[1];
        do
        {
          v28 = *v24;
          v24 += 3;
          v27 = vaddq_f64(*(float64x2_t *)(v28 + 16 * v22), v27);
          *v23 = v27;
          --v26;
        }
        while (v26);
      }
      ++v21;
      v20 = *((_QWORD *)a1 + 10);
    }
    while (v21 < (*((_QWORD *)a1 + 11) - v20) >> 2);
  }
}

void sub_2183D9BF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12)
{
  uint64_t *v12;
  uint64_t *v14;
  uint64_t v15;

  v14 = a12;
  if (a12 == v12)
  {
    v15 = 4;
    v14 = &a9;
  }
  else
  {
    if (!a12)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void std::vector<xgboost_old::utils::WXQuantileSketch<float,float>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;

  v3 = a1[1];
  v4 = 0xF0F0F0F0F0F0F0F1 * ((v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<xgboost_old::utils::WXQuantileSketch<float,float>>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 136 * a2;
    while (v3 != v7)
    {
      v3 -= 136;
      std::allocator<xgboost_old::utils::WXQuantileSketch<float,float>>::destroy[abi:ne180100]((uint64_t)(a1 + 2), v3);
    }
    a1[1] = v7;
  }
}

void std::vector<xgboost_old::utils::QuantileSketchTemplate<float,float,xgboost_old::utils::WXQSummary<float,float>>::SummaryContainer,std::allocator<xgboost_old::utils::QuantileSketchTemplate<float,float,xgboost_old::utils::WXQSummary<float,float>>::SummaryContainer>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  void *v8;

  v3 = a1[1];
  v4 = 0xCCCCCCCCCCCCCCCDLL * ((v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<xgboost_old::utils::QuantileSketchTemplate<float,float,xgboost_old::utils::WXQSummary<float,float>>::SummaryContainer,std::allocator<xgboost_old::utils::QuantileSketchTemplate<float,float,xgboost_old::utils::WXQSummary<float,float>>::SummaryContainer>>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 40 * a2;
    while (v3 != v7)
    {
      v8 = *(void **)(v3 - 24);
      if (v8)
      {
        *(_QWORD *)(v3 - 16) = v8;
        operator delete(v8);
      }
      v3 -= 40;
    }
    a1[1] = v7;
  }
}

void std::vector<std::vector<xgboost_old::tree::GradStats>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;

  v3 = a1[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<xgboost_old::tree::GradStats>>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 24 * a2;
    if (v3 != v7)
    {
      v8 = a1[1];
      do
      {
        v10 = *(void **)(v8 - 24);
        v8 -= 24;
        v9 = v10;
        if (v10)
        {
          *(_QWORD *)(v3 - 16) = v9;
          operator delete(v9);
        }
        v3 = v8;
      }
      while (v8 != v7);
    }
    a1[1] = v7;
  }
}

void turi::parallel_for<void xgboost_old::tree::BaseMaker::GetNodeStats<xgboost_old::tree::GradStats>(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix const&,xgboost_old::tree::RegTree const&,xgboost_old::BoosterInfo const&,std::vector<std::vector<xgboost_old::tree::GradStats>> *,std::vector<xgboost_old::tree::GradStats>*)::{lambda(unsigned long)#1}>(turi::thread_pool *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v5;
  turi::thread_pool *instance;
  turi::thread *v7;
  turi::thread_pool *tls_data;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  turi::thread_pool *v13;
  uint64_t v14;
  double v15;
  double v16;
  turi::thread *v17;
  unint64_t v18;
  uint64_t v19[4];
  _BYTE v20[192];
  uint64_t v21;

  v5 = (unint64_t)a1;
  v21 = *MEMORY[0x24BDAC8D0];
  instance = (turi::thread_pool *)turi::thread_pool::get_instance(a1);
  v7 = (turi::thread *)turi::thread_pool::size(instance);
  tls_data = (turi::thread_pool *)turi::thread::get_tls_data(v7);
  if (*((_BYTE *)tls_data + 8))
    v9 = 0;
  else
    v9 = (unint64_t)v7 > 1;
  if (v9)
  {
    v13 = (turi::thread_pool *)turi::thread_pool::get_instance(tls_data);
    turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)v20, v13);
    v14 = 0;
    v15 = (double)(a2 - v5) / (double)(unint64_t)v7;
    v16 = (double)v5;
    do
    {
      v17 = (turi::thread *)(v14 + 1);
      v18 = (unint64_t)(v16 + v15 * (double)(unint64_t)(v14 + 1));
      if ((turi::thread *)v14 == (turi::thread *)((char *)v7 - 1))
        v18 = a2;
      v19[2] = (unint64_t)(v16 + v15 * (double)(unint64_t)v14);
      v19[3] = v18;
      v19[0] = (uint64_t)boost::function0<void>::assign_to<void turi::parallel_for<void xgboost_old::tree::BaseMaker::GetNodeStats<xgboost_old::tree::GradStats>(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix const&,xgboost_old::tree::RegTree const&,xgboost_old::BoosterInfo const&,std::vector<std::vector<xgboost_old::tree::GradStats>> *,std::vector<xgboost_old::tree::GradStats>*)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::tree::GradStats const&)::{lambda(void)#1}>(xgboost_old::tree::GradStats)::stored_vtable
             + 1;
      v19[1] = a3;
      turi::parallel_task_queue::launch((uint64_t)v20, (uint64_t)v19, v14);
      boost::function0<void>::~function0(v19);
      v14 = (uint64_t)v17;
    }
    while (v17 != v7);
    turi::parallel_task_queue::join((turi::parallel_task_queue *)v20);
    turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)v20);
  }
  else if (a2 > v5)
  {
    do
    {
      v10 = *(unsigned int *)(**(_QWORD **)a3 + 4 * v5);
      v11 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a3 + 8) + 128) + 4 * v10);
      tls_data = (turi::thread_pool *)turi::thread::get_tls_data(tls_data);
      if ((v11 & 0x80000000) == 0)
      {
        v12 = *(_QWORD *)(**(_QWORD **)(a3 + 16) + 24 * *(int *)tls_data);
        *(float64x2_t *)(v12 + 16 * v11) = vaddq_f64(*(float64x2_t *)(v12 + 16 * v11), vcvtq_f64_f32(*(float32x2_t *)(**(_QWORD **)(a3 + 24) + 8 * v10)));
      }
      ++v5;
    }
    while (a2 != v5);
  }
}

void sub_2183D9F74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)va);
  _Unwind_Resume(a1);
}

void std::vector<std::vector<xgboost_old::tree::GradStats>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  size_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    v19 = v4;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>(v4, v11);
    else
      v12 = 0;
    v15 = v12;
    v16 = &v12[24 * v8];
    v18 = &v12[24 * v11];
    v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    v17 = &v16[v14];
    std::vector<std::vector<xgboost_old::tree::GradStats>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)&v15);
  }
}

void sub_2183DA0F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__function::__func<void xgboost_old::tree::BaseMaker::GetNodeStats<xgboost_old::tree::GradStats>(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix const&,xgboost_old::tree::RegTree const&,xgboost_old::BoosterInfo const&,std::vector<std::vector<xgboost_old::tree::GradStats>> *,std::vector<xgboost_old::tree::GradStats>*)::{lambda(unsigned long,unsigned long)#1},std::allocator<void xgboost_old::tree::BaseMaker::GetNodeStats<xgboost_old::tree::GradStats>(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix const&,xgboost_old::tree::RegTree const&,xgboost_old::BoosterInfo const&,std::vector<std::vector<xgboost_old::tree::GradStats>> *,std::vector<xgboost_old::tree::GradStats>*)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

__n128 std::__function::__func<void xgboost_old::tree::BaseMaker::GetNodeStats<xgboost_old::tree::GradStats>(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix const&,xgboost_old::tree::RegTree const&,xgboost_old::BoosterInfo const&,std::vector<std::vector<xgboost_old::tree::GradStats>> *,std::vector<xgboost_old::tree::GradStats>*)::{lambda(unsigned long,unsigned long)#1},std::allocator<void xgboost_old::tree::BaseMaker::GetNodeStats<xgboost_old::tree::GradStats>(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix const&,xgboost_old::tree::RegTree const&,xgboost_old::BoosterInfo const&,std::vector<std::vector<xgboost_old::tree::GradStats>> *,std::vector<xgboost_old::tree::GradStats>*)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &unk_24D93E9C8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<void xgboost_old::tree::BaseMaker::GetNodeStats<xgboost_old::tree::GradStats>(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix const&,xgboost_old::tree::RegTree const&,xgboost_old::BoosterInfo const&,std::vector<std::vector<xgboost_old::tree::GradStats>> *,std::vector<xgboost_old::tree::GradStats>*)::{lambda(unsigned long,unsigned long)#1},std::allocator<void xgboost_old::tree::BaseMaker::GetNodeStats<xgboost_old::tree::GradStats>(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix const&,xgboost_old::tree::RegTree const&,xgboost_old::BoosterInfo const&,std::vector<std::vector<xgboost_old::tree::GradStats>> *,std::vector<xgboost_old::tree::GradStats>*)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24D93E9C8;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<void xgboost_old::tree::BaseMaker::GetNodeStats<xgboost_old::tree::GradStats>(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix const&,xgboost_old::tree::RegTree const&,xgboost_old::BoosterInfo const&,std::vector<std::vector<xgboost_old::tree::GradStats>> *,std::vector<xgboost_old::tree::GradStats>*)::{lambda(unsigned long,unsigned long)#1},std::allocator<void xgboost_old::tree::BaseMaker::GetNodeStats<xgboost_old::tree::GradStats>(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix const&,xgboost_old::tree::RegTree const&,xgboost_old::BoosterInfo const&,std::vector<std::vector<xgboost_old::tree::GradStats>> *,std::vector<xgboost_old::tree::GradStats>*)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::operator()(uint64_t a1, uint64_t *a2)
{
  std::__invoke_void_return_wrapper<void,true>::__call[abi:ne180100]<void xgboost_old::tree::BaseMaker::GetNodeStats<xgboost_old::tree::GradStats>(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix const&,xgboost_old::tree::RegTree const&,xgboost_old::BoosterInfo const&,std::vector<std::vector<xgboost_old::tree::GradStats>> *,std::vector<xgboost_old::tree::GradStats>*)::{lambda(unsigned long,unsigned long)#1} &,unsigned long,unsigned long>(a1 + 8, a2);
}

uint64_t std::__function::__func<void xgboost_old::tree::BaseMaker::GetNodeStats<xgboost_old::tree::GradStats>(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix const&,xgboost_old::tree::RegTree const&,xgboost_old::BoosterInfo const&,std::vector<std::vector<xgboost_old::tree::GradStats>> *,std::vector<xgboost_old::tree::GradStats>*)::{lambda(unsigned long,unsigned long)#1},std::allocator<void xgboost_old::tree::BaseMaker::GetNodeStats<xgboost_old::tree::GradStats>(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix const&,xgboost_old::tree::RegTree const&,xgboost_old::BoosterInfo const&,std::vector<std::vector<xgboost_old::tree::GradStats>> *,std::vector<xgboost_old::tree::GradStats>*)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void xgboost_old::tree::BaseMaker::GetNodeStats<xgboost_old::tree::GradStats>(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix const&,xgboost_old::tree::RegTree const&,xgboost_old::BoosterInfo const&,std::vector<std::vector<xgboost_old::tree::GradStats>> *,std::vector<xgboost_old::tree::GradStats>*)::{lambda(unsigned long,unsigned long)#1},std::allocator<void xgboost_old::tree::BaseMaker::GetNodeStats<xgboost_old::tree::GradStats>(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix const&,xgboost_old::tree::RegTree const&,xgboost_old::BoosterInfo const&,std::vector<std::vector<xgboost_old::tree::GradStats>> *,std::vector<xgboost_old::tree::GradStats>*)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::target_type()
{
}

void std::__invoke_void_return_wrapper<void,true>::__call[abi:ne180100]<void xgboost_old::tree::BaseMaker::GetNodeStats<xgboost_old::tree::GradStats>(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix const&,xgboost_old::tree::RegTree const&,xgboost_old::BoosterInfo const&,std::vector<std::vector<xgboost_old::tree::GradStats>> *,std::vector<xgboost_old::tree::GradStats>*)::{lambda(unsigned long,unsigned long)#1} &,unsigned long,unsigned long>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  __int128 v11;

  v3 = *a2;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = **(_QWORD **)a1 + 24 * *a2;
  v7 = *(int *)(v4 + 100);
  v11 = 0uLL;
  std::vector<xgboost_old::tree::GradStats>::resize(v6, v7, &v11);
  v8 = *(_QWORD *)(v5 + 80);
  if (*(_QWORD *)(v5 + 88) != v8)
  {
    v9 = 0;
    do
    {
      v10 = (_QWORD *)(*(_QWORD *)(**(_QWORD **)a1 + 24 * v3) + 16 * *(unsigned int *)(v8 + 4 * v9));
      *v10 = 0;
      v10[1] = 0;
      ++v9;
      v8 = *(_QWORD *)(v5 + 80);
    }
    while (v9 < (*(_QWORD *)(v5 + 88) - v8) >> 2);
  }
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<void xgboost_old::tree::BaseMaker::GetNodeStats<xgboost_old::tree::GradStats>(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix const&,xgboost_old::tree::RegTree const&,xgboost_old::BoosterInfo const&,std::vector<std::vector<xgboost_old::tree::GradStats>> *,std::vector<xgboost_old::tree::GradStats>*)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::tree::GradStats const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v4;
  __int128 v5;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x80000002186FC582 & 0x7FFFFFFFFFFFFFFFLL)
        || (result = strcmp((const char *)result, (const char *)(0x80000002186FC582 & 0x7FFFFFFFFFFFFFFFLL)),
            !(_DWORD)result))
      {
        *(_QWORD *)a2 = v4;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
    }
  }
  else
  {
    v5 = *(_OWORD *)result;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

_QWORD *boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<void xgboost_old::tree::BaseMaker::GetNodeStats<xgboost_old::tree::GradStats>(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix const&,xgboost_old::tree::RegTree const&,xgboost_old::BoosterInfo const&,std::vector<std::vector<xgboost_old::tree::GradStats>> *,std::vector<xgboost_old::tree::GradStats>*)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::tree::GradStats const&)::{lambda(void)#1},void>::invoke(_QWORD *result)
{
  unint64_t v1;
  _QWORD *v2;
  _QWORD **v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = result[1];
  if (v1 < result[2])
  {
    v2 = result;
    do
    {
      v3 = (_QWORD **)*v2;
      v4 = *(unsigned int *)(**(_QWORD **)*v2 + 4 * v1);
      v5 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(*v2 + 8) + 128) + 4 * v4);
      result = turi::thread::get_tls_data((turi::thread *)result);
      if ((v5 & 0x80000000) == 0)
      {
        v6 = *(_QWORD *)(*v3[2] + 24 * *(int *)result);
        *(float64x2_t *)(v6 + 16 * v5) = vaddq_f64(*(float64x2_t *)(v6 + 16 * v5), vcvtq_f64_f32(*(float32x2_t *)(*v3[3] + 8 * v4)));
      }
      ++v1;
    }
    while (v1 < v2[2]);
  }
  return result;
}

void std::vector<xgboost_old::utils::WXQuantileSketch<float,float>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  size_t v14;
  void *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0xF0F0F0F0F0F0F0F1 * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = 136 * ((136 * a2 - 136) / 0x88) + 136;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xF0F0F0F0F0F0F0F1 * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0x1E1E1E1E1E1E1E1)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = 0xF0F0F0F0F0F0F0F1 * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0xF0F0F0F0F0F0F0)
      v11 = 0x1E1E1E1E1E1E1E1;
    else
      v11 = v9;
    v19 = v4;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::toolkit_function_specification>>(v4, v11);
    else
      v12 = 0;
    v15 = v12;
    v16 = &v12[136 * v8];
    v18 = &v12[136 * v11];
    v14 = 136 * ((136 * a2 - 136) / 0x88) + 136;
    bzero(v16, v14);
    v17 = &v16[v14];
    std::vector<xgboost_old::utils::WXQuantileSketch<float,float>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<xgboost_old::utils::WXQuantileSketch<float,float>>::~__split_buffer(&v15);
  }
}

void sub_2183DA4FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<xgboost_old::utils::WXQuantileSketch<float,float>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<xgboost_old::utils::WXQuantileSketch<float,float>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<xgboost_old::utils::WXQuantileSketch<float,float>>,std::reverse_iterator<xgboost_old::utils::WXQuantileSketch<float,float>*>,std::reverse_iterator<xgboost_old::utils::WXQuantileSketch<float,float>*>,std::reverse_iterator<xgboost_old::utils::WXQuantileSketch<float,float>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<xgboost_old::utils::WXQuantileSketch<float,float>>,std::reverse_iterator<xgboost_old::utils::WXQuantileSketch<float,float>*>,std::reverse_iterator<xgboost_old::utils::WXQuantileSketch<float,float>*>,std::reverse_iterator<xgboost_old::utils::WXQuantileSketch<float,float>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  v13 = 0;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v9 -= 136;
      xgboost_old::utils::QuantileSketchTemplate<float,float,xgboost_old::utils::WXQSummary<float,float>>::QuantileSketchTemplate(v7 - 136, v9);
      v7 = *((_QWORD *)&v15 + 1) - 136;
      *((_QWORD *)&v15 + 1) -= 136;
    }
    while (v9 != a5);
    v10 = v15;
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<xgboost_old::utils::WXQuantileSketch<float,float>>,std::reverse_iterator<xgboost_old::utils::WXQuantileSketch<float,float>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

void sub_2183DA628(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<xgboost_old::utils::WXQuantileSketch<float,float>>,std::reverse_iterator<xgboost_old::utils::WXQuantileSketch<float,float>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t xgboost_old::utils::QuantileSketchTemplate<float,float,xgboost_old::utils::WXQSummary<float,float>>::QuantileSketchTemplate(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>((_QWORD *)a1, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v4 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  std::vector<xgboost_old::tree::GradStats>::__init_with_size[abi:ne180100]<xgboost_old::tree::GradStats*,xgboost_old::tree::GradStats*>((_QWORD *)(a1 + 48), *(const void **)(a2 + 48), *(_QWORD *)(a2 + 56), (uint64_t)(*(_QWORD *)(a2 + 56) - *(_QWORD *)(a2 + 48)) >> 4);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  std::vector<xgboost_old::tree::GradStats>::__init_with_size[abi:ne180100]<xgboost_old::tree::GradStats*,xgboost_old::tree::GradStats*>((_QWORD *)(a1 + 72), *(const void **)(a2 + 72), *(_QWORD *)(a2 + 80), (uint64_t)(*(_QWORD *)(a2 + 80) - *(_QWORD *)(a2 + 72)) >> 4);
  xgboost_old::utils::QuantileSketchTemplate<float,float,xgboost_old::utils::WXQSummary<float,float>>::SummaryContainer::SummaryContainer(a1 + 96, a2 + 96);
  return a1;
}

void sub_2183DA6E0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;
  void *v6;
  void *v7;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 80) = v5;
    operator delete(v5);
  }
  v6 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 56) = v6;
    operator delete(v6);
  }
  v7 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v7;
    operator delete(v7);
  }
  _Unwind_Resume(exception_object);
}

uint64_t xgboost_old::utils::QuantileSketchTemplate<float,float,xgboost_old::utils::WXQSummary<float,float>>::SummaryContainer::SummaryContainer(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  if (a1 == a2)
  {
    v4 = 0;
    v5 = 0;
  }
  else
  {
    std::vector<xgboost_old::utils::WQSummary<float,float>::Entry,std::allocator<xgboost_old::utils::WQSummary<float,float>::Entry>>::__assign_with_size[abi:ne180100]<xgboost_old::utils::WQSummary<float,float>::Entry*,xgboost_old::utils::WQSummary<float,float>::Entry*>((char *)(a1 + 16), *(char **)(a2 + 16), *(_QWORD *)(a2 + 24), (uint64_t)(*(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16)) >> 4);
    v4 = *(_QWORD *)(a1 + 16);
    v5 = *(_QWORD *)(a1 + 24);
  }
  if (v5 == v4)
    v4 = 0;
  *(_QWORD *)a1 = v4;
  return a1;
}

void sub_2183DA7A4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 24) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<xgboost_old::utils::WQSummary<float,float>::Entry,std::allocator<xgboost_old::utils::WQSummary<float,float>::Entry>>::__assign_with_size[abi:ne180100]<xgboost_old::utils::WQSummary<float,float>::Entry*,xgboost_old::utils::WQSummary<float,float>::Entry*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 4)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 60)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 3;
    if (v8 >> 3 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
      v11 = 0xFFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<turi::flexible_type>::__vallocate[abi:ne180100](v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 4;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[16 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<xgboost_old::utils::WXQuantileSketch<float,float>>,std::reverse_iterator<xgboost_old::utils::WXQuantileSketch<float,float>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<xgboost_old::utils::WXQuantileSketch<float,float>>,std::reverse_iterator<xgboost_old::utils::WXQuantileSketch<float,float>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<xgboost_old::utils::WXQuantileSketch<float,float>>,std::reverse_iterator<xgboost_old::utils::WXQuantileSketch<float,float>*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1[2] + 8);
  v2 = *(_QWORD *)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      std::allocator<xgboost_old::utils::WXQuantileSketch<float,float>>::destroy[abi:ne180100](v3, v1);
      v1 += 136;
    }
    while (v1 != v2);
  }
}

void **std::__split_buffer<xgboost_old::utils::WXQuantileSketch<float,float>>::~__split_buffer(void **a1)
{
  std::__split_buffer<xgboost_old::utils::WXQuantileSketch<float,float>>::clear[abi:ne180100](a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<xgboost_old::utils::WXQuantileSketch<float,float>>::clear[abi:ne180100](_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 136;
    std::allocator<xgboost_old::utils::WXQuantileSketch<float,float>>::destroy[abi:ne180100](v4, i - 136);
  }
}

void std::vector<xgboost_old::utils::QuantileSketchTemplate<float,float,xgboost_old::utils::WXQSummary<float,float>>::SummaryContainer,std::allocator<xgboost_old::utils::QuantileSketchTemplate<float,float,xgboost_old::utils::WXQSummary<float,float>>::SummaryContainer>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  size_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0xCCCCCCCCCCCCCCCDLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = 40 * ((40 * a2 - 40) / 0x28) + 40;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xCCCCCCCCCCCCCCCDLL * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0x666666666666666)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x333333333333333)
      v11 = 0x666666666666666;
    else
      v11 = v9;
    v19 = v4;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,turi::flexible_type>>>(v4, v11);
    else
      v12 = 0;
    v15 = v12;
    v16 = &v12[40 * v8];
    v18 = &v12[40 * v11];
    v14 = 40 * ((40 * a2 - 40) / 0x28) + 40;
    bzero(v16, v14);
    v17 = &v16[v14];
    std::vector<xgboost_old::utils::QuantileSketchTemplate<float,float,xgboost_old::utils::WXQSummary<float,float>>::SummaryContainer,std::allocator<xgboost_old::utils::QuantileSketchTemplate<float,float,xgboost_old::utils::WXQSummary<float,float>>::SummaryContainer>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<xgboost_old::utils::QuantileSketchTemplate<float,float,xgboost_old::utils::WXQSummary<float,float>>::SummaryContainer,std::allocator<xgboost_old::utils::QuantileSketchTemplate<float,float,xgboost_old::utils::WXQSummary<float,float>>::SummaryContainer> &>::~__split_buffer((uint64_t)&v15);
  }
}

void sub_2183DAB10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<xgboost_old::utils::QuantileSketchTemplate<float,float,xgboost_old::utils::WXQSummary<float,float>>::SummaryContainer,std::allocator<xgboost_old::utils::QuantileSketchTemplate<float,float,xgboost_old::utils::WXQSummary<float,float>>::SummaryContainer> &>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<xgboost_old::utils::QuantileSketchTemplate<float,float,xgboost_old::utils::WXQSummary<float,float>>::SummaryContainer,std::allocator<xgboost_old::utils::QuantileSketchTemplate<float,float,xgboost_old::utils::WXQSummary<float,float>>::SummaryContainer>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<xgboost_old::utils::QuantileSketchTemplate<float,float,xgboost_old::utils::WXQSummary<float,float>>::SummaryContainer>,std::reverse_iterator<xgboost_old::utils::QuantileSketchTemplate<float,float,xgboost_old::utils::WXQSummary<float,float>>::SummaryContainer*>,std::reverse_iterator<xgboost_old::utils::QuantileSketchTemplate<float,float,xgboost_old::utils::WXQSummary<float,float>>::SummaryContainer*>,std::reverse_iterator<xgboost_old::utils::QuantileSketchTemplate<float,float,xgboost_old::utils::WXQSummary<float,float>>::SummaryContainer*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<xgboost_old::utils::QuantileSketchTemplate<float,float,xgboost_old::utils::WXQSummary<float,float>>::SummaryContainer>,std::reverse_iterator<xgboost_old::utils::QuantileSketchTemplate<float,float,xgboost_old::utils::WXQSummary<float,float>>::SummaryContainer*>,std::reverse_iterator<xgboost_old::utils::QuantileSketchTemplate<float,float,xgboost_old::utils::WXQSummary<float,float>>::SummaryContainer*>,std::reverse_iterator<xgboost_old::utils::QuantileSketchTemplate<float,float,xgboost_old::utils::WXQSummary<float,float>>::SummaryContainer*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  v13 = 0;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v9 -= 40;
      xgboost_old::utils::QuantileSketchTemplate<float,float,xgboost_old::utils::WXQSummary<float,float>>::SummaryContainer::SummaryContainer(v7 - 40, v9);
      v7 = *((_QWORD *)&v15 + 1) - 40;
      *((_QWORD *)&v15 + 1) -= 40;
    }
    while (v9 != a5);
    v10 = v15;
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<xgboost_old::utils::QuantileSketchTemplate<float,float,xgboost_old::utils::WXQSummary<float,float>>::SummaryContainer>,std::reverse_iterator<xgboost_old::utils::QuantileSketchTemplate<float,float,xgboost_old::utils::WXQSummary<float,float>>::SummaryContainer*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

void sub_2183DAC3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<xgboost_old::utils::QuantileSketchTemplate<float,float,xgboost_old::utils::WXQSummary<float,float>>::SummaryContainer>,std::reverse_iterator<xgboost_old::utils::QuantileSketchTemplate<float,float,xgboost_old::utils::WXQSummary<float,float>>::SummaryContainer*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<xgboost_old::utils::QuantileSketchTemplate<float,float,xgboost_old::utils::WXQSummary<float,float>>::SummaryContainer>,std::reverse_iterator<xgboost_old::utils::QuantileSketchTemplate<float,float,xgboost_old::utils::WXQSummary<float,float>>::SummaryContainer*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<xgboost_old::utils::QuantileSketchTemplate<float,float,xgboost_old::utils::WXQSummary<float,float>>::SummaryContainer>,std::reverse_iterator<xgboost_old::utils::QuantileSketchTemplate<float,float,xgboost_old::utils::WXQSummary<float,float>>::SummaryContainer*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<xgboost_old::utils::QuantileSketchTemplate<float,float,xgboost_old::utils::WXQSummary<float,float>>::SummaryContainer>,std::reverse_iterator<xgboost_old::utils::QuantileSketchTemplate<float,float,xgboost_old::utils::WXQSummary<float,float>>::SummaryContainer*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = *(void **)(v1 + 16);
    if (v3)
    {
      *(_QWORD *)(v1 + 24) = v3;
      operator delete(v3);
    }
    v1 += 40;
  }
}

uint64_t std::__split_buffer<xgboost_old::utils::QuantileSketchTemplate<float,float,xgboost_old::utils::WXQSummary<float,float>>::SummaryContainer,std::allocator<xgboost_old::utils::QuantileSketchTemplate<float,float,xgboost_old::utils::WXQSummary<float,float>>::SummaryContainer> &>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<xgboost_old::utils::QuantileSketchTemplate<float,float,xgboost_old::utils::WXQSummary<float,float>>::SummaryContainer,std::allocator<xgboost_old::utils::QuantileSketchTemplate<float,float,xgboost_old::utils::WXQSummary<float,float>>::SummaryContainer> &>::__destruct_at_end[abi:ne180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<xgboost_old::utils::QuantileSketchTemplate<float,float,xgboost_old::utils::WXQSummary<float,float>>::SummaryContainer,std::allocator<xgboost_old::utils::QuantileSketchTemplate<float,float,xgboost_old::utils::WXQSummary<float,float>>::SummaryContainer> &>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v5;

  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != a2)
  {
    *(_QWORD *)(a1 + 16) = v2 - 40;
    v5 = *(void **)(v2 - 24);
    if (v5)
    {
      *(_QWORD *)(v2 - 16) = v5;
      operator delete(v5);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 40;
    }
  }
}

void rabit::SerializeReducer<xgboost_old::utils::QuantileSketchTemplate<float,float,xgboost_old::utils::WXQSummary<float,float>>::SummaryContainer>::Allreduce(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v8;
  void *v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  uint64_t *v16;
  void *v17;
  const char *v18;
  size_t v19;
  size_t v20;
  unint64_t v21;
  uint64_t v22;
  _BOOL8 v23;
  const char *v24;
  uint64_t (**v25)(_QWORD, _QWORD, unint64_t);
  uint64_t v26;
  unint64_t v27;
  size_t v28;
  _QWORD v29[6];

  v8 = a4;
  v12 = (void *)(a1 + 32);
  std::string::resize((std::string *)(a1 + 32), a4 * a3, 0);
  v29[0] = a2;
  v29[1] = a3;
  v29[2] = v8;
  v29[3] = a5;
  v29[4] = a6;
  v29[5] = v12;
  if (*(char *)(a1 + 55) < 0)
  {
    if (*(_QWORD *)(a1 + 40))
      v13 = *(void **)(a1 + 32);
    else
      v13 = 0;
  }
  else if (*(_BYTE *)(a1 + 55))
  {
    v13 = v12;
  }
  else
  {
    v13 = 0;
  }
  rabit::engine::ReduceHandle::Allreduce((rabit::engine::ReduceHandle *)a1, v13, a3, v8, (uint64_t (*)(void *, void *))rabit::SerializeReduceClosure<xgboost_old::utils::QuantileSketchTemplate<float,float,xgboost_old::utils::WXQSummary<float,float>>::SummaryContainer>::Invoke, v29);
  if (v8)
  {
    v15 = 0;
    v16 = (uint64_t *)(a2 + 16);
    do
    {
      if (*(char *)(a1 + 55) < 0)
      {
        if (*(_QWORD *)(a1 + 40))
          v17 = *(void **)(a1 + 32);
        else
          v17 = 0;
      }
      else if (*(_BYTE *)(a1 + 55))
      {
        v17 = v12;
      }
      else
      {
        v17 = 0;
      }
      v26 = (uint64_t)v17 + v15;
      v27 = a3;
      v28 = 0;
      xgboost_old::utils::Assert(a3 > 7, "read can not have position excceed buffer length", v14, &unk_24D93E928);
      v19 = v28;
      if (v27 - v28 >= 8)
        v20 = 8;
      else
        v20 = v27 - v28;
      if (v20)
        memcpy(v16 - 1, (const void *)(v26 + v28), v20);
      v28 = v20 + v19;
      xgboost_old::utils::Check(v20 != 0, "invalid SummaryArray 1", v18);
      v21 = *(v16 - 1);
      if (v21 > (v16[1] - *v16) >> 4)
      {
        std::vector<xgboost_old::utils::WQSummary<float,float>::Entry,std::allocator<xgboost_old::utils::WQSummary<float,float>::Entry>>::resize((uint64_t)v16, v21);
        if (v16[1] == *v16)
          v22 = 0;
        else
          v22 = *v16;
        *(v16 - 2) = v22;
        v21 = *(v16 - 1);
      }
      if (v21)
      {
        v23 = (*v25)(&v25, *(v16 - 2), 16 * v21) != 0;
        xgboost_old::utils::Check(v23, "invalid SummaryArray 2", v24);
      }
      v16 += 5;
      v15 += a3;
      --v8;
    }
    while (v8);
  }
}

uint64_t rabit::SerializeReduceClosure<xgboost_old::utils::QuantileSketchTemplate<float,float,xgboost_old::utils::WXQSummary<float,float>>::SummaryContainer>::Invoke(uint64_t result, uint64_t a2, const char *a3)
{
  uint64_t *v3;
  uint64_t (*v4)(_QWORD);
  uint64_t v5;
  unint64_t v6;
  uint64_t **v7;
  int v8;
  BOOL v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t (**v14)(void **, _QWORD, uint64_t);
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;

  v3 = (uint64_t *)result;
  v4 = *(uint64_t (**)(_QWORD))(result + 24);
  if (v4)
    result = v4(*(_QWORD *)(result + 32));
  if (v3[2])
  {
    v5 = 0;
    v6 = 0;
    do
    {
      v7 = (uint64_t **)v3[5];
      v8 = *((char *)v7 + 23);
      if (v8 < 0)
      {
        v7 = (uint64_t **)*v7;
        v9 = *(_QWORD *)(v3[5] + 8) == 0;
      }
      else
      {
        v9 = v8 == 0;
      }
      if (v9)
        v7 = 0;
      v11 = *v3;
      v10 = v3[1];
      v14 = (uint64_t (**)(void **, _QWORD, uint64_t))&unk_24D93E928;
      v15 = (uint64_t)v7 + v10 * v6;
      v16 = v10;
      v17 = 0;
      v12 = (_QWORD *)(v11 + v5);
      result = xgboost_old::utils::Assert(v10 > 7, "write position exceed fixed buffer size", a3);
      *(_QWORD *)(v15 + v17) = v12[1];
      v17 += 8;
      v13 = v12[1];
      if (v13)
        result = v14[1]((void **)&v14, *v12, 16 * v13);
      ++v6;
      v5 += 40;
    }
    while (v6 < v3[2]);
  }
  return result;
}

void std::__function::__func<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::ResetPosAndPropose(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<unsigned int> const&,xgboost_old::tree::RegTree const&)::{lambda(void)#1},std::allocator<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::ResetPosAndPropose(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<unsigned int> const&,xgboost_old::tree::RegTree const&)::{lambda(void)#1}>,void ()(void)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

__n128 std::__function::__func<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::ResetPosAndPropose(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<unsigned int> const&,xgboost_old::tree::RegTree const&)::{lambda(void)#1},std::allocator<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::ResetPosAndPropose(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<unsigned int> const&,xgboost_old::tree::RegTree const&)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &unk_24D93EA68;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 std::__function::__func<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::ResetPosAndPropose(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<unsigned int> const&,xgboost_old::tree::RegTree const&)::{lambda(void)#1},std::allocator<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::ResetPosAndPropose(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<unsigned int> const&,xgboost_old::tree::RegTree const&)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &unk_24D93EA68;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::ResetPosAndPropose(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<unsigned int> const&,xgboost_old::tree::RegTree const&)::{lambda(void)#1},std::allocator<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::ResetPosAndPropose(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<unsigned int> const&,xgboost_old::tree::RegTree const&)::{lambda(void)#1}>,void ()(void)>::operator()(uint64_t a1)
{
  return xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::ResetPosAndPropose(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<unsigned int> const&,xgboost_old::tree::RegTree const&)::{lambda(void)#1}::operator()(a1 + 8);
}

uint64_t std::__function::__func<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::ResetPosAndPropose(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<unsigned int> const&,xgboost_old::tree::RegTree const&)::{lambda(void)#1},std::allocator<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::ResetPosAndPropose(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<unsigned int> const&,xgboost_old::tree::RegTree const&)::{lambda(void)#1}>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::ResetPosAndPropose(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<unsigned int> const&,xgboost_old::tree::RegTree const&)::{lambda(void)#1},std::allocator<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::ResetPosAndPropose(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<unsigned int> const&,xgboost_old::tree::RegTree const&)::{lambda(void)#1}>,void ()(void)>::target_type()
{
}

uint64_t xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::ResetPosAndPropose(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<unsigned int> const&,xgboost_old::tree::RegTree const&)::{lambda(void)#1}::operator()(uint64_t a1)
{
  _QWORD *v2;
  uint64_t *v3;
  int v4;
  _QWORD *v5;
  uint64_t v6;
  const char *v7;
  unsigned int *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  __int128 v16;
  void *__p[2];
  uint64_t *v18;
  uint64_t v19;

  v2 = *(_QWORD **)a1;
  v3 = (uint64_t *)(*(_QWORD *)a1 + 352);
  v4 = turi::thread::cpu_count((turi::thread *)a1);
  std::vector<std::vector<xgboost_old::tree::BaseMaker::SketchEntry>>::resize(v3, v4);
  v5 = (_QWORD *)(*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 8) + 64))(**(_QWORD **)(a1 + 8));
  v19 = (uint64_t)(v5[1] - *v5) >> 2;
  v6 = (*(uint64_t (**)(_QWORD, _QWORD *))(***(_QWORD ***)(a1 + 8) + 16))(**(_QWORD **)(a1 + 8), v2 + 41);
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6))
  {
    do
    {
      v8 = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
      v9 = *v8;
      *(_QWORD *)&v16 = v2;
      *((_QWORD *)&v16 + 1) = v8;
      *(_OWORD *)__p = *(_OWORD *)(a1 + 16);
      v18 = &v19;
      turi::parallel_for<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::ResetPosAndPropose(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<unsigned int> const&,xgboost_old::tree::RegTree const&)::{lambda(void)#1}::operator() const(void)::{lambda(unsigned long)#1}>(0, v9, (uint64_t)&v16);
    }
    while (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6) & 1) != 0);
  }
  v10 = v2[66];
  if (v2[67] == v10)
  {
    v14 = 0;
  }
  else
  {
    v11 = 0;
    v12 = 0;
    v13 = 0;
    do
    {
      v18 = 0;
      v16 = 0u;
      *(_OWORD *)__p = 0u;
      xgboost_old::utils::QuantileSketchTemplate<float,float,xgboost_old::utils::WXQSummary<float,float>>::GetSummary((uint64_t *)(v10 + v12), (uint64_t)&v16);
      xgboost_old::utils::WXQSummary<float,float>::SetPrune((_QWORD *)(v2[56] + v11), (uint64_t)&v16, **(unsigned int **)(a1 + 32));
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      ++v13;
      v10 = v2[66];
      v14 = 0xF0F0F0F0F0F0F0F1 * ((v2[67] - v10) >> 3);
      v12 += 136;
      v11 += 40;
    }
    while (v13 < v14);
  }
  return xgboost_old::utils::Assert(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v2[57] - v2[56]) >> 3) == v14, "shape mismatch", v7);
}

void sub_2183DB2B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::vector<std::vector<xgboost_old::tree::BaseMaker::SketchEntry>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;

  v3 = a1[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<xgboost_old::tree::BaseMaker::SketchEntry>>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 24 * a2;
    if (v3 != v7)
    {
      v8 = a1[1];
      do
      {
        v10 = *(void **)(v8 - 24);
        v8 -= 24;
        v9 = v10;
        if (v10)
        {
          *(_QWORD *)(v3 - 16) = v9;
          operator delete(v9);
        }
        v3 = v8;
      }
      while (v8 != v7);
    }
    a1[1] = v7;
  }
}

void turi::parallel_for<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::ResetPosAndPropose(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<unsigned int> const&,xgboost_old::tree::RegTree const&)::{lambda(void)#1}::operator() const(void)::{lambda(unsigned long)#1}>(turi::thread_pool *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v5;
  turi::thread_pool *instance;
  turi::thread *v7;
  turi::thread_pool *tls_data;
  BOOL v9;
  uint64_t v10;
  _QWORD *v11;
  unsigned int v12;
  int v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  turi::thread_pool *v18;
  uint64_t v19;
  double v20;
  double v21;
  turi::thread *v22;
  unint64_t v23;
  uint64_t v24[4];
  _QWORD v25[25];

  v5 = (unint64_t)a1;
  v25[24] = *MEMORY[0x24BDAC8D0];
  instance = (turi::thread_pool *)turi::thread_pool::get_instance(a1);
  v7 = (turi::thread *)turi::thread_pool::size(instance);
  tls_data = (turi::thread_pool *)turi::thread::get_tls_data(v7);
  if (*((_BYTE *)tls_data + 8))
    v9 = 0;
  else
    v9 = (unint64_t)v7 > 1;
  if (v9)
  {
    v18 = (turi::thread_pool *)turi::thread_pool::get_instance(tls_data);
    turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)v25, v18);
    v19 = 0;
    v20 = (double)(a2 - v5) / (double)(unint64_t)v7;
    v21 = (double)v5;
    do
    {
      v22 = (turi::thread *)(v19 + 1);
      v23 = (unint64_t)(v21 + v20 * (double)(unint64_t)(v19 + 1));
      if ((turi::thread *)v19 == (turi::thread *)((char *)v7 - 1))
        v23 = a2;
      v24[2] = (unint64_t)(v21 + v20 * (double)(unint64_t)v19);
      v24[3] = v23;
      v24[0] = (uint64_t)boost::function0<void>::assign_to<void turi::parallel_for<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::ResetPosAndPropose(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<unsigned int> const&,xgboost_old::tree::RegTree const&)::{lambda(void)#1}::operator() const(void)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::ResetPosAndPropose(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<unsigned int> const&,xgboost_old::tree::RegTree const&)::{lambda(void)#1}::operator() const(void)::{lambda(unsigned long)#1} const&)::{lambda(void)#1}>(xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::ResetPosAndPropose(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<unsigned int> const&,xgboost_old::tree::RegTree const&)::{lambda(void)#1}::operator() const(void)::{lambda(unsigned long)#1})::stored_vtable
             + 1;
      v24[1] = a3;
      turi::parallel_task_queue::launch((uint64_t)v25, (uint64_t)v24, v19);
      boost::function0<void>::~function0(v24);
      v19 = (uint64_t)v22;
    }
    while (v22 != v7);
    turi::parallel_task_queue::join((turi::parallel_task_queue *)v25);
    turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)v25);
  }
  else if (a2 > v5)
  {
    v10 = 16 * v5;
    do
    {
      v11 = *(_QWORD **)a3;
      v12 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 304)
                      + 4 * *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a3 + 8) + 8) + 4 * v5));
      tls_data = (turi::thread_pool *)turi::thread::get_tls_data(tls_data);
      if ((v12 & 0x80000000) == 0)
      {
        v13 = *(_DWORD *)tls_data;
        v14 = *(uint64_t **)(a3 + 16);
        v15 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a3 + 8) + 16) + v10);
        v17 = *v15;
        v16 = v15[1];
        v25[0] = v17;
        v25[1] = v16;
        xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::UpdateSketchCol((uint64_t)v11, v14, v25, *(_QWORD *)(a3 + 24), v11 + 53, v11 + 41, v12, **(_QWORD **)(a3 + 32) == v16, (uint64_t *)(v11[44] + 24 * v13));
      }
      ++v5;
      v10 += 16;
    }
    while (a2 != v5);
  }
}

void sub_2183DB520(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)va);
  _Unwind_Resume(a1);
}

_QWORD *xgboost_old::utils::QuantileSketchTemplate<float,float,xgboost_old::utils::WXQSummary<float,float>>::GetSummary(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  float v15;
  float *v16;
  unint64_t v17;
  float v18;
  float v19;
  float *v20;
  float v21;
  float *v22;
  _QWORD *result;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  float32x2_t **v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  char v33;

  if (a1[7] == a1[6])
    v4 = (a1[1] - *a1) >> 3;
  else
    v4 = 2 * a1[5];
  if (v4 > (uint64_t)(*(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16)) >> 4)
  {
    std::vector<xgboost_old::utils::WQSummary<float,float>::Entry,std::allocator<xgboost_old::utils::WQSummary<float,float>::Entry>>::resize(a2 + 16, v4);
    if (*(_QWORD *)(a2 + 24) == *(_QWORD *)(a2 + 16))
      v5 = 0;
    else
      v5 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = v5;
  }
  v6 = a1[3];
  v7 = 126 - 2 * __clz(v6);
  if (v6)
    v8 = v7;
  else
    v8 = 0;
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,xgboost_old::utils::WQSummary<float,float>::Queue::QEntry *,false>(*a1, (float *)(*a1 + 8 * v6), (uint64_t)&v33, v8, 1);
  *(_QWORD *)(a2 + 8) = 0;
  v9 = a1[3];
  if (v9)
  {
    v10 = 0;
    v11 = 0;
    v12 = *a1;
    v13 = *(char **)a2;
    v14 = *a1 + 12;
    v15 = 0.0;
    do
    {
      v16 = (float *)(v12 + 8 * v11);
      v17 = v11 + 1;
      v19 = *v16;
      v18 = v16[1];
      if (v11 + 1 < v9)
      {
        v20 = (float *)(v14 + 8 * v11);
        while (*(v20 - 1) == v19)
        {
          v21 = *v20;
          v20 += 2;
          v18 = v18 + v21;
          if (v9 == ++v17)
          {
            v17 = v9;
            break;
          }
        }
      }
      v22 = (float *)&v13[16 * v10];
      *v22 = v15;
      v15 = v15 + v18;
      ++v10;
      v22[1] = v15;
      v22[2] = v18;
      v22[3] = v19;
      v11 = v17;
    }
    while (v17 < v9);
    *(_QWORD *)(a2 + 8) = v10;
  }
  else
  {
    v10 = 0;
  }
  result = (_QWORD *)a1[6];
  v24 = a1[5];
  if ((_QWORD *)a1[7] == result)
  {
    if (v10 <= v24)
      return result;
    v25 = a1 + 12;
    if (v24 > (a1[15] - a1[14]) >> 4)
    {
      std::vector<xgboost_old::utils::WQSummary<float,float>::Entry,std::allocator<xgboost_old::utils::WQSummary<float,float>::Entry>>::resize((uint64_t)(a1 + 14), a1[5]);
      if (a1[15] == a1[14])
        v31 = 0;
      else
        v31 = a1[14];
      a1[12] = v31;
      v24 = a1[5];
    }
    xgboost_old::utils::WXQSummary<float,float>::SetPrune(a1 + 12, a2, v24);
    v30 = a1 + 13;
  }
  else
  {
    xgboost_old::utils::WXQSummary<float,float>::SetPrune(result, a2, v24);
    v25 = (_QWORD *)a1[6];
    if ((unint64_t)(a1[7] - (_QWORD)v25) >= 0x11)
    {
      v26 = 0;
      v27 = 1;
      do
      {
        v28 = v25[v26 + 3];
        if (v28)
        {
          v29 = (float32x2_t **)&v25[v26 + 2];
          if (v25[1])
          {
            xgboost_old::utils::WQSummary<float,float>::SetCombine((float32x2_t **)a2, (float32x2_t **)v25, v29);
            xgboost_old::utils::WXQSummary<float,float>::SetPrune((_QWORD *)a1[6], a2, a1[5]);
          }
          else
          {
            v25[1] = v28;
            memcpy((void *)*v25, *v29, 16 * v28);
          }
        }
        ++v27;
        v25 = (_QWORD *)a1[6];
        v26 += 2;
      }
      while (v27 < (a1[7] - (uint64_t)v25) >> 4);
    }
    v30 = v25 + 1;
  }
  v32 = *v30;
  *(_QWORD *)(a2 + 8) = v32;
  return memcpy(*(void **)a2, (const void *)*v25, 16 * v32);
}

void std::vector<std::vector<xgboost_old::tree::BaseMaker::SketchEntry>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  size_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    v19 = v4;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>(v4, v11);
    else
      v12 = 0;
    v15 = v12;
    v16 = &v12[24 * v8];
    v18 = &v12[24 * v11];
    v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    v17 = &v16[v14];
    std::vector<std::vector<xgboost_old::tree::BaseMaker::SketchEntry>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)&v15);
  }
}

void sub_2183DB8E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<xgboost_old::tree::BaseMaker::SketchEntry>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<xgboost_old::tree::BaseMaker::SketchEntry>>,std::reverse_iterator<std::vector<xgboost_old::tree::BaseMaker::SketchEntry>*>,std::reverse_iterator<std::vector<xgboost_old::tree::BaseMaker::SketchEntry>*>,std::reverse_iterator<std::vector<xgboost_old::tree::BaseMaker::SketchEntry>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<xgboost_old::tree::BaseMaker::SketchEntry>>,std::reverse_iterator<std::vector<xgboost_old::tree::BaseMaker::SketchEntry>*>,std::reverse_iterator<std::vector<xgboost_old::tree::BaseMaker::SketchEntry>*>,std::reverse_iterator<std::vector<xgboost_old::tree::BaseMaker::SketchEntry>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<xgboost_old::tree::BaseMaker::SketchEntry>>,std::reverse_iterator<std::vector<xgboost_old::tree::BaseMaker::SketchEntry>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<xgboost_old::tree::BaseMaker::SketchEntry>>,std::reverse_iterator<std::vector<xgboost_old::tree::BaseMaker::SketchEntry>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::UpdateSketchCol(uint64_t a1, uint64_t *a2, _DWORD *a3, uint64_t a4, uint64_t *a5, _QWORD *a6, unsigned int a7, char a8, uint64_t *a9)
{
  uint64_t v16;
  unsigned int *v17;
  unsigned int *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  unint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  float v32;
  uint64_t v33;
  unsigned int *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  unint64_t v40;
  uint64_t v41;
  float v42;
  const char *v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int *v62;
  unsigned int v63;
  unsigned int *v64;
  float *v65;
  uint64_t i;
  unsigned int v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unsigned int v75;
  uint64_t v76;
  unint64_t v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  double v82;
  double v83;
  uint64_t v84;
  uint64_t *v85;
  unint64_t v86;
  double v87;
  float v88;
  float v89;
  float v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t *v96;
  const char *v97;
  _BYTE v98[128];
  _BYTE v99[128];
  uint64_t v100;

  v100 = *MEMORY[0x24BDAC8D0];
  if (!a3[2])
    return;
  std::vector<xgboost_old::tree::BaseMaker::SketchEntry>::resize((uint64_t)a9, *(int *)(a4 + 100));
  v17 = *(unsigned int **)(a1 + 80);
  v18 = *(unsigned int **)(a1 + 88);
  if (v18 == v17)
  {
    if ((a8 & 1) != 0)
      goto LABEL_17;
LABEL_12:
    v33 = a3[2];
    if ((_DWORD)v33)
    {
      v34 = *(unsigned int **)a3;
      v35 = *(_QWORD *)(a1 + 128);
      v36 = *a2;
      do
      {
        v38 = *v34;
        v34 += 2;
        v37 = v38;
        v39 = *(_DWORD *)(v35 + 4 * v38);
        if ((v39 & 0x80000000) == 0)
          *(double *)(*a9 + 48 * v39) = *(double *)(*a9 + 48 * v39) + *(float *)(v36 + 8 * v37 + 4);
        --v33;
      }
      while (v33);
    }
    goto LABEL_17;
  }
  v19 = v18 - v17;
  v20 = *(_QWORD *)(a1 + 104);
  v21 = *a9;
  v22 = (uint64_t)(a6[1] - *a6) >> 2;
  if (v19 <= 1)
    v19 = 1;
  v23 = *(_QWORD *)(a1 + 528);
  v24 = *(unsigned int **)(a1 + 80);
  v25 = v19;
  do
  {
    v26 = *v24++;
    v27 = *(unsigned int *)(v20 + 4 * v26);
    v16 = v21 + 48 * v26;
    *(_QWORD *)v16 = 0;
    *(_QWORD *)(v16 + 40) = v23 + 136 * (a7 + v22 * v27);
    --v25;
  }
  while (v25);
  if ((a8 & 1) == 0)
    goto LABEL_12;
  v28 = *a5;
  v29 = *a9;
  v30 = v17;
  do
  {
    v31 = *v30++;
    v32 = *(double *)(v28 + 16 * v31 + 8);
    *(double *)(v29 + 48 * v31) = v32;
    --v19;
  }
  while (v19);
LABEL_17:
  if (*(float *)(*(_QWORD *)a3 + 4) == *(float *)(*(_QWORD *)a3 + 8 * (a3[2] - 1) + 4))
  {
    if (v18 != v17)
    {
      v40 = 0;
      do
      {
        v41 = *a9 + 48 * (int)v17[v40];
        v42 = *(double *)v41;
        xgboost_old::utils::QuantileSketchTemplate<float,float,xgboost_old::utils::WXQSummary<float,float>>::Push(*(uint64_t **)(v41 + 40), *(float *)(*(_QWORD *)a3 + 4), v42);
        ++v40;
        v17 = *(unsigned int **)(a1 + 80);
      }
      while (v40 < (uint64_t)(*(_QWORD *)(a1 + 88) - (_QWORD)v17) >> 2);
    }
  }
  else
  {
    v96 = a2;
    v97 = (const char *)(float)(*(float *)(a1 + 60) / *(float *)(a1 + 56));
    xgboost_old::utils::Check((_DWORD)v97 != 0, "sketch_ratio/sketch_eps must be bigger than 1", (const char *)v16);
    v44 = *(_QWORD *)(a1 + 80);
    if (*(_QWORD *)(a1 + 88) != v44)
    {
      v45 = 0;
      v46 = ((_DWORD)v97 + 1);
      do
      {
        v47 = *a9 + 48 * *(int *)(v44 + 4 * v45);
        v50 = *(_QWORD **)(v47 + 40);
        v49 = (_QWORD *)(v47 + 40);
        v48 = v50;
        *(v49 - 1) = 0xBFF0000000000000;
        *(v49 - 4) = 0;
        *(v49 - 3) = 0;
        v51 = (uint64_t)(v50 + 14);
        if (v46 > (uint64_t)(v50[15] - v50[14]) >> 4)
        {
          std::vector<xgboost_old::utils::WQSummary<float,float>::Entry,std::allocator<xgboost_old::utils::WQSummary<float,float>::Entry>>::resize(v51, v46);
          if (v48[15] == v48[14])
            v52 = 0;
          else
            v52 = v48[14];
          v48[12] = v52;
          v48 = (_QWORD *)*v49;
        }
        v48[13] = 0;
        ++v45;
        v44 = *(_QWORD *)(a1 + 80);
      }
      while (v45 < (*(_QWORD *)(a1 + 88) - v44) >> 2);
    }
    v53 = a3[2];
    if (*(_DWORD *)(a1 + 72))
    {
      v54 = a3[2];
      v55 = v53 & 0xFFFFFFE0;
      v56 = v96;
      if ((v53 & 0xFFFFFFE0) != 0)
      {
        v94 = a3[2];
        v95 = v53 & 0xFFFFFFE0;
        v57 = 0;
        v58 = 0;
        do
        {
          v59 = 0;
          v60 = *(_QWORD *)(a1 + 128);
          v61 = *v56;
          v62 = (unsigned int *)(*(_QWORD *)a3 + v57);
          do
          {
            v63 = *v62;
            v62 += 2;
            *(_DWORD *)&v99[v59] = *(_DWORD *)(v60 + 4 * v63);
            *(_DWORD *)&v98[v59] = *(_DWORD *)(v61 + 8 * v63 + 4);
            v59 += 4;
          }
          while (v59 != 128);
          v64 = (unsigned int *)v99;
          v65 = (float *)v98;
          for (i = 4; i != 260; i += 8)
          {
            v68 = *v64++;
            v67 = v68;
            if ((v68 & 0x80000000) == 0)
              xgboost_old::tree::BaseMaker::SketchEntry::Push((xgboost_old::tree::BaseMaker::SketchEntry *)(*a9 + 48 * v67), *(float *)(*(_QWORD *)a3 + v57 + i), *v65, v97, v43);
            ++v65;
          }
          v58 += 32;
          v57 += 256;
          v55 = v95;
          v56 = v96;
        }
        while (v58 < v95);
        v54 = a3[2];
        v53 = v94;
      }
      if (v55 < v54)
      {
        v69 = (8 * v53) & 0x7FFFFFF00;
        do
        {
          v70 = *(unsigned int *)(*(_QWORD *)a3 + v69);
          v71 = *(_DWORD *)(*(_QWORD *)(a1 + 128) + 4 * v70);
          if ((v71 & 0x80000000) == 0)
          {
            xgboost_old::tree::BaseMaker::SketchEntry::Push((xgboost_old::tree::BaseMaker::SketchEntry *)(*a9 + 48 * v71), *(float *)(*(_QWORD *)a3 + v69 + 4), *(float *)(*v56 + 8 * v70 + 4), v97, v43);
            v54 = a3[2];
          }
          ++v55;
          v69 += 8;
        }
        while (v55 < v54);
      }
    }
    else if (a3[2])
    {
      v72 = 0;
      v73 = 0;
      do
      {
        v74 = *(unsigned int *)(*(_QWORD *)a3 + v72);
        v75 = *(_DWORD *)(*(_QWORD *)(a1 + 128) + 4 * v74);
        if ((v75 & 0x80000000) == 0)
        {
          xgboost_old::tree::BaseMaker::SketchEntry::Push((xgboost_old::tree::BaseMaker::SketchEntry *)(*a9 + 48 * v75), *(float *)(*(_QWORD *)a3 + v72 + 4), *(float *)(*v96 + 8 * v74 + 4), v97, v43);
          v53 = a3[2];
        }
        ++v73;
        v72 += 8;
      }
      while (v73 < v53);
    }
    v76 = *(_QWORD *)(a1 + 80);
    if (*(_QWORD *)(a1 + 88) != v76)
    {
      v77 = 0;
      do
      {
        v78 = *(_DWORD *)(v76 + 4 * v77);
        v79 = *a9;
        v80 = *a9 + 48 * v78;
        v82 = *(double *)(v80 + 8);
        v81 = v80 + 8;
        v83 = v82;
        v85 = (uint64_t *)(v81 + 32);
        v84 = *(_QWORD *)(v81 + 32);
        v86 = *(_QWORD *)(v84 + 104);
        if (!v86 || *(float *)(v79 + 48 * v78 + 24) > *(float *)(*(_QWORD *)(v84 + 96) + 16 * v86 - 4))
        {
          v87 = v83 + *(double *)(v81 + 8);
          xgboost_old::utils::Assert(v86 <= (unint64_t)v97, "Finalize: invalid maximum size, max_size=%zu, stemp.size=%u", v43, v86, v97);
          v88 = *(double *)v81;
          v89 = v87;
          v90 = *(double *)(v81 + 8);
          v91 = *(_DWORD *)(v79 + 48 * v78 + 24);
          v84 = *v85;
          v92 = *(_QWORD *)(*v85 + 104);
          v93 = *(_QWORD *)(*v85 + 96) + 16 * v92;
          *(float *)v93 = v88;
          *(float *)(v93 + 4) = v89;
          *(float *)(v93 + 8) = v90;
          *(_DWORD *)(v93 + 12) = v91;
          *(_QWORD *)(v84 + 104) = v92 + 1;
        }
        xgboost_old::utils::QuantileSketchTemplate<float,float,xgboost_old::utils::WXQSummary<float,float>>::PushTemp(v84);
        ++v77;
        v76 = *(_QWORD *)(a1 + 80);
      }
      while (v77 < (*(_QWORD *)(a1 + 88) - v76) >> 2);
    }
  }
}

void std::vector<xgboost_old::tree::BaseMaker::SketchEntry>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;

  v2 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 4);
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<xgboost_old::tree::BaseMaker::SketchEntry>::__append((void **)a1, v4);
  }
  else if (!v3)
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 48 * a2;
  }
}

void xgboost_old::utils::QuantileSketchTemplate<float,float,xgboost_old::utils::WXQSummary<float,float>>::Push(uint64_t *a1, float a2, float a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  float v24;
  float *v25;
  unint64_t v26;
  float v27;
  float v28;
  float *v29;
  float v30;
  float *v31;
  uint64_t v32;
  uint64_t v33;
  float *v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  if (a3 != 0.0)
  {
    v36 = v6;
    v37 = v5;
    v38 = v3;
    v39 = v4;
    v10 = a1[3];
    v11 = *a1;
    v13 = a1[1] - v11;
    if (v10 == v13 >> 3)
    {
      if (v13 == 8)
      {
        std::vector<xgboost_old::SparseBatch::Entry>::resize((uint64_t)a1, 2 * a1[5]);
      }
      else
      {
        v14 = 2 * a1[5];
        if (v14 > (a1[15] - a1[14]) >> 4)
        {
          std::vector<xgboost_old::utils::WQSummary<float,float>::Entry,std::allocator<xgboost_old::utils::WQSummary<float,float>::Entry>>::resize((uint64_t)(a1 + 14), v14);
          if (a1[15] == a1[14])
            v15 = 0;
          else
            v15 = a1[14];
          a1[12] = v15;
          v11 = *a1;
          v10 = a1[3];
        }
        v16 = 126 - 2 * __clz(v10);
        if (v10)
          v17 = v16;
        else
          v17 = 0;
        std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,xgboost_old::utils::WQSummary<float,float>::Queue::QEntry *,false>(v11, (float *)(v11 + 8 * v10), (uint64_t)&v35, v17, 1);
        a1[13] = 0;
        v18 = a1[3];
        if (v18)
        {
          v19 = 0;
          v20 = 0;
          v21 = *a1;
          v22 = a1[12];
          v23 = *a1 + 12;
          v24 = 0.0;
          do
          {
            v25 = (float *)(v21 + 8 * v20);
            v26 = v20 + 1;
            v28 = *v25;
            v27 = v25[1];
            if (v20 + 1 < v18)
            {
              v29 = (float *)(v23 + 8 * v20);
              while (*(v29 - 1) == v28)
              {
                v30 = *v29;
                v29 += 2;
                v27 = v27 + v30;
                if (v18 == ++v26)
                {
                  v26 = v18;
                  break;
                }
              }
            }
            v31 = (float *)(v22 + 16 * v19);
            *v31 = v24;
            v24 = v24 + v27;
            ++v19;
            v31[1] = v24;
            v31[2] = v27;
            v31[3] = v28;
            v20 = v26;
          }
          while (v26 < v18);
          a1[13] = v19;
        }
        a1[3] = 0;
        xgboost_old::utils::QuantileSketchTemplate<float,float,xgboost_old::utils::WXQSummary<float,float>>::PushTemp((uint64_t)a1);
      }
    }
    v32 = a1[3];
    v33 = *a1;
    if (v32 && *(float *)(v33 + 8 * (v32 - 1)) == a2)
    {
      *(float *)(v33 + 8 * (v32 - 1) + 4) = *(float *)(v33 + 8 * (v32 - 1) + 4) + a3;
    }
    else
    {
      a1[3] = v32 + 1;
      v34 = (float *)(v33 + 8 * v32);
      *v34 = a2;
      v34[1] = a3;
    }
  }
}

void xgboost_old::tree::BaseMaker::SketchEntry::Push(xgboost_old::tree::BaseMaker::SketchEntry *this, float a2, float a3, const char *a4, const char *a5)
{
  double v8;
  double v9;
  float v10;
  double v11;
  double v12;
  double v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  float v18;
  float v19;
  float v20;
  float *v21;
  uint64_t v22;
  double v23;
  float v24;

  v8 = *((double *)this + 4);
  if (v8 == -1.0)
  {
    *((_QWORD *)this + 4) = 0;
    *((float *)this + 6) = a2;
    v9 = a3;
LABEL_3:
    *((double *)this + 2) = v9;
    return;
  }
  v10 = *((float *)this + 6);
  if (v10 == a2)
  {
    v9 = *((double *)this + 2) + a3;
    goto LABEL_3;
  }
  v12 = *((double *)this + 1);
  v11 = *((double *)this + 2);
  v13 = v12 + v11;
  if (v12 + v11 >= v8)
  {
    v14 = a4;
    v15 = *((_QWORD *)this + 5);
    v16 = *(_QWORD *)(v15 + 104);
    if (v16 == a4)
    {
      rabit::TrackerPrintf((rabit *)"INFO: rmax=%g, sum_total=%g, next_goal=%g, size=%lu\n", a4, v12 + v11, *(_QWORD *)this, *(_QWORD *)&v8, *(_QWORD *)(v15 + 104));
    }
    else
    {
      v17 = *(_QWORD *)(v15 + 96);
      if (!v16 || v10 > *(float *)(v17 + 16 * v16 - 4))
      {
        v18 = v12;
        v19 = v13;
        v20 = v11;
        v21 = (float *)(v17 + 16 * v16);
        *v21 = v18;
        v21[1] = v19;
        v21[2] = v20;
        v21[3] = v10;
        xgboost_old::utils::Assert(v16 < a4, "invalid maximum size max_size=%u, stemp.size=%lu\n", a5, a4, v16);
        v22 = *((_QWORD *)this + 5);
        v16 = *(_QWORD *)(v22 + 104) + 1;
        *(_QWORD *)(v22 + 104) = v16;
      }
      if (v16 == v14)
      {
        v23 = *(double *)this * 2.0 + 0.00000999999975;
      }
      else
      {
        v24 = *(double *)this * (double)v16 / (double)v14;
        v23 = v24;
      }
      *((double *)this + 4) = v23;
    }
  }
  *((double *)this + 1) = v13;
  *((double *)this + 2) = a3;
  *((float *)this + 6) = a2;
}

void std::vector<xgboost_old::tree::BaseMaker::SketchEntry>::__append(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  char *v14;
  char *v15;
  size_t v16;
  char *v17;
  char *v18;
  char *v19;
  __int128 v20;
  __int128 v21;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 4) >= a2)
  {
    if (a2)
    {
      v13 = 48 * ((48 * a2 - 48) / 0x30) + 48;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (_BYTE *)*a1) >> 4);
    v9 = v8 + a2;
    if (v8 + a2 > 0x555555555555555)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (_BYTE *)*a1) >> 4);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x2AAAAAAAAAAAAAALL)
      v11 = 0x555555555555555;
    else
      v11 = v9;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>>(v4, v11);
    else
      v12 = 0;
    v14 = &v12[48 * v8];
    v15 = &v12[48 * v11];
    v16 = 48 * ((48 * a2 - 48) / 0x30) + 48;
    bzero(v14, v16);
    v17 = &v14[v16];
    v19 = (char *)*a1;
    v18 = (char *)a1[1];
    if (v18 != *a1)
    {
      do
      {
        v20 = *((_OWORD *)v18 - 3);
        v21 = *((_OWORD *)v18 - 1);
        *((_OWORD *)v14 - 2) = *((_OWORD *)v18 - 2);
        *((_OWORD *)v14 - 1) = v21;
        *((_OWORD *)v14 - 3) = v20;
        v14 -= 48;
        v18 -= 48;
      }
      while (v18 != v19);
      v18 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v17;
    a1[2] = v15;
    if (v18)
      operator delete(v18);
  }
}

_QWORD *xgboost_old::utils::QuantileSketchTemplate<float,float,xgboost_old::utils::WXQSummary<float,float>>::PushTemp(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  float32x2_t **v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t i;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  void **v17;
  __int128 v18;

  v3 = *(_QWORD *)(a1 + 112);
  v2 = a1 + 112;
  v4 = (float32x2_t **)(v2 - 16);
  v5 = 2 * *(_QWORD *)(v2 - 72);
  if (v5 > (*(_QWORD *)(v2 + 8) - v3) >> 4)
  {
    std::vector<xgboost_old::utils::WQSummary<float,float>::Entry,std::allocator<xgboost_old::utils::WQSummary<float,float>::Entry>>::resize(v2, v5);
    if (*(_QWORD *)(a1 + 120) == *(_QWORD *)(a1 + 112))
      v6 = 0;
    else
      v6 = *(_QWORD *)(a1 + 112);
    *(_QWORD *)(a1 + 96) = v6;
  }
  v7 = *(char **)(a1 + 48);
  for (i = 1; ; ++i)
  {
    if (i + 1 > (unint64_t)((uint64_t)(*(_QWORD *)(a1 + 56) - (_QWORD)v7) >> 4))
    {
      std::vector<xgboost_old::utils::WQSummary<float,float>::Entry,std::allocator<xgboost_old::utils::WQSummary<float,float>::Entry>>::resize(a1 + 72, *(_QWORD *)(a1 + 40) * (i + 1));
      v18 = 0uLL;
      std::vector<xgboost_old::tree::GradStats>::resize(a1 + 48, i + 1, &v18);
      v7 = *(char **)(a1 + 48);
      v9 = *(char **)(a1 + 56);
      if (v9 == v7)
      {
        v7 = *(char **)(a1 + 56);
      }
      else
      {
        v10 = (v9 - v7) >> 4;
        if (*(_QWORD *)(a1 + 80) == *(_QWORD *)(a1 + 72))
          v11 = 0;
        else
          v11 = *(_QWORD *)(a1 + 72);
        if (v10 <= 1)
          v10 = 1;
        v12 = 16 * *(_QWORD *)(a1 + 40);
        v13 = *(_QWORD **)(a1 + 48);
        do
        {
          *v13 = v11;
          v13 += 2;
          v11 += v12;
          --v10;
        }
        while (v10);
      }
    }
    v14 = *(_QWORD *)(a1 + 40);
    if (!*(_QWORD *)&v7[16 * i + 8])
      return xgboost_old::utils::WXQSummary<float,float>::SetPrune(&v7[16 * i], (uint64_t)v4, v14);
    xgboost_old::utils::WXQSummary<float,float>::SetPrune(v7, (uint64_t)v4, v14);
    xgboost_old::utils::WQSummary<float,float>::SetCombine(v4, *(float32x2_t ***)(a1 + 48), (float32x2_t **)(*(_QWORD *)(a1 + 48) + 16 * i));
    v15 = *(_QWORD *)(a1 + 104);
    v7 = *(char **)(a1 + 48);
    if (v15 <= *(_QWORD *)(a1 + 40))
      break;
    *(_QWORD *)&v7[16 * i + 8] = 0;
  }
  v17 = (void **)&v7[16 * i];
  v17[1] = (void *)v15;
  return memcpy(*v17, *v4, 16 * v15);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,xgboost_old::utils::WQSummary<float,float>::Queue::QEntry *,false>(uint64_t result, float *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  float *v15;
  uint64_t v16;
  float *v17;
  char v18;
  BOOL v19;
  uint64_t v20;
  float *v21;
  float *v22;
  float v23;
  int v24;
  float *v25;
  float *v26;
  uint64_t v27;

  v8 = result;
LABEL_2:
  v9 = v8;
LABEL_3:
  v10 = 1 - a4;
  while (2)
  {
    v8 = v9;
    v11 = v10;
    v12 = (uint64_t)a2 - v9;
    v13 = ((uint64_t)a2 - v9) >> 3;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        if (*(a2 - 2) < *(float *)v9)
        {
          v20 = *(_QWORD *)v9;
          *(_QWORD *)v9 = *((_QWORD *)a2 - 1);
          *((_QWORD *)a2 - 1) = v20;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,xgboost_old::utils::WQSummary<float,float>::Queue::QEntry *>((float *)v9, (float *)(v9 + 8), a2 - 2);
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,xgboost_old::utils::WQSummary<float,float>::Queue::QEntry *>((float *)v9, (float *)(v9 + 8), (float *)(v9 + 16), (_QWORD *)a2 - 1);
      case 5uLL:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,xgboost_old::utils::WQSummary<float,float>::Queue::QEntry *>((float *)v9, (float *)(v9 + 8), (float *)(v9 + 16), (uint64_t *)(v9 + 24), (uint64_t *)a2 - 1);
      default:
        if (v12 > 191)
        {
          if (v11 == 1)
          {
            if ((float *)v9 != a2)
              return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,xgboost_old::utils::WQSummary<float,float>::Queue::QEntry *,xgboost_old::utils::WQSummary<float,float>::Queue::QEntry *>((float *)v9, a2, a2, a3);
            return result;
          }
          v14 = v13 >> 1;
          v15 = (float *)(v9 + 8 * (v13 >> 1));
          if ((unint64_t)v12 < 0x401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,xgboost_old::utils::WQSummary<float,float>::Queue::QEntry *>((float *)(v9 + 8 * (v13 >> 1)), (float *)v9, a2 - 2);
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,xgboost_old::utils::WQSummary<float,float>::Queue::QEntry *>((float *)v9, (float *)(v9 + 8 * (v13 >> 1)), a2 - 2);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,xgboost_old::utils::WQSummary<float,float>::Queue::QEntry *>((float *)(v9 + 8), v15 - 2, a2 - 4);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,xgboost_old::utils::WQSummary<float,float>::Queue::QEntry *>((float *)(v9 + 16), (float *)(v9 + 8 + 8 * v14), a2 - 6);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,xgboost_old::utils::WQSummary<float,float>::Queue::QEntry *>(v15 - 2, v15, (float *)(v9 + 8 + 8 * v14));
            v16 = *(_QWORD *)v9;
            *(_QWORD *)v9 = *(_QWORD *)v15;
            *(_QWORD *)v15 = v16;
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          if (*(float *)(v9 - 8) >= *(float *)v9)
          {
            result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,xgboost_old::utils::WQSummary<float,float>::Queue::QEntry *,std::__less<void,void> &>((float *)v9, a2);
            v9 = result;
            goto LABEL_17;
          }
LABEL_12:
          v17 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,xgboost_old::utils::WQSummary<float,float>::Queue::QEntry *,std::__less<void,void> &>((float *)v9, a2);
          if ((v18 & 1) == 0)
            goto LABEL_15;
          v19 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,xgboost_old::utils::WQSummary<float,float>::Queue::QEntry *>(v9, (uint64_t)v17);
          v9 = (uint64_t)(v17 + 2);
          result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,xgboost_old::utils::WQSummary<float,float>::Queue::QEntry *>((uint64_t)(v17 + 2), (uint64_t)a2);
          if (!(_DWORD)result)
          {
            v10 = v11 + 1;
            if (v19)
              continue;
LABEL_15:
            result = std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,xgboost_old::utils::WQSummary<float,float>::Queue::QEntry *,false>(v8, v17, a3, -v11, a5 & 1);
            v9 = (uint64_t)(v17 + 2);
LABEL_17:
            a5 = 0;
            a4 = -v11;
            goto LABEL_3;
          }
          a4 = -v11;
          a2 = v17;
          if (v19)
            return result;
          goto LABEL_2;
        }
        if ((a5 & 1) != 0)
          return std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,xgboost_old::utils::WQSummary<float,float>::Queue::QEntry *>(v9, (uint64_t)a2);
        if ((float *)v9 != a2)
        {
          v21 = (float *)(v9 + 8);
          while (v21 != a2)
          {
            v22 = v21;
            v23 = *(float *)(v8 + 8);
            if (v23 < *(float *)v8)
            {
              v24 = *(_DWORD *)(v8 + 12);
              v25 = v22;
              do
              {
                v26 = v25;
                v27 = *((_QWORD *)v25 - 1);
                v25 -= 2;
                *(_QWORD *)v26 = v27;
              }
              while (*(v26 - 4) > v23);
              *v25 = v23;
              *((_DWORD *)v25 + 1) = v24;
            }
            v21 = v22 + 2;
            v8 = (uint64_t)v22;
          }
        }
        return result;
    }
  }
}

uint64_t std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,xgboost_old::utils::WQSummary<float,float>::Queue::QEntry *>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  float v6;
  int v7;
  uint64_t v8;
  float v9;
  uint64_t v10;

  if (result != a2)
  {
    v2 = result + 8;
    if (result + 8 != a2)
    {
      v3 = 0;
      v4 = result;
      do
      {
        v5 = v2;
        v6 = *(float *)(v4 + 8);
        if (v6 < *(float *)v4)
        {
          v7 = *(_DWORD *)(v4 + 12);
          v8 = v3;
          while (1)
          {
            *(_QWORD *)(result + v8 + 8) = *(_QWORD *)(result + v8);
            if (!v8)
              break;
            v9 = *(float *)(result + v8 - 8);
            v8 -= 8;
            if (v9 <= v6)
            {
              v10 = result + v8 + 8;
              goto LABEL_10;
            }
          }
          v10 = result;
LABEL_10:
          *(float *)v10 = v6;
          *(_DWORD *)(v10 + 4) = v7;
        }
        v2 = v5 + 8;
        v3 += 8;
        v4 = v5;
      }
      while (v5 + 8 != a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,xgboost_old::utils::WQSummary<float,float>::Queue::QEntry *>(float *a1, float *a2, float *a3)
{
  float v3;
  float v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *a2;
  v4 = *a3;
  if (*a2 < *a1)
  {
    v5 = *(_QWORD *)a1;
    if (v4 < v3)
    {
      *(_QWORD *)a1 = *(_QWORD *)a3;
      *(_QWORD *)a3 = v5;
      return 1;
    }
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)a2 = v5;
    if (*a3 >= *(float *)&v5)
      return 1;
    *(_QWORD *)a2 = *(_QWORD *)a3;
    *(_QWORD *)a3 = v5;
    return 2;
  }
  if (v4 < v3)
  {
    v6 = *(_QWORD *)a2;
    *(_QWORD *)a2 = *(_QWORD *)a3;
    *(_QWORD *)a3 = v6;
    if (*a2 >= *a1)
      return 1;
    v7 = *(_QWORD *)a1;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)a2 = v7;
    return 2;
  }
  return 0;
}

float *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,xgboost_old::utils::WQSummary<float,float>::Queue::QEntry *,std::__less<void,void> &>(float *a1, float *a2)
{
  uint64_t v2;
  float *v3;
  float v4;
  float *v5;
  float v6;
  uint64_t v7;
  float v8;
  float v9;

  v2 = *(_QWORD *)a1;
  if (*(a2 - 2) <= COERCE_FLOAT(*(_QWORD *)a1))
  {
    v5 = a1 + 2;
    do
    {
      v3 = v5;
      if (v5 >= a2)
        break;
      v5 += 2;
    }
    while (*v3 <= *(float *)&v2);
  }
  else
  {
    v3 = a1;
    do
    {
      v4 = v3[2];
      v3 += 2;
    }
    while (v4 <= *(float *)&v2);
  }
  if (v3 < a2)
  {
    do
    {
      v6 = *(a2 - 2);
      a2 -= 2;
    }
    while (v6 > *(float *)&v2);
  }
  while (v3 < a2)
  {
    v7 = *(_QWORD *)v3;
    *(_QWORD *)v3 = *(_QWORD *)a2;
    *(_QWORD *)a2 = v7;
    do
    {
      v8 = v3[2];
      v3 += 2;
    }
    while (v8 <= *(float *)&v2);
    do
    {
      v9 = *(a2 - 2);
      a2 -= 2;
    }
    while (v9 > *(float *)&v2);
  }
  if (v3 - 2 != a1)
    *(_QWORD *)a1 = *((_QWORD *)v3 - 1);
  *((_QWORD *)v3 - 1) = v2;
  return v3;
}

float *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,xgboost_old::utils::WQSummary<float,float>::Queue::QEntry *,std::__less<void,void> &>(float *a1, float *a2)
{
  uint64_t v2;
  uint64_t v3;
  float v4;
  float *v5;
  float *v6;
  float v7;
  float v8;
  float *v9;
  float *v10;
  uint64_t v11;
  float v12;
  float v13;

  v2 = 0;
  v3 = *(_QWORD *)a1;
  do
  {
    v4 = a1[v2 + 2];
    v2 += 2;
  }
  while (v4 < *(float *)&v3);
  v5 = &a1[v2];
  v6 = &a1[v2 - 2];
  if (v2 == 2)
  {
    do
    {
      if (v5 >= a2)
        break;
      v8 = *(a2 - 2);
      a2 -= 2;
    }
    while (v8 >= *(float *)&v3);
  }
  else
  {
    do
    {
      v7 = *(a2 - 2);
      a2 -= 2;
    }
    while (v7 >= *(float *)&v3);
  }
  if (v5 < a2)
  {
    v9 = &a1[v2];
    v10 = a2;
    do
    {
      v11 = *(_QWORD *)v9;
      *(_QWORD *)v9 = *(_QWORD *)v10;
      *(_QWORD *)v10 = v11;
      do
      {
        v12 = v9[2];
        v9 += 2;
      }
      while (v12 < *(float *)&v3);
      do
      {
        v13 = *(v10 - 2);
        v10 -= 2;
      }
      while (v13 >= *(float *)&v3);
    }
    while (v9 < v10);
    v6 = v9 - 2;
  }
  if (v6 != a1)
    *(_QWORD *)a1 = *(_QWORD *)v6;
  *(_QWORD *)v6 = v3;
  return v6;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,xgboost_old::utils::WQSummary<float,float>::Queue::QEntry *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  float *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  float v11;
  int v12;
  uint64_t v13;
  float v14;
  uint64_t v15;

  v4 = (a2 - a1) >> 3;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(float *)(a2 - 8) < *(float *)a1)
      {
        v6 = *(_QWORD *)a1;
        *(_QWORD *)a1 = *(_QWORD *)(a2 - 8);
        *(_QWORD *)(a2 - 8) = v6;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,xgboost_old::utils::WQSummary<float,float>::Queue::QEntry *>((float *)a1, (float *)(a1 + 8), (float *)(a2 - 8));
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,xgboost_old::utils::WQSummary<float,float>::Queue::QEntry *>((float *)a1, (float *)(a1 + 8), (float *)(a1 + 16), (_QWORD *)(a2 - 8));
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,xgboost_old::utils::WQSummary<float,float>::Queue::QEntry *>((float *)a1, (float *)(a1 + 8), (float *)(a1 + 16), (uint64_t *)(a1 + 24), (uint64_t *)(a2 - 8));
      return 1;
    default:
      v7 = (float *)(a1 + 16);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,xgboost_old::utils::WQSummary<float,float>::Queue::QEntry *>((float *)a1, (float *)(a1 + 8), (float *)(a1 + 16));
      v8 = a1 + 24;
      if (a1 + 24 == a2)
        return 1;
      v9 = 0;
      v10 = 0;
      break;
  }
  while (1)
  {
    v11 = *(float *)v8;
    if (*(float *)v8 < *v7)
    {
      v12 = *(_DWORD *)(v8 + 4);
      v13 = v9;
      while (1)
      {
        *(_QWORD *)(a1 + v13 + 24) = *(_QWORD *)(a1 + v13 + 16);
        if (v13 == -16)
          break;
        v14 = *(float *)(a1 + v13 + 8);
        v13 -= 8;
        if (v14 <= v11)
        {
          v15 = a1 + v13 + 24;
          goto LABEL_12;
        }
      }
      v15 = a1;
LABEL_12:
      *(float *)v15 = v11;
      *(_DWORD *)(v15 + 4) = v12;
      if (++v10 == 8)
        return v8 + 8 == a2;
    }
    v7 = (float *)v8;
    v9 += 8;
    v8 += 8;
    if (v8 == a2)
      return 1;
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,xgboost_old::utils::WQSummary<float,float>::Queue::QEntry *>(float *a1, float *a2, float *a3, _QWORD *a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,xgboost_old::utils::WQSummary<float,float>::Queue::QEntry *>(a1, a2, a3);
  if (*(float *)a4 < *a3)
  {
    v9 = *(_QWORD *)a3;
    *(_QWORD *)a3 = *a4;
    *a4 = v9;
    if (*a3 < *a2)
    {
      v10 = *(_QWORD *)a2;
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *(_QWORD *)a3 = v10;
      if (*a2 < *a1)
      {
        v11 = *(_QWORD *)a1;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_QWORD *)a2 = v11;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,xgboost_old::utils::WQSummary<float,float>::Queue::QEntry *>(float *a1, float *a2, float *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,xgboost_old::utils::WQSummary<float,float>::Queue::QEntry *>(a1, a2, a3, a4);
  if (*(float *)a5 < *(float *)a4)
  {
    v11 = *a4;
    *a4 = *a5;
    *a5 = v11;
    if (*(float *)a4 < *a3)
    {
      v12 = *(_QWORD *)a3;
      *(_QWORD *)a3 = *a4;
      *a4 = v12;
      if (*a3 < *a2)
      {
        v13 = *(_QWORD *)a2;
        *(_QWORD *)a2 = *(_QWORD *)a3;
        *(_QWORD *)a3 = v13;
        if (*a2 < *a1)
        {
          v14 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *(_QWORD *)a2;
          *(_QWORD *)a2 = v14;
        }
      }
    }
  }
  return result;
}

float *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,xgboost_old::utils::WQSummary<float,float>::Queue::QEntry *,xgboost_old::utils::WQSummary<float,float>::Queue::QEntry *>(float *a1, float *a2, float *a3, uint64_t a4)
{
  float *v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  float *v12;
  float *v13;
  float *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  float *v19;
  float *v20;
  uint64_t v21;
  uint64_t v22;

  if (a1 != a2)
  {
    v6 = a2;
    v8 = (char *)a2 - (char *)a1;
    v9 = ((char *)a2 - (char *)a1) >> 3;
    if ((char *)a2 - (char *)a1 >= 9)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[2 * v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,xgboost_old::utils::WQSummary<float,float>::Queue::QEntry *>((uint64_t)a1, a4, v9, v12);
        v12 -= 2;
        --v11;
      }
      while (v11);
    }
    v13 = v6;
    if (v6 != a3)
    {
      v14 = v6;
      do
      {
        if (*v14 < *a1)
        {
          v15 = *(_QWORD *)v14;
          *(_QWORD *)v14 = *(_QWORD *)a1;
          *(_QWORD *)a1 = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,xgboost_old::utils::WQSummary<float,float>::Queue::QEntry *>((uint64_t)a1, a4, v9, a1);
        }
        v14 += 2;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 9)
    {
      v16 = (unint64_t)v8 >> 3;
      do
      {
        v17 = 0;
        v18 = *(_QWORD *)a1;
        v19 = a1;
        do
        {
          v20 = v19;
          v19 += 2 * v17 + 2;
          v21 = 2 * v17;
          v17 = (2 * v17) | 1;
          v22 = v21 + 2;
          if (v22 < v16 && *v19 < v19[2])
          {
            v19 += 2;
            v17 = v22;
          }
          *(_QWORD *)v20 = *(_QWORD *)v19;
        }
        while (v17 <= (uint64_t)((unint64_t)(v16 - 2) >> 1));
        v6 -= 2;
        if (v19 == v6)
        {
          *(_QWORD *)v19 = v18;
        }
        else
        {
          *(_QWORD *)v19 = *(_QWORD *)v6;
          *(_QWORD *)v6 = v18;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,xgboost_old::utils::WQSummary<float,float>::Queue::QEntry *>((uint64_t)a1, (uint64_t)(v19 + 2), a4, ((char *)(v19 + 2) - (char *)a1) >> 3);
        }
      }
      while (v16-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,xgboost_old::utils::WQSummary<float,float>::Queue::QEntry *>(uint64_t result, uint64_t a2, uint64_t a3, float *a4)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  float *v8;
  uint64_t v9;
  float v10;
  int v11;
  float *v12;
  uint64_t v13;
  uint64_t v14;

  if (a3 >= 2)
  {
    v4 = (uint64_t)a4 - result;
    v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 3)
    {
      v6 = v4 >> 2;
      v7 = (v4 >> 2) + 1;
      v8 = (float *)(result + 8 * v7);
      v9 = v6 + 2;
      if (v9 < a3 && *v8 < v8[2])
      {
        v8 += 2;
        v7 = v9;
      }
      v10 = *a4;
      if (*v8 >= *a4)
      {
        v11 = *((_DWORD *)a4 + 1);
        do
        {
          v12 = a4;
          a4 = v8;
          *(_QWORD *)v12 = *(_QWORD *)v8;
          if (v5 < v7)
            break;
          v13 = 2 * v7;
          v7 = (2 * v7) | 1;
          v8 = (float *)(result + 8 * v7);
          v14 = v13 + 2;
          if (v14 < a3 && *v8 < v8[2])
          {
            v8 += 2;
            v7 = v14;
          }
        }
        while (*v8 >= v10);
        *a4 = v10;
        *((_DWORD *)a4 + 1) = v11;
      }
    }
  }
  return result;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,xgboost_old::utils::WQSummary<float,float>::Queue::QEntry *>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  float v8;
  int v9;
  _QWORD *v10;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v5 = v4 >> 1;
    v6 = (_QWORD *)(result + 8 * (v4 >> 1));
    v7 = (_QWORD *)(a2 - 8);
    v8 = *(float *)(a2 - 8);
    if (*(float *)v6 < v8)
    {
      v9 = *(_DWORD *)(a2 - 4);
      do
      {
        v10 = v7;
        v7 = v6;
        *v10 = *v6;
        if (!v5)
          break;
        v5 = (v5 - 1) >> 1;
        v6 = (_QWORD *)(result + 8 * v5);
      }
      while (*(float *)v6 < v8);
      *(float *)v7 = v8;
      *((_DWORD *)v7 + 1) = v9;
    }
  }
  return result;
}

void rabit::TrackerPrintf(rabit *this, const char *a2, ...)
{
  size_t v3;
  rabit::engine *v4;
  uint64_t *Engine;
  std::string v6;
  va_list va;

  va_start(va, a2);
  v6.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x408uLL);
  *(_OWORD *)&v6.__r_.__value_.__r.__words[1] = xmmword_2186FD500;
  bzero(v6.__r_.__value_.__l.__data_, 0x401uLL);
  vsnprintf(v6.__r_.__value_.__l.__data_, 0x400uLL, (const char *)this, va);
  v3 = strlen(v6.__r_.__value_.__l.__data_);
  std::string::resize(&v6, v3, 0);
  Engine = rabit::engine::GetEngine(v4);
  (*(void (**)(uint64_t *, std::string *))(*Engine + 88))(Engine, &v6);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
}

void sub_2183DD1F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::ResetPosAndPropose(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<unsigned int> const&,xgboost_old::tree::RegTree const&)::{lambda(void)#1}::operator() const(void)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::ResetPosAndPropose(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<unsigned int> const&,xgboost_old::tree::RegTree const&)::{lambda(void)#1}::operator() const(void)::{lambda(unsigned long)#1} const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v4;
  __int128 v5;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x80000002186FC76ELL & 0x7FFFFFFFFFFFFFFFLL)
        || (result = strcmp((const char *)result, (const char *)(0x80000002186FC76ELL & 0x7FFFFFFFFFFFFFFFLL)),
            !(_DWORD)result))
      {
        *(_QWORD *)a2 = v4;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
    }
  }
  else
  {
    v5 = *(_OWORD *)result;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

void boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::ResetPosAndPropose(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<unsigned int> const&,xgboost_old::tree::RegTree const&)::{lambda(void)#1}::operator() const(void)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::ResetPosAndPropose(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<unsigned int> const&,xgboost_old::tree::RegTree const&)::{lambda(void)#1}::operator() const(void)::{lambda(unsigned long)#1} const&)::{lambda(void)#1},void>::invoke(turi::thread *tls_data)
{
  unint64_t v1;
  turi::thread *v2;
  uint64_t v3;
  _QWORD **v4;
  _QWORD *v5;
  unsigned int v6;
  int v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[2];

  v1 = *((_QWORD *)tls_data + 1);
  if (v1 < *((_QWORD *)tls_data + 2))
  {
    v2 = tls_data;
    v3 = 16 * v1;
    do
    {
      v4 = *(_QWORD ***)v2;
      v5 = **(_QWORD ***)v2;
      v6 = *(_DWORD *)(v5[38] + 4 * *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v2 + 8) + 8) + 4 * v1));
      tls_data = (turi::thread *)turi::thread::get_tls_data(tls_data);
      if ((v6 & 0x80000000) == 0)
      {
        v7 = *(_DWORD *)tls_data;
        v8 = v4[2];
        v9 = (uint64_t *)(v4[1][2] + v3);
        v11 = *v9;
        v10 = v9[1];
        v12[0] = v11;
        v12[1] = v10;
        xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::UpdateSketchCol((uint64_t)v5, v8, v12, (uint64_t)v4[3], v5 + 53, v5 + 41, v6, *v4[4] == v10, (uint64_t *)(v5[44] + 24 * v7));
      }
      ++v1;
      v3 += 16;
    }
    while (v1 < *((_QWORD *)v2 + 2));
  }
}

uint64_t xgboost_old::tree::BaseMaker::FMetaHelper::InitByCol(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  float v17;
  unsigned int v18;
  float *v19;
  uint64_t v20;
  unsigned int v21;
  float v22;
  uint64_t v23;
  void *v24;

  std::vector<float>::resize(a1, 2 * *(int *)(a3 + 112));
  v5 = *(_QWORD *)(a1 + 8) - *(_QWORD *)a1;
  if (v5 >= 1)
    memset_pattern16(*(void **)a1, &unk_2186FD510, 4 * (((unint64_t)v5 >> 2) - ((unint64_t)v5 > 3)) + 4);
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 8))(a2);
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
  while ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6))
  {
    v7 = (unint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
    v8 = *v7;
    if (*v7)
    {
      v9 = 0;
      v10 = v7[1];
      v11 = v7[2] + 8;
      v12 = (uint64_t *)v11;
      do
      {
        v14 = *v12;
        v12 += 2;
        v13 = v14;
        if ((_DWORD)v14)
        {
          v15 = *(_QWORD *)(v11 - 8);
          v16 = *(_DWORD *)(v10 + 4 * v9);
          v17 = -*(float *)(v15 + 4);
          v18 = 2 * v16;
          v19 = *(float **)a1;
          if (*(float *)(*(_QWORD *)a1 + 4 * (2 * v16)) > v17)
            v17 = *(float *)(*(_QWORD *)a1 + 4 * v18);
          v19[v18] = v17;
          v20 = v15 + 8 * (v13 - 1);
          v21 = (2 * v16) | 1;
          v22 = *(float *)(v20 + 4);
          if (v22 < v19[v21])
            v22 = v19[v21];
          v19[v21] = v22;
        }
        ++v9;
        v11 = (uint64_t)v12;
      }
      while (v8 > v9);
    }
  }
  v23 = *(_QWORD *)(a1 + 8) - *(_QWORD *)a1;
  if (v23)
    v24 = *(void **)a1;
  else
    v24 = 0;
  return rabit::engine::Allreduce_((uint64_t)v24, 4, v23 >> 2, (uint64_t)rabit::op::Reducer<rabit::op::Max,float>, 6, 0, 0, 0);
}

void xgboost_old::tree::BaseMaker::FMetaHelper::SampleCol(uint64_t *a1, std::vector<unsigned int> *a2, const char *a3, float a4)
{
  std::vector<unsigned int>::pointer begin;
  uint64_t v7;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int *value;
  std::vector<unsigned int>::pointer end;
  unsigned int *v15;
  std::vector<unsigned int>::pointer v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  unsigned int *v22;
  unsigned int v23;
  std::vector<unsigned int>::pointer v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  BOOL v29;
  unsigned int v30;
  unsigned int v31;
  std::vector<unsigned int>::size_type v32;
  rabit::engine *v33;
  uint64_t *Engine;
  char *v35;
  std::string::size_type size;
  uint64_t *v37;
  rabit::engine *v38;
  std::string::size_type v39;
  int v40;
  std::string::size_type v41;
  uint64_t *v42;
  std::string *v43;
  std::string::size_type v44;
  _QWORD v45[3];
  std::string v46;
  std::string::size_type __n;

  begin = a2->__begin_;
  a2->__end_ = a2->__begin_;
  v7 = a1[1] - *a1;
  if (v7)
  {
    v9 = 0;
    v10 = v7 >> 2;
    do
    {
      v11 = v9 >> 1;
      xgboost_old::utils::Assert(v10 > ((2 * (v9 >> 1)) | 1), "FeatHelper fid exceed query bound ", a3);
      v12 = *a1;
      if (*(float *)(*a1 + 8 * (v9 >> 1)) != -3.4028e38)
      {
        end = a2->__end_;
        value = a2->__end_cap_.__value_;
        if (end >= value)
        {
          v16 = a2->__begin_;
          v17 = end - a2->__begin_;
          v18 = v17 + 1;
          if ((unint64_t)(v17 + 1) >> 62)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          v19 = (char *)value - (char *)v16;
          if (v19 >> 1 > v18)
            v18 = v19 >> 1;
          if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL)
            v20 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v20 = v18;
          if (v20)
          {
            v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&a2->__end_cap_, v20);
            v16 = a2->__begin_;
            end = a2->__end_;
          }
          else
          {
            v21 = 0;
          }
          v22 = (unsigned int *)&v21[4 * v17];
          *v22 = v11;
          v15 = v22 + 1;
          while (end != v16)
          {
            v23 = *--end;
            *--v22 = v23;
          }
          a2->__begin_ = v22;
          a2->__end_ = v15;
          a2->__end_cap_.__value_ = (unsigned int *)&v21[4 * v20];
          if (v16)
            operator delete(v16);
        }
        else
        {
          *end = v11;
          v15 = end + 1;
        }
        a2->__end_ = v15;
        v12 = *a1;
      }
      v9 += 2;
      v10 = (a1[1] - v12) >> 2;
    }
    while (v9 < v10);
    begin = a2->__begin_;
    v24 = a2->__end_;
  }
  else
  {
    v24 = begin;
  }
  v25 = (unint64_t)((char *)v24 - (char *)begin) >> 2;
  v26 = (v25 - 1);
  v27 = (char *)v24 - (char *)begin;
  v28 = (float)((float)(unint64_t)(v27 >> 2) * a4);
  if (v27)
    v29 = (_DWORD)v25 == 1;
  else
    v29 = 1;
  if (!v29)
  {
    do
    {
      v30 = vcvtmd_u64_f64((double)rand() * 4.65661287e-10 * (double)v25);
      v31 = begin[v26];
      begin[v26] = begin[v30];
      begin[v30] = v31;
      LODWORD(v25) = v25 - 1;
      --v26;
    }
    while ((_DWORD)v26);
  }
  if (v28 <= 1)
    v32 = 1;
  else
    v32 = v28;
  std::vector<int>::resize(a2, v32);
  memset(&v46, 0, sizeof(v46));
  v45[0] = &unk_24D93E360;
  v45[1] = &v46;
  v45[2] = 0;
  Engine = rabit::engine::GetEngine(v33);
  v35 = (char *)(*(uint64_t (**)(uint64_t *))(*Engine + 56))(Engine);
  if (!(_DWORD)v35)
  {
    __n = a2->__end_ - a2->__begin_;
    v35 = rabit::utils::MemoryBufferStream::Write((char *)v45, &__n, 8uLL);
    if (__n)
      v35 = (char *)(*(uint64_t (**)(_QWORD *, std::vector<unsigned int>::pointer, int64_t))(v45[0] + 8))(v45, a2->__begin_, (char *)a2->__end_ - (char *)a2->__begin_);
  }
  size = HIBYTE(v46.__r_.__value_.__r.__words[2]);
  if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v46.__r_.__value_.__l.__size_;
  __n = size;
  v37 = rabit::engine::GetEngine((rabit::engine *)v35);
  v38 = (rabit::engine *)(*(uint64_t (**)(uint64_t *, std::string::size_type *, uint64_t, _QWORD))(*v37 + 8))(v37, &__n, 8, 0);
  if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v39 = HIBYTE(v46.__r_.__value_.__r.__words[2]);
  else
    v39 = v46.__r_.__value_.__l.__size_;
  if (v39 != __n)
  {
    std::string::resize(&v46, __n, 0);
    v39 = __n;
  }
  if (v39)
  {
    v40 = SHIBYTE(v46.__r_.__value_.__r.__words[2]);
    v41 = v46.__r_.__value_.__r.__words[0];
    v42 = rabit::engine::GetEngine(v38);
    if (v40 >= 0)
      v43 = &v46;
    else
      v43 = (std::string *)v41;
    (*(void (**)(uint64_t *, std::string *, std::string::size_type, _QWORD))(*v42 + 8))(v42, v43, v39, 0);
  }
  __n = 0;
  if ((*(uint64_t (**)(_QWORD *, std::string::size_type *, uint64_t))v45[0])(v45, &__n, 8))
  {
    v44 = __n;
    std::vector<int>::resize(a2, __n);
    if (__n)
      (*(void (**)(_QWORD *, std::vector<unsigned int>::pointer, std::string::size_type))v45[0])(v45, a2->__begin_, 4 * v44);
  }
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v46.__r_.__value_.__l.__data_);
}

void sub_2183DD83C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

float *rabit::op::Reducer<rabit::op::Max,float>(float *result, float *a2, int a3)
{
  uint64_t v3;

  if (a3 >= 1)
  {
    v3 = a3;
    do
    {
      if (*a2 < *result)
        *a2 = *result;
      ++result;
      ++a2;
      --v3;
    }
    while (v3);
  }
  return result;
}

void turi::parallel_for<xgboost_old::tree::BaseMaker::ResetPositionCol(std::vector<int> const&,xgboost_old::IFMatrix *,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#1}>(turi::thread_pool *a1, unint64_t a2, uint64_t a3)
{
  turi::thread_pool *instance;
  turi::thread *v7;
  turi::thread_pool *tls_data;
  BOOL v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  turi::thread_pool *v21;
  uint64_t v22;
  double v23;
  double v24;
  turi::thread *v25;
  unint64_t v26;
  uint64_t v27[4];
  _BYTE v28[192];
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  instance = (turi::thread_pool *)turi::thread_pool::get_instance(a1);
  v7 = (turi::thread *)turi::thread_pool::size(instance);
  tls_data = (turi::thread_pool *)turi::thread::get_tls_data(v7);
  if (*((_BYTE *)tls_data + 8))
    v9 = 0;
  else
    v9 = (unint64_t)v7 > 1;
  if (v9)
  {
    v21 = (turi::thread_pool *)turi::thread_pool::get_instance(tls_data);
    turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)v28, v21);
    v22 = 0;
    v23 = (double)(a2 - (unint64_t)a1) / (double)(unint64_t)v7;
    v24 = (double)(unint64_t)a1;
    do
    {
      v25 = (turi::thread *)(v22 + 1);
      v26 = (unint64_t)(v24 + v23 * (double)(unint64_t)(v22 + 1));
      if ((turi::thread *)v22 == (turi::thread *)((char *)v7 - 1))
        v26 = a2;
      v27[2] = (unint64_t)(v24 + v23 * (double)(unint64_t)v22);
      v27[3] = v26;
      v27[0] = (uint64_t)boost::function0<void>::assign_to<void turi::parallel_for<xgboost_old::tree::BaseMaker::ResetPositionCol(std::vector<int> const&,xgboost_old::IFMatrix *,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::tree::BaseMaker::ResetPositionCol(std::vector<int> const&,xgboost_old::IFMatrix *,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#1} const&)::{lambda(void)#1}>(xgboost_old::tree::BaseMaker::ResetPositionCol(std::vector<int> const&,xgboost_old::IFMatrix *,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#1})::stored_vtable
             + 1;
      v27[1] = a3;
      turi::parallel_task_queue::launch((uint64_t)v28, (uint64_t)v27, v22);
      boost::function0<void>::~function0(v27);
      v22 = (uint64_t)v25;
    }
    while (v25 != v7);
    turi::parallel_task_queue::join((turi::parallel_task_queue *)v28);
    turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)v28);
  }
  else
  {
    v10 = a2 - (_QWORD)a1;
    if (a2 > (unint64_t)a1)
    {
      v11 = *(_QWORD *)(*(_QWORD *)(a3 + 8) + 128);
      v12 = **(_QWORD **)(a3 + 16);
      v13 = (unsigned int *)(**(_QWORD **)a3 + 4 * (_QWORD)a1);
      while (1)
      {
        v15 = *v13++;
        v14 = v15;
        v16 = *(_DWORD *)(v11 + 4 * v15);
        v17 = v16 ^ (v16 >> 31);
        v18 = *(_DWORD *)(v12 + 20 * v17 + 4);
        if (v18 != -1)
          break;
        if (*(_DWORD *)(v12 + 20 * (int)v17 + 8) == -1)
        {
          v20 = ~(_DWORD)v17;
LABEL_13:
          *(_DWORD *)(v11 + 4 * v14) = v20;
        }
        if (!--v10)
          return;
      }
      v19 = v16 >> 31;
      if ((*(_DWORD *)(v12 + 20 * (int)v17 + 12) & 0x80000000) != 0)
        v20 = v18 ^ v19;
      else
        v20 = *(_DWORD *)(v12 + 20 * (int)v17 + 8) ^ v19;
      goto LABEL_13;
    }
  }
}

void sub_2183DDA48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)va);
  _Unwind_Resume(a1);
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<xgboost_old::tree::BaseMaker::ResetPositionCol(std::vector<int> const&,xgboost_old::IFMatrix *,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::tree::BaseMaker::ResetPositionCol(std::vector<int> const&,xgboost_old::IFMatrix *,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#1} const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v4;
  __int128 v5;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x80000002186FC92DLL & 0x7FFFFFFFFFFFFFFFLL)
        || (result = strcmp((const char *)result, (const char *)(0x80000002186FC92DLL & 0x7FFFFFFFFFFFFFFFLL)),
            !(_DWORD)result))
      {
        *(_QWORD *)a2 = v4;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
    }
  }
  else
  {
    v5 = *(_OWORD *)result;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

_QWORD *boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<xgboost_old::tree::BaseMaker::ResetPositionCol(std::vector<int> const&,xgboost_old::IFMatrix *,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::tree::BaseMaker::ResetPositionCol(std::vector<int> const&,xgboost_old::IFMatrix *,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#1} const&)::{lambda(void)#1},void>::invoke(_QWORD *result)
{
  unint64_t v1;
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;

  v2 = result[1];
  v1 = result[2];
  v3 = v1 > v2;
  v4 = v1 - v2;
  if (v3)
  {
    v5 = *(_QWORD *)(*(_QWORD *)(*result + 8) + 128);
    v6 = **(_QWORD **)(*result + 16);
    v7 = (unsigned int *)(**(_QWORD **)*result + 4 * v2);
    while (1)
    {
      v9 = *v7++;
      v8 = v9;
      v10 = *(_DWORD *)(v5 + 4 * v9);
      v11 = v10 ^ (v10 >> 31);
      v12 = *(_DWORD *)(v6 + 20 * v11 + 4);
      if (v12 != -1)
        break;
      if (*(_DWORD *)(v6 + 20 * (int)v11 + 8) == -1)
      {
        v14 = ~(_DWORD)v11;
LABEL_10:
        *(_DWORD *)(v5 + 4 * v8) = v14;
      }
      if (!--v4)
        return result;
    }
    v13 = v10 >> 31;
    if ((*(_DWORD *)(v6 + 20 * (int)v11 + 12) & 0x80000000) != 0)
      v14 = v12 ^ v13;
    else
      v14 = *(_DWORD *)(v6 + 20 * (int)v11 + 8) ^ v13;
    goto LABEL_10;
  }
  return result;
}

void std::vector<xgboost_old::tree::HistMaker<xgboost_old::tree::GradStats>::HistSet,std::allocator<xgboost_old::tree::HistMaker<xgboost_old::tree::GradStats>::HistSet>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  void *v8;

  v3 = a1[1];
  v4 = 0xCCCCCCCCCCCCCCCDLL * ((v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<xgboost_old::tree::HistMaker<xgboost_old::tree::GradStats>::HistSet,std::allocator<xgboost_old::tree::HistMaker<xgboost_old::tree::GradStats>::HistSet>>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 40 * a2;
    while (v3 != v7)
    {
      v8 = *(void **)(v3 - 24);
      if (v8)
      {
        *(_QWORD *)(v3 - 16) = v8;
        operator delete(v8);
      }
      v3 -= 40;
    }
    a1[1] = v7;
  }
}

void std::vector<xgboost_old::tree::HistMaker<xgboost_old::tree::GradStats>::HistSet,std::allocator<xgboost_old::tree::HistMaker<xgboost_old::tree::GradStats>::HistSet>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  size_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0xCCCCCCCCCCCCCCCDLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = 40 * ((40 * a2 - 40) / 0x28) + 40;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xCCCCCCCCCCCCCCCDLL * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0x666666666666666)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x333333333333333)
      v11 = 0x666666666666666;
    else
      v11 = v9;
    v19 = v4;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,turi::flexible_type>>>(v4, v11);
    else
      v12 = 0;
    v15 = v12;
    v16 = &v12[40 * v8];
    v18 = &v12[40 * v11];
    v14 = 40 * ((40 * a2 - 40) / 0x28) + 40;
    bzero(v16, v14);
    v17 = &v16[v14];
    std::vector<xgboost_old::tree::HistMaker<xgboost_old::tree::GradStats>::HistSet,std::allocator<xgboost_old::tree::HistMaker<xgboost_old::tree::GradStats>::HistSet>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<xgboost_old::utils::QuantileSketchTemplate<float,float,xgboost_old::utils::WXQSummary<float,float>>::SummaryContainer,std::allocator<xgboost_old::utils::QuantileSketchTemplate<float,float,xgboost_old::utils::WXQSummary<float,float>>::SummaryContainer> &>::~__split_buffer((uint64_t)&v15);
  }
}

void sub_2183DDD8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<xgboost_old::utils::QuantileSketchTemplate<float,float,xgboost_old::utils::WXQSummary<float,float>>::SummaryContainer,std::allocator<xgboost_old::utils::QuantileSketchTemplate<float,float,xgboost_old::utils::WXQSummary<float,float>>::SummaryContainer> &>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<xgboost_old::tree::HistMaker<xgboost_old::tree::GradStats>::HistSet,std::allocator<xgboost_old::tree::HistMaker<xgboost_old::tree::GradStats>::HistSet>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<xgboost_old::tree::HistMaker<xgboost_old::tree::GradStats>::HistSet>,std::reverse_iterator<xgboost_old::tree::HistMaker<xgboost_old::tree::GradStats>::HistSet*>,std::reverse_iterator<xgboost_old::tree::HistMaker<xgboost_old::tree::GradStats>::HistSet*>,std::reverse_iterator<xgboost_old::tree::HistMaker<xgboost_old::tree::GradStats>::HistSet*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<xgboost_old::tree::HistMaker<xgboost_old::tree::GradStats>::HistSet>,std::reverse_iterator<xgboost_old::tree::HistMaker<xgboost_old::tree::GradStats>::HistSet*>,std::reverse_iterator<xgboost_old::tree::HistMaker<xgboost_old::tree::GradStats>::HistSet*>,std::reverse_iterator<xgboost_old::tree::HistMaker<xgboost_old::tree::GradStats>::HistSet*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[3];
  char v11;
  __int128 v12;
  __int128 v13;

  v7 = a7;
  *(_QWORD *)&v13 = a6;
  *((_QWORD *)&v13 + 1) = a7;
  v12 = v13;
  v10[0] = a1;
  v10[1] = &v12;
  v10[2] = &v13;
  if (a3 == a5)
  {
    v8 = a6;
  }
  else
  {
    do
    {
      *(_OWORD *)(v7 - 40) = *(_OWORD *)(a3 - 40);
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      *(_QWORD *)(v7 - 24) = 0;
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(a3 - 24);
      *(_QWORD *)(v7 - 8) = *(_QWORD *)(a3 - 8);
      *(_QWORD *)(a3 - 24) = 0;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 8) = 0;
      v7 = *((_QWORD *)&v13 + 1) - 40;
      *((_QWORD *)&v13 + 1) -= 40;
      a3 -= 40;
    }
    while (a3 != a5);
    v8 = v13;
  }
  v11 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<xgboost_old::tree::HistMaker<xgboost_old::tree::GradStats>::HistSet>,std::reverse_iterator<xgboost_old::tree::HistMaker<xgboost_old::tree::GradStats>::HistSet*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v10);
  return v8;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<xgboost_old::tree::HistMaker<xgboost_old::tree::GradStats>::HistSet>,std::reverse_iterator<xgboost_old::tree::HistMaker<xgboost_old::tree::GradStats>::HistSet*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<xgboost_old::utils::QuantileSketchTemplate<float,float,xgboost_old::utils::WXQSummary<float,float>>::SummaryContainer>,std::reverse_iterator<xgboost_old::utils::QuantileSketchTemplate<float,float,xgboost_old::utils::WXQSummary<float,float>>::SummaryContainer*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::__function::__func<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::CreateHist(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<unsigned int> const&,xgboost_old::tree::RegTree const&)::{lambda(void)#1},std::allocator<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::CreateHist(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<unsigned int> const&,xgboost_old::tree::RegTree const&)::{lambda(void)#1}>,void ()(void)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

__n128 std::__function::__func<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::CreateHist(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<unsigned int> const&,xgboost_old::tree::RegTree const&)::{lambda(void)#1},std::allocator<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::CreateHist(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<unsigned int> const&,xgboost_old::tree::RegTree const&)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x38uLL);
  *(_QWORD *)v2 = &unk_24D93EB28;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 std::__function::__func<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::CreateHist(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<unsigned int> const&,xgboost_old::tree::RegTree const&)::{lambda(void)#1},std::allocator<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::CreateHist(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<unsigned int> const&,xgboost_old::tree::RegTree const&)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &unk_24D93EB28;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

double std::__function::__func<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::CreateHist(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<unsigned int> const&,xgboost_old::tree::RegTree const&)::{lambda(void)#1},std::allocator<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::CreateHist(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<unsigned int> const&,xgboost_old::tree::RegTree const&)::{lambda(void)#1}>,void ()(void)>::operator()(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::CreateHist(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<unsigned int> const&,xgboost_old::tree::RegTree const&)::{lambda(void)#1}::operator()(a1 + 8).n128_u64[0];
  return result;
}

uint64_t std::__function::__func<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::CreateHist(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<unsigned int> const&,xgboost_old::tree::RegTree const&)::{lambda(void)#1},std::allocator<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::CreateHist(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<unsigned int> const&,xgboost_old::tree::RegTree const&)::{lambda(void)#1}>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::CreateHist(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<unsigned int> const&,xgboost_old::tree::RegTree const&)::{lambda(void)#1},std::allocator<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::CreateHist(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<unsigned int> const&,xgboost_old::tree::RegTree const&)::{lambda(void)#1}>,void ()(void)>::target_type()
{
}

__n128 xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::CreateHist(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<unsigned int> const&,xgboost_old::tree::RegTree const&)::{lambda(void)#1}::operator()(uint64_t a1)
{
  _QWORD *v2;
  uint64_t *v3;
  int v4;
  uint64_t v5;
  __n128 result;
  unsigned int *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[2];
  __int128 v16;
  uint64_t v17;
  uint64_t v18;

  v2 = *(_QWORD **)a1;
  v3 = (uint64_t *)(*(_QWORD *)a1 + 400);
  v4 = turi::thread::cpu_count((turi::thread *)a1);
  std::vector<std::vector<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::HistEntry,std::allocator<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::HistEntry>>>::resize(v3, v4);
  v5 = (*(uint64_t (**)(_QWORD, _QWORD))(***(_QWORD ***)(a1 + 8) + 16))(**(_QWORD **)(a1 + 8), *(_QWORD *)(a1 + 16));
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5))
  {
    do
    {
      v7 = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      v8 = *v7;
      v15[0] = v2;
      v15[1] = v7;
      v16 = *(_OWORD *)(a1 + 24);
      v9 = *(_QWORD *)(a1 + 16);
      v17 = *(_QWORD *)(a1 + 40);
      v18 = v9;
      turi::parallel_for<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::CreateHist(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<unsigned int> const&,xgboost_old::tree::RegTree const&)::{lambda(void)#1}::operator() const(void)::{lambda(unsigned long)#1}>(0, v8, (uint64_t)v15);
    }
    while (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5) & 1) != 0);
  }
  v10 = v2[10];
  if (v2[11] != v10)
  {
    v11 = 0;
    do
    {
      v12 = *(int *)(v10 + 4 * v11);
      v13 = *(int *)(v2[13] + 4 * v12);
      v14 = (uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) - **(_QWORD **)(a1 + 16)) >> 2;
      result = *(__n128 *)(v2[53] + 16 * v12);
      *(__n128 *)(*(_QWORD *)(v2[25] + 16) + 16 * *(unsigned int *)(*(_QWORD *)v2[25] + 4 * (v13 + v13 * v14 + v14))) = result;
      ++v11;
      v10 = v2[10];
    }
    while (v11 < (v2[11] - v10) >> 2);
  }
  return result;
}

void std::vector<std::vector<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::HistEntry,std::allocator<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::HistEntry>>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;

  v3 = a1[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::HistEntry,std::allocator<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::HistEntry>>>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 24 * a2;
    if (v3 != v7)
    {
      v8 = a1[1];
      do
      {
        v10 = *(void **)(v8 - 24);
        v8 -= 24;
        v9 = v10;
        if (v10)
        {
          *(_QWORD *)(v3 - 16) = v9;
          operator delete(v9);
        }
        v3 = v8;
      }
      while (v8 != v7);
    }
    a1[1] = v7;
  }
}

void turi::parallel_for<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::CreateHist(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<unsigned int> const&,xgboost_old::tree::RegTree const&)::{lambda(void)#1}::operator() const(void)::{lambda(unsigned long)#1}>(turi::thread_pool *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v5;
  turi::thread_pool *instance;
  turi::thread *v7;
  turi::thread_pool *tls_data;
  BOOL v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  uint64_t *v13;
  turi::thread_pool *v14;
  uint64_t v15;
  double v16;
  double v17;
  turi::thread *v18;
  unint64_t v19;
  uint64_t v20[4];
  uint64_t v21[25];
  uint64_t v22;

  v5 = (unint64_t)a1;
  v22 = *MEMORY[0x24BDAC8D0];
  instance = (turi::thread_pool *)turi::thread_pool::get_instance(a1);
  v7 = (turi::thread *)turi::thread_pool::size(instance);
  tls_data = (turi::thread_pool *)turi::thread::get_tls_data(v7);
  if (*((_BYTE *)tls_data + 8))
    v9 = 0;
  else
    v9 = (unint64_t)v7 > 1;
  if (v9)
  {
    v14 = (turi::thread_pool *)turi::thread_pool::get_instance(tls_data);
    turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)v21, v14);
    v15 = 0;
    v16 = (double)(a2 - v5) / (double)(unint64_t)v7;
    v17 = (double)v5;
    do
    {
      v18 = (turi::thread *)(v15 + 1);
      v19 = (unint64_t)(v17 + v16 * (double)(unint64_t)(v15 + 1));
      if ((turi::thread *)v15 == (turi::thread *)((char *)v7 - 1))
        v19 = a2;
      v20[2] = (unint64_t)(v17 + v16 * (double)(unint64_t)v15);
      v20[3] = v19;
      v20[0] = (uint64_t)boost::function0<void>::assign_to<void turi::parallel_for<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::CreateHist(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<unsigned int> const&,xgboost_old::tree::RegTree const&)::{lambda(void)#1}::operator() const(void)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::CreateHist(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<unsigned int> const&,xgboost_old::tree::RegTree const&)::{lambda(void)#1}::operator() const(void)::{lambda(unsigned long)#1} const&)::{lambda(void)#1}>(xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::CreateHist(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<unsigned int> const&,xgboost_old::tree::RegTree const&)::{lambda(void)#1}::operator() const(void)::{lambda(unsigned long)#1})::stored_vtable
             + 1;
      v20[1] = a3;
      turi::parallel_task_queue::launch((uint64_t)v21, (uint64_t)v20, v15);
      boost::function0<void>::~function0(v20);
      v15 = (uint64_t)v18;
    }
    while (v18 != v7);
    turi::parallel_task_queue::join((turi::parallel_task_queue *)v21);
    turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)v21);
  }
  else if (a2 > v5)
  {
    do
    {
      v10 = *(_QWORD *)a3;
      v11 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 304)
                      + 4 * *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a3 + 8) + 8) + 4 * v5));
      tls_data = (turi::thread_pool *)turi::thread::get_tls_data(tls_data);
      if ((v11 & 0x80000000) == 0)
      {
        v12 = *(_DWORD *)tls_data;
        v13 = *(uint64_t **)(a3 + 16);
        *(_OWORD *)v21 = *(_OWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 8) + 16) + 16 * v5);
        xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::UpdateHistCol(v10, v13, v21, *(_QWORD *)(a3 + 24), *(_QWORD *)(a3 + 32), *(_QWORD **)(a3 + 40), v11, (_QWORD *)(*(_QWORD *)(v10 + 400) + 24 * v12));
      }
      ++v5;
    }
    while (a2 != v5);
  }
}

void sub_2183DE334(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)va);
  _Unwind_Resume(a1);
}

void std::vector<std::vector<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::HistEntry,std::allocator<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::HistEntry>>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  size_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    v19 = v4;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>(v4, v11);
    else
      v12 = 0;
    v15 = v12;
    v16 = &v12[24 * v8];
    v18 = &v12[24 * v11];
    v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    v17 = &v16[v14];
    std::vector<std::vector<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::HistEntry,std::allocator<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::HistEntry>>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)&v15);
  }
}

void sub_2183DE4B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::HistEntry,std::allocator<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::HistEntry>>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::HistEntry,std::allocator<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::HistEntry>>>,std::reverse_iterator<std::vector<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::HistEntry,std::allocator<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::HistEntry>>*>,std::reverse_iterator<std::vector<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::HistEntry,std::allocator<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::HistEntry>>*>,std::reverse_iterator<std::vector<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::HistEntry,std::allocator<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::HistEntry>>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::HistEntry,std::allocator<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::HistEntry>>>,std::reverse_iterator<std::vector<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::HistEntry,std::allocator<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::HistEntry>>*>,std::reverse_iterator<std::vector<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::HistEntry,std::allocator<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::HistEntry>>*>,std::reverse_iterator<std::vector<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::HistEntry,std::allocator<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::HistEntry>>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::HistEntry,std::allocator<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::HistEntry>>>,std::reverse_iterator<std::vector<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::HistEntry,std::allocator<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::HistEntry>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::HistEntry,std::allocator<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::HistEntry>>>,std::reverse_iterator<std::vector<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::HistEntry,std::allocator<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::HistEntry>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::UpdateHistCol(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5, _QWORD *a6, unsigned int a7, _QWORD *a8)
{
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unsigned int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _DWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  float v39;
  float32x2_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  float v51;
  float32x2_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int v63;
  float v64;
  uint64_t v65;
  int v66;
  float32x2_t v67[32];
  _DWORD v68[32];
  uint64_t v69;

  v69 = *MEMORY[0x24BDAC8D0];
  if (*((_DWORD *)a3 + 2))
  {
    std::vector<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::HistEntry,std::allocator<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::HistEntry>>::resize((uint64_t)a8, *(int *)(a5 + 100));
    v14 = *(_QWORD *)(a1 + 80);
    if (*(_QWORD *)(a1 + 88) != v14)
    {
      v15 = 0;
      do
      {
        v16 = *(unsigned int *)(v14 + 4 * v15);
        v17 = *(unsigned int *)(*(_QWORD *)(a1 + 104) + 4 * v16);
        v18 = *a8 + 32 * v16;
        *(_DWORD *)(v18 + 24) = 0;
        v19 = *(_QWORD **)(a1 + 200);
        v20 = (unsigned int *)(*v19 + 4 * (v17 + v17 * ((a6[1] - *a6) >> 2) + a7));
        v21 = *v20;
        v22 = v19[1] + 4 * v21;
        v23 = v19[2] + 16 * v21;
        LODWORD(v20) = v20[1] - v21;
        *(_QWORD *)v18 = v22;
        *(_QWORD *)(v18 + 8) = v23;
        *(_DWORD *)(v18 + 16) = (_DWORD)v20;
        ++v15;
        v14 = *(_QWORD *)(a1 + 80);
      }
      while (v15 < (*(_QWORD *)(a1 + 88) - v14) >> 2);
    }
    v24 = *((unsigned int *)a3 + 2);
    if (*(_DWORD *)(a1 + 72))
    {
      v25 = v24 & 0xFFFFFFE0;
      if ((v24 & 0xFFFFFFE0) != 0)
      {
        v26 = 0;
        v27 = *a3;
        v28 = *(_QWORD *)(a1 + 128);
        v29 = *a2;
        do
        {
          v30 = 0;
          v31 = v68;
          do
          {
            v32 = *(unsigned int *)(v27 + v30 * 8);
            *v31++ = *(_DWORD *)(v28 + 4 * v32);
            v67[v30++] = *(float32x2_t *)(v29 + 8 * v32);
          }
          while (v30 != 32);
          v33 = 0;
          v34 = *a3;
          do
          {
            v35 = v68[v33];
            if ((v35 & 0x80000000) == 0)
            {
              v36 = *a8 + 32 * v35;
              v37 = *(unsigned int *)(v36 + 24);
              v38 = *(_DWORD *)(v36 + 16);
              if (v38 > *(_DWORD *)(v36 + 24))
              {
                v39 = *(float *)(v34 + 8 * (v33 + v26) + 4);
                v40 = v67[v33];
                v41 = *(_QWORD *)v36;
                v42 = v38 - v37;
                while (*(float *)(v41 + 4 * v37) <= v39)
                {
                  *(_DWORD *)(v36 + 24) = ++v37;
                  if (!--v42)
                    goto LABEL_18;
                }
                *(float64x2_t *)(*(_QWORD *)(v36 + 8) + 16 * v37) = vaddq_f64(*(float64x2_t *)(*(_QWORD *)(v36 + 8) + 16 * v37), vcvtq_f64_f32(v40));
              }
            }
LABEL_18:
            ++v33;
          }
          while (v33 != 32);
          v26 += 32;
          v27 += 256;
        }
        while (v26 < v25);
      }
      if (v25 < v24)
      {
        v43 = *a3;
        v44 = *(_QWORD *)(a1 + 128);
        v25 = v25;
        v45 = *a2;
        do
        {
          v46 = *(unsigned int *)(v43 + 8 * v25);
          v47 = *(unsigned int *)(v44 + 4 * v46);
          if ((v47 & 0x80000000) == 0)
          {
            v48 = *a8 + 32 * v47;
            v49 = *(unsigned int *)(v48 + 24);
            v50 = *(_DWORD *)(v48 + 16);
            if (v50 > *(_DWORD *)(v48 + 24))
            {
              v51 = *(float *)(v43 + 8 * v25 + 4);
              v52 = *(float32x2_t *)(v45 + 8 * v46);
              v53 = *(_QWORD *)v48;
              v54 = v50 - v49;
              while (*(float *)(v53 + 4 * v49) <= v51)
              {
                *(_DWORD *)(v48 + 24) = ++v49;
                if (!--v54)
                  goto LABEL_29;
              }
              *(float64x2_t *)(*(_QWORD *)(v48 + 8) + 16 * v49) = vaddq_f64(*(float64x2_t *)(*(_QWORD *)(v48 + 8) + 16 * v49), vcvtq_f64_f32(v52));
            }
          }
LABEL_29:
          ++v25;
        }
        while ((_DWORD)v24 != (_DWORD)v25);
      }
    }
    else if ((_DWORD)v24)
    {
      v55 = 0;
      v56 = *a3;
      v57 = *(_QWORD *)(a1 + 128);
      v58 = *a2;
      do
      {
        v59 = *(unsigned int *)(v56 + 8 * v55);
        v60 = *(unsigned int *)(v57 + 4 * v59);
        if ((v60 & 0x80000000) == 0)
        {
          v61 = *a8 + 32 * v60;
          v62 = *(unsigned int *)(v61 + 24);
          v63 = *(_DWORD *)(v61 + 16);
          if (v63 > *(_DWORD *)(v61 + 24))
          {
            v64 = *(float *)(v56 + 8 * v55 + 4);
            v65 = *(_QWORD *)v61;
            v66 = v63 - v62;
            while (*(float *)(v65 + 4 * v62) <= v64)
            {
              *(_DWORD *)(v61 + 24) = ++v62;
              if (!--v66)
                goto LABEL_40;
            }
            *(float64x2_t *)(*(_QWORD *)(v61 + 8) + 16 * v62) = vaddq_f64(*(float64x2_t *)(*(_QWORD *)(v61 + 8)+ 16* v62), vcvtq_f64_f32(*(float32x2_t *)(v58 + 8 * v59)));
          }
        }
LABEL_40:
        ++v55;
      }
      while (v55 != v24);
    }
  }
}

void std::vector<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::HistEntry,std::allocator<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::HistEntry>>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 5;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 32 * a2;
  }
  else
  {
    std::vector<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::HistEntry,std::allocator<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::HistEntry>>::__append((void **)a1, a2 - v2);
  }
}

void std::vector<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::HistEntry,std::allocator<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::HistEntry>>::__append(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  __int128 v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 5)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 32 * a2);
      v7 += 32 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = v7 - (_BYTE *)*a1;
    v9 = a2 + (v8 >> 5);
    if (v9 >> 59)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 5;
    v11 = v5 - (_BYTE *)*a1;
    if (v11 >> 4 > v9)
      v9 = v11 >> 4;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0)
      v12 = 0x7FFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>>(v4, v12);
    else
      v13 = 0;
    v14 = &v13[32 * v10];
    v15 = &v13[32 * v12];
    bzero(v14, 32 * a2);
    v16 = &v14[32 * a2];
    v18 = (char *)*a1;
    v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        v19 = *((_OWORD *)v17 - 2);
        *(_OWORD *)(v14 - 20) = *(_OWORD *)(v17 - 20);
        *((_OWORD *)v14 - 2) = v19;
        v14 -= 32;
        v17 -= 32;
      }
      while (v17 != v18);
      v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
      operator delete(v17);
  }
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::CreateHist(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<unsigned int> const&,xgboost_old::tree::RegTree const&)::{lambda(void)#1}::operator() const(void)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::CreateHist(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<unsigned int> const&,xgboost_old::tree::RegTree const&)::{lambda(void)#1}::operator() const(void)::{lambda(unsigned long)#1} const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v4;
  __int128 v5;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x80000002186FCAB4 & 0x7FFFFFFFFFFFFFFFLL)
        || (result = strcmp((const char *)result, (const char *)(0x80000002186FCAB4 & 0x7FFFFFFFFFFFFFFFLL)),
            !(_DWORD)result))
      {
        *(_QWORD *)a2 = v4;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
    }
  }
  else
  {
    v5 = *(_OWORD *)result;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

void boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::CreateHist(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<unsigned int> const&,xgboost_old::tree::RegTree const&)::{lambda(void)#1}::operator() const(void)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::CreateHist(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<unsigned int> const&,xgboost_old::tree::RegTree const&)::{lambda(void)#1}::operator() const(void)::{lambda(unsigned long)#1} const&)::{lambda(void)#1},void>::invoke(turi::thread *tls_data)
{
  unint64_t v1;
  uint64_t **v2;
  uint64_t *v3;
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t *v7;
  __int128 v8;

  v1 = *((_QWORD *)tls_data + 1);
  if (v1 < *((_QWORD *)tls_data + 2))
  {
    v2 = (uint64_t **)tls_data;
    do
    {
      v3 = *v2;
      v4 = **v2;
      v5 = *(_DWORD *)(*(_QWORD *)(v4 + 304) + 4 * *(unsigned int *)(*(_QWORD *)((*v2)[1] + 8) + 4 * v1));
      tls_data = (turi::thread *)turi::thread::get_tls_data(tls_data);
      if ((v5 & 0x80000000) == 0)
      {
        v6 = *(_DWORD *)tls_data;
        v7 = (uint64_t *)v3[2];
        v8 = *(_OWORD *)(*(_QWORD *)(v3[1] + 16) + 16 * v1);
        xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::UpdateHistCol(v4, v7, (uint64_t *)&v8, v3[3], v3[4], (_QWORD *)v3[5], v5, (_QWORD *)(*(_QWORD *)(v4 + 400) + 24 * v6));
      }
      ++v1;
    }
    while (v1 < (unint64_t)v2[2]);
  }
}

xgboost_old::tree::SketchMaker *xgboost_old::tree::SketchMaker::SketchMaker(xgboost_old::tree::SketchMaker *this)
{
  turi::neural_net::float_scalar *v7;

  *((_QWORD *)this + 1) = 1050253722;
  *((_DWORD *)this + 4) = 6;
  __asm { FMOV            V0.2S, #1.0 }
  *(_QWORD *)((char *)this + 20) = _D0;
  *(_QWORD *)((char *)this + 28) = 0;
  *(_OWORD *)((char *)this + 36) = xmmword_2186FD4F0;
  *(_QWORD *)((char *)this + 52) = 0x3DCCCCCD3F800000;
  *((_DWORD *)this + 15) = 0x40000000;
  *((_OWORD *)this + 4) = xmmword_2186CF1A0;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_QWORD *)this + 18) = 0;
  *(_QWORD *)this = &unk_24D93EBC8;
  *(_OWORD *)((char *)this + 152) = 0u;
  v7 = (xgboost_old::tree::SketchMaker *)((char *)this + 248);
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  rabit::engine::ReduceHandle::ReduceHandle((_QWORD *)this + 31);
  turi::neural_net::float_scalar::~float_scalar(v7);
  rabit::engine::ReduceHandle::ReduceHandle((_QWORD *)this + 35);
  *((_QWORD *)this + 39) = 0;
  *((_QWORD *)this + 40) = 0;
  *((_QWORD *)this + 41) = 0;
  turi::neural_net::float_scalar::~float_scalar((xgboost_old::tree::SketchMaker *)((char *)this + 280));
  *((_QWORD *)this + 42) = 0;
  *((_QWORD *)this + 43) = 0;
  *((_QWORD *)this + 44) = 0;
  return this;
}

void sub_2183DECD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  turi::neural_net::float_scalar *v11;
  turi::neural_net::float_scalar *v12;
  void **v13;
  void *v15;

  if (*(char *)(v10 + 335) < 0)
    operator delete(*v13);
  turi::neural_net::float_scalar::~float_scalar(v12);
  turi::neural_net::float_scalar::~float_scalar(v11);
  a10 = v10 + 224;
  std::vector<xgboost_old::tree::HistMaker<xgboost_old::tree::GradStats>::HistSet,std::allocator<xgboost_old::tree::HistMaker<xgboost_old::tree::GradStats>::HistSet>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  v15 = *(void **)(v10 + 200);
  if (v15)
  {
    *(_QWORD *)(v10 + 208) = v15;
    operator delete(v15);
  }
  a10 = v10 + 176;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  xgboost_old::tree::BaseMaker::~BaseMaker((xgboost_old::tree::BaseMaker *)v10);
  _Unwind_Resume(a1);
}

void xgboost_old::tree::SketchMaker::Update(uint64_t a1, _QWORD *a2, const char *a3, _QWORD *a4, uint64_t *a5)
{
  float v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v13;

  v6 = *(float *)(a1 + 8);
  v7 = *a5;
  v8 = a5[1] - *a5;
  *(float *)(a1 + 8) = v6 / (float)(unint64_t)(v8 >> 3);
  if (v8)
  {
    v13 = 0;
    do
    {
      xgboost_old::tree::SketchMaker::Update(a1, a2, a3, a4, *(_QWORD *)(v7 + 8 * v13++));
      v7 = *a5;
    }
    while (v13 < (a5[1] - *a5) >> 3);
  }
  *(float *)(a1 + 8) = v6;
}

void xgboost_old::tree::SketchMaker::~SketchMaker(void **this)
{
  xgboost_old::tree::SketchMaker::~SketchMaker(this);
  JUMPOUT(0x219A19A08);
}

{
  void *v2;
  void **v3;

  *this = &unk_24D93EBC8;
  v3 = this + 42;
  std::vector<xgboost_old::utils::WXQuantileSketch<float,float>>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*((char *)this + 335) < 0)
    operator delete(this[39]);
  turi::neural_net::float_scalar::~float_scalar((turi::neural_net::float_scalar *)(this + 35));
  turi::neural_net::float_scalar::~float_scalar((turi::neural_net::float_scalar *)(this + 31));
  v3 = this + 28;
  std::vector<xgboost_old::tree::HistMaker<xgboost_old::tree::GradStats>::HistSet,std::allocator<xgboost_old::tree::HistMaker<xgboost_old::tree::GradStats>::HistSet>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v2 = this[25];
  if (v2)
  {
    this[26] = v2;
    operator delete(v2);
  }
  v3 = this + 22;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = this + 19;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v3);
  xgboost_old::tree::BaseMaker::~BaseMaker((xgboost_old::tree::BaseMaker *)this);
}

double rabit::ReducerSafe_<xgboost_old::tree::SketchMaker::SKStats,&xgboost_old::tree::SketchMaker::SKStats::Reduce>(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  double *v4;
  double *v5;
  double result;

  if (a3 >= 1)
  {
    v3 = a3;
    v4 = (double *)(a1 + 16);
    v5 = (double *)(a2 + 16);
    do
    {
      result = *v5 + *v4;
      *((float64x2_t *)v5 - 1) = vaddq_f64(*(float64x2_t *)(v5 - 2), *(float64x2_t *)(v4 - 2));
      *v5 = result;
      v5 += 3;
      v4 += 3;
      --v3;
    }
    while (v3);
  }
  return result;
}

void xgboost_old::tree::SketchMaker::Update(uint64_t a1, _QWORD *a2, const char *a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  int *v22;
  double *v23;
  float *v24;
  double v25;
  double v26;
  double v27;
  float v28;
  double v29;
  double v30;
  float v31;
  double v32;
  float v33;
  float v34;
  int v35;
  double *v36;
  double v37;
  double v38;
  double v39;
  double v40;
  float v41;
  float v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double *v53;
  double v54;
  double v55;
  float v56;
  float v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  float v69;
  float v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;
  float v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  float v85;
  uint64_t v86;
  _QWORD v87[3];

  xgboost_old::tree::BaseMaker::InitData(a1, a2, a3, a4 + 2, a5);
  if (*(int *)(a1 + 16) <= 0)
  {
    v16 = *(_QWORD *)(a1 + 80);
    v15 = *(_QWORD *)(a1 + 88);
  }
  else
  {
    v10 = 0;
    do
    {
      xgboost_old::tree::BaseMaker::GetNodeStats<xgboost_old::tree::SketchMaker::SKStats>((turi::thread *)a1, a2, (uint64_t)a3, a5, (uint64_t)a4, (uint64_t *)(a1 + 176), (uint64_t *)(a1 + 200));
      xgboost_old::tree::SketchMaker::BuildSketch(a1, (uint64_t)a2, (uint64_t)a3, a4, (int *)a5);
      xgboost_old::tree::SketchMaker::SyncNodeStats((xgboost_old::tree::SketchMaker *)a1, v11, v12);
      xgboost_old::tree::SketchMaker::FindSplit(a1, v10, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4, a5);
      (*(void (**)(uint64_t, uint64_t, const char *, uint64_t))(*(_QWORD *)a1 + 40))(a1, a1 + 80, a3, a5);
      v13 = (_QWORD *)(*(uint64_t (**)(const char *))(*(_QWORD *)a3 + 64))(a3);
      v14 = ((v13[1] - *v13) >> 2);
      v87[0] = v13;
      v87[1] = a1;
      v87[2] = a5;
      turi::parallel_for<xgboost_old::tree::BaseMaker::ResetPositionCol(std::vector<int> const&,xgboost_old::IFMatrix *,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#1}>(0, v14, (uint64_t)v87);
      xgboost_old::tree::BaseMaker::UpdateQueueExpand(a1, a5);
      v16 = *(_QWORD *)(a1 + 80);
      v15 = *(_QWORD *)(a1 + 88);
      if (v15 == v16)
        break;
      v10 = (v10 + 1);
    }
    while ((int)v10 < *(_DWORD *)(a1 + 16));
  }
  if (v15 != v16)
  {
    xgboost_old::tree::BaseMaker::GetNodeStats<xgboost_old::tree::SketchMaker::SKStats>((turi::thread *)a1, a2, (uint64_t)a3, a5, (uint64_t)a4, (uint64_t *)(a1 + 176), (uint64_t *)(a1 + 200));
    xgboost_old::tree::SketchMaker::SyncNodeStats((xgboost_old::tree::SketchMaker *)a1, v17, v18);
  }
  v19 = *(unsigned int *)(a5 + 100);
  if ((int)v19 >= 1)
  {
    v20 = *(_QWORD *)(a1 + 200);
    v21 = *(float *)(a1 + 20);
    v22 = (int *)(*(_QWORD *)a5 + 8);
    v23 = (double *)(v20 + 16);
    v24 = (float *)(*(_QWORD *)(a5 + 48) + 4);
    do
    {
      v25 = *(v23 - 2) - *(v23 - 1);
      v26 = *v23;
      v27 = 0.0;
      if (*v23 >= v21)
      {
        v28 = *(float *)(a1 + 28);
        v29 = *(v23 - 2) - *(v23 - 1);
        if (v28 != 0.0)
        {
          v30 = v28;
          if (v25 <= v30)
          {
            v29 = 0.0;
            if (v25 < -v30)
              v29 = v25 + v30;
          }
          else
          {
            v29 = v25 - v30;
          }
        }
        v27 = -v29 / (v26 + *(float *)(a1 + 24));
        v31 = *(float *)(a1 + 36);
        if (v31 != 0.0)
        {
          if (v27 > v31)
            v27 = v31;
          v32 = (float)-v31;
          if (v27 < v32)
            v27 = v32;
        }
      }
      v33 = v27;
      v34 = v26;
      *v24 = v34;
      v24[1] = v33;
      v35 = *(v22 - 1);
      if (v35 != -1)
      {
        v36 = (double *)(v20 + 24 * v35);
        v37 = v36[2];
        v38 = 0.0;
        v39 = 0.0;
        if (v37 >= v21)
        {
          v40 = *v36 - v36[1];
          v41 = *(float *)(a1 + 36);
          v42 = *(float *)(a1 + 28);
          if (v41 == 0.0)
          {
            if (v42 == 0.0)
            {
              v43 = v40 * v40;
            }
            else
            {
              v46 = v42;
              if (v40 <= v46)
              {
                v47 = 0.0;
                if (v40 < -v46)
                  v47 = v40 + v46;
              }
              else
              {
                v47 = v40 - v46;
              }
              v43 = v47 * v47;
            }
            v39 = v43 / (v37 + *(float *)(a1 + 24));
          }
          else
          {
            v44 = v42;
            v45 = *v36 - v36[1];
            if (v42 != 0.0)
            {
              if (v40 <= v44)
              {
                v45 = 0.0;
                if (v40 < -v44)
                  v45 = v40 + v44;
              }
              else
              {
                v45 = v40 - v44;
              }
            }
            v48 = v37 + *(float *)(a1 + 24);
            v49 = -v45 / v48;
            if (v49 > v41)
              v49 = v41;
            v50 = (float)-v41;
            if (v49 >= v50)
              v50 = v49;
            v51 = v48 * 0.5 * (v50 * v50) + v40 * v50;
            v52 = v51 + v44 * fabs(v50);
            if (v42 != 0.0)
              v51 = v52;
            v39 = v51 * -2.0;
          }
        }
        v53 = (double *)(v20 + 24 * *v22);
        v54 = v53[2];
        if (v54 >= v21)
        {
          v55 = *v53 - v53[1];
          v56 = *(float *)(a1 + 36);
          v57 = *(float *)(a1 + 28);
          if (v56 == 0.0)
          {
            if (v57 == 0.0)
            {
              v58 = v55 * v55;
            }
            else
            {
              v61 = v57;
              if (v55 <= v61)
              {
                v62 = 0.0;
                if (v55 < -v61)
                  v62 = v55 + v61;
              }
              else
              {
                v62 = v55 - v61;
              }
              v58 = v62 * v62;
            }
            v38 = v58 / (v54 + *(float *)(a1 + 24));
          }
          else
          {
            v59 = v57;
            v60 = *v53 - v53[1];
            if (v57 != 0.0)
            {
              if (v55 <= v59)
              {
                v60 = 0.0;
                if (v55 < -v59)
                  v60 = v55 + v59;
              }
              else
              {
                v60 = v55 - v59;
              }
            }
            v63 = v54 + *(float *)(a1 + 24);
            v64 = -v60 / v63;
            if (v64 > v56)
              v64 = v56;
            v65 = (float)-v56;
            if (v64 >= v65)
              v65 = v64;
            v66 = v63 * 0.5 * (v65 * v65) + v55 * v65;
            v67 = v66 + v59 * fabs(v65);
            if (v57 != 0.0)
              v66 = v67;
            v38 = v66 * -2.0;
          }
        }
        v68 = 0.0;
        if (v26 >= v21)
        {
          v69 = *(float *)(a1 + 36);
          v70 = *(float *)(a1 + 28);
          if (v69 == 0.0)
          {
            if (v70 == 0.0)
            {
              v71 = v25 * v25;
            }
            else
            {
              v74 = v70;
              if (v25 <= v74)
              {
                v75 = 0.0;
                if (v25 < -v74)
                  v75 = v25 + v74;
              }
              else
              {
                v75 = v25 - v74;
              }
              v71 = v75 * v75;
            }
            v68 = v71 / (v26 + *(float *)(a1 + 24));
          }
          else
          {
            v72 = v70;
            v73 = v25;
            if (v70 != 0.0)
            {
              if (v25 <= v72)
              {
                v73 = 0.0;
                if (v25 < -v72)
                  v73 = v25 + v72;
              }
              else
              {
                v73 = v25 - v72;
              }
            }
            v76 = v26 + *(float *)(a1 + 24);
            v77 = -v73 / v76;
            if (v77 > v69)
              v77 = v69;
            v78 = (float)-v69;
            if (v77 >= v78)
              v78 = v77;
            v79 = v76 * 0.5 * (v78 * v78) + v25 * v78;
            v80 = v79 + v72 * fabs(v78);
            if (v70 != 0.0)
              v79 = v80;
            v68 = v79 * -2.0;
          }
        }
        v81 = v39 + v38 - v68;
        *(v24 - 1) = v81;
      }
      v22 += 5;
      v23 += 3;
      v24 += 4;
      --v19;
    }
    while (v19);
  }
  v82 = *(_QWORD *)(a1 + 80);
  if (*(_QWORD *)(a1 + 88) != v82)
  {
    v83 = 0;
    do
    {
      v84 = *(int *)(v82 + 4 * v83);
      v85 = *(float *)(*(_QWORD *)(a5 + 48) + 16 * v84 + 8) * *(float *)(a1 + 8);
      v86 = *(_QWORD *)a5 + 20 * (int)v84;
      *(float *)(v86 + 16) = v85;
      *(_QWORD *)(v86 + 4) = -1;
      ++v83;
      v82 = *(_QWORD *)(a1 + 80);
    }
    while (v83 < (*(_QWORD *)(a1 + 88) - v82) >> 2);
  }
}

void xgboost_old::tree::BaseMaker::GetNodeStats<xgboost_old::tree::SketchMaker::SKStats>(turi::thread *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t *a7)
{
  int v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  uint64_t v23;
  float64x2_t *v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  double *v29;
  double v30;
  double v31;
  float64x2_t v32;
  uint64_t v33;
  float64x2_t *v34;
  _QWORD v35[3];
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  v14 = turi::thread::cpu_count(a1);
  std::vector<std::vector<xgboost_old::tree::SketchMaker::SKStats>>::resize(a6, v14);
  std::vector<xgboost_old::tree::SketchMaker::SKStats>::resize((uint64_t)a7, *(int *)(a4 + 100));
  v15 = operator new(0x20uLL);
  *v15 = &unk_24D93EC20;
  v15[1] = a6;
  v15[2] = a4;
  v15[3] = a1;
  v36 = v15;
  turi::in_parallel((turi::thread_pool *)v35);
  v16 = v36;
  if (v36 == v35)
  {
    v17 = 4;
    v16 = v35;
  }
  else
  {
    if (!v36)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*v16 + 8 * v17))();
LABEL_6:
  v18 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 64))(a3);
  v19 = ((v18[1] - *v18) >> 2);
  v35[0] = v18;
  v35[1] = a1;
  v35[2] = a6;
  v36 = a2;
  v37 = a5;
  turi::parallel_for<void xgboost_old::tree::BaseMaker::GetNodeStats<xgboost_old::tree::SketchMaker::SKStats>(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix const&,xgboost_old::tree::RegTree const&,xgboost_old::BoosterInfo const&,std::vector<std::vector<xgboost_old::tree::SketchMaker::SKStats>> *,std::vector<xgboost_old::tree::SketchMaker::SKStats>*)::{lambda(unsigned long)#1}>(0, v19, (uint64_t)v35);
  v20 = *((_QWORD *)a1 + 10);
  if (*((_QWORD *)a1 + 11) != v20)
  {
    v21 = 0;
    do
    {
      v22 = *(_DWORD *)(v20 + 4 * v21);
      v23 = *a7;
      v24 = (float64x2_t *)(*a7 + 24 * v22);
      v24->f64[0] = 0.0;
      v24->f64[1] = 0.0;
      v24[1].f64[0] = 0.0;
      v25 = (uint64_t *)*a6;
      v26 = a6[1] - *a6;
      if (v26)
      {
        v27 = v26 / 24;
        v28 = v23 + 24 * v22;
        v30 = *(double *)(v28 + 16);
        v29 = (double *)(v28 + 16);
        v31 = v30;
        if (v27 <= 1)
          v27 = 1;
        v32.f64[0] = 0.0;
        v32.f64[1] = *(v29 - 1);
        do
        {
          v33 = *v25;
          v25 += 3;
          v34 = (float64x2_t *)(v33 + 24 * v22);
          v32 = vaddq_f64(*v34, v32);
          *v24 = v32;
          v31 = v34[1].f64[0] + v31;
          *v29 = v31;
          --v27;
        }
        while (v27);
      }
      ++v21;
      v20 = *((_QWORD *)a1 + 10);
    }
    while (v21 < (*((_QWORD *)a1 + 11) - v20) >> 2);
  }
}

void sub_2183DF600(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12)
{
  uint64_t *v12;
  uint64_t *v14;
  uint64_t v15;

  v14 = a12;
  if (a12 == v12)
  {
    v15 = 4;
    v14 = &a9;
  }
  else
  {
    if (!a12)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void xgboost_old::tree::SketchMaker::BuildSketch(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, int *a5)
{
  turi::thread *v10;
  const char *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  double v15;
  unint64_t v16;
  _QWORD *v17;
  int v18;
  _QWORD *v19;
  uint64_t v20;
  const char *v21;
  unsigned int *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  void *__p[2];
  uint64_t *v37;
  uint64_t v38;

  std::vector<xgboost_old::utils::WXQuantileSketch<float,float>>::resize((uint64_t *)(a1 + 336), 3 * a5[28] * ((uint64_t)(*(_QWORD *)(a1 + 88) - *(_QWORD *)(a1 + 80)) >> 2));
  v12 = *(_QWORD *)(a1 + 336);
  if (*(_QWORD *)(a1 + 344) != v12)
  {
    v13 = 0;
    do
    {
      v14 = 0;
      v15 = *(float *)(a1 + 56);
      do
        v16 = vcvtpd_u64_f64((double)++v14 / v15) + 1;
      while (v16 << v14 < *a4);
      v17 = (_QWORD *)(v12 + 136 * v13);
      v17[4] = v14;
      v17[5] = v16;
      xgboost_old::utils::Assert(v15 * (double)v16 >= (double)v14, "invalid init parameter", v11);
      std::vector<xgboost_old::SparseBatch::Entry>::resize((uint64_t)v17, 1uLL);
      v17[3] = 0;
      v17[10] = v17[9];
      v17[7] = v17[6];
      ++v13;
      v12 = *(_QWORD *)(a1 + 336);
    }
    while (v13 < 0xF0F0F0F0F0F0F0F1 * ((*(_QWORD *)(a1 + 344) - v12) >> 3));
  }
  v18 = turi::thread::cpu_count(v10);
  std::vector<std::vector<xgboost_old::tree::BaseMaker::SketchEntry>>::resize((uint64_t *)(a1 + 152), v18);
  v19 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 64))(a3);
  v38 = (uint64_t)(v19[1] - *v19) >> 2;
  v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 8))(a3);
  (*(void (**)(uint64_t))(*(_QWORD *)v20 + 16))(v20);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v20 + 24))(v20))
  {
    do
    {
      v22 = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 32))(v20);
      v23 = *v22;
      *(_QWORD *)&v35 = a1;
      *((_QWORD *)&v35 + 1) = a2;
      __p[0] = v22;
      __p[1] = a5;
      v37 = &v38;
      turi::parallel_for<xgboost_old::tree::SketchMaker::BuildSketch(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#1}>(0, v23, (uint64_t)&v35);
    }
    while (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 24))(v20) & 1) != 0);
  }
  v24 = (float)(*(float *)(a1 + 60) / *(float *)(a1 + 56));
  xgboost_old::utils::Check((_DWORD)v24 != 0, "sketch_ratio/sketch_eps must be bigger than 1", v21);
  v25 = (uint64_t *)(a1 + 224);
  std::vector<xgboost_old::utils::QuantileSketchTemplate<float,float,xgboost_old::utils::WXQSummary<float,float>>::SummaryContainer,std::allocator<xgboost_old::utils::QuantileSketchTemplate<float,float,xgboost_old::utils::WXQSummary<float,float>>::SummaryContainer>>::resize((uint64_t *)(a1 + 224), 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*(_QWORD *)(a1 + 344) - *(_QWORD *)(a1 + 336)) >> 3));
  v26 = *(_QWORD *)(a1 + 336);
  if (*(_QWORD *)(a1 + 344) != v26)
  {
    v27 = 0;
    v28 = 0;
    v29 = 0;
    do
    {
      v37 = 0;
      v35 = 0u;
      *(_OWORD *)__p = 0u;
      xgboost_old::utils::QuantileSketchTemplate<float,float,xgboost_old::utils::WXQSummary<float,float>>::GetSummary((uint64_t *)(v26 + v28), (uint64_t)&v35);
      v30 = *v25;
      v31 = (_QWORD *)(*v25 + v27);
      if (v24 > (uint64_t)(v31[3] - v31[2]) >> 4)
      {
        std::vector<xgboost_old::utils::WQSummary<float,float>::Entry,std::allocator<xgboost_old::utils::WQSummary<float,float>::Entry>>::resize((uint64_t)(v31 + 2), v24);
        if (v31[3] == v31[2])
          v32 = 0;
        else
          v32 = v31[2];
        *v31 = v32;
        v30 = *v25;
      }
      xgboost_old::utils::WXQSummary<float,float>::SetPrune((_QWORD *)(v30 + v27), (uint64_t)&v35, v24);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      ++v29;
      v26 = *(_QWORD *)(a1 + 336);
      v28 += 136;
      v27 += 40;
    }
    while (v29 < 0xF0F0F0F0F0F0F0F1 * ((*(_QWORD *)(a1 + 344) - v26) >> 3));
  }
  v33 = *(_QWORD *)(a1 + 232) - *(_QWORD *)(a1 + 224);
  if (v33)
    v34 = *(_QWORD *)(a1 + 224);
  else
    v34 = 0;
  rabit::SerializeReducer<xgboost_old::utils::QuantileSketchTemplate<float,float,xgboost_old::utils::WXQSummary<float,float>>::SummaryContainer>::Allreduce(a1 + 280, v34, (16 * v24) | 8, 0xCCCCCCCCCCCCCCCDLL * (v33 >> 3), 0, 0);
}

void sub_2183DF938(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void xgboost_old::tree::SketchMaker::SyncNodeStats(xgboost_old::tree::SketchMaker *this, uint64_t a2, const char *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  char *v8;
  __int128 v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  __int128 v15;
  void *__p;
  _BYTE *v17;

  xgboost_old::utils::Assert(*((_QWORD *)this + 11) != *((_QWORD *)this + 10), "qexpand must not be empty", a3);
  std::vector<xgboost_old::tree::SketchMaker::SKStats>::vector(&__p, (uint64_t)(*((_QWORD *)this + 11) - *((_QWORD *)this + 10)) >> 2);
  v4 = *((_QWORD *)this + 10);
  if (*((_QWORD *)this + 11) != v4)
  {
    v5 = 0;
    v6 = 0;
    do
    {
      v7 = *((_QWORD *)this + 25) + 24 * *(int *)(v4 + 4 * v6);
      v8 = (char *)__p + v5;
      v9 = *(_OWORD *)v7;
      *((_QWORD *)v8 + 2) = *(_QWORD *)(v7 + 16);
      *(_OWORD *)v8 = v9;
      ++v6;
      v4 = *((_QWORD *)this + 10);
      v5 += 24;
    }
    while (v6 < (*((_QWORD *)this + 11) - v4) >> 2);
  }
  if (v17 == __p)
    v10 = 0;
  else
    v10 = __p;
  rabit::engine::ReduceHandle::Allreduce((xgboost_old::tree::SketchMaker *)((char *)this + 248), v10, 0x18uLL, 0xAAAAAAAAAAAAAAABLL * ((v17 - (_BYTE *)__p) >> 3), 0, 0);
  v11 = *((_QWORD *)this + 10);
  if (*((_QWORD *)this + 11) != v11)
  {
    v12 = 0;
    v13 = 0;
    do
    {
      v14 = *((_QWORD *)this + 25) + 24 * *(int *)(v11 + 4 * v13);
      v15 = *(_OWORD *)((char *)__p + v12);
      *(_QWORD *)(v14 + 16) = *(_QWORD *)((char *)__p + v12 + 16);
      *(_OWORD *)v14 = v15;
      ++v13;
      v11 = *((_QWORD *)this + 10);
      v12 += 24;
    }
    while (v13 < (*((_QWORD *)this + 11) - v11) >> 2);
  }
  if (__p)
  {
    v17 = __p;
    operator delete(__p);
  }
}

void sub_2183DFA8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void xgboost_old::tree::SketchMaker::FindSplit(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  float v14;
  _QWORD *v15;
  uint64_t v16;
  double *v17;
  double v18;
  double v19;
  double v20;
  float v21;
  double v22;
  double v23;
  float v24;
  double v25;
  float v26;
  uint64_t v27;
  float v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[4];
  void *__p[3];
  int v36;
  _QWORD *v37;

  v37 = (_QWORD *)a6;
  v36 = *(_DWORD *)(a6 + 112);
  std::vector<xgboost_old::tree::SplitEntry>::vector(__p, (uint64_t)(*(_QWORD *)(a1 + 88) - *(_QWORD *)(a1 + 80)) >> 2);
  v7 = *(_QWORD *)(a1 + 88) - *(_QWORD *)(a1 + 80);
  v8 = (v7 >> 2);
  v34[0] = a1;
  v34[1] = __p;
  v34[2] = &v36;
  v34[3] = &v37;
  turi::parallel_for<xgboost_old::tree::SketchMaker::FindSplit(int,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,xgboost_old::tree::RegTree *)::{lambda(unsigned long)#1}>(0, v8, (uint64_t)v34);
  if ((v7 & 0x3FFFFFFFCLL) != 0)
  {
    v10 = 0;
    v11 = 0;
    do
    {
      v12 = *(int *)(*(_QWORD *)(a1 + 80) + 4 * v11);
      v13 = (char *)__p[0];
      v14 = *(float *)((char *)__p[0] + v10);
      v15 = v37;
      v16 = v37[6];
      *(float *)(v16 + 16 * v12) = v14;
      v17 = (double *)(*(_QWORD *)(a1 + 200) + 24 * (int)v12);
      v18 = v17[2];
      v19 = 0.0;
      if (v18 >= *(float *)(a1 + 20))
      {
        v20 = *v17 - v17[1];
        v21 = *(float *)(a1 + 28);
        if (v21 == 0.0)
        {
          v22 = *v17 - v17[1];
        }
        else
        {
          v23 = v21;
          if (v20 <= v21)
          {
            v22 = 0.0;
            if (v20 < -v23)
              v22 = v20 + v23;
          }
          else
          {
            v22 = v20 - v23;
          }
        }
        v19 = -v22 / (v18 + *(float *)(a1 + 24));
        v24 = *(float *)(a1 + 36);
        if (v24 != 0.0)
        {
          if (v19 > v24)
            v19 = v24;
          v25 = (float)-v24;
          if (v19 < v25)
            v19 = v25;
        }
      }
      v26 = v19;
      v27 = v16 + 16 * v12;
      v28 = v18;
      *(float *)(v27 + 4) = v28;
      *(float *)(v27 + 8) = v26;
      if (v14 <= 0.00001)
      {
        v33 = *v15 + 20 * (int)v12;
        *(float *)(v33 + 16) = *(float *)(a1 + 8) * v26;
        *(_QWORD *)(v33 + 4) = -1;
      }
      else
      {
        xgboost_old::tree::TreeModel<float,xgboost_old::tree::RTreeNodeStat>::AddChilds((uint64_t)v15, v12, v9);
        v29 = *(_DWORD *)&v13[v10 + 8];
        v30 = *v37 + 20 * v12;
        *(_DWORD *)(v30 + 12) = *(_DWORD *)&v13[v10 + 4];
        *(_DWORD *)(v30 + 16) = v29;
        v31 = *v37 + 20 * *(int *)(*v37 + 20 * v12 + 4);
        *(_DWORD *)(v31 + 16) = 0;
        *(_QWORD *)(v31 + 4) = 0xFFFFFFFFLL;
        v32 = *v37 + 20 * *(int *)(*v37 + 20 * v12 + 8);
        *(_DWORD *)(v32 + 16) = 0;
        *(_QWORD *)(v32 + 4) = 0xFFFFFFFFLL;
      }
      ++v11;
      v10 += 12;
    }
    while (v8 != v11);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_2183DFCE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::vector<std::vector<xgboost_old::tree::SketchMaker::SKStats>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;

  v3 = a1[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<xgboost_old::tree::SketchMaker::SKStats>>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 24 * a2;
    if (v3 != v7)
    {
      v8 = a1[1];
      do
      {
        v10 = *(void **)(v8 - 24);
        v8 -= 24;
        v9 = v10;
        if (v10)
        {
          *(_QWORD *)(v3 - 16) = v9;
          operator delete(v9);
        }
        v3 = v8;
      }
      while (v8 != v7);
    }
    a1[1] = v7;
  }
}

void std::vector<xgboost_old::tree::SketchMaker::SKStats>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;

  v2 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3);
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<xgboost_old::tree::SketchMaker::SKStats>::__append((char **)a1, v4);
  }
  else if (!v3)
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 24 * a2;
  }
}

void turi::parallel_for<void xgboost_old::tree::BaseMaker::GetNodeStats<xgboost_old::tree::SketchMaker::SKStats>(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix const&,xgboost_old::tree::RegTree const&,xgboost_old::BoosterInfo const&,std::vector<std::vector<xgboost_old::tree::SketchMaker::SKStats>> *,std::vector<xgboost_old::tree::SketchMaker::SKStats>*)::{lambda(unsigned long)#1}>(turi::thread_pool *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v5;
  turi::thread_pool *instance;
  turi::thread *v7;
  turi::thread_pool *tls_data;
  BOOL v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  float v14;
  double v15;
  turi::thread_pool *v16;
  uint64_t v17;
  double v18;
  double v19;
  turi::thread *v20;
  unint64_t v21;
  uint64_t v22[4];
  _BYTE v23[192];
  uint64_t v24;

  v5 = (unint64_t)a1;
  v24 = *MEMORY[0x24BDAC8D0];
  instance = (turi::thread_pool *)turi::thread_pool::get_instance(a1);
  v7 = (turi::thread *)turi::thread_pool::size(instance);
  tls_data = (turi::thread_pool *)turi::thread::get_tls_data(v7);
  if (*((_BYTE *)tls_data + 8))
    v9 = 0;
  else
    v9 = (unint64_t)v7 > 1;
  if (v9)
  {
    v16 = (turi::thread_pool *)turi::thread_pool::get_instance(tls_data);
    turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)v23, v16);
    v17 = 0;
    v18 = (double)(a2 - v5) / (double)(unint64_t)v7;
    v19 = (double)v5;
    do
    {
      v20 = (turi::thread *)(v17 + 1);
      v21 = (unint64_t)(v19 + v18 * (double)(unint64_t)(v17 + 1));
      if ((turi::thread *)v17 == (turi::thread *)((char *)v7 - 1))
        v21 = a2;
      v22[2] = (unint64_t)(v19 + v18 * (double)(unint64_t)v17);
      v22[3] = v21;
      v22[0] = (uint64_t)boost::function0<void>::assign_to<void turi::parallel_for<void xgboost_old::tree::BaseMaker::GetNodeStats<xgboost_old::tree::SketchMaker::SKStats>(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix const&,xgboost_old::tree::RegTree const&,xgboost_old::BoosterInfo const&,std::vector<std::vector<xgboost_old::tree::SketchMaker::SKStats>> *,std::vector<xgboost_old::tree::SketchMaker::SKStats>*)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::tree::SketchMaker::SKStats const&)::{lambda(void)#1}>(xgboost_old::tree::SketchMaker::SKStats)::stored_vtable
             + 1;
      v22[1] = a3;
      turi::parallel_task_queue::launch((uint64_t)v23, (uint64_t)v22, v17);
      boost::function0<void>::~function0(v22);
      v17 = (uint64_t)v20;
    }
    while (v20 != v7);
    turi::parallel_task_queue::join((turi::parallel_task_queue *)v23);
    turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)v23);
  }
  else if (a2 > v5)
  {
    do
    {
      v10 = *(unsigned int *)(**(_QWORD **)a3 + 4 * v5);
      v11 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 8) + 128) + 4 * v10);
      tls_data = (turi::thread_pool *)turi::thread::get_tls_data(tls_data);
      if ((v11 & 0x80000000) == 0)
      {
        v12 = *(_QWORD *)(**(_QWORD **)(a3 + 16) + 24 * *(int *)tls_data);
        v13 = **(_QWORD **)(a3 + 24);
        v14 = *(float *)(v13 + 8 * v10);
        v15 = v14;
        if (v14 >= 0.0)
          *(double *)(v12 + 24 * v11) = *(double *)(v12 + 24 * v11) + v15;
        else
          *(double *)(v12 + 24 * v11 + 8) = *(double *)(v12 + 24 * v11 + 8) - v15;
        *(double *)(v12 + 24 * v11 + 16) = *(double *)(v12 + 24 * v11 + 16) + *(float *)(v13 + 8 * v10 + 4);
      }
      ++v5;
    }
    while (a2 != v5);
  }
}

void sub_2183DFFA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)va);
  _Unwind_Resume(a1);
}

void std::vector<std::vector<xgboost_old::tree::SketchMaker::SKStats>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  size_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    v19 = v4;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>(v4, v11);
    else
      v12 = 0;
    v15 = v12;
    v16 = &v12[24 * v8];
    v18 = &v12[24 * v11];
    v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    v17 = &v16[v14];
    std::vector<std::vector<xgboost_old::tree::SketchMaker::SKStats>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)&v15);
  }
}

void sub_2183E011C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<xgboost_old::tree::SketchMaker::SKStats>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<xgboost_old::tree::SketchMaker::SKStats>>,std::reverse_iterator<std::vector<xgboost_old::tree::SketchMaker::SKStats>*>,std::reverse_iterator<std::vector<xgboost_old::tree::SketchMaker::SKStats>*>,std::reverse_iterator<std::vector<xgboost_old::tree::SketchMaker::SKStats>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<xgboost_old::tree::SketchMaker::SKStats>>,std::reverse_iterator<std::vector<xgboost_old::tree::SketchMaker::SKStats>*>,std::reverse_iterator<std::vector<xgboost_old::tree::SketchMaker::SKStats>*>,std::reverse_iterator<std::vector<xgboost_old::tree::SketchMaker::SKStats>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<xgboost_old::tree::SketchMaker::SKStats>>,std::reverse_iterator<std::vector<xgboost_old::tree::SketchMaker::SKStats>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<xgboost_old::tree::SketchMaker::SKStats>>,std::reverse_iterator<std::vector<xgboost_old::tree::SketchMaker::SKStats>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::vector<xgboost_old::tree::SketchMaker::SKStats>::__append(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  __int128 v16;

  v4 = (uint64_t)(a1 + 2);
  v5 = a1[2];
  v6 = a1[1];
  if (0xAAAAAAAAAAAAAAABLL * ((v5 - v6) >> 3) >= a2)
  {
    a1[1] = &v6[24 * (24 * a2 / 0x18)];
  }
  else
  {
    v7 = *a1;
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v6 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - v7) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    if (v11)
    {
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>(v4, v11);
      v7 = *a1;
      v6 = a1[1];
    }
    else
    {
      v12 = 0;
    }
    v13 = &v12[24 * v8];
    v14 = &v12[24 * v11];
    v15 = &v13[24 * (24 * a2 / 0x18)];
    if (v6 != v7)
    {
      do
      {
        v16 = *(_OWORD *)(v6 - 24);
        *((_QWORD *)v13 - 1) = *((_QWORD *)v6 - 1);
        *(_OWORD *)(v13 - 24) = v16;
        v13 -= 24;
        v6 -= 24;
      }
      while (v6 != v7);
      v7 = *a1;
    }
    *a1 = v13;
    a1[1] = v15;
    a1[2] = v14;
    if (v7)
      operator delete(v7);
  }
}

__n128 std::__function::__func<void xgboost_old::tree::BaseMaker::GetNodeStats<xgboost_old::tree::SketchMaker::SKStats>(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix const&,xgboost_old::tree::RegTree const&,xgboost_old::BoosterInfo const&,std::vector<std::vector<xgboost_old::tree::SketchMaker::SKStats>> *,std::vector<xgboost_old::tree::SketchMaker::SKStats>*)::{lambda(unsigned long,unsigned long)#1},std::allocator<void xgboost_old::tree::BaseMaker::GetNodeStats<xgboost_old::tree::SketchMaker::SKStats>(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix const&,xgboost_old::tree::RegTree const&,xgboost_old::BoosterInfo const&,std::vector<std::vector<xgboost_old::tree::SketchMaker::SKStats>> *,std::vector<xgboost_old::tree::SketchMaker::SKStats>*)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &unk_24D93EC20;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<void xgboost_old::tree::BaseMaker::GetNodeStats<xgboost_old::tree::SketchMaker::SKStats>(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix const&,xgboost_old::tree::RegTree const&,xgboost_old::BoosterInfo const&,std::vector<std::vector<xgboost_old::tree::SketchMaker::SKStats>> *,std::vector<xgboost_old::tree::SketchMaker::SKStats>*)::{lambda(unsigned long,unsigned long)#1},std::allocator<void xgboost_old::tree::BaseMaker::GetNodeStats<xgboost_old::tree::SketchMaker::SKStats>(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix const&,xgboost_old::tree::RegTree const&,xgboost_old::BoosterInfo const&,std::vector<std::vector<xgboost_old::tree::SketchMaker::SKStats>> *,std::vector<xgboost_old::tree::SketchMaker::SKStats>*)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24D93EC20;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<void xgboost_old::tree::BaseMaker::GetNodeStats<xgboost_old::tree::SketchMaker::SKStats>(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix const&,xgboost_old::tree::RegTree const&,xgboost_old::BoosterInfo const&,std::vector<std::vector<xgboost_old::tree::SketchMaker::SKStats>> *,std::vector<xgboost_old::tree::SketchMaker::SKStats>*)::{lambda(unsigned long,unsigned long)#1},std::allocator<void xgboost_old::tree::BaseMaker::GetNodeStats<xgboost_old::tree::SketchMaker::SKStats>(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix const&,xgboost_old::tree::RegTree const&,xgboost_old::BoosterInfo const&,std::vector<std::vector<xgboost_old::tree::SketchMaker::SKStats>> *,std::vector<xgboost_old::tree::SketchMaker::SKStats>*)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::operator()(uint64_t a1, uint64_t *a2)
{
  std::__invoke_void_return_wrapper<void,true>::__call[abi:ne180100]<void xgboost_old::tree::BaseMaker::GetNodeStats<xgboost_old::tree::SketchMaker::SKStats>(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix const&,xgboost_old::tree::RegTree const&,xgboost_old::BoosterInfo const&,std::vector<std::vector<xgboost_old::tree::SketchMaker::SKStats>> *,std::vector<xgboost_old::tree::SketchMaker::SKStats>*)::{lambda(unsigned long,unsigned long)#1} &,unsigned long,unsigned long>(a1 + 8, a2);
}

uint64_t std::__function::__func<void xgboost_old::tree::BaseMaker::GetNodeStats<xgboost_old::tree::SketchMaker::SKStats>(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix const&,xgboost_old::tree::RegTree const&,xgboost_old::BoosterInfo const&,std::vector<std::vector<xgboost_old::tree::SketchMaker::SKStats>> *,std::vector<xgboost_old::tree::SketchMaker::SKStats>*)::{lambda(unsigned long,unsigned long)#1},std::allocator<void xgboost_old::tree::BaseMaker::GetNodeStats<xgboost_old::tree::SketchMaker::SKStats>(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix const&,xgboost_old::tree::RegTree const&,xgboost_old::BoosterInfo const&,std::vector<std::vector<xgboost_old::tree::SketchMaker::SKStats>> *,std::vector<xgboost_old::tree::SketchMaker::SKStats>*)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void xgboost_old::tree::BaseMaker::GetNodeStats<xgboost_old::tree::SketchMaker::SKStats>(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix const&,xgboost_old::tree::RegTree const&,xgboost_old::BoosterInfo const&,std::vector<std::vector<xgboost_old::tree::SketchMaker::SKStats>> *,std::vector<xgboost_old::tree::SketchMaker::SKStats>*)::{lambda(unsigned long,unsigned long)#1},std::allocator<void xgboost_old::tree::BaseMaker::GetNodeStats<xgboost_old::tree::SketchMaker::SKStats>(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix const&,xgboost_old::tree::RegTree const&,xgboost_old::BoosterInfo const&,std::vector<std::vector<xgboost_old::tree::SketchMaker::SKStats>> *,std::vector<xgboost_old::tree::SketchMaker::SKStats>*)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::target_type()
{
}

void std::__invoke_void_return_wrapper<void,true>::__call[abi:ne180100]<void xgboost_old::tree::BaseMaker::GetNodeStats<xgboost_old::tree::SketchMaker::SKStats>(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix const&,xgboost_old::tree::RegTree const&,xgboost_old::BoosterInfo const&,std::vector<std::vector<xgboost_old::tree::SketchMaker::SKStats>> *,std::vector<xgboost_old::tree::SketchMaker::SKStats>*)::{lambda(unsigned long,unsigned long)#1} &,unsigned long,unsigned long>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  __int128 v11;
  uint64_t v12;

  v3 = *a2;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = **(_QWORD **)a1 + 24 * *a2;
  v7 = *(int *)(v4 + 100);
  v11 = 0uLL;
  v12 = 0;
  std::vector<xgboost_old::tree::SketchMaker::SKStats>::resize(v6, v7, &v11);
  v8 = *(_QWORD *)(v5 + 80);
  if (*(_QWORD *)(v5 + 88) != v8)
  {
    v9 = 0;
    do
    {
      v10 = (_QWORD *)(*(_QWORD *)(**(_QWORD **)a1 + 24 * v3) + 24 * *(unsigned int *)(v8 + 4 * v9));
      *v10 = 0;
      v10[1] = 0;
      v10[2] = 0;
      ++v9;
      v8 = *(_QWORD *)(v5 + 80);
    }
    while (v9 < (*(_QWORD *)(v5 + 88) - v8) >> 2);
  }
}

void std::vector<xgboost_old::tree::SketchMaker::SKStats>::resize(uint64_t a1, unint64_t a2, __int128 *a3)
{
  unint64_t v3;
  BOOL v4;
  unint64_t v5;

  v3 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3);
  v4 = a2 >= v3;
  v5 = a2 - v3;
  if (v5 != 0 && v4)
  {
    std::vector<xgboost_old::tree::SketchMaker::SKStats>::__append((void **)a1, v5, a3);
  }
  else if (!v4)
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 24 * a2;
  }
}

void std::vector<xgboost_old::tree::SketchMaker::SKStats>::__append(void **a1, unint64_t a2, __int128 *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  _QWORD *v15;
  uint64_t v16;
  __int128 v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  __int128 v22;
  char *v23;
  char *v24;
  char *v25;
  __int128 v26;

  v8 = a1[2];
  v6 = (uint64_t)(a1 + 2);
  v7 = v8;
  v9 = *(_QWORD **)(v6 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - (_BYTE *)v9) >> 3) >= a2)
  {
    if (a2)
    {
      v15 = &v9[3 * a2];
      v16 = 24 * a2;
      do
      {
        v17 = *a3;
        v9[2] = *((_QWORD *)a3 + 2);
        *(_OWORD *)v9 = v17;
        v9 += 3;
        v16 -= 24;
      }
      while (v16);
      v9 = v15;
    }
    a1[1] = v9;
  }
  else
  {
    v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)v9 - (_BYTE *)*a1) >> 3);
    v11 = v10 + a2;
    if (v10 + a2 > 0xAAAAAAAAAAAAAAALL)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v12 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (_BYTE *)*a1) >> 3);
    if (2 * v12 > v11)
      v11 = 2 * v12;
    if (v12 >= 0x555555555555555)
      v13 = 0xAAAAAAAAAAAAAAALL;
    else
      v13 = v11;
    if (v13)
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>(v6, v13);
    else
      v14 = 0;
    v18 = &v14[24 * v10];
    v19 = &v18[24 * a2];
    v20 = 24 * a2;
    v21 = v18;
    do
    {
      v22 = *a3;
      *((_QWORD *)v21 + 2) = *((_QWORD *)a3 + 2);
      *(_OWORD *)v21 = v22;
      v21 += 24;
      v20 -= 24;
    }
    while (v20);
    v23 = &v14[24 * v13];
    v25 = (char *)*a1;
    v24 = (char *)a1[1];
    if (v24 != *a1)
    {
      do
      {
        v26 = *(_OWORD *)(v24 - 24);
        *((_QWORD *)v18 - 1) = *((_QWORD *)v24 - 1);
        *(_OWORD *)(v18 - 24) = v26;
        v18 -= 24;
        v24 -= 24;
      }
      while (v24 != v25);
      v24 = (char *)*a1;
    }
    *a1 = v18;
    a1[1] = v19;
    a1[2] = v23;
    if (v24)
      operator delete(v24);
  }
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<void xgboost_old::tree::BaseMaker::GetNodeStats<xgboost_old::tree::SketchMaker::SKStats>(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix const&,xgboost_old::tree::RegTree const&,xgboost_old::BoosterInfo const&,std::vector<std::vector<xgboost_old::tree::SketchMaker::SKStats>> *,std::vector<xgboost_old::tree::SketchMaker::SKStats>*)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::tree::SketchMaker::SKStats const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v4;
  __int128 v5;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x80000002186FCE71 & 0x7FFFFFFFFFFFFFFFLL)
        || (result = strcmp((const char *)result, (const char *)(0x80000002186FCE71 & 0x7FFFFFFFFFFFFFFFLL)),
            !(_DWORD)result))
      {
        *(_QWORD *)a2 = v4;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
    }
  }
  else
  {
    v5 = *(_OWORD *)result;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

_QWORD *boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<void xgboost_old::tree::BaseMaker::GetNodeStats<xgboost_old::tree::SketchMaker::SKStats>(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix const&,xgboost_old::tree::RegTree const&,xgboost_old::BoosterInfo const&,std::vector<std::vector<xgboost_old::tree::SketchMaker::SKStats>> *,std::vector<xgboost_old::tree::SketchMaker::SKStats>*)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::tree::SketchMaker::SKStats const&)::{lambda(void)#1},void>::invoke(_QWORD *result)
{
  unint64_t v1;
  _QWORD *v2;
  _QWORD **v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  float v8;
  double v9;

  v1 = result[1];
  if (v1 < result[2])
  {
    v2 = result;
    do
    {
      v3 = (_QWORD **)*v2;
      v4 = *(unsigned int *)(**(_QWORD **)*v2 + 4 * v1);
      v5 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*v2 + 8) + 128) + 4 * v4);
      result = turi::thread::get_tls_data((turi::thread *)result);
      if ((v5 & 0x80000000) == 0)
      {
        v6 = *(_QWORD *)(*v3[2] + 24 * *(int *)result);
        v7 = *v3[3];
        v8 = *(float *)(v7 + 8 * v4);
        v9 = v8;
        if (v8 >= 0.0)
          *(double *)(v6 + 24 * v5) = *(double *)(v6 + 24 * v5) + v9;
        else
          *(double *)(v6 + 24 * v5 + 8) = *(double *)(v6 + 24 * v5 + 8) - v9;
        *(double *)(v6 + 24 * v5 + 16) = *(double *)(v6 + 24 * v5 + 16) + *(float *)(v7 + 8 * v4 + 4);
      }
      ++v1;
    }
    while (v1 < v2[2]);
  }
  return result;
}

void turi::parallel_for<xgboost_old::tree::SketchMaker::BuildSketch(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#1}>(turi::thread_pool *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v5;
  turi::thread_pool *instance;
  turi::thread *v7;
  turi::thread_pool *tls_data;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  turi::thread_pool *v18;
  uint64_t v19;
  double v20;
  double v21;
  turi::thread *v22;
  unint64_t v23;
  uint64_t v24[4];
  _QWORD v25[25];

  v5 = (unint64_t)a1;
  v25[24] = *MEMORY[0x24BDAC8D0];
  instance = (turi::thread_pool *)turi::thread_pool::get_instance(a1);
  v7 = (turi::thread *)turi::thread_pool::size(instance);
  tls_data = (turi::thread_pool *)turi::thread::get_tls_data(v7);
  if (*((_BYTE *)tls_data + 8))
    v9 = 0;
  else
    v9 = (unint64_t)v7 > 1;
  if (v9)
  {
    v18 = (turi::thread_pool *)turi::thread_pool::get_instance(tls_data);
    turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)v25, v18);
    v19 = 0;
    v20 = (double)(a2 - v5) / (double)(unint64_t)v7;
    v21 = (double)v5;
    do
    {
      v22 = (turi::thread *)(v19 + 1);
      v23 = (unint64_t)(v21 + v20 * (double)(unint64_t)(v19 + 1));
      if ((turi::thread *)v19 == (turi::thread *)((char *)v7 - 1))
        v23 = a2;
      v24[2] = (unint64_t)(v21 + v20 * (double)(unint64_t)v19);
      v24[3] = v23;
      v24[0] = (uint64_t)boost::function0<void>::assign_to<void turi::parallel_for<xgboost_old::tree::SketchMaker::BuildSketch(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::tree::SketchMaker::BuildSketch(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#1} const&)::{lambda(void)#1}>(xgboost_old::tree::SketchMaker::BuildSketch(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#1})::stored_vtable
             + 1;
      v24[1] = a3;
      turi::parallel_task_queue::launch((uint64_t)v25, (uint64_t)v24, v19);
      boost::function0<void>::~function0(v24);
      v19 = (uint64_t)v22;
    }
    while (v22 != v7);
    turi::parallel_task_queue::join((turi::parallel_task_queue *)v25);
    turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)v25);
  }
  else if (a2 > v5)
  {
    v10 = 16 * v5;
    do
    {
      v11 = *(_QWORD *)a3;
      v12 = *(_DWORD *)turi::thread::get_tls_data(tls_data);
      v13 = *(uint64_t **)(a3 + 8);
      v14 = *(_QWORD *)(a3 + 16);
      v15 = (uint64_t *)(*(_QWORD *)(v14 + 16) + v10);
      v17 = *v15;
      v16 = v15[1];
      v25[0] = v17;
      v25[1] = v16;
      xgboost_old::tree::SketchMaker::UpdateSketchCol(v11, v13, v25, *(_QWORD *)(a3 + 24), (uint64_t *)(v11 + 200), *(_DWORD *)(*(_QWORD *)(v14 + 8) + 4 * v5++), **(_QWORD **)(a3 + 32) == v16, (uint64_t *)(*(_QWORD *)(v11 + 152) + 24 * v12));
      v10 += 16;
    }
    while (a2 != v5);
  }
}

void sub_2183E09F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)va);
  _Unwind_Resume(a1);
}

void xgboost_old::tree::SketchMaker::UpdateSketchCol(uint64_t a1, uint64_t *a2, _DWORD *a3, uint64_t a4, uint64_t *a5, int a6, char a7, uint64_t *a8)
{
  const char *v15;
  unsigned int *v16;
  unsigned int *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  double *v33;
  double v34;
  float v35;
  float v36;
  float v37;
  uint64_t v38;
  unsigned int *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  int v44;
  float v45;
  double v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  double v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  float v55;
  const char *v56;
  const char *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t i;
  uint64_t v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  float v73;
  int v74;
  xgboost_old::tree::BaseMaker::SketchEntry *v75;
  float v76;
  const char *v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  double v85;
  float v86;
  float v87;
  float v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v93;

  if (!a3[2])
    return;
  std::vector<xgboost_old::tree::BaseMaker::SketchEntry>::resize((uint64_t)a8, 3 * *(int *)(a4 + 100));
  v16 = *(unsigned int **)(a1 + 80);
  v17 = *(unsigned int **)(a1 + 88);
  if (v17 == v16)
  {
    if ((a7 & 1) != 0)
      goto LABEL_22;
LABEL_14:
    v38 = a3[2];
    if ((_DWORD)v38)
    {
      v39 = *(unsigned int **)a3;
      v40 = *(_QWORD *)(a1 + 128);
      v41 = *a2;
      do
      {
        v43 = *v39;
        v39 += 2;
        v42 = v43;
        v44 = *(_DWORD *)(v40 + 4 * v43);
        if ((v44 & 0x80000000) == 0)
        {
          v45 = *(float *)(v41 + 8 * v42);
          v46 = v45;
          v47 = 3 * v44;
          v48 = *a8;
          if (v45 >= 0.0)
          {
            v49 = 48 * v47;
            v50 = *(double *)(*a8 + v49) + v46;
          }
          else
          {
            v49 = 48 * (v47 + 1);
            v50 = *(double *)(*a8 + v49) - v46;
          }
          *(double *)(v48 + v49) = v50;
          *(double *)(v48 + 48 * (v47 + 2)) = *(double *)(v48 + 48 * (v47 + 2)) + *(float *)(v41 + 8 * v42 + 4);
        }
        --v38;
      }
      while (v38);
    }
    goto LABEL_22;
  }
  v18 = 0;
  v19 = v17 - v16;
  v20 = *(_QWORD *)(a1 + 104);
  v21 = *a8;
  v22 = *(_QWORD *)(a1 + 336);
  if (v19 <= 1)
    v19 = 1;
  v23 = 3 * *(_DWORD *)(a4 + 112);
  do
  {
    v24 = 0;
    v25 = v16[v18];
    v26 = *(_DWORD *)(v20 + 4 * v25);
    v15 = (const char *)(3 * v25);
    v27 = 3 * a6 + v23 * v26;
    do
    {
      v28 = (_QWORD *)(v21 + 48 * ((_DWORD)v15 + v24));
      *v28 = 0;
      v28[5] = v22 + 136 * (v27 + v24++);
    }
    while (v24 != 3);
    ++v18;
  }
  while (v18 != v19);
  if ((a7 & 1) == 0)
    goto LABEL_14;
  v29 = *a5;
  v30 = *a8;
  v31 = v16;
  do
  {
    v32 = *v31++;
    v33 = (double *)(v29 + 24 * v32);
    v34 = v33[1];
    v35 = *v33;
    *(double *)(v30 + 144 * v32) = v35;
    v36 = v34;
    *(double *)(v30 + 48 * (3 * v32 + 1)) = v36;
    v37 = v33[2];
    *(double *)(v30 + 48 * (3 * v32 + 2)) = v37;
    --v19;
  }
  while (v19);
LABEL_22:
  if (*(float *)(*(_QWORD *)a3 + 4) == *(float *)(*(_QWORD *)a3 + 8 * (a3[2] - 1) + 4))
  {
    if (v17 != v16)
    {
      v51 = 0;
      do
      {
        v52 = 0;
        v53 = 144 * (int)v16[v51];
        do
        {
          v54 = *a8 + v53 + v52;
          v55 = *(double *)v54;
          xgboost_old::utils::QuantileSketchTemplate<float,float,xgboost_old::utils::WXQSummary<float,float>>::Push(*(uint64_t **)(v54 + 40), *(float *)(*(_QWORD *)a3 + 4), v55);
          v52 += 48;
        }
        while (v52 != 144);
        ++v51;
        v16 = *(unsigned int **)(a1 + 80);
      }
      while (v51 < (uint64_t)(*(_QWORD *)(a1 + 88) - (_QWORD)v16) >> 2);
    }
  }
  else
  {
    v56 = (const char *)(float)(*(float *)(a1 + 60) / *(float *)(a1 + 56));
    xgboost_old::utils::Check((_DWORD)v56 != 0, "sketch_ratio/sketch_eps must be bigger than 1", v15);
    v58 = *(_QWORD *)(a1 + 88);
    v93 = a1;
    if (v58 == *(_QWORD *)(a1 + 80))
    {
      v65 = *(_QWORD *)(a1 + 88);
    }
    else
    {
      v59 = 0;
      v58 = *(_QWORD *)(a1 + 80);
      do
      {
        v60 = 0;
        v61 = 144 * *(int *)(v58 + 4 * v59);
        do
        {
          v62 = (_QWORD *)(*a8 + v61 + v60);
          v62[4] = 0xBFF0000000000000;
          v62[1] = 0;
          v62[2] = 0;
          v63 = (_QWORD *)v62[5];
          if (((_DWORD)v56 + 1) > (unint64_t)((uint64_t)(v63[15] - v63[14]) >> 4))
          {
            std::vector<xgboost_old::utils::WQSummary<float,float>::Entry,std::allocator<xgboost_old::utils::WQSummary<float,float>::Entry>>::resize((uint64_t)(v63 + 14), ((_DWORD)v56 + 1));
            if (v63[15] == v63[14])
              v64 = 0;
            else
              v64 = v63[14];
            v63[12] = v64;
            v63 = (_QWORD *)v62[5];
          }
          v63[13] = 0;
          v60 += 48;
        }
        while (v60 != 144);
        ++v59;
        a1 = v93;
        v58 = *(_QWORD *)(v93 + 80);
        v65 = *(_QWORD *)(v93 + 88);
      }
      while (v59 < (v65 - v58) >> 2);
    }
    v66 = a3[2];
    if ((_DWORD)v66)
    {
      v67 = 0;
      for (i = 0; i < v66; ++i)
      {
        v69 = *(_QWORD *)a3;
        v70 = *(unsigned int *)(*(_QWORD *)a3 + v67);
        v71 = *(_DWORD *)(*(_QWORD *)(a1 + 128) + 4 * v70);
        if ((v71 & 0x80000000) == 0)
        {
          v72 = *a2;
          v73 = *(float *)(*a2 + 8 * v70);
          v74 = 3 * v71;
          if (v73 >= 0.0)
          {
            v75 = (xgboost_old::tree::BaseMaker::SketchEntry *)(*a8 + 48 * v74);
            v76 = *(float *)(v69 + v67 + 4);
          }
          else
          {
            v75 = (xgboost_old::tree::BaseMaker::SketchEntry *)(*a8 + 48 * (v74 + 1));
            v76 = *(float *)(v69 + v67 + 4);
            v73 = -v73;
          }
          xgboost_old::tree::BaseMaker::SketchEntry::Push(v75, v76, v73, v56, v57);
          xgboost_old::tree::BaseMaker::SketchEntry::Push((xgboost_old::tree::BaseMaker::SketchEntry *)(*a8 + 48 * (v74 + 2)), *(float *)(*(_QWORD *)a3 + v67 + 4), *(float *)(v72 + 8 * v70 + 4), v56, v77);
          v66 = a3[2];
          a1 = v93;
        }
        v67 += 8;
      }
      v58 = *(_QWORD *)(a1 + 80);
      v65 = *(_QWORD *)(a1 + 88);
    }
    if (v65 != v58)
    {
      v78 = 0;
      do
      {
        v79 = 0;
        v80 = 144 * *(int *)(v58 + 4 * v78);
        do
        {
          v81 = *a8;
          v82 = *a8 + v80 + v79;
          v83 = *(_QWORD *)(v82 + 40);
          v84 = *(_QWORD *)(v83 + 104);
          if (!v84 || *(float *)(v81 + v80 + v79 + 24) > *(float *)(*(_QWORD *)(v83 + 96) + 16 * v84 - 4))
          {
            v85 = *(double *)(v82 + 8) + *(double *)(v82 + 16);
            xgboost_old::utils::Assert(v84 <= (unint64_t)v56, "Finalize: invalid maximum size, max_size=%zu, stemp.size=%u", v57, v84, v56);
            v86 = *(double *)(v82 + 8);
            v87 = v85;
            v88 = *(double *)(v82 + 16);
            v89 = *(_DWORD *)(v81 + v80 + v79 + 24);
            v83 = *(_QWORD *)(v82 + 40);
            v90 = *(_QWORD *)(v83 + 104);
            v91 = *(_QWORD *)(v83 + 96) + 16 * v90;
            *(float *)v91 = v86;
            *(float *)(v91 + 4) = v87;
            *(float *)(v91 + 8) = v88;
            *(_DWORD *)(v91 + 12) = v89;
            *(_QWORD *)(v83 + 104) = v90 + 1;
          }
          xgboost_old::utils::QuantileSketchTemplate<float,float,xgboost_old::utils::WXQSummary<float,float>>::PushTemp(v83);
          v79 += 48;
        }
        while (v79 != 144);
        ++v78;
        v58 = *(_QWORD *)(a1 + 80);
      }
      while (v78 < (*(_QWORD *)(a1 + 88) - v58) >> 2);
    }
  }
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<xgboost_old::tree::SketchMaker::BuildSketch(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::tree::SketchMaker::BuildSketch(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#1} const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v4;
  __int128 v5;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x80000002186FCF7ALL & 0x7FFFFFFFFFFFFFFFLL)
        || (result = strcmp((const char *)result, (const char *)(0x80000002186FCF7ALL & 0x7FFFFFFFFFFFFFFFLL)),
            !(_DWORD)result))
      {
        *(_QWORD *)a2 = v4;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
    }
  }
  else
  {
    v5 = *(_OWORD *)result;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

void boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<xgboost_old::tree::SketchMaker::BuildSketch(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::tree::SketchMaker::BuildSketch(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#1} const&)::{lambda(void)#1},void>::invoke(uint64_t **a1)
{
  unint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  int v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[2];

  v1 = (unint64_t)a1[1];
  if (v1 < (unint64_t)a1[2])
  {
    v3 = 16 * v1;
    do
    {
      v4 = *a1;
      v5 = **a1;
      v6 = *(_DWORD *)turi::thread::get_tls_data((turi::thread *)a1);
      v7 = (uint64_t *)v4[1];
      v8 = v4[2];
      v9 = (uint64_t *)(*(_QWORD *)(v8 + 16) + v3);
      v11 = *v9;
      v10 = v9[1];
      v12[0] = v11;
      v12[1] = v10;
      xgboost_old::tree::SketchMaker::UpdateSketchCol(v5, v7, v12, v4[3], (uint64_t *)(v5 + 200), *(_DWORD *)(*(_QWORD *)(v8 + 8) + 4 * v1++), *(_QWORD *)v4[4] == v10, (uint64_t *)(*(_QWORD *)(v5 + 152) + 24 * v6));
      v3 += 16;
    }
    while (v1 < (unint64_t)a1[2]);
  }
}

_QWORD *std::vector<xgboost_old::tree::SketchMaker::SKStats>::vector(_QWORD *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::string>::__vallocate[abi:ne180100](a1, a2);
    a1[1] += 24 * (24 * a2 / 0x18);
  }
  return a1;
}

void sub_2183E10C0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void turi::parallel_for<xgboost_old::tree::SketchMaker::FindSplit(int,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,xgboost_old::tree::RegTree *)::{lambda(unsigned long)#1}>(turi::thread_pool *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v5;
  turi::thread_pool *instance;
  turi::thread *v7;
  turi::thread_pool *tls_data;
  const char *v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  turi::thread_pool *v16;
  uint64_t v17;
  double v18;
  double v19;
  turi::thread *v20;
  unint64_t v21;
  uint64_t v22[4];
  _BYTE v23[192];
  uint64_t v24;

  v5 = (unint64_t)a1;
  v24 = *MEMORY[0x24BDAC8D0];
  instance = (turi::thread_pool *)turi::thread_pool::get_instance(a1);
  v7 = (turi::thread *)turi::thread_pool::size(instance);
  tls_data = (turi::thread_pool *)turi::thread::get_tls_data(v7);
  if (*((_BYTE *)tls_data + 8))
    v10 = 0;
  else
    v10 = (unint64_t)v7 > 1;
  if (v10)
  {
    v16 = (turi::thread_pool *)turi::thread_pool::get_instance(tls_data);
    turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)v23, v16);
    v17 = 0;
    v18 = (double)(a2 - v5) / (double)(unint64_t)v7;
    v19 = (double)v5;
    do
    {
      v20 = (turi::thread *)(v17 + 1);
      v21 = (unint64_t)(v19 + v18 * (double)(unint64_t)(v17 + 1));
      if ((turi::thread *)v17 == (turi::thread *)((char *)v7 - 1))
        v21 = a2;
      v22[2] = (unint64_t)(v19 + v18 * (double)(unint64_t)v17);
      v22[3] = v21;
      v22[0] = (uint64_t)boost::function0<void>::assign_to<void turi::parallel_for<xgboost_old::tree::SketchMaker::FindSplit(int,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,xgboost_old::tree::RegTree *)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::tree::SketchMaker::FindSplit(int,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,xgboost_old::tree::RegTree *)::{lambda(unsigned long)#1} const&)::{lambda(void)#1}>(xgboost_old::tree::SketchMaker::FindSplit(int,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,xgboost_old::tree::RegTree *)::{lambda(unsigned long)#1})::stored_vtable
             + 1;
      v22[1] = a3;
      turi::parallel_task_queue::launch((uint64_t)v23, (uint64_t)v22, v17);
      boost::function0<void>::~function0(v22);
      v17 = (uint64_t)v20;
    }
    while (v20 != v7);
    turi::parallel_task_queue::join((turi::parallel_task_queue *)v23);
    turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)v23);
  }
  else if (a2 > v5)
  {
    do
    {
      v11 = *(_QWORD *)a3;
      v12 = *(int *)(*(_QWORD *)(*(_QWORD *)a3 + 80) + 4 * v5);
      xgboost_old::utils::Assert(*(_DWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 104) + 4 * v12) == (_DWORD)v5, "node2workindex inconsistent", v9);
      if (**(_DWORD **)(a3 + 16))
      {
        v13 = 0;
        v14 = **(_QWORD **)(a3 + 8) + 12 * v5;
        do
        {
          v15 = 3 * (v13 + v5 * *(_DWORD *)(**(_QWORD **)(a3 + 24) + 112));
          xgboost_old::tree::SketchMaker::EnumerateSplit((float *)v11, (uint64_t *)(*(_QWORD *)(v11 + 224) + 40 * v15), (uint64_t *)(*(_QWORD *)(v11 + 224) + 40 * (v15 + 1)), (uint64_t *)(*(_QWORD *)(v11 + 224) + 40 * (v15 + 2)), (double *)(*(_QWORD *)(v11 + 200) + 24 * (int)v12), v13++, v14);
        }
        while (v13 < **(_DWORD **)(a3 + 16));
      }
      ++v5;
    }
    while (v5 != a2);
  }
}

void sub_2183E12D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)va);
  _Unwind_Resume(a1);
}

void xgboost_old::tree::SketchMaker::EnumerateSplit(float *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, double *a5, unsigned int a6, uint64_t a7)
{
  double v12;
  double v13;
  double v14;
  float v15;
  float v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  float *v27;
  unint64_t v28;
  float *v29;
  float *v30;
  float *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  float *v37;
  int v38;
  unint64_t v39;
  float *v40;
  float *v41;
  float *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  float *v48;
  int v49;
  unint64_t v50;
  float *v51;
  float *v52;
  float *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  float *v59;
  int v60;
  float *v61;
  uint64_t v62;
  unint64_t v63;
  float v64;
  double v65;
  uint64_t v66;
  unint64_t v67;
  float v68;
  double v69;
  uint64_t v70;
  unint64_t v71;
  float v72;
  double v73;
  float *v74;
  float *v75;
  double v76;
  double v77;
  double v78;
  float v79;
  double v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t i;
  float v86;
  float *v87;
  float v88;
  float v89;
  float v90;
  float *v91;
  uint64_t v92;
  float *v93;
  float v94;
  float v95;
  float v96;
  float *v97;
  uint64_t v98;
  float *v99;
  float v100;
  float v101;
  float v102;
  float *v103;
  uint64_t v104;
  double v105;
  double v106;
  float v107;
  double v108;
  double v109;
  double v111;
  BOOL v112;
  double v113;
  double v114;
  float v115;
  float v116;
  double v117;
  double v118;
  double v119;
  double v120;
  double v121;
  double v122;
  double v123;
  double v124;
  double v125;
  double v126;
  double v127;
  float v128;
  float v129;
  double v130;
  double v131;
  double v132;
  double v133;
  double v134;
  double v135;
  double v136;
  double v137;
  double v138;
  double v139;
  float v140;
  _BOOL4 v141;
  double v142;
  double v143;
  double v145;
  double v146;
  double v147;
  double v148;
  double v149;
  float v150;
  float v151;
  double v152;
  double v153;
  double v154;
  double v155;
  double v156;
  double v157;
  double v158;
  double v159;
  double v160;
  double v161;
  double v162;
  float v163;
  float v164;
  double v165;
  double v166;
  double v167;
  double v168;
  double v169;
  double v170;
  double v171;
  double v172;
  double v173;
  double v174;
  float v175;
  _BOOL4 v176;
  float v177;
  double v178;
  double v179;
  double v180;
  double v181;
  float v182;
  float v183;
  double v184;
  double v185;
  double v186;
  double v187;
  double v188;
  double v189;
  double v190;
  double v191;
  double v192;
  double v193;
  double v194;
  float v195;
  float v196;
  double v197;
  double v198;
  double v199;
  double v200;
  double v201;
  double v202;
  double v203;
  double v204;
  double v205;
  double v206;
  float v207;
  _BOOL4 v208;
  float v209;
  void *__p;
  float *v213;
  char *v214;

  if (a4[1])
  {
    v12 = a5[2];
    v13 = 0.0;
    if (v12 >= a1[5])
    {
      v14 = *a5 - a5[1];
      v15 = a1[9];
      v16 = a1[7];
      if (v15 == 0.0)
      {
        if (v16 == 0.0)
        {
          v17 = v14 * v14;
        }
        else
        {
          v20 = v16;
          if (v14 <= v20)
          {
            v21 = 0.0;
            if (v14 < -v20)
              v21 = v14 + v20;
          }
          else
          {
            v21 = v14 - v20;
          }
          v17 = v21 * v21;
        }
        v13 = v17 / (v12 + a1[6]);
      }
      else
      {
        v18 = v16;
        v19 = *a5 - a5[1];
        if (v16 != 0.0)
        {
          if (v14 <= v18)
          {
            v19 = 0.0;
            if (v14 < -v18)
              v19 = v14 + v18;
          }
          else
          {
            v19 = v14 - v18;
          }
        }
        v22 = v12 + a1[6];
        v23 = -v19 / v22;
        if (v23 > v15)
          v23 = v15;
        v24 = (float)-v15;
        if (v23 >= v24)
          v24 = v23;
        v25 = v22 * 0.5 * (v24 * v24) + v14 * v24;
        v26 = v25 + v18 * fabs(v24);
        if (v16 != 0.0)
          v25 = v26;
        v13 = v25 * -2.0;
      }
    }
    __p = 0;
    v213 = 0;
    v214 = 0;
    if (a2[1])
    {
      v27 = 0;
      v28 = 0;
      do
      {
        v29 = (float *)(*a2 + 16 * v28 + 12);
        if (v27 >= (float *)v214)
        {
          v31 = (float *)__p;
          v32 = ((char *)v27 - (_BYTE *)__p) >> 2;
          v33 = v32 + 1;
          if ((unint64_t)(v32 + 1) >> 62)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          v34 = v214 - (_BYTE *)__p;
          if ((v214 - (_BYTE *)__p) >> 1 > v33)
            v33 = v34 >> 1;
          if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFFCLL)
            v35 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v35 = v33;
          if (v35)
          {
            v36 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v214, v35);
            v31 = (float *)__p;
            v27 = v213;
          }
          else
          {
            v36 = 0;
          }
          v37 = (float *)&v36[4 * v32];
          *v37 = *v29;
          v30 = v37 + 1;
          while (v27 != v31)
          {
            v38 = *((_DWORD *)v27-- - 1);
            *((_DWORD *)v37-- - 1) = v38;
          }
          __p = v37;
          v213 = v30;
          v214 = &v36[4 * v35];
          if (v31)
            operator delete(v31);
        }
        else
        {
          *v27 = *v29;
          v30 = v27 + 1;
        }
        v213 = v30;
        ++v28;
        v27 = v30;
      }
      while (v28 < a2[1]);
    }
    else
    {
      v30 = 0;
    }
    if (a3[1])
    {
      v39 = 0;
      do
      {
        v40 = (float *)(*a3 + 16 * v39 + 12);
        if (v30 >= (float *)v214)
        {
          v42 = (float *)__p;
          v43 = ((char *)v30 - (_BYTE *)__p) >> 2;
          v44 = v43 + 1;
          if ((unint64_t)(v43 + 1) >> 62)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          v45 = v214 - (_BYTE *)__p;
          if ((v214 - (_BYTE *)__p) >> 1 > v44)
            v44 = v45 >> 1;
          if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFFCLL)
            v46 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v46 = v44;
          if (v46)
          {
            v47 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v214, v46);
            v42 = (float *)__p;
            v30 = v213;
          }
          else
          {
            v47 = 0;
          }
          v48 = (float *)&v47[4 * v43];
          *v48 = *v40;
          v41 = v48 + 1;
          while (v30 != v42)
          {
            v49 = *((_DWORD *)v30-- - 1);
            *((_DWORD *)v48-- - 1) = v49;
          }
          __p = v48;
          v213 = v41;
          v214 = &v47[4 * v46];
          if (v42)
            operator delete(v42);
        }
        else
        {
          *v30 = *v40;
          v41 = v30 + 1;
        }
        v213 = v41;
        ++v39;
        v30 = v41;
      }
      while (v39 < a3[1]);
    }
    else
    {
      v41 = v30;
    }
    if (a4[1])
    {
      v50 = 0;
      do
      {
        v51 = (float *)(*a4 + 16 * v50 + 12);
        if (v41 >= (float *)v214)
        {
          v53 = (float *)__p;
          v54 = ((char *)v41 - (_BYTE *)__p) >> 2;
          v55 = v54 + 1;
          if ((unint64_t)(v54 + 1) >> 62)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          v56 = v214 - (_BYTE *)__p;
          if ((v214 - (_BYTE *)__p) >> 1 > v55)
            v55 = v56 >> 1;
          if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFFCLL)
            v57 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v57 = v55;
          if (v57)
          {
            v58 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v214, v57);
            v53 = (float *)__p;
            v41 = v213;
          }
          else
          {
            v58 = 0;
          }
          v59 = (float *)&v58[4 * v54];
          *v59 = *v51;
          v52 = v59 + 1;
          while (v41 != v53)
          {
            v60 = *((_DWORD *)v41-- - 1);
            *((_DWORD *)v59-- - 1) = v60;
          }
          __p = v59;
          v213 = v52;
          v214 = &v58[4 * v57];
          if (v53)
            operator delete(v53);
        }
        else
        {
          *v41 = *v51;
          v52 = v41 + 1;
        }
        v213 = v52;
        ++v50;
        v41 = v52;
      }
      while (v50 < a4[1]);
    }
    std::__sort<std::__less<float,float> &,float *>();
    v61 = std::__unique[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<float *>,std::__wrap_iter<float *>,std::__equal_to &>((float *)__p, v213);
    std::vector<float>::resize((uint64_t)&__p, ((char *)v61 - (_BYTE *)__p) >> 2);
    v62 = *a2;
    v63 = a2[1];
    v64 = *(float *)(*a2 + 16 * v63 - 12);
    v65 = v64;
    v66 = *a3;
    v67 = a3[1];
    v68 = *(float *)(*a3 + 16 * v67 - 12);
    v69 = v68;
    v70 = *a4;
    v71 = a4[1];
    v72 = *(float *)(*a4 + 16 * v71 - 12);
    v73 = v72;
    v74 = (float *)__p;
    v75 = v213;
    v76 = *a5;
    v77 = a5[1];
    v78 = a5[2];
    v79 = a1[5];
    v80 = v79;
    if ((unint64_t)((char *)v213 - (_BYTE *)__p) >= 5)
    {
      v81 = 0;
      v82 = 0;
      v83 = 0;
      v84 = ((char *)v213 - (_BYTE *)__p) >> 2;
      if (v84 <= 2)
        v84 = 2;
      for (i = 1; i != v84; ++i)
      {
        v86 = v74[i];
        if (v81 < v63)
        {
          v87 = (float *)(v62 + 12 + 16 * v81);
          while (*v87 < v86)
          {
            ++v81;
            v87 += 4;
            if (v63 == v81)
            {
              v88 = 0.0;
              v81 = v63;
              goto LABEL_95;
            }
          }
        }
        v88 = 0.0;
        if (v81 == v63)
        {
LABEL_95:
          v89 = v64;
          v90 = v64;
        }
        else
        {
          v91 = (float *)(v62 + 16 * v81);
          if (v91[3] == v86)
          {
            v90 = *v91;
            v89 = v91[1];
            v88 = v91[2];
          }
          else
          {
            v88 = 0.0;
            if (v81)
            {
              v92 = v62 + 16 * v81;
              v90 = *(float *)(v92 - 16) + *(float *)(v92 - 8);
              v89 = *(float *)(v92 + 4) - *(float *)(v92 + 8);
            }
            else
            {
              v89 = 0.0;
              v90 = 0.0;
            }
          }
        }
        if (v82 < v67)
        {
          v93 = (float *)(v66 + 12 + 16 * v82);
          while (*v93 < v86)
          {
            ++v82;
            v93 += 4;
            if (v67 == v82)
            {
              v94 = 0.0;
              v82 = v67;
              goto LABEL_107;
            }
          }
        }
        v94 = 0.0;
        if (v82 == v67)
        {
LABEL_107:
          v95 = v68;
          v96 = v68;
        }
        else
        {
          v97 = (float *)(v66 + 16 * v82);
          if (v97[3] == v86)
          {
            v96 = *v97;
            v95 = v97[1];
            v94 = v97[2];
          }
          else
          {
            v94 = 0.0;
            if (v82)
            {
              v98 = v66 + 16 * v82;
              v96 = *(float *)(v98 - 16) + *(float *)(v98 - 8);
              v95 = *(float *)(v98 + 4) - *(float *)(v98 + 8);
            }
            else
            {
              v95 = 0.0;
              v96 = 0.0;
            }
          }
        }
        if (v83 < v71)
        {
          v99 = (float *)(v70 + 12 + 16 * v83);
          while (*v99 < v86)
          {
            ++v83;
            v99 += 4;
            if (v71 == v83)
            {
              v100 = 0.0;
              v83 = v71;
              goto LABEL_119;
            }
          }
        }
        v100 = 0.0;
        if (v83 == v71)
        {
LABEL_119:
          v101 = v72;
          v102 = v72;
        }
        else
        {
          v103 = (float *)(v70 + 16 * v83);
          if (v103[3] == v86)
          {
            v102 = *v103;
            v101 = v103[1];
            v100 = v103[2];
          }
          else
          {
            v100 = 0.0;
            if (v83)
            {
              v104 = v70 + 16 * v83;
              v102 = *(float *)(v104 - 16) + *(float *)(v104 - 8);
              v101 = *(float *)(v104 + 4) - *(float *)(v104 + 8);
            }
            else
            {
              v101 = 0.0;
              v102 = 0.0;
            }
          }
        }
        v105 = (float)((float)((float)(v89 + v90) - v88) * 0.5);
        v106 = (float)((float)((float)(v95 + v96) - v94) * 0.5);
        v107 = (float)((float)(v101 + v102) - v100) * 0.5;
        v108 = v107;
        v109 = v78 - v107;
        if (v107 >= v79 && v109 >= v80)
        {
          v111 = 0.0;
          v112 = v107 < v79;
          v113 = 0.0;
          if (!v112)
          {
            v114 = v105 - v106;
            v115 = a1[9];
            v116 = a1[7];
            if (v115 == 0.0)
            {
              if (v116 == 0.0)
              {
                v117 = v114 * v114;
              }
              else
              {
                v120 = v116;
                if (v114 <= v120)
                {
                  v121 = 0.0;
                  if (v114 < -v120)
                    v121 = v114 + v120;
                }
                else
                {
                  v121 = v114 - v120;
                }
                v117 = v121 * v121;
              }
              v113 = v117 / (v108 + a1[6]);
            }
            else
            {
              v118 = v116;
              v119 = v105 - v106;
              if (v116 != 0.0)
              {
                if (v114 <= v118)
                {
                  v119 = 0.0;
                  if (v114 < -v118)
                    v119 = v114 + v118;
                }
                else
                {
                  v119 = v114 - v118;
                }
              }
              v122 = v108 + a1[6];
              v123 = -v119 / v122;
              if (v123 > v115)
                v123 = v115;
              v124 = (float)-v115;
              if (v123 >= v124)
                v124 = v123;
              v125 = v122 * 0.5 * (v124 * v124) + v114 * v124;
              v126 = v125 + v118 * fabs(v124);
              if (v116 != 0.0)
                v125 = v126;
              v113 = v125 * -2.0;
            }
          }
          if (v109 >= v80)
          {
            v127 = v76 - v105 - (v77 - v106);
            v128 = a1[9];
            v129 = a1[7];
            if (v128 == 0.0)
            {
              if (v129 == 0.0)
              {
                v130 = v127 * v127;
              }
              else
              {
                v133 = v129;
                if (v127 <= v133)
                {
                  v134 = 0.0;
                  if (v127 < -v133)
                    v134 = v127 + v133;
                }
                else
                {
                  v134 = v127 - v133;
                }
                v130 = v134 * v134;
              }
              v111 = v130 / (v109 + a1[6]);
            }
            else
            {
              v131 = v129;
              v132 = v76 - v105 - (v77 - v106);
              if (v129 != 0.0)
              {
                if (v127 <= v131)
                {
                  v132 = 0.0;
                  if (v127 < -v131)
                    v132 = v127 + v131;
                }
                else
                {
                  v132 = v127 - v131;
                }
              }
              v135 = v109 + a1[6];
              v136 = -v132 / v135;
              if (v136 > v128)
                v136 = v128;
              v137 = (float)-v128;
              if (v136 >= v137)
                v137 = v136;
              v138 = v135 * 0.5 * (v137 * v137) + v127 * v137;
              v139 = v138 + v131 * fabs(v137);
              if (v129 != 0.0)
                v138 = v139;
              v111 = v138 * -2.0;
            }
          }
          v140 = v113 + v111 - v13;
          if ((*(_DWORD *)(a7 + 4) & 0x7FFFFFFFu) <= a6)
            v141 = *(float *)a7 < v140;
          else
            v141 = *(float *)a7 <= v140;
          if (v141)
          {
            *(float *)a7 = v140;
            *(_DWORD *)(a7 + 4) = a6;
            *(float *)(a7 + 8) = v86;
          }
        }
        v142 = v73 - v108;
        v143 = v78 - (v73 - v108);
        if (v73 - v108 >= v80 && v143 >= v80)
        {
          v145 = v65 - v105;
          v146 = v69 - v106;
          v147 = 0.0;
          v148 = 0.0;
          if (v143 >= v80)
          {
            v149 = v76 - v145 - (v77 - v146);
            v150 = a1[9];
            v151 = a1[7];
            if (v150 == 0.0)
            {
              if (v151 == 0.0)
              {
                v152 = v149 * v149;
              }
              else
              {
                v155 = v151;
                if (v149 <= v155)
                {
                  v156 = 0.0;
                  if (v149 < -v155)
                    v156 = v149 + v155;
                }
                else
                {
                  v156 = v149 - v155;
                }
                v152 = v156 * v156;
              }
              v148 = v152 / (v143 + a1[6]);
            }
            else
            {
              v153 = v151;
              v154 = v76 - v145 - (v77 - v146);
              if (v151 != 0.0)
              {
                if (v149 <= v153)
                {
                  v154 = 0.0;
                  if (v149 < -v153)
                    v154 = v149 + v153;
                }
                else
                {
                  v154 = v149 - v153;
                }
              }
              v157 = v143 + a1[6];
              v158 = -v154 / v157;
              if (v158 > v150)
                v158 = v150;
              v159 = (float)-v150;
              if (v158 >= v159)
                v159 = v158;
              v160 = v157 * 0.5 * (v159 * v159) + v149 * v159;
              v161 = v160 + v153 * fabs(v159);
              if (v151 != 0.0)
                v160 = v161;
              v148 = v160 * -2.0;
            }
          }
          if (v142 >= v80)
          {
            v162 = v145 - v146;
            v163 = a1[9];
            v164 = a1[7];
            if (v163 == 0.0)
            {
              if (v164 == 0.0)
              {
                v165 = v162 * v162;
              }
              else
              {
                v168 = v164;
                if (v162 <= v168)
                {
                  v169 = 0.0;
                  if (v162 < -v168)
                    v169 = v162 + v168;
                }
                else
                {
                  v169 = v162 - v168;
                }
                v165 = v169 * v169;
              }
              v147 = v165 / (v142 + a1[6]);
            }
            else
            {
              v166 = v164;
              v167 = v162;
              if (v164 != 0.0)
              {
                if (v162 <= v166)
                {
                  v167 = 0.0;
                  if (v162 < -v166)
                    v167 = v162 + v166;
                }
                else
                {
                  v167 = v162 - v166;
                }
              }
              v170 = v142 + a1[6];
              v171 = -v167 / v170;
              if (v171 > v163)
                v171 = v163;
              v172 = (float)-v163;
              if (v171 >= v172)
                v172 = v171;
              v173 = v170 * 0.5 * (v172 * v172) + v162 * v172;
              v174 = v173 + v166 * fabs(v172);
              if (v164 != 0.0)
                v173 = v174;
              v147 = v173 * -2.0;
            }
          }
          v175 = v148 + v147 - v13;
          if ((*(_DWORD *)(a7 + 4) & 0x7FFFFFFFu) <= a6)
            v176 = *(float *)a7 < v175;
          else
            v176 = *(float *)a7 <= v175;
          if (v176)
          {
            v177 = v74[i];
            *(float *)a7 = v175;
            *(_DWORD *)(a7 + 4) = a6 | 0x80000000;
            *(float *)(a7 + 8) = v177;
          }
        }
      }
    }
    if (v72 >= v79)
    {
      v178 = v78 - v73;
      if (v78 - v73 >= v80)
      {
        v179 = 0.0;
        v112 = v72 < v79;
        v180 = 0.0;
        if (!v112)
        {
          v181 = v65 - v69;
          v182 = a1[9];
          v183 = a1[7];
          if (v182 == 0.0)
          {
            if (v183 == 0.0)
            {
              v184 = v181 * v181;
            }
            else
            {
              v192 = v183;
              if (v181 <= v192)
              {
                v193 = 0.0;
                if (v181 < -v192)
                  v193 = v181 + v192;
              }
              else
              {
                v193 = v181 - v192;
              }
              v184 = v193 * v193;
            }
            v180 = v184 / (v73 + a1[6]);
          }
          else
          {
            v185 = v183;
            v186 = v65 - v69;
            if (v183 != 0.0)
            {
              v186 = v181 + v185;
              if (v181 >= -v185)
                v186 = 0.0;
              if (v181 > v185)
                v186 = v181 - v185;
            }
            v187 = v73 + a1[6];
            v188 = -v186 / v187;
            if (v188 > v182)
              v188 = v182;
            v189 = (float)-v182;
            if (v188 >= v189)
              v189 = v188;
            v190 = v187 * 0.5 * (v189 * v189) + v181 * v189;
            v191 = v190 + v185 * fabs(v189);
            if (v183 != 0.0)
              v190 = v191;
            v180 = v190 * -2.0;
          }
        }
        if (v178 >= v80)
        {
          v194 = v76 - v65 - (v77 - v69);
          v195 = a1[9];
          v196 = a1[7];
          if (v195 == 0.0)
          {
            if (v196 == 0.0)
            {
              v197 = v194 * v194;
            }
            else
            {
              v200 = v196;
              if (v194 <= v200)
              {
                v201 = 0.0;
                if (v194 < -v200)
                  v201 = v194 + v200;
              }
              else
              {
                v201 = v194 - v200;
              }
              v197 = v201 * v201;
            }
            v179 = v197 / (v178 + a1[6]);
          }
          else
          {
            v198 = v196;
            v199 = v194;
            if (v196 != 0.0)
            {
              if (v194 <= v198)
              {
                v199 = 0.0;
                if (v194 < -v198)
                  v199 = v194 + v198;
              }
              else
              {
                v199 = v194 - v198;
              }
            }
            v202 = v178 + a1[6];
            v203 = -v199 / v202;
            if (v203 > v195)
              v203 = v195;
            v204 = (float)-v195;
            if (v203 >= v204)
              v204 = v203;
            v205 = v202 * 0.5 * (v204 * v204) + v194 * v204;
            v206 = v205 + v198 * fabs(v204);
            if (v196 != 0.0)
              v205 = v206;
            v179 = v205 * -2.0;
          }
        }
        v207 = v180 + v179 - v13;
        if ((*(_DWORD *)(a7 + 4) & 0x7FFFFFFFu) <= a6)
          v208 = *(float *)a7 < v207;
        else
          v208 = *(float *)a7 <= v207;
        if (v208)
        {
          v209 = *(v75 - 1) + fabsf(*(v75 - 1));
          *(float *)a7 = v207;
          *(_DWORD *)(a7 + 4) = a6;
          *(float *)(a7 + 8) = v209 + 1.0;
        }
      }
    }
    if (v74)
    {
      v213 = v74;
      operator delete(v74);
    }
  }
}

void sub_2183E2144(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

float *std::__unique[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<float *>,std::__wrap_iter<float *>,std::__equal_to &>(float *a1, float *a2)
{
  float *result;
  float *v4;
  float v5;
  float v6;
  float *v7;
  float v8;

  result = a2;
  if (a1 != a2)
  {
    v4 = a1 + 1;
    do
    {
      if (v4 == a2)
        return a2;
      v5 = *(v4 - 1);
      v6 = *v4++;
    }
    while (v5 != v6);
    v7 = v4 - 2;
    while (v4 != a2)
    {
      v8 = *v4;
      if (v5 != *v4)
      {
        v7[1] = v8;
        ++v7;
        v5 = v8;
      }
      ++v4;
    }
    return v7 + 1;
  }
  return result;
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<xgboost_old::tree::SketchMaker::FindSplit(int,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,xgboost_old::tree::RegTree *)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::tree::SketchMaker::FindSplit(int,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,xgboost_old::tree::RegTree *)::{lambda(unsigned long)#1} const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v4;
  __int128 v5;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x80000002186FD03DLL & 0x7FFFFFFFFFFFFFFFLL)
        || (result = strcmp((const char *)result, (const char *)(0x80000002186FD03DLL & 0x7FFFFFFFFFFFFFFFLL)),
            !(_DWORD)result))
      {
        *(_QWORD *)a2 = v4;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
    }
  }
  else
  {
    v5 = *(_OWORD *)result;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

void boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<xgboost_old::tree::SketchMaker::FindSplit(int,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,xgboost_old::tree::RegTree *)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::tree::SketchMaker::FindSplit(int,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,xgboost_old::tree::RegTree *)::{lambda(unsigned long)#1} const&)::{lambda(void)#1},void>::invoke(uint64_t **a1, uint64_t a2, const char *a3)
{
  unint64_t i;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;

  for (i = (unint64_t)a1[1]; i < (unint64_t)a1[2]; ++i)
  {
    v5 = *a1;
    v6 = **a1;
    v7 = *(int *)(*(_QWORD *)(v6 + 80) + 4 * i);
    xgboost_old::utils::Assert(*(_DWORD *)(*(_QWORD *)(v6 + 104) + 4 * v7) == (_DWORD)i, "node2workindex inconsistent", a3);
    if (*(_DWORD *)v5[2])
    {
      v8 = 0;
      v9 = *(_QWORD *)v5[1] + 12 * i;
      do
      {
        v10 = 3 * (v8 + i * *(_DWORD *)(*(_QWORD *)v5[3] + 112));
        xgboost_old::tree::SketchMaker::EnumerateSplit((float *)v6, (uint64_t *)(*(_QWORD *)(v6 + 224) + 40 * v10), (uint64_t *)(*(_QWORD *)(v6 + 224) + 40 * (v10 + 1)), (uint64_t *)(*(_QWORD *)(v6 + 224) + 40 * (v10 + 2)), (double *)(*(_QWORD *)(v6 + 200) + 24 * (int)v7), v8++, v9);
      }
      while (v8 < *(_DWORD *)v5[2]);
    }
  }
}

uint64_t xgboost_old::tree::DistColMaker<xgboost_old::tree::GradStats>::DistColMaker(uint64_t a1)
{
  *(_QWORD *)(a1 + 8) = 1050253722;
  *(_DWORD *)(a1 + 16) = 6;
  __asm { FMOV            V1.2S, #1.0 }
  *(_QWORD *)(a1 + 20) = _D1;
  *(_QWORD *)(a1 + 28) = 0;
  *(_OWORD *)(a1 + 36) = xmmword_2186FD4F0;
  *(_QWORD *)(a1 + 52) = 0x3DCCCCCD3F800000;
  *(_DWORD *)(a1 + 60) = 0x40000000;
  *(_OWORD *)(a1 + 64) = xmmword_2186CF1A0;
  *(_QWORD *)a1 = &unk_24D93ED00;
  *(_QWORD *)(a1 + 80) = &unk_24D93E300;
  *(_QWORD *)(a1 + 88) = &unk_24D93E780;
  *(_QWORD *)(a1 + 100) = 1050253722;
  *(_DWORD *)(a1 + 108) = 6;
  *(_QWORD *)(a1 + 112) = _D1;
  *(_QWORD *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 128) = xmmword_2186FD4F0;
  *(_QWORD *)(a1 + 144) = 0x3DCCCCCD3F800000;
  *(_DWORD *)(a1 + 152) = 0x40000000;
  *(_OWORD *)(a1 + 156) = xmmword_2186CF1A0;
  *(_QWORD *)(a1 + 176) = 1050253722;
  *(_DWORD *)(a1 + 184) = 6;
  *(_QWORD *)(a1 + 188) = _D1;
  *(_QWORD *)(a1 + 196) = 0;
  *(_OWORD *)(a1 + 204) = xmmword_2186FD4F0;
  *(_QWORD *)(a1 + 220) = 0x3DCCCCCD3F800000;
  *(_DWORD *)(a1 + 228) = 0x40000000;
  *(_OWORD *)(a1 + 232) = xmmword_2186CF1A0;
  xgboost_old::tree::DistColMaker<xgboost_old::tree::GradStats>::Builder::Builder(a1 + 248, a1 + 176);
  return a1;
}

uint64_t xgboost_old::tree::DistColMaker<xgboost_old::tree::GradStats>::SetParam(uint64_t a1, const char *a2, const char *a3)
{
  xgboost_old::tree::TrainParam::SetParam((xgboost_old::tree::TrainParam *)(a1 + 176), a2, a3);
  return xgboost_old::tree::TreePruner::SetParam((xgboost_old::tree::TreePruner *)(a1 + 80), a2, a3);
}

void xgboost_old::tree::DistColMaker<xgboost_old::tree::GradStats>::Update(uint64_t a1, uint64_t *a2, const char *a3, uint64_t a4, uint64_t **a5)
{
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  _QWORD v13[3];

  xgboost_old::utils::Check((char *)a5[1] - (char *)*a5 == 8, "DistColMaker: only support one tree at a time", a3);
  xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::Update((uint64_t *)(a1 + 248), a2, a3, a4, **a5);
  xgboost_old::tree::TreePruner::Update(a1 + 80, (uint64_t)a2, a3, a4, (uint64_t *)a5);
  v10 = **a5;
  v11 = (_QWORD *)(*(uint64_t (**)(const char *))(*(_QWORD *)a3 + 64))(a3);
  v12 = ((v11[1] - *v11) >> 2);
  v13[0] = v11;
  v13[1] = a1 + 248;
  v13[2] = v10;
  turi::parallel_for<xgboost_old::tree::DistColMaker<xgboost_old::tree::GradStats>::Builder::UpdatePosition(xgboost_old::IFMatrix *,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#1}>(0, v12, (uint64_t)v13);
}

uint64_t xgboost_old::tree::DistColMaker<xgboost_old::tree::GradStats>::GetLeafPosition(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 304) == *(_QWORD *)(a1 + 296))
    return 0;
  else
    return *(_QWORD *)(a1 + 296);
}

_QWORD *xgboost_old::tree::DistColMaker<xgboost_old::tree::GradStats>::~DistColMaker(_QWORD *a1)
{
  *a1 = &unk_24D93ED00;
  xgboost_old::tree::DistColMaker<xgboost_old::tree::GradStats>::Builder::~Builder((uint64_t)(a1 + 31));
  return a1;
}

void xgboost_old::tree::DistColMaker<xgboost_old::tree::GradStats>::~DistColMaker(_QWORD *a1)
{
  *a1 = &unk_24D93ED00;
  xgboost_old::tree::DistColMaker<xgboost_old::tree::GradStats>::Builder::~Builder((uint64_t)(a1 + 31));
  JUMPOUT(0x219A19A08);
}

uint64_t xgboost_old::tree::DistColMaker<xgboost_old::tree::GradStats>::Builder::Builder(uint64_t a1, uint64_t a2)
{
  turi::neural_net::float_scalar *v3;

  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)a1 = &unk_24D93ED50;
  *(_QWORD *)(a1 + 8) = a2;
  *(_OWORD *)(a1 + 144) = 0u;
  v3 = (turi::neural_net::float_scalar *)(a1 + 192);
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  rabit::engine::ReduceHandle::ReduceHandle((_QWORD *)(a1 + 192));
  turi::neural_net::float_scalar::~float_scalar(v3);
  return a1;
}

void sub_2183E2744(_Unwind_Exception *a1)
{
  _QWORD *v1;
  turi::neural_net::float_scalar *v2;
  void **v3;
  turi::neural_net::float_scalar *v4;
  void *v6;
  void *v7;

  v4 = v2;
  turi::neural_net::float_scalar::~float_scalar(v4);
  v6 = (void *)v1[21];
  if (v6)
  {
    v1[22] = v6;
    operator delete(v6);
  }
  v7 = *v3;
  if (*v3)
  {
    v1[19] = v7;
    operator delete(v7);
  }
  xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::~Builder((uint64_t)v1);
  _Unwind_Resume(a1);
}

void xgboost_old::tree::DistColMaker<xgboost_old::tree::GradStats>::Builder::SyncBestSolution(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  char *v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float v12;
  float v13;
  uint64_t *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  int v19;
  _BOOL4 v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  int v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *__p;
  char *v41;
  char *v42;

  __p = 0;
  v41 = 0;
  v42 = 0;
  v4 = *a2;
  if (a2[1] == *a2)
  {
    v33 = 0;
    v5 = 0;
  }
  else
  {
    v5 = 0;
    v6 = 0;
    do
    {
      v7 = *(_DWORD *)(v4 + 4 * v6);
      v8 = *(unsigned int *)(a1 + 16);
      v9 = *(_QWORD *)(a1 + 96);
      if ((int)v8 >= 1)
      {
        v10 = v9 + 40 * v7;
        v12 = *(float *)(v10 + 24);
        v11 = v10 + 24;
        v13 = v12;
        v14 = *(uint64_t **)(a1 + 72);
        v15 = *(_DWORD *)(v11 + 4);
        do
        {
          v16 = *v14;
          v17 = *v14 + 56 * v7;
          v18 = *(float *)(v17 + 40);
          v19 = *(_DWORD *)(v17 + 44);
          if ((v15 & 0x7FFFFFFFu) <= (v19 & 0x7FFFFFFFu))
            v20 = v13 < v18;
          else
            v20 = v13 <= v18;
          if (v20)
          {
            *(float *)v11 = v18;
            *(_DWORD *)(v11 + 4) = v19;
            *(_DWORD *)(v11 + 8) = *(_DWORD *)(v16 + 56 * v7 + 48);
            v13 = v18;
            v15 = v19;
          }
          v14 += 3;
          --v8;
        }
        while (v8);
      }
      v21 = v9 + 40 * v7 + 24;
      if (v5 >= v42)
      {
        v23 = 0xAAAAAAAAAAAAAAABLL * ((v5 - __p) >> 2);
        v24 = v23 + 1;
        if (v23 + 1 > 0x1555555555555555)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        if (0x5555555555555556 * ((v42 - __p) >> 2) > v24)
          v24 = 0x5555555555555556 * ((v42 - __p) >> 2);
        if (0xAAAAAAAAAAAAAAABLL * ((v42 - __p) >> 2) >= 0xAAAAAAAAAAAAAAALL)
          v25 = 0x1555555555555555;
        else
          v25 = v24;
        if (v25)
          v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<xgboost_old::tree::SplitEntry>>((uint64_t)&v42, v25);
        else
          v26 = 0;
        v27 = &v26[12 * v23];
        v28 = *(_QWORD *)v21;
        *((_DWORD *)v27 + 2) = *(_DWORD *)(v21 + 8);
        *(_QWORD *)v27 = v28;
        v29 = v41;
        v30 = v27;
        if (v41 != __p)
        {
          do
          {
            v31 = *(_QWORD *)(v29 - 12);
            v29 -= 12;
            v32 = *((_DWORD *)v29 + 2);
            *(_QWORD *)(v30 - 12) = v31;
            v30 -= 12;
            *((_DWORD *)v30 + 2) = v32;
          }
          while (v29 != __p);
          v29 = __p;
        }
        v5 = v27 + 12;
        __p = v30;
        v42 = &v26[12 * v25];
        if (v29)
          operator delete(v29);
      }
      else
      {
        v22 = *(_QWORD *)v21;
        *((_DWORD *)v5 + 2) = *(_DWORD *)(v21 + 8);
        *(_QWORD *)v5 = v22;
        v5 += 12;
      }
      v41 = v5;
      ++v6;
      v4 = *a2;
    }
    while (v6 < (a2[1] - *a2) >> 2);
    v33 = __p;
  }
  if (v5 == v33)
    v34 = 0;
  else
    v34 = v33;
  rabit::engine::ReduceHandle::Allreduce((rabit::engine::ReduceHandle *)(a1 + 192), v34, 0xCuLL, 0xAAAAAAAAAAAAAAABLL * ((v5 - v33) >> 2), 0, 0);
  v35 = *a2;
  if (a2[1] != *a2)
  {
    v36 = 0;
    v37 = 0;
    do
    {
      v38 = *(_QWORD *)(a1 + 96) + 40 * *(int *)(v35 + 4 * v37);
      v39 = *(_QWORD *)&__p[v36];
      *(_DWORD *)(v38 + 32) = *(_DWORD *)&__p[v36 + 8];
      *(_QWORD *)(v38 + 24) = v39;
      ++v37;
      v35 = *a2;
      v36 += 12;
    }
    while (v37 < (a2[1] - *a2) >> 2);
  }
  if (__p)
    operator delete(__p);
}

void sub_2183E2A40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void xgboost_old::tree::DistColMaker<xgboost_old::tree::GradStats>::Builder::SetNonDefaultPosition(uint64_t a1, uint64_t *a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  std::vector<unsigned int>::pointer end;
  unint64_t v11;
  int v12;
  int v13;
  unsigned int *v14;
  std::vector<unsigned int>::pointer begin;
  uint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  int *v24;
  std::vector<unsigned int>::pointer i;
  std::vector<unsigned int>::pointer v26;
  unint64_t v27;
  std::vector<unsigned int>::size_type v28;
  uint64_t v29;
  unint64_t *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  std::vector<unsigned int>::size_type v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  unint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  _QWORD *v47;
  int *v48;
  int v49;
  _QWORD v50[2];
  std::vector<unsigned int> __p;

  memset(&__p, 0, sizeof(__p));
  v8 = *a2;
  v7 = a2[1];
  if (v7 != *a2)
  {
    end = 0;
    v11 = 0;
    do
    {
      v12 = *(_DWORD *)(v8 + 4 * v11);
      if (*(_DWORD *)(*a4 + 20 * v12 + 4) != -1)
      {
        v13 = *(_DWORD *)(*a4 + 20 * v12 + 12) & 0x7FFFFFFF;
        if (end >= __p.__end_cap_.__value_)
        {
          begin = __p.__begin_;
          v16 = end - __p.__begin_;
          v17 = v16 + 1;
          if ((unint64_t)(v16 + 1) >> 62)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          v18 = (char *)__p.__end_cap_.__value_ - (char *)__p.__begin_;
          if (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 1 > v17)
            v17 = v18 >> 1;
          if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL)
            v19 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v19 = v17;
          if (v19)
          {
            v19 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&__p.__end_cap_, v19);
            v21 = v20;
            begin = __p.__begin_;
            end = __p.__end_;
          }
          else
          {
            v21 = 0;
          }
          v22 = (unsigned int *)(v19 + 4 * v16);
          *v22 = v13;
          v14 = v22 + 1;
          while (end != begin)
          {
            v23 = *--end;
            *--v22 = v23;
          }
          __p.__begin_ = v22;
          __p.__end_ = v14;
          __p.__end_cap_.__value_ = (unsigned int *)(v19 + 4 * v21);
          if (begin)
            operator delete(begin);
        }
        else
        {
          *end = v13;
          v14 = end + 1;
        }
        __p.__end_ = v14;
        end = v14;
        v8 = *a2;
        v7 = a2[1];
      }
      ++v11;
    }
    while (v11 < (v7 - v8) >> 2);
  }
  std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
  v24 = std::__unique[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<unsigned int *>,std::__wrap_iter<unsigned int *>,std::__equal_to &>((int *)__p.__begin_, (int *)__p.__end_);
  std::vector<int>::resize(&__p, ((char *)v24 - (char *)__p.__begin_) >> 2);
  v26 = __p.__begin_;
  for (i = __p.__end_; i != v26; i = --__p.__end_)
  {
    v27 = *(i - 1);
    if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 40))(a3) > v27)
      break;
    v26 = __p.__begin_;
  }
  v28 = ((*(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48)) >> 2);
  std::vector<int>::resize((std::vector<unsigned int> *)(a1 + 168), v28);
  v45 = (uint64_t *)a1;
  turi::parallel_for<xgboost_old::tree::DistColMaker<xgboost_old::tree::GradStats>::Builder::SetNonDefaultPosition(std::vector<int> const&,xgboost_old::IFMatrix *,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#1}>(0, v28, (uint64_t)&v45);
  v29 = (*(uint64_t (**)(uint64_t, std::vector<unsigned int> *))(*(_QWORD *)a3 + 16))(a3, &__p);
  while ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v29 + 24))(v29))
  {
    v30 = (unint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 32))(v29);
    if (*v30)
    {
      v31 = 0;
      v32 = 0;
      do
      {
        v33 = v30[1];
        v34 = (uint64_t *)(v30[2] + v31);
        v36 = *v34;
        v35 = v34[1];
        v50[0] = v36;
        v50[1] = v35;
        v49 = 0;
        v49 = *(_DWORD *)(v33 + 4 * v32);
        v45 = v50;
        v46 = a1;
        v47 = a4;
        v48 = &v49;
        turi::parallel_for<xgboost_old::tree::DistColMaker<xgboost_old::tree::GradStats>::Builder::SetNonDefaultPosition(std::vector<int> const&,xgboost_old::IFMatrix *,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#2}>(0, v35, (uint64_t)&v45);
        ++v32;
        v31 += 16;
      }
      while (v32 < *v30);
    }
  }
  v37 = (unint64_t)(((uint64_t)(*(_QWORD *)(a1 + 176) - *(_QWORD *)(a1 + 168)) >> 2) + 31) >> 5;
  LODWORD(v45) = 0;
  std::vector<unsigned int>::resize((std::vector<unsigned int> *)(a1 + 144), v37, (std::vector<unsigned int>::const_reference)&v45);
  v38 = ((*(_QWORD *)(a1 + 176) - *(_QWORD *)(a1 + 168)) >> 7);
  v45 = (uint64_t *)(a1 + 168);
  v46 = a1 + 144;
  turi::parallel_for<xgboost_old::utils::BitMap::InitFromBool(std::vector<int> const&)::{lambda(unsigned long)#1}>(0, v38, &v45);
  v39 = *(_QWORD *)(a1 + 168);
  v40 = (*(_QWORD *)(a1 + 176) - v39) >> 2;
  if (v38 != v40)
    *(_DWORD *)(*(_QWORD *)(a1 + 152) - 4) = 0;
  if (v38 < v40)
  {
    do
    {
      if (*(_DWORD *)(v39 + 4 * v38))
        *(_DWORD *)(*(_QWORD *)(a1 + 144) + ((v38 >> 3) & 0x1FFFFFFFFFFFFFFCLL)) |= 1 << v38;
      ++v38;
    }
    while (v40 != v38);
  }
  v41 = *(_QWORD *)(a1 + 152) - *(_QWORD *)(a1 + 144);
  if (v41)
    v42 = *(_QWORD *)(a1 + 144);
  else
    v42 = 0;
  rabit::engine::Allreduce_(v42, 4, v41 >> 2, (uint64_t)rabit::op::Reducer<rabit::op::BitOR,unsigned int>, 3, 3, 0, 0);
  v43 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 64))(a3);
  v44 = ((unint64_t)(v43[1] - *v43) >> 2);
  v45 = v43;
  v46 = a1;
  v47 = a4;
  turi::parallel_for<xgboost_old::tree::DistColMaker<xgboost_old::tree::GradStats>::Builder::SetNonDefaultPosition(std::vector<int> const&,xgboost_old::IFMatrix *,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#3}>(0, v44, (uint64_t)&v45);
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
}

void sub_2183E2E24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t xgboost_old::tree::DistColMaker<xgboost_old::tree::GradStats>::Builder::GetLeafPosition(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 56) == *(_QWORD *)(a1 + 48))
    return 0;
  else
    return *(_QWORD *)(a1 + 48);
}

uint64_t rabit::ReducerSafe_<xgboost_old::tree::SplitEntry,&xgboost_old::tree::SplitEntry::Reduce>(uint64_t result, uint64_t a2, int a3)
{
  uint64_t v3;
  float *v4;
  float *v5;
  float v6;
  int v7;
  float v8;
  _BOOL4 v9;
  BOOL v10;
  float *v11;
  int v12;

  if (a3 >= 1)
  {
    v3 = a3;
    v4 = (float *)(result + 8);
    v5 = (float *)(a2 + 8);
    do
    {
      v6 = *(v5 - 2);
      v7 = *((_DWORD *)v5 - 1);
      v8 = *(v4 - 2);
      if ((v7 & 0x7FFFFFFFu) <= (*(_DWORD *)(v4 - 1) & 0x7FFFFFFFu))
        v9 = v6 < v8;
      else
        v9 = v6 <= v8;
      v10 = !v9;
      if (v9)
        v11 = v4;
      else
        v11 = v5;
      v12 = *(_DWORD *)v11;
      if (!v10)
      {
        v7 = *((_DWORD *)v4 - 1);
        v6 = *(v4 - 2);
      }
      *(v5 - 2) = v6;
      *((_DWORD *)v5 - 1) = v7;
      *(_DWORD *)v5 = v12;
      v5 += 3;
      v4 += 3;
      --v3;
    }
    while (v3);
  }
  return result;
}

void turi::parallel_for<xgboost_old::tree::DistColMaker<xgboost_old::tree::GradStats>::Builder::SetNonDefaultPosition(std::vector<int> const&,xgboost_old::IFMatrix *,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#1}>(turi::thread_pool *a1, unint64_t a2, uint64_t a3)
{
  turi::thread_pool *instance;
  turi::thread *v7;
  turi::thread_pool *tls_data;
  BOOL v9;
  turi::thread_pool *v10;
  uint64_t v11;
  double v12;
  double v13;
  turi::thread *v14;
  unint64_t v15;
  uint64_t v16[4];
  _BYTE v17[192];
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  instance = (turi::thread_pool *)turi::thread_pool::get_instance(a1);
  v7 = (turi::thread *)turi::thread_pool::size(instance);
  tls_data = (turi::thread_pool *)turi::thread::get_tls_data(v7);
  if (*((_BYTE *)tls_data + 8))
    v9 = 0;
  else
    v9 = (unint64_t)v7 > 1;
  if (v9)
  {
    v10 = (turi::thread_pool *)turi::thread_pool::get_instance(tls_data);
    turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)v17, v10);
    v11 = 0;
    v12 = (double)(a2 - (unint64_t)a1) / (double)(unint64_t)v7;
    v13 = (double)(unint64_t)a1;
    do
    {
      v14 = (turi::thread *)(v11 + 1);
      v15 = (unint64_t)(v13 + v12 * (double)(unint64_t)(v11 + 1));
      if ((turi::thread *)v11 == (turi::thread *)((char *)v7 - 1))
        v15 = a2;
      v16[2] = (unint64_t)(v13 + v12 * (double)(unint64_t)v11);
      v16[3] = v15;
      v16[0] = (uint64_t)boost::function0<void>::assign_to<void turi::parallel_for<xgboost_old::tree::DistColMaker<xgboost_old::tree::GradStats>::Builder::SetNonDefaultPosition(std::vector<int> const&,xgboost_old::IFMatrix *,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::tree::DistColMaker<xgboost_old::tree::GradStats>::Builder::SetNonDefaultPosition(std::vector<int> const&,xgboost_old::IFMatrix *,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#1} const&)::{lambda(void)#1}>(xgboost_old::tree::DistColMaker<xgboost_old::tree::GradStats>::Builder::SetNonDefaultPosition(std::vector<int> const&,xgboost_old::IFMatrix *,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#1})::stored_vtable
             + 1;
      v16[1] = a3;
      turi::parallel_task_queue::launch((uint64_t)v17, (uint64_t)v16, v11);
      boost::function0<void>::~function0(v16);
      v11 = (uint64_t)v14;
    }
    while (v14 != v7);
    turi::parallel_task_queue::join((turi::parallel_task_queue *)v17);
    turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)v17);
  }
  else if (a2 > (unint64_t)a1)
  {
    bzero((void *)(*(_QWORD *)(*(_QWORD *)a3 + 168) + 4 * (_QWORD)a1), 4 * (a2 - (_QWORD)a1));
  }
}

void sub_2183E3070(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)va);
  _Unwind_Resume(a1);
}

void turi::parallel_for<xgboost_old::tree::DistColMaker<xgboost_old::tree::GradStats>::Builder::SetNonDefaultPosition(std::vector<int> const&,xgboost_old::IFMatrix *,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#2}>(turi::thread_pool *a1, unint64_t a2, uint64_t a3)
{
  turi::thread_pool *instance;
  turi::thread *v7;
  turi::thread_pool *tls_data;
  BOOL v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  float *i;
  uint64_t v16;
  int v17;
  int v18;
  turi::thread_pool *v19;
  uint64_t v20;
  double v21;
  double v22;
  turi::thread *v23;
  unint64_t v24;
  uint64_t v25[4];
  _BYTE v26[192];
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  instance = (turi::thread_pool *)turi::thread_pool::get_instance(a1);
  v7 = (turi::thread *)turi::thread_pool::size(instance);
  tls_data = (turi::thread_pool *)turi::thread::get_tls_data(v7);
  if (*((_BYTE *)tls_data + 8))
    v9 = 0;
  else
    v9 = (unint64_t)v7 > 1;
  if (v9)
  {
    v19 = (turi::thread_pool *)turi::thread_pool::get_instance(tls_data);
    turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)v26, v19);
    v20 = 0;
    v21 = (double)(a2 - (unint64_t)a1) / (double)(unint64_t)v7;
    v22 = (double)(unint64_t)a1;
    do
    {
      v23 = (turi::thread *)(v20 + 1);
      v24 = (unint64_t)(v22 + v21 * (double)(unint64_t)(v20 + 1));
      if ((turi::thread *)v20 == (turi::thread *)((char *)v7 - 1))
        v24 = a2;
      v25[2] = (unint64_t)(v22 + v21 * (double)(unint64_t)v20);
      v25[3] = v24;
      v25[0] = (uint64_t)boost::function0<void>::assign_to<void turi::parallel_for<xgboost_old::tree::DistColMaker<xgboost_old::tree::GradStats>::Builder::SetNonDefaultPosition(std::vector<int> const&,xgboost_old::IFMatrix *,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#2}>(unsigned long,unsigned long,xgboost_old::tree::DistColMaker<xgboost_old::tree::GradStats>::Builder::SetNonDefaultPosition(std::vector<int> const&,xgboost_old::IFMatrix *,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#2} const&)::{lambda(void)#1}>(xgboost_old::tree::DistColMaker<xgboost_old::tree::GradStats>::Builder::SetNonDefaultPosition(std::vector<int> const&,xgboost_old::IFMatrix *,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#2})::stored_vtable
             + 1;
      v25[1] = a3;
      turi::parallel_task_queue::launch((uint64_t)v26, (uint64_t)v25, v20);
      boost::function0<void>::~function0(v25);
      v20 = (uint64_t)v23;
    }
    while (v23 != v7);
    turi::parallel_task_queue::join((turi::parallel_task_queue *)v26);
    turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)v26);
  }
  else
  {
    v10 = a2 - (_QWORD)a1;
    if (a2 > (unint64_t)a1)
    {
      v11 = *(_QWORD *)(a3 + 8);
      v12 = *(_QWORD *)(v11 + 48);
      v13 = *(_DWORD **)(a3 + 24);
      v14 = **(_QWORD **)(a3 + 16);
      for (i = (float *)(**(_QWORD **)a3 + 8 * (_QWORD)a1 + 4); ; i += 2)
      {
        v16 = *((unsigned int *)i - 1);
        v17 = *(_DWORD *)(v12 + 4 * v16) ^ (*(int *)(v12 + 4 * v16) >> 31);
        if (*(_DWORD *)(v14 + 20 * v17 + 4) == -1)
          goto LABEL_12;
        v18 = *(_DWORD *)(v14 + 20 * v17 + 12);
        if ((v18 & 0x7FFFFFFF) != *v13)
          goto LABEL_12;
        if (*i >= *(float *)(v14 + 20 * (*(_DWORD *)(v12 + 4 * v16) ^ (*(int *)(v12 + 4 * v16) >> 31)) + 16))
          break;
        if ((v18 & 0x80000000) == 0)
          goto LABEL_11;
LABEL_12:
        if (!--v10)
          return;
      }
      if ((v18 & 0x80000000) == 0)
        goto LABEL_12;
LABEL_11:
      *(_DWORD *)(*(_QWORD *)(v11 + 168) + 4 * v16) = 1;
      goto LABEL_12;
    }
  }
}

void sub_2183E3264(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)va);
  _Unwind_Resume(a1);
}

void turi::parallel_for<xgboost_old::tree::DistColMaker<xgboost_old::tree::GradStats>::Builder::SetNonDefaultPosition(std::vector<int> const&,xgboost_old::IFMatrix *,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#3}>(turi::thread_pool *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v5;
  turi::thread_pool *instance;
  turi::thread *v7;
  turi::thread_pool *tls_data;
  const char *v9;
  BOOL v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  _DWORD *v17;
  _DWORD *v18;
  turi::thread_pool *v19;
  uint64_t v20;
  double v21;
  double v22;
  turi::thread *v23;
  unint64_t v24;
  uint64_t v25[4];
  _BYTE v26[192];
  uint64_t v27;

  v5 = (unint64_t)a1;
  v27 = *MEMORY[0x24BDAC8D0];
  instance = (turi::thread_pool *)turi::thread_pool::get_instance(a1);
  v7 = (turi::thread *)turi::thread_pool::size(instance);
  tls_data = (turi::thread_pool *)turi::thread::get_tls_data(v7);
  if (*((_BYTE *)tls_data + 8))
    v10 = 0;
  else
    v10 = (unint64_t)v7 > 1;
  if (v10)
  {
    v19 = (turi::thread_pool *)turi::thread_pool::get_instance(tls_data);
    turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)v26, v19);
    v20 = 0;
    v21 = (double)(a2 - v5) / (double)(unint64_t)v7;
    v22 = (double)v5;
    do
    {
      v23 = (turi::thread *)(v20 + 1);
      v24 = (unint64_t)(v22 + v21 * (double)(unint64_t)(v20 + 1));
      if ((turi::thread *)v20 == (turi::thread *)((char *)v7 - 1))
        v24 = a2;
      v25[2] = (unint64_t)(v22 + v21 * (double)(unint64_t)v20);
      v25[3] = v24;
      v25[0] = (uint64_t)boost::function0<void>::assign_to<void turi::parallel_for<xgboost_old::tree::DistColMaker<xgboost_old::tree::GradStats>::Builder::SetNonDefaultPosition(std::vector<int> const&,xgboost_old::IFMatrix *,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#3}>(unsigned long,unsigned long,xgboost_old::tree::DistColMaker<xgboost_old::tree::GradStats>::Builder::SetNonDefaultPosition(std::vector<int> const&,xgboost_old::IFMatrix *,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#3} const&)::{lambda(void)#1}>(xgboost_old::tree::DistColMaker<xgboost_old::tree::GradStats>::Builder::SetNonDefaultPosition(std::vector<int> const&,xgboost_old::IFMatrix *,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#3})::stored_vtable
             + 1;
      v25[1] = a3;
      turi::parallel_task_queue::launch((uint64_t)v26, (uint64_t)v25, v20);
      boost::function0<void>::~function0(v25);
      v20 = (uint64_t)v23;
    }
    while (v23 != v7);
    turi::parallel_task_queue::join((turi::parallel_task_queue *)v26);
    turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)v26);
  }
  else if (a2 > v5)
  {
    do
    {
      v11 = *(_QWORD *)(a3 + 8);
      v12 = *(unsigned int *)(**(_QWORD **)a3 + 4 * v5);
      if (((*(_DWORD *)(*(_QWORD *)(v11 + 144) + ((v12 >> 3) & 0x1FFFFFFC)) >> v12) & 1) != 0)
      {
        v13 = *(_DWORD *)(*(_QWORD *)(v11 + 48) + 4 * v12);
        v14 = v13 ^ (v13 >> 31);
        xgboost_old::utils::Assert(*(_DWORD *)(**(_QWORD **)(a3 + 16) + 20 * v14 + 4) != -1, "inconsistent reduce information", v9);
        v15 = **(_QWORD **)(a3 + 16) + 20 * v14;
        v16 = *(_DWORD *)(v15 + 12);
        v17 = (_DWORD *)(v15 + 8);
        v18 = (_DWORD *)(v15 + 4);
        if (v16 < 0)
          v18 = v17;
        *(_DWORD *)(*(_QWORD *)(v11 + 48) + 4 * v12) = *v18 ^ (*(int *)(*(_QWORD *)(v11 + 48) + 4 * v12) >> 31);
      }
      ++v5;
    }
    while (a2 != v5);
  }
}

void sub_2183E346C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)va);
  _Unwind_Resume(a1);
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<xgboost_old::tree::DistColMaker<xgboost_old::tree::GradStats>::Builder::SetNonDefaultPosition(std::vector<int> const&,xgboost_old::IFMatrix *,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::tree::DistColMaker<xgboost_old::tree::GradStats>::Builder::SetNonDefaultPosition(std::vector<int> const&,xgboost_old::IFMatrix *,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#1} const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v4;
  __int128 v5;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x80000002186FD16DLL & 0x7FFFFFFFFFFFFFFFLL)
        || (result = strcmp((const char *)result, (const char *)(0x80000002186FD16DLL & 0x7FFFFFFFFFFFFFFFLL)),
            !(_DWORD)result))
      {
        *(_QWORD *)a2 = v4;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
    }
  }
  else
  {
    v5 = *(_OWORD *)result;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

void boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<xgboost_old::tree::DistColMaker<xgboost_old::tree::GradStats>::Builder::SetNonDefaultPosition(std::vector<int> const&,xgboost_old::IFMatrix *,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::tree::DistColMaker<xgboost_old::tree::GradStats>::Builder::SetNonDefaultPosition(std::vector<int> const&,xgboost_old::IFMatrix *,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#1} const&)::{lambda(void)#1},void>::invoke(_QWORD *a1)
{
  unint64_t v1;
  unint64_t v2;
  BOOL v3;
  unint64_t v4;

  v1 = a1[1];
  v2 = a1[2];
  v3 = v2 > v1;
  v4 = v2 - v1;
  if (v3)
    bzero((void *)(*(_QWORD *)(*(_QWORD *)*a1 + 168) + 4 * v1), 4 * v4);
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<xgboost_old::tree::DistColMaker<xgboost_old::tree::GradStats>::Builder::SetNonDefaultPosition(std::vector<int> const&,xgboost_old::IFMatrix *,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#2}>(unsigned long,unsigned long,xgboost_old::tree::DistColMaker<xgboost_old::tree::GradStats>::Builder::SetNonDefaultPosition(std::vector<int> const&,xgboost_old::IFMatrix *,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#2} const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v4;
  __int128 v5;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x80000002186FD230 & 0x7FFFFFFFFFFFFFFFLL)
        || (result = strcmp((const char *)result, (const char *)(0x80000002186FD230 & 0x7FFFFFFFFFFFFFFFLL)),
            !(_DWORD)result))
      {
        *(_QWORD *)a2 = v4;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
    }
  }
  else
  {
    v5 = *(_OWORD *)result;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

unint64_t boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<xgboost_old::tree::DistColMaker<xgboost_old::tree::GradStats>::Builder::SetNonDefaultPosition(std::vector<int> const&,xgboost_old::IFMatrix *,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#2}>(unsigned long,unsigned long,xgboost_old::tree::DistColMaker<xgboost_old::tree::GradStats>::Builder::SetNonDefaultPosition(std::vector<int> const&,xgboost_old::IFMatrix *,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#2} const&)::{lambda(void)#1},void>::invoke(unint64_t result)
{
  unint64_t v1;
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float *i;
  uint64_t v10;
  int v11;
  int v12;

  v2 = *(_QWORD *)(result + 8);
  v1 = *(_QWORD *)(result + 16);
  v3 = v1 > v2;
  v4 = v1 - v2;
  if (v3)
  {
    v5 = *(_QWORD *)result;
    v6 = *(_QWORD *)(*(_QWORD *)result + 8);
    v7 = *(_QWORD *)(v6 + 48);
    v8 = **(_QWORD **)(*(_QWORD *)result + 16);
    for (i = (float *)(***(_QWORD ***)result + 8 * v2 + 4); ; i += 2)
    {
      v10 = *((unsigned int *)i - 1);
      v11 = *(_DWORD *)(v7 + 4 * v10) ^ (*(int *)(v7 + 4 * v10) >> 31);
      result = *(unsigned int *)(v8 + 20 * v11 + 4);
      if ((_DWORD)result == -1)
        goto LABEL_9;
      result = v11;
      v12 = *(_DWORD *)(v8 + 20 * v11 + 12);
      if ((v12 & 0x7FFFFFFF) != **(_DWORD **)(v5 + 24))
        goto LABEL_9;
      result = v8 + 20 * (int)result;
      if (*i >= *(float *)(result + 16))
        break;
      if ((v12 & 0x80000000) == 0)
        goto LABEL_8;
LABEL_9:
      if (!--v4)
        return result;
    }
    if ((v12 & 0x80000000) == 0)
      goto LABEL_9;
LABEL_8:
    *(_DWORD *)(*(_QWORD *)(v6 + 168) + 4 * v10) = 1;
    goto LABEL_9;
  }
  return result;
}

void turi::parallel_for<xgboost_old::utils::BitMap::InitFromBool(std::vector<int> const&)::{lambda(unsigned long)#1}>(turi::thread_pool *a1, unint64_t a2, uint64_t **a3)
{
  unint64_t v5;
  turi::thread_pool *instance;
  turi::thread *v7;
  turi::thread_pool *tls_data;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  turi::thread_pool *v14;
  uint64_t v15;
  double v16;
  double v17;
  turi::thread *v18;
  unint64_t v19;
  uint64_t v20[4];
  _BYTE v21[192];
  uint64_t v22;

  v5 = (unint64_t)a1;
  v22 = *MEMORY[0x24BDAC8D0];
  instance = (turi::thread_pool *)turi::thread_pool::get_instance(a1);
  v7 = (turi::thread *)turi::thread_pool::size(instance);
  tls_data = (turi::thread_pool *)turi::thread::get_tls_data(v7);
  if (*((_BYTE *)tls_data + 8))
    v9 = 0;
  else
    v9 = (unint64_t)v7 > 1;
  if (v9)
  {
    v14 = (turi::thread_pool *)turi::thread_pool::get_instance(tls_data);
    turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)v21, v14);
    v15 = 0;
    v16 = (double)(a2 - v5) / (double)(unint64_t)v7;
    v17 = (double)v5;
    do
    {
      v18 = (turi::thread *)(v15 + 1);
      v19 = (unint64_t)(v17 + v16 * (double)(unint64_t)(v15 + 1));
      if ((turi::thread *)v15 == (turi::thread *)((char *)v7 - 1))
        v19 = a2;
      v20[2] = (unint64_t)(v17 + v16 * (double)(unint64_t)v15);
      v20[3] = v19;
      v20[0] = (uint64_t)boost::function0<void>::assign_to<void turi::parallel_for<xgboost_old::utils::BitMap::InitFromBool(std::vector<int> const&)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::utils::BitMap::InitFromBool(std::vector<int> const&)::{lambda(unsigned long)#1} const&)::{lambda(void)#1}>(xgboost_old::utils::BitMap::InitFromBool(std::vector<int> const&)::{lambda(unsigned long)#1})::stored_vtable
             + 1;
      v20[1] = (uint64_t)a3;
      turi::parallel_task_queue::launch((uint64_t)v21, (uint64_t)v20, v15);
      boost::function0<void>::~function0(v20);
      v15 = (uint64_t)v18;
    }
    while (v18 != v7);
    turi::parallel_task_queue::join((turi::parallel_task_queue *)v21);
    turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)v21);
  }
  else if (a2 > v5)
  {
    v10 = **a3;
    v11 = *a3[1];
    do
    {
      v12 = 0;
      v13 = 0;
      do
      {
        v13 |= *(_DWORD *)(v10 + 4 * (v12 | (32 * v5))) << v12;
        ++v12;
      }
      while (v12 != 32);
      *(_DWORD *)(v11 + 4 * v5++) = v13;
    }
    while (v5 != a2);
  }
}

void sub_2183E3830(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)va);
  _Unwind_Resume(a1);
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<xgboost_old::utils::BitMap::InitFromBool(std::vector<int> const&)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::utils::BitMap::InitFromBool(std::vector<int> const&)::{lambda(unsigned long)#1} const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v4;
  __int128 v5;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x80000002186FD2F4 & 0x7FFFFFFFFFFFFFFFLL)
        || (result = strcmp((const char *)result, (const char *)(0x80000002186FD2F4 & 0x7FFFFFFFFFFFFFFFLL)),
            !(_DWORD)result))
      {
        *(_QWORD *)a2 = v4;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
    }
  }
  else
  {
    v5 = *(_OWORD *)result;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

uint64_t ***boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<xgboost_old::utils::BitMap::InitFromBool(std::vector<int> const&)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::utils::BitMap::InitFromBool(std::vector<int> const&)::{lambda(unsigned long)#1} const&)::{lambda(void)#1},void>::invoke(uint64_t ***result)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v1 = (unint64_t)result[1];
  v2 = (unint64_t)result[2];
  if (v1 < v2)
  {
    v3 = ***result;
    v4 = *(*result)[1];
    do
    {
      v5 = 0;
      v6 = 0;
      do
      {
        v6 |= *(_DWORD *)(v3 + 4 * (v5 | (32 * v1))) << v5;
        ++v5;
      }
      while (v5 != 32);
      *(_DWORD *)(v4 + 4 * v1++) = v6;
    }
    while (v1 != v2);
  }
  return result;
}

int *rabit::op::Reducer<rabit::op::BitOR,unsigned int>(int *result, _DWORD *a2, int a3)
{
  uint64_t v3;
  int v4;

  if (a3 >= 1)
  {
    v3 = a3;
    do
    {
      v4 = *result++;
      *a2++ |= v4;
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<xgboost_old::tree::DistColMaker<xgboost_old::tree::GradStats>::Builder::SetNonDefaultPosition(std::vector<int> const&,xgboost_old::IFMatrix *,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#3}>(unsigned long,unsigned long,xgboost_old::tree::DistColMaker<xgboost_old::tree::GradStats>::Builder::SetNonDefaultPosition(std::vector<int> const&,xgboost_old::IFMatrix *,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#3} const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v4;
  __int128 v5;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x80000002186FD371 & 0x7FFFFFFFFFFFFFFFLL)
        || (result = strcmp((const char *)result, (const char *)(0x80000002186FD371 & 0x7FFFFFFFFFFFFFFFLL)),
            !(_DWORD)result))
      {
        *(_QWORD *)a2 = v4;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
    }
  }
  else
  {
    v5 = *(_OWORD *)result;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

uint64_t boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<xgboost_old::tree::DistColMaker<xgboost_old::tree::GradStats>::Builder::SetNonDefaultPosition(std::vector<int> const&,xgboost_old::IFMatrix *,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#3}>(unsigned long,unsigned long,xgboost_old::tree::DistColMaker<xgboost_old::tree::GradStats>::Builder::SetNonDefaultPosition(std::vector<int> const&,xgboost_old::IFMatrix *,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#3} const&)::{lambda(void)#1},void>::invoke(uint64_t result, uint64_t a2, const char *a3)
{
  unint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  _DWORD *v13;
  _DWORD *v14;

  v4 = *(_QWORD *)(result + 8);
  v3 = *(_QWORD *)(result + 16);
  if (v4 < v3)
  {
    v5 = (_QWORD *)result;
    do
    {
      v6 = *v5;
      v7 = *(_QWORD *)(*v5 + 8);
      v8 = *(unsigned int *)(**(_QWORD **)*v5 + 4 * v4);
      if (((*(_DWORD *)(*(_QWORD *)(v7 + 144) + ((v8 >> 3) & 0x1FFFFFFC)) >> v8) & 1) != 0)
      {
        v9 = *(_DWORD *)(*(_QWORD *)(v7 + 48) + 4 * v8);
        v10 = v9 ^ (v9 >> 31);
        result = xgboost_old::utils::Assert(*(_DWORD *)(**(_QWORD **)(v6 + 16) + 20 * v10 + 4) != -1, "inconsistent reduce information", a3);
        v11 = **(_QWORD **)(v6 + 16) + 20 * v10;
        v12 = *(_DWORD *)(v11 + 12);
        v13 = (_DWORD *)(v11 + 8);
        v14 = (_DWORD *)(v11 + 4);
        if (v12 < 0)
          v14 = v13;
        *(_DWORD *)(*(_QWORD *)(v7 + 48) + 4 * v8) = *v14 ^ (*(int *)(*(_QWORD *)(v7 + 48) + 4 * v8) >> 31);
        v3 = v5[2];
      }
      ++v4;
    }
    while (v4 < v3);
  }
  return result;
}

void turi::parallel_for<xgboost_old::tree::DistColMaker<xgboost_old::tree::GradStats>::Builder::UpdatePosition(xgboost_old::IFMatrix *,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#1}>(turi::thread_pool *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v5;
  turi::thread_pool *instance;
  turi::thread *v7;
  turi::thread_pool *tls_data;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  turi::thread_pool *v16;
  uint64_t v17;
  double v18;
  double v19;
  turi::thread *v20;
  unint64_t v21;
  uint64_t v22[4];
  _BYTE v23[192];
  uint64_t v24;

  v5 = (unint64_t)a1;
  v24 = *MEMORY[0x24BDAC8D0];
  instance = (turi::thread_pool *)turi::thread_pool::get_instance(a1);
  v7 = (turi::thread *)turi::thread_pool::size(instance);
  tls_data = (turi::thread_pool *)turi::thread::get_tls_data(v7);
  if (*((_BYTE *)tls_data + 8))
    v9 = 0;
  else
    v9 = (unint64_t)v7 > 1;
  if (v9)
  {
    v16 = (turi::thread_pool *)turi::thread_pool::get_instance(tls_data);
    turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)v23, v16);
    v17 = 0;
    v18 = (double)(a2 - v5) / (double)(unint64_t)v7;
    v19 = (double)v5;
    do
    {
      v20 = (turi::thread *)(v17 + 1);
      v21 = (unint64_t)(v19 + v18 * (double)(unint64_t)(v17 + 1));
      if ((turi::thread *)v17 == (turi::thread *)((char *)v7 - 1))
        v21 = a2;
      v22[2] = (unint64_t)(v19 + v18 * (double)(unint64_t)v17);
      v22[3] = v21;
      v22[0] = (uint64_t)boost::function0<void>::assign_to<void turi::parallel_for<xgboost_old::tree::DistColMaker<xgboost_old::tree::GradStats>::Builder::UpdatePosition(xgboost_old::IFMatrix *,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::tree::DistColMaker<xgboost_old::tree::GradStats>::Builder::UpdatePosition(xgboost_old::IFMatrix *,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#1} const&)::{lambda(void)#1}>(xgboost_old::tree::DistColMaker<xgboost_old::tree::GradStats>::Builder::UpdatePosition(xgboost_old::IFMatrix *,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#1})::stored_vtable
             + 1;
      v22[1] = a3;
      turi::parallel_task_queue::launch((uint64_t)v23, (uint64_t)v22, v17);
      boost::function0<void>::~function0(v22);
      v17 = (uint64_t)v20;
    }
    while (v20 != v7);
    turi::parallel_task_queue::join((turi::parallel_task_queue *)v23);
    turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)v23);
  }
  else if (a2 > v5)
  {
    v10 = **(_QWORD **)a3;
    v11 = *(_QWORD *)(*(_QWORD *)(a3 + 8) + 48);
    v12 = **(_QWORD **)(a3 + 16);
    do
    {
      v13 = *(unsigned int *)(v10 + 4 * v5);
      v14 = *(_DWORD *)(v11 + 4 * v13) ^ (*(int *)(v11 + 4 * v13) >> 31);
      LODWORD(v15) = v14;
      if (*(_DWORD *)(v12 + 20 * v14 + 12) == -1)
      {
        v15 = v14;
        do
          LODWORD(v15) = *(_DWORD *)(v12 + 20 * v15) & 0x7FFFFFFF;
        while (*(_DWORD *)(v12 + 20 * v15 + 12) == -1);
      }
      *(_DWORD *)(v11 + 4 * v13) = v15;
      ++v5;
    }
    while (v5 != a2);
  }
}

void sub_2183E3CA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)va);
  _Unwind_Resume(a1);
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<xgboost_old::tree::DistColMaker<xgboost_old::tree::GradStats>::Builder::UpdatePosition(xgboost_old::IFMatrix *,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::tree::DistColMaker<xgboost_old::tree::GradStats>::Builder::UpdatePosition(xgboost_old::IFMatrix *,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#1} const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v4;
  __int128 v5;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x80000002186FD435 & 0x7FFFFFFFFFFFFFFFLL)
        || (result = strcmp((const char *)result, (const char *)(0x80000002186FD435 & 0x7FFFFFFFFFFFFFFFLL)),
            !(_DWORD)result))
      {
        *(_QWORD *)a2 = v4;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
    }
  }
  else
  {
    v5 = *(_OWORD *)result;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

uint64_t ***boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<xgboost_old::tree::DistColMaker<xgboost_old::tree::GradStats>::Builder::UpdatePosition(xgboost_old::IFMatrix *,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::tree::DistColMaker<xgboost_old::tree::GradStats>::Builder::UpdatePosition(xgboost_old::IFMatrix *,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#1} const&)::{lambda(void)#1},void>::invoke(uint64_t ***result)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;

  v1 = (unint64_t)result[1];
  v2 = (unint64_t)result[2];
  if (v1 < v2)
  {
    v3 = ***result;
    v4 = (*result)[1][6];
    v5 = *(*result)[2];
    do
    {
      v6 = *(unsigned int *)(v3 + 4 * v1);
      v7 = *(_DWORD *)(v4 + 4 * v6) ^ (*(int *)(v4 + 4 * v6) >> 31);
      LODWORD(v8) = v7;
      if (*(_DWORD *)(v5 + 20 * v7 + 12) == -1)
      {
        v8 = v7;
        do
          LODWORD(v8) = *(_DWORD *)(v5 + 20 * v8) & 0x7FFFFFFF;
        while (*(_DWORD *)(v5 + 20 * v8 + 12) == -1);
      }
      *(_DWORD *)(v4 + 4 * v6) = v8;
      ++v1;
    }
    while (v1 != v2);
  }
  return result;
}

uint64_t xgboost_old::tree::DistColMaker<xgboost_old::tree::GradStats>::Builder::~Builder(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void **v9;

  *(_QWORD *)a1 = &unk_24D93ED50;
  turi::neural_net::float_scalar::~float_scalar((turi::neural_net::float_scalar *)(a1 + 192));
  v2 = *(void **)(a1 + 168);
  if (v2)
  {
    *(_QWORD *)(a1 + 176) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 144);
  if (v3)
  {
    *(_QWORD *)(a1 + 152) = v3;
    operator delete(v3);
  }
  *(_QWORD *)a1 = &unk_24D93E5A0;
  v4 = *(void **)(a1 + 120);
  if (v4)
  {
    *(_QWORD *)(a1 + 128) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 96);
  if (v5)
  {
    *(_QWORD *)(a1 + 104) = v5;
    operator delete(v5);
  }
  v9 = (void **)(a1 + 72);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  v6 = *(void **)(a1 + 48);
  if (v6)
  {
    *(_QWORD *)(a1 + 56) = v6;
    operator delete(v6);
  }
  v7 = *(void **)(a1 + 24);
  if (v7)
  {
    *(_QWORD *)(a1 + 32) = v7;
    operator delete(v7);
  }
  return a1;
}

uint64_t _GLOBAL__sub_I_updater_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void CoreML::validate<(MLModelType)2004>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v3;
  _DWORD *v5;
  _DWORD *v6;
  _BOOL8 v7;
  uint64_t *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  _DWORD *v14;
  void *v15;
  __int128 v16;
  uint64_t v17;
  void *v18;
  __int128 __p;
  uint64_t v20;

  if (*(_QWORD *)(a1 + 16))
    v3 = *(uint64_t **)(a1 + 16);
  else
    v3 = &CoreML::Specification::_ModelDescription_default_instance_;
  if (*(_DWORD *)(a1 + 44) != 2004)
  {
    std::string::basic_string[abi:ne180100]<0>(&v18, "Model not a gazetteer.");
    CoreML::Result::Result((_DWORD *)a2, 13);
    if ((SHIBYTE(__p) & 0x80000000) == 0)
      return;
    v9 = v18;
    goto LABEL_34;
  }
  CoreML::Result::Result((CoreML::Result *)&v18);
  v5 = operator new(4uLL);
  v12 = v5;
  *v5 = 3;
  v13 = v5 + 1;
  v14 = v5 + 1;
  CoreML::validateDescriptionsContainFeatureWithTypes<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>>((uint64_t)(v3 + 2), 1, (int **)&v12, (uint64_t)&v15);
  v18 = v15;
  if (SHIBYTE(v20) < 0)
    operator delete((void *)__p);
  __p = v16;
  v20 = v17;
  HIBYTE(v17) = 0;
  LOBYTE(v16) = 0;
  if (v12)
  {
    v13 = v12;
    operator delete(v12);
  }
  if (!CoreML::Result::good((CoreML::Result *)&v18))
    goto LABEL_31;
  v6 = operator new(4uLL);
  v12 = v6;
  *v6 = 3;
  v13 = v6 + 1;
  v14 = v6 + 1;
  CoreML::validateDescriptionsContainFeatureWithTypes<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>>((uint64_t)(v3 + 5), 1, (int **)&v12, (uint64_t)&v15);
  v18 = v15;
  if (SHIBYTE(v20) < 0)
    operator delete((void *)__p);
  __p = v16;
  v20 = v17;
  HIBYTE(v17) = 0;
  LOBYTE(v16) = 0;
  if (v12)
  {
    v13 = v12;
    operator delete(v12);
  }
  v7 = CoreML::Result::good((CoreML::Result *)&v18);
  if (!v7)
    goto LABEL_31;
  if (*(_DWORD *)(a1 + 44) == 2004)
    v8 = *(uint64_t **)(a1 + 32);
  else
    v8 = CoreML::Specification::CoreMLModels::Gazetteer::default_instance((CoreML::Specification::CoreMLModels::Gazetteer *)v7);
  if (*((_DWORD *)v8 + 8) <= 1u)
  {
    std::string::basic_string[abi:ne180100]<0>(&v15, "Model revision number missing or invalid. Must be >= 2");
    CoreML::Result::Result((_DWORD *)a2, 13);
    goto LABEL_27;
  }
  if (*((_DWORD *)v8 + 13) != 200 || *(int *)(v8[5] + 24) <= 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&v15, "Model output class label not set. Must have at least one class label");
    CoreML::Result::Result((_DWORD *)a2, 13);
    goto LABEL_27;
  }
  v10 = v8[3];
  if (*(char *)(v10 + 23) < 0)
    v11 = *(_QWORD *)(v10 + 8);
  else
    v11 = *(unsigned __int8 *)(v10 + 23);
  if (!v11)
  {
    std::string::basic_string[abi:ne180100]<0>(&v15, "Model parameter data not set");
    CoreML::Result::Result((_DWORD *)a2, 13);
LABEL_27:
    if (SHIBYTE(v16) < 0)
      operator delete(v15);
    goto LABEL_32;
  }
LABEL_31:
  *(_QWORD *)a2 = v18;
  *(_OWORD *)(a2 + 8) = __p;
  *(_QWORD *)(a2 + 24) = v20;
  __p = 0uLL;
  v20 = 0;
LABEL_32:
  if ((SHIBYTE(v20) & 0x80000000) == 0)
    return;
  v9 = (void *)__p;
LABEL_34:
  operator delete(v9);
}

void sub_2183E417C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21,int a22,__int16 a23,char a24,char a25,int a26,__int16 a27,char a28,char a29)
{
  if (a18 < 0)
    operator delete(__p);
  if (a29 < 0)
    operator delete(a21);
  _Unwind_Resume(exception_object);
}

uint64_t _GLOBAL__sub_I_GazetteerValidator_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

uint64_t *rabit::engine::GetEngine(rabit::engine *this)
{
  return &rabit::engine::manager;
}

uint64_t rabit::engine::Allreduce_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(uint64_t), uint64_t a8)
{
  uint64_t result;

  if (a7)
    return a7(a8);
  return result;
}

_QWORD *rabit::engine::ReduceHandle::ReduceHandle(_QWORD *this)
{
  *this = 0;
  this[2] = 0;
  return this;
}

uint64_t rabit::engine::ReduceHandle::Allreduce(rabit::engine::ReduceHandle *this, void *a2, unint64_t a3, unint64_t a4, uint64_t (*a5)(void *, void *), void *a6)
{
  uint64_t result;

  if (a5)
    return a5(a6, a2);
  return result;
}

void rabit::engine::EmptyEngine::Allreduce(uint64_t a1, const char *a2)
{
  rabit::utils::Error((rabit::utils *)"EmptyEngine:: Allreduce is not supported,use Allreduce_ instead", a2);
}

void rabit::engine::EmptyEngine::InitAfterException(rabit::engine::EmptyEngine *this, const char *a2)
{
  rabit::utils::Error((rabit::utils *)"EmptyEngine is not fault tolerant", a2);
}

uint64_t rabit::engine::EmptyEngine::CheckPoint(uint64_t result)
{
  ++*(_DWORD *)(result + 8);
  return result;
}

uint64_t rabit::engine::EmptyEngine::VersionNumber(rabit::engine::EmptyEngine *this)
{
  return *((unsigned int *)this + 2);
}

void rabit::engine::EmptyEngine::TrackerPrint(uint64_t a1, const char *a2)
{
  uint64_t *v2;

  if (a2[23] >= 0)
    v2 = (uint64_t *)a2;
  else
    v2 = *(uint64_t **)a2;
  xgboost_old::utils::Printf((xgboost_old::utils *)"%s", a2, v2);
}

void rabit::utils::Error(rabit::utils *this, const char *a2, ...)
{
  void *v3;
  va_list va;

  va_start(va, a2);
  v3 = operator new(0x1008uLL);
  bzero(v3, 0x1001uLL);
  vsnprintf((char *)v3, 0x1000uLL, (const char *)this, va);
  fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", (const char *)v3);
  exit(-1);
}

void sub_2183E4344(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t _GLOBAL__sub_I_engine_empty_cc()
{
  uint64_t result;

  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  result = __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  rabit::engine::manager = (uint64_t)&unk_24D93EE40;
  dword_254FFA928 = 0;
  return result;
}

uint64_t CoreML::RangeValue::value(CoreML::RangeValue *this)
{
  std::runtime_error *exception;

  if (*(_BYTE *)this)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Attempting to access unbound size_t val from RangeVal.");
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  return *((_QWORD *)this + 1);
}

void sub_2183E4404(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t CoreML::RangeValue::isUnbound(CoreML::RangeValue *this)
{
  return *(unsigned __int8 *)this;
}

BOOL CoreML::RangeValue::operator+(_BYTE *a1)
{
  return *a1 != 0;
}

BOOL CoreML::RangeValue::operator+(_BYTE *a1, int a2)
{
  if ((a2 & 0x80000000) == 0)
    return *a1 != 0;
  return *a1 != 0;
}

BOOL CoreML::RangeValue::operator*(_BYTE *a1)
{
  return *a1 != 0;
}

_QWORD *operator<<(_QWORD *a1, CoreML::RangeValue *this)
{
  void **v3;
  uint64_t v4;
  void *__p[2];
  unsigned __int8 v7;

  if (*(_BYTE *)this)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "inf");
    if ((v7 & 0x80u) == 0)
      v3 = __p;
    else
      v3 = (void **)__p[0];
    if ((v7 & 0x80u) == 0)
      v4 = v7;
    else
      v4 = (uint64_t)__p[1];
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v3, v4);
    if ((char)v7 < 0)
      operator delete(__p[0]);
  }
  else
  {
    CoreML::RangeValue::value(this);
    std::ostream::operator<<();
  }
  return a1;
}

void sub_2183E4544(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL CoreML::RangeValue::operator-(_BYTE *a1)
{
  return *a1 != 0;
}

uint64_t CoreML::RangeValue::operator/(CoreML::RangeValue *a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  std::runtime_error *exception;
  std::string v7;
  _BYTE v8[16];
  _QWORD v9[33];

  if (*(_BYTE *)a1)
    return 1;
  if (!a2)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v8);
    v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Dividing range ", 15);
    v5 = operator<<(v4, a1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)" by 0.", 6);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::runtime_error::runtime_error(exception, &v7);
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  return 0;
}

void sub_2183E4674(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
    {
LABEL_6:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t CoreML::ShapeRange::ShapeRange(uint64_t this)
{
  *(_BYTE *)this = 0;
  *(_QWORD *)(this + 8) = 0;
  *(_BYTE *)(this + 16) = 1;
  *(_QWORD *)(this + 24) = 0;
  return this;
}

uint64_t CoreML::ShapeRange::ShapeRange(uint64_t this, uint64_t a2)
{
  *(_BYTE *)this = 0;
  *(_QWORD *)(this + 8) = a2;
  *(_BYTE *)(this + 16) = 1;
  *(_QWORD *)(this + 24) = 0;
  return this;
}

uint64_t CoreML::ShapeRange::ShapeRange(uint64_t this, unint64_t a2, unint64_t a3)
{
  _QWORD *v3;
  std::runtime_error *exception;
  std::string v5;
  _BYTE v6[16];
  _QWORD v7[33];

  *(_BYTE *)this = 0;
  *(_QWORD *)(this + 8) = a2;
  *(_BYTE *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = a3;
  if (a2 > a3)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Constructing invalid ShapeRange with ", 37);
    v3 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)", ", 2);
    std::ostream::operator<<();
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::runtime_error::runtime_error(exception, &v5);
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  return this;
}

void sub_2183E47C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
    {
LABEL_6:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

CoreML::ShapeRange *CoreML::ShapeRange::ShapeRange(CoreML::ShapeRange *this, const CoreML::RangeValue *a2, const CoreML::RangeValue *a3)
{
  unint64_t v6;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  std::runtime_error *exception;
  std::runtime_error *v12;
  std::string v13;
  _BYTE v14[16];
  _QWORD v15[33];

  *(_OWORD *)this = *(_OWORD *)a2;
  *((_OWORD *)this + 1) = *(_OWORD *)a3;
  if (*(_BYTE *)a2)
    goto LABEL_6;
  if (*(_BYTE *)a3)
    return this;
  v6 = *((_QWORD *)a2 + 1);
  if (v6 > CoreML::RangeValue::value(a3))
  {
LABEL_6:
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v14);
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Constructing invalid ShapeRange with ", 37);
    v9 = operator<<(v8, a2);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)", ", 2);
    operator<<(v10, a3);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::runtime_error::runtime_error(exception, &v13);
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  if (*(_BYTE *)a2)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Constructing invalid ShapeRange unbound minimum value.", 54);
    v12 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::runtime_error::runtime_error(v12, &v13);
    __cxa_throw(v12, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  return this;
}

void sub_2183E497C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
    {
LABEL_6:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t CoreML::ShapeRange::maximum(CoreML::ShapeRange *this)
{
  return *((_QWORD *)this + 2);
}

uint64_t CoreML::ShapeRange::operator+@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  *(_BYTE *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  v6 = 1;
  *(_BYTE *)(a3 + 16) = 1;
  *(_QWORD *)(a3 + 24) = 0;
  if (*(_BYTE *)a1)
  {
    v7 = 0;
  }
  else
  {
    v6 = 0;
    v7 = *(_QWORD *)(a1 + 8) + a2;
  }
  v11 = v6;
  v12 = v7;
  CoreML::ShapeRange::setLower((CoreML::ShapeRange *)a3, (const CoreML::RangeValue *)&v11);
  if (*(_BYTE *)(a1 + 16))
  {
    v8 = 0;
    v9 = 1;
  }
  else
  {
    v9 = 0;
    v8 = *(_QWORD *)(a1 + 24) + a2;
  }
  v11 = v9;
  v12 = v8;
  return CoreML::ShapeRange::setUpper((CoreML::ShapeRange *)a3, (const CoreML::RangeValue *)&v11);
}

uint64_t CoreML::ShapeRange::setLower(CoreML::ShapeRange *this, const CoreML::RangeValue *a2)
{
  uint64_t result;
  char v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  std::runtime_error *exception;
  std::string v11;
  _BYTE v12[16];
  _QWORD v13[33];

  result = CoreML::ShapeRange::isValid(this, a2);
  if (!(_DWORD)result)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v12);
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Invalid setLower ", 17);
    v7 = operator<<(v6, a2);
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" for range: ", 12);
    v9 = operator<<(v8, (__int128 *)this);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"\n", 1);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::runtime_error::runtime_error(exception, &v11);
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  if (*(_BYTE *)a2)
  {
    v5 = 1;
  }
  else
  {
    result = CoreML::RangeValue::value(a2);
    v5 = 0;
    *((_QWORD *)this + 1) = result;
  }
  *(_BYTE *)this = v5;
  return result;
}

void sub_2183E4B78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
    {
LABEL_6:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t CoreML::ShapeRange::setUpper(CoreML::ShapeRange *this, const CoreML::RangeValue *a2)
{
  uint64_t result;
  char v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  std::runtime_error *exception;
  std::string v11;
  _BYTE v12[16];
  _QWORD v13[33];

  result = CoreML::ShapeRange::isValid(this, a2);
  if (!(_DWORD)result)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v12);
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Invalid setUpper ", 17);
    v7 = operator<<(v6, a2);
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" for range: ", 12);
    v9 = operator<<(v8, (__int128 *)this);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"\n", 1);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::runtime_error::runtime_error(exception, &v11);
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  if (*(_BYTE *)a2)
  {
    v5 = 1;
  }
  else
  {
    result = CoreML::RangeValue::value(a2);
    v5 = 0;
    *((_QWORD *)this + 3) = result;
  }
  *((_BYTE *)this + 16) = v5;
  return result;
}

void sub_2183E4CB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
    {
LABEL_6:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t CoreML::ShapeRange::operator-@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  unint64_t v15;

  *(_BYTE *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  v6 = 1;
  *(_BYTE *)(a3 + 16) = 1;
  *(_QWORD *)(a3 + 24) = 0;
  if (*(_BYTE *)a1)
  {
    v7 = 0;
  }
  else
  {
    v6 = 0;
    v8 = *(_QWORD *)(a1 + 8);
    v9 = v8 >= a2;
    v7 = v8 - a2;
    if (!v9)
      v7 = 0;
  }
  v14 = v6;
  v15 = v7;
  CoreML::ShapeRange::setLower((CoreML::ShapeRange *)a3, (const CoreML::RangeValue *)&v14);
  if (*(_BYTE *)(a1 + 16))
  {
    v10 = 0;
    v11 = 1;
  }
  else
  {
    v11 = 0;
    v12 = *(_QWORD *)(a1 + 24);
    v9 = v12 >= a2;
    v10 = v12 - a2;
    if (!v9)
      v10 = 0;
  }
  v14 = v11;
  v15 = v10;
  return CoreML::ShapeRange::setUpper((CoreML::ShapeRange *)a3, (const CoreML::RangeValue *)&v14);
}

uint64_t CoreML::ShapeRange::operator*@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  *(_BYTE *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  v6 = 1;
  *(_BYTE *)(a3 + 16) = 1;
  *(_QWORD *)(a3 + 24) = 0;
  if (*(_BYTE *)a1)
  {
    v7 = 0;
  }
  else
  {
    v6 = 0;
    v7 = *(_QWORD *)(a1 + 8) * a2;
  }
  v11 = v6;
  v12 = v7;
  CoreML::ShapeRange::setLower((CoreML::ShapeRange *)a3, (const CoreML::RangeValue *)&v11);
  if (*(_BYTE *)(a1 + 16))
  {
    v8 = 0;
    v9 = 1;
  }
  else
  {
    v9 = 0;
    v8 = *(_QWORD *)(a1 + 24) * a2;
  }
  v11 = v9;
  v12 = v8;
  return CoreML::ShapeRange::setUpper((CoreML::ShapeRange *)a3, (const CoreML::RangeValue *)&v11);
}

uint64_t CoreML::ShapeRange::operator/@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  *(_BYTE *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_BYTE *)(a3 + 16) = 1;
  *(_QWORD *)(a3 + 24) = 0;
  v9 = CoreML::RangeValue::operator/((CoreML::RangeValue *)a1, a2);
  v10 = v6;
  CoreML::ShapeRange::setLower((CoreML::ShapeRange *)a3, (const CoreML::RangeValue *)&v9);
  v9 = CoreML::RangeValue::operator/((CoreML::RangeValue *)(a1 + 16), a2);
  v10 = v7;
  return CoreML::ShapeRange::setUpper((CoreML::ShapeRange *)a3, (const CoreML::RangeValue *)&v9);
}

uint64_t CoreML::ShapeRange::divideAndRoundUp@<X0>(CoreML::ShapeRange *this@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v11;
  unint64_t v12;

  v6 = 0;
  *(_BYTE *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  v7 = 1;
  *(_BYTE *)(a3 + 16) = 1;
  *(_QWORD *)(a3 + 24) = 0;
  if (a2)
  {
    if (!*(_BYTE *)this)
    {
      v6 = *((_QWORD *)this + 1);
      v7 = 0;
      if (v6)
        v6 = (v6 - 1) / a2 + 1;
    }
  }
  v11 = v7;
  v12 = v6;
  CoreML::ShapeRange::setLower((CoreML::ShapeRange *)a3, (const CoreML::RangeValue *)&v11);
  v8 = 0;
  v9 = 1;
  if (a2)
  {
    if (!*((_BYTE *)this + 16))
    {
      v8 = *((_QWORD *)this + 3);
      v9 = 0;
      if (v8)
        v8 = (v8 - 1) / a2 + 1;
    }
  }
  v11 = v9;
  v12 = v8;
  return CoreML::ShapeRange::setUpper((CoreML::ShapeRange *)a3, (const CoreML::RangeValue *)&v11);
}

uint64_t CoreML::ShapeRange::operator+@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;

  *(_BYTE *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  v6 = 1;
  *(_BYTE *)(a3 + 16) = 1;
  *(_QWORD *)(a3 + 24) = 0;
  v13 = *a2;
  if ((_BYTE)v13)
  {
    v7 = 0;
  }
  else
  {
    v8 = CoreML::RangeValue::value((CoreML::RangeValue *)&v13);
    if (*(_BYTE *)a1)
    {
      v7 = 0;
      v6 = 1;
    }
    else
    {
      v6 = 0;
      v7 = *(_QWORD *)(a1 + 8) + v8;
    }
  }
  v14 = v6;
  v15 = v7;
  CoreML::ShapeRange::setLower((CoreML::ShapeRange *)a3, (const CoreML::RangeValue *)&v14);
  v13 = a2[1];
  if ((_BYTE)v13 || (v9 = CoreML::RangeValue::value((CoreML::RangeValue *)&v13), *(_BYTE *)(a1 + 16)))
  {
    v10 = 0;
    v11 = 1;
  }
  else
  {
    v11 = 0;
    v10 = *(_QWORD *)(a1 + 24) + v9;
  }
  v14 = v11;
  v15 = v10;
  return CoreML::ShapeRange::setUpper((CoreML::ShapeRange *)a3, (const CoreML::RangeValue *)&v14);
}

uint64_t CoreML::ShapeRange::operator+@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v11;
  unint64_t v12;
  BOOL v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;

  *(_BYTE *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_BYTE *)(a3 + 16) = 1;
  *(_QWORD *)(a3 + 24) = 0;
  if ((a2 & 0x80000000) == 0)
  {
    if (!*(_BYTE *)a1)
    {
      v6 = 0;
      v7 = *(_QWORD *)(a1 + 8) + a2;
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  if (*(_BYTE *)a1)
  {
LABEL_5:
    v7 = 0;
    v6 = 1;
    goto LABEL_6;
  }
  v6 = 0;
  v11 = -a2;
  v12 = *(_QWORD *)(a1 + 8);
  v13 = v12 >= v11;
  v7 = v12 - v11;
  if (!v13)
    v7 = 0;
LABEL_6:
  v16 = v6;
  v17 = v7;
  CoreML::ShapeRange::setLower((CoreML::ShapeRange *)a3, (const CoreML::RangeValue *)&v16);
  if ((a2 & 0x80000000) == 0)
  {
    if (!*(_BYTE *)(a1 + 16))
    {
      v8 = 0;
      v9 = *(_QWORD *)(a1 + 24) + a2;
      goto LABEL_11;
    }
LABEL_10:
    v9 = 0;
    v8 = 1;
    goto LABEL_11;
  }
  if (*(_BYTE *)(a1 + 16))
    goto LABEL_10;
  v8 = 0;
  v14 = -a2;
  v15 = *(_QWORD *)(a1 + 24);
  v13 = v15 >= v14;
  v9 = v15 - v14;
  if (!v13)
    v9 = 0;
LABEL_11:
  v16 = v8;
  v17 = v9;
  return CoreML::ShapeRange::setUpper((CoreML::ShapeRange *)a3, (const CoreML::RangeValue *)&v16);
}

uint64_t CoreML::ShapeRange::operator-@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  unint64_t v15;

  *(_BYTE *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  v6 = 1;
  *(_BYTE *)(a3 + 16) = 1;
  *(_QWORD *)(a3 + 24) = 0;
  if (*(_BYTE *)a1)
  {
    v7 = 0;
  }
  else
  {
    v6 = 0;
    if ((a2 & 0x80000000) != 0)
    {
      v7 = *(_QWORD *)(a1 + 8) + -a2;
    }
    else
    {
      v8 = *(_QWORD *)(a1 + 8);
      v9 = v8 >= a2;
      v7 = v8 - a2;
      if (!v9)
        v7 = 0;
    }
  }
  v14 = v6;
  v15 = v7;
  CoreML::ShapeRange::setLower((CoreML::ShapeRange *)a3, (const CoreML::RangeValue *)&v14);
  if (*(_BYTE *)(a1 + 16))
  {
    v10 = 0;
    v11 = 1;
  }
  else
  {
    v11 = 0;
    if ((a2 & 0x80000000) != 0)
    {
      v10 = *(_QWORD *)(a1 + 24) + -a2;
    }
    else
    {
      v12 = *(_QWORD *)(a1 + 24);
      v9 = v12 >= a2;
      v10 = v12 - a2;
      if (!v9)
        v10 = 0;
    }
  }
  v14 = v11;
  v15 = v10;
  return CoreML::ShapeRange::setUpper((CoreML::ShapeRange *)a3, (const CoreML::RangeValue *)&v14);
}

uint64_t CoreML::ShapeRange::operator*@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;

  *(_BYTE *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  v6 = 1;
  *(_BYTE *)(a3 + 16) = 1;
  *(_QWORD *)(a3 + 24) = 0;
  v13 = *a2;
  if ((_BYTE)v13)
  {
    v7 = 0;
  }
  else
  {
    v8 = CoreML::RangeValue::value((CoreML::RangeValue *)&v13);
    if (*(_BYTE *)a1)
    {
      v7 = 0;
      v6 = 1;
    }
    else
    {
      v6 = 0;
      v7 = *(_QWORD *)(a1 + 8) * v8;
    }
  }
  v14 = v6;
  v15 = v7;
  CoreML::ShapeRange::setLower((CoreML::ShapeRange *)a3, (const CoreML::RangeValue *)&v14);
  v13 = a2[1];
  if ((_BYTE)v13 || (v9 = CoreML::RangeValue::value((CoreML::RangeValue *)&v13), *(_BYTE *)(a1 + 16)))
  {
    v10 = 0;
    v11 = 1;
  }
  else
  {
    v11 = 0;
    v10 = *(_QWORD *)(a1 + 24) * v9;
  }
  v14 = v11;
  v15 = v10;
  return CoreML::ShapeRange::setUpper((CoreML::ShapeRange *)a3, (const CoreML::RangeValue *)&v14);
}

uint64_t CoreML::ShapeRange::operator/@<X0>(__int128 *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  _QWORD *v5;
  _QWORD *v6;
  std::runtime_error *exception;
  std::string v8;
  _BYTE v9[16];
  _QWORD v10[33];

  if (a2 <= 0)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v9);
    v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Dividing ShapeRange ", 20);
    v6 = operator<<(v5, a1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" by negative or zero value ", 27);
    std::ostream::operator<<();
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::runtime_error::runtime_error(exception, &v8);
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  return CoreML::ShapeRange::operator/((uint64_t)a1, a2, a3);
}

void sub_2183E53EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
    {
LABEL_6:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

_QWORD *operator<<(_QWORD *a1, __int128 *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  __int128 v9;
  __int128 v10;

  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"[", 1);
  v10 = *a2;
  v5 = operator<<(v4, (CoreML::RangeValue *)&v10);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)", ", 2);
  v9 = a2[1];
  v7 = operator<<(v6, (CoreML::RangeValue *)&v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"]", 1);
  return a1;
}

BOOL CoreML::ShapeRange::isValid(CoreML::ShapeRange *this, const CoreML::RangeValue *a2)
{
  unint64_t v5;
  unint64_t v6;

  if (!*(_BYTE *)a2)
  {
    if (*(_BYTE *)this)
      return 0;
    v5 = *((_QWORD *)this + 1);
    if (v5 > CoreML::RangeValue::value(a2))
      return 0;
  }
  if (*((_BYTE *)this + 16))
    return 1;
  if (*(_BYTE *)a2)
    return 0;
  v6 = *((_QWORD *)this + 3);
  return v6 >= CoreML::RangeValue::value(a2);
}

uint64_t CoreML::ShapeRange::setValue(uint64_t this, unint64_t a2)
{
  __int128 *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  std::runtime_error *exception;
  std::string v7;
  _BYTE v8[16];
  _QWORD v9[33];

  if (*(_BYTE *)this || *(_QWORD *)(this + 8) > a2 || !*(_BYTE *)(this + 16) && *(_QWORD *)(this + 24) < a2)
  {
    v2 = (__int128 *)this;
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Invalid setValue ", 17);
    v3 = (_QWORD *)std::ostream::operator<<();
    v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)" for range: ", 12);
    v5 = operator<<(v4, v2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"\n", 1);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::runtime_error::runtime_error(exception, &v7);
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  *(_QWORD *)(this + 8) = a2;
  *(_BYTE *)this = 0;
  *(_QWORD *)(this + 24) = a2;
  *(_BYTE *)(this + 16) = 0;
  return this;
}

void sub_2183E5638(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
    {
LABEL_6:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

unint64_t CoreML::ShapeRange::intersect@<X0>(CoreML::ShapeRange *this@<X0>, const CoreML::ShapeRange *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  const CoreML::RangeValue *v8;
  CoreML::ShapeRange *v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  const CoreML::RangeValue *v14;
  CoreML::ShapeRange *v15;
  unint64_t v16;
  unint64_t result;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  std::runtime_error *exception;
  std::string v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[33];

  *(_BYTE *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_BYTE *)(a3 + 16) = 1;
  *(_QWORD *)(a3 + 24) = 0;
  v6 = *(_QWORD *)a2;
  v7 = *((_QWORD *)a2 + 1);
  v24 = v6;
  v25 = v7;
  if ((_BYTE)v6)
    goto LABEL_2;
  if (!*(_BYTE *)this)
  {
    v10 = *((_QWORD *)this + 1);
    if (v10 <= CoreML::RangeValue::value((CoreML::RangeValue *)&v24))
    {
      v6 = *(_QWORD *)a2;
      v7 = *((_QWORD *)a2 + 1);
LABEL_2:
      v24 = v6;
      v25 = v7;
      v8 = (const CoreML::RangeValue *)&v24;
      v9 = (CoreML::ShapeRange *)a3;
      goto LABEL_6;
    }
  }
  v9 = (CoreML::ShapeRange *)a3;
  v8 = this;
LABEL_6:
  CoreML::ShapeRange::setLower(v9, v8);
  v11 = *((unsigned __int8 *)this + 16);
  v12 = *((_QWORD *)a2 + 2);
  v13 = *((_QWORD *)a2 + 3);
  v24 = v12;
  v25 = v13;
  if (!v11)
  {
    if ((_BYTE)v12 || (v16 = *((_QWORD *)this + 3), v16 < CoreML::RangeValue::value((CoreML::RangeValue *)&v24)))
    {
      v15 = (CoreML::ShapeRange *)a3;
      v14 = (CoreML::ShapeRange *)((char *)this + 16);
      goto LABEL_11;
    }
    v12 = *((_QWORD *)a2 + 2);
    v13 = *((_QWORD *)a2 + 3);
  }
  v24 = v12;
  v25 = v13;
  v14 = (const CoreML::RangeValue *)&v24;
  v15 = (CoreML::ShapeRange *)a3;
LABEL_11:
  result = CoreML::ShapeRange::setUpper(v15, v14);
  if (*(_BYTE *)this
    || !*((_BYTE *)this + 16)
    && ((v18 = *((_QWORD *)this + 1),
         result = CoreML::RangeValue::value((CoreML::ShapeRange *)((char *)this + 16)),
         v18 > result)
     || *(_BYTE *)this))
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v24);
    v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"Invalid intersection between ", 29);
    v20 = operator<<(v19, (__int128 *)this);
    v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)" and ", 5);
    operator<<(v21, (__int128 *)a2);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::runtime_error::runtime_error(exception, &v23);
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  return result;
}

void sub_2183E582C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
    {
LABEL_6:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t CoreML::ShapeRange::unify@<X0>(CoreML::ShapeRange *this@<X0>, const CoreML::ShapeRange *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  CoreML::ShapeRange *v8;
  const CoreML::RangeValue *v9;
  unint64_t v10;
  int v11;
  const CoreML::RangeValue *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;

  *(_BYTE *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_BYTE *)(a3 + 16) = 1;
  *(_QWORD *)(a3 + 24) = 0;
  v6 = *(_QWORD *)a2;
  v7 = *((_QWORD *)a2 + 1);
  v17 = v6;
  v18 = v7;
  if ((_BYTE)v6)
    goto LABEL_2;
  if (!*(_BYTE *)this)
  {
    v10 = *((_QWORD *)this + 1);
    if (v10 <= CoreML::RangeValue::value((CoreML::RangeValue *)&v17))
    {
LABEL_2:
      v8 = (CoreML::ShapeRange *)a3;
      v9 = this;
      goto LABEL_7;
    }
    v6 = *(_QWORD *)a2;
    v7 = *((_QWORD *)a2 + 1);
  }
  v17 = v6;
  v18 = v7;
  v9 = (const CoreML::RangeValue *)&v17;
  v8 = (CoreML::ShapeRange *)a3;
LABEL_7:
  CoreML::ShapeRange::setLower(v8, v9);
  v12 = (CoreML::ShapeRange *)((char *)this + 16);
  v11 = *((unsigned __int8 *)this + 16);
  v13 = *((_QWORD *)a2 + 2);
  v14 = *((_QWORD *)a2 + 3);
  v17 = v13;
  v18 = v14;
  if (v11)
    return CoreML::ShapeRange::setUpper((CoreML::ShapeRange *)a3, v12);
  if (!(_BYTE)v13)
  {
    v16 = *((_QWORD *)this + 3);
    if (v16 >= CoreML::RangeValue::value((CoreML::RangeValue *)&v17))
      return CoreML::ShapeRange::setUpper((CoreML::ShapeRange *)a3, v12);
    v13 = *((_QWORD *)a2 + 2);
    v14 = *((_QWORD *)a2 + 3);
  }
  v17 = v13;
  v18 = v14;
  return CoreML::ShapeRange::setUpper((CoreML::ShapeRange *)a3, (const CoreML::RangeValue *)&v17);
}

BOOL CoreML::ShapeRange::isFixed(CoreML::ShapeRange *this)
{
  CoreML::RangeValue *v2;
  int v3;
  uint64_t v5;

  v3 = *((unsigned __int8 *)this + 16);
  v2 = (CoreML::ShapeRange *)((char *)this + 16);
  if (v3)
    return 0;
  v5 = CoreML::RangeValue::value(v2);
  return v5 == CoreML::RangeValue::value(this);
}

double CoreML::ShapeConstraint::ShapeConstraint(CoreML::ShapeConstraint *this)
{
  double result;

  *(_BYTE *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_BYTE *)this + 16) = 1;
  *((_QWORD *)this + 3) = 0;
  *((_BYTE *)this + 32) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_BYTE *)this + 48) = 1;
  *((_QWORD *)this + 7) = 0;
  *((_BYTE *)this + 64) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_BYTE *)this + 80) = 1;
  *((_QWORD *)this + 11) = 0;
  *((_BYTE *)this + 96) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_BYTE *)this + 112) = 1;
  *((_QWORD *)this + 15) = 0;
  *((_BYTE *)this + 128) = 0;
  *((_QWORD *)this + 17) = 0;
  *((_BYTE *)this + 144) = 1;
  result = 0.0;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  return result;
}

void CoreML::ShapeConstraint::updateConstraint(CoreML::ShapeConstraint *this, const CoreML::Specification::FeatureType *a2)
{
  CoreML::ShapeConstraint *v3;
  int v4;
  char *v5;
  unint64_t v6;
  CoreML::Specification::ImageFeatureType *v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  std::string::size_type v11;
  uint64_t v12;
  int j;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  std::string::size_type v20;
  std::string::size_type v21;
  uint64_t v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  std::string::size_type v28;
  std::string::size_type v29;
  __int128 v30;
  int v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t *v37;
  int *v38;
  uint64_t *v39;
  uint64_t *v40;
  unint64_t v41;
  uint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t i;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t *v56;
  int *v57;
  uint64_t *v58;
  unint64_t v59;
  CoreML::ShapeConstraint *size;
  __int128 v61;
  uint64_t v62;
  unint64_t v63;
  int64_t v64;
  unint64_t v65;
  char *v66;
  __int128 v67;
  char *v68;
  char *v69;
  __int128 v70;
  std::string::size_type v71;
  uint64_t *v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t *v75;
  CoreML::Specification::ArrayFeatureType *v76;
  uint64_t *v77;
  uint64_t *v78;
  unint64_t v79;
  uint64_t *v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  CoreML::Specification::ImageFeatureType *v84;
  uint64_t *v85;
  uint64_t *v86;
  uint64_t *v87;
  uint64_t v88;
  std::string::size_type v89;
  CoreML::Specification::ImageFeatureType *v90;
  uint64_t *v91;
  CoreML::Specification::ArrayFeatureType *v92;
  uint64_t *v93;
  std::runtime_error *v94;
  std::string *v95;
  __int128 v96;
  std::runtime_error *exception;
  std::string *v98;
  __int128 v99;
  std::string v100;
  std::string __p;
  uint64_t v102;
  _BYTE v103[32];

  v3 = this;
  v4 = *((_DWORD *)a2 + 9);
  if (v4 == 5)
  {
    memset(&__p, 0, sizeof(__p));
    v9 = *((_QWORD *)a2 + 3);
    v10 = *(_DWORD *)(v9 + 60);
    if (v10 == 21)
    {
      v44 = *(_QWORD *)(v9 + 40);
      v45 = *(int *)(v44 + 24);
      v46 = *(_QWORD *)(v44 + 32);
      if (v46)
        v47 = (uint64_t *)(v46 + 8);
      else
        v47 = 0;
      if (!(_DWORD)v45)
        goto LABEL_130;
      LODWORD(v48) = 0;
      v49 = 8 * v45;
      do
      {
        v50 = *v47++;
        v51 = *(_DWORD *)(v50 + 16);
        if (v51 <= (int)v48)
          v48 = v48;
        else
          v48 = v51;
        v49 -= 8;
      }
      while (v49);
      if ((int)v48 >= 1)
      {
        for (i = 0; i != v48; ++i)
        {
          v53 = 0;
          v54 = 0;
          v55 = -1;
          while (1)
          {
            v56 = *((_DWORD *)a2 + 9) == 5
                ? (uint64_t *)*((_QWORD *)a2 + 3)
                : CoreML::Specification::ArrayFeatureType::default_instance(this);
            v57 = *((_DWORD *)v56 + 15) == 21
                ? (int *)v56[5]
                : (int *)CoreML::Specification::ArrayFeatureType_EnumeratedShapes::default_instance((CoreML::Specification::ArrayFeatureType_EnumeratedShapes *)v56);
            if (v53 >= v57[6])
              break;
            if (*((_DWORD *)a2 + 9) == 5)
              v58 = (uint64_t *)*((_QWORD *)a2 + 3);
            else
              v58 = CoreML::Specification::ArrayFeatureType::default_instance((CoreML::Specification::ArrayFeatureType *)v57);
            if (*((_DWORD *)v58 + 15) == 21)
              this = (CoreML::ShapeConstraint *)v58[5];
            else
              this = (CoreML::ShapeConstraint *)CoreML::Specification::ArrayFeatureType_EnumeratedShapes::default_instance((CoreML::Specification::ArrayFeatureType_EnumeratedShapes *)v58);
            v59 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 4) + 8 * v53 + 8) + 24) + 8 * i + 8);
            if (v55 >= v59)
              v55 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 4) + 8 * v53 + 8) + 24) + 8 * i + 8);
            if (v54 <= v59)
              v54 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 4) + 8 * v53 + 8) + 24) + 8 * i + 8);
            ++v53;
          }
          this = (CoreML::ShapeConstraint *)CoreML::ShapeRange::ShapeRange((uint64_t)v103, v55, v54);
          size = (CoreML::ShapeConstraint *)__p.__r_.__value_.__l.__size_;
          if (__p.__r_.__value_.__l.__size_ >= __p.__r_.__value_.__r.__words[2])
          {
            this = (CoreML::ShapeConstraint *)__p.__r_.__value_.__r.__words[0];
            v62 = (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 5;
            v63 = v62 + 1;
            if ((unint64_t)(v62 + 1) >> 59)
              std::vector<float>::__throw_length_error[abi:ne180100]();
            v64 = __p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0];
            if ((uint64_t)(__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0]) >> 4 > v63)
              v63 = v64 >> 4;
            if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFE0)
              v65 = 0x7FFFFFFFFFFFFFFLL;
            else
              v65 = v63;
            if (v65)
            {
              v66 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>>((uint64_t)&__p.__r_.__value_.__r.__words[2], v65);
              size = (CoreML::ShapeConstraint *)__p.__r_.__value_.__l.__size_;
              this = (CoreML::ShapeConstraint *)__p.__r_.__value_.__r.__words[0];
            }
            else
            {
              v66 = 0;
            }
            v67 = *(_OWORD *)&v103[16];
            v68 = &v66[32 * v62];
            *(_OWORD *)v68 = *(_OWORD *)v103;
            *((_OWORD *)v68 + 1) = v67;
            if (size == this)
            {
              v71 = (std::string::size_type)&v66[32 * v62];
            }
            else
            {
              v69 = &v66[32 * v62];
              do
              {
                v70 = *((_OWORD *)size - 1);
                v71 = (std::string::size_type)(v69 - 32);
                *((_OWORD *)v69 - 2) = *((_OWORD *)size - 2);
                *((_OWORD *)v69 - 1) = v70;
                size = (CoreML::ShapeConstraint *)((char *)size - 32);
                v69 -= 32;
              }
              while (size != this);
            }
            v11 = (std::string::size_type)(v68 + 32);
            __p.__r_.__value_.__r.__words[0] = v71;
            __p.__r_.__value_.__l.__size_ = (std::string::size_type)(v68 + 32);
            __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&v66[32 * v65];
            if (this)
              operator delete(this);
          }
          else
          {
            v61 = *(_OWORD *)&v103[16];
            *(_OWORD *)__p.__r_.__value_.__l.__size_ = *(_OWORD *)v103;
            *((_OWORD *)size + 1) = v61;
            v11 = (std::string::size_type)size + 32;
          }
          __p.__r_.__value_.__l.__size_ = v11;
        }
      }
      else
      {
LABEL_130:
        v11 = 0;
      }
    }
    else
    {
      v11 = 0;
      if (v10 == 31)
      {
        v12 = 0;
        for (j = 5; ; j = *((_DWORD *)a2 + 9))
        {
          v14 = j == 5
              ? (uint64_t *)*((_QWORD *)a2 + 3)
              : CoreML::Specification::ArrayFeatureType::default_instance(this);
          this = *((_DWORD *)v14 + 15) == 31
               ? (CoreML::ShapeConstraint *)v14[5]
               : (CoreML::ShapeConstraint *)CoreML::Specification::ArrayFeatureType_ShapeRange::default_instance((CoreML::Specification::ArrayFeatureType_ShapeRange *)v14);
          if (v12 >= *((int *)this + 6))
            break;
          if (*((_DWORD *)a2 + 9) == 5)
            v15 = (uint64_t *)*((_QWORD *)a2 + 3);
          else
            v15 = CoreML::Specification::ArrayFeatureType::default_instance(this);
          if (*((_DWORD *)v15 + 15) == 31)
            this = (CoreML::ShapeConstraint *)v15[5];
          else
            this = (CoreML::ShapeConstraint *)CoreML::Specification::ArrayFeatureType_ShapeRange::default_instance((CoreML::Specification::ArrayFeatureType_ShapeRange *)v15);
          v16 = *(_QWORD *)(*((_QWORD *)this + 4) + 8 * v12 + 8);
          v17 = *(_QWORD *)(v16 + 16);
          v18 = *(_QWORD *)(v16 + 24);
          v19 = v18 & ~(v18 >> 63);
          v20 = __p.__r_.__value_.__l.__size_;
          if (__p.__r_.__value_.__l.__size_ >= __p.__r_.__value_.__r.__words[2])
          {
            v22 = (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 5;
            v23 = v22 + 1;
            if ((unint64_t)(v22 + 1) >> 59)
              std::vector<float>::__throw_length_error[abi:ne180100]();
            v24 = __p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0];
            if ((uint64_t)(__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0]) >> 4 > v23)
              v23 = v24 >> 4;
            if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFE0)
              v25 = 0x7FFFFFFFFFFFFFFLL;
            else
              v25 = v23;
            if (v25)
              this = (CoreML::ShapeConstraint *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>>((uint64_t)&__p.__r_.__value_.__r.__words[2], v25);
            else
              this = 0;
            v26 = (char *)this + 32 * v22;
            *v26 = 0;
            *((_QWORD *)v26 + 1) = v17;
            v26[16] = v18 < 0;
            *((_QWORD *)v26 + 3) = v19;
            v27 = (char *)__p.__r_.__value_.__l.__size_;
            v28 = __p.__r_.__value_.__r.__words[0];
            v29 = (std::string::size_type)v26;
            if (__p.__r_.__value_.__l.__size_ != __p.__r_.__value_.__r.__words[0])
            {
              do
              {
                v30 = *((_OWORD *)v27 - 1);
                *(_OWORD *)(v29 - 32) = *((_OWORD *)v27 - 2);
                *(_OWORD *)(v29 - 16) = v30;
                v29 -= 32;
                v27 -= 32;
              }
              while (v27 != (char *)v28);
              v27 = (char *)v28;
            }
            v21 = (std::string::size_type)(v26 + 32);
            __p.__r_.__value_.__r.__words[0] = v29;
            __p.__r_.__value_.__l.__size_ = (std::string::size_type)(v26 + 32);
            __p.__r_.__value_.__r.__words[2] = (std::string::size_type)this + 32 * v25;
            if (v27)
              operator delete(v27);
          }
          else
          {
            *(_BYTE *)__p.__r_.__value_.__l.__size_ = 0;
            *(_QWORD *)(v20 + 8) = v17;
            *(_BYTE *)(v20 + 16) = v18 < 0;
            *(_QWORD *)(v20 + 24) = v19;
            v21 = v20 + 32;
          }
          __p.__r_.__value_.__l.__size_ = v21;
          ++v12;
        }
        v11 = __p.__r_.__value_.__l.__size_;
      }
    }
    v74 = (uint64_t)(v11 - __p.__r_.__value_.__r.__words[0]) >> 5;
    if (v74)
    {
      if (v74 == 3)
      {
        CoreML::ShapeConstraint::updateChannelRange(v3, (const CoreML::ShapeRange *)__p.__r_.__value_.__l.__data_);
        CoreML::ShapeConstraint::updateHeightRange(v3, (const CoreML::ShapeRange *)(__p.__r_.__value_.__r.__words[0] + 32));
        CoreML::ShapeConstraint::updateWidthRange(v3, (const CoreML::ShapeRange *)(__p.__r_.__value_.__r.__words[0] + 64));
      }
      else
      {
        if (v74 != 1)
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::operator+<char>();
          v98 = std::string::append(&v100, "\" with an invalid array shape constraint.");
          v99 = *(_OWORD *)&v98->__r_.__value_.__l.__data_;
          *(_QWORD *)&v103[16] = *((_QWORD *)&v98->__r_.__value_.__l + 2);
          *(_OWORD *)v103 = v99;
          v98->__r_.__value_.__l.__size_ = 0;
          v98->__r_.__value_.__r.__words[2] = 0;
          v98->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(exception, (const std::string *)v103);
          __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
        }
        CoreML::ShapeConstraint::updateChannelRange(v3, (const CoreML::ShapeRange *)__p.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      if (*((_DWORD *)a2 + 9) == 5)
        v75 = (uint64_t *)*((_QWORD *)a2 + 3);
      else
        v75 = CoreML::Specification::ArrayFeatureType::default_instance(this);
      v76 = (CoreML::Specification::ArrayFeatureType *)CoreML::ShapeRange::setValue((uint64_t)v3 + 64, *(_QWORD *)(v75[3] + 8));
      if (*((_DWORD *)a2 + 9) == 5)
        v77 = (uint64_t *)*((_QWORD *)a2 + 3);
      else
        v77 = CoreML::Specification::ArrayFeatureType::default_instance(v76);
      if (*((_DWORD *)v77 + 4) == 3)
      {
        if (*((_DWORD *)a2 + 9) == 5)
          v78 = (uint64_t *)*((_QWORD *)a2 + 3);
        else
          v78 = CoreML::Specification::ArrayFeatureType::default_instance((CoreML::Specification::ArrayFeatureType *)v77);
        v92 = (CoreML::Specification::ArrayFeatureType *)CoreML::ShapeRange::setValue((uint64_t)v3 + 96, *(_QWORD *)(v78[3] + 16));
        if (*((_DWORD *)a2 + 9) == 5)
          v93 = (uint64_t *)*((_QWORD *)a2 + 3);
        else
          v93 = CoreML::Specification::ArrayFeatureType::default_instance(v92);
        v79 = *(_QWORD *)(v93[3] + 24);
      }
      else
      {
        v79 = 1;
        CoreML::ShapeRange::setValue((uint64_t)v3 + 96, 1uLL);
      }
      CoreML::ShapeRange::setValue((uint64_t)v3 + 128, v79);
    }
    if (__p.__r_.__value_.__r.__words[0])
    {
      __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    if (v4 != 4)
    {
      v94 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+<char>();
      v95 = std::string::append(&__p, " with a type description which is not a multi array or image.");
      v96 = *(_OWORD *)&v95->__r_.__value_.__l.__data_;
      *(_QWORD *)&v103[16] = *((_QWORD *)&v95->__r_.__value_.__l + 2);
      *(_OWORD *)v103 = v96;
      v95->__r_.__value_.__l.__size_ = 0;
      v95->__r_.__value_.__r.__words[2] = 0;
      v95->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v94, (const std::string *)v103);
      __cxa_throw(v94, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
    }
    v5 = (char *)this + 64;
    if (*(_DWORD *)(*((_QWORD *)a2 + 3) + 32) == 10)
      v6 = 1;
    else
      v6 = 3;
    v7 = (CoreML::Specification::ImageFeatureType *)CoreML::ShapeRange::setValue((uint64_t)v5, v6);
    if (*((_DWORD *)a2 + 9) == 4)
      v8 = (uint64_t *)*((_QWORD *)a2 + 3);
    else
      v8 = CoreML::Specification::ImageFeatureType::default_instance(v7);
    v31 = *((_DWORD *)v8 + 13);
    if (v31)
    {
      if (v31 == 31)
      {
        if (*((_DWORD *)a2 + 9) == 4)
          v72 = (uint64_t *)*((_QWORD *)a2 + 3);
        else
          v72 = CoreML::Specification::ImageFeatureType::default_instance((CoreML::Specification::ImageFeatureType *)v8);
        if (*((_DWORD *)v72 + 13) == 31)
          v80 = (uint64_t *)v72[5];
        else
          v80 = CoreML::Specification::ImageFeatureType_ImageSizeRange::default_instance((CoreML::Specification::ImageFeatureType_ImageSizeRange *)v72);
        v81 = (uint64_t *)v80[2];
        if (!v81)
          v81 = &CoreML::Specification::_SizeRange_default_instance_;
        v103[0] = 0;
        v83 = v81[2];
        v82 = v81[3];
        *(_QWORD *)&v103[8] = v83;
        v103[16] = v82 < 0;
        *(_QWORD *)&v103[24] = v82 & ~(v82 >> 63);
        CoreML::ShapeConstraint::updateWidthRange(v3, (const CoreML::ShapeRange *)v103);
        if (*((_DWORD *)a2 + 9) == 4)
          v85 = (uint64_t *)*((_QWORD *)a2 + 3);
        else
          v85 = CoreML::Specification::ImageFeatureType::default_instance(v84);
        if (*((_DWORD *)v85 + 13) == 31)
          v86 = (uint64_t *)v85[5];
        else
          v86 = CoreML::Specification::ImageFeatureType_ImageSizeRange::default_instance((CoreML::Specification::ImageFeatureType_ImageSizeRange *)v85);
        v87 = (uint64_t *)v86[3];
        if (!v87)
          v87 = &CoreML::Specification::_SizeRange_default_instance_;
        __p.__r_.__value_.__s.__data_[0] = 0;
        v89 = v87[2];
        v88 = v87[3];
        __p.__r_.__value_.__l.__size_ = v89;
        __p.__r_.__value_.__s.__data_[16] = v88 < 0;
        v102 = v88 & ~(v88 >> 63);
        goto LABEL_161;
      }
      if (v31 == 21)
      {
        v32 = 0;
        v33 = 0;
        v34 = -1;
        v35 = 1;
        v36 = -1;
        while (1)
        {
          v37 = *((_DWORD *)a2 + 9) == 4
              ? (uint64_t *)*((_QWORD *)a2 + 3)
              : CoreML::Specification::ImageFeatureType::default_instance((CoreML::Specification::ImageFeatureType *)v8);
          v38 = *((_DWORD *)v37 + 13) == 21
              ? (int *)v37[5]
              : (int *)CoreML::Specification::ImageFeatureType_EnumeratedImageSizes::default_instance((CoreML::Specification::ImageFeatureType_EnumeratedImageSizes *)v37);
          if (v35 - 1 >= v38[6])
            break;
          if (*((_DWORD *)a2 + 9) == 4)
            v39 = (uint64_t *)*((_QWORD *)a2 + 3);
          else
            v39 = CoreML::Specification::ImageFeatureType::default_instance((CoreML::Specification::ImageFeatureType *)v38);
          if (*((_DWORD *)v39 + 13) == 21)
            v40 = (uint64_t *)v39[5];
          else
            v40 = CoreML::Specification::ImageFeatureType_EnumeratedImageSizes::default_instance((CoreML::Specification::ImageFeatureType_EnumeratedImageSizes *)v39);
          v41 = *(_QWORD *)(*(_QWORD *)(v40[4] + 8 * v35) + 16);
          if (v41 > v33)
            v33 = *(_QWORD *)(*(_QWORD *)(v40[4] + 8 * v35) + 16);
          if (v41 < v36)
            v36 = *(_QWORD *)(*(_QWORD *)(v40[4] + 8 * v35) + 16);
          if (*((_DWORD *)a2 + 9) == 4)
            v42 = (uint64_t *)*((_QWORD *)a2 + 3);
          else
            v42 = CoreML::Specification::ImageFeatureType::default_instance((CoreML::Specification::ImageFeatureType *)v40);
          if (*((_DWORD *)v42 + 13) == 21)
            v8 = (uint64_t *)v42[5];
          else
            v8 = CoreML::Specification::ImageFeatureType_EnumeratedImageSizes::default_instance((CoreML::Specification::ImageFeatureType_EnumeratedImageSizes *)v42);
          v43 = *(_QWORD *)(*(_QWORD *)(v8[4] + 8 * v35) + 24);
          if (v43 > v32)
            v32 = *(_QWORD *)(*(_QWORD *)(v8[4] + 8 * v35) + 24);
          if (v43 < v34)
            v34 = *(_QWORD *)(*(_QWORD *)(v8[4] + 8 * v35) + 24);
          ++v35;
        }
        CoreML::ShapeRange::ShapeRange((uint64_t)v103, v36, v33);
        CoreML::ShapeConstraint::updateWidthRange(v3, (const CoreML::ShapeRange *)v103);
        CoreML::ShapeRange::ShapeRange((uint64_t)&__p, v34, v32);
LABEL_161:
        CoreML::ShapeConstraint::updateHeightRange(v3, (const CoreML::ShapeRange *)&__p);
      }
    }
    else
    {
      if (*((_DWORD *)a2 + 9) == 4)
        v73 = (uint64_t *)*((_QWORD *)a2 + 3);
      else
        v73 = CoreML::Specification::ImageFeatureType::default_instance((CoreML::Specification::ImageFeatureType *)v8);
      v90 = (CoreML::Specification::ImageFeatureType *)CoreML::ShapeRange::setValue((uint64_t)v3 + 96, v73[3]);
      if (*((_DWORD *)a2 + 9) == 4)
        v91 = (uint64_t *)*((_QWORD *)a2 + 3);
      else
        v91 = CoreML::Specification::ImageFeatureType::default_instance(v90);
      CoreML::ShapeRange::setValue((uint64_t)v3 + 128, v91[2]);
    }
  }
}

void sub_2183E62BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  void *v28;
  int v29;

  if (a28 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v29 & 1) == 0)
    {
LABEL_8:
      if (a16)
        operator delete(a16);
      _Unwind_Resume(a1);
    }
  }
  else if (!v29)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v28);
  goto LABEL_8;
}

uint64_t CoreML::ShapeConstraint::setChannel(CoreML::ShapeConstraint *this, unint64_t a2)
{
  return CoreML::ShapeRange::setValue((uint64_t)this + 64, a2);
}

double CoreML::ShapeConstraint::updateWidthRange(CoreML::ShapeConstraint *this, const CoreML::ShapeRange *a2)
{
  _OWORD *v2;
  double result;
  __int128 v4;
  _OWORD v5[2];

  v2 = (_OWORD *)((char *)this + 128);
  CoreML::ShapeRange::intersect((CoreML::ShapeConstraint *)((char *)this + 128), a2, (uint64_t)v5);
  result = *(double *)v5;
  v4 = v5[1];
  *v2 = v5[0];
  v2[1] = v4;
  return result;
}

double CoreML::ShapeConstraint::updateHeightRange(CoreML::ShapeConstraint *this, const CoreML::ShapeRange *a2)
{
  _OWORD *v2;
  double result;
  __int128 v4;
  _OWORD v5[2];

  v2 = (_OWORD *)((char *)this + 96);
  CoreML::ShapeRange::intersect((CoreML::ShapeConstraint *)((char *)this + 96), a2, (uint64_t)v5);
  result = *(double *)v5;
  v4 = v5[1];
  *v2 = v5[0];
  v2[1] = v4;
  return result;
}

uint64_t CoreML::ShapeConstraint::setHeight(CoreML::ShapeConstraint *this, unint64_t a2)
{
  return CoreML::ShapeRange::setValue((uint64_t)this + 96, a2);
}

uint64_t CoreML::ShapeConstraint::setWidth(CoreML::ShapeConstraint *this, unint64_t a2)
{
  return CoreML::ShapeRange::setValue((uint64_t)this + 128, a2);
}

double CoreML::ShapeConstraint::updateChannelRange(CoreML::ShapeConstraint *this, const CoreML::ShapeRange *a2)
{
  _OWORD *v2;
  double result;
  __int128 v4;
  _OWORD v5[2];

  v2 = (_OWORD *)((char *)this + 64);
  CoreML::ShapeRange::intersect((CoreML::ShapeConstraint *)((char *)this + 64), a2, (uint64_t)v5);
  result = *(double *)v5;
  v4 = v5[1];
  *v2 = v5[0];
  v2[1] = v4;
  return result;
}

std::string *CoreML::ShapeConstraint::setName(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 160), a2);
}

uint64_t CoreML::ShapeConstraint::batchRange(CoreML::ShapeConstraint *this)
{
  return (uint64_t)this + 32;
}

uint64_t CoreML::ShapeConstraint::channelRange(CoreML::ShapeConstraint *this)
{
  return (uint64_t)this + 64;
}

uint64_t CoreML::ShapeConstraint::heightRange(CoreML::ShapeConstraint *this)
{
  return (uint64_t)this + 96;
}

uint64_t CoreML::ShapeConstraint::widthRange(CoreML::ShapeConstraint *this)
{
  return (uint64_t)this + 128;
}

double CoreML::ShapeConstraint::updateSequenceRange(CoreML::ShapeConstraint *this, const CoreML::ShapeRange *a2)
{
  double result;
  __int128 v4;
  _OWORD v5[2];

  CoreML::ShapeRange::intersect(this, a2, (uint64_t)v5);
  result = *(double *)v5;
  v4 = v5[1];
  *(_OWORD *)this = v5[0];
  *((_OWORD *)this + 1) = v4;
  return result;
}

double CoreML::ShapeConstraint::updateBatchRange(CoreML::ShapeConstraint *this, const CoreML::ShapeRange *a2)
{
  _OWORD *v2;
  double result;
  __int128 v4;
  _OWORD v5[2];

  v2 = (_OWORD *)((char *)this + 32);
  CoreML::ShapeRange::intersect((CoreML::ShapeConstraint *)((char *)this + 32), a2, (uint64_t)v5);
  result = *(double *)v5;
  v4 = v5[1];
  *v2 = v5[0];
  v2[1] = v4;
  return result;
}

double CoreML::ShapeConstraint::copyFrom(CoreML::ShapeConstraint *this, const CoreML::ShapeConstraint *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  double result;
  __int128 v9;
  __int128 v10;
  __int128 v11;

  CoreML::ShapeRange::intersect(this, a2, (uint64_t)&v10);
  v4 = v11;
  *(_OWORD *)this = v10;
  *((_OWORD *)this + 1) = v4;
  CoreML::ShapeRange::intersect((CoreML::ShapeConstraint *)((char *)this + 32), (const CoreML::ShapeConstraint *)((char *)a2 + 32), (uint64_t)&v10);
  v5 = v11;
  *((_OWORD *)this + 2) = v10;
  *((_OWORD *)this + 3) = v5;
  CoreML::ShapeRange::intersect((CoreML::ShapeConstraint *)((char *)this + 64), (const CoreML::ShapeConstraint *)((char *)a2 + 64), (uint64_t)&v10);
  v6 = v11;
  *((_OWORD *)this + 4) = v10;
  *((_OWORD *)this + 5) = v6;
  CoreML::ShapeRange::intersect((CoreML::ShapeConstraint *)((char *)this + 96), (const CoreML::ShapeConstraint *)((char *)a2 + 96), (uint64_t)&v10);
  v7 = v11;
  *((_OWORD *)this + 6) = v10;
  *((_OWORD *)this + 7) = v7;
  CoreML::ShapeRange::intersect((CoreML::ShapeConstraint *)((char *)this + 128), (const CoreML::ShapeConstraint *)((char *)a2 + 128), (uint64_t)&v10);
  result = *(double *)&v10;
  v9 = v11;
  *((_OWORD *)this + 8) = v10;
  *((_OWORD *)this + 9) = v9;
  return result;
}

double CoreML::ShapeConstraint::upperBoundSequence(CoreML::ShapeConstraint *this, unint64_t a2)
{
  double result;
  __int128 v4;
  _BYTE v5[32];
  _OWORD v6[2];

  CoreML::ShapeRange::ShapeRange((uint64_t)v5, 0, a2);
  CoreML::ShapeRange::intersect(this, (const CoreML::ShapeRange *)v5, (uint64_t)v6);
  result = *(double *)v6;
  v4 = v6[1];
  *(_OWORD *)this = v6[0];
  *((_OWORD *)this + 1) = v4;
  return result;
}

double CoreML::ShapeConstraint::upperBoundHeight(CoreML::ShapeConstraint *this, const CoreML::RangeValue *a2)
{
  CoreML::ShapeRange *v3;
  double result;
  __int128 v5;
  _BYTE v6[8];
  uint64_t v7;
  _BYTE v8[32];
  _OWORD v9[2];

  if (!*(_BYTE *)a2)
  {
    v3 = (CoreML::ShapeConstraint *)((char *)this + 96);
    v6[0] = 0;
    v7 = 0;
    CoreML::ShapeRange::ShapeRange((CoreML::ShapeRange *)v8, (const CoreML::RangeValue *)v6, a2);
    CoreML::ShapeRange::intersect(v3, (const CoreML::ShapeRange *)v8, (uint64_t)v9);
    result = *(double *)v9;
    v5 = v9[1];
    *((_OWORD *)this + 6) = v9[0];
    *((_OWORD *)this + 7) = v5;
  }
  return result;
}

double CoreML::ShapeConstraint::upperBoundWidth(CoreML::ShapeConstraint *this, const CoreML::RangeValue *a2)
{
  CoreML::ShapeRange *v3;
  double result;
  __int128 v5;
  _BYTE v6[8];
  uint64_t v7;
  _BYTE v8[32];
  _OWORD v9[2];

  if (!*(_BYTE *)a2)
  {
    v3 = (CoreML::ShapeConstraint *)((char *)this + 128);
    v6[0] = 0;
    v7 = 0;
    CoreML::ShapeRange::ShapeRange((CoreML::ShapeRange *)v8, (const CoreML::RangeValue *)v6, a2);
    CoreML::ShapeRange::intersect(v3, (const CoreML::ShapeRange *)v8, (uint64_t)v9);
    result = *(double *)v9;
    v5 = v9[1];
    *((_OWORD *)this + 8) = v9[0];
    *((_OWORD *)this + 9) = v5;
  }
  return result;
}

double CoreML::ShapeConstraint::lowerBoundChannel(CoreML::ShapeConstraint *this, uint64_t a2)
{
  double result;
  __int128 v4;
  _BYTE v5[8];
  uint64_t v6;
  char v7;
  uint64_t v8;
  _OWORD v9[2];

  v5[0] = 0;
  v6 = a2;
  v7 = 1;
  v8 = 0;
  CoreML::ShapeRange::intersect((CoreML::ShapeConstraint *)((char *)this + 64), (const CoreML::ShapeRange *)v5, (uint64_t)v9);
  result = *(double *)v9;
  v4 = v9[1];
  *((_OWORD *)this + 4) = v9[0];
  *((_OWORD *)this + 5) = v4;
  return result;
}

double CoreML::ShapeConstraint::lowerBoundHeight(CoreML::ShapeConstraint *this, uint64_t a2)
{
  double result;
  __int128 v4;
  _BYTE v5[8];
  uint64_t v6;
  char v7;
  uint64_t v8;
  _OWORD v9[2];

  v5[0] = 0;
  v6 = a2;
  v7 = 1;
  v8 = 0;
  CoreML::ShapeRange::intersect((CoreML::ShapeConstraint *)((char *)this + 96), (const CoreML::ShapeRange *)v5, (uint64_t)v9);
  result = *(double *)v9;
  v4 = v9[1];
  *((_OWORD *)this + 6) = v9[0];
  *((_OWORD *)this + 7) = v4;
  return result;
}

double CoreML::ShapeConstraint::lowerBoundWidth(CoreML::ShapeConstraint *this, uint64_t a2)
{
  double result;
  __int128 v4;
  _BYTE v5[8];
  uint64_t v6;
  char v7;
  uint64_t v8;
  _OWORD v9[2];

  v5[0] = 0;
  v6 = a2;
  v7 = 1;
  v8 = 0;
  CoreML::ShapeRange::intersect((CoreML::ShapeConstraint *)((char *)this + 128), (const CoreML::ShapeRange *)v5, (uint64_t)v9);
  result = *(double *)v9;
  v4 = v9[1];
  *((_OWORD *)this + 8) = v9[0];
  *((_OWORD *)this + 9) = v4;
  return result;
}

uint64_t CoreML::ShapeConstraint::setBatch(CoreML::ShapeConstraint *this, unint64_t a2)
{
  return CoreML::ShapeRange::setValue((uint64_t)this + 32, a2);
}

uint64_t CoreML::ShapeConstraint::minimumHeight(CoreML::ShapeConstraint *this)
{
  return CoreML::RangeValue::value((CoreML::ShapeConstraint *)((char *)this + 96));
}

uint64_t CoreML::ShapeConstraint::minimumWidth(CoreML::ShapeConstraint *this)
{
  return CoreML::RangeValue::value((CoreML::ShapeConstraint *)((char *)this + 128));
}

BOOL CoreML::ShapeConstraint::hasFixedCHW(CoreML::ShapeConstraint *this)
{
  return CoreML::ShapeRange::isFixed((CoreML::ShapeConstraint *)((char *)this + 64))
      && CoreML::ShapeRange::isFixed((CoreML::ShapeConstraint *)((char *)this + 96))
      && CoreML::ShapeRange::isFixed((CoreML::ShapeConstraint *)((char *)this + 128));
}

uint64_t _GLOBAL__sub_I_LayerShapeConstraints_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

uint64_t _GLOBAL__sub_I_STGCNModelTrainer_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void _GLOBAL__sub_I_TCComputeDeviceUtil_mm()
{
  void *v0;

  v0 = (void *)MEMORY[0x219A19FE4]();
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  objc_autoreleasePoolPop(v0);
}

std::string *turi::ml_data_internal::column_indexer::column_indexer(std::string *this, __int128 *a2, int a3, std::string::value_type a4)
{
  __int128 v7;
  int v8;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v7 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v7;
  }
  *(_OWORD *)&this[1].__r_.__value_.__r.__words[1] = 0u;
  LODWORD(this[1].__r_.__value_.__l.__data_) = a3;
  this[1].__r_.__value_.__s.__data_[4] = a4;
  *(_OWORD *)&this[3].__r_.__value_.__r.__words[1] = 0u;
  *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&this[2].__r_.__value_.__r.__words[2] = 0u;
  this[4].__r_.__value_.__r.__words[0] = 0;
  this[4].__r_.__value_.__l.__size_ = 0;
  v8 = pthread_mutex_init((pthread_mutex_t *)&this[4].__r_.__value_.__r.__words[2], 0);
  assert_msg(v8 == 0, "Mutex create error %d", v8);
  return this;
}

void sub_2183E6FC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  void **v11;
  void **v12;

  v12 = v11;
  a10 = v12;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<std::vector<std::pair<unsigned long,turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<std::pair<turi::simple_spinlock,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>>>::__destroy_vector::operator()[abi:ne180100](&a10);
  if (*(char *)(v10 + 23) < 0)
    operator delete(*(void **)v10);
  _Unwind_Resume(a1);
}

void turi::ml_data_internal::column_indexer::initialize(turi::ml_data_internal::column_indexer *this)
{
  turi::thread *v2;
  unint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t i;
  uint64_t v7;

  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 112));
  std::vector<std::pair<turi::simple_spinlock,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>>>::resize((uint64_t *)this + 4, 0x100uLL);
  v3 = turi::thread::cpu_count(v2);
  std::vector<std::vector<std::pair<unsigned long,turi::flexible_type>>>::resize((uint64_t *)this + 7, v3);
  v5 = (uint64_t *)*((_QWORD *)this + 7);
  v4 = (uint64_t *)*((_QWORD *)this + 8);
  while (v5 != v4)
  {
    v7 = *v5;
    for (i = v5[1]; i != v7; i = std::pair<unsigned long,turi::flexible_type>::~pair(i - 24))
      ;
    v5[1] = v7;
    v5 += 3;
  }
}

void std::vector<std::pair<turi::simple_spinlock,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>>>::resize(uint64_t *a1, unint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;

  v2 = 0x8E38E38E38E38E39 * ((a1[1] - *a1) >> 3);
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<std::pair<turi::simple_spinlock,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>>>::__append(a1, v4);
  }
  else if (!v3)
  {
    std::vector<std::pair<turi::simple_spinlock,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>>>::__base_destruct_at_end[abi:ne180100]((uint64_t)a1, (turi::simple_spinlock *)(*a1 + 72 * a2));
  }
}

void std::vector<std::vector<std::pair<unsigned long,turi::flexible_type>>>::resize(uint64_t *a1, unint64_t a2)
{
  void **v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  void **v8;

  v3 = (void **)a1[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<std::pair<unsigned long,turi::flexible_type>>>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 24 * a2;
    while (v3 != (void **)v7)
    {
      v3 -= 3;
      v8 = v3;
      std::vector<std::pair<unsigned long,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v8);
    }
    a1[1] = v7;
  }
}

uint64_t turi::ml_data_internal::column_indexer::finalize(turi::ml_data_internal::column_indexer *this)
{
  turi::ml_data_internal::column_indexer *v1;
  _QWORD *v2;
  void **v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  void *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  unsigned int v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t *v33;
  void *v34;
  void *v35;
  uint64_t v36;
  BOOL v37;
  int v38;
  unint64_t *v40;
  unint64_t v41;
  void **v42;
  turi::ml_data_internal::column_indexer *v44;
  void **v45;
  void **v46;

  v1 = this;
  v2 = (_QWORD *)((char *)this + 80);
  std::vector<turi::flexible_type>::resize((uint64_t *)this + 10, *((_QWORD *)this + 13));
  v3 = (void **)*((_QWORD *)v1 + 7);
  v45 = (void **)*((_QWORD *)v1 + 8);
  if (v3 != v45)
  {
    v44 = v1;
    do
    {
      v4 = *v3;
      v5 = v3[1];
      while (v4 != v5)
      {
        v6 = *v2 + 16 * *v4;
        if (v4 + 1 != (_QWORD *)v6)
        {
          switch(*(_BYTE *)(v6 + 12))
          {
            case 2:
              v7 = *(unint64_t **)v6;
              do
              {
                v8 = __ldaxr(v7);
                v9 = v8 - 1;
              }
              while (__stlxr(v9, v7));
              if (!v9)
              {
                v10 = *(unint64_t **)v6;
                if (!*(_QWORD *)v6)
                  goto LABEL_48;
                if (*((char *)v10 + 31) < 0)
                  operator delete((void *)v10[1]);
                v11 = v10;
                v12 = 0x1012C404EF22A49;
                goto LABEL_47;
              }
              break;
            case 3:
              v13 = *(unint64_t **)v6;
              do
              {
                v14 = __ldaxr(v13);
                v15 = v14 - 1;
              }
              while (__stlxr(v15, v13));
              if (!v15)
              {
                v16 = *(unint64_t **)v6;
                if (!*(_QWORD *)v6)
                  goto LABEL_48;
                v17 = (void *)v16[1];
                if (v17)
                {
                  v16[2] = (unint64_t)v17;
                  operator delete(v17);
                }
                v11 = v16;
                v12 = 0x1080C409938AC02;
                goto LABEL_47;
              }
              break;
            case 4:
              v18 = *(unint64_t **)v6;
              do
              {
                v19 = __ldaxr(v18);
                v20 = v19 - 1;
              }
              while (__stlxr(v20, v18));
              if (!v20)
              {
                v21 = *(unint64_t **)v6;
                if (!*(_QWORD *)v6)
                  goto LABEL_48;
                v46 = (void **)(v21 + 1);
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v46);
                goto LABEL_31;
              }
              break;
            case 5:
              v22 = *(unint64_t **)v6;
              do
              {
                v23 = __ldaxr(v22);
                v24 = v23 - 1;
              }
              while (__stlxr(v24, v22));
              if (!v24)
              {
                v21 = *(unint64_t **)v6;
                if (!*(_QWORD *)v6)
                  goto LABEL_48;
                v46 = (void **)(v21 + 1);
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v46);
LABEL_31:
                v11 = v21;
                v12 = 0x1020C405E66F15BLL;
                goto LABEL_47;
              }
              break;
            case 8:
              v25 = *(unint64_t **)v6;
              do
              {
                v26 = __ldaxr(v25);
                v27 = v26 - 1;
              }
              while (__stlxr(v27, v25));
              if (!v27)
              {
                v28 = *(unint64_t **)v6;
                if (!*(_QWORD *)v6)
                  goto LABEL_48;
                boost::detail::shared_count::~shared_count((unsigned int **)v28 + 2);
                v11 = v28;
                v29 = -235920773;
                goto LABEL_46;
              }
              break;
            case 9:
              v30 = *(unint64_t **)v6;
              do
              {
                v31 = __ldaxr(v30);
                v32 = v31 - 1;
              }
              while (__stlxr(v32, v30));
              if (!v32)
              {
                v33 = *(unint64_t **)v6;
                if (*(_QWORD *)v6)
                {
                  v34 = (void *)v33[6];
                  if (v34)
                  {
                    v33[7] = (unint64_t)v34;
                    operator delete(v34);
                  }
                  v35 = (void *)v33[3];
                  if (v35)
                  {
                    v33[4] = (unint64_t)v35;
                    operator delete(v35);
                  }
                  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v33 + 1));
                  v11 = v33;
                  v29 = 2071181815;
LABEL_46:
                  v12 = v29 | 0x1030C4000000000;
LABEL_47:
                  MEMORY[0x219A19A08](v11, v12);
                }
LABEL_48:
                *(_QWORD *)v6 = 0;
              }
              break;
            default:
              break;
          }
          v36 = v4[1];
          *(_QWORD *)(v6 + 5) = *(_QWORD *)((char *)v4 + 13);
          *(_QWORD *)v6 = v36;
          LODWORD(v36) = *((unsigned __int8 *)v4 + 20);
          *(_BYTE *)(v6 + 12) = v36;
          v37 = v36 > 9;
          v38 = (1 << v36) & 0x33C;
          if (!v37 && v38 != 0)
          {
            v40 = *(unint64_t **)v6;
            do
              v41 = __ldaxr(v40);
            while (__stlxr(v41 + 1, v40));
          }
        }
        v4 += 3;
      }
      v3 += 3;
    }
    while (v3 != v45);
    v1 = v44;
    v3 = (void **)*((_QWORD *)v44 + 7);
    v42 = (void **)*((_QWORD *)v44 + 8);
    while (v42 != v3)
    {
      v42 -= 3;
      v46 = v42;
      std::vector<std::pair<unsigned long,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v46);
    }
  }
  *((_QWORD *)v1 + 8) = v3;
  return pthread_mutex_unlock((pthread_mutex_t *)((char *)v1 + 112));
}

unint64_t turi::ml_data_internal::column_indexer::insert_values_into_index(unint64_t result, unsigned __int8 **a2)
{
  void **v2;
  int v3;
  const turi::flexible_type *v4;
  const turi::flexible_type *v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  int v8;
  const turi::flexible_type *v9;
  const turi::flexible_type *v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  const turi::flexible_type *v13;
  const turi::flexible_type *v14;

  v2 = (void **)result;
  v3 = *(_DWORD *)(result + 24);
  switch(v3)
  {
    case 4:
      v6 = *a2;
      v7 = a2[1];
      while (v6 != v7)
      {
        v8 = v6[12];
        if (v8 != 7)
        {
          if (v8 == 5)
          {
            v9 = *(const turi::flexible_type **)(*(_QWORD *)v6 + 8);
            v10 = *(const turi::flexible_type **)(*(_QWORD *)v6 + 16);
            while (v9 != v10)
            {
              result = turi::ml_data_internal::column_indexer::map_value_to_index(v2, 0, v9);
              v9 = (const turi::flexible_type *)((char *)v9 + 32);
            }
          }
          else
          {
            result = turi::ml_data_internal::column_indexer::map_value_to_index(v2, 0, (const turi::flexible_type *)v6);
          }
        }
        v6 += 16;
      }
      break;
    case 3:
      v11 = *a2;
      v12 = a2[1];
      while (v11 != v12)
      {
        if (v11[12] != 7)
        {
          v13 = *(const turi::flexible_type **)(*(_QWORD *)v11 + 8);
          v14 = *(const turi::flexible_type **)(*(_QWORD *)v11 + 16);
          while (v13 != v14)
          {
            result = turi::ml_data_internal::column_indexer::map_value_to_index(v2, 0, v13);
            v13 = (const turi::flexible_type *)((char *)v13 + 16);
          }
        }
        v11 += 16;
      }
      break;
    case 1:
      v4 = (const turi::flexible_type *)*a2;
      v5 = (const turi::flexible_type *)a2[1];
      while (v4 != v5)
      {
        result = turi::ml_data_internal::column_indexer::map_value_to_index(v2, 0, v4);
        v4 = (const turi::flexible_type *)((char *)v4 + 16);
      }
      break;
  }
  return result;
}

unint64_t turi::ml_data_internal::column_indexer::map_value_to_index(void **this, const turi::flexible_type *a2, const turi::flexible_type *a3)
{
  unsigned int v5;
  unint64_t *v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  unsigned int v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  void *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  unsigned __int8 *v41;
  int v42;
  char *v43;
  uint64_t v44;
  unint64_t v46;
  unint64_t *v48;
  char *v49;
  unint64_t *v50;
  unint64_t v51;
  char *v52;
  unint64_t v53;
  uint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t *v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  void **v64;
  void **v65;
  uint64_t v66;
  void *v67;
  _QWORD v68[2];
  uint64_t v69;
  uint64_t v70;
  char v71;
  uint64_t v72[3];
  void **v73;
  const turi::flexible_type *v74;
  void **v75;
  void **v76;
  _QWORD *v77;
  unint64_t v78;
  _QWORD v79[2];
  _QWORD v80[3];

  v80[2] = *MEMORY[0x24BDAC8D0];
  v5 = *((unsigned __int8 *)a3 + 12);
  if (v5 > 7 || ((1 << v5) & 0x85) == 0)
  {
    v73 = this;
    v74 = a3;
    turi::ml_data_internal::column_indexer::map_value_to_index(unsigned long,turi::flexible_type const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()((uint64_t *)&v73);
  }
  memset(v80, 0, 13);
  if (v80 != (_QWORD *)a3)
  {
    *(_QWORD *)((char *)v80 + 5) = *(_QWORD *)((char *)a3 + 5);
    v80[0] = *(_QWORD *)a3;
    BYTE4(v80[1]) = v5;
    if (v5 - 2 <= 3)
    {
      v8 = (unint64_t *)v80[0];
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 + 1, v8));
    }
  }
  turi::hash128(v72, (turi *)v80, a2);
  switch(BYTE4(v80[1]))
  {
    case 2:
      v10 = (unint64_t *)v80[0];
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        v13 = v80[0];
        if (v80[0])
        {
          if (*(char *)(v80[0] + 31) < 0)
            operator delete(*(void **)(v80[0] + 8));
          v14 = v13;
          v15 = 0x1012C404EF22A49;
          goto LABEL_50;
        }
      }
      break;
    case 3:
      v27 = (unint64_t *)v80[0];
      do
      {
        v28 = __ldaxr(v27);
        v29 = v28 - 1;
      }
      while (__stlxr(v29, v27));
      if (!v29)
      {
        v30 = v80[0];
        if (v80[0])
        {
          v31 = *(void **)(v80[0] + 8);
          if (v31)
          {
            *(_QWORD *)(v80[0] + 16) = v31;
            operator delete(v31);
          }
          v14 = v30;
          v15 = 0x1080C409938AC02;
          goto LABEL_50;
        }
      }
      break;
    case 4:
      v16 = (unint64_t *)v80[0];
      do
      {
        v17 = __ldaxr(v16);
        v18 = v17 - 1;
      }
      while (__stlxr(v18, v16));
      if (!v18)
      {
        v19 = v80[0];
        if (v80[0])
        {
          v73 = (void **)(v80[0] + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v73);
          goto LABEL_43;
        }
      }
      break;
    case 5:
      v32 = (unint64_t *)v80[0];
      do
      {
        v33 = __ldaxr(v32);
        v34 = v33 - 1;
      }
      while (__stlxr(v34, v32));
      if (!v34)
      {
        v19 = v80[0];
        if (v80[0])
        {
          v73 = (void **)(v80[0] + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v73);
LABEL_43:
          v14 = v19;
          v15 = 0x1020C405E66F15BLL;
          goto LABEL_50;
        }
      }
      break;
    case 8:
      v35 = (unint64_t *)v80[0];
      do
      {
        v36 = __ldaxr(v35);
        v37 = v36 - 1;
      }
      while (__stlxr(v37, v35));
      if (!v37)
      {
        v38 = v80[0];
        if (v80[0])
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v80[0] + 16));
          v14 = v38;
          v26 = -235920773;
          goto LABEL_49;
        }
      }
      break;
    case 9:
      v20 = (unint64_t *)v80[0];
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (!v22)
      {
        v23 = v80[0];
        if (v80[0])
        {
          v24 = *(void **)(v80[0] + 48);
          if (v24)
          {
            *(_QWORD *)(v80[0] + 56) = v24;
            operator delete(v24);
          }
          v25 = *(void **)(v23 + 24);
          if (v25)
          {
            *(_QWORD *)(v23 + 32) = v25;
            operator delete(v25);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v23 + 8);
          v14 = v23;
          v26 = 2071181815;
LABEL_49:
          v15 = v26 | 0x1030C4000000000;
LABEL_50:
          MEMORY[0x219A19A08](v14, v15);
        }
      }
      break;
    default:
      break;
  }
  memset(v80, 0, 13);
  v39 = ((0xDEB2A42E44AA4C17 * v72[1]) ^ (0x7E952A7B972F486FLL * v72[0])) >> 56;
  v40 = (char *)this[4];
  v41 = (unsigned __int8 *)&v40[72 * v39];
  do
  {
    while (*v41 == 1)
      ;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(1u, v41));
  }
  while (v42);
  v43 = &v40[72 * v39 + 8];
  turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>::find((uint64_t)v43, v72, (uint64_t)v68);
  if ((char *)v68[0] != v43)
  {
    if (v71)
      v44 = v70;
    else
      v44 = v69;
    goto LABEL_66;
  }
  if (v71)
  {
    v44 = v70;
    if (v70)
    {
LABEL_66:
      v46 = *(_QWORD *)(v44 + 32);
      goto LABEL_67;
    }
  }
  else
  {
    v44 = v69;
    if (v68[1] != *(_QWORD *)v43 || v69 != *(_QWORD *)(*(_QWORD *)v43 + 8))
      goto LABEL_66;
  }
  v48 = (unint64_t *)(this + 13);
  do
    v46 = __ldaxr(v48);
  while (__stlxr(v46 + 1, v48));
  v49 = (char *)this[7];
  v78 = v46;
  memset(v79, 0, 13);
  if (v79 != (_QWORD *)a3)
  {
    *(_QWORD *)((char *)v79 + 5) = *(_QWORD *)((char *)a3 + 5);
    v79[0] = *(_QWORD *)a3;
    BYTE4(v79[1]) = *((_BYTE *)a3 + 12);
    if (BYTE4(v79[1]) <= 9u && ((1 << SBYTE4(v79[1])) & 0x33C) != 0)
    {
      v50 = (unint64_t *)v79[0];
      do
        v51 = __ldaxr(v50);
      while (__stlxr(v51 + 1, v50));
    }
  }
  v52 = &v49[24 * (_QWORD)a2];
  v55 = *((_QWORD *)v52 + 1);
  v54 = (uint64_t *)(v52 + 8);
  v53 = v55;
  v56 = v54[1];
  if (v55 >= v56)
  {
    v59 = (uint64_t *)&v49[24 * (_QWORD)a2];
    v60 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v53 - *v59) >> 3);
    v61 = v60 + 1;
    if (v60 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v62 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v56 - *v59) >> 3);
    if (2 * v62 > v61)
      v61 = 2 * v62;
    if (v62 >= 0x555555555555555)
      v63 = 0xAAAAAAAAAAAAAAALL;
    else
      v63 = v61;
    v77 = v54 + 1;
    v64 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>((uint64_t)(v54 + 1), v63);
    v65 = &v64[3 * v60];
    v73 = v64;
    v74 = (const turi::flexible_type *)v65;
    v76 = &v64[3 * v66];
    *v65 = (void *)v78;
    v65[1] = 0;
    *((_DWORD *)v65 + 4) = 0;
    *((_BYTE *)v65 + 20) = 0;
    v67 = (void *)v79[0];
    *(void **)((char *)v65 + 13) = *(void **)((char *)v79 + 5);
    v65[1] = v67;
    *((_BYTE *)v65 + 20) = BYTE4(v79[1]);
    BYTE4(v79[1]) = 0;
    v75 = v65 + 3;
    std::vector<std::pair<unsigned long,turi::flexible_type>>::__swap_out_circular_buffer(v59, &v73);
    v58 = *v54;
    std::__split_buffer<std::pair<unsigned long,turi::flexible_type>>::~__split_buffer((uint64_t)&v73);
  }
  else
  {
    *(_QWORD *)v53 = v78;
    *(_QWORD *)(v53 + 8) = 0;
    *(_DWORD *)(v53 + 16) = 0;
    *(_BYTE *)(v53 + 20) = 0;
    v57 = v79[0];
    *(_QWORD *)(v53 + 13) = *(_QWORD *)((char *)v79 + 5);
    *(_QWORD *)(v53 + 8) = v57;
    *(_BYTE *)(v53 + 20) = BYTE4(v79[1]);
    BYTE4(v79[1]) = 0;
    v58 = v53 + 24;
  }
  *v54 = v58;
  std::pair<unsigned long,turi::flexible_type>::~pair((uint64_t)&v78);
  *(_QWORD *)turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>::operator[](v43, v72) = v46;
LABEL_67:
  __dmb(0xBu);
  *v41 = 0;
  return v46;
}

void sub_2183E7AD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  _BYTE *v10;
  uint64_t v12;
  va_list va;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va1;

  va_start(va1, a10);
  va_start(va, a10);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  std::__split_buffer<std::pair<unsigned long,turi::flexible_type>>::~__split_buffer((uint64_t)va);
  std::pair<unsigned long,turi::flexible_type>::~pair((uint64_t)va1);
  __dmb(0xBu);
  *v10 = 0;
  _Unwind_Resume(a1);
}

uint64_t turi::ml_data_internal::column_indexer::extract_key_types@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;

  v3 = *(_QWORD *)(this + 80);
  if (*(_QWORD *)(this + 88) == v3)
  {
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)a2 = a2 + 8;
  }
  else
  {
    v4 = this;
    v5 = *(unsigned __int8 *)(v3 + 12);
    v9 = *(_BYTE *)(v3 + 12);
    this = std::set<turi::flex_type_enum>::set[abi:ne180100](a2, &v9, 1);
    v7 = *(_QWORD *)(v4 + 80);
    v6 = *(_QWORD *)(v4 + 88);
    while (v7 != v6)
    {
      if (*(unsigned __int8 *)(v7 + 12) != v5)
      {
        v8 = *(_BYTE *)(v7 + 12);
        this = (uint64_t)std::__tree<turi::flex_type_enum>::__emplace_unique_key_args<turi::flex_type_enum,turi::flex_type_enum>((uint64_t **)a2, &v8, &v8);
      }
      v7 += 16;
    }
  }
  return this;
}

void sub_2183E7CB0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t turi::ml_data_internal::column_indexer::reset_and_return_values@<X0>(turi::ml_data_internal::column_indexer *this@<X0>, uint64_t a2@<X8>)
{
  pthread_mutex_t *v4;
  void **v5;
  void **v6;
  void **v8;

  v4 = (pthread_mutex_t *)((char *)this + 112);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 112));
  std::vector<std::pair<turi::simple_spinlock,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>>>::__base_destruct_at_end[abi:ne180100]((uint64_t)this + 32, *((turi::simple_spinlock **)this + 4));
  v5 = (void **)*((_QWORD *)this + 7);
  v6 = (void **)*((_QWORD *)this + 8);
  while (v6 != v5)
  {
    v6 -= 3;
    v8 = v6;
    std::vector<std::pair<unsigned long,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v8);
  }
  *((_QWORD *)this + 8) = v5;
  v8 = 0;
  *((_QWORD *)this + 13) = 0;
  *(_OWORD *)a2 = *((_OWORD *)this + 5);
  *(_QWORD *)(a2 + 16) = *((_QWORD *)this + 12);
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 10) = 0;
  return pthread_mutex_unlock(v4);
}

void turi::ml_data_internal::column_indexer::set_indices(uint64_t a1, uint64_t a2)
{
  int v3;
  _QWORD *v6;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  _QWORD v10[3];
  _QWORD *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)a2 == *(_QWORD *)(a2 + 8))
  {
    v9 = *(_QWORD *)(a1 + 80);
    for (i = *(_QWORD *)(a1 + 88); i != v9; std::allocator<turi::flexible_type>::destroy[abi:ne180100](a1 + 96, i))
      i -= 16;
    *(_QWORD *)(a1 + 88) = v9;
  }
  else
  {
    v3 = *(_DWORD *)(a1 + 24);
    if ((v3 - 3) >= 2 && v3 != 1)
      turi::ml_data_internal::column_indexer::set_indices(std::vector<turi::flexible_type> &&)::$_0::operator()();
    std::vector<turi::flexible_type>::__vdeallocate((void **)(a1 + 80));
    *(_OWORD *)(a1 + 80) = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a1 + 104) = (uint64_t)(*(_QWORD *)(a1 + 88) - *(_QWORD *)(a1 + 80)) >> 4;
    std::vector<std::pair<turi::simple_spinlock,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>>>::resize((uint64_t *)(a1 + 32), 0x100uLL);
    v10[0] = &off_24D93EED8;
    v10[1] = a1;
    v11 = v10;
    turi::in_parallel((turi::thread_pool *)v10);
    v6 = v11;
    if (v11 == v10)
    {
      v7 = 4;
      v6 = v10;
    }
    else
    {
      if (!v11)
        return;
      v7 = 5;
    }
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
}

void turi::ml_data_internal::column_indexer::set_indices(std::vector<turi::flexible_type> &&)::$_0::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/ml/ml_data/column_indexer.cpp", 95);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"mode == ml_column_mode::CATEGORICAL || mode == ml_column_mode::CATEGORICAL_VECTOR || mode == ml_column_mode::DICTIONARY", 119);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/ml/ml_data/column_indexer.cpp", "operator()", 167, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::ml_data_internal::column_indexer::set_indices(std::vector<turi::flexible_type> &&)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2183E7FDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

char *turi::ml_data_internal::column_indexer::save_impl(turi::ml_data_internal::column_indexer *this, turi::oarchive *a2)
{
  unint64_t v4;
  char *v5;
  unint64_t v6;
  _BYTE *v7;
  _QWORD *v8;
  char *result;
  unint64_t v10;
  size_t v11;
  char **v12;
  size_t v13;
  BOOL v14;
  std::vector<char>::size_type v15;
  size_t v16;
  _QWORD *v17;
  size_t v18;
  BOOL v19;
  std::vector<char>::size_type v20;
  size_t v21;
  uint64_t *v22;
  size_t v23;
  BOOL v24;
  std::vector<char>::size_type v25;

  turi::archive_detail::serialize_impl<turi::oarchive,std::string,false,void>::exec((uint64_t)a2, (const void **)this);
  if (*(_QWORD *)a2)
  {
    std::ostream::write();
  }
  else
  {
    v4 = *((_QWORD *)a2 + 5);
    if (*((_QWORD *)a2 + 4) + 4 > v4)
    {
      v11 = 2 * v4 + 8;
      *((_QWORD *)a2 + 5) = v11;
      v12 = (char **)*((_QWORD *)a2 + 2);
      if (v12)
      {
        v5 = *v12;
        v13 = v12[1] - *v12;
        v14 = v11 >= v13;
        v15 = v11 - v13;
        if (v15 != 0 && v14)
        {
          std::vector<char>::__append(*((std::vector<char> **)a2 + 2), v15);
          v5 = (char *)**((_QWORD **)a2 + 2);
        }
        else if (!v14)
        {
          v12[1] = &v5[v11];
        }
      }
      else
      {
        v5 = (char *)malloc_type_realloc(*((void **)a2 + 3), v11, 0xF6EA6B1uLL);
      }
      *((_QWORD *)a2 + 3) = v5;
    }
    else
    {
      v5 = (char *)*((_QWORD *)a2 + 3);
    }
    *(_DWORD *)&v5[*((_QWORD *)a2 + 4)] = *((_DWORD *)this + 6);
    *((_QWORD *)a2 + 4) += 4;
  }
  if (*(_QWORD *)a2)
  {
    std::ostream::write();
  }
  else
  {
    v6 = *((_QWORD *)a2 + 5);
    if (*((_QWORD *)a2 + 4) + 1 > v6)
    {
      v16 = 2 * v6 + 2;
      *((_QWORD *)a2 + 5) = v16;
      v17 = (_QWORD *)*((_QWORD *)a2 + 2);
      if (v17)
      {
        v7 = (_BYTE *)*v17;
        v18 = v17[1] - *v17;
        v19 = v16 >= v18;
        v20 = v16 - v18;
        if (v20 != 0 && v19)
        {
          std::vector<char>::__append(*((std::vector<char> **)a2 + 2), v20);
          v7 = (_BYTE *)**((_QWORD **)a2 + 2);
        }
        else if (!v19)
        {
          v17[1] = &v7[v16];
        }
      }
      else
      {
        v7 = malloc_type_realloc(*((void **)a2 + 3), v16, 0xF6EA6B1uLL);
      }
      *((_QWORD *)a2 + 3) = v7;
    }
    else
    {
      v7 = (_BYTE *)*((_QWORD *)a2 + 3);
    }
    v7[(*((_QWORD *)a2 + 4))++] = *((_BYTE *)this + 28);
  }
  turi::archive_detail::vector_serialize_impl<turi::oarchive,turi::flexible_type,false>::exec((uint64_t)a2, (uint64_t *)this + 10);
  v8 = (_QWORD *)((char *)this + 104);
  if (*(_QWORD *)a2)
    return (char *)std::ostream::write();
  v10 = *((_QWORD *)a2 + 5);
  if (*((_QWORD *)a2 + 4) + 8 > v10)
  {
    v21 = 2 * v10 + 16;
    *((_QWORD *)a2 + 5) = v21;
    v22 = (uint64_t *)*((_QWORD *)a2 + 2);
    if (v22)
    {
      result = (char *)*v22;
      v23 = v22[1] - *v22;
      v24 = v21 >= v23;
      v25 = v21 - v23;
      if (v25 != 0 && v24)
      {
        std::vector<char>::__append(*((std::vector<char> **)a2 + 2), v25);
        result = (char *)**((_QWORD **)a2 + 2);
      }
      else if (!v24)
      {
        v22[1] = (uint64_t)&result[v21];
      }
    }
    else
    {
      result = (char *)malloc_type_realloc(*((void **)a2 + 3), v21, 0xF6EA6B1uLL);
    }
    *((_QWORD *)a2 + 3) = result;
  }
  else
  {
    result = (char *)*((_QWORD *)a2 + 3);
  }
  *(_QWORD *)&result[*((_QWORD *)a2 + 4)] = *v8;
  *((_QWORD *)a2 + 4) += 8;
  return result;
}

void turi::ml_data_internal::column_indexer::load_version(std::string *this, turi::iarchive *a2, uint64_t a3)
{
  std::string *v5;
  uint64_t v6;
  int *v7;
  std::string *v8;
  uint64_t v9;
  std::string::size_type *p_size;
  uint64_t v11;
  int data;
  int v13;
  int *v15;
  int *v16;
  int *v17;
  char *v18;
  int *v19;
  int *v20;
  void *v21[2];
  char v22;
  void *v23[2];
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  __int128 __p;
  uint64_t v28;
  std::string v29;
  std::string *v30;
  char *v31[2];
  _OWORD *v32;
  std::string v33[3];
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  if (a3 != 1)
  {
    if (a3 != 2)
      turi::ml_data_internal::column_indexer::load_version(turi::iarchive &,unsigned long)::$_2::operator()();
    memset(v33, 0, 24);
    turi::archive_detail::deserialize_impl<turi::iarchive,std::string,false,void>::exec((uint64_t)a2, this);
    v5 = this + 1;
    v6 = *((_QWORD *)a2 + 2);
    if (v6)
    {
      LODWORD(v5->__r_.__value_.__l.__data_) = *(_DWORD *)(v6 + *((_QWORD *)a2 + 3));
      *((_QWORD *)a2 + 3) += 4;
    }
    else
    {
      std::istream::read();
    }
    v9 = *((_QWORD *)a2 + 2);
    if (v9)
      this[1].__r_.__value_.__s.__data_[4] = *(_BYTE *)(v9 + (*((_QWORD *)a2 + 3))++);
    else
      std::istream::read();
    turi::archive_detail::vector_deserialize_impl<turi::iarchive,turi::flexible_type,false>::exec(a2, (uint64_t *)v33);
    p_size = &this[4].__r_.__value_.__l.__size_;
    v11 = *((_QWORD *)a2 + 2);
    if (v11)
    {
      *p_size = *(_QWORD *)(v11 + *((_QWORD *)a2 + 3));
      *((_QWORD *)a2 + 3) += 8;
    }
    else
    {
      std::istream::read();
    }
    if (LODWORD(v5->__r_.__value_.__l.__data_) <= 4 && ((1 << LODWORD(v5->__r_.__value_.__l.__data_)) & 0x1A) != 0)
    {
      v29.__r_.__value_.__r.__words[0] = *p_size;
      *(_QWORD *)&__p = (uint64_t)(v33[0].__r_.__value_.__l.__size_ - v33[0].__r_.__value_.__r.__words[0]) >> 4;
      v30 = (std::string *)__p;
      if (v29.__r_.__value_.__r.__words[0] != (_QWORD)__p)
      {
        v30 = &v29;
        v31[0] = (char *)&__p;
        turi::ml_data_internal::column_indexer::load_version(turi::iarchive &,unsigned long)::$_0::operator()();
      }
      turi::ml_data_internal::column_indexer::set_indices((uint64_t)this, (uint64_t)v33);
    }
    v30 = v33;
    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v30);
    return;
  }
  v31[0] = 0;
  v31[1] = 0;
  v30 = (std::string *)v31;
  turi::variant_deep_load<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>((uint64_t)&v30, a2);
  std::string::basic_string[abi:ne180100]<0>(v33, "indexer_type");
  v7 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)&v30, (const void **)&v33[0].__r_.__value_.__l.__data_);
  turi::variant_converter<std::string,void>::get(v7, &v29);
  if (SHIBYTE(v33[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33[0].__r_.__value_.__l.__data_);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v29.__r_.__value_.__l.__size_ != 6)
      goto LABEL_48;
    v8 = (std::string *)v29.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) != 6)
      goto LABEL_48;
    v8 = &v29;
  }
  data = (int)v8->__r_.__value_.__l.__data_;
  v13 = WORD2(v8->__r_.__value_.__r.__words[0]);
  if (data != 1902734965 || v13 != 25973)
LABEL_48:
    turi::ml_data_internal::column_indexer::load_version(turi::iarchive &,unsigned long)::$_1::operator()();
  std::string::basic_string[abi:ne180100]<0>(&__p, "column_name");
  v15 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)&v30, (const void **)&__p);
  turi::variant_converter<std::string,void>::get(v15, v33);
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
    operator delete(this->__r_.__value_.__l.__data_);
  *this = v33[0];
  *((_BYTE *)&v33[0].__r_.__value_.__s + 23) = 0;
  v33[0].__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(v28) < 0)
    operator delete((void *)__p);
  std::string::basic_string[abi:ne180100]<0>(v33, "mode");
  v16 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)&v30, (const void **)&v33[0].__r_.__value_.__l.__data_);
  LODWORD(this[1].__r_.__value_.__l.__data_) = turi::variant_converter<turi::ml_column_mode,void>::get((uint64_t)&__p, v16);
  if (SHIBYTE(v33[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33[0].__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(v33, "original_column_type");
  v17 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)&v30, (const void **)&v33[0].__r_.__value_.__l.__data_);
  this[1].__r_.__value_.__s.__data_[4] = turi::variant_converter<turi::flex_type_enum,void>::get((uint64_t)&__p, v17);
  if (SHIBYTE(v33[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33[0].__r_.__value_.__l.__data_);
  v33[0].__r_.__value_.__l.__size_ = 0;
  LODWORD(v33[0].__r_.__value_.__r.__words[2]) = 0;
  v33[0].__r_.__value_.__s.__data_[20] = 0;
  LODWORD(v33[0].__r_.__value_.__l.__data_) = 0;
  turi::variant_deep_load((unsigned int *)v33, a2);
  *((_QWORD *)&__p + 1) = 0;
  v28 = 0;
  *(_QWORD *)&__p = (char *)&__p + 8;
  turi::variant_converter<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,void>::get((uint64_t *)v33, (uint64_t *)&v25);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&__p, *((char **)&__p + 1));
  v18 = (char *)*((_QWORD *)&v25 + 1);
  __p = v25;
  v28 = v26;
  if (v26)
  {
    *(_QWORD *)(*((_QWORD *)&v25 + 1) + 16) = (char *)&__p + 8;
    *(_QWORD *)&v25 = (char *)&v25 + 8;
    *((_QWORD *)&v25 + 1) = 0;
    v26 = 0;
    v18 = 0;
  }
  else
  {
    *(_QWORD *)&__p = (char *)&__p + 8;
  }
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v25, v18);
  v25 = 0uLL;
  v26 = 0;
  std::string::basic_string[abi:ne180100]<0>(v21, "values_by_index_lookup");
  v32 = v21;
  v19 = (int *)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&__p, (const void **)v21, (uint64_t)&std::piecewise_construct, &v32);
  turi::variant_converter<std::vector<turi::flexible_type>,void>::get(v19 + 14, v23);
  std::vector<turi::flexible_type>::__vdeallocate((void **)&v25);
  v25 = *(_OWORD *)v23;
  v26 = v24;
  v23[1] = 0;
  v24 = 0;
  v23[0] = 0;
  v32 = v23;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v32);
  if (v22 < 0)
    operator delete(v21[0]);
  std::string::basic_string[abi:ne180100]<0>(v23, "column_size");
  v21[0] = v23;
  v20 = (int *)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&__p, (const void **)v23, (uint64_t)&std::piecewise_construct, (_OWORD **)v21);
  v32 = (_OWORD *)turi::variant_converter<unsigned long,void>::get((uint64_t)v21, v20 + 14);
  this[4].__r_.__value_.__l.__size_ = (std::string::size_type)v32;
  if (SHIBYTE(v24) < 0)
    operator delete(v23[0]);
  turi::ml_data_internal::column_indexer::set_indices((uint64_t)this, (uint64_t)&v25);
  v23[0] = &v25;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v23);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&__p, *((char **)&__p + 1));
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)v33);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v30, v31[0]);
}

void sub_2183E87AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char *a28,int a29,__int16 a30,char a31,char a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,char *a40)
{
  uint64_t v40;

  a16 = &a23;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&a27, a28);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)(v40 - 136));
  if (a38 < 0)
    operator delete(__p);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&a39, a40);
  _Unwind_Resume(a1);
}

void turi::ml_data_internal::column_indexer::load_version(turi::iarchive &,unsigned long)::$_0::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/ml/ml_data/column_indexer.cpp", 95);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"_column_size", 12);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"values.size()", 13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/ml/ml_data/column_indexer.cpp", "operator()", 260, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::ml_data_internal::column_indexer::load_version(turi::iarchive &,unsigned long)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2183E8A48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::ml_data_internal::column_indexer::load_version(turi::iarchive &,unsigned long)::$_1::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/ml/ml_data/column_indexer.cpp", 95);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"indexer_type == \"unique\"", 24);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/ml/ml_data/column_indexer.cpp", "operator()", 272, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::ml_data_internal::column_indexer::load_version(turi::iarchive &,unsigned long)::$_1::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2183E8BC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void sub_2183E8DE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

uint64_t *turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>::find@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  BOOL v14;
  _QWORD v15[6];

  v15[5] = *MEMORY[0x24BDAC8D0];
  v6 = a2[1];
  v15[0] = *a2;
  v15[1] = v6;
  v15[2] = 0;
  v7 = *(uint64_t **)a1;
  result = turi::hopscotch_table<std::pair<turi::hash_value,unsigned long>,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>::hash_redirect,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>::key_equal_redirect>::find(*(uint64_t **)a1, v15);
  v10 = v9;
  if (v7 == *(uint64_t **)a1 && v9 == *(_QWORD *)(*(_QWORD *)a1 + 8))
  {
    result = boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<turi::hash_value const,unsigned long>>,turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>>::find_node((_QWORD *)(a1 + 8), a2);
    *(_QWORD *)a3 = a1;
    *(_QWORD *)(a3 + 8) = v7;
    *(_QWORD *)(a3 + 16) = v10;
    *(_QWORD *)(a3 + 24) = result;
    v14 = *(uint64_t **)a1 == v7 && *(_QWORD *)(*(_QWORD *)a1 + 8) == v10;
    *(_BYTE *)(a3 + 32) = v14;
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 24);
    if (v12)
      v12 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * *(_QWORD *)(a1 + 16));
    *(_QWORD *)a3 = a1;
    *(_QWORD *)(a3 + 8) = v7;
    *(_QWORD *)(a3 + 16) = v9;
    *(_QWORD *)(a3 + 24) = v12;
    *(_BYTE *)(a3 + 32) = 0;
  }
  return result;
}

uint64_t turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>::operator[](_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  _OWORD v7[2];
  char v8;
  _BYTE v9[32];
  char v10;
  _QWORD v11[6];

  v11[5] = *MEMORY[0x24BDAC8D0];
  turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>::find((uint64_t)a1, a2, (uint64_t)v9);
  v4 = a2[1];
  v11[0] = *a2;
  v11[1] = v4;
  v11[2] = 0;
  if (*(_QWORD **)v9 != a1)
    goto LABEL_7;
  if (v10)
  {
    if (*(_QWORD *)&v9[24])
      goto LABEL_7;
  }
  else if (*(_OWORD *)&v9[8] != __PAIR128__(*(_QWORD *)(*a1 + 8), *a1))
  {
    goto LABEL_7;
  }
  turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>::do_insert((uint64_t)a1, v11, (uint64_t)v7);
  *(_OWORD *)v9 = v7[0];
  *(_OWORD *)&v9[16] = v7[1];
  v10 = v8;
LABEL_7:
  if (v10)
    v5 = *(_QWORD *)&v9[24] + 16;
  else
    v5 = *(_QWORD *)&v9[16] + 16;
  return v5 + 16;
}

uint64_t *turi::hopscotch_table<std::pair<turi::hash_value,unsigned long>,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>::hash_redirect,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>::key_equal_redirect>::find(uint64_t *a1, _QWORD *a2)
{
  unint64_t v2;
  unint64_t v3;

  v2 = 17 * ((4097 * *a2) ^ ((unint64_t)(4097 * *a2) >> 22));
  v3 = 129 * ((1025 * (v2 ^ (v2 >> 9))) ^ ((1025 * (v2 ^ (v2 >> 9))) >> 2));
  return turi::hopscotch_table<std::pair<turi::hash_value,unsigned long>,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>::hash_redirect,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>::key_equal_redirect>::find_impl(a1, a2, (v3 ^ (v3 >> 12)) & a1[5]);
}

uint64_t *turi::hopscotch_table<std::pair<turi::hash_value,unsigned long>,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>::hash_redirect,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>::key_equal_redirect>::find_impl(uint64_t *result, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *result;
  v4 = *(_DWORD *)(*result + 48 * a3);
  if (v4 >= 2)
  {
    v5 = v4 >> 1;
    do
    {
      v6 = __clz(__rbit32(v5));
      if ((*(_BYTE *)(v3 + 48 * (v6 + a3)) & 1) != 0)
      {
        v7 = v3 + 48 * (v6 + a3);
        if (a2[1] == *(_QWORD *)(v7 + 24) && *a2 == *(_QWORD *)(v7 + 16))
          break;
      }
      v5 &= ~(1 << v6);
    }
    while (v5);
  }
  return result;
}

_QWORD *boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<turi::hash_value const,unsigned long>>,turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>>::find_node(_QWORD *a1, _QWORD *a2)
{
  unint64_t v2;
  unint64_t v3;

  v2 = ~*a2 + (*a2 << 21);
  v3 = 21 * ((265 * (v2 ^ (v2 >> 24))) ^ ((265 * (v2 ^ (v2 >> 24))) >> 14));
  return boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<turi::hash_value const,unsigned long>>,turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>>::find_node_impl<turi::hash_value,std::equal_to<turi::hash_value>>(a1, 2147483649u * (v3 ^ (v3 >> 28)), a2);
}

_QWORD *boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<turi::hash_value const,unsigned long>>,turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>>::find_node_impl<turi::hash_value,std::equal_to<turi::hash_value>>(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *result;

  if (!a1[2])
    return 0;
  v3 = (a1[1] - 1) & a2;
  v4 = *(_QWORD **)(a1[5] + 8 * v3);
  if (!v4)
    return 0;
  result = (_QWORD *)*v4;
  if (!*v4)
    return result;
LABEL_4:
  if (result[3] != a3[1] || result[2] != *a3)
  {
    if ((result[1] & 0x7FFFFFFFFFFFFFFFLL) == v3)
    {
      while (1)
      {
        result = (_QWORD *)*result;
        if (!result)
          return result;
        if ((result[1] & 0x8000000000000000) == 0)
          goto LABEL_4;
      }
    }
    return 0;
  }
  return result;
}

uint64_t *std::vector<std::pair<unsigned long,turi::flexible_type>>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  if (v2 != *result)
  {
    v5 = 0;
    do
    {
      v6 = v4 + v5;
      *(_QWORD *)(v6 - 24) = *(_QWORD *)(v2 + v5 - 24);
      *(_QWORD *)(v6 - 16) = 0;
      *(_DWORD *)(v6 - 8) = 0;
      *(_BYTE *)(v6 - 4) = 0;
      v7 = *(_QWORD *)(v2 + v5 - 16);
      *(_QWORD *)(v6 - 11) = *(_QWORD *)(v2 + v5 - 11);
      *(_QWORD *)(v6 - 16) = v7;
      *(_BYTE *)(v6 - 4) = *(_BYTE *)(v2 + v5 - 4);
      *(_BYTE *)(v2 + v5 - 4) = 0;
      v5 -= 24;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  v8 = *result;
  *result = v4;
  a2[1] = v8;
  v9 = result[1];
  result[1] = a2[2];
  a2[2] = v9;
  v10 = result[2];
  result[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

_QWORD *turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>::do_insert@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *result;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v14;

  result = turi::hopscotch_table<std::pair<turi::hash_value,unsigned long>,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>::hash_redirect,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>::key_equal_redirect>::insert_impl(*(uint64_t **)a1, a2, 1);
  v8 = result;
  v9 = v7;
  v10 = *(_QWORD **)a1 == result && *(_QWORD *)(*(_QWORD *)a1 + 8) == v7;
  if (v10
    && ((float)((float)(unint64_t)(*(_QWORD *)(a1 + 24) + result[4])
              / (float)(unint64_t)(*(_QWORD *)(a1 + 24) - 0x5555555555555555 * ((v7 - *result) >> 4))) <= 0.8
     || (turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>::rehash_to_new_container((uint64_t **)a1, -1), result = turi::hopscotch_table<std::pair<turi::hash_value,unsigned long>,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>::hash_redirect,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>::key_equal_redirect>::insert_impl(*(uint64_t **)a1, a2, 1), v8 = result, v9 = v12, *(_QWORD **)a1 == result)&& *(_QWORD *)(*(_QWORD *)a1 + 8) == v12))
  {
    result = boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<turi::hash_value const,unsigned long>>,turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>>::emplace_unique<std::pair<turi::hash_value,unsigned long> const&>((_QWORD *)(a1 + 8), a2, a2);
    *(_QWORD *)a3 = a1;
    *(_QWORD *)(a3 + 8) = v8;
    *(_QWORD *)(a3 + 16) = v9;
    *(_QWORD *)(a3 + 24) = result;
    v14 = *(_QWORD **)a1 == v8 && *(_QWORD *)(*(_QWORD *)a1 + 8) == v9;
    *(_BYTE *)(a3 + 32) = v14;
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 24);
    if (v11)
      v11 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * *(_QWORD *)(a1 + 16));
    *(_QWORD *)a3 = a1;
    *(_QWORD *)(a3 + 8) = v8;
    *(_QWORD *)(a3 + 16) = v9;
    *(_QWORD *)(a3 + 24) = v11;
    *(_BYTE *)(a3 + 32) = 0;
  }
  return result;
}

void turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>::rehash_to_new_container(uint64_t **a1, uint64_t a2)
{
  uint64_t *new_container;
  uint64_t **v4;
  uint64_t *v5;
  _QWORD *v6;
  char *v7;
  BOOL v9;
  uint64_t *v10;
  int v11;
  _QWORD *v12;
  uint64_t v14;
  _QWORD *v15;
  char *v16;
  char *v17;
  char v18;
  void *v20;
  uint64_t **v21;
  __int128 v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;

  if (a2 == -1)
    a2 = 2 * ((_QWORD)a1[3] + (*a1)[4]);
  new_container = turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>::create_new_container((uint64_t)a1, a2);
  turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>::begin((uint64_t)a1, (uint64_t)&v21);
  v4 = v21;
  v7 = (char *)*((_QWORD *)&v22 + 1);
  v5 = (uint64_t *)v22;
  v6 = v23;
  v9 = *v21 == (uint64_t *)v22 && (*v21)[1] == *((_QWORD *)&v22 + 1);
  LOBYTE(v21) = 0;
  v22 = xmmword_2186C4E00;
  LODWORD(v23) = 1065353216;
  v24 = 0;
  v25 = 0;
  while (v4 != a1)
  {
    if (v9)
      goto LABEL_15;
LABEL_20:
    v11 = 1;
    v12 = v7 + 16;
LABEL_21:
    if (new_container == turi::hopscotch_table<std::pair<turi::hash_value,unsigned long>,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>::hash_redirect,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>::key_equal_redirect>::insert_impl(new_container, v12, 1)&& new_container[1] == v14)
    {
      if (v11)
        v15 = v7 + 16;
      else
        v15 = v6 + 2;
      boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<turi::hash_value const,unsigned long>>,turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>>::emplace_unique<std::pair<turi::hash_value,unsigned long> const&>(&v21, v15, v15);
    }
    if (v11)
    {
      v16 = (char *)v5[1];
      v17 = v7 + 48;
      while (v17 != v16)
      {
        v18 = *v17;
        v17 += 48;
        if ((v18 & 1) != 0)
        {
          v16 = v17 - 48;
          break;
        }
      }
      if (v16 == (char *)(*v4)[1] && v5 == *v4)
        v9 = 1;
      v7 = v16;
    }
    else
    {
      v6 = (_QWORD *)*v6;
    }
  }
  v10 = *a1;
  if (!v9)
  {
    if (v5 == v10 && v7 == (char *)v10[1])
      goto LABEL_41;
    goto LABEL_20;
  }
  if (v6)
  {
LABEL_15:
    v11 = 0;
    v12 = v6 + 2;
    goto LABEL_21;
  }
  v5 = *a1;
LABEL_41:
  *a1 = new_container;
  std::swap[abi:ne180100]<boost::unordered::unordered_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>,std::allocator<std::pair<turi::hash_value const,unsigned long>>>>((uint64_t)(a1 + 1), (uint64_t)&v21);
  v20 = (void *)*v5;
  if (*v5)
  {
    v5[1] = (uint64_t)v20;
    operator delete(v20);
  }
  MEMORY[0x219A19A08](v5, 0x1020C40CC2D9803);
  boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const,std::vector<turi::groupby_aggregate_impl::groupby_element> *>>,unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>>::delete_buckets(&v21);
}

void sub_2183E9528(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const,std::vector<turi::groupby_aggregate_impl::groupby_element> *>>,unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>>::delete_buckets(&a9);
  _Unwind_Resume(a1);
}

uint64_t *turi::hopscotch_table<std::pair<turi::hash_value,unsigned long>,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>::hash_redirect,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>::key_equal_redirect>::insert_impl(uint64_t *a1, _QWORD *a2, int a3)
{
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t i;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unsigned int v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;

  v4 = a1;
  v5 = 17 * ((4097 * *a2) ^ ((unint64_t)(4097 * *a2) >> 22));
  v6 = 129 * ((1025 * (v5 ^ (v5 >> 9))) ^ ((1025 * (v5 ^ (v5 >> 9))) >> 2));
  v7 = (v6 ^ (v6 >> 12)) & a1[5];
  v8 = turi::hopscotch_table<std::pair<turi::hash_value,unsigned long>,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>::hash_redirect,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>::key_equal_redirect>::try_find_and_overwrite(a1, a2, v7, a3);
  if (v8 != v4 || v4[1] != v9)
    return v8;
  v11 = *v4;
  v12 = 0xAAAAAAAAAAAAAAABLL * ((v9 - *v4) >> 4);
  if (v7 + 620 < v12)
    v12 = v7 + 620;
  v24 = v7 >= v12;
  v13 = v7 - v12;
  if (!v24)
  {
    v14 = 0;
    for (i = 48 * v7; (*(_BYTE *)(v11 + i) & 1) != 0; i += 48)
    {
      if (v13 == --v14)
        return v4;
    }
    v16 = -v14;
    v17 = v7 - v14;
    if ((unint64_t)-v14 >= 0x1F)
    {
      do
      {
        v18 = v17;
        v19 = *v4;
        v20 = 48 * v17 - 1440;
        v21 = 30;
        while (1)
        {
          v22 = *(_DWORD *)(v19 + v20);
          v23 = __clz(__rbit32(v22 >> 1));
          v24 = v22 >= 2 && v21 >= v23;
          if (v24)
            break;
          v20 += 48;
          if (!--v21)
            return v4;
        }
        v25 = v18 + v23;
        v17 = v25 - v21;
        v26 = v19 + 48 * (v25 - v21);
        v27 = v19 + 48 * v18;
        *(_OWORD *)(v27 + 16) = *(_OWORD *)(v26 + 16);
        *(_QWORD *)(v27 + 32) = *(_QWORD *)(v26 + 32);
        *(_DWORD *)v27 |= 1u;
        *(_DWORD *)(*v4 + 48 * (v25 - v21)) &= ~1u;
        v28 = *v4;
        v29 = (_QWORD *)(*v4 + 48 * (v25 - v21));
        v29[2] = 0;
        v29[3] = 0;
        v29[4] = 0;
        *(_DWORD *)(v28 + v20) = *(_DWORD *)(v28 + v20) & 1 | (2
                                                             * ((*(_DWORD *)(v28 + v20) >> 1) & ~(1 << v23) | (1 << v21)));
      }
      while (v25 - v7 - v21 > 0x1E);
      v11 = *v4;
      LOBYTE(v16) = v18 - v7 + v23 - v21;
    }
    v30 = v11 + 48 * v17;
    *(_OWORD *)(v30 + 16) = *(_OWORD *)a2;
    *(_QWORD *)(v30 + 32) = a2[2];
    *(_DWORD *)(v11 + 48 * v7) |= 2 << v16;
    *(_DWORD *)(*v4 + 48 * v17) |= 1u;
    ++v4[4];
  }
  return v4;
}

uint64_t *turi::hopscotch_table<std::pair<turi::hash_value,unsigned long>,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>::hash_redirect,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>::key_equal_redirect>::try_find_and_overwrite(uint64_t *a1, _QWORD *a2, uint64_t a3, int a4)
{
  uint64_t v7;
  uint64_t v9;

  turi::hopscotch_table<std::pair<turi::hash_value,unsigned long>,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>::hash_redirect,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>::key_equal_redirect>::find_impl(a1, a2, a3);
  if (v7 != a1[1] && a4 != 0)
  {
    v9 = *a1 + 16 * ((v7 - *a1) >> 4);
    *(_OWORD *)(v9 + 16) = *(_OWORD *)a2;
    *(_QWORD *)(v9 + 32) = a2[2];
  }
  return a1;
}

_QWORD *turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>::create_new_container(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)operator new();
  turi::hopscotch_table<std::pair<turi::hash_value,unsigned long>,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>::hash_redirect,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>::key_equal_redirect>::hopscotch_table(v4, a2, *(_BYTE *)(a1 + 56), *(_BYTE *)(a1 + 57));
  return v4;
}

void sub_2183E9834(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1020C40CC2D9803);
  _Unwind_Resume(a1);
}

uint64_t turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>::begin@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  _BYTE **v2;
  _BYTE *v3;
  _BYTE *v4;
  uint64_t v5;

  v2 = *(_BYTE ***)result;
  v3 = **(_BYTE ***)result;
  v4 = *(_BYTE **)(*(_QWORD *)result + 8);
  if (v3 != v4)
  {
    while ((*v3 & 1) == 0)
    {
      v3 += 48;
      if (v3 == v4)
      {
        v3 = *(_BYTE **)(*(_QWORD *)result + 8);
        break;
      }
    }
  }
  v5 = *(_QWORD *)(result + 24);
  if (v5)
    v5 = *(_QWORD *)(*(_QWORD *)(result + 48) + 8 * *(_QWORD *)(result + 16));
  *(_QWORD *)a2 = result;
  *(_QWORD *)(a2 + 8) = v2;
  *(_QWORD *)(a2 + 16) = v3;
  *(_QWORD *)(a2 + 24) = v5;
  *(_BYTE *)(a2 + 32) = v4 == v3;
  return result;
}

void std::swap[abi:ne180100]<boost::unordered::unordered_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>,std::allocator<std::pair<turi::hash_value const,unsigned long>>>>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  int v7;
  uint64_t v8;
  uint64_t v9;

  LOBYTE(v5) = 0;
  v6 = *(_OWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 40);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = v3;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const,std::vector<turi::groupby_aggregate_impl::groupby_element> *>>,unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>>::move_assign<std::integral_constant<BOOL,true>>(a1, a2);
  if (&v5 != (uint64_t *)a2)
  {
    boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const,std::vector<turi::groupby_aggregate_impl::groupby_element> *>>,unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>>::delete_buckets((_QWORD *)a2);
    *(_DWORD *)(a2 + 24) = v7;
    *(_OWORD *)(a2 + 8) = v6;
    v4 = v9;
    *(_QWORD *)(a2 + 32) = v8;
    *(_QWORD *)(a2 + 40) = v4;
    *((_QWORD *)&v6 + 1) = 0;
    v8 = 0;
    v9 = 0;
  }
  boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const,std::vector<turi::groupby_aggregate_impl::groupby_element> *>>,unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>>::delete_buckets(&v5);
}

_QWORD *turi::hopscotch_table<std::pair<turi::hash_value,unsigned long>,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>::hash_redirect,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>::key_equal_redirect>::hopscotch_table(_QWORD *a1, uint64_t a2, char a3, char a4)
{
  unint64_t v6;
  unint64_t v7;
  _QWORD *result;
  unint64_t v9;

  v6 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1) | (((a2 - 1) | ((unint64_t)(a2 - 1) >> 1)) >> 2);
  v7 = v6 | (v6 >> 4) | ((v6 | (v6 >> 4)) >> 8);
  result = std::vector<turi::hopscotch_table<std::pair<turi::hash_value,unsigned long>,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>::hash_redirect,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>::key_equal_redirect>::element,std::allocator<turi::hopscotch_table<std::pair<turi::hash_value,unsigned long>,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>::hash_redirect,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>::key_equal_redirect>::element>>::vector(a1, (v7 | (v7 >> 16) | ((v7 | (v7 >> 16)) >> 32)) + 33);
  *((_BYTE *)result + 24) = a3;
  *((_BYTE *)result + 25) = a4;
  v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(result[1] - *result) >> 4) - 33;
  result[4] = 0;
  result[5] = v9;
  return result;
}

_QWORD *std::vector<turi::hopscotch_table<std::pair<turi::hash_value,unsigned long>,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>::hash_redirect,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>::key_equal_redirect>::element,std::allocator<turi::hopscotch_table<std::pair<turi::hash_value,unsigned long>,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>::hash_redirect,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>::key_equal_redirect>::element>>::vector(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>::__vallocate[abi:ne180100](a1, a2);
    v4 = a1[1];
    v5 = v4 + 48 * a2;
    do
    {
      *(_DWORD *)v4 = 0;
      *(_QWORD *)(v4 + 24) = 0;
      *(_QWORD *)(v4 + 32) = 0;
      *(_QWORD *)(v4 + 16) = 0;
      v4 += 48;
    }
    while (v4 != v5);
    a1[1] = v5;
  }
  return a1;
}

void sub_2183E9A10(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_OWORD *boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<turi::hash_value const,unsigned long>>,turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>>::emplace_unique<std::pair<turi::hash_value,unsigned long> const&>(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _OWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;

  v5 = ~*a2 + (*a2 << 21);
  v6 = 21 * ((265 * (v5 ^ (v5 >> 24))) ^ ((265 * (v5 ^ (v5 >> 24))) >> 14));
  v7 = 2147483649u * (v6 ^ (v6 >> 28));
  v8 = boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<turi::hash_value const,unsigned long>>,turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>>::find_node_impl<turi::hash_value,std::equal_to<turi::hash_value>>(a1, v7, a2);
  if (v8)
    return v8;
  v9 = operator new(0x30uLL);
  v9[2] = 0u;
  *v9 = 0u;
  v10 = a3[1];
  *((_QWORD *)v9 + 2) = *a3;
  *((_QWORD *)v9 + 3) = v10;
  *((_QWORD *)v9 + 4) = a3[2];
  boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<turi::hash_value const,unsigned long>>,turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>>::reserve_for_insert(a1, a1[2] + 1);
  v11 = a1[1];
  v12 = (v11 - 1) & v7;
  v13 = a1[5];
  *((_QWORD *)v9 + 1) = v12 & 0x7FFFFFFFFFFFFFFFLL;
  v14 = *(_QWORD **)(v13 + 8 * v12);
  if (v14)
  {
    *(_QWORD *)v9 = *v14;
    v15 = *(_QWORD *)(v13 + 8 * v12);
  }
  else
  {
    v15 = v13 + 8 * v11;
    if (*(_QWORD *)v15)
      *(_QWORD *)(v13 + 8 * *(_QWORD *)(*(_QWORD *)v15 + 8)) = v9;
    *(_QWORD *)(v13 + 8 * v12) = v15;
    *(_QWORD *)v9 = *(_QWORD *)v15;
  }
  *(_QWORD *)v15 = v9;
  ++a1[2];
  return v9;
}

void sub_2183E9B4C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<turi::hash_value const,unsigned long>>,turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>>::reserve_for_insert(_QWORD *a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;

  if (a1[5])
  {
    if (a1[4] < a2)
    {
      if (a1[2] + (a1[2] >> 1) > a2)
        a2 = a1[2] + (a1[2] >> 1);
      v3 = boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<turi::hash_value const,unsigned long>>,turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>>::min_buckets_for_size((uint64_t)a1, a2);
      if (v3 != a1[1])
      {
        boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const,std::vector<turi::groupby_aggregate_impl::groupby_element> *>>,unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>>::create_buckets((uint64_t)a1, v3);
        v4 = a1[1];
        v5 = a1[5];
        v6 = (_QWORD *)(v5 + 8 * v4);
        v7 = (_QWORD *)*v6;
        if (*v6)
        {
          v8 = v4 - 1;
          do
          {
            v9 = ~v7[2] + (v7[2] << 21);
            v10 = 21 * ((265 * (v9 ^ (v9 >> 24))) ^ ((265 * (v9 ^ (v9 >> 24))) >> 14));
            v11 = (2147483649u * (v10 ^ (v10 >> 28))) & v8;
            v7[1] = v11 & 0x7FFFFFFFFFFFFFFFLL;
            v12 = (_QWORD *)*v7;
            if (*v7 && (v12[1] & 0x8000000000000000) != 0)
            {
              do
              {
                v7 = v12;
                v12[1] = v11 | 0x8000000000000000;
                v12 = (_QWORD *)*v12;
              }
              while (v12 && (v12[1] & 0x8000000000000000) != 0);
            }
            v13 = *(_QWORD **)(v5 + 8 * v11);
            if (v13)
            {
              *v7 = *v13;
              **(_QWORD **)(v5 + 8 * v11) = *v6;
              *v6 = v12;
            }
            else
            {
              *(_QWORD *)(v5 + 8 * v11) = v6;
              v12 = (_QWORD *)*v7;
              v6 = v7;
            }
            v7 = v12;
          }
          while (v12);
        }
      }
    }
  }
  else
  {
    v14 = boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<turi::hash_value const,unsigned long>>,turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>>::min_buckets_for_size((uint64_t)a1, a2);
    if (a1[1] <= v14)
      v15 = v14;
    else
      v15 = a1[1];
    boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const,std::vector<turi::groupby_aggregate_impl::groupby_element> *>>,unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>>::create_buckets((uint64_t)a1, v15);
  }
}

uint64_t boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<turi::hash_value const,unsigned long>>,turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>>::min_buckets_for_size(uint64_t a1, unint64_t a2)
{
  double v2;
  unint64_t v3;
  unint64_t v5;
  unint64_t v6;

  v2 = floor((double)a2 / *(float *)(a1 + 24)) + 1.0;
  v3 = (unint64_t)v2;
  if (v2 >= 1.84467441e19)
    v3 = -1;
  if (v3 < 5)
    return 4;
  v5 = (v3 - 1) | ((v3 - 1) >> 1) | (((v3 - 1) | ((v3 - 1) >> 1)) >> 2);
  v6 = v5 | (v5 >> 4) | ((v5 | (v5 >> 4)) >> 8);
  return (v6 | (v6 >> 16) | ((v6 | (v6 >> 16)) >> 32)) + 1;
}

void std::vector<std::pair<turi::simple_spinlock,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::pair<turi::simple_spinlock,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>>>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, (turi::simple_spinlock *)*v2);
    operator delete(**a1);
  }
}

void std::vector<std::pair<turi::simple_spinlock,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>>>::__base_destruct_at_end[abi:ne180100](uint64_t a1, turi::simple_spinlock *a2)
{
  turi::simple_spinlock *v4;
  turi::simple_spinlock *v5;

  v4 = *(turi::simple_spinlock **)(a1 + 8);
  if (v4 != a2)
  {
    do
    {
      v5 = (turi::simple_spinlock *)((char *)v4 - 72);
      turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::~hopscotch_map((uint64_t *)v4 - 8);
      turi::simple_spinlock::~simple_spinlock(v5);
      v4 = v5;
    }
    while (v5 != a2);
  }
  *(_QWORD *)(a1 + 8) = a2;
}

void std::vector<std::vector<std::pair<unsigned long,turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        v6 = v4;
        std::vector<std::pair<unsigned long,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_BYTE *std::vector<std::pair<turi::simple_spinlock,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>>>::__append(uint64_t *a1, unint64_t a2)
{
  _BYTE *result;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  _BYTE *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  _QWORD v19[2];
  char *v20;
  char *v21;
  _BYTE *v22;

  v6 = a1[2];
  result = a1 + 2;
  v5 = v6;
  v7 = (_BYTE *)*((_QWORD *)result - 1);
  if (0x8E38E38E38E38E39 * ((v6 - (uint64_t)v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = &v7[72 * a2];
      v14 = 72 * a2;
      do
      {
        result = std::pair<turi::simple_spinlock,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>>::pair[abi:ne180100]<true,0>(v7);
        v7 += 72;
        v14 -= 72;
      }
      while (v14);
      v7 = v13;
    }
    a1[1] = (uint64_t)v7;
  }
  else
  {
    v8 = 0x8E38E38E38E38E39 * ((uint64_t)&v7[-*a1] >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0x38E38E38E38E38ELL)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = 0x8E38E38E38E38E39 * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x1C71C71C71C71C7)
      v11 = 0x38E38E38E38E38ELL;
    else
      v11 = v9;
    v22 = result;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::query_eval::opt_union_on_source::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::merge_info>>((uint64_t)result, v11);
    else
      v12 = 0;
    v15 = &v12[72 * v8];
    v19[0] = v12;
    v19[1] = v15;
    v20 = v15;
    v21 = &v12[72 * v11];
    v16 = 9 * a2;
    v17 = &v15[72 * a2];
    v18 = 8 * v16;
    do
    {
      std::pair<turi::simple_spinlock,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>>::pair[abi:ne180100]<true,0>(v15);
      v15 += 72;
      v18 -= 72;
    }
    while (v18);
    v20 = v17;
    std::vector<std::pair<turi::simple_spinlock,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>>>::__swap_out_circular_buffer(a1, v19);
    return (_BYTE *)std::__split_buffer<std::pair<turi::simple_spinlock,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>>>::~__split_buffer((uint64_t)v19);
  }
  return result;
}

void sub_2183E9F68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::pair<turi::simple_spinlock,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<turi::simple_spinlock,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<turi::simple_spinlock,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>>>,std::reverse_iterator<std::pair<turi::simple_spinlock,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>>*>,std::reverse_iterator<std::pair<turi::simple_spinlock,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>>*>,std::reverse_iterator<std::pair<turi::simple_spinlock,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

_BYTE *std::pair<turi::simple_spinlock,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>>::pair[abi:ne180100]<true,0>(_BYTE *a1)
{
  *a1 = 0;
  turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>::hopscotch_map((uint64_t)(a1 + 8));
  return a1;
}

void sub_2183EA030(_Unwind_Exception *a1)
{
  turi::simple_spinlock *v1;

  turi::simple_spinlock::~simple_spinlock(v1);
  _Unwind_Resume(a1);
}

uint64_t turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>::hopscotch_map(uint64_t a1)
{
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 16) = xmmword_2186C4E00;
  *(_DWORD *)(a1 + 32) = 1065353216;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)a1 = turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>::create_new_container(a1, 32);
  return a1;
}

void sub_2183EA094(_Unwind_Exception *a1)
{
  _QWORD *v1;

  boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const,std::vector<turi::groupby_aggregate_impl::groupby_element> *>>,unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>>::delete_buckets(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<turi::simple_spinlock,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>>>,std::reverse_iterator<std::pair<turi::simple_spinlock,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>>*>,std::reverse_iterator<std::pair<turi::simple_spinlock,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>>*>,std::reverse_iterator<std::pair<turi::simple_spinlock,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  v13 = 0;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v9 -= 72;
      std::pair<turi::simple_spinlock,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>>::pair[abi:ne180100]((_BYTE *)(v7 - 72), v9);
      v7 = *((_QWORD *)&v15 + 1) - 72;
      *((_QWORD *)&v15 + 1) -= 72;
    }
    while (v9 != a5);
    v10 = v15;
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<turi::simple_spinlock,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>>>,std::reverse_iterator<std::pair<turi::simple_spinlock,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

void sub_2183EA150(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<turi::simple_spinlock,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>>>,std::reverse_iterator<std::pair<turi::simple_spinlock,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_BYTE *std::pair<turi::simple_spinlock,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>>::pair[abi:ne180100](_BYTE *a1, uint64_t a2)
{
  *a1 = 0;
  turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>::hopscotch_map((uint64_t)(a1 + 8), (uint64_t *)(a2 + 8));
  return a1;
}

void sub_2183EA190(_Unwind_Exception *a1)
{
  turi::simple_spinlock *v1;

  turi::simple_spinlock::~simple_spinlock(v1);
  _Unwind_Resume(a1);
}

uint64_t turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>::hopscotch_map(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD *new_container;

  *(_BYTE *)(a1 + 8) = 0;
  v4 = a1 + 8;
  *(_OWORD *)(a1 + 16) = xmmword_2186C4E00;
  *(_DWORD *)(a1 + 32) = 1065353216;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 56) = *((_BYTE *)a2 + 56);
  *(_BYTE *)(a1 + 57) = *((_BYTE *)a2 + 57);
  new_container = turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>::create_new_container(a1, a2[3] - 0x5555555555555555 * ((uint64_t)(*(_QWORD *)(*a2 + 8) - *(_QWORD *)*a2) >> 4));
  *(_QWORD *)a1 = new_container;
  turi::hopscotch_table<std::pair<turi::hash_value,unsigned long>,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>::hash_redirect,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>::key_equal_redirect>::operator=((uint64_t)new_container, *a2);
  if ((uint64_t *)a1 != a2)
    boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<turi::hash_value const,unsigned long>>,turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>>::assign<std::integral_constant<BOOL,true>>(v4, (uint64_t)(a2 + 1));
  return a1;
}

void sub_2183EA244(_Unwind_Exception *a1)
{
  _QWORD *v1;

  boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const,std::vector<turi::groupby_aggregate_impl::groupby_element> *>>,unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>>::delete_buckets(v1);
  _Unwind_Resume(a1);
}

uint64_t turi::hopscotch_table<std::pair<turi::hash_value,unsigned long>,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>::hash_redirect,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>::key_equal_redirect>::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
    std::vector<turi::hopscotch_table<std::pair<turi::hash_value,unsigned long>,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>::hash_redirect,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>::key_equal_redirect>::element,std::allocator<turi::hopscotch_table<std::pair<turi::hash_value,unsigned long>,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>::hash_redirect,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>::key_equal_redirect>::element>>::__assign_with_size[abi:ne180100]<turi::hopscotch_table<std::pair<turi::hash_value,unsigned long>,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>::hash_redirect,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>::key_equal_redirect>::element*,turi::hopscotch_table<std::pair<turi::hash_value,unsigned long>,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>::hash_redirect,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>::key_equal_redirect>::element*>((_QWORD *)a1, *(_QWORD *)a2, *(_QWORD *)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4));
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  return a1;
}

_DWORD *std::vector<turi::hopscotch_table<std::pair<turi::hash_value,unsigned long>,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>::hash_redirect,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>::key_equal_redirect>::element,std::allocator<turi::hopscotch_table<std::pair<turi::hash_value,unsigned long>,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>::hash_redirect,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>::key_equal_redirect>::element>>::__assign_with_size[abi:ne180100]<turi::hopscotch_table<std::pair<turi::hash_value,unsigned long>,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>::hash_redirect,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>::key_equal_redirect>::element*,turi::hopscotch_table<std::pair<turi::hash_value,unsigned long>,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>::hash_redirect,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>::key_equal_redirect>::element*>(_QWORD *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6;
  uint64_t v8;
  _DWORD *result;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _DWORD **v13;
  _DWORD *v14;
  _DWORD *v15;
  _DWORD *v16;
  _DWORD *v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  _DWORD *v21;
  int64_t v22;
  _DWORD *v23;

  v6 = a2;
  v8 = a1[2];
  result = (_DWORD *)*a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - (uint64_t)result) >> 4) < a4)
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0x555555555555555)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 4);
    v11 = 2 * v10;
    if (2 * v10 <= a4)
      v11 = a4;
    if (v10 >= 0x2AAAAAAAAAAAAAALL)
      v12 = 0x555555555555555;
    else
      v12 = v11;
    std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>::__vallocate[abi:ne180100](a1, v12);
    v14 = (_DWORD *)a1[1];
    v13 = (_DWORD **)(a1 + 1);
    result = v14;
    v15 = v14;
    if (v6 != a3)
    {
      v15 = result;
      do
      {
        *v15 = *(_DWORD *)v6;
        *((_OWORD *)v15 + 1) = *(_OWORD *)(v6 + 16);
        *((_QWORD *)v15 + 4) = *(_QWORD *)(v6 + 32);
        v15 += 12;
        v6 += 48;
      }
      while (v6 != a3);
    }
LABEL_25:
    v22 = (char *)v15 - (char *)result;
    goto LABEL_26;
  }
  v17 = (_DWORD *)a1[1];
  v13 = (_DWORD **)(a1 + 1);
  v16 = v17;
  v18 = 0xAAAAAAAAAAAAAAABLL * (((char *)v17 - (char *)result) >> 4);
  if (v18 >= a4)
  {
    v15 = result;
    if (a2 != a3)
    {
      v23 = result;
      do
      {
        *v23 = *(_DWORD *)v6;
        *((_OWORD *)v23 + 1) = *(_OWORD *)(v6 + 16);
        *((_QWORD *)v23 + 4) = *(_QWORD *)(v6 + 32);
        v15 += 12;
        v6 += 48;
        v23 += 12;
      }
      while (v6 != a3);
    }
    goto LABEL_25;
  }
  v19 = a2 + 48 * v18;
  if (v16 != result)
  {
    do
    {
      *result = *(_DWORD *)v6;
      *((_OWORD *)result + 1) = *(_OWORD *)(v6 + 16);
      *((_QWORD *)result + 4) = *(_QWORD *)(v6 + 32);
      v6 += 48;
      result += 12;
    }
    while (v6 != v19);
    result = *v13;
  }
  v20 = (char *)result;
  if (v19 != a3)
  {
    v20 = (char *)result;
    v21 = result;
    do
    {
      *v21 = *(_DWORD *)v19;
      *((_OWORD *)v21 + 1) = *(_OWORD *)(v19 + 16);
      *((_QWORD *)v21 + 4) = *(_QWORD *)(v19 + 32);
      v20 += 48;
      v19 += 48;
      v21 += 12;
    }
    while (v19 != a3);
  }
  v22 = v20 - (char *)result;
LABEL_26:
  *v13 = (_DWORD *)((char *)result + v22);
  return result;
}

uint64_t boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<turi::hash_value const,unsigned long>>,turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>>::assign<std::integral_constant<BOOL,true>>(uint64_t a1, uint64_t a2)
{
  char v4;
  float v5;
  void *v6;
  double v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;

  v4 = *(_BYTE *)a1 | 2;
  *(_BYTE *)a1 = v4;
  v5 = *(float *)(a2 + 24);
  *(float *)(a1 + 24) = v5;
  v6 = *(void **)(a1 + 40);
  if (v6)
  {
    v7 = v5 * (double)*(unint64_t *)(a1 + 8);
    v8 = vcvtpd_u64_f64(v7);
    if (ceil(v7) >= 1.84467441e19)
      v8 = -1;
  }
  else
  {
    v8 = 0;
  }
  *(_QWORD *)(a1 + 32) = v8;
  v9 = *(_QWORD *)(a2 + 16);
  if (v9 <= v8)
  {
    if (*(_QWORD *)(a1 + 16))
    {
      v11 = *(_QWORD *)(a1 + 8);
      if (v11)
        bzero(v6, 8 * v11);
    }
  }
  else
  {
    v10 = boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<turi::hash_value const,unsigned long>>,turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>>::min_buckets_for_size(a1, v9);
    boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const,std::vector<turi::groupby_aggregate_impl::groupby_element> *>>,unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>>::create_buckets(a1, v10);
    v4 = *(_BYTE *)a1;
  }
  *(_BYTE *)a1 = v4 ^ 3;
  return boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<turi::hash_value const,unsigned long>>,turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>>::assign_buckets((_QWORD *)a1, (_QWORD *)a2);
}

void sub_2183EA564(void *a1)
{
  _BYTE *v1;

  __cxa_begin_catch(a1);
  if ((*v1 & 2) != 0)
    *v1 &= 1u;
  __cxa_rethrow();
}

void sub_2183EA580(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<turi::hash_value const,unsigned long>>,turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>>::assign_buckets(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  _OWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  char *v17;
  uint64_t v18;
  _OWORD *v19;

  v18 = 0;
  v19 = 0;
  v17 = (char *)a1 + 3;
  if (a1[2])
  {
    v3 = a1[1];
    v4 = a1[5];
    v5 = *(_OWORD **)(v4 + 8 * v3);
    v19 = v5;
    *(_QWORD *)(v4 + 8 * v3) = 0;
    a1[2] = 0;
  }
  else
  {
    v5 = 0;
  }
  if (a2[2])
  {
    v6 = *(_QWORD **)(a2[5] + 8 * a2[1]);
    if (v6)
    {
      v7 = 1;
      do
      {
        v8 = v6[2];
        if (v5)
        {
          v9 = *(_OWORD **)v5;
          *(_QWORD *)v5 = 0;
        }
        else
        {
          v5 = operator new(0x30uLL);
          v9 = 0;
          v5[1] = 0u;
          v5[2] = 0u;
          *v5 = 0u;
        }
        v10 = 265 * ((~v8 + (v8 << 21)) ^ ((unint64_t)(~v8 + (v8 << 21)) >> 24));
        v5[1] = *((_OWORD *)v6 + 1);
        *((_QWORD *)v5 + 4) = v6[4];
        v11 = a1[1];
        v12 = (v11 - 1) & (2147483649u * ((21 * (v10 ^ (v10 >> 14))) ^ ((21 * (v10 ^ (v10 >> 14))) >> 28)));
        v13 = a1[5];
        *((_QWORD *)v5 + 1) = v12 & 0x7FFFFFFFFFFFFFFFLL;
        v14 = *(_QWORD **)(v13 + 8 * v12);
        if (v14)
        {
          *(_QWORD *)v5 = *v14;
          v15 = *(_QWORD *)(v13 + 8 * v12);
        }
        else
        {
          v15 = v13 + 8 * v11;
          if (*(_QWORD *)v15)
            *(_QWORD *)(v13 + 8 * *(_QWORD *)(*(_QWORD *)v15 + 8)) = v5;
          *(_QWORD *)(v13 + 8 * v12) = v15;
          *(_QWORD *)v5 = *(_QWORD *)v15;
        }
        *(_QWORD *)v15 = v5;
        a1[2] = v7;
        v6 = (_QWORD *)*v6;
        ++v7;
        v5 = v9;
      }
      while (v6);
      v18 = 0;
      v19 = v9;
    }
  }
  return boost::unordered::detail::node_holder<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const,std::vector<turi::groupby_aggregate_impl::groupby_element> *>>>>::~node_holder((uint64_t)&v17);
}

void sub_2183EA700(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  a12 = 0;
  boost::unordered::detail::node_holder<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const,std::vector<turi::groupby_aggregate_impl::groupby_element> *>>>>::~node_holder((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<turi::simple_spinlock,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>>>,std::reverse_iterator<std::pair<turi::simple_spinlock,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<turi::simple_spinlock,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>>>,std::reverse_iterator<std::pair<turi::simple_spinlock,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<turi::simple_spinlock,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>>>,std::reverse_iterator<std::pair<turi::simple_spinlock,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;

  v1 = *(uint64_t **)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(uint64_t **)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::~hopscotch_map(v1 + 1);
    turi::simple_spinlock::~simple_spinlock((turi::simple_spinlock *)v1);
    v1 += 9;
  }
}

uint64_t std::__split_buffer<std::pair<turi::simple_spinlock,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>>>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<std::pair<turi::simple_spinlock,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>>>::__destruct_at_end[abi:ne180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<std::pair<turi::simple_spinlock,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>>>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t i;
  turi::simple_spinlock *v5;

  for (i = *(_QWORD *)(a1 + 16); i != a2; i = *(_QWORD *)(a1 + 16))
  {
    v5 = (turi::simple_spinlock *)(i - 72);
    *(_QWORD *)(a1 + 16) = i - 72;
    turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::~hopscotch_map((uint64_t *)(i - 64));
    turi::simple_spinlock::~simple_spinlock(v5);
  }
}

void std::vector<std::vector<std::pair<unsigned long,turi::flexible_type>>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  size_t v14;
  void *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    v19 = v4;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>(v4, v11);
    else
      v12 = 0;
    v15 = v12;
    v16 = &v12[24 * v8];
    v18 = &v12[24 * v11];
    v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    v17 = &v16[v14];
    std::vector<std::vector<std::pair<unsigned long,turi::flexible_type>>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<std::pair<unsigned long,turi::flexible_type>>>::~__split_buffer(&v15);
  }
}

void sub_2183EA96C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<std::pair<unsigned long,turi::flexible_type>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<std::pair<unsigned long,turi::flexible_type>>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::pair<unsigned long,turi::flexible_type>>>,std::reverse_iterator<std::vector<std::pair<unsigned long,turi::flexible_type>>*>,std::reverse_iterator<std::vector<std::pair<unsigned long,turi::flexible_type>>*>,std::reverse_iterator<std::vector<std::pair<unsigned long,turi::flexible_type>>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::pair<unsigned long,turi::flexible_type>>>,std::reverse_iterator<std::vector<std::pair<unsigned long,turi::flexible_type>>*>,std::reverse_iterator<std::vector<std::pair<unsigned long,turi::flexible_type>>*>,std::reverse_iterator<std::vector<std::pair<unsigned long,turi::flexible_type>>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::pair<unsigned long,turi::flexible_type>>>,std::reverse_iterator<std::vector<std::pair<unsigned long,turi::flexible_type>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::pair<unsigned long,turi::flexible_type>>>,std::reverse_iterator<std::vector<std::pair<unsigned long,turi::flexible_type>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::pair<unsigned long,turi::flexible_type>>>,std::reverse_iterator<std::vector<std::pair<unsigned long,turi::flexible_type>>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::pair<unsigned long,turi::flexible_type>>>,std::reverse_iterator<std::vector<std::pair<unsigned long,turi::flexible_type>>*>>::operator()[abi:ne180100](uint64_t a1)
{
  void **v1;
  void **v2;
  void **v3;

  v1 = *(void ***)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(void ***)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = v1;
    std::vector<std::pair<unsigned long,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v3);
    v1 += 3;
  }
}

void **std::__split_buffer<std::vector<std::pair<unsigned long,turi::flexible_type>>>::~__split_buffer(void **a1)
{
  std::__split_buffer<std::vector<std::pair<unsigned long,turi::flexible_type>>>::clear[abi:ne180100]((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<std::vector<std::pair<unsigned long,turi::flexible_type>>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t i;
  uint64_t v2;
  void **v4;
  void **v5;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    v4 = (void **)(i - 24);
    *(_QWORD *)(a1 + 16) = v4;
    v5 = v4;
    std::vector<std::pair<unsigned long,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
}

void std::__function::__func<turi::ml_data_internal::column_indexer::set_indices(std::vector<turi::flexible_type> &&)::$_1,std::allocator<std::vector<turi::flexible_type> &&>,void ()(unsigned long,unsigned long)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

_QWORD *std::__function::__func<turi::ml_data_internal::column_indexer::set_indices(std::vector<turi::flexible_type> &&)::$_1,std::allocator<std::vector<turi::flexible_type> &&>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24D93EED8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<turi::ml_data_internal::column_indexer::set_indices(std::vector<turi::flexible_type> &&)::$_1,std::allocator<std::vector<turi::flexible_type> &&>,void ()(unsigned long,unsigned long)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24D93EED8;
  a2[1] = v2;
  return result;
}

_QWORD *std::__function::__func<turi::ml_data_internal::column_indexer::set_indices(std::vector<turi::flexible_type> &&)::$_1,std::allocator<std::vector<turi::flexible_type> &&>,void ()(unsigned long,unsigned long)>::operator()(_QWORD *result, const turi::flexible_type *a2, _QWORD *a3)
{
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unsigned int v11;
  BOOL v12;
  int v13;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  void *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unsigned int v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  void *v44;
  void *v45;
  unint64_t v46;
  uint64_t v47;
  unsigned __int8 *v48;
  int v49;
  uint64_t v50[3];
  void **v51[2];
  _QWORD v52[3];

  v52[2] = *MEMORY[0x24BDAC8D0];
  v3 = (_QWORD *)result[1];
  v4 = (uint64_t)(v3[11] - v3[10]) >> 4;
  v5 = v4 * *(_QWORD *)a2;
  v6 = v5 / *a3;
  v7 = (v5 + v4) / *a3;
  if (v6 < v7)
  {
    do
    {
      v8 = v3[10];
      memset(v52, 0, 13);
      v9 = (uint64_t *)(v8 + 16 * v6);
      if (v9 != v52)
      {
        v10 = *v9;
        *(_QWORD *)((char *)v52 + 5) = *(uint64_t *)((char *)v9 + 5);
        v52[0] = v10;
        v11 = *((unsigned __int8 *)v9 + 12);
        BYTE4(v52[1]) = v11;
        v12 = v11 > 9;
        v13 = (1 << v11) & 0x33C;
        if (!v12 && v13 != 0)
        {
          v15 = (unint64_t *)v52[0];
          do
            v16 = __ldaxr(v15);
          while (__stlxr(v16 + 1, v15));
        }
      }
      turi::hash128(v50, (turi *)v52, a2);
      switch(BYTE4(v52[1]))
      {
        case 2:
          v17 = (unint64_t *)v52[0];
          do
          {
            v18 = __ldaxr(v17);
            v19 = v18 - 1;
          }
          while (__stlxr(v19, v17));
          if (!v19)
          {
            v20 = v52[0];
            if (v52[0])
            {
              if (*(char *)(v52[0] + 31) < 0)
                operator delete(*(void **)(v52[0] + 8));
              v21 = v20;
              v22 = 0x1012C404EF22A49;
              goto LABEL_50;
            }
          }
          break;
        case 3:
          v23 = (unint64_t *)v52[0];
          do
          {
            v24 = __ldaxr(v23);
            v25 = v24 - 1;
          }
          while (__stlxr(v25, v23));
          if (!v25)
          {
            v26 = v52[0];
            if (v52[0])
            {
              v27 = *(void **)(v52[0] + 8);
              if (v27)
              {
                *(_QWORD *)(v52[0] + 16) = v27;
                operator delete(v27);
              }
              v21 = v26;
              v22 = 0x1080C409938AC02;
              goto LABEL_50;
            }
          }
          break;
        case 4:
          v28 = (unint64_t *)v52[0];
          do
          {
            v29 = __ldaxr(v28);
            v30 = v29 - 1;
          }
          while (__stlxr(v30, v28));
          if (!v30)
          {
            v31 = v52[0];
            if (v52[0])
            {
              v51[0] = (void **)(v52[0] + 8);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v51);
              goto LABEL_34;
            }
          }
          break;
        case 5:
          v32 = (unint64_t *)v52[0];
          do
          {
            v33 = __ldaxr(v32);
            v34 = v33 - 1;
          }
          while (__stlxr(v34, v32));
          if (!v34)
          {
            v31 = v52[0];
            if (v52[0])
            {
              v51[0] = (void **)(v52[0] + 8);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v51);
LABEL_34:
              v21 = v31;
              v22 = 0x1020C405E66F15BLL;
              goto LABEL_50;
            }
          }
          break;
        case 8:
          v35 = (unint64_t *)v52[0];
          do
          {
            v36 = __ldaxr(v35);
            v37 = v36 - 1;
          }
          while (__stlxr(v37, v35));
          if (!v37)
          {
            v38 = v52[0];
            if (v52[0])
            {
              boost::detail::shared_count::~shared_count((unsigned int **)(v52[0] + 16));
              v21 = v38;
              v39 = -235920773;
              goto LABEL_49;
            }
          }
          break;
        case 9:
          v40 = (unint64_t *)v52[0];
          do
          {
            v41 = __ldaxr(v40);
            v42 = v41 - 1;
          }
          while (__stlxr(v42, v40));
          if (!v42)
          {
            v43 = v52[0];
            if (v52[0])
            {
              v44 = *(void **)(v52[0] + 48);
              if (v44)
              {
                *(_QWORD *)(v52[0] + 56) = v44;
                operator delete(v44);
              }
              v45 = *(void **)(v43 + 24);
              if (v45)
              {
                *(_QWORD *)(v43 + 32) = v45;
                operator delete(v45);
              }
              std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v43 + 8);
              v21 = v43;
              v39 = 2071181815;
LABEL_49:
              v22 = v39 | 0x1030C4000000000;
LABEL_50:
              MEMORY[0x219A19A08](v21, v22);
            }
          }
          break;
        default:
          break;
      }
      memset(v52, 0, 13);
      v46 = ((0xDEB2A42E44AA4C17 * v50[1]) ^ (0x7E952A7B972F486FLL * v50[0])) >> 56;
      v47 = v3[4];
      v48 = (unsigned __int8 *)(v47 + 72 * v46);
      do
      {
        while (*v48 == 1)
          ;
        do
          v49 = __ldaxr(v48);
        while (__stlxr(1u, v48));
      }
      while (v49);
      result = (_QWORD *)turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>::operator[]((_QWORD *)(v47 + 72 * v46 + 8), v50);
      *result = v6;
      __dmb(0xBu);
      *v48 = 0;
      ++v6;
    }
    while (v6 != v7);
  }
  return result;
}

void sub_2183EAF64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, char a16)
{
  _BYTE *v16;

  __dmb(0xBu);
  *v16 = 0;
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<turi::ml_data_internal::column_indexer::set_indices(std::vector<turi::flexible_type> &&)::$_1,std::allocator<std::vector<turi::flexible_type> &&>,void ()(unsigned long,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::ml_data_internal::column_indexer::set_indices(std::vector<turi::flexible_type> &&)::$_1,std::allocator<std::vector<turi::flexible_type> &&>,void ()(unsigned long,unsigned long)>::target_type()
{
}

void sub_2183EB134(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  int *v10;

  std::exception::~exception(&a10);
  __cxa_begin_catch(a1);
  turi::_throw_variant_error<turi::flexible_type>(v10);
}

void sub_2183EB158(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t turi::variant_converter<turi::ml_column_mode,void>::get(uint64_t a1, int *a2)
{
  uint64_t v2;
  const char *v3;
  uint64_t v4;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  unsigned int v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  void *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  _DWORD v39[6];
  void **v40[3];
  _QWORD v41[3];

  v41[2] = *MEMORY[0x24BDAC8D0];
  memset(v41, 0, 13);
  v2 = turi::variant_get_ref<turi::flexible_type>(a2);
  if ((_QWORD *)v2 != v41)
  {
    v4 = *(_QWORD *)v2;
    *(_QWORD *)((char *)v41 + 5) = *(_QWORD *)(v2 + 5);
    v41[0] = v4;
    BYTE4(v41[1]) = *(_BYTE *)(v2 + 12);
    if (BYTE4(v41[1]) <= 9u && ((1 << SBYTE4(v41[1])) & 0x33C) != 0)
    {
      v6 = (unint64_t *)v41[0];
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 + 1, v6));
    }
  }
  v39[0] = 0;
  turi::flexible_type_internals::ft_converter<13>::get<turi::ml_column_mode>(v39, (turi::flexible_type_internals *)v41, v3);
  v8 = v39[0];
  switch(BYTE4(v41[1]))
  {
    case 2:
      v9 = (unint64_t *)v41[0];
      do
      {
        v10 = __ldaxr(v9);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v9));
      if (!v11)
      {
        v12 = v41[0];
        if (v41[0])
        {
          if (*(char *)(v41[0] + 31) < 0)
            operator delete(*(void **)(v41[0] + 8));
          v13 = v12;
          v14 = 0x1012C404EF22A49;
          goto LABEL_49;
        }
      }
      break;
    case 3:
      v26 = (unint64_t *)v41[0];
      do
      {
        v27 = __ldaxr(v26);
        v28 = v27 - 1;
      }
      while (__stlxr(v28, v26));
      if (!v28)
      {
        v29 = v41[0];
        if (v41[0])
        {
          v30 = *(void **)(v41[0] + 8);
          if (v30)
          {
            *(_QWORD *)(v41[0] + 16) = v30;
            operator delete(v30);
          }
          v13 = v29;
          v14 = 0x1080C409938AC02;
          goto LABEL_49;
        }
      }
      break;
    case 4:
      v15 = (unint64_t *)v41[0];
      do
      {
        v16 = __ldaxr(v15);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, v15));
      if (!v17)
      {
        v18 = v41[0];
        if (v41[0])
        {
          v40[0] = (void **)(v41[0] + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v40);
          goto LABEL_42;
        }
      }
      break;
    case 5:
      v31 = (unint64_t *)v41[0];
      do
      {
        v32 = __ldaxr(v31);
        v33 = v32 - 1;
      }
      while (__stlxr(v33, v31));
      if (!v33)
      {
        v18 = v41[0];
        if (v41[0])
        {
          v40[0] = (void **)(v41[0] + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v40);
LABEL_42:
          v13 = v18;
          v14 = 0x1020C405E66F15BLL;
          goto LABEL_49;
        }
      }
      break;
    case 8:
      v34 = (unint64_t *)v41[0];
      do
      {
        v35 = __ldaxr(v34);
        v36 = v35 - 1;
      }
      while (__stlxr(v36, v34));
      if (!v36)
      {
        v37 = v41[0];
        if (v41[0])
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v41[0] + 16));
          v13 = v37;
          v25 = -235920773;
          goto LABEL_48;
        }
      }
      break;
    case 9:
      v19 = (unint64_t *)v41[0];
      do
      {
        v20 = __ldaxr(v19);
        v21 = v20 - 1;
      }
      while (__stlxr(v21, v19));
      if (!v21)
      {
        v22 = v41[0];
        if (v41[0])
        {
          v23 = *(void **)(v41[0] + 48);
          if (v23)
          {
            *(_QWORD *)(v41[0] + 56) = v23;
            operator delete(v23);
          }
          v24 = *(void **)(v22 + 24);
          if (v24)
          {
            *(_QWORD *)(v22 + 32) = v24;
            operator delete(v24);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v22 + 8);
          v13 = v22;
          v25 = 2071181815;
LABEL_48:
          v14 = v25 | 0x1030C4000000000;
LABEL_49:
          MEMORY[0x219A19A08](v13, v14);
        }
      }
      break;
    default:
      return v8;
  }
  return v8;
}

void sub_2183EB40C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::string *a15, void *a16, uint64_t a17, void *a18)
{
  uint64_t v18;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  unsigned int v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  void *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;

  switch(*(_BYTE *)(v18 - 28))
  {
    case 2:
      v20 = *(unint64_t **)(v18 - 40);
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (v22)
        goto LABEL_39;
      v23 = *(_QWORD *)(v18 - 40);
      if (!v23)
        goto LABEL_39;
      if (*(char *)(v23 + 31) < 0)
        operator delete(*(void **)(v23 + 8));
      v24 = (_QWORD *)v23;
      v25 = 0x1012C404EF22A49;
      goto LABEL_38;
    case 3:
      v35 = *(unint64_t **)(v18 - 40);
      do
      {
        v36 = __ldaxr(v35);
        v37 = v36 - 1;
      }
      while (__stlxr(v37, v35));
      if (v37)
        goto LABEL_39;
      v38 = *(_QWORD **)(v18 - 40);
      if (!v38)
        goto LABEL_39;
      v39 = (void *)v38[1];
      if (v39)
      {
        v38[2] = v39;
        operator delete(v39);
      }
      v24 = v38;
      v25 = 0x1080C409938AC02;
      goto LABEL_38;
    case 4:
      v26 = *(unint64_t **)(v18 - 40);
      do
      {
        v27 = __ldaxr(v26);
        v28 = v27 - 1;
      }
      while (__stlxr(v28, v26));
      if (v28)
        goto LABEL_39;
      v29 = *(_QWORD **)(v18 - 40);
      if (!v29)
        goto LABEL_39;
      a18 = v29 + 1;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
      goto LABEL_31;
    case 5:
      v40 = *(unint64_t **)(v18 - 40);
      do
      {
        v41 = __ldaxr(v40);
        v42 = v41 - 1;
      }
      while (__stlxr(v42, v40));
      if (v42)
        goto LABEL_39;
      v29 = *(_QWORD **)(v18 - 40);
      if (!v29)
        goto LABEL_39;
      a18 = v29 + 1;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
LABEL_31:
      v24 = v29;
      v25 = 0x1020C405E66F15BLL;
      goto LABEL_38;
    case 8:
      v43 = *(unint64_t **)(v18 - 40);
      do
      {
        v44 = __ldaxr(v43);
        v45 = v44 - 1;
      }
      while (__stlxr(v45, v43));
      if (v45)
        goto LABEL_39;
      v46 = *(_QWORD *)(v18 - 40);
      if (!v46)
        goto LABEL_39;
      boost::detail::shared_count::~shared_count((unsigned int **)(v46 + 16));
      v24 = (_QWORD *)v46;
      v34 = -235920773;
      goto LABEL_37;
    case 9:
      v30 = *(unint64_t **)(v18 - 40);
      do
      {
        v31 = __ldaxr(v30);
        v32 = v31 - 1;
      }
      while (__stlxr(v32, v30));
      if (v32)
        goto LABEL_39;
      v33 = *(_QWORD **)(v18 - 40);
      if (!v33)
        goto LABEL_39;
      v24 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v33);
      v34 = 2071181815;
LABEL_37:
      v25 = v34 | 0x1030C4000000000;
LABEL_38:
      MEMORY[0x219A19A08](v24, v25);
LABEL_39:
      _Unwind_Resume(exception_object);
      return;
    default:
      goto LABEL_39;
  }
}

_DWORD *turi::flexible_type_internals::ft_converter<13>::get<turi::ml_column_mode>(_DWORD *result, turi::flexible_type_internals *this, const char *a3)
{
  if (*((_BYTE *)this + 12))
    turi::flexible_type_internals::throw_type_conversion_error(this, (const turi::flexible_type *)"integer / enum.", a3);
  *result = *(_QWORD *)this;
  return result;
}

void sub_2183EB6FC()
{
  turi::flexible_type_internals::ft_converter<13>::get<turi::ml_column_mode>(turi::ml_column_mode &,turi::flexible_type const&)::{lambda(void)#1}::operator()();
}

void turi::flexible_type_internals::ft_converter<13>::get<turi::ml_column_mode>(turi::ml_column_mode &,turi::flexible_type const&)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/data/flexible_type/flexible_type_converter.hpp", 117);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/data/flexible_type/flexible_type_converter.hpp", "operator()", 752, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  void turi::flexible_type_internals::ft_converter<13>::get<turi::ml_column_mode>(turi::ml_column_mode &,turi::flexible_type const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2183EB800(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

uint64_t turi::variant_converter<turi::flex_type_enum,void>::get(uint64_t a1, int *a2)
{
  uint64_t v2;
  const char *v3;
  uint64_t v4;
  unint64_t *v6;
  unint64_t v7;
  char v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  unsigned int v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  void *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  _BYTE v39[24];
  void **v40[3];
  _QWORD v41[3];

  v41[2] = *MEMORY[0x24BDAC8D0];
  memset(v41, 0, 13);
  v2 = turi::variant_get_ref<turi::flexible_type>(a2);
  if ((_QWORD *)v2 != v41)
  {
    v4 = *(_QWORD *)v2;
    *(_QWORD *)((char *)v41 + 5) = *(_QWORD *)(v2 + 5);
    v41[0] = v4;
    BYTE4(v41[1]) = *(_BYTE *)(v2 + 12);
    if (BYTE4(v41[1]) <= 9u && ((1 << SBYTE4(v41[1])) & 0x33C) != 0)
    {
      v6 = (unint64_t *)v41[0];
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 + 1, v6));
    }
  }
  v39[0] = 0;
  turi::flexible_type_internals::ft_converter<13>::get<turi::flex_type_enum>(v39, (turi::flexible_type_internals *)v41, v3);
  v8 = v39[0];
  switch(BYTE4(v41[1]))
  {
    case 2:
      v9 = (unint64_t *)v41[0];
      do
      {
        v10 = __ldaxr(v9);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v9));
      if (!v11)
      {
        v12 = v41[0];
        if (v41[0])
        {
          if (*(char *)(v41[0] + 31) < 0)
            operator delete(*(void **)(v41[0] + 8));
          v13 = v12;
          v14 = 0x1012C404EF22A49;
          goto LABEL_49;
        }
      }
      break;
    case 3:
      v26 = (unint64_t *)v41[0];
      do
      {
        v27 = __ldaxr(v26);
        v28 = v27 - 1;
      }
      while (__stlxr(v28, v26));
      if (!v28)
      {
        v29 = v41[0];
        if (v41[0])
        {
          v30 = *(void **)(v41[0] + 8);
          if (v30)
          {
            *(_QWORD *)(v41[0] + 16) = v30;
            operator delete(v30);
          }
          v13 = v29;
          v14 = 0x1080C409938AC02;
          goto LABEL_49;
        }
      }
      break;
    case 4:
      v15 = (unint64_t *)v41[0];
      do
      {
        v16 = __ldaxr(v15);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, v15));
      if (!v17)
      {
        v18 = v41[0];
        if (v41[0])
        {
          v40[0] = (void **)(v41[0] + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v40);
          goto LABEL_42;
        }
      }
      break;
    case 5:
      v31 = (unint64_t *)v41[0];
      do
      {
        v32 = __ldaxr(v31);
        v33 = v32 - 1;
      }
      while (__stlxr(v33, v31));
      if (!v33)
      {
        v18 = v41[0];
        if (v41[0])
        {
          v40[0] = (void **)(v41[0] + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v40);
LABEL_42:
          v13 = v18;
          v14 = 0x1020C405E66F15BLL;
          goto LABEL_49;
        }
      }
      break;
    case 8:
      v34 = (unint64_t *)v41[0];
      do
      {
        v35 = __ldaxr(v34);
        v36 = v35 - 1;
      }
      while (__stlxr(v36, v34));
      if (!v36)
      {
        v37 = v41[0];
        if (v41[0])
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v41[0] + 16));
          v13 = v37;
          v25 = -235920773;
          goto LABEL_48;
        }
      }
      break;
    case 9:
      v19 = (unint64_t *)v41[0];
      do
      {
        v20 = __ldaxr(v19);
        v21 = v20 - 1;
      }
      while (__stlxr(v21, v19));
      if (!v21)
      {
        v22 = v41[0];
        if (v41[0])
        {
          v23 = *(void **)(v41[0] + 48);
          if (v23)
          {
            *(_QWORD *)(v41[0] + 56) = v23;
            operator delete(v23);
          }
          v24 = *(void **)(v22 + 24);
          if (v24)
          {
            *(_QWORD *)(v22 + 32) = v24;
            operator delete(v24);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v22 + 8);
          v13 = v22;
          v25 = 2071181815;
LABEL_48:
          v14 = v25 | 0x1030C4000000000;
LABEL_49:
          MEMORY[0x219A19A08](v13, v14);
        }
      }
      break;
    default:
      return v8;
  }
  return v8;
}

void sub_2183EBB24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::string *a15, void *a16, uint64_t a17, void *a18)
{
  uint64_t v18;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  unsigned int v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  void *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;

  switch(*(_BYTE *)(v18 - 28))
  {
    case 2:
      v20 = *(unint64_t **)(v18 - 40);
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (v22)
        goto LABEL_39;
      v23 = *(_QWORD *)(v18 - 40);
      if (!v23)
        goto LABEL_39;
      if (*(char *)(v23 + 31) < 0)
        operator delete(*(void **)(v23 + 8));
      v24 = (_QWORD *)v23;
      v25 = 0x1012C404EF22A49;
      goto LABEL_38;
    case 3:
      v35 = *(unint64_t **)(v18 - 40);
      do
      {
        v36 = __ldaxr(v35);
        v37 = v36 - 1;
      }
      while (__stlxr(v37, v35));
      if (v37)
        goto LABEL_39;
      v38 = *(_QWORD **)(v18 - 40);
      if (!v38)
        goto LABEL_39;
      v39 = (void *)v38[1];
      if (v39)
      {
        v38[2] = v39;
        operator delete(v39);
      }
      v24 = v38;
      v25 = 0x1080C409938AC02;
      goto LABEL_38;
    case 4:
      v26 = *(unint64_t **)(v18 - 40);
      do
      {
        v27 = __ldaxr(v26);
        v28 = v27 - 1;
      }
      while (__stlxr(v28, v26));
      if (v28)
        goto LABEL_39;
      v29 = *(_QWORD **)(v18 - 40);
      if (!v29)
        goto LABEL_39;
      a18 = v29 + 1;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
      goto LABEL_31;
    case 5:
      v40 = *(unint64_t **)(v18 - 40);
      do
      {
        v41 = __ldaxr(v40);
        v42 = v41 - 1;
      }
      while (__stlxr(v42, v40));
      if (v42)
        goto LABEL_39;
      v29 = *(_QWORD **)(v18 - 40);
      if (!v29)
        goto LABEL_39;
      a18 = v29 + 1;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
LABEL_31:
      v24 = v29;
      v25 = 0x1020C405E66F15BLL;
      goto LABEL_38;
    case 8:
      v43 = *(unint64_t **)(v18 - 40);
      do
      {
        v44 = __ldaxr(v43);
        v45 = v44 - 1;
      }
      while (__stlxr(v45, v43));
      if (v45)
        goto LABEL_39;
      v46 = *(_QWORD *)(v18 - 40);
      if (!v46)
        goto LABEL_39;
      boost::detail::shared_count::~shared_count((unsigned int **)(v46 + 16));
      v24 = (_QWORD *)v46;
      v34 = -235920773;
      goto LABEL_37;
    case 9:
      v30 = *(unint64_t **)(v18 - 40);
      do
      {
        v31 = __ldaxr(v30);
        v32 = v31 - 1;
      }
      while (__stlxr(v32, v30));
      if (v32)
        goto LABEL_39;
      v33 = *(_QWORD **)(v18 - 40);
      if (!v33)
        goto LABEL_39;
      v24 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v33);
      v34 = 2071181815;
LABEL_37:
      v25 = v34 | 0x1030C4000000000;
LABEL_38:
      MEMORY[0x219A19A08](v24, v25);
LABEL_39:
      _Unwind_Resume(exception_object);
      return;
    default:
      goto LABEL_39;
  }
}

_BYTE *turi::flexible_type_internals::ft_converter<13>::get<turi::flex_type_enum>(_BYTE *result, turi::flexible_type_internals *this, const char *a3)
{
  if (*((_BYTE *)this + 12))
    turi::flexible_type_internals::throw_type_conversion_error(this, (const turi::flexible_type *)"integer / enum.", a3);
  *result = *(_QWORD *)this;
  return result;
}

void sub_2183EBE14()
{
  turi::flexible_type_internals::ft_converter<13>::get<turi::ml_column_mode>(turi::ml_column_mode &,turi::flexible_type const&)::{lambda(void)#1}::operator()();
}

void turi::variant_converter<std::vector<turi::flexible_type>,void>::get(int *a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  const char *v4;
  uint64_t v5;
  unint64_t *v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  unsigned int v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  void *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  void **v38[3];
  _QWORD v39[3];

  v39[2] = *MEMORY[0x24BDAC8D0];
  memset(v39, 0, 13);
  v3 = turi::variant_get_ref<turi::flexible_type>(a1);
  if ((_QWORD *)v3 != v39)
  {
    v5 = *(_QWORD *)v3;
    *(_QWORD *)((char *)v39 + 5) = *(_QWORD *)(v3 + 5);
    v39[0] = v5;
    BYTE4(v39[1]) = *(_BYTE *)(v3 + 12);
    if (BYTE4(v39[1]) <= 9u && ((1 << SBYTE4(v39[1])) & 0x33C) != 0)
    {
      v7 = (unint64_t *)v39[0];
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 + 1, v7));
    }
  }
  turi::flexible_type_converter<std::vector<turi::flexible_type>>::get((turi::flexible_type_internals *)v39, v4, a2);
  switch(BYTE4(v39[1]))
  {
    case 2:
      v9 = (unint64_t *)v39[0];
      do
      {
        v10 = __ldaxr(v9);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v9));
      if (!v11)
      {
        v12 = v39[0];
        if (v39[0])
        {
          if (*(char *)(v39[0] + 31) < 0)
            operator delete(*(void **)(v39[0] + 8));
          v13 = v12;
          v14 = 0x1012C404EF22A49;
          goto LABEL_49;
        }
      }
      break;
    case 3:
      v26 = (unint64_t *)v39[0];
      do
      {
        v27 = __ldaxr(v26);
        v28 = v27 - 1;
      }
      while (__stlxr(v28, v26));
      if (!v28)
      {
        v29 = v39[0];
        if (v39[0])
        {
          v30 = *(void **)(v39[0] + 8);
          if (v30)
          {
            *(_QWORD *)(v39[0] + 16) = v30;
            operator delete(v30);
          }
          v13 = v29;
          v14 = 0x1080C409938AC02;
          goto LABEL_49;
        }
      }
      break;
    case 4:
      v15 = (unint64_t *)v39[0];
      do
      {
        v16 = __ldaxr(v15);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, v15));
      if (!v17)
      {
        v18 = v39[0];
        if (v39[0])
        {
          v38[0] = (void **)(v39[0] + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v38);
          goto LABEL_42;
        }
      }
      break;
    case 5:
      v31 = (unint64_t *)v39[0];
      do
      {
        v32 = __ldaxr(v31);
        v33 = v32 - 1;
      }
      while (__stlxr(v33, v31));
      if (!v33)
      {
        v18 = v39[0];
        if (v39[0])
        {
          v38[0] = (void **)(v39[0] + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v38);
LABEL_42:
          v13 = v18;
          v14 = 0x1020C405E66F15BLL;
          goto LABEL_49;
        }
      }
      break;
    case 8:
      v34 = (unint64_t *)v39[0];
      do
      {
        v35 = __ldaxr(v34);
        v36 = v35 - 1;
      }
      while (__stlxr(v36, v34));
      if (!v36)
      {
        v37 = v39[0];
        if (v39[0])
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v39[0] + 16));
          v13 = v37;
          v25 = -235920773;
          goto LABEL_48;
        }
      }
      break;
    case 9:
      v19 = (unint64_t *)v39[0];
      do
      {
        v20 = __ldaxr(v19);
        v21 = v20 - 1;
      }
      while (__stlxr(v21, v19));
      if (!v21)
      {
        v22 = v39[0];
        if (v39[0])
        {
          v23 = *(void **)(v39[0] + 48);
          if (v23)
          {
            *(_QWORD *)(v39[0] + 56) = v23;
            operator delete(v23);
          }
          v24 = *(void **)(v22 + 24);
          if (v24)
          {
            *(_QWORD *)(v22 + 32) = v24;
            operator delete(v24);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v22 + 8);
          v13 = v22;
          v25 = 2071181815;
LABEL_48:
          v14 = v25 | 0x1030C4000000000;
LABEL_49:
          MEMORY[0x219A19A08](v13, v14);
        }
      }
      break;
    default:
      return;
  }
}

void sub_2183EC0B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::string *a15, void *a16, uint64_t a17, void *a18)
{
  uint64_t v18;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  unsigned int v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  void *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;

  switch(*(_BYTE *)(v18 - 28))
  {
    case 2:
      v20 = *(unint64_t **)(v18 - 40);
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (v22)
        goto LABEL_39;
      v23 = *(_QWORD *)(v18 - 40);
      if (!v23)
        goto LABEL_39;
      if (*(char *)(v23 + 31) < 0)
        operator delete(*(void **)(v23 + 8));
      v24 = (_QWORD *)v23;
      v25 = 0x1012C404EF22A49;
      goto LABEL_38;
    case 3:
      v35 = *(unint64_t **)(v18 - 40);
      do
      {
        v36 = __ldaxr(v35);
        v37 = v36 - 1;
      }
      while (__stlxr(v37, v35));
      if (v37)
        goto LABEL_39;
      v38 = *(_QWORD **)(v18 - 40);
      if (!v38)
        goto LABEL_39;
      v39 = (void *)v38[1];
      if (v39)
      {
        v38[2] = v39;
        operator delete(v39);
      }
      v24 = v38;
      v25 = 0x1080C409938AC02;
      goto LABEL_38;
    case 4:
      v26 = *(unint64_t **)(v18 - 40);
      do
      {
        v27 = __ldaxr(v26);
        v28 = v27 - 1;
      }
      while (__stlxr(v28, v26));
      if (v28)
        goto LABEL_39;
      v29 = *(_QWORD **)(v18 - 40);
      if (!v29)
        goto LABEL_39;
      a18 = v29 + 1;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
      goto LABEL_31;
    case 5:
      v40 = *(unint64_t **)(v18 - 40);
      do
      {
        v41 = __ldaxr(v40);
        v42 = v41 - 1;
      }
      while (__stlxr(v42, v40));
      if (v42)
        goto LABEL_39;
      v29 = *(_QWORD **)(v18 - 40);
      if (!v29)
        goto LABEL_39;
      a18 = v29 + 1;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
LABEL_31:
      v24 = v29;
      v25 = 0x1020C405E66F15BLL;
      goto LABEL_38;
    case 8:
      v43 = *(unint64_t **)(v18 - 40);
      do
      {
        v44 = __ldaxr(v43);
        v45 = v44 - 1;
      }
      while (__stlxr(v45, v43));
      if (v45)
        goto LABEL_39;
      v46 = *(_QWORD *)(v18 - 40);
      if (!v46)
        goto LABEL_39;
      boost::detail::shared_count::~shared_count((unsigned int **)(v46 + 16));
      v24 = (_QWORD *)v46;
      v34 = -235920773;
      goto LABEL_37;
    case 9:
      v30 = *(unint64_t **)(v18 - 40);
      do
      {
        v31 = __ldaxr(v30);
        v32 = v31 - 1;
      }
      while (__stlxr(v32, v30));
      if (v32)
        goto LABEL_39;
      v33 = *(_QWORD **)(v18 - 40);
      if (!v33)
        goto LABEL_39;
      v24 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v33);
      v34 = 2071181815;
LABEL_37:
      v25 = v34 | 0x1030C4000000000;
LABEL_38:
      MEMORY[0x219A19A08](v24, v25);
LABEL_39:
      _Unwind_Resume(exception_object);
      return;
    default:
      goto LABEL_39;
  }
}

void turi::flexible_type_converter<std::vector<turi::flexible_type>>::get(turi::flexible_type_internals *a1@<X1>, const char *a2@<X2>, _QWORD *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  turi::flexible_type_internals::ft_converter<1>::get((uint64_t)a3, a1, a2);
}

void sub_2183EC3A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void turi::flexible_type_internals::ft_converter<1>::get(uint64_t a1, turi::flexible_type_internals *this, const char *a3)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  void *v23;
  void *v24;
  unsigned int v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  void *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t *v37;
  __int128 v38;
  uint64_t v39;
  void **v40;

  v4 = *((unsigned __int8 *)this + 12);
  if (v4 == 3)
  {
    v5 = *(_QWORD *)this;
    std::vector<turi::flexible_type>::vector(&v38, (uint64_t)(*(_QWORD *)(*(_QWORD *)this + 16) - *(_QWORD *)(*(_QWORD *)this + 8)) >> 3);
    v6 = *(_QWORD *)(v5 + 8);
    if (*(_QWORD *)(v5 + 16) != v6)
    {
      v7 = 0;
      do
      {
        v8 = v38 + 16 * v7;
        switch(*(_BYTE *)(v8 + 12))
        {
          case 2:
            v9 = *(unint64_t **)v8;
            do
            {
              v10 = __ldaxr(v9);
              v11 = v10 - 1;
            }
            while (__stlxr(v11, v9));
            if (!v11)
            {
              v12 = *(unint64_t **)v8;
              if (*(_QWORD *)v8)
              {
                if (*((char *)v12 + 31) < 0)
                  operator delete((void *)v12[1]);
                v13 = v12;
                v14 = 0x1012C404EF22A49;
                goto LABEL_45;
              }
            }
            break;
          case 3:
            v26 = *(unint64_t **)v8;
            do
            {
              v27 = __ldaxr(v26);
              v28 = v27 - 1;
            }
            while (__stlxr(v28, v26));
            if (!v28)
            {
              v29 = *(unint64_t **)v8;
              if (*(_QWORD *)v8)
              {
                v30 = (void *)v29[1];
                if (v30)
                {
                  v29[2] = (unint64_t)v30;
                  operator delete(v30);
                }
                v13 = v29;
                v14 = 0x1080C409938AC02;
                goto LABEL_45;
              }
            }
            break;
          case 4:
            v15 = *(unint64_t **)v8;
            do
            {
              v16 = __ldaxr(v15);
              v17 = v16 - 1;
            }
            while (__stlxr(v17, v15));
            if (!v17)
            {
              v18 = *(unint64_t **)v8;
              if (*(_QWORD *)v8)
              {
                v40 = (void **)(v18 + 1);
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v40);
                goto LABEL_38;
              }
            }
            break;
          case 5:
            v31 = *(unint64_t **)v8;
            do
            {
              v32 = __ldaxr(v31);
              v33 = v32 - 1;
            }
            while (__stlxr(v33, v31));
            if (!v33)
            {
              v18 = *(unint64_t **)v8;
              if (*(_QWORD *)v8)
              {
                v40 = (void **)(v18 + 1);
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v40);
LABEL_38:
                v13 = v18;
                v14 = 0x1020C405E66F15BLL;
                goto LABEL_45;
              }
            }
            break;
          case 8:
            v34 = *(unint64_t **)v8;
            do
            {
              v35 = __ldaxr(v34);
              v36 = v35 - 1;
            }
            while (__stlxr(v36, v34));
            if (!v36)
            {
              v37 = *(unint64_t **)v8;
              if (*(_QWORD *)v8)
              {
                boost::detail::shared_count::~shared_count((unsigned int **)v37 + 2);
                v13 = v37;
                v25 = -235920773;
                goto LABEL_44;
              }
            }
            break;
          case 9:
            v19 = *(unint64_t **)v8;
            do
            {
              v20 = __ldaxr(v19);
              v21 = v20 - 1;
            }
            while (__stlxr(v21, v19));
            if (!v21)
            {
              v22 = *(unint64_t **)v8;
              if (*(_QWORD *)v8)
              {
                v23 = (void *)v22[6];
                if (v23)
                {
                  v22[7] = (unint64_t)v23;
                  operator delete(v23);
                }
                v24 = (void *)v22[3];
                if (v24)
                {
                  v22[4] = (unint64_t)v24;
                  operator delete(v24);
                }
                std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v22 + 1));
                v13 = v22;
                v25 = 2071181815;
LABEL_44:
                v14 = v25 | 0x1030C4000000000;
LABEL_45:
                MEMORY[0x219A19A08](v13, v14);
              }
            }
            break;
          default:
            break;
        }
        *(_QWORD *)v8 = 0;
        *(_DWORD *)(v8 + 8) = 0;
        *(_BYTE *)(v8 + 12) = 1;
        *(_QWORD *)v8 = *(_QWORD *)(v6 + 8 * v7++);
        v6 = *(_QWORD *)(v5 + 8);
      }
      while (v7 < (*(_QWORD *)(v5 + 16) - v6) >> 3);
    }
    std::vector<turi::flexible_type>::__vdeallocate((void **)a1);
    *(_OWORD *)a1 = v38;
    *(_QWORD *)(a1 + 16) = v39;
    v39 = 0;
    v38 = 0uLL;
    v40 = (void **)&v38;
    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v40);
  }
  else
  {
    if (v4 != 4)
      turi::flexible_type_internals::throw_type_conversion_error(this, (const turi::flexible_type *)"vector of floats", a3);
    if (*(_QWORD *)this + 8 != a1)
      std::vector<turi::flexible_type>::__assign_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(a1, *(uint64_t **)(*(_QWORD *)this + 8), *(uint64_t **)(*(_QWORD *)this + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)this + 16) - *(_QWORD *)(*(_QWORD *)this + 8)) >> 4);
  }
}

void sub_2183EC6C0()
{
  turi::flexible_type_internals::ft_converter<1>::get(std::vector<turi::flexible_type> &,turi::flexible_type const&)::{lambda(void)#1}::operator()();
}

void turi::flexible_type_internals::ft_converter<1>::get(std::vector<turi::flexible_type> &,turi::flexible_type const&)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/data/flexible_type/flexible_type_converter.hpp", 117);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/data/flexible_type/flexible_type_converter.hpp", "operator()", 176, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::flexible_type_internals::ft_converter<1>::get(std::vector<turi::flexible_type> &,turi::flexible_type const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2183EC7C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_10_4()
{
  int v0;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, "Mutex create error %d", v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_column_indexer_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

std::string *turi::ml_data_internal::column_statistics::column_statistics(std::string *this, __int128 *a2, int a3, std::string::value_type a4)
{
  __int128 v7;
  uint64_t v8;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v7 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v7;
  }
  LODWORD(this[1].__r_.__value_.__l.__data_) = a3;
  this[1].__r_.__value_.__s.__data_[4] = a4;
  *(_OWORD *)&this[1].__r_.__value_.__r.__words[1] = 0u;
  *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&this[2].__r_.__value_.__r.__words[2] = 0u;
  this[3].__r_.__value_.__l.__size_ = 0;
  this[3].__r_.__value_.__r.__words[2] = 0x100000;
  *(_OWORD *)&this[4].__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&this[4].__r_.__value_.__r.__words[2] = 0u;
  *(_OWORD *)&this[5].__r_.__value_.__r.__words[1] = 0u;
  *(_OWORD *)&this[6].__r_.__value_.__l.__data_ = 0u;
  v8 = 168;
  this[6].__r_.__value_.__r.__words[2] = 0;
  do
    this->__r_.__value_.__s.__data_[v8++] = 0;
  while (v8 != 232);
  *(_OWORD *)&this[10].__r_.__value_.__r.__words[1] = 0u;
  *(_OWORD *)&this[9].__r_.__value_.__r.__words[2] = 0u;
  *(_OWORD *)&this[11].__r_.__value_.__l.__data_ = 0u;
  this[11].__r_.__value_.__r.__words[2] = 0;
  this[12].__r_.__value_.__r.__words[0] = 0;
  this[12].__r_.__value_.__l.__size_ = 850045863;
  *(_OWORD *)&this[12].__r_.__value_.__r.__words[2] = 0u;
  *(_OWORD *)&this[13].__r_.__value_.__r.__words[1] = 0u;
  *(_OWORD *)&this[14].__r_.__value_.__l.__data_ = 0u;
  this[14].__r_.__value_.__r.__words[2] = 0;
  return this;
}

void turi::ml_data_internal::column_statistics::initialize(turi::ml_data_internal::column_statistics *this)
{
  unint64_t v2;
  uint64_t v3;

  v2 = turi::thread::cpu_count(this);
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 8) = *((_QWORD *)this + 7);
  std::vector<std::vector<unsigned long>>::resize((uint64_t *)this + 15, v2);
  v3 = 0;
  std::vector<unsigned long>::assign((char **)this + 12, v2, &v3);
  std::vector<std::vector<turi::ml_data_internal::column_statistics::element_statistics_accumulator>>::resize((uint64_t *)this + 18, v2);
  *((_QWORD *)this + 11) = turi::ml_data_internal::ML_DATA_STATS_PARALLEL_ACCESS_THRESHOLD;
}

void std::vector<std::vector<turi::ml_data_internal::column_statistics::element_statistics_accumulator>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;

  v3 = a1[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<turi::ml_data_internal::column_statistics::element_statistics_accumulator>>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 24 * a2;
    if (v3 != v7)
    {
      v8 = a1[1];
      do
      {
        v10 = *(void **)(v8 - 24);
        v8 -= 24;
        v9 = v10;
        if (v10)
        {
          *(_QWORD *)(v3 - 16) = v9;
          operator delete(v9);
        }
        v3 = v8;
      }
      while (v8 != v7);
    }
    a1[1] = v7;
  }
}

_QWORD *turi::ml_data_internal::column_statistics::_finalize_threadlocal(turi::ml_data_internal::column_statistics *this, uint64_t a2, char a3, char a4)
{
  _QWORD *v5;
  _QWORD *result;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  _BYTE v11[24];
  _BYTE *v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v10 = a2;
  v9 = a3;
  v8 = a4;
  v5 = operator new(0x28uLL);
  *v5 = &off_24D93EFA8;
  v5[1] = &v10;
  v5[2] = &v9;
  v5[3] = this;
  v5[4] = &v8;
  v12 = v5;
  turi::in_parallel((turi::thread_pool *)v11);
  result = v12;
  if (v12 == v11)
  {
    v7 = 4;
    result = v11;
  }
  else
  {
    if (!v12)
      return result;
    v7 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v7))();
}

void sub_2183ECBC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *turi::ml_data_internal::column_statistics::_finalize_global(turi::ml_data_internal::column_statistics *this, unint64_t a2, char a3, char a4)
{
  _QWORD *v5;
  _QWORD *result;
  uint64_t v7;
  char v8;
  char v9;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v9 = a3;
  v8 = a4;
  v5 = operator new(0x20uLL);
  *v5 = &off_24D93F028;
  v5[1] = &v9;
  v5[2] = this;
  v5[3] = &v8;
  v11 = v5;
  turi::in_parallel((turi::thread_pool *)v10);
  result = v11;
  if (v11 == v10)
  {
    v7 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v7 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v7))();
}

void sub_2183ECCB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void turi::ml_data_internal::column_statistics::finalize(turi::ml_data_internal::column_statistics *this)
{
  unsigned int v2;
  BOOL v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  char v8;
  char v9;
  char v10;
  char v11;
  uint64_t *v12;
  char *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  void **v28;
  __int128 v29;
  uint64_t v30;
  void *v31;
  void *v32;
  void *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  void **v40;

  v2 = *((_DWORD *)this + 6);
  v3 = v2 > 7;
  v4 = (0x6Au >> v2) & 1;
  v5 = (0x95u >> v2) & 1;
  v6 = (0xE5u >> v2) & 1;
  v7 = (0x1Au >> v2) & 1;
  if (v3)
    v8 = 1;
  else
    v8 = v4;
  if (v3)
    v9 = 0;
  else
    v9 = v5;
  if (v3)
    v10 = 1;
  else
    v10 = v6;
  if (v3)
    v11 = 0;
  else
    v11 = v7;
  v13 = (char *)this + 96;
  v12 = (uint64_t *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 10) = 0;
  v14 = (uint64_t *)*((_QWORD *)this + 13);
  if (v12 != v14)
  {
    v15 = 0;
    do
    {
      v16 = *v12++;
      v15 += v16;
      *((_QWORD *)this + 10) = v15;
    }
    while (v12 != v14);
  }
  if ((v10 & 1) != 0)
    goto LABEL_17;
  v20 = *((_QWORD *)this + 29);
  v21 = *((_QWORD *)this + 30);
  v19 = (char *)this + 232;
  if (v20 == v21)
  {
    v22 = (uint64_t *)*((_QWORD *)this + 15);
    v23 = (uint64_t *)*((_QWORD *)this + 16);
    if (v22 == v23)
    {
LABEL_17:
      v17 = 0;
      v18 = 0;
      goto LABEL_27;
    }
    v18 = 0;
    v17 = 0;
    do
    {
      v25 = *v22;
      v24 = v22[1];
      v22 += 3;
      v26 = v24 - v25;
      if (v18 <= v26 >> 3)
        v18 = v26 >> 3;
      if (v17 <= v26 >> 3)
        v17 = v26 >> 3;
    }
    while (v22 != v23);
  }
  else
  {
    std::vector<unsigned long>::resize((uint64_t)v19, *((_QWORD *)this + 35));
    v17 = *((_QWORD *)this + 11);
    v18 = v17 + ((uint64_t)(*((_QWORD *)this + 30) - *((_QWORD *)this + 29)) >> 3);
  }
LABEL_27:
  if ((v8 & 1) == 0)
  {
    if (*((_QWORD *)this + 32) == *((_QWORD *)this + 33))
    {
      v34 = (uint64_t *)*((_QWORD *)this + 18);
      while (v34 != *((uint64_t **)this + 19))
      {
        v36 = *v34;
        v35 = v34[1];
        v34 += 3;
        v37 = v35 - v36;
        if (v18 <= v37 >> 4)
          v18 = v37 >> 4;
        if (v17 <= v37 >> 4)
          v17 = v37 >> 4;
      }
    }
    else
    {
      std::vector<xgboost_old::tree::RTreeNodeStat>::resize((uint64_t)this + 256, *((_QWORD *)this + 35));
      v17 = *((_QWORD *)this + 11);
      if (v18 <= v17 + ((uint64_t)(*((_QWORD *)this + 33) - *((_QWORD *)this + 32)) >> 4))
        v18 = v17 + ((uint64_t)(*((_QWORD *)this + 33) - *((_QWORD *)this + 32)) >> 4);
    }
  }
  if ((v10 & 1) == 0)
  {
    *(_QWORD *)&v38 = 0;
    std::vector<unsigned long>::assign((char **)this + 4, v18, &v38);
  }
  if ((v8 & 1) == 0)
  {
    *((_QWORD *)this + 8) = *((_QWORD *)this + 7);
    std::vector<xgboost_old::tree::RTreeNodeStat>::resize((uint64_t)this + 56, v18);
  }
  turi::ml_data_internal::column_statistics::_finalize_threadlocal(this, v17, v11, v9);
  if (*((_QWORD *)this + 32) != *((_QWORD *)this + 33) || *((_QWORD *)this + 29) != *((_QWORD *)this + 30))
    turi::ml_data_internal::column_statistics::_finalize_global(this, v27, v11, v9);
  v28 = (void **)((char *)this + 256);
  v29 = *((_OWORD *)this + 9);
  *((_OWORD *)this + 9) = 0u;
  v38 = v29;
  v30 = *((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  v39 = v30;
  v40 = (void **)&v38;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v40);
  v31 = (void *)*((_QWORD *)this + 12);
  *((_QWORD *)v13 + 2) = 0;
  *(_OWORD *)v13 = 0u;
  if (v31)
    operator delete(v31);
  v32 = *v28;
  *((_QWORD *)this + 33) = 0;
  *((_QWORD *)this + 34) = 0;
  *v28 = 0;
  if (v32)
    operator delete(v32);
  v33 = (void *)*((_QWORD *)this + 29);
  *((_QWORD *)this + 30) = 0;
  *((_QWORD *)this + 31) = 0;
  *((_QWORD *)this + 29) = 0;
  if (v33)
    operator delete(v33);
}

void *turi::ml_data_internal::column_statistics::save_impl(const void **this, turi::oarchive *a2)
{
  unint64_t v4;
  char *v5;
  unint64_t v6;
  _BYTE *v7;
  unint64_t v8;
  char *v9;
  size_t v11;
  char **v12;
  size_t v13;
  BOOL v14;
  std::vector<char>::size_type v15;
  size_t v16;
  _QWORD *v17;
  size_t v18;
  BOOL v19;
  std::vector<char>::size_type v20;
  size_t v21;
  char **v22;
  size_t v23;
  BOOL v24;
  std::vector<char>::size_type v25;

  turi::archive_detail::serialize_impl<turi::oarchive,std::string,false,void>::exec((uint64_t)a2, this);
  if (*(_QWORD *)a2)
  {
    std::ostream::write();
  }
  else
  {
    v4 = *((_QWORD *)a2 + 5);
    if (*((_QWORD *)a2 + 4) + 4 > v4)
    {
      v11 = 2 * v4 + 8;
      *((_QWORD *)a2 + 5) = v11;
      v12 = (char **)*((_QWORD *)a2 + 2);
      if (v12)
      {
        v5 = *v12;
        v13 = v12[1] - *v12;
        v14 = v11 >= v13;
        v15 = v11 - v13;
        if (v15 != 0 && v14)
        {
          std::vector<char>::__append(*((std::vector<char> **)a2 + 2), v15);
          v5 = (char *)**((_QWORD **)a2 + 2);
        }
        else if (!v14)
        {
          v12[1] = &v5[v11];
        }
      }
      else
      {
        v5 = (char *)malloc_type_realloc(*((void **)a2 + 3), v11, 0xF6EA6B1uLL);
      }
      *((_QWORD *)a2 + 3) = v5;
    }
    else
    {
      v5 = (char *)*((_QWORD *)a2 + 3);
    }
    *(_DWORD *)&v5[*((_QWORD *)a2 + 4)] = *((_DWORD *)this + 6);
    *((_QWORD *)a2 + 4) += 4;
  }
  if (*(_QWORD *)a2)
  {
    std::ostream::write();
  }
  else
  {
    v6 = *((_QWORD *)a2 + 5);
    if (*((_QWORD *)a2 + 4) + 1 > v6)
    {
      v16 = 2 * v6 + 2;
      *((_QWORD *)a2 + 5) = v16;
      v17 = (_QWORD *)*((_QWORD *)a2 + 2);
      if (v17)
      {
        v7 = (_BYTE *)*v17;
        v18 = v17[1] - *v17;
        v19 = v16 >= v18;
        v20 = v16 - v18;
        if (v20 != 0 && v19)
        {
          std::vector<char>::__append(*((std::vector<char> **)a2 + 2), v20);
          v7 = (_BYTE *)**((_QWORD **)a2 + 2);
        }
        else if (!v19)
        {
          v17[1] = &v7[v16];
        }
      }
      else
      {
        v7 = malloc_type_realloc(*((void **)a2 + 3), v16, 0xF6EA6B1uLL);
      }
      *((_QWORD *)a2 + 3) = v7;
    }
    else
    {
      v7 = (_BYTE *)*((_QWORD *)a2 + 3);
    }
    v7[(*((_QWORD *)a2 + 4))++] = *((_BYTE *)this + 28);
  }
  if (*(_QWORD *)a2)
  {
    std::ostream::write();
  }
  else
  {
    v8 = *((_QWORD *)a2 + 5);
    if (*((_QWORD *)a2 + 4) + 8 > v8)
    {
      v21 = 2 * v8 + 16;
      *((_QWORD *)a2 + 5) = v21;
      v22 = (char **)*((_QWORD *)a2 + 2);
      if (v22)
      {
        v9 = *v22;
        v23 = v22[1] - *v22;
        v24 = v21 >= v23;
        v25 = v21 - v23;
        if (v25 != 0 && v24)
        {
          std::vector<char>::__append(*((std::vector<char> **)a2 + 2), v25);
          v9 = (char *)**((_QWORD **)a2 + 2);
        }
        else if (!v24)
        {
          v22[1] = &v9[v21];
        }
      }
      else
      {
        v9 = (char *)malloc_type_realloc(*((void **)a2 + 3), v21, 0xF6EA6B1uLL);
      }
      *((_QWORD *)a2 + 3) = v9;
    }
    else
    {
      v9 = (char *)*((_QWORD *)a2 + 3);
    }
    *(_QWORD *)&v9[*((_QWORD *)a2 + 4)] = this[10];
    *((_QWORD *)a2 + 4) += 8;
  }
  turi::archive_detail::vector_serialize_impl<turi::oarchive,double,true>::exec((uint64_t)a2, this + 4);
  return turi::archive_detail::vector_serialize_impl<turi::oarchive,turi::ml_data_internal::column_statistics::element_statistics,true>::exec((uint64_t)a2, this + 7);
}

void turi::ml_data_internal::column_statistics::load_version(std::string *this, turi::iarchive *a2, uint64_t a3)
{
  uint64_t v5;
  int *v6;
  std::string *v7;
  uint64_t v8;
  uint64_t v9;
  std::string::size_type v10;
  uint64_t v11;
  int *v13;
  unint64_t v14;
  int *v15;
  int *v16;
  int *v17;
  uint64_t v18;
  std::string::size_type v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  std::string::size_type v24;
  uint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  std::string::size_type v30;
  unint64_t *size;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  std::string::size_type *p_size;
  std::string::size_type *v38;
  _QWORD *v39;
  _OWORD *v40;
  uint64_t v41;
  _OWORD *v42;
  __int128 v43;
  void *v44[2];
  char v45;
  void *v46;
  _QWORD *v47;
  uint64_t v48;
  std::string v49;
  char **v50;
  char *v51[2];
  char v52;
  std::string __p[3];
  uint64_t v54;

  v54 = *MEMORY[0x24BDAC8D0];
  if (a3 != 2)
  {
    if (a3 != 3)
      turi::ml_data_internal::column_statistics::load_version(turi::iarchive &,unsigned long)::$_1::operator()();
    turi::archive_detail::deserialize_impl<turi::iarchive,std::string,false,void>::exec((uint64_t)a2, this);
    v5 = *((_QWORD *)a2 + 2);
    if (v5)
    {
      LODWORD(this[1].__r_.__value_.__l.__data_) = *(_DWORD *)(v5 + *((_QWORD *)a2 + 3));
      *((_QWORD *)a2 + 3) += 4;
    }
    else
    {
      std::istream::read();
    }
    v8 = *((_QWORD *)a2 + 2);
    if (v8)
      this[1].__r_.__value_.__s.__data_[4] = *(_BYTE *)(v8 + (*((_QWORD *)a2 + 3))++);
    else
      std::istream::read();
    v9 = *((_QWORD *)a2 + 2);
    if (v9)
    {
      this[3].__r_.__value_.__l.__size_ = *(_QWORD *)(v9 + *((_QWORD *)a2 + 3));
      *((_QWORD *)a2 + 3) += 8;
    }
    else
    {
      std::istream::read();
    }
    turi::archive_detail::vector_deserialize_impl<turi::iarchive,unsigned long,true>::exec((uint64_t)a2, &this[1].__r_.__value_.__l.__size_);
    turi::archive_detail::vector_deserialize_impl<turi::iarchive,turi::ml_data_internal::column_statistics::element_statistics,true>::exec((uint64_t)a2, &this[2].__r_.__value_.__l.__size_);
    return;
  }
  v51[0] = 0;
  v51[1] = 0;
  v50 = v51;
  turi::variant_deep_load<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>((uint64_t)&v50, a2);
  std::string::basic_string[abi:ne180100]<0>(__p, "statistics_type");
  v6 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)&v50, (const void **)&__p[0].__r_.__value_.__l.__data_);
  turi::variant_converter<std::string,void>::get(v6, &v49);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v49.__r_.__value_.__l.__size_ != 11)
      goto LABEL_72;
    v7 = (std::string *)v49.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) != 11)
      goto LABEL_72;
    v7 = &v49;
  }
  v10 = v7->__r_.__value_.__r.__words[0];
  v11 = *(std::string::size_type *)((char *)v7->__r_.__value_.__r.__words + 3);
  if (v10 != 0x65642D6369736162 || v11 != 0x65736E65642D6369)
LABEL_72:
    turi::ml_data_internal::column_statistics::load_version(turi::iarchive &,unsigned long)::$_0::operator()();
  std::string::basic_string[abi:ne180100]<0>(__p, "version");
  v13 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)&v50, (const void **)&__p[0].__r_.__value_.__l.__data_);
  v14 = turi::variant_converter<unsigned long,void>::get((uint64_t)&v46, v13);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v46, "column_name");
  v15 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)&v50, (const void **)&v46);
  turi::variant_converter<std::string,void>::get(v15, __p);
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
    operator delete(this->__r_.__value_.__l.__data_);
  *this = __p[0];
  *((_BYTE *)&__p[0].__r_.__value_.__s + 23) = 0;
  __p[0].__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(v48) < 0)
    operator delete(v46);
  std::string::basic_string[abi:ne180100]<0>(__p, "mode");
  v16 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)&v50, (const void **)&__p[0].__r_.__value_.__l.__data_);
  LODWORD(this[1].__r_.__value_.__l.__data_) = turi::variant_converter<turi::ml_column_mode,void>::get((uint64_t)&v46, v16);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(__p, "original_column_type");
  v17 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)&v50, (const void **)&__p[0].__r_.__value_.__l.__data_);
  this[1].__r_.__value_.__s.__data_[4] = turi::variant_converter<turi::flex_type_enum,void>::get((uint64_t)&v46, v17);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  v47 = 0;
  v48 = 0;
  v46 = &v47;
  turi::variant_deep_load<std::map<std::string,turi::flexible_type>>((uint64_t)&v46, a2);
  if (v14 != 1)
  {
    std::string::basic_string[abi:ne180100]<0>(v44, "total_row_count");
    v29 = std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)&v46, (const void **)v44);
    __p[0].__r_.__value_.__l.__size_ = 0;
    LODWORD(__p[0].__r_.__value_.__r.__words[2]) = 0;
    __p[0].__r_.__value_.__s.__data_[20] = 0;
    if (&__p[0].__r_.__value_.__r.__words[1] != (std::string::size_type *)v29)
    {
      v30 = *(_QWORD *)v29;
      *(std::string::size_type *)((char *)&__p[0].__r_.__value_.__r.__words[1] + 5) = *(_QWORD *)(v29 + 5);
      __p[0].__r_.__value_.__l.__size_ = v30;
      __p[0].__r_.__value_.__s.__data_[20] = *(_BYTE *)(v29 + 12);
      if (__p[0].__r_.__value_.__s.__data_[20] <= 9u
        && ((1 << __p[0].__r_.__value_.__s.__data_[20]) & 0x33C) != 0)
      {
        size = (unint64_t *)__p[0].__r_.__value_.__l.__size_;
        do
          v32 = __ldaxr(size);
        while (__stlxr(v32 + 1, size));
      }
    }
    LODWORD(__p[0].__r_.__value_.__l.__data_) = 0;
    this[3].__r_.__value_.__l.__size_ = turi::variant_converter<unsigned long,void>::get((uint64_t)&v52, (int *)__p);
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)__p);
    if (v45 < 0)
      operator delete(v44[0]);
    turi::archive_detail::vector_deserialize_impl<turi::iarchive,unsigned long,true>::exec((uint64_t)a2, &this[1].__r_.__value_.__l.__size_);
    turi::archive_detail::vector_deserialize_impl<turi::iarchive,turi::ml_data_internal::column_statistics::element_statistics,true>::exec((uint64_t)a2, &this[2].__r_.__value_.__l.__size_);
    goto LABEL_69;
  }
  std::string::basic_string[abi:ne180100]<0>(v44, "total_row_count");
  v18 = std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)&v46, (const void **)v44);
  __p[0].__r_.__value_.__l.__size_ = 0;
  LODWORD(__p[0].__r_.__value_.__r.__words[2]) = 0;
  __p[0].__r_.__value_.__s.__data_[20] = 0;
  if (&__p[0].__r_.__value_.__r.__words[1] != (std::string::size_type *)v18)
  {
    v19 = *(_QWORD *)v18;
    *(std::string::size_type *)((char *)&__p[0].__r_.__value_.__r.__words[1] + 5) = *(_QWORD *)(v18 + 5);
    __p[0].__r_.__value_.__l.__size_ = v19;
    __p[0].__r_.__value_.__s.__data_[20] = *(_BYTE *)(v18 + 12);
    if (__p[0].__r_.__value_.__s.__data_[20] <= 9u
      && ((1 << __p[0].__r_.__value_.__s.__data_[20]) & 0x33C) != 0)
    {
      v20 = (unint64_t *)__p[0].__r_.__value_.__l.__size_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 + 1, v20));
    }
  }
  LODWORD(__p[0].__r_.__value_.__l.__data_) = 0;
  this[3].__r_.__value_.__l.__size_ = turi::variant_converter<unsigned long,void>::get((uint64_t)&v52, (int *)__p);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)__p);
  if (v45 < 0)
    operator delete(v44[0]);
  __p[0].__r_.__value_.__r.__words[0] = 0;
  v22 = *((_QWORD *)a2 + 2);
  if (!v22)
  {
    std::istream::read();
    v24 = __p[0].__r_.__value_.__r.__words[0];
    if (__p[0].__r_.__value_.__r.__words[0])
      goto LABEL_45;
LABEL_56:
    v28 = 0;
    v27 = 0;
    goto LABEL_57;
  }
  v23 = *((_QWORD *)a2 + 3);
  v24 = *(_QWORD *)(v22 + v23);
  __p[0].__r_.__value_.__r.__words[0] = v24;
  *((_QWORD *)a2 + 3) = v23 + 8;
  if (!v24)
    goto LABEL_56;
LABEL_45:
  if (v24 >= 0xAAAAAAAAAAAAAABLL)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  v25 = 24 * v24;
  v26 = (char *)operator new(24 * v24);
  bzero(v26, 24 * ((v25 - 24) / 0x18uLL) + 24);
  v27 = &v26[24 * ((v25 - 24) / 0x18uLL) + 24];
  v28 = v26;
LABEL_57:
  v33 = v27 - v28;
  v34 = *((_QWORD *)a2 + 2);
  if (v34)
  {
    v35 = *((_QWORD *)a2 + 3);
    memcpy(v28, (const void *)(v34 + v35), v27 - v28);
    *((_QWORD *)a2 + 3) = v35 + v33;
  }
  else
  {
    std::istream::read();
  }
  v36 = 0xAAAAAAAAAAAAAAABLL * (v33 >> 3);
  p_size = &this[1].__r_.__value_.__l.__size_;
  std::vector<unsigned long>::resize((uint64_t)&this[1].__r_.__value_.__l.__size_, v36);
  v38 = &this[2].__r_.__value_.__l.__size_;
  std::vector<xgboost_old::tree::RTreeNodeStat>::resize((uint64_t)v38, v36);
  if (v27 != v28)
  {
    v39 = (_QWORD *)*p_size;
    v40 = (_OWORD *)*v38;
    if (v36 <= 1)
      v41 = 1;
    else
      v41 = v36;
    v42 = v28 + 8;
    do
    {
      *v39++ = *((_QWORD *)v42 - 1);
      v43 = *v42;
      v42 = (_OWORD *)((char *)v42 + 24);
      *v40++ = v43;
      --v41;
    }
    while (v41);
    goto LABEL_68;
  }
  if (v28)
LABEL_68:
    operator delete(v28);
LABEL_69:
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v46, v47);
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v49.__r_.__value_.__l.__data_);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v50, v51[0]);
}

void sub_2183ED80C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, _QWORD *a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27,char *a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&a31);
  if (a14 < 0)
    operator delete(__p);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&a15, a16);
  if (a26 < 0)
    operator delete(a21);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&a27, a28);
  _Unwind_Resume(a1);
}

void turi::ml_data_internal::column_statistics::load_version(turi::iarchive &,unsigned long)::$_0::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/ml/ml_data/column_statistics.cpp", 98);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"statistics_type == \"basic-dense\"", 32);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/ml/ml_data/column_statistics.cpp", "operator()", 602, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::ml_data_internal::column_statistics::load_version(turi::iarchive &,unsigned long)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2183ED9F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::variant_deep_load<std::map<std::string,turi::flexible_type>>(uint64_t a1, turi::iarchive *a2)
{
  unsigned __int8 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::string *v9;
  __int128 v10;
  std::string *v11;
  __int128 v12;
  void **v13;
  uint64_t v14;
  _QWORD *size;
  std::string::size_type v16;
  std::string v17;
  std::string v18;
  uint64_t v19;
  void *__p[2];
  int64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  if ((v4 & 1) == 0
  {
    turi::variant_deep_load<std::map<std::string,turi::flexible_type>>(std::map<std::string,turi::flexible_type> &,turi::iarchive &)::type_check_hash = 0xB2AED596F5A8ECDALL;
  }
  v19 = 0;
  v5 = *((_QWORD *)a2 + 2);
  if (v5)
  {
    v6 = *((_QWORD *)a2 + 3);
    v7 = *(_QWORD *)(v5 + v6);
    v19 = v7;
    *((_QWORD *)a2 + 3) = v6 + 8;
  }
  else
  {
    std::istream::read();
    v7 = v19;
  }
  v8 = turi::variant_deep_load<std::map<std::string,turi::flexible_type>>(std::map<std::string,turi::flexible_type> &,turi::iarchive &)::type_check_hash;
  std::string::basic_string[abi:ne180100]<0>(&v17, "Deserialization of type ");
  v9 = std::string::append(&v17, (const std::string::value_type *)(0x8000000218709CE4 & 0x7FFFFFFFFFFFFFFFLL));
  v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v18.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  v11 = std::string::append(&v18, " failed, likely due to corruption earlier in the stream. ");
  v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v21 = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  v13 = __p;
  if (v21 < 0)
    v13 = (void **)__p[0];
  assert_msg(v8 == v7, "%s", (const char *)v13);
  if (SHIBYTE(v21) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
  __p[1] = 0;
  LODWORD(v21) = 0;
  BYTE4(v21) = 0;
  LODWORD(__p[0]) = 0;
  turi::variant_deep_load((unsigned int *)__p, a2);
  turi::variant_converter<std::map<std::string,turi::flexible_type>,void>::get((int *)__p, (uint64_t)&v18);
  v14 = a1 + 8;
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy(a1, *(_QWORD **)(a1 + 8));
  size = (_QWORD *)v18.__r_.__value_.__l.__size_;
  *(_QWORD *)a1 = v18.__r_.__value_.__r.__words[0];
  *(_QWORD *)(a1 + 8) = size;
  v16 = v18.__r_.__value_.__r.__words[2];
  *(_QWORD *)(a1 + 16) = *((_QWORD *)&v18.__r_.__value_.__l + 2);
  if (v16)
  {
    size[2] = v14;
    v18.__r_.__value_.__r.__words[0] = (std::string::size_type)&v18.__r_.__value_.__l.__size_;
    *(_OWORD *)&v18.__r_.__value_.__r.__words[1] = 0uLL;
    size = 0;
  }
  else
  {
    *(_QWORD *)a1 = v14;
  }
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v18, size);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)__p);
}

void sub_2183EDCAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&__p);
  _Unwind_Resume(a1);
}

void sub_2183EDEA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void std::vector<std::vector<turi::ml_data_internal::column_statistics::element_statistics_accumulator>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  size_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    v19 = v4;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>(v4, v11);
    else
      v12 = 0;
    v15 = v12;
    v16 = &v12[24 * v8];
    v18 = &v12[24 * v11];
    v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    v17 = &v16[v14];
    std::vector<std::vector<turi::ml_data_internal::column_statistics::element_statistics_accumulator>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)&v15);
  }
}

void sub_2183EE08C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<turi::ml_data_internal::column_statistics::element_statistics_accumulator>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<turi::ml_data_internal::column_statistics::element_statistics_accumulator>>,std::reverse_iterator<std::vector<turi::ml_data_internal::column_statistics::element_statistics_accumulator>*>,std::reverse_iterator<std::vector<turi::ml_data_internal::column_statistics::element_statistics_accumulator>*>,std::reverse_iterator<std::vector<turi::ml_data_internal::column_statistics::element_statistics_accumulator>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<turi::ml_data_internal::column_statistics::element_statistics_accumulator>>,std::reverse_iterator<std::vector<turi::ml_data_internal::column_statistics::element_statistics_accumulator>*>,std::reverse_iterator<std::vector<turi::ml_data_internal::column_statistics::element_statistics_accumulator>*>,std::reverse_iterator<std::vector<turi::ml_data_internal::column_statistics::element_statistics_accumulator>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<turi::ml_data_internal::column_statistics::element_statistics_accumulator>>,std::reverse_iterator<std::vector<turi::ml_data_internal::column_statistics::element_statistics_accumulator>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<turi::ml_data_internal::column_statistics::element_statistics_accumulator>>,std::reverse_iterator<std::vector<turi::ml_data_internal::column_statistics::element_statistics_accumulator>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::__function::__func<turi::ml_data_internal::column_statistics::_finalize_threadlocal(unsigned long,BOOL,BOOL)::$_0,std::allocator<turi::ml_data_internal::column_statistics::_finalize_threadlocal(unsigned long,BOOL,BOOL)::$_0>,void ()(unsigned long,unsigned long)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

__n128 std::__function::__func<turi::ml_data_internal::column_statistics::_finalize_threadlocal(unsigned long,BOOL,BOOL)::$_0,std::allocator<turi::ml_data_internal::column_statistics::_finalize_threadlocal(unsigned long,BOOL,BOOL)::$_0>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_24D93EFA8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<turi::ml_data_internal::column_statistics::_finalize_threadlocal(unsigned long,BOOL,BOOL)::$_0,std::allocator<turi::ml_data_internal::column_statistics::_finalize_threadlocal(unsigned long,BOOL,BOOL)::$_0>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24D93EFA8;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

unint64_t std::__function::__func<turi::ml_data_internal::column_statistics::_finalize_threadlocal(unsigned long,BOOL,BOOL)::$_0,std::allocator<turi::ml_data_internal::column_statistics::_finalize_threadlocal(unsigned long,BOOL,BOOL)::$_0>,void ()(unsigned long,unsigned long)>::operator()(unint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  double v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  unint64_t v41;
  double *v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  double v48;
  double v49;
  double *v50;
  double v51;
  double v52;
  double v53;

  v4 = *(_BYTE **)(result + 16);
  v3 = *(_QWORD *)(result + 24);
  v5 = **(_QWORD **)(result + 8);
  v6 = v5 * *a2;
  v7 = v6 / *a3;
  v8 = v5 + v6;
  v9 = *v4;
  v10 = v8 / *a3;
  if (*v4)
  {
    v11 = *(uint64_t **)(v3 + 120);
    v12 = *(uint64_t **)(v3 + 128);
    while (v11 != v12)
    {
      v13 = *v11;
      v14 = v11[1] - *v11;
      if (v10 >= v14 >> 3)
        v15 = v14 >> 3;
      else
        v15 = v10;
      if (v7 < v15)
      {
        v16 = *(_QWORD *)(v3 + 32);
        v17 = v7;
        do
        {
          *(_QWORD *)(v16 + 8 * v17) += *(_QWORD *)(v13 + 8 * v17);
          ++v17;
        }
        while (v17 != v15);
      }
      v11 += 3;
    }
  }
  if (**(_BYTE **)(result + 32))
  {
    v18 = *(_QWORD *)(v3 + 144);
    v19 = *(_QWORD *)(v3 + 152);
    v20 = (v19 - v18) / 24;
    if (v19 != v18)
    {
      v21 = 0;
      if (v20 <= 1)
        v22 = 1;
      else
        v22 = (v19 - v18) / 24;
      result = 24;
      do
      {
        v23 = *(_QWORD *)(v18 + 24 * v21);
        v24 = *(_QWORD *)(v18 + 24 * v21 + 8) - v23;
        if (v10 >= v24 >> 4)
          v25 = v24 >> 4;
        else
          v25 = v10;
        if (v7 < v25)
        {
          v26 = *(_QWORD *)(v3 + 56);
          v27 = v7;
          do
          {
            v28 = (_QWORD *)(v3 + 96);
            v29 = v21;
            if (v9)
            {
              v28 = (_QWORD *)(*(_QWORD *)(v3 + 120) + 24 * v21);
              v29 = v27;
            }
            *(double *)(v26 + 16 * v27) = *(double *)(v26 + 16 * v27)
                                        + *(double *)(v23 + 16 * v27) * (double)*(unint64_t *)(*v28 + 8 * v29);
            ++v27;
          }
          while (v27 != v25);
        }
        ++v21;
      }
      while (v21 != v22);
    }
    if (v7 < v10)
    {
      v30 = *(_QWORD *)(v3 + 56);
      v31 = v7;
      do
      {
        v32 = (unint64_t *)(v3 + 80);
        if (v9)
          v32 = (unint64_t *)(*(_QWORD *)(v3 + 32) + 8 * v31);
        v33 = *v32;
        if (v33 <= 1)
          v33 = 1;
        v34 = (double)v33;
        result = 16 * v31;
        *(double *)(v30 + 16 * v31) = *(double *)(v30 + 16 * v31) / v34;
        ++v31;
      }
      while (v31 != v10);
    }
    if (v19 != v18)
    {
      v35 = 0;
      if (v20 <= 1)
        v20 = 1;
      do
      {
        v36 = *(_QWORD *)(v18 + 24 * v35);
        v37 = *(_QWORD *)(v18 + 24 * v35 + 8) - v36;
        if (v10 >= v37 >> 4)
          result = v37 >> 4;
        else
          result = v10;
        if (v7 < result)
        {
          v38 = *(_QWORD *)(v3 + 56);
          v39 = v7;
          do
          {
            v40 = (_QWORD *)(v3 + 96);
            v41 = v35;
            if (v9)
            {
              v40 = (_QWORD *)(*(_QWORD *)(v3 + 120) + 24 * v35);
              v41 = v39;
            }
            v42 = (double *)(v38 + 16 * v39);
            v42[1] = v42[1]
                   + *(double *)(v36 + 16 * v39 + 8)
                   + (double)*(unint64_t *)(*v40 + 8 * v41)
                   * ((*(double *)(v36 + 16 * v39) - *v42)
                    * (*(double *)(v36 + 16 * v39) - *v42));
            ++v39;
          }
          while (v39 != result);
        }
        ++v35;
      }
      while (v35 != v20);
    }
  }
  switch(*(_DWORD *)(v3 + 24))
  {
    case 0:
    case 2:
    case 7:
      v43 = *(_QWORD *)(v3 + 80);
      if (v43 >= 2 && v7 < v10)
      {
        v44 = *(_QWORD *)(v3 + 56);
        do
        {
          *(double *)(v44 + 16 * v7 + 8) = sqrt(*(double *)(v44 + 16 * v7 + 8) / (double)(v43 - 1));
          ++v7;
        }
        while (v7 != v10);
      }
      break;
    case 4:
      v45 = *(_QWORD *)(v3 + 80);
      if (v45 >= 2 && v7 < v10)
      {
        v46 = *(_QWORD *)(v3 + 56);
        v47 = *(_QWORD *)(v3 + 32);
        v48 = (double)v45;
        v49 = (double)(v45 - 1);
        do
        {
          v50 = (double *)(v46 + 16 * v7);
          v51 = (double)*(unint64_t *)(v47 + 8 * v7);
          v52 = *v50 * (v51 / v48);
          v53 = sqrt((v50[1] + *v50 * *v50 * v51 * (1.0 - v51 / v48)) / v49);
          *v50 = v52;
          v50[1] = v53;
          ++v7;
        }
        while (v7 != v10);
      }
      break;
    default:
      return result;
  }
  return result;
}

uint64_t std::__function::__func<turi::ml_data_internal::column_statistics::_finalize_threadlocal(unsigned long,BOOL,BOOL)::$_0,std::allocator<turi::ml_data_internal::column_statistics::_finalize_threadlocal(unsigned long,BOOL,BOOL)::$_0>,void ()(unsigned long,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::ml_data_internal::column_statistics::_finalize_threadlocal(unsigned long,BOOL,BOOL)::$_0,std::allocator<turi::ml_data_internal::column_statistics::_finalize_threadlocal(unsigned long,BOOL,BOOL)::$_0>,void ()(unsigned long,unsigned long)>::target_type()
{
}

void std::__function::__func<turi::ml_data_internal::column_statistics::_finalize_global(unsigned long,BOOL,BOOL)::$_0,std::allocator<turi::ml_data_internal::column_statistics::_finalize_global(unsigned long,BOOL,BOOL)::$_0>,void ()(unsigned long,unsigned long)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

__n128 std::__function::__func<turi::ml_data_internal::column_statistics::_finalize_global(unsigned long,BOOL,BOOL)::$_0,std::allocator<turi::ml_data_internal::column_statistics::_finalize_global(unsigned long,BOOL,BOOL)::$_0>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24D93F028;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<turi::ml_data_internal::column_statistics::_finalize_global(unsigned long,BOOL,BOOL)::$_0,std::allocator<turi::ml_data_internal::column_statistics::_finalize_global(unsigned long,BOOL,BOOL)::$_0>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24D93F028;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

_QWORD *std::__function::__func<turi::ml_data_internal::column_statistics::_finalize_global(unsigned long,BOOL,BOOL)::$_0,std::allocator<turi::ml_data_internal::column_statistics::_finalize_global(unsigned long,BOOL,BOOL)::$_0>,void ()(unsigned long,unsigned long)>::operator()(_QWORD *result, uint64_t *a2, unint64_t *a3)
{
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  double *v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;

  v3 = result;
  v4 = *a2;
  v5 = *a3;
  v6 = (_QWORD *)result[2];
  if (*(_BYTE *)result[1])
  {
    v7 = v6[29];
    v8 = v6[30] - v7;
    v9 = (v8 >> 3) * v4;
    v10 = (v9 + (v8 >> 3)) / v5;
    if (v10 != v9 / v5)
      result = memmove((void *)(v6[4] + 8 * (v9 / v5) + 8 * v6[11]), (const void *)(v7 + 8 * (v9 / v5)), 8 * v10 - 8 * (v9 / v5));
  }
  if (*(_BYTE *)v3[3])
  {
    v11 = v6[32];
    v12 = v6[33] - v11;
    v13 = (v12 >> 4) * v4;
    v14 = v13 / v5;
    v15 = (v13 + (v12 >> 4)) / v5;
    if (v13 / v5 < v15)
    {
      v16 = v6[7];
      v17 = *(unsigned __int8 *)v3[1];
      v19 = v6[10];
      v18 = v6[11];
      do
      {
        v20 = v14 + v18;
        if (v17)
        {
          v21 = (double *)(v11 + 16 * v14);
          result = (_QWORD *)v6[4];
          v22 = (double)(unint64_t)result[v20];
          v23 = v22 / (double)(unint64_t)v6[10];
          v24 = *v21;
          v25 = v21[1];
          *(double *)(v16 + 16 * v20) = *v21 * v23;
          v21[1] = v25 + v24 * v24 * v22 * (1.0 - v23);
        }
        v26 = 0.0;
        if (v19 >= 2)
          v26 = sqrt(*(double *)(v11 + 16 * v14 + 8) / (double)(v19 - 1));
        *(double *)(v16 + 16 * v20 + 8) = v26;
        ++v14;
      }
      while (v14 != v15);
    }
  }
  return result;
}

uint64_t std::__function::__func<turi::ml_data_internal::column_statistics::_finalize_global(unsigned long,BOOL,BOOL)::$_0,std::allocator<turi::ml_data_internal::column_statistics::_finalize_global(unsigned long,BOOL,BOOL)::$_0>,void ()(unsigned long,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::ml_data_internal::column_statistics::_finalize_global(unsigned long,BOOL,BOOL)::$_0,std::allocator<turi::ml_data_internal::column_statistics::_finalize_global(unsigned long,BOOL,BOOL)::$_0>,void ()(unsigned long,unsigned long)>::target_type()
{
}

void *turi::archive_detail::vector_serialize_impl<turi::oarchive,turi::ml_data_internal::column_statistics::element_statistics,true>::exec(uint64_t a1, const void **a2)
{
  uint64_t v4;
  unint64_t v5;
  char *v6;
  const void *v7;
  size_t v8;
  void *result;
  size_t v10;
  char *v11;
  size_t v12;
  char **v13;
  size_t v14;
  BOOL v15;
  std::vector<char>::size_type v16;
  size_t v17;
  char **v18;
  size_t v19;
  BOOL v20;
  std::vector<char>::size_type v21;

  v4 = ((_BYTE *)a2[1] - (_BYTE *)*a2) >> 4;
  if (*(_QWORD *)a1)
  {
    std::ostream::write();
  }
  else
  {
    v5 = *(_QWORD *)(a1 + 40);
    if (*(_QWORD *)(a1 + 32) + 8 > v5)
    {
      v12 = 2 * v5 + 16;
      *(_QWORD *)(a1 + 40) = v12;
      v13 = *(char ***)(a1 + 16);
      if (v13)
      {
        v6 = *v13;
        v14 = v13[1] - *v13;
        v15 = v12 >= v14;
        v16 = v12 - v14;
        if (v16 != 0 && v15)
        {
          std::vector<char>::__append(*(std::vector<char> **)(a1 + 16), v16);
          v6 = **(char ***)(a1 + 16);
        }
        else if (!v15)
        {
          v13[1] = &v6[v12];
        }
      }
      else
      {
        v6 = (char *)malloc_type_realloc(*(void **)(a1 + 24), v12, 0xF6EA6B1uLL);
      }
      *(_QWORD *)(a1 + 24) = v6;
    }
    else
    {
      v6 = *(char **)(a1 + 24);
    }
    *(_QWORD *)&v6[*(_QWORD *)(a1 + 32)] = v4;
    *(_QWORD *)(a1 + 32) += 8;
  }
  v7 = *a2;
  v8 = (_BYTE *)a2[1] - (_BYTE *)*a2;
  if (*(_QWORD *)a1)
    return (void *)std::ostream::write();
  v10 = *(_QWORD *)(a1 + 40);
  if (*(_QWORD *)(a1 + 32) + v8 > v10)
  {
    v17 = 2 * (v10 + v8);
    *(_QWORD *)(a1 + 40) = v17;
    v18 = *(char ***)(a1 + 16);
    if (v18)
    {
      v11 = *v18;
      v19 = v18[1] - *v18;
      v20 = v17 >= v19;
      v21 = v17 - v19;
      if (v21 != 0 && v20)
      {
        std::vector<char>::__append(*(std::vector<char> **)(a1 + 16), v21);
        v11 = **(char ***)(a1 + 16);
      }
      else if (!v20)
      {
        v18[1] = &v11[v17];
      }
    }
    else
    {
      v11 = (char *)malloc_type_realloc(*(void **)(a1 + 24), v17, 0xF6EA6B1uLL);
    }
    *(_QWORD *)(a1 + 24) = v11;
  }
  else
  {
    v11 = *(char **)(a1 + 24);
  }
  result = memcpy(&v11[*(_QWORD *)(a1 + 32)], v7, v8);
  *(_QWORD *)(a1 + 32) += v8;
  return result;
}

void *turi::archive_detail::vector_deserialize_impl<turi::iarchive,turi::ml_data_internal::column_statistics::element_statistics,true>::exec(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  void *v7;
  size_t v8;
  uint64_t v9;
  void *result;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
  {
    v5 = *(_QWORD *)(a1 + 24);
    v6 = *(_QWORD *)(v4 + v5);
    *(_QWORD *)(a1 + 24) = v5 + 8;
  }
  else
  {
    std::istream::read();
    v6 = 0;
  }
  a2[1] = *a2;
  std::vector<xgboost_old::tree::RTreeNodeStat>::resize((uint64_t)a2, v6);
  v7 = (void *)*a2;
  v8 = a2[1] - *a2;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
    return (void *)std::istream::read();
  result = memcpy(v7, (const void *)(v9 + *(_QWORD *)(a1 + 24)), v8);
  *(_QWORD *)(a1 + 24) += v8;
  return result;
}

void __cxx_global_var_init_12_3()
{
  int v0;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, "Mutex create error %d", v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

void _GLOBAL__sub_I_column_statistics_cpp()
{
  _QWORD *v0;
  uint64_t v1;
  void *__p[2];
  char v3;
  _BYTE v4[24];
  _BYTE *v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  std::string::basic_string[abi:ne180100]<0>(__p, "TURI_ML_DATA_STATS_PARALLEL_ACCESS_THRESHOLD");
  v5 = 0;
  turi::globals::register_global<long long>::register_global(&turi::ml_data_internal::__ML_DATA_STATS_PARALLEL_ACCESS_THRESHOLD__register__instance, __p, &turi::ml_data_internal::ML_DATA_STATS_PARALLEL_ACCESS_THRESHOLD, 1, v4);
  v0 = v5;
  if (v5 == v4)
  {
    v1 = 4;
    v0 = v4;
  }
  else
  {
    if (!v5)
      goto LABEL_6;
    v1 = 5;
  }
  (*(void (**)(void))(*v0 + 8 * v1))();
LABEL_6:
  if (v3 < 0)
    operator delete(__p[0]);
}

void sub_2183EEBA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  _GLOBAL__sub_I_column_statistics_cpp_cold_1((uint64_t)&a9);
  _Unwind_Resume(a1);
}

int *turi::neural_net::compute_context::registration::registration(int *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  turi::neural_net::_anonymous_namespace_ *v9;
  uint64_t **registry;
  int *v12;
  int v13;

  v13 = a2;
  *a1 = a2;
  v8 = (uint64_t)(a1 + 18);
  std::__function::__value_func<std::unique_ptr<turi::neural_net::compute_context> ()(void)>::__value_func[abi:ne180100]((uint64_t)(a1 + 2), a3);
  std::__function::__value_func<std::unique_ptr<turi::neural_net::compute_context> ()(void)>::__value_func[abi:ne180100]((uint64_t)(a1 + 10), a4);
  v9 = (turi::neural_net::_anonymous_namespace_ *)std::__function::__value_func<std::unique_ptr<turi::neural_net::compute_context> ()(void)>::__value_func[abi:ne180100](v8, a5);
  v12 = a1;
  std::__tree<std::__value_type<int,turi::neural_net::compute_context::registration *>,std::__map_value_compare<int,std::__value_type<int,turi::neural_net::compute_context::registration *>,std::less<int>,true>,std::allocator<std::__value_type<int,turi::neural_net::compute_context::registration *>>>::__emplace_multi<int &,turi::neural_net::compute_context::registration *>(registry, &v13, &v12);
  return a1;
}

void sub_2183EEC80(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  v6 = (_QWORD *)v2[12];
  if (v6 == v4)
  {
    v7 = 4;
    v6 = v4;
  }
  else
  {
    if (!v6)
      goto LABEL_6;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_6:
  v8 = (_QWORD *)v2[8];
  if (v8 == v3)
  {
    v9 = 4;
    v8 = v3;
  }
  else
  {
    if (!v8)
      goto LABEL_11;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_11:
  v10 = (_QWORD *)v2[4];
  if (v10 == v1)
  {
    v11 = 4;
    v10 = v1;
  }
  else
  {
    if (!v10)
      goto LABEL_16;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_16:
  _Unwind_Resume(exception_object);
}

uint64_t turi::neural_net::`anonymous namespace'::get_registry(turi::neural_net::_anonymous_namespace_ *this)
{
  unsigned __int8 v1;
  _QWORD *v3;

  if ((v1 & 1) == 0
  {
    v3 = (_QWORD *)operator new();
    v3[2] = 0;
    v3[1] = 0;
    *v3 = v3 + 1;
  }
}

void sub_2183EED90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

turi::neural_net::_anonymous_namespace_ *turi::neural_net::compute_context::create_tf@<X0>(turi::neural_net::compute_context *this@<X0>, _QWORD *a2@<X8>)
{
  turi::neural_net::_anonymous_namespace_ *result;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;
  uint64_t v9;

  *a2 = 0;
  v4 = *(_QWORD **)result;
  do
  {
    if (v4 == (_QWORD *)((char *)result + 8))
      break;
    result = *(turi::neural_net::_anonymous_namespace_ **)(v4[5] + 64);
    if (result)
    {
      result = (turi::neural_net::_anonymous_namespace_ *)(*(_QWORD *(**)(uint64_t *__return_ptr))(*(_QWORD *)result + 48))(&v9);
      v5 = v9;
    }
    else
    {
      v5 = 0;
    }
    *a2 = v5;
    v6 = (_QWORD *)v4[1];
    if (v6)
    {
      do
      {
        v7 = v6;
        v6 = (_QWORD *)*v6;
      }
      while (v6);
    }
    else
    {
      do
      {
        v7 = (_QWORD *)v4[2];
        v8 = *v7 == (_QWORD)v4;
        v4 = v7;
      }
      while (!v8);
    }
    v4 = v7;
  }
  while (!v5);
  return result;
}

void sub_2183EEE4C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = 0;
  _Unwind_Resume(a1);
}

turi::neural_net::_anonymous_namespace_ *turi::neural_net::compute_context::create@<X0>(turi::neural_net::compute_context *this@<X0>, _QWORD *a2@<X8>)
{
  turi::neural_net::_anonymous_namespace_ *result;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;
  uint64_t v10;

  *a2 = 0;
  v4 = *(_QWORD **)result;
  do
  {
    if (v4 == (_QWORD *)((char *)result + 8))
      break;
    v5 = *(_QWORD *)(v4[5] + 32);
    if (!v5)
      std::__throw_bad_function_call[abi:ne180100]();
    result = (turi::neural_net::_anonymous_namespace_ *)(*(_QWORD *(**)(uint64_t *__return_ptr))(*(_QWORD *)v5 + 48))(&v10);
    v6 = v10;
    *a2 = v10;
    v7 = (_QWORD *)v4[1];
    if (v7)
    {
      do
      {
        v8 = v7;
        v7 = (_QWORD *)*v7;
      }
      while (v7);
    }
    else
    {
      do
      {
        v8 = (_QWORD *)v4[2];
        v9 = *v8 == (_QWORD)v4;
        v4 = v8;
      }
      while (!v9);
    }
    v4 = v8;
  }
  while (!v6);
  return result;
}

void sub_2183EEEFC(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = 0;
  _Unwind_Resume(a1);
}

uint64_t std::__function::__value_func<std::unique_ptr<turi::neural_net::compute_context> ()(void)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

_DWORD *std::__tree<std::__value_type<int,turi::neural_net::compute_context::registration *>,std::__map_value_compare<int,std::__value_type<int,turi::neural_net::compute_context::registration *>,std::less<int>,true>,std::allocator<std::__value_type<int,turi::neural_net::compute_context::registration *>>>::__emplace_multi<int &,turi::neural_net::compute_context::registration *>(uint64_t **a1, int *a2, _QWORD *a3)
{
  _DWORD *v6;
  int v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t **v10;

  v6 = operator new(0x30uLL);
  v7 = *a2;
  v6[8] = *a2;
  *((_QWORD *)v6 + 5) = *a3;
  v8 = a1 + 1;
  v9 = a1[1];
  if (v9)
  {
    do
    {
      while (1)
      {
        v8 = (uint64_t **)v9;
        if (v7 >= *((_DWORD *)v9 + 8))
          break;
        v9 = (uint64_t *)*v9;
        v10 = v8;
        if (!*v8)
          goto LABEL_8;
      }
      v9 = (uint64_t *)v9[1];
    }
    while (v9);
    v10 = v8 + 1;
  }
  else
  {
    v10 = a1 + 1;
  }
LABEL_8:
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, (uint64_t)v8, v10, (uint64_t *)v6);
  return v6;
}

uint64_t _GLOBAL__sub_I_compute_context_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

CoreML::Model *CoreML::Model::Model(CoreML::Model *this)
{
  char *v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  __int128 v7;

  *(_QWORD *)this = &off_24D93F0B8;
  *((_QWORD *)this + 1) = 0;
  v2 = (char *)this + 8;
  *((_QWORD *)this + 2) = 0;
  _ZNSt3__115allocate_sharedB8ne180100IN6CoreML13Specification5ModelENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v7);
  std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)v2, &v7);
  v3 = (std::__shared_weak_count *)*((_QWORD *)&v7 + 1);
  if (*((_QWORD *)&v7 + 1))
  {
    v4 = (unint64_t *)(*((_QWORD *)&v7 + 1) + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  *(_DWORD *)(*((_QWORD *)this + 1) + 24) = 6;
  return this;
}

void sub_2183EF0E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

CoreML::Model *CoreML::Model::Model(CoreML::Model *this, const CoreML::Specification::Model *a2)
{
  uint64_t *v3;
  CoreML::Specification::Model *v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  __int128 v9;

  *(_QWORD *)this = &off_24D93F0B8;
  *((_QWORD *)this + 1) = 0;
  v3 = (uint64_t *)((char *)this + 8);
  *((_QWORD *)this + 2) = 0;
  std::allocate_shared[abi:ne180100]<CoreML::Specification::Model,std::allocator<CoreML::Specification::Model>,CoreML::Specification::Model const&,void>(a2, &v9);
  std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)v3, &v9);
  v5 = (std::__shared_weak_count *)*((_QWORD *)&v9 + 1);
  if (*((_QWORD *)&v9 + 1))
  {
    v6 = (unint64_t *)(*((_QWORD *)&v9 + 1) + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  CoreML::downgradeSpecificationVersion(*v3, v4);
  return this;
}

void sub_2183EF198(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

CoreML::Model *CoreML::Model::Model(CoreML::Model *a1, const std::string *a2)
{
  uint64_t v4;
  CoreML::Specification::ModelDescription *v5;
  std::string **v6;
  std::string *v7;
  std::string **v8;
  uint64_t *v9;

  v4 = *((_QWORD *)CoreML::Model::Model(a1) + 1);
  v5 = *(CoreML::Specification::ModelDescription **)(v4 + 16);
  if (!v5)
  {
    v5 = (CoreML::Specification::ModelDescription *)operator new();
    CoreML::Specification::ModelDescription::ModelDescription(v5);
    *(_QWORD *)(v4 + 16) = v5;
  }
  v6 = (std::string **)*((_QWORD *)v5 + 13);
  if (!v6)
  {
    v6 = (std::string **)operator new();
    CoreML::Specification::Metadata::Metadata((CoreML::Specification::Metadata *)v6);
    *((_QWORD *)v5 + 13) = v6;
  }
  v9 = (uint64_t *)v6[6];
  v8 = v6 + 6;
  v7 = (std::string *)v9;
  if (v9 == &_tc_google::protobuf::internal::fixed_address_empty_string)
    _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v8, (uint64_t)a2);
  else
    std::string::operator=(v7, a2);
  return a1;
}

{
  uint64_t v4;
  CoreML::Specification::ModelDescription *v5;
  std::string **v6;
  std::string *v7;
  std::string **v8;
  uint64_t *v9;

  v4 = *((_QWORD *)CoreML::Model::Model(a1) + 1);
  v5 = *(CoreML::Specification::ModelDescription **)(v4 + 16);
  if (!v5)
  {
    v5 = (CoreML::Specification::ModelDescription *)operator new();
    CoreML::Specification::ModelDescription::ModelDescription(v5);
    *(_QWORD *)(v4 + 16) = v5;
  }
  v6 = (std::string **)*((_QWORD *)v5 + 13);
  if (!v6)
  {
    v6 = (std::string **)operator new();
    CoreML::Specification::Metadata::Metadata((CoreML::Specification::Metadata *)v6);
    *((_QWORD *)v5 + 13) = v6;
  }
  v9 = (uint64_t *)v6[6];
  v8 = v6 + 6;
  v7 = (std::string *)v9;
  if (v9 == &_tc_google::protobuf::internal::fixed_address_empty_string)
    _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v8, (uint64_t)a2);
  else
    std::string::operator=(v7, a2);
  return a1;
}

void sub_2183EF278(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  MEMORY[0x219A19A08](v3, 0x10A1C4012F24C1ELL);
  *v1 = &off_24D93F0B8;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

void CoreML::Model::~Model(CoreML::Model *this)
{
  *(_QWORD *)this = &off_24D93F0B8;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  *(_QWORD *)this = &off_24D93F0B8;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  *(_QWORD *)this = &off_24D93F0B8;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
  JUMPOUT(0x219A19A08);
}

void sub_2183EF3C0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  MEMORY[0x219A19A08](v3, 0x10A1C4012F24C1ELL);
  *v1 = &off_24D93F0B8;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

_QWORD *CoreML::Model::Model(_QWORD *this, const CoreML::Model *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *((_QWORD *)a2 + 1);
  v2 = *((_QWORD *)a2 + 2);
  *this = &off_24D93F0B8;
  this[1] = v3;
  this[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return this;
}

void CoreML::Model::validateGeneric(CoreML::Model *this@<X0>, uint64_t a2@<X8>)
{
  const CoreML::Specification::ModelDescription *v4;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;
  void *v9;
  CoreML *v10;
  std::string *v11;
  __int128 v12;
  std::string *v13;
  __int128 v14;
  _BYTE __p[24];
  uint64_t v16;
  std::string v17;
  std::string v18;
  void *v19;
  void *v20[2];
  uint64_t v21;
  void *v22;
  char v23;
  uint64_t v24;

  v4 = (const CoreML::Specification::ModelDescription *)*((unsigned int *)this + 6);
  if (!(_DWORD)v4)
  {
    std::string::basic_string[abi:ne180100]<0>(&v19, "Model specification version field missing or corrupt.");
    CoreML::Result::Result((_DWORD *)a2, 6);
    if ((SHIBYTE(v20[1]) & 0x80000000) == 0)
      return;
    v9 = v19;
LABEL_30:
    operator delete(v9);
    return;
  }
  if ((int)v4 < 7)
  {
    if (*((_QWORD *)this + 2))
      v10 = (CoreML *)*((_QWORD *)this + 2);
    else
      v10 = (CoreML *)&CoreML::Specification::_ModelDescription_default_instance_;
    CoreML::validateModelDescription(v10, v4, (CoreML::Result *)&v19);
    if (!CoreML::Result::good((CoreML::Result *)&v19))
      goto LABEL_27;
    if (*((_BYTE *)this + 28))
    {
      if (*((int *)this + 6) <= 3)
      {
        std::to_string(&v17, 4);
        v11 = std::string::insert(&v17, 0, "Model specification version for an updatable model must be '");
        v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
        v18.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v12;
        v11->__r_.__value_.__l.__size_ = 0;
        v11->__r_.__value_.__r.__words[2] = 0;
        v11->__r_.__value_.__r.__words[0] = 0;
        v13 = std::string::append(&v18, "' or above.");
        v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
        *(_QWORD *)&__p[16] = *((_QWORD *)&v13->__r_.__value_.__l + 2);
        *(_OWORD *)__p = v14;
        v13->__r_.__value_.__l.__size_ = 0;
        v13->__r_.__value_.__r.__words[2] = 0;
        v13->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v18.__r_.__value_.__l.__data_);
        if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v17.__r_.__value_.__l.__data_);
        CoreML::Result::Result((_DWORD *)a2, 6);
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
        goto LABEL_28;
      }
      CoreML::validateCanModelBeUpdatable(this, (uint64_t)__p);
      v19 = *(void **)__p;
      if (SHIBYTE(v21) < 0)
        operator delete(v20[0]);
      *(_OWORD *)v20 = *(_OWORD *)&__p[8];
      v21 = v16;
    }
    if (CoreML::Result::good((CoreML::Result *)&v19))
    {
      CoreML::validateOptional(this, a2);
    }
    else
    {
LABEL_27:
      *(_QWORD *)a2 = v19;
      *(_OWORD *)(a2 + 8) = *(_OWORD *)v20;
      *(_QWORD *)(a2 + 24) = v21;
      v20[0] = 0;
      v20[1] = 0;
      v21 = 0;
    }
LABEL_28:
    if ((SHIBYTE(v21) & 0x80000000) == 0)
      return;
    v9 = v20[0];
    goto LABEL_30;
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v19);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v20[1], (uint64_t)"The .mlmodel supplied is of version ", 36);
  v6 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)", intended for a newer version of Xcode. This version of Xcode supports model version ", 86);
  v7 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" or earlier.", 12);
  std::stringbuf::str();
  CoreML::Result::Result((_DWORD *)a2, 7);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  v19 = (void *)*MEMORY[0x24BEDB7F0];
  v8 = *(void **)(MEMORY[0x24BEDB7F0] + 72);
  *(void **)((char *)&v20[-1] + *((_QWORD *)v19 - 3)) = *(void **)(MEMORY[0x24BEDB7F0] + 64);
  v20[1] = v8;
  v21 = MEMORY[0x24BEDB848] + 16;
  if (v23 < 0)
    operator delete(v22);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x219A198F4](&v24);
}

void sub_2183EF770(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,int a31,__int16 a32,char a33,char a34,int a35,__int16 a36,char a37,char a38)
{
  if (a14 < 0)
    operator delete(__p);
  if (a38 < 0)
    operator delete(a30);
  _Unwind_Resume(exception_object);
}

void CoreML::Model::validate(CoreML::Model *this@<X0>, uint64_t a2@<X8>)
{
  int v5;
  void *v6;
  char v7;
  uint64_t v8;
  void *__p[2];
  uint64_t v10;

  CoreML::Model::validateGeneric(this, (uint64_t)&v8);
  if (!CoreML::Result::good((CoreML::Result *)&v8))
  {
    *(_QWORD *)a2 = v8;
    *(_OWORD *)(a2 + 8) = *(_OWORD *)__p;
    *(_QWORD *)(a2 + 24) = v10;
    __p[0] = 0;
    __p[1] = 0;
    v10 = 0;
    goto LABEL_8;
  }
  v5 = *((_DWORD *)this + 11);
  if (v5 > 599)
  {
    if (v5 > 899)
    {
      switch(v5)
      {
        case 2000:
          CoreML::validate<(MLModelType)2000>((uint64_t)this, a2);
          break;
        case 2001:
          CoreML::validate<(MLModelType)2001>((uint64_t)this, (_DWORD *)a2);
          break;
        case 2002:
          CoreML::validate<(MLModelType)2002>((uint64_t)this, a2);
          break;
        case 2003:
          CoreML::validate<(MLModelType)2003>((uint64_t)this, a2);
          break;
        case 2004:
          CoreML::validate<(MLModelType)2004>((uint64_t)this, a2);
          break;
        case 2005:
          CoreML::validate<(MLModelType)2005>((uint64_t)this, a2);
          break;
        case 2006:
          CoreML::validate<(MLModelType)2006>((uint64_t)this, a2);
          break;
        default:
          if (v5 != 900)
          {
            if (v5 != 3000)
              goto LABEL_60;
            goto LABEL_30;
          }
          CoreML::validate<(MLModelType)900>((CoreML::Result *)a2);
          break;
      }
    }
    else
    {
      switch(v5)
      {
        case 600:
          CoreML::validate<(MLModelType)600>((uint64_t)this, a2);
          break;
        case 601:
          CoreML::validate<(MLModelType)601>((uint64_t)this, a2);
          break;
        case 602:
          CoreML::validate<(MLModelType)602>((uint64_t)this, a2);
          break;
        case 603:
          CoreML::validate<(MLModelType)603>((uint64_t)this, a2);
          break;
        case 604:
          CoreML::validate<(MLModelType)604>((uint64_t)this, a2);
          break;
        case 606:
          CoreML::validate<(MLModelType)606>((uint64_t)this, a2);
          break;
        case 607:
          CoreML::validate<(MLModelType)607>((uint64_t)this, a2);
          break;
        case 609:
          CoreML::validate<(MLModelType)609>((uint64_t)this, a2);
          break;
        case 610:
          CoreML::validate<(MLModelType)610>((uint64_t)this, a2);
          break;
        default:
          goto LABEL_60;
      }
    }
  }
  else
  {
    if (v5 > 399)
    {
      if (v5 <= 499)
      {
        switch(v5)
        {
          case 400:
            CoreML::validate<(MLModelType)400>((uint64_t)this, a2);
            break;
          case 401:
            CoreML::validate<(MLModelType)401>((uint64_t)this, a2);
            break;
          case 402:
            CoreML::validate<(MLModelType)402>(this, (CoreML::Result *)a2);
            break;
          case 403:
            CoreML::validate<(MLModelType)403>((uint64_t)this, a2);
            break;
          case 404:
            CoreML::validate<(MLModelType)404>((uint64_t)this, a2);
            break;
          default:
            goto LABEL_60;
        }
        goto LABEL_8;
      }
      if (v5 <= 501)
      {
        if (v5 == 500)
          CoreML::validate<(MLModelType)500>((uint64_t)this, a2);
        else
          CoreML::validate<(MLModelType)501>((uint64_t)this, a2);
        goto LABEL_8;
      }
      switch(v5)
      {
        case 502:
LABEL_30:
          CoreML::Result::Result((CoreML::Result *)a2);
          goto LABEL_8;
        case 555:
          CoreML::validate<(MLModelType)555>((uint64_t)this, a2);
          goto LABEL_8;
        case 556:
          CoreML::validate<(MLModelType)556>((uint64_t)this, a2);
          goto LABEL_8;
      }
LABEL_60:
      std::string::basic_string[abi:ne180100]<0>(&v6, "Model did not specify a valid model-parameter type.");
      CoreML::Result::Result((_DWORD *)a2, 12);
      if (v7 < 0)
        operator delete(v6);
      goto LABEL_8;
    }
    if (v5 <= 299)
    {
      switch(v5)
      {
        case 200:
          CoreML::validate<(MLModelType)200>((uint64_t)this, a2);
          goto LABEL_8;
        case 201:
          CoreML::validate<(MLModelType)201>(this, a2);
          goto LABEL_8;
        case 202:
          CoreML::validate<(MLModelType)202>(this, a2);
          goto LABEL_8;
      }
      goto LABEL_60;
    }
    switch(v5)
    {
      case 300:
        CoreML::validate<(MLModelType)300>((uint64_t)this, a2);
        break;
      case 301:
        CoreML::validate<(MLModelType)301>((uint64_t)this, a2);
        break;
      case 302:
        CoreML::validate<(MLModelType)302>(this, (CoreML::Result *)a2);
        break;
      case 303:
        CoreML::validate<(MLModelType)303>((uint64_t)this, a2);
        break;
      case 304:
        CoreML::validate<(MLModelType)304>((uint64_t)this, a2);
        break;
      default:
        goto LABEL_60;
    }
  }
LABEL_8:
  if (SHIBYTE(v10) < 0)
    operator delete(__p[0]);
}

void sub_2183EFBF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

void CoreML::Model::save(uint64_t a1@<X0>, CoreML::Specification::Model *a2@<X1>, uint64_t a3@<X8>)
{
  void *v4;
  _tc_google::protobuf::MessageLite *v7;
  uint64_t v8;
  void *v9[2];
  uint64_t v10;
  void *__p;
  char v12;
  _QWORD v13[2];
  char v14;

  if (*(_DWORD *)((char *)a2 + *(_QWORD *)(*(_QWORD *)a2 - 24) + 32))
  {
    std::string::basic_string[abi:ne180100]<0>(v13, "unable to open file for write");
    CoreML::Result::Result((_DWORD *)a3, 3);
    if ((v14 & 0x80000000) == 0)
      return;
    v4 = (void *)v13[0];
    goto LABEL_12;
  }
  CoreML::downgradeSpecificationVersion(*(_QWORD *)(a1 + 8), a2);
  CoreML::Model::validate(*(CoreML::Model **)(a1 + 8), (uint64_t)&v8);
  if (!CoreML::Result::good((CoreML::Result *)&v8))
  {
    *(_QWORD *)a3 = v8;
    *(_OWORD *)(a3 + 8) = *(_OWORD *)v9;
    *(_QWORD *)(a3 + 24) = v10;
    return;
  }
  v7 = *(_tc_google::protobuf::MessageLite **)(a1 + 8);
  _tc_google::protobuf::io::OstreamOutputStream::OstreamOutputStream(v13, a2, 0xFFFFFFFFLL);
  if ((_tc_google::protobuf::MessageLite::SerializeToZeroCopyStream(v7, (_tc_google::protobuf::io::ZeroCopyOutputStream *)v13) & 1) != 0)
  {
    CoreML::Result::Result((CoreML::Result *)a3);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "unable to serialize object");
    CoreML::Result::Result((_DWORD *)a3, 4);
    if (v12 < 0)
      operator delete(__p);
  }
  _tc_google::protobuf::io::OstreamOutputStream::~OstreamOutputStream((_tc_google::protobuf::io::OstreamOutputStream *)v13);
  if (SHIBYTE(v10) < 0)
  {
    v4 = v9[0];
LABEL_12:
    operator delete(v4);
  }
}

void sub_2183EFD60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0)
    operator delete(__p);
  _tc_google::protobuf::io::OstreamOutputStream::~OstreamOutputStream((_tc_google::protobuf::io::OstreamOutputStream *)&a22);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Model::save@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[20];

  v7[19] = *MEMORY[0x24BDAC8D0];
  std::ofstream::basic_ofstream(&v5);
  CoreML::Model::save(a1, (CoreML::Specification::Model *)&v5, a2);
  v5 = *MEMORY[0x24BEDB7E8];
  *(uint64_t *)((char *)&v5 + *(_QWORD *)(v5 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7E8] + 24);
  MEMORY[0x219A1948C](&v6);
  std::ostream::~ostream();
  return MEMORY[0x219A198F4](v7);
}

void sub_2183EFE70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::ofstream::~ofstream(&a9);
  _Unwind_Resume(a1);
}

CoreML::Result *CoreML::Model::addInput@<X0>(uint64_t a1@<X0>, const std::string *a2@<X1>, const CoreML::Specification::FeatureType **a3@<X2>, CoreML::Result *a4@<X8>)
{
  uint64_t v7;
  CoreML::Specification::ModelDescription *v8;
  CoreML::Specification::FeatureDescription *v9;
  std::string *v10;
  CoreML::Specification::FeatureType *Copy;
  uint64_t v12;

  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(CoreML::Specification::ModelDescription **)(v7 + 16);
  if (!v8)
  {
    v8 = (CoreML::Specification::ModelDescription *)operator new();
    CoreML::Specification::ModelDescription::ModelDescription(v8);
    *(_QWORD *)(v7 + 16) = v8;
  }
  v9 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>::TypeHandler>((uint64_t)v8 + 16);
  v10 = (std::string *)*((_QWORD *)v9 + 2);
  if (v10 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string)
    _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)v9 + 2, (uint64_t)a2);
  else
    std::string::operator=(v10, a2);
  Copy = CoreML::FeatureType::allocateCopy(a3);
  v12 = *((_QWORD *)v9 + 4);
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  *((_QWORD *)v9 + 4) = Copy;
  return CoreML::Result::Result(a4);
}

void sub_2183EFF54(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C40FD9EAC30);
  _Unwind_Resume(a1);
}

CoreML::Result *CoreML::Model::addOutput@<X0>(uint64_t a1@<X0>, const std::string *a2@<X1>, const CoreML::Specification::FeatureType **a3@<X2>, CoreML::Result *a4@<X8>)
{
  uint64_t v7;
  CoreML::Specification::ModelDescription *v8;
  CoreML::Specification::FeatureDescription *v9;
  std::string *v10;
  CoreML::Specification::FeatureType *Copy;
  uint64_t v12;

  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(CoreML::Specification::ModelDescription **)(v7 + 16);
  if (!v8)
  {
    v8 = (CoreML::Specification::ModelDescription *)operator new();
    CoreML::Specification::ModelDescription::ModelDescription(v8);
    *(_QWORD *)(v7 + 16) = v8;
  }
  v9 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>::TypeHandler>((uint64_t)v8 + 40);
  v10 = (std::string *)*((_QWORD *)v9 + 2);
  if (v10 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string)
    _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)v9 + 2, (uint64_t)a2);
  else
    std::string::operator=(v10, a2);
  Copy = CoreML::FeatureType::allocateCopy(a3);
  v12 = *((_QWORD *)v9 + 4);
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  *((_QWORD *)v9 + 4) = Copy;
  return CoreML::Result::Result(a4);
}

void sub_2183F0040(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C40FD9EAC30);
  _Unwind_Resume(a1);
}

CoreML::Result *CoreML::Model::enforceTypeInvariant@<X0>(uint64_t *a1@<X0>, CoreML::FeatureType *a2@<X1>, CoreML::Result *a3@<X8>)
{
  uint64_t *v6;
  uint64_t *v7;

  v6 = (uint64_t *)*a1;
  v7 = (uint64_t *)a1[1];
  while (1)
  {
    if (v6 == v7)
      return (CoreML::Result *)CoreML::Result::featureTypeInvariantError(a1, a2, (uint64_t)a3);
    if (CoreML::FeatureType::operator==((uint64_t *)a2, v6))
      break;
    v6 += 2;
  }
  return CoreML::Result::Result(a3);
}

_QWORD *_ZNSt3__115allocate_sharedB8ne180100IN6CoreML13Specification5ModelENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x48uLL);
  result = _ZNSt3__120__shared_ptr_emplaceIN6CoreML13Specification5ModelENS_9allocatorIS3_EEEC2B8ne180100IJES5_Li0EEES5_DpOT_(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_2183F0114(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *_ZNSt3__120__shared_ptr_emplaceIN6CoreML13Specification5ModelENS_9allocatorIS3_EEEC2B8ne180100IJES5_Li0EEES5_DpOT_(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = &unk_24D91E058;
  a1[1] = 0;
  CoreML::Specification::Model::Model((CoreML::Specification::Model *)(a1 + 3));
  return a1;
}

void sub_2183F0160(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t _GLOBAL__sub_I_Model_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void turi::ml_data_internal::column_metadata::setup(uint64_t a1, int a2, std::string *__str, uint64_t *a4, uint64_t a5)
{
  unsigned int type;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int *v31;
  file_logger *v32;
  file_logger *started;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  file_logger *v41;
  pthread_key_t *v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  file_logger *v49;
  _QWORD *exception;
  std::string __p;
  std::string v52;
  unsigned __int8 **v53;
  unsigned __int8 *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t __src;
  _BYTE v58[16];
  uint64_t v59;

  v59 = *MEMORY[0x24BDAC8D0];
  std::string::operator=((std::string *)a1, __str);
  type = turi::sarray<turi::flexible_type>::get_type(*a4);
  *(_BYTE *)(a1 + 28) = type;
  *(_DWORD *)(a1 + 24) = turi::ml_data_internal::choose_column_mode((uint64_t)__str, type, a5);
  v10 = operator new();
  if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v52, __str->__r_.__value_.__l.__data_, __str->__r_.__value_.__l.__size_);
  else
    v52 = *__str;
  turi::ml_data_internal::column_indexer::column_indexer(v10, &v52, *(unsigned int *)(a1 + 24), *(char *)(a1 + 28));
  std::shared_ptr<turi::ml_data_internal::column_indexer>::reset[abi:ne180100]<turi::ml_data_internal::column_indexer,void>((_QWORD *)(a1 + 32), v10);
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v52.__r_.__value_.__l.__data_);
  v11 = operator new();
  if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, __str->__r_.__value_.__l.__data_, __str->__r_.__value_.__l.__size_);
  else
    __p = *__str;
  turi::ml_data_internal::column_statistics::column_statistics(v11, &__p, *(unsigned int *)(a1 + 24), *(char *)(a1 + 28));
  std::shared_ptr<turi::ml_data_internal::column_statistics>::reset[abi:ne180100]<turi::ml_data_internal::column_statistics,void>((_QWORD *)(a1 + 48), v11);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  switch(*(_DWORD *)(a1 + 24))
  {
    case 0:
    case 1:
      *(_QWORD *)(a1 + 72) = 1;
      return;
    case 2:
      v18 = *a4;
      if (*(_BYTE *)(*a4 + 248) && (v19 = *(uint64_t **)(v18 + 80), (v20 = *(_QWORD *)(v18 + 88) - (_QWORD)v19) != 0))
      {
        v21 = 0;
        v22 = v20 >> 3;
        if (v22 <= 1)
          v22 = 1;
        do
        {
          v23 = *v19++;
          v21 += v23;
          --v22;
        }
        while (v22);
      }
      else
      {
        v21 = 0;
      }
      turi::sarray<turi::flexible_type>::get_reader(v18, (uint64_t *)&v53);
      v27 = 0;
      v54 = 0;
      v55 = 0;
      v56 = 0;
      *(_QWORD *)(a1 + 72) = -1;
      do
      {
        if (v21 == v27)
        {
          v30 = *(_QWORD *)(a1 + 72);
          goto LABEL_59;
        }
        v28 = v27 + 1;
        (*((void (**)(unsigned __int8 **))*v53 + 6))(v53);
        v29 = v54[12];
        v27 = v28;
      }
      while (v29 == 7);
      if (v29 == 9)
      {
        v40 = *(uint64_t **)(*(_QWORD *)v54 + 24);
        if (*(_QWORD *)(*(_QWORD *)v54 + 32) - (_QWORD)v40 != 8)
          turi::ml_data_internal::column_metadata::setup(BOOL,std::string const&,std::shared_ptr<turi::sarray<turi::flexible_type>> const&,std::map<std::string,turi::ml_column_mode> const&)::$_0::operator()();
        v30 = *v40;
      }
      else
      {
        if (v29 != 3)
          turi::ml_data_internal::column_metadata::setup(BOOL,std::string const&,std::shared_ptr<turi::sarray<turi::flexible_type>> const&,std::map<std::string,turi::ml_column_mode> const&)::$_1::operator()();
        v30 = (uint64_t)(*(_QWORD *)(*(_QWORD *)v54 + 16) - *(_QWORD *)(*(_QWORD *)v54 + 8)) >> 3;
      }
      *(_QWORD *)(a1 + 72) = v30;
LABEL_59:
      if (v30 != -1)
        goto LABEL_63;
      if (*((int *)global_logger() + 169) <= 5)
      {
        v41 = log_stream_dispatch<true>::exec((cppipc *)5, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/ml/ml_data/data_storage/internal_metadata.cpp", "setup", 81, 1);
        v42 = file_logger::operator<<((pthread_key_t *)v41, "Column with only missing values encountered.");
        file_logger::operator<<((uint64_t)v42, (void (*)(_BYTE *))std::endl[abi:ne180100]<char,std::char_traits<char>>);
      }
      goto LABEL_62;
    case 3:
    case 4:
    case 6:
      return;
    case 5:
      *(_QWORD *)(a1 + 72) = 0;
      return;
    case 7:
      v12 = *a4;
      if (*(_BYTE *)(*a4 + 248) && (v13 = *(uint64_t **)(v12 + 80), (v14 = *(_QWORD *)(v12 + 88) - (_QWORD)v13) != 0))
      {
        v15 = 0;
        v16 = v14 >> 3;
        if (v16 <= 1)
          v16 = 1;
        do
        {
          v17 = *v13++;
          v15 += v17;
          --v16;
        }
        while (v16);
      }
      else
      {
        v15 = 0;
      }
      turi::sarray<turi::flexible_type>::get_reader(v12, (uint64_t *)&v53);
      v24 = 0;
      v54 = 0;
      v55 = 0;
      v56 = 0;
      *(_QWORD *)(a1 + 88) = *(_QWORD *)(a1 + 80);
      break;
    default:
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v54);
      v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v54, (uint64_t)"Check failed (", 14);
      v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/ml/ml_data/ml_data_column_modes.hpp", 101);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)":", 1);
      v46 = (_QWORD *)std::ostream::operator<<();
      v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)"): ", 3);
      v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)"false", 5);
      std::endl[abi:ne180100]<char,std::char_traits<char>>(v48);
      if (*((int *)global_logger() + 169) <= 6)
      {
        v49 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/ml/ml_data/ml_data_column_modes.hpp", "operator()", 77, 1);
        std::stringbuf::str();
        file_logger::operator<<<std::string>((uint64_t)v49, (uint64_t)&__src);
        if ((v58[15] & 0x80000000) != 0)
          operator delete((void *)__src);
      }
      __print_back_trace();
      v53 = &v54;
      turi::mode_has_fixed_size(turi::ml_column_mode)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
  }
  while (v15 != v24)
  {
    v25 = v24 + 1;
    (*((void (**)(unsigned __int8 **))*v53 + 6))(v53);
    v26 = v54[12];
    v24 = v25;
    if (v26 != 7)
    {
      if (v26 == 9)
      {
        if (a1 + 80 != *(_QWORD *)v54 + 24)
          std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((char *)(a1 + 80), *(char **)(*(_QWORD *)v54 + 24), *(_QWORD *)(*(_QWORD *)v54 + 32), (uint64_t)(*(_QWORD *)(*(_QWORD *)v54 + 32) - *(_QWORD *)(*(_QWORD *)v54 + 24)) >> 3);
      }
      else
      {
        if (v26 != 3)
          turi::ml_data_internal::column_metadata::setup(BOOL,std::string const&,std::shared_ptr<turi::sarray<turi::flexible_type>> const&,std::map<std::string,turi::ml_column_mode> const&)::$_2::operator()();
        __src = (uint64_t)(*(_QWORD *)(*(_QWORD *)v54 + 16) - *(_QWORD *)(*(_QWORD *)v54 + 8)) >> 3;
        std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((char *)(a1 + 80), (char *)&__src, (uint64_t)v58, 1uLL);
      }
      *(_QWORD *)(a1 + 72) = 1;
      v36 = *(uint64_t **)(a1 + 80);
      v37 = *(uint64_t **)(a1 + 88);
      if (v36 != v37)
      {
        v38 = 1;
        do
        {
          v39 = *v36++;
          v38 *= v39;
          *(_QWORD *)(a1 + 72) = v38;
        }
        while (v36 != v37);
      }
      goto LABEL_63;
    }
  }
  v31 = (int *)global_logger();
  if (v31[169] <= 5)
  {
    if (cppipc::must_cancel((cppipc *)v31))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v32 = (file_logger *)global_logger();
    started = file_logger::start_stream(v32, 5, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/ml/ml_data/data_storage/internal_metadata.cpp", "setup", 122, 1);
    v34 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v34 && *((_BYTE *)v34 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34 + 2, (uint64_t)"Column with only missing values encountered.", 44);
    v35 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v35)
    {
      if (*((_BYTE *)v35 + 280))
      {
        std::endl[abi:ne180100]<char,std::char_traits<char>>(v35 + 2);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a1 + 80);
LABEL_62:
  *(_QWORD *)(a1 + 72) = 0;
LABEL_63:
  __src = (uint64_t)&v54;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__src);
  v43 = (uint64_t)v53;
  v53 = 0;
  if (v43)
    (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
}

void sub_2183F07CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23)
{
  uint64_t v23;

  if (*(char *)(v23 - 57) < 0)
    operator delete(*(void **)(v23 - 80));
  std::ostringstream::~ostringstream((uint64_t)&a23);
  _Unwind_Resume(a1);
}

void std::shared_ptr<turi::ml_data_internal::column_indexer>::reset[abi:ne180100]<turi::ml_data_internal::column_indexer,void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  __int128 v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int128 v7;

  std::shared_ptr<turi::ml_data_internal::column_indexer>::shared_ptr[abi:ne180100]<turi::ml_data_internal::column_indexer,void>(&v7, a2);
  v3 = (std::__shared_weak_count *)a1[1];
  v4 = v7;
  *(_QWORD *)&v7 = *a1;
  *((_QWORD *)&v7 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void std::shared_ptr<turi::ml_data_internal::column_statistics>::reset[abi:ne180100]<turi::ml_data_internal::column_statistics,void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  __int128 v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int128 v7;

  std::shared_ptr<turi::ml_data_internal::column_statistics>::shared_ptr[abi:ne180100]<turi::ml_data_internal::column_statistics,void>(&v7, a2);
  v3 = (std::__shared_weak_count *)a1[1];
  v4 = v7;
  *(_QWORD *)&v7 = *a1;
  *((_QWORD *)&v7 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

uint64_t turi::ml_data_internal::column_metadata::set_training_index_size(uint64_t this)
{
  unsigned int v1;
  BOOL v2;
  int v3;
  uint64_t v5;

  v1 = *(_DWORD *)(this + 24);
  v2 = v1 > 6;
  v3 = (1 << v1) & 0x5A;
  if (v2 || v3 == 0)
    v5 = *(_QWORD *)(this + 72);
  else
    v5 = *(_QWORD *)(*(_QWORD *)(this + 32) + 104);
  *(_QWORD *)(this + 64) = v5;
  return this;
}

uint64_t turi::ml_data_internal::column_metadata::set_training_index_offset(uint64_t this, uint64_t a2)
{
  *(_QWORD *)(this + 104) = a2;
  return this;
}

void turi::ml_data_internal::column_metadata::save(turi::ml_data_internal::column_metadata *this, turi::oarchive *a2)
{
  unint64_t v4;
  const void **v5[3];
  uint64_t v6;
  _BYTE v7[63];
  _BYTE v8[63];
  _BYTE v9[63];
  _BYTE v10[63];
  _BYTE v11[63];
  _BYTE v12[63];
  _BYTE v13[80];
  unsigned int v14[2];
  _BYTE v15[13];
  const void *v16[13];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE v24[13];
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v6 = 3;
  turi::flexible_type_converter<unsigned long>::set(&v6, (uint64_t)v13);
  *(_QWORD *)&v15[5] = *(_QWORD *)&v13[5];
  *(_QWORD *)v15 = *(_QWORD *)v13;
  v15[12] = v13[12];
  v14[0] = 0;
  std::pair<std::string const,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::pair[abi:ne180100]<char const(&)[16],boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,0>((uint64_t)v16, "version", v14);
  turi::flexible_type_converter<std::string>::set((const std::string *)this, (uint64_t)v12);
  *(_QWORD *)&v13[13] = *(_QWORD *)&v12[5];
  *(_QWORD *)&v13[8] = *(_QWORD *)v12;
  v13[20] = v12[12];
  *(_DWORD *)v13 = 0;
  std::pair<std::string const,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::pair[abi:ne180100]<char const(&)[16],boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,0>((uint64_t)&v17, "name", (unsigned int *)v13);
  turi::flexible_type_converter<turi::ml_column_mode>::set((int *)this + 6, (uint64_t)v11);
  *(_QWORD *)&v12[13] = *(_QWORD *)&v11[5];
  *(_QWORD *)&v12[8] = *(_QWORD *)v11;
  v12[20] = v11[12];
  *(_DWORD *)v12 = 0;
  std::pair<std::string const,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::pair[abi:ne180100]<char const(&)[16],boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,0>((uint64_t)&v18, "mode", (unsigned int *)v12);
  turi::flexible_type_converter<unsigned long>::set((uint64_t *)this + 8, (uint64_t)v10);
  *(_QWORD *)&v11[13] = *(_QWORD *)&v10[5];
  *(_QWORD *)&v11[8] = *(_QWORD *)v10;
  v11[20] = v10[12];
  *(_DWORD *)v11 = 0;
  std::pair<std::string const,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::pair[abi:ne180100]<char const(&)[16],boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,0>((uint64_t)&v19, "index_size_at_train_time", (unsigned int *)v11);
  turi::flexible_type_converter<turi::flex_type_enum>::set((char *)this + 28, (uint64_t)v9);
  *(_QWORD *)&v10[13] = *(_QWORD *)&v9[5];
  *(_QWORD *)&v10[8] = *(_QWORD *)v9;
  v10[20] = v9[12];
  *(_DWORD *)v10 = 0;
  std::pair<std::string const,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::pair[abi:ne180100]<char const(&)[16],boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,0>((uint64_t)&v20, "original_column_type", (unsigned int *)v10);
  turi::flexible_type_converter<unsigned long>::set((uint64_t *)this + 9, (uint64_t)v8);
  *(_QWORD *)&v9[13] = *(_QWORD *)&v8[5];
  *(_QWORD *)&v9[8] = *(_QWORD *)v8;
  v9[20] = v8[12];
  *(_DWORD *)v9 = 0;
  std::pair<std::string const,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::pair[abi:ne180100]<char const(&)[16],boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,0>((uint64_t)&v21, "column_data_size_if_fixed", (unsigned int *)v9);
  turi::flexible_type_converter<std::vector<unsigned long>>::set((uint64_t **)this + 10, (uint64_t)v7);
  *(_QWORD *)&v8[13] = *(_QWORD *)&v7[5];
  *(_QWORD *)&v8[8] = *(_QWORD *)v7;
  v8[20] = v7[12];
  *(_DWORD *)v8 = 0;
  std::pair<std::string const,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::pair[abi:ne180100]<char const(&)[16],boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,0>((uint64_t)&v22, "nd_array_size", (unsigned int *)v8);
  turi::flexible_type_converter<unsigned long>::set((uint64_t *)this + 13, (uint64_t)v24);
  *(_QWORD *)&v7[13] = *(_QWORD *)&v24[5];
  *(_QWORD *)&v7[8] = *(_QWORD *)v24;
  v7[20] = v24[12];
  *(_DWORD *)v7 = 0;
  std::pair<std::string const,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::pair[abi:ne180100]<char const(&)[16],boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,0>((uint64_t)&v23, "global_index_offset_at_train_time", (unsigned int *)v7);
  std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::map[abi:ne180100]((uint64_t)v5, v16, 8);
  v4 = 832;
  do
  {
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content(&v14[v4 / 4]);
    if ((char)v13[v4 + 79] < 0)
      operator delete(*(void **)&v13[v4 + 56]);
    v4 -= 104;
  }
  while (v4);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)v7);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)v8);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)v9);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)v10);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)v11);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)v12);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)v13);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content(v14);
  turi::variant_deep_save<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(v5, (uint64_t)a2);
  turi::archive_detail::serialize_impl<turi::oarchive,std::shared_ptr<turi::ml_data_internal::column_indexer>,false,void>::exec((uint64_t)a2, (turi::ml_data_internal::column_indexer **)this + 4);
  turi::archive_detail::serialize_impl<turi::oarchive,std::shared_ptr<turi::ml_data_internal::column_statistics>,false,void>::exec((uint64_t)a2, (const void ***)this + 6);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)v5, (char *)v5[1]);
}

void sub_2183F0D48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unsigned int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,unsigned int a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,unsigned int a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,unsigned int a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,unsigned int a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  unsigned int a64;
  uint64_t v64;
  uint64_t i;

  for (i = 728; i != -104; i -= 104)
    std::pair<std::string const,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::~pair(v64 + i);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content(&a14);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content(&a24);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content(&a34);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content(&a44);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content(&a54);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content(&a64);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&STACK[0x208]);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&STACK[0x258]);
  _Unwind_Resume(a1);
}

void turi::ml_data_internal::column_metadata::load(turi::ml_data_internal::column_metadata *this, turi::iarchive *a2)
{
  uint64_t v4;
  uint64_t v5;
  int *v6;
  unint64_t v7;
  int *v8;
  int *v9;
  int *v10;
  int *v11;
  int *v12;
  int *v13;
  int *v14;
  void *v15;
  void *v16[2];
  char v17;
  std::string __p;
  char **v19;
  char *v20[2];

  v20[0] = 0;
  v20[1] = 0;
  v19 = v20;
  turi::variant_deep_load<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>((uint64_t)&v19, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, "version");
  v4 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)&v19, (const void **)&__p.__r_.__value_.__l.__data_);
  v5 = v4;
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v4)
      goto LABEL_3;
LABEL_6:
    v7 = 1;
    goto LABEL_7;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (!v5)
    goto LABEL_6;
LABEL_3:
  std::string::basic_string[abi:ne180100]<0>(&__p, "version");
  v6 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)&v19, (const void **)&__p.__r_.__value_.__l.__data_);
  v7 = turi::variant_converter<unsigned long,void>::get((uint64_t)v16, v6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_7:
  std::string::basic_string[abi:ne180100]<0>(v16, "name");
  v8 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)&v19, (const void **)v16);
  turi::variant_converter<std::string,void>::get(v8, &__p);
  if (*((char *)this + 23) < 0)
    operator delete(*(void **)this);
  *(std::string *)this = __p;
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
  __p.__r_.__value_.__s.__data_[0] = 0;
  if (v17 < 0)
    operator delete(v16[0]);
  std::string::basic_string[abi:ne180100]<0>(&__p, "mode");
  v9 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)&v19, (const void **)&__p.__r_.__value_.__l.__data_);
  *((_DWORD *)this + 6) = turi::variant_converter<turi::ml_column_mode,void>::get((uint64_t)v16, v9);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "original_column_type");
  v10 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)&v19, (const void **)&__p.__r_.__value_.__l.__data_);
  *((_BYTE *)this + 28) = turi::variant_converter<turi::flex_type_enum,void>::get((uint64_t)v16, v10);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "index_size_at_train_time");
  v11 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)&v19, (const void **)&__p.__r_.__value_.__l.__data_);
  *((_QWORD *)this + 8) = turi::variant_converter<unsigned long,void>::get((uint64_t)v16, v11);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "column_data_size_if_fixed");
  v12 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)&v19, (const void **)&__p.__r_.__value_.__l.__data_);
  *((_QWORD *)this + 9) = turi::variant_converter<unsigned long,void>::get((uint64_t)v16, v12);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v7 < 2)
  {
    *((_QWORD *)this + 13) = -1;
LABEL_28:
    *((_QWORD *)this + 11) = *((_QWORD *)this + 10);
    goto LABEL_29;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "global_index_offset_at_train_time");
  v13 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)&v19, (const void **)&__p.__r_.__value_.__l.__data_);
  *((_QWORD *)this + 13) = turi::variant_converter<unsigned long,void>::get((uint64_t)v16, v13);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v7 < 3)
    goto LABEL_28;
  std::string::basic_string[abi:ne180100]<0>(v16, "nd_array_size");
  v14 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)&v19, (const void **)v16);
  turi::variant_converter<std::vector<unsigned long>,void>::get(v14, &__p);
  v15 = (void *)*((_QWORD *)this + 10);
  if (v15)
  {
    *((_QWORD *)this + 11) = v15;
    operator delete(v15);
    *((_QWORD *)this + 10) = 0;
    *((_QWORD *)this + 11) = 0;
    *((_QWORD *)this + 12) = 0;
  }
  *(std::string *)((char *)this + 80) = __p;
  memset(&__p, 0, sizeof(__p));
  if (v17 < 0)
    operator delete(v16[0]);
LABEL_29:
  turi::archive_detail::deserialize_impl<turi::iarchive,std::shared_ptr<turi::ml_data_internal::column_indexer>,false,void>::exec(a2, (std::string **)this + 4);
  turi::archive_detail::deserialize_impl<turi::iarchive,std::shared_ptr<turi::ml_data_internal::column_statistics>,false,void>::exec(a2, (std::string **)this + 6);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v19, v20[0]);
}

void sub_2183F118C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23,char *a24)
{
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&a23, a24);
  _Unwind_Resume(a1);
}

uint64_t turi::ml_data_internal::row_metadata::setup(unsigned __int8 *a1, uint64_t **a2, unsigned int a3)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v5 = *a2;
  v6 = a2[1];
  if (v6 == v5)
  {
    *a1 = 0;
    v16 = *((_QWORD *)a1 + 7);
    for (result = *((_QWORD *)a1 + 8);
          result != v16;
    *((_QWORD *)a1 + 8) = v16;
    *(_WORD *)(a1 + 1) = 256;
    *((_QWORD *)a1 + 1) = 0;
    *((_QWORD *)a1 + 5) = 0;
    *((_QWORD *)a1 + 6) = 0;
  }
  else
  {
    *a1 = a3;
    result = (uint64_t)(a1 + 56);
    if (a1 + 56 != (unsigned __int8 *)a2)
    {
      result = std::vector<std::shared_ptr<turi::fileio::file_ownership_handle>>::__assign_with_size[abi:ne180100]<std::shared_ptr<turi::fileio::file_ownership_handle>*,std::shared_ptr<turi::fileio::file_ownership_handle>*>(result, v5, v6, ((char *)v6 - (char *)v5) >> 4);
      a3 = *a1;
    }
    v9 = *((_QWORD *)a1 + 7);
    v10 = *((_QWORD *)a1 + 8);
    v11 = (v10 - v9) >> 4;
    *((_QWORD *)a1 + 5) = v11 - a3;
    *((_QWORD *)a1 + 6) = v11;
    if (a3 && (v12 = *(_DWORD *)(*(_QWORD *)(v10 - 16) + 24), v12 <= 6))
      v13 = (0x5Au >> v12) & 1;
    else
      LOBYTE(v13) = 0;
    a1[1] = v13;
    *((_QWORD *)a1 + 1) = 0;
    a1[2] = 1;
    if (v10 != v9)
    {
      v14 = 0;
      if (v11 <= 1)
        v11 = 1;
      while (1)
      {
        v15 = *(_QWORD *)(*(_QWORD *)v9 + 72);
        if (v15 == -1)
          break;
        v14 += v15;
        *((_QWORD *)a1 + 1) = v14;
        v9 += 16;
        if (!--v11)
          return result;
      }
      a1[2] = 0;
      *((_QWORD *)a1 + 1) = 0;
    }
  }
  return result;
}

void sub_2183F14B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<turi::ml_data_internal::column_indexer>::shared_ptr[abi:ne180100]<turi::ml_data_internal::column_indexer,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_24D93F0F8;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_2183F15AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  a10 = 0;
  if (v10)
    std::default_delete<turi::ml_data_internal::column_indexer>::operator()[abi:ne180100]((uint64_t)&a10, v10);
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_pointer<turi::ml_data_internal::column_indexer *,std::shared_ptr<turi::ml_data_internal::column_indexer>::__shared_ptr_default_delete<turi::ml_data_internal::column_indexer,turi::ml_data_internal::column_indexer>,std::allocator<turi::ml_data_internal::column_indexer>>::__on_zero_shared(uint64_t a1)
{
  return std::default_delete<turi::ml_data_internal::column_indexer>::operator()[abi:ne180100](a1 + 24, *(_QWORD *)(a1 + 24));
}

uint64_t std::__shared_ptr_pointer<turi::ml_data_internal::column_indexer *,std::shared_ptr<turi::ml_data_internal::column_indexer>::__shared_ptr_default_delete<turi::ml_data_internal::column_indexer,turi::ml_data_internal::column_indexer>,std::allocator<turi::ml_data_internal::column_indexer>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::default_delete<turi::ml_data_internal::column_indexer>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t result;
  void **v4;

  if (a2)
  {
    turi::mutex::~mutex((pthread_mutex_t *)(a2 + 112));
    v4 = (void **)(a2 + 80);
    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v4);
    v4 = (void **)(a2 + 56);
    std::vector<std::vector<std::pair<unsigned long,turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v4);
    v4 = (void **)(a2 + 32);
    std::vector<std::pair<turi::simple_spinlock,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>>>::__destroy_vector::operator()[abi:ne180100](&v4);
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    return MEMORY[0x219A19A08](a2, 0x1032C406B2B9BBDLL);
  }
  return result;
}

_QWORD *std::shared_ptr<turi::ml_data_internal::column_statistics>::shared_ptr[abi:ne180100]<turi::ml_data_internal::column_statistics,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_24D93F170;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_2183F1700(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<turi::ml_data_internal::column_statistics>::reset[abi:ne180100]((turi::ml_data_internal::column_statistics **)va, 0);
  _Unwind_Resume(a1);
}

turi::ml_data_internal::column_statistics *std::__shared_ptr_pointer<turi::ml_data_internal::column_statistics *,std::shared_ptr<turi::ml_data_internal::column_statistics>::__shared_ptr_default_delete<turi::ml_data_internal::column_statistics,turi::ml_data_internal::column_statistics>,std::allocator<turi::ml_data_internal::column_statistics>>::__on_zero_shared(uint64_t a1)
{
  turi::ml_data_internal::column_statistics *result;

  result = *(turi::ml_data_internal::column_statistics **)(a1 + 24);
  if (result)
  {
    turi::ml_data_internal::column_statistics::~column_statistics(result);
    JUMPOUT(0x219A19A08);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<turi::ml_data_internal::column_statistics *,std::shared_ptr<turi::ml_data_internal::column_statistics>::__shared_ptr_default_delete<turi::ml_data_internal::column_statistics,turi::ml_data_internal::column_statistics>,std::allocator<turi::ml_data_internal::column_statistics>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void turi::ml_data_internal::column_statistics::~column_statistics(turi::ml_data_internal::column_statistics *this)
{
  void *v2;
  void *v3;
  uint64_t i;
  void *v5;
  void *v6;
  void *v7;
  void **v8;

  std::mutex::~mutex((std::mutex *)((char *)this + 296));
  v2 = (void *)*((_QWORD *)this + 32);
  if (v2)
  {
    *((_QWORD *)this + 33) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 29);
  if (v3)
  {
    *((_QWORD *)this + 30) = v3;
    operator delete(v3);
  }
  for (i = 231; i != 167; --i)
    turi::simple_spinlock::~simple_spinlock((turi::ml_data_internal::column_statistics *)((char *)this + i));
  v8 = (void **)((char *)this + 144);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v8);
  v8 = (void **)((char *)this + 120);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v8);
  v5 = (void *)*((_QWORD *)this + 12);
  if (v5)
  {
    *((_QWORD *)this + 13) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 7);
  if (v6)
  {
    *((_QWORD *)this + 8) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 4);
  if (v7)
  {
    *((_QWORD *)this + 5) = v7;
    operator delete(v7);
  }
  if (*((char *)this + 23) < 0)
    operator delete(*(void **)this);
}

turi::ml_data_internal::column_statistics *std::unique_ptr<turi::ml_data_internal::column_statistics>::reset[abi:ne180100](turi::ml_data_internal::column_statistics **a1, turi::ml_data_internal::column_statistics *a2)
{
  turi::ml_data_internal::column_statistics *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    turi::ml_data_internal::column_statistics::~column_statistics(result);
    JUMPOUT(0x219A19A08);
  }
  return result;
}

uint64_t turi::flexible_type_converter<turi::ml_column_mode>::set@<X0>(int *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 12) = 0;
  return turi::flexible_type_internals::ft_converter<13>::set<turi::ml_column_mode>(a2, a1);
}

void sub_2183F18C0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  char v3;
  char v4;
  char v5;
  char v6;
  char v7;

  switch(*(_BYTE *)(v1 + 12))
  {
    case 2:
      turi::sarray_iterator<turi::flexible_type>::sarray_iterator((unint64_t **)v1);
      if ((v3 & 1) != 0)
        break;
      goto LABEL_11;
    case 3:
      turi::sarray_iterator<turi::flexible_type>::sarray_iterator((unint64_t **)v1);
      if ((v4 & 1) != 0)
        break;
      goto LABEL_11;
    case 4:
      turi::flexible_type::flexible_type<double>((unint64_t **)v1);
      if ((v5 & 1) != 0)
        break;
      goto LABEL_11;
    case 5:
      turi::flexible_type::flexible_type<double>((unint64_t **)v1);
      if ((v6 & 1) != 0)
        break;
      goto LABEL_11;
    case 8:
      turi::sarray_iterator<turi::flexible_type>::sarray_iterator((unint64_t **)v1);
      if ((v7 & 1) == 0)
        goto LABEL_11;
      break;
    case 9:
      if ((turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((unint64_t **)v1) & 1) != 0)
        break;
LABEL_11:
      *(_QWORD *)v1 = 0;
      break;
    default:
      break;
  }
  *(_QWORD *)v1 = 0;
  *(_DWORD *)(v1 + 8) = 0;
  *(_BYTE *)(v1 + 12) = 0;
  _Unwind_Resume(exception_object);
}

uint64_t turi::flexible_type_internals::ft_converter<13>::set<turi::ml_column_mode>(uint64_t result, int *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  void *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t *v25;
  unsigned int v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t *v30;
  void *v31;
  void *v32;
  void **v33;

  v2 = result;
  v3 = *a2;
  switch(*(_BYTE *)(result + 12))
  {
    case 2:
      v4 = *(unint64_t **)result;
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        v7 = *(unint64_t **)result;
        if (*(_QWORD *)result)
        {
          if (*((char *)v7 + 31) < 0)
            operator delete((void *)v7[1]);
          v8 = v7;
          v9 = 0x1012C404EF22A49;
          goto LABEL_42;
        }
      }
      break;
    case 3:
      v10 = *(unint64_t **)result;
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        v13 = *(unint64_t **)result;
        if (*(_QWORD *)result)
        {
          v14 = (void *)v13[1];
          if (v14)
          {
            v13[2] = (unint64_t)v14;
            operator delete(v14);
          }
          v8 = v13;
          v9 = 0x1080C409938AC02;
          goto LABEL_42;
        }
      }
      break;
    case 4:
      v15 = *(unint64_t **)result;
      do
      {
        v16 = __ldaxr(v15);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, v15));
      if (!v17)
      {
        v18 = *(unint64_t **)result;
        if (*(_QWORD *)result)
        {
          v33 = (void **)(v18 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v33);
          goto LABEL_26;
        }
      }
      break;
    case 5:
      v19 = *(unint64_t **)result;
      do
      {
        v20 = __ldaxr(v19);
        v21 = v20 - 1;
      }
      while (__stlxr(v21, v19));
      if (!v21)
      {
        v18 = *(unint64_t **)result;
        if (*(_QWORD *)result)
        {
          v33 = (void **)(v18 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v33);
LABEL_26:
          v8 = v18;
          v9 = 0x1020C405E66F15BLL;
          goto LABEL_42;
        }
      }
      break;
    case 8:
      v22 = *(unint64_t **)result;
      do
      {
        v23 = __ldaxr(v22);
        v24 = v23 - 1;
      }
      while (__stlxr(v24, v22));
      if (!v24)
      {
        v25 = *(unint64_t **)result;
        if (*(_QWORD *)result)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)v25 + 2);
          v8 = v25;
          v26 = -235920773;
          goto LABEL_41;
        }
      }
      break;
    case 9:
      v27 = *(unint64_t **)result;
      do
      {
        v28 = __ldaxr(v27);
        v29 = v28 - 1;
      }
      while (__stlxr(v29, v27));
      if (!v29)
      {
        v30 = *(unint64_t **)result;
        if (*(_QWORD *)result)
        {
          v31 = (void *)v30[6];
          if (v31)
          {
            v30[7] = (unint64_t)v31;
            operator delete(v31);
          }
          v32 = (void *)v30[3];
          if (v32)
          {
            v30[4] = (unint64_t)v32;
            operator delete(v32);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v30 + 1));
          v8 = v30;
          v26 = 2071181815;
LABEL_41:
          v9 = v26 | 0x1030C4000000000;
LABEL_42:
          result = MEMORY[0x219A19A08](v8, v9);
        }
      }
      break;
    default:
      break;
  }
  *(_DWORD *)(v2 + 8) = 0;
  *(_BYTE *)(v2 + 12) = 0;
  *(_QWORD *)v2 = v3;
  return result;
}

uint64_t turi::flexible_type_converter<turi::flex_type_enum>::set@<X0>(char *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 12) = 0;
  return turi::flexible_type_internals::ft_converter<13>::set<turi::flex_type_enum>(a2, a1);
}

void sub_2183F1B98(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  char v3;
  char v4;
  char v5;
  char v6;
  char v7;

  switch(*(_BYTE *)(v1 + 12))
  {
    case 2:
      turi::sarray_iterator<turi::flexible_type>::sarray_iterator((unint64_t **)v1);
      if ((v3 & 1) != 0)
        break;
      goto LABEL_11;
    case 3:
      turi::sarray_iterator<turi::flexible_type>::sarray_iterator((unint64_t **)v1);
      if ((v4 & 1) != 0)
        break;
      goto LABEL_11;
    case 4:
      turi::flexible_type::flexible_type<double>((unint64_t **)v1);
      if ((v5 & 1) != 0)
        break;
      goto LABEL_11;
    case 5:
      turi::flexible_type::flexible_type<double>((unint64_t **)v1);
      if ((v6 & 1) != 0)
        break;
      goto LABEL_11;
    case 8:
      turi::sarray_iterator<turi::flexible_type>::sarray_iterator((unint64_t **)v1);
      if ((v7 & 1) == 0)
        goto LABEL_11;
      break;
    case 9:
      if ((turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((unint64_t **)v1) & 1) != 0)
        break;
LABEL_11:
      *(_QWORD *)v1 = 0;
      break;
    default:
      break;
  }
  *(_QWORD *)v1 = 0;
  *(_DWORD *)(v1 + 8) = 0;
  *(_BYTE *)(v1 + 12) = 0;
  _Unwind_Resume(exception_object);
}

uint64_t turi::flexible_type_internals::ft_converter<13>::set<turi::flex_type_enum>(uint64_t result, char *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  void *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t *v25;
  unsigned int v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t *v30;
  void *v31;
  void *v32;
  void **v33;

  v2 = result;
  v3 = *a2;
  switch(*(_BYTE *)(result + 12))
  {
    case 2:
      v4 = *(unint64_t **)result;
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        v7 = *(unint64_t **)result;
        if (*(_QWORD *)result)
        {
          if (*((char *)v7 + 31) < 0)
            operator delete((void *)v7[1]);
          v8 = v7;
          v9 = 0x1012C404EF22A49;
          goto LABEL_42;
        }
      }
      break;
    case 3:
      v10 = *(unint64_t **)result;
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        v13 = *(unint64_t **)result;
        if (*(_QWORD *)result)
        {
          v14 = (void *)v13[1];
          if (v14)
          {
            v13[2] = (unint64_t)v14;
            operator delete(v14);
          }
          v8 = v13;
          v9 = 0x1080C409938AC02;
          goto LABEL_42;
        }
      }
      break;
    case 4:
      v15 = *(unint64_t **)result;
      do
      {
        v16 = __ldaxr(v15);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, v15));
      if (!v17)
      {
        v18 = *(unint64_t **)result;
        if (*(_QWORD *)result)
        {
          v33 = (void **)(v18 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v33);
          goto LABEL_26;
        }
      }
      break;
    case 5:
      v19 = *(unint64_t **)result;
      do
      {
        v20 = __ldaxr(v19);
        v21 = v20 - 1;
      }
      while (__stlxr(v21, v19));
      if (!v21)
      {
        v18 = *(unint64_t **)result;
        if (*(_QWORD *)result)
        {
          v33 = (void **)(v18 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v33);
LABEL_26:
          v8 = v18;
          v9 = 0x1020C405E66F15BLL;
          goto LABEL_42;
        }
      }
      break;
    case 8:
      v22 = *(unint64_t **)result;
      do
      {
        v23 = __ldaxr(v22);
        v24 = v23 - 1;
      }
      while (__stlxr(v24, v22));
      if (!v24)
      {
        v25 = *(unint64_t **)result;
        if (*(_QWORD *)result)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)v25 + 2);
          v8 = v25;
          v26 = -235920773;
          goto LABEL_41;
        }
      }
      break;
    case 9:
      v27 = *(unint64_t **)result;
      do
      {
        v28 = __ldaxr(v27);
        v29 = v28 - 1;
      }
      while (__stlxr(v29, v27));
      if (!v29)
      {
        v30 = *(unint64_t **)result;
        if (*(_QWORD *)result)
        {
          v31 = (void *)v30[6];
          if (v31)
          {
            v30[7] = (unint64_t)v31;
            operator delete(v31);
          }
          v32 = (void *)v30[3];
          if (v32)
          {
            v30[4] = (unint64_t)v32;
            operator delete(v32);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v30 + 1));
          v8 = v30;
          v26 = 2071181815;
LABEL_41:
          v9 = v26 | 0x1030C4000000000;
LABEL_42:
          result = MEMORY[0x219A19A08](v8, v9);
        }
      }
      break;
    default:
      break;
  }
  *(_DWORD *)(v2 + 8) = 0;
  *(_BYTE *)(v2 + 12) = 0;
  *(_QWORD *)v2 = v3;
  return result;
}

void turi::flexible_type_converter<std::vector<unsigned long>>::set(uint64_t **a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 12) = 0;
  turi::flexible_type_internals::ft_converter<12>::set<std::vector<unsigned long>>((uint64_t *)a2, a1);
}

void sub_2183F1E70(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  char v3;
  char v4;
  char v5;
  char v6;
  char v7;

  switch(*(_BYTE *)(v1 + 12))
  {
    case 2:
      turi::sarray_iterator<turi::flexible_type>::sarray_iterator((unint64_t **)v1);
      if ((v3 & 1) != 0)
        break;
      goto LABEL_11;
    case 3:
      turi::sarray_iterator<turi::flexible_type>::sarray_iterator((unint64_t **)v1);
      if ((v4 & 1) != 0)
        break;
      goto LABEL_11;
    case 4:
      turi::flexible_type::flexible_type<double>((unint64_t **)v1);
      if ((v5 & 1) != 0)
        break;
      goto LABEL_11;
    case 5:
      turi::flexible_type::flexible_type<double>((unint64_t **)v1);
      if ((v6 & 1) != 0)
        break;
      goto LABEL_11;
    case 8:
      turi::sarray_iterator<turi::flexible_type>::sarray_iterator((unint64_t **)v1);
      if ((v7 & 1) == 0)
        goto LABEL_11;
      break;
    case 9:
      if ((turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((unint64_t **)v1) & 1) != 0)
        break;
LABEL_11:
      *(_QWORD *)v1 = 0;
      break;
    default:
      break;
  }
  *(_QWORD *)v1 = 0;
  *(_DWORD *)(v1 + 8) = 0;
  *(_BYTE *)(v1 + 12) = 0;
  _Unwind_Resume(exception_object);
}

void turi::flexible_type_internals::ft_converter<12>::set<std::vector<unsigned long>>(uint64_t *a1, uint64_t **a2)
{
  unint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  void **v7;
  unint64_t v8;
  unint64_t v9;
  void **v10;
  void **v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  void **v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  void **v20;
  void *v21;
  void *v22;
  unsigned int v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  void **v27;
  void *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  void **v35;
  void **v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  void **v40;
  void **v41;
  uint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  void **v46;
  void *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  void **v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  void **v58;
  unsigned int v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t v62;
  void **v63;
  void *v64;
  void *v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t *v69;
  unint64_t *v70;
  uint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t *v75;
  unint64_t *v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t *v79;
  void *v80;
  void *v81;
  unsigned int v82;
  unint64_t *v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t *v86;
  void *v87;
  unint64_t *v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t *v94;
  _QWORD *v95;
  _QWORD *v96;
  void **v97;
  _QWORD *v98;
  unint64_t *v99;
  std::string *v100;
  __int128 v101;
  _QWORD *v102;
  unint64_t *v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  void *v107;
  _QWORD *v108;
  unint64_t *v109;
  unint64_t v110;
  unint64_t v111;
  _QWORD *v112;
  unint64_t *v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  unint64_t *v117;
  unint64_t v118;
  unsigned int *v119;
  unsigned int v120;
  __int128 v121;
  __int128 v122;
  unint64_t v123;
  unint64_t v124;
  _QWORD *v125;
  uint64_t v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t *v131;
  uint64_t v132;
  __int128 v133;
  unint64_t v134;
  void **v135;
  void **v136[3];

  v136[2] = *(void ***)MEMORY[0x24BDAC8D0];
  std::vector<turi::flexible_type>::vector(&v133, a2[1] - *a2);
  if (*((_QWORD *)&v133 + 1) != (_QWORD)v133)
  {
    v4 = 0;
    v5 = *a2;
    do
    {
      v132 = 0;
      v132 = *v5;
      memset(v136, 0, 13);
      turi::flexible_type_internals::ft_resolver<3>::set<unsigned long>((uint64_t)v136, &v132);
      v6 = v133 + 16 * v4;
      if (v136 == (void ***)v6)
      {
        switch(BYTE4(v136[1]))
        {
          case 2:
            v37 = (unint64_t *)v136[0];
            do
            {
              v38 = __ldaxr(v37);
              v39 = v38 - 1;
            }
            while (__stlxr(v39, v37));
            if (!v39)
            {
              v40 = v136[0];
              if (v136[0])
              {
                if (*((char *)v136[0] + 31) < 0)
                  operator delete(v136[0][1]);
                v41 = v40;
                v42 = 0x1012C404EF22A49;
                goto LABEL_91;
              }
            }
            break;
          case 3:
            v43 = (unint64_t *)v136[0];
            do
            {
              v44 = __ldaxr(v43);
              v45 = v44 - 1;
            }
            while (__stlxr(v45, v43));
            if (!v45)
            {
              v46 = v136[0];
              if (v136[0])
              {
                v47 = v136[0][1];
                if (v47)
                {
                  v136[0][2] = v47;
                  operator delete(v47);
                }
                v41 = v46;
                v42 = 0x1080C409938AC02;
                goto LABEL_91;
              }
            }
            break;
          case 4:
            v48 = (unint64_t *)v136[0];
            do
            {
              v49 = __ldaxr(v48);
              v50 = v49 - 1;
            }
            while (__stlxr(v50, v48));
            if (!v50)
            {
              v51 = v136[0];
              if (v136[0])
              {
                v135 = v136[0] + 1;
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v135);
                goto LABEL_75;
              }
            }
            break;
          case 5:
            v52 = (unint64_t *)v136[0];
            do
            {
              v53 = __ldaxr(v52);
              v54 = v53 - 1;
            }
            while (__stlxr(v54, v52));
            if (!v54)
            {
              v51 = v136[0];
              if (v136[0])
              {
                v135 = v136[0] + 1;
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v135);
LABEL_75:
                v41 = v51;
                v42 = 0x1020C405E66F15BLL;
                goto LABEL_91;
              }
            }
            break;
          case 8:
            v55 = (unint64_t *)v136[0];
            do
            {
              v56 = __ldaxr(v55);
              v57 = v56 - 1;
            }
            while (__stlxr(v57, v55));
            if (!v57)
            {
              v58 = v136[0];
              if (v136[0])
              {
                boost::detail::shared_count::~shared_count((unsigned int **)v136[0] + 2);
                v41 = v58;
                v59 = -235920773;
                goto LABEL_90;
              }
            }
            break;
          case 9:
            v60 = (unint64_t *)v136[0];
            do
            {
              v61 = __ldaxr(v60);
              v62 = v61 - 1;
            }
            while (__stlxr(v62, v60));
            if (!v62)
            {
              v63 = v136[0];
              if (v136[0])
              {
                v64 = v136[0][6];
                if (v64)
                {
                  v136[0][7] = v64;
                  operator delete(v64);
                }
                v65 = v63[3];
                if (v65)
                {
                  v63[4] = v65;
                  operator delete(v65);
                }
                std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v63 + 1));
                v41 = v63;
                v59 = 2071181815;
LABEL_90:
                v42 = v59 | 0x1030C4000000000;
LABEL_91:
                MEMORY[0x219A19A08](v41, v42);
              }
            }
            break;
          default:
            break;
        }
      }
      else
      {
        switch(*(_BYTE *)(v6 + 12))
        {
          case 2:
            v7 = *(void ***)v6;
            do
            {
              v8 = __ldaxr((unint64_t *)v7);
              v9 = v8 - 1;
            }
            while (__stlxr(v9, (unint64_t *)v7));
            if (!v9)
            {
              v10 = *(void ***)v6;
              if (!*(_QWORD *)v6)
                goto LABEL_46;
              if (*((char *)v10 + 31) < 0)
                operator delete(v10[1]);
              v11 = v10;
              v12 = 0x1012C404EF22A49;
              goto LABEL_45;
            }
            break;
          case 3:
            v24 = *(unint64_t **)v6;
            do
            {
              v25 = __ldaxr(v24);
              v26 = v25 - 1;
            }
            while (__stlxr(v26, v24));
            if (!v26)
            {
              v27 = *(void ***)v6;
              if (!*(_QWORD *)v6)
                goto LABEL_46;
              v28 = v27[1];
              if (v28)
              {
                v27[2] = v28;
                operator delete(v28);
              }
              v11 = v27;
              v12 = 0x1080C409938AC02;
              goto LABEL_45;
            }
            break;
          case 4:
            v13 = *(unint64_t **)v6;
            do
            {
              v14 = __ldaxr(v13);
              v15 = v14 - 1;
            }
            while (__stlxr(v15, v13));
            if (!v15)
            {
              v16 = *(void ***)v6;
              if (!*(_QWORD *)v6)
                goto LABEL_46;
              v135 = v16 + 1;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v135);
              goto LABEL_38;
            }
            break;
          case 5:
            v29 = *(unint64_t **)v6;
            do
            {
              v30 = __ldaxr(v29);
              v31 = v30 - 1;
            }
            while (__stlxr(v31, v29));
            if (!v31)
            {
              v16 = *(void ***)v6;
              if (!*(_QWORD *)v6)
                goto LABEL_46;
              v135 = v16 + 1;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v135);
LABEL_38:
              v11 = v16;
              v12 = 0x1020C405E66F15BLL;
              goto LABEL_45;
            }
            break;
          case 8:
            v32 = *(unint64_t **)v6;
            do
            {
              v33 = __ldaxr(v32);
              v34 = v33 - 1;
            }
            while (__stlxr(v34, v32));
            if (!v34)
            {
              v35 = *(void ***)v6;
              if (!*(_QWORD *)v6)
                goto LABEL_46;
              boost::detail::shared_count::~shared_count((unsigned int **)v35 + 2);
              v11 = v35;
              v23 = -235920773;
              goto LABEL_44;
            }
            break;
          case 9:
            v17 = *(unint64_t **)v6;
            do
            {
              v18 = __ldaxr(v17);
              v19 = v18 - 1;
            }
            while (__stlxr(v19, v17));
            if (!v19)
            {
              v20 = *(void ***)v6;
              if (*(_QWORD *)v6)
              {
                v21 = v20[6];
                if (v21)
                {
                  v20[7] = v21;
                  operator delete(v21);
                }
                v22 = v20[3];
                if (v22)
                {
                  v20[4] = v22;
                  operator delete(v22);
                }
                std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v20 + 1));
                v11 = v20;
                v23 = 2071181815;
LABEL_44:
                v12 = v23 | 0x1030C4000000000;
LABEL_45:
                MEMORY[0x219A19A08](v11, v12);
              }
LABEL_46:
              *(_QWORD *)v6 = 0;
            }
            break;
          default:
            break;
        }
        v36 = v136[0];
        *(void ***)(v6 + 5) = *(void ***)((char *)v136 + 5);
        *(_QWORD *)v6 = v36;
        *(_BYTE *)(v6 + 12) = BYTE4(v136[1]);
      }
      ++v4;
      ++v5;
    }
    while (v4 < (uint64_t)(*((_QWORD *)&v133 + 1) - v133) >> 4);
  }
  switch(*((_BYTE *)a1 + 12))
  {
    case 2:
      v66 = (unint64_t *)*a1;
      do
      {
        v67 = __ldaxr(v66);
        v68 = v67 - 1;
      }
      while (__stlxr(v68, v66));
      if (!v68)
      {
        v69 = (unint64_t *)*a1;
        if (!*a1)
          goto LABEL_134;
        if (*((char *)v69 + 31) < 0)
          operator delete((void *)v69[1]);
        v70 = v69;
        v71 = 0x1012C404EF22A49;
        goto LABEL_133;
      }
      break;
    case 3:
      v83 = (unint64_t *)*a1;
      do
      {
        v84 = __ldaxr(v83);
        v85 = v84 - 1;
      }
      while (__stlxr(v85, v83));
      if (!v85)
      {
        v86 = (unint64_t *)*a1;
        if (!*a1)
          goto LABEL_134;
        v87 = (void *)v86[1];
        if (v87)
        {
          v86[2] = (unint64_t)v87;
          operator delete(v87);
        }
        v70 = v86;
        v71 = 0x1080C409938AC02;
        goto LABEL_133;
      }
      break;
    case 4:
      v72 = (unint64_t *)*a1;
      do
      {
        v73 = __ldaxr(v72);
        v74 = v73 - 1;
      }
      while (__stlxr(v74, v72));
      if (!v74)
      {
        v75 = (unint64_t *)*a1;
        if (!*a1)
          goto LABEL_134;
        v136[0] = (void **)(v75 + 1);
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v136);
        goto LABEL_126;
      }
      break;
    case 5:
      v88 = (unint64_t *)*a1;
      do
      {
        v89 = __ldaxr(v88);
        v90 = v89 - 1;
      }
      while (__stlxr(v90, v88));
      if (!v90)
      {
        v75 = (unint64_t *)*a1;
        if (!*a1)
          goto LABEL_134;
        v136[0] = (void **)(v75 + 1);
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v136);
LABEL_126:
        v70 = v75;
        v71 = 0x1020C405E66F15BLL;
        goto LABEL_133;
      }
      break;
    case 8:
      v91 = (unint64_t *)*a1;
      do
      {
        v92 = __ldaxr(v91);
        v93 = v92 - 1;
      }
      while (__stlxr(v93, v91));
      if (!v93)
      {
        v94 = (unint64_t *)*a1;
        if (!*a1)
          goto LABEL_134;
        boost::detail::shared_count::~shared_count((unsigned int **)v94 + 2);
        v70 = v94;
        v82 = -235920773;
        goto LABEL_132;
      }
      break;
    case 9:
      v76 = (unint64_t *)*a1;
      do
      {
        v77 = __ldaxr(v76);
        v78 = v77 - 1;
      }
      while (__stlxr(v78, v76));
      if (!v78)
      {
        v79 = (unint64_t *)*a1;
        if (*a1)
        {
          v80 = (void *)v79[6];
          if (v80)
          {
            v79[7] = (unint64_t)v80;
            operator delete(v80);
          }
          v81 = (void *)v79[3];
          if (v81)
          {
            v79[4] = (unint64_t)v81;
            operator delete(v81);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v79 + 1));
          v70 = v79;
          v82 = 2071181815;
LABEL_132:
          v71 = v82 | 0x1030C4000000000;
LABEL_133:
          MEMORY[0x219A19A08](v70, v71);
        }
LABEL_134:
        *a1 = 0;
      }
      break;
    default:
      break;
  }
  *a1 = 0;
  *((_DWORD *)a1 + 2) = 0;
  *((_BYTE *)a1 + 12) = 4;
  v95 = (_QWORD *)operator new();
  v96 = v95;
  *v95 = 0;
  v95[1] = 0;
  v97 = (void **)(v95 + 1);
  v95[2] = 0;
  v95[3] = 0;
  *a1 = (uint64_t)v95;
  *v95 = 1;
  switch(*((_BYTE *)a1 + 12))
  {
    case 2:
      if (*v95 != 1)
      {
        v98 = (_QWORD *)operator new();
        v99 = (unint64_t *)*a1;
        *v98 = *(_QWORD *)*a1;
        v100 = (std::string *)(v98 + 1);
        if (*((char *)v99 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(v100, (const std::string::value_type *)v99[1], v99[2]);
        }
        else
        {
          v101 = *(_OWORD *)(v99 + 1);
          v98[3] = v99[3];
          *(_OWORD *)&v100->__r_.__value_.__l.__data_ = v101;
        }
        *a1 = (uint64_t)v98;
        *v98 = 1;
        do
        {
          v129 = __ldaxr(v96);
          v130 = v129 - 1;
        }
        while (__stlxr(v130, v96));
        if (!v130)
        {
          v106 = 0x1012C404EF22A49;
          if ((*((char *)v96 + 31) & 0x80000000) == 0)
            goto LABEL_175;
          v107 = *v97;
          goto LABEL_174;
        }
      }
      break;
    case 3:
      if (*v95 != 1)
      {
        v102 = (_QWORD *)operator new();
        v103 = (unint64_t *)*a1;
        *v102 = *(_QWORD *)*a1;
        v102[2] = 0;
        v102[3] = 0;
        v102[1] = 0;
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v102 + 1, (const void *)v103[1], v103[2], (uint64_t)(v103[2] - v103[1]) >> 3);
        *a1 = (uint64_t)v102;
        *v102 = 1;
        do
        {
          v104 = __ldaxr(v96);
          v105 = v104 - 1;
        }
        while (__stlxr(v105, v96));
        if (!v105)
        {
          v106 = 0x1080C409938AC02;
          v107 = *v97;
          if (*v97)
          {
            v96[2] = v107;
LABEL_174:
            operator delete(v107);
          }
          goto LABEL_175;
        }
      }
      break;
    case 4:
      if (*v95 != 1)
      {
        v108 = (_QWORD *)operator new();
        v109 = (unint64_t *)*a1;
        *v108 = *(_QWORD *)*a1;
        v108[2] = 0;
        v108[3] = 0;
        v108[1] = 0;
        std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v108 + 1, (uint64_t *)v109[1], (uint64_t *)v109[2], (uint64_t)(v109[2] - v109[1]) >> 4);
        *a1 = (uint64_t)v108;
        *v108 = 1;
        do
        {
          v110 = __ldaxr(v96);
          v111 = v110 - 1;
        }
        while (__stlxr(v111, v96));
        if (!v111)
        {
          v106 = 0x1020C405E66F15BLL;
          v136[0] = v97;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v136);
          goto LABEL_175;
        }
      }
      break;
    case 5:
      if (*v95 != 1)
      {
        v112 = (_QWORD *)operator new();
        v113 = (unint64_t *)*a1;
        *v112 = *(_QWORD *)*a1;
        v112[2] = 0;
        v112[3] = 0;
        v112[1] = 0;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v112 + 1, (uint64_t *)v113[1], (uint64_t *)v113[2], (uint64_t)(v113[2] - v113[1]) >> 5);
        *a1 = (uint64_t)v112;
        *v112 = 1;
        do
        {
          v114 = __ldaxr(v96);
          v115 = v114 - 1;
        }
        while (__stlxr(v115, v96));
        if (!v115)
        {
          v106 = 0x1020C405E66F15BLL;
          v136[0] = v97;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v136);
          goto LABEL_175;
        }
      }
      break;
    case 8:
      if (*v95 != 1)
      {
        v116 = operator new();
        v117 = (unint64_t *)*a1;
        *(_QWORD *)v116 = *(_QWORD *)*a1;
        *(_QWORD *)(v116 + 8) = v117[1];
        v118 = v117[2];
        *(_QWORD *)(v116 + 16) = v118;
        if (v118)
        {
          v119 = (unsigned int *)(v118 + 8);
          do
            v120 = __ldxr(v119);
          while (__stxr(v120 + 1, v119));
        }
        v121 = *(_OWORD *)(v117 + 3);
        v122 = *(_OWORD *)(v117 + 5);
        *(_OWORD *)(v116 + 56) = *(_OWORD *)(v117 + 7);
        *(_OWORD *)(v116 + 40) = v122;
        *(_OWORD *)(v116 + 24) = v121;
        *a1 = v116;
        *(_QWORD *)v116 = 1;
        do
        {
          v123 = __ldaxr(v96);
          v124 = v123 - 1;
        }
        while (__stlxr(v124, v96));
        if (!v124)
        {
          v106 = 0x1030C40F1F0227BLL;
          boost::detail::shared_count::~shared_count((unsigned int **)v96 + 2);
          goto LABEL_175;
        }
      }
      break;
    case 9:
      if (*v95 != 1)
      {
        v125 = (_QWORD *)operator new();
        v126 = *a1 + 8;
        *v125 = *(_QWORD *)*a1;
        turi::flexible_type_impl::ndarray<double>::ndarray(v125 + 1, v126);
        *a1 = (uint64_t)v125;
        *v125 = 1;
        do
        {
          v127 = __ldaxr(v96);
          v128 = v127 - 1;
        }
        while (__stlxr(v128, v96));
        if (!v128)
        {
          v106 = 0x1030C407B73B9F7;
          std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v96);
LABEL_175:
          MEMORY[0x219A19A08](v96, v106);
        }
      }
      break;
    default:
      break;
  }
  v131 = (unint64_t *)*a1;
  std::vector<turi::flexible_type>::__vdeallocate((void **)v131 + 1);
  *(_OWORD *)(v131 + 1) = v133;
  v131[3] = v134;
  v133 = 0uLL;
  v134 = 0;
  v136[0] = (void **)&v133;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v136);
}

void sub_2183F2990(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void **a16)
{
  uint64_t v16;

  MEMORY[0x219A19A08](v16, 0x1012C404EF22A49);
  a16 = (void **)&a11;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a16);
  _Unwind_Resume(a1);
}

void turi::flexible_type_internals::ft_resolver<3>::set<unsigned long>(uint64_t a1, uint64_t *a2)
{
  unint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  unsigned int v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  void **v31;
  uint64_t v32;
  int v33;
  char v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  v34 = 0;
  v33 = 0;
  v32 = *a2;
  turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>(a1, &v32);
  switch(v34)
  {
    case 2:
      v2 = (unint64_t *)v32;
      do
      {
        v3 = __ldaxr(v2);
        v4 = v3 - 1;
      }
      while (__stlxr(v4, v2));
      if (!v4)
      {
        v5 = v32;
        if (v32)
        {
          if (*(char *)(v32 + 31) < 0)
            operator delete(*(void **)(v32 + 8));
          v6 = v5;
          v7 = 0x1012C404EF22A49;
          goto LABEL_42;
        }
      }
      break;
    case 3:
      v8 = (unint64_t *)v32;
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        v11 = v32;
        if (v32)
        {
          v12 = *(void **)(v32 + 8);
          if (v12)
          {
            *(_QWORD *)(v32 + 16) = v12;
            operator delete(v12);
          }
          v6 = v11;
          v7 = 0x1080C409938AC02;
          goto LABEL_42;
        }
      }
      break;
    case 4:
      v13 = (unint64_t *)v32;
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        v16 = v32;
        if (v32)
        {
          v31 = (void **)(v32 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v31);
          goto LABEL_26;
        }
      }
      break;
    case 5:
      v17 = (unint64_t *)v32;
      do
      {
        v18 = __ldaxr(v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v17));
      if (!v19)
      {
        v16 = v32;
        if (v32)
        {
          v31 = (void **)(v32 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v31);
LABEL_26:
          v6 = v16;
          v7 = 0x1020C405E66F15BLL;
          goto LABEL_42;
        }
      }
      break;
    case 8:
      v27 = (unint64_t *)v32;
      do
      {
        v28 = __ldaxr(v27);
        v29 = v28 - 1;
      }
      while (__stlxr(v29, v27));
      if (!v29)
      {
        v30 = v32;
        if (v32)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v32 + 16));
          v6 = v30;
          v26 = -235920773;
          goto LABEL_41;
        }
      }
      break;
    case 9:
      v20 = (unint64_t *)v32;
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (!v22)
      {
        v23 = v32;
        if (v32)
        {
          v24 = *(void **)(v32 + 48);
          if (v24)
          {
            *(_QWORD *)(v32 + 56) = v24;
            operator delete(v24);
          }
          v25 = *(void **)(v23 + 24);
          if (v25)
          {
            *(_QWORD *)(v23 + 32) = v25;
            operator delete(v25);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v23 + 8);
          v6 = v23;
          v26 = 2071181815;
LABEL_41:
          v7 = v26 | 0x1030C4000000000;
LABEL_42:
          MEMORY[0x219A19A08](v6, v7);
        }
      }
      break;
    default:
      return;
  }
}

void sub_2183F2CD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unint64_t *a10, int a11, char a12)
{
  switch(a12)
  {
    case 2:
      turi::gl_sarray::clip(&a10);
      break;
    case 3:
      turi::gl_sarray::clip(&a10);
      break;
    case 4:
      tc_init_set_config_parameter_cold_4(&a10);
      break;
    case 5:
      tc_init_set_config_parameter_cold_5(&a10);
      break;
    case 8:
      turi::gl_sarray::clip(&a10);
      break;
    case 9:
      turi::full_type_name<turi::flexible_type>(&a10);
      break;
    default:
      break;
  }
  _Unwind_Resume(exception_object);
}

char *turi::archive_detail::serialize_impl<turi::oarchive,std::shared_ptr<turi::ml_data_internal::column_indexer>,false,void>::exec(uint64_t a1, turi::ml_data_internal::column_indexer **a2)
{
  char *result;
  unint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  unint64_t v10;
  size_t v11;
  _QWORD *v12;
  size_t v13;
  BOOL v14;
  std::vector<char>::size_type v15;
  size_t v16;
  char **v17;
  size_t v18;
  BOOL v19;
  std::vector<char>::size_type v20;
  size_t v21;
  char **v22;
  size_t v23;
  BOOL v24;
  std::vector<char>::size_type v25;
  uint64_t v26;

  if (*a2)
  {
    if (*(_QWORD *)a1)
    {
      std::ostream::write();
    }
    else
    {
      v5 = *(_QWORD *)(a1 + 40);
      if (*(_QWORD *)(a1 + 32) + 1 > v5)
      {
        v11 = 2 * v5 + 2;
        *(_QWORD *)(a1 + 40) = v11;
        v12 = *(_QWORD **)(a1 + 16);
        if (v12)
        {
          v6 = (_BYTE *)*v12;
          v13 = v12[1] - *v12;
          v14 = v11 >= v13;
          v15 = v11 - v13;
          if (v15 != 0 && v14)
          {
            std::vector<char>::__append(*(std::vector<char> **)(a1 + 16), v15);
            v6 = **(_BYTE ***)(a1 + 16);
          }
          else if (!v14)
          {
            v12[1] = &v6[v11];
          }
        }
        else
        {
          v6 = malloc_type_realloc(*(void **)(a1 + 24), v11, 0xF6EA6B1uLL);
        }
        *(_QWORD *)(a1 + 24) = v6;
      }
      else
      {
        v6 = *(_BYTE **)(a1 + 24);
      }
      v6[(*(_QWORD *)(a1 + 32))++] = 1;
    }
    v7 = turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2>::type();
    if (*(_QWORD *)a1)
    {
      std::ostream::write();
    }
    else
    {
      v8 = *(_QWORD *)(a1 + 40);
      if (*(_QWORD *)(a1 + 32) + 8 > v8)
      {
        v26 = v7;
        v16 = 2 * v8 + 16;
        *(_QWORD *)(a1 + 40) = v16;
        v17 = *(char ***)(a1 + 16);
        if (v17)
        {
          v9 = *v17;
          v18 = v17[1] - *v17;
          v19 = v16 >= v18;
          v20 = v16 - v18;
          if (v20 != 0 && v19)
          {
            std::vector<char>::__append(*(std::vector<char> **)(a1 + 16), v20);
            v9 = **(char ***)(a1 + 16);
          }
          else if (!v19)
          {
            v17[1] = &v9[v16];
          }
        }
        else
        {
          v9 = (char *)malloc_type_realloc(*(void **)(a1 + 24), v16, 0xF6EA6B1uLL);
        }
        *(_QWORD *)(a1 + 24) = v9;
        v7 = v26;
      }
      else
      {
        v9 = *(char **)(a1 + 24);
      }
      *(_QWORD *)&v9[*(_QWORD *)(a1 + 32)] = v7;
      *(_QWORD *)(a1 + 32) += 8;
    }
    return turi::ml_data_internal::column_indexer::save_impl(*a2, (turi::oarchive *)a1);
  }
  else if (*(_QWORD *)a1)
  {
    return (char *)std::ostream::write();
  }
  else
  {
    v10 = *(_QWORD *)(a1 + 40);
    if (*(_QWORD *)(a1 + 32) + 1 > v10)
    {
      v21 = 2 * v10 + 2;
      *(_QWORD *)(a1 + 40) = v21;
      v22 = *(char ***)(a1 + 16);
      if (v22)
      {
        result = *v22;
        v23 = v22[1] - *v22;
        v24 = v21 >= v23;
        v25 = v21 - v23;
        if (v25 != 0 && v24)
        {
          std::vector<char>::__append(*(std::vector<char> **)(a1 + 16), v25);
          result = **(char ***)(a1 + 16);
        }
        else if (!v24)
        {
          v22[1] = &result[v21];
        }
      }
      else
      {
        result = (char *)malloc_type_realloc(*(void **)(a1 + 24), v21, 0xF6EA6B1uLL);
      }
      *(_QWORD *)(a1 + 24) = result;
    }
    else
    {
      result = *(char **)(a1 + 24);
    }
    result[(*(_QWORD *)(a1 + 32))++] = 0;
  }
  return result;
}

_BYTE *turi::archive_detail::serialize_impl<turi::oarchive,std::shared_ptr<turi::ml_data_internal::column_statistics>,false,void>::exec(uint64_t a1, const void ***a2)
{
  _BYTE *result;
  unint64_t v5;
  _BYTE *v6;
  unint64_t v7;
  char *v8;
  unint64_t v9;
  size_t v10;
  _QWORD *v11;
  size_t v12;
  BOOL v13;
  std::vector<char>::size_type v14;
  size_t v15;
  char **v16;
  size_t v17;
  BOOL v18;
  std::vector<char>::size_type v19;
  size_t v20;
  _QWORD *v21;
  size_t v22;
  BOOL v23;
  std::vector<char>::size_type v24;

  if (*a2)
  {
    if (*(_QWORD *)a1)
    {
      std::ostream::write();
    }
    else
    {
      v5 = *(_QWORD *)(a1 + 40);
      if (*(_QWORD *)(a1 + 32) + 1 > v5)
      {
        v10 = 2 * v5 + 2;
        *(_QWORD *)(a1 + 40) = v10;
        v11 = *(_QWORD **)(a1 + 16);
        if (v11)
        {
          v6 = (_BYTE *)*v11;
          v12 = v11[1] - *v11;
          v13 = v10 >= v12;
          v14 = v10 - v12;
          if (v14 != 0 && v13)
          {
            std::vector<char>::__append(*(std::vector<char> **)(a1 + 16), v14);
            v6 = **(_BYTE ***)(a1 + 16);
          }
          else if (!v13)
          {
            v11[1] = &v6[v10];
          }
        }
        else
        {
          v6 = malloc_type_realloc(*(void **)(a1 + 24), v10, 0xF6EA6B1uLL);
        }
        *(_QWORD *)(a1 + 24) = v6;
      }
      else
      {
        v6 = *(_BYTE **)(a1 + 24);
      }
      v6[(*(_QWORD *)(a1 + 32))++] = 1;
    }
    if (*(_QWORD *)a1)
    {
      std::ostream::write();
    }
    else
    {
      v7 = *(_QWORD *)(a1 + 40);
      if (*(_QWORD *)(a1 + 32) + 8 > v7)
      {
        v15 = 2 * v7 + 16;
        *(_QWORD *)(a1 + 40) = v15;
        v16 = *(char ***)(a1 + 16);
        if (v16)
        {
          v8 = *v16;
          v17 = v16[1] - *v16;
          v18 = v15 >= v17;
          v19 = v15 - v17;
          if (v19 != 0 && v18)
          {
            std::vector<char>::__append(*(std::vector<char> **)(a1 + 16), v19);
            v8 = **(char ***)(a1 + 16);
          }
          else if (!v18)
          {
            v16[1] = &v8[v15];
          }
        }
        else
        {
          v8 = (char *)malloc_type_realloc(*(void **)(a1 + 24), v15, 0xF6EA6B1uLL);
        }
        *(_QWORD *)(a1 + 24) = v8;
      }
      else
      {
        v8 = *(char **)(a1 + 24);
      }
      *(_QWORD *)&v8[*(_QWORD *)(a1 + 32)] = 3;
      *(_QWORD *)(a1 + 32) += 8;
    }
    return turi::ml_data_internal::column_statistics::save_impl(*a2, (turi::oarchive *)a1);
  }
  else if (*(_QWORD *)a1)
  {
    return (_BYTE *)std::ostream::write();
  }
  else
  {
    v9 = *(_QWORD *)(a1 + 40);
    if (*(_QWORD *)(a1 + 32) + 1 > v9)
    {
      v20 = 2 * v9 + 2;
      *(_QWORD *)(a1 + 40) = v20;
      v21 = *(_QWORD **)(a1 + 16);
      if (v21)
      {
        result = (_BYTE *)*v21;
        v22 = v21[1] - *v21;
        v23 = v20 >= v22;
        v24 = v20 - v22;
        if (v24 != 0 && v23)
        {
          std::vector<char>::__append(*(std::vector<char> **)(a1 + 16), v24);
          result = **(_BYTE ***)(a1 + 16);
        }
        else if (!v23)
        {
          v21[1] = &result[v20];
        }
      }
      else
      {
        result = malloc_type_realloc(*(void **)(a1 + 24), v20, 0xF6EA6B1uLL);
      }
      *(_QWORD *)(a1 + 24) = result;
    }
    else
    {
      result = *(_BYTE **)(a1 + 24);
    }
    result[(*(_QWORD *)(a1 + 32))++] = 0;
  }
  return result;
}

void sub_2183F3254(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  int *v10;

  std::exception::~exception(&a10);
  __cxa_begin_catch(a1);
  turi::_throw_variant_error<turi::flexible_type>(v10);
}

void sub_2183F3278(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void turi::variant_converter<std::vector<unsigned long>,void>::get(int *a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  const char *v4;
  uint64_t v5;
  unint64_t *v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  unsigned int v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  void *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  void **v38[3];
  _QWORD v39[3];

  v39[2] = *MEMORY[0x24BDAC8D0];
  memset(v39, 0, 13);
  v3 = turi::variant_get_ref<turi::flexible_type>(a1);
  if ((_QWORD *)v3 != v39)
  {
    v5 = *(_QWORD *)v3;
    *(_QWORD *)((char *)v39 + 5) = *(_QWORD *)(v3 + 5);
    v39[0] = v5;
    BYTE4(v39[1]) = *(_BYTE *)(v3 + 12);
    if (BYTE4(v39[1]) <= 9u && ((1 << SBYTE4(v39[1])) & 0x33C) != 0)
    {
      v7 = (unint64_t *)v39[0];
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 + 1, v7));
    }
  }
  turi::flexible_type_converter<std::vector<unsigned long>>::get((turi::flexible_type_internals *)v39, v4, a2);
  switch(BYTE4(v39[1]))
  {
    case 2:
      v9 = (unint64_t *)v39[0];
      do
      {
        v10 = __ldaxr(v9);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v9));
      if (!v11)
      {
        v12 = v39[0];
        if (v39[0])
        {
          if (*(char *)(v39[0] + 31) < 0)
            operator delete(*(void **)(v39[0] + 8));
          v13 = v12;
          v14 = 0x1012C404EF22A49;
          goto LABEL_49;
        }
      }
      break;
    case 3:
      v26 = (unint64_t *)v39[0];
      do
      {
        v27 = __ldaxr(v26);
        v28 = v27 - 1;
      }
      while (__stlxr(v28, v26));
      if (!v28)
      {
        v29 = v39[0];
        if (v39[0])
        {
          v30 = *(void **)(v39[0] + 8);
          if (v30)
          {
            *(_QWORD *)(v39[0] + 16) = v30;
            operator delete(v30);
          }
          v13 = v29;
          v14 = 0x1080C409938AC02;
          goto LABEL_49;
        }
      }
      break;
    case 4:
      v15 = (unint64_t *)v39[0];
      do
      {
        v16 = __ldaxr(v15);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, v15));
      if (!v17)
      {
        v18 = v39[0];
        if (v39[0])
        {
          v38[0] = (void **)(v39[0] + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v38);
          goto LABEL_42;
        }
      }
      break;
    case 5:
      v31 = (unint64_t *)v39[0];
      do
      {
        v32 = __ldaxr(v31);
        v33 = v32 - 1;
      }
      while (__stlxr(v33, v31));
      if (!v33)
      {
        v18 = v39[0];
        if (v39[0])
        {
          v38[0] = (void **)(v39[0] + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v38);
LABEL_42:
          v13 = v18;
          v14 = 0x1020C405E66F15BLL;
          goto LABEL_49;
        }
      }
      break;
    case 8:
      v34 = (unint64_t *)v39[0];
      do
      {
        v35 = __ldaxr(v34);
        v36 = v35 - 1;
      }
      while (__stlxr(v36, v34));
      if (!v36)
      {
        v37 = v39[0];
        if (v39[0])
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v39[0] + 16));
          v13 = v37;
          v25 = -235920773;
          goto LABEL_48;
        }
      }
      break;
    case 9:
      v19 = (unint64_t *)v39[0];
      do
      {
        v20 = __ldaxr(v19);
        v21 = v20 - 1;
      }
      while (__stlxr(v21, v19));
      if (!v21)
      {
        v22 = v39[0];
        if (v39[0])
        {
          v23 = *(void **)(v39[0] + 48);
          if (v23)
          {
            *(_QWORD *)(v39[0] + 56) = v23;
            operator delete(v23);
          }
          v24 = *(void **)(v22 + 24);
          if (v24)
          {
            *(_QWORD *)(v22 + 32) = v24;
            operator delete(v24);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v22 + 8);
          v13 = v22;
          v25 = 2071181815;
LABEL_48:
          v14 = v25 | 0x1030C4000000000;
LABEL_49:
          MEMORY[0x219A19A08](v13, v14);
        }
      }
      break;
    default:
      return;
  }
}

void sub_2183F3528(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::string *a15, void *a16, uint64_t a17, void *a18)
{
  uint64_t v18;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  unsigned int v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  void *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;

  switch(*(_BYTE *)(v18 - 28))
  {
    case 2:
      v20 = *(unint64_t **)(v18 - 40);
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (v22)
        goto LABEL_39;
      v23 = *(_QWORD *)(v18 - 40);
      if (!v23)
        goto LABEL_39;
      if (*(char *)(v23 + 31) < 0)
        operator delete(*(void **)(v23 + 8));
      v24 = (_QWORD *)v23;
      v25 = 0x1012C404EF22A49;
      goto LABEL_38;
    case 3:
      v35 = *(unint64_t **)(v18 - 40);
      do
      {
        v36 = __ldaxr(v35);
        v37 = v36 - 1;
      }
      while (__stlxr(v37, v35));
      if (v37)
        goto LABEL_39;
      v38 = *(_QWORD **)(v18 - 40);
      if (!v38)
        goto LABEL_39;
      v39 = (void *)v38[1];
      if (v39)
      {
        v38[2] = v39;
        operator delete(v39);
      }
      v24 = v38;
      v25 = 0x1080C409938AC02;
      goto LABEL_38;
    case 4:
      v26 = *(unint64_t **)(v18 - 40);
      do
      {
        v27 = __ldaxr(v26);
        v28 = v27 - 1;
      }
      while (__stlxr(v28, v26));
      if (v28)
        goto LABEL_39;
      v29 = *(_QWORD **)(v18 - 40);
      if (!v29)
        goto LABEL_39;
      a18 = v29 + 1;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
      goto LABEL_31;
    case 5:
      v40 = *(unint64_t **)(v18 - 40);
      do
      {
        v41 = __ldaxr(v40);
        v42 = v41 - 1;
      }
      while (__stlxr(v42, v40));
      if (v42)
        goto LABEL_39;
      v29 = *(_QWORD **)(v18 - 40);
      if (!v29)
        goto LABEL_39;
      a18 = v29 + 1;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
LABEL_31:
      v24 = v29;
      v25 = 0x1020C405E66F15BLL;
      goto LABEL_38;
    case 8:
      v43 = *(unint64_t **)(v18 - 40);
      do
      {
        v44 = __ldaxr(v43);
        v45 = v44 - 1;
      }
      while (__stlxr(v45, v43));
      if (v45)
        goto LABEL_39;
      v46 = *(_QWORD *)(v18 - 40);
      if (!v46)
        goto LABEL_39;
      boost::detail::shared_count::~shared_count((unsigned int **)(v46 + 16));
      v24 = (_QWORD *)v46;
      v34 = -235920773;
      goto LABEL_37;
    case 9:
      v30 = *(unint64_t **)(v18 - 40);
      do
      {
        v31 = __ldaxr(v30);
        v32 = v31 - 1;
      }
      while (__stlxr(v32, v30));
      if (v32)
        goto LABEL_39;
      v33 = *(_QWORD **)(v18 - 40);
      if (!v33)
        goto LABEL_39;
      v24 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v33);
      v34 = 2071181815;
LABEL_37:
      v25 = v34 | 0x1030C4000000000;
LABEL_38:
      MEMORY[0x219A19A08](v24, v25);
LABEL_39:
      _Unwind_Resume(exception_object);
      return;
    default:
      goto LABEL_39;
  }
}

void turi::flexible_type_converter<std::vector<unsigned long>>::get(turi::flexible_type_internals *a1@<X1>, const char *a2@<X2>, _QWORD *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  turi::flexible_type_internals::ft_converter<12>::get<std::vector<unsigned long>>(a3, a1, a2);
}

void sub_2183F3808(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void turi::flexible_type_internals::ft_converter<12>::get<std::vector<unsigned long>>(_QWORD *a1, turi::flexible_type_internals *this, const char *a3)
{
  int v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  const char *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  void *v30;
  void *v31;
  unsigned int v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  void *v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  void **v46;
  unint64_t v47;
  char v48;
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  v4 = *((unsigned __int8 *)this + 12);
  if (v4 == 3)
  {
    v11 = *(_QWORD *)this;
    std::vector<unsigned long>::resize((uint64_t)a1, (uint64_t)(*(_QWORD *)(*(_QWORD *)this + 16) - *(_QWORD *)(*(_QWORD *)this + 8)) >> 3);
    v12 = *(_QWORD *)(v11 + 8);
    if (*(_QWORD *)(v11 + 16) != v12)
    {
      v13 = 0;
      v14 = (_QWORD *)*a1;
      do
      {
        v45 = 0;
        turi::flexible_type::flexible_type<double>((uint64_t)&v47, (_QWORD *)(v12 + 8 * v13));
        turi::flexible_type_internals::ft_converter<3>::get<unsigned long>(&v45, (turi::flexible_type_internals *)&v47, v15);
        switch(v48)
        {
          case 2:
            v16 = (unint64_t *)v47;
            do
            {
              v17 = __ldaxr(v16);
              v18 = v17 - 1;
            }
            while (__stlxr(v18, v16));
            if (!v18)
            {
              v19 = v47;
              if (v47)
              {
                if (*(char *)(v47 + 31) < 0)
                  operator delete(*(void **)(v47 + 8));
                v20 = v19;
                v21 = 0x1012C404EF22A49;
                goto LABEL_50;
              }
            }
            break;
          case 3:
            v33 = (unint64_t *)v47;
            do
            {
              v34 = __ldaxr(v33);
              v35 = v34 - 1;
            }
            while (__stlxr(v35, v33));
            if (!v35)
            {
              v36 = v47;
              if (v47)
              {
                v37 = *(void **)(v47 + 8);
                if (v37)
                {
                  *(_QWORD *)(v47 + 16) = v37;
                  operator delete(v37);
                }
                v20 = v36;
                v21 = 0x1080C409938AC02;
                goto LABEL_50;
              }
            }
            break;
          case 4:
            v22 = (unint64_t *)v47;
            do
            {
              v23 = __ldaxr(v22);
              v24 = v23 - 1;
            }
            while (__stlxr(v24, v22));
            if (!v24)
            {
              v25 = v47;
              if (v47)
              {
                v46 = (void **)(v47 + 8);
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v46);
                goto LABEL_43;
              }
            }
            break;
          case 5:
            v38 = (unint64_t *)v47;
            do
            {
              v39 = __ldaxr(v38);
              v40 = v39 - 1;
            }
            while (__stlxr(v40, v38));
            if (!v40)
            {
              v25 = v47;
              if (v47)
              {
                v46 = (void **)(v47 + 8);
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v46);
LABEL_43:
                v20 = v25;
                v21 = 0x1020C405E66F15BLL;
                goto LABEL_50;
              }
            }
            break;
          case 8:
            v41 = (unint64_t *)v47;
            do
            {
              v42 = __ldaxr(v41);
              v43 = v42 - 1;
            }
            while (__stlxr(v43, v41));
            if (!v43)
            {
              v44 = v47;
              if (v47)
              {
                boost::detail::shared_count::~shared_count((unsigned int **)(v47 + 16));
                v20 = v44;
                v32 = -235920773;
                goto LABEL_49;
              }
            }
            break;
          case 9:
            v26 = (unint64_t *)v47;
            do
            {
              v27 = __ldaxr(v26);
              v28 = v27 - 1;
            }
            while (__stlxr(v28, v26));
            if (!v28)
            {
              v29 = v47;
              if (v47)
              {
                v30 = *(void **)(v47 + 48);
                if (v30)
                {
                  *(_QWORD *)(v47 + 56) = v30;
                  operator delete(v30);
                }
                v31 = *(void **)(v29 + 24);
                if (v31)
                {
                  *(_QWORD *)(v29 + 32) = v31;
                  operator delete(v31);
                }
                std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v29 + 8);
                v20 = v29;
                v32 = 2071181815;
LABEL_49:
                v21 = v32 | 0x1030C4000000000;
LABEL_50:
                MEMORY[0x219A19A08](v20, v21);
              }
            }
            break;
          default:
            break;
        }
        *v14++ = v45;
        ++v13;
        v12 = *(_QWORD *)(v11 + 8);
      }
      while (v13 < (*(_QWORD *)(v11 + 16) - v12) >> 3);
    }
  }
  else
  {
    if (v4 != 4)
      turi::flexible_type_internals::throw_type_conversion_error(this, (const turi::flexible_type *)"flex_list", a3);
    v5 = *(_QWORD *)this;
    std::vector<unsigned long>::resize((uint64_t)a1, (uint64_t)(*(_QWORD *)(*(_QWORD *)this + 16) - *(_QWORD *)(*(_QWORD *)this + 8)) >> 4);
    v7 = *(_QWORD *)(v5 + 8);
    if (*(_QWORD *)(v5 + 16) != v7)
    {
      v8 = 0;
      v9 = 0;
      v10 = (_QWORD *)*a1;
      do
      {
        v47 = 0;
        turi::flexible_type_internals::ft_converter<3>::get<unsigned long>(&v47, (turi::flexible_type_internals *)(v7 + v8), v6);
        v10[v9++] = v47;
        v7 = *(_QWORD *)(v5 + 8);
        v8 += 16;
      }
      while (v9 < (*(_QWORD *)(v5 + 16) - v7) >> 4);
    }
  }
}

void sub_2183F3B48()
{
  turi::flexible_type_internals::ft_converter<12>::get<std::vector<unsigned long>>(std::vector<unsigned long> &,turi::flexible_type const&)::{lambda(void)#1}::operator()();
}

void sub_2183F3B54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, unint64_t *a12, int a13, char a14)
{
  switch(a14)
  {
    case 2:
      turi::gl_sarray::clip(&a12);
      break;
    case 3:
      turi::gl_sarray::clip(&a12);
      break;
    case 4:
      tc_init_set_config_parameter_cold_4(&a12);
      break;
    case 5:
      tc_init_set_config_parameter_cold_5(&a12);
      break;
    case 8:
      turi::gl_sarray::clip(&a12);
      break;
    case 9:
      turi::full_type_name<turi::flexible_type>(&a12);
      break;
    default:
      break;
  }
  _Unwind_Resume(exception_object);
}

void turi::flexible_type_internals::ft_converter<12>::get<std::vector<unsigned long>>(std::vector<unsigned long> &,turi::flexible_type const&)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/data/flexible_type/flexible_type_converter.hpp", 117);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/data/flexible_type/flexible_type_converter.hpp", "operator()", 700, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  void turi::flexible_type_internals::ft_converter<12>::get<std::vector<unsigned long>>(std::vector<unsigned long> &,turi::flexible_type const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2183F3CCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::archive_detail::deserialize_impl<turi::iarchive,std::shared_ptr<turi::ml_data_internal::column_indexer>,false,void>::exec(turi::iarchive *a1, std::string **a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  turi::ml_data_internal::column_indexer *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  __int128 v14;
  char v15;

  v15 = 0;
  v4 = *((_QWORD *)a1 + 2);
  if (v4)
  {
    v5 = *((_QWORD *)a1 + 3);
    v6 = *(unsigned __int8 *)(v4 + v5);
    v15 = v6;
    *((_QWORD *)a1 + 3) = v5 + 1;
    if (v6)
    {
      v7 = (turi::ml_data_internal::column_indexer *)operator new();
      turi::ml_data_internal::column_indexer::column_indexer(v7);
      std::shared_ptr<turi::ml_data_internal::column_indexer>::reset[abi:ne180100]<turi::ml_data_internal::column_indexer,void>(a2, (uint64_t)v7);
      *(_QWORD *)&v14 = 0;
      v8 = *((_QWORD *)a1 + 2);
      if (v8)
      {
        v9 = *((_QWORD *)a1 + 3);
        v10 = *(_QWORD *)(v8 + v9);
        *(_QWORD *)&v14 = v10;
        *((_QWORD *)a1 + 3) = v9 + 8;
      }
      else
      {
        std::istream::read();
        v10 = v14;
      }
      turi::ml_data_internal::column_indexer::load_version(*a2, a1, v10);
      return;
    }
  }
  else
  {
    std::istream::read();
  }
  v14 = 0uLL;
  std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)a2, &v14);
  v11 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
  if (*((_QWORD *)&v14 + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_2183F3E7C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1032C406B2B9BBDLL);
  _Unwind_Resume(a1);
}

turi::ml_data_internal::column_indexer *turi::ml_data_internal::column_indexer::column_indexer(turi::ml_data_internal::column_indexer *this)
{
  int v2;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = 0;
  v2 = pthread_mutex_init((pthread_mutex_t *)((char *)this + 112), 0);
  assert_msg(v2 == 0, "Mutex create error %d", v2);
  return this;
}

void sub_2183F3F2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  void **v11;
  void **v12;

  v12 = v11;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<std::vector<std::pair<unsigned long,turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&a10);
  a10 = v12;
  std::vector<std::pair<turi::simple_spinlock,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>>>::__destroy_vector::operator()[abi:ne180100](&a10);
  if (*(char *)(v10 + 23) < 0)
    operator delete(*(void **)v10);
  _Unwind_Resume(a1);
}

void turi::archive_detail::deserialize_impl<turi::iarchive,std::shared_ptr<turi::ml_data_internal::column_statistics>,false,void>::exec(turi::iarchive *a1, std::string **a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  __int128 v15;
  char v16;

  v16 = 0;
  v4 = *((_QWORD *)a1 + 2);
  if (v4)
  {
    v5 = *((_QWORD *)a1 + 3);
    v6 = *(unsigned __int8 *)(v4 + v5);
    v16 = v6;
    *((_QWORD *)a1 + 3) = v5 + 1;
    if (v6)
    {
      v7 = operator new();
      *(_QWORD *)(v7 + 8) = 0;
      *(_QWORD *)(v7 + 16) = 0;
      *(_QWORD *)v7 = 0;
      *(_OWORD *)(v7 + 32) = 0u;
      *(_OWORD *)(v7 + 48) = 0u;
      *(_OWORD *)(v7 + 64) = 0u;
      *(_QWORD *)(v7 + 80) = 0;
      *(_QWORD *)(v7 + 88) = 0x100000;
      *(_OWORD *)(v7 + 96) = 0u;
      *(_OWORD *)(v7 + 112) = 0u;
      *(_OWORD *)(v7 + 128) = 0u;
      *(_OWORD *)(v7 + 144) = 0u;
      v8 = 168;
      *(_QWORD *)(v7 + 160) = 0;
      do
        *(_BYTE *)(v7 + v8++) = 0;
      while (v8 != 232);
      *(_OWORD *)(v7 + 248) = 0u;
      *(_OWORD *)(v7 + 232) = 0u;
      *(_OWORD *)(v7 + 264) = 0u;
      *(_QWORD *)(v7 + 280) = 0;
      *(_QWORD *)(v7 + 288) = 0;
      *(_QWORD *)(v7 + 296) = 850045863;
      *(_OWORD *)(v7 + 304) = 0u;
      *(_OWORD *)(v7 + 320) = 0u;
      *(_OWORD *)(v7 + 336) = 0u;
      *(_QWORD *)(v7 + 352) = 0;
      std::shared_ptr<turi::ml_data_internal::column_statistics>::reset[abi:ne180100]<turi::ml_data_internal::column_statistics,void>(a2, v7);
      *(_QWORD *)&v15 = 0;
      v9 = *((_QWORD *)a1 + 2);
      if (v9)
      {
        v10 = *((_QWORD *)a1 + 3);
        v11 = *(_QWORD *)(v9 + v10);
        *(_QWORD *)&v15 = v11;
        *((_QWORD *)a1 + 3) = v10 + 8;
      }
      else
      {
        std::istream::read();
        v11 = v15;
      }
      turi::ml_data_internal::column_statistics::load_version(*a2, a1, v11);
      return;
    }
  }
  else
  {
    std::istream::read();
  }
  v15 = 0uLL;
  std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)a2, &v15);
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v15 + 1);
  if (*((_QWORD *)&v15 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void turi::archive_detail::vector_serialize_impl<turi::oarchive,std::shared_ptr<turi::ml_data_internal::column_metadata>,false>::exec(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  size_t v10;
  char **v11;
  size_t v12;
  BOOL v13;
  std::vector<char>::size_type v14;

  v4 = (a2[1] - *a2) >> 4;
  if (*(_QWORD *)a1)
  {
    std::ostream::write();
  }
  else
  {
    v5 = *(_QWORD *)(a1 + 40);
    if (*(_QWORD *)(a1 + 32) + 8 > v5)
    {
      v10 = 2 * v5 + 16;
      *(_QWORD *)(a1 + 40) = v10;
      v11 = *(char ***)(a1 + 16);
      if (v11)
      {
        v6 = *v11;
        v12 = v11[1] - *v11;
        v13 = v10 >= v12;
        v14 = v10 - v12;
        if (v14 != 0 && v13)
        {
          std::vector<char>::__append(*(std::vector<char> **)(a1 + 16), v14);
          v6 = **(char ***)(a1 + 16);
        }
        else if (!v13)
        {
          v11[1] = &v6[v10];
        }
      }
      else
      {
        v6 = (char *)malloc_type_realloc(*(void **)(a1 + 24), v10, 0xF6EA6B1uLL);
      }
      *(_QWORD *)(a1 + 24) = v6;
    }
    else
    {
      v6 = *(char **)(a1 + 24);
    }
    *(_QWORD *)&v6[*(_QWORD *)(a1 + 32)] = v4;
    *(_QWORD *)(a1 + 32) += 8;
  }
  v7 = *a2;
  if (a2[1] != *a2)
  {
    v8 = 0;
    v9 = 0;
    do
    {
      turi::archive_detail::serialize_impl<turi::oarchive,std::shared_ptr<turi::ml_data_internal::column_metadata>,false,void>::exec(a1, (turi::ml_data_internal::column_metadata **)(v7 + v8));
      ++v9;
      v7 = *a2;
      v8 += 16;
    }
    while (v9 < (a2[1] - *a2) >> 4);
  }
}

void turi::archive_detail::serialize_impl<turi::oarchive,std::shared_ptr<turi::ml_data_internal::column_metadata>,false,void>::exec(uint64_t a1, turi::ml_data_internal::column_metadata **a2)
{
  unint64_t v4;
  _BYTE *v5;
  unint64_t v6;
  _BYTE *v7;
  size_t v8;
  _QWORD *v9;
  size_t v10;
  BOOL v11;
  std::vector<char>::size_type v12;
  size_t v13;
  _QWORD *v14;
  size_t v15;
  BOOL v16;
  std::vector<char>::size_type v17;

  if (*a2)
  {
    if (*(_QWORD *)a1)
    {
      std::ostream::write();
    }
    else
    {
      v4 = *(_QWORD *)(a1 + 40);
      if (*(_QWORD *)(a1 + 32) + 1 > v4)
      {
        v8 = 2 * v4 + 2;
        *(_QWORD *)(a1 + 40) = v8;
        v9 = *(_QWORD **)(a1 + 16);
        if (v9)
        {
          v5 = (_BYTE *)*v9;
          v10 = v9[1] - *v9;
          v11 = v8 >= v10;
          v12 = v8 - v10;
          if (v12 != 0 && v11)
          {
            std::vector<char>::__append(*(std::vector<char> **)(a1 + 16), v12);
            v5 = **(_BYTE ***)(a1 + 16);
          }
          else if (!v11)
          {
            v9[1] = &v5[v8];
          }
        }
        else
        {
          v5 = malloc_type_realloc(*(void **)(a1 + 24), v8, 0xF6EA6B1uLL);
        }
        *(_QWORD *)(a1 + 24) = v5;
      }
      else
      {
        v5 = *(_BYTE **)(a1 + 24);
      }
      v5[(*(_QWORD *)(a1 + 32))++] = 1;
    }
    turi::ml_data_internal::column_metadata::save(*a2, (turi::oarchive *)a1);
  }
  else if (*(_QWORD *)a1)
  {
    std::ostream::write();
  }
  else
  {
    v6 = *(_QWORD *)(a1 + 40);
    if (*(_QWORD *)(a1 + 32) + 1 > v6)
    {
      v13 = 2 * v6 + 2;
      *(_QWORD *)(a1 + 40) = v13;
      v14 = *(_QWORD **)(a1 + 16);
      if (v14)
      {
        v7 = (_BYTE *)*v14;
        v15 = v14[1] - *v14;
        v16 = v13 >= v15;
        v17 = v13 - v15;
        if (v17 != 0 && v16)
        {
          std::vector<char>::__append(*(std::vector<char> **)(a1 + 16), v17);
          v7 = **(_BYTE ***)(a1 + 16);
        }
        else if (!v16)
        {
          v14[1] = &v7[v13];
        }
      }
      else
      {
        v7 = malloc_type_realloc(*(void **)(a1 + 24), v13, 0xF6EA6B1uLL);
      }
      *(_QWORD *)(a1 + 24) = v7;
    }
    else
    {
      v7 = *(_BYTE **)(a1 + 24);
    }
    v7[(*(_QWORD *)(a1 + 32))++] = 0;
  }
}

void turi::archive_detail::vector_deserialize_impl<turi::iarchive,std::shared_ptr<turi::ml_data_internal::column_metadata>,false>::exec(turi::iarchive *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  uint64_t v8;
  unint64_t j;
  unint64_t v10;

  v10 = 0;
  v4 = *((_QWORD *)a1 + 2);
  if (v4)
  {
    v5 = *((_QWORD *)a1 + 3);
    v10 = *(_QWORD *)(v4 + v5);
    *((_QWORD *)a1 + 3) = v5 + 8;
  }
  else
  {
    std::istream::read();
  }
  v7 = *a2;
  for (i = a2[1]; i != v7; i = std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](i - 16))
    ;
  a2[1] = v7;
  std::vector<std::shared_ptr<turi::sframe_rows const>>::resize((uint64_t)a2, v10);
  if (v10)
  {
    v8 = 0;
    for (j = 0; j < v10; ++j)
    {
      turi::archive_detail::deserialize_impl<turi::iarchive,std::shared_ptr<turi::ml_data_internal::column_metadata>,false,void>::exec(a1, (turi::ml_data_internal::column_metadata **)(*a2 + v8));
      v8 += 16;
    }
  }
}

void turi::archive_detail::deserialize_impl<turi::iarchive,std::shared_ptr<turi::ml_data_internal::column_metadata>,false,void>::exec(turi::iarchive *a1, turi::ml_data_internal::column_metadata **a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  __int128 v11;
  char v12;

  v12 = 0;
  v4 = *((_QWORD *)a1 + 2);
  if (v4)
  {
    v5 = *((_QWORD *)a1 + 3);
    v6 = *(unsigned __int8 *)(v4 + v5);
    v12 = v6;
    *((_QWORD *)a1 + 3) = v5 + 1;
    if (v6)
    {
      v7 = operator new();
      std::string::basic_string[abi:ne180100]<0>((_QWORD *)v7, "");
      *(_OWORD *)(v7 + 32) = 0u;
      *(_OWORD *)(v7 + 48) = 0u;
      *(_QWORD *)(v7 + 64) = -1;
      *(_QWORD *)(v7 + 72) = -1;
      *(_QWORD *)(v7 + 80) = 0;
      *(_QWORD *)(v7 + 88) = 0;
      *(_QWORD *)(v7 + 96) = 0;
      *(_QWORD *)(v7 + 104) = -1;
      std::shared_ptr<turi::ml_data_internal::column_metadata>::reset[abi:ne180100]<turi::ml_data_internal::column_metadata,void>(a2, v7);
      turi::ml_data_internal::column_metadata::load(*a2, a1);
      return;
    }
  }
  else
  {
    std::istream::read();
  }
  v11 = 0uLL;
  std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)a2, &v11);
  v8 = (std::__shared_weak_count *)*((_QWORD *)&v11 + 1);
  if (*((_QWORD *)&v11 + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_2183F457C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1032C400C578614);
  _Unwind_Resume(a1);
}

void std::shared_ptr<turi::ml_data_internal::column_metadata>::reset[abi:ne180100]<turi::ml_data_internal::column_metadata,void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  __int128 v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int128 v7;

  std::shared_ptr<turi::ml_data_internal::column_metadata>::shared_ptr[abi:ne180100]<turi::ml_data_internal::column_metadata,void>(&v7, a2);
  v3 = (std::__shared_weak_count *)a1[1];
  v4 = v7;
  *(_QWORD *)&v7 = *a1;
  *((_QWORD *)&v7 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

_QWORD *std::shared_ptr<turi::ml_data_internal::column_metadata>::shared_ptr[abi:ne180100]<turi::ml_data_internal::column_metadata,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_24D93F1E8;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_2183F4670(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  a10 = 0;
  if (v10)
    std::default_delete<turi::ml_data_internal::column_metadata>::operator()[abi:ne180100]((uint64_t)&a10, v10);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<turi::ml_data_internal::column_metadata *,std::shared_ptr<turi::ml_data_internal::column_metadata>::__shared_ptr_default_delete<turi::ml_data_internal::column_metadata,turi::ml_data_internal::column_metadata>,std::allocator<turi::ml_data_internal::column_metadata>>::__on_zero_shared(uint64_t a1)
{
  std::default_delete<turi::ml_data_internal::column_metadata>::operator()[abi:ne180100](a1 + 24, *(_QWORD *)(a1 + 24));
}

uint64_t std::__shared_ptr_pointer<turi::ml_data_internal::column_metadata *,std::shared_ptr<turi::ml_data_internal::column_metadata>::__shared_ptr_default_delete<turi::ml_data_internal::column_metadata,turi::ml_data_internal::column_metadata>,std::allocator<turi::ml_data_internal::column_metadata>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::default_delete<turi::ml_data_internal::column_metadata>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v3;

  if (a2)
  {
    v3 = *(void **)(a2 + 80);
    if (v3)
    {
      *(_QWORD *)(a2 + 88) = v3;
      operator delete(v3);
    }
    std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](a2 + 48);
    std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](a2 + 32);
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    JUMPOUT(0x219A19A08);
  }
}

void __cxx_global_var_init_13_2()
{
  int v0;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, "Mutex create error %d", v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_internal_metadata_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

uint64_t turi::ml_data_internal::ml_data_block_manager::ml_data_block_manager(uint64_t a1, _QWORD *a2, __int128 *a3, uint64_t a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  __int128 v14;
  __int128 v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v23;

  *(_QWORD *)a1 = *a2;
  v11 = a2[1];
  *(_QWORD *)(a1 + 8) = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v14 = *a3;
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)(a1 + 16) = v14;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>((_QWORD *)(a1 + 32), *((const void **)a3 + 2), *((_QWORD *)a3 + 3), (uint64_t)(*((_QWORD *)a3 + 3) - *((_QWORD *)a3 + 2)) >> 3);
  v15 = *(__int128 *)((char *)a3 + 40);
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 56) = v15;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  std::vector<std::shared_ptr<turi::query_eval::planner_node>>::__init_with_size[abi:ne180100]<std::shared_ptr<turi::query_eval::planner_node>*,std::shared_ptr<turi::query_eval::planner_node>*>((char *)(a1 + 72), *((_QWORD **)a3 + 7), *((_QWORD **)a3 + 8), (uint64_t)(*((_QWORD *)a3 + 8) - *((_QWORD *)a3 + 7)) >> 4);
  *(_OWORD *)(a1 + 104) = 0u;
  *(_QWORD *)(a1 + 96) = a4;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_QWORD *)(a1 + 136) = 0;
  v16 = pthread_mutex_init((pthread_mutex_t *)(a1 + 144), 0);
  assert_msg(v16 == 0, "Mutex create error %d", v16);
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 216) = a1 + 224;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  turi::sarray<turi::ml_data_internal::row_data_block>::get_reader(*a5, &v23);
  std::shared_ptr<turi::sarray_reader<turi::ml_data_internal::row_data_block>>::operator=[abi:ne180100]<turi::sarray_reader<turi::ml_data_internal::row_data_block>,std::default_delete<turi::sarray_reader<turi::ml_data_internal::row_data_block>>,void>((_QWORD *)(a1 + 104), &v23);
  v17 = v23;
  v23 = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  std::vector<std::shared_ptr<turi::sframe_rows const>>::resize(a1 + 120, (a6[1] - *a6) >> 4);
  v18 = *a6;
  if (a6[1] != *a6)
  {
    v19 = 0;
    v20 = 0;
    do
    {
      turi::sarray<turi::flexible_type>::get_reader(*(_QWORD *)(v18 + v19), &v23);
      std::shared_ptr<turi::sarray_reader<turi::flexible_type>>::operator=[abi:ne180100]<turi::sarray_reader<turi::flexible_type>,std::default_delete<turi::sarray_reader<turi::flexible_type>>,void>((_QWORD *)(*(_QWORD *)(a1 + 120) + v19), &v23);
      v21 = v23;
      v23 = 0;
      if (v21)
        (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
      ++v20;
      v18 = *a6;
      v19 += 16;
    }
    while (v20 < (a6[1] - *a6) >> 4);
  }
  return a1;
}

void sub_2183F49F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  pthread_mutex_t *v5;
  uint64_t v6;
  _QWORD **v7;
  va_list va;

  va_start(va, a2);
  std::__tree<std::__value_type<long,std::pair<std::weak_ptr<turi::sarray<turi::flexible_type>>,unsigned long>>,std::__map_value_compare<long,std::__value_type<long,std::pair<std::weak_ptr<turi::sarray<turi::flexible_type>>,unsigned long>>,std::less<long>,true>,std::allocator<std::__value_type<long,std::pair<std::weak_ptr<turi::sarray<turi::flexible_type>>,unsigned long>>>>::destroy(v6, *v7);
  turi::mutex::~mutex(v5);
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v4);
  turi::ml_data_internal::row_metadata::~row_metadata((turi::ml_data_internal::row_metadata *)(v3 - 16));
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

void turi::sarray<turi::ml_data_internal::row_data_block>::get_reader(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;

  assert_msg(*(unsigned __int8 *)(a1 + 248), "Invalid SArray");
  assert_msg(*(_BYTE *)(a1 + 249) == 0, "Cannot open an SArraying which is still writing.");
  v4 = operator new();
  *(_OWORD *)v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 128) = 0u;
  *(_OWORD *)(v4 + 144) = 0u;
  *(_OWORD *)(v4 + 160) = 0u;
  *(_QWORD *)(v4 + 176) = 0;
  turi::sarray_reader<turi::ml_data_internal::row_data_block>::sarray_reader(v4);
  *a2 = v4;
  turi::sarray_reader<turi::ml_data_internal::row_data_block>::init(v4, a1, 0xFFFFFFFFFFFFFFFFLL);
}

void sub_2183F4B38(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  *v1 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<turi::sarray_reader<turi::ml_data_internal::row_data_block>>::operator=[abi:ne180100]<turi::sarray_reader<turi::ml_data_internal::row_data_block>,std::default_delete<turi::sarray_reader<turi::ml_data_internal::row_data_block>>,void>(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v4 = *a2;
  v5 = (_QWORD *)operator new();
  v6 = *a2;
  *v5 = &unk_24D93F3C8;
  v5[1] = 0;
  v5[2] = 0;
  v5[3] = v6;
  *a2 = 0;
  v7 = (std::__shared_weak_count *)a1[1];
  *a1 = v4;
  a1[1] = v5;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return a1;
}

void turi::ml_data_internal::row_metadata::~row_metadata(turi::ml_data_internal::row_metadata *this)
{
  void *v2;
  void **v3;

  v3 = (void **)((char *)this + 56);
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v2 = (void *)*((_QWORD *)this + 2);
  if (v2)
  {
    *((_QWORD *)this + 3) = v2;
    operator delete(v2);
  }
}

uint64_t turi::ml_data_internal::ml_data_block_manager::get_block@<X0>(turi::ml_data_internal::ml_data_block_manager *this@<X0>, void **a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  turi::ml_data_internal::ml_data_block_manager *v9;
  turi::ml_data_internal::ml_data_block_manager *v10;
  BOOL v11;
  _QWORD *v12;
  uint64_t **v13;
  uint64_t *v14;
  unint64_t v15;
  BOOL v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  unint64_t *p_shared_weak_owners;
  unint64_t v36;
  uint64_t *v37;
  char v38;
  char v39;
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v41;
  std::__shared_weak_count *v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *p_shared_owners;
  unint64_t v48;
  std::__shared_weak_count *v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  void **v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  __int128 v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  char *v64;
  char v65;

  v64 = (char *)this + 144;
  v65 = 1;
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 144));
  v6 = *((_QWORD *)this + 26) + 1;
  *((_QWORD *)this + 26) = v6;
  if (!(_BYTE)v6)
  {
    v7 = (uint64_t *)*((_QWORD *)this + 27);
    if (v7 != (uint64_t *)((char *)this + 224))
    {
      do
      {
        v8 = v7[6];
        if (!v8 || *(_QWORD *)(v8 + 8) == -1)
        {
          v10 = (turi::ml_data_internal::ml_data_block_manager *)std::__tree<std::__value_type<long,std::pair<std::weak_ptr<turi::sarray<turi::flexible_type>>,unsigned long>>,std::__map_value_compare<long,std::__value_type<long,std::pair<std::weak_ptr<turi::sarray<turi::flexible_type>>,unsigned long>>,std::less<long>,true>,std::allocator<std::__value_type<long,std::pair<std::weak_ptr<turi::sarray<turi::flexible_type>>,unsigned long>>>>::erase((uint64_t **)this + 27, v7);
        }
        else
        {
          v9 = (turi::ml_data_internal::ml_data_block_manager *)v7[1];
          if (v9)
          {
            do
            {
              v10 = v9;
              v9 = *(turi::ml_data_internal::ml_data_block_manager **)v9;
            }
            while (v9);
          }
          else
          {
            do
            {
              v10 = (turi::ml_data_internal::ml_data_block_manager *)v7[2];
              v11 = *(_QWORD *)v10 == (_QWORD)v7;
              v7 = (uint64_t *)v10;
            }
            while (!v11);
          }
        }
        v7 = (uint64_t *)v10;
      }
      while (v10 != (turi::ml_data_internal::ml_data_block_manager *)((char *)this + 224));
    }
  }
  v12 = (_QWORD *)*((_QWORD *)this + 28);
  v13 = (uint64_t **)((char *)this + 216);
  if (!v12)
    goto LABEL_24;
  v14 = (uint64_t *)((char *)this + 224);
  do
  {
    v15 = v12[4];
    v16 = v15 >= (unint64_t)a2;
    if (v15 >= (unint64_t)a2)
      v17 = v12;
    else
      v17 = v12 + 1;
    if (v16)
      v14 = v12;
    v12 = (_QWORD *)*v17;
  }
  while (*v17);
  if (v14 == (uint64_t *)((char *)this + 224) || v14[4] > (unint64_t)a2)
  {
LABEL_24:
    *a3 = 0;
    a3[1] = 0;
    goto LABEL_25;
  }
  *a3 = 0;
  a3[1] = 0;
  v62 = 0uLL;
  v50 = (std::__shared_weak_count *)v14[6];
  if (v50)
  {
    *((_QWORD *)&v62 + 1) = std::__shared_weak_count::lock(v50);
    if (*((_QWORD *)&v62 + 1))
      *(_QWORD *)&v62 = v14[5];
  }
  v51 = *(_QWORD *)std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)a3, &v62);
  v52 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
  if (*((_QWORD *)&v62 + 1))
  {
    v53 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  if (!v51)
    std::__tree<std::__value_type<long,std::pair<std::weak_ptr<turi::sarray<turi::flexible_type>>,unsigned long>>,std::__map_value_compare<long,std::__value_type<long,std::pair<std::weak_ptr<turi::sarray<turi::flexible_type>>,unsigned long>>,std::less<long>,true>,std::allocator<std::__value_type<long,std::pair<std::weak_ptr<turi::sarray<turi::flexible_type>>,unsigned long>>>>::erase((uint64_t **)this + 27, v14);
  if (!*a3)
  {
LABEL_25:
    std::unique_lock<turi::mutex>::unlock((uint64_t)&v64);
    v62 = 0uLL;
    v63 = 0;
    (*(void (**)(_QWORD, void **, uint64_t, __int128 *))(**((_QWORD **)this + 13) + 48))(*((_QWORD *)this + 13), a2, (uint64_t)a2 + 1, &v62);
    std::vector<std::vector<turi::flexible_type>>::vector(&v60, (uint64_t)(*((_QWORD *)this + 16) - *((_QWORD *)this + 15)) >> 4);
    if ((_QWORD)v60 != *((_QWORD *)&v60 + 1))
    {
      v18 = *((_QWORD *)this + 15);
      if (*((_QWORD *)this + 16) != v18)
      {
        v19 = 0;
        v20 = 0;
        v21 = 0;
        v22 = *((_QWORD *)this + 12);
        v23 = v22 * (_QWORD)a2;
        v24 = v22 * ((_QWORD)a2 + 1);
        do
        {
          (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(**(_QWORD **)(v18 + v20) + 48))(*(_QWORD *)(v18 + v20), v23, v24, v60 + v19);
          ++v21;
          v18 = *((_QWORD *)this + 15);
          v20 += 16;
          v19 += 24;
        }
        while (v21 < (*((_QWORD *)this + 16) - v18) >> 4);
      }
    }
    v25 = operator new();
    v26 = v25;
    v27 = *((_QWORD *)this + 1);
    *(_QWORD *)v25 = *(_QWORD *)this;
    *(_QWORD *)(v25 + 8) = v27;
    if (v27)
    {
      v28 = (unint64_t *)(v27 + 8);
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 1, v28));
    }
    v30 = *((_OWORD *)this + 1);
    *(_QWORD *)(v25 + 32) = 0;
    *(_OWORD *)(v25 + 16) = v30;
    *(_QWORD *)(v25 + 40) = 0;
    *(_QWORD *)(v25 + 48) = 0;
    std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>((_QWORD *)(v25 + 32), *((const void **)this + 4), *((_QWORD *)this + 5), (uint64_t)(*((_QWORD *)this + 5) - *((_QWORD *)this + 4)) >> 3);
    v31 = *(_OWORD *)((char *)this + 56);
    *(_QWORD *)(v26 + 72) = 0;
    *(_OWORD *)(v26 + 56) = v31;
    *(_QWORD *)(v26 + 80) = 0;
    *(_QWORD *)(v26 + 88) = 0;
    std::vector<std::shared_ptr<turi::query_eval::planner_node>>::__init_with_size[abi:ne180100]<std::shared_ptr<turi::query_eval::planner_node>*,std::shared_ptr<turi::query_eval::planner_node>*>((char *)(v26 + 72), *((_QWORD **)this + 9), *((_QWORD **)this + 10), (uint64_t)(*((_QWORD *)this + 10) - *((_QWORD *)this + 9)) >> 4);
    v32 = v62;
    *(_QWORD *)(v26 + 104) = 0;
    *(_QWORD *)(v26 + 112) = 0;
    *(_QWORD *)(v26 + 96) = 0;
    *(_OWORD *)(v26 + 96) = *(_OWORD *)v32;
    *(_QWORD *)(v26 + 112) = *(_QWORD *)(v32 + 16);
    *(_QWORD *)v32 = 0;
    *(_QWORD *)(v32 + 8) = 0;
    *(_QWORD *)(v32 + 16) = 0;
    *(_QWORD *)(v26 + 120) = 0;
    *(_QWORD *)(v26 + 128) = 0;
    *(_QWORD *)(v26 + 136) = 0;
    *(_OWORD *)(v26 + 120) = *(_OWORD *)(v32 + 24);
    *(_QWORD *)(v26 + 136) = *(_QWORD *)(v32 + 40);
    *(_QWORD *)(v32 + 24) = 0;
    *(_QWORD *)(v32 + 32) = 0;
    *(_QWORD *)(v32 + 40) = 0;
    *(_OWORD *)(v26 + 144) = v60;
    *(_QWORD *)(v26 + 160) = v61;
    v60 = 0uLL;
    v61 = 0;
    std::shared_ptr<turi::ml_data_internal::ml_data_block>::reset[abi:ne180100]<turi::ml_data_internal::ml_data_block,void>(a3, v26);
    std::unique_lock<turi::mutex>::lock((uint64_t)&v64);
    v34 = *a3;
    v33 = (std::__shared_weak_count *)a3[1];
    v57 = a2;
    v58 = v34;
    v59 = v33;
    if (v33)
    {
      p_shared_weak_owners = (unint64_t *)&v33->__shared_weak_owners_;
      do
        v36 = __ldxr(p_shared_weak_owners);
      while (__stxr(v36 + 1, p_shared_weak_owners));
    }
    v37 = (uint64_t *)std::__tree<std::__value_type<unsigned long,std::weak_ptr<turi::ml_data_internal::ml_data_block>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::weak_ptr<turi::ml_data_internal::ml_data_block>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::weak_ptr<turi::ml_data_internal::ml_data_block>>>>::__emplace_unique_key_args<unsigned long,std::pair<unsigned long const,std::weak_ptr<turi::ml_data_internal::ml_data_block>>>((uint64_t **)this + 27, (unint64_t *)&v57, (uint64_t)&v57);
    v39 = v38;
    if (v59)
      std::__shared_weak_count::__release_weak(v59);
    if ((v39 & 1) != 0)
      goto LABEL_53;
    v55 = 0;
    v56 = 0;
    v40 = (std::__shared_weak_count *)v37[6];
    if (v40 && (v41 = std::__shared_weak_count::lock(v40)) != 0)
    {
      v55 = v37[5];
      v56 = v41;
      if (v55)
      {
        std::shared_ptr<turi::neural_net::mps_command_queue>::operator=[abi:ne180100](a3, &v55);
LABEL_48:
        v46 = v56;
        if (v56)
        {
          p_shared_owners = (unint64_t *)&v56->__shared_owners_;
          do
            v48 = __ldaxr(p_shared_owners);
          while (__stlxr(v48 - 1, p_shared_owners));
          if (!v48)
          {
            ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
            std::__shared_weak_count::__release_weak(v46);
          }
        }
LABEL_53:
        v57 = (void **)&v60;
        std::vector<std::vector<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v57);
        *(_QWORD *)&v60 = &v62;
        std::vector<turi::ml_data_internal::row_data_block>::__destroy_vector::operator()[abi:ne180100]((void ***)&v60);
        return std::unique_lock<turi::mutex>::~unique_lock[abi:ne180100]((uint64_t)&v64);
      }
    }
    else
    {
      v55 = 0;
      v56 = 0;
    }
    std::__tree<std::__value_type<long,std::pair<std::weak_ptr<turi::sarray<turi::flexible_type>>,unsigned long>>,std::__map_value_compare<long,std::__value_type<long,std::pair<std::weak_ptr<turi::sarray<turi::flexible_type>>,unsigned long>>,std::less<long>,true>,std::allocator<std::__value_type<long,std::pair<std::weak_ptr<turi::sarray<turi::flexible_type>>,unsigned long>>>>::erase(v13, v37);
    v43 = *a3;
    v42 = (std::__shared_weak_count *)a3[1];
    v57 = a2;
    v58 = v43;
    v59 = v42;
    if (v42)
    {
      v44 = (unint64_t *)&v42->__shared_weak_owners_;
      do
        v45 = __ldxr(v44);
      while (__stxr(v45 + 1, v44));
    }
    std::__tree<std::__value_type<unsigned long,std::weak_ptr<turi::ml_data_internal::ml_data_block>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::weak_ptr<turi::ml_data_internal::ml_data_block>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::weak_ptr<turi::ml_data_internal::ml_data_block>>>>::__emplace_unique_key_args<unsigned long,std::pair<unsigned long const,std::weak_ptr<turi::ml_data_internal::ml_data_block>>>(v13, (unint64_t *)&v57, (uint64_t)&v57);
    if (v59)
      std::__shared_weak_count::__release_weak(v59);
    goto LABEL_48;
  }
  return std::unique_lock<turi::mutex>::~unique_lock[abi:ne180100]((uint64_t)&v64);
}

void sub_2183F50E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char **a12, uint64_t a13, std::__shared_weak_count *a14, char *a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  uint64_t v21;

  if (a14)
    std::__shared_weak_count::__release_weak(a14);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  a12 = &a15;
  std::vector<std::vector<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  a15 = &a18;
  std::vector<turi::ml_data_internal::row_data_block>::__destroy_vector::operator()[abi:ne180100]((void ***)&a15);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v21);
  std::unique_lock<turi::mutex>::~unique_lock[abi:ne180100]((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void std::shared_ptr<turi::ml_data_internal::ml_data_block>::reset[abi:ne180100]<turi::ml_data_internal::ml_data_block,void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  __int128 v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int128 v7;

  std::shared_ptr<turi::ml_data_internal::ml_data_block>::shared_ptr[abi:ne180100]<turi::ml_data_internal::ml_data_block,void>(&v7, a2);
  v3 = (std::__shared_weak_count *)a1[1];
  v4 = v7;
  *(_QWORD *)&v7 = *a1;
  *((_QWORD *)&v7 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_2183F53BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void turi::sarray_reader<turi::ml_data_internal::row_data_block>::init(uint64_t a1, uint64_t a2, std::string::size_type a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  std::string::size_type v9;
  std::string::size_type v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  std::string::size_type *v17;
  std::string::size_type *v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  _QWORD *v31;
  uint64_t v32;
  std::string v33;
  unint64_t v34;
  void *v35;
  char v36;
  void *__p;
  void *v38;
  uint64_t v39;
  _QWORD *v40[3];
  char *v41;
  char *v42;
  char *v43;
  std::string *v44;

  assert_msg(*(_QWORD *)(a1 + 8) == 0, "Reader already inited");
  turi::sarray_reader<turi::ml_data_internal::row_data_block>::open_format_reader(a1, a2);
  v41 = 0;
  v42 = 0;
  v43 = 0;
  v31 = (_QWORD *)a1;
  v32 = a2;
  if (a3 == -1)
  {
    turi::index_file_information::index_file_information(&v33, (const turi::index_file_information *)(a2 + 8));
    if (v34)
    {
      v19 = 0;
      v20 = 0;
      v21 = v42;
      do
      {
        v22 = v20;
        v20 += *((_QWORD *)__p + v19);
        if (v21 >= v43)
        {
          v23 = v41;
          v24 = (v21 - v41) >> 4;
          v25 = v24 + 1;
          if ((unint64_t)(v24 + 1) >> 60)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          v26 = v43 - v41;
          if ((v43 - v41) >> 3 > v25)
            v25 = v26 >> 3;
          if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF0)
            v27 = 0xFFFFFFFFFFFFFFFLL;
          else
            v27 = v25;
          if (v27)
          {
            v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::flexible_type>>((uint64_t)&v43, v27);
            v23 = v41;
            v21 = v42;
          }
          else
          {
            v28 = 0;
          }
          v29 = &v28[16 * v24];
          *(_QWORD *)v29 = v22;
          *((_QWORD *)v29 + 1) = v20;
          v30 = v29;
          if (v21 != v23)
          {
            do
            {
              *((_OWORD *)v30 - 1) = *((_OWORD *)v21 - 1);
              v30 -= 16;
              v21 -= 16;
            }
            while (v21 != v23);
            v23 = v41;
          }
          v21 = v29 + 16;
          v41 = v30;
          v42 = v29 + 16;
          v43 = &v28[16 * v27];
          if (v23)
            operator delete(v23);
        }
        else
        {
          *(_QWORD *)v21 = v22;
          *((_QWORD *)v21 + 1) = v20;
          v21 += 16;
        }
        v42 = v21;
        ++v19;
      }
      while (v19 < v34);
    }
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v40, v40[1]);
    v44 = (std::string *)&v39;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v44);
    if (__p)
    {
      v38 = __p;
      operator delete(__p);
    }
    if (v36 < 0)
      operator delete(v35);
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v33.__r_.__value_.__l.__data_);
  }
  else
  {
    v33.__r_.__value_.__r.__words[0] = a3;
    if (!a3)
    {
      v44 = &v33;
      turi::sarray_reader<turi::flexible_type>::init(turi::sarray<turi::flexible_type> const&,unsigned long)::{lambda(void)#1}::operator()();
    }
    v6 = turi::sarray_reader<turi::flexible_type>::size(a1);
    v7 = 0;
    v8 = v42;
    do
    {
      v9 = v7 * v6 / a3;
      v10 = ++v7 * v6 / a3;
      if (v8 >= v43)
      {
        v11 = v41;
        v12 = (v8 - v41) >> 4;
        v13 = v12 + 1;
        if ((unint64_t)(v12 + 1) >> 60)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v14 = v43 - v41;
        if ((v43 - v41) >> 3 > v13)
          v13 = v14 >> 3;
        if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
          v15 = 0xFFFFFFFFFFFFFFFLL;
        else
          v15 = v13;
        if (v15)
        {
          v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::flexible_type>>((uint64_t)&v43, v15);
          v11 = v41;
          v8 = v42;
        }
        else
        {
          v16 = 0;
        }
        v17 = (std::string::size_type *)&v16[16 * v12];
        *v17 = v9;
        v17[1] = v10;
        v18 = v17;
        if (v8 != v11)
        {
          do
          {
            *((_OWORD *)v18 - 1) = *((_OWORD *)v8 - 1);
            v18 -= 2;
            v8 -= 16;
          }
          while (v8 != v11);
          v11 = v41;
        }
        v8 = (char *)(v17 + 2);
        v41 = (char *)v18;
        v42 = (char *)(v17 + 2);
        v43 = &v16[16 * v15];
        if (v11)
          operator delete(v11);
      }
      else
      {
        *(_QWORD *)v8 = v9;
        *((_QWORD *)v8 + 1) = v10;
        v8 += 16;
      }
      v42 = v8;
    }
    while (v7 != a3);
  }
  turi::sarray_reader<turi::ml_data_internal::row_data_block>::create_segment_read_buffers(v31, &v41);
  if (v31 + 17 != (_QWORD *)(v32 + 256))
    std::vector<std::shared_ptr<turi::fileio::file_ownership_handle>>::__assign_with_size[abi:ne180100]<std::shared_ptr<turi::fileio::file_ownership_handle>*,std::shared_ptr<turi::fileio::file_ownership_handle>*>((uint64_t)(v31 + 17), *(uint64_t **)(v32 + 256), *(uint64_t **)(v32 + 264), (uint64_t)(*(_QWORD *)(v32 + 264) - *(_QWORD *)(v32 + 256)) >> 4);
  if (v41)
  {
    v42 = v41;
    operator delete(v41);
  }
}

void sub_2183F5790(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  uint64_t v12;
  void *v14;

  v14 = *(void **)(v12 - 120);
  if (v14)
  {
    *(_QWORD *)(v12 - 112) = v14;
    operator delete(v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t turi::sarray_reader<turi::ml_data_internal::row_data_block>::sarray_reader(uint64_t a1)
{
  int v2;

  *(_QWORD *)a1 = &unk_24D93F260;
  *(_QWORD *)(a1 + 8) = 0;
  v2 = pthread_mutex_init((pthread_mutex_t *)(a1 + 16), 0);
  assert_msg(v2 == 0, "Mutex create error %d", v2);
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = a1 + 96;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_QWORD *)(a1 + 176) = 0;
  return a1;
}

void turi::sarray_reader<turi::ml_data_internal::row_data_block>::~sarray_reader(uint64_t a1)
{
  turi::sarray_reader<turi::ml_data_internal::row_data_block>::~sarray_reader(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t turi::sarray_reader<turi::ml_data_internal::row_data_block>::begin@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  pthread_mutex_t *v6;
  _QWORD *i;
  unint64_t v8;
  unint64_t v9;
  unint64_t v11;

  v11 = a2;
  v6 = (pthread_mutex_t *)(a1 + 16);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 16));
  for (i = *(_QWORD **)(a1 + 96); i; i = (_QWORD *)*i)
  {
    v8 = i[4];
    if (v8 <= a2)
    {
      if (v8 >= a2)
        turi::sarray_reader<turi::flexible_type>::begin(unsigned long)const::{lambda(void)#1}::operator()();
      ++i;
    }
  }
  std::__tree<unsigned long>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t **)(a1 + 88), &v11, (uint64_t *)&v11);
  if (!*(_QWORD *)(a1 + 8))
    turi::sarray_reader<turi::flexible_type>::begin(unsigned long)const::{lambda(void)#2}::operator()();
  v9 = v11;
  if (v9 >= (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1))
    turi::sarray_reader<turi::flexible_type>::begin(unsigned long)const::{lambda(void)#3}::operator()();
  turi::sarray_iterator<turi::ml_data_internal::row_data_block>::sarray_iterator(a3, (uint64_t *)(*(_QWORD *)(a1 + 160) + 96 * v11), v11, 1);
  return pthread_mutex_unlock(v6);
}

void sub_2183F5960(_Unwind_Exception *a1)
{
  pthread_mutex_t *v1;

  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t turi::sarray_reader<turi::ml_data_internal::row_data_block>::reset_iterators(uint64_t a1)
{
  _QWORD *v1;
  pthread_mutex_t *v2;
  _QWORD *v3;
  uint64_t *v4;
  uint64_t *v5;

  v1 = (_QWORD *)a1;
  v2 = (pthread_mutex_t *)(a1 + 16);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 16));
  v3 = (_QWORD *)v1[12];
  v1 += 12;
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)(v1 - 1), v3);
  *(v1 - 1) = v1;
  *v1 = 0;
  v1[1] = 0;
  v4 = (uint64_t *)v1[8];
  v5 = (uint64_t *)v1[9];
  while (v4 != v5)
  {
    turi::sarray_reader_buffer<turi::ml_data_internal::row_data_block>::clear(v4);
    v4 += 12;
  }
  return pthread_mutex_unlock(v2);
}

uint64_t turi::sarray_reader<turi::ml_data_internal::row_data_block>::~sarray_reader(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void **v5;

  *(_QWORD *)a1 = &unk_24D93F260;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v5 = (void **)(a1 + 160);
  std::vector<turi::sarray_reader_buffer<turi::ml_data_internal::row_data_block>>::__destroy_vector::operator()[abi:ne180100](&v5);
  v5 = (void **)(a1 + 136);
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v5);
  v3 = *(void **)(a1 + 112);
  if (v3)
  {
    *(_QWORD *)(a1 + 120) = v3;
    operator delete(v3);
  }
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy(a1 + 88, *(_QWORD **)(a1 + 96));
  turi::mutex::~mutex((pthread_mutex_t *)(a1 + 16));
  return a1;
}

void std::vector<turi::sarray_reader_buffer<turi::ml_data_internal::row_data_block>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<turi::sarray_reader_buffer<turi::ml_data_internal::row_data_block>>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, (void **)*v2);
    operator delete(**a1);
  }
}

void std::vector<turi::sarray_reader_buffer<turi::ml_data_internal::row_data_block>>::__base_destruct_at_end[abi:ne180100](uint64_t a1, void **a2)
{
  void **v4;
  void **v5;
  void **v6;

  v4 = *(void ***)(a1 + 8);
  if (v4 != a2)
  {
    do
    {
      v5 = v4 - 12;
      std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v4 - 9));
      v6 = v5;
      std::vector<turi::ml_data_internal::row_data_block>::__destroy_vector::operator()[abi:ne180100](&v6);
      v4 = v5;
    }
    while (v5 != a2);
  }
  *(_QWORD *)(a1 + 8) = a2;
}

uint64_t turi::sarray_iterator<turi::ml_data_internal::row_data_block>::sarray_iterator(uint64_t a1, uint64_t *a2, uint64_t a3, int a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_OWORD *)(a1 + 16) = 0u;
  v5 = a1 + 16;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_QWORD *)(a1 + 64) = 0;
  v6 = a2[9] - a2[7];
  *(_QWORD *)(a1 + 72) = v6;
  if (a4 && v6)
  {
    v7 = turi::sarray_reader_buffer<std::pair<std::vector<turi::flexible_type>,std::string>>::next(a2);
    _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE13__move_assignERS4_NS_17integral_constantIbLb1EEE(v5, (__n128 *)v7);
    std::vector<turi::flexible_type>::__vdeallocate((void **)(a1 + 40));
    v6 = 0;
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(v7 + 24);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(v7 + 40);
    *(_QWORD *)(v7 + 24) = 0;
    *(_QWORD *)(v7 + 32) = 0;
    *(_QWORD *)(v7 + 40) = 0;
  }
  *(_QWORD *)(a1 + 64) = v6;
  return a1;
}

void sub_2183F5BBC(_Unwind_Exception *a1)
{
  turi::ml_data_internal::row_data_block *v1;

  turi::ml_data_internal::row_data_block::~row_data_block(v1);
  _Unwind_Resume(a1);
}

void turi::ml_data_internal::row_data_block::~row_data_block(turi::ml_data_internal::row_data_block *this)
{
  void *v2;
  void **v3;

  v3 = (void **)((char *)this + 24);
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v3);
  v2 = *(void **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v2;
    operator delete(v2);
  }
}

void turi::sarray_reader_buffer<turi::ml_data_internal::row_data_block>::clear(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *a1;
  v2 = a1[1];
  if (v2 != *a1)
  {
    do
    {
      v2 -= 48;
      std::allocator<turi::ml_data_internal::row_data_block>::destroy[abi:ne180100]((uint64_t)(a1 + 2), v2);
    }
    while (v2 != v3);
  }
  a1[1] = v3;
  v4 = a1[7];
  a1[8] = v4;
  a1[11] = v4;
  a1[6] = 0;
}

void std::allocator<turi::ml_data_internal::row_data_block>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v3;
  void **v4;

  v4 = (void **)(a2 + 24);
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v4);
  v3 = *(void **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)(a2 + 8) = v3;
    operator delete(v3);
  }
}

void turi::sarray_reader<turi::ml_data_internal::row_data_block>::open_format_reader(uint64_t a1, uint64_t a2)
{
  const turi::index_file_information *v3;
  uint64_t v4;
  uint64_t v5;
  std::string v6;
  void *v7;
  char v8;
  void *v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12[3];
  std::string v13;
  int v14;
  void *v15;
  char v16;
  void *__p;
  void *v18;
  uint64_t v19;
  _QWORD *v20[3];
  void **v21;

  v3 = (const turi::index_file_information *)(a2 + 8);
  turi::index_file_information::index_file_information(&v13, (const turi::index_file_information *)(a2 + 8));
  v4 = v14;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v20, v20[1]);
  v21 = (void **)&v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v21);
  if (__p)
  {
    v18 = __p;
    operator delete(__p);
  }
  if (v16 < 0)
    operator delete(v15);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  if (v4 != 2)
  {
    if (v4 != 1)
    {
      if (!v4)
        turi::sarray_reader<turi::flexible_type>::open_format_reader(turi::sarray<turi::flexible_type> const&)::{lambda(void)#1}::operator()();
      *(_QWORD *)(a1 + 8) = 0;
      turi::sarray_reader<turi::flexible_type>::open_format_reader(turi::sarray<turi::flexible_type> const&)::{lambda(void)#3}::operator()();
    }
    turi::sarray_reader<turi::flexible_type>::open_format_reader(turi::sarray<turi::flexible_type> const&)::{lambda(void)#2}::operator()();
  }
  v5 = operator new();
  turi::sarray_format_reader_v2<turi::ml_data_internal::row_data_block>::sarray_format_reader_v2(v5);
  *(_QWORD *)(a1 + 8) = v5;
  turi::index_file_information::index_file_information(&v6, v3);
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v5 + 16))(v5, &v6);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v12, v12[1]);
  v13.__r_.__value_.__r.__words[0] = (std::string::size_type)&v11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v13);
  if (v9)
  {
    v10 = v9;
    operator delete(v9);
  }
  if (v8 < 0)
    operator delete(v7);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
}

void sub_2183F5E18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  turi::index_file_information::~index_file_information((turi::index_file_information *)va);
  _Unwind_Resume(a1);
}

void turi::sarray_reader<turi::ml_data_internal::row_data_block>::create_segment_read_buffers(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v4 = (uint64_t)(a2[1] - *a2) >> 4;
  a1[10] = v4;
  std::vector<unsigned long>::resize((uint64_t)(a1 + 14), v4);
  std::vector<turi::sarray_reader_buffer<turi::ml_data_internal::row_data_block>>::resize(a1 + 20, a1[10]);
  v5 = a1[14];
  if (a1[15] != v5)
  {
    v6 = 0;
    v7 = 0;
    v8 = 0;
    do
    {
      v9 = *a2 + v7;
      *(_QWORD *)(v5 + 8 * v8) = *(_QWORD *)(v9 + 8) - *(_QWORD *)v9;
      turi::sarray_reader_buffer<turi::ml_data_internal::row_data_block>::init((uint64_t *)(a1[20] + v6), (uint64_t)a1, *(_QWORD *)v9, *(_QWORD *)(v9 + 8), 1024);
      ++v8;
      v5 = a1[14];
      v7 += 16;
      v6 += 96;
    }
    while (v8 < (a1[15] - v5) >> 3);
  }
}

uint64_t turi::sarray_format_reader_v2<turi::ml_data_internal::row_data_block>::sarray_format_reader_v2(uint64_t a1)
{
  uint64_t instance;
  int v3;

  *(_QWORD *)a1 = &unk_24D93F2D8;
  instance = turi::v2_block_impl::block_manager::get_instance((turi::v2_block_impl::block_manager *)a1);
  *(_OWORD *)(a1 + 168) = 0u;
  *(_QWORD *)(a1 + 8) = instance;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 40) = -1;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = a1 + 144;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_QWORD *)(a1 + 232) = 0;
  v3 = pthread_mutex_init((pthread_mutex_t *)(a1 + 240), 0);
  assert_msg(v3 == 0, "Mutex create error %d", v3);
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 352) = 0;
  *(_QWORD *)(a1 + 336) = 0;
  return a1;
}

void sub_2183F5FEC(_Unwind_Exception *a1)
{
  uint64_t v1;
  turi::index_file_information *v2;
  void **v3;
  void **v4;
  void *v6;

  v6 = *(void **)(v1 + 216);
  if (v6)
  {
    *(_QWORD *)(v1 + 224) = v6;
    operator delete(v6);
  }
  turi::sarray_format_reader_v2<turi::ml_data_internal::row_data_block>::sarray_format_reader_v2(v4, v3, v1);
  turi::index_file_information::~index_file_information(v2);
  _Unwind_Resume(a1);
}

void turi::sarray_format_reader_v2<turi::ml_data_internal::row_data_block>::~sarray_format_reader_v2(uint64_t a1)
{
  turi::sarray_format_reader_v2<turi::ml_data_internal::row_data_block>::~sarray_format_reader_v2(a1);
  JUMPOUT(0x219A19A08);
}

void turi::sarray_format_reader_v2<turi::ml_data_internal::row_data_block>::open(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;
  __int128 v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  unint64_t *v23;
  char *v24;
  char *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t all_block_info;
  _QWORD *v29;
  unint64_t i;
  unint64_t v31;
  char *v32;
  _QWORD *v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t *v44;
  _QWORD *v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  char *v50;
  unint64_t *v51;
  char *v52;
  char *v53;
  unint64_t *v54;
  __int128 v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  turi::v2_block_impl::typed_decode_stream **v60;
  turi::v2_block_impl::typed_decode_stream **j;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  char *v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  unint64_t v71;
  char *v72;
  _QWORD *v73;
  char *v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  char *v79;
  char *v80;
  char *v81;
  uint64_t v82;
  char **v83;
  uint64_t v84;
  uint64_t v85;
  void **v86;
  char **v87;
  std::string v88;

  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  std::string::operator=((std::string *)(a1 + 16), (const std::string *)a2);
  v4 = *(_QWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 56) = v4;
  std::string::operator=((std::string *)(a1 + 64), (const std::string *)(a2 + 48));
  if (a1 + 16 != a2)
  {
    std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((char *)(a1 + 88), *(char **)(a2 + 72), *(_QWORD *)(a2 + 80), (uint64_t)(*(_QWORD *)(a2 + 80) - *(_QWORD *)(a2 + 72)) >> 3);
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)(a1 + 112), *(std::string **)(a2 + 96), *(__int128 **)(a2 + 104), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 104) - *(_QWORD *)(a2 + 96)) >> 3));
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>((uint64_t **)(a1 + 136), *(__int128 **)(a2 + 120), (__int128 *)(a2 + 128));
  }
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a1 + 168);
  v86 = (void **)(a1 + 192);
  v87 = (char **)(a1 + 168);
  v5 = *(_QWORD *)(a1 + 216);
  v83 = (char **)(a1 + 216);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a1 + 192);
  *(_QWORD *)(a1 + 224) = v5;
  *(_QWORD *)(a1 + 160) = 0;
  v6 = *(_QWORD *)(a2 + 96);
  if (*(_QWORD *)(a2 + 104) == v6)
  {
    v8 = 0;
  }
  else
  {
    v7 = 0;
    v8 = 0;
    v84 = a2;
    do
    {
      v9 = *(_QWORD *)(a1 + 8);
      v10 = (__int128 *)(v6 + 24 * v7);
      if (*((char *)v10 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v88, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
      }
      else
      {
        v11 = *v10;
        v88.__r_.__value_.__r.__words[2] = *((_QWORD *)v10 + 2);
        *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v11;
      }
      v12 = turi::v2_block_impl::block_manager::open_column(v9, (uint64_t)&v88);
      v14 = v13;
      if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v88.__r_.__value_.__l.__data_);
      v16 = *(unint64_t **)(a1 + 224);
      v15 = *(_QWORD *)(a1 + 232);
      v85 = v7;
      if ((unint64_t)v16 >= v15)
      {
        v18 = ((char *)v16 - *v83) >> 4;
        v19 = v18 + 1;
        if ((unint64_t)(v18 + 1) >> 60)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v20 = v15 - (_QWORD)*v83;
        if (v20 >> 3 > v19)
          v19 = v20 >> 3;
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0)
          v21 = 0xFFFFFFFFFFFFFFFLL;
        else
          v21 = v19;
        if (v21)
          v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::flexible_type>>(a1 + 232, v21);
        else
          v22 = 0;
        v23 = (unint64_t *)&v22[16 * v18];
        *v23 = v12;
        v23[1] = v14;
        v25 = *(char **)(a1 + 216);
        v24 = *(char **)(a1 + 224);
        v26 = v23;
        if (v24 != v25)
        {
          do
          {
            *((_OWORD *)v26 - 1) = *((_OWORD *)v24 - 1);
            v26 -= 2;
            v24 -= 16;
          }
          while (v24 != v25);
          v24 = *v83;
        }
        v17 = v23 + 2;
        *(_QWORD *)(a1 + 216) = v26;
        *(_QWORD *)(a1 + 224) = v23 + 2;
        *(_QWORD *)(a1 + 232) = &v22[16 * v21];
        if (v24)
          operator delete(v24);
      }
      else
      {
        *v16 = v12;
        v16[1] = v14;
        v17 = v16 + 2;
      }
      *(_QWORD *)(a1 + 224) = v17;
      v27 = turi::v2_block_impl::block_manager::num_blocks_in_column(*(turi::v2_block_impl::block_manager **)(a1 + 8), v12, v14);
      all_block_info = turi::v2_block_impl::block_manager::get_all_block_info(*(turi::v2_block_impl::block_manager **)(a1 + 8), v12);
      if (v27)
      {
        v29 = (_QWORD *)all_block_info;
        for (i = 0; i != v27; ++i)
        {
          v32 = *(char **)(a1 + 200);
          v31 = *(_QWORD *)(a1 + 208);
          if ((unint64_t)v32 >= v31)
          {
            v34 = (char *)*v86;
            v35 = (v32 - (_BYTE *)*v86) >> 3;
            v36 = v35 + 1;
            if ((unint64_t)(v35 + 1) >> 61)
              std::vector<float>::__throw_length_error[abi:ne180100]();
            v37 = v31 - (_QWORD)v34;
            if (v37 >> 2 > v36)
              v36 = v37 >> 2;
            if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF8)
              v38 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v38 = v36;
            if (v38)
            {
              v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a1 + 208, v38);
              v34 = *(char **)(a1 + 192);
              v32 = *(char **)(a1 + 200);
            }
            else
            {
              v39 = 0;
            }
            v40 = &v39[8 * v35];
            *(_QWORD *)v40 = v8;
            v33 = v40 + 8;
            while (v32 != v34)
            {
              v41 = *((_QWORD *)v32 - 1);
              v32 -= 8;
              *((_QWORD *)v40 - 1) = v41;
              v40 -= 8;
            }
            *(_QWORD *)(a1 + 192) = v40;
            *(_QWORD *)(a1 + 200) = v33;
            *(_QWORD *)(a1 + 208) = &v39[8 * v38];
            if (v34)
              operator delete(v34);
          }
          else
          {
            *(_QWORD *)v32 = v8;
            v33 = v32 + 8;
          }
          *(_QWORD *)(a1 + 200) = v33;
          v42 = *(_QWORD *)(*(_QWORD *)(*v29 + 24 * v14) + 48 * i + 24);
          v44 = *(unint64_t **)(a1 + 176);
          v43 = *(_QWORD *)(a1 + 184);
          if ((unint64_t)v44 >= v43)
          {
            v46 = 0xAAAAAAAAAAAAAAABLL * (((char *)v44 - *v87) >> 3);
            v47 = v46 + 1;
            if (v46 + 1 > 0xAAAAAAAAAAAAAAALL)
              std::vector<float>::__throw_length_error[abi:ne180100]();
            v48 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v43 - (_QWORD)*v87) >> 3);
            if (2 * v48 > v47)
              v47 = 2 * v48;
            if (v48 >= 0x555555555555555)
              v49 = 0xAAAAAAAAAAAAAAALL;
            else
              v49 = v47;
            if (v49)
              v50 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>(a1 + 184, v49);
            else
              v50 = 0;
            v51 = (unint64_t *)&v50[24 * v46];
            *v51 = v12;
            v51[1] = v14;
            v51[2] = i;
            v53 = *(char **)(a1 + 168);
            v52 = *(char **)(a1 + 176);
            v54 = v51;
            if (v52 != v53)
            {
              do
              {
                v55 = *(_OWORD *)(v52 - 24);
                *(v54 - 1) = *((_QWORD *)v52 - 1);
                *(_OWORD *)(v54 - 3) = v55;
                v54 -= 3;
                v52 -= 24;
              }
              while (v52 != v53);
              v52 = *v87;
            }
            v45 = v51 + 3;
            *(_QWORD *)(a1 + 168) = v54;
            *(_QWORD *)(a1 + 176) = v51 + 3;
            *(_QWORD *)(a1 + 184) = &v50[24 * v49];
            if (v52)
              operator delete(v52);
          }
          else
          {
            *v44 = v12;
            v44[1] = v14;
            v45 = v44 + 3;
            v44[2] = i;
          }
          v8 += v42;
          *(_QWORD *)(a1 + 176) = v45;
        }
      }
      v7 = v85 + 1;
      v6 = *(_QWORD *)(v84 + 96);
    }
    while (v85 + 1 < 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v84 + 104) - v6) >> 3));
  }
  v56 = *(uint64_t **)(a1 + 88);
  v57 = *(uint64_t **)(a1 + 96);
  if (v56 != v57)
  {
    v58 = *(_QWORD *)(a1 + 160);
    do
    {
      v59 = *v56++;
      v58 += v59;
      *(_QWORD *)(a1 + 160) = v58;
    }
    while (v56 != v57);
  }
  v60 = *(turi::v2_block_impl::typed_decode_stream ***)(a1 + 336);
  for (j = *(turi::v2_block_impl::typed_decode_stream ***)(a1 + 344);
        j != v60;
        std::allocator<turi::sarray_format_reader_v2<turi::flexible_type>::cache_entry>::destroy[abi:ne180100](a1 + 352, j))
  {
    j -= 23;
  }
  *(_QWORD *)(a1 + 344) = v60;
  std::vector<turi::sarray_format_reader_v2<turi::ml_data_internal::row_data_block>::cache_entry,std::allocator<turi::sarray_format_reader_v2<turi::ml_data_internal::row_data_block>::cache_entry>>::resize((uint64_t *)(a1 + 336), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 176) - *(_QWORD *)(a1 + 168)) >> 3));
  v62 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 176) - *(_QWORD *)(a1 + 168)) >> 3);
  v63 = *(_QWORD *)(a1 + 320);
  v64 = v62 >> 6;
  if ((v62 & 0x3F) != 0)
    ++v64;
  *(_QWORD *)(a1 + 312) = v62;
  *(_QWORD *)(a1 + 320) = v64;
  v65 = (char *)malloc_type_realloc(*(void **)(a1 + 304), 8 * v64, 0x100004000313F17uLL);
  v66 = v65;
  *(_QWORD *)(a1 + 304) = v65;
  v67 = *(_QWORD *)(a1 + 312) & 0x3FLL;
  if (v67)
    *(_QWORD *)&v65[8 * *(_QWORD *)(a1 + 320) - 8] &= ~(-1 << v67);
  v68 = *(_QWORD *)(a1 + 320);
  if (v68 > v63)
  {
    v69 = &v65[8 * v63];
    v70 = 8 * v68 - 8 * v63;
    if (v70 >= 1)
    {
      bzero(v69, 8 * (((unint64_t)v70 >> 3) - ((unint64_t)v70 > 7)) + 8);
      v68 = *(_QWORD *)(a1 + 320);
    }
  }
  if (v68 >= 1)
    bzero(v66, 8 * (v68 - ((v68 & 0x1FFFFFFFFFFFFFFFLL) != 0)) + 8);
  v71 = *(_QWORD *)(a1 + 208);
  v72 = *(char **)(a1 + 200);
  if ((unint64_t)v72 >= v71)
  {
    v74 = (char *)*v86;
    v75 = (v72 - (_BYTE *)*v86) >> 3;
    v76 = v75 + 1;
    if ((unint64_t)(v75 + 1) >> 61)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v77 = v71 - (_QWORD)v74;
    if (v77 >> 2 > v76)
      v76 = v77 >> 2;
    if ((unint64_t)v77 >= 0x7FFFFFFFFFFFFFF8)
      v78 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v78 = v76;
    if (v78)
    {
      v79 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a1 + 208, v78);
      v74 = *(char **)(a1 + 192);
      v72 = *(char **)(a1 + 200);
    }
    else
    {
      v79 = 0;
    }
    v80 = &v79[8 * v75];
    v81 = &v79[8 * v78];
    *(_QWORD *)v80 = *(_QWORD *)(a1 + 160);
    v73 = v80 + 8;
    while (v72 != v74)
    {
      v82 = *((_QWORD *)v72 - 1);
      v72 -= 8;
      *((_QWORD *)v80 - 1) = v82;
      v80 -= 8;
    }
    *(_QWORD *)(a1 + 192) = v80;
    *(_QWORD *)(a1 + 200) = v73;
    *(_QWORD *)(a1 + 208) = v81;
    if (v74)
      operator delete(v74);
  }
  else
  {
    *(_QWORD *)v72 = *(_QWORD *)(a1 + 160);
    v73 = v72 + 8;
  }
  *(_QWORD *)(a1 + 200) = v73;
  if (*(_QWORD *)(a1 + 160) != v8)
    turi::sarray_format_reader_v2<turi::flexible_type>::open(turi::index_file_information)::{lambda(void)#1}::operator()();
}

void sub_2183F66F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unint64_t turi::sarray_format_reader_v2<turi::ml_data_internal::row_data_block>::read_rows(unint64_t *a1, unint64_t a2, unint64_t a3, uint64_t *a4)
{
  unint64_t v6;
  BOOL v7;
  unint64_t v8;
  cppipc *v10;
  unint64_t result;
  uint64_t v12;
  uint64_t v13;
  void *exception;

  if (a1[20] >= a3)
    v6 = a3;
  else
    v6 = a1[20];
  v7 = v6 >= a2;
  v8 = v6 - a2;
  if (v8 != 0 && v7)
  {
    std::vector<turi::ml_data_internal::row_data_block>::resize(a4, v8);
    turi::sarray_format_reader_v2<turi::ml_data_internal::row_data_block>::fetch_rows_from_cache(a1, a2, v6, a4);
    if (cppipc::must_cancel(v10))
    {
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(exception, "Cancelled by user.");
    }
    return 0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 4);
  }
  else
  {
    v13 = *a4;
    v12 = a4[1];
    if (v12 != *a4)
    {
      do
      {
        v12 -= 48;
        std::allocator<turi::ml_data_internal::row_data_block>::destroy[abi:ne180100]((uint64_t)(a4 + 2), v12);
      }
      while (v12 != v13);
    }
    result = 0;
    a4[1] = v13;
  }
  return result;
}

void sub_2183F67F0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t turi::sarray_format_reader_v2<turi::ml_data_internal::row_data_block>::~sarray_format_reader_v2(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void **v7;

  *(_QWORD *)a1 = &unk_24D93F2D8;
  turi::sarray_format_reader_v2<turi::flexible_type>::close((uint64_t *)a1);
  v7 = (void **)(a1 + 336);
  std::vector<turi::sarray_format_reader_v2<turi::flexible_type>::cache_entry,std::allocator<turi::sarray_format_reader_v2<turi::flexible_type>::cache_entry>>::__destroy_vector::operator()[abi:ne180100](&v7);
  free(*(void **)(a1 + 304));
  turi::mutex::~mutex((pthread_mutex_t *)(a1 + 240));
  v2 = *(void **)(a1 + 216);
  if (v2)
  {
    *(_QWORD *)(a1 + 224) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 192);
  if (v3)
  {
    *(_QWORD *)(a1 + 200) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 168);
  if (v4)
  {
    *(_QWORD *)(a1 + 176) = v4;
    operator delete(v4);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1 + 136, *(_QWORD **)(a1 + 144));
  v7 = (void **)(a1 + 112);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v7);
  v5 = *(void **)(a1 + 88);
  if (v5)
  {
    *(_QWORD *)(a1 + 96) = v5;
    operator delete(v5);
  }
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

void std::vector<turi::sarray_format_reader_v2<turi::ml_data_internal::row_data_block>::cache_entry,std::allocator<turi::sarray_format_reader_v2<turi::ml_data_internal::row_data_block>::cache_entry>>::resize(uint64_t *a1, unint64_t a2)
{
  turi::v2_block_impl::typed_decode_stream **v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;

  v3 = (turi::v2_block_impl::typed_decode_stream **)a1[1];
  v4 = 0xD37A6F4DE9BD37A7 * (((uint64_t)v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<turi::sarray_format_reader_v2<turi::ml_data_internal::row_data_block>::cache_entry,std::allocator<turi::sarray_format_reader_v2<turi::ml_data_internal::row_data_block>::cache_entry>>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 184 * a2;
    while (v3 != (turi::v2_block_impl::typed_decode_stream **)v7)
    {
      v3 -= 23;
      std::allocator<turi::sarray_format_reader_v2<turi::flexible_type>::cache_entry>::destroy[abi:ne180100]((uint64_t)(a1 + 2), v3);
    }
    a1[1] = v7;
  }
}

void **std::vector<turi::sarray_format_reader_v2<turi::ml_data_internal::row_data_block>::cache_entry,std::allocator<turi::sarray_format_reader_v2<turi::ml_data_internal::row_data_block>::cache_entry>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  char *v14;
  uint64_t v15;
  char *v16;
  void *v17[2];
  char *v18;
  char *v19;
  uint64_t v20;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0xD37A6F4DE9BD37A7 * ((v6 - v7) >> 3) >= a2)
    return (void **)std::vector<turi::sarray_format_reader_v2<turi::ml_data_internal::row_data_block>::cache_entry,std::allocator<turi::sarray_format_reader_v2<turi::ml_data_internal::row_data_block>::cache_entry>>::__construct_at_end((uint64_t)a1, a2);
  v8 = 0xD37A6F4DE9BD37A7 * ((v7 - *a1) >> 3);
  v9 = v8 + a2;
  if (v8 + a2 > 0x1642C8590B21642)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  v10 = 0xD37A6F4DE9BD37A7 * ((v5 - *a1) >> 3);
  if (2 * v10 > v9)
    v9 = 2 * v10;
  if (v10 >= 0xB21642C8590B21)
    v11 = 0x1642C8590B21642;
  else
    v11 = v9;
  v20 = v4;
  if (v11)
    v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::sarray_format_reader_v2<turi::flexible_type>::cache_entry>>(v4, v11);
  else
    v12 = 0;
  v14 = &v12[184 * v8];
  v17[0] = v12;
  v17[1] = v14;
  v18 = v14;
  v19 = &v12[184 * v11];
  v15 = 184 * a2;
  v16 = &v14[184 * a2];
  do
  {
    *((_QWORD *)v14 + 22) = 0;
    *((_OWORD *)v14 + 9) = 0u;
    *((_OWORD *)v14 + 10) = 0u;
    *((_OWORD *)v14 + 7) = 0u;
    *((_OWORD *)v14 + 8) = 0u;
    *((_OWORD *)v14 + 5) = 0u;
    *((_OWORD *)v14 + 6) = 0u;
    *((_OWORD *)v14 + 3) = 0u;
    *((_OWORD *)v14 + 4) = 0u;
    *((_OWORD *)v14 + 1) = 0u;
    *((_OWORD *)v14 + 2) = 0u;
    *(_OWORD *)v14 = 0u;
    turi::sarray_format_reader_v2<turi::flexible_type>::cache_entry::cache_entry((uint64_t)v14);
    v14 += 184;
    v15 -= 184;
  }
  while (v15);
  v18 = v16;
  std::vector<turi::sarray_format_reader_v2<turi::ml_data_internal::row_data_block>::cache_entry,std::allocator<turi::sarray_format_reader_v2<turi::ml_data_internal::row_data_block>::cache_entry>>::__swap_out_circular_buffer(a1, v17);
  return std::__split_buffer<turi::sarray_format_reader_v2<turi::flexible_type>::cache_entry,std::allocator<turi::sarray_format_reader_v2<turi::flexible_type>::cache_entry> &>::~__split_buffer(v17);
}

void sub_2183F6AD0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<turi::sarray_format_reader_v2<turi::flexible_type>::cache_entry,std::allocator<turi::sarray_format_reader_v2<turi::flexible_type>::cache_entry> &>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<turi::sarray_format_reader_v2<turi::ml_data_internal::row_data_block>::cache_entry,std::allocator<turi::sarray_format_reader_v2<turi::ml_data_internal::row_data_block>::cache_entry>>::__construct_at_end(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = result;
  v3 = *(_QWORD *)(result + 8);
  if (a2)
  {
    v4 = v3 + 184 * a2;
    v5 = 184 * a2;
    do
    {
      *(_QWORD *)(v3 + 176) = 0;
      *(_OWORD *)(v3 + 144) = 0u;
      *(_OWORD *)(v3 + 160) = 0u;
      *(_OWORD *)(v3 + 112) = 0u;
      *(_OWORD *)(v3 + 128) = 0u;
      *(_OWORD *)(v3 + 80) = 0u;
      *(_OWORD *)(v3 + 96) = 0u;
      *(_OWORD *)(v3 + 48) = 0u;
      *(_OWORD *)(v3 + 64) = 0u;
      *(_OWORD *)(v3 + 16) = 0u;
      *(_OWORD *)(v3 + 32) = 0u;
      *(_OWORD *)v3 = 0u;
      result = turi::sarray_format_reader_v2<turi::flexible_type>::cache_entry::cache_entry(v3);
      v3 += 184;
      v5 -= 184;
    }
    while (v5);
    v3 = v4;
  }
  *(_QWORD *)(v2 + 8) = v3;
  return result;
}

void sub_2183F6B68(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<turi::sarray_format_reader_v2<turi::ml_data_internal::row_data_block>::cache_entry,std::allocator<turi::sarray_format_reader_v2<turi::ml_data_internal::row_data_block>::cache_entry>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::sarray_format_reader_v2<turi::ml_data_internal::row_data_block>::cache_entry>,std::reverse_iterator<turi::sarray_format_reader_v2<turi::ml_data_internal::row_data_block>::cache_entry*>,std::reverse_iterator<turi::sarray_format_reader_v2<turi::ml_data_internal::row_data_block>::cache_entry*>,std::reverse_iterator<turi::sarray_format_reader_v2<turi::ml_data_internal::row_data_block>::cache_entry*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::sarray_format_reader_v2<turi::ml_data_internal::row_data_block>::cache_entry>,std::reverse_iterator<turi::sarray_format_reader_v2<turi::ml_data_internal::row_data_block>::cache_entry*>,std::reverse_iterator<turi::sarray_format_reader_v2<turi::ml_data_internal::row_data_block>::cache_entry*>,std::reverse_iterator<turi::sarray_format_reader_v2<turi::ml_data_internal::row_data_block>::cache_entry*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  v13 = 0;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v9 -= 184;
      turi::sarray_format_reader_v2<turi::flexible_type>::cache_entry::cache_entry(v7 - 184, v9);
      v7 = *((_QWORD *)&v15 + 1) - 184;
      *((_QWORD *)&v15 + 1) -= 184;
    }
    while (v9 != a5);
    v10 = v15;
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::sarray_format_reader_v2<turi::ml_data_internal::row_data_block>::cache_entry>,std::reverse_iterator<turi::sarray_format_reader_v2<turi::ml_data_internal::row_data_block>::cache_entry*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

void sub_2183F6C88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::sarray_format_reader_v2<turi::ml_data_internal::row_data_block>::cache_entry>,std::reverse_iterator<turi::sarray_format_reader_v2<turi::ml_data_internal::row_data_block>::cache_entry*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::sarray_format_reader_v2<turi::ml_data_internal::row_data_block>::cache_entry>,std::reverse_iterator<turi::sarray_format_reader_v2<turi::ml_data_internal::row_data_block>::cache_entry*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<turi::sarray_format_reader_v2<turi::flexible_type>::cache_entry>,std::reverse_iterator<turi::sarray_format_reader_v2<turi::flexible_type>::cache_entry*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::vector<turi::ml_data_internal::row_data_block>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;

  v3 = a1[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 4);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<turi::ml_data_internal::row_data_block>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 48 * a2;
    while (v3 != v7)
    {
      v3 -= 48;
      std::allocator<turi::ml_data_internal::row_data_block>::destroy[abi:ne180100]((uint64_t)(a1 + 2), v3);
    }
    a1[1] = v7;
  }
}

void turi::sarray_format_reader_v2<turi::ml_data_internal::row_data_block>::fetch_rows_from_cache(unint64_t *a1, unint64_t a2, unint64_t a3, _QWORD *a4)
{
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned __int8 *v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD **v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  BOOL v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD **v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t *v48;
  uint64_t **v49;
  _QWORD *v50;

  v6 = a1;
  v7 = turi::sarray_format_reader_v2<turi::flexible_type>::block_offset_containing_row(a1, a2);
  v44 = a3;
  v42 = turi::sarray_format_reader_v2<turi::flexible_type>::block_offset_containing_row(v6, a3 - 1);
  if (v7 < v42 + 1)
  {
    v8 = 0;
    v45 = v6;
    v50 = a4;
    do
    {
      v9 = v6[24];
      v10 = *(_QWORD *)(v9 + 8 * v7);
      v11 = v7 + 1;
      v12 = *(_QWORD *)(v9 + 8 * (v7 + 1));
      v13 = v6[42];
      v14 = (unsigned __int8 *)(v13 + 184 * v7);
      do
      {
        while (*v14 == 1)
          ;
        do
          v15 = __ldaxr(v14);
        while (__stlxr(1u, v14));
      }
      while (v15);
      if (v10 <= a2)
        v16 = a2;
      else
        v16 = v10;
      v17 = v13 + 184 * v7;
      v20 = *(_QWORD *)(v17 + 24);
      v19 = (_QWORD **)(v17 + 24);
      v18 = v20;
      if (v12 >= v44)
        v21 = v44;
      else
        v21 = v12;
      v22 = (unint64_t)*(v19 - 2);
      v48 = (unint64_t *)(v19 - 2);
      if (v18)
        v23 = v22 > v16;
      else
        v23 = 1;
      if (v23)
      {
        turi::sarray_format_reader_v2<turi::ml_data_internal::row_data_block>::fetch_cache_from_file(v6, v7, (uint64_t)v14);
        v22 = *v48;
      }
      v24 = v6[24];
      v25 = *(_QWORD *)(v24 + 8 * v7);
      v46 = v7;
      v47 = v7 + 1;
      if (v22 == v16)
      {
        v26 = v21;
        v23 = v21 > v16;
        v27 = v21 - v16;
        v41 = v26;
        if (v23)
        {
          v28 = 0;
          v29 = -48 * v25 + 48 * v16;
          v30 = 48 * v8;
          v8 = v8 + v26 - v16;
          do
          {
            v31 = **v19 + v29 + v28;
            v32 = v19;
            v33 = *v50 + v30 + v28;
            _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE13__move_assignERS4_NS_17integral_constantIbLb1EEE(v33, (__n128 *)v31);
            std::vector<turi::flexible_type>::__vdeallocate((void **)(v33 + 24));
            *(_OWORD *)(v33 + 24) = *(_OWORD *)(v31 + 24);
            *(_QWORD *)(v33 + 40) = *(_QWORD *)(v31 + 40);
            v19 = v32;
            *(_QWORD *)(v31 + 24) = 0;
            *(_QWORD *)(v31 + 32) = 0;
            *(_QWORD *)(v31 + 40) = 0;
            v28 += 48;
            --v27;
          }
          while (v27);
          v6 = v45;
          v7 = v46;
          v24 = v45[24];
          a4 = v50;
          v11 = v47;
        }
        *v48 = v41;
        if (v41 == *(_QWORD *)(v24 + 8 * v11))
          turi::sarray_format_reader_v2<turi::ml_data_internal::row_data_block>::release_cache(v6, v7);
      }
      else
      {
        v34 = v21 - v16;
        if (v21 > v16)
        {
          v49 = v19;
          v35 = 0;
          v36 = -48 * v25 + 48 * v16;
          v37 = 48 * v8;
          do
          {
            v38 = **v49;
            v39 = a4;
            v40 = *a4;
            if (v40 + v37 != v38 + v36)
            {
              std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((char *)(v40 + v37 + v35), *(char **)(v38 + v36 + v35), *(_QWORD *)(v38 + v36 + v35 + 8), (uint64_t)(*(_QWORD *)(v38 + v36 + v35 + 8) - *(_QWORD *)(v38 + v36 + v35)) >> 3);
              std::vector<turi::flexible_type>::__assign_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v40 + v37 + v35 + 24, *(uint64_t **)(v38 + v36 + v35 + 24), *(uint64_t **)(v38 + v36 + v35 + 32), (uint64_t)(*(_QWORD *)(v38 + v36 + v35 + 32) - *(_QWORD *)(v38 + v36 + v35 + 24)) >> 4);
            }
            ++v8;
            v35 += 48;
            --v34;
            a4 = v39;
          }
          while (v34);
        }
      }
      __dmb(0xBu);
      *v14 = 0;
      v6 = v45;
      v7 = v47;
    }
    while (v46 != v42);
  }
}

void sub_2183F700C(_Unwind_Exception *a1)
{
  _BYTE *v1;

  __dmb(0xBu);
  *v1 = 0;
  _Unwind_Resume(a1);
}

void std::vector<turi::ml_data_internal::row_data_block>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  size_t v14;
  void *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 4) >= a2)
  {
    if (a2)
    {
      v13 = 48 * ((48 * a2 - 48) / 0x30) + 48;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 4);
    v9 = v8 + a2;
    if (v8 + a2 > 0x555555555555555)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 4);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x2AAAAAAAAAAAAAALL)
      v11 = 0x555555555555555;
    else
      v11 = v9;
    v19 = v4;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>>(v4, v11);
    else
      v12 = 0;
    v15 = v12;
    v16 = &v12[48 * v8];
    v18 = &v12[48 * v11];
    v14 = 48 * ((48 * a2 - 48) / 0x30) + 48;
    bzero(v16, v14);
    v17 = &v16[v14];
    std::vector<turi::ml_data_internal::row_data_block>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<turi::ml_data_internal::row_data_block>::~__split_buffer(&v15);
  }
}

void sub_2183F7170(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<turi::ml_data_internal::row_data_block>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<turi::ml_data_internal::row_data_block>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::ml_data_internal::row_data_block>,std::reverse_iterator<turi::ml_data_internal::row_data_block*>,std::reverse_iterator<turi::ml_data_internal::row_data_block*>,std::reverse_iterator<turi::ml_data_internal::row_data_block*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::ml_data_internal::row_data_block>,std::reverse_iterator<turi::ml_data_internal::row_data_block*>,std::reverse_iterator<turi::ml_data_internal::row_data_block*>,std::reverse_iterator<turi::ml_data_internal::row_data_block*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 48) = 0;
      *(_QWORD *)(v7 - 40) = 0;
      *(_QWORD *)(v7 - 32) = 0;
      v8 = *(_OWORD *)(a3 - 48);
      a3 -= 48;
      *(_OWORD *)(v7 - 48) = v8;
      *(_QWORD *)(v7 - 32) = *(_QWORD *)(a3 + 16);
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(a3 + 24);
      *(_QWORD *)(v7 - 8) = *(_QWORD *)(a3 + 40);
      *(_QWORD *)(a3 + 24) = 0;
      *(_QWORD *)(a3 + 32) = 0;
      *(_QWORD *)(a3 + 40) = 0;
      v7 = *((_QWORD *)&v14 + 1) - 48;
      *((_QWORD *)&v14 + 1) -= 48;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::ml_data_internal::row_data_block>,std::reverse_iterator<turi::ml_data_internal::row_data_block*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::ml_data_internal::row_data_block>,std::reverse_iterator<turi::ml_data_internal::row_data_block*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<turi::ml_data_internal::row_data_block>,std::reverse_iterator<turi::ml_data_internal::row_data_block*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<turi::ml_data_internal::row_data_block>,std::reverse_iterator<turi::ml_data_internal::row_data_block*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1[2] + 8);
  v2 = *(_QWORD *)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      std::allocator<turi::ml_data_internal::row_data_block>::destroy[abi:ne180100](v3, v1);
      v1 += 48;
    }
    while (v1 != v2);
  }
}

void **std::__split_buffer<turi::ml_data_internal::row_data_block>::~__split_buffer(void **a1)
{
  std::__split_buffer<turi::ml_data_internal::row_data_block>::clear[abi:ne180100](a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<turi::ml_data_internal::row_data_block>::clear[abi:ne180100](_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 48;
    std::allocator<turi::ml_data_internal::row_data_block>::destroy[abi:ne180100](v4, i - 48);
  }
}

void turi::sarray_format_reader_v2<turi::ml_data_internal::row_data_block>::fetch_cache_from_file(unint64_t *a1, unint64_t a2, uint64_t a3)
{
  uint64_t *v6;
  uint64_t **v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  __int128 v22;
  uint64_t v23;
  __int128 v24;

  v7 = (uint64_t **)(a3 + 24);
  v6 = *(uint64_t **)(a3 + 24);
  if (!v6)
  {
    turi::buffer_pool<std::vector<turi::ml_data_internal::row_data_block>>::get_new_buffer(&turi::sarray_format_reader_v2<turi::ml_data_internal::row_data_block>::m_buffer_pool, (uint64_t)&v24);
    std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)v7, &v24);
    v8 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
    if (*((_QWORD *)&v24 + 1))
    {
      v9 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    v6 = *v7;
  }
  v11 = a1[21] + 24 * a2;
  v12 = a1[1];
  v13 = *(_QWORD *)(v11 + 16);
  v22 = *(_OWORD *)v11;
  v23 = v13;
  if (!turi::v2_block_impl::block_manager::read_block<turi::ml_data_internal::row_data_block>(v12, &v22, v6, 0))
    turi::sarray_format_reader_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::fetch_cache_from_file(unsigned long,turi::sarray_format_reader_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::cache_entry &)::{lambda(void)#1}::operator()();
  *(_QWORD *)(a3 + 8) = *(_QWORD *)(a1[24] + 8 * a2);
  *(_WORD *)(a3 + 16) = 256;
  v14 = a1[38];
  if ((*(_QWORD *)(v14 + 8 * (a2 >> 6)) & (1 << a2)) == 0)
  {
    v15 = a1 + 41;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 + 1, v15));
    v14 = a1[38];
  }
  v17 = (unint64_t *)(v14 + 8 * (a2 >> 6));
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 | (1 << a2), v17));
  v19 = a1[41];
  if (v19 != turi::SFRAME_MAX_BLOCKS_IN_CACHE)
  {
    v20 = turi::SFRAME_MAX_BLOCKS_IN_CACHE - v19;
    do
    {
      if (a1[41] <= turi::SFRAME_MAX_BLOCKS_IN_CACHE)
        break;
      turi::sarray_format_reader_v2<turi::ml_data_internal::row_data_block>::try_evict_something_from_cache((turi::random *)a1);
    }
    while (!__CFADD__(v20++, 1));
  }
}

void turi::sarray_format_reader_v2<turi::ml_data_internal::row_data_block>::release_cache(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  v2 = a1[42];
  if (*(_BYTE *)(v2 + 184 * a2 + 17))
  {
    v5 = 184 * a2;
    turi::buffer_pool<std::vector<turi::ml_data_internal::row_data_block>>::release_buffer((uint64_t)&turi::sarray_format_reader_v2<turi::ml_data_internal::row_data_block>::m_buffer_pool, (uint64_t **)(v2 + 184 * a2 + 24));
    std::shared_ptr<turi::neural_net::Subscriber<std::unique_ptr<turi::style_transfer::Checkpoint>>>::reset[abi:ne180100]((_QWORD *)(a1[42] + v5 + 24));
    turi::v2_block_impl::encoded_block::release((turi::v2_block_impl::encoded_block *)(a1[42] + v5 + 40));
    turi::v2_block_impl::encoded_block_range::release((turi::v2_block_impl::typed_decode_stream **)(a1[42] + v5 + 112));
    *(_BYTE *)(a1[42] + v5 + 17) = 0;
    v6 = (unint64_t *)(a1[38] + 8 * (a2 >> 6));
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 & ~(1 << a2), v6));
    v8 = a1 + 41;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
  }
}

uint64_t turi::buffer_pool<std::vector<turi::ml_data_internal::row_data_block>>::get_new_buffer@<X0>(pthread_mutex_t *a1@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t result;
  _QWORD *v15;

  v4 = &a1[1].__opaque[24];
  if (!*(_QWORD *)a1[2].__opaque)
  {
    pthread_mutex_lock(a1);
    v6 = *(_QWORD *)a1[1].__opaque;
    v5 = *(_QWORD *)&a1[1].__opaque[8];
    if (v5 != v6)
    {
      v7 = 0;
      v8 = 0;
      do
      {
        v9 = *(_QWORD *)(v6 + v7 + 8);
        if (v9 && !*(_QWORD *)(v9 + 8))
        {
          std::deque<std::shared_ptr<std::vector<turi::ml_data_internal::row_data_block>>>::push_back(v4, (__int128 *)(v6 + v7));
          v6 = *(_QWORD *)a1[1].__opaque;
          v5 = *(_QWORD *)&a1[1].__opaque[8];
        }
        ++v8;
        v7 += 16;
      }
      while (v8 < (v5 - v6) >> 4);
    }
    pthread_mutex_unlock(a1);
    if (!*(_QWORD *)a1[2].__opaque)
      goto LABEL_15;
  }
  pthread_mutex_lock(a1);
  v10 = *(_QWORD *)a1[2].__opaque;
  if (v10)
  {
    v11 = *(_OWORD *)(*(_QWORD *)(*(_QWORD *)&a1[1].__opaque[32]
                                + (((unint64_t)(v10 + a1[2].__sig - 1) >> 5) & 0x7FFFFFFFFFFFFF8))
                    + 16 * (v10 + LOBYTE(a1[2].__sig) - 1));
    *(_OWORD *)a2 = v11;
    if (*((_QWORD *)&v11 + 1))
    {
      v12 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
    std::deque<std::shared_ptr<std::vector<turi::flexible_type>>>::pop_back(v4);
  }
  result = pthread_mutex_unlock(a1);
  if (!v10)
  {
LABEL_15:
    v15 = operator new(0x30uLL);
    v15[2] = 0;
    *v15 = &unk_24D93F378;
    v15[1] = 0;
    v15[4] = 0;
    v15[5] = 0;
    *(_QWORD *)(a2 + 8) = v15;
    v15[3] = 0;
    *(_QWORD *)a2 = v15 + 3;
    pthread_mutex_lock(a1);
    if (a1[1].__sig > (unint64_t)((uint64_t)(*(_QWORD *)&a1[1].__opaque[8] - *(_QWORD *)a1[1].__opaque) >> 4))
      std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::push_back[abi:ne180100]((char **)a1[1].__opaque, (__int128 *)a2);
    return pthread_mutex_unlock(a1);
  }
  return result;
}

void sub_2183F7750(_Unwind_Exception *a1)
{
  uint64_t v1;
  pthread_mutex_t *v2;

  pthread_mutex_unlock(v2);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

BOOL turi::v2_block_impl::block_manager::read_block<turi::ml_data_internal::row_data_block>(uint64_t a1, __int128 *a2, uint64_t *a3, _QWORD *a4)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD v13[5];
  __int128 v14;
  uint64_t v15;
  __n128 v16;

  v14 = *a2;
  v15 = *((_QWORD *)a2 + 2);
  turi::v2_block_impl::block_manager::read_block(a1, (unint64_t *)&v14, a4, &v16);
  v6 = v16.n128_u64[0];
  if (v16.n128_u64[0])
  {
    v7 = *(_QWORD *)v16.n128_u64[0];
    v8 = *(_QWORD *)(v16.n128_u64[0] + 8) - *(_QWORD *)v16.n128_u64[0];
    v13[0] = 0;
    v13[1] = 0;
    v13[2] = v7;
    v13[3] = 0;
    v13[4] = v8;
    turi::archive_detail::vector_deserialize_impl<turi::iarchive,turi::ml_data_internal::row_data_block,false>::exec((turi::iarchive *)v13, a3);
  }
  turi::buffer_pool<std::vector<char>>::release_buffer((pthread_mutex_t *)(a1 + 232), &v16);
  v9 = (std::__shared_weak_count *)v16.n128_u64[1];
  if (v16.n128_u64[1])
  {
    v10 = (unint64_t *)(v16.n128_u64[1] + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  return v6 != 0;
}

void sub_2183F7878(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v1 - 48);
  _Unwind_Resume(a1);
}

void turi::sarray_format_reader_v2<turi::ml_data_internal::row_data_block>::try_evict_something_from_cache(turi::random *a1)
{
  uint64_t v2;
  unint64_t v3;
  turi::random::generator *source;
  unint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  _BYTE *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char v20;

  v2 = (uint64_t)(*((_QWORD *)a1 + 43) - *((_QWORD *)a1 + 42)) >> 3;
  v3 = 0xD37A6F4DE9BD37A7 * v2 - 1;
  if (0xD37A6F4DE9BD37A7 * v2 != 1)
  {
    source = turi::random::get_source(a1);
    pthread_mutex_lock((pthread_mutex_t *)((char *)source + 6288));
    v3 = boost::random::detail::generate_uniform_int<boost::random::rand48,unsigned long>((uint64_t *)source + 785, 0, v3);
    pthread_mutex_unlock((pthread_mutex_t *)((char *)source + 6288));
  }
  v5 = v3 >> 6;
  v6 = (_QWORD *)*((_QWORD *)a1 + 38);
  v7 = v6[v3 >> 6];
  if (((v7 >> v3) & 1) != 0)
    goto LABEL_4;
  v9 = v7 & ~(0xFFFFFFFFFFFFFFFFLL >> (v3 & 0x3F ^ 0x3F));
  if (v9)
  {
    v3 = __clz(__rbit64(v9)) | v3 & 0xFFFFFFFFFFFFFFC0;
LABEL_15:
    if (v3 < *((_QWORD *)a1 + 39))
      goto LABEL_4;
  }
  else
  {
    v10 = v5 << 6;
    v11 = v5 + 1;
    while (v11 < *((_QWORD *)a1 + 40))
    {
      v12 = v6[v11];
      v10 += 64;
      ++v11;
      if (v12)
      {
        v3 = __clz(__rbit64(v12)) + v10;
        goto LABEL_15;
      }
    }
  }
  if ((*v6 & 1) == 0)
  {
    v13 = *v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v13)
    {
      v3 = __clz(__rbit64(v13));
      goto LABEL_4;
    }
    v14 = *((_QWORD *)a1 + 40);
    if (v14 <= 1)
      v14 = 1;
    v15 = v14 - 1;
    v16 = v6 + 1;
    while (v15)
    {
      v18 = *v16++;
      v17 = v18;
      --v15;
      v13 -= 64;
      if (v18)
      {
        v3 = __clz(__rbit64(v17)) - v13;
        goto LABEL_4;
      }
    }
  }
  v3 = 0;
LABEL_4:
  v19 = *((_QWORD *)a1 + 42) + 184 * v3;
  v20 = 0;
  if (std::unique_lock<turi::simple_spinlock>::try_lock((uint64_t)&v19))
    turi::sarray_format_reader_v2<turi::ml_data_internal::row_data_block>::release_cache(a1, v3);
  if (v20)
  {
    v8 = (_BYTE *)v19;
    __dmb(0xBu);
    *v8 = 0;
  }
}

void sub_2183F7A34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _BYTE *a9, char a10)
{
  if (a10)
  {
    __dmb(0xBu);
    *a9 = 0;
  }
  _Unwind_Resume(a1);
}

void std::deque<std::shared_ptr<std::vector<turi::ml_data_internal::row_data_block>>>::push_back(_QWORD *a1, __int128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  unint64_t *v10;
  unint64_t v11;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = 32 * (v4 - v5) - 1;
  v7 = a1[5];
  v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<std::shared_ptr<std::vector<turi::ml_data_internal::row_data_block>>>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5];
    v8 = v7 + a1[4];
  }
  v9 = *a2;
  *(_OWORD *)(*(_QWORD *)(v5 + ((v8 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v8) = *a2;
  if (*((_QWORD *)&v9 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v9 + 1) + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v7 = a1[5];
  }
  a1[5] = v7 + 1;
}

void std::deque<std::shared_ptr<std::vector<turi::ml_data_internal::row_data_block>>>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x100;
  v4 = v2 - 256;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      std::__split_buffer<char *>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    std::__split_buffer<char *>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  std::__split_buffer<char *>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<char *>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_2183F7DB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<std::vector<turi::ml_data_internal::row_data_block>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D93F378;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::vector<turi::ml_data_internal::row_data_block>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D93F378;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

void std::__shared_ptr_emplace<std::vector<turi::ml_data_internal::row_data_block>>::__on_zero_shared(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 24);
  std::vector<turi::ml_data_internal::row_data_block>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void turi::archive_detail::vector_deserialize_impl<turi::iarchive,turi::ml_data_internal::row_data_block,false>::exec(turi::iarchive *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t i;
  unint64_t v10;

  v10 = 0;
  v4 = *((_QWORD *)a1 + 2);
  if (v4)
  {
    v5 = *((_QWORD *)a1 + 3);
    v10 = *(_QWORD *)(v4 + v5);
    *((_QWORD *)a1 + 3) = v5 + 8;
  }
  else
  {
    std::istream::read();
  }
  v7 = *a2;
  v6 = a2[1];
  if (v6 != *a2)
  {
    do
    {
      v6 -= 48;
      std::allocator<turi::ml_data_internal::row_data_block>::destroy[abi:ne180100]((uint64_t)(a2 + 2), v6);
    }
    while (v6 != v7);
  }
  a2[1] = v7;
  std::vector<turi::ml_data_internal::row_data_block>::resize(a2, v10);
  if (v10)
  {
    v8 = 0;
    for (i = 0; i < v10; ++i)
    {
      turi::ml_data_internal::row_data_block::load((turi::ml_data_internal::row_data_block *)(*a2 + v8), a1);
      v8 += 48;
    }
  }
}

void turi::buffer_pool<std::vector<turi::ml_data_internal::row_data_block>>::release_buffer(uint64_t a1, uint64_t **a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;

  v2 = *a2;
  if (*a2)
  {
    v6 = *v2;
    v5 = v2[1];
    if (v5 == *v2)
    {
      v7 = *a2;
    }
    else
    {
      do
      {
        v5 -= 48;
        std::allocator<turi::ml_data_internal::row_data_block>::destroy[abi:ne180100]((uint64_t)(v2 + 2), v5);
      }
      while (v5 != v6);
      v7 = *a2;
      v5 = **a2;
    }
    v2[1] = v6;
    if (0xAAAAAAAAAAAAAAABLL * ((v7[2] - v5) >> 4) >= 0x100000)
      std::vector<turi::ml_data_internal::row_data_block>::shrink_to_fit((void **)v7);
    if ((unint64_t)(*(_QWORD *)(a1 + 136) + ((uint64_t)(*(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72)) >> 4)) < *(_QWORD *)(a1 + 64))
    {
      pthread_mutex_lock((pthread_mutex_t *)a1);
      std::deque<std::shared_ptr<std::vector<turi::ml_data_internal::row_data_block>>>::push_back((_QWORD *)(a1 + 96), (__n128 *)a2);
      pthread_mutex_unlock((pthread_mutex_t *)a1);
    }
    std::shared_ptr<turi::neural_net::Subscriber<std::unique_ptr<turi::style_transfer::Checkpoint>>>::reset[abi:ne180100](a2);
  }
}

void sub_2183F8040(_Unwind_Exception *a1)
{
  pthread_mutex_t *v1;

  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

void **std::vector<turi::ml_data_internal::row_data_block>::shrink_to_fit(void **result)
{
  unint64_t v1;
  int64x2_t v2;
  int64x2_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  void *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;

  v1 = (unint64_t)*result;
  v2 = *(int64x2_t *)(result + 1);
  v3 = vshrq_n_s64(vsubq_s64(v2, vdupq_n_s64((unint64_t)*result)), 4uLL);
  v4 = 0xAAAAAAAAAAAAAAABLL * v3.i64[0];
  v5 = v4;
  if (0xAAAAAAAAAAAAAAABLL * v3.i64[1] > v4)
  {
    v6 = (uint64_t *)result;
    v7 = (uint64_t)(result + 2);
    v14 = v7;
    if (v2.i64[0] == v1)
    {
      v8 = 0;
      v9 = 0;
    }
    else
    {
      v8 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>>(v7, v4);
    }
    v10 = v8;
    v11 = &v8[48 * v5];
    v12 = v11;
    v13 = &v8[48 * v9];
    std::vector<turi::ml_data_internal::row_data_block>::__swap_out_circular_buffer(v6, &v10);
    return std::__split_buffer<turi::ml_data_internal::row_data_block>::~__split_buffer(&v10);
  }
  return result;
}

void sub_2183F810C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x2183F80FCLL);
}

__n128 std::deque<std::shared_ptr<std::vector<turi::ml_data_internal::row_data_block>>>::push_back(_QWORD *a1, __n128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  __n128 result;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 32 * (v4 - v5) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<std::shared_ptr<std::vector<turi::ml_data_internal::row_data_block>>>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  result = *a2;
  *(__n128 *)(*(_QWORD *)(v5 + ((v7 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v7) = *a2;
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  ++a1[5];
  return result;
}

void std::vector<turi::sarray_reader_buffer<turi::ml_data_internal::row_data_block>>::resize(uint64_t *a1, unint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;

  v2 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 5);
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<turi::sarray_reader_buffer<turi::ml_data_internal::row_data_block>>::__append(a1, v4);
  }
  else if (!v3)
  {
    std::vector<turi::sarray_reader_buffer<turi::ml_data_internal::row_data_block>>::__base_destruct_at_end[abi:ne180100]((uint64_t)a1, (void **)(*a1 + 96 * a2));
  }
}

void turi::sarray_reader_buffer<turi::ml_data_internal::row_data_block>::init(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  a1[5] = a2;
  a1[6] = 0;
  a1[11] = a3;
  a1[7] = a3;
  a1[8] = a3;
  v8 = turi::sarray_reader<turi::flexible_type>::size(a2);
  if (v8 >= a4)
    v9 = a4;
  else
    v9 = v8;
  a1[9] = v9;
  a1[10] = a5;
  v11 = *a1;
  v10 = a1[1];
  if (v10 != *a1)
  {
    do
    {
      v10 -= 48;
      std::allocator<turi::ml_data_internal::row_data_block>::destroy[abi:ne180100]((uint64_t)(a1 + 2), v10);
    }
    while (v10 != v11);
  }
  a1[1] = v11;
}

void std::vector<turi::sarray_reader_buffer<turi::ml_data_internal::row_data_block>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  size_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 5) >= a2)
  {
    if (a2)
    {
      v13 = 96 * ((96 * a2 - 96) / 0x60) + 96;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 5);
    v9 = v8 + a2;
    if (v8 + a2 > 0x2AAAAAAAAAAAAAALL)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 5);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x155555555555555)
      v11 = 0x2AAAAAAAAAAAAAALL;
    else
      v11 = v9;
    v19 = v4;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::sarray_reader_buffer<turi::flexible_type>>>(v4, v11);
    else
      v12 = 0;
    v15 = v12;
    v16 = &v12[96 * v8];
    v18 = &v12[96 * v11];
    v14 = 96 * ((96 * a2 - 96) / 0x60) + 96;
    bzero(v16, v14);
    v17 = &v16[v14];
    std::vector<turi::sarray_reader_buffer<turi::ml_data_internal::row_data_block>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<turi::sarray_reader_buffer<turi::ml_data_internal::row_data_block>>::~__split_buffer((uint64_t)&v15);
  }
}

void sub_2183F83C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<turi::sarray_reader_buffer<turi::ml_data_internal::row_data_block>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<turi::sarray_reader_buffer<turi::ml_data_internal::row_data_block>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::sarray_reader_buffer<turi::ml_data_internal::row_data_block>>,std::reverse_iterator<turi::sarray_reader_buffer<turi::ml_data_internal::row_data_block>*>,std::reverse_iterator<turi::sarray_reader_buffer<turi::ml_data_internal::row_data_block>*>,std::reverse_iterator<turi::sarray_reader_buffer<turi::ml_data_internal::row_data_block>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::sarray_reader_buffer<turi::ml_data_internal::row_data_block>>,std::reverse_iterator<turi::sarray_reader_buffer<turi::ml_data_internal::row_data_block>*>,std::reverse_iterator<turi::sarray_reader_buffer<turi::ml_data_internal::row_data_block>*>,std::reverse_iterator<turi::sarray_reader_buffer<turi::ml_data_internal::row_data_block>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[3];
  char v15;
  __int128 v16;
  __int128 v17;

  v7 = a7;
  *(_QWORD *)&v17 = a6;
  *((_QWORD *)&v17 + 1) = a7;
  v16 = v17;
  v14[0] = a1;
  v14[1] = &v16;
  v14[2] = &v17;
  if (a3 == a5)
  {
    v12 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 96) = 0;
      *(_QWORD *)(v7 - 88) = 0;
      *(_QWORD *)(v7 - 80) = 0;
      v8 = *(_OWORD *)(a3 - 96);
      a3 -= 96;
      *(_OWORD *)(v7 - 96) = v8;
      *(_QWORD *)(v7 - 80) = *(_QWORD *)(a3 + 16);
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_OWORD *)(v7 - 72) = *(_OWORD *)(a3 + 24);
      *(_QWORD *)(a3 + 24) = 0;
      *(_QWORD *)(a3 + 32) = 0;
      v9 = *(_OWORD *)(a3 + 56);
      v10 = *(_OWORD *)(a3 + 72);
      v11 = *(_QWORD *)(a3 + 88);
      *(_OWORD *)(v7 - 56) = *(_OWORD *)(a3 + 40);
      *(_QWORD *)(v7 - 8) = v11;
      *(_OWORD *)(v7 - 24) = v10;
      *(_OWORD *)(v7 - 40) = v9;
      v7 = *((_QWORD *)&v17 + 1) - 96;
      *((_QWORD *)&v17 + 1) -= 96;
    }
    while (a3 != a5);
    v12 = v17;
  }
  v15 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::sarray_reader_buffer<turi::ml_data_internal::row_data_block>>,std::reverse_iterator<turi::sarray_reader_buffer<turi::ml_data_internal::row_data_block>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v14);
  return v12;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::sarray_reader_buffer<turi::ml_data_internal::row_data_block>>,std::reverse_iterator<turi::sarray_reader_buffer<turi::ml_data_internal::row_data_block>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<turi::sarray_reader_buffer<turi::ml_data_internal::row_data_block>>,std::reverse_iterator<turi::sarray_reader_buffer<turi::ml_data_internal::row_data_block>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<turi::sarray_reader_buffer<turi::ml_data_internal::row_data_block>>,std::reverse_iterator<turi::sarray_reader_buffer<turi::ml_data_internal::row_data_block>*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v8[8];
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[8];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v1 = (uint64_t *)a1[2];
  v3 = *v1;
  v2 = v1[1];
  v14 = v3;
  v15 = v2;
  v16 = v3;
  v17 = v2;
  v4 = *a1;
  v5 = (uint64_t *)a1[1];
  v7 = *v5;
  v6 = v5[1];
  v9 = v7;
  v10 = v6;
  v11 = v7;
  v12 = v6;
  std::__allocator_destroy[abi:ne180100]<std::allocator<turi::sarray_reader_buffer<turi::ml_data_internal::row_data_block>>,std::reverse_iterator<std::reverse_iterator<turi::sarray_reader_buffer<turi::ml_data_internal::row_data_block>*>>,std::reverse_iterator<std::reverse_iterator<turi::sarray_reader_buffer<turi::ml_data_internal::row_data_block>*>>>(v4, (uint64_t)v13, (uint64_t)v8);
}

void std::__allocator_destroy[abi:ne180100]<std::allocator<turi::sarray_reader_buffer<turi::ml_data_internal::row_data_block>>,std::reverse_iterator<std::reverse_iterator<turi::sarray_reader_buffer<turi::ml_data_internal::row_data_block>*>>,std::reverse_iterator<std::reverse_iterator<turi::sarray_reader_buffer<turi::ml_data_internal::row_data_block>*>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void **i;
  void **v6;

  for (i = *(void ***)(a2 + 32); i != *(void ***)(a3 + 32); *(_QWORD *)(a2 + 32) = i)
  {
    std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(i + 3));
    v6 = i;
    std::vector<turi::ml_data_internal::row_data_block>::__destroy_vector::operator()[abi:ne180100](&v6);
    i = (void **)(*(_QWORD *)(a2 + 32) + 96);
  }
}

uint64_t std::__split_buffer<turi::sarray_reader_buffer<turi::ml_data_internal::row_data_block>>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<turi::sarray_reader_buffer<turi::ml_data_internal::row_data_block>>::__destruct_at_end[abi:ne180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<turi::sarray_reader_buffer<turi::ml_data_internal::row_data_block>>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t i;
  void **v5;
  void **v6;

  for (i = *(_QWORD *)(a1 + 16); i != a2; i = *(_QWORD *)(a1 + 16))
  {
    v5 = (void **)(i - 96);
    *(_QWORD *)(a1 + 16) = i - 96;
    std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](i - 72);
    v6 = v5;
    std::vector<turi::ml_data_internal::row_data_block>::__destroy_vector::operator()[abi:ne180100](&v6);
  }
}

uint64_t std::__shared_ptr_pointer<turi::sarray_reader<turi::ml_data_internal::row_data_block> *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<turi::sarray_reader<turi::ml_data_internal::row_data_block> *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::vector<turi::ml_data_internal::row_data_block>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 48;
        std::allocator<turi::ml_data_internal::row_data_block>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_QWORD *std::shared_ptr<turi::ml_data_internal::ml_data_block>::shared_ptr[abi:ne180100]<turi::ml_data_internal::ml_data_block,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_24D93F428;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_2183F8800(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  a10 = 0;
  if (v10)
    std::default_delete<turi::ml_data_internal::ml_data_block>::operator()[abi:ne180100]((uint64_t)&a10, v10);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<turi::ml_data_internal::ml_data_block *,std::shared_ptr<turi::ml_data_internal::ml_data_block>::__shared_ptr_default_delete<turi::ml_data_internal::ml_data_block,turi::ml_data_internal::ml_data_block>,std::allocator<turi::ml_data_internal::ml_data_block>>::__on_zero_shared(uint64_t a1)
{
  std::default_delete<turi::ml_data_internal::ml_data_block>::operator()[abi:ne180100](a1 + 24, *(_QWORD *)(a1 + 24));
}

uint64_t std::__shared_ptr_pointer<turi::ml_data_internal::ml_data_block *,std::shared_ptr<turi::ml_data_internal::ml_data_block>::__shared_ptr_default_delete<turi::ml_data_internal::ml_data_block,turi::ml_data_internal::ml_data_block>,std::allocator<turi::ml_data_internal::ml_data_block>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::default_delete<turi::ml_data_internal::ml_data_block>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  uint64_t v5;
  void **v6;

  if (a2)
  {
    v6 = (void **)(a2 + 144);
    std::vector<std::vector<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v6);
    v6 = (void **)(a2 + 120);
    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v6);
    v3 = *(void **)(a2 + 96);
    if (v3)
    {
      *(_QWORD *)(a2 + 104) = v3;
      operator delete(v3);
    }
    v6 = (void **)(a2 + 72);
    std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v6);
    v4 = *(void **)(a2 + 32);
    if (v4)
    {
      *(_QWORD *)(a2 + 40) = v4;
      operator delete(v4);
    }
    v5 = std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](a2);
    MEMORY[0x219A19A08](v5, 0x1030C40EF01F384);
  }
}

uint64_t **std::__tree<std::__value_type<unsigned long,std::weak_ptr<turi::ml_data_internal::ml_data_block>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::weak_ptr<turi::ml_data_internal::ml_data_block>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::weak_ptr<turi::ml_data_internal::ml_data_block>>>>::__emplace_unique_key_args<unsigned long,std::pair<unsigned long const,std::weak_ptr<turi::ml_data_internal::ml_data_block>>>(uint64_t **a1, unint64_t *a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  unint64_t v7;
  uint64_t **v8;
  unint64_t v9;
  char *v10;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = v5[4];
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = (char *)operator new(0x38uLL);
    *((_QWORD *)v10 + 4) = *(_QWORD *)a3;
    *(_OWORD *)(v10 + 40) = *(_OWORD *)(a3 + 8);
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, (uint64_t)v8, v6, (uint64_t *)v10);
    return (uint64_t **)v10;
  }
  return v8;
}

void __cxx_global_var_init_4_15()
{
  int v0;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, "Mutex create error %d", v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

void __cxx_global_var_init_5_2()
{
  int v0;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::ml_data_internal::row_data_block>::m_buffer_pool, 0);
    assert_msg(v0 == 0, "Mutex create error %d", v0);
    qword_254FD4BB0 = 0;
    unk_254FD4BA0 = 0u;
    unk_254FD4B90 = 0u;
    unk_254FD4B80 = 0u;
    unk_254FD4B70 = 0u;
    qword_254FD4B68 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::ml_data_internal::row_data_block>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_ml_data_block_manager_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void turi::ml_data_internal::row_data_block::load(turi::ml_data_internal::row_data_block *this, turi::iarchive *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  unint64_t *v23;
  unint64_t v24;
  size_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  double *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  void *__p;
  uint64_t *v51;
  uint64_t v52;
  void *__dst;
  void *v54;
  uint64_t v55;
  void *v56[3];
  void *v57[3];
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  char v62;
  void *v63;

  v63 = 0;
  v4 = *((_QWORD *)a2 + 2);
  if (v4)
  {
    v5 = *((_QWORD *)a2 + 3);
    v6 = *(void **)(v4 + v5);
    v63 = v6;
    *((_QWORD *)a2 + 3) = v5 + 8;
  }
  else
  {
    std::istream::read();
    v6 = v63;
  }
  v57[0] = v6;
  if (v6 != (void *)1)
  {
    v56[0] = v57;
    turi::ml_data_internal::row_data_block::load(turi::iarchive &)::$_0::operator()();
  }
  v62 = 0;
  v7 = *((_QWORD *)a2 + 2);
  if (v7)
  {
    v8 = *((_QWORD *)a2 + 3);
    v62 = *(_BYTE *)(v7 + v8);
    *((_QWORD *)a2 + 3) = v8 + 1;
    v61 = 0;
LABEL_8:
    v9 = *((_QWORD *)a2 + 3);
    v10 = *(_QWORD *)(v7 + v9);
    v61 = v10;
    *((_QWORD *)a2 + 3) = v9 + 8;
    goto LABEL_9;
  }
  std::istream::read();
  v7 = *((_QWORD *)a2 + 2);
  v61 = 0;
  if (v7)
    goto LABEL_8;
  std::istream::read();
  v10 = v61;
LABEL_9:
  std::vector<turi::neural_net::GraphLayer *>::resize((uint64_t)this, v10);
  if (v62)
  {
    v11 = v61;
    if (v61)
    {
      v12 = 0;
      v13 = 0;
      v14 = 0;
      do
      {
        v15 = v11 + v12;
        if (v15 >= 0x80)
          v16 = 128;
        else
          v16 = v15;
        turi::integer_pack::frame_of_reference_decode_128<turi::iarchive>(a2, v16, (_QWORD *)(*(_QWORD *)this + v13));
        v14 += 128;
        v11 = v61;
        v13 += 1024;
        v12 -= 128;
      }
      while (v14 < v61);
    }
    goto LABEL_56;
  }
  v60 = 0;
  v17 = *((_QWORD *)a2 + 2);
  if (v17)
  {
    v18 = *((_QWORD *)a2 + 3);
    v60 = *(_QWORD *)(v17 + v18);
    *((_QWORD *)a2 + 3) = v18 + 8;
    v59 = 0;
LABEL_21:
    v19 = *((_QWORD *)a2 + 3);
    v20 = *(_QWORD *)(v17 + v19);
    v58 = 0;
    v59 = v20;
    *((_QWORD *)a2 + 3) = v19 + 8;
    goto LABEL_22;
  }
  std::istream::read();
  v17 = *((_QWORD *)a2 + 2);
  v59 = 0;
  if (v17)
    goto LABEL_21;
  std::istream::read();
  v17 = *((_QWORD *)a2 + 2);
  v58 = 0;
  if (!v17)
  {
    std::istream::read();
    goto LABEL_23;
  }
LABEL_22:
  v21 = *((_QWORD *)a2 + 3);
  v58 = *(_QWORD *)(v17 + v21);
  *((_QWORD *)a2 + 3) = v21 + 8;
LABEL_23:
  memset(v57, 0, sizeof(v57));
  memset(v56, 0, sizeof(v56));
  turi::dense_bitset::load((turi::dense_bitset *)v57, a2);
  turi::dense_bitset::load((turi::dense_bitset *)v56, a2);
  __dst = 0;
  v54 = 0;
  v55 = 0;
  if (v59 >= v58)
  {
    std::vector<unsigned long>::resize((uint64_t)&__dst, v58);
    v23 = (unint64_t *)__dst;
    v24 = v59;
    v22 = (uint64_t *)(*(_QWORD *)this + 8 * (v61 - v59));
  }
  else
  {
    std::vector<unsigned long>::resize((uint64_t)&__dst, v59);
    v22 = (uint64_t *)__dst;
    v23 = (unint64_t *)(*(_QWORD *)this + 8 * (v61 - v58));
    v24 = v59;
  }
  v25 = 8 * v24;
  v26 = *((_QWORD *)a2 + 2);
  if (v26)
  {
    memcpy(v22, (const void *)(v26 + *((_QWORD *)a2 + 3)), v25);
    *((_QWORD *)a2 + 3) += v25;
  }
  else
  {
    std::istream::read();
  }
  v27 = v58;
  if (v58)
  {
    v28 = 0;
    v29 = 0;
    v30 = v23;
    do
    {
      v31 = v27 + v28;
      if (v31 >= 0x80)
        v32 = 128;
      else
        v32 = v31;
      turi::integer_pack::frame_of_reference_decode_128<turi::iarchive>(a2, v32, v30);
      v29 += 128;
      v27 = v58;
      v30 += 128;
      v28 -= 128;
    }
    while (v29 < v58);
  }
  __p = 0;
  v51 = 0;
  v52 = 0;
  std::vector<unsigned long>::resize((uint64_t)&__p, v60);
  v33 = v60;
  if (v60)
  {
    v34 = 0;
    v35 = 0;
    v36 = 0;
    do
    {
      v37 = v33 + v34;
      if (v37 >= 0x80)
        v38 = 128;
      else
        v38 = v37;
      turi::integer_pack::frame_of_reference_decode_128<turi::iarchive>(a2, v38, (char *)__p + v35);
      v36 += 128;
      v33 = v60;
      v35 += 1024;
      v34 -= 128;
    }
    while (v36 < v60);
  }
  v39 = (uint64_t *)__p;
  v40 = v61;
  if (v61)
  {
    v41 = 0;
    v42 = 0;
    v43 = *(double **)this;
    do
    {
      if (((*(_QWORD *)((char *)v57[0] + ((v42 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v42) & 1) != 0)
      {
        v44 = *v39++;
        *(_QWORD *)v43 = v44;
      }
      else
      {
        if (((*(_QWORD *)((char *)v56[0] + ((v41 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v41) & 1) != 0)
        {
          v45 = *v23++;
          *v43 = (double)v45;
          v40 = v61;
        }
        else
        {
          v46 = *v22++;
          *(_QWORD *)v43 = v46;
        }
        ++v41;
      }
      ++v42;
      ++v43;
    }
    while (v42 < v40);
    v39 = (uint64_t *)__p;
  }
  if (v39)
  {
    v51 = v39;
    operator delete(v39);
  }
  if (__dst)
  {
    v54 = __dst;
    operator delete(__dst);
  }
  free(v56[0]);
  free(v57[0]);
LABEL_56:
  turi::archive_detail::vector_deserialize_impl<turi::iarchive,turi::flexible_type,false>::exec(a2, (uint64_t *)this + 3);
  v57[0] = 0;
  v47 = *((_QWORD *)a2 + 2);
  if (v47)
  {
    v48 = *((_QWORD *)a2 + 3);
    v49 = *(void **)(v47 + v48);
    v57[0] = v49;
    *((_QWORD *)a2 + 3) = v48 + 8;
  }
  else
  {
    std::istream::read();
    v49 = v57[0];
  }
  v56[0] = v49;
  if (v49 != (void *)0x259E2E6D7A32C5C0)
  {
    __dst = v56;
    turi::ml_data_internal::row_data_block::load(turi::iarchive &)::$_1::operator()();
  }
}

void turi::ml_data_internal::row_data_block::load(turi::iarchive &)::$_0::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/ml/ml_data/data_storage/ml_data_row_format.cpp", 112);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"version", 7);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"1", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/ml/ml_data/data_storage/ml_data_row_format.cpp", "operator()", 26, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::ml_data_internal::row_data_block::load(turi::iarchive &)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2183F91C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::ml_data_internal::row_data_block::load(turi::iarchive &)::$_1::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/ml/ml_data/data_storage/ml_data_row_format.cpp", 112);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"read_check", 10);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"ROW_READ_CHECKSUM", 17);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/ml/ml_data/data_storage/ml_data_row_format.cpp", "operator()", 141, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::ml_data_internal::row_data_block::load(turi::iarchive &)::$_1::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2183F93E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::ml_data_internal::row_data_block::save(turi::ml_data_internal::row_data_block *this, turi::oarchive *a2)
{
  unint64_t v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  double *v30;
  unint64_t v31;
  unint64_t v32;
  double v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t *v36;
  unint64_t *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  unint64_t *v43;
  unint64_t v44;
  BOOL v46;
  unint64_t v47;
  _BYTE *v48;
  unint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t i;
  unint64_t v54;
  char *v55;
  unint64_t v56;
  char *v57;
  unint64_t v58;
  char *v59;
  void *v60;
  size_t v61;
  size_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t j;
  uint64_t v67;
  uint64_t v68;
  unint64_t k;
  unint64_t v70;
  char *v71;
  size_t v72;
  char **v73;
  size_t v74;
  BOOL v75;
  std::vector<char>::size_type v76;
  size_t v77;
  _QWORD *v78;
  size_t v79;
  BOOL v80;
  std::vector<char>::size_type v81;
  size_t v82;
  char **v83;
  size_t v84;
  BOOL v85;
  std::vector<char>::size_type v86;
  size_t v87;
  char **v88;
  size_t v89;
  BOOL v90;
  std::vector<char>::size_type v91;
  size_t v92;
  char **v93;
  size_t v94;
  BOOL v95;
  std::vector<char>::size_type v96;
  size_t v97;
  char **v98;
  size_t v99;
  BOOL v100;
  std::vector<char>::size_type v101;
  size_t v102;
  char **v103;
  size_t v104;
  BOOL v105;
  std::vector<char>::size_type v106;
  size_t v107;
  char **v108;
  size_t v109;
  BOOL v110;
  std::vector<char>::size_type v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  BOOL v116;
  void *v117[2];
  uint64_t v118;
  void *v119;
  unint64_t *v120;
  unint64_t *v121;
  void *v122[2];
  uint64_t v123;
  void *__p;
  char *v125;
  char *v126;
  char *v127;
  char *v128;
  _QWORD v129[3];

  v129[1] = 1;
  if (*(_QWORD *)a2)
  {
    std::ostream::write();
  }
  else
  {
    v4 = *((_QWORD *)a2 + 5);
    if (*((_QWORD *)a2 + 4) + 8 > v4)
    {
      v72 = 2 * v4 + 16;
      *((_QWORD *)a2 + 5) = v72;
      v73 = (char **)*((_QWORD *)a2 + 2);
      if (v73)
      {
        v5 = *v73;
        v74 = v73[1] - *v73;
        v75 = v72 >= v74;
        v76 = v72 - v74;
        if (v76 != 0 && v75)
        {
          std::vector<char>::__append(*((std::vector<char> **)a2 + 2), v76);
          v5 = (char *)**((_QWORD **)a2 + 2);
        }
        else if (!v75)
        {
          v73[1] = &v5[v72];
        }
      }
      else
      {
        v5 = (char *)malloc_type_realloc(*((void **)a2 + 3), v72, 0xF6EA6B1uLL);
      }
      *((_QWORD *)a2 + 3) = v5;
    }
    else
    {
      v5 = (char *)*((_QWORD *)a2 + 3);
    }
    *(_QWORD *)&v5[*((_QWORD *)a2 + 4)] = 1;
    *((_QWORD *)a2 + 4) += 8;
  }
  v127 = 0;
  v128 = 0;
  v129[0] = 0;
  __p = 0;
  v125 = 0;
  v126 = 0;
  std::vector<unsigned long>::reserve((void **)&v127, (uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 3);
  std::vector<double>::reserve(&__p, (uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 3);
  turi::dense_bitset::dense_bitset((turi::dense_bitset *)v122, (uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 3);
  if (v123 >= 1)
    bzero(v122[0], 8 * (v123 - ((v123 & 0x1FFFFFFFFFFFFFFFLL) != 0)) + 8);
  v6 = *(_QWORD *)this;
  if (*((_QWORD *)this + 1) != *(_QWORD *)this)
  {
    v7 = 0;
    do
    {
      v8 = *(_QWORD *)(v6 + 8 * v7);
      if (HIDWORD(v8))
      {
        v9 = v125;
        if (v125 >= v126)
        {
          v13 = (char *)__p;
          v14 = (v125 - (_BYTE *)__p) >> 3;
          v15 = v14 + 1;
          if ((unint64_t)(v14 + 1) >> 61)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          v16 = v126 - (_BYTE *)__p;
          if ((v126 - (_BYTE *)__p) >> 2 > v15)
            v15 = v16 >> 2;
          if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
            v17 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v17 = v15;
          if (v17)
          {
            v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v126, v17);
            v13 = (char *)__p;
            v9 = v125;
          }
          else
          {
            v18 = 0;
          }
          v25 = &v18[8 * v14];
          *(_QWORD *)v25 = *(_QWORD *)(v6 + 8 * v7);
          v10 = v25 + 8;
          while (v9 != v13)
          {
            v26 = *((_QWORD *)v9 - 1);
            v9 -= 8;
            *((_QWORD *)v25 - 1) = v26;
            v25 -= 8;
          }
          __p = v25;
          v125 = v10;
          v126 = &v18[8 * v17];
          if (v13)
            operator delete(v13);
        }
        else
        {
          *(_QWORD *)v125 = v8;
          v10 = v9 + 8;
        }
        v125 = v10;
      }
      else
      {
        v11 = v128;
        if ((unint64_t)v128 >= v129[0])
        {
          v19 = v127;
          v20 = (v128 - v127) >> 3;
          v21 = v20 + 1;
          if ((unint64_t)(v20 + 1) >> 61)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          v22 = v129[0] - (_QWORD)v127;
          if ((uint64_t)(v129[0] - (_QWORD)v127) >> 2 > v21)
            v21 = v22 >> 2;
          if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8)
            v23 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v23 = v21;
          if (v23)
          {
            v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v129, v23);
            v19 = v127;
            v11 = v128;
          }
          else
          {
            v24 = 0;
          }
          v27 = &v24[8 * v20];
          *(_QWORD *)v27 = v8;
          v12 = v27 + 8;
          while (v11 != v19)
          {
            v28 = *((_QWORD *)v11 - 1);
            v11 -= 8;
            *((_QWORD *)v27 - 1) = v28;
            v27 -= 8;
          }
          v127 = v27;
          v128 = v12;
          v129[0] = &v24[8 * v23];
          if (v19)
            operator delete(v19);
        }
        else
        {
          *(_QWORD *)v128 = v8;
          v12 = v11 + 8;
        }
        v128 = v12;
        *(_QWORD *)((char *)v122[0] + ((v7 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v7;
      }
      ++v7;
      v6 = *(_QWORD *)this;
    }
    while (v7 < (uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 3);
  }
  v119 = 0;
  v120 = 0;
  v121 = 0;
  std::vector<unsigned long>::reserve(&v119, (v125 - (_BYTE *)__p) >> 3);
  turi::dense_bitset::dense_bitset((turi::dense_bitset *)v117, (v125 - (_BYTE *)__p) >> 3);
  if (v118 >= 1)
    bzero(v117[0], 8 * (v118 - ((v118 & 0x1FFFFFFFFFFFFFFFLL) != 0)) + 8);
  v30 = (double *)__p;
  v29 = v125;
  if (v125 == __p)
  {
    v32 = 0;
  }
  else
  {
    v31 = 0;
    v32 = 0;
    do
    {
      v33 = v30[v31];
      if (v33 == (double)(unint64_t)v33)
      {
        v34 = (unint64_t)v33;
        v35 = v120;
        if (v120 >= v121)
        {
          v37 = (unint64_t *)v119;
          v38 = ((char *)v120 - (_BYTE *)v119) >> 3;
          v39 = v38 + 1;
          if ((unint64_t)(v38 + 1) >> 61)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          v40 = (char *)v121 - (_BYTE *)v119;
          if (((char *)v121 - (_BYTE *)v119) >> 2 > v39)
            v39 = v40 >> 2;
          if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8)
            v41 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v41 = v39;
          if (v41)
          {
            v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v121, v41);
            v37 = (unint64_t *)v119;
            v35 = v120;
          }
          else
          {
            v42 = 0;
          }
          v43 = (unint64_t *)&v42[8 * v38];
          *v43 = v34;
          v36 = v43 + 1;
          while (v35 != v37)
          {
            v44 = *--v35;
            *--v43 = v44;
          }
          v119 = v43;
          v120 = v36;
          v121 = (unint64_t *)&v42[8 * v41];
          if (v37)
            operator delete(v37);
        }
        else
        {
          *v120 = v34;
          v36 = v35 + 1;
        }
        v120 = v36;
        *(_QWORD *)((char *)v117[0] + ((v31 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v31;
        v29 = v125;
      }
      else
      {
        v30[v32++] = v33;
      }
      ++v31;
      v30 = (double *)__p;
    }
    while (v31 < (v29 - (_BYTE *)__p) >> 3);
  }
  std::vector<double>::resize((uint64_t)&__p, v32);
  v46 = v125 == __p && v120 == v119;
  v116 = v46;
  if (*(_QWORD *)a2)
  {
    std::ostream::write();
  }
  else
  {
    v47 = *((_QWORD *)a2 + 5);
    if (*((_QWORD *)a2 + 4) + 1 > v47)
    {
      v77 = 2 * v47 + 2;
      *((_QWORD *)a2 + 5) = v77;
      v78 = (_QWORD *)*((_QWORD *)a2 + 2);
      if (v78)
      {
        v48 = (_BYTE *)*v78;
        v79 = v78[1] - *v78;
        v80 = v77 >= v79;
        v81 = v77 - v79;
        if (v81 != 0 && v80)
        {
          std::vector<char>::__append(*((std::vector<char> **)a2 + 2), v81);
          v48 = (_BYTE *)**((_QWORD **)a2 + 2);
        }
        else if (!v80)
        {
          v78[1] = &v48[v77];
        }
      }
      else
      {
        v48 = malloc_type_realloc(*((void **)a2 + 3), v77, 0xF6EA6B1uLL);
      }
      *((_QWORD *)a2 + 3) = v48;
    }
    else
    {
      v48 = (_BYTE *)*((_QWORD *)a2 + 3);
    }
    v48[(*((_QWORD *)a2 + 4))++] = v116;
  }
  v115 = (uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 3;
  if (*(_QWORD *)a2)
  {
    std::ostream::write();
  }
  else
  {
    v49 = *((_QWORD *)a2 + 5);
    if (*((_QWORD *)a2 + 4) + 8 > v49)
    {
      v82 = 2 * v49 + 16;
      *((_QWORD *)a2 + 5) = v82;
      v83 = (char **)*((_QWORD *)a2 + 2);
      if (v83)
      {
        v50 = *v83;
        v84 = v83[1] - *v83;
        v85 = v82 >= v84;
        v86 = v82 - v84;
        if (v86 != 0 && v85)
        {
          std::vector<char>::__append(*((std::vector<char> **)a2 + 2), v86);
          v50 = (char *)**((_QWORD **)a2 + 2);
        }
        else if (!v85)
        {
          v83[1] = &v50[v82];
        }
      }
      else
      {
        v50 = (char *)malloc_type_realloc(*((void **)a2 + 3), v82, 0xF6EA6B1uLL);
      }
      *((_QWORD *)a2 + 3) = v50;
    }
    else
    {
      v50 = (char *)*((_QWORD *)a2 + 3);
    }
    *(_QWORD *)&v50[*((_QWORD *)a2 + 4)] = v115;
    *((_QWORD *)a2 + 4) += 8;
  }
  if (v116)
  {
    if (v115)
    {
      v51 = 0;
      v52 = 0;
      for (i = 0; i < v115; i += 128)
      {
        turi::integer_pack::frame_of_reference_encode_128<turi::oarchive>();
        v52 += 1024;
        v51 -= 128;
      }
    }
  }
  else
  {
    v114 = (v128 - v127) >> 3;
    if (*(_QWORD *)a2)
    {
      std::ostream::write();
    }
    else
    {
      v54 = *((_QWORD *)a2 + 5);
      if (*((_QWORD *)a2 + 4) + 8 > v54)
      {
        v92 = 2 * v54 + 16;
        *((_QWORD *)a2 + 5) = v92;
        v93 = (char **)*((_QWORD *)a2 + 2);
        if (v93)
        {
          v55 = *v93;
          v94 = v93[1] - *v93;
          v95 = v92 >= v94;
          v96 = v92 - v94;
          if (v96 != 0 && v95)
          {
            std::vector<char>::__append(*((std::vector<char> **)a2 + 2), v96);
            v55 = (char *)**((_QWORD **)a2 + 2);
          }
          else if (!v95)
          {
            v93[1] = &v55[v92];
          }
        }
        else
        {
          v55 = (char *)malloc_type_realloc(*((void **)a2 + 3), v92, 0xF6EA6B1uLL);
        }
        *((_QWORD *)a2 + 3) = v55;
      }
      else
      {
        v55 = (char *)*((_QWORD *)a2 + 3);
      }
      *(_QWORD *)&v55[*((_QWORD *)a2 + 4)] = v114;
      *((_QWORD *)a2 + 4) += 8;
    }
    v113 = (v125 - (_BYTE *)__p) >> 3;
    if (*(_QWORD *)a2)
    {
      std::ostream::write();
    }
    else
    {
      v56 = *((_QWORD *)a2 + 5);
      if (*((_QWORD *)a2 + 4) + 8 > v56)
      {
        v97 = 2 * v56 + 16;
        *((_QWORD *)a2 + 5) = v97;
        v98 = (char **)*((_QWORD *)a2 + 2);
        if (v98)
        {
          v57 = *v98;
          v99 = v98[1] - *v98;
          v100 = v97 >= v99;
          v101 = v97 - v99;
          if (v101 != 0 && v100)
          {
            std::vector<char>::__append(*((std::vector<char> **)a2 + 2), v101);
            v57 = (char *)**((_QWORD **)a2 + 2);
          }
          else if (!v100)
          {
            v98[1] = &v57[v97];
          }
        }
        else
        {
          v57 = (char *)malloc_type_realloc(*((void **)a2 + 3), v97, 0xF6EA6B1uLL);
        }
        *((_QWORD *)a2 + 3) = v57;
      }
      else
      {
        v57 = (char *)*((_QWORD *)a2 + 3);
      }
      *(_QWORD *)&v57[*((_QWORD *)a2 + 4)] = v113;
      *((_QWORD *)a2 + 4) += 8;
    }
    v112 = ((char *)v120 - (_BYTE *)v119) >> 3;
    if (*(_QWORD *)a2)
    {
      std::ostream::write();
    }
    else
    {
      v58 = *((_QWORD *)a2 + 5);
      if (*((_QWORD *)a2 + 4) + 8 > v58)
      {
        v102 = 2 * v58 + 16;
        *((_QWORD *)a2 + 5) = v102;
        v103 = (char **)*((_QWORD *)a2 + 2);
        if (v103)
        {
          v59 = *v103;
          v104 = v103[1] - *v103;
          v105 = v102 >= v104;
          v106 = v102 - v104;
          if (v106 != 0 && v105)
          {
            std::vector<char>::__append(*((std::vector<char> **)a2 + 2), v106);
            v59 = (char *)**((_QWORD **)a2 + 2);
          }
          else if (!v105)
          {
            v103[1] = &v59[v102];
          }
        }
        else
        {
          v59 = (char *)malloc_type_realloc(*((void **)a2 + 3), v102, 0xF6EA6B1uLL);
        }
        *((_QWORD *)a2 + 3) = v59;
      }
      else
      {
        v59 = (char *)*((_QWORD *)a2 + 3);
      }
      *(_QWORD *)&v59[*((_QWORD *)a2 + 4)] = v112;
      *((_QWORD *)a2 + 4) += 8;
    }
    turi::dense_bitset::save((const void **)v122, a2);
    turi::dense_bitset::save((const void **)v117, a2);
    v60 = __p;
    v61 = 8 * v113;
    if (*(_QWORD *)a2)
    {
      std::ostream::write();
    }
    else
    {
      v62 = *((_QWORD *)a2 + 5);
      if (*((_QWORD *)a2 + 4) + v61 > v62)
      {
        v107 = 2 * (v62 + v61);
        *((_QWORD *)a2 + 5) = v107;
        v108 = (char **)*((_QWORD *)a2 + 2);
        if (v108)
        {
          v63 = *v108;
          v109 = v108[1] - *v108;
          v110 = v107 >= v109;
          v111 = v107 - v109;
          if (v111 != 0 && v110)
          {
            std::vector<char>::__append(*((std::vector<char> **)a2 + 2), v111);
            v63 = (char *)**((_QWORD **)a2 + 2);
          }
          else if (!v110)
          {
            v108[1] = &v63[v107];
          }
        }
        else
        {
          v63 = (char *)malloc_type_realloc(*((void **)a2 + 3), v107, 0xF6EA6B1uLL);
        }
        *((_QWORD *)a2 + 3) = v63;
      }
      else
      {
        v63 = (char *)*((_QWORD *)a2 + 3);
      }
      memcpy(&v63[*((_QWORD *)a2 + 4)], v60, v61);
      *((_QWORD *)a2 + 4) += v61;
    }
    if (v112)
    {
      v64 = 0;
      v65 = 0;
      for (j = 0; j < v112; j += 128)
      {
        turi::integer_pack::frame_of_reference_encode_128<turi::oarchive>();
        v65 += 1024;
        v64 -= 128;
      }
    }
    if (v114)
    {
      v67 = 0;
      v68 = 0;
      for (k = 0; k < v114; k += 128)
      {
        turi::integer_pack::frame_of_reference_encode_128<turi::oarchive>();
        v68 += 1024;
        v67 -= 128;
      }
    }
  }
  turi::archive_detail::vector_serialize_impl<turi::oarchive,turi::flexible_type,false>::exec((uint64_t)a2, (uint64_t *)this + 3);
  if (*(_QWORD *)a2)
  {
    std::ostream::write();
  }
  else
  {
    v70 = *((_QWORD *)a2 + 5);
    if (*((_QWORD *)a2 + 4) + 8 > v70)
    {
      v87 = 2 * v70 + 16;
      *((_QWORD *)a2 + 5) = v87;
      v88 = (char **)*((_QWORD *)a2 + 2);
      if (v88)
      {
        v71 = *v88;
        v89 = v88[1] - *v88;
        v90 = v87 >= v89;
        v91 = v87 - v89;
        if (v91 != 0 && v90)
        {
          std::vector<char>::__append(*((std::vector<char> **)a2 + 2), v91);
          v71 = (char *)**((_QWORD **)a2 + 2);
        }
        else if (!v90)
        {
          v88[1] = &v71[v87];
        }
      }
      else
      {
        v71 = (char *)malloc_type_realloc(*((void **)a2 + 3), v87, 0xF6EA6B1uLL);
      }
      *((_QWORD *)a2 + 3) = v71;
    }
    else
    {
      v71 = (char *)*((_QWORD *)a2 + 3);
    }
    *(_QWORD *)&v71[*((_QWORD *)a2 + 4)] = 0x259E2E6D7A32C5C0;
    *((_QWORD *)a2 + 4) += 8;
  }
  free(v117[0]);
  if (v119)
  {
    v120 = (unint64_t *)v119;
    operator delete(v119);
  }
  free(v122[0]);
  if (__p)
  {
    v125 = (char *)__p;
    operator delete(__p);
  }
  if (v127)
  {
    v128 = v127;
    operator delete(v127);
  }
}

void sub_2183F9F9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26)
{
  uint64_t v26;
  void *v28;

  free(a16);
  if (__p)
    operator delete(__p);
  free(a22);
  if (a25)
    operator delete(a25);
  v28 = *(void **)(v26 - 120);
  if (v28)
  {
    *(_QWORD *)(v26 - 112) = v28;
    operator delete(v28);
  }
  _Unwind_Resume(a1);
}

uint64_t turi::ml_data_internal::fill_row_buffer_from_column_buffer(uint64_t a1, char **a2, uint64_t a3, _QWORD *a4, const turi::flexible_type *a5, int a6, char a7, int a8)
{
  uint64_t v8;
  uint64_t v11;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t result;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  void *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  std::string::size_type v39;
  int v40;
  int *v41;
  int v42;
  uint64_t v43;
  unint64_t v44;
  double v45;
  unint64_t v46;
  double *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  double *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  double *v60;
  double v61;
  void **v62;
  unint64_t v63;
  double v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void **v71;
  unint64_t v72;
  double v73;
  _QWORD *v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  double v82;
  uint64_t v83;
  std::vector<std::pair<unsigned long, const char *>>::size_type v84;
  uint64_t v85;
  uint64_t v86;
  void **v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  int v91;
  double *v92;
  double v93;
  char *v94;
  char *v95;
  char *v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  char *v101;
  unint64_t *v102;
  unint64_t v103;
  std::pair<unsigned long, const char *> *begin;
  std::pair<unsigned long, const char *> *v105;
  std::string::size_type v106;
  unint64_t v107;
  unint64_t *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  char *v114;
  double v115;
  uint64_t *v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  uint64_t *v120;
  uint64_t *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  char *v131;
  char *v132;
  char *v133;
  char *v134;
  uint64_t v135;
  std::string::size_type v136;
  int v137;
  int v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  unint64_t *v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  char *v156;
  unint64_t v157;
  uint64_t v158;
  unint64_t v159;
  std::vector<std::pair<unsigned long, const char *>>::size_type *v160;
  unint64_t *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  unint64_t v165;
  char *v166;
  std::string::size_type *v167;
  char *v168;
  char *v169;
  std::string::size_type v170;
  unint64_t *v171;
  char *v172;
  char *v173;
  unint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t v181;
  char *v182;
  char *v183;
  char *v184;
  char *v185;
  uint64_t v186;
  int v187;
  double v188;
  _QWORD *v189;
  int v190;
  uint64_t v191;
  uint64_t v192;
  _QWORD *v193;
  uint64_t v194;
  uint64_t k;
  _QWORD *v196;
  _QWORD *v197;
  const char *v198;
  uint64_t v199;
  std::__shared_weak_count *size;
  unint64_t *v201;
  unint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  char **v206;
  char *v207;
  double v208;
  uint64_t v209;
  uint64_t v210;
  unsigned int *v211;
  unsigned int *v212;
  unsigned int v213;
  __int128 v214;
  __int128 v215;
  uint64_t v216;
  _QWORD *v217;
  const char *v218;
  uint64_t v219;
  char *v220;
  char *v221;
  char *v222;
  uint64_t v223;
  std::vector<std::pair<unsigned long, const char *>>::size_type *v224;
  char *v225;
  char *v226;
  std::vector<std::pair<unsigned long, const char *>>::size_type v227;
  uint64_t v228;
  std::pair<unsigned long, const char *> *v229;
  const char *second;
  unint64_t first;
  const char **v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  unint64_t v236;
  char *v237;
  unint64_t *v238;
  char *v239;
  char *v240;
  unint64_t v241;
  unint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  unint64_t v246;
  char *v247;
  const char **v248;
  char *v249;
  char *v250;
  const char *v251;
  std::vector<std::pair<unsigned long, const char *>>::pointer v252;
  std::vector<std::pair<unsigned long, const char *>>::pointer end;
  uint64_t v254;
  std::vector<std::pair<unsigned long, const char *>>::pointer v255;
  double v256;
  uint64_t *v257;
  _QWORD *v258;
  int v259;
  uint64_t v260;
  uint64_t v261;
  _QWORD *v262;
  uint64_t n;
  uint64_t v264;
  _QWORD *v265;
  _QWORD *v266;
  const char *v267;
  uint64_t v268;
  double v269;
  uint64_t *v270;
  uint64_t *v271;
  int64_t v272;
  unint64_t v273;
  unint64_t v274;
  uint64_t v275;
  _QWORD *v276;
  int v277;
  uint64_t v278;
  uint64_t v279;
  _QWORD *v280;
  uint64_t v281;
  uint64_t v282;
  _QWORD *v283;
  _QWORD *v284;
  const char *v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  _QWORD *v289;
  char *v290;
  char *v291;
  uint64_t v292;
  char *v293;
  unint64_t v294;
  unint64_t v295;
  unint64_t *v296;
  char *v297;
  unint64_t v298;
  char *v299;
  char *v300;
  _QWORD *v301;
  _QWORD *v302;
  uint64_t v303;
  uint64_t v304;
  char *v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  unint64_t v310;
  char *v311;
  char *v312;
  char *v313;
  char *v314;
  uint64_t v315;
  float v316;
  unint64_t v317;
  double *v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  unint64_t v322;
  char *v323;
  double *v324;
  char *v325;
  char *v326;
  uint64_t v327;
  _QWORD *jj;
  std::vector<std::pair<unsigned long, const char *>>::pointer v329;
  std::pair<unsigned long, const char *> *v330;
  std::pair<unsigned long, const char *> *v331;
  unint64_t v332;
  char *v333;
  unint64_t v334;
  unint64_t v335;
  unint64_t *v336;
  char *v337;
  unint64_t v338;
  unint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  char *v343;
  uint64_t v344;
  _QWORD *v346;
  int v347;
  uint64_t v348;
  uint64_t v349;
  _QWORD *v350;
  uint64_t v351;
  uint64_t i;
  _QWORD *v353;
  _QWORD *p_str;
  const char *v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t ii;
  _QWORD *v359;
  std::__shared_weak_count *v360;
  unint64_t *v361;
  unint64_t v362;
  std::string::size_type m;
  std::string::size_type v364;
  _QWORD *v365;
  uint64_t v366;
  uint64_t j;
  _QWORD *v368;
  _QWORD *v369;
  _QWORD *v370;
  _QWORD *v371;
  _QWORD *v372;
  _QWORD *v373;
  file_logger *v374;
  std::runtime_error *exception;
  std::string *v376;
  __int128 v377;
  _QWORD *v378;
  _QWORD *v379;
  _QWORD *v380;
  _QWORD *v381;
  _QWORD *v382;
  file_logger *v383;
  std::string::size_type v384;
  std::string::size_type v385;
  std::string::size_type v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  _QWORD *v390;
  uint64_t v391;
  uint64_t v392;
  unint64_t v393;
  int v394;
  int v395;
  uint64_t v396;
  uint64_t v397;
  unint64_t v398;
  std::string::size_type v402;
  void *v403;
  char *v404;
  __int128 v405;
  __int128 v406;
  __int128 v407;
  void *__p;
  char *v409;
  char *v410;
  std::vector<std::pair<unsigned long, const char *>> v411;
  void *v412;
  void *v413;
  uint64_t v414;
  void *v415;
  void *v416;
  uint64_t v417;
  std::string v418;
  size_t __idx;
  size_t v420;
  uint64_t v421;
  uint64_t v422;
  std::string __str;
  std::string::size_type v424;
  void *v425;
  void *v426;
  void *v427;
  char v428;
  _QWORD v429[22];

  v429[20] = *MEMORY[0x24BDAC8D0];
  v8 = a4[1] - *a4;
  if (!v8)
    return 0;
  v11 = a3;
  v13 = (_QWORD *)a1;
  v14 = v8 / 24;
  v15 = *(_QWORD *)(a3 + 56);
  if (v14 <= 1)
    v14 = 1;
  v16 = (uint64_t *)(*a4 + 8);
  while (*(_DWORD *)(*(_QWORD *)v15 + 24) == 5)
  {
    v16 += 3;
    v15 += 16;
    if (!--v14)
      return 0;
  }
  v18 = *(v16 - 1);
  v17 = *v16;
  v19 = *v16 - v18;
  if (v19 == -16)
    return 0;
  v22 = v19 >> 4;
  std::vector<unsigned long>::resize(a1, v19 >> 4);
  v415 = 0;
  v416 = 0;
  v417 = 0;
  v412 = 0;
  v413 = 0;
  v414 = 0;
  memset(&v411, 0, sizeof(v411));
  __p = 0;
  v409 = 0;
  v410 = 0;
  a2[1] = *a2;
  if (*(_BYTE *)(v11 + 2))
    std::vector<turi::ml_data_internal::entry_value>::reserve((void **)a2, *(_QWORD *)(v11 + 8) * v22);
  if (v17 == v18)
  {
    v20 = 0;
LABEL_562:
    if (__p)
    {
      v409 = (char *)__p;
      operator delete(__p);
    }
    if (v411.__begin_)
    {
      v411.__end_ = v411.__begin_;
      operator delete(v411.__begin_);
    }
    if (v412)
    {
      v413 = v412;
      operator delete(v412);
    }
    if (v415)
    {
      v416 = v415;
      operator delete(v415);
    }
    return v20;
  }
  v394 = a8;
  v395 = a6;
  v20 = 0;
  v23 = a2 + 2;
  v385 = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v386 = *MEMORY[0x24BEDB800];
  if (v22 <= 1)
    v24 = 1;
  else
    v24 = v22;
  v389 = v24;
  v25 = 0;
  v384 = MEMORY[0x24BEDB848] + 16;
  v396 = v11;
  v390 = v13;
  while (1)
  {
    v27 = *a2;
    v26 = a2[1];
    v28 = (v26 - *a2) >> 3;
    *(_QWORD *)(*v13 + 8 * v25) = v28;
    if (*(_BYTE *)(v11 + 2))
    {
      v28 = -1;
    }
    else
    {
      if ((unint64_t)v26 >= *v23)
      {
        if ((unint64_t)(v28 + 1) >> 61)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v30 = *v23 - (_QWORD)v27;
        v31 = v30 >> 2;
        if (v30 >> 2 <= (unint64_t)(v28 + 1))
          v31 = v28 + 1;
        if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF8)
          v32 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v32 = v31;
        if (v32)
        {
          v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a2 + 2), v32);
          v26 = a2[1];
        }
        else
        {
          v33 = 0;
        }
        v34 = &v33[8 * v28];
        v35 = *a2;
        v36 = v34;
        if (v26 != *a2)
        {
          do
          {
            v37 = *((_QWORD *)v26 - 1);
            v26 -= 8;
            *((_QWORD *)v36 - 1) = v37;
            v36 -= 8;
          }
          while (v26 != v35);
          v26 = *a2;
        }
        v29 = v34 + 8;
        *a2 = v36;
        a2[1] = v34 + 8;
        a2[2] = &v33[8 * v32];
        if (v26)
          operator delete(v26);
      }
      else
      {
        v29 = v26 + 8;
      }
      a2[1] = v29;
    }
    v392 = v28;
    v393 = v20;
    if (*(_QWORD *)(v11 + 48))
      break;
    v398 = 0;
LABEL_554:
    if (!*(_BYTE *)(v11 + 2))
      *(_QWORD *)&(*a2)[8 * v392] = ((a2[1] - *a2) >> 3) - v392;
    v20 = v393;
    if (v393 <= v398)
      v20 = v398;
    ++v25;
    v13 = v390;
    if (v25 == v389)
      goto LABEL_562;
  }
  v38 = 0;
  v397 = v25;
  v398 = 0;
  while (2)
  {
    v39 = *(_QWORD *)(v11 + 56) + 16 * v38;
    v402 = *(_QWORD *)v39;
    v40 = *(_DWORD *)(*(_QWORD *)v39 + 24);
    v41 = (int *)(*(_QWORD *)(*a4 + 24 * v38) + 16 * v25);
    switch(v40)
    {
      case 0:
        if (*((_BYTE *)v41 + 12) != 7)
        {
          switch(*((_BYTE *)v41 + 12))
          {
            case 0:
              v61 = (double)*(uint64_t *)v41;
              goto LABEL_452;
            case 1:
              v61 = *(double *)v41;
              goto LABEL_452;
            case 2:
              v205 = *(_QWORD *)v41;
              v206 = (char **)(*(_QWORD *)v41 + 8);
              __idx = 0;
              v207 = (char *)v206;
              if (*(char *)(v205 + 31) < 0)
                v207 = *v206;
              std::string::basic_string[abi:ne180100]<0>(&__str, v207);
              v208 = std::stod(&__str, &__idx);
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__str.__r_.__value_.__l.__data_);
              if (*(char *)(v205 + 31) < 0)
                v209 = *(_QWORD *)(v205 + 16);
              else
                v209 = *(unsigned __int8 *)(v205 + 31);
              if (__idx != v209)
              {
                exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::operator+<char>();
                v376 = std::string::append(&v418, " cannot be interpreted as a float");
                v377 = *(_OWORD *)&v376->__r_.__value_.__l.__data_;
                __str.__r_.__value_.__r.__words[2] = v376->__r_.__value_.__r.__words[2];
                *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v377;
                v376->__r_.__value_.__l.__size_ = 0;
                v376->__r_.__value_.__r.__words[2] = 0;
                v376->__r_.__value_.__r.__words[0] = 0;
                std::runtime_error::runtime_error(exception, &__str);
                __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
              }
              v316 = v208;
              v61 = v316;
              goto LABEL_452;
            case 3:
              v216 = *(_QWORD *)v41;
              memset(&__str, 0, sizeof(__str));
              std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__str, *(const void **)(v216 + 8), *(_QWORD *)(v216 + 16), (uint64_t)(*(_QWORD *)(v216 + 16) - *(_QWORD *)(v216 + 8)) >> 3);
              turi::flexible_type_fail(0);
              v61 = 0.0;
              if (__str.__r_.__value_.__r.__words[0])
              {
                __str.__r_.__value_.__l.__size_ = __str.__r_.__value_.__r.__words[0];
                operator delete(__str.__r_.__value_.__l.__data_);
              }
              goto LABEL_452;
            case 4:
              v203 = *(_QWORD *)v41;
              memset(&__str, 0, sizeof(__str));
              std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&__str, *(uint64_t **)(v203 + 8), *(uint64_t **)(v203 + 16), (uint64_t)(*(_QWORD *)(v203 + 16) - *(_QWORD *)(v203 + 8)) >> 4);
              turi::flexible_type_fail(0);
              v418.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v418);
              goto LABEL_301;
            case 5:
              v204 = *(_QWORD *)v41;
              memset(&__str, 0, sizeof(__str));
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&__str, *(uint64_t **)(v204 + 8), *(uint64_t **)(v204 + 16), (uint64_t)(*(_QWORD *)(v204 + 16) - *(_QWORD *)(v204 + 8)) >> 5);
              turi::flexible_type_fail(0);
              v418.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v418);
              goto LABEL_301;
            case 6:
              v61 = (double)v41[2] / 1000000.0 + (double)((uint64_t)(*(_QWORD *)v41 << 8) >> 8);
              goto LABEL_452;
            case 8:
              v210 = *(_QWORD *)v41;
              v211 = *(unsigned int **)(*(_QWORD *)v41 + 16);
              v403 = *(void **)(*(_QWORD *)v41 + 8);
              v404 = (char *)v211;
              if (v211)
              {
                v212 = v211 + 2;
                do
                  v213 = __ldxr(v212);
                while (__stxr(v213 + 1, v212));
              }
              v214 = *(_OWORD *)(v210 + 24);
              v215 = *(_OWORD *)(v210 + 56);
              v406 = *(_OWORD *)(v210 + 40);
              v407 = v215;
              v405 = v214;
              turi::flexible_type_fail(0);
              boost::detail::shared_count::~shared_count((unsigned int **)&v404);
LABEL_301:
              v61 = 0.0;
              goto LABEL_452;
            case 9:
              turi::flexible_type_impl::ndarray<double>::ndarray(&__str, *(_QWORD *)v41 + 8);
              turi::flexible_type_fail(0);
              if (v425)
              {
                v426 = v425;
                operator delete(v425);
              }
              if (__str.__r_.__value_.__r.__words[2])
              {
                v424 = __str.__r_.__value_.__r.__words[2];
                operator delete((void *)__str.__r_.__value_.__r.__words[2]);
              }
              size = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
              v61 = 0.0;
              if (__str.__r_.__value_.__l.__size_)
              {
                v201 = (unint64_t *)(__str.__r_.__value_.__l.__size_ + 8);
                do
                  v202 = __ldaxr(v201);
                while (__stlxr(v202 - 1, v201));
                if (!v202)
                {
                  ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
                  std::__shared_weak_count::__release_weak(size);
                }
              }
LABEL_452:
              if (v395)
              {
                *(double *)&__str.__r_.__value_.__l.__data_ = v61;
                std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((char *)&v412, (char *)&__str, (uint64_t)&__str.__r_.__value_.__l.__size_, 1uLL);
                turi::ml_data_internal::column_statistics::update_numeric_statistics(*(_QWORD *)(v402 + 48), (uint64_t)a5, (uint64_t)&v412);
              }
              goto LABEL_454;
            default:
              result = turi::flexible_type_fail(0);
              goto LABEL_608;
          }
        }
        if (v394)
        {
          if (v394 != 2)
          {
            if (v394 == 1)
            {
              __str.__r_.__value_.__r.__words[0] = *(_QWORD *)(v11 + 56) + 16 * v38;
              turi::ml_data_internal::fill_row_buffer_from_column_buffer(std::vector<unsigned long> &,turi::ml_data_internal::row_data_block &,turi::ml_data_internal::row_metadata const&,std::vector<std::vector<turi::flexible_type>> const&,unsigned long,BOOL,BOOL,turi::ml_missing_value_action)::$_4::operator() const(void)::{lambda(void)#1}::operator()();
            }
            turi::ml_data_internal::fill_row_buffer_from_column_buffer(std::vector<unsigned long> &,turi::ml_data_internal::row_data_block &,turi::ml_data_internal::row_metadata const&,std::vector<std::vector<turi::flexible_type>> const&,unsigned long,BOOL,BOOL,turi::ml_missing_value_action)::$_5::operator() const(unsigned long)::{lambda(void)#1}::operator()();
          }
          v61 = NAN;
        }
        else
        {
          v61 = turi::ml_data_internal::column_statistics::mean(*(turi::ml_data_internal::column_statistics **)(v402 + 48), 0);
        }
LABEL_454:
        v318 = (double *)a2[1];
        v317 = (unint64_t)a2[2];
        if ((unint64_t)v318 >= v317)
        {
          v319 = ((char *)v318 - *a2) >> 3;
          if ((unint64_t)(v319 + 1) >> 61)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          v320 = v317 - (_QWORD)*a2;
          v321 = v320 >> 2;
          if (v320 >> 2 <= (unint64_t)(v319 + 1))
            v321 = v319 + 1;
          if ((unint64_t)v320 >= 0x7FFFFFFFFFFFFFF8)
            v322 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v322 = v321;
          if (v322)
            v323 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a2 + 2), v322);
          else
            v323 = 0;
          v324 = (double *)&v323[8 * v319];
          *v324 = v61;
          v60 = v324 + 1;
          v326 = *a2;
          v325 = a2[1];
          if (v325 != *a2)
          {
            do
            {
              v327 = *((_QWORD *)v325 - 1);
              v325 -= 8;
              *((_QWORD *)v324-- - 1) = v327;
            }
            while (v325 != v326);
            v325 = *a2;
          }
          *a2 = (char *)v324;
          a2[1] = (char *)v60;
          a2[2] = &v323[8 * v322];
          if (v325)
            operator delete(v325);
        }
        else
        {
          *v318 = v61;
          v60 = v318 + 1;
        }
        ++v398;
        goto LABEL_471;
      case 1:
        v62 = *(void ***)(v402 + 32);
        if ((a7 & 1) != 0)
          v63 = turi::ml_data_internal::column_indexer::immutable_map_value_to_index(v62, (const turi::flexible_type *)v41);
        else
          v63 = turi::ml_data_internal::column_indexer::map_value_to_index(v62, a5, (const turi::flexible_type *)v41);
        v106 = v63;
        v108 = (unint64_t *)a2[1];
        v107 = (unint64_t)a2[2];
        if ((unint64_t)v108 >= v107)
        {
          v110 = ((char *)v108 - *a2) >> 3;
          if ((unint64_t)(v110 + 1) >> 61)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          v111 = v107 - (_QWORD)*a2;
          v112 = v111 >> 2;
          if (v111 >> 2 <= (unint64_t)(v110 + 1))
            v112 = v110 + 1;
          if ((unint64_t)v111 >= 0x7FFFFFFFFFFFFFF8)
            v113 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v113 = v112;
          if (v113)
            v114 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a2 + 2), v113);
          else
            v114 = 0;
          v167 = (std::string::size_type *)&v114[8 * v110];
          *v167 = v106;
          v109 = (char *)(v167 + 1);
          v169 = *a2;
          v168 = a2[1];
          if (v168 != *a2)
          {
            do
            {
              v170 = *((_QWORD *)v168 - 1);
              v168 -= 8;
              *--v167 = v170;
            }
            while (v168 != v169);
            v168 = *a2;
          }
          *a2 = (char *)v167;
          a2[1] = v109;
          a2[2] = &v114[8 * v113];
          if (v168)
            operator delete(v168);
        }
        else
        {
          *v108 = v63;
          v109 = (char *)(v108 + 1);
        }
        ++v398;
        a2[1] = v109;
        if (v395)
        {
          __str.__r_.__value_.__r.__words[0] = v106;
          std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((char *)&v415, (char *)&__str, (uint64_t)&__str.__r_.__value_.__l.__size_, 1uLL);
          turi::ml_data_internal::column_statistics::update_categorical_statistics(*(_QWORD **)(v402 + 48), (uint64_t)a5, (unint64_t **)&v415);
        }
        goto LABEL_472;
      case 2:
      case 7:
        v42 = *((unsigned __int8 *)v41 + 12);
        if (v42 != 3)
        {
          if (v42 != 9)
          {
            if (v42 != 7)
              turi::ml_data_internal::fill_row_buffer_from_column_buffer(std::vector<unsigned long> &,turi::ml_data_internal::row_data_block &,turi::ml_data_internal::row_metadata const&,std::vector<std::vector<turi::flexible_type>> const&,unsigned long,BOOL,BOOL,turi::ml_missing_value_action)::$_7::operator()();
            v43 = *(_QWORD *)(v402 + 72);
            if (v43)
            {
              if (v394 && v394 != 2)
              {
                if (v394 == 1)
                {
                  __str.__r_.__value_.__r.__words[0] = *(_QWORD *)(v11 + 56) + 16 * v38;
                  turi::ml_data_internal::fill_row_buffer_from_column_buffer(std::vector<unsigned long> &,turi::ml_data_internal::row_data_block &,turi::ml_data_internal::row_metadata const&,std::vector<std::vector<turi::flexible_type>> const&,unsigned long,BOOL,BOOL,turi::ml_missing_value_action)::$_4::operator() const(void)::{lambda(void)#1}::operator()();
                }
                turi::ml_data_internal::fill_row_buffer_from_column_buffer(std::vector<unsigned long> &,turi::ml_data_internal::row_data_block &,turi::ml_data_internal::row_metadata const&,std::vector<std::vector<turi::flexible_type>> const&,unsigned long,BOOL,BOOL,turi::ml_missing_value_action)::$_5::operator() const(unsigned long)::{lambda(void)#1}::operator()();
              }
              v44 = 0;
              v398 += v43;
              do
              {
                if (v394 == 2)
                  v45 = NAN;
                else
                  v45 = turi::ml_data_internal::column_statistics::mean(*(turi::ml_data_internal::column_statistics **)(v402 + 48), v44);
                v47 = (double *)a2[1];
                v46 = (unint64_t)a2[2];
                if ((unint64_t)v47 >= v46)
                {
                  v49 = ((char *)v47 - *a2) >> 3;
                  if ((unint64_t)(v49 + 1) >> 61)
                    std::vector<float>::__throw_length_error[abi:ne180100]();
                  v50 = v46 - (_QWORD)*a2;
                  v51 = v50 >> 2;
                  if (v50 >> 2 <= (unint64_t)(v49 + 1))
                    v51 = v49 + 1;
                  if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFF8)
                    v52 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v52 = v51;
                  if (v52)
                    v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a2 + 2), v52);
                  else
                    v53 = 0;
                  v54 = (double *)&v53[8 * v49];
                  *v54 = v45;
                  v48 = (char *)(v54 + 1);
                  v56 = *a2;
                  v55 = a2[1];
                  if (v55 != *a2)
                  {
                    do
                    {
                      v57 = *((_QWORD *)v55 - 1);
                      v55 -= 8;
                      *((_QWORD *)v54-- - 1) = v57;
                    }
                    while (v55 != v56);
                    v55 = *a2;
                  }
                  *a2 = (char *)v54;
                  a2[1] = v48;
                  a2[2] = &v53[8 * v52];
                  if (v55)
                    operator delete(v55);
                }
                else
                {
                  *v47 = v45;
                  v48 = (char *)(v47 + 1);
                }
                a2[1] = v48;
                ++v44;
              }
              while (v44 != v43);
            }
            goto LABEL_472;
          }
          v115 = *(double *)v41;
          memset(&__str, 0, sizeof(__str));
          memset(&v418, 0, sizeof(v418));
          __idx = 0;
          v420 = 0;
          v421 = 0;
          turi::flexible_type_impl::ndarray<double>::ndarray(&v403, (uint64_t)&__str, (uint64_t)&v418, (uint64_t)&__idx, 0);
          if (__idx)
          {
            v420 = __idx;
            operator delete((void *)__idx);
          }
          if (v418.__r_.__value_.__r.__words[0])
          {
            v418.__r_.__value_.__l.__size_ = v418.__r_.__value_.__r.__words[0];
            operator delete(v418.__r_.__value_.__l.__data_);
          }
          if (__str.__r_.__value_.__r.__words[0])
          {
            __str.__r_.__value_.__l.__size_ = __str.__r_.__value_.__r.__words[0];
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          v116 = (uint64_t *)(*(_QWORD *)&v115 + 8);
          if (!turi::flexible_type_impl::ndarray<double>::is_full((_QWORD *)(*(_QWORD *)&v115 + 8))
            || !turi::flexible_type_impl::ndarray<double>::has_canonical_stride(*(_QWORD *)&v115 + 8))
          {
            turi::flexible_type_impl::ndarray<double>::canonicalize((uint64_t **)(*(_QWORD *)&v115 + 8), (uint64_t **)&__str);
            v116 = (uint64_t *)turi::flexible_type_impl::ndarray<double>::operator=((uint64_t)&v403, (uint64_t)&__str);
            if (v425)
            {
              v426 = v425;
              operator delete(v425);
            }
            if (__str.__r_.__value_.__r.__words[2])
            {
              v424 = __str.__r_.__value_.__r.__words[2];
              operator delete((void *)__str.__r_.__value_.__r.__words[2]);
            }
            v117 = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
            if (__str.__r_.__value_.__l.__size_)
            {
              v118 = (unint64_t *)(__str.__r_.__value_.__l.__size_ + 8);
              do
                v119 = __ldaxr(v118);
              while (__stlxr(v119 - 1, v118));
              if (!v119)
              {
                ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
                std::__shared_weak_count::__release_weak(v117);
              }
            }
          }
          v121 = (uint64_t *)v116[2];
          v120 = (uint64_t *)v116[3];
          if (v120 != v121)
          {
            if (*v116)
            {
              v122 = 1;
              do
              {
                v123 = *v121++;
                v122 *= v123;
              }
              while (v121 != v120);
              if (v122)
              {
                v124 = 0;
                v398 += v122;
                v125 = a2[1];
                do
                {
                  v126 = *(_QWORD *)(*(_QWORD *)*v116 + 8 * (v116[8] + v124));
                  if ((unint64_t)v125 >= *v23)
                  {
                    v127 = (v125 - *a2) >> 3;
                    if ((unint64_t)(v127 + 1) >> 61)
                      std::vector<float>::__throw_length_error[abi:ne180100]();
                    v128 = *v23 - (_QWORD)*a2;
                    v129 = v128 >> 2;
                    if (v128 >> 2 <= (unint64_t)(v127 + 1))
                      v129 = v127 + 1;
                    if ((unint64_t)v128 >= 0x7FFFFFFFFFFFFFF8)
                      v130 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v130 = v129;
                    if (v130)
                      v131 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a2 + 2), v130);
                    else
                      v131 = 0;
                    v132 = &v131[8 * v127];
                    *(_QWORD *)v132 = v126;
                    v125 = v132 + 8;
                    v134 = *a2;
                    v133 = a2[1];
                    if (v133 != *a2)
                    {
                      do
                      {
                        v135 = *((_QWORD *)v133 - 1);
                        v133 -= 8;
                        *((_QWORD *)v132 - 1) = v135;
                        v132 -= 8;
                      }
                      while (v133 != v134);
                      v133 = *a2;
                    }
                    *a2 = v132;
                    a2[1] = v125;
                    a2[2] = &v131[8 * v130];
                    if (v133)
                      operator delete(v133);
                  }
                  else
                  {
                    *(_QWORD *)v125 = v126;
                    v125 += 8;
                  }
                  a2[1] = v125;
                  ++v124;
                }
                while (v124 != v122);
              }
            }
          }
          v136 = *(_QWORD *)v39;
          v137 = *(_DWORD *)(*(_QWORD *)v39 + 24);
          if (v137 == 7)
          {
            v187 = *((unsigned __int8 *)v41 + 12);
            if (v187 == 9)
            {
              v269 = *(double *)v41;
              v270 = *(uint64_t **)(*(_QWORD *)&v269 + 24);
              v271 = *(uint64_t **)(*(_QWORD *)&v269 + 32);
              v272 = (char *)v271 - (char *)v270;
              v273 = *(_QWORD *)(v136 + 88) - *(_QWORD *)(v136 + 80);
              if ((char *)v271 - (char *)v270 == v273)
              {
                if (v272)
                  goto LABEL_379;
              }
              else
              {
                if (v272 == 8 && v273 <= 0xF)
                {
LABEL_604:
                  v140 = *v270;
LABEL_605:
                  v418.__r_.__value_.__r.__words[0] = v140;
                  __str.__r_.__value_.__r.__words[0] = v136;
                  __str.__r_.__value_.__l.__size_ = (std::string::size_type)&v418;
                  turi::ml_data_internal::column_metadata::check_fixed_column_size(turi::flexible_type const&)::{lambda(unsigned long)#1}::operator() const(unsigned long)::{lambda(void)#1}::operator()((uint64_t *)&__str);
                }
                std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__str);
                v346 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__str, (uint64_t)"Dataset mismatch. Numeric feature '", 35);
                v347 = *(char *)(v136 + 23);
                if (v347 >= 0)
                  v348 = v136;
                else
                  v348 = *(_QWORD *)v136;
                if (v347 >= 0)
                  v349 = *(unsigned __int8 *)(v136 + 23);
                else
                  v349 = *(_QWORD *)(v136 + 8);
                v350 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v346, v348, v349);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v350, (uint64_t)"' must contain lists of consistent size. (Found lists/arrays of sizes ", 70);
                if (*(_QWORD *)(v136 + 80) == *(_QWORD *)(v136 + 88))
                {
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__str, (uint64_t)"(", 1);
                  p_str = (_QWORD *)std::ostream::operator<<();
                  v355 = ",)";
                  v356 = 2;
                }
                else
                {
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__str, (uint64_t)"(", 1);
                  v351 = *(_QWORD *)(v136 + 80);
                  for (i = *(_QWORD *)(v136 + 88); v351 != i; v351 += 8)
                  {
                    v353 = (_QWORD *)std::ostream::operator<<();
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v353, (uint64_t)",", 1);
                  }
                  p_str = &__str;
                  v355 = ")";
                  v356 = 1;
                }
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(p_str, (uint64_t)v355, v356);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__str, (uint64_t)" and (", 6);
                v366 = *(_QWORD *)(*(_QWORD *)&v269 + 24);
                for (j = *(_QWORD *)(*(_QWORD *)&v269 + 32); v366 != j; v366 += 8)
                {
                  v368 = (_QWORD *)std::ostream::operator<<();
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v368, (uint64_t)",", 1);
                }
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__str, (uint64_t)").", 2);
                std::ostringstream::~ostringstream((uint64_t)&__str);
                v270 = *(uint64_t **)(*(_QWORD *)&v269 + 24);
                v271 = *(uint64_t **)(*(_QWORD *)&v269 + 32);
                v272 = (char *)v271 - (char *)v270;
                if (v271 != v270)
                {
LABEL_379:
                  v274 = 0;
                  while (1)
                  {
                    v275 = *(_QWORD *)(v136 + 80);
                    if (v270[v274] != *(_QWORD *)(v275 + 8 * v274))
                    {
                      if (v272 == 8 && (unint64_t)(*(_QWORD *)(v136 + 88) - v275) <= 0xF)
                        goto LABEL_604;
                      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__str);
                      v276 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__str, (uint64_t)"Dataset mismatch. Numeric feature '", 35);
                      v277 = *(char *)(v136 + 23);
                      if (v277 >= 0)
                        v278 = v136;
                      else
                        v278 = *(_QWORD *)v136;
                      if (v277 >= 0)
                        v279 = *(unsigned __int8 *)(v136 + 23);
                      else
                        v279 = *(_QWORD *)(v136 + 8);
                      v280 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v276, v278, v279);
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v280, (uint64_t)"' must contain lists of consistent size. (Found lists/arrays of sizes ", 70);
                      if (*(_QWORD *)(v136 + 80) == *(_QWORD *)(v136 + 88))
                      {
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__str, (uint64_t)"(", 1);
                        v284 = (_QWORD *)std::ostream::operator<<();
                        v285 = ",)";
                        v286 = 2;
                      }
                      else
                      {
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__str, (uint64_t)"(", 1);
                        v281 = *(_QWORD *)(v136 + 80);
                        v282 = *(_QWORD *)(v136 + 88);
                        while (v281 != v282)
                        {
                          v283 = (_QWORD *)std::ostream::operator<<();
                          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v283, (uint64_t)",", 1);
                          v281 += 8;
                        }
                        v284 = &__str;
                        v285 = ")";
                        v286 = 1;
                      }
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v284, (uint64_t)v285, v286);
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__str, (uint64_t)" and (", 6);
                      v287 = *(_QWORD *)(*(_QWORD *)&v269 + 24);
                      v288 = *(_QWORD *)(*(_QWORD *)&v269 + 32);
                      while (v287 != v288)
                      {
                        v289 = (_QWORD *)std::ostream::operator<<();
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v289, (uint64_t)",", 1);
                        v287 += 8;
                      }
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__str, (uint64_t)").", 2);
                      __str.__r_.__value_.__r.__words[0] = v386;
                      *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + *(_QWORD *)(v386 - 24)) = v385;
                      __str.__r_.__value_.__l.__size_ = v384;
                      if (v428 < 0)
                        operator delete(v427);
                      std::streambuf::~streambuf();
                      std::ostream::~ostream();
                      MEMORY[0x219A198F4](v429);
                      v270 = *(uint64_t **)(*(_QWORD *)&v269 + 24);
                      v271 = *(uint64_t **)(*(_QWORD *)&v269 + 32);
                    }
                    ++v274;
                    v272 = (char *)v271 - (char *)v270;
                    if (v274 >= v271 - v270)
                      goto LABEL_531;
                  }
                }
              }
              goto LABEL_531;
            }
            if (v187 != 3)
            {
              std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__str);
              v369 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__str, (uint64_t)"Check failed (", 14);
              v370 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v369, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/ml/ml_data/data_storage/internal_metadata.hpp", 111);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v370, (uint64_t)":", 1);
              v371 = (_QWORD *)std::ostream::operator<<();
              v372 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v371, (uint64_t)"): ", 3);
              v373 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v372, (uint64_t)"false", 5);
              std::endl[abi:ne180100]<char,std::char_traits<char>>(v373);
              if (*((int *)global_logger() + 169) <= 6)
              {
                v374 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/ml/ml_data/data_storage/internal_metadata.hpp", "operator()", 325, 1);
                std::stringbuf::str();
                file_logger::operator<<<std::string>((uint64_t)v374, (uint64_t)&v418);
                if (SHIBYTE(v418.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v418.__r_.__value_.__l.__data_);
              }
              __print_back_trace();
              __idx = (size_t)&__str;
              turi::ml_data_internal::column_metadata::check_fixed_column_size(turi::flexible_type const&)::{lambda(void)#2}::operator() const(void)::{lambda(void)#1}::operator()();
            }
            v188 = *(double *)v41;
            if (*(_QWORD *)(v136 + 88) - *(_QWORD *)(v136 + 80) != 8)
            {
              v422 = (uint64_t)(*(_QWORD *)(*(_QWORD *)&v188 + 16) - *(_QWORD *)(*(_QWORD *)&v188 + 8)) >> 3;
              std::vector<unsigned long>::vector[abi:ne180100](&v418, &v422, 1uLL);
              if (v418.__r_.__value_.__l.__size_ - v418.__r_.__value_.__r.__words[0] == 8
                && *(_QWORD *)(v136 + 88) - *(_QWORD *)(v136 + 80) <= 0xFuLL)
              {
                __idx = *(_QWORD *)v418.__r_.__value_.__l.__data_;
                __str.__r_.__value_.__r.__words[0] = v136;
                __str.__r_.__value_.__l.__size_ = (std::string::size_type)&__idx;
                turi::ml_data_internal::column_metadata::check_fixed_column_size(turi::flexible_type const&)::{lambda(unsigned long)#1}::operator() const(unsigned long)::{lambda(void)#1}::operator()((uint64_t *)&__str);
              }
              std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__str);
              v189 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__str, (uint64_t)"Dataset mismatch. Numeric feature '", 35);
              v190 = *(char *)(v136 + 23);
              if (v190 >= 0)
                v191 = v136;
              else
                v191 = *(_QWORD *)v136;
              if (v190 >= 0)
                v192 = *(unsigned __int8 *)(v136 + 23);
              else
                v192 = *(_QWORD *)(v136 + 8);
              v193 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v189, v191, v192);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v193, (uint64_t)"' must contain lists of consistent size. (Found lists/arrays of sizes ", 70);
              if (*(_QWORD *)(v136 + 80) == *(_QWORD *)(v136 + 88))
              {
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__str, (uint64_t)"(", 1);
                v197 = (_QWORD *)std::ostream::operator<<();
                v198 = ",)";
                v199 = 2;
              }
              else
              {
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__str, (uint64_t)"(", 1);
                v194 = *(_QWORD *)(v136 + 80);
                for (k = *(_QWORD *)(v136 + 88); v194 != k; v194 += 8)
                {
                  v196 = (_QWORD *)std::ostream::operator<<();
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v196, (uint64_t)",", 1);
                }
                v197 = &__str;
                v198 = ")";
                v199 = 1;
              }
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v197, (uint64_t)v198, v199);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__str, (uint64_t)" and (", 6);
              v364 = v418.__r_.__value_.__l.__size_;
              for (m = v418.__r_.__value_.__r.__words[0]; m != v364; m += 8)
              {
                v365 = (_QWORD *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v365, (uint64_t)",", 1);
              }
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__str, (uint64_t)").", 2);
              std::ostringstream::~ostringstream((uint64_t)&__str);
              if (v418.__r_.__value_.__r.__words[0])
              {
                v418.__r_.__value_.__l.__size_ = v418.__r_.__value_.__r.__words[0];
                operator delete(v418.__r_.__value_.__l.__data_);
              }
            }
            v139 = *(_QWORD *)(*(_QWORD *)&v188 + 16) - *(_QWORD *)(*(_QWORD *)&v188 + 8);
            goto LABEL_192;
          }
          if (v137 == 2)
          {
            v138 = *((unsigned __int8 *)v41 + 12);
            if (v138 != 9)
            {
              if (v138 != 3)
              {
                std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__str);
                v378 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__str, (uint64_t)"Check failed (", 14);
                v379 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v378, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/ml/ml_data/data_storage/internal_metadata.hpp", 111);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v379, (uint64_t)":", 1);
                v380 = (_QWORD *)std::ostream::operator<<();
                v381 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v380, (uint64_t)"): ", 3);
                v382 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v381, (uint64_t)"false", 5);
                std::endl[abi:ne180100]<char,std::char_traits<char>>(v382);
                if (*((int *)global_logger() + 169) <= 6)
                {
                  v383 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/ml/ml_data/data_storage/internal_metadata.hpp", "operator()", 291, 1);
                  std::stringbuf::str();
                  file_logger::operator<<<std::string>((uint64_t)v383, (uint64_t)&v418);
                  if (SHIBYTE(v418.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v418.__r_.__value_.__l.__data_);
                }
                __print_back_trace();
                __idx = (size_t)&__str;
                turi::ml_data_internal::column_metadata::check_fixed_column_size(turi::flexible_type const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
              }
              v139 = *(_QWORD *)(*(_QWORD *)v41 + 16) - *(_QWORD *)(*(_QWORD *)v41 + 8);
LABEL_192:
              v140 = v139 >> 3;
              if (v140 != *(_QWORD *)(v136 + 72))
                goto LABEL_605;
              goto LABEL_531;
            }
            v256 = *(double *)v41;
            v257 = *(uint64_t **)(*(_QWORD *)v41 + 24);
            if (*(_QWORD *)(*(_QWORD *)v41 + 32) - (_QWORD)v257 != 8)
              goto LABEL_367;
            v140 = *v257;
            if (v140 != *(_QWORD *)(v136 + 72))
            {
              if (*(_QWORD *)(v136 + 88) - *(_QWORD *)(v136 + 80) <= 0xFuLL)
                goto LABEL_605;
LABEL_367:
              std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__str);
              v258 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__str, (uint64_t)"Dataset mismatch. Numeric feature '", 35);
              v259 = *(char *)(v136 + 23);
              if (v259 >= 0)
                v260 = v136;
              else
                v260 = *(_QWORD *)v136;
              if (v259 >= 0)
                v261 = *(unsigned __int8 *)(v136 + 23);
              else
                v261 = *(_QWORD *)(v136 + 8);
              v262 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v258, v260, v261);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v262, (uint64_t)"' must contain lists of consistent size. (Found lists/arrays of sizes ", 70);
              if (*(_QWORD *)(v136 + 80) == *(_QWORD *)(v136 + 88))
              {
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__str, (uint64_t)"(", 1);
                v266 = (_QWORD *)std::ostream::operator<<();
                v267 = ",)";
                v268 = 2;
              }
              else
              {
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__str, (uint64_t)"(", 1);
                v264 = *(_QWORD *)(v136 + 80);
                for (n = *(_QWORD *)(v136 + 88); v264 != n; v264 += 8)
                {
                  v265 = (_QWORD *)std::ostream::operator<<();
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v265, (uint64_t)",", 1);
                }
                v266 = &__str;
                v267 = ")";
                v268 = 1;
              }
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v266, (uint64_t)v267, v268);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__str, (uint64_t)" and (", 6);
              v357 = *(_QWORD *)(*(_QWORD *)&v256 + 24);
              for (ii = *(_QWORD *)(*(_QWORD *)&v256 + 32); v357 != ii; v357 += 8)
              {
                v359 = (_QWORD *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v359, (uint64_t)",", 1);
              }
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__str, (uint64_t)").", 2);
              std::ostringstream::~ostringstream((uint64_t)&__str);
            }
          }
LABEL_531:
          if (v395)
            turi::ml_data_internal::column_statistics::update_numeric_statistics(*(_QWORD *)(v402 + 48), (uint64_t)a5, *v116);
          if (*((_QWORD *)&v406 + 1))
          {
            *(_QWORD *)&v407 = *((_QWORD *)&v406 + 1);
            operator delete(*((void **)&v406 + 1));
          }
          if ((_QWORD)v405)
          {
            *((_QWORD *)&v405 + 1) = v405;
            operator delete((void *)v405);
          }
          v360 = (std::__shared_weak_count *)v404;
          if (v404)
          {
            v361 = (unint64_t *)(v404 + 8);
            do
              v362 = __ldaxr(v361);
            while (__stlxr(v362 - 1, v361));
            if (!v362)
            {
              ((void (*)(std::__shared_weak_count *))v360->__on_zero_shared)(v360);
              std::__shared_weak_count::__release_weak(v360);
            }
          }
          goto LABEL_472;
        }
        v73 = *(double *)v41;
        if (v40 == 2)
          goto LABEL_421;
        if (v40 == 7)
        {
          if (*(_QWORD *)(v402 + 88) - *(_QWORD *)(v402 + 80) != 8)
          {
            __idx = (uint64_t)(*(_QWORD *)(*(_QWORD *)&v73 + 16) - *(_QWORD *)(*(_QWORD *)&v73 + 8)) >> 3;
            std::vector<unsigned long>::vector[abi:ne180100](&v403, &__idx, 1uLL);
            if (v404 - (_BYTE *)v403 == 8 && *(_QWORD *)(v402 + 88) - *(_QWORD *)(v402 + 80) <= 0xFuLL)
            {
              v418.__r_.__value_.__r.__words[0] = *(_QWORD *)v403;
              __str.__r_.__value_.__r.__words[0] = v402;
              __str.__r_.__value_.__l.__size_ = (std::string::size_type)&v418;
              turi::ml_data_internal::column_metadata::check_fixed_column_size(turi::flexible_type const&)::{lambda(unsigned long)#1}::operator() const(unsigned long)::{lambda(void)#1}::operator()((uint64_t *)&__str);
            }
            std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__str);
            v74 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__str, (uint64_t)"Dataset mismatch. Numeric feature '", 35);
            v75 = *(char *)(v402 + 23);
            if (v75 >= 0)
              v76 = v402;
            else
              v76 = *(_QWORD *)v402;
            if (v75 >= 0)
              v77 = *(unsigned __int8 *)(v402 + 23);
            else
              v77 = *(_QWORD *)(v402 + 8);
            v78 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v74, v76, v77);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)"' must contain lists of consistent size. (Found lists/arrays of sizes ", 70);
            if (*(_QWORD *)(v402 + 80) == *(_QWORD *)(v402 + 88))
            {
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__str, (uint64_t)"(", 1);
              v217 = (_QWORD *)std::ostream::operator<<();
              v218 = ",)";
              v219 = 2;
            }
            else
            {
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__str, (uint64_t)"(", 1);
              v79 = *(_QWORD *)(v402 + 80);
              v80 = *(_QWORD *)(v402 + 88);
              while (v79 != v80)
              {
                v81 = (_QWORD *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v81, (uint64_t)",", 1);
                v79 += 8;
              }
              v217 = &__str;
              v218 = ")";
              v219 = 1;
            }
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v217, (uint64_t)v218, v219);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__str, (uint64_t)" and (", 6);
            v299 = (char *)v403;
            v300 = v404;
            while (v299 != v300)
            {
              v301 = (_QWORD *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v301, (uint64_t)",", 1);
              v299 += 8;
            }
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__str, (uint64_t)").", 2);
            std::ostringstream::~ostringstream((uint64_t)&__str);
            if (v403)
            {
              v404 = (char *)v403;
              operator delete(v403);
            }
          }
LABEL_421:
          v150 = *(_QWORD *)(*(_QWORD *)&v73 + 8);
          v149 = *(_QWORD *)(*(_QWORD *)&v73 + 16);
          v151 = (v149 - v150) >> 3;
          if (v151 != *(_QWORD *)(v402 + 72))
          {
            v403 = (void *)((v149 - v150) >> 3);
            __str.__r_.__value_.__r.__words[0] = v402;
            __str.__r_.__value_.__l.__size_ = (std::string::size_type)&v403;
            turi::ml_data_internal::column_metadata::check_fixed_column_size(turi::flexible_type const&)::{lambda(unsigned long)#1}::operator() const(unsigned long)::{lambda(void)#1}::operator()((uint64_t *)&__str);
          }
        }
        else
        {
          v150 = *(_QWORD *)(*(_QWORD *)&v73 + 8);
          v149 = *(_QWORD *)(*(_QWORD *)&v73 + 16);
          v151 = (v149 - v150) >> 3;
        }
        v302 = (_QWORD *)(*(_QWORD *)&v73 + 8);
        if (v149 != v150)
        {
          v303 = 0;
          if (v151 <= 1)
            v304 = 1;
          else
            v304 = v151;
          v398 += v304;
          v305 = a2[1];
          do
          {
            v306 = *(_QWORD *)(*v302 + 8 * v303);
            if ((unint64_t)v305 >= *v23)
            {
              v307 = (v305 - *a2) >> 3;
              if ((unint64_t)(v307 + 1) >> 61)
                std::vector<float>::__throw_length_error[abi:ne180100]();
              v308 = *v23 - (_QWORD)*a2;
              v309 = v308 >> 2;
              if (v308 >> 2 <= (unint64_t)(v307 + 1))
                v309 = v307 + 1;
              if ((unint64_t)v308 >= 0x7FFFFFFFFFFFFFF8)
                v310 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v310 = v309;
              if (v310)
                v311 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a2 + 2), v310);
              else
                v311 = 0;
              v312 = &v311[8 * v307];
              *(_QWORD *)v312 = v306;
              v305 = v312 + 8;
              v314 = *a2;
              v313 = a2[1];
              if (v313 != *a2)
              {
                do
                {
                  v315 = *((_QWORD *)v313 - 1);
                  v313 -= 8;
                  *((_QWORD *)v312 - 1) = v315;
                  v312 -= 8;
                }
                while (v313 != v314);
                v313 = *a2;
              }
              *a2 = v312;
              a2[1] = v305;
              a2[2] = &v311[8 * v310];
              if (v313)
                operator delete(v313);
            }
            else
            {
              *(_QWORD *)v305 = v306;
              v305 += 8;
            }
            a2[1] = v305;
            ++v303;
          }
          while (v303 != v304);
        }
        if ((v395 & 1) != 0)
          turi::ml_data_internal::column_statistics::update_numeric_statistics(*(_QWORD *)(v402 + 48), (uint64_t)a5, (uint64_t)v302);
        goto LABEL_472;
      case 3:
        if (*((_BYTE *)v41 + 12) != 7)
        {
          v64 = *(double *)v41;
          v66 = *(_QWORD *)(*(_QWORD *)v41 + 8);
          v65 = *(_QWORD *)(*(_QWORD *)v41 + 16);
          v67 = (v65 - v66) >> 4;
          std::vector<unsigned long>::resize((uint64_t)&v415, v67);
          if (v65 != v66)
          {
            v68 = 0;
            v69 = 0;
            if (v67 <= 1)
              v70 = 1;
            else
              v70 = (v65 - v66) >> 4;
            do
            {
              v71 = *(void ***)(v402 + 32);
              if ((a7 & 1) != 0)
                v72 = turi::ml_data_internal::column_indexer::immutable_map_value_to_index(v71, (const turi::flexible_type *)(*(_QWORD *)(*(_QWORD *)&v64 + 8) + v68));
              else
                v72 = turi::ml_data_internal::column_indexer::map_value_to_index(v71, a5, (const turi::flexible_type *)(*(_QWORD *)(*(_QWORD *)&v64 + 8) + v68));
              *((_QWORD *)v415 + v69++) = v72;
              v68 += 16;
            }
            while (v70 != v69);
          }
          std::__sort<std::__less<unsigned long,unsigned long> &,unsigned long *>();
          v142 = (unint64_t *)a2[1];
          v141 = (unint64_t)a2[2];
          if ((unint64_t)v142 >= v141)
          {
            v144 = ((char *)v142 - *a2) >> 3;
            if ((unint64_t)(v144 + 1) >> 61)
              std::vector<float>::__throw_length_error[abi:ne180100]();
            v145 = v141 - (_QWORD)*a2;
            v146 = v145 >> 2;
            if (v145 >> 2 <= (unint64_t)(v144 + 1))
              v146 = v144 + 1;
            if ((unint64_t)v145 >= 0x7FFFFFFFFFFFFFF8)
              v147 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v147 = v146;
            if (v147)
              v148 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a2 + 2), v147);
            else
              v148 = 0;
            v171 = (unint64_t *)&v148[8 * v144];
            *v171 = v67;
            v143 = (char *)(v171 + 1);
            v173 = *a2;
            v172 = a2[1];
            if (v172 != *a2)
            {
              do
              {
                v174 = *((_QWORD *)v172 - 1);
                v172 -= 8;
                *--v171 = v174;
              }
              while (v172 != v173);
              v172 = *a2;
            }
            *a2 = (char *)v171;
            a2[1] = v143;
            a2[2] = &v148[8 * v147];
            if (v172)
              operator delete(v172);
          }
          else
          {
            *v142 = v67;
            v143 = (char *)(v142 + 1);
          }
          a2[1] = v143;
          if (v65 != v66)
          {
            v175 = 0;
            if (v67 <= 1)
              v176 = 1;
            else
              v176 = v67;
            v398 += v176;
            do
            {
              v177 = *((_QWORD *)v415 + v175);
              if ((unint64_t)v143 >= *v23)
              {
                v178 = (v143 - *a2) >> 3;
                if ((unint64_t)(v178 + 1) >> 61)
                  std::vector<float>::__throw_length_error[abi:ne180100]();
                v179 = *v23 - (_QWORD)*a2;
                v180 = v179 >> 2;
                if (v179 >> 2 <= (unint64_t)(v178 + 1))
                  v180 = v178 + 1;
                if ((unint64_t)v179 >= 0x7FFFFFFFFFFFFFF8)
                  v181 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v181 = v180;
                if (v181)
                  v182 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a2 + 2), v181);
                else
                  v182 = 0;
                v183 = &v182[8 * v178];
                *(_QWORD *)v183 = v177;
                v143 = v183 + 8;
                v185 = *a2;
                v184 = a2[1];
                if (v184 != *a2)
                {
                  do
                  {
                    v186 = *((_QWORD *)v184 - 1);
                    v184 -= 8;
                    *((_QWORD *)v183 - 1) = v186;
                    v183 -= 8;
                  }
                  while (v184 != v185);
                  v184 = *a2;
                }
                *a2 = v183;
                a2[1] = v143;
                a2[2] = &v182[8 * v181];
                if (v184)
                  operator delete(v184);
              }
              else
              {
                *(_QWORD *)v143 = v177;
                v143 += 8;
              }
              a2[1] = v143;
              ++v175;
            }
            while (v175 != v176);
          }
          if ((v395 & 1) != 0)
            turi::ml_data_internal::column_statistics::update_categorical_statistics(*(_QWORD **)(v402 + 48), (uint64_t)a5, (unint64_t **)&v415);
          goto LABEL_472;
        }
        if (v394 == 1)
        {
LABEL_584:
          __str.__r_.__value_.__r.__words[0] = *(_QWORD *)(v11 + 56) + 16 * v38;
          turi::ml_data_internal::fill_row_buffer_from_column_buffer(std::vector<unsigned long> &,turi::ml_data_internal::row_data_block &,turi::ml_data_internal::row_metadata const&,std::vector<std::vector<turi::flexible_type>> const&,unsigned long,BOOL,BOOL,turi::ml_missing_value_action)::$_4::operator() const(void)::{lambda(void)#1}::operator()();
        }
        v59 = a2[1];
        v339 = (unint64_t)a2[2];
        if ((unint64_t)v59 < v339)
          goto LABEL_71;
        v340 = (v59 - *a2) >> 3;
        if ((unint64_t)(v340 + 1) >> 61)
LABEL_588:
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v341 = v339 - (_QWORD)*a2;
        v342 = v341 >> 2;
        if (v341 >> 2 <= (unint64_t)(v340 + 1))
          v342 = v340 + 1;
        if ((unint64_t)v341 >= 0x7FFFFFFFFFFFFFF8)
          v155 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v155 = v342;
        if (v155)
          v156 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a2 + 2), v155);
        else
          v156 = 0;
        v220 = &v156[8 * v340];
        *(_QWORD *)v220 = 0;
        v60 = (double *)(v220 + 8);
        v343 = *a2;
        v221 = a2[1];
        if (v221 != *a2)
        {
          do
          {
            v344 = *((_QWORD *)v221 - 1);
            v221 -= 8;
            *((_QWORD *)v220 - 1) = v344;
            v220 -= 8;
          }
          while (v221 != v343);
          goto LABEL_310;
        }
        goto LABEL_311;
      case 4:
        if (*((_BYTE *)v41 + 12) == 7)
        {
          if (v394 == 1)
            goto LABEL_584;
          v59 = a2[1];
          v58 = (unint64_t)a2[2];
          if ((unint64_t)v59 >= v58)
          {
            v152 = (v59 - *a2) >> 3;
            if ((unint64_t)(v152 + 1) >> 61)
              goto LABEL_588;
            v153 = v58 - (_QWORD)*a2;
            v154 = v153 >> 2;
            if (v153 >> 2 <= (unint64_t)(v152 + 1))
              v154 = v152 + 1;
            if ((unint64_t)v153 >= 0x7FFFFFFFFFFFFFF8)
              v155 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v155 = v154;
            if (v155)
              v156 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a2 + 2), v155);
            else
              v156 = 0;
            v220 = &v156[8 * v152];
            *(_QWORD *)v220 = 0;
            v60 = (double *)(v220 + 8);
            v222 = *a2;
            v221 = a2[1];
            if (v221 != *a2)
            {
              do
              {
                v223 = *((_QWORD *)v221 - 1);
                v221 -= 8;
                *((_QWORD *)v220 - 1) = v223;
                v220 -= 8;
              }
              while (v221 != v222);
LABEL_310:
              v221 = *a2;
            }
LABEL_311:
            *a2 = v220;
            a2[1] = (char *)v60;
            a2[2] = &v156[8 * v155];
            if (v221)
              operator delete(v221);
          }
          else
          {
LABEL_71:
            *(_QWORD *)v59 = 0;
            v60 = (double *)(v59 + 8);
          }
LABEL_471:
          a2[1] = (char *)v60;
          goto LABEL_472;
        }
        v82 = *(double *)v41;
        v83 = *(_QWORD *)(*(_QWORD *)v41 + 16);
        v391 = *(_QWORD *)(*(_QWORD *)v41 + 8);
        v84 = (v83 - v391) >> 5;
        std::vector<std::pair<unsigned long,char const*>>::resize(&v411, v84);
        if (v83 == v391)
        {
          begin = v411.__begin_;
LABEL_214:
          v157 = 126 - 2 * __clz(v411.__end_ - begin);
          if (v411.__end_ == begin)
            v158 = 0;
          else
            v158 = v157;
          std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,double> *,false>(&begin->first, (uint64_t *)v411.__end_, (uint64_t)&__str, v158, 1);
          v160 = (std::vector<std::pair<unsigned long, const char *>>::size_type *)a2[1];
          v159 = (unint64_t)a2[2];
          if ((unint64_t)v160 >= v159)
          {
            v162 = ((char *)v160 - *a2) >> 3;
            if ((unint64_t)(v162 + 1) >> 61)
              std::vector<float>::__throw_length_error[abi:ne180100]();
            v163 = v159 - (_QWORD)*a2;
            v164 = v163 >> 2;
            if (v163 >> 2 <= (unint64_t)(v162 + 1))
              v164 = v162 + 1;
            if ((unint64_t)v163 >= 0x7FFFFFFFFFFFFFF8)
              v165 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v165 = v164;
            if (v165)
              v166 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a2 + 2), v165);
            else
              v166 = 0;
            v224 = (std::vector<std::pair<unsigned long, const char *>>::size_type *)&v166[8 * v162];
            *v224 = v84;
            v161 = v224 + 1;
            v226 = *a2;
            v225 = a2[1];
            if (v225 != *a2)
            {
              do
              {
                v227 = *((_QWORD *)v225 - 1);
                v225 -= 8;
                *--v224 = v227;
              }
              while (v225 != v226);
              v225 = *a2;
            }
            *a2 = (char *)v224;
            a2[1] = (char *)v161;
            a2[2] = &v166[8 * v165];
            if (v225)
              operator delete(v225);
          }
          else
          {
            *v160 = v84;
            v161 = v160 + 1;
          }
          a2[1] = (char *)v161;
          if (v83 != v391)
          {
            v228 = 0;
            if (v84 <= 1)
              v84 = 1;
            v398 += v84;
            do
            {
              v229 = &v411.__begin_[v228];
              first = v229->first;
              second = v229->second;
              if ((unint64_t)v161 >= *v23)
              {
                v233 = ((char *)v161 - *a2) >> 3;
                if ((unint64_t)(v233 + 1) >> 61)
                  goto LABEL_575;
                v234 = *v23 - (_QWORD)*a2;
                v235 = v234 >> 2;
                if (v234 >> 2 <= (unint64_t)(v233 + 1))
                  v235 = v233 + 1;
                if ((unint64_t)v234 >= 0x7FFFFFFFFFFFFFF8)
                  v236 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v236 = v235;
                if (v236)
                  v237 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a2 + 2), v236);
                else
                  v237 = 0;
                v238 = (unint64_t *)&v237[8 * v233];
                *v238 = first;
                v232 = (const char **)(v238 + 1);
                v240 = *a2;
                v239 = a2[1];
                if (v239 != *a2)
                {
                  do
                  {
                    v241 = *((_QWORD *)v239 - 1);
                    v239 -= 8;
                    *--v238 = v241;
                  }
                  while (v239 != v240);
                  v239 = *a2;
                }
                *a2 = (char *)v238;
                a2[1] = (char *)v232;
                a2[2] = &v237[8 * v236];
                if (v239)
                  operator delete(v239);
              }
              else
              {
                *v161 = first;
                v232 = (const char **)(v161 + 1);
              }
              a2[1] = (char *)v232;
              v242 = (unint64_t)a2[2];
              if ((unint64_t)v232 >= v242)
              {
                v243 = ((char *)v232 - *a2) >> 3;
                if ((unint64_t)(v243 + 1) >> 61)
LABEL_575:
                  std::vector<float>::__throw_length_error[abi:ne180100]();
                v244 = v242 - (_QWORD)*a2;
                v245 = v244 >> 2;
                if (v244 >> 2 <= (unint64_t)(v243 + 1))
                  v245 = v243 + 1;
                if ((unint64_t)v244 >= 0x7FFFFFFFFFFFFFF8)
                  v246 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v246 = v245;
                if (v246)
                  v247 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a2 + 2), v246);
                else
                  v247 = 0;
                v248 = (const char **)&v247[8 * v243];
                *v248 = second;
                v161 = (unint64_t *)(v248 + 1);
                v250 = *a2;
                v249 = a2[1];
                if (v249 != *a2)
                {
                  do
                  {
                    v251 = (const char *)*((_QWORD *)v249 - 1);
                    v249 -= 8;
                    *--v248 = v251;
                  }
                  while (v249 != v250);
                  v249 = *a2;
                }
                *a2 = (char *)v248;
                a2[1] = (char *)v161;
                a2[2] = &v247[8 * v246];
                if (v249)
                  operator delete(v249);
              }
              else
              {
                *v232 = second;
                v161 = (unint64_t *)(v232 + 1);
              }
              a2[1] = (char *)v161;
              ++v228;
            }
            while (v228 != v84);
          }
          if ((v395 & 1) == 0)
            goto LABEL_472;
          if (__p != v409)
          {
            if (v409 - (_BYTE *)__p == 8)
            {
              v252 = v411.__begin_;
              end = v411.__end_;
              if (v411.__begin_ != v411.__end_)
              {
                v254 = *(_QWORD *)__p;
                v255 = v411.__begin_;
                while (v255->first != v254)
                {
                  if (++v255 == v411.__end_)
                    goto LABEL_447;
                }
                if (v255 != v411.__end_)
                {
                  for (jj = &v255[1].first; jj != (_QWORD *)end; jj += 2)
                  {
                    if (*jj != v254)
                    {
                      v255->first = *jj;
                      v255->second = (const char *)jj[1];
                      ++v255;
                    }
                  }
                }
                goto LABEL_414;
              }
LABEL_446:
              end = v252;
            }
            else
            {
              std::__sort<std::__less<unsigned long,unsigned long> &,unsigned long *>();
              v252 = v411.__begin_;
              v255 = v411.__end_;
              if (v411.__begin_ == v411.__end_)
                goto LABEL_446;
              v290 = (char *)__p;
              v291 = v409;
              v292 = (v409 - (_BYTE *)__p) >> 3;
              end = v411.__begin_;
              while (1)
              {
                v293 = (char *)__p;
                if (v409 != __p)
                {
                  v293 = (char *)__p;
                  v294 = (v409 - (_BYTE *)__p) >> 3;
                  do
                  {
                    v295 = v294 >> 1;
                    v296 = (unint64_t *)&v293[8 * (v294 >> 1)];
                    v298 = *v296;
                    v297 = (char *)(v296 + 1);
                    v294 += ~(v294 >> 1);
                    if (v298 < end->first)
                      v293 = v297;
                    else
                      v294 = v295;
                  }
                  while (v294);
                }
                if (v293 != v409 && *(_QWORD *)v293 == end->first)
                  break;
                if (++end == v411.__end_)
                  goto LABEL_414;
              }
              if (end == v411.__end_)
              {
LABEL_414:
                end = v255;
              }
              else
              {
                v329 = end + 1;
                if (&end[1] != v411.__end_)
                {
                  v330 = end;
                  do
                  {
                    v331 = v329;
                    v332 = end[1].first;
                    v333 = v290;
                    if (v291 != v290)
                    {
                      v333 = v290;
                      v334 = v292;
                      do
                      {
                        v335 = v334 >> 1;
                        v336 = (unint64_t *)&v333[8 * (v334 >> 1)];
                        v338 = *v336;
                        v337 = (char *)(v336 + 1);
                        v334 += ~(v334 >> 1);
                        if (v338 < v332)
                          v333 = v337;
                        else
                          v334 = v335;
                      }
                      while (v334);
                    }
                    if (v333 == v291 || *(_QWORD *)v333 != v332)
                    {
                      v330->first = v332;
                      v330->second = end[1].second;
                      ++v330;
                    }
                    v329 = v331 + 1;
                    end = v331;
                  }
                  while (&v331[1] != v255);
                  end = v330;
                }
              }
            }
LABEL_447:
            std::vector<std::pair<unsigned long,char const*>>::resize(&v411, end - v252);
            v409 = (char *)__p;
          }
          turi::ml_data_internal::column_statistics::update_dict_statistics(*(_QWORD **)(v402 + 48), (uint64_t)a5, (unint64_t **)&v411);
LABEL_472:
          ++v38;
          v11 = v396;
          v25 = v397;
          if (v38 >= *(_QWORD *)(v396 + 48))
            goto LABEL_554;
          continue;
        }
        v387 = v83;
        v388 = (v83 - v391) >> 5;
        v85 = 0;
        if (v84 <= 1)
          v84 = 1;
        while (1)
        {
          v86 = *(_QWORD *)(*(_QWORD *)&v82 + 8);
          v87 = *(void ***)(v402 + 32);
          if ((a7 & 1) != 0)
            v88 = turi::ml_data_internal::column_indexer::immutable_map_value_to_index(v87, (const turi::flexible_type *)(v86 + 32 * v85));
          else
            v88 = turi::ml_data_internal::column_indexer::map_value_to_index(v87, a5, (const turi::flexible_type *)(v86 + 32 * v85));
          v89 = v88;
          v90 = v86 + 32 * v85;
          v91 = *(unsigned __int8 *)(v90 + 28);
          if (v91 == 7)
          {
            if (v394)
            {
              if (v394 != 2)
              {
                if (v394 == 1)
                {
                  __str.__r_.__value_.__r.__words[0] = v39;
                  turi::ml_data_internal::fill_row_buffer_from_column_buffer(std::vector<unsigned long> &,turi::ml_data_internal::row_data_block &,turi::ml_data_internal::row_metadata const&,std::vector<std::vector<turi::flexible_type>> const&,unsigned long,BOOL,BOOL,turi::ml_missing_value_action)::$_4::operator() const(void)::{lambda(void)#1}::operator()();
                }
                turi::ml_data_internal::fill_row_buffer_from_column_buffer(std::vector<unsigned long> &,turi::ml_data_internal::row_data_block &,turi::ml_data_internal::row_metadata const&,std::vector<std::vector<turi::flexible_type>> const&,unsigned long,BOOL,BOOL,turi::ml_missing_value_action)::$_5::operator() const(unsigned long)::{lambda(void)#1}::operator()();
              }
              v93 = NAN;
            }
            else
            {
              v93 = turi::ml_data_internal::column_statistics::mean(*(turi::ml_data_internal::column_statistics **)(v402 + 48), v88);
            }
            v94 = v409;
            if (v409 >= v410)
            {
              v96 = (char *)__p;
              v97 = (v409 - (_BYTE *)__p) >> 3;
              v98 = v97 + 1;
              if ((unint64_t)(v97 + 1) >> 61)
                std::vector<float>::__throw_length_error[abi:ne180100]();
              v99 = v410 - (_BYTE *)__p;
              if ((v410 - (_BYTE *)__p) >> 2 > v98)
                v98 = v99 >> 2;
              if ((unint64_t)v99 >= 0x7FFFFFFFFFFFFFF8)
                v100 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v100 = v98;
              if (v100)
              {
                v101 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v410, v100);
                v96 = (char *)__p;
                v94 = v409;
              }
              else
              {
                v101 = 0;
              }
              v102 = (unint64_t *)&v101[8 * v97];
              *v102 = v89;
              v95 = (char *)(v102 + 1);
              while (v94 != v96)
              {
                v103 = *((_QWORD *)v94 - 1);
                v94 -= 8;
                *--v102 = v103;
              }
              __p = v102;
              v409 = v95;
              v410 = &v101[8 * v100];
              if (v96)
                operator delete(v96);
            }
            else
            {
              *(_QWORD *)v409 = v89;
              v95 = v94 + 8;
            }
            v409 = v95;
            goto LABEL_134;
          }
          v92 = (double *)(v90 + 16);
          if (v91 == 1)
          {
            v93 = *v92;
            goto LABEL_134;
          }
          if (v91)
            break;
          v93 = (double)*(uint64_t *)v92;
LABEL_134:
          begin = v411.__begin_;
          v105 = &v411.__begin_[v85];
          v105->first = v89;
          *(double *)&v105->second = v93;
          if (++v85 == v84)
          {
            v83 = v387;
            v84 = v388;
            goto LABEL_214;
          }
        }
        __str.__r_.__value_.__r.__words[0] = v86 + 32 * v85;
        __str.__r_.__value_.__l.__size_ = v39;
        result = turi::ml_data_internal::fill_row_buffer_from_column_buffer(std::vector<unsigned long> &,turi::ml_data_internal::row_data_block &,turi::ml_data_internal::row_metadata const&,std::vector<std::vector<turi::flexible_type>> const&,unsigned long,BOOL,BOOL,turi::ml_missing_value_action)::$_8::operator() const(void)::{lambda(void)#1}::operator()();
LABEL_608:
        __break(1u);
        return result;
      default:
        goto LABEL_472;
    }
  }
}

void sub_2183FC340(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, boost::detail::shared_count *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,void *__p,uint64_t a55,int a56,__int16 a57,char a58,char a59,void *a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a64;

  if (a59 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a64);
  turi::flexible_type_impl::ndarray<double>::~ndarray(&a33);
  if (a42)
  {
    a43 = (uint64_t)a42;
    operator delete(a42);
  }
  if (a45)
  {
    a46 = (uint64_t)a45;
    operator delete(a45);
  }
  if (a48)
  {
    a49 = (uint64_t)a48;
    operator delete(a48);
  }
  if (a51)
  {
    a52 = (uint64_t)a51;
    operator delete(a51);
  }
  _Unwind_Resume(a1);
}

void std::vector<turi::ml_data_internal::entry_value>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 3)
  {
    if (a2 >> 61)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    v9 = &v6[8 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *((_QWORD *)v10 - 1);
        v10 -= 8;
        *((_QWORD *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void turi::ml_data_internal::column_statistics::update_numeric_statistics(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double *v3;
  uint64_t v4;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  double v9;
  uint64_t v10;
  double *v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double *v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;

  v3 = *(double **)a3;
  v4 = *(_QWORD *)(a3 + 8);
  if (*(_QWORD *)a3 != v4)
  {
    v6 = *(_QWORD *)(a1 + 96);
    v7 = (_QWORD *)(*(_QWORD *)(a1 + 144) + 24 * a2);
    v8 = (v4 - (uint64_t)v3) >> 3;
    if (*v7 == v7[1])
    {
      std::vector<xgboost_old::tree::RTreeNodeStat>::resize((uint64_t)v7, v8);
      v17 = *(double **)a3;
      v18 = *(_QWORD *)(a3 + 8) - *(_QWORD *)a3;
      if (v18)
      {
        v19 = v18 >> 3;
        if (v19 <= 1)
          v19 = 1;
        v20 = (_QWORD *)(*v7 + 8);
        do
        {
          v21 = *(_QWORD *)v17++;
          *(v20 - 1) = v21;
          *v20 = 0;
          v20 += 2;
          --v19;
        }
        while (v19);
      }
    }
    else
    {
      v9 = (double)(unint64_t)(*(_QWORD *)(v6 + 8 * a2) + 1);
      if (v8 <= 1)
        v10 = 1;
      else
        v10 = (v4 - (uint64_t)v3) >> 3;
      v11 = (double *)(*v7 + 8);
      do
      {
        v12 = *(v11 - 1);
        v13 = *v3++;
        v14 = v13 - v12;
        v15 = v12 + (v13 - v12) / v9;
        *(v11 - 1) = v15;
        *v11 = *v11 + v14 * (v13 - v15);
        v11 += 2;
        --v10;
      }
      while (v10);
    }
    ++*(_QWORD *)(v6 + 8 * a2);
  }
}

void turi::ml_data_internal::fill_row_buffer_from_column_buffer(std::vector<unsigned long> &,turi::ml_data_internal::row_data_block &,turi::ml_data_internal::row_metadata const&,std::vector<std::vector<turi::flexible_type>> const&,unsigned long,BOOL,BOOL,turi::ml_missing_value_action)::$_7::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/ml/ml_data/data_storage/ml_data_row_format.cpp", 112);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/ml/ml_data/data_storage/ml_data_row_format.cpp", "operator()", 626, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::ml_data_internal::fill_row_buffer_from_column_buffer(std::vector<unsigned long> &,turi::ml_data_internal::row_data_block &,turi::ml_data_internal::row_metadata const&,std::vector<std::vector<turi::flexible_type>> const&,unsigned long,BOOL,BOOL,turi::ml_missing_value_action)::$_7::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2183FC868(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

uint64_t turi::ml_data_internal::column_indexer::immutable_map_value_to_index(void **this, const turi::flexible_type *a2)
{
  unsigned int v3;
  unint64_t *v5;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  unsigned int v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  void *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  void **v36;
  uint64_t v37;
  void **v40;
  const turi::flexible_type *v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45[3];
  _QWORD v46[3];

  v46[2] = *MEMORY[0x24BDAC8D0];
  v3 = *((unsigned __int8 *)a2 + 12);
  if (v3 > 7 || ((1 << v3) & 0x85) == 0)
  {
    v40 = this;
    v41 = a2;
    turi::ml_data_internal::column_indexer::immutable_map_value_to_index(turi::flexible_type const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()((uint64_t *)&v40);
  }
  memset(v46, 0, 13);
  if (v46 != (_QWORD *)a2)
  {
    *(_QWORD *)((char *)v46 + 5) = *(_QWORD *)((char *)a2 + 5);
    v46[0] = *(_QWORD *)a2;
    BYTE4(v46[1]) = v3;
    if (v3 - 2 <= 3)
    {
      v5 = (unint64_t *)v46[0];
      do
        v6 = __ldaxr(v5);
      while (__stlxr(v6 + 1, v5));
    }
  }
  turi::hash128(v45, (turi *)v46, a2);
  switch(BYTE4(v46[1]))
  {
    case 2:
      v7 = (unint64_t *)v46[0];
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
      {
        v10 = v46[0];
        if (v46[0])
        {
          if (*(char *)(v46[0] + 31) < 0)
            operator delete(*(void **)(v46[0] + 8));
          v11 = v10;
          v12 = 0x1012C404EF22A49;
          goto LABEL_50;
        }
      }
      break;
    case 3:
      v24 = (unint64_t *)v46[0];
      do
      {
        v25 = __ldaxr(v24);
        v26 = v25 - 1;
      }
      while (__stlxr(v26, v24));
      if (!v26)
      {
        v27 = v46[0];
        if (v46[0])
        {
          v28 = *(void **)(v46[0] + 8);
          if (v28)
          {
            *(_QWORD *)(v46[0] + 16) = v28;
            operator delete(v28);
          }
          v11 = v27;
          v12 = 0x1080C409938AC02;
          goto LABEL_50;
        }
      }
      break;
    case 4:
      v13 = (unint64_t *)v46[0];
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        v16 = v46[0];
        if (v46[0])
        {
          v40 = (void **)(v46[0] + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v40);
          goto LABEL_43;
        }
      }
      break;
    case 5:
      v29 = (unint64_t *)v46[0];
      do
      {
        v30 = __ldaxr(v29);
        v31 = v30 - 1;
      }
      while (__stlxr(v31, v29));
      if (!v31)
      {
        v16 = v46[0];
        if (v46[0])
        {
          v40 = (void **)(v46[0] + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v40);
LABEL_43:
          v11 = v16;
          v12 = 0x1020C405E66F15BLL;
          goto LABEL_50;
        }
      }
      break;
    case 8:
      v32 = (unint64_t *)v46[0];
      do
      {
        v33 = __ldaxr(v32);
        v34 = v33 - 1;
      }
      while (__stlxr(v34, v32));
      if (!v34)
      {
        v35 = v46[0];
        if (v46[0])
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v46[0] + 16));
          v11 = v35;
          v23 = -235920773;
          goto LABEL_49;
        }
      }
      break;
    case 9:
      v17 = (unint64_t *)v46[0];
      do
      {
        v18 = __ldaxr(v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v17));
      if (!v19)
      {
        v20 = v46[0];
        if (v46[0])
        {
          v21 = *(void **)(v46[0] + 48);
          if (v21)
          {
            *(_QWORD *)(v46[0] + 56) = v21;
            operator delete(v21);
          }
          v22 = *(void **)(v20 + 24);
          if (v22)
          {
            *(_QWORD *)(v20 + 32) = v22;
            operator delete(v22);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v20 + 8);
          v11 = v20;
          v23 = 2071181815;
LABEL_49:
          v12 = v23 | 0x1030C4000000000;
LABEL_50:
          MEMORY[0x219A19A08](v11, v12);
        }
      }
      break;
    default:
      break;
  }
  memset(v46, 0, 13);
  v36 = (void **)((char *)this[4] + 72 * (((0xDEB2A42E44AA4C17 * v45[1]) ^ (0x7E952A7B972F486FLL * v45[0])) >> 56) + 8);
  turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>::find((uint64_t)v36, v45, (uint64_t)&v40);
  if (v40 != v36)
  {
    if (v44)
      v37 = v43;
    else
      v37 = v42;
    return *(_QWORD *)(v37 + 32);
  }
  if (v44)
  {
    v37 = v43;
    if (v43)
      return *(_QWORD *)(v37 + 32);
  }
  else
  {
    v37 = v42;
    if (v41 != *v36 || v42 != *((_QWORD *)*v36 + 1))
      return *(_QWORD *)(v37 + 32);
  }
  return -1;
}

void sub_2183FCC58(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  switch(*(_BYTE *)(v1 - 28))
  {
    case 2:
      turi::gl_sframe::pack_columns((unint64_t **)(v1 - 40));
      break;
    case 3:
      turi::gl_sframe::pack_columns((unint64_t **)(v1 - 40));
      break;
    case 4:
      turi::csv_line_tokenizer::parse_as((unint64_t **)(v1 - 40));
      break;
    case 5:
      turi::csv_line_tokenizer::parse_as((unint64_t **)(v1 - 40));
      break;
    case 8:
      turi::gl_sframe::pack_columns((unint64_t **)(v1 - 40));
      break;
    case 9:
      turi::full_type_name<turi::flexible_type>((unint64_t **)(v1 - 40));
      break;
    default:
      break;
  }
  _Unwind_Resume(exception_object);
}

void turi::ml_data_internal::column_statistics::update_categorical_statistics(_QWORD *a1, uint64_t a2, unint64_t **a3)
{
  unint64_t *v6;
  unint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unsigned __int8 *v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  BOOL v23;

  v6 = *a3;
  v7 = a3[1];
  v8 = v7 - *a3;
  if (v7 == *a3)
  {
    v13 = 0;
    v6 = a3[1];
  }
  else
  {
    v9 = *v6;
    v10 = a1[11];
    if (*v6 >= v10)
    {
      v13 = 0;
    }
    else
    {
      v11 = 0;
      v12 = a1[15] + 24 * a2;
      do
      {
        if (v9 >= (uint64_t)(*(_QWORD *)(v12 + 8) - *(_QWORD *)v12) >> 3)
        {
          if (v9 >= (uint64_t)(*(_QWORD *)(v12 + 16) - *(_QWORD *)v12) >> 3)
          {
            v14 = (3 * (v9 + 1)) >> 1;
            if (v14 >= v10)
              v14 = v10;
            if (v14 <= v10 >> 1)
              v15 = v14;
            else
              v15 = v10;
            std::vector<unsigned long>::reserve((void **)v12, v15);
          }
          std::vector<unsigned long>::resize(v12, v9 + 1);
          v6 = *a3;
        }
        if (!v11 || v9 != v6[v11 - 1])
          ++*(_QWORD *)(*(_QWORD *)v12 + 8 * v9);
        v13 = v11 + 1;
        v7 = a3[1];
        if (v11 + 1 >= (unint64_t)(v7 - v6))
          break;
        v9 = v6[v11 + 1];
        v10 = a1[11];
        ++v11;
      }
      while (v9 < v10);
      v8 = v7 - v6;
    }
  }
  if (v13 != v8 && v13 < v7 - v6)
  {
    v16 = a1 + 35;
    do
    {
      v17 = v6[v13] - a1[11];
      if (a1[35] <= v17)
      {
        v20 = v17 + 1;
        v21 = *v16;
        if (*v16 < v17 + 1)
        {
          while (1)
          {
            v22 = __ldaxr(v16);
            if (v22 == v21)
            {
              if (!__stlxr(v20, v16))
                goto LABEL_41;
            }
            else
            {
              __clrex();
LABEL_41:
              v23 = v22 == v21 || v22 >= v20;
              v21 = v22;
              if (v23)
                break;
            }
          }
        }
      }
      if (a1[36] <= v17)
      {
        turi::ml_data_internal::column_statistics::resize_global_arrays<std::vector<unsigned long>>((uint64_t)a1, v17, (uint64_t)(a1 + 29));
        if (!v13)
        {
LABEL_29:
          v18 = (unsigned __int8 *)a1 + (v17 & 0x3F) + 168;
          do
          {
            while (*v18 == 1)
              ;
            do
              v19 = __ldaxr(v18);
            while (__stlxr(1u, v18));
          }
          while (v19);
          ++*(_QWORD *)(a1[29] + 8 * v17);
          __dmb(0xBu);
          *v18 = 0;
          v6 = *a3;
          goto LABEL_34;
        }
      }
      else if (!v13)
      {
        goto LABEL_29;
      }
      v6 = *a3;
      if (v17 != (*a3)[v13 - 1])
        goto LABEL_29;
LABEL_34:
      ++v13;
    }
    while (v13 < a3[1] - v6);
  }
  ++*(_QWORD *)(a1[12] + 8 * a2);
}

void turi::ml_data_internal::column_statistics::update_dict_statistics(_QWORD *a1, uint64_t a2, unint64_t **a3)
{
  unint64_t *v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  double v15;
  char *v16;
  _QWORD *v17;
  double *v18;
  double *v19;
  uint64_t v20;
  unint64_t v21;
  double v22;
  double v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t *v29;
  unint64_t *v30;
  double *v31;
  unint64_t v32;
  double v33;
  unsigned __int8 *v34;
  int v35;
  uint64_t v36;
  double *v37;
  double *v38;
  uint64_t v39;
  unint64_t v40;
  double v41;
  double v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  BOOL v46;
  uint64_t v47;

  v5 = *a3;
  v6 = a3[1];
  v7 = ((char *)v6 - (char *)*a3) >> 4;
  v47 = a1[12];
  if (v6 == *a3)
  {
    v14 = 0;
    v5 = a3[1];
  }
  else
  {
    v8 = *v5;
    v9 = a1[11];
    if (*v5 >= v9)
    {
      v14 = 0;
    }
    else
    {
      v10 = 0;
      v11 = a1[15] + 24 * a2;
      v12 = a1[18] + 24 * a2;
      v13 = 1;
      do
      {
        v14 = v13;
        v15 = *(double *)&v5[v10 + 1];
        if (v8 >= (uint64_t)(*(_QWORD *)(v11 + 8) - *(_QWORD *)v11) >> 3)
        {
          if (v8 >= (uint64_t)(*(_QWORD *)(v11 + 16) - *(_QWORD *)v11) >> 3)
          {
            v24 = (3 * (v8 + 1)) >> 1;
            if (v24 >= v9)
              v24 = v9;
            if (v24 <= v9 >> 1)
              v25 = v24;
            else
              v25 = v9;
            std::vector<unsigned long>::reserve((void **)v11, v25);
          }
          std::vector<unsigned long>::resize(v11, v8 + 1);
        }
        v16 = *(char **)v12;
        if (v8 >= (uint64_t)(*(_QWORD *)(v12 + 8) - *(_QWORD *)v12) >> 4)
        {
          if (v8 >= (uint64_t)(*(_QWORD *)(v12 + 16) - (_QWORD)v16) >> 4)
          {
            v26 = (3 * (v8 + 1)) >> 1;
            v27 = a1[11];
            if (v26 >= v27)
              v26 = a1[11];
            if (v26 <= v27 >> 1)
              v28 = v26;
            else
              v28 = a1[11];
            std::vector<turi::ml_data_internal::column_statistics::element_statistics_accumulator>::reserve((void **)v12, v28);
          }
          std::vector<xgboost_old::tree::RTreeNodeStat>::resize(v12, v8 + 1);
          v16 = *(char **)v12;
        }
        v17 = *(_QWORD **)v11;
        v18 = (double *)&v16[16 * v8];
        v19 = v18 + 1;
        v20 = *(_QWORD *)(*(_QWORD *)v11 + 8 * v8);
        if (v20)
        {
          v21 = v20 + 1;
          v22 = v15 - *v18;
          v23 = *v19 + v22 * (v15 - (*v18 + v22 / (double)v21));
          v15 = *v18 + v22 / (double)v21;
        }
        else
        {
          v23 = 0.0;
          v21 = 1;
        }
        *v18 = v15;
        v17[v8] = v21;
        *v19 = v23;
        v5 = *a3;
        v6 = a3[1];
        v7 = ((char *)v6 - (char *)*a3) >> 4;
        if (v14 >= v7)
          break;
        v8 = v5[v10 + 2];
        v9 = a1[11];
        v10 += 2;
        v13 = v14 + 1;
      }
      while (v8 < v9);
    }
  }
  if (v14 != v7 && v14 < ((char *)v6 - (char *)v5) >> 4)
  {
    v29 = a1 + 29;
    v30 = a1 + 35;
    while (1)
    {
      v31 = (double *)&v5[2 * v14];
      v32 = *(_QWORD *)v31 - a1[11];
      v33 = v31[1];
      if (a1[35] <= v32)
      {
        v43 = v32 + 1;
        v44 = *v30;
        if (*v30 < v32 + 1)
          break;
      }
LABEL_34:
      if (a1[36] <= v32)
        turi::ml_data_internal::column_statistics::resize_global_arrays<std::vector<unsigned long>,std::vector<turi::ml_data_internal::column_statistics::element_statistics_accumulator>>((uint64_t)a1, v32, (uint64_t)(a1 + 29), (uint64_t)(a1 + 32));
      v34 = (unsigned __int8 *)a1 + (v32 & 0x3F) + 168;
      do
      {
        while (*v34 == 1)
          ;
        do
          v35 = __ldaxr(v34);
        while (__stlxr(1u, v34));
      }
      while (v35);
      v36 = *v29;
      v37 = (double *)(a1[32] + 16 * v32);
      v38 = v37 + 1;
      v39 = *(_QWORD *)(*v29 + 8 * v32);
      if (v39)
      {
        v40 = v39 + 1;
        v41 = v33 - *v37;
        v42 = *v38 + v41 * (v33 - (*v37 + v41 / (double)v40));
        v33 = *v37 + v41 / (double)v40;
      }
      else
      {
        v42 = 0.0;
        v40 = 1;
      }
      *v37 = v33;
      *(_QWORD *)(v36 + 8 * v32) = v40;
      *v38 = v42;
      __dmb(0xBu);
      *v34 = 0;
      ++v14;
      v5 = *a3;
      if (v14 >= ((char *)a3[1] - (char *)*a3) >> 4)
        goto LABEL_56;
    }
    while (1)
    {
      v45 = __ldaxr(v30);
      if (v45 == v44)
      {
        if (!__stlxr(v43, v30))
          goto LABEL_50;
      }
      else
      {
        __clrex();
LABEL_50:
        v46 = v45 == v44 || v45 >= v43;
        v44 = v45;
        if (v46)
          goto LABEL_34;
      }
    }
  }
LABEL_56:
  ++*(_QWORD *)(v47 + 8 * a2);
}

uint64_t turi::ml_data_internal::estimate_num_data_entries(uint64_t *a1, _BYTE *a2)
{
  uint64_t v2;
  int v3;
  uint64_t result;

  v2 = *a1;
  v3 = *(_DWORD *)(*a1 + 24);
  result = 1;
  switch(v3)
  {
    case 0:
    case 1:
      return result;
    case 2:
    case 7:
      return *(_QWORD *)(v2 + 72);
    case 3:
      if (a2[12] != 4)
        goto LABEL_7;
      result = ((uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 16) - *(_QWORD *)(*(_QWORD *)a2 + 8)) >> 4) + 1;
      break;
    case 4:
      if (a2[12] != 5)
        goto LABEL_7;
      result = ((uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 16) - *(_QWORD *)(*(_QWORD *)a2 + 8)) >> 4) | 1;
      break;
    case 5:
LABEL_7:
      result = 0;
      break;
    default:
      turi::ml_data_internal::estimate_num_data_entries(std::shared_ptr<turi::ml_data_internal::column_metadata> const&,turi::flexible_type const&)::$_0::operator()();
  }
  return result;
}

void turi::ml_data_internal::estimate_num_data_entries(std::shared_ptr<turi::ml_data_internal::column_metadata> const&,turi::flexible_type const&)::$_0::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/ml/ml_data/data_storage/ml_data_row_format.cpp", 112);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/ml/ml_data/data_storage/ml_data_row_format.cpp", "operator()", 995, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::ml_data_internal::estimate_num_data_entries(std::shared_ptr<turi::ml_data_internal::column_metadata> const&,turi::flexible_type const&)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2183FD434(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

double turi::ml_data_internal::column_statistics::mean(turi::ml_data_internal::column_statistics *this, unint64_t a2)
{
  uint64_t v2;
  double v3;
  double result;
  uint64_t v5;

  if ((*((_DWORD *)this + 6) | 2) == 3)
  {
    v2 = *((_QWORD *)this + 4);
    v3 = 0.0;
    if (a2 < (*((_QWORD *)this + 5) - v2) >> 3)
      v3 = (double)*(unint64_t *)(v2 + 8 * a2);
    return v3 / fmax((double)*((unint64_t *)this + 10), 1.0);
  }
  else
  {
    v5 = *((_QWORD *)this + 7);
    result = 0.0;
    if (a2 < (*((_QWORD *)this + 8) - v5) >> 4)
      return *(double *)(v5 + 16 * a2);
  }
  return result;
}

void turi::ml_data_internal::fill_row_buffer_from_column_buffer(std::vector<unsigned long> &,turi::ml_data_internal::row_data_block &,turi::ml_data_internal::row_metadata const&,std::vector<std::vector<turi::flexible_type>> const&,unsigned long,BOOL,BOOL,turi::ml_missing_value_action)::$_5::operator() const(unsigned long)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/ml/ml_data/data_storage/ml_data_row_format.cpp", 112);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/ml/ml_data/data_storage/ml_data_row_format.cpp", "operator()", 538, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::ml_data_internal::fill_row_buffer_from_column_buffer(std::vector<unsigned long> &,turi::ml_data_internal::row_data_block &,turi::ml_data_internal::row_metadata const&,std::vector<std::vector<turi::flexible_type>> const&,unsigned long,BOOL,BOOL,turi::ml_missing_value_action)::$_5::operator() const(unsigned long)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2183FD618(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void sub_2183FD704(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void turi::ml_data_internal::column_statistics::resize_global_arrays<std::vector<unsigned long>>(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6;
  std::mutex *v7;
  uint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  uint64_t v15;
  _BYTE *v16;
  _BYTE v17[1024];
  uint64_t v18;

  v6 = *(_QWORD *)(a1 + 88);
  v7 = (std::mutex *)(a1 + 296);
  std::mutex::lock((std::mutex *)(a1 + 296));
  if (*(_QWORD *)(a1 + 288) <= a2)
  {
    v8 = 0;
    v9 = 2 * (v6 + a2) + 2;
    do
    {
      v10 = &v17[v8];
      *(_QWORD *)v10 = 0;
      v10[8] = 0;
      v8 += 16;
    }
    while (v8 != 1024);
    v11 = 0;
    v12 = a1 + 168;
    do
    {
      v13 = &v17[v11];
      if (v17[v11 + 8])
      {
        v14 = *(_BYTE **)v13;
        __dmb(0xBu);
        *v14 = 0;
      }
      *(_QWORD *)&v17[v11] = v12;
      v13[8] = 0;
      v11 += 16;
      ++v12;
    }
    while (v11 != 1024);
    boost::detail::lock_impl<std::unique_lock<turi::simple_spinlock> *>((uint64_t)v17, (uint64_t)&v18);
    std::vector<unsigned long>::resize(a3, v9);
    *(_QWORD *)(a1 + 288) = v9;
    v15 = 1024;
    do
    {
      if (v17[v15 - 8])
      {
        v16 = *(_BYTE **)&v17[v15 - 16];
        __dmb(0xBu);
        *v16 = 0;
      }
      v15 -= 16;
    }
    while (v15);
  }
  std::mutex::unlock(v7);
}

void sub_2183FD830(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::mutex *v9;
  uint64_t v11;
  _BYTE *v12;

  v11 = 1024;
  while (1)
  {
    if (*((_BYTE *)&a9 + v11 - 8))
    {
      v12 = *(_BYTE **)((char *)&a9 + v11 - 16);
      __dmb(0xBu);
      *v12 = 0;
    }
    v11 -= 16;
    if (!v11)
    {
      std::mutex::unlock(v9);
      _Unwind_Resume(a1);
    }
  }
}

void boost::detail::lock_impl<std::unique_lock<turi::simple_spinlock> *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t i;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  if (a1 == a2)
    return;
  v4 = a1 + 16;
  v5 = 1;
  for (i = a1 + 16; ; i = v7)
  {
    v11 = a1;
    v12 = 0;
    if ((v5 & 1) == 0)
      break;
    boost::unique_lock<std::unique_lock<turi::simple_spinlock>>::lock((uint64_t)&v11);
    v7 = boost::detail::try_lock_impl<std::unique_lock<turi::simple_spinlock> *>(i, a2);
    if (v7 == a2)
    {
      v11 = 0;
      v12 = 0;
      goto LABEL_12;
    }
    v5 = 0;
LABEL_9:
    boost::unique_lock<std::unique_lock<turi::simple_spinlock>>::~unique_lock(&v11);
  }
  v9 = i;
  v10 = a2;
  boost::detail::lock_impl<std::unique_lock<turi::simple_spinlock> *>(i, a2);
  v8 = boost::unique_lock<std::unique_lock<turi::simple_spinlock>>::try_lock((uint64_t)&v11);
  v7 = v4;
  if (!v8 || (v7 = boost::detail::try_lock_impl<std::unique_lock<turi::simple_spinlock> *>(v4, i), v7 != i))
  {
    v5 = v8 ^ 1;
    boost::detail::range_lock_guard<std::unique_lock<turi::simple_spinlock> *>::~range_lock_guard(&v9);
    goto LABEL_9;
  }
  v11 = 0;
  v12 = 0;
  v9 = v10;
  boost::detail::range_lock_guard<std::unique_lock<turi::simple_spinlock> *>::~range_lock_guard(&v9);
LABEL_12:
  boost::unique_lock<std::unique_lock<turi::simple_spinlock>>::~unique_lock(&v11);
}

void sub_2183FD974(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  boost::detail::range_lock_guard<std::unique_lock<turi::simple_spinlock> *>::~range_lock_guard(&a9);
  boost::unique_lock<std::unique_lock<turi::simple_spinlock>>::~unique_lock(&a11);
  _Unwind_Resume(a1);
}

uint64_t boost::unique_lock<std::unique_lock<turi::simple_spinlock>>::lock(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  _BYTE v4[56];

  v2 = *(_QWORD *)a1;
  if (!v2)
  {
    boost::lock_error::lock_error((boost::lock_error *)v4, 1u, "boost unique_lock has no mutex");
    boost::throw_exception<boost::lock_error>((uint64_t)v4);
  }
  if (*(_BYTE *)(a1 + 8))
  {
    boost::lock_error::lock_error((boost::lock_error *)v4, 0xBu, "boost unique_lock owns already the mutex");
    boost::throw_exception<boost::lock_error>((uint64_t)v4);
  }
  result = std::unique_lock<turi::simple_spinlock>::lock(v2);
  *(_BYTE *)(a1 + 8) = 1;
  return result;
}

void sub_2183FDA24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10)
{
  boost::system::system_error::~system_error(&a10);
  _Unwind_Resume(a1);
}

uint64_t boost::unique_lock<std::unique_lock<turi::simple_spinlock>>::try_lock(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  _BYTE v4[56];

  v2 = *(_QWORD *)a1;
  if (!v2)
  {
    boost::lock_error::lock_error((boost::lock_error *)v4, 1u, "boost unique_lock has no mutex");
    boost::throw_exception<boost::lock_error>((uint64_t)v4);
  }
  if (*(_BYTE *)(a1 + 8))
  {
    boost::lock_error::lock_error((boost::lock_error *)v4, 0xBu, "boost unique_lock owns already the mutex");
    boost::throw_exception<boost::lock_error>((uint64_t)v4);
  }
  result = std::unique_lock<turi::simple_spinlock>::try_lock(v2);
  *(_BYTE *)(a1 + 8) = result;
  return result;
}

void sub_2183FDAB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10)
{
  boost::system::system_error::~system_error(&a10);
  _Unwind_Resume(a1);
}

uint64_t std::unique_lock<turi::simple_spinlock>::lock(uint64_t result)
{
  unsigned __int8 *v1;
  int v2;

  v1 = *(unsigned __int8 **)result;
  if (!*(_QWORD *)result)
  {
    std::__throw_system_error(1, "unique_lock::lock: references null mutex");
    goto LABEL_8;
  }
  if (*(_BYTE *)(result + 8))
  {
LABEL_8:
    std::__throw_system_error(11, "unique_lock::lock: already locked");
    return boost::detail::try_lock_impl<std::unique_lock<turi::simple_spinlock> *>();
  }
  do
  {
    while (*v1 == 1)
      ;
    do
      v2 = __ldaxr(v1);
    while (__stlxr(1u, v1));
  }
  while (v2);
  *(_BYTE *)(result + 8) = 1;
  return result;
}

uint64_t boost::detail::try_lock_impl<std::unique_lock<turi::simple_spinlock> *>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  char v6;

  v2 = a1;
  if (a1 != a2)
  {
    v5 = a1;
    v6 = 0;
    boost::unique_lock<std::unique_lock<turi::simple_spinlock>>::try_lock((uint64_t)&v5);
    if (v6)
    {
      v2 = boost::detail::try_lock_impl<std::unique_lock<turi::simple_spinlock> *>(v2 + 16, a2);
      if (v2 == a2)
      {
        v5 = 0;
        v6 = 0;
        v2 = a2;
      }
    }
    boost::unique_lock<std::unique_lock<turi::simple_spinlock>>::~unique_lock(&v5);
  }
  return v2;
}

void sub_2183FDBB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  boost::unique_lock<std::unique_lock<turi::simple_spinlock>>::~unique_lock(&a9);
  _Unwind_Resume(a1);
}

void boost::detail::range_lock_guard<std::unique_lock<turi::simple_spinlock> *>::~range_lock_guard(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;

  v1 = *a1;
  v2 = a1[1];
  while (v1 != v2)
  {
    if (!*(_BYTE *)(v1 + 8))
    {
      std::__throw_system_error(1, "unique_lock::unlock: not locked");
      __break(1u);
      return;
    }
    v3 = *(_BYTE **)v1;
    __dmb(0xBu);
    *v3 = 0;
    *(_BYTE *)(v1 + 8) = 0;
    v2 = a1[1];
    v1 = *a1 + 16;
    *a1 = v1;
  }
}

void boost::unique_lock<std::unique_lock<turi::simple_spinlock>>::~unique_lock(_BYTE *a1)
{
  uint64_t v1;
  _BYTE *v2;

  if (a1[8])
  {
    v1 = *(_QWORD *)a1;
    if (*(_BYTE *)(*(_QWORD *)a1 + 8))
    {
      v2 = *(_BYTE **)v1;
      __dmb(0xBu);
      *v2 = 0;
      *(_BYTE *)(v1 + 8) = 0;
    }
    else
    {
      std::__throw_system_error(1, "unique_lock::unlock: not locked");
      __break(1u);
    }
  }
}

void std::vector<turi::ml_data_internal::column_statistics::element_statistics_accumulator>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 4)
  {
    if (a2 >> 60)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::flexible_type>>(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF0];
    v9 = &v6[16 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        *((_OWORD *)v12 - 1) = *((_OWORD *)v10 - 1);
        v12 -= 16;
        v10 -= 16;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void turi::ml_data_internal::column_statistics::resize_global_arrays<std::vector<unsigned long>,std::vector<turi::ml_data_internal::column_statistics::element_statistics_accumulator>>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  std::mutex *v9;
  uint64_t v10;
  unint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  _BYTE *v16;
  uint64_t v17;
  _BYTE *v18;
  _BYTE v19[1024];
  uint64_t v20;

  v8 = *(_QWORD *)(a1 + 88);
  v9 = (std::mutex *)(a1 + 296);
  std::mutex::lock((std::mutex *)(a1 + 296));
  if (*(_QWORD *)(a1 + 288) <= a2)
  {
    v10 = 0;
    v11 = 2 * (v8 + a2) + 2;
    do
    {
      v12 = &v19[v10];
      *(_QWORD *)v12 = 0;
      v12[8] = 0;
      v10 += 16;
    }
    while (v10 != 1024);
    v13 = 0;
    v14 = a1 + 168;
    do
    {
      v15 = &v19[v13];
      if (v19[v13 + 8])
      {
        v16 = *(_BYTE **)v15;
        __dmb(0xBu);
        *v16 = 0;
      }
      *(_QWORD *)&v19[v13] = v14;
      v15[8] = 0;
      v13 += 16;
      ++v14;
    }
    while (v13 != 1024);
    boost::detail::lock_impl<std::unique_lock<turi::simple_spinlock> *>((uint64_t)v19, (uint64_t)&v20);
    std::vector<unsigned long>::resize(a3, v11);
    std::vector<xgboost_old::tree::RTreeNodeStat>::resize(a4, v11);
    *(_QWORD *)(a1 + 288) = v11;
    v17 = 1024;
    do
    {
      if (v19[v17 - 8])
      {
        v18 = *(_BYTE **)&v19[v17 - 16];
        __dmb(0xBu);
        *v18 = 0;
      }
      v17 -= 16;
    }
    while (v17);
  }
  std::mutex::unlock(v9);
}

void sub_2183FDE34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::mutex *v9;
  uint64_t v11;
  _BYTE *v12;

  v11 = 1024;
  while (1)
  {
    if (*((_BYTE *)&a9 + v11 - 8))
    {
      v12 = *(_BYTE **)((char *)&a9 + v11 - 16);
      __dmb(0xBu);
      *v12 = 0;
    }
    v11 -= 16;
    if (!v11)
    {
      std::mutex::unlock(v9);
      _Unwind_Resume(a1);
    }
  }
}

void sub_2183FE010(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void turi::dense_bitset::load(turi::dense_bitset *this, turi::iarchive *a2)
{
  void *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  size_t v10;
  uint64_t v11;

  v4 = *(void **)this;
  if (v4)
    free(v4);
  *(_QWORD *)this = 0;
  v5 = *((_QWORD *)a2 + 2);
  if (v5)
  {
    *((_QWORD *)this + 1) = *(_QWORD *)(v5 + *((_QWORD *)a2 + 3));
    *((_QWORD *)a2 + 3) += 8;
  }
  else
  {
    std::istream::read();
  }
  v6 = (uint64_t *)((char *)this + 16);
  v7 = *((_QWORD *)a2 + 2);
  if (v7)
  {
    v8 = *(_QWORD *)(v7 + *((_QWORD *)a2 + 3));
    *v6 = v8;
    *((_QWORD *)a2 + 3) += 8;
    if (!v8)
      return;
  }
  else
  {
    std::istream::read();
    v8 = *v6;
    if (!*v6)
      return;
  }
  v9 = malloc_type_malloc(8 * v8, 0x100004000313F17uLL);
  *(_QWORD *)this = v9;
  v10 = 8 * *((_QWORD *)this + 2);
  v11 = *((_QWORD *)a2 + 2);
  if (v11)
  {
    memcpy(v9, (const void *)(v11 + *((_QWORD *)a2 + 3)), v10);
    *((_QWORD *)a2 + 3) += v10;
  }
  else
  {
    std::istream::read();
  }
}

uint64_t turi::dense_bitset::save(const void **this, turi::oarchive *a2)
{
  _QWORD *v4;
  unint64_t v5;
  char *v6;
  _QWORD *v7;
  uint64_t result;
  unint64_t v9;
  uint64_t v10;
  const void *v11;
  size_t v12;
  size_t v13;
  char *v14;
  size_t v15;
  char **v16;
  size_t v17;
  BOOL v18;
  std::vector<char>::size_type v19;
  size_t v20;
  uint64_t *v21;
  size_t v22;
  BOOL v23;
  std::vector<char>::size_type v24;
  size_t v25;
  char **v26;
  size_t v27;
  BOOL v28;
  std::vector<char>::size_type v29;

  v4 = this + 1;
  if (*(_QWORD *)a2)
  {
    std::ostream::write();
  }
  else
  {
    v5 = *((_QWORD *)a2 + 5);
    if (*((_QWORD *)a2 + 4) + 8 > v5)
    {
      v15 = 2 * v5 + 16;
      *((_QWORD *)a2 + 5) = v15;
      v16 = (char **)*((_QWORD *)a2 + 2);
      if (v16)
      {
        v6 = *v16;
        v17 = v16[1] - *v16;
        v18 = v15 >= v17;
        v19 = v15 - v17;
        if (v19 != 0 && v18)
        {
          std::vector<char>::__append(*((std::vector<char> **)a2 + 2), v19);
          v6 = (char *)**((_QWORD **)a2 + 2);
        }
        else if (!v18)
        {
          v16[1] = &v6[v15];
        }
      }
      else
      {
        v6 = (char *)malloc_type_realloc(*((void **)a2 + 3), v15, 0xF6EA6B1uLL);
      }
      *((_QWORD *)a2 + 3) = v6;
    }
    else
    {
      v6 = (char *)*((_QWORD *)a2 + 3);
    }
    *(_QWORD *)&v6[*((_QWORD *)a2 + 4)] = *v4;
    *((_QWORD *)a2 + 4) += 8;
  }
  v7 = this + 2;
  if (*(_QWORD *)a2)
  {
    result = std::ostream::write();
  }
  else
  {
    v9 = *((_QWORD *)a2 + 5);
    if (*((_QWORD *)a2 + 4) + 8 > v9)
    {
      v20 = 2 * v9 + 16;
      *((_QWORD *)a2 + 5) = v20;
      v21 = (uint64_t *)*((_QWORD *)a2 + 2);
      if (v21)
      {
        result = *v21;
        v22 = v21[1] - *v21;
        v23 = v20 >= v22;
        v24 = v20 - v22;
        if (v24 != 0 && v23)
        {
          std::vector<char>::__append(*((std::vector<char> **)a2 + 2), v24);
          result = **((_QWORD **)a2 + 2);
        }
        else if (!v23)
        {
          v21[1] = result + v20;
        }
      }
      else
      {
        result = (uint64_t)malloc_type_realloc(*((void **)a2 + 3), v20, 0xF6EA6B1uLL);
      }
      *((_QWORD *)a2 + 3) = result;
    }
    else
    {
      result = *((_QWORD *)a2 + 3);
    }
    *(_QWORD *)(result + *((_QWORD *)a2 + 4)) = *v7;
    *((_QWORD *)a2 + 4) += 8;
  }
  v10 = *v7;
  if (*v7)
  {
    v11 = *this;
    v12 = 8 * v10;
    if (*(_QWORD *)a2)
    {
      return std::ostream::write();
    }
    else
    {
      v13 = *((_QWORD *)a2 + 5);
      if (*((_QWORD *)a2 + 4) + v12 > v13)
      {
        v25 = 2 * (v13 + v12);
        *((_QWORD *)a2 + 5) = v25;
        v26 = (char **)*((_QWORD *)a2 + 2);
        if (v26)
        {
          v14 = *v26;
          v27 = v26[1] - *v26;
          v28 = v25 >= v27;
          v29 = v25 - v27;
          if (v29 != 0 && v28)
          {
            std::vector<char>::__append(*((std::vector<char> **)a2 + 2), v29);
            v14 = (char *)**((_QWORD **)a2 + 2);
          }
          else if (!v28)
          {
            v26[1] = &v14[v25];
          }
        }
        else
        {
          v14 = (char *)malloc_type_realloc(*((void **)a2 + 3), v25, 0xF6EA6B1uLL);
        }
        *((_QWORD *)a2 + 3) = v14;
      }
      else
      {
        v14 = (char *)*((_QWORD *)a2 + 3);
      }
      result = (uint64_t)memcpy(&v14[*((_QWORD *)a2 + 4)], v11, v12);
      *((_QWORD *)a2 + 4) += v12;
    }
  }
  return result;
}

__n128 OUTLINED_FUNCTION_9_1(__n128 *a1)
{
  __n128 result;

  result = *a1;
  a1->n128_u64[1] = 0;
  a1[1].n128_u64[0] = 0;
  a1->n128_u64[0] = 0;
  return result;
}

__n128 OUTLINED_FUNCTION_10_4(__n128 *a1)
{
  __n128 result;

  result = *a1;
  a1->n128_u64[1] = 0;
  a1[1].n128_u64[0] = 0;
  a1->n128_u64[0] = 0;
  return result;
}

uint64_t OUTLINED_FUNCTION_32_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  return std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&a30);
}

uint64_t OUTLINED_FUNCTION_33_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  return std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a30);
}

uint64_t OUTLINED_FUNCTION_37_4(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  return turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&a30, a2);
}

uint64_t OUTLINED_FUNCTION_38_1()
{
  return turi::flexible_type_impl::get_string_visitor::operator()();
}

uint64_t OUTLINED_FUNCTION_39_1(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  return turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&a30, a2);
}

uint64_t OUTLINED_FUNCTION_40(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  return turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&a30, a2);
}

uint64_t OUTLINED_FUNCTION_41(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  return turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&a30, a2);
}

void OUTLINED_FUNCTION_42_0(uint64_t a1, turi::flexible_type_impl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  turi::flexible_type_impl::get_string_visitor::operator()(a2, (std::string *)&a9);
}

void OUTLINED_FUNCTION_47_0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p)
{
  operator delete(__p);
}

void __cxx_global_var_init_5_3()
{
  uint64_t v0;
  const char *v1;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, v1, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

void _GLOBAL__sub_I_ml_data_row_format_cpp()
{
  _QWORD *v0;
  uint64_t v1;
  void *__p[2];
  char v3;
  _BYTE v4[24];
  _BYTE *v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  std::string::basic_string[abi:ne180100]<0>(__p, "TURI_ML_DATA_TARGET_ROW_BYTE_MINIMUM");
  v5 = 0;
  turi::globals::register_global<long long>::register_global(&turi::ml_data_internal::__ML_DATA_TARGET_ROW_BYTE_MINIMUM__register__instance, __p, &turi::ml_data_internal::ML_DATA_TARGET_ROW_BYTE_MINIMUM, 1, v4);
  v0 = v5;
  if (v5 == v4)
  {
    v1 = 4;
    v0 = v4;
  }
  else
  {
    if (!v5)
      goto LABEL_6;
    v1 = 5;
  }
  (*(void (**)(void))(*v0 + 8 * v1))();
LABEL_6:
  if (v3 < 0)
    operator delete(__p[0]);
}

void sub_2183FE668(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  _GLOBAL__sub_I_ml_data_row_format_cpp_cold_1((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2183FE850(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_4_16()
{
  uint64_t v0;
  const char *v1;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, v1, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_ml_data_row_translation_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

unint64_t turi::ml_data_internal::estimate_row_block_size(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  long double v20;
  double v21;
  void *__p;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  _BYTE v27[24];
  _BYTE *v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v4 = turi::ml_data_internal::ML_DATA_TARGET_ROW_BYTE_MINIMUM;
  if (*(_BYTE *)(a2 + 2))
  {
    v5 = *(_QWORD *)(a2 + 8);
    goto LABEL_21;
  }
  v7 = *(uint64_t **)(a2 + 56);
  v8 = *(uint64_t **)(a2 + 64);
  if (v7 == v8)
  {
    v9 = 0;
  }
  else
  {
    v9 = 0;
    do
    {
      v10 = *v7;
      v7 += 2;
      v11 = *(_QWORD *)(v10 + 72);
      if (v11 == -1)
        v11 = 0;
      v9 += v11;
    }
    while (v7 != v8);
  }
  if (a1 >= 0x3E8)
    v12 = 1000;
  else
    v12 = a1;
  v25 = v12;
  v26 = v9;
  std::vector<unsigned long>::vector(&__p, v12, &v26);
  v13 = operator new(0x28uLL);
  *v13 = &off_24D93F4F0;
  v13[1] = &v25;
  v13[2] = a2;
  v13[3] = a3;
  v13[4] = &__p;
  v28 = v13;
  turi::in_parallel((turi::thread_pool *)v27);
  v14 = v28;
  if (v28 == v27)
  {
    v15 = 4;
    v14 = v27;
    goto LABEL_17;
  }
  if (v28)
  {
    v15 = 5;
LABEL_17:
    (*(void (**)(void))(*v14 + 8 * v15))();
  }
  v16 = (unint64_t *)__p;
  v17 = (unint64_t)((v24 - (_BYTE *)__p) >> 3) >> 1;
  v18 = (unint64_t *)((char *)__p + 8 * v17);
  if (v18 != (unint64_t *)v24)
  {
    std::__nth_element[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<unsigned long *>>((uint64_t)__p, v18, (unint64_t *)v24);
    v16 = (unint64_t *)__p;
  }
  v5 = v16[v17];
  v24 = (char *)v16;
  operator delete(v16);
LABEL_21:
  if (v5 <= 1)
    v19 = 1;
  else
    v19 = v5;
  v20 = log2((double)(v4 >> 3) / (double)v19 + 1.0);
  v21 = exp2(ceil(v20 + 1.0));
  if ((unint64_t)v21 <= 1)
    return 1;
  else
    return (unint64_t)v21;
}

void sub_2183FEB64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2183FED5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void std::__function::__func<turi::ml_data_internal::estimate_row_block_size(unsigned long,turi::ml_data_internal::row_metadata const&,std::vector<std::shared_ptr<turi::sarray_reader<turi::flexible_type>>> const&)::$_0,std::allocator<turi::ml_data_internal::estimate_row_block_size(unsigned long,turi::ml_data_internal::row_metadata const&,std::vector<std::shared_ptr<turi::sarray_reader<turi::flexible_type>>> const&)::$_0>,void ()(unsigned long,unsigned long)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

__n128 std::__function::__func<turi::ml_data_internal::estimate_row_block_size(unsigned long,turi::ml_data_internal::row_metadata const&,std::vector<std::shared_ptr<turi::sarray_reader<turi::flexible_type>>> const&)::$_0,std::allocator<turi::ml_data_internal::estimate_row_block_size(unsigned long,turi::ml_data_internal::row_metadata const&,std::vector<std::shared_ptr<turi::sarray_reader<turi::flexible_type>>> const&)::$_0>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_24D93F4F0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<turi::ml_data_internal::estimate_row_block_size(unsigned long,turi::ml_data_internal::row_metadata const&,std::vector<std::shared_ptr<turi::sarray_reader<turi::flexible_type>>> const&)::$_0,std::allocator<turi::ml_data_internal::estimate_row_block_size(unsigned long,turi::ml_data_internal::row_metadata const&,std::vector<std::shared_ptr<turi::sarray_reader<turi::flexible_type>>> const&)::$_0>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24D93F4F0;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<turi::ml_data_internal::estimate_row_block_size(unsigned long,turi::ml_data_internal::row_metadata const&,std::vector<std::shared_ptr<turi::sarray_reader<turi::flexible_type>>> const&)::$_0,std::allocator<turi::ml_data_internal::estimate_row_block_size(unsigned long,turi::ml_data_internal::row_metadata const&,std::vector<std::shared_ptr<turi::sarray_reader<turi::flexible_type>>> const&)::$_0>,void ()(unsigned long,unsigned long)>::operator()(uint64_t a1, uint64_t *a2, unint64_t *a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  BOOL v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void **v24;

  v3 = *a2;
  v4 = *a3;
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v5 = *(_QWORD *)(a1 + 16);
  if (*(_QWORD *)(v5 + 48))
  {
    v7 = 0;
    v8 = **(_QWORD **)(a1 + 8);
    v9 = v8 * v3;
    v10 = v9 / v4;
    v11 = (v8 + v9) / v4;
    do
    {
      v12 = (uint64_t *)(*(_QWORD *)(v5 + 56) + 16 * v7);
      v13 = *(_QWORD *)(*v12 + 72) != -1 || v10 >= v11;
      v14 = v10;
      if (!v13)
      {
        do
        {
          v15 = v14 + 16;
          if (v11 >= v14 + 16)
            v16 = v14 + 16;
          else
            v16 = v11;
          v17 = *(_QWORD *)(**(_QWORD **)(a1 + 24) + 16 * v7);
          (*(void (**)(uint64_t, unint64_t, unint64_t, uint64_t *))(*(_QWORD *)v17 + 48))(v17, v14, v16, &v21);
          v18 = v21;
          if (v22 != v21)
          {
            v19 = 0;
            v20 = 0;
            do
            {
              *(_QWORD *)(**(_QWORD **)(a1 + 32) + 8 * (v20 + v14)) += turi::ml_data_internal::estimate_num_data_entries(v12, (_BYTE *)(v18 + v19));
              ++v20;
              v18 = v21;
              v19 += 16;
            }
            while (v20 < (v22 - v21) >> 4);
          }
          v14 += 16;
        }
        while (v15 < v11);
        v5 = *(_QWORD *)(a1 + 16);
      }
      ++v7;
    }
    while (v7 < *(_QWORD *)(v5 + 48));
  }
  v24 = (void **)&v21;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v24);
}

void sub_2183FEFBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<turi::ml_data_internal::estimate_row_block_size(unsigned long,turi::ml_data_internal::row_metadata const&,std::vector<std::shared_ptr<turi::sarray_reader<turi::flexible_type>>> const&)::$_0,std::allocator<turi::ml_data_internal::estimate_row_block_size(unsigned long,turi::ml_data_internal::row_metadata const&,std::vector<std::shared_ptr<turi::sarray_reader<turi::flexible_type>>> const&)::$_0>,void ()(unsigned long,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::ml_data_internal::estimate_row_block_size(unsigned long,turi::ml_data_internal::row_metadata const&,std::vector<std::shared_ptr<turi::sarray_reader<turi::flexible_type>>> const&)::$_0,std::allocator<turi::ml_data_internal::estimate_row_block_size(unsigned long,turi::ml_data_internal::row_metadata const&,std::vector<std::shared_ptr<turi::sarray_reader<turi::flexible_type>>> const&)::$_0>,void ()(unsigned long,unsigned long)>::target_type()
{
}

uint64_t std::__nth_element[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<unsigned long *>>(uint64_t result, unint64_t *a2, unint64_t *a3)
{
  unint64_t *v3;
  unint64_t *v5;
  unint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;

  if (a3 != a2)
  {
    v3 = a3;
    v5 = (unint64_t *)result;
    do
    {
      v6 = v3 - v5;
      if (v6 < 2)
        break;
      if (v6 == 3)
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<unsigned long *>>(v5, v5 + 1, v3 - 1);
      if (v6 == 2)
      {
        v33 = *(v3 - 1);
        v34 = *v5;
        if (v33 < *v5)
        {
          *v5 = v33;
          *(v3 - 1) = v34;
        }
        return result;
      }
      if ((char *)v3 - (char *)v5 <= 63)
        return (uint64_t)std::__selection_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<unsigned long *>>(v5, v3);
      v7 = &v5[v6 >> 1];
      v8 = v3 - 1;
      result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<unsigned long *>>(v5, v7, v3 - 1);
      v9 = *v5;
      if (*v5 >= *v7)
      {
        v10 = v3 - 1;
        while (--v10 != v5)
        {
          if (*v10 < *v7)
          {
            *v5 = *v10;
            *v10 = v9;
            result = (result + 1);
            goto LABEL_13;
          }
        }
        v22 = v5 + 1;
        if (v9 >= *v8)
        {
          while (v22 != v8)
          {
            v23 = *v22;
            if (v9 < *v22)
            {
              *v22++ = *v8;
              *v8 = v23;
              goto LABEL_45;
            }
            ++v22;
          }
          return result;
        }
LABEL_45:
        if (v22 == v8)
          return result;
        while (1)
        {
          v27 = *v5;
          do
          {
            v29 = *v22++;
            v28 = v29;
          }
          while (v27 >= v29);
          v30 = v22 - 1;
          do
          {
            v32 = *--v8;
            v31 = v32;
          }
          while (v27 < v32);
          if (v30 >= v8)
            break;
          *v30 = v31;
          *v8 = v28;
        }
        v5 = v22 - 1;
        if (v30 > a2)
          return result;
      }
      else
      {
        v10 = v3 - 1;
LABEL_13:
        v11 = v5 + 1;
        if (v5 + 1 >= v10)
        {
          v16 = v5 + 1;
        }
        else
        {
          v12 = v5 + 1;
          while (1)
          {
            v13 = *v7;
            do
            {
              v15 = *v12++;
              v14 = v15;
            }
            while (v15 < v13);
            v16 = v12 - 1;
            do
            {
              v18 = *--v10;
              v17 = v18;
            }
            while (v18 >= v13);
            if (v16 >= v10)
              break;
            *v16 = v17;
            *v10 = v14;
            result = (result + 1);
            if (v16 == v7)
              v7 = v10;
          }
        }
        if (v16 != v7)
        {
          v19 = *v16;
          if (*v7 < *v16)
          {
            *v16 = *v7;
            *v7 = v19;
            result = (result + 1);
          }
        }
        if (v16 == a2)
          return result;
        if (!(_DWORD)result)
        {
          if (v16 <= a2)
          {
            v24 = v16 + 1;
            while (v24 != v3)
            {
              v26 = *(v24 - 1);
              v25 = *v24++;
              if (v25 < v26)
                goto LABEL_29;
            }
          }
          else
          {
            while (v11 != v16)
            {
              v21 = *(v11 - 1);
              v20 = *v11++;
              if (v20 < v21)
                goto LABEL_29;
            }
          }
          return result;
        }
LABEL_29:
        if (v16 <= a2)
          v5 = v16 + 1;
        else
          v3 = v16;
      }
    }
    while (v3 != a2);
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<unsigned long *>>(unint64_t *a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v3 = *a2;
  v4 = *a1;
  v5 = *a3;
  if (*a2 < *a1)
  {
    if (v5 < v3)
    {
      *a1 = v5;
      *a3 = v4;
      return 1;
    }
    *a1 = v3;
    *a2 = v4;
    if (*a3 >= v4)
      return 1;
    *a2 = *a3;
    *a3 = v4;
    return 2;
  }
  if (v5 < v3)
  {
    *a2 = v5;
    *a3 = v3;
    v6 = *a1;
    if (*a2 >= *a1)
      return 1;
    *a1 = *a2;
    *a2 = v6;
    return 2;
  }
  return 0;
}

unint64_t *std::__selection_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<unsigned long *>>(unint64_t *result, unint64_t *a2)
{
  unint64_t *v2;
  unint64_t v3;
  unint64_t *v4;
  unint64_t *v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;

  while (result != a2 - 1)
  {
    v2 = result++;
    if (v2 != a2 && result != a2)
    {
      v3 = *v2;
      v4 = result;
      v5 = v2;
      v6 = result;
      do
      {
        v8 = *v6++;
        v7 = v8;
        if (v8 < v3)
        {
          v3 = v7;
          v5 = v4;
        }
        v4 = v6;
      }
      while (v6 != a2);
      if (v5 != v2)
      {
        v9 = *v2;
        *v2 = *v5;
        *v5 = v9;
      }
    }
  }
  return result;
}

void __cxx_global_var_init_4_17()
{
  uint64_t v0;
  const char *v1;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, v1, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_util_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void validateTrainingInputs<CoreML::Specification::NeuralNetwork>(uint64_t a1@<X0>, _QWORD *a2@<X1>, CoreML::Result *a3@<X8>)
{
  const CoreML::Specification::FeatureDescription *v6;
  uint64_t v7;
  uint64_t v8;
  CoreML::Specification *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  int v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  int v23;
  char *v24;
  unint64_t v25;
  int v26;
  uint64_t v27;
  __int128 *v28;
  __int128 v29;
  uint64_t v30;
  size_t size;
  unsigned __int8 **v32;
  std::string::size_type v33;
  unsigned __int8 *v34;
  int v35;
  unsigned __int8 *v36;
  std::string *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t *v42;
  const void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  unsigned __int8 *v48;
  std::string *v49;
  uint64_t v50;
  int v51;
  std::string::size_type v52;
  size_t v53;
  std::string *v54;
  uint64_t v55;
  std::string *v56;
  int v57;
  int v58;
  int v59;
  int v60;
  BOOL v62;
  BOOL v63;
  _BOOL4 v64;
  char v65;
  uint64_t *v66;
  uint64_t *v67;
  uint64_t *v68;
  char *v69;
  uint64_t *v70;
  char *v71;
  std::string *v72;
  __int128 v73;
  void **v74;
  std::string::size_type v75;
  std::string *v76;
  __int128 v77;
  std::string *v78;
  __int128 v79;
  void **v80;
  std::string::size_type v81;
  std::string *v82;
  __int128 v83;
  std::string *v84;
  std::string::size_type v85;
  char v86;
  CoreML::Result *v87;
  void *v88;
  int v89;
  std::string v90;
  std::string v91;
  std::string v92;
  std::string v93;
  std::string v94;
  void *__p[2];
  unsigned __int8 v96;
  void *v97[2];
  unsigned __int8 v98;
  std::string v99;
  std::string v100;
  char *v101;
  char *v102;
  char *v103;
  std::string v104;
  char v105[8];
  void *v106;
  char v107;
  _QWORD v108[5];

  v108[2] = *MEMORY[0x24BDAC8D0];
  CoreML::Result::Result((CoreML::Result *)v105);
  memset(&v104, 0, sizeof(v104));
  if (*(int *)(a1 + 72) <= 1)
  {
    MEMORY[0x219A19390](&v104, "Must provide training inputs for updatable neural network (expecting both input and target for loss function).");
    CoreML::Result::Result(a3, 15);
    goto LABEL_161;
  }
  v7 = 0;
  v101 = 0;
  v102 = 0;
  v103 = 0;
  do
  {
    if (*(int *)(a1 + 24) < 1)
    {
LABEL_8:
      v10 = v102;
      if (v102 >= v103)
      {
        v12 = v101;
        v13 = (v102 - v101) >> 2;
        v14 = v13 + 1;
        if ((unint64_t)(v13 + 1) >> 62)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v15 = v103 - v101;
        if ((v103 - v101) >> 1 > v14)
          v14 = v15 >> 1;
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL)
          v16 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v16 = v14;
        if (v16)
        {
          v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v103, v16);
          v12 = v101;
          v10 = v102;
        }
        else
        {
          v17 = 0;
        }
        v18 = &v17[4 * v13];
        *(_DWORD *)v18 = v7;
        v11 = v18 + 4;
        while (v10 != v12)
        {
          v19 = *((_DWORD *)v10 - 1);
          v10 -= 4;
          *((_DWORD *)v18 - 1) = v19;
          v18 -= 4;
        }
        v101 = v18;
        v102 = v11;
        v103 = &v17[4 * v16];
        if (v12)
          operator delete(v12);
      }
      else
      {
        *(_DWORD *)v102 = v7;
        v11 = v10 + 4;
      }
      v102 = v11;
    }
    else
    {
      v8 = 0;
      v9 = *(CoreML::Specification **)(*(_QWORD *)(a1 + 80) + 8 * v7 + 8);
      while (!CoreML::Specification::isEquivalent(v9, *(const CoreML::Specification::FeatureDescription **)(*(_QWORD *)(a1 + 32) + 8 * v8 + 8), v6))
      {
        if (++v8 >= *(int *)(a1 + 24))
          goto LABEL_8;
      }
    }
    ++v7;
    v20 = *(int *)(a1 + 72);
  }
  while (v7 < v20);
  if (v102 == v101)
  {
    MEMORY[0x219A19390](&v104, "Training inputs don't describe required inputs for the loss (needs both the input and the target).");
    CoreML::Result::Result(a3, 15);
    goto LABEL_159;
  }
  if (v20 == (v102 - v101) >> 2)
  {
    MEMORY[0x219A19390](&v104, "The training inputs must include at least one input from the model itself as required for training (should have at least one input in common with those used for prediction).");
    CoreML::Result::Result(a3, 15);
    goto LABEL_159;
  }
  memset(&v100, 0, sizeof(v100));
  v21 = (uint64_t *)a2[8];
  if (!v21)
    v21 = &CoreML::Specification::_NetworkUpdateParameters_default_instance_;
  v22 = *(_QWORD *)(v21[4] + 8);
  v23 = *(_DWORD *)(v22 + 36);
  if (v23 == 11 || v23 == 10)
    std::string::operator=(&v100, *(const std::string **)(*(_QWORD *)(v22 + 24) + 24));
  v24 = v101;
  if (v102 == v101)
    goto LABEL_154;
  v25 = 0;
  v26 = 0;
  v87 = a3;
  do
  {
    v89 = v26;
    v27 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * *(int *)&v24[4 * v25] + 8);
    v28 = *(__int128 **)(v27 + 16);
    if (*((char *)v28 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v99, *(const std::string::value_type **)v28, *((_QWORD *)v28 + 1));
    }
    else
    {
      v29 = *v28;
      v99.__r_.__value_.__r.__words[2] = *((_QWORD *)v28 + 2);
      *(_OWORD *)&v99.__r_.__value_.__l.__data_ = v29;
    }
    v30 = HIBYTE(v99.__r_.__value_.__r.__words[2]);
    size = v99.__r_.__value_.__l.__size_;
    if (!v88)
      goto LABEL_76;
    v32 = *(unsigned __int8 ***)(a1 + 88);
    if ((v99.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v33 = HIBYTE(v99.__r_.__value_.__r.__words[2]);
    else
      v33 = v99.__r_.__value_.__l.__size_;
    v34 = (unsigned __int8 *)*((unsigned __int8 *)v32 + 23);
    v35 = (char)v34;
    if ((char)v34 < 0)
      v34 = v32[1];
    if ((unsigned __int8 *)v33 != v34)
      goto LABEL_76;
    if (v35 >= 0)
      v36 = *(unsigned __int8 **)(a1 + 88);
    else
      v36 = *v32;
    if ((*((_BYTE *)&v99.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      if (memcmp(v99.__r_.__value_.__l.__data_, v36, v99.__r_.__value_.__l.__size_))
        goto LABEL_76;
    }
    else if (*((_BYTE *)&v99.__r_.__value_.__s + 23))
    {
      v37 = &v99;
      v38 = HIBYTE(v99.__r_.__value_.__r.__words[2]);
      while (v37->__r_.__value_.__s.__data_[0] == *v36)
      {
        v37 = (std::string *)((char *)v37 + 1);
        ++v36;
        if (!--v38)
          goto LABEL_57;
      }
LABEL_76:
      v51 = v89;
      goto LABEL_77;
    }
LABEL_57:
    v39 = *(_QWORD *)(a1 + 56);
    if (v39)
      v40 = (uint64_t *)(v39 + 8);
    else
      v40 = 0;
    v41 = *(int *)(a1 + 48);
    if (!(_DWORD)v41)
      goto LABEL_76;
    v42 = &v40[v41];
    v43 = (const void *)v99.__r_.__value_.__r.__words[0];
    while (1)
    {
      v44 = *v40;
      v45 = *(_QWORD *)(*v40 + 16);
      v46 = *(unsigned __int8 *)(v45 + 23);
      v47 = (char)v46;
      if ((v46 & 0x80u) != 0)
        v46 = *(_QWORD *)(v45 + 8);
      if (v33 != v46)
        goto LABEL_75;
      v48 = v47 >= 0 ? *(unsigned __int8 **)(*v40 + 16) : *(unsigned __int8 **)v45;
      if ((v30 & 0x80) != 0)
        break;
      if (!(_DWORD)v30)
        goto LABEL_104;
      v49 = &v99;
      v50 = v30;
      while (v49->__r_.__value_.__s.__data_[0] == *v48)
      {
        v49 = (std::string *)((char *)v49 + 1);
        ++v48;
        if (!--v50)
          goto LABEL_104;
      }
LABEL_75:
      if (++v40 == v42)
        goto LABEL_76;
    }
    if (memcmp(v43, v48, size))
      goto LABEL_75;
LABEL_104:
    if (*(_QWORD *)(v27 + 32))
      v66 = *(uint64_t **)(v27 + 32);
    else
      v66 = &CoreML::Specification::_FeatureType_default_instance_;
    if (*(_QWORD *)(v44 + 32))
      v67 = *(uint64_t **)(v44 + 32);
    else
      v67 = &CoreML::Specification::_FeatureType_default_instance_;
    if (CoreML::Specification::operator==((uint64_t)v66, (uint64_t)v67))
    {
      LODWORD(v30) = HIBYTE(v99.__r_.__value_.__r.__words[2]);
      v51 = 1;
      size = v99.__r_.__value_.__l.__size_;
LABEL_77:
      if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v52 = HIBYTE(v100.__r_.__value_.__r.__words[2]);
      else
        v52 = v100.__r_.__value_.__l.__size_;
      v53 = v30;
      if ((v30 & 0x80u) != 0)
        v53 = size;
      if (v52 == v53)
      {
        if ((v30 & 0x80u) == 0)
          v54 = &v99;
        else
          v54 = (std::string *)v99.__r_.__value_.__r.__words[0];
        if ((*((_BYTE *)&v100.__r_.__value_.__s + 23) & 0x80) != 0)
        {
          v64 = memcmp(v100.__r_.__value_.__l.__data_, v54, v100.__r_.__value_.__l.__size_) == 0;
        }
        else if (*((_BYTE *)&v100.__r_.__value_.__s + 23))
        {
          v55 = HIBYTE(v100.__r_.__value_.__r.__words[2]) - 1;
          v56 = &v100;
          do
          {
            v58 = v56->__r_.__value_.__s.__data_[0];
            v56 = (std::string *)((char *)v56 + 1);
            v57 = v58;
            v60 = v54->__r_.__value_.__s.__data_[0];
            v54 = (std::string *)((char *)v54 + 1);
            v59 = v60;
            v62 = v55-- != 0;
            v63 = v57 == v59;
            v64 = v57 == v59;
          }
          while (v63 && v62);
        }
        else
        {
          v64 = 1;
        }
      }
      else
      {
        v64 = 0;
      }
      v26 = v64 | v51;
      v65 = 1;
      if ((v30 & 0x80) != 0)
LABEL_100:
        operator delete(v99.__r_.__value_.__l.__data_);
    }
    else
    {
      v68 = *(uint64_t **)(v44 + 32);
      if (!v68)
        v68 = &CoreML::Specification::_FeatureType_default_instance_;
      if (*((_DWORD *)v68 + 9) == 1)
        v69 = "Int64";
      else
        v69 = "String";
      std::string::basic_string[abi:ne180100]<0>(v97, v69);
      v70 = *(uint64_t **)(v27 + 32);
      if (!v70)
        v70 = &CoreML::Specification::_FeatureType_default_instance_;
      if (*((_DWORD *)v70 + 9) == 1)
        v71 = "Int64";
      else
        v71 = "String";
      std::string::basic_string[abi:ne180100]<0>(__p, v71);
      std::operator+<char>();
      v26 = v89;
      v72 = std::string::append(&v90, " doesn't match the expected type of the classifier. Found: ");
      v73 = *(_OWORD *)&v72->__r_.__value_.__l.__data_;
      v91.__r_.__value_.__r.__words[2] = v72->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v91.__r_.__value_.__l.__data_ = v73;
      v72->__r_.__value_.__l.__size_ = 0;
      v72->__r_.__value_.__r.__words[2] = 0;
      v72->__r_.__value_.__r.__words[0] = 0;
      if ((v96 & 0x80u) == 0)
        v74 = __p;
      else
        v74 = (void **)__p[0];
      if ((v96 & 0x80u) == 0)
        v75 = v96;
      else
        v75 = (std::string::size_type)__p[1];
      v76 = std::string::append(&v91, (const std::string::value_type *)v74, v75);
      v77 = *(_OWORD *)&v76->__r_.__value_.__l.__data_;
      v92.__r_.__value_.__r.__words[2] = v76->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v92.__r_.__value_.__l.__data_ = v77;
      v76->__r_.__value_.__l.__size_ = 0;
      v76->__r_.__value_.__r.__words[2] = 0;
      v76->__r_.__value_.__r.__words[0] = 0;
      v78 = std::string::append(&v92, ", expected: ");
      v79 = *(_OWORD *)&v78->__r_.__value_.__l.__data_;
      v93.__r_.__value_.__r.__words[2] = v78->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v93.__r_.__value_.__l.__data_ = v79;
      v78->__r_.__value_.__l.__size_ = 0;
      v78->__r_.__value_.__r.__words[2] = 0;
      v78->__r_.__value_.__r.__words[0] = 0;
      if ((v98 & 0x80u) == 0)
        v80 = v97;
      else
        v80 = (void **)v97[0];
      if ((v98 & 0x80u) == 0)
        v81 = v98;
      else
        v81 = (std::string::size_type)v97[1];
      v82 = std::string::append(&v93, (const std::string::value_type *)v80, v81);
      v83 = *(_OWORD *)&v82->__r_.__value_.__l.__data_;
      v94.__r_.__value_.__r.__words[2] = v82->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v94.__r_.__value_.__l.__data_ = v83;
      v82->__r_.__value_.__l.__size_ = 0;
      v82->__r_.__value_.__r.__words[2] = 0;
      v82->__r_.__value_.__r.__words[0] = 0;
      v84 = std::string::append(&v94, ".");
      v85 = v84->__r_.__value_.__r.__words[0];
      v108[0] = v84->__r_.__value_.__l.__size_;
      *(_QWORD *)((char *)v108 + 7) = *(std::string::size_type *)((char *)&v84->__r_.__value_.__r.__words[1] + 7);
      v86 = HIBYTE(v84->__r_.__value_.__r.__words[2]);
      v84->__r_.__value_.__l.__size_ = 0;
      v84->__r_.__value_.__r.__words[2] = 0;
      v84->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v104.__r_.__value_.__l.__data_);
      v104.__r_.__value_.__r.__words[0] = v85;
      v104.__r_.__value_.__l.__size_ = v108[0];
      *(std::string::size_type *)((char *)&v104.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v108 + 7);
      *((_BYTE *)&v104.__r_.__value_.__s + 23) = v86;
      if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v94.__r_.__value_.__l.__data_);
      if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v93.__r_.__value_.__l.__data_);
      if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v92.__r_.__value_.__l.__data_);
      if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v91.__r_.__value_.__l.__data_);
      if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v90.__r_.__value_.__l.__data_);
      CoreML::Result::Result(v87, 15);
      if ((char)v96 < 0)
        operator delete(__p[0]);
      if ((char)v98 < 0)
        operator delete(v97[0]);
      v65 = 0;
      if ((*((_BYTE *)&v99.__r_.__value_.__s + 23) & 0x80) != 0)
        goto LABEL_100;
    }
    if ((v65 & 1) == 0)
      goto LABEL_157;
    ++v25;
    v24 = v101;
  }
  while (v25 < (v102 - v101) >> 2);
  a3 = v87;
  if ((v26 & 1) != 0)
  {
    CoreML::Result::Result(v87);
    goto LABEL_157;
  }
LABEL_154:
  std::operator+<char>();
  if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v104.__r_.__value_.__l.__data_);
  v104 = v99;
  CoreML::Result::Result(a3, 15);
LABEL_157:
  if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v100.__r_.__value_.__l.__data_);
LABEL_159:
  if (v101)
  {
    v102 = v101;
    operator delete(v101);
  }
LABEL_161:
  if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v104.__r_.__value_.__l.__data_);
  if (v107 < 0)
    operator delete(v106);
}

void sub_2183FFC8C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;

  if (*(char *)(v1 - 201) < 0)
    operator delete(*(void **)(v1 - 224));
  v3 = *(void **)(v1 - 200);
  if (v3)
  {
    *(_QWORD *)(v1 - 192) = v3;
    operator delete(v3);
  }
  if (*(char *)(v1 - 153) < 0)
    operator delete(*(void **)(v1 - 176));
  if (*(char *)(v1 - 121) < 0)
    operator delete(*(void **)(v1 - 144));
  _Unwind_Resume(a1);
}

void validateTrainingInputs<CoreML::Specification::NeuralNetworkRegressor>(uint64_t a1@<X0>, _QWORD *a2@<X1>, CoreML::Result *a3@<X8>)
{
  const CoreML::Specification::FeatureDescription *v6;
  uint64_t v7;
  uint64_t v8;
  CoreML::Specification *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  int v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  int v23;
  char *v24;
  unint64_t v25;
  int v26;
  uint64_t v27;
  __int128 *v28;
  __int128 v29;
  uint64_t v30;
  size_t size;
  unsigned __int8 **v32;
  std::string::size_type v33;
  unsigned __int8 *v34;
  int v35;
  unsigned __int8 *v36;
  std::string *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t *v42;
  const void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  unsigned __int8 *v48;
  std::string *v49;
  uint64_t v50;
  int v51;
  std::string::size_type v52;
  size_t v53;
  std::string *v54;
  uint64_t v55;
  std::string *v56;
  int v57;
  int v58;
  int v59;
  int v60;
  BOOL v62;
  BOOL v63;
  _BOOL4 v64;
  char v65;
  uint64_t *v66;
  uint64_t *v67;
  uint64_t *v68;
  char *v69;
  uint64_t *v70;
  char *v71;
  std::string *v72;
  __int128 v73;
  void **v74;
  std::string::size_type v75;
  std::string *v76;
  __int128 v77;
  std::string *v78;
  __int128 v79;
  void **v80;
  std::string::size_type v81;
  std::string *v82;
  __int128 v83;
  std::string *v84;
  std::string::size_type v85;
  char v86;
  CoreML::Result *v87;
  void *v88;
  int v89;
  std::string v90;
  std::string v91;
  std::string v92;
  std::string v93;
  std::string v94;
  void *__p[2];
  unsigned __int8 v96;
  void *v97[2];
  unsigned __int8 v98;
  std::string v99;
  std::string v100;
  char *v101;
  char *v102;
  char *v103;
  std::string v104;
  char v105[8];
  void *v106;
  char v107;
  _QWORD v108[5];

  v108[2] = *MEMORY[0x24BDAC8D0];
  CoreML::Result::Result((CoreML::Result *)v105);
  memset(&v104, 0, sizeof(v104));
  if (*(int *)(a1 + 72) <= 1)
  {
    MEMORY[0x219A19390](&v104, "Must provide training inputs for updatable neural network (expecting both input and target for loss function).");
    CoreML::Result::Result(a3, 15);
    goto LABEL_161;
  }
  v7 = 0;
  v101 = 0;
  v102 = 0;
  v103 = 0;
  do
  {
    if (*(int *)(a1 + 24) < 1)
    {
LABEL_8:
      v10 = v102;
      if (v102 >= v103)
      {
        v12 = v101;
        v13 = (v102 - v101) >> 2;
        v14 = v13 + 1;
        if ((unint64_t)(v13 + 1) >> 62)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v15 = v103 - v101;
        if ((v103 - v101) >> 1 > v14)
          v14 = v15 >> 1;
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL)
          v16 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v16 = v14;
        if (v16)
        {
          v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v103, v16);
          v12 = v101;
          v10 = v102;
        }
        else
        {
          v17 = 0;
        }
        v18 = &v17[4 * v13];
        *(_DWORD *)v18 = v7;
        v11 = v18 + 4;
        while (v10 != v12)
        {
          v19 = *((_DWORD *)v10 - 1);
          v10 -= 4;
          *((_DWORD *)v18 - 1) = v19;
          v18 -= 4;
        }
        v101 = v18;
        v102 = v11;
        v103 = &v17[4 * v16];
        if (v12)
          operator delete(v12);
      }
      else
      {
        *(_DWORD *)v102 = v7;
        v11 = v10 + 4;
      }
      v102 = v11;
    }
    else
    {
      v8 = 0;
      v9 = *(CoreML::Specification **)(*(_QWORD *)(a1 + 80) + 8 * v7 + 8);
      while (!CoreML::Specification::isEquivalent(v9, *(const CoreML::Specification::FeatureDescription **)(*(_QWORD *)(a1 + 32) + 8 * v8 + 8), v6))
      {
        if (++v8 >= *(int *)(a1 + 24))
          goto LABEL_8;
      }
    }
    ++v7;
    v20 = *(int *)(a1 + 72);
  }
  while (v7 < v20);
  if (v102 == v101)
  {
    MEMORY[0x219A19390](&v104, "Training inputs don't describe required inputs for the loss (needs both the input and the target).");
    CoreML::Result::Result(a3, 15);
    goto LABEL_159;
  }
  if (v20 == (v102 - v101) >> 2)
  {
    MEMORY[0x219A19390](&v104, "The training inputs must include at least one input from the model itself as required for training (should have at least one input in common with those used for prediction).");
    CoreML::Result::Result(a3, 15);
    goto LABEL_159;
  }
  memset(&v100, 0, sizeof(v100));
  v21 = (uint64_t *)a2[8];
  if (!v21)
    v21 = &CoreML::Specification::_NetworkUpdateParameters_default_instance_;
  v22 = *(_QWORD *)(v21[4] + 8);
  v23 = *(_DWORD *)(v22 + 36);
  if (v23 == 11 || v23 == 10)
    std::string::operator=(&v100, *(const std::string **)(*(_QWORD *)(v22 + 24) + 24));
  v24 = v101;
  if (v102 == v101)
    goto LABEL_154;
  v25 = 0;
  v26 = 0;
  v87 = a3;
  do
  {
    v89 = v26;
    v27 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * *(int *)&v24[4 * v25] + 8);
    v28 = *(__int128 **)(v27 + 16);
    if (*((char *)v28 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v99, *(const std::string::value_type **)v28, *((_QWORD *)v28 + 1));
    }
    else
    {
      v29 = *v28;
      v99.__r_.__value_.__r.__words[2] = *((_QWORD *)v28 + 2);
      *(_OWORD *)&v99.__r_.__value_.__l.__data_ = v29;
    }
    v30 = HIBYTE(v99.__r_.__value_.__r.__words[2]);
    size = v99.__r_.__value_.__l.__size_;
    if (!v88)
      goto LABEL_76;
    v32 = *(unsigned __int8 ***)(a1 + 88);
    if ((v99.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v33 = HIBYTE(v99.__r_.__value_.__r.__words[2]);
    else
      v33 = v99.__r_.__value_.__l.__size_;
    v34 = (unsigned __int8 *)*((unsigned __int8 *)v32 + 23);
    v35 = (char)v34;
    if ((char)v34 < 0)
      v34 = v32[1];
    if ((unsigned __int8 *)v33 != v34)
      goto LABEL_76;
    if (v35 >= 0)
      v36 = *(unsigned __int8 **)(a1 + 88);
    else
      v36 = *v32;
    if ((*((_BYTE *)&v99.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      if (memcmp(v99.__r_.__value_.__l.__data_, v36, v99.__r_.__value_.__l.__size_))
        goto LABEL_76;
    }
    else if (*((_BYTE *)&v99.__r_.__value_.__s + 23))
    {
      v37 = &v99;
      v38 = HIBYTE(v99.__r_.__value_.__r.__words[2]);
      while (v37->__r_.__value_.__s.__data_[0] == *v36)
      {
        v37 = (std::string *)((char *)v37 + 1);
        ++v36;
        if (!--v38)
          goto LABEL_57;
      }
LABEL_76:
      v51 = v89;
      goto LABEL_77;
    }
LABEL_57:
    v39 = *(_QWORD *)(a1 + 56);
    if (v39)
      v40 = (uint64_t *)(v39 + 8);
    else
      v40 = 0;
    v41 = *(int *)(a1 + 48);
    if (!(_DWORD)v41)
      goto LABEL_76;
    v42 = &v40[v41];
    v43 = (const void *)v99.__r_.__value_.__r.__words[0];
    while (1)
    {
      v44 = *v40;
      v45 = *(_QWORD *)(*v40 + 16);
      v46 = *(unsigned __int8 *)(v45 + 23);
      v47 = (char)v46;
      if ((v46 & 0x80u) != 0)
        v46 = *(_QWORD *)(v45 + 8);
      if (v33 != v46)
        goto LABEL_75;
      v48 = v47 >= 0 ? *(unsigned __int8 **)(*v40 + 16) : *(unsigned __int8 **)v45;
      if ((v30 & 0x80) != 0)
        break;
      if (!(_DWORD)v30)
        goto LABEL_104;
      v49 = &v99;
      v50 = v30;
      while (v49->__r_.__value_.__s.__data_[0] == *v48)
      {
        v49 = (std::string *)((char *)v49 + 1);
        ++v48;
        if (!--v50)
          goto LABEL_104;
      }
LABEL_75:
      if (++v40 == v42)
        goto LABEL_76;
    }
    if (memcmp(v43, v48, size))
      goto LABEL_75;
LABEL_104:
    if (*(_QWORD *)(v27 + 32))
      v66 = *(uint64_t **)(v27 + 32);
    else
      v66 = &CoreML::Specification::_FeatureType_default_instance_;
    if (*(_QWORD *)(v44 + 32))
      v67 = *(uint64_t **)(v44 + 32);
    else
      v67 = &CoreML::Specification::_FeatureType_default_instance_;
    if (CoreML::Specification::operator==((uint64_t)v66, (uint64_t)v67))
    {
      LODWORD(v30) = HIBYTE(v99.__r_.__value_.__r.__words[2]);
      v51 = 1;
      size = v99.__r_.__value_.__l.__size_;
LABEL_77:
      if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v52 = HIBYTE(v100.__r_.__value_.__r.__words[2]);
      else
        v52 = v100.__r_.__value_.__l.__size_;
      v53 = v30;
      if ((v30 & 0x80u) != 0)
        v53 = size;
      if (v52 == v53)
      {
        if ((v30 & 0x80u) == 0)
          v54 = &v99;
        else
          v54 = (std::string *)v99.__r_.__value_.__r.__words[0];
        if ((*((_BYTE *)&v100.__r_.__value_.__s + 23) & 0x80) != 0)
        {
          v64 = memcmp(v100.__r_.__value_.__l.__data_, v54, v100.__r_.__value_.__l.__size_) == 0;
        }
        else if (*((_BYTE *)&v100.__r_.__value_.__s + 23))
        {
          v55 = HIBYTE(v100.__r_.__value_.__r.__words[2]) - 1;
          v56 = &v100;
          do
          {
            v58 = v56->__r_.__value_.__s.__data_[0];
            v56 = (std::string *)((char *)v56 + 1);
            v57 = v58;
            v60 = v54->__r_.__value_.__s.__data_[0];
            v54 = (std::string *)((char *)v54 + 1);
            v59 = v60;
            v62 = v55-- != 0;
            v63 = v57 == v59;
            v64 = v57 == v59;
          }
          while (v63 && v62);
        }
        else
        {
          v64 = 1;
        }
      }
      else
      {
        v64 = 0;
      }
      v26 = v64 | v51;
      v65 = 1;
      if ((v30 & 0x80) != 0)
LABEL_100:
        operator delete(v99.__r_.__value_.__l.__data_);
    }
    else
    {
      v68 = *(uint64_t **)(v44 + 32);
      if (!v68)
        v68 = &CoreML::Specification::_FeatureType_default_instance_;
      if (*((_DWORD *)v68 + 9) == 1)
        v69 = "Int64";
      else
        v69 = "String";
      std::string::basic_string[abi:ne180100]<0>(v97, v69);
      v70 = *(uint64_t **)(v27 + 32);
      if (!v70)
        v70 = &CoreML::Specification::_FeatureType_default_instance_;
      if (*((_DWORD *)v70 + 9) == 1)
        v71 = "Int64";
      else
        v71 = "String";
      std::string::basic_string[abi:ne180100]<0>(__p, v71);
      std::operator+<char>();
      v26 = v89;
      v72 = std::string::append(&v90, " doesn't match the expected type of the classifier. Found: ");
      v73 = *(_OWORD *)&v72->__r_.__value_.__l.__data_;
      v91.__r_.__value_.__r.__words[2] = v72->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v91.__r_.__value_.__l.__data_ = v73;
      v72->__r_.__value_.__l.__size_ = 0;
      v72->__r_.__value_.__r.__words[2] = 0;
      v72->__r_.__value_.__r.__words[0] = 0;
      if ((v96 & 0x80u) == 0)
        v74 = __p;
      else
        v74 = (void **)__p[0];
      if ((v96 & 0x80u) == 0)
        v75 = v96;
      else
        v75 = (std::string::size_type)__p[1];
      v76 = std::string::append(&v91, (const std::string::value_type *)v74, v75);
      v77 = *(_OWORD *)&v76->__r_.__value_.__l.__data_;
      v92.__r_.__value_.__r.__words[2] = v76->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v92.__r_.__value_.__l.__data_ = v77;
      v76->__r_.__value_.__l.__size_ = 0;
      v76->__r_.__value_.__r.__words[2] = 0;
      v76->__r_.__value_.__r.__words[0] = 0;
      v78 = std::string::append(&v92, ", expected: ");
      v79 = *(_OWORD *)&v78->__r_.__value_.__l.__data_;
      v93.__r_.__value_.__r.__words[2] = v78->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v93.__r_.__value_.__l.__data_ = v79;
      v78->__r_.__value_.__l.__size_ = 0;
      v78->__r_.__value_.__r.__words[2] = 0;
      v78->__r_.__value_.__r.__words[0] = 0;
      if ((v98 & 0x80u) == 0)
        v80 = v97;
      else
        v80 = (void **)v97[0];
      if ((v98 & 0x80u) == 0)
        v81 = v98;
      else
        v81 = (std::string::size_type)v97[1];
      v82 = std::string::append(&v93, (const std::string::value_type *)v80, v81);
      v83 = *(_OWORD *)&v82->__r_.__value_.__l.__data_;
      v94.__r_.__value_.__r.__words[2] = v82->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v94.__r_.__value_.__l.__data_ = v83;
      v82->__r_.__value_.__l.__size_ = 0;
      v82->__r_.__value_.__r.__words[2] = 0;
      v82->__r_.__value_.__r.__words[0] = 0;
      v84 = std::string::append(&v94, ".");
      v85 = v84->__r_.__value_.__r.__words[0];
      v108[0] = v84->__r_.__value_.__l.__size_;
      *(_QWORD *)((char *)v108 + 7) = *(std::string::size_type *)((char *)&v84->__r_.__value_.__r.__words[1] + 7);
      v86 = HIBYTE(v84->__r_.__value_.__r.__words[2]);
      v84->__r_.__value_.__l.__size_ = 0;
      v84->__r_.__value_.__r.__words[2] = 0;
      v84->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v104.__r_.__value_.__l.__data_);
      v104.__r_.__value_.__r.__words[0] = v85;
      v104.__r_.__value_.__l.__size_ = v108[0];
      *(std::string::size_type *)((char *)&v104.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v108 + 7);
      *((_BYTE *)&v104.__r_.__value_.__s + 23) = v86;
      if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v94.__r_.__value_.__l.__data_);
      if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v93.__r_.__value_.__l.__data_);
      if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v92.__r_.__value_.__l.__data_);
      if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v91.__r_.__value_.__l.__data_);
      if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v90.__r_.__value_.__l.__data_);
      CoreML::Result::Result(v87, 15);
      if ((char)v96 < 0)
        operator delete(__p[0]);
      if ((char)v98 < 0)
        operator delete(v97[0]);
      v65 = 0;
      if ((*((_BYTE *)&v99.__r_.__value_.__s + 23) & 0x80) != 0)
        goto LABEL_100;
    }
    if ((v65 & 1) == 0)
      goto LABEL_157;
    ++v25;
    v24 = v101;
  }
  while (v25 < (v102 - v101) >> 2);
  a3 = v87;
  if ((v26 & 1) != 0)
  {
    CoreML::Result::Result(v87);
    goto LABEL_157;
  }
LABEL_154:
  std::operator+<char>();
  if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v104.__r_.__value_.__l.__data_);
  v104 = v99;
  CoreML::Result::Result(a3, 15);
LABEL_157:
  if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v100.__r_.__value_.__l.__data_);
LABEL_159:
  if (v101)
  {
    v102 = v101;
    operator delete(v101);
  }
LABEL_161:
  if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v104.__r_.__value_.__l.__data_);
  if (v107 < 0)
    operator delete(v106);
}

void sub_2184005DC(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;

  if (*(char *)(v1 - 201) < 0)
    operator delete(*(void **)(v1 - 224));
  v3 = *(void **)(v1 - 200);
  if (v3)
  {
    *(_QWORD *)(v1 - 192) = v3;
    operator delete(v3);
  }
  if (*(char *)(v1 - 153) < 0)
    operator delete(*(void **)(v1 - 176));
  if (*(char *)(v1 - 121) < 0)
    operator delete(*(void **)(v1 - 144));
  _Unwind_Resume(a1);
}

void validateTrainingInputs<CoreML::Specification::NeuralNetworkClassifier>(uint64_t a1@<X0>, uint64_t a2@<X1>, CoreML::Result *a3@<X8>)
{
  const CoreML::Specification::FeatureDescription *v6;
  uint64_t v7;
  uint64_t v8;
  CoreML::Specification *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  int v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  int v23;
  const std::string **v24;
  char *v25;
  unint64_t v26;
  int v27;
  uint64_t v28;
  __int128 *v29;
  __int128 v30;
  uint64_t v31;
  size_t v32;
  size_t size;
  std::string::size_type v34;
  uint64_t v35;
  int v36;
  unsigned __int8 *v37;
  std::string *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  const void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  unsigned __int8 *v49;
  std::string *v50;
  size_t v51;
  uint64_t *v52;
  uint64_t *v53;
  std::string::size_type v54;
  size_t v55;
  std::string *v56;
  uint64_t v57;
  std::string *v58;
  int v59;
  int v60;
  int v61;
  int v62;
  BOOL v64;
  BOOL v65;
  _BOOL4 v66;
  char v67;
  uint64_t *v68;
  char *v69;
  uint64_t *v70;
  char *v71;
  std::string *v72;
  __int128 v73;
  void **v74;
  std::string::size_type v75;
  std::string *v76;
  __int128 v77;
  std::string *v78;
  __int128 v79;
  void **v80;
  std::string::size_type v81;
  std::string *v82;
  __int128 v83;
  std::string *v84;
  std::string::size_type v85;
  char v86;
  CoreML::Result *v87;
  int v88;
  std::string v89;
  std::string v90;
  std::string v91;
  std::string v92;
  std::string v93;
  void *__p[2];
  unsigned __int8 v95;
  void *v96[2];
  unsigned __int8 v97;
  std::string v98;
  std::string v99;
  char *v100;
  char *v101;
  char *v102;
  std::string v103;
  char v104[8];
  void *v105;
  char v106;
  _QWORD v107[5];

  v107[2] = *MEMORY[0x24BDAC8D0];
  CoreML::Result::Result((CoreML::Result *)v104);
  memset(&v103, 0, sizeof(v103));
  if (*(int *)(a1 + 72) <= 1)
  {
    MEMORY[0x219A19390](&v103, "Must provide training inputs for updatable neural network (expecting both input and target for loss function).");
    CoreML::Result::Result(a3, 15);
    goto LABEL_163;
  }
  v7 = 0;
  v100 = 0;
  v101 = 0;
  v102 = 0;
  do
  {
    if (*(int *)(a1 + 24) < 1)
    {
LABEL_8:
      v10 = v101;
      if (v101 >= v102)
      {
        v12 = v100;
        v13 = (v101 - v100) >> 2;
        v14 = v13 + 1;
        if ((unint64_t)(v13 + 1) >> 62)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v15 = v102 - v100;
        if ((v102 - v100) >> 1 > v14)
          v14 = v15 >> 1;
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL)
          v16 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v16 = v14;
        if (v16)
        {
          v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v102, v16);
          v12 = v100;
          v10 = v101;
        }
        else
        {
          v17 = 0;
        }
        v18 = &v17[4 * v13];
        *(_DWORD *)v18 = v7;
        v11 = v18 + 4;
        while (v10 != v12)
        {
          v19 = *((_DWORD *)v10 - 1);
          v10 -= 4;
          *((_DWORD *)v18 - 1) = v19;
          v18 -= 4;
        }
        v100 = v18;
        v101 = v11;
        v102 = &v17[4 * v16];
        if (v12)
          operator delete(v12);
      }
      else
      {
        *(_DWORD *)v101 = v7;
        v11 = v10 + 4;
      }
      v101 = v11;
    }
    else
    {
      v8 = 0;
      v9 = *(CoreML::Specification **)(*(_QWORD *)(a1 + 80) + 8 * v7 + 8);
      while (!CoreML::Specification::isEquivalent(v9, *(const CoreML::Specification::FeatureDescription **)(*(_QWORD *)(a1 + 32) + 8 * v8 + 8), v6))
      {
        if (++v8 >= *(int *)(a1 + 24))
          goto LABEL_8;
      }
    }
    ++v7;
    v20 = *(int *)(a1 + 72);
  }
  while (v7 < v20);
  if (v101 == v100)
  {
    MEMORY[0x219A19390](&v103, "Training inputs don't describe required inputs for the loss (needs both the input and the target).");
    CoreML::Result::Result(a3, 15);
    goto LABEL_161;
  }
  if (v20 == (v101 - v100) >> 2)
  {
    MEMORY[0x219A19390](&v103, "The training inputs must include at least one input from the model itself as required for training (should have at least one input in common with those used for prediction).");
    CoreML::Result::Result(a3, 15);
    goto LABEL_161;
  }
  memset(&v99, 0, sizeof(v99));
  v21 = *(uint64_t **)(a2 + 72);
  if (!v21)
    v21 = &CoreML::Specification::_NetworkUpdateParameters_default_instance_;
  v22 = *(_QWORD *)(v21[4] + 8);
  v23 = *(_DWORD *)(v22 + 36);
  if (v23 == 11)
  {
    v24 = (const std::string **)(*(_QWORD *)(v22 + 24) + 24);
    goto LABEL_36;
  }
  if (v23 == 10)
  {
    v24 = (const std::string **)(*(_QWORD *)(v22 + 24) + 24);
LABEL_36:
    std::string::operator=(&v99, *v24);
  }
  v25 = v100;
  if (v101 == v100)
    goto LABEL_156;
  v26 = 0;
  v27 = 0;
  v87 = a3;
  do
  {
    v28 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * *(int *)&v25[4 * v26] + 8);
    v29 = *(__int128 **)(v28 + 16);
    if (*((char *)v29 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v98, *(const std::string::value_type **)v29, *((_QWORD *)v29 + 1));
    }
    else
    {
      v30 = *v29;
      v98.__r_.__value_.__r.__words[2] = *((_QWORD *)v29 + 2);
      *(_OWORD *)&v98.__r_.__value_.__l.__data_ = v30;
    }
    v31 = *(_QWORD *)(a1 + 88);
    v32 = HIBYTE(v98.__r_.__value_.__r.__words[2]);
    size = v98.__r_.__value_.__l.__size_;
    if ((v98.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v34 = HIBYTE(v98.__r_.__value_.__r.__words[2]);
    else
      v34 = v98.__r_.__value_.__l.__size_;
    v35 = *(unsigned __int8 *)(v31 + 23);
    v36 = (char)v35;
    if ((v35 & 0x80u) != 0)
      v35 = *(_QWORD *)(v31 + 8);
    if (v34 != v35)
      goto LABEL_86;
    v37 = v36 >= 0 ? *(unsigned __int8 **)(a1 + 88) : *(unsigned __int8 **)v31;
    if ((*((_BYTE *)&v98.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      if (memcmp(v98.__r_.__value_.__l.__data_, v37, v98.__r_.__value_.__l.__size_))
        goto LABEL_86;
    }
    else if (*((_BYTE *)&v98.__r_.__value_.__s + 23))
    {
      v38 = &v98;
      v39 = HIBYTE(v98.__r_.__value_.__r.__words[2]);
      do
      {
        if (v38->__r_.__value_.__s.__data_[0] != *v37)
          goto LABEL_86;
        v38 = (std::string *)((char *)v38 + 1);
        ++v37;
        --v39;
      }
      while (v39);
    }
    v40 = *(_QWORD *)(a1 + 56);
    v41 = v40 ? v40 + 8 : 0;
    v42 = *(int *)(a1 + 48);
    if (!(_DWORD)v42)
    {
LABEL_86:
      if ((v99.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v54 = HIBYTE(v99.__r_.__value_.__r.__words[2]);
      else
        v54 = v99.__r_.__value_.__l.__size_;
      if ((v32 & 0x80u) == 0)
        v55 = v32;
      else
        v55 = size;
      if (v54 == v55)
      {
        if ((v32 & 0x80u) == 0)
          v56 = &v98;
        else
          v56 = (std::string *)v98.__r_.__value_.__r.__words[0];
        if ((*((_BYTE *)&v99.__r_.__value_.__s + 23) & 0x80) != 0)
        {
          v66 = memcmp(v99.__r_.__value_.__l.__data_, v56, v99.__r_.__value_.__l.__size_) == 0;
        }
        else if (*((_BYTE *)&v99.__r_.__value_.__s + 23))
        {
          v57 = HIBYTE(v99.__r_.__value_.__r.__words[2]) - 1;
          v58 = &v99;
          do
          {
            v60 = v58->__r_.__value_.__s.__data_[0];
            v58 = (std::string *)((char *)v58 + 1);
            v59 = v60;
            v62 = v56->__r_.__value_.__s.__data_[0];
            v56 = (std::string *)((char *)v56 + 1);
            v61 = v62;
            v64 = v57-- != 0;
            v65 = v59 == v61;
            v66 = v59 == v61;
          }
          while (v65 && v64);
        }
        else
        {
          v66 = 1;
        }
      }
      else
      {
        v66 = 0;
      }
      v27 |= v66;
      v67 = 1;
      if ((v32 & 0x80) != 0)
        goto LABEL_110;
      goto LABEL_111;
    }
    v88 = v27;
    v43 = v41 + 8 * v42;
    v44 = (const void *)v98.__r_.__value_.__r.__words[0];
    while (1)
    {
      v45 = *(_QWORD *)v41;
      v46 = *(_QWORD *)(*(_QWORD *)v41 + 16);
      v47 = *(unsigned __int8 *)(v46 + 23);
      v48 = (char)v47;
      if ((v47 & 0x80u) != 0)
        v47 = *(_QWORD *)(v46 + 8);
      if (v34 != v47)
        goto LABEL_76;
      v49 = v48 >= 0 ? *(unsigned __int8 **)(*(_QWORD *)v41 + 16) : *(unsigned __int8 **)v46;
      if ((v32 & 0x80) != 0)
        break;
      if (!(_DWORD)v32)
        goto LABEL_78;
      v50 = &v98;
      v51 = v32;
      while (v50->__r_.__value_.__s.__data_[0] == *v49)
      {
        v50 = (std::string *)((char *)v50 + 1);
        ++v49;
        if (!--v51)
          goto LABEL_78;
      }
LABEL_76:
      v41 += 8;
      if (v41 == v43)
      {
        v27 = v88;
        goto LABEL_86;
      }
    }
    if (memcmp(v44, v49, size))
      goto LABEL_76;
LABEL_78:
    if (*(_QWORD *)(v28 + 32))
      v52 = *(uint64_t **)(v28 + 32);
    else
      v52 = &CoreML::Specification::_FeatureType_default_instance_;
    if (*(_QWORD *)(v45 + 32))
      v53 = *(uint64_t **)(v45 + 32);
    else
      v53 = &CoreML::Specification::_FeatureType_default_instance_;
    if (CoreML::Specification::operator==((uint64_t)v52, (uint64_t)v53))
    {
      v32 = HIBYTE(v98.__r_.__value_.__r.__words[2]);
      v27 = 1;
      size = v98.__r_.__value_.__l.__size_;
      goto LABEL_86;
    }
    v68 = *(uint64_t **)(v45 + 32);
    if (!v68)
      v68 = &CoreML::Specification::_FeatureType_default_instance_;
    if (*((_DWORD *)v68 + 9) == 1)
      v69 = "Int64";
    else
      v69 = "String";
    std::string::basic_string[abi:ne180100]<0>(v96, v69);
    v70 = *(uint64_t **)(v28 + 32);
    if (!v70)
      v70 = &CoreML::Specification::_FeatureType_default_instance_;
    if (*((_DWORD *)v70 + 9) == 1)
      v71 = "Int64";
    else
      v71 = "String";
    std::string::basic_string[abi:ne180100]<0>(__p, v71);
    v27 = v88;
    std::operator+<char>();
    v72 = std::string::append(&v89, " doesn't match the expected type of the classifier. Found: ");
    v73 = *(_OWORD *)&v72->__r_.__value_.__l.__data_;
    v90.__r_.__value_.__r.__words[2] = v72->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v90.__r_.__value_.__l.__data_ = v73;
    v72->__r_.__value_.__l.__size_ = 0;
    v72->__r_.__value_.__r.__words[2] = 0;
    v72->__r_.__value_.__r.__words[0] = 0;
    if ((v95 & 0x80u) == 0)
      v74 = __p;
    else
      v74 = (void **)__p[0];
    if ((v95 & 0x80u) == 0)
      v75 = v95;
    else
      v75 = (std::string::size_type)__p[1];
    v76 = std::string::append(&v90, (const std::string::value_type *)v74, v75);
    v77 = *(_OWORD *)&v76->__r_.__value_.__l.__data_;
    v91.__r_.__value_.__r.__words[2] = v76->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v91.__r_.__value_.__l.__data_ = v77;
    v76->__r_.__value_.__l.__size_ = 0;
    v76->__r_.__value_.__r.__words[2] = 0;
    v76->__r_.__value_.__r.__words[0] = 0;
    v78 = std::string::append(&v91, ", expected: ");
    v79 = *(_OWORD *)&v78->__r_.__value_.__l.__data_;
    v92.__r_.__value_.__r.__words[2] = v78->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v92.__r_.__value_.__l.__data_ = v79;
    v78->__r_.__value_.__l.__size_ = 0;
    v78->__r_.__value_.__r.__words[2] = 0;
    v78->__r_.__value_.__r.__words[0] = 0;
    if ((v97 & 0x80u) == 0)
      v80 = v96;
    else
      v80 = (void **)v96[0];
    if ((v97 & 0x80u) == 0)
      v81 = v97;
    else
      v81 = (std::string::size_type)v96[1];
    v82 = std::string::append(&v92, (const std::string::value_type *)v80, v81);
    v83 = *(_OWORD *)&v82->__r_.__value_.__l.__data_;
    v93.__r_.__value_.__r.__words[2] = v82->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v93.__r_.__value_.__l.__data_ = v83;
    v82->__r_.__value_.__l.__size_ = 0;
    v82->__r_.__value_.__r.__words[2] = 0;
    v82->__r_.__value_.__r.__words[0] = 0;
    v84 = std::string::append(&v93, ".");
    v85 = v84->__r_.__value_.__r.__words[0];
    v107[0] = v84->__r_.__value_.__l.__size_;
    *(_QWORD *)((char *)v107 + 7) = *(std::string::size_type *)((char *)&v84->__r_.__value_.__r.__words[1] + 7);
    v86 = HIBYTE(v84->__r_.__value_.__r.__words[2]);
    v84->__r_.__value_.__l.__size_ = 0;
    v84->__r_.__value_.__r.__words[2] = 0;
    v84->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v103.__r_.__value_.__l.__data_);
    v103.__r_.__value_.__r.__words[0] = v85;
    v103.__r_.__value_.__l.__size_ = v107[0];
    *(std::string::size_type *)((char *)&v103.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v107 + 7);
    *((_BYTE *)&v103.__r_.__value_.__s + 23) = v86;
    if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v93.__r_.__value_.__l.__data_);
    if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v92.__r_.__value_.__l.__data_);
    if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v91.__r_.__value_.__l.__data_);
    if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v90.__r_.__value_.__l.__data_);
    if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v89.__r_.__value_.__l.__data_);
    CoreML::Result::Result(v87, 15);
    if ((char)v95 < 0)
      operator delete(__p[0]);
    if ((char)v97 < 0)
      operator delete(v96[0]);
    v67 = 0;
    if ((*((_BYTE *)&v98.__r_.__value_.__s + 23) & 0x80) != 0)
LABEL_110:
      operator delete(v98.__r_.__value_.__l.__data_);
LABEL_111:
    if ((v67 & 1) == 0)
      goto LABEL_159;
    ++v26;
    v25 = v100;
  }
  while (v26 < (v101 - v100) >> 2);
  a3 = v87;
  if ((v27 & 1) != 0)
  {
    CoreML::Result::Result(v87);
    goto LABEL_159;
  }
LABEL_156:
  std::operator+<char>();
  if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v103.__r_.__value_.__l.__data_);
  v103 = v98;
  CoreML::Result::Result(a3, 15);
LABEL_159:
  if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v99.__r_.__value_.__l.__data_);
LABEL_161:
  if (v100)
  {
    v101 = v100;
    operator delete(v100);
  }
LABEL_163:
  if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v103.__r_.__value_.__l.__data_);
  if (v106 < 0)
    operator delete(v105);
}

void sub_218400EF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,void *__p,uint64_t a47,int a48,__int16 a49,char a50,char a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  uint64_t v63;
  void *v65;

  if (*(char *)(v63 - 201) < 0)
    operator delete(*(void **)(v63 - 224));
  v65 = *(void **)(v63 - 200);
  if (v65)
  {
    *(_QWORD *)(v63 - 192) = v65;
    operator delete(v65);
  }
  if (*(char *)(v63 - 153) < 0)
    operator delete(*(void **)(v63 - 176));
  if (*(char *)(v63 - 121) < 0)
    operator delete(*(void **)(v63 - 144));
  _Unwind_Resume(exception_object);
}

BOOL validateUpdatableNeuralNetwork<CoreML::Specification::NeuralNetwork>@<W0>(uint64_t a1@<X0>, CoreML::Result *a2@<X8>)
{
  CoreML::Result *v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  int v9;
  void **v10;
  _BOOL8 result;
  uint64_t v12;
  __int128 *v13;
  __int128 v14;
  uint64_t v15;
  std::string *v16;
  std::string::size_type v17;
  char v18;
  uint64_t *v19;
  uint64_t v20;
  __int128 *v21;
  __int128 v22;
  uint64_t v23;
  std::string *v24;
  std::string::size_type v25;
  char v26;
  char *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  std::string::size_type size;
  std::string::size_type v32;
  uint64_t *v33;
  uint64_t v34;
  const std::string **v35;
  std::string::size_type v36;
  std::string::size_type v37;
  const CoreML::Specification::Optimizer *v38;
  const CoreML::Specification::Optimizer *v39;
  const CoreML::Specification::NetworkUpdateParameters *v40;
  uint64_t *v41;
  uint64_t v42;
  __int128 *v43;
  __int128 v44;
  char v45;
  unint64_t v46;
  __int128 v47;
  uint64_t NodeFromName;
  uint64_t v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t v52;
  const std::string *v53;
  int v54;
  std::string *v55;
  std::string::size_type v56;
  char v57;
  std::string *v58;
  __int128 v59;
  std::string *v60;
  uint64_t *v61;
  char v62;
  uint64_t v63;
  char *v64;
  CoreML::Result *v65;
  std::string v66;
  uint64_t v67;
  std::string v68;
  std::string v69;
  std::string v70;
  std::string v71;
  std::string v72;
  std::string v73;
  std::string v74;
  _BYTE __p[32];
  __int128 v76;
  void *v77;
  char v78;
  _BYTE v79[24];
  _BYTE v80[40];
  uint64_t *v81;
  __int128 v82;
  char **v83;
  char *v84[2];
  std::string v85;
  uint64_t v86;
  _QWORD v87[2];
  std::string v88;
  std::string v89;
  uint64_t v90;

  v3 = a2;
  v90 = *MEMORY[0x24BDAC8D0];
  CoreML::Result::Result(a2);
  CoreML::Result::Result((CoreML::Result *)__p);
  LODWORD(v4) = *(_DWORD *)(a1 + 24);
  v65 = v3;
  if ((int)v4 >= 1)
  {
    v5 = 0;
    v6 = 0;
    while (1)
    {
      ++v5;
      while (1)
      {
        v7 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v5);
        if (*(_BYTE *)(v7 + 120))
          break;
        if (v5++ >= (int)v4)
        {
          if ((v6 & 1) == 0)
            goto LABEL_20;
          goto LABEL_19;
        }
      }
      v9 = *(_DWORD *)(v7 + 140);
      if (v9 > 419)
      {
        if (v9 != 420 && v9 != 1045)
        {
LABEL_194:
          std::operator+<char>();
          v60 = std::string::append(&v66, "' is marked as updatable, however, it is not supported as the type of this layer is neither convolution, inner-product, uni-directional lstm, nor batchedMatMul.");
          v61 = (uint64_t *)v60->__r_.__value_.__r.__words[0];
          v89.__r_.__value_.__r.__words[0] = v60->__r_.__value_.__l.__size_;
          *(std::string::size_type *)((char *)v89.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v60->__r_.__value_.__r.__words[1] + 7);
          v62 = HIBYTE(v60->__r_.__value_.__r.__words[2]);
          v60->__r_.__value_.__l.__size_ = 0;
          v60->__r_.__value_.__r.__words[2] = 0;
          v60->__r_.__value_.__r.__words[0] = 0;
          *(_QWORD *)((char *)&v82 + 7) = *(std::string::size_type *)((char *)v89.__r_.__value_.__r.__words + 7);
          v81 = v61;
          *(_QWORD *)&v82 = v89.__r_.__value_.__r.__words[0];
          HIBYTE(v82) = v62;
          if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v66.__r_.__value_.__l.__data_);
          CoreML::Result::Result(&v85, 14);
          goto LABEL_21;
        }
      }
      else if (v9 != 100 && v9 != 140)
      {
        goto LABEL_194;
      }
      validateWeightParamsUpdatable((const CoreML::Specification::NeuralNetworkLayer *)v7, (uint64_t)&v81);
      *(_QWORD *)__p = v81;
      if ((__p[31] & 0x80000000) != 0)
        operator delete(*(void **)&__p[8]);
      *(_OWORD *)&__p[8] = v82;
      *(_QWORD *)&__p[24] = v83;
      if (CoreML::Result::good((CoreML::Result *)__p))
      {
        v6 = 1;
        v4 = *(int *)(a1 + 24);
        if (v5 < v4)
          continue;
      }
LABEL_19:
      v85 = *(std::string *)__p;
      v86 = *(_QWORD *)&__p[24];
      memset(&__p[8], 0, 24);
      goto LABEL_23;
    }
  }
LABEL_20:
  v81 = 0;
  v82 = 0uLL;
  MEMORY[0x219A19390](&v81, "The model is marked as updatable, but none of the layers are updatable.");
  CoreML::Result::Result(&v85, 14);
LABEL_21:
  if (SHIBYTE(v82) < 0)
    operator delete(v81);
LABEL_23:
  if ((__p[31] & 0x80000000) != 0)
    operator delete(*(void **)&__p[8]);
  *(_QWORD *)v3 = v85.__r_.__value_.__r.__words[0];
  v10 = (void **)((char *)v3 + 8);
  if (*((char *)v3 + 31) < 0)
    operator delete(*v10);
  *(_OWORD *)v10 = *(_OWORD *)&v85.__r_.__value_.__r.__words[1];
  *((_QWORD *)v3 + 3) = v86;
  result = CoreML::Result::good(v3);
  if (result)
  {
    v64 = (char *)v3 + 8;
    CoreML::Result::Result((CoreML::Result *)__p);
    *(_OWORD *)&v85.__r_.__value_.__r.__words[1] = 0uLL;
    v85.__r_.__value_.__r.__words[0] = (std::string::size_type)&v85.__r_.__value_.__l.__size_;
    memset(&v66, 0, sizeof(v66));
    if (*(int *)(a1 + 24) < 1)
    {
LABEL_44:
      v19 = *(_QWORD *)(a1 + 64)
          ? *(uint64_t **)(a1 + 64)
          : &CoreML::Specification::_NetworkUpdateParameters_default_instance_;
      if (*((int *)v19 + 6) < 1)
      {
LABEL_63:
        v82 = *(_OWORD *)&__p[8];
        v81 = *(uint64_t **)__p;
        v83 = *(char ***)&__p[24];
        memset(&__p[8], 0, 24);
      }
      else
      {
        v20 = 0;
        while (1)
        {
          v21 = *(__int128 **)(*(_QWORD *)(v19[4] + 8 * v20 + 8) + 16);
          if (*((char *)v21 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v89, *(const std::string::value_type **)v21, *((_QWORD *)v21 + 1));
          }
          else
          {
            v22 = *v21;
            v89.__r_.__value_.__r.__words[2] = *((_QWORD *)v21 + 2);
            *(_OWORD *)&v89.__r_.__value_.__l.__data_ = v22;
          }
          v23 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)&v85, (const void **)&v89.__r_.__value_.__l.__data_);
          if (v23)
          {
            std::operator+<char>();
            v24 = std::string::append(&v74, "', i.e., there are more than one layers or loss layers with this name.");
            v25 = v24->__r_.__value_.__r.__words[0];
            v88.__r_.__value_.__r.__words[0] = v24->__r_.__value_.__l.__size_;
            *(std::string::size_type *)((char *)v88.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v24->__r_.__value_.__r.__words[1] + 7);
            v26 = HIBYTE(v24->__r_.__value_.__r.__words[2]);
            v24->__r_.__value_.__l.__size_ = 0;
            v24->__r_.__value_.__r.__words[2] = 0;
            v24->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v66.__r_.__value_.__l.__data_);
            v66.__r_.__value_.__r.__words[0] = v25;
            v66.__r_.__value_.__l.__size_ = v88.__r_.__value_.__r.__words[0];
            *(std::string::size_type *)((char *)&v66.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v88.__r_.__value_.__r.__words + 7);
            *((_BYTE *)&v66.__r_.__value_.__s + 23) = v26;
            if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v74.__r_.__value_.__l.__data_);
            v3 = v65;
            CoreML::Result::Result(&v81, 14);
          }
          else
          {
            std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)&v85, (const void **)&v89.__r_.__value_.__l.__data_, (uint64_t)&v89);
          }
          if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v89.__r_.__value_.__l.__data_);
          if (v23)
            break;
          if (++v20 >= *((int *)v19 + 6))
            goto LABEL_63;
        }
      }
    }
    else
    {
      v12 = 0;
      while (1)
      {
        v13 = *(__int128 **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v12 + 8) + 112);
        if (*((char *)v13 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v89, *(const std::string::value_type **)v13, *((_QWORD *)v13 + 1));
        }
        else
        {
          v14 = *v13;
          v89.__r_.__value_.__r.__words[2] = *((_QWORD *)v13 + 2);
          *(_OWORD *)&v89.__r_.__value_.__l.__data_ = v14;
        }
        v15 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)&v85, (const void **)&v89.__r_.__value_.__l.__data_);
        if (v15)
        {
          std::operator+<char>();
          v16 = std::string::append(&v74, "', i.e., there are more than one layers or loss layers with this name.");
          v17 = v16->__r_.__value_.__r.__words[0];
          v88.__r_.__value_.__r.__words[0] = v16->__r_.__value_.__l.__size_;
          *(std::string::size_type *)((char *)v88.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v16->__r_.__value_.__r.__words[1] + 7);
          v18 = HIBYTE(v16->__r_.__value_.__r.__words[2]);
          v16->__r_.__value_.__l.__size_ = 0;
          v16->__r_.__value_.__r.__words[2] = 0;
          v16->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v66.__r_.__value_.__l.__data_);
          v66.__r_.__value_.__r.__words[0] = v17;
          v66.__r_.__value_.__l.__size_ = v88.__r_.__value_.__r.__words[0];
          *(std::string::size_type *)((char *)&v66.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v88.__r_.__value_.__r.__words + 7);
          *((_BYTE *)&v66.__r_.__value_.__s + 23) = v18;
          if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v74.__r_.__value_.__l.__data_);
          CoreML::Result::Result(&v81, 14);
        }
        else
        {
          std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)&v85, (const void **)&v89.__r_.__value_.__l.__data_, (uint64_t)&v89);
        }
        if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v89.__r_.__value_.__l.__data_);
        if (v15)
          break;
        if (++v12 >= *(int *)(a1 + 24))
          goto LABEL_44;
      }
    }
    v27 = v64;
    if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v66.__r_.__value_.__l.__data_);
    std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)&v85, (char *)v85.__r_.__value_.__l.__size_);
    if ((__p[31] & 0x80000000) != 0)
      operator delete(*(void **)&__p[8]);
    *(_QWORD *)v3 = v81;
    if (*((char *)v3 + 31) < 0)
      operator delete(*(void **)v64);
    *(_OWORD *)v64 = v82;
    *((_QWORD *)v64 + 2) = v83;
    result = CoreML::Result::good(v3);
    if (result)
    {
      CoreML::Result::Result((CoreML::Result *)&v85);
      v28 = *(uint64_t **)(a1 + 64);
      if (!v28)
        v28 = &CoreML::Specification::_NetworkUpdateParameters_default_instance_;
      v29 = *((int *)v28 + 6);
      if ((int)v29 >= 2)
      {
        memset(__p, 0, 24);
        MEMORY[0x219A19390](__p, "This model has more than one loss layers specified, which is not supported at the moment.");
        CoreML::Result::Result(&v66, 15);
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
        goto LABEL_188;
      }
      v81 = (uint64_t *)&v82;
      v82 = 0uLL;
      v84[0] = 0;
      v84[1] = 0;
      v83 = v84;
      memset(&v89, 0, sizeof(v89));
      std::vector<CoreML::LayerNode>::resize((uint64_t *)&v89, *(int *)(a1 + 24) + v29);
      if (*(int *)(a1 + 24) >= 1)
      {
        v30 = 0;
        do
        {
          CoreML::LayerNode::LayerNode((CoreML::LayerNode *)__p, *(const CoreML::Specification::NeuralNetworkLayer **)(*(_QWORD *)(a1 + 32) + 8 * v30 + 8));
          size = v89.__r_.__value_.__l.__size_;
          if (v89.__r_.__value_.__l.__size_ >= v89.__r_.__value_.__r.__words[2])
          {
            v32 = std::vector<CoreML::LayerNode>::__push_back_slow_path<CoreML::LayerNode>((uint64_t *)&v89, (uint64_t)__p);
          }
          else
          {
            std::allocator<CoreML::LayerNode>::construct[abi:ne180100]<CoreML::LayerNode,CoreML::LayerNode>((uint64_t)&v89.__r_.__value_.__r.__words[2], v89.__r_.__value_.__l.__size_, (uint64_t)__p);
            v32 = size + 136;
          }
          v89.__r_.__value_.__l.__size_ = v32;
          v74.__r_.__value_.__r.__words[0] = (std::string::size_type)v80;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v74);
          v74.__r_.__value_.__r.__words[0] = (std::string::size_type)v79;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v74);
          if (v78 < 0)
            operator delete(v77);
          if (*(_QWORD *)&__p[24])
          {
            *(_QWORD *)&v76 = *(_QWORD *)&__p[24];
            operator delete(*(void **)&__p[24]);
          }
          if (*(_QWORD *)__p)
          {
            *(_QWORD *)&__p[8] = *(_QWORD *)__p;
            operator delete(*(void **)__p);
          }
          CoreML::NeuralNetworkValidatorGraph::insertNode(&v81, (CoreML::LayerNode *)(v89.__r_.__value_.__l.__size_ - 136));
          ++v30;
        }
        while (v30 < *(int *)(a1 + 24));
      }
      v33 = *(uint64_t **)(a1 + 64);
      if (!v33)
        v33 = &CoreML::Specification::_NetworkUpdateParameters_default_instance_;
      if (*((int *)v33 + 6) >= 1)
      {
        v34 = 0;
        while (1)
        {
          v35 = *(const std::string ***)(v33[4] + 8 * v34 + 8);
          CoreML::LayerNode::LayerNode((CoreML::LayerNode *)__p, v35);
          v36 = v89.__r_.__value_.__l.__size_;
          if (v89.__r_.__value_.__l.__size_ >= v89.__r_.__value_.__r.__words[2])
          {
            v37 = std::vector<CoreML::LayerNode>::__push_back_slow_path<CoreML::LayerNode>((uint64_t *)&v89, (uint64_t)__p);
          }
          else
          {
            std::allocator<CoreML::LayerNode>::construct[abi:ne180100]<CoreML::LayerNode,CoreML::LayerNode>((uint64_t)&v89.__r_.__value_.__r.__words[2], v89.__r_.__value_.__l.__size_, (uint64_t)__p);
            v37 = v36 + 136;
          }
          v89.__r_.__value_.__l.__size_ = v37;
          v74.__r_.__value_.__r.__words[0] = (std::string::size_type)v80;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v74);
          v74.__r_.__value_.__r.__words[0] = (std::string::size_type)v79;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v74);
          if (v78 < 0)
            operator delete(v77);
          if (*(_QWORD *)&__p[24])
          {
            *(_QWORD *)&v76 = *(_QWORD *)&__p[24];
            operator delete(*(void **)&__p[24]);
          }
          if (*(_QWORD *)__p)
          {
            *(_QWORD *)&__p[8] = *(_QWORD *)__p;
            operator delete(*(void **)__p);
          }
          CoreML::NeuralNetworkValidatorGraph::insertNode(&v81, (CoreML::LayerNode *)(v89.__r_.__value_.__l.__size_ - 136));
          validateLossLayer((const CoreML::Specification::LossLayer *)v35, (const CoreML::NeuralNetworkValidatorGraph *)&v81, (uint64_t)__p);
          v85.__r_.__value_.__r.__words[0] = *(_QWORD *)__p;
          if (SHIBYTE(v86) < 0)
            operator delete((void *)v85.__r_.__value_.__l.__size_);
          *(_OWORD *)&v85.__r_.__value_.__r.__words[1] = *(_OWORD *)&__p[8];
          v86 = *(_QWORD *)&__p[24];
          if (!CoreML::Result::good((CoreML::Result *)&v85))
            break;
          ++v34;
          v33 = *(uint64_t **)(a1 + 64);
          if (!v33)
            v33 = &CoreML::Specification::_NetworkUpdateParameters_default_instance_;
          if (v34 >= *((int *)v33 + 6))
            goto LABEL_107;
        }
        v66 = v85;
        v67 = v86;
        *(_OWORD *)&v85.__r_.__value_.__r.__words[1] = 0uLL;
        v86 = 0;
        v3 = v65;
        goto LABEL_186;
      }
LABEL_107:
      v38 = (const CoreML::Specification::Optimizer *)v33[5];
      if (v38)
        v39 = v38;
      else
        v39 = (const CoreML::Specification::Optimizer *)&CoreML::Specification::_Optimizer_default_instance_;
      validateOptimizer(v39, (uint64_t)__p);
      v85.__r_.__value_.__r.__words[0] = *(_QWORD *)__p;
      v27 = v64;
      v3 = v65;
      if (SHIBYTE(v86) < 0)
        operator delete((void *)v85.__r_.__value_.__l.__size_);
      *(_OWORD *)&v85.__r_.__value_.__r.__words[1] = *(_OWORD *)&__p[8];
      v86 = *(_QWORD *)&__p[24];
      if (!CoreML::Result::good((CoreML::Result *)&v85))
        goto LABEL_184;
      if (*(_QWORD *)(a1 + 64))
        v40 = *(const CoreML::Specification::NetworkUpdateParameters **)(a1 + 64);
      else
        v40 = (const CoreML::Specification::NetworkUpdateParameters *)&CoreML::Specification::_NetworkUpdateParameters_default_instance_;
      validateOtherTopLevelUpdateParameters(v40, (uint64_t)__p);
      v85.__r_.__value_.__r.__words[0] = *(_QWORD *)__p;
      if (SHIBYTE(v86) < 0)
        operator delete((void *)v85.__r_.__value_.__l.__size_);
      *(_OWORD *)&v85.__r_.__value_.__r.__words[1] = *(_OWORD *)&__p[8];
      v86 = *(_QWORD *)&__p[24];
      if (!CoreML::Result::good((CoreML::Result *)&v85))
      {
LABEL_184:
        v66 = v85;
        v67 = v86;
        *(_OWORD *)&v85.__r_.__value_.__r.__words[1] = 0uLL;
        v86 = 0;
LABEL_187:
        *(_QWORD *)__p = &v89;
        std::vector<CoreML::LayerNode>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)&v83, v84[0]);
        std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)&v81, (char *)v82);
LABEL_188:
        if (SHIBYTE(v86) < 0)
          operator delete((void *)v85.__r_.__value_.__l.__size_);
        *(_QWORD *)v3 = v66.__r_.__value_.__r.__words[0];
        if (*((char *)v3 + 31) < 0)
          operator delete(*(void **)v27);
        *(_OWORD *)v27 = *(_OWORD *)&v66.__r_.__value_.__r.__words[1];
        *((_QWORD *)v27 + 2) = v67;
        return CoreML::Result::good(v3);
      }
      *(_OWORD *)&v74.__r_.__value_.__r.__words[1] = 0uLL;
      v74.__r_.__value_.__r.__words[0] = (std::string::size_type)&v74.__r_.__value_.__l.__size_;
      v41 = *(uint64_t **)(a1 + 64);
      if (!v41)
        v41 = &CoreML::Specification::_NetworkUpdateParameters_default_instance_;
      if (*((int *)v41 + 6) < 1)
      {
LABEL_182:
        v66 = v85;
        v67 = v86;
        *(_OWORD *)&v85.__r_.__value_.__r.__words[1] = 0uLL;
        v86 = 0;
LABEL_183:
        std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)&v74, (char *)v74.__r_.__value_.__l.__size_);
LABEL_186:
        v27 = v64;
        goto LABEL_187;
      }
      v42 = 0;
      while (1)
      {
        v43 = *(__int128 **)(*(_QWORD *)(v41[4] + 8 * v42 + 8) + 16);
        if (*((char *)v43 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v88, *(const std::string::value_type **)v43, *((_QWORD *)v43 + 1));
        }
        else
        {
          v44 = *v43;
          v88.__r_.__value_.__r.__words[2] = *((_QWORD *)v43 + 2);
          *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v44;
        }
        v63 = v42;
        v76 = 0u;
        memset(__p, 0, sizeof(__p));
        std::deque<std::string>::push_back(__p, (__int128 *)&v88);
        v45 = 0;
        memset(&v73, 0, sizeof(v73));
        while (*((_QWORD *)&v76 + 1))
        {
          v46 = *(_QWORD *)(*(_QWORD *)&__p[8] + 8 * ((unint64_t)v76 / 0xAA))
              + 24 * ((unint64_t)v76 % 0xAA);
          if (*(char *)(v46 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v72, *(const std::string::value_type **)v46, *(_QWORD *)(v46 + 8));
          }
          else
          {
            v47 = *(_OWORD *)v46;
            v72.__r_.__value_.__r.__words[2] = *(_QWORD *)(v46 + 16);
            *(_OWORD *)&v72.__r_.__value_.__l.__data_ = v47;
          }
          std::deque<std::string>::pop_front(__p);
          if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v71, v72.__r_.__value_.__l.__data_, v72.__r_.__value_.__l.__size_);
          else
            v71 = v72;
          NodeFromName = CoreML::NeuralNetworkValidatorGraph::getNodeFromName((uint64_t)&v81, (const void **)&v71.__r_.__value_.__l.__data_);
          v49 = NodeFromName;
          if ((SHIBYTE(v71.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
            if (NodeFromName)
              goto LABEL_136;
            goto LABEL_163;
          }
          operator delete(v71.__r_.__value_.__l.__data_);
          if (v49)
          {
LABEL_136:
            v50 = *(uint64_t **)v49;
            v51 = *(uint64_t **)(v49 + 8);
            while (1)
            {
              if (v50 == v51)
              {
                v54 = 0;
                goto LABEL_168;
              }
              v52 = *v50;
              v53 = (const std::string *)(*v50 + 56);
              if (*(char *)(*v50 + 79) < 0)
                std::string::__init_copy_ctor_external(&v70, *(const std::string::value_type **)(v52 + 56), *(_QWORD *)(v52 + 64));
              else
                v70 = *v53;
              if (&v74.__r_.__value_.__r.__words[1] != (std::string::size_type *)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>((uint64_t)&v74, (const void **)&v70.__r_.__value_.__l.__data_))break;
              std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)&v74, (const void **)&v70.__r_.__value_.__l.__data_, (uint64_t)&v70);
              std::deque<std::string>::push_back(__p, (__int128 *)&v70);
              if (((*(_BYTE *)(v52 + 128) != 0) & v45) == 1)
              {
                memset(&v69, 0, sizeof(v69));
                std::operator+<char>();
                v55 = std::string::append(&v68, "), which does not support backpropagation, between an updatable marked layer and the loss function.");
                v56 = v55->__r_.__value_.__r.__words[0];
                v87[0] = v55->__r_.__value_.__l.__size_;
                *(_QWORD *)((char *)v87 + 7) = *(std::string::size_type *)((char *)&v55->__r_.__value_.__r.__words[1] + 7);
                v57 = HIBYTE(v55->__r_.__value_.__r.__words[2]);
                v55->__r_.__value_.__l.__size_ = 0;
                v55->__r_.__value_.__r.__words[2] = 0;
                v55->__r_.__value_.__r.__words[0] = 0;
                if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v69.__r_.__value_.__l.__data_);
                v69.__r_.__value_.__r.__words[0] = v56;
                v69.__r_.__value_.__l.__size_ = v87[0];
                *(std::string::size_type *)((char *)&v69.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v87 + 7);
                *((_BYTE *)&v69.__r_.__value_.__s + 23) = v57;
                if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v68.__r_.__value_.__l.__data_);
                CoreML::Result::Result(&v66, 15);
                if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v69.__r_.__value_.__l.__data_);
                v45 = 1;
                v54 = 1;
              }
              else if (*(_BYTE *)(v52 + 129))
              {
                v54 = 0;
              }
              else
              {
                if (*(_DWORD *)(v52 + 48) == 175 && *(_DWORD *)(v49 + 52) == 10)
                  break;
                std::string::operator=(&v73, v53);
                v54 = 0;
                v45 = 1;
              }
LABEL_156:
              if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v70.__r_.__value_.__l.__data_);
              if (v54 != 14 && v54)
                goto LABEL_168;
              ++v50;
            }
            v54 = 14;
            goto LABEL_156;
          }
LABEL_163:
          std::operator+<char>();
          v58 = std::string::append(&v69, "'.");
          v59 = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
          v70.__r_.__value_.__r.__words[2] = v58->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v70.__r_.__value_.__l.__data_ = v59;
          v58->__r_.__value_.__l.__size_ = 0;
          v58->__r_.__value_.__r.__words[2] = 0;
          v58->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v69.__r_.__value_.__l.__data_);
          CoreML::Result::Result(&v66, 15);
          if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v70.__r_.__value_.__l.__data_);
          v54 = 1;
LABEL_168:
          if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v72.__r_.__value_.__l.__data_);
            if (v54)
              goto LABEL_174;
          }
          else if (v54)
          {
            goto LABEL_174;
          }
        }
        v54 = 0;
LABEL_174:
        if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v73.__r_.__value_.__l.__data_);
        std::deque<std::string>::~deque[abi:ne180100](__p);
        v3 = v65;
        if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v88.__r_.__value_.__l.__data_);
        if (v54)
          goto LABEL_183;
        v42 = v63 + 1;
        v41 = *(uint64_t **)(a1 + 64);
        if (!v41)
          v41 = &CoreML::Specification::_NetworkUpdateParameters_default_instance_;
        if (v42 >= *((int *)v41 + 6))
          goto LABEL_182;
      }
    }
  }
  return result;
}

void sub_218401E08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,void *a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  uint64_t v47;

  if (*(char *)(v47 - 233) < 0)
    operator delete(*(void **)(v47 - 256));
  if (a47 < 0)
    operator delete(__p);
  if (*(char *)(a12 + 31) < 0)
    operator delete(*(void **)(a12 + 8));
  _Unwind_Resume(a1);
}

BOOL validateUpdatableNeuralNetwork<CoreML::Specification::NeuralNetworkRegressor>@<W0>(uint64_t a1@<X0>, CoreML::Result *a2@<X8>)
{
  CoreML::Result *v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  int v9;
  void **v10;
  _BOOL8 result;
  uint64_t v12;
  __int128 *v13;
  __int128 v14;
  uint64_t v15;
  std::string *v16;
  std::string::size_type v17;
  char v18;
  uint64_t *v19;
  uint64_t v20;
  __int128 *v21;
  __int128 v22;
  uint64_t v23;
  std::string *v24;
  std::string::size_type v25;
  char v26;
  char *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  std::string::size_type size;
  std::string::size_type v32;
  uint64_t *v33;
  uint64_t v34;
  const std::string **v35;
  std::string::size_type v36;
  std::string::size_type v37;
  const CoreML::Specification::Optimizer *v38;
  const CoreML::Specification::Optimizer *v39;
  const CoreML::Specification::NetworkUpdateParameters *v40;
  uint64_t *v41;
  uint64_t v42;
  __int128 *v43;
  __int128 v44;
  char v45;
  unint64_t v46;
  __int128 v47;
  uint64_t NodeFromName;
  uint64_t v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t v52;
  const std::string *v53;
  int v54;
  std::string *v55;
  std::string::size_type v56;
  char v57;
  std::string *v58;
  __int128 v59;
  std::string *v60;
  uint64_t *v61;
  char v62;
  uint64_t v63;
  char *v64;
  CoreML::Result *v65;
  std::string v66;
  uint64_t v67;
  std::string v68;
  std::string v69;
  std::string v70;
  std::string v71;
  std::string v72;
  std::string v73;
  std::string v74;
  _BYTE __p[32];
  __int128 v76;
  void *v77;
  char v78;
  _BYTE v79[24];
  _BYTE v80[40];
  uint64_t *v81;
  __int128 v82;
  char **v83;
  char *v84[2];
  std::string v85;
  uint64_t v86;
  _QWORD v87[2];
  std::string v88;
  std::string v89;
  uint64_t v90;

  v3 = a2;
  v90 = *MEMORY[0x24BDAC8D0];
  CoreML::Result::Result(a2);
  CoreML::Result::Result((CoreML::Result *)__p);
  LODWORD(v4) = *(_DWORD *)(a1 + 24);
  v65 = v3;
  if ((int)v4 >= 1)
  {
    v5 = 0;
    v6 = 0;
    while (1)
    {
      ++v5;
      while (1)
      {
        v7 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v5);
        if (*(_BYTE *)(v7 + 120))
          break;
        if (v5++ >= (int)v4)
        {
          if ((v6 & 1) == 0)
            goto LABEL_20;
          goto LABEL_19;
        }
      }
      v9 = *(_DWORD *)(v7 + 140);
      if (v9 > 419)
      {
        if (v9 != 1045 && v9 != 420)
        {
LABEL_194:
          std::operator+<char>();
          v60 = std::string::append(&v66, "' is marked as updatable, however, it is not supported as the type of this layer is neither convolution, inner-product, uni-directional lstm, nor batchedMatMul.");
          v61 = (uint64_t *)v60->__r_.__value_.__r.__words[0];
          v89.__r_.__value_.__r.__words[0] = v60->__r_.__value_.__l.__size_;
          *(std::string::size_type *)((char *)v89.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v60->__r_.__value_.__r.__words[1] + 7);
          v62 = HIBYTE(v60->__r_.__value_.__r.__words[2]);
          v60->__r_.__value_.__l.__size_ = 0;
          v60->__r_.__value_.__r.__words[2] = 0;
          v60->__r_.__value_.__r.__words[0] = 0;
          *(_QWORD *)((char *)&v82 + 7) = *(std::string::size_type *)((char *)v89.__r_.__value_.__r.__words + 7);
          v81 = v61;
          *(_QWORD *)&v82 = v89.__r_.__value_.__r.__words[0];
          HIBYTE(v82) = v62;
          if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v66.__r_.__value_.__l.__data_);
          CoreML::Result::Result(&v85, 14);
          goto LABEL_21;
        }
      }
      else if (v9 != 100 && v9 != 140)
      {
        goto LABEL_194;
      }
      validateWeightParamsUpdatable((const CoreML::Specification::NeuralNetworkLayer *)v7, (uint64_t)&v81);
      *(_QWORD *)__p = v81;
      if ((__p[31] & 0x80000000) != 0)
        operator delete(*(void **)&__p[8]);
      *(_OWORD *)&__p[8] = v82;
      *(_QWORD *)&__p[24] = v83;
      if (CoreML::Result::good((CoreML::Result *)__p))
      {
        v6 = 1;
        v4 = *(int *)(a1 + 24);
        if (v5 < v4)
          continue;
      }
LABEL_19:
      v85 = *(std::string *)__p;
      v86 = *(_QWORD *)&__p[24];
      memset(&__p[8], 0, 24);
      goto LABEL_23;
    }
  }
LABEL_20:
  v81 = 0;
  v82 = 0uLL;
  MEMORY[0x219A19390](&v81, "The model is marked as updatable, but none of the layers are updatable.");
  CoreML::Result::Result(&v85, 14);
LABEL_21:
  if (SHIBYTE(v82) < 0)
    operator delete(v81);
LABEL_23:
  if ((__p[31] & 0x80000000) != 0)
    operator delete(*(void **)&__p[8]);
  *(_QWORD *)v3 = v85.__r_.__value_.__r.__words[0];
  v10 = (void **)((char *)v3 + 8);
  if (*((char *)v3 + 31) < 0)
    operator delete(*v10);
  *(_OWORD *)v10 = *(_OWORD *)&v85.__r_.__value_.__r.__words[1];
  *((_QWORD *)v3 + 3) = v86;
  result = CoreML::Result::good(v3);
  if (result)
  {
    v64 = (char *)v3 + 8;
    CoreML::Result::Result((CoreML::Result *)__p);
    *(_OWORD *)&v85.__r_.__value_.__r.__words[1] = 0uLL;
    v85.__r_.__value_.__r.__words[0] = (std::string::size_type)&v85.__r_.__value_.__l.__size_;
    memset(&v66, 0, sizeof(v66));
    if (*(int *)(a1 + 24) < 1)
    {
LABEL_44:
      v19 = *(_QWORD *)(a1 + 64)
          ? *(uint64_t **)(a1 + 64)
          : &CoreML::Specification::_NetworkUpdateParameters_default_instance_;
      if (*((int *)v19 + 6) < 1)
      {
LABEL_63:
        v82 = *(_OWORD *)&__p[8];
        v81 = *(uint64_t **)__p;
        v83 = *(char ***)&__p[24];
        memset(&__p[8], 0, 24);
      }
      else
      {
        v20 = 0;
        while (1)
        {
          v21 = *(__int128 **)(*(_QWORD *)(v19[4] + 8 * v20 + 8) + 16);
          if (*((char *)v21 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v89, *(const std::string::value_type **)v21, *((_QWORD *)v21 + 1));
          }
          else
          {
            v22 = *v21;
            v89.__r_.__value_.__r.__words[2] = *((_QWORD *)v21 + 2);
            *(_OWORD *)&v89.__r_.__value_.__l.__data_ = v22;
          }
          v23 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)&v85, (const void **)&v89.__r_.__value_.__l.__data_);
          if (v23)
          {
            std::operator+<char>();
            v24 = std::string::append(&v74, "', i.e., there are more than one layers or loss layers with this name.");
            v25 = v24->__r_.__value_.__r.__words[0];
            v88.__r_.__value_.__r.__words[0] = v24->__r_.__value_.__l.__size_;
            *(std::string::size_type *)((char *)v88.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v24->__r_.__value_.__r.__words[1] + 7);
            v26 = HIBYTE(v24->__r_.__value_.__r.__words[2]);
            v24->__r_.__value_.__l.__size_ = 0;
            v24->__r_.__value_.__r.__words[2] = 0;
            v24->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v66.__r_.__value_.__l.__data_);
            v66.__r_.__value_.__r.__words[0] = v25;
            v66.__r_.__value_.__l.__size_ = v88.__r_.__value_.__r.__words[0];
            *(std::string::size_type *)((char *)&v66.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v88.__r_.__value_.__r.__words + 7);
            *((_BYTE *)&v66.__r_.__value_.__s + 23) = v26;
            if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v74.__r_.__value_.__l.__data_);
            v3 = v65;
            CoreML::Result::Result(&v81, 14);
          }
          else
          {
            std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)&v85, (const void **)&v89.__r_.__value_.__l.__data_, (uint64_t)&v89);
          }
          if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v89.__r_.__value_.__l.__data_);
          if (v23)
            break;
          if (++v20 >= *((int *)v19 + 6))
            goto LABEL_63;
        }
      }
    }
    else
    {
      v12 = 0;
      while (1)
      {
        v13 = *(__int128 **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v12 + 8) + 112);
        if (*((char *)v13 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v89, *(const std::string::value_type **)v13, *((_QWORD *)v13 + 1));
        }
        else
        {
          v14 = *v13;
          v89.__r_.__value_.__r.__words[2] = *((_QWORD *)v13 + 2);
          *(_OWORD *)&v89.__r_.__value_.__l.__data_ = v14;
        }
        v15 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)&v85, (const void **)&v89.__r_.__value_.__l.__data_);
        if (v15)
        {
          std::operator+<char>();
          v16 = std::string::append(&v74, "', i.e., there are more than one layers or loss layers with this name.");
          v17 = v16->__r_.__value_.__r.__words[0];
          v88.__r_.__value_.__r.__words[0] = v16->__r_.__value_.__l.__size_;
          *(std::string::size_type *)((char *)v88.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v16->__r_.__value_.__r.__words[1] + 7);
          v18 = HIBYTE(v16->__r_.__value_.__r.__words[2]);
          v16->__r_.__value_.__l.__size_ = 0;
          v16->__r_.__value_.__r.__words[2] = 0;
          v16->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v66.__r_.__value_.__l.__data_);
          v66.__r_.__value_.__r.__words[0] = v17;
          v66.__r_.__value_.__l.__size_ = v88.__r_.__value_.__r.__words[0];
          *(std::string::size_type *)((char *)&v66.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v88.__r_.__value_.__r.__words + 7);
          *((_BYTE *)&v66.__r_.__value_.__s + 23) = v18;
          if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v74.__r_.__value_.__l.__data_);
          CoreML::Result::Result(&v81, 14);
        }
        else
        {
          std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)&v85, (const void **)&v89.__r_.__value_.__l.__data_, (uint64_t)&v89);
        }
        if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v89.__r_.__value_.__l.__data_);
        if (v15)
          break;
        if (++v12 >= *(int *)(a1 + 24))
          goto LABEL_44;
      }
    }
    v27 = v64;
    if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v66.__r_.__value_.__l.__data_);
    std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)&v85, (char *)v85.__r_.__value_.__l.__size_);
    if ((__p[31] & 0x80000000) != 0)
      operator delete(*(void **)&__p[8]);
    *(_QWORD *)v3 = v81;
    if (*((char *)v3 + 31) < 0)
      operator delete(*(void **)v64);
    *(_OWORD *)v64 = v82;
    *((_QWORD *)v64 + 2) = v83;
    result = CoreML::Result::good(v3);
    if (result)
    {
      CoreML::Result::Result((CoreML::Result *)&v85);
      v28 = *(uint64_t **)(a1 + 64);
      if (!v28)
        v28 = &CoreML::Specification::_NetworkUpdateParameters_default_instance_;
      v29 = *((int *)v28 + 6);
      if ((int)v29 >= 2)
      {
        memset(__p, 0, 24);
        MEMORY[0x219A19390](__p, "This model has more than one loss layers specified, which is not supported at the moment.");
        CoreML::Result::Result(&v66, 15);
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
        goto LABEL_188;
      }
      v81 = (uint64_t *)&v82;
      v82 = 0uLL;
      v84[0] = 0;
      v84[1] = 0;
      v83 = v84;
      memset(&v89, 0, sizeof(v89));
      std::vector<CoreML::LayerNode>::resize((uint64_t *)&v89, *(int *)(a1 + 24) + v29);
      if (*(int *)(a1 + 24) >= 1)
      {
        v30 = 0;
        do
        {
          CoreML::LayerNode::LayerNode((CoreML::LayerNode *)__p, *(const CoreML::Specification::NeuralNetworkLayer **)(*(_QWORD *)(a1 + 32) + 8 * v30 + 8));
          size = v89.__r_.__value_.__l.__size_;
          if (v89.__r_.__value_.__l.__size_ >= v89.__r_.__value_.__r.__words[2])
          {
            v32 = std::vector<CoreML::LayerNode>::__push_back_slow_path<CoreML::LayerNode>((uint64_t *)&v89, (uint64_t)__p);
          }
          else
          {
            std::allocator<CoreML::LayerNode>::construct[abi:ne180100]<CoreML::LayerNode,CoreML::LayerNode>((uint64_t)&v89.__r_.__value_.__r.__words[2], v89.__r_.__value_.__l.__size_, (uint64_t)__p);
            v32 = size + 136;
          }
          v89.__r_.__value_.__l.__size_ = v32;
          v74.__r_.__value_.__r.__words[0] = (std::string::size_type)v80;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v74);
          v74.__r_.__value_.__r.__words[0] = (std::string::size_type)v79;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v74);
          if (v78 < 0)
            operator delete(v77);
          if (*(_QWORD *)&__p[24])
          {
            *(_QWORD *)&v76 = *(_QWORD *)&__p[24];
            operator delete(*(void **)&__p[24]);
          }
          if (*(_QWORD *)__p)
          {
            *(_QWORD *)&__p[8] = *(_QWORD *)__p;
            operator delete(*(void **)__p);
          }
          CoreML::NeuralNetworkValidatorGraph::insertNode(&v81, (CoreML::LayerNode *)(v89.__r_.__value_.__l.__size_ - 136));
          ++v30;
        }
        while (v30 < *(int *)(a1 + 24));
      }
      v33 = *(uint64_t **)(a1 + 64);
      if (!v33)
        v33 = &CoreML::Specification::_NetworkUpdateParameters_default_instance_;
      if (*((int *)v33 + 6) >= 1)
      {
        v34 = 0;
        while (1)
        {
          v35 = *(const std::string ***)(v33[4] + 8 * v34 + 8);
          CoreML::LayerNode::LayerNode((CoreML::LayerNode *)__p, v35);
          v36 = v89.__r_.__value_.__l.__size_;
          if (v89.__r_.__value_.__l.__size_ >= v89.__r_.__value_.__r.__words[2])
          {
            v37 = std::vector<CoreML::LayerNode>::__push_back_slow_path<CoreML::LayerNode>((uint64_t *)&v89, (uint64_t)__p);
          }
          else
          {
            std::allocator<CoreML::LayerNode>::construct[abi:ne180100]<CoreML::LayerNode,CoreML::LayerNode>((uint64_t)&v89.__r_.__value_.__r.__words[2], v89.__r_.__value_.__l.__size_, (uint64_t)__p);
            v37 = v36 + 136;
          }
          v89.__r_.__value_.__l.__size_ = v37;
          v74.__r_.__value_.__r.__words[0] = (std::string::size_type)v80;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v74);
          v74.__r_.__value_.__r.__words[0] = (std::string::size_type)v79;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v74);
          if (v78 < 0)
            operator delete(v77);
          if (*(_QWORD *)&__p[24])
          {
            *(_QWORD *)&v76 = *(_QWORD *)&__p[24];
            operator delete(*(void **)&__p[24]);
          }
          if (*(_QWORD *)__p)
          {
            *(_QWORD *)&__p[8] = *(_QWORD *)__p;
            operator delete(*(void **)__p);
          }
          CoreML::NeuralNetworkValidatorGraph::insertNode(&v81, (CoreML::LayerNode *)(v89.__r_.__value_.__l.__size_ - 136));
          validateLossLayer((const CoreML::Specification::LossLayer *)v35, (const CoreML::NeuralNetworkValidatorGraph *)&v81, (uint64_t)__p);
          v85.__r_.__value_.__r.__words[0] = *(_QWORD *)__p;
          if (SHIBYTE(v86) < 0)
            operator delete((void *)v85.__r_.__value_.__l.__size_);
          *(_OWORD *)&v85.__r_.__value_.__r.__words[1] = *(_OWORD *)&__p[8];
          v86 = *(_QWORD *)&__p[24];
          if (!CoreML::Result::good((CoreML::Result *)&v85))
            break;
          ++v34;
          v33 = *(uint64_t **)(a1 + 64);
          if (!v33)
            v33 = &CoreML::Specification::_NetworkUpdateParameters_default_instance_;
          if (v34 >= *((int *)v33 + 6))
            goto LABEL_107;
        }
        v66 = v85;
        v67 = v86;
        *(_OWORD *)&v85.__r_.__value_.__r.__words[1] = 0uLL;
        v86 = 0;
        v3 = v65;
        goto LABEL_186;
      }
LABEL_107:
      v38 = (const CoreML::Specification::Optimizer *)v33[5];
      if (v38)
        v39 = v38;
      else
        v39 = (const CoreML::Specification::Optimizer *)&CoreML::Specification::_Optimizer_default_instance_;
      validateOptimizer(v39, (uint64_t)__p);
      v85.__r_.__value_.__r.__words[0] = *(_QWORD *)__p;
      v27 = v64;
      v3 = v65;
      if (SHIBYTE(v86) < 0)
        operator delete((void *)v85.__r_.__value_.__l.__size_);
      *(_OWORD *)&v85.__r_.__value_.__r.__words[1] = *(_OWORD *)&__p[8];
      v86 = *(_QWORD *)&__p[24];
      if (!CoreML::Result::good((CoreML::Result *)&v85))
        goto LABEL_184;
      if (*(_QWORD *)(a1 + 64))
        v40 = *(const CoreML::Specification::NetworkUpdateParameters **)(a1 + 64);
      else
        v40 = (const CoreML::Specification::NetworkUpdateParameters *)&CoreML::Specification::_NetworkUpdateParameters_default_instance_;
      validateOtherTopLevelUpdateParameters(v40, (uint64_t)__p);
      v85.__r_.__value_.__r.__words[0] = *(_QWORD *)__p;
      if (SHIBYTE(v86) < 0)
        operator delete((void *)v85.__r_.__value_.__l.__size_);
      *(_OWORD *)&v85.__r_.__value_.__r.__words[1] = *(_OWORD *)&__p[8];
      v86 = *(_QWORD *)&__p[24];
      if (!CoreML::Result::good((CoreML::Result *)&v85))
      {
LABEL_184:
        v66 = v85;
        v67 = v86;
        *(_OWORD *)&v85.__r_.__value_.__r.__words[1] = 0uLL;
        v86 = 0;
LABEL_187:
        *(_QWORD *)__p = &v89;
        std::vector<CoreML::LayerNode>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)&v83, v84[0]);
        std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)&v81, (char *)v82);
LABEL_188:
        if (SHIBYTE(v86) < 0)
          operator delete((void *)v85.__r_.__value_.__l.__size_);
        *(_QWORD *)v3 = v66.__r_.__value_.__r.__words[0];
        if (*((char *)v3 + 31) < 0)
          operator delete(*(void **)v27);
        *(_OWORD *)v27 = *(_OWORD *)&v66.__r_.__value_.__r.__words[1];
        *((_QWORD *)v27 + 2) = v67;
        return CoreML::Result::good(v3);
      }
      *(_OWORD *)&v74.__r_.__value_.__r.__words[1] = 0uLL;
      v74.__r_.__value_.__r.__words[0] = (std::string::size_type)&v74.__r_.__value_.__l.__size_;
      v41 = *(uint64_t **)(a1 + 64);
      if (!v41)
        v41 = &CoreML::Specification::_NetworkUpdateParameters_default_instance_;
      if (*((int *)v41 + 6) < 1)
      {
LABEL_182:
        v66 = v85;
        v67 = v86;
        *(_OWORD *)&v85.__r_.__value_.__r.__words[1] = 0uLL;
        v86 = 0;
LABEL_183:
        std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)&v74, (char *)v74.__r_.__value_.__l.__size_);
LABEL_186:
        v27 = v64;
        goto LABEL_187;
      }
      v42 = 0;
      while (1)
      {
        v43 = *(__int128 **)(*(_QWORD *)(v41[4] + 8 * v42 + 8) + 16);
        if (*((char *)v43 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v88, *(const std::string::value_type **)v43, *((_QWORD *)v43 + 1));
        }
        else
        {
          v44 = *v43;
          v88.__r_.__value_.__r.__words[2] = *((_QWORD *)v43 + 2);
          *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v44;
        }
        v63 = v42;
        v76 = 0u;
        memset(__p, 0, sizeof(__p));
        std::deque<std::string>::push_back(__p, (__int128 *)&v88);
        v45 = 0;
        memset(&v73, 0, sizeof(v73));
        while (*((_QWORD *)&v76 + 1))
        {
          v46 = *(_QWORD *)(*(_QWORD *)&__p[8] + 8 * ((unint64_t)v76 / 0xAA))
              + 24 * ((unint64_t)v76 % 0xAA);
          if (*(char *)(v46 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v72, *(const std::string::value_type **)v46, *(_QWORD *)(v46 + 8));
          }
          else
          {
            v47 = *(_OWORD *)v46;
            v72.__r_.__value_.__r.__words[2] = *(_QWORD *)(v46 + 16);
            *(_OWORD *)&v72.__r_.__value_.__l.__data_ = v47;
          }
          std::deque<std::string>::pop_front(__p);
          if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v71, v72.__r_.__value_.__l.__data_, v72.__r_.__value_.__l.__size_);
          else
            v71 = v72;
          NodeFromName = CoreML::NeuralNetworkValidatorGraph::getNodeFromName((uint64_t)&v81, (const void **)&v71.__r_.__value_.__l.__data_);
          v49 = NodeFromName;
          if ((SHIBYTE(v71.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
            if (NodeFromName)
              goto LABEL_136;
            goto LABEL_163;
          }
          operator delete(v71.__r_.__value_.__l.__data_);
          if (v49)
          {
LABEL_136:
            v50 = *(uint64_t **)v49;
            v51 = *(uint64_t **)(v49 + 8);
            while (1)
            {
              if (v50 == v51)
              {
                v54 = 0;
                goto LABEL_168;
              }
              v52 = *v50;
              v53 = (const std::string *)(*v50 + 56);
              if (*(char *)(*v50 + 79) < 0)
                std::string::__init_copy_ctor_external(&v70, *(const std::string::value_type **)(v52 + 56), *(_QWORD *)(v52 + 64));
              else
                v70 = *v53;
              if (&v74.__r_.__value_.__r.__words[1] != (std::string::size_type *)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>((uint64_t)&v74, (const void **)&v70.__r_.__value_.__l.__data_))break;
              std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)&v74, (const void **)&v70.__r_.__value_.__l.__data_, (uint64_t)&v70);
              std::deque<std::string>::push_back(__p, (__int128 *)&v70);
              if (((*(_BYTE *)(v52 + 128) != 0) & v45) == 1)
              {
                memset(&v69, 0, sizeof(v69));
                std::operator+<char>();
                v55 = std::string::append(&v68, "), which does not support backpropagation, between an updatable marked layer and the loss function.");
                v56 = v55->__r_.__value_.__r.__words[0];
                v87[0] = v55->__r_.__value_.__l.__size_;
                *(_QWORD *)((char *)v87 + 7) = *(std::string::size_type *)((char *)&v55->__r_.__value_.__r.__words[1] + 7);
                v57 = HIBYTE(v55->__r_.__value_.__r.__words[2]);
                v55->__r_.__value_.__l.__size_ = 0;
                v55->__r_.__value_.__r.__words[2] = 0;
                v55->__r_.__value_.__r.__words[0] = 0;
                if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v69.__r_.__value_.__l.__data_);
                v69.__r_.__value_.__r.__words[0] = v56;
                v69.__r_.__value_.__l.__size_ = v87[0];
                *(std::string::size_type *)((char *)&v69.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v87 + 7);
                *((_BYTE *)&v69.__r_.__value_.__s + 23) = v57;
                if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v68.__r_.__value_.__l.__data_);
                CoreML::Result::Result(&v66, 15);
                if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v69.__r_.__value_.__l.__data_);
                v45 = 1;
                v54 = 1;
              }
              else if (*(_BYTE *)(v52 + 129))
              {
                v54 = 0;
              }
              else
              {
                if (*(_DWORD *)(v52 + 48) == 175 && *(_DWORD *)(v49 + 52) == 10)
                  break;
                std::string::operator=(&v73, v53);
                v54 = 0;
                v45 = 1;
              }
LABEL_156:
              if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v70.__r_.__value_.__l.__data_);
              if (v54 != 14 && v54)
                goto LABEL_168;
              ++v50;
            }
            v54 = 14;
            goto LABEL_156;
          }
LABEL_163:
          std::operator+<char>();
          v58 = std::string::append(&v69, "'.");
          v59 = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
          v70.__r_.__value_.__r.__words[2] = v58->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v70.__r_.__value_.__l.__data_ = v59;
          v58->__r_.__value_.__l.__size_ = 0;
          v58->__r_.__value_.__r.__words[2] = 0;
          v58->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v69.__r_.__value_.__l.__data_);
          CoreML::Result::Result(&v66, 15);
          if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v70.__r_.__value_.__l.__data_);
          v54 = 1;
LABEL_168:
          if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v72.__r_.__value_.__l.__data_);
            if (v54)
              goto LABEL_174;
          }
          else if (v54)
          {
            goto LABEL_174;
          }
        }
        v54 = 0;
LABEL_174:
        if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v73.__r_.__value_.__l.__data_);
        std::deque<std::string>::~deque[abi:ne180100](__p);
        v3 = v65;
        if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v88.__r_.__value_.__l.__data_);
        if (v54)
          goto LABEL_183;
        v42 = v63 + 1;
        v41 = *(uint64_t **)(a1 + 64);
        if (!v41)
          v41 = &CoreML::Specification::_NetworkUpdateParameters_default_instance_;
        if (v42 >= *((int *)v41 + 6))
          goto LABEL_182;
      }
    }
  }
  return result;
}

void sub_218402E1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,void *a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  uint64_t v47;

  if (*(char *)(v47 - 233) < 0)
    operator delete(*(void **)(v47 - 256));
  if (a47 < 0)
    operator delete(__p);
  if (*(char *)(a12 + 31) < 0)
    operator delete(*(void **)(a12 + 8));
  _Unwind_Resume(a1);
}

BOOL validateUpdatableNeuralNetwork<CoreML::Specification::NeuralNetworkClassifier>@<W0>(uint64_t a1@<X0>, CoreML::Result *a2@<X8>)
{
  CoreML::Result *v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  int v9;
  void **v10;
  _BOOL8 result;
  uint64_t v12;
  __int128 *v13;
  __int128 v14;
  uint64_t v15;
  std::string *v16;
  std::string::size_type v17;
  char v18;
  uint64_t *v19;
  uint64_t v20;
  __int128 *v21;
  __int128 v22;
  uint64_t v23;
  std::string *v24;
  std::string::size_type v25;
  char v26;
  char *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  std::string::size_type size;
  std::string::size_type v32;
  uint64_t *v33;
  uint64_t v34;
  const std::string **v35;
  std::string::size_type v36;
  std::string::size_type v37;
  const CoreML::Specification::Optimizer *v38;
  const CoreML::Specification::Optimizer *v39;
  const CoreML::Specification::NetworkUpdateParameters *v40;
  uint64_t *v41;
  uint64_t v42;
  __int128 *v43;
  __int128 v44;
  char v45;
  unint64_t v46;
  __int128 v47;
  uint64_t NodeFromName;
  uint64_t v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t v52;
  const std::string *v53;
  int v54;
  std::string *v55;
  std::string::size_type v56;
  char v57;
  std::string *v58;
  __int128 v59;
  std::string *v60;
  uint64_t *v61;
  char v62;
  uint64_t v63;
  char *v64;
  CoreML::Result *v65;
  std::string v66;
  uint64_t v67;
  std::string v68;
  std::string v69;
  std::string v70;
  std::string v71;
  std::string v72;
  std::string v73;
  std::string v74;
  _BYTE __p[32];
  __int128 v76;
  void *v77;
  char v78;
  _BYTE v79[24];
  _BYTE v80[40];
  uint64_t *v81;
  __int128 v82;
  char **v83;
  char *v84[2];
  std::string v85;
  uint64_t v86;
  _QWORD v87[2];
  std::string v88;
  std::string v89;
  uint64_t v90;

  v3 = a2;
  v90 = *MEMORY[0x24BDAC8D0];
  CoreML::Result::Result(a2);
  CoreML::Result::Result((CoreML::Result *)__p);
  LODWORD(v4) = *(_DWORD *)(a1 + 24);
  v65 = v3;
  if ((int)v4 >= 1)
  {
    v5 = 0;
    v6 = 0;
    while (1)
    {
      ++v5;
      while (1)
      {
        v7 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v5);
        if (*(_BYTE *)(v7 + 120))
          break;
        if (v5++ >= (int)v4)
        {
          if ((v6 & 1) == 0)
            goto LABEL_20;
          goto LABEL_19;
        }
      }
      v9 = *(_DWORD *)(v7 + 140);
      if (v9 > 419)
      {
        if (v9 != 1045 && v9 != 420)
        {
LABEL_194:
          std::operator+<char>();
          v60 = std::string::append(&v66, "' is marked as updatable, however, it is not supported as the type of this layer is neither convolution, inner-product, uni-directional lstm, nor batchedMatMul.");
          v61 = (uint64_t *)v60->__r_.__value_.__r.__words[0];
          v89.__r_.__value_.__r.__words[0] = v60->__r_.__value_.__l.__size_;
          *(std::string::size_type *)((char *)v89.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v60->__r_.__value_.__r.__words[1] + 7);
          v62 = HIBYTE(v60->__r_.__value_.__r.__words[2]);
          v60->__r_.__value_.__l.__size_ = 0;
          v60->__r_.__value_.__r.__words[2] = 0;
          v60->__r_.__value_.__r.__words[0] = 0;
          *(_QWORD *)((char *)&v82 + 7) = *(std::string::size_type *)((char *)v89.__r_.__value_.__r.__words + 7);
          v81 = v61;
          *(_QWORD *)&v82 = v89.__r_.__value_.__r.__words[0];
          HIBYTE(v82) = v62;
          if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v66.__r_.__value_.__l.__data_);
          CoreML::Result::Result(&v85, 14);
          goto LABEL_21;
        }
      }
      else if (v9 != 100 && v9 != 140)
      {
        goto LABEL_194;
      }
      validateWeightParamsUpdatable((const CoreML::Specification::NeuralNetworkLayer *)v7, (uint64_t)&v81);
      *(_QWORD *)__p = v81;
      if ((__p[31] & 0x80000000) != 0)
        operator delete(*(void **)&__p[8]);
      *(_OWORD *)&__p[8] = v82;
      *(_QWORD *)&__p[24] = v83;
      if (CoreML::Result::good((CoreML::Result *)__p))
      {
        v6 = 1;
        v4 = *(int *)(a1 + 24);
        if (v5 < v4)
          continue;
      }
LABEL_19:
      v85 = *(std::string *)__p;
      v86 = *(_QWORD *)&__p[24];
      memset(&__p[8], 0, 24);
      goto LABEL_23;
    }
  }
LABEL_20:
  v81 = 0;
  v82 = 0uLL;
  MEMORY[0x219A19390](&v81, "The model is marked as updatable, but none of the layers are updatable.");
  CoreML::Result::Result(&v85, 14);
LABEL_21:
  if (SHIBYTE(v82) < 0)
    operator delete(v81);
LABEL_23:
  if ((__p[31] & 0x80000000) != 0)
    operator delete(*(void **)&__p[8]);
  *(_QWORD *)v3 = v85.__r_.__value_.__r.__words[0];
  v10 = (void **)((char *)v3 + 8);
  if (*((char *)v3 + 31) < 0)
    operator delete(*v10);
  *(_OWORD *)v10 = *(_OWORD *)&v85.__r_.__value_.__r.__words[1];
  *((_QWORD *)v3 + 3) = v86;
  result = CoreML::Result::good(v3);
  if (result)
  {
    v64 = (char *)v3 + 8;
    CoreML::Result::Result((CoreML::Result *)__p);
    *(_OWORD *)&v85.__r_.__value_.__r.__words[1] = 0uLL;
    v85.__r_.__value_.__r.__words[0] = (std::string::size_type)&v85.__r_.__value_.__l.__size_;
    memset(&v66, 0, sizeof(v66));
    if (*(int *)(a1 + 24) < 1)
    {
LABEL_44:
      v19 = *(_QWORD *)(a1 + 72)
          ? *(uint64_t **)(a1 + 72)
          : &CoreML::Specification::_NetworkUpdateParameters_default_instance_;
      if (*((int *)v19 + 6) < 1)
      {
LABEL_63:
        v82 = *(_OWORD *)&__p[8];
        v81 = *(uint64_t **)__p;
        v83 = *(char ***)&__p[24];
        memset(&__p[8], 0, 24);
      }
      else
      {
        v20 = 0;
        while (1)
        {
          v21 = *(__int128 **)(*(_QWORD *)(v19[4] + 8 * v20 + 8) + 16);
          if (*((char *)v21 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v89, *(const std::string::value_type **)v21, *((_QWORD *)v21 + 1));
          }
          else
          {
            v22 = *v21;
            v89.__r_.__value_.__r.__words[2] = *((_QWORD *)v21 + 2);
            *(_OWORD *)&v89.__r_.__value_.__l.__data_ = v22;
          }
          v23 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)&v85, (const void **)&v89.__r_.__value_.__l.__data_);
          if (v23)
          {
            std::operator+<char>();
            v24 = std::string::append(&v74, "', i.e., there are more than one layers or loss layers with this name.");
            v25 = v24->__r_.__value_.__r.__words[0];
            v88.__r_.__value_.__r.__words[0] = v24->__r_.__value_.__l.__size_;
            *(std::string::size_type *)((char *)v88.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v24->__r_.__value_.__r.__words[1] + 7);
            v26 = HIBYTE(v24->__r_.__value_.__r.__words[2]);
            v24->__r_.__value_.__l.__size_ = 0;
            v24->__r_.__value_.__r.__words[2] = 0;
            v24->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v66.__r_.__value_.__l.__data_);
            v66.__r_.__value_.__r.__words[0] = v25;
            v66.__r_.__value_.__l.__size_ = v88.__r_.__value_.__r.__words[0];
            *(std::string::size_type *)((char *)&v66.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v88.__r_.__value_.__r.__words + 7);
            *((_BYTE *)&v66.__r_.__value_.__s + 23) = v26;
            if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v74.__r_.__value_.__l.__data_);
            v3 = v65;
            CoreML::Result::Result(&v81, 14);
          }
          else
          {
            std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)&v85, (const void **)&v89.__r_.__value_.__l.__data_, (uint64_t)&v89);
          }
          if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v89.__r_.__value_.__l.__data_);
          if (v23)
            break;
          if (++v20 >= *((int *)v19 + 6))
            goto LABEL_63;
        }
      }
    }
    else
    {
      v12 = 0;
      while (1)
      {
        v13 = *(__int128 **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v12 + 8) + 112);
        if (*((char *)v13 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v89, *(const std::string::value_type **)v13, *((_QWORD *)v13 + 1));
        }
        else
        {
          v14 = *v13;
          v89.__r_.__value_.__r.__words[2] = *((_QWORD *)v13 + 2);
          *(_OWORD *)&v89.__r_.__value_.__l.__data_ = v14;
        }
        v15 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)&v85, (const void **)&v89.__r_.__value_.__l.__data_);
        if (v15)
        {
          std::operator+<char>();
          v16 = std::string::append(&v74, "', i.e., there are more than one layers or loss layers with this name.");
          v17 = v16->__r_.__value_.__r.__words[0];
          v88.__r_.__value_.__r.__words[0] = v16->__r_.__value_.__l.__size_;
          *(std::string::size_type *)((char *)v88.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v16->__r_.__value_.__r.__words[1] + 7);
          v18 = HIBYTE(v16->__r_.__value_.__r.__words[2]);
          v16->__r_.__value_.__l.__size_ = 0;
          v16->__r_.__value_.__r.__words[2] = 0;
          v16->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v66.__r_.__value_.__l.__data_);
          v66.__r_.__value_.__r.__words[0] = v17;
          v66.__r_.__value_.__l.__size_ = v88.__r_.__value_.__r.__words[0];
          *(std::string::size_type *)((char *)&v66.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v88.__r_.__value_.__r.__words + 7);
          *((_BYTE *)&v66.__r_.__value_.__s + 23) = v18;
          if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v74.__r_.__value_.__l.__data_);
          CoreML::Result::Result(&v81, 14);
        }
        else
        {
          std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)&v85, (const void **)&v89.__r_.__value_.__l.__data_, (uint64_t)&v89);
        }
        if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v89.__r_.__value_.__l.__data_);
        if (v15)
          break;
        if (++v12 >= *(int *)(a1 + 24))
          goto LABEL_44;
      }
    }
    v27 = v64;
    if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v66.__r_.__value_.__l.__data_);
    std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)&v85, (char *)v85.__r_.__value_.__l.__size_);
    if ((__p[31] & 0x80000000) != 0)
      operator delete(*(void **)&__p[8]);
    *(_QWORD *)v3 = v81;
    if (*((char *)v3 + 31) < 0)
      operator delete(*(void **)v64);
    *(_OWORD *)v64 = v82;
    *((_QWORD *)v64 + 2) = v83;
    result = CoreML::Result::good(v3);
    if (result)
    {
      CoreML::Result::Result((CoreML::Result *)&v85);
      v28 = *(uint64_t **)(a1 + 72);
      if (!v28)
        v28 = &CoreML::Specification::_NetworkUpdateParameters_default_instance_;
      v29 = *((int *)v28 + 6);
      if ((int)v29 >= 2)
      {
        memset(__p, 0, 24);
        MEMORY[0x219A19390](__p, "This model has more than one loss layers specified, which is not supported at the moment.");
        CoreML::Result::Result(&v66, 15);
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
        goto LABEL_188;
      }
      v81 = (uint64_t *)&v82;
      v82 = 0uLL;
      v84[0] = 0;
      v84[1] = 0;
      v83 = v84;
      memset(&v89, 0, sizeof(v89));
      std::vector<CoreML::LayerNode>::resize((uint64_t *)&v89, *(int *)(a1 + 24) + v29);
      if (*(int *)(a1 + 24) >= 1)
      {
        v30 = 0;
        do
        {
          CoreML::LayerNode::LayerNode((CoreML::LayerNode *)__p, *(const CoreML::Specification::NeuralNetworkLayer **)(*(_QWORD *)(a1 + 32) + 8 * v30 + 8));
          size = v89.__r_.__value_.__l.__size_;
          if (v89.__r_.__value_.__l.__size_ >= v89.__r_.__value_.__r.__words[2])
          {
            v32 = std::vector<CoreML::LayerNode>::__push_back_slow_path<CoreML::LayerNode>((uint64_t *)&v89, (uint64_t)__p);
          }
          else
          {
            std::allocator<CoreML::LayerNode>::construct[abi:ne180100]<CoreML::LayerNode,CoreML::LayerNode>((uint64_t)&v89.__r_.__value_.__r.__words[2], v89.__r_.__value_.__l.__size_, (uint64_t)__p);
            v32 = size + 136;
          }
          v89.__r_.__value_.__l.__size_ = v32;
          v74.__r_.__value_.__r.__words[0] = (std::string::size_type)v80;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v74);
          v74.__r_.__value_.__r.__words[0] = (std::string::size_type)v79;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v74);
          if (v78 < 0)
            operator delete(v77);
          if (*(_QWORD *)&__p[24])
          {
            *(_QWORD *)&v76 = *(_QWORD *)&__p[24];
            operator delete(*(void **)&__p[24]);
          }
          if (*(_QWORD *)__p)
          {
            *(_QWORD *)&__p[8] = *(_QWORD *)__p;
            operator delete(*(void **)__p);
          }
          CoreML::NeuralNetworkValidatorGraph::insertNode(&v81, (CoreML::LayerNode *)(v89.__r_.__value_.__l.__size_ - 136));
          ++v30;
        }
        while (v30 < *(int *)(a1 + 24));
      }
      v33 = *(uint64_t **)(a1 + 72);
      if (!v33)
        v33 = &CoreML::Specification::_NetworkUpdateParameters_default_instance_;
      if (*((int *)v33 + 6) >= 1)
      {
        v34 = 0;
        while (1)
        {
          v35 = *(const std::string ***)(v33[4] + 8 * v34 + 8);
          CoreML::LayerNode::LayerNode((CoreML::LayerNode *)__p, v35);
          v36 = v89.__r_.__value_.__l.__size_;
          if (v89.__r_.__value_.__l.__size_ >= v89.__r_.__value_.__r.__words[2])
          {
            v37 = std::vector<CoreML::LayerNode>::__push_back_slow_path<CoreML::LayerNode>((uint64_t *)&v89, (uint64_t)__p);
          }
          else
          {
            std::allocator<CoreML::LayerNode>::construct[abi:ne180100]<CoreML::LayerNode,CoreML::LayerNode>((uint64_t)&v89.__r_.__value_.__r.__words[2], v89.__r_.__value_.__l.__size_, (uint64_t)__p);
            v37 = v36 + 136;
          }
          v89.__r_.__value_.__l.__size_ = v37;
          v74.__r_.__value_.__r.__words[0] = (std::string::size_type)v80;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v74);
          v74.__r_.__value_.__r.__words[0] = (std::string::size_type)v79;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v74);
          if (v78 < 0)
            operator delete(v77);
          if (*(_QWORD *)&__p[24])
          {
            *(_QWORD *)&v76 = *(_QWORD *)&__p[24];
            operator delete(*(void **)&__p[24]);
          }
          if (*(_QWORD *)__p)
          {
            *(_QWORD *)&__p[8] = *(_QWORD *)__p;
            operator delete(*(void **)__p);
          }
          CoreML::NeuralNetworkValidatorGraph::insertNode(&v81, (CoreML::LayerNode *)(v89.__r_.__value_.__l.__size_ - 136));
          validateLossLayer((const CoreML::Specification::LossLayer *)v35, (const CoreML::NeuralNetworkValidatorGraph *)&v81, (uint64_t)__p);
          v85.__r_.__value_.__r.__words[0] = *(_QWORD *)__p;
          if (SHIBYTE(v86) < 0)
            operator delete((void *)v85.__r_.__value_.__l.__size_);
          *(_OWORD *)&v85.__r_.__value_.__r.__words[1] = *(_OWORD *)&__p[8];
          v86 = *(_QWORD *)&__p[24];
          if (!CoreML::Result::good((CoreML::Result *)&v85))
            break;
          ++v34;
          v33 = *(uint64_t **)(a1 + 72);
          if (!v33)
            v33 = &CoreML::Specification::_NetworkUpdateParameters_default_instance_;
          if (v34 >= *((int *)v33 + 6))
            goto LABEL_107;
        }
        v66 = v85;
        v67 = v86;
        *(_OWORD *)&v85.__r_.__value_.__r.__words[1] = 0uLL;
        v86 = 0;
        v3 = v65;
        goto LABEL_186;
      }
LABEL_107:
      v38 = (const CoreML::Specification::Optimizer *)v33[5];
      if (v38)
        v39 = v38;
      else
        v39 = (const CoreML::Specification::Optimizer *)&CoreML::Specification::_Optimizer_default_instance_;
      validateOptimizer(v39, (uint64_t)__p);
      v85.__r_.__value_.__r.__words[0] = *(_QWORD *)__p;
      v27 = v64;
      v3 = v65;
      if (SHIBYTE(v86) < 0)
        operator delete((void *)v85.__r_.__value_.__l.__size_);
      *(_OWORD *)&v85.__r_.__value_.__r.__words[1] = *(_OWORD *)&__p[8];
      v86 = *(_QWORD *)&__p[24];
      if (!CoreML::Result::good((CoreML::Result *)&v85))
        goto LABEL_184;
      if (*(_QWORD *)(a1 + 72))
        v40 = *(const CoreML::Specification::NetworkUpdateParameters **)(a1 + 72);
      else
        v40 = (const CoreML::Specification::NetworkUpdateParameters *)&CoreML::Specification::_NetworkUpdateParameters_default_instance_;
      validateOtherTopLevelUpdateParameters(v40, (uint64_t)__p);
      v85.__r_.__value_.__r.__words[0] = *(_QWORD *)__p;
      if (SHIBYTE(v86) < 0)
        operator delete((void *)v85.__r_.__value_.__l.__size_);
      *(_OWORD *)&v85.__r_.__value_.__r.__words[1] = *(_OWORD *)&__p[8];
      v86 = *(_QWORD *)&__p[24];
      if (!CoreML::Result::good((CoreML::Result *)&v85))
      {
LABEL_184:
        v66 = v85;
        v67 = v86;
        *(_OWORD *)&v85.__r_.__value_.__r.__words[1] = 0uLL;
        v86 = 0;
LABEL_187:
        *(_QWORD *)__p = &v89;
        std::vector<CoreML::LayerNode>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)&v83, v84[0]);
        std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)&v81, (char *)v82);
LABEL_188:
        if (SHIBYTE(v86) < 0)
          operator delete((void *)v85.__r_.__value_.__l.__size_);
        *(_QWORD *)v3 = v66.__r_.__value_.__r.__words[0];
        if (*((char *)v3 + 31) < 0)
          operator delete(*(void **)v27);
        *(_OWORD *)v27 = *(_OWORD *)&v66.__r_.__value_.__r.__words[1];
        *((_QWORD *)v27 + 2) = v67;
        return CoreML::Result::good(v3);
      }
      *(_OWORD *)&v74.__r_.__value_.__r.__words[1] = 0uLL;
      v74.__r_.__value_.__r.__words[0] = (std::string::size_type)&v74.__r_.__value_.__l.__size_;
      v41 = *(uint64_t **)(a1 + 72);
      if (!v41)
        v41 = &CoreML::Specification::_NetworkUpdateParameters_default_instance_;
      if (*((int *)v41 + 6) < 1)
      {
LABEL_182:
        v66 = v85;
        v67 = v86;
        *(_OWORD *)&v85.__r_.__value_.__r.__words[1] = 0uLL;
        v86 = 0;
LABEL_183:
        std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)&v74, (char *)v74.__r_.__value_.__l.__size_);
LABEL_186:
        v27 = v64;
        goto LABEL_187;
      }
      v42 = 0;
      while (1)
      {
        v43 = *(__int128 **)(*(_QWORD *)(v41[4] + 8 * v42 + 8) + 16);
        if (*((char *)v43 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v88, *(const std::string::value_type **)v43, *((_QWORD *)v43 + 1));
        }
        else
        {
          v44 = *v43;
          v88.__r_.__value_.__r.__words[2] = *((_QWORD *)v43 + 2);
          *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v44;
        }
        v63 = v42;
        v76 = 0u;
        memset(__p, 0, sizeof(__p));
        std::deque<std::string>::push_back(__p, (__int128 *)&v88);
        v45 = 0;
        memset(&v73, 0, sizeof(v73));
        while (*((_QWORD *)&v76 + 1))
        {
          v46 = *(_QWORD *)(*(_QWORD *)&__p[8] + 8 * ((unint64_t)v76 / 0xAA))
              + 24 * ((unint64_t)v76 % 0xAA);
          if (*(char *)(v46 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v72, *(const std::string::value_type **)v46, *(_QWORD *)(v46 + 8));
          }
          else
          {
            v47 = *(_OWORD *)v46;
            v72.__r_.__value_.__r.__words[2] = *(_QWORD *)(v46 + 16);
            *(_OWORD *)&v72.__r_.__value_.__l.__data_ = v47;
          }
          std::deque<std::string>::pop_front(__p);
          if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v71, v72.__r_.__value_.__l.__data_, v72.__r_.__value_.__l.__size_);
          else
            v71 = v72;
          NodeFromName = CoreML::NeuralNetworkValidatorGraph::getNodeFromName((uint64_t)&v81, (const void **)&v71.__r_.__value_.__l.__data_);
          v49 = NodeFromName;
          if ((SHIBYTE(v71.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
            if (NodeFromName)
              goto LABEL_136;
            goto LABEL_163;
          }
          operator delete(v71.__r_.__value_.__l.__data_);
          if (v49)
          {
LABEL_136:
            v50 = *(uint64_t **)v49;
            v51 = *(uint64_t **)(v49 + 8);
            while (1)
            {
              if (v50 == v51)
              {
                v54 = 0;
                goto LABEL_168;
              }
              v52 = *v50;
              v53 = (const std::string *)(*v50 + 56);
              if (*(char *)(*v50 + 79) < 0)
                std::string::__init_copy_ctor_external(&v70, *(const std::string::value_type **)(v52 + 56), *(_QWORD *)(v52 + 64));
              else
                v70 = *v53;
              if (&v74.__r_.__value_.__r.__words[1] != (std::string::size_type *)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>((uint64_t)&v74, (const void **)&v70.__r_.__value_.__l.__data_))break;
              std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)&v74, (const void **)&v70.__r_.__value_.__l.__data_, (uint64_t)&v70);
              std::deque<std::string>::push_back(__p, (__int128 *)&v70);
              if (((*(_BYTE *)(v52 + 128) != 0) & v45) == 1)
              {
                memset(&v69, 0, sizeof(v69));
                std::operator+<char>();
                v55 = std::string::append(&v68, "), which does not support backpropagation, between an updatable marked layer and the loss function.");
                v56 = v55->__r_.__value_.__r.__words[0];
                v87[0] = v55->__r_.__value_.__l.__size_;
                *(_QWORD *)((char *)v87 + 7) = *(std::string::size_type *)((char *)&v55->__r_.__value_.__r.__words[1] + 7);
                v57 = HIBYTE(v55->__r_.__value_.__r.__words[2]);
                v55->__r_.__value_.__l.__size_ = 0;
                v55->__r_.__value_.__r.__words[2] = 0;
                v55->__r_.__value_.__r.__words[0] = 0;
                if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v69.__r_.__value_.__l.__data_);
                v69.__r_.__value_.__r.__words[0] = v56;
                v69.__r_.__value_.__l.__size_ = v87[0];
                *(std::string::size_type *)((char *)&v69.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v87 + 7);
                *((_BYTE *)&v69.__r_.__value_.__s + 23) = v57;
                if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v68.__r_.__value_.__l.__data_);
                CoreML::Result::Result(&v66, 15);
                if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v69.__r_.__value_.__l.__data_);
                v45 = 1;
                v54 = 1;
              }
              else if (*(_BYTE *)(v52 + 129))
              {
                v54 = 0;
              }
              else
              {
                if (*(_DWORD *)(v52 + 48) == 175 && *(_DWORD *)(v49 + 52) == 10)
                  break;
                std::string::operator=(&v73, v53);
                v54 = 0;
                v45 = 1;
              }
LABEL_156:
              if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v70.__r_.__value_.__l.__data_);
              if (v54 != 14 && v54)
                goto LABEL_168;
              ++v50;
            }
            v54 = 14;
            goto LABEL_156;
          }
LABEL_163:
          std::operator+<char>();
          v58 = std::string::append(&v69, "'.");
          v59 = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
          v70.__r_.__value_.__r.__words[2] = v58->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v70.__r_.__value_.__l.__data_ = v59;
          v58->__r_.__value_.__l.__size_ = 0;
          v58->__r_.__value_.__r.__words[2] = 0;
          v58->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v69.__r_.__value_.__l.__data_);
          CoreML::Result::Result(&v66, 15);
          if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v70.__r_.__value_.__l.__data_);
          v54 = 1;
LABEL_168:
          if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v72.__r_.__value_.__l.__data_);
            if (v54)
              goto LABEL_174;
          }
          else if (v54)
          {
            goto LABEL_174;
          }
        }
        v54 = 0;
LABEL_174:
        if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v73.__r_.__value_.__l.__data_);
        std::deque<std::string>::~deque[abi:ne180100](__p);
        v3 = v65;
        if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v88.__r_.__value_.__l.__data_);
        if (v54)
          goto LABEL_183;
        v42 = v63 + 1;
        v41 = *(uint64_t **)(a1 + 72);
        if (!v41)
          v41 = &CoreML::Specification::_NetworkUpdateParameters_default_instance_;
        if (v42 >= *((int *)v41 + 6))
          goto LABEL_182;
      }
    }
  }
  return result;
}

void sub_218403E30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,void *a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  uint64_t v47;

  if (*(char *)(v47 - 233) < 0)
    operator delete(*(void **)(v47 - 256));
  if (a47 < 0)
    operator delete(__p);
  if (*(char *)(a12 + 31) < 0)
    operator delete(*(void **)(a12 + 8));
  _Unwind_Resume(a1);
}

void validateWeightParamsUpdatable(const CoreML::Specification::NeuralNetworkLayer *a1@<X0>, uint64_t a2@<X8>)
{
  int v4;
  uint64_t v5;
  int v6;
  _BOOL4 v7;
  uint64_t *v8;
  uint64_t *v9;
  BOOL v10;
  uint64_t v11;
  int v12;
  uint64_t *v13;
  uint64_t *v14;
  BOOL v15;
  _BOOL4 v16;
  uint64_t *v17;
  BOOL v18;
  BOOL v19;
  _BOOL4 v20;
  uint64_t *v21;
  BOOL v22;
  BOOL v23;
  std::string *v25;
  void *v26;
  char v27;
  std::string v28;
  void *__p;
  __int128 v30;
  uint64_t v31;
  void *v32[2];
  uint64_t v33;
  _QWORD v34[3];

  v34[2] = *MEMORY[0x24BDAC8D0];
  CoreML::Result::Result((CoreML::Result *)&v31);
  __p = 0;
  v30 = 0uLL;
  v4 = *((_DWORD *)a1 + 35);
  if (v4 == 140)
  {
    v11 = *((_QWORD *)a1 + 16);
    v12 = *(unsigned __int8 *)(v11 + 48);
    v7 = *(_BYTE *)(v11 + 48) != 0;
    v20 = *(_BYTE *)(v11 + 48)
       && ((v13 = *(uint64_t **)(v11 + 24)) != 0
         ? (v14 = *(uint64_t **)(v11 + 24))
         : (v14 = &CoreML::Specification::_WeightParams_default_instance_),
           (v12 = *((unsigned __int8 *)v14 + 72) != 0, v13)
         ? (v15 = v13 == &CoreML::Specification::_WeightParams_default_instance_)
         : (v15 = 1),
           !v15)
       && v13[8] != 0;
    v21 = *(uint64_t **)(v11 + 16);
    v17 = &CoreML::Specification::_WeightParams_default_instance_;
    if (v21)
      v22 = v21 == &CoreML::Specification::_WeightParams_default_instance_;
    else
      v22 = 1;
    v23 = !v22 && v21[8] != 0;
    if (v21)
      v17 = v21;
    if (v23)
      goto LABEL_50;
  }
  else
  {
    if (v4 != 100)
      goto LABEL_49;
    v5 = *((_QWORD *)a1 + 16);
    v6 = *(unsigned __int8 *)(v5 + 153);
    v7 = *(_BYTE *)(v5 + 153) != 0;
    v16 = *(_BYTE *)(v5 + 153)
       && ((v8 = *(uint64_t **)(v5 + 120)) != 0
         ? (v9 = *(uint64_t **)(v5 + 120))
         : (v9 = &CoreML::Specification::_WeightParams_default_instance_),
           (v6 = *((unsigned __int8 *)v9 + 72), v8)
         ? (v10 = v8 == &CoreML::Specification::_WeightParams_default_instance_)
         : (v10 = 1),
           !v10)
       && v8[8] != 0;
    v17 = *(uint64_t **)(v5 + 112);
    if (v17)
      v18 = v17 == &CoreML::Specification::_WeightParams_default_instance_;
    else
      v18 = 1;
    v19 = !v18 && v17[8] != 0;
    if (!v17)
      v17 = &CoreML::Specification::_WeightParams_default_instance_;
    v12 = v6 != 0;
    v20 = v16;
    if (v19)
      goto LABEL_50;
  }
  if (v20)
  {
LABEL_50:
    std::operator+<char>();
    v25 = std::string::append(&v28, "', has quantized weights/bias param. Quantized weights/bias not supported for update.");
    goto LABEL_51;
  }
  if ((v12 | !v7) == 1 && *((_BYTE *)v17 + 72) != 0)
  {
LABEL_49:
    *(_QWORD *)a2 = v31;
    *(_OWORD *)(a2 + 8) = *(_OWORD *)v32;
    *(_QWORD *)(a2 + 24) = v33;
    v32[0] = 0;
    v32[1] = 0;
    v33 = 0;
    goto LABEL_56;
  }
  std::operator+<char>();
  v25 = std::string::append(&v28, "', has a weight/bias param which is not marked as updatable.");
LABEL_51:
  v26 = (void *)v25->__r_.__value_.__r.__words[0];
  v34[0] = v25->__r_.__value_.__l.__size_;
  *(_QWORD *)((char *)v34 + 7) = *(std::string::size_type *)((char *)&v25->__r_.__value_.__r.__words[1] + 7);
  v27 = HIBYTE(v25->__r_.__value_.__r.__words[2]);
  v25->__r_.__value_.__l.__size_ = 0;
  v25->__r_.__value_.__r.__words[2] = 0;
  v25->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v30) < 0)
    operator delete(__p);
  __p = v26;
  *(_QWORD *)&v30 = v34[0];
  *(_QWORD *)((char *)&v30 + 7) = *(_QWORD *)((char *)v34 + 7);
  HIBYTE(v30) = v27;
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
  CoreML::Result::Result((_DWORD *)a2, 14);
LABEL_56:
  if (SHIBYTE(v30) < 0)
    operator delete(__p);
  if (SHIBYTE(v33) < 0)
    operator delete(v32[0]);
}

void sub_218404320(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a28 < 0)
    operator delete(a23);
  _Unwind_Resume(exception_object);
}

void std::vector<CoreML::LayerNode>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;

  v3 = a1[1];
  v4 = 0xF0F0F0F0F0F0F0F1 * ((v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<CoreML::LayerNode>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 136 * a2;
    while (v3 != v7)
    {
      v3 -= 136;
      std::allocator<CoreML::LayerNode>::destroy[abi:ne180100]((uint64_t)(a1 + 2), v3);
    }
    a1[1] = v7;
  }
}

void CoreML::LayerNode::~LayerNode(void **this)
{
  void *v2;
  void *v3;
  void **v4;

  v4 = this + 13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  v4 = this + 10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  if (*((char *)this + 79) < 0)
    operator delete(this[7]);
  v2 = this[3];
  if (v2)
  {
    this[4] = v2;
    operator delete(v2);
  }
  v3 = *this;
  if (*this)
  {
    this[1] = v3;
    operator delete(v3);
  }
}

uint64_t *CoreML::NeuralNetworkValidatorGraph::insertNode(uint64_t **this, CoreML::LayerNode *a2)
{
  const void **v3;
  const void **v4;
  char *v5;
  char *v6;
  _QWORD *v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  __int128 *i;
  __int128 *v34;
  uint64_t *result;
  char *v37;
  __int128 *v38;

  v3 = (const void **)*((_QWORD *)a2 + 10);
  v4 = (const void **)*((_QWORD *)a2 + 11);
  if (v3 != v4)
  {
    v5 = (char *)(this + 3);
    v6 = (char *)(this + 4);
    v37 = (char *)a2 + 16;
    do
    {
      if (v6 != (char *)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>((uint64_t)v5, v3))
      {
        v7 = *(_QWORD **)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)v5, v3);
        v9 = (_QWORD *)*((_QWORD *)a2 + 1);
        v8 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v9 >= v8)
        {
          v11 = ((uint64_t)v9 - *(_QWORD *)a2) >> 3;
          if ((unint64_t)(v11 + 1) >> 61)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          v12 = v8 - *(_QWORD *)a2;
          v13 = v12 >> 2;
          if (v12 >> 2 <= (unint64_t)(v11 + 1))
            v13 = v11 + 1;
          if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
            v14 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v14 = v13;
          if (v14)
            v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v37, v14);
          else
            v15 = 0;
          v16 = &v15[8 * v11];
          *(_QWORD *)v16 = v7;
          v10 = v16 + 8;
          v18 = *(char **)a2;
          v17 = (char *)*((_QWORD *)a2 + 1);
          if (v17 != *(char **)a2)
          {
            do
            {
              v19 = *((_QWORD *)v17 - 1);
              v17 -= 8;
              *((_QWORD *)v16 - 1) = v19;
              v16 -= 8;
            }
            while (v17 != v18);
            v17 = *(char **)a2;
          }
          *(_QWORD *)a2 = v16;
          *((_QWORD *)a2 + 1) = v10;
          *((_QWORD *)a2 + 2) = &v15[8 * v14];
          if (v17)
            operator delete(v17);
        }
        else
        {
          *v9 = v7;
          v10 = v9 + 1;
        }
        *((_QWORD *)a2 + 1) = v10;
        v20 = v7[5];
        v21 = (_QWORD *)v7[4];
        if ((unint64_t)v21 >= v20)
        {
          v23 = v7[3];
          v24 = ((uint64_t)v21 - v23) >> 3;
          if ((unint64_t)(v24 + 1) >> 61)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          v25 = v20 - v23;
          v26 = v25 >> 2;
          if (v25 >> 2 <= (unint64_t)(v24 + 1))
            v26 = v24 + 1;
          if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8)
            v27 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v27 = v26;
          if (v27)
            v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(v7 + 5), v27);
          else
            v28 = 0;
          v29 = &v28[8 * v24];
          *(_QWORD *)v29 = a2;
          v22 = v29 + 8;
          v31 = (char *)v7[3];
          v30 = (char *)v7[4];
          if (v30 != v31)
          {
            do
            {
              v32 = *((_QWORD *)v30 - 1);
              v30 -= 8;
              *((_QWORD *)v29 - 1) = v32;
              v29 -= 8;
            }
            while (v30 != v31);
            v30 = (char *)v7[3];
          }
          v7[3] = v29;
          v7[4] = v22;
          v7[5] = &v28[8 * v27];
          if (v30)
            operator delete(v30);
        }
        else
        {
          *v21 = a2;
          v22 = v21 + 1;
        }
        v7[4] = v22;
      }
      v3 += 3;
    }
    while (v3 != v4);
  }
  v34 = (__int128 *)*((_QWORD *)a2 + 13);
  for (i = (__int128 *)*((_QWORD *)a2 + 14); v34 != i; v34 = (__int128 *)((char *)v34 + 24))
  {
    v38 = v34;
    std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(this + 3, (const void **)v34, (uint64_t)&std::piecewise_construct, &v38)[7] = (uint64_t)a2;
  }
  v38 = (__int128 *)((char *)a2 + 56);
  result = std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(this, (const void **)a2 + 7, (uint64_t)&std::piecewise_construct, &v38);
  result[7] = (uint64_t)a2;
  return result;
}

void validateLossLayer(const CoreML::Specification::LossLayer *a1@<X0>, const CoreML::NeuralNetworkValidatorGraph *a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  __int128 *v7;
  __int128 v8;
  __int128 *v9;
  __int128 v10;
  std::string *v11;
  void *v12;
  char v13;
  __int128 *v14;
  __int128 v15;
  char *v16;
  CoreML::Specification::MeanSquaredErrorLossLayer *v17;
  CoreML::Specification::MeanSquaredErrorLossLayer *v18;
  uint64_t *v19;
  uint64_t NodeFromName;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  std::string *v24;
  void *v25;
  char v26;
  std::string *v27;
  void *v28;
  char v29;
  int v30;
  std::string *v31;
  void *v32;
  char v33;
  uint64_t v34;
  __int128 v35;
  std::string *v36;
  void *v37;
  char v38;
  unsigned __int8 *v39;
  uint64_t v40;
  uint64_t v41;
  std::string::size_type size;
  std::string *v43;
  std::string *v44;
  void *v45;
  char v46;
  uint64_t *v47;
  uint64_t v48;
  __int128 v49;
  std::string *v50;
  void *v51;
  char v52;
  std::string v53;
  std::string v54;
  void *__p;
  __int128 v56;
  uint64_t v57;
  void *v58[2];
  uint64_t v59;
  std::string v60;
  _QWORD v61[2];
  std::string v62;
  std::string v63;
  uint64_t v64;

  v64 = *MEMORY[0x24BDAC8D0];
  CoreML::Result::Result((CoreML::Result *)&v57);
  __p = 0;
  v56 = 0uLL;
  v6 = *((_DWORD *)a1 + 9);
  if (v6 == 11)
  {
    v9 = *(__int128 **)(*((_QWORD *)a1 + 3) + 16);
    if (*((char *)v9 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v54, *(const std::string::value_type **)v9, *((_QWORD *)v9 + 1));
    }
    else
    {
      v10 = *v9;
      v54.__r_.__value_.__r.__words[2] = *((_QWORD *)v9 + 2);
      *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v10;
    }
    v16 = (char *)a2 + 24;
    v17 = (CoreML::Specification::MeanSquaredErrorLossLayer *)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>((uint64_t)a2 + 24, (const void **)&v54.__r_.__value_.__l.__data_);
    v18 = (const CoreML::NeuralNetworkValidatorGraph *)((char *)a2 + 32);
    if (v18 == v17)
    {
      std::operator+<char>();
      v27 = std::string::append(&v63, "', input is not generated within the graph.");
      v28 = (void *)v27->__r_.__value_.__r.__words[0];
      v62.__r_.__value_.__r.__words[0] = v27->__r_.__value_.__l.__size_;
      *(std::string::size_type *)((char *)v62.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v27->__r_.__value_.__r.__words[1] + 7);
      v29 = HIBYTE(v27->__r_.__value_.__r.__words[2]);
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v56) < 0)
        operator delete(__p);
      __p = v28;
      *(_QWORD *)&v56 = v62.__r_.__value_.__r.__words[0];
      *(_QWORD *)((char *)&v56 + 7) = *(std::string::size_type *)((char *)v62.__r_.__value_.__r.__words + 7);
      HIBYTE(v56) = v29;
      if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v63.__r_.__value_.__l.__data_);
      CoreML::Result::Result((_DWORD *)a3, 15);
      v30 = 1;
      goto LABEL_78;
    }
    if (*((_DWORD *)a1 + 9) == 11)
      v19 = (uint64_t *)*((_QWORD *)a1 + 3);
    else
      v19 = CoreML::Specification::MeanSquaredErrorLossLayer::default_instance(v17);
    v34 = v19[3];
    if (*(char *)(v34 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v63, *(const std::string::value_type **)v34, *(_QWORD *)(v34 + 8));
    }
    else
    {
      v35 = *(_OWORD *)v34;
      v63.__r_.__value_.__r.__words[2] = *(_QWORD *)(v34 + 16);
      *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v35;
    }
    if (v18 == (CoreML::Specification::MeanSquaredErrorLossLayer *)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>((uint64_t)v16, (const void **)&v63.__r_.__value_.__l.__data_))
    {
      v30 = 2;
      goto LABEL_76;
    }
    std::operator+<char>();
    v36 = std::string::append(&v62, "', target is generated within the graph.");
    v37 = (void *)v36->__r_.__value_.__r.__words[0];
    v60.__r_.__value_.__r.__words[0] = v36->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v60.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v36->__r_.__value_.__r.__words[1] + 7);
    v38 = HIBYTE(v36->__r_.__value_.__r.__words[2]);
    v36->__r_.__value_.__l.__size_ = 0;
    v36->__r_.__value_.__r.__words[2] = 0;
    v36->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v56) < 0)
      operator delete(__p);
    __p = v37;
    *(_QWORD *)&v56 = v60.__r_.__value_.__r.__words[0];
    *(_QWORD *)((char *)&v56 + 7) = *(std::string::size_type *)((char *)v60.__r_.__value_.__r.__words + 7);
    HIBYTE(v56) = v38;
    if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v62.__r_.__value_.__l.__data_);
    CoreML::Result::Result((_DWORD *)a3, 15);
LABEL_75:
    v30 = 1;
LABEL_76:
    if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v63.__r_.__value_.__l.__data_);
LABEL_78:
    if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v54.__r_.__value_.__l.__data_);
    if (v30 == 2)
    {
      *(_QWORD *)a3 = v57;
      *(_OWORD *)(a3 + 8) = *(_OWORD *)v58;
      *(_QWORD *)(a3 + 24) = v59;
      v58[0] = 0;
      v58[1] = 0;
      v59 = 0;
    }
    goto LABEL_82;
  }
  if (v6 == 10)
  {
    v7 = *(__int128 **)(*((_QWORD *)a1 + 3) + 16);
    if (*((char *)v7 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v54, *(const std::string::value_type **)v7, *((_QWORD *)v7 + 1));
    }
    else
    {
      v8 = *v7;
      v54.__r_.__value_.__r.__words[2] = *((_QWORD *)v7 + 2);
      *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v8;
    }
    v14 = (__int128 *)*((_QWORD *)a1 + 2);
    if (*((char *)v14 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v63, *(const std::string::value_type **)v14, *((_QWORD *)v14 + 1));
    }
    else
    {
      v15 = *v14;
      v63.__r_.__value_.__r.__words[2] = *((_QWORD *)v14 + 2);
      *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v15;
    }
    if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v53, v63.__r_.__value_.__l.__data_, v63.__r_.__value_.__l.__size_);
    else
      v53 = v63;
    NodeFromName = CoreML::NeuralNetworkValidatorGraph::getNodeFromName((uint64_t)a2, (const void **)&v53.__r_.__value_.__l.__data_);
    v21 = (uint64_t *)NodeFromName;
    if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v53.__r_.__value_.__l.__data_);
      if (v21)
      {
LABEL_25:
        v22 = *v21;
        v23 = v21[1];
        if (*v21 == v23)
        {
LABEL_28:
          std::operator+<char>();
          v24 = std::string::append(&v62, "', input is not generated from a softmax output.");
          v25 = (void *)v24->__r_.__value_.__r.__words[0];
          v60.__r_.__value_.__r.__words[0] = v24->__r_.__value_.__l.__size_;
          *(std::string::size_type *)((char *)v60.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v24->__r_.__value_.__r.__words[1] + 7);
          v26 = HIBYTE(v24->__r_.__value_.__r.__words[2]);
          v24->__r_.__value_.__l.__size_ = 0;
          v24->__r_.__value_.__r.__words[2] = 0;
          v24->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v56) < 0)
            operator delete(__p);
          __p = v25;
          *(_QWORD *)&v56 = v60.__r_.__value_.__r.__words[0];
          *(_QWORD *)((char *)&v56 + 7) = *(std::string::size_type *)((char *)v60.__r_.__value_.__r.__words + 7);
          HIBYTE(v56) = v26;
          if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v62.__r_.__value_.__l.__data_);
LABEL_74:
          CoreML::Result::Result((_DWORD *)a3, 15);
          goto LABEL_75;
        }
        while (*(_DWORD *)(*(_QWORD *)v22 + 48) != 175)
        {
          v22 += 8;
          if (v22 == v23)
            goto LABEL_28;
        }
        v39 = *(unsigned __int8 **)(*(_QWORD *)v22 + 104);
        v40 = v39[23];
        if ((v40 & 0x80u) == 0)
          v41 = v39[23];
        else
          v41 = *((_QWORD *)v39 + 1);
        size = HIBYTE(v54.__r_.__value_.__r.__words[2]);
        if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          size = v54.__r_.__value_.__l.__size_;
        if (v41 == size)
        {
          if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v43 = &v54;
          else
            v43 = (std::string *)v54.__r_.__value_.__r.__words[0];
          if ((v40 & 0x80) == 0)
          {
            if (v39[23])
            {
              while (*v39 == v43->__r_.__value_.__s.__data_[0])
              {
                ++v39;
                v43 = (std::string *)((char *)v43 + 1);
                if (!--v40)
                  goto LABEL_87;
              }
              goto LABEL_70;
            }
LABEL_87:
            if (*((_DWORD *)a1 + 9) == 10)
              v47 = (uint64_t *)*((_QWORD *)a1 + 3);
            else
              v47 = CoreML::Specification::CategoricalCrossEntropyLossLayer::default_instance((CoreML::Specification::CategoricalCrossEntropyLossLayer *)NodeFromName);
            v48 = v47[3];
            if (*(char *)(v48 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(&v62, *(const std::string::value_type **)v48, *(_QWORD *)(v48 + 8));
            }
            else
            {
              v49 = *(_OWORD *)v48;
              v62.__r_.__value_.__r.__words[2] = *(_QWORD *)(v48 + 16);
              *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v49;
            }
            if ((const CoreML::NeuralNetworkValidatorGraph *)((char *)a2 + 32) == (const CoreML::NeuralNetworkValidatorGraph *)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>((uint64_t)a2 + 24, (const void **)&v62.__r_.__value_.__l.__data_))
            {
              v30 = 2;
            }
            else
            {
              std::operator+<char>();
              v50 = std::string::append(&v60, "', target is generated within the graph.");
              v51 = (void *)v50->__r_.__value_.__r.__words[0];
              v61[0] = v50->__r_.__value_.__l.__size_;
              *(_QWORD *)((char *)v61 + 7) = *(std::string::size_type *)((char *)&v50->__r_.__value_.__r.__words[1] + 7);
              v52 = HIBYTE(v50->__r_.__value_.__r.__words[2]);
              v50->__r_.__value_.__l.__size_ = 0;
              v50->__r_.__value_.__r.__words[2] = 0;
              v50->__r_.__value_.__r.__words[0] = 0;
              if (SHIBYTE(v56) < 0)
                operator delete(__p);
              __p = v51;
              *(_QWORD *)&v56 = v61[0];
              *(_QWORD *)((char *)&v56 + 7) = *(_QWORD *)((char *)v61 + 7);
              HIBYTE(v56) = v52;
              if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v60.__r_.__value_.__l.__data_);
              CoreML::Result::Result((_DWORD *)a3, 15);
              v30 = 1;
            }
            if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v62.__r_.__value_.__l.__data_);
            goto LABEL_76;
          }
          NodeFromName = memcmp(*(const void **)v39, v43, *((_QWORD *)v39 + 1));
          if (!(_DWORD)NodeFromName)
            goto LABEL_87;
        }
LABEL_70:
        std::operator+<char>();
        v44 = std::string::append(&v62, "', input is not generated from a softmax output.");
        v45 = (void *)v44->__r_.__value_.__r.__words[0];
        v60.__r_.__value_.__r.__words[0] = v44->__r_.__value_.__l.__size_;
        *(std::string::size_type *)((char *)v60.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v44->__r_.__value_.__r.__words[1] + 7);
        v46 = HIBYTE(v44->__r_.__value_.__r.__words[2]);
        v44->__r_.__value_.__l.__size_ = 0;
        v44->__r_.__value_.__r.__words[2] = 0;
        v44->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v56) < 0)
          operator delete(__p);
        __p = v45;
        *(_QWORD *)&v56 = v60.__r_.__value_.__r.__words[0];
        *(_QWORD *)((char *)&v56 + 7) = *(std::string::size_type *)((char *)v60.__r_.__value_.__r.__words + 7);
        HIBYTE(v56) = v46;
        if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v62.__r_.__value_.__l.__data_);
        goto LABEL_74;
      }
    }
    else if (NodeFromName)
    {
      goto LABEL_25;
    }
    std::operator+<char>();
    v31 = std::string::append(&v62, "'.");
    v32 = (void *)v31->__r_.__value_.__r.__words[0];
    v60.__r_.__value_.__r.__words[0] = v31->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v60.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v31->__r_.__value_.__r.__words[1] + 7);
    v33 = HIBYTE(v31->__r_.__value_.__r.__words[2]);
    v31->__r_.__value_.__l.__size_ = 0;
    v31->__r_.__value_.__r.__words[2] = 0;
    v31->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v56) < 0)
      operator delete(__p);
    __p = v32;
    *(_QWORD *)&v56 = v60.__r_.__value_.__r.__words[0];
    *(_QWORD *)((char *)&v56 + 7) = *(std::string::size_type *)((char *)v60.__r_.__value_.__r.__words + 7);
    HIBYTE(v56) = v33;
    if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v62.__r_.__value_.__l.__data_);
    goto LABEL_74;
  }
  std::operator+<char>();
  v11 = std::string::append(&v54, "', only cross entropy loss and MSE are supported.");
  v12 = (void *)v11->__r_.__value_.__r.__words[0];
  v63.__r_.__value_.__r.__words[0] = v11->__r_.__value_.__l.__size_;
  *(std::string::size_type *)((char *)v63.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v11->__r_.__value_.__r.__words[1] + 7);
  v13 = HIBYTE(v11->__r_.__value_.__r.__words[2]);
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v56) < 0)
    operator delete(__p);
  __p = v12;
  *(_QWORD *)&v56 = v63.__r_.__value_.__r.__words[0];
  *(_QWORD *)((char *)&v56 + 7) = *(std::string::size_type *)((char *)v63.__r_.__value_.__r.__words + 7);
  HIBYTE(v56) = v13;
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v54.__r_.__value_.__l.__data_);
  CoreML::Result::Result((_DWORD *)a3, 15);
LABEL_82:
  if (SHIBYTE(v56) < 0)
    operator delete(__p);
  if (SHIBYTE(v59) < 0)
    operator delete(v58[0]);
}

void sub_218404E1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  uint64_t v41;

  if (*(char *)(v41 - 89) < 0)
    operator delete(*(void **)(v41 - 112));
  if (*(char *)(v41 - 57) < 0)
    operator delete(*(void **)(v41 - 80));
  if (a21 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  if (a35 < 0)
    operator delete(a30);
  _Unwind_Resume(exception_object);
}

void validateOptimizer(const CoreML::Specification::Optimizer *a1@<X0>, uint64_t a2@<X8>)
{
  int v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  const char *v15;
  void *__p[2];
  char v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  void *v21[2];
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;

  CoreML::Result::Result((CoreML::Result *)&v23);
  v21[0] = 0;
  v21[1] = 0;
  v22 = 0;
  v4 = *((_DWORD *)a1 + 7);
  if (v4 != 10)
  {
    if (v4 != 11)
    {
      MEMORY[0x219A19390](v21, "Optimizer is not recognized.");
      CoreML::Result::Result((_DWORD *)a2, 15);
      goto LABEL_75;
    }
    v5 = (uint64_t *)*((_QWORD *)a1 + 2);
    if (v5 == &CoreML::Specification::_AdamOptimizer_default_instance_ || !v5[2])
    {
      v15 = "ADAM optimizer should include learningRate parameter.";
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "learningRate");
      if (v5[2])
        v6 = (uint64_t *)v5[2];
      else
        v6 = &CoreML::Specification::_DoubleParameter_default_instance_;
      CoreML::validateDoubleParameter((uint64_t)__p, (uint64_t)v6, (CoreML::Result *)&v18);
      v23 = v18;
      if (SHIBYTE(v25) < 0)
        operator delete((void *)v24);
      v24 = v19;
      v25 = v20;
      HIBYTE(v20) = 0;
      LOBYTE(v19) = 0;
      if (v17 < 0)
        operator delete(__p[0]);
      if (!CoreML::Result::good((CoreML::Result *)&v23))
        goto LABEL_73;
      if (v5[3])
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "miniBatchSize");
        if (v5[3])
          v7 = (uint64_t *)v5[3];
        else
          v7 = &CoreML::Specification::_Int64Parameter_default_instance_;
        CoreML::validateInt64Parameter((uint64_t)__p, (uint64_t)v7, 1, (CoreML::Result *)&v18);
        v23 = v18;
        if (SHIBYTE(v25) < 0)
          operator delete((void *)v24);
        v24 = v19;
        v25 = v20;
        HIBYTE(v20) = 0;
        LOBYTE(v19) = 0;
        if (v17 < 0)
          operator delete(__p[0]);
        if (!CoreML::Result::good((CoreML::Result *)&v23))
          goto LABEL_73;
        if (v5[4])
        {
          std::string::basic_string[abi:ne180100]<0>(__p, "beta1");
          if (v5[4])
            v8 = (uint64_t *)v5[4];
          else
            v8 = &CoreML::Specification::_DoubleParameter_default_instance_;
          CoreML::validateDoubleParameter((uint64_t)__p, (uint64_t)v8, (CoreML::Result *)&v18);
          v23 = v18;
          if (SHIBYTE(v25) < 0)
            operator delete((void *)v24);
          v24 = v19;
          v25 = v20;
          HIBYTE(v20) = 0;
          LOBYTE(v19) = 0;
          if (v17 < 0)
            operator delete(__p[0]);
          if (!CoreML::Result::good((CoreML::Result *)&v23))
            goto LABEL_73;
          if (v5[5])
          {
            std::string::basic_string[abi:ne180100]<0>(__p, "beta2");
            if (v5[5])
              v9 = (uint64_t *)v5[5];
            else
              v9 = &CoreML::Specification::_DoubleParameter_default_instance_;
            CoreML::validateDoubleParameter((uint64_t)__p, (uint64_t)v9, (CoreML::Result *)&v18);
            v23 = v18;
            if (SHIBYTE(v25) < 0)
              operator delete((void *)v24);
            v24 = v19;
            v25 = v20;
            HIBYTE(v20) = 0;
            LOBYTE(v19) = 0;
            if (v17 < 0)
              operator delete(__p[0]);
            if (!CoreML::Result::good((CoreML::Result *)&v23))
              goto LABEL_73;
            if (v5[6])
            {
              std::string::basic_string[abi:ne180100]<0>(__p, "eps");
              if (v5[6])
                v10 = (uint64_t *)v5[6];
              else
                v10 = &CoreML::Specification::_DoubleParameter_default_instance_;
              CoreML::validateDoubleParameter((uint64_t)__p, (uint64_t)v10, (CoreML::Result *)&v18);
              v23 = v18;
              if (SHIBYTE(v25) < 0)
                operator delete((void *)v24);
              v24 = v19;
              v25 = v20;
              HIBYTE(v20) = 0;
              LOBYTE(v19) = 0;
              if (v17 < 0)
                operator delete(__p[0]);
              goto LABEL_67;
            }
            v15 = "ADAM optimizer should include eps (epslion) parameter.";
          }
          else
          {
            v15 = "ADAM optimizer should include beta2 parameter.";
          }
        }
        else
        {
          v15 = "ADAM optimizer should include beta1 parameter.";
        }
      }
      else
      {
        v15 = "ADAM optimizer should include miniBatchSize parameter.";
      }
    }
LABEL_72:
    MEMORY[0x219A19390](v21, v15);
    CoreML::Result::Result((_DWORD *)a2, 15);
    goto LABEL_75;
  }
  v11 = (uint64_t *)*((_QWORD *)a1 + 2);
  if (v11 == &CoreML::Specification::_SGDOptimizer_default_instance_ || !v11[2])
  {
    v15 = "SGD optimizer should include learningRate parameter.";
    goto LABEL_72;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "learningRate");
  if (v11[2])
    v12 = (uint64_t *)v11[2];
  else
    v12 = &CoreML::Specification::_DoubleParameter_default_instance_;
  CoreML::validateDoubleParameter((uint64_t)__p, (uint64_t)v12, (CoreML::Result *)&v18);
  v23 = v18;
  if (SHIBYTE(v25) < 0)
    operator delete((void *)v24);
  v24 = v19;
  v25 = v20;
  HIBYTE(v20) = 0;
  LOBYTE(v19) = 0;
  if (v17 < 0)
    operator delete(__p[0]);
  if (!CoreML::Result::good((CoreML::Result *)&v23))
    goto LABEL_73;
  if (!v11[3])
  {
    v15 = "SGD optimizer should include miniBatchSize parameter.";
    goto LABEL_72;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "miniBatchSize");
  if (v11[3])
    v13 = (uint64_t *)v11[3];
  else
    v13 = &CoreML::Specification::_Int64Parameter_default_instance_;
  CoreML::validateInt64Parameter((uint64_t)__p, (uint64_t)v13, 1, (CoreML::Result *)&v18);
  v23 = v18;
  if (SHIBYTE(v25) < 0)
    operator delete((void *)v24);
  v24 = v19;
  v25 = v20;
  HIBYTE(v20) = 0;
  LOBYTE(v19) = 0;
  if (v17 < 0)
    operator delete(__p[0]);
LABEL_67:
  if (!CoreML::Result::good((CoreML::Result *)&v23))
  {
LABEL_73:
    *(_QWORD *)a2 = v23;
    *(_OWORD *)(a2 + 8) = v24;
    v14 = v25;
    goto LABEL_74;
  }
  *(_QWORD *)a2 = v23;
  *(_OWORD *)(a2 + 8) = v24;
  v14 = v25;
LABEL_74:
  *(_QWORD *)(a2 + 24) = v14;
  v24 = 0uLL;
  v25 = 0;
LABEL_75:
  if (SHIBYTE(v22) < 0)
    operator delete(v21[0]);
  if (SHIBYTE(v25) < 0)
    operator delete((void *)v24);
}

void sub_218405444(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  uint64_t v24;

  if (a14 < 0)
    operator delete(__p);
  if (a24 < 0)
    operator delete(a19);
  if (*(char *)(v24 - 33) < 0)
    operator delete(*(void **)(v24 - 56));
  _Unwind_Resume(exception_object);
}

void validateOtherTopLevelUpdateParameters(const CoreML::Specification::NetworkUpdateParameters *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v5;
  uint64_t *v6;
  void *v7[2];
  char v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  void *__p[2];
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;

  CoreML::Result::Result((CoreML::Result *)&v14);
  __p[0] = 0;
  __p[1] = 0;
  v13 = 0;
  if (a1 == (const CoreML::Specification::NetworkUpdateParameters *)&CoreML::Specification::_NetworkUpdateParameters_default_instance_
    || *((_QWORD *)a1 + 6) == 0)
  {
    MEMORY[0x219A19390](__p, "Epochs should be included in neural network update parameters.");
    CoreML::Result::Result((_DWORD *)a2, 15);
    if (SHIBYTE(v13) < 0)
      operator delete(__p[0]);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v7, "epochs");
    if (*((_QWORD *)a1 + 6))
      v5 = (uint64_t *)*((_QWORD *)a1 + 6);
    else
      v5 = &CoreML::Specification::_Int64Parameter_default_instance_;
    CoreML::validateInt64Parameter((uint64_t)v7, (uint64_t)v5, 1, (CoreML::Result *)&v9);
    v14 = v9;
    if (SHIBYTE(v16) < 0)
      operator delete((void *)v15);
    v15 = v10;
    v16 = v11;
    HIBYTE(v11) = 0;
    LOBYTE(v10) = 0;
    if (v8 < 0)
      operator delete(v7[0]);
    if (CoreML::Result::good((CoreML::Result *)&v14) && *((_QWORD *)a1 + 8))
    {
      std::string::basic_string[abi:ne180100]<0>(v7, "seed");
      if (*((_QWORD *)a1 + 8))
        v6 = (uint64_t *)*((_QWORD *)a1 + 8);
      else
        v6 = &CoreML::Specification::_Int64Parameter_default_instance_;
      CoreML::validateInt64Parameter((uint64_t)v7, (uint64_t)v6, 0, (CoreML::Result *)&v9);
      v14 = v9;
      if (SHIBYTE(v16) < 0)
        operator delete((void *)v15);
      v15 = v10;
      v16 = v11;
      HIBYTE(v11) = 0;
      LOBYTE(v10) = 0;
      if (v8 < 0)
        operator delete(v7[0]);
      CoreML::Result::good((CoreML::Result *)&v14);
    }
    *(_QWORD *)a2 = v14;
    *(_OWORD *)(a2 + 8) = v15;
    *(_QWORD *)(a2 + 24) = v16;
    v15 = 0uLL;
    v16 = 0;
  }
  if (SHIBYTE(v16) < 0)
    operator delete((void *)v15);
}

void sub_218405684(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  uint64_t v24;

  if (a14 < 0)
    operator delete(__p);
  if (*(char *)(v24 - 33) < 0)
    operator delete(*(void **)(v24 - 56));
  _Unwind_Resume(exception_object);
}

uint64_t CoreML::NeuralNetworkValidatorGraph::getNodeFromName(uint64_t a1, const void **a2)
{
  if (a1 + 8 == std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(a1, a2))return 0;
  else
    return *(_QWORD *)std::map<std::string,turi::neural_net::shared_float_array>::at(a1, a2);
}

void CoreML::NeuralNetworkValidatorGraph::~NeuralNetworkValidatorGraph(char **this)
{
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)(this + 3), this[4]);
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)this, this[1]);
}

void **std::vector<CoreML::LayerNode>::__append(uint64_t *a1, unint64_t a2)
{
  void **result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  void *v16[5];

  v6 = a1[2];
  result = (void **)(a1 + 2);
  v5 = v6;
  v7 = (uint64_t)*(result - 1);
  if (0xF0F0F0F0F0F0F0F1 * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = v7 + 136 * a2;
      do
      {
        *(_OWORD *)(v7 + 16) = 0uLL;
        *(_OWORD *)(v7 + 32) = 0uLL;
        *(_OWORD *)v7 = 0uLL;
        *(_OWORD *)(v7 + 56) = 0uLL;
        *(_OWORD *)(v7 + 72) = 0uLL;
        *(_OWORD *)(v7 + 88) = 0uLL;
        *(_OWORD *)(v7 + 104) = 0uLL;
        *(_QWORD *)(v7 + 120) = 0;
        v7 += 136;
      }
      while (v7 != v13);
      v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xF0F0F0F0F0F0F0F1 * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0x1E1E1E1E1E1E1E1)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = 0xF0F0F0F0F0F0F0F1 * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0xF0F0F0F0F0F0F0)
      v11 = 0x1E1E1E1E1E1E1E1;
    else
      v11 = v9;
    v16[4] = result;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::toolkit_function_specification>>((uint64_t)result, v11);
    else
      v12 = 0;
    v14 = &v12[136 * v8];
    v16[0] = v12;
    v16[1] = v14;
    v16[3] = &v12[136 * v11];
    v15 = &v14[136 * a2];
    do
    {
      *((_OWORD *)v14 + 1) = 0uLL;
      *((_OWORD *)v14 + 2) = 0uLL;
      *(_OWORD *)v14 = 0uLL;
      *(_OWORD *)(v14 + 56) = 0uLL;
      *(_OWORD *)(v14 + 72) = 0uLL;
      *(_OWORD *)(v14 + 88) = 0uLL;
      *(_OWORD *)(v14 + 104) = 0uLL;
      *((_QWORD *)v14 + 15) = 0;
      v14 += 136;
    }
    while (v14 != v15);
    v16[2] = v15;
    std::vector<CoreML::LayerNode>::__swap_out_circular_buffer(a1, v16);
    return std::__split_buffer<CoreML::LayerNode>::~__split_buffer(v16);
  }
  return result;
}

void sub_2184058B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<CoreML::LayerNode>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<CoreML::LayerNode>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<CoreML::LayerNode>,std::reverse_iterator<CoreML::LayerNode*>,std::reverse_iterator<CoreML::LayerNode*>,std::reverse_iterator<CoreML::LayerNode*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<CoreML::LayerNode>,std::reverse_iterator<CoreML::LayerNode*>,std::reverse_iterator<CoreML::LayerNode*>,std::reverse_iterator<CoreML::LayerNode*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  v14 = 0;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v9 -= 136;
      std::allocator<CoreML::LayerNode>::construct[abi:ne180100]<CoreML::LayerNode,CoreML::LayerNode>(a1, v7 - 136, v9);
      v7 = *((_QWORD *)&v16 + 1) - 136;
      *((_QWORD *)&v16 + 1) -= 136;
    }
    while (v9 != a5);
    v11 = v16;
  }
  v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CoreML::LayerNode>,std::reverse_iterator<CoreML::LayerNode*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

__n128 std::allocator<CoreML::LayerNode>::construct[abi:ne180100]<CoreML::LayerNode,CoreML::LayerNode>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  __n128 result;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a3 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a3 + 40);
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a2 + 48) = *(_QWORD *)(a3 + 48);
  v3 = *(_OWORD *)(a3 + 56);
  *(_QWORD *)(a2 + 72) = *(_QWORD *)(a3 + 72);
  *(_OWORD *)(a2 + 56) = v3;
  *(_QWORD *)(a3 + 64) = 0;
  *(_QWORD *)(a3 + 72) = 0;
  *(_QWORD *)(a3 + 56) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  *(_OWORD *)(a2 + 80) = *(_OWORD *)(a3 + 80);
  *(_QWORD *)(a2 + 96) = *(_QWORD *)(a3 + 96);
  *(_QWORD *)(a3 + 80) = 0;
  *(_QWORD *)(a3 + 88) = 0;
  *(_QWORD *)(a3 + 96) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a2 + 120) = 0;
  result = *(__n128 *)(a3 + 104);
  *(__n128 *)(a2 + 104) = result;
  *(_QWORD *)(a2 + 120) = *(_QWORD *)(a3 + 120);
  *(_QWORD *)(a3 + 104) = 0;
  *(_QWORD *)(a3 + 112) = 0;
  *(_QWORD *)(a3 + 120) = 0;
  *(_WORD *)(a2 + 128) = *(_WORD *)(a3 + 128);
  return result;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CoreML::LayerNode>,std::reverse_iterator<CoreML::LayerNode*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<CoreML::LayerNode>,std::reverse_iterator<CoreML::LayerNode*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<CoreML::LayerNode>,std::reverse_iterator<CoreML::LayerNode*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1[2] + 8);
  v2 = *(_QWORD *)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      std::allocator<CoreML::LayerNode>::destroy[abi:ne180100](v3, v1);
      v1 += 136;
    }
    while (v1 != v2);
  }
}

void std::allocator<CoreML::LayerNode>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  void **v5;

  v5 = (void **)(a2 + 104);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v5);
  v5 = (void **)(a2 + 80);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v5);
  if (*(char *)(a2 + 79) < 0)
    operator delete(*(void **)(a2 + 56));
  v3 = *(void **)(a2 + 24);
  if (v3)
  {
    *(_QWORD *)(a2 + 32) = v3;
    operator delete(v3);
  }
  v4 = *(void **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)(a2 + 8) = v4;
    operator delete(v4);
  }
}

void **std::__split_buffer<CoreML::LayerNode>::~__split_buffer(void **a1)
{
  std::__split_buffer<CoreML::LayerNode>::clear[abi:ne180100](a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<CoreML::LayerNode>::clear[abi:ne180100](_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 136;
    std::allocator<CoreML::LayerNode>::destroy[abi:ne180100](v4, i - 136);
  }
}

uint64_t std::vector<CoreML::LayerNode>::__push_back_slow_path<CoreML::LayerNode>(uint64_t *a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  void *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t *v14;

  v3 = 0xF0F0F0F0F0F0F0F1 * ((a1[1] - *a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0x1E1E1E1E1E1E1E1)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  if (0xE1E1E1E1E1E1E1E2 * ((a1[2] - *a1) >> 3) > v4)
    v4 = 0xE1E1E1E1E1E1E1E2 * ((a1[2] - *a1) >> 3);
  if (0xF0F0F0F0F0F0F0F1 * ((a1[2] - *a1) >> 3) >= 0xF0F0F0F0F0F0F0)
    v6 = 0x1E1E1E1E1E1E1E1;
  else
    v6 = v4;
  v14 = a1 + 2;
  if (v6)
    v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::toolkit_function_specification>>((uint64_t)(a1 + 2), v6);
  else
    v7 = 0;
  v10 = v7;
  v11 = &v7[136 * v3];
  v13 = &v7[136 * v6];
  std::allocator<CoreML::LayerNode>::construct[abi:ne180100]<CoreML::LayerNode,CoreML::LayerNode>((uint64_t)(a1 + 2), (uint64_t)v11, a2);
  v12 = v11 + 136;
  std::vector<CoreML::LayerNode>::__swap_out_circular_buffer(a1, &v10);
  v8 = a1[1];
  std::__split_buffer<CoreML::LayerNode>::~__split_buffer(&v10);
  return v8;
}

void sub_218405CF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<CoreML::LayerNode>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

CoreML::LayerNode *CoreML::LayerNode::LayerNode(CoreML::LayerNode *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  std::string *v4;
  std::vector<std::string> *v5;
  std::vector<std::string> *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  std::string *v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  std::string *v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  int v21;
  unint64_t v22;
  uint64_t v23;
  unsigned int v25;
  BOOL v26;
  std::string *v27;
  std::string *v28;
  unint64_t v29;
  std::string *v30;
  __int128 *v31;
  unint64_t v32;
  void ***v33;

  *(_OWORD *)((char *)this + 56) = 0u;
  v4 = (std::string *)((char *)this + 56);
  *(_OWORD *)((char *)this + 104) = 0u;
  v5 = (std::vector<std::string> *)((char *)this + 104);
  v6 = (std::vector<std::string> *)((char *)this + 80);
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *((_QWORD *)this + 15) = 0;
  v30 = 0;
  v31 = 0;
  v32 = 0;
  v27 = 0;
  v28 = 0;
  v29 = 0;
  v7 = *((_QWORD *)a2 + 4);
  if (v7)
    v8 = (uint64_t *)(v7 + 8);
  else
    v8 = 0;
  v9 = *((int *)a2 + 6);
  if ((_DWORD)v9)
  {
    v10 = 0;
    v11 = 8 * v9;
    do
    {
      v12 = *v8;
      if ((unint64_t)v10 >= v32)
      {
        v10 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v30, (__int128 *)v12);
      }
      else
      {
        if (*(char *)(v12 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)v12, *(_QWORD *)(v12 + 8));
        }
        else
        {
          v13 = *(_OWORD *)v12;
          v10->__r_.__value_.__r.__words[2] = *(_QWORD *)(v12 + 16);
          *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v13;
        }
        ++v10;
      }
      v31 = (__int128 *)v10;
      ++v8;
      v11 -= 8;
    }
    while (v11);
  }
  v14 = *((_QWORD *)a2 + 7);
  if (v14)
    v15 = (uint64_t *)(v14 + 8);
  else
    v15 = 0;
  v16 = *((int *)a2 + 12);
  if ((_DWORD)v16)
  {
    v17 = v28;
    v18 = 8 * v16;
    do
    {
      v19 = *v15;
      if ((unint64_t)v17 >= v29)
      {
        v17 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v27, (__int128 *)v19);
      }
      else
      {
        if (*(char *)(v19 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(v17, *(const std::string::value_type **)v19, *(_QWORD *)(v19 + 8));
        }
        else
        {
          v20 = *(_OWORD *)v19;
          v17->__r_.__value_.__r.__words[2] = *(_QWORD *)(v19 + 16);
          *(_OWORD *)&v17->__r_.__value_.__l.__data_ = v20;
        }
        ++v17;
      }
      v28 = v17;
      ++v15;
      v18 -= 8;
    }
    while (v18);
  }
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 35);
  *((_DWORD *)this + 13) = 0;
  if (v6 != (std::vector<std::string> *)&v30)
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(v6, v30, v31, 0xAAAAAAAAAAAAAAABLL * (((char *)v31 - (char *)v30) >> 3));
  if (v5 != (std::vector<std::string> *)&v27)
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(v5, v27, (__int128 *)v28, 0xAAAAAAAAAAAAAAABLL * (((char *)v28 - (char *)v27) >> 3));
  std::string::operator=(v4, *((const std::string **)a2 + 14));
  *((_BYTE *)this + 128) = *((_BYTE *)a2 + 120);
  v21 = *((_DWORD *)a2 + 35);
  LOBYTE(v22) = 1;
  if (v21 > 300)
  {
    if (v21 > 1044)
    {
      if (v21 == 1045 || v21 == 1140)
        goto LABEL_32;
    }
    else if (v21 == 301 || v21 == 420)
    {
      goto LABEL_32;
    }
LABEL_44:
    LOBYTE(v22) = 0;
    goto LABEL_32;
  }
  v23 = (v21 - 100);
  if (v23 > 0x3C)
    goto LABEL_44;
  if (((1 << v23) & 0x1000010000100001) != 0)
    goto LABEL_32;
  if (v23 != 30)
    goto LABEL_44;
  v25 = *(_DWORD *)(*((_QWORD *)a2 + 16) + 28);
  v26 = v25 >= 0x29;
  v22 = (0x10040000400uLL >> v25) & 1;
  if (v26)
    LOBYTE(v22) = 0;
LABEL_32:
  *((_BYTE *)this + 129) = v22;
  v33 = (void ***)&v27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v33);
  v27 = (std::string *)&v30;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
  return this;
}

void sub_218405FC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void ***a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, void ***a16)
{
  uint64_t v16;
  void **v17;
  void *v19;
  void *v20;

  a16 = (void ***)&a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a10 = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a13);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a13);
  if (*(char *)(v16 + 79) < 0)
    operator delete(*v17);
  v19 = *(void **)(v16 + 24);
  if (v19)
  {
    *(_QWORD *)(v16 + 32) = v19;
    operator delete(v19);
  }
  v20 = *(void **)v16;
  if (*(_QWORD *)v16)
  {
    *(_QWORD *)(v16 + 8) = v20;
    operator delete(v20);
  }
  _Unwind_Resume(a1);
}

CoreML::LayerNode *CoreML::LayerNode::LayerNode(CoreML::LayerNode *this, const std::string **a2)
{
  uint64_t *v4;
  int v5;
  __int128 *v6;
  unint64_t v7;
  uint64_t v8;
  int v9;

  *(_OWORD *)((char *)this + 56) = 0u;
  v4 = (uint64_t *)((char *)this + 80);
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *((_QWORD *)this + 15) = 0;
  std::string::operator=((std::string *)((char *)this + 56), a2[2]);
  v5 = *((_DWORD *)a2 + 9);
  if (v5 == 10)
  {
    v6 = (__int128 *)a2[3]->__r_.__value_.__r.__words[2];
    v7 = *((_QWORD *)this + 11);
    if (v7 < *((_QWORD *)this + 12))
    {
LABEL_6:
      std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v4, v6);
      v8 = v7 + 24;
LABEL_8:
      *((_QWORD *)this + 11) = v8;
      goto LABEL_9;
    }
LABEL_7:
    v8 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v4, v6);
    goto LABEL_8;
  }
  if (v5 == 11)
  {
    v6 = (__int128 *)a2[3]->__r_.__value_.__r.__words[2];
    v7 = *((_QWORD *)this + 11);
    if (v7 < *((_QWORD *)this + 12))
      goto LABEL_6;
    goto LABEL_7;
  }
LABEL_9:
  v9 = *((_DWORD *)a2 + 9);
  *((_DWORD *)this + 12) = 0;
  *((_DWORD *)this + 13) = v9;
  *((_WORD *)this + 64) = 0;
  return this;
}

void sub_218406158(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void **v3;
  void **v4;
  va_list va;

  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  if (*(char *)(v2 + 79) < 0)
    operator delete(*v4);
  CoreML::LayerNode::LayerNode(v3, v2);
  _Unwind_Resume(a1);
}

void std::vector<CoreML::LayerNode>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 136;
        std::allocator<CoreML::LayerNode>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t _GLOBAL__sub_I_UpdatableNeuralNetworkValidator_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void *turi::ml_metadata::column_names@<X0>(turi::ml_metadata *this@<X0>, std::vector<std::string> *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  std::vector<std::string>::size_type v6;
  void *result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const std::string *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t v15;

  v5 = *(_QWORD *)this;
  v4 = *((_QWORD *)this + 1);
  v6 = (v4 - *(_QWORD *)this) >> 4;
  result = std::vector<std::string>::vector(a2, v6);
  if (v4 != v5)
  {
    v8 = 0;
    if (v6 <= 1)
      v9 = 1;
    else
      v9 = v6;
    do
    {
      v10 = *(_QWORD *)this + 16 * v8;
      v11 = *(const std::string **)v10;
      v12 = *(std::__shared_weak_count **)(v10 + 8);
      if (v12)
      {
        p_shared_owners = (unint64_t *)&v12->__shared_owners_;
        do
          v14 = __ldxr(p_shared_owners);
        while (__stxr(v14 + 1, p_shared_owners));
        do
          v15 = __ldaxr(p_shared_owners);
        while (__stlxr(v15 - 1, p_shared_owners));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
      result = std::string::operator=(&a2->__begin_[v8++], v11);
    }
    while (v8 != v9);
  }
  return result;
}

void sub_218406334(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void turi::ml_metadata::feature_name(turi::ml_metadata *this@<X0>, uint64_t a2@<X1>, uint64_t rem@<X2>, char a4@<W3>, std::string *a5@<X8>)
{
  __int128 **v10;
  std::__shared_weak_count *v11;
  __int128 *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  int v21;
  unint64_t v22;
  uint64_t *v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  unsigned __int8 *v29;
  _BOOL4 v30;
  const char *v31;
  __int128 v32;
  size_t v33;
  size_t v34;
  std::string *v35;
  const std::string::value_type *v36;
  char *v37;
  uint64_t *v38;
  std::__shared_weak_count *v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  size_t v51;
  std::string *v52;
  const std::string::value_type *v53;
  std::string *v54;
  std::string::size_type v55;
  std::string *v56;
  __int128 v57;
  std::string *v58;
  __int128 v59;
  void *v60;
  uint64_t v61;
  __int128 v62;
  std::string::size_type v63;
  int v64;
  const std::string::value_type *v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  std::string *v71;
  std::string::size_type size;
  std::string *v73;
  __int128 v74;
  const std::string::value_type *v75;
  std::string *v76;
  __int128 v77;
  std::string v78;
  std::string v79;
  std::string v80;
  std::string v81;
  uint64_t v82;
  void *v83;
  void *__p;
  char v85;
  uint64_t v86;
  uint64_t v87;

  v10 = (__int128 **)(*(_QWORD *)this + 16 * a2);
  v12 = *v10;
  v11 = (std::__shared_weak_count *)v10[1];
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v16 = (uint64_t *)(*(_QWORD *)this + 16 * a2);
  v17 = *v16;
  v18 = (std::__shared_weak_count *)v16[1];
  if (v18)
  {
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    v21 = *(_DWORD *)(v17 + 24);
    do
      v22 = __ldaxr(v19);
    while (__stlxr(v22 - 1, v19));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  else
  {
    v21 = *(_DWORD *)(v17 + 24);
  }
  switch(v21)
  {
    case 0:
    case 5:
      if (*((char *)v12 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(a5, *(const std::string::value_type **)v12, *((_QWORD *)v12 + 1));
      }
      else
      {
        v32 = *v12;
        a5->__r_.__value_.__r.__words[2] = *((_QWORD *)v12 + 2);
        *(_OWORD *)&a5->__r_.__value_.__l.__data_ = v32;
      }
      return;
    case 1:
    case 3:
    case 4:
    case 6:
      v23 = (uint64_t *)(*(_QWORD *)this + 16 * a2);
      v25 = *v23;
      v24 = (std::__shared_weak_count *)v23[1];
      if (v24)
      {
        v26 = (unint64_t *)&v24->__shared_owners_;
        do
          v27 = __ldxr(v26);
        while (__stxr(v27 + 1, v26));
        do
          v28 = __ldaxr(v26);
        while (__stlxr(v28 - 1, v26));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
      v29 = (unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v25 + 32) + 80) + 16 * rem);
      if ((a4 & 1) != 0)
      {
        v30 = v29[12] == 2;
        if (v29[12] == 2)
          v31 = "[\"";
        else
          v31 = "[";
      }
      else
      {
        v30 = 0;
        v31 = "[";
      }
      if (*((char *)v12 + 23) >= 0)
        v33 = *((unsigned __int8 *)v12 + 23);
      else
        v33 = *((_QWORD *)v12 + 1);
      v34 = strlen(v31);
      v35 = &v79;
      std::string::basic_string[abi:ne180100]((uint64_t)&v79, v33 + v34);
      if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v35 = (std::string *)v79.__r_.__value_.__r.__words[0];
      if (v33)
      {
        if (*((char *)v12 + 23) >= 0)
          v36 = (const std::string::value_type *)v12;
        else
          v36 = *(const std::string::value_type **)v12;
        memmove(v35, v36, v33);
      }
      v37 = (char *)v35 + v33;
      if (v34)
        memcpy(v37, v31, v34);
      v37[v34] = 0;
      switch(v29[12])
      {
        case 0u:
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v81);
          std::ostream::operator<<();
          std::stringbuf::str();
          goto LABEL_86;
        case 1u:
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v81);
          std::ostream::operator<<();
          std::stringbuf::str();
LABEL_86:
          v81.__r_.__value_.__r.__words[0] = *MEMORY[0x24BEDB7F0];
          v63 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
          *(std::string::size_type *)((char *)v81.__r_.__value_.__r.__words
                                    + *(_QWORD *)(v81.__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
          v81.__r_.__value_.__r.__words[2] = v63;
          v82 = MEMORY[0x24BEDB848] + 16;
          if (v85 < 0)
            operator delete(__p);
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          MEMORY[0x219A198F4](&v87);
          goto LABEL_108;
        case 2u:
          v61 = *(_QWORD *)v29;
          if (*(char *)(*(_QWORD *)v29 + 31) < 0)
          {
            std::string::__init_copy_ctor_external(&v78, *(const std::string::value_type **)(v61 + 8), *(_QWORD *)(v61 + 16));
          }
          else
          {
            v62 = *(_OWORD *)(v61 + 8);
            v78.__r_.__value_.__r.__words[2] = *(_QWORD *)(v61 + 24);
            *(_OWORD *)&v78.__r_.__value_.__l.__data_ = v62;
          }
          goto LABEL_108;
        case 3u:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v81, (_QWORD *)(*(_QWORD *)v29 + 8));
          goto LABEL_108;
        case 4u:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v81, (uint64_t *)(*(_QWORD *)v29 + 8));
          goto LABEL_108;
        case 5u:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v81, (_QWORD *)(*(_QWORD *)v29 + 8));
          goto LABEL_108;
        case 6u:
          turi::flexible_type_impl::get_string_visitor::operator()((turi::flexible_type_impl *)v29, &v78);
          goto LABEL_108;
        case 7u:
          memset(&v78, 0, sizeof(v78));
          goto LABEL_108;
        case 8u:
          turi::flexible_type_impl::get_string_visitor::operator()();
          goto LABEL_108;
        case 9u:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v81, (_QWORD *)(*(_QWORD *)v29 + 8));
LABEL_108:
          if ((v78.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v71 = &v78;
          else
            v71 = (std::string *)v78.__r_.__value_.__r.__words[0];
          if ((v78.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(v78.__r_.__value_.__r.__words[2]);
          else
            size = v78.__r_.__value_.__l.__size_;
          v73 = std::string::append(&v79, (const std::string::value_type *)v71, size);
          v74 = *(_OWORD *)&v73->__r_.__value_.__l.__data_;
          v80.__r_.__value_.__r.__words[2] = v73->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v80.__r_.__value_.__l.__data_ = v74;
          v73->__r_.__value_.__l.__size_ = 0;
          v73->__r_.__value_.__r.__words[2] = 0;
          v73->__r_.__value_.__r.__words[0] = 0;
          if (v30)
            v75 = "\"]";
          else
            v75 = "]";
          v76 = std::string::append(&v80, v75);
          v77 = *(_OWORD *)&v76->__r_.__value_.__l.__data_;
          a5->__r_.__value_.__r.__words[2] = v76->__r_.__value_.__r.__words[2];
          *(_OWORD *)&a5->__r_.__value_.__l.__data_ = v77;
          v76->__r_.__value_.__l.__size_ = 0;
          v76->__r_.__value_.__r.__words[2] = 0;
          v76->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v80.__r_.__value_.__l.__data_);
          if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v78.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v79.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            return;
          v60 = (void *)v79.__r_.__value_.__r.__words[0];
          break;
        default:
          turi::flexible_type_fail(0);
          __break(1u);
          return;
      }
      goto LABEL_123;
    case 2:
      if (*((char *)v12 + 23) >= 0)
        v51 = *((unsigned __int8 *)v12 + 23);
      else
        v51 = *((_QWORD *)v12 + 1);
      v52 = &v80;
      std::string::basic_string[abi:ne180100]((uint64_t)&v80, v51 + 1);
      if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v52 = (std::string *)v80.__r_.__value_.__r.__words[0];
      if (v51)
      {
        if (*((char *)v12 + 23) >= 0)
          v53 = (const std::string::value_type *)v12;
        else
          v53 = *(const std::string::value_type **)v12;
        memmove(v52, v53, v51);
      }
      *(_WORD *)((char *)&v52->__r_.__value_.__l.__data_ + v51) = 91;
      std::to_string(&v79, rem);
      if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v54 = &v79;
      else
        v54 = (std::string *)v79.__r_.__value_.__r.__words[0];
      if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v55 = HIBYTE(v79.__r_.__value_.__r.__words[2]);
      else
        v55 = v79.__r_.__value_.__l.__size_;
      v56 = std::string::append(&v80, (const std::string::value_type *)v54, v55);
      v57 = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
      v81.__r_.__value_.__r.__words[2] = v56->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v81.__r_.__value_.__l.__data_ = v57;
      v56->__r_.__value_.__l.__size_ = 0;
      v56->__r_.__value_.__r.__words[2] = 0;
      v56->__r_.__value_.__r.__words[0] = 0;
      v58 = std::string::append(&v81, "]");
      v59 = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
      a5->__r_.__value_.__r.__words[2] = v58->__r_.__value_.__r.__words[2];
      *(_OWORD *)&a5->__r_.__value_.__l.__data_ = v59;
      v58->__r_.__value_.__l.__size_ = 0;
      v58->__r_.__value_.__r.__words[2] = 0;
      v58->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v81.__r_.__value_.__l.__data_);
      if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v79.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v80.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return;
      v60 = (void *)v80.__r_.__value_.__r.__words[0];
LABEL_123:
      operator delete(v60);
      return;
    case 7:
      v38 = (uint64_t *)(*(_QWORD *)this + 16 * a2);
      v40 = *v38;
      v39 = (std::__shared_weak_count *)v38[1];
      if (v39)
      {
        v41 = (unint64_t *)&v39->__shared_owners_;
        do
          v42 = __ldxr(v41);
        while (__stxr(v42 + 1, v41));
        do
          v43 = __ldaxr(v41);
        while (__stlxr(v43 - 1, v41));
        if (!v43)
        {
          ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
          std::__shared_weak_count::__release_weak(v39);
        }
      }
      v44 = (uint64_t *)(*(_QWORD *)this + 16 * a2);
      v45 = *v44;
      v46 = (std::__shared_weak_count *)v44[1];
      if (v46)
      {
        v47 = (unint64_t *)&v46->__shared_owners_;
        do
          v48 = __ldxr(v47);
        while (__stxr(v48 + 1, v47));
        v49 = *(_QWORD *)(v45 + 64);
        do
          v50 = __ldaxr(v47);
        while (__stlxr(v50 - 1, v47));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
          std::__shared_weak_count::__release_weak(v46);
        }
      }
      else
      {
        v49 = *(_QWORD *)(v45 + 64);
      }
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v81);
      v64 = *((char *)v12 + 23);
      if (v64 >= 0)
        v65 = (const std::string::value_type *)v12;
      else
        v65 = *(const std::string::value_type **)v12;
      if (v64 >= 0)
        v66 = *((unsigned __int8 *)v12 + 23);
      else
        v66 = *((_QWORD *)v12 + 1);
      v67 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v81, (uint64_t)v65, v66);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)"[", 1);
      v68 = *(_QWORD *)(v40 + 80);
      if (*(_QWORD *)(v40 + 88) - v68 >= 1)
      {
        v69 = 0;
        do
        {
          v49 /= *(_QWORD *)(v68 + 8 * v69);
          rem = lldiv(rem, v49).rem;
          std::ostream::operator<<();
          ++v69;
          v68 = *(_QWORD *)(v40 + 80);
          v70 = *(_QWORD *)(v40 + 88) - v68;
          if (v69 != v70 >> 3)
          {
            v80.__r_.__value_.__s.__data_[0] = 44;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v81, (uint64_t)&v80, 1);
            v68 = *(_QWORD *)(v40 + 80);
            v70 = *(_QWORD *)(v40 + 88) - v68;
          }
        }
        while (v69 < v70 >> 3);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v81, (uint64_t)"]", 1);
      std::stringbuf::str();
      v81.__r_.__value_.__r.__words[0] = *MEMORY[0x24BEDB800];
      *(std::string::size_type *)((char *)v81.__r_.__value_.__r.__words
                                + *(_QWORD *)(v81.__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800]
                                                                                                  + 24);
      v81.__r_.__value_.__l.__size_ = MEMORY[0x24BEDB848] + 16;
      if (SHIBYTE(__p) < 0)
        operator delete(v83);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x219A198F4](&v86);
      return;
    default:
      turi::ml_metadata::feature_name(unsigned long,unsigned long,BOOL)const::$_0::operator()();
  }
}

void sub_218406B1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a28);
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void turi::ml_metadata::feature_name(unsigned long,unsigned long,BOOL)const::$_0::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/ml/ml_data/metadata.cpp", 89);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/ml/ml_data/metadata.cpp", "operator()", 99, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::ml_metadata::feature_name(unsigned long,unsigned long,BOOL)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_218406CD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::ml_metadata::feature_names(turi::ml_metadata *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  __int128 *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t i;
  uint64_t *v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  __int128 v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  std::string *v37;
  std::string *v38;
  __int128 v39;
  uint64_t v40;
  int v41;
  std::string __p;
  std::__split_buffer<std::string> __v;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  std::vector<std::string>::reserve((std::vector<std::string> *)a3, *((_QWORD *)this + 8));
  v5 = *(_QWORD *)this;
  if (*((_QWORD *)this + 1) != *(_QWORD *)this)
  {
    v6 = 0;
    do
    {
      v7 = (uint64_t *)(v5 + 16 * v6);
      v8 = *v7;
      v9 = (std::__shared_weak_count *)v7[1];
      if (v9)
      {
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldxr(p_shared_owners);
        while (__stxr(v11 + 1, p_shared_owners));
        v12 = *(_DWORD *)(v8 + 24);
        do
          v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      else
      {
        v12 = *(_DWORD *)(v8 + 24);
      }
      if (v12 != 1 || a2)
      {
        for (i = 0; ; ++i)
        {
          v23 = (uint64_t *)(*(_QWORD *)this + 16 * v6);
          v24 = *v23;
          v25 = (std::__shared_weak_count *)v23[1];
          if (v25)
          {
            v26 = (unint64_t *)&v25->__shared_owners_;
            do
              v27 = __ldxr(v26);
            while (__stxr(v27 + 1, v26));
            v28 = *(_QWORD *)(v24 + 64);
            do
              v29 = __ldaxr(v26);
            while (__stlxr(v29 - 1, v26));
            if (!v29)
            {
              ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
              std::__shared_weak_count::__release_weak(v25);
            }
          }
          else
          {
            v28 = *(_QWORD *)(v24 + 64);
          }
          if (i >= v28)
            break;
          turi::ml_metadata::feature_name(this, v6, i, 0, &__p);
          v31 = *(_QWORD *)(a3 + 8);
          v30 = *(_QWORD *)(a3 + 16);
          if (v31 >= v30)
          {
            v33 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v31 - *(_QWORD *)a3) >> 3);
            v34 = v33 + 1;
            if (v33 + 1 > 0xAAAAAAAAAAAAAAALL)
              std::vector<float>::__throw_length_error[abi:ne180100]();
            v35 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v30 - *(_QWORD *)a3) >> 3);
            if (2 * v35 > v34)
              v34 = 2 * v35;
            if (v35 >= 0x555555555555555)
              v36 = 0xAAAAAAAAAAAAAAALL;
            else
              v36 = v34;
            __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a3 + 16);
            if (v36)
              v37 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>(a3 + 16, v36);
            else
              v37 = 0;
            v38 = v37 + v33;
            __v.__first_ = v37;
            __v.__begin_ = v38;
            __v.__end_cap_.__value_ = &v37[v36];
            v39 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
            v38->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
            *(_OWORD *)&v38->__r_.__value_.__l.__data_ = v39;
            memset(&__p, 0, sizeof(__p));
            __v.__end_ = v38 + 1;
            std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a3, &__v);
            v40 = *(_QWORD *)(a3 + 8);
            std::__split_buffer<std::string>::~__split_buffer(&__v);
            v41 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
            *(_QWORD *)(a3 + 8) = v40;
            if (v41 < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
          }
          else
          {
            v32 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
            *(_QWORD *)(v31 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
            *(_OWORD *)v31 = v32;
            *(_QWORD *)(a3 + 8) = v31 + 24;
          }
        }
      }
      else
      {
        v14 = *(_QWORD *)this + 16 * v6;
        v15 = *(__int128 **)v14;
        v16 = *(std::__shared_weak_count **)(v14 + 8);
        if (v16)
        {
          v17 = (unint64_t *)&v16->__shared_owners_;
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
          do
            v19 = __ldaxr(v17);
          while (__stlxr(v19 - 1, v17));
          if (!v19)
          {
            ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
            std::__shared_weak_count::__release_weak(v16);
          }
        }
        v20 = *(_QWORD *)(a3 + 8);
        if (v20 >= *(_QWORD *)(a3 + 16))
        {
          v21 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)a3, v15);
        }
        else
        {
          std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>(a3, v15);
          v21 = v20 + 24;
        }
        *(_QWORD *)(a3 + 8) = v21;
      }
      ++v6;
      v5 = *(_QWORD *)this;
    }
    while (v6 < (uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 4);
  }
}

void sub_218407050(_Unwind_Exception *a1, uint64_t a2, void *__p, uint64_t a4, int a5, __int16 a6, char a7, char a8, std::__split_buffer<std::string> *a9, uint64_t a10, void *__pa)
{
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__pa);
  _Unwind_Resume(a1);
}

void turi::ml_metadata::set_training_index_sizes_to_current_column_sizes(turi::ml_metadata *this)
{
  uint64_t v2;
  unint64_t v3;
  __int128 v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  __int128 v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;

  v2 = *((_QWORD *)this + 1);
  if (v2 == *(_QWORD *)this)
  {
    v10 = *((_QWORD *)this + 1);
  }
  else
  {
    v3 = 0;
    v2 = *(_QWORD *)this;
    do
    {
      v4 = *(_OWORD *)(v2 + 16 * v3);
      v5 = *(std::__shared_weak_count **)(v2 + 16 * v3 + 8);
      if (*((_QWORD *)&v4 + 1))
      {
        v6 = (unint64_t *)(*((_QWORD *)&v4 + 1) + 8);
        do
          v7 = __ldxr(v6);
        while (__stxr(v7 + 1, v6));
      }
      turi::ml_data_internal::column_metadata::set_training_index_size(v4);
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
      ++v3;
      v2 = *(_QWORD *)this;
      v10 = *((_QWORD *)this + 1);
    }
    while (v3 < (v10 - *(_QWORD *)this) >> 4);
  }
  v11 = *((_QWORD *)this + 3);
  if (v11)
  {
    turi::ml_data_internal::column_metadata::set_training_index_size(v11);
    v2 = *(_QWORD *)this;
    v10 = *((_QWORD *)this + 1);
  }
  if (v10 != v2)
  {
    v12 = 0;
    v13 = 0;
    do
    {
      v14 = *(_OWORD *)(v2 + 16 * v12);
      v15 = *(std::__shared_weak_count **)(v2 + 16 * v12 + 8);
      if (*((_QWORD *)&v14 + 1))
      {
        v16 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 1, v16));
      }
      v18 = v14;
      turi::ml_data_internal::column_metadata::set_training_index_offset(v14, v13);
      v19 = *(_QWORD *)(v18 + 64);
      if (v15)
      {
        v20 = (unint64_t *)&v15->__shared_owners_;
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      v13 += v19;
      ++v12;
      v2 = *(_QWORD *)this;
    }
    while (v12 < (uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 4);
  }
  turi::ml_metadata::setup_cached_values(this);
}

void sub_218407208(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void turi::ml_metadata::setup_cached_values(turi::ml_metadata *this)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  char *v27[3];
  char **v28;

  *((_QWORD *)this + 9) = 0;
  v2 = *(_QWORD *)this;
  if (*((_QWORD *)this + 1) == *(_QWORD *)this)
  {
    *((_QWORD *)this + 8) = 0;
  }
  else
  {
    v3 = 0;
    do
    {
      v4 = (uint64_t *)(v2 + 16 * v3);
      v5 = *v4;
      v6 = (std::__shared_weak_count *)v4[1];
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldxr(p_shared_owners);
        while (__stxr(v8 + 1, p_shared_owners));
        v9 = *(_DWORD *)(v5 + 24);
        do
          v10 = __ldaxr(p_shared_owners);
        while (__stlxr(v10 - 1, p_shared_owners));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      else
      {
        v9 = *(_DWORD *)(v5 + 24);
      }
      if (v9 == 5)
        ++*((_QWORD *)this + 9);
      ++v3;
      v2 = *(_QWORD *)this;
      v11 = *((_QWORD *)this + 1);
    }
    while (v3 < (v11 - *(_QWORD *)this) >> 4);
    *((_QWORD *)this + 8) = 0;
    if (v11 != v2)
    {
      v12 = 0;
      do
      {
        v13 = (uint64_t *)(v2 + 16 * v12);
        v14 = *v13;
        v15 = (std::__shared_weak_count *)v13[1];
        if (v15)
        {
          v16 = (unint64_t *)&v15->__shared_owners_;
          do
            v17 = __ldxr(v16);
          while (__stxr(v17 + 1, v16));
          *((_QWORD *)this + 8) += *(_QWORD *)(v14 + 64);
          do
            v18 = __ldaxr(v16);
          while (__stlxr(v18 - 1, v16));
          if (!v18)
          {
            ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
            std::__shared_weak_count::__release_weak(v15);
          }
        }
        else
        {
          *((_QWORD *)this + 8) += *(_QWORD *)(v14 + 64);
        }
        ++v12;
        v2 = *(_QWORD *)this;
      }
      while (v12 < (uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 4);
    }
  }
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)this + 80, *((char **)this + 11));
  *((_QWORD *)this + 10) = (char *)this + 88;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 11) = 0;
  v19 = *(_QWORD *)this;
  if (*((_QWORD *)this + 1) != *(_QWORD *)this)
  {
    v20 = 0;
    do
    {
      v21 = v19 + 16 * v20;
      v22 = *(char **)v21;
      v23 = *(std::__shared_weak_count **)(v21 + 8);
      if (v23)
      {
        v24 = (unint64_t *)&v23->__shared_owners_;
        do
          v25 = __ldxr(v24);
        while (__stxr(v25 + 1, v24));
        do
          v26 = __ldaxr(v24);
        while (__stlxr(v26 - 1, v24));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      v27[0] = v22;
      std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this + 10, (const void **)v22, (uint64_t)std::piecewise_construct, (__int128 **)v27)[7] = v20++;
      v19 = *(_QWORD *)this;
    }
    while (v20 < (uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 4);
  }
  turi::ml_data_internal::row_metadata::setup((unsigned __int8 *)this + 184, (uint64_t **)this, 0);
  if (*((_QWORD *)this + 3))
  {
    memset(v27, 0, sizeof(v27));
    std::vector<std::shared_ptr<turi::query_eval::node_info const>>::reserve(v27, ((uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 4) + 1);
    std::vector<std::shared_ptr<turi::fileio::file_ownership_handle>>::__assign_with_size[abi:ne180100]<std::shared_ptr<turi::fileio::file_ownership_handle>*,std::shared_ptr<turi::fileio::file_ownership_handle>*>((uint64_t)v27, *(uint64_t **)this, *((uint64_t **)this + 1), (uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 4);
    std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::push_back[abi:ne180100](v27, (__int128 *)((char *)this + 24));
    turi::ml_data_internal::row_metadata::setup((unsigned __int8 *)this + 104, (uint64_t **)v27, 1u);
    v28 = v27;
    std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v28);
  }
  else
  {
    *(_OWORD *)((char *)this + 104) = *(_OWORD *)((char *)this + 184);
    std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((char *)this + 120, *((char **)this + 25), *((_QWORD *)this + 26), (uint64_t)(*((_QWORD *)this + 26) - *((_QWORD *)this + 25)) >> 3);
    *((_OWORD *)this + 9) = *((_OWORD *)this + 14);
    std::vector<std::shared_ptr<turi::fileio::file_ownership_handle>>::__assign_with_size[abi:ne180100]<std::shared_ptr<turi::fileio::file_ownership_handle>*,std::shared_ptr<turi::fileio::file_ownership_handle>*>((uint64_t)this + 160, *((uint64_t **)this + 30), *((uint64_t **)this + 31), (uint64_t)(*((_QWORD *)this + 31) - *((_QWORD *)this + 30)) >> 4);
  }
}

void sub_2184074FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void turi::ml_metadata::save(turi::ml_metadata *this, turi::oarchive *a2)
{
  unint64_t v4;
  char *v5;
  unsigned int *v6;
  size_t v7;
  char **v8;
  size_t v9;
  BOOL v10;
  std::vector<char>::size_type v11;
  char **v12;
  char *v13[2];
  _OWORD *v14;
  _BYTE __p[13];
  char v16;
  uint64_t v17;
  _BYTE v18[13];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v17 = 3;
  if (*(_QWORD *)a2)
  {
    std::ostream::write();
  }
  else
  {
    v4 = *((_QWORD *)a2 + 5);
    if (*((_QWORD *)a2 + 4) + 8 > v4)
    {
      v7 = 2 * v4 + 16;
      *((_QWORD *)a2 + 5) = v7;
      v8 = (char **)*((_QWORD *)a2 + 2);
      if (v8)
      {
        v5 = *v8;
        v9 = v8[1] - *v8;
        v10 = v7 >= v9;
        v11 = v7 - v9;
        if (v11 != 0 && v10)
        {
          std::vector<char>::__append(*((std::vector<char> **)a2 + 2), v11);
          v5 = (char *)**((_QWORD **)a2 + 2);
        }
        else if (!v10)
        {
          v8[1] = &v5[v7];
        }
      }
      else
      {
        v5 = (char *)malloc_type_realloc(*((void **)a2 + 3), v7, 0xF6EA6B1uLL);
      }
      *((_QWORD *)a2 + 3) = v5;
    }
    else
    {
      v5 = (char *)*((_QWORD *)a2 + 3);
    }
    *(_QWORD *)&v5[*((_QWORD *)a2 + 4)] = 3;
    *((_QWORD *)a2 + 4) += 8;
  }
  v13[0] = 0;
  v13[1] = 0;
  v12 = v13;
  turi::flexible_type_converter<std::vector<std::string>>::set((__int128 **)this + 5, (uint64_t)__p);
  *(_QWORD *)&v18[5] = *(_QWORD *)&__p[5];
  *(_QWORD *)v18 = *(_QWORD *)__p;
  v18[12] = __p[12];
  LODWORD(v17) = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "original_column_names");
  v14 = __p;
  v6 = (unsigned int *)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v12, (const void **)__p, (uint64_t)std::piecewise_construct, &v14);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign(v6 + 14, (unsigned int *)&v17);
  if (v16 < 0)
    operator delete(*(void **)__p);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&v17);
  turi::variant_deep_save<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>((const void ***)&v12, (uint64_t)a2);
  turi::archive_detail::vector_serialize_impl<turi::oarchive,std::shared_ptr<turi::ml_data_internal::column_metadata>,false>::exec((uint64_t)a2, (uint64_t *)this);
  turi::archive_detail::serialize_impl<turi::oarchive,std::shared_ptr<turi::ml_data_internal::column_metadata>,false,void>::exec((uint64_t)a2, (turi::ml_data_internal::column_metadata **)this + 3);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v12, v13[0]);
}

void sub_2184076E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  _Unwind_Resume(exception_object);
}

void turi::ml_metadata::load(turi::ml_metadata *this, turi::iarchive *a2)
{
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  __int128 v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  void *__p[2];
  char v19;
  std::vector<std::string> v20;
  char **v21;
  char *v22[2];
  uint64_t v23;
  std::vector<std::string> *v24;

  v23 = 0;
  v4 = *((_QWORD *)a2 + 2);
  if (v4)
  {
    v5 = *((_QWORD *)a2 + 3);
    v23 = *(_QWORD *)(v4 + v5);
    *((_QWORD *)a2 + 3) = v5 + 8;
  }
  else
  {
    std::istream::read();
  }
  v22[0] = 0;
  v22[1] = 0;
  v21 = v22;
  turi::variant_deep_load<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>((uint64_t)&v21, a2);
  std::string::basic_string[abi:ne180100]<0>(__p, "original_column_names");
  v6 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)&v21, (const void **)__p);
  turi::variant_converter<std::vector<std::string>,void>::get(v6, &v20);
  std::vector<std::string>::__vdeallocate((std::vector<std::string> *)((char *)this + 40));
  *(std::vector<std::string> *)((char *)this + 40) = v20;
  memset(&v20, 0, sizeof(v20));
  v24 = &v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
  if (v19 < 0)
    operator delete(__p[0]);
  turi::archive_detail::vector_deserialize_impl<turi::iarchive,std::shared_ptr<turi::ml_data_internal::column_metadata>,false>::exec(a2, (uint64_t *)this);
  turi::archive_detail::deserialize_impl<turi::iarchive,std::shared_ptr<turi::ml_data_internal::column_metadata>,false,void>::exec(a2, (turi::ml_data_internal::column_metadata **)this + 3);
  if (v23 == 2)
  {
    LOBYTE(v20.__begin_) = 0;
    if (*((_QWORD *)a2 + 2))
      ++*((_QWORD *)a2 + 3);
    else
      std::istream::read();
  }
  v7 = *(_QWORD *)this;
  if (*((_QWORD *)this + 1) != *(_QWORD *)this)
  {
    v8 = 0;
    v9 = 0;
    do
    {
      v10 = *(_OWORD *)(v7 + 16 * v8);
      *(_OWORD *)&v20.__begin_ = v10;
      v11 = (std::__shared_weak_count *)*((_QWORD *)&v10 + 1);
      if (*((_QWORD *)&v10 + 1))
      {
        v12 = (unint64_t *)(*((_QWORD *)&v10 + 1) + 8);
        do
          v13 = __ldxr(v12);
        while (__stxr(v13 + 1, v12));
      }
      v14 = v10;
      turi::ml_data_internal::column_metadata::set_training_index_offset(v10, v9);
      v15 = *(_QWORD *)(v14 + 64);
      if (v11)
      {
        p_shared_owners = (unint64_t *)&v11->__shared_owners_;
        do
          v17 = __ldaxr(p_shared_owners);
        while (__stlxr(v17 - 1, p_shared_owners));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
      v9 += v15;
      ++v8;
      v7 = *(_QWORD *)this;
    }
    while (v8 < (uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 4);
  }
  turi::ml_metadata::setup_cached_values(this);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v21, v22[0]);
}

void sub_218407920(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, char a19, char *a20)
{
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&a19, a20);
  _Unwind_Resume(a1);
}

void sub_218407B00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void turi::variant_converter<std::vector<std::string>,void>::get(int *a1@<X1>, std::vector<std::string> *a2@<X8>)
{
  uint64_t has_fallback_type;
  const char *v4;
  uint64_t v5;
  unint64_t *v7;
  unint64_t v8;
  __n128 v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  unsigned int v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  void *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  char v39;
  void **v40[3];
  _QWORD v41[3];

  v41[2] = *MEMORY[0x24BDAC8D0];
  memset(v41, 0, 13);
  v40[0] = (void **)&v39;
  has_fallback_type = boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::get_visitor<turi::flexible_type const>,false>,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>((boost::detail::variant *)*a1, *a1 ^ (*a1 >> 31), (uint64_t)v40, (uint64_t)(a1 + 2));
  if (!has_fallback_type)
  {
    v40[0] = (void **)&unk_24D918C20;
    boost::throw_exception<boost::bad_get>();
  }
  if ((_QWORD *)has_fallback_type != v41)
  {
    v5 = *(_QWORD *)has_fallback_type;
    *(_QWORD *)((char *)v41 + 5) = *(_QWORD *)(has_fallback_type + 5);
    v41[0] = v5;
    BYTE4(v41[1]) = *(_BYTE *)(has_fallback_type + 12);
    if (BYTE4(v41[1]) <= 9u && ((1 << SBYTE4(v41[1])) & 0x33C) != 0)
    {
      v7 = (unint64_t *)v41[0];
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 + 1, v7));
    }
  }
  v9.n128_f64[0] = turi::flexible_type_converter<std::vector<std::string>>::get((turi::flexible_type_internals *)v41, v4, a2);
  switch(BYTE4(v41[1]))
  {
    case 2:
      v10 = (unint64_t *)v41[0];
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        v13 = v41[0];
        if (v41[0])
        {
          if (*(char *)(v41[0] + 31) < 0)
            operator delete(*(void **)(v41[0] + 8));
          v14 = v13;
          v15 = 0x1012C404EF22A49;
          goto LABEL_50;
        }
      }
      break;
    case 3:
      v27 = (unint64_t *)v41[0];
      do
      {
        v28 = __ldaxr(v27);
        v29 = v28 - 1;
      }
      while (__stlxr(v29, v27));
      if (!v29)
      {
        v30 = v41[0];
        if (v41[0])
        {
          v31 = *(void **)(v41[0] + 8);
          if (v31)
          {
            *(_QWORD *)(v41[0] + 16) = v31;
            operator delete(v31);
          }
          v14 = v30;
          v15 = 0x1080C409938AC02;
          goto LABEL_50;
        }
      }
      break;
    case 4:
      v16 = (unint64_t *)v41[0];
      do
      {
        v17 = __ldaxr(v16);
        v18 = v17 - 1;
      }
      while (__stlxr(v18, v16));
      if (!v18)
      {
        v19 = v41[0];
        if (v41[0])
        {
          v40[0] = (void **)(v41[0] + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v40);
          goto LABEL_43;
        }
      }
      break;
    case 5:
      v32 = (unint64_t *)v41[0];
      do
      {
        v33 = __ldaxr(v32);
        v34 = v33 - 1;
      }
      while (__stlxr(v34, v32));
      if (!v34)
      {
        v19 = v41[0];
        if (v41[0])
        {
          v40[0] = (void **)(v41[0] + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v40);
LABEL_43:
          v14 = v19;
          v15 = 0x1020C405E66F15BLL;
          goto LABEL_50;
        }
      }
      break;
    case 8:
      v35 = (unint64_t *)v41[0];
      do
      {
        v36 = __ldaxr(v35);
        v37 = v36 - 1;
      }
      while (__stlxr(v37, v35));
      if (!v37)
      {
        v38 = v41[0];
        if (v41[0])
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v41[0] + 16));
          v14 = v38;
          v26 = -235920773;
          goto LABEL_49;
        }
      }
      break;
    case 9:
      v20 = (unint64_t *)v41[0];
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (!v22)
      {
        v23 = v41[0];
        if (v41[0])
        {
          v24 = *(void **)(v41[0] + 48);
          if (v24)
          {
            *(_QWORD *)(v41[0] + 56) = v24;
            operator delete(v24);
          }
          v25 = *(void **)(v23 + 24);
          if (v25)
          {
            *(_QWORD *)(v23 + 32) = v25;
            operator delete(v25);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v23 + 8);
          v14 = v23;
          v26 = 2071181815;
LABEL_49:
          v15 = v26 | 0x1030C4000000000;
LABEL_50:
          MEMORY[0x219A19A08](v14, v15, v9);
        }
      }
      break;
    default:
      return;
  }
}

void sub_218407E6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, _QWORD *a17)
{
  uint64_t v17;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  unsigned int v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  void *v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;

  switch(*(_BYTE *)(v17 - 28))
  {
    case 2:
      v19 = *(unint64_t **)(v17 - 40);
      do
      {
        v20 = __ldaxr(v19);
        v21 = v20 - 1;
      }
      while (__stlxr(v21, v19));
      if (v21)
        goto LABEL_39;
      v22 = *(_QWORD *)(v17 - 40);
      if (!v22)
        goto LABEL_39;
      if (*(char *)(v22 + 31) < 0)
        operator delete(*(void **)(v22 + 8));
      v23 = (_QWORD *)v22;
      v24 = 0x1012C404EF22A49;
      goto LABEL_38;
    case 3:
      v34 = *(unint64_t **)(v17 - 40);
      do
      {
        v35 = __ldaxr(v34);
        v36 = v35 - 1;
      }
      while (__stlxr(v36, v34));
      if (v36)
        goto LABEL_39;
      v37 = *(_QWORD **)(v17 - 40);
      if (!v37)
        goto LABEL_39;
      v38 = (void *)v37[1];
      if (v38)
      {
        v37[2] = v38;
        operator delete(v38);
      }
      v23 = v37;
      v24 = 0x1080C409938AC02;
      goto LABEL_38;
    case 4:
      v25 = *(unint64_t **)(v17 - 40);
      do
      {
        v26 = __ldaxr(v25);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, v25));
      if (v27)
        goto LABEL_39;
      v28 = *(_QWORD **)(v17 - 40);
      if (!v28)
        goto LABEL_39;
      a17 = v28 + 1;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
      goto LABEL_31;
    case 5:
      v39 = *(unint64_t **)(v17 - 40);
      do
      {
        v40 = __ldaxr(v39);
        v41 = v40 - 1;
      }
      while (__stlxr(v41, v39));
      if (v41)
        goto LABEL_39;
      v28 = *(_QWORD **)(v17 - 40);
      if (!v28)
        goto LABEL_39;
      a17 = v28 + 1;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
LABEL_31:
      v23 = v28;
      v24 = 0x1020C405E66F15BLL;
      goto LABEL_38;
    case 8:
      v42 = *(unint64_t **)(v17 - 40);
      do
      {
        v43 = __ldaxr(v42);
        v44 = v43 - 1;
      }
      while (__stlxr(v44, v42));
      if (v44)
        goto LABEL_39;
      v45 = *(_QWORD *)(v17 - 40);
      if (!v45)
        goto LABEL_39;
      boost::detail::shared_count::~shared_count((unsigned int **)(v45 + 16));
      v23 = (_QWORD *)v45;
      v33 = -235920773;
      goto LABEL_37;
    case 9:
      v29 = *(unint64_t **)(v17 - 40);
      do
      {
        v30 = __ldaxr(v29);
        v31 = v30 - 1;
      }
      while (__stlxr(v31, v29));
      if (v31)
        goto LABEL_39;
      v32 = *(_QWORD **)(v17 - 40);
      if (!v32)
        goto LABEL_39;
      v23 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v32);
      v33 = 2071181815;
LABEL_37:
      v24 = v33 | 0x1030C4000000000;
LABEL_38:
      MEMORY[0x219A19A08](v23, v24);
LABEL_39:
      _Unwind_Resume(exception_object);
      return;
    default:
      goto LABEL_39;
  }
}

void sub_218408018(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::exception a17)
{
  if (a2)
  {
    std::exception::~exception(&a17);
    __cxa_begin_catch(a1);
    turi::_throw_variant_error<turi::flexible_type>(a10);
  }
  _Unwind_Resume(a1);
}

void sub_218408040(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int *a10, std::string::value_type *__p, std::string::size_type a12, int a13, __int16 a14, char a15, unsigned __int8 a16, std::string *a17, __int128 a18, __int128 a19, std::string::size_type a20)
{
  const std::string::value_type *p_p;
  std::string::size_type v21;
  std::string *v22;
  __int128 v23;

  if (a2)
  {
    __cxa_begin_catch(a1);
    std::string::basic_string[abi:ne180100]<0>(&a17, "Expecting a flexible_type. Got a ");
    turi::get_variant_which_name((turi *)(*a10 ^ (*a10 >> 31)), &__p);
    if ((a16 & 0x80u) == 0)
      p_p = (const std::string::value_type *)&__p;
    else
      p_p = __p;
    if ((a16 & 0x80u) == 0)
      v21 = a16;
    else
      v21 = a12;
    v22 = std::string::append((std::string *)&a17, p_p, v21);
    v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    a20 = v22->__r_.__value_.__r.__words[2];
    a19 = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    if ((char)a16 < 0)
      operator delete(__p);
    if (SHIBYTE(a18) < 0)
      operator delete(a17);
    a17 = (std::string *)&a19;
    turi::variant_converter<std::string,void>::get(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&)::{lambda(void)#1}::operator()((const std::string **)&a17);
  }
  _Unwind_Resume(a1);
}

void sub_2184080F4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x218407E70);
}

void sub_218408148(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x218408154);
  JUMPOUT(0x21840815CLL);
}

double turi::flexible_type_converter<std::vector<std::string>>::get@<D0>(turi::flexible_type_internals *a1@<X1>, const char *a2@<X2>, std::vector<std::string> *a3@<X8>)
{
  double result;

  a3->__begin_ = 0;
  a3->__end_ = 0;
  a3->__end_cap_.__value_ = 0;
  *(_QWORD *)&result = turi::flexible_type_internals::ft_converter<12>::get<std::vector<std::string>>(a3, a1, a2).n128_u64[0];
  return result;
}

void sub_218408198(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

__n128 turi::flexible_type_internals::ft_converter<12>::get<std::vector<std::string>>(std::vector<std::string> *this, turi::flexible_type_internals *a2, const char *a3)
{
  int v4;
  uint64_t v5;
  __n128 result;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  std::vector<std::string>::pointer v10;
  uint64_t v11;
  unint64_t v12;
  std::vector<std::string>::pointer begin;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  void *v28;
  void *v29;
  unsigned int v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  void *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  std::string v43;
  void **v44[2];
  char v45[12];
  char v46;
  uint64_t v47;

  v47 = *MEMORY[0x24BDAC8D0];
  v4 = *((unsigned __int8 *)a2 + 12);
  if (v4 == 3)
  {
    v11 = *(_QWORD *)a2;
    std::vector<std::string>::resize(this, (uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 16) - *(_QWORD *)(*(_QWORD *)a2 + 8)) >> 3);
    if (*(_QWORD *)(v11 + 16) != *(_QWORD *)(v11 + 8))
    {
      v12 = 0;
      begin = this->__begin_;
      do
      {
        memset(&v43, 0, sizeof(v43));
        turi::flexible_type::flexible_type<double>((uint64_t)v45, (_QWORD *)(*(_QWORD *)(v11 + 8) + 8 * v12));
        turi::flexible_type_internals::ft_converter<1>::get<std::string>(&v43, v45);
        switch(v46)
        {
          case 2:
            v14 = *(unint64_t **)v45;
            do
            {
              v15 = __ldaxr(v14);
              v16 = v15 - 1;
            }
            while (__stlxr(v16, v14));
            if (!v16)
            {
              v17 = *(_QWORD *)v45;
              if (*(_QWORD *)v45)
              {
                if (*(char *)(*(_QWORD *)v45 + 31) < 0)
                  operator delete(*(void **)(*(_QWORD *)v45 + 8));
                v18 = v17;
                v19 = 0x1012C404EF22A49;
                goto LABEL_52;
              }
            }
            break;
          case 3:
            v31 = *(unint64_t **)v45;
            do
            {
              v32 = __ldaxr(v31);
              v33 = v32 - 1;
            }
            while (__stlxr(v33, v31));
            if (!v33)
            {
              v34 = *(_QWORD *)v45;
              if (*(_QWORD *)v45)
              {
                v35 = *(void **)(*(_QWORD *)v45 + 8);
                if (v35)
                {
                  *(_QWORD *)(*(_QWORD *)v45 + 16) = v35;
                  operator delete(v35);
                }
                v18 = v34;
                v19 = 0x1080C409938AC02;
                goto LABEL_52;
              }
            }
            break;
          case 4:
            v20 = *(unint64_t **)v45;
            do
            {
              v21 = __ldaxr(v20);
              v22 = v21 - 1;
            }
            while (__stlxr(v22, v20));
            if (!v22)
            {
              v23 = *(_QWORD *)v45;
              if (*(_QWORD *)v45)
              {
                v44[0] = (void **)(*(_QWORD *)v45 + 8);
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v44);
                goto LABEL_45;
              }
            }
            break;
          case 5:
            v36 = *(unint64_t **)v45;
            do
            {
              v37 = __ldaxr(v36);
              v38 = v37 - 1;
            }
            while (__stlxr(v38, v36));
            if (!v38)
            {
              v23 = *(_QWORD *)v45;
              if (*(_QWORD *)v45)
              {
                v44[0] = (void **)(*(_QWORD *)v45 + 8);
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v44);
LABEL_45:
                v18 = v23;
                v19 = 0x1020C405E66F15BLL;
                goto LABEL_52;
              }
            }
            break;
          case 8:
            v39 = *(unint64_t **)v45;
            do
            {
              v40 = __ldaxr(v39);
              v41 = v40 - 1;
            }
            while (__stlxr(v41, v39));
            if (!v41)
            {
              v42 = *(_QWORD *)v45;
              if (*(_QWORD *)v45)
              {
                boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)v45 + 16));
                v18 = v42;
                v30 = -235920773;
                goto LABEL_51;
              }
            }
            break;
          case 9:
            v24 = *(unint64_t **)v45;
            do
            {
              v25 = __ldaxr(v24);
              v26 = v25 - 1;
            }
            while (__stlxr(v26, v24));
            if (!v26)
            {
              v27 = *(_QWORD *)v45;
              if (*(_QWORD *)v45)
              {
                v28 = *(void **)(*(_QWORD *)v45 + 48);
                if (v28)
                {
                  *(_QWORD *)(*(_QWORD *)v45 + 56) = v28;
                  operator delete(v28);
                }
                v29 = *(void **)(v27 + 24);
                if (v29)
                {
                  *(_QWORD *)(v27 + 32) = v29;
                  operator delete(v29);
                }
                std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v27 + 8);
                v18 = v27;
                v30 = 2071181815;
LABEL_51:
                v19 = v30 | 0x1030C4000000000;
LABEL_52:
                MEMORY[0x219A19A08](v18, v19);
              }
            }
            break;
          default:
            break;
        }
        if (SHIBYTE(begin->__r_.__value_.__r.__words[2]) < 0)
          operator delete(begin->__r_.__value_.__l.__data_);
        result = *(__n128 *)&v43.__r_.__value_.__l.__data_;
        begin->__r_.__value_.__r.__words[2] = v43.__r_.__value_.__r.__words[2];
        *(__n128 *)&begin->__r_.__value_.__l.__data_ = result;
        ++begin;
        ++v12;
      }
      while (v12 < (uint64_t)(*(_QWORD *)(v11 + 16) - *(_QWORD *)(v11 + 8)) >> 3);
    }
  }
  else
  {
    if (v4 != 4)
      turi::flexible_type_internals::throw_type_conversion_error(a2, (const turi::flexible_type *)"flex_list", a3);
    v5 = *(_QWORD *)a2;
    std::vector<std::string>::resize(this, (uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 16) - *(_QWORD *)(*(_QWORD *)a2 + 8)) >> 4);
    v7 = *(_QWORD *)(v5 + 8);
    if (*(_QWORD *)(v5 + 16) != v7)
    {
      v8 = 0;
      v9 = 0;
      v10 = this->__begin_;
      do
      {
        memset(&v43, 0, sizeof(v43));
        turi::flexible_type_internals::ft_converter<1>::get<std::string>(&v43, (char *)(v7 + v8));
        if (SHIBYTE(v10->__r_.__value_.__r.__words[2]) < 0)
          operator delete(v10->__r_.__value_.__l.__data_);
        result = *(__n128 *)&v43.__r_.__value_.__l.__data_;
        v10->__r_.__value_.__r.__words[2] = v43.__r_.__value_.__r.__words[2];
        *(__n128 *)&v10->__r_.__value_.__l.__data_ = result;
        ++v10;
        ++v9;
        v7 = *(_QWORD *)(v5 + 8);
        v8 += 16;
      }
      while (v9 < (*(_QWORD *)(v5 + 16) - v7) >> 4);
    }
  }
  return result;
}

void sub_21840850C()
{
  turi::flexible_type_internals::ft_converter<12>::get<std::vector<unsigned long>>(std::vector<unsigned long> &,turi::flexible_type const&)::{lambda(void)#1}::operator()();
}

void sub_218408518(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, char a19)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void __cxx_global_var_init_8_4()
{
  int v0;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, "Mutex create error %d", v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_metadata_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

double turi::ml_data::ml_data(turi::ml_data *this)
{
  double result;

  result = 0.0;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_DWORD *)((char *)this + 47) = 0;
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 16) = -1;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *((_QWORD *)this + 23) = 0;
  return result;
}

double turi::ml_data::ml_data(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  double result;

  v2 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  result = 0.0;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_DWORD *)(a1 + 47) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = -1;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_QWORD *)(a1 + 184) = 0;
  return result;
}

turi::ml_data *turi::ml_data::ml_data(turi::ml_data *this, const turi::ml_data *a2)
{
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_DWORD *)((char *)this + 47) = 0;
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 16) = -1;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *((_QWORD *)this + 23) = 0;
  turi::ml_data::operator=((uint64_t)this, (uint64_t)a2);
  return this;
}

void sub_218408838(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  uint64_t v11;

  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v10 + 176);
  a10 = (void **)(v10 + 152);
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v11);
  turi::ml_data_internal::row_metadata::~row_metadata((turi::ml_data_internal::row_metadata *)(v10 + 48));
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v10);
  _Unwind_Resume(a1);
}

uint64_t turi::ml_data::operator=(uint64_t a1, uint64_t a2)
{
  std::shared_ptr<turi::neural_net::mps_command_queue>::operator=[abi:ne180100]((_QWORD *)a1, (uint64_t *)a2);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  if (a1 != a2)
  {
    std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((char *)(a1 + 64), *(char **)(a2 + 64), *(_QWORD *)(a2 + 72), (uint64_t)(*(_QWORD *)(a2 + 72) - *(_QWORD *)(a2 + 64)) >> 3);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    std::vector<std::shared_ptr<turi::fileio::file_ownership_handle>>::__assign_with_size[abi:ne180100]<std::shared_ptr<turi::fileio::file_ownership_handle>*,std::shared_ptr<turi::fileio::file_ownership_handle>*>(a1 + 104, *(uint64_t **)(a2 + 104), *(uint64_t **)(a2 + 112), (uint64_t)(*(_QWORD *)(a2 + 112) - *(_QWORD *)(a2 + 104)) >> 4);
  }
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  std::shared_ptr<turi::neural_net::mps_command_queue>::operator=[abi:ne180100]((_QWORD *)(a1 + 136), (uint64_t *)(a2 + 136));
  std::shared_ptr<turi::neural_net::mps_command_queue>::operator=[abi:ne180100]((_QWORD *)(a1 + 176), (uint64_t *)(a2 + 176));
  if (a1 != a2)
    std::vector<std::shared_ptr<turi::fileio::file_ownership_handle>>::__assign_with_size[abi:ne180100]<std::shared_ptr<turi::fileio::file_ownership_handle>*,std::shared_ptr<turi::fileio::file_ownership_handle>*>(a1 + 152, *(uint64_t **)(a2 + 152), *(uint64_t **)(a2 + 160), (uint64_t)(*(_QWORD *)(a2 + 160) - *(_QWORD *)(a2 + 152)) >> 4);
  return a1;
}

{
  __int128 v4;
  uint64_t v5;

  std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100](a1, (__int128 *)a2);
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE13__move_assignERS4_NS_17integral_constantIbLb1EEE(a1 + 64, (__n128 *)(a2 + 64));
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  std::vector<std::shared_ptr<turi::fileio::file_ownership_handle>>::__vdeallocate((void **)(a1 + 104));
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  v5 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a2 + 120) = 0;
  *(_QWORD *)(a1 + 128) = v5;
  std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100](a1 + 136, (__int128 *)(a2 + 136));
  std::vector<std::shared_ptr<turi::fileio::file_ownership_handle>>::__vdeallocate((void **)(a1 + 152));
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a2 + 152) = 0;
  *(_QWORD *)(a2 + 160) = 0;
  *(_QWORD *)(a2 + 168) = 0;
  std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100](a1 + 176, (__int128 *)(a2 + 176));
  return a1;
}

void turi::ml_data::fill(uint64_t a1, uint64_t a2, std::string::size_type a3, const void ***a4, int a5, int a6)
{
  uint64_t v11;
  const void **v12[3];
  uint64_t v13[2];

  if (*(_BYTE *)(a2 + 288))
    v11 = *(_QWORD *)(a2 + 32);
  else
    v11 = 0;
  v13[0] = 0;
  v13[1] = v11;
  std::map<std::string,turi::ml_column_mode>::map[abi:ne180100]((uint64_t *)v12, a4);
  turi::ml_data::fill(a1, a2, v13, a3, v12, a5, a6);
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)v12, (char *)v12[1]);
}

void sub_2184089C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void turi::ml_data::fill(uint64_t a1, uint64_t a2, uint64_t *a3, std::string::size_type a4, const void ***a5, int a6, int a7)
{
  uint64_t *v13;
  uint64_t *v14;
  int64_t v15;
  uint64_t *v16;
  _QWORD **v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  std::string *v22;
  __int128 v23;
  std::string *v24;
  unsigned __int8 **v25;
  unsigned int v26;
  uint64_t *v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char **v33;
  BOOL v34;
  int *v35;
  file_logger *v36;
  file_logger *started;
  uint64_t v38;
  _QWORD *v39;
  const std::locale::facet *v40;
  uint64_t v41;
  unsigned int type;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  const void **v46;
  const void ***v47;
  const void **v48;
  const void **v49;
  const void ***v50;
  std::string *v51;
  std::string *v52;
  uint64_t v53;
  unint64_t v54;
  std::string *v55;
  int v56;
  uint64_t v57;
  uint64_t size;
  _QWORD *v59;
  uint64_t v60;
  std::string *v61;
  std::string::pointer data;
  int v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  _QWORD *exception;
  int v68;
  uint64_t v69;
  char v70;
  void *__p;
  char v72;
  __int128 v73;
  uint64_t v74;
  void *v75;
  char v76;
  uint64_t v77;
  std::string *v78;
  std::string *v79;
  unint64_t v80;
  uint64_t *v81;
  uint64_t *v82;
  uint64_t v83;
  char **v84;
  char *v85;
  uint64_t v86;
  std::locale v87;

  v70 = a6;
  v69 = *(_QWORD *)a1;
  if (!*(_QWORD *)a1)
  {
    assert_msg(a6 ^ 1u, "immutable_metadata cannot be set for initial metadata building.");
    turi::ml_data::_setup_ml_metadata((uint64_t *)a1, (_QWORD *)a2, a4, (uint64_t)a5);
    if (!a7)
      assert_msg(0, "missing_value_action impute not allowed on initial fill.");
  }
  v14 = (uint64_t *)a3[1];
  v84 = (char **)*a3;
  v13 = (uint64_t *)v84;
  v81 = v14;
  v15 = (char *)v14 - (char *)v84;
  if (v14 < (uint64_t *)v84)
  {
    *(_QWORD *)&v73 = &v84;
    *((_QWORD *)&v73 + 1) = &v81;
    turi::ml_data::fill(turi::sframe const&,std::pair<unsigned long,unsigned long> const&,std::string const&,std::map<std::string,turi::ml_column_mode>,BOOL,turi::ml_missing_value_action)::$_0::operator()();
  }
  v84 = (char **)v14;
  if (*(_BYTE *)(a2 + 288))
    v16 = *(uint64_t **)(a2 + 32);
  else
    v16 = 0;
  v81 = v16;
  if (v14 > v16)
  {
    *(_QWORD *)&v73 = &v84;
    *((_QWORD *)&v73 + 1) = &v81;
    turi::ml_data::fill(turi::sframe const&,std::pair<unsigned long,unsigned long> const&,std::string const&,std::map<std::string,turi::ml_column_mode>,BOOL,turi::ml_missing_value_action)::$_1::operator()();
  }
  v68 = a7;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = v15;
  *(_QWORD *)(a1 + 32) = v15;
  std::set<std::string>::set[abi:ne180100]<std::__wrap_iter<std::string*>>((uint64_t)&v84, *(const void ***)(a2 + 40), *(const void ***)(a2 + 48));
  v17 = *(_QWORD ***)a1;
  v82 = 0;
  v83 = 0;
  v81 = 0;
  std::vector<std::shared_ptr<turi::query_eval::planner_node>>::__init_with_size[abi:ne180100]<std::shared_ptr<turi::query_eval::planner_node>*,std::shared_ptr<turi::query_eval::planner_node>*>((char *)&v81, *v17, v17[1], ((char *)v17[1] - (char *)*v17) >> 4);
  v78 = 0;
  v79 = 0;
  v80 = 0;
  v18 = v81;
  if (v82 != v81)
  {
    v19 = 0;
    v20 = 0;
    do
    {
      v21 = v18[v19];
      if (std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)&v84, (const void **)v21))
      {
        std::__tree<std::string>::__erase_unique<std::string>((uint64_t **)&v84, (const void **)v21);
      }
      else
      {
        v22 = v79;
        if ((unint64_t)v79 >= v80)
        {
          v24 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v78, (__int128 *)v21);
        }
        else
        {
          if (*(char *)(v21 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(v79, *(const std::string::value_type **)v21, *(_QWORD *)(v21 + 8));
          }
          else
          {
            v23 = *(_OWORD *)v21;
            v79->__r_.__value_.__r.__words[2] = *(_QWORD *)(v21 + 16);
            *(_OWORD *)&v22->__r_.__value_.__l.__data_ = v23;
          }
          v24 = v22 + 1;
        }
        v79 = v24;
      }
      ++v20;
      v18 = v81;
      v19 += 2;
    }
    while (v20 < ((char *)v82 - (char *)v81) >> 4);
  }
  v25 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 24);
  if (v25 && turi::sframe::contains_column(a2, v25))
  {
    std::__tree<std::string>::__erase_unique<std::string>((uint64_t **)&v84, *(const void ***)(*(_QWORD *)a1 + 24));
    v26 = 1;
  }
  else
  {
    v26 = 0;
  }
  if (v14 != v13 && v78 != v79)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v73);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v73, (uint64_t)"Provided data missing required columns: ", 40);
    v51 = v78;
    v52 = v79;
    if ((char *)v79 - (char *)v78 != 24)
    {
      v53 = 0;
      v54 = 0;
      do
      {
        v55 = &v51[v53];
        v56 = SHIBYTE(v55->__r_.__value_.__r.__words[2]);
        if (v56 >= 0)
          v57 = (uint64_t)v55;
        else
          v57 = v55->__r_.__value_.__r.__words[0];
        if (v56 >= 0)
          size = HIBYTE(v55->__r_.__value_.__r.__words[2]);
        else
          size = v55->__r_.__value_.__l.__size_;
        v59 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v73, v57, size);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)", ", 2);
        ++v54;
        v51 = v78;
        v52 = v79;
        ++v53;
      }
      while (v54 < -1 - 0x5555555555555555 * (((char *)v79 - (char *)v78) >> 3));
    }
    data = v52[-1].__r_.__value_.__l.__data_;
    v61 = v52 - 1;
    v60 = (uint64_t)data;
    v63 = SHIBYTE(v61->__r_.__value_.__r.__words[2]);
    if (v63 >= 0)
      v64 = (uint64_t)v61;
    else
      v64 = v60;
    if (v63 >= 0)
      v65 = HIBYTE(v61->__r_.__value_.__r.__words[2]);
    else
      v65 = v61->__r_.__value_.__l.__size_;
    v66 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v73, v64, v65);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)".", 1);
    v87.__locale_ = (std::locale::__imp *)&v73;
    turi::ml_data::fill(turi::sframe const&,std::pair<unsigned long,unsigned long> const&,std::string const&,std::map<std::string,turi::ml_column_mode>,BOOL,turi::ml_missing_value_action)::$_2::operator()();
  }
  if (v86)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v73);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v73, (uint64_t)"Ignoring columns not present at model construction: ", 52);
    v27 = (uint64_t *)v84;
    if (v84 != &v85)
    {
      v28 = 0;
      do
      {
        v29 = *((char *)v27 + 55);
        if (v29 >= 0)
          v30 = (uint64_t)(v27 + 4);
        else
          v30 = v27[4];
        if (v29 >= 0)
          v31 = *((unsigned __int8 *)v27 + 55);
        else
          v31 = v27[5];
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v73, v30, v31);
        if (++v28 != v86)
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v73, (uint64_t)", ", 2);
        v32 = (char *)v27[1];
        if (v32)
        {
          do
          {
            v33 = (char **)v32;
            v32 = *(char **)v32;
          }
          while (v32);
        }
        else
        {
          do
          {
            v33 = (char **)v27[2];
            v34 = *v33 == (char *)v27;
            v27 = (uint64_t *)v33;
          }
          while (!v34);
        }
        v27 = (uint64_t *)v33;
      }
      while (v33 != &v85);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v73, (uint64_t)".", 1);
    v35 = (int *)global_logger();
    if (v35[169] <= 4)
    {
      if (cppipc::must_cancel((cppipc *)v35))
        log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
      v36 = (file_logger *)global_logger();
      started = file_logger::start_stream(v36, 4, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/ml/ml_data/ml_data.cpp", "fill", 175, 1);
      std::stringbuf::str();
      v38 = file_logger::operator<<<std::string>((uint64_t)started, (uint64_t)&__p);
      v39 = pthread_getspecific(*(_QWORD *)(v38 + 592));
      if (v39)
      {
        if (*((_BYTE *)v39 + 280))
        {
          std::ios_base::getloc((const std::ios_base *)((char *)v39 + *(_QWORD *)(v39[2] - 24) + 16));
          v40 = std::locale::use_facet(&v87, MEMORY[0x24BEDB350]);
          ((void (*)(const std::locale::facet *, uint64_t))v40->__vftable[2].~facet_0)(v40, 10);
          std::locale::~locale(&v87);
          std::ostream::put();
          std::ostream::flush();
          file_logger::stream_flush((file_logger *)v38);
          if (*(_DWORD *)(v38 + 600) == 7)
          {
            __print_back_trace();
            exception = __cxa_allocate_exception(8uLL);
            *exception = "LOG_FATAL encountered";
            __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
          }
        }
      }
      if (v72 < 0)
        operator delete(__p);
    }
    *(_QWORD *)&v73 = *MEMORY[0x24BEDB800];
    *(_QWORD *)((char *)&v73 + *(_QWORD *)(v73 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
    *((_QWORD *)&v73 + 1) = MEMORY[0x24BEDB848] + 16;
    if (v76 < 0)
      operator delete(v75);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x219A198F4](&v77);
  }
  if (v26)
  {
    turi::sframe::select_column(a2, *(unsigned __int8 ***)(*(_QWORD *)a1 + 24), &v73);
    v41 = *(_QWORD *)(*(_QWORD *)a1 + 24);
    type = turi::sarray<turi::flexible_type>::get_type(v73);
    turi::ml_data_internal::check_type_consistent_with_mode(v41, type, *(_DWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 24) + 24));
    std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::push_back[abi:ne180100]((char **)&v81, (__int128 *)(*(_QWORD *)a1 + 24));
    v43 = (std::__shared_weak_count *)*((_QWORD *)&v73 + 1);
    if (*((_QWORD *)&v73 + 1))
    {
      v44 = (unint64_t *)(*((_QWORD *)&v73 + 1) + 8);
      do
        v45 = __ldaxr(v44);
      while (__stlxr(v45 - 1, v44));
      if (!v45)
      {
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v43);
      }
    }
  }
  turi::ml_data_internal::row_metadata::setup((unsigned __int8 *)(a1 + 48), &v81, v26);
  *(_QWORD *)&v73 = &v78;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v73);
  *(_QWORD *)&v73 = &v81;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v73);
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)&v84, v85);
  *((_QWORD *)&v73 + 1) = 0;
  v74 = 0;
  *(_QWORD *)&v73 = (char *)&v73 + 8;
  if ((v70 & 1) == 0)
  {
    v48 = *a5;
    v47 = a5 + 1;
    v46 = v48;
    if (v48 != (const void **)v47)
    {
      do
      {
        if (*((_DWORD *)v46 + 14) == 6)
          std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)&v73, v46 + 4, (uint64_t)(v46 + 4));
        v49 = (const void **)v46[1];
        if (v49)
        {
          do
          {
            v50 = (const void ***)v49;
            v49 = (const void **)*v49;
          }
          while (v49);
        }
        else
        {
          do
          {
            v50 = (const void ***)v46[2];
            v34 = *v50 == v46;
            v46 = (const void **)v50;
          }
          while (!v34);
        }
        v46 = (const void **)v50;
      }
      while (v50 != v47);
    }
  }
  turi::ml_data::_fill_data_blocks(a1, (uint64_t *)a2, v70, v69 == 0, v68, a3, (uint64_t)&v73);
  if (!v69)
  {
    turi::ml_metadata::set_training_index_sizes_to_current_column_sizes(*(turi::ml_metadata **)a1);
    turi::ml_metadata::setup_cached_values(*(turi::ml_metadata **)a1);
  }
  turi::ml_data::_setup_untranslated_columns((uint64_t **)a1, (const turi::sframe *)a2, *a3, a3[1]);
  turi::ml_data::_reset_block_manager((turi::ml_data *)a1);
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)&v73, *((char **)&v73 + 1));
}

void sub_2184090DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19)
{
  uint64_t v19;

  std::ostringstream::~ostringstream((uint64_t)&a18);
  a18 = v19 - 168;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
  a18 = v19 - 144;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy(v19 - 120, *(char **)(v19 - 112));
  _Unwind_Resume(a1);
}

void turi::ml_data::_setup_ml_metadata(uint64_t *a1, _QWORD *a2, std::string::size_type a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *size;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  __int128 *v17;
  __int128 *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  std::string::size_type v22;
  std::string::size_type v23;
  std::string::size_type i;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  std::string *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  __int128 v37;
  std::string v38;
  char v39;

  assert_msg(*a1 == 0, "Metadata already set!");
  v8 = operator new();
  *(_OWORD *)v8 = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_OWORD *)(v8 + 32) = 0u;
  *(_OWORD *)(v8 + 48) = 0u;
  *(_QWORD *)(v8 + 64) = -1;
  *(_QWORD *)(v8 + 72) = -1;
  *(_QWORD *)(v8 + 96) = 0;
  *(_QWORD *)(v8 + 88) = 0;
  *(_QWORD *)(v8 + 80) = v8 + 88;
  *(_WORD *)(v8 + 104) = 0;
  *(_BYTE *)(v8 + 106) = 0;
  *(_OWORD *)(v8 + 192) = 0u;
  *(_OWORD *)(v8 + 208) = 0u;
  *(_OWORD *)(v8 + 224) = 0u;
  *(_OWORD *)(v8 + 240) = 0u;
  *(_QWORD *)(v8 + 256) = 0;
  *(_OWORD *)(v8 + 171) = 0u;
  *(_OWORD *)(v8 + 144) = 0u;
  *(_OWORD *)(v8 + 160) = 0u;
  *(_OWORD *)(v8 + 112) = 0u;
  *(_OWORD *)(v8 + 128) = 0u;
  std::shared_ptr<turi::ml_metadata>::reset[abi:ne180100]<turi::ml_metadata,void>(a1, v8);
  if (a2[3])
  {
    v9 = *(unsigned __int8 *)(a3 + 23);
    if ((v9 & 0x80u) != 0)
      v9 = *(_QWORD *)(a3 + 8);
    if (v9)
    {
      if (!turi::sframe::contains_column((uint64_t)a2, (unsigned __int8 **)a3))
      {
        v38.__r_.__value_.__r.__words[0] = a3;
        turi::ml_data::_setup_ml_metadata(turi::sframe const&,std::string const&,std::map<std::string,turi::ml_column_mode> const&)::$_0::operator()();
      }
      v10 = *a1;
      v11 = operator new();
      std::string::basic_string[abi:ne180100]<0>((_QWORD *)v11, "");
      *(_OWORD *)(v11 + 32) = 0u;
      *(_OWORD *)(v11 + 48) = 0u;
      *(_QWORD *)(v11 + 64) = -1;
      *(_QWORD *)(v11 + 72) = -1;
      *(_QWORD *)(v11 + 80) = 0;
      *(_QWORD *)(v11 + 88) = 0;
      *(_QWORD *)(v11 + 96) = 0;
      *(_QWORD *)(v11 + 104) = -1;
      std::shared_ptr<turi::ml_data_internal::column_metadata>::reset[abi:ne180100]<turi::ml_data_internal::column_metadata,void>((_QWORD *)(v10 + 24), v11);
      v12 = *(_QWORD *)(*a1 + 24);
      turi::sframe::select_column((uint64_t)a2, (unsigned __int8 **)a3, &v38);
      turi::ml_data_internal::column_metadata::setup(v12, 1, (std::string *)a3, (uint64_t *)&v38, a4);
      size = (std::__shared_weak_count *)v38.__r_.__value_.__l.__size_;
      if (v38.__r_.__value_.__l.__size_)
      {
        v14 = (unint64_t *)(v38.__r_.__value_.__l.__size_ + 8);
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
      }
      v16 = std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(a2[5], a2[6], (unsigned __int8 **)a3);
      v17 = (__int128 *)a2[6];
      if ((__int128 *)v16 == v17)
      {
        v38.__r_.__value_.__r.__words[0] = a3;
        turi::sframe::column_index(std::string const&)const::{lambda(void)#1}::operator()();
      }
      v18 = (__int128 *)a2[5];
      v19 = v16 - (_QWORD)v18;
      memset(&v38, 0, sizeof(v38));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v38, v18, v17, 0xAAAAAAAAAAAAAAABLL * (((char *)v17 - (char *)v18) >> 3));
      if (v19 != -24)
      {
        v20 = *(unsigned __int8 *)(a3 + 23);
        if ((v20 & 0x80u) != 0)
          v20 = *(_QWORD *)(a3 + 8);
        if (v20)
        {
          v21 = std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>((uint64_t)v38.__r_.__value_.__l.__data_, v38.__r_.__value_.__l.__size_, (unsigned __int8 **)a3);
          std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::string *,std::string *,std::string *>((uint64_t)&v39, (__int128 *)(v21 + 24), (__int128 *)v38.__r_.__value_.__l.__size_, v21);
          v23 = v22;
          for (i = v38.__r_.__value_.__l.__size_; i != v23; i -= 24)
          {
            if (*(char *)(i - 1) < 0)
              operator delete(*(void **)(i - 24));
          }
          v38.__r_.__value_.__l.__size_ = v23;
        }
      }
    }
    else
    {
      *(_OWORD *)&v38.__r_.__value_.__l.__data_ = 0uLL;
      std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100](*a1 + 24, (__int128 *)&v38);
      v25 = (std::__shared_weak_count *)v38.__r_.__value_.__l.__size_;
      if (v38.__r_.__value_.__l.__size_)
      {
        v26 = (unint64_t *)(v38.__r_.__value_.__l.__size_ + 8);
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
      memset(&v38, 0, sizeof(v38));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v38, (__int128 *)a2[5], (__int128 *)a2[6], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[6] - a2[5]) >> 3));
    }
    v28 = *a1;
    if ((_QWORD *)*a1 != a2)
    {
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)(v28 + 40), (std::string *)a2[5], (__int128 *)a2[6], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[6] - a2[5]) >> 3));
      v28 = *a1;
    }
    std::vector<std::shared_ptr<turi::sframe_rows const>>::resize(v28, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v38.__r_.__value_.__l.__size_ - v38.__r_.__value_.__r.__words[0]) >> 3));
    if (v38.__r_.__value_.__l.__size_ != v38.__r_.__value_.__r.__words[0])
    {
      v29 = 0;
      do
      {
        v30 = *(_QWORD *)*a1;
        v31 = operator new();
        std::string::basic_string[abi:ne180100]<0>((_QWORD *)v31, "");
        *(_OWORD *)(v31 + 32) = 0u;
        *(_OWORD *)(v31 + 48) = 0u;
        *(_QWORD *)(v31 + 64) = -1;
        *(_QWORD *)(v31 + 72) = -1;
        *(_QWORD *)(v31 + 80) = 0;
        *(_QWORD *)(v31 + 88) = 0;
        *(_QWORD *)(v31 + 96) = 0;
        *(_QWORD *)(v31 + 104) = -1;
        std::shared_ptr<turi::ml_data_internal::column_metadata>::reset[abi:ne180100]<turi::ml_data_internal::column_metadata,void>((_QWORD *)(v30 + 16 * v29), v31);
        v32 = *(_QWORD *)(*(_QWORD *)*a1 + 16 * v29);
        v33 = (std::string *)(v38.__r_.__value_.__r.__words[0] + 24 * v29);
        turi::sframe::select_column((uint64_t)a2, (unsigned __int8 **)v33, &v37);
        turi::ml_data_internal::column_metadata::setup(v32, 0, v33, (uint64_t *)&v37, a4);
        v34 = (std::__shared_weak_count *)*((_QWORD *)&v37 + 1);
        if (*((_QWORD *)&v37 + 1))
        {
          v35 = (unint64_t *)(*((_QWORD *)&v37 + 1) + 8);
          do
            v36 = __ldaxr(v35);
          while (__stlxr(v36 - 1, v35));
          if (!v36)
          {
            ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
            std::__shared_weak_count::__release_weak(v34);
          }
        }
        ++v29;
      }
      while (v29 < 0xAAAAAAAAAAAAAAABLL
                  * ((uint64_t)(v38.__r_.__value_.__l.__size_ - v38.__r_.__value_.__r.__words[0]) >> 3));
    }
    *(_QWORD *)&v37 = &v38;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v37);
  }
}

void turi::ml_data::fill(turi::sframe const&,std::pair<unsigned long,unsigned long> const&,std::string const&,std::map<std::string,turi::ml_column_mode>,BOOL,turi::ml_missing_value_action)::$_0::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/ml/ml_data/ml_data.cpp", 88);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"row_bounds.first", 16);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"<=", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"row_bounds.second", 17);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"<=", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/ml/ml_data/ml_data.cpp", "operator()", 98, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::ml_data::fill(turi::sframe const&,std::pair<unsigned long,unsigned long> const&,std::string const&,std::map<std::string,turi::ml_column_mode>,BOOL,turi::ml_missing_value_action)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_218409858(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::ml_data::fill(turi::sframe const&,std::pair<unsigned long,unsigned long> const&,std::string const&,std::map<std::string,turi::ml_column_mode>,BOOL,turi::ml_missing_value_action)::$_1::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/ml/ml_data/ml_data.cpp", 88);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"row_bounds.second", 17);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"<=", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"raw_data.num_rows()", 19);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"<=", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/ml/ml_data/ml_data.cpp", "operator()", 99, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::ml_data::fill(turi::sframe const&,std::pair<unsigned long,unsigned long> const&,std::string const&,std::map<std::string,turi::ml_column_mode>,BOOL,turi::ml_missing_value_action)::$_1::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_218409A6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::ml_data::_fill_data_blocks(uint64_t a1, uint64_t *a2, char a3, char a4, int a5, uint64_t *a6, uint64_t a7)
{
  _BYTE *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unsigned int type;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 ***v18;
  unsigned __int8 ***v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  _QWORD *v28;
  _QWORD *v29;
  char *v30;
  __int128 v31;
  int64x2_t v32;
  _OWORD *v33;
  void **v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  unsigned __int8 **v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  void *v44;
  unint64_t *p_shared_owners;
  unint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  turi::ml_data_internal::column_statistics *v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t v63;
  turi::thread_pool *v64;
  unint64_t v65;
  turi::thread_pool *instance;
  turi::thread *v67;
  turi::thread_pool *tls_data;
  turi::thread_pool *v69;
  uint64_t v70;
  double v71;
  turi::thread *v72;
  void **v73;
  uint64_t i;
  unint64_t v75;
  const void ***v76;
  const void **v77;
  __int128 v78;
  _QWORD *v79;
  uint64_t v80;
  __int128 *v81;
  __int128 *v82;
  uint64_t v83;
  __n128 v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  unint64_t j;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  void **p_p;
  uint64_t v98;
  void **v99;
  void **v100;
  uint64_t v101;
  uint64_t *v102;
  char *v103;
  unint64_t v104;
  char *v105;
  unint64_t v106;
  unint64_t v107;
  BOOL v108;
  uint64_t v109;
  unint64_t *v110;
  unint64_t v111;
  unint64_t v112;
  std::string v114;
  unint64_t v115;
  _QWORD v116[3];
  void *v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  int64x2_t v129;
  _QWORD v130[2];
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  void *v134;
  std::__shared_weak_count *v135;
  int v136;
  char v137;
  char v138;
  void **v139[4];
  _QWORD v140[3];
  _QWORD *v141;
  __int128 v142;
  void **v143;
  __int128 *v144;
  uint64_t *v145;
  uint64_t *v146;
  _QWORD v147[3];
  _QWORD *v148;
  _QWORD v149[3];
  _QWORD *v150;
  void *__p;
  int64x2_t v152;
  void **v153;
  _QWORD v154[3];
  _QWORD *v155;
  _BYTE v156[16];
  uint64_t v157;
  _BYTE *v158;
  pthread_mutex_t v159;
  uint64_t v160;

  v160 = *MEMORY[0x24BDAC8D0];
  v138 = a3;
  v137 = a4;
  v136 = a5;
  if (!*(_QWORD *)a1)
    turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_0::operator()();
  if (*(_QWORD *)(a1 + 104) == *(_QWORD *)(a1 + 112))
  {
    v15 = operator new();
    turi::sarray<turi::ml_data_internal::row_data_block>::sarray(v15);
    std::shared_ptr<turi::sarray<turi::ml_data_internal::row_data_block>>::reset[abi:ne180100]<turi::sarray<turi::ml_data_internal::row_data_block>,void>((_QWORD *)(a1 + 136), v15);
    turi::sarray<turi::ml_data_internal::row_data_block>::open_for_write(*(_QWORD *)(a1 + 136), 1, 0);
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 136) + 40))(*(_QWORD *)(a1 + 136));
    return;
  }
  v10 = (_BYTE *)(a1 + 48);
  v11 = turi::thread::cpu_count((turi::thread *)a1);
  v134 = 0;
  v135 = 0;
  if (*v10)
  {
    turi::sframe::select_column((uint64_t)a2, *(unsigned __int8 ***)(*(_QWORD *)a1 + 24), &__p);
    v12 = (std::__shared_weak_count *)v152.i64[0];
    v134 = __p;
    v135 = (std::__shared_weak_count *)v152.i64[0];
    v13 = *(_QWORD *)(*(_QWORD *)a1 + 24);
    type = turi::sarray<turi::flexible_type>::get_type((uint64_t)__p);
    turi::ml_data_internal::check_type_consistent_with_mode(v13, type, *(_DWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 24) + 24));
  }
  else
  {
    v12 = 0;
  }
  v16 = *a6;
  v131 = a6[1];
  v132 = v16;
  v133 = v131 - v16;
  if (v131 == v16)
  {
    v17 = operator new();
    turi::sarray<turi::ml_data_internal::row_data_block>::sarray(v17);
    std::shared_ptr<turi::sarray<turi::ml_data_internal::row_data_block>>::reset[abi:ne180100]<turi::sarray<turi::ml_data_internal::row_data_block>,void>((_QWORD *)(a1 + 136), v17);
    turi::sarray<turi::ml_data_internal::row_data_block>::open_for_write(*(_QWORD *)(a1 + 136), 1, 0);
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 136) + 40))(*(_QWORD *)(a1 + 136));
    *(_QWORD *)(a1 + 40) = 0;
    if (!v12)
      return;
    goto LABEL_143;
  }
  v112 = v11;
  v129 = 0uLL;
  v130[0] = 0;
  v18 = *(unsigned __int8 ****)(a1 + 104);
  v19 = *(unsigned __int8 ****)(a1 + 112);
  if (v18 == v19)
  {
    v126 = 0;
    v127 = 0;
    v128 = 0;
    v123 = 0;
    v124 = 0;
    v125 = 0;
  }
  else
  {
    do
    {
      turi::sframe::select_column((uint64_t)a2, *v18, &v142);
      v20 = v129.i64[1];
      if (v129.i64[1] >= v130[0])
      {
        v21 = (v129.i64[1] - v129.i64[0]) >> 4;
        v22 = v21 + 1;
        if ((unint64_t)(v21 + 1) >> 60)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v23 = v130[0] - v129.i64[0];
        if ((v130[0] - v129.i64[0]) >> 3 > v22)
          v22 = v23 >> 3;
        if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF0)
          v24 = 0xFFFFFFFFFFFFFFFLL;
        else
          v24 = v22;
        v154[0] = v130;
        v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::flexible_type>>((uint64_t)v130, v24);
        v27 = &v25[16 * v21];
        *(_OWORD *)v27 = v142;
        v142 = 0uLL;
        v28 = (_QWORD *)v129.i64[1];
        v29 = (_QWORD *)v129.i64[0];
        if (v129.i64[1] == v129.i64[0])
        {
          v32 = vdupq_n_s64(v129.u64[1]);
          v30 = &v25[16 * v21];
        }
        else
        {
          v30 = &v25[16 * v21];
          do
          {
            v31 = *((_OWORD *)v28 - 1);
            v28 -= 2;
            *((_OWORD *)v30 - 1) = v31;
            v30 -= 16;
            *v28 = 0;
            v28[1] = 0;
          }
          while (v28 != v29);
          v32 = v129;
        }
        v33 = v27 + 16;
        v129.i64[0] = (uint64_t)v30;
        v152 = v32;
        v34 = (void **)v130[0];
        v130[0] = &v25[16 * v26];
        v153 = v34;
        __p = (void *)v32.i64[0];
        std::__split_buffer<std::shared_ptr<turi::group_aggregate_value>>::~__split_buffer((uint64_t)&__p);
        v35 = (std::__shared_weak_count *)*((_QWORD *)&v142 + 1);
        v129.i64[1] = (uint64_t)v33;
        if (*((_QWORD *)&v142 + 1))
        {
          v36 = (unint64_t *)(*((_QWORD *)&v142 + 1) + 8);
          do
            v37 = __ldaxr(v36);
          while (__stlxr(v37 - 1, v36));
          if (!v37)
          {
            ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
            std::__shared_weak_count::__release_weak(v35);
          }
        }
      }
      else
      {
        *(_OWORD *)v129.i64[1] = v142;
        v129.i64[1] = v20 + 16;
      }
      v38 = *v18;
      v39 = std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(a2[5], a2[6], *v18);
      if (v39 == a2[6])
      {
        __p = v38;
        turi::sframe::column_index(std::string const&)const::{lambda(void)#1}::operator()();
      }
      v40 = turi::sarray<turi::flexible_type>::get_type(*(_QWORD *)(a2[23]
                                                                  - 0x5555555555555550
                                                                  * ((unint64_t)(v39 - a2[5]) >> 3)));
      turi::ml_data_internal::check_type_consistent_with_mode((uint64_t)v38, v40, *((_DWORD *)*v18 + 6));
      v18 += 2;
    }
    while (v18 != v19);
    v41 = *(_QWORD *)(a1 + 104);
    v42 = *(_QWORD *)(a1 + 112);
    v126 = 0;
    v127 = 0;
    v128 = 0;
    v123 = 0;
    v124 = 0;
    v125 = 0;
    while (v41 != v42)
    {
      v44 = *(void **)(*(_QWORD *)v41 + 32);
      v43 = *(std::__shared_weak_count **)(*(_QWORD *)v41 + 40);
      __p = v44;
      v152.i64[0] = (uint64_t)v43;
      if (v43)
      {
        p_shared_owners = (unint64_t *)&v43->__shared_owners_;
        do
          v46 = __ldxr(p_shared_owners);
        while (__stxr(v46 + 1, p_shared_owners));
      }
      turi::ml_data_internal::column_indexer::initialize((turi::ml_data_internal::column_indexer *)v44);
      if (v43)
      {
        v47 = (unint64_t *)&v43->__shared_owners_;
        do
          v48 = __ldxr(v47);
        while (__stxr(v48 + 1, v47));
      }
      v149[0] = &off_24D93F8B0;
      v149[1] = v44;
      v121 = 0;
      v122 = 0;
      v149[2] = v43;
      v150 = v149;
      std::vector<std::function<void ()(void)>>::push_back[abi:ne180100](&v126, (uint64_t)v149);
      v49 = v150;
      if (v150 == v149)
      {
        v49 = v149;
        v50 = 4;
      }
      else
      {
        if (!v150)
          goto LABEL_43;
        v50 = 5;
      }
      (*(void (**)(void))(*v49 + 8 * v50))();
LABEL_43:
      if (v137)
      {
        v52 = *(turi::ml_data_internal::column_statistics **)(*(_QWORD *)v41 + 48);
        v51 = *(std::__shared_weak_count **)(*(_QWORD *)v41 + 56);
        *(_QWORD *)&v142 = v52;
        *((_QWORD *)&v142 + 1) = v51;
        if (v51)
        {
          v53 = (unint64_t *)&v51->__shared_owners_;
          do
            v54 = __ldxr(v53);
          while (__stxr(v54 + 1, v53));
        }
        turi::ml_data_internal::column_statistics::initialize(v52);
        if (v51)
        {
          v55 = (unint64_t *)&v51->__shared_owners_;
          do
            v56 = __ldxr(v55);
          while (__stxr(v56 + 1, v55));
        }
        v147[0] = &off_24D93F930;
        v147[1] = v52;
        v119 = 0;
        v120 = 0;
        v147[2] = v51;
        v148 = v147;
        std::vector<std::function<void ()(void)>>::push_back[abi:ne180100](&v123, (uint64_t)v147);
        v57 = v148;
        if (v148 == v147)
        {
          v57 = v147;
          v58 = 4;
LABEL_54:
          (*(void (**)(void))(*v57 + 8 * v58))();
        }
        else if (v148)
        {
          v58 = 5;
          goto LABEL_54;
        }
        if (v51)
        {
          v59 = (unint64_t *)&v51->__shared_owners_;
          do
            v60 = __ldaxr(v59);
          while (__stlxr(v60 - 1, v59));
          if (!v60)
          {
            ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
            std::__shared_weak_count::__release_weak(v51);
          }
        }
        v43 = (std::__shared_weak_count *)v152.i64[0];
      }
      if (v43)
      {
        v61 = (unint64_t *)&v43->__shared_owners_;
        do
          v62 = __ldaxr(v61);
        while (__stlxr(v62 - 1, v61));
        if (!v62)
        {
          ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
          std::__shared_weak_count::__release_weak(v43);
        }
      }
      v41 += 16;
    }
  }
  __p = 0;
  v63 = v112;
  std::vector<unsigned long>::vector(&v117, v112, &__p);
  v64 = (turi::thread_pool *)std::vector<std::shared_ptr<turi::sarray_reader<turi::flexible_type>>>::vector(v116, *(_QWORD *)(a1 + 96));
  v65 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)&v142 = a1;
  *((_QWORD *)&v142 + 1) = &v129;
  v143 = (void **)v116;
  v144 = (__int128 *)a7;
  v145 = &v132;
  v146 = &v131;
  instance = (turi::thread_pool *)turi::thread_pool::get_instance(v64);
  v67 = (turi::thread *)turi::thread_pool::size(instance);
  tls_data = (turi::thread_pool *)turi::thread::get_tls_data(v67);
  if (*((_BYTE *)tls_data + 8) || (unint64_t)v67 <= 1)
  {
    if (v65)
    {
      for (i = 0; i != v65; ++i)
        turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_3::operator()((uint64_t)&v142, i);
    }
  }
  else
  {
    v69 = (turi::thread_pool *)turi::thread_pool::get_instance(tls_data);
    turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)&__p, v69);
    v70 = 0;
    v71 = (double)v65 / (double)(unint64_t)v67;
    do
    {
      v72 = (turi::thread *)(v70 + 1);
      v73 = (void **)(v71 * (double)(unint64_t)(v70 + 1) + 0.0);
      if ((turi::thread *)v70 == (turi::thread *)((char *)v67 - 1))
        v73 = (void **)v65;
      v139[2] = (void **)(v71 * (double)(unint64_t)v70 + 0.0);
      v139[3] = v73;
      v139[0] = (void **)((char *)boost::function0<void>::assign_to<void turi::parallel_for<turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_3>(unsigned long,unsigned long,turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_3 const&)::{lambda(void)#1}>(turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_3)::stored_vtable
                        + 1);
      v139[1] = (void **)&v142;
      turi::parallel_task_queue::launch((uint64_t)&__p, (uint64_t)v139, v70);
      boost::function0<void>::~function0((uint64_t *)v139);
      v70 = (uint64_t)v72;
    }
    while (v72 != v67);
    turi::parallel_task_queue::join((turi::parallel_task_queue *)&__p);
    turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)&__p);
  }
  if (*(_QWORD *)(a7 + 16))
  {
    v115 = 0;
    if (*(_QWORD *)(a1 + 96))
    {
      v75 = 0;
      while (1)
      {
        v76 = (const void ***)(*(_QWORD *)(a1 + 104) + 16 * v75);
        if (std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>(a7, *v76))
        {
          break;
        }
LABEL_103:
        v75 = v115 + 1;
        v115 = v75;
        if (v75 >= *(_QWORD *)(a1 + 96))
          goto LABEL_104;
      }
      v77 = *v76;
      if (*((char *)*v76 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v114, (const std::string::value_type *)*v77, (std::string::size_type)v77[1]);
      }
      else
      {
        v78 = *(_OWORD *)v77;
        v114.__r_.__value_.__r.__words[2] = (std::string::size_type)v77[2];
        *(_OWORD *)&v114.__r_.__value_.__l.__data_ = v78;
      }
      turi::ml_data_internal::column_indexer::column_indexer(&__p, &v114, *((unsigned int *)*v76 + 6), *((char *)*v76 + 28));
      if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v114.__r_.__value_.__l.__data_);
      turi::ml_data_internal::column_indexer::initialize((turi::ml_data_internal::column_indexer *)&__p);
      v140[0] = &off_24D93F9D0;
      v140[1] = &__p;
      v141 = v140;
      turi::scoped_finally::scoped_finally(v139, (uint64_t)v140);
      v79 = v141;
      if (v141 == v140)
      {
        v79 = v140;
        v80 = 4;
      }
      else
      {
        if (!v141)
          goto LABEL_93;
        v80 = 5;
      }
      (*(void (**)(void))(*v79 + 8 * v80))();
LABEL_93:
      v81 = (__int128 *)operator new(0x30uLL);
      *(_QWORD *)v81 = &off_24D93FA50;
      *((_QWORD *)v81 + 1) = &v131;
      *((_QWORD *)v81 + 2) = &v132;
      *((_QWORD *)v81 + 3) = v116;
      *((_QWORD *)v81 + 4) = &v115;
      *((_QWORD *)v81 + 5) = &__p;
      v144 = v81;
      turi::in_parallel((turi::thread_pool *)&v142);
      v82 = v144;
      if (v144 == &v142)
      {
        v82 = &v142;
        v83 = 4;
      }
      else
      {
        if (!v144)
          goto LABEL_98;
        v83 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v82 + 8 * v83))();
LABEL_98:
      turi::scoped_finally::~scoped_finally((turi::scoped_finally *)v139);
      turi::ml_data_internal::column_indexer::reset_and_return_values((turi::ml_data_internal::column_indexer *)&__p, (uint64_t)&v142);
      v85 = 126 - 2 * __clz((uint64_t)(*((_QWORD *)&v142 + 1) - v142) >> 4);
      if (*((_QWORD *)&v142 + 1) == (_QWORD)v142)
        v86 = 0;
      else
        v86 = v85;
      std::__introsort<std::_ClassicAlgPolicy,turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_6 &,turi::flexible_type *,false>(v142, *((unsigned __int8 **)&v142 + 1), v86, 1, v84);
      turi::ml_data_internal::column_indexer::insert_values_into_index((unint64_t)(*v76)[4], (unsigned __int8 **)&v142);
      v139[0] = (void **)&v142;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v139);
      turi::mutex::~mutex(&v159);
      *(_QWORD *)&v142 = &v157;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v142);
      *(_QWORD *)&v142 = &v155;
      std::vector<std::vector<std::pair<unsigned long,turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v142);
      *(_QWORD *)&v142 = v154;
      std::vector<std::pair<turi::simple_spinlock,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v142);
      if (v152.i8[15] < 0)
        operator delete(__p);
      goto LABEL_103;
    }
LABEL_104:
    v63 = v112;
  }
  *(_QWORD *)(a1 + 128) = turi::ml_data_internal::estimate_row_block_size(v133, a1 + 48, (uint64_t)v116);
  v87 = operator new();
  turi::sarray<turi::ml_data_internal::row_data_block>::sarray(v87);
  v88 = (_QWORD *)(a1 + 136);
  std::shared_ptr<turi::sarray<turi::ml_data_internal::row_data_block>>::reset[abi:ne180100]<turi::sarray<turi::ml_data_internal::row_data_block>,void>((_QWORD *)(a1 + 136), v87);
  turi::sarray<turi::ml_data_internal::row_data_block>::open_for_write(*(_QWORD *)(a1 + 136), v63, 0);
  std::vector<turi::sframe_function_output_iterator<turi::ml_data_internal::row_data_block,std::function<void ()(turi::ml_data_internal::row_data_block const&)>,std::function<void ()(turi::ml_data_internal::row_data_block&&)>,std::function<void ()(turi::sframe_rows const&)>>>::vector(&v142, v63);
  std::vector<turi::mutex>::vector(v139, v63);
  if (*((_QWORD *)&v142 + 1) != (_QWORD)v142)
  {
    v89 = 0;
    for (j = 0; j < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v142 + 1) - v142) >> 5); ++j)
    {
      (*(void (**)(void **__return_ptr, _QWORD, unint64_t))(*(_QWORD *)*v88 + 32))(&__p, *v88, j);
      v91 = v142;
      v92 = v142 + v89;
      std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::operator=[abi:ne180100]((_QWORD *)(v142 + v89), (uint64_t)&__p);
      std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::operator=[abi:ne180100]((_QWORD *)(v92 + 32), (uint64_t)v154);
      std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::operator=[abi:ne180100]((_QWORD *)(v91 + v89 + 64), (uint64_t)v156);
      v93 = v158;
      if (v158 == v156)
      {
        v93 = v156;
        v94 = 4;
      }
      else
      {
        if (!v158)
          goto LABEL_112;
        v94 = 5;
      }
      (*(void (**)(void))(*v93 + 8 * v94))();
LABEL_112:
      v95 = v155;
      if (v155 == v154)
      {
        v95 = v154;
        v96 = 4;
      }
      else
      {
        if (!v155)
          goto LABEL_117;
        v96 = 5;
      }
      (*(void (**)(void))(*v95 + 8 * v96))();
LABEL_117:
      p_p = v153;
      if (v153 == &__p)
      {
        p_p = &__p;
        v98 = 4;
        goto LABEL_121;
      }
      if (v153)
      {
        v98 = 5;
LABEL_121:
        (*((void (**)(void))*p_p + v98))();
      }
      v89 += 96;
    }
  }
  v99 = (void **)operator new(0x50uLL);
  *v99 = &off_24D93FAD0;
  v99[1] = (void *)a1;
  v99[2] = &v133;
  v99[3] = v116;
  v99[4] = &v132;
  v99[5] = &v137;
  v99[6] = &v138;
  v99[7] = &v136;
  v99[8] = &v117;
  v99[9] = &v142;
  v153 = v99;
  turi::in_parallel((turi::thread_pool *)&__p);
  v100 = v153;
  if (v153 == &__p)
  {
    v101 = 4;
    v100 = &__p;
  }
  else
  {
    if (!v153)
      goto LABEL_128;
    v101 = 5;
  }
  (*((void (**)(void))*v100 + v101))();
LABEL_128:
  (*(void (**)(_QWORD))(*(_QWORD *)*v88 + 40))(*v88);
  turi::scoped_finally::execute_and_clear(&v126);
  if (v137)
    turi::scoped_finally::execute_and_clear(&v123);
  v102 = (uint64_t *)v117;
  if (v117 != v118)
  {
    v103 = (char *)v117 + 8;
    if ((char *)v117 + 8 != v118)
    {
      v104 = *(_QWORD *)v117;
      v105 = (char *)v117 + 8;
      do
      {
        v107 = *(_QWORD *)v105;
        v105 += 8;
        v106 = v107;
        v108 = v104 >= v107;
        if (v104 <= v107)
          v104 = v106;
        if (!v108)
          v102 = (uint64_t *)v103;
        v103 = v105;
      }
      while (v105 != v118);
    }
  }
  v109 = *v102;
  *(_QWORD *)(a1 + 40) = v109;
  if (*(_BYTE *)(a1 + 48))
    *(_QWORD *)(a1 + 40) = v109 - 1;
  __p = v139;
  std::vector<turi::mutex>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p = &v142;
  std::vector<turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p = v116;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (v117)
  {
    v118 = (char *)v117;
    operator delete(v117);
  }
  turi::scoped_finally::~scoped_finally((turi::scoped_finally *)&v123);
  turi::scoped_finally::~scoped_finally((turi::scoped_finally *)&v126);
  __p = &v129;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  v12 = v135;
  if (v135)
  {
LABEL_143:
    v110 = (unint64_t *)&v12->__shared_owners_;
    do
      v111 = __ldaxr(v110);
    while (__stlxr(v111 - 1, v110));
    if (!v111)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_21840A6D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a65;

  turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)&a65);
  a51 = (uint64_t)&a17;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a51);
  if (__p)
  {
    a21 = (uint64_t)__p;
    operator delete(__p);
  }
  turi::scoped_finally::~scoped_finally((turi::scoped_finally *)&a27);
  turi::scoped_finally::~scoped_finally((turi::scoped_finally *)&a30);
  a51 = (uint64_t)&a33;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a51);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a40);
  _Unwind_Resume(a1);
}

void turi::ml_data::_setup_untranslated_columns(uint64_t **this, const turi::sframe *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  turi::thread *v8;
  int64x2_t *v9;
  turi::thread *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  int v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  unsigned __int8 **v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t *v36;
  uint64_t *v37;
  char *v38;
  __int128 v39;
  int64x2_t v40;
  uint64_t *v41;
  uint64_t *v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  turi::thread_pool *v50;
  uint64_t *v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  void **v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  turi::thread_pool *instance;
  turi::thread *v61;
  turi::thread_pool *tls_data;
  unint64_t v63;
  turi::thread_pool *v64;
  uint64_t v65;
  double v66;
  turi::thread *v67;
  unint64_t v68;
  unint64_t i;
  uint64_t *v70;
  uint64_t v71;
  unint64_t v72;
  __int128 v73;
  uint64_t *v74;
  turi::ml_data *v75;
  _QWORD *v76;
  _QWORD v77[3];
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81[4];
  void **v82;
  int64x2_t v83;
  uint64_t *v84;
  char *v85;
  uint64_t v86;

  v4 = a3;
  v86 = *MEMORY[0x24BDAC8D0];
  v79 = a4;
  v80 = a3;
  v10 = (turi::thread *)this[19];
  v8 = (turi::thread *)this[20];
  v9 = (int64x2_t *)(this + 19);
  while (v8 != v10)
    v8 = (turi::thread *)std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)v8 - 16);
  this[20] = (uint64_t *)v10;
  v11 = **this;
  if ((*this)[1] != v11)
  {
    v12 = 0;
    do
    {
      v13 = (uint64_t *)(v11 + 16 * v12);
      v14 = *v13;
      v15 = (std::__shared_weak_count *)v13[1];
      if (v15)
      {
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldxr(p_shared_owners);
        while (__stxr(v17 + 1, p_shared_owners));
        v18 = *(_DWORD *)(v14 + 24);
        do
          v19 = __ldaxr(p_shared_owners);
        while (__stlxr(v19 - 1, p_shared_owners));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      else
      {
        v18 = *(_DWORD *)(v14 + 24);
      }
      v20 = *this;
      if (v18 == 5)
      {
        v21 = *v20 + 16 * v12;
        v22 = *(unsigned __int8 ***)v21;
        v23 = *(std::__shared_weak_count **)(v21 + 8);
        if (v23)
        {
          v24 = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldxr(v24);
          while (__stxr(v25 + 1, v24));
          do
            v26 = __ldaxr(v24);
          while (__stlxr(v26 - 1, v24));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
            std::__shared_weak_count::__release_weak(v23);
          }
        }
        v8 = (turi::thread *)turi::sframe::select_column((uint64_t)a2, v22, &v73);
        v28 = this[20];
        v27 = (unint64_t)this[21];
        if ((unint64_t)v28 >= v27)
        {
          v29 = ((uint64_t)v28 - v9->i64[0]) >> 4;
          v30 = v29 + 1;
          if ((unint64_t)(v29 + 1) >> 60)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          v31 = v27 - v9->i64[0];
          if (v31 >> 3 > v30)
            v30 = v31 >> 3;
          if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF0)
            v32 = 0xFFFFFFFFFFFFFFFLL;
          else
            v32 = v30;
          v85 = (char *)(this + 21);
          v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::flexible_type>>((uint64_t)(this + 21), v32);
          v35 = &v33[16 * v29];
          *(_OWORD *)v35 = v73;
          v73 = 0uLL;
          v37 = this[19];
          v36 = this[20];
          if (v36 == v37)
          {
            v40 = vdupq_n_s64((unint64_t)v36);
            v38 = &v33[16 * v29];
          }
          else
          {
            v38 = &v33[16 * v29];
            do
            {
              v39 = *((_OWORD *)v36 - 1);
              v36 -= 2;
              *((_OWORD *)v38 - 1) = v39;
              v38 -= 16;
              *v36 = 0;
              v36[1] = 0;
            }
            while (v36 != v37);
            v40 = *v9;
          }
          v41 = (uint64_t *)(v35 + 16);
          this[19] = (uint64_t *)v38;
          this[20] = (uint64_t *)(v35 + 16);
          v83 = v40;
          v42 = this[21];
          this[21] = (uint64_t *)&v33[16 * v34];
          v84 = v42;
          v82 = (void **)v40.i64[0];
          v8 = (turi::thread *)std::__split_buffer<std::shared_ptr<turi::group_aggregate_value>>::~__split_buffer((uint64_t)&v82);
          v43 = (std::__shared_weak_count *)*((_QWORD *)&v73 + 1);
          this[20] = v41;
          if (v43)
          {
            v44 = (unint64_t *)&v43->__shared_owners_;
            do
              v45 = __ldaxr(v44);
            while (__stlxr(v45 - 1, v44));
            if (!v45)
            {
              ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
              std::__shared_weak_count::__release_weak(v43);
            }
          }
        }
        else
        {
          *(_OWORD *)v28 = v73;
          this[20] = v28 + 2;
        }
        v20 = *this;
      }
      ++v12;
      v46 = v20;
      v11 = *v20;
    }
    while (v12 < (v46[1] - v11) >> 4);
    v4 = v80;
  }
  if (v4 || (*((_BYTE *)a2 + 288) ? (v47 = *((_QWORD *)a2 + 4)) : (v47 = 0), v79 != v47))
  {
    v48 = turi::thread::cpu_count(v8);
    v49 = this[20];
    v78 = v48;
    v50 = (turi::thread_pool *)std::vector<std::shared_ptr<turi::sarray_reader<turi::flexible_type>>>::vector(v77, ((char *)v49 - (char *)this[19]) >> 4);
    v51 = this[19];
    v52 = (char *)this[20] - (char *)v51;
    if (this[20] != v51)
    {
      v53 = 0;
      v54 = 0;
      do
      {
        turi::sarray<turi::flexible_type>::get_reader(v51[v53 / 8], (uint64_t *)&v82);
        std::shared_ptr<turi::sarray_reader<turi::flexible_type>>::operator=[abi:ne180100]<turi::sarray_reader<turi::flexible_type>,std::default_delete<turi::sarray_reader<turi::flexible_type>>,void>((_QWORD *)(v77[0] + v53), (uint64_t *)&v82);
        v55 = v82;
        v82 = 0;
        if (v55)
          (*((void (**)(void **))*v55 + 1))(v55);
        v56 = v9->i64[0];
        v57 = operator new();
        turi::sarray<turi::flexible_type>::sarray(v57);
        std::shared_ptr<turi::sarray<turi::flexible_type>>::reset[abi:ne180100]<turi::sarray<turi::flexible_type>,void>((_QWORD *)(v56 + v53), v57);
        turi::sarray<turi::flexible_type>::open_for_write(*(_QWORD *)(v9->i64[0] + v53), v78, 0);
        ++v54;
        v51 = this[19];
        v52 = (char *)this[20] - (char *)v51;
        v53 += 16;
      }
      while (v54 < v52 >> 4);
    }
    v58 = v52 >> 4;
    v59 = v78;
    *(_QWORD *)&v73 = &v78;
    *((_QWORD *)&v73 + 1) = &v80;
    v74 = &v79;
    v75 = (turi::ml_data *)this;
    v76 = v77;
    instance = (turi::thread_pool *)turi::thread_pool::get_instance(v50);
    v61 = (turi::thread *)turi::thread_pool::size(instance);
    tls_data = (turi::thread_pool *)turi::thread::get_tls_data(v61);
    v63 = v59 * v58;
    if (*((_BYTE *)tls_data + 8) || (unint64_t)v61 <= 1)
    {
      if (v63)
      {
        for (i = 0; i != v63; ++i)
          turi::ml_data::_setup_untranslated_columns(turi::sframe const&,unsigned long,unsigned long)::$_0::operator()((unint64_t **)&v73, i);
      }
    }
    else
    {
      v64 = (turi::thread_pool *)turi::thread_pool::get_instance(tls_data);
      turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)&v82, v64);
      v65 = 0;
      v66 = (double)v63 / (double)(unint64_t)v61;
      do
      {
        v67 = (turi::thread *)(v65 + 1);
        v68 = (unint64_t)(v66 * (double)(unint64_t)(v65 + 1) + 0.0);
        if ((turi::thread *)v65 == (turi::thread *)((char *)v61 - 1))
          v68 = v63;
        v81[2] = (unint64_t)(v66 * (double)(unint64_t)v65 + 0.0);
        v81[3] = v68;
        v81[0] = (uint64_t)boost::function0<void>::assign_to<void turi::parallel_for<turi::ml_data::_setup_untranslated_columns(turi::sframe const&,unsigned long,unsigned long)::$_0>(unsigned long,unsigned long,turi::ml_data::_setup_untranslated_columns(turi::sframe const&,unsigned long,unsigned long)::$_0 const&)::{lambda(void)#1}>(turi::ml_data::_setup_untranslated_columns(turi::sframe const&,unsigned long,unsigned long)::$_0)::stored_vtable
               + 1;
        v81[1] = (uint64_t)&v73;
        turi::parallel_task_queue::launch((uint64_t)&v82, (uint64_t)v81, v65);
        boost::function0<void>::~function0(v81);
        v65 = (uint64_t)v67;
      }
      while (v67 != v61);
      turi::parallel_task_queue::join((turi::parallel_task_queue *)&v82);
      turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)&v82);
    }
    v70 = this[19];
    if (this[20] != v70)
    {
      v71 = 0;
      v72 = 0;
      do
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v70[v71] + 40))(v70[v71]);
        ++v72;
        v70 = this[19];
        v71 += 2;
      }
      while (v72 < ((char *)this[20] - (char *)v70) >> 4);
    }
    v82 = (void **)v77;
    std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v82);
  }
}

void sub_21840AED0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)&a24);
  a9 = (void **)&a14;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void turi::ml_data::_reset_block_manager(turi::ml_data *this)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;

  v2 = operator new();
  v3 = v2;
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  v10 = *(_QWORD *)this;
  v11 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  turi::ml_data_internal::ml_data_block_manager::ml_data_block_manager(v2, &v10, (char *)this + 48, *((_QWORD *)this + 16), (char *)this + 136, (char *)this + 152);
  std::shared_ptr<turi::ml_data_internal::ml_data_block_manager>::reset[abi:ne180100]<turi::ml_data_internal::ml_data_block_manager,void>((_QWORD *)this + 22, v3);
  v7 = v11;
  if (v11)
  {
    v8 = (unint64_t *)&v11->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_21840B038(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_0::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/ml/ml_data/ml_data.cpp", 88);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"_metadata != nullptr", 20);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/ml/ml_data/ml_data.cpp", "operator()", 336, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_21840B16C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void std::shared_ptr<turi::sarray<turi::ml_data_internal::row_data_block>>::reset[abi:ne180100]<turi::sarray<turi::ml_data_internal::row_data_block>,void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  __int128 v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int128 v7;

  std::shared_ptr<turi::sarray<turi::ml_data_internal::row_data_block>>::shared_ptr[abi:ne180100]<turi::sarray<turi::ml_data_internal::row_data_block>,void>(&v7, a2);
  v3 = (std::__shared_weak_count *)a1[1];
  v4 = v7;
  *(_QWORD *)&v7 = *a1;
  *((_QWORD *)&v7 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void turi::sarray<turi::ml_data_internal::row_data_block>::open_for_write(uint64_t a1, uint64_t a2, char a3)
{
  turi::fileio::fixed_size_cache_manager *v6;
  uint64_t instance;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  void *v13[2];
  char v14;
  std::string v15;
  void *__p[2];
  char v17;
  std::string __str;

  v6 = (turi::fileio::fixed_size_cache_manager *)assert_msg(*(_BYTE *)(a1 + 248) == 0, "Attempting to init an SArray which has already been inited");
  instance = turi::fileio::fixed_size_cache_manager::get_instance(v6);
  std::string::basic_string[abi:ne180100]<0>(__p, ".sidx");
  turi::fileio::fixed_size_cache_manager::get_temp_cache_id(instance, (uint64_t)__p, &__str);
  if (v17 < 0)
    operator delete(__p[0]);
  std::string::operator=((std::string *)(a1 + 152), &__str);
  v8 = operator new();
  *(_QWORD *)v8 = &unk_24D93F5D8;
  *(_BYTE *)(v8 + 8) = 0;
  v9 = pthread_mutex_init((pthread_mutex_t *)(v8 + 24), 0);
  assert_msg(v9 == 0, "Mutex create error %d", v9);
  *(_QWORD *)(v8 + 160) = 0;
  *(_OWORD *)(v8 + 128) = 0u;
  *(_OWORD *)(v8 + 144) = 0u;
  *(_OWORD *)(v8 + 96) = 0u;
  *(_OWORD *)(v8 + 112) = 0u;
  *(_QWORD *)(v8 + 88) = 128;
  *(_OWORD *)(v8 + 168) = 0u;
  *(_OWORD *)(v8 + 184) = 0u;
  *(_OWORD *)(v8 + 200) = 0u;
  *(_OWORD *)(v8 + 216) = 0u;
  *(_OWORD *)(v8 + 232) = 0u;
  *(_OWORD *)(v8 + 248) = 0u;
  *(_BYTE *)(v8 + 376) = 0;
  *(_OWORD *)(v8 + 280) = 0u;
  *(_OWORD *)(v8 + 296) = 0u;
  *(_OWORD *)(v8 + 312) = 0u;
  *(_OWORD *)(v8 + 328) = 0u;
  *(_OWORD *)(v8 + 344) = 0u;
  *(_OWORD *)(v8 + 360) = 0u;
  *(_QWORD *)(v8 + 384) = 0;
  *(_QWORD *)(v8 + 392) = 0;
  *(_QWORD *)(v8 + 400) = 0;
  *(_QWORD *)(a1 + 176) = v8;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v15, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
  else
    v15 = __str;
  (*(void (**)(uint64_t, std::string *, uint64_t, uint64_t))(*(_QWORD *)v8 + 16))(v8, &v15, a2, 1);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v15.__r_.__value_.__l.__data_);
    if ((a3 & 1) == 0)
      goto LABEL_12;
  }
  else if ((a3 & 1) == 0)
  {
    goto LABEL_12;
  }
  v10 = *(_QWORD *)(a1 + 176);
  std::string::basic_string[abi:ne180100]<0>(v13, "disable_padding");
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v10 + 24))(v10, v13, 1);
  if (v14 < 0)
    operator delete(v13[0]);
LABEL_12:
  *(_WORD *)(a1 + 248) = 257;
  v11 = *(_QWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 176) + 32))(*(_QWORD *)(a1 + 176)) + 64);
  std::string::operator=((std::string *)(a1 + 8), (const std::string *)v11);
  v12 = *(_OWORD *)(v11 + 24);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(v11 + 40);
  *(_OWORD *)(a1 + 32) = v12;
  std::string::operator=((std::string *)(a1 + 56), (const std::string *)(v11 + 48));
  if (a1 + 8 != v11)
  {
    std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((char *)(a1 + 80), *(char **)(v11 + 72), *(_QWORD *)(v11 + 80), (uint64_t)(*(_QWORD *)(v11 + 80) - *(_QWORD *)(v11 + 72)) >> 3);
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)(a1 + 104), *(std::string **)(v11 + 96), *(__int128 **)(v11 + 104), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v11 + 104) - *(_QWORD *)(v11 + 96)) >> 3));
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>((uint64_t **)(a1 + 128), *(__int128 **)(v11 + 120), (__int128 *)(v11 + 128));
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_21840B4DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v28 - 33) < 0)
    operator delete(*(void **)(v28 - 56));
  _Unwind_Resume(exception_object);
}

void turi::ml_data_internal::column_indexer::~column_indexer(turi::ml_data_internal::column_indexer *this)
{
  void **v2;

  turi::mutex::~mutex((pthread_mutex_t *)((char *)this + 112));
  v2 = (void **)((char *)this + 80);
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = (void **)((char *)this + 56);
  std::vector<std::vector<std::pair<unsigned long,turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = (void **)((char *)this + 32);
  std::vector<std::pair<turi::simple_spinlock,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>>>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 23) < 0)
    operator delete(*(void **)this);
}

uint64_t *turi::scoped_finally::execute_and_clear(uint64_t *this)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = this;
  v2 = this[1];
  v3 = v2 - *this;
  if (v2 != *this)
  {
    v4 = v3 >> 5;
    v5 = (v3 & 0xFFFFFFFFFFFFFFE0) - 8;
    do
    {
      v6 = *(_QWORD *)(*v1 + v5);
      if (!v6)
        std::__throw_bad_function_call[abi:ne180100]();
      --v4;
      this = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 48))(v6);
      v5 -= 32;
    }
    while (v4);
    v2 = *v1;
    v7 = v1[1];
    if (v7 != *v1)
    {
      while (1)
      {
        v8 = v7 - 32;
        this = *(uint64_t **)(v7 - 8);
        if ((uint64_t *)(v7 - 32) == this)
          break;
        if (this)
        {
          v9 = 5;
LABEL_10:
          this = (uint64_t *)(*(uint64_t (**)(void))(*this + 8 * v9))();
        }
        v7 = v8;
        if (v8 == v2)
          goto LABEL_12;
      }
      this = (uint64_t *)(v7 - 32);
      v9 = 4;
      goto LABEL_10;
    }
  }
LABEL_12:
  v1[1] = v2;
  return this;
}

__n128 turi::ml_data::get_iterator@<Q0>(turi::ml_data *this@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  const turi::ml_data_internal::row_metadata *v8;
  __int128 v9;
  __n128 result;

  v8 = (turi::ml_data *)((char *)this + 48);
  assert_msg(*(_QWORD *)this != 0, "ml_data is not iterable if uninitialized.");
  *(_OWORD *)(a4 + 104) = 0u;
  *(_OWORD *)(a4 + 88) = 0u;
  *(_OWORD *)(a4 + 72) = 0u;
  *(_OWORD *)(a4 + 56) = 0u;
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_DWORD *)(a4 + 47) = 0;
  *(_QWORD *)(a4 + 120) = 0;
  *(_QWORD *)(a4 + 128) = -1;
  *(_OWORD *)(a4 + 200) = 0u;
  *(_OWORD *)(a4 + 216) = 0u;
  *(_OWORD *)(a4 + 232) = 0u;
  *(_OWORD *)(a4 + 248) = 0u;
  *(_QWORD *)(a4 + 264) = 0;
  *(_OWORD *)(a4 + 136) = 0u;
  *(_OWORD *)(a4 + 152) = 0u;
  *(_OWORD *)(a4 + 168) = 0u;
  *(_OWORD *)(a4 + 179) = 0u;
  *(_QWORD *)&v9 = -1;
  *((_QWORD *)&v9 + 1) = -1;
  *(_OWORD *)(a4 + 272) = v9;
  *(_OWORD *)(a4 + 288) = v9;
  *(_QWORD *)(a4 + 304) = 0;
  *(_QWORD *)(a4 + 312) = 0;
  *(_QWORD *)(a4 + 320) = -1;
  *(_QWORD *)(a4 + 328) = -1;
  *(_WORD *)(a4 + 336) = 0;
  turi::ml_data_iterator::setup((turi::ml_data_iterator *)a4, this, v8, a2, a3);
  return result;
}

void sub_21840B74C(_Unwind_Exception *a1)
{
  turi::ml_data_iterator *v1;

  turi::ml_data_iterator::~ml_data_iterator(v1);
  _Unwind_Resume(a1);
}

void std::shared_ptr<turi::ml_data_internal::ml_data_block_manager>::reset[abi:ne180100]<turi::ml_data_internal::ml_data_block_manager,void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  __int128 v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int128 v7;

  std::shared_ptr<turi::ml_data_internal::ml_data_block_manager>::shared_ptr[abi:ne180100]<turi::ml_data_internal::ml_data_block_manager,void>(&v7, a2);
  v3 = (std::__shared_weak_count *)a1[1];
  v4 = v7;
  *(_QWORD *)&v7 = *a1;
  *((_QWORD *)&v7 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_21840B928(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

uint64_t turi::sarray<turi::ml_data_internal::row_data_block>::sarray(uint64_t a1)
{
  int v2;

  *(_QWORD *)a1 = &unk_24D93F570;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = -1;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = a1 + 136;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  v2 = pthread_mutex_init((pthread_mutex_t *)(a1 + 184), 0);
  assert_msg(v2 == 0, "Mutex create error %d", v2);
  *(_WORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  return a1;
}

void sub_21840BA78(_Unwind_Exception *a1)
{
  uint64_t v1;
  turi::index_file_information *v2;
  void **v3;

  if (*(char *)(v1 + 175) < 0)
    operator delete(*v3);
  turi::index_file_information::~index_file_information(v2);
  _Unwind_Resume(a1);
}

void turi::sarray<turi::ml_data_internal::row_data_block>::~sarray(uint64_t a1)
{
  turi::sarray<turi::ml_data_internal::row_data_block>::~sarray(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t turi::sarray<turi::ml_data_internal::row_data_block>::set_num_segments(uint64_t a1, uint64_t a2)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::string v11;

  assert_msg(*(unsigned __int8 *)(a1 + 248), "Invalid SArray");
  assert_msg(*(unsigned __int8 *)(a1 + 249), "SArray not opened for writing");
  if (!a2 || (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 176) + 120))(*(_QWORD *)(a1 + 176)) == a2)
    return 0;
  v5 = *(_QWORD *)(a1 + 176);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = operator new();
  *(_QWORD *)v6 = &unk_24D93F5D8;
  *(_BYTE *)(v6 + 8) = 0;
  v7 = pthread_mutex_init((pthread_mutex_t *)(v6 + 24), 0);
  assert_msg(v7 == 0, "Mutex create error %d", v7);
  *(_QWORD *)(v6 + 160) = 0;
  *(_OWORD *)(v6 + 128) = 0u;
  *(_OWORD *)(v6 + 144) = 0u;
  *(_OWORD *)(v6 + 96) = 0u;
  *(_OWORD *)(v6 + 112) = 0u;
  *(_QWORD *)(v6 + 88) = 128;
  *(_OWORD *)(v6 + 168) = 0u;
  *(_OWORD *)(v6 + 184) = 0u;
  *(_OWORD *)(v6 + 200) = 0u;
  *(_OWORD *)(v6 + 216) = 0u;
  *(_OWORD *)(v6 + 232) = 0u;
  *(_OWORD *)(v6 + 248) = 0u;
  *(_BYTE *)(v6 + 376) = 0;
  *(_OWORD *)(v6 + 280) = 0u;
  *(_OWORD *)(v6 + 296) = 0u;
  *(_OWORD *)(v6 + 312) = 0u;
  *(_OWORD *)(v6 + 328) = 0u;
  *(_OWORD *)(v6 + 344) = 0u;
  *(_OWORD *)(v6 + 360) = 0u;
  *(_QWORD *)(v6 + 384) = 0;
  *(_QWORD *)(v6 + 392) = 0;
  *(_QWORD *)(v6 + 400) = 0;
  *(_QWORD *)(a1 + 176) = v6;
  if (*(char *)(a1 + 175) < 0)
    std::string::__init_copy_ctor_external(&v11, *(const std::string::value_type **)(a1 + 152), *(_QWORD *)(a1 + 160));
  else
    v11 = *(std::string *)(a1 + 152);
  (*(void (**)(uint64_t, std::string *, uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, &v11, a2, 1);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  v8 = *(_QWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 176) + 32))(*(_QWORD *)(a1 + 176)) + 64);
  if (v8 != a1 + 8)
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>((uint64_t **)(v8 + 120), *(__int128 **)(a1 + 128), (__int128 *)(a1 + 136));
  v9 = *(_QWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 176) + 32))(*(_QWORD *)(a1 + 176)) + 64);
  std::string::operator=((std::string *)(a1 + 8), (const std::string *)v9);
  v10 = *(_QWORD *)(v9 + 40);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(v9 + 24);
  *(_QWORD *)(a1 + 48) = v10;
  std::string::operator=((std::string *)(a1 + 56), (const std::string *)(v9 + 48));
  if (a1 + 8 != v9)
  {
    std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((char *)(a1 + 80), *(char **)(v9 + 72), *(_QWORD *)(v9 + 80), (uint64_t)(*(_QWORD *)(v9 + 80) - *(_QWORD *)(v9 + 72)) >> 3);
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)(a1 + 104), *(std::string **)(v9 + 96), *(__int128 **)(v9 + 104), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v9 + 104) - *(_QWORD *)(v9 + 96)) >> 3));
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>((uint64_t **)(a1 + 128), *(__int128 **)(v9 + 120), (__int128 *)(v9 + 128));
  }
  return 1;
}

void sub_21840BD0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t turi::sarray<turi::ml_data_internal::row_data_block>::num_segments(uint64_t a1)
{
  assert_msg(*(unsigned __int8 *)(a1 + 248), "Invalid SArray");
  return *(_QWORD *)(a1 + 40);
}

_QWORD *turi::sarray<turi::ml_data_internal::row_data_block>::get_output_iterator@<X0>(_QWORD *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *result;
  uint64_t v11;
  _QWORD v12[3];
  _QWORD *v13;
  _QWORD v14[3];
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  assert_msg(*((unsigned __int8 *)a1 + 248), "Invalid SArray");
  assert_msg(*((unsigned __int8 *)a1 + 249), "SArray not opened for writing");
  v16 = (_QWORD *)a1[22];
  if (!v16)
  {
    v14[0] = &v16;
    turi::sarray<std::string>::get_output_iterator(unsigned long)::{lambda(void)#1}::operator()();
  }
  v14[0] = a2;
  v12[0] = (*(uint64_t (**)(_QWORD *))(*a1 + 24))(a1);
  if (v12[0] <= a2)
  {
    v16 = v14;
    v17 = v12;
    turi::sarray<std::string>::get_output_iterator(unsigned long)::{lambda(void)#2}::operator()();
  }
  v16 = &unk_24D93F698;
  v17 = a1;
  v18 = a2;
  v19 = &v16;
  v14[0] = &unk_24D93F728;
  v14[1] = a1;
  v14[2] = a2;
  v15 = v14;
  v12[0] = &unk_24D93F7B8;
  v13 = v12;
  turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>::sframe_function_output_iterator(a3, (uint64_t)&v16, (uint64_t)v14, (uint64_t)v12);
  v6 = v13;
  if (v13 == v12)
  {
    v7 = 4;
    v6 = v12;
  }
  else
  {
    if (!v13)
      goto LABEL_8;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_8:
  v8 = v15;
  if (v15 == v14)
  {
    v9 = 4;
    v8 = v14;
  }
  else
  {
    if (!v15)
      goto LABEL_13;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_13:
  result = v19;
  if (v19 == &v16)
  {
    v11 = 4;
    result = &v16;
  }
  else
  {
    if (!v19)
      return result;
    v11 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v11))();
}

void sub_21840BF38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, char *a17, char a18, uint64_t a19, uint64_t a20,char *a21)
{
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;

  v22 = a13;
  if (a13 == v21)
  {
    v23 = 4;
    v22 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v23 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v22 + 8 * v23))();
LABEL_6:
  v24 = a17;
  if (a17 == &a14)
  {
    v25 = 4;
    v24 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_11;
    v25 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v24 + 8 * v25))();
LABEL_11:
  v26 = a21;
  if (a21 == &a18)
  {
    v27 = 4;
    v26 = &a18;
  }
  else
  {
    if (!a21)
      goto LABEL_16;
    v27 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v26 + 8 * v27))();
LABEL_16:
  _Unwind_Resume(a1);
}

uint64_t turi::sarray<turi::ml_data_internal::row_data_block>::~sarray(uint64_t a1)
{
  void *v2;
  void **v4;

  *(_QWORD *)a1 = &unk_24D93F570;
  v4 = (void **)(a1 + 256);
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v4);
  turi::mutex::~mutex((pthread_mutex_t *)(a1 + 184));
  if (*(char *)(a1 + 175) < 0)
    operator delete(*(void **)(a1 + 152));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1 + 128, *(_QWORD **)(a1 + 136));
  v4 = (void **)(a1 + 104);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  v2 = *(void **)(a1 + 80);
  if (v2)
  {
    *(_QWORD *)(a1 + 88) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::~sarray_group_format_writer_v2(uint64_t a1)
{
  void **v2;
  void **v4;

  *(_QWORD *)a1 = &unk_24D93F5D8;
  v2 = (void **)(a1 + 24);
  v4 = (void **)(a1 + 384);
  std::vector<turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::column_buffer,std::allocator<turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::column_buffer>>::__destroy_vector::operator()[abi:ne180100](&v4);
  turi::v2_block_impl::block_writer::~block_writer(v2);
  return a1;
}

{
  void **v2;
  void **v4;

  *(_QWORD *)a1 = &unk_24D93F5D8;
  v2 = (void **)(a1 + 24);
  v4 = (void **)(a1 + 384);
  std::vector<turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::column_buffer,std::allocator<turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::column_buffer>>::__destroy_vector::operator()[abi:ne180100](&v4);
  turi::v2_block_impl::block_writer::~block_writer(v2);
  return MEMORY[0x219A19A08](a1, 0x10B3C40E6DD008DLL);
}

void turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::open(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v4;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::string::size_type v9;
  std::string __p;

  v4 = a4;
  if (a4)
    v6 = a3;
  else
    v6 = 0;
  *(_BYTE *)(a1 + 8) = 1;
  v7 = a1 + 24;
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  turi::v2_block_impl::block_writer::init(v7, &__p, v6, v4);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *(_QWORD *)(a1 + 16) = v6;
  std::vector<turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::column_buffer,std::allocator<turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::column_buffer>>::resize((uint64_t *)(a1 + 384), v4);
  if (v4)
  {
    v8 = 8;
    do
    {
      std::vector<std::vector<turi::ml_data_internal::row_data_block>>::resize((uint64_t *)(*(_QWORD *)(a1 + 384) + v8), v6);
      v8 += 56;
      --v4;
    }
    while (v4);
  }
  if (*(_QWORD *)(a1 + 16))
  {
    v9 = 0;
    do
      turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::open_segment(a1, v9++);
    while (v9 < *(_QWORD *)(a1 + 16));
  }
}

void sub_21840C238(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::close(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;

  if (!*(_BYTE *)(a1 + 8))
    turi::sarray_group_format_writer_v2<turi::flexible_type>::close(void)::{lambda(void)#1}::operator()();
  *(_BYTE *)(a1 + 8) = 0;
  if (*(_QWORD *)(a1 + 16))
  {
    v2 = 0;
    do
    {
      if (*(_QWORD *)(a1 + 392) != *(_QWORD *)(a1 + 384))
      {
        v3 = 0;
        do
          turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::flush_block(a1, v3++, v2);
        while (v3 < 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 392) - *(_QWORD *)(a1 + 384)) >> 3));
      }
      turi::v2_block_impl::block_writer::close_segment((turi::v2_block_impl::block_writer *)(a1 + 24), v2++);
    }
    while (v2 < *(_QWORD *)(a1 + 16));
  }
}

void turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::write_segment(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t *v10;
  _QWORD *v11;
  uint64_t v12;

  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 384) + 56 * a2 + 8);
  v8 = v7 + 24 * a3;
  v11 = *(_QWORD **)(v8 + 8);
  v10 = (uint64_t *)(v8 + 8);
  v9 = v11;
  if ((unint64_t)v11 >= v10[1])
  {
    v12 = std::vector<turi::ml_data_internal::row_data_block>::__push_back_slow_path<turi::ml_data_internal::row_data_block const&>((uint64_t *)(v7 + 24 * a3), a4);
  }
  else
  {
    std::allocator<turi::ml_data_internal::row_data_block>::construct[abi:ne180100]<turi::ml_data_internal::row_data_block,turi::ml_data_internal::row_data_block&>((uint64_t)(v10 + 1), v9, a4);
    v12 = (uint64_t)(v9 + 6);
    *v10 = (uint64_t)(v9 + 6);
  }
  *v10 = v12;
  if (0xAAAAAAAAAAAAAAABLL
     * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 384) + 56 * a2 + 8) + 24 * a3 + 8)
                - *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 384) + 56 * a2 + 8) + 24 * a3)) >> 4) >= *(_QWORD *)(*(_QWORD *)(a1 + 384) + 56 * a2 + 32))
    turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::flush_block(a1, a2, a3);
}

{
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;

  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 384) + 56 * a2 + 8);
  v8 = v7 + 24 * a3;
  v9 = *(_QWORD **)(v8 + 8);
  v10 = *(_QWORD *)(v8 + 16);
  v11 = (uint64_t *)(v8 + 8);
  if ((unint64_t)v9 >= v10)
  {
    v12 = std::vector<turi::ml_data_internal::row_data_block>::__push_back_slow_path<turi::ml_data_internal::row_data_block>((uint64_t *)(v7 + 24 * a3), a4);
  }
  else
  {
    *v9 = 0;
    v9[1] = 0;
    v9[2] = 0;
    *(_OWORD *)v9 = *(_OWORD *)a4;
    v9[2] = *(_QWORD *)(a4 + 16);
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    v9[3] = 0;
    v9[4] = 0;
    v9[5] = 0;
    *(_OWORD *)(v9 + 3) = *(_OWORD *)(a4 + 24);
    v9[5] = *(_QWORD *)(a4 + 40);
    *(_QWORD *)(a4 + 24) = 0;
    *(_QWORD *)(a4 + 32) = 0;
    *(_QWORD *)(a4 + 40) = 0;
    v12 = (uint64_t)(v9 + 6);
  }
  *v11 = v12;
  if (0xAAAAAAAAAAAAAAABLL
     * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 384) + 56 * a2 + 8) + 24 * a3 + 8)
                - *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 384) + 56 * a2 + 8) + 24 * a3)) >> 4) >= *(_QWORD *)(*(_QWORD *)(a1 + 384) + 56 * a2 + 32))
    turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::flush_block(a1, a2, a3);
}

void sub_21840C40C(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;

  *v2 = v1;
  _Unwind_Resume(a1);
}

uint64_t turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::write_segment()
{
  return assert_msg(0, "Cannot write to general SArray with sframe_rows");
}

void turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::write_column(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;

  v4 = *a4;
  v5 = a4[1];
  if (*a4 != v5)
  {
    v8 = *(_QWORD *)(a1 + 384) + 56 * a2;
    v9 = (_QWORD *)(v8 + 32);
    v10 = (uint64_t *)(*(_QWORD *)(v8 + 8) + 24 * a3);
    v11 = v10 + 1;
    v12 = v10 + 2;
    do
    {
      v13 = *v11;
      if ((unint64_t)*v11 >= *v12)
      {
        v14 = std::vector<turi::ml_data_internal::row_data_block>::__push_back_slow_path<turi::ml_data_internal::row_data_block const&>(v10, v4);
      }
      else
      {
        std::allocator<turi::ml_data_internal::row_data_block>::construct[abi:ne180100]<turi::ml_data_internal::row_data_block,turi::ml_data_internal::row_data_block&>((uint64_t)v12, (_QWORD *)*v11, v4);
        v14 = v13 + 48;
        *v11 = v13 + 48;
      }
      *v11 = v14;
      if (0xAAAAAAAAAAAAAAABLL * ((v14 - *v10) >> 4) >= *v9)
        turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::flush_block(a1, a2, a3);
      v4 += 48;
    }
    while (v4 != v5);
  }
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;

  v4 = *a4;
  v5 = a4[1];
  if (*a4 != v5)
  {
    v8 = *(_QWORD *)(a1 + 384);
    v9 = (uint64_t *)(*(_QWORD *)(v8 + 56 * a2 + 8) + 24 * a3);
    v10 = *(_QWORD *)(v8 + 56 * a2 + 32);
    v11 = v9 + 1;
    v12 = v9 + 2;
    do
    {
      v13 = *v11;
      if ((unint64_t)*v11 >= *v12)
      {
        v14 = std::vector<turi::ml_data_internal::row_data_block>::__push_back_slow_path<turi::ml_data_internal::row_data_block const&>(v9, v4);
      }
      else
      {
        std::allocator<turi::ml_data_internal::row_data_block>::construct[abi:ne180100]<turi::ml_data_internal::row_data_block,turi::ml_data_internal::row_data_block&>((uint64_t)v12, (_QWORD *)*v11, v4);
        v14 = v13 + 48;
        *v11 = v13 + 48;
      }
      *v11 = v14;
      if (0xAAAAAAAAAAAAAAABLL * ((v14 - *v9) >> 4) >= v10)
      {
        turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::flush_block(a1, a2, a3);
        v10 = *(_QWORD *)(*(_QWORD *)(a1 + 384) + 56 * a2 + 32);
      }
      v4 += 48;
    }
    while (v4 != v5);
  }
}

void sub_21840C62C(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;

  *v2 = v1;
  _Unwind_Resume(a1);
}

void sub_21840C74C(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;

  *v2 = v1;
  _Unwind_Resume(a1);
}

void **turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::flush_segment(void **result, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (result[49] != result[48])
  {
    v3 = (uint64_t)result;
    v4 = 0;
    v5 = 8;
    do
    {
      turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::flush_block(v3, v4, a2);
      result = std::vector<turi::ml_data_internal::row_data_block>::shrink_to_fit((void **)(*(_QWORD *)(*(_QWORD *)(v3 + 384) + v5)
                                                                                          + 24 * a2));
      ++v4;
      v5 += 56;
    }
    while (v4 < 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(v3 + 392) - *(_QWORD *)(v3 + 384)) >> 3));
  }
  return result;
}

void std::vector<turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::column_buffer,std::allocator<turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::column_buffer>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::column_buffer,std::allocator<turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::column_buffer>>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, (turi::simple_spinlock *)*v2);
    operator delete(**a1);
  }
}

void std::vector<turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::column_buffer,std::allocator<turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::column_buffer>>::__base_destruct_at_end[abi:ne180100](uint64_t a1, turi::simple_spinlock *a2)
{
  turi::simple_spinlock *v4;
  turi::simple_spinlock *v5;
  void **v6;

  v4 = *(turi::simple_spinlock **)(a1 + 8);
  if (v4 != a2)
  {
    do
    {
      v5 = (turi::simple_spinlock *)((char *)v4 - 56);
      v6 = (void **)((char *)v4 - 48);
      std::vector<std::vector<turi::ml_data_internal::row_data_block>>::__destroy_vector::operator()[abi:ne180100](&v6);
      turi::simple_spinlock::~simple_spinlock(v5);
      v4 = v5;
    }
    while (v5 != a2);
  }
  *(_QWORD *)(a1 + 8) = a2;
}

void std::vector<std::vector<turi::ml_data_internal::row_data_block>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        v6 = v4;
        std::vector<turi::ml_data_internal::row_data_block>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::column_buffer,std::allocator<turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::column_buffer>>::resize(uint64_t *a1, unint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;

  v2 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 3);
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::column_buffer,std::allocator<turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::column_buffer>>::__append(a1, v4);
  }
  else if (!v3)
  {
    std::vector<turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::column_buffer,std::allocator<turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::column_buffer>>::__base_destruct_at_end[abi:ne180100]((uint64_t)a1, (turi::simple_spinlock *)(*a1 + 56 * a2));
  }
}

void std::vector<std::vector<turi::ml_data_internal::row_data_block>>::resize(uint64_t *a1, unint64_t a2)
{
  void **v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  void **v8;

  v3 = (void **)a1[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<turi::ml_data_internal::row_data_block>>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 24 * a2;
    while (v3 != (void **)v7)
    {
      v3 -= 3;
      v8 = v3;
      std::vector<turi::ml_data_internal::row_data_block>::__destroy_vector::operator()[abi:ne180100](&v8);
    }
    a1[1] = v7;
  }
}

void turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::open_segment(uint64_t a1, std::string::size_type a2)
{
  int *v4;
  file_logger *v5;
  file_logger *started;
  _QWORD *v7;
  _QWORD *v8;
  const std::locale::facet *v9;
  turi::v2_block_impl::block_writer *v10;
  uint64_t index_info;
  std::string::size_type size;
  std::string *v13;
  std::string::size_type v14;
  _QWORD *v15;
  std::locale::__imp *locale;
  char *v17;
  const std::locale::facet *v18;
  __int128 v19;
  int v20;
  int *v21;
  file_logger *v22;
  file_logger *v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  const std::locale::facet *v29;
  uint64_t v30;
  _QWORD *exception;
  _QWORD *v32;
  std::string v33;
  std::string v34;
  std::string v35;
  std::locale v36;
  uint64_t v37;
  _QWORD v38[10];
  char v39;
  uint64_t v40;
  _DWORD v41[2];
  std::string __str;
  char v43[17];

  v4 = (int *)global_logger();
  if (v4[169] <= 1)
  {
    if (cppipc::must_cancel((cppipc *)v4))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 1, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray_file_format_v2.hpp", "open_segment", 797, 1);
    v7 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v7 && *((_BYTE *)v7 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7 + 2, (uint64_t)"Function entry", 14);
    v8 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v8)
    {
      if (*((_BYTE *)v8 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(_QWORD *)(v8[2] - 24) + 16));
        v9 = std::locale::use_facet(&v36, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
        std::locale::~locale(&v36);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  assert_msg(*(unsigned __int8 *)(a1 + 8), "sarray not open");
  v10 = (turi::v2_block_impl::block_writer *)(a1 + 24);
  index_info = turi::v2_block_impl::block_writer::get_index_info(v10);
  if (*(char *)(index_info + 23) < 0)
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)index_info, *(_QWORD *)(index_info + 8));
  else
    __str = *(std::string *)index_info;
  *(_DWORD *)((char *)v41 + 3) = 0;
  v41[0] = 0;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v36);
  size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __str.__r_.__value_.__l.__size_;
  std::string::basic_string(&v35, &__str, 0, size - 5, (std::allocator<char> *)v43);
  if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v13 = &v35;
  else
    v13 = (std::string *)v35.__r_.__value_.__r.__words[0];
  if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v14 = HIBYTE(v35.__r_.__value_.__r.__words[2]);
  else
    v14 = v35.__r_.__value_.__l.__size_;
  v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v37, (uint64_t)v13, v14);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)".", 1);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v35.__r_.__value_.__l.__data_);
  locale = v36.__locale_;
  v17 = (char *)&v36 + *((_QWORD *)v36.__locale_ - 3);
  if (*((_DWORD *)v17 + 36) == -1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)&v36 + *((_QWORD *)v36.__locale_ - 3)));
    v18 = std::locale::use_facet((const std::locale *)&v35, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v18->__vftable[2].~facet_0)(v18, 32);
    std::locale::~locale((std::locale *)&v35);
    locale = v36.__locale_;
  }
  *((_DWORD *)v17 + 36) = 48;
  *(_QWORD *)((char *)v38 + *((_QWORD *)locale - 3)) = 4;
  std::ostream::operator<<();
  std::stringbuf::str();
  v19 = *(_OWORD *)&v35.__r_.__value_.__l.__data_;
  v41[0] = v35.__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)v41 + 3) = *(_DWORD *)((char *)&v35.__r_.__value_.__r.__words[2] + 3);
  v20 = SHIBYTE(v35.__r_.__value_.__r.__words[2]);
  v21 = (int *)global_logger();
  if (v21[169] > 1)
    goto LABEL_39;
  if (cppipc::must_cancel((cppipc *)v21))
    log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
  v22 = (file_logger *)global_logger();
  v23 = file_logger::start_stream(v22, 1, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray_file_format_v2.hpp", "open_segment", 810, 1);
  v24 = pthread_getspecific(*((_QWORD *)v23 + 74));
  if (v24 && *((_BYTE *)v24 + 280))
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24 + 2, (uint64_t)"Open segment ", 13);
  v25 = file_logger::operator<<<unsigned long>((uint64_t)v23);
  v26 = pthread_getspecific(*(_QWORD *)(v25 + 592));
  if (v26 && *((_BYTE *)v26 + 280))
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26 + 2, (uint64_t)" for write on ", 14);
  if (v20 < 0)
  {
    std::string::__init_copy_ctor_external(&v34, (const std::string::value_type *)v19, *((std::string::size_type *)&v19 + 1));
  }
  else
  {
    *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v19;
    LODWORD(v34.__r_.__value_.__r.__words[2]) = v41[0];
    *(_DWORD *)((char *)&v34.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v41 + 3);
    *((_BYTE *)&v34.__r_.__value_.__s + 23) = v20;
  }
  v27 = file_logger::operator<<<std::string>(v25, (uint64_t)&v34);
  v28 = pthread_getspecific(*(_QWORD *)(v27 + 592));
  if (v28)
  {
    if (*((_BYTE *)v28 + 280))
    {
      std::ios_base::getloc((const std::ios_base *)((char *)v28 + *(_QWORD *)(v28[2] - 24) + 16));
      v29 = std::locale::use_facet((const std::locale *)&v35, MEMORY[0x24BEDB350]);
      ((void (*)(const std::locale::facet *, uint64_t))v29->__vftable[2].~facet_0)(v29, 10);
      std::locale::~locale((std::locale *)&v35);
      std::ostream::put();
      std::ostream::flush();
      file_logger::stream_flush((file_logger *)v27);
      if (*(_DWORD *)(v27 + 600) == 7)
      {
        __print_back_trace();
        v32 = __cxa_allocate_exception(8uLL);
        *v32 = "LOG_FATAL encountered";
        __cxa_throw(v32, MEMORY[0x24BEDB718], 0);
      }
    }
  }
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v34.__r_.__value_.__l.__data_);
    if ((v20 & 0x80000000) == 0)
      goto LABEL_40;
  }
  else
  {
LABEL_39:
    if ((v20 & 0x80000000) == 0)
    {
LABEL_40:
      *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v19;
      LODWORD(v33.__r_.__value_.__r.__words[2]) = v41[0];
      *(_DWORD *)((char *)&v33.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v41 + 3);
      *((_BYTE *)&v33.__r_.__value_.__s + 23) = v20;
      goto LABEL_43;
    }
  }
  std::string::__init_copy_ctor_external(&v33, (const std::string::value_type *)v19, *((std::string::size_type *)&v19 + 1));
LABEL_43:
  turi::v2_block_impl::block_writer::open_segment(v10, a2, (std::string::size_type)&v33);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
  v36.__locale_ = (std::locale::__imp *)*MEMORY[0x24BEDB7F0];
  v30 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(std::locale *)((char *)&v36 + *((_QWORD *)v36.__locale_ - 3)) = *(std::locale *)(MEMORY[0x24BEDB7F0] + 64);
  v37 = v30;
  v38[0] = MEMORY[0x24BEDB848] + 16;
  if (v39 < 0)
    operator delete((void *)v38[8]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x219A198F4](&v40);
  if (v20 < 0)
    operator delete((void *)v19);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_21840CF34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,std::locale a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,std::locale a28)
{
  void *v28;
  int v29;
  uint64_t v30;

  std::locale::~locale(&a22);
  if (a21 < 0)
    operator delete(__p);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a28);
  if (v29 < 0)
    operator delete(v28);
  if (*(char *)(v30 - 105) < 0)
    operator delete(*(void **)(v30 - 128));
  _Unwind_Resume(a1);
}

uint64_t std::vector<turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::column_buffer,std::allocator<turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::column_buffer>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  _QWORD v16[5];

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(result - 8);
  if (0x6DB6DB6DB6DB6DB7 * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = v7 + 56 * a2;
      do
      {
        *(_OWORD *)v7 = 0uLL;
        *(_OWORD *)(v7 + 16) = 0uLL;
        *(_QWORD *)(v7 + 40) = 0;
        *(_QWORD *)(v7 + 48) = 0;
        *(_QWORD *)(v7 + 32) = 16;
        v7 += 56;
      }
      while (v7 != v13);
      v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0x6DB6DB6DB6DB6DB7 * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0x492492492492492)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = 0x6DB6DB6DB6DB6DB7 * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x249249249249249)
      v11 = 0x492492492492492;
    else
      v11 = v9;
    v16[4] = result;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::toolkit_class_specification>>(result, v11);
    else
      v12 = 0;
    v14 = &v12[56 * v8];
    v16[0] = v12;
    v16[1] = v14;
    v16[3] = &v12[56 * v11];
    v15 = &v14[56 * a2];
    do
    {
      *(_OWORD *)v14 = 0uLL;
      *((_OWORD *)v14 + 1) = 0uLL;
      *((_QWORD *)v14 + 5) = 0;
      *((_QWORD *)v14 + 6) = 0;
      *((_QWORD *)v14 + 4) = 16;
      v14 += 56;
    }
    while (v14 != v15);
    v16[2] = v15;
    std::vector<turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::column_buffer,std::allocator<turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::column_buffer>>::__swap_out_circular_buffer(a1, v16);
    return std::__split_buffer<turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::column_buffer,std::allocator<turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::column_buffer> &>::~__split_buffer((uint64_t)v16);
  }
  return result;
}

void sub_21840D160(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::column_buffer,std::allocator<turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::column_buffer> &>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::column_buffer,std::allocator<turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::column_buffer>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::column_buffer>,std::reverse_iterator<turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::column_buffer*>,std::reverse_iterator<turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::column_buffer*>,std::reverse_iterator<turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::column_buffer*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::column_buffer>,std::reverse_iterator<turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::column_buffer*>,std::reverse_iterator<turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::column_buffer*>,std::reverse_iterator<turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::column_buffer*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  v14 = 0;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v9 -= 56;
      std::allocator<turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::column_buffer>::construct[abi:ne180100]<turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::column_buffer,turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::column_buffer const&>(a1, (__n128 *)(v7 - 56), v9);
      v7 = *((_QWORD *)&v16 + 1) - 56;
      *((_QWORD *)&v16 + 1) -= 56;
    }
    while (v9 != a5);
    v11 = v16;
  }
  v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::column_buffer>,std::reverse_iterator<turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::column_buffer*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

void sub_21840D29C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::column_buffer>,std::reverse_iterator<turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::column_buffer*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

__n128 std::allocator<turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::column_buffer>::construct[abi:ne180100]<turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::column_buffer,turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::column_buffer const&>(uint64_t a1, __n128 *a2, uint64_t a3)
{
  __n128 result;

  a2->n128_u8[0] = 0;
  a2[1].n128_u64[0] = 0;
  a2[1].n128_u64[1] = 0;
  a2->n128_u64[1] = 0;
  std::vector<std::vector<turi::ml_data_internal::row_data_block>>::__init_with_size[abi:ne180100]<std::vector<turi::ml_data_internal::row_data_block>*,std::vector<turi::ml_data_internal::row_data_block>*>(&a2->n128_u64[1], *(uint64_t **)(a3 + 8), *(uint64_t **)(a3 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a3 + 16) - *(_QWORD *)(a3 + 8)) >> 3));
  result = *(__n128 *)(a3 + 32);
  a2[3].n128_u64[0] = *(_QWORD *)(a3 + 48);
  a2[2] = result;
  return result;
}

void sub_21840D30C(_Unwind_Exception *a1)
{
  turi::simple_spinlock *v1;

  turi::simple_spinlock::~simple_spinlock(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::vector<turi::ml_data_internal::row_data_block>>::__init_with_size[abi:ne180100]<std::vector<turi::ml_data_internal::row_data_block>*,std::vector<turi::ml_data_internal::row_data_block>*>(_QWORD *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<turi::ml_data_internal::row_data_block>>,std::vector<turi::ml_data_internal::row_data_block>*,std::vector<turi::ml_data_internal::row_data_block>*,std::vector<turi::ml_data_internal::row_data_block>*>((uint64_t)(v6 + 2), a2, a3, (_QWORD *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_21840D384(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::vector<turi::ml_data_internal::row_data_block>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<turi::ml_data_internal::row_data_block>>,std::vector<turi::ml_data_internal::row_data_block>*,std::vector<turi::ml_data_internal::row_data_block>*,std::vector<turi::ml_data_internal::row_data_block>*>(uint64_t a1, uint64_t *a2, uint64_t *a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t *v6;
  _QWORD v8[3];
  char v9;
  _QWORD *v10;
  _QWORD *v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      std::vector<turi::ml_data_internal::row_data_block>::__init_with_size[abi:ne180100]<turi::ml_data_internal::row_data_block*,turi::ml_data_internal::row_data_block*>(v4, *v6, v6[1], 0xAAAAAAAAAAAAAAABLL * ((v6[1] - *v6) >> 4));
      v4 = v11 + 3;
      v11 += 3;
      v6 += 3;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<turi::ml_data_internal::row_data_block>>,std::vector<turi::ml_data_internal::row_data_block>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_21840D44C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<turi::ml_data_internal::row_data_block>>,std::vector<turi::ml_data_internal::row_data_block>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<turi::ml_data_internal::row_data_block>::__init_with_size[abi:ne180100]<turi::ml_data_internal::row_data_block*,turi::ml_data_internal::row_data_block*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::ml_data_internal::row_data_block>,turi::ml_data_internal::row_data_block*,turi::ml_data_internal::row_data_block*,turi::ml_data_internal::row_data_block*>((uint64_t)(v6 + 2), a2, a3, (_QWORD *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_21840D4C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<turi::ml_data_internal::row_data_block>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::ml_data_internal::row_data_block>,turi::ml_data_internal::row_data_block*,turi::ml_data_internal::row_data_block*,turi::ml_data_internal::row_data_block*>(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t v6;
  _QWORD v9[3];
  char v10;
  _QWORD *v11;
  _QWORD *v12;

  v4 = a4;
  v11 = a4;
  v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      std::allocator<turi::ml_data_internal::row_data_block>::construct[abi:ne180100]<turi::ml_data_internal::row_data_block,turi::ml_data_internal::row_data_block&>(a1, v4, v6);
      v6 += 48;
      v4 = v12 + 6;
      v12 += 6;
    }
    while (v6 != a3);
  }
  v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::ml_data_internal::row_data_block>,turi::ml_data_internal::row_data_block*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_21840D578(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::ml_data_internal::row_data_block>,turi::ml_data_internal::row_data_block*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::allocator<turi::ml_data_internal::row_data_block>::construct[abi:ne180100]<turi::ml_data_internal::row_data_block,turi::ml_data_internal::row_data_block&>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(a2, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3);
  a2[3] = 0;
  a2[4] = 0;
  a2[5] = 0;
  return std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(a2 + 3, *(uint64_t **)(a3 + 24), *(uint64_t **)(a3 + 32), (uint64_t)(*(_QWORD *)(a3 + 32) - *(_QWORD *)(a3 + 24)) >> 4);
}

void sub_21840D5E4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::ml_data_internal::row_data_block>,turi::ml_data_internal::row_data_block*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<turi::ml_data_internal::row_data_block>,turi::ml_data_internal::row_data_block*>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<turi::ml_data_internal::row_data_block>,turi::ml_data_internal::row_data_block*>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (uint64_t *)a1[1];
  v1 = (uint64_t *)a1[2];
  v3 = *v1;
  v4 = *v2;
  if (*v1 != *v2)
  {
    v5 = *a1;
    do
    {
      v3 -= 48;
      std::allocator<turi::ml_data_internal::row_data_block>::destroy[abi:ne180100](v5, v3);
    }
    while (v3 != v4);
  }
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<turi::ml_data_internal::row_data_block>>,std::vector<turi::ml_data_internal::row_data_block>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<turi::ml_data_internal::row_data_block>>,std::vector<turi::ml_data_internal::row_data_block>*>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<turi::ml_data_internal::row_data_block>>,std::vector<turi::ml_data_internal::row_data_block>*>::operator()[abi:ne180100](uint64_t a1)
{
  void **v1;
  void **v2;
  void **v3;

  v1 = **(void ****)(a1 + 16);
  v2 = **(void ****)(a1 + 8);
  while (v1 != v2)
  {
    v1 -= 3;
    v3 = v1;
    std::vector<turi::ml_data_internal::row_data_block>::__destroy_vector::operator()[abi:ne180100](&v3);
  }
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::column_buffer>,std::reverse_iterator<turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::column_buffer*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::column_buffer>,std::reverse_iterator<turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::column_buffer*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::column_buffer>,std::reverse_iterator<turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::column_buffer*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v8[8];
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[8];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v1 = (uint64_t *)a1[2];
  v3 = *v1;
  v2 = v1[1];
  v14 = v3;
  v15 = v2;
  v16 = v3;
  v17 = v2;
  v4 = *a1;
  v5 = (uint64_t *)a1[1];
  v7 = *v5;
  v6 = v5[1];
  v9 = v7;
  v10 = v6;
  v11 = v7;
  v12 = v6;
  std::__allocator_destroy[abi:ne180100]<std::allocator<turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::column_buffer>,std::reverse_iterator<std::reverse_iterator<turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::column_buffer*>>,std::reverse_iterator<std::reverse_iterator<turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::column_buffer*>>>(v4, (uint64_t)v13, (uint64_t)v8);
}

void std::__allocator_destroy[abi:ne180100]<std::allocator<turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::column_buffer>,std::reverse_iterator<std::reverse_iterator<turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::column_buffer*>>,std::reverse_iterator<std::reverse_iterator<turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::column_buffer*>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void **i;
  void **v6;

  for (i = *(void ***)(a2 + 32); i != *(void ***)(a3 + 32); *(_QWORD *)(a2 + 32) = i)
  {
    v6 = i + 1;
    std::vector<std::vector<turi::ml_data_internal::row_data_block>>::__destroy_vector::operator()[abi:ne180100](&v6);
    turi::simple_spinlock::~simple_spinlock((turi::simple_spinlock *)i);
    i = (void **)(*(_QWORD *)(a2 + 32) + 56);
  }
}

uint64_t std::__split_buffer<turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::column_buffer,std::allocator<turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::column_buffer> &>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::column_buffer,std::allocator<turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::column_buffer> &>::__destruct_at_end[abi:ne180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::column_buffer,std::allocator<turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::column_buffer> &>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t i;
  turi::simple_spinlock *v5;
  void **v6;

  for (i = *(_QWORD *)(a1 + 16); i != a2; i = *(_QWORD *)(a1 + 16))
  {
    v5 = (turi::simple_spinlock *)(i - 56);
    *(_QWORD *)(a1 + 16) = i - 56;
    v6 = (void **)(i - 48);
    std::vector<std::vector<turi::ml_data_internal::row_data_block>>::__destroy_vector::operator()[abi:ne180100](&v6);
    turi::simple_spinlock::~simple_spinlock(v5);
  }
}

void std::vector<std::vector<turi::ml_data_internal::row_data_block>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  size_t v14;
  void *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    v19 = v4;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>(v4, v11);
    else
      v12 = 0;
    v15 = v12;
    v16 = &v12[24 * v8];
    v18 = &v12[24 * v11];
    v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    v17 = &v16[v14];
    std::vector<std::vector<turi::ml_data_internal::row_data_block>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<turi::ml_data_internal::row_data_block>>::~__split_buffer(&v15);
  }
}

void sub_21840DA04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<turi::ml_data_internal::row_data_block>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<turi::ml_data_internal::row_data_block>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<turi::ml_data_internal::row_data_block>>,std::reverse_iterator<std::vector<turi::ml_data_internal::row_data_block>*>,std::reverse_iterator<std::vector<turi::ml_data_internal::row_data_block>*>,std::reverse_iterator<std::vector<turi::ml_data_internal::row_data_block>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<turi::ml_data_internal::row_data_block>>,std::reverse_iterator<std::vector<turi::ml_data_internal::row_data_block>*>,std::reverse_iterator<std::vector<turi::ml_data_internal::row_data_block>*>,std::reverse_iterator<std::vector<turi::ml_data_internal::row_data_block>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<turi::ml_data_internal::row_data_block>>,std::reverse_iterator<std::vector<turi::ml_data_internal::row_data_block>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<turi::ml_data_internal::row_data_block>>,std::reverse_iterator<std::vector<turi::ml_data_internal::row_data_block>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<turi::ml_data_internal::row_data_block>>,std::reverse_iterator<std::vector<turi::ml_data_internal::row_data_block>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<turi::ml_data_internal::row_data_block>>,std::reverse_iterator<std::vector<turi::ml_data_internal::row_data_block>*>>::operator()[abi:ne180100](uint64_t a1)
{
  void **v1;
  void **v2;
  void **v3;

  v1 = *(void ***)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(void ***)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = v1;
    std::vector<turi::ml_data_internal::row_data_block>::__destroy_vector::operator()[abi:ne180100](&v3);
    v1 += 3;
  }
}

void **std::__split_buffer<std::vector<turi::ml_data_internal::row_data_block>>::~__split_buffer(void **a1)
{
  std::__split_buffer<std::vector<turi::ml_data_internal::row_data_block>>::clear[abi:ne180100]((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<std::vector<turi::ml_data_internal::row_data_block>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t i;
  uint64_t v2;
  void **v4;
  void **v5;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    v4 = (void **)(i - 24);
    *(_QWORD *)(a1 + 16) = v4;
    v5 = v4;
    std::vector<turi::ml_data_internal::row_data_block>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
}

void turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::flush_block(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;

  v3 = *(_QWORD *)(a1 + 384);
  v4 = v3 + 56 * a2;
  v5 = (uint64_t *)(v4 + 8);
  v6 = (uint64_t *)(*(_QWORD *)(v4 + 8) + 24 * a3);
  v7 = v6[1];
  if (*v6 != v7)
  {
    v11 = (v7 - *v6) >> 4;
    v26 = -1;
    v27 = 0u;
    v28 = 0u;
    v29 = 0;
    v12 = turi::v2_block_impl::block_writer::write_block<turi::ml_data_internal::row_data_block>((pthread_mutex_t *)(a1 + 24), a3, a2, v6, (uint64_t)&v26);
    v13 = *v5;
    v14 = *v5 + 24 * a3;
    v17 = *(_QWORD *)(v14 + 8);
    v16 = (_QWORD *)(v14 + 8);
    v15 = v17;
    v18 = *(_QWORD *)(v13 + 24 * a3);
    if (v17 != v18)
    {
      v19 = v13 + 24 * a3 + 16;
      do
      {
        v15 -= 48;
        std::allocator<turi::ml_data_internal::row_data_block>::destroy[abi:ne180100](v19, v15);
      }
      while (v15 != v18);
    }
    *v16 = v18;
    do
    {
      while (*(_BYTE *)v4 == 1)
        ;
      do
        v20 = __ldaxr((unsigned __int8 *)v4);
      while (__stlxr(1u, (unsigned __int8 *)v4));
    }
    while (v20);
    v21 = (_QWORD *)(v3 + 56 * a2);
    v22 = v21[5] + v12;
    v23 = v21[6] - 0x5555555555555555 * v11;
    v21[5] = v22;
    v21[6] = v23;
    v24 = (unint64_t)(float)((float)(unint64_t)turi::SFRAME_DEFAULT_BLOCK_SIZE
                                  / (float)((float)(unint64_t)(v22 + 1) / (float)(unint64_t)(v23 + 1)));
    if (*(_QWORD *)"\b" > v24)
      v24 = *(_QWORD *)"\b";
    v21[4] = v24;
    v25 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 392) - *(_QWORD *)(a1 + 384)) >> 3) * *(_QWORD *)(a1 + 16);
    if (turi::SFRAME_WRITER_MAX_BUFFERED_CELLS / v25 < v24)
      v24 = turi::SFRAME_WRITER_MAX_BUFFERED_CELLS / v25;
    v21[4] = v24;
    if (turi::SFRAME_WRITER_MAX_BUFFERED_CELLS_PER_BLOCK < v24)
      v24 = turi::SFRAME_WRITER_MAX_BUFFERED_CELLS_PER_BLOCK;
    v21[4] = v24;
    __dmb(0xBu);
    *(_BYTE *)v4 = 0;
  }
}

uint64_t turi::v2_block_impl::block_writer::write_block<turi::ml_data_internal::row_data_block>(pthread_mutex_t *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  __int128 v17[3];
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;

  turi::buffer_pool<std::vector<char>>::get_new_buffer(a1, (uint64_t)&v22);
  v18 = 0u;
  v20 = 0;
  v19 = v22.n128_u64[0];
  *((_QWORD *)&v19 + 1) = *(_QWORD *)v22.n128_u64[0];
  v21 = *(_QWORD *)(v22.n128_u64[0] + 8) - *((_QWORD *)&v19 + 1);
  turi::archive_detail::vector_serialize_impl<turi::oarchive,turi::ml_data_internal::row_data_block,false>::exec((uint64_t)&v18, a4);
  *(_QWORD *)(a5 + 16) = v20;
  *(_QWORD *)(a5 + 24) = 0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 4);
  v10 = *(_QWORD *)v22.n128_u64[0];
  v11 = *(_OWORD *)(a5 + 32);
  v17[1] = *(_OWORD *)(a5 + 16);
  v17[2] = v11;
  v17[0] = *(_OWORD *)a5;
  v12 = turi::v2_block_impl::block_writer::write_block((uint64_t)a1, a2, a3, v10, v17);
  turi::buffer_pool<std::vector<char>>::release_buffer(a1, &v22);
  v13 = (std::__shared_weak_count *)v22.n128_u64[1];
  if (v22.n128_u64[1])
  {
    v14 = (unint64_t *)(v22.n128_u64[1] + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  return v12;
}

void sub_21840DF28(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v1 - 64);
  _Unwind_Resume(a1);
}

void turi::archive_detail::vector_serialize_impl<turi::oarchive,turi::ml_data_internal::row_data_block,false>::exec(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  unint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  size_t v10;
  char **v11;
  size_t v12;
  BOOL v13;
  std::vector<char>::size_type v14;

  v4 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 4);
  if (*(_QWORD *)a1)
  {
    std::ostream::write();
  }
  else
  {
    v5 = *(_QWORD *)(a1 + 40);
    if (*(_QWORD *)(a1 + 32) + 8 > v5)
    {
      v10 = 2 * v5 + 16;
      *(_QWORD *)(a1 + 40) = v10;
      v11 = *(char ***)(a1 + 16);
      if (v11)
      {
        v6 = *v11;
        v12 = v11[1] - *v11;
        v13 = v10 >= v12;
        v14 = v10 - v12;
        if (v14 != 0 && v13)
        {
          std::vector<char>::__append(*(std::vector<char> **)(a1 + 16), v14);
          v6 = **(char ***)(a1 + 16);
        }
        else if (!v13)
        {
          v11[1] = &v6[v10];
        }
      }
      else
      {
        v6 = (char *)malloc_type_realloc(*(void **)(a1 + 24), v10, 0xF6EA6B1uLL);
      }
      *(_QWORD *)(a1 + 24) = v6;
    }
    else
    {
      v6 = *(char **)(a1 + 24);
    }
    *(_QWORD *)&v6[*(_QWORD *)(a1 + 32)] = v4;
    *(_QWORD *)(a1 + 32) += 8;
  }
  v7 = *a2;
  if (a2[1] != *a2)
  {
    v8 = 0;
    v9 = 0;
    do
    {
      turi::ml_data_internal::row_data_block::save((turi::ml_data_internal::row_data_block *)(v7 + v8), (turi::oarchive *)a1);
      ++v9;
      v7 = *a2;
      v8 += 48;
    }
    while (v9 < 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 4));
  }
}

uint64_t std::vector<turi::ml_data_internal::row_data_block>::__push_back_slow_path<turi::ml_data_internal::row_data_block const&>(uint64_t *a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  void *v10;
  char *v11;
  _QWORD *v12;
  char *v13;
  uint64_t *v14;

  v3 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  v4 = v3 + 1;
  if (v3 + 1 > 0x555555555555555)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v4)
    v4 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL)
    v6 = 0x555555555555555;
  else
    v6 = v4;
  v14 = a1 + 2;
  if (v6)
    v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>>((uint64_t)(a1 + 2), v6);
  else
    v7 = 0;
  v10 = v7;
  v11 = &v7[48 * v3];
  v13 = &v7[48 * v6];
  std::allocator<turi::ml_data_internal::row_data_block>::construct[abi:ne180100]<turi::ml_data_internal::row_data_block,turi::ml_data_internal::row_data_block&>((uint64_t)(a1 + 2), v11, a2);
  v12 = v11 + 48;
  std::vector<turi::ml_data_internal::row_data_block>::__swap_out_circular_buffer(a1, &v10);
  v8 = a1[1];
  std::__split_buffer<turi::ml_data_internal::row_data_block>::~__split_buffer(&v10);
  return v8;
}

void sub_21840E178(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<turi::ml_data_internal::row_data_block>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<turi::ml_data_internal::row_data_block>::__push_back_slow_path<turi::ml_data_internal::row_data_block>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void *v15[5];

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  v5 = v4 + 1;
  if (v4 + 1 > 0x555555555555555)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x2AAAAAAAAAAAAAALL)
    v9 = 0x555555555555555;
  else
    v9 = v5;
  v15[4] = a1 + 2;
  v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>>(v7, v9);
  v11 = &v10[48 * v4];
  v15[0] = v10;
  v15[1] = v11;
  v15[3] = &v10[48 * v12];
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  *(_QWORD *)v11 = 0;
  *(_OWORD *)v11 = *(_OWORD *)a2;
  *((_QWORD *)v11 + 2) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *((_QWORD *)v11 + 4) = 0;
  *((_QWORD *)v11 + 5) = 0;
  *((_QWORD *)v11 + 3) = 0;
  *(_OWORD *)(v11 + 24) = *(_OWORD *)(a2 + 24);
  *((_QWORD *)v11 + 5) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  v15[2] = v11 + 48;
  std::vector<turi::ml_data_internal::row_data_block>::__swap_out_circular_buffer(a1, v15);
  v13 = a1[1];
  std::__split_buffer<turi::ml_data_internal::row_data_block>::~__split_buffer(v15);
  return v13;
}

void sub_21840E2A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<turi::ml_data_internal::row_data_block>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

__n128 std::__function::__func<turi::sarray<turi::ml_data_internal::row_data_block>::get_output_iterator(unsigned long)::{lambda(turi::ml_data_internal::row_data_block const&)#1},std::allocator<turi::sarray<turi::ml_data_internal::row_data_block>::get_output_iterator(unsigned long)::{lambda(turi::ml_data_internal::row_data_block const&)#1}>,void ()(turi::ml_data_internal::row_data_block const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24D93F698;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<turi::sarray<turi::ml_data_internal::row_data_block>::get_output_iterator(unsigned long)::{lambda(turi::ml_data_internal::row_data_block const&)#1},std::allocator<turi::sarray<turi::ml_data_internal::row_data_block>::get_output_iterator(unsigned long)::{lambda(turi::ml_data_internal::row_data_block const&)#1}>,void ()(turi::ml_data_internal::row_data_block const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24D93F698;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<turi::sarray<turi::ml_data_internal::row_data_block>::get_output_iterator(unsigned long)::{lambda(turi::ml_data_internal::row_data_block const&)#1},std::allocator<turi::sarray<turi::ml_data_internal::row_data_block>::get_output_iterator(unsigned long)::{lambda(turi::ml_data_internal::row_data_block const&)#1}>,void ()(turi::ml_data_internal::row_data_block const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 176) + 72))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 176), 0, *(_QWORD *)(a1 + 16), a2);
}

uint64_t std::__function::__func<turi::sarray<turi::ml_data_internal::row_data_block>::get_output_iterator(unsigned long)::{lambda(turi::ml_data_internal::row_data_block const&)#1},std::allocator<turi::sarray<turi::ml_data_internal::row_data_block>::get_output_iterator(unsigned long)::{lambda(turi::ml_data_internal::row_data_block const&)#1}>,void ()(turi::ml_data_internal::row_data_block const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::sarray<turi::ml_data_internal::row_data_block>::get_output_iterator(unsigned long)::{lambda(turi::ml_data_internal::row_data_block const&)#1},std::allocator<turi::sarray<turi::ml_data_internal::row_data_block>::get_output_iterator(unsigned long)::{lambda(turi::ml_data_internal::row_data_block const&)#1}>,void ()(turi::ml_data_internal::row_data_block const&)>::target_type()
{
}

__n128 std::__function::__func<turi::sarray<turi::ml_data_internal::row_data_block>::get_output_iterator(unsigned long)::{lambda(turi::ml_data_internal::row_data_block&&)#1},std::allocator<turi::ml_data_internal::row_data_block&&>,void ()(turi::ml_data_internal::row_data_block&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24D93F728;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<turi::sarray<turi::ml_data_internal::row_data_block>::get_output_iterator(unsigned long)::{lambda(turi::ml_data_internal::row_data_block&&)#1},std::allocator<turi::ml_data_internal::row_data_block&&>,void ()(turi::ml_data_internal::row_data_block&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24D93F728;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<turi::sarray<turi::ml_data_internal::row_data_block>::get_output_iterator(unsigned long)::{lambda(turi::ml_data_internal::row_data_block&&)#1},std::allocator<turi::ml_data_internal::row_data_block&&>,void ()(turi::ml_data_internal::row_data_block&)>::operator()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 176) + 80))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 176), 0, *(_QWORD *)(a1 + 16), a2);
}

uint64_t std::__function::__func<turi::sarray<turi::ml_data_internal::row_data_block>::get_output_iterator(unsigned long)::{lambda(turi::ml_data_internal::row_data_block&&)#1},std::allocator<turi::ml_data_internal::row_data_block&&>,void ()(turi::ml_data_internal::row_data_block&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::sarray<turi::ml_data_internal::row_data_block>::get_output_iterator(unsigned long)::{lambda(turi::ml_data_internal::row_data_block&&)#1},std::allocator<turi::ml_data_internal::row_data_block&&>,void ()(turi::ml_data_internal::row_data_block&)>::target_type()
{
}

_QWORD *std::__function::__func<turi::sarray<turi::ml_data_internal::row_data_block>::get_output_iterator(unsigned long)::{lambda(turi::sframe_rows const&)#1},std::allocator<turi::sarray<turi::ml_data_internal::row_data_block>::get_output_iterator(unsigned long)::{lambda(turi::sframe_rows const&)#1}>,void ()(turi::sframe_rows const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_24D93F7B8;
  return result;
}

void std::__function::__func<turi::sarray<turi::ml_data_internal::row_data_block>::get_output_iterator(unsigned long)::{lambda(turi::sframe_rows const&)#1},std::allocator<turi::sarray<turi::ml_data_internal::row_data_block>::get_output_iterator(unsigned long)::{lambda(turi::sframe_rows const&)#1}>,void ()(turi::sframe_rows const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24D93F7B8;
}

uint64_t std::__function::__func<turi::sarray<turi::ml_data_internal::row_data_block>::get_output_iterator(unsigned long)::{lambda(turi::sframe_rows const&)#1},std::allocator<turi::sarray<turi::ml_data_internal::row_data_block>::get_output_iterator(unsigned long)::{lambda(turi::sframe_rows const&)#1}>,void ()(turi::sframe_rows const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::sarray<turi::ml_data_internal::row_data_block>::get_output_iterator(unsigned long)::{lambda(turi::sframe_rows const&)#1},std::allocator<turi::sarray<turi::ml_data_internal::row_data_block>::get_output_iterator(unsigned long)::{lambda(turi::sframe_rows const&)#1}>,void ()(turi::sframe_rows const&)>::target_type()
{
}

uint64_t std::vector<std::function<void ()(void)>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  void *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (v7 >= v6)
  {
    v10 = (uint64_t)(v7 - *a1) >> 5;
    if ((unint64_t)(v10 + 1) >> 59)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v11 = v5 - *a1;
    v12 = v11 >> 4;
    if (v11 >> 4 <= (unint64_t)(v10 + 1))
      v12 = v10 + 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0)
      v13 = 0x7FFFFFFFFFFFFFFLL;
    else
      v13 = v12;
    v19 = v4;
    if (v13)
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>>(v4, v13);
    else
      v14 = 0;
    v15 = v14;
    v16 = &v14[32 * v10];
    v18 = &v14[32 * v13];
    std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)v16, a2);
    v17 = v16 + 32;
    std::vector<std::function<void ()(void)>>::__swap_out_circular_buffer(a1, &v15);
    v9 = a1[1];
    result = (uint64_t)std::__split_buffer<std::function<void ()(void)>>::~__split_buffer(&v15);
  }
  else
  {
    result = std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100](*(_QWORD *)(v4 - 8), a2);
    v9 = v7 + 32;
    a1[1] = v7 + 32;
  }
  a1[1] = v9;
  return result;
}

void sub_21840E5B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<std::function<void ()(void)>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::function<void ()(void)>>,std::reverse_iterator<std::function<void ()(void)>*>,std::reverse_iterator<std::function<void ()(void)>*>,std::reverse_iterator<std::function<void ()(void)>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::function<void ()(void)>>,std::reverse_iterator<std::function<void ()(void)>*>,std::reverse_iterator<std::function<void ()(void)>*>,std::reverse_iterator<std::function<void ()(void)>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  v13 = 0;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v9 -= 32;
      std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100](v7 - 32, v9);
      v7 = *((_QWORD *)&v15 + 1) - 32;
      *((_QWORD *)&v15 + 1) -= 32;
    }
    while (v9 != a5);
    v10 = v15;
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::function<void ()(void)>>,std::reverse_iterator<std::function<void ()(void)>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::function<void ()(void)>>,std::reverse_iterator<std::function<void ()(void)>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::function<void ()(void)>>,std::reverse_iterator<std::function<void ()(void)>*>>::operator()[abi:ne180100]((_QWORD *)a1);
  return a1;
}

_QWORD *std::_AllocatorDestroyRangeReverse<std::allocator<std::function<void ()(void)>>,std::reverse_iterator<std::function<void ()(void)>*>>::operator()[abi:ne180100](_QWORD *result)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = *(_QWORD **)(result[2] + 8);
  v2 = *(_QWORD **)(result[1] + 8);
  while (v1 != v2)
  {
    result = (_QWORD *)v1[3];
    if (v1 == result)
    {
      result = v1;
      v3 = 4;
    }
    else
    {
      if (!result)
        goto LABEL_8;
      v3 = 5;
    }
    result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
LABEL_8:
    v1 += 4;
  }
  return result;
}

void **std::__split_buffer<std::function<void ()(void)>>::~__split_buffer(void **a1)
{
  std::__split_buffer<std::function<void ()(void)>>::clear[abi:ne180100](a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

_QWORD *std::__split_buffer<std::function<void ()(void)>>::clear[abi:ne180100](_QWORD *result)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  v2 = (_QWORD *)result[1];
  v1 = (_QWORD *)result[2];
  if (v1 != v2)
  {
    v3 = result;
    while (1)
    {
      result = v1 - 4;
      v3[2] = v1 - 4;
      v4 = (_QWORD *)*(v1 - 1);
      if (v4 == result)
        break;
      if (v4)
      {
        result = v4;
        v5 = 5;
LABEL_7:
        (*(void (**)(void))(*result + 8 * v5))();
        result = (_QWORD *)v3[2];
      }
      v1 = result;
      if (result == v2)
        return result;
    }
    v5 = 4;
    goto LABEL_7;
  }
  return result;
}

_QWORD *turi::scoped_finally::scoped_finally(_QWORD *a1, uint64_t a2)
{
  char *v3;
  _QWORD *v4;
  uint64_t v5;
  _BYTE v7[24];
  _BYTE *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)v7, a2);
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v3 = (char *)operator new(0x20uLL);
  *a1 = v3;
  a1[1] = v3;
  a1[2] = v3 + 32;
  a1[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::function<void ()(void)>>,std::function<void ()(void)> const*,std::function<void ()(void)> const*,std::function<void ()(void)>*>((uint64_t)(a1 + 2), (uint64_t)v7, (uint64_t)&v9, (uint64_t)v3);
  v4 = v8;
  if (v8 == v7)
  {
    v5 = 4;
    v4 = v7;
    goto LABEL_5;
  }
  if (v8)
  {
    v5 = 5;
LABEL_5:
    (*(void (**)(void))(*v4 + 8 * v5))();
  }
  return a1;
}

void sub_21840E958(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v19;
  uint64_t v20;

  v17 = v16;
  *(_QWORD *)(v15 + 8) = v17;
  std::vector<std::function<void ()(void)>>::__destroy_vector::operator()[abi:ne180100](&a10);
  v19 = a15;
  if (a15 == &a12)
  {
    v20 = 4;
    v19 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_6:
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::function<void ()(void)>>,std::function<void ()(void)> const*,std::function<void ()(void)> const*,std::function<void ()(void)>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100](v4, v6);
      v6 += 32;
      v4 = v11 + 32;
      v11 += 32;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::function<void ()(void)>>,std::function<void ()(void)>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_21840EA40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::function<void ()(void)>>,std::function<void ()(void)>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::function<void ()(void)>>,std::function<void ()(void)>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::function<void ()(void)>>,std::function<void ()(void)>*>::operator()[abi:ne180100](a1);
  return a1;
}

uint64_t std::_AllocatorDestroyRangeReverse<std::allocator<std::function<void ()(void)>>,std::function<void ()(void)>*>::operator()[abi:ne180100](uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = **(_QWORD **)(result + 16);
  v2 = **(_QWORD **)(result + 8);
  if (v1 != v2)
  {
    while (1)
    {
      v3 = v1 - 32;
      result = *(_QWORD *)(v1 - 8);
      if (v1 - 32 == result)
        break;
      if (result)
      {
        v4 = 5;
LABEL_6:
        result = (*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v4))();
      }
      v1 = v3;
      if (v3 == v2)
        return result;
    }
    result = v1 - 32;
    v4 = 4;
    goto LABEL_6;
  }
  return result;
}

void std::vector<std::function<void ()(void)>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  char *v7;
  uint64_t v8;

  v1 = *a1;
  v2 = (char *)**a1;
  if (!v2)
    return;
  v4 = (char *)v1[1];
  v5 = **a1;
  if (v4 == v2)
    goto LABEL_10;
  do
  {
    v6 = v4 - 32;
    v7 = (char *)*((_QWORD *)v4 - 1);
    if (v4 - 32 == v7)
    {
      v7 = v4 - 32;
      v8 = 4;
    }
    else
    {
      if (!v7)
        goto LABEL_8;
      v8 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v7 + 8 * v8))();
LABEL_8:
    v4 = v6;
  }
  while (v6 != v2);
  v5 = **a1;
LABEL_10:
  v1[1] = v2;
  operator delete(v5);
}

void turi::scoped_finally::~scoped_finally(turi::scoped_finally *this)
{
  void **v2;

  turi::scoped_finally::execute_and_clear((uint64_t *)this);
  v2 = (void **)this;
  std::vector<std::function<void ()(void)>>::__destroy_vector::operator()[abi:ne180100](&v2);
}

uint64_t *std::map<std::string,turi::ml_column_mode>::map[abi:ne180100](uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<std::string,turi::ml_column_mode>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,turi::ml_column_mode>,std::__tree_node<std::__value_type<std::string,turi::ml_column_mode>,void *> *,long>>>(a1, *a2, a2 + 1);
  return a1;
}

void sub_21840EC00(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,turi::ml_column_mode>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,turi::ml_column_mode>,std::__tree_node<std::__value_type<std::string,turi::ml_column_mode>,void *> *,long>>>(uint64_t *result, const void **a2, const void ***a3)
{
  const void **v4;
  uint64_t **v5;
  uint64_t *v6;
  const void **v7;
  const void ***v8;
  BOOL v9;

  if (a2 != (const void **)a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = std::__tree<std::__value_type<std::string,turi::unary_op>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::unary_op>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::unary_op>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,turi::unary_op> const&>(v5, v6, v4 + 4, (uint64_t)(v4 + 4));
      v7 = (const void **)v4[1];
      if (v7)
      {
        do
        {
          v8 = (const void ***)v7;
          v7 = (const void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (const void ***)v4[2];
          v9 = *v8 == v4;
          v4 = (const void **)v8;
        }
        while (!v9);
      }
      v4 = (const void **)v8;
    }
    while (v8 != a3);
  }
  return result;
}

_QWORD *std::shared_ptr<turi::sarray<turi::ml_data_internal::row_data_block>>::shared_ptr[abi:ne180100]<turi::sarray<turi::ml_data_internal::row_data_block>,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_24D93F838;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_21840ECF4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_pointer<turi::sarray<turi::ml_data_internal::row_data_block> *,std::shared_ptr<turi::sarray<turi::ml_data_internal::row_data_block>>::__shared_ptr_default_delete<turi::sarray<turi::ml_data_internal::row_data_block>,turi::sarray<turi::ml_data_internal::row_data_block>>,std::allocator<turi::sarray<turi::ml_data_internal::row_data_block>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<turi::sarray<turi::ml_data_internal::row_data_block> *,std::shared_ptr<turi::sarray<turi::ml_data_internal::row_data_block>>::__shared_ptr_default_delete<turi::sarray<turi::ml_data_internal::row_data_block>,turi::sarray<turi::ml_data_internal::row_data_block>>,std::allocator<turi::sarray<turi::ml_data_internal::row_data_block>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

_QWORD *std::__function::__func<turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_1,std::allocator<turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_1>,void ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_24D93F8B0;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_1,std::allocator<turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_1>,void ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_24D93F8B0;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x219A19A08);
}

_QWORD *std::__function::__func<turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_1,std::allocator<turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_1>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24D93F8B0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t std::__function::__func<turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_1,std::allocator<turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_1>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24D93F8B0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_1,std::allocator<turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_1>,void ()(void)>::destroy(uint64_t a1)
{
  return std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](a1 + 8);
}

void std::__function::__func<turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_1,std::allocator<turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_1>,void ()(void)>::destroy_deallocate(void *a1)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t std::__function::__func<turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_1,std::allocator<turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_1>,void ()(void)>::operator()(uint64_t a1)
{
  return turi::ml_data_internal::column_indexer::finalize(*(turi::ml_data_internal::column_indexer **)(a1 + 8));
}

uint64_t std::__function::__func<turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_1,std::allocator<turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_1>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_1,std::allocator<turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_1>,void ()(void)>::target_type()
{
}

_QWORD *std::__function::__func<turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_2,std::allocator<turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_2>,void ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_24D93F930;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_2,std::allocator<turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_2>,void ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_24D93F930;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x219A19A08);
}

_QWORD *std::__function::__func<turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_2,std::allocator<turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_2>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24D93F930;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t std::__function::__func<turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_2,std::allocator<turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_2>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24D93F930;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_2,std::allocator<turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_2>,void ()(void)>::destroy(uint64_t a1)
{
  return std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](a1 + 8);
}

void std::__function::__func<turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_2,std::allocator<turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_2>,void ()(void)>::destroy_deallocate(void *a1)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

void std::__function::__func<turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_2,std::allocator<turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_2>,void ()(void)>::operator()(uint64_t a1)
{
  turi::ml_data_internal::column_statistics::finalize(*(turi::ml_data_internal::column_statistics **)(a1 + 8));
}

uint64_t std::__function::__func<turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_2,std::allocator<turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_2>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_2,std::allocator<turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_2>,void ()(void)>::target_type()
{
}

void turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_3::operator()(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL8 v10;
  unsigned __int8 *v11;
  unsigned int v12;
  BOOL v13;
  int v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  unsigned __int8 *v22[3];
  __int128 v23;
  unsigned __int8 **v24;

  v4 = *(_OWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 104) + 16 * a2);
  v23 = v4;
  v5 = (std::__shared_weak_count *)*((_QWORD *)&v4 + 1);
  if (*((_QWORD *)&v4 + 1))
  {
    v6 = (unint64_t *)(*((_QWORD *)&v4 + 1) + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = v4;
  if (*(_DWORD *)(v4 + 24) != 5)
  {
    v9 = *(_QWORD *)(**(_QWORD **)(a1 + 8) + 16 * a2);
    if (*(_BYTE *)(v9 + 248))
      v10 = *(unsigned __int8 *)(v9 + 249) == 0;
    else
      v10 = 0;
    assert_msg(v10, "Input data not properly set up for reading.");
    turi::sarray<turi::flexible_type>::get_reader(*(_QWORD *)(**(_QWORD **)(a1 + 8) + 16 * a2), (uint64_t *)v22);
    std::shared_ptr<turi::sarray_reader<turi::flexible_type>>::operator=[abi:ne180100]<turi::sarray_reader<turi::flexible_type>,std::default_delete<turi::sarray_reader<turi::flexible_type>>,void>((_QWORD *)(**(_QWORD **)(a1 + 16) + 16 * a2), (uint64_t *)v22);
    v11 = v22[0];
    v22[0] = 0;
    if (v11)
      (*(void (**)(unsigned __int8 *))(*(_QWORD *)v11 + 8))(v11);
    v12 = *(_DWORD *)(v8 + 24);
    v13 = v12 > 6;
    v14 = (1 << v12) & 0x5A;
    if (!v13 && v14 != 0)
    {
      v16 = *(_QWORD *)(a1 + 24);
      if (!*(_QWORD *)(v16 + 16)
        || !std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>(v16, (const void **)v8))
      {
        memset(v22, 0, sizeof(v22));
        v18 = **(_QWORD **)(a1 + 32);
        if (**(_QWORD **)(a1 + 40) >= (unint64_t)(v18 + 10000))
          v19 = v18 + 10000;
        else
          v19 = **(_QWORD **)(a1 + 40);
        v17 = *(_QWORD *)(**(_QWORD **)(a1 + 16) + 16 * a2);
        (*(void (**)(uint64_t, uint64_t, uint64_t, unsigned __int8 **))(*(_QWORD *)v17 + 48))(v17, v18, v19, v22);
        turi::ml_data_internal::column_indexer::insert_values_into_index(*(_QWORD *)(v8 + 32), v22);
        v24 = v22;
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
      }
    }
  }
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_21840F200(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void **a16)
{
  a16 = (void **)&a10;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a16);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_3>(unsigned long,unsigned long,turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_3 const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v4;
  __int128 v5;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == ((unint64_t)"ZN4turi12parallel_forIZNS_7ml_data17_fill_data_blocksERKNS_6sframeEbbNS_23ml_mis"
                                        "sing_value_actionERKNSt3__14pairImmEERKNS6_3setINS6_12basic_stringIcNS6_11char_t"
                                        "raitsIcEENS6_9allocatorIcEEEENS6_4lessISH_EENSF_ISH_EEEEE3$_3EEvmmRKT_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)
        || (result = strcmp((const char *)result, (const char *)((unint64_t)"ZN4turi12parallel_forIZNS_7ml_data17_fill_data_blocksERKNS_6sframeEbbNS_23ml_missing_value_actionERKNSt3__14pairImmEERKNS6_3setINS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEENS6_4lessISH_EENSF_ISH_EEEEE3$_3EEvmmRKT_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)), !(_DWORD)result))
      {
        *(_QWORD *)a2 = v4;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
    }
  }
  else
  {
    v5 = *(_OWORD *)result;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

void boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_3>(unsigned long,unsigned long,turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_3 const&)::{lambda(void)#1},void>::invoke(uint64_t *a1)
{
  unint64_t i;

  for (i = a1[1]; i < a1[2]; ++i)
    turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_3::operator()(*a1, i);
}

void std::__function::__func<turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_4,std::allocator<turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_4>,void ()(void)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

_QWORD *std::__function::__func<turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_4,std::allocator<turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_4>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24D93F9D0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_4,std::allocator<turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_4>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24D93F9D0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_4,std::allocator<turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_4>,void ()(void)>::operator()(uint64_t a1)
{
  return turi::ml_data_internal::column_indexer::finalize(*(turi::ml_data_internal::column_indexer **)(a1 + 8));
}

uint64_t std::__function::__func<turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_4,std::allocator<turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_4>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_4,std::allocator<turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_4>,void ()(void)>::target_type()
{
}

void std::__function::__func<turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_5,std::allocator<turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_5>,void ()(unsigned long,unsigned long)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

__n128 std::__function::__func<turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_5,std::allocator<turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_5>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_24D93FA50;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 std::__function::__func<turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_5,std::allocator<turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_5>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_24D93FA50;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_5,std::allocator<turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_5>,void ()(unsigned long,unsigned long)>::operator()(uint64_t a1, const turi::flexible_type **a2, _QWORD *a3)
{
  const turi::flexible_type *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  const turi::flexible_type *v15;
  const turi::flexible_type *v16;
  const turi::flexible_type *v17;
  const turi::flexible_type *v18;
  uint64_t v19;
  const turi::flexible_type **v20;

  v3 = *a2;
  v4 = **(_QWORD **)(a1 + 16);
  v5 = **(_QWORD **)(a1 + 8) - v4;
  v6 = v5 * (_QWORD)*a2;
  v7 = v6 / *a3;
  v8 = v7 + v4;
  v9 = (v5 + v6) / *a3;
  v10 = v9 + v4;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  if (v7 + v4 < v9 + v4)
  {
    do
    {
      v12 = v8;
      v8 += 4096;
      if (v8 >= **(_QWORD **)(a1 + 8))
        v14 = **(_QWORD **)(a1 + 8);
      else
        v14 = v8;
      v13 = *(_QWORD *)(**(_QWORD **)(a1 + 24) + 16 * **(_QWORD **)(a1 + 32));
      (*(void (**)(uint64_t, unint64_t, unint64_t, const turi::flexible_type **))(*(_QWORD *)v13 + 48))(v13, v12, v14, &v17);
      v15 = v17;
      v16 = v18;
      while (v15 != v16)
      {
        turi::ml_data_internal::column_indexer::map_value_to_index(*(void ***)(a1 + 40), v3, v15);
        v15 = (const turi::flexible_type *)((char *)v15 + 16);
      }
    }
    while (v8 < v10);
  }
  v20 = &v17;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
}

void sub_21840F568(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_5,std::allocator<turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_5>,void ()(unsigned long,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_5,std::allocator<turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_5>,void ()(unsigned long,unsigned long)>::target_type()
{
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_6 &,turi::flexible_type *,false>(uint64_t result, unsigned __int8 *a2, uint64_t a3, char a4, __n128 a5)
{
  uint64_t v7;
  unsigned __int8 *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  __n128 v15;
  __n128 v16;
  __n128 v17;
  __n128 v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  unint64_t v24;
  unsigned __int8 *v25;
  unsigned __int8 *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  void *v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t v49;
  _QWORD *v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unsigned int v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t v61;
  _QWORD *v62;
  void *v63;
  void *v64;
  uint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t v68;
  _QWORD *v69;
  void *v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t v73;
  _QWORD *v74;
  unint64_t *v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t *v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unsigned int v82;
  unint64_t *v83;
  unint64_t v84;
  unint64_t v85;
  _QWORD *v86;
  void *v87;
  void *v88;
  uint64_t v89;
  BOOL v90;
  __n128 v91;
  uint64_t v92;
  unsigned __int8 *v93;
  _QWORD *v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t *v97;
  unint64_t *v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  unint64_t *v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  unint64_t *v110;
  unint64_t v111;
  unint64_t v112;
  _QWORD *v113;
  void *v114;
  unint64_t *v115;
  unint64_t v116;
  unint64_t v117;
  _QWORD *v118;
  unint64_t *v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t *v122;
  unint64_t v123;
  unint64_t v124;
  uint64_t v125;
  unsigned int v126;
  unint64_t *v127;
  unint64_t v128;
  unint64_t v129;
  _QWORD *v130;
  void *v131;
  void *v132;
  uint64_t v133;
  unint64_t *v134;
  unint64_t v135;
  unint64_t v136;
  _QWORD *v137;
  void *v138;
  unint64_t *v139;
  unint64_t v140;
  unint64_t v141;
  _QWORD *v142;
  unint64_t *v143;
  unint64_t v144;
  unint64_t v145;
  unint64_t *v146;
  unint64_t v147;
  unint64_t v148;
  uint64_t v149;
  unsigned int v150;
  unint64_t *v151;
  unint64_t v152;
  unint64_t v153;
  _QWORD *v154;
  void *v155;
  void *v156;
  uint64_t v157;
  unint64_t v158;
  unint64_t v159;
  __n128 *v160;
  __n128 *v161;
  __n128 *v162;
  __n128 v163;
  __n128 v164;
  unint64_t v165;
  unint64_t v166;
  __n128 v167;
  __n128 v168;
  unsigned __int8 *v169;
  unsigned __int8 *v170;
  unsigned __int8 *v171;
  unint64_t v172;
  unsigned __int8 *v173;
  uint64_t v174;
  unint64_t *v175;
  unint64_t v176;
  unint64_t v177;
  unint64_t *v178;
  unint64_t *v179;
  uint64_t v180;
  unint64_t *v181;
  unint64_t v182;
  unint64_t v183;
  unint64_t *v184;
  void *v185;
  unint64_t *v186;
  unint64_t v187;
  unint64_t v188;
  unint64_t *v189;
  unint64_t *v190;
  unint64_t v191;
  unint64_t v192;
  unint64_t *v193;
  unint64_t v194;
  unint64_t v195;
  unint64_t *v196;
  unsigned int v197;
  unint64_t *v198;
  unint64_t v199;
  unint64_t v200;
  unint64_t *v201;
  void *v202;
  void *v203;
  unint64_t *v204;
  unint64_t v205;
  unint64_t v206;
  unint64_t *v207;
  unint64_t *v208;
  uint64_t v209;
  unint64_t *v210;
  unint64_t v211;
  unint64_t v212;
  unint64_t *v213;
  void *v214;
  unint64_t *v215;
  unint64_t v216;
  unint64_t v217;
  unint64_t *v218;
  unint64_t *v219;
  unint64_t v220;
  unint64_t v221;
  unint64_t *v222;
  unint64_t v223;
  unint64_t v224;
  unint64_t *v225;
  unsigned int v226;
  unint64_t *v227;
  unint64_t v228;
  unint64_t v229;
  unint64_t *v230;
  void *v231;
  void *v232;
  unint64_t v233;
  int64_t v234;
  int64_t v235;
  int64_t v236;
  uint64_t v237;
  unsigned __int8 *v238;
  uint64_t v239;
  unint64_t *v240;
  unsigned __int8 *v241;
  unint64_t *v242;
  unint64_t v243;
  unint64_t v244;
  unint64_t *v245;
  unint64_t *v246;
  uint64_t v247;
  unint64_t *v248;
  unint64_t v249;
  unint64_t v250;
  unint64_t *v251;
  void *v252;
  unint64_t *v253;
  unint64_t v254;
  unint64_t v255;
  unint64_t *v256;
  unint64_t *v257;
  unint64_t v258;
  unint64_t v259;
  unint64_t *v260;
  unint64_t v261;
  unint64_t v262;
  unint64_t *v263;
  unsigned int v264;
  unint64_t *v265;
  unint64_t v266;
  unint64_t v267;
  unint64_t *v268;
  void *v269;
  void *v270;
  unint64_t *v271;
  uint64_t v272;
  unint64_t *v273;
  unint64_t v274;
  unint64_t v275;
  unint64_t *v276;
  unint64_t *v277;
  uint64_t v278;
  unint64_t *v279;
  unint64_t v280;
  unint64_t v281;
  unint64_t *v282;
  void *v283;
  unint64_t *v284;
  unint64_t v285;
  unint64_t v286;
  unint64_t *v287;
  unint64_t *v288;
  unint64_t v289;
  unint64_t v290;
  unint64_t *v291;
  unint64_t v292;
  unint64_t v293;
  unint64_t *v294;
  unsigned int v295;
  unint64_t *v296;
  unint64_t v297;
  unint64_t v298;
  unint64_t *v299;
  void *v300;
  void *v301;
  unint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  unint64_t *v310;
  unint64_t v311;
  unint64_t v312;
  unint64_t *v313;
  unint64_t *v314;
  uint64_t v315;
  unint64_t *v316;
  unint64_t v317;
  unint64_t v318;
  unint64_t *v319;
  unint64_t *v320;
  unint64_t v321;
  unint64_t v322;
  unint64_t *v323;
  void *v324;
  void *v325;
  unsigned int v326;
  unint64_t *v327;
  unint64_t v328;
  unint64_t v329;
  unint64_t *v330;
  void *v331;
  unint64_t *v332;
  unint64_t v333;
  unint64_t v334;
  unint64_t *v335;
  unint64_t v336;
  unint64_t v337;
  unint64_t *v338;
  unint64_t *v339;
  unint64_t *v340;
  unint64_t v341;
  unint64_t v342;
  unint64_t *v343;
  unint64_t *v344;
  uint64_t v345;
  unint64_t *v346;
  unint64_t v347;
  unint64_t v348;
  unint64_t *v349;
  unint64_t *v350;
  uint64_t v351;
  unint64_t *v352;
  unint64_t v353;
  unint64_t v354;
  unint64_t *v355;
  void *v356;
  unint64_t *v357;
  unint64_t v358;
  unint64_t v359;
  unint64_t *v360;
  unint64_t *v361;
  unint64_t v362;
  unint64_t v363;
  unint64_t *v364;
  unint64_t v365;
  unint64_t v366;
  unint64_t *v367;
  unsigned int v368;
  unint64_t *v369;
  unint64_t v370;
  unint64_t v371;
  unint64_t *v372;
  void *v373;
  void *v374;
  uint64_t v375;
  uint64_t v376;
  unint64_t v377;
  unsigned __int8 *v378;
  unint64_t *v379;
  unsigned __int8 *v380;
  unint64_t *v381;
  unint64_t v382;
  unint64_t v383;
  unint64_t *v384;
  unint64_t *v385;
  uint64_t v386;
  unint64_t *v387;
  unint64_t v388;
  unint64_t v389;
  unint64_t *v390;
  unint64_t *v391;
  unint64_t v392;
  unint64_t v393;
  unint64_t *v394;
  void *v395;
  void *v396;
  unsigned int v397;
  unint64_t *v398;
  unint64_t v399;
  unint64_t v400;
  unint64_t *v401;
  void *v402;
  unint64_t *v403;
  unint64_t v404;
  unint64_t v405;
  unint64_t *v406;
  unint64_t v407;
  unint64_t v408;
  unint64_t *v409;
  unint64_t *v410;
  unint64_t *v411;
  unint64_t v412;
  unint64_t v413;
  unint64_t *v414;
  unint64_t *v415;
  uint64_t v416;
  unint64_t *v417;
  unint64_t v418;
  unint64_t v419;
  unint64_t *v420;
  void *v421;
  unint64_t *v422;
  unint64_t v423;
  unint64_t v424;
  unint64_t *v425;
  unint64_t *v426;
  unint64_t v427;
  unint64_t v428;
  unint64_t *v429;
  unint64_t v430;
  unint64_t v431;
  unint64_t *v432;
  unsigned int v433;
  unint64_t *v434;
  unint64_t v435;
  unint64_t v436;
  unint64_t *v437;
  void *v438;
  void *v439;
  unint64_t *v440;
  unint64_t v441;
  unint64_t v442;
  unint64_t *v443;
  void *v444;
  unint64_t *v445;
  unint64_t v446;
  unint64_t v447;
  unint64_t *v448;
  unint64_t *v449;
  unint64_t v450;
  unint64_t v451;
  unint64_t *v452;
  unint64_t v453;
  unint64_t v454;
  unint64_t *v455;
  unsigned int v456;
  unint64_t *v457;
  unint64_t v458;
  unint64_t v459;
  unint64_t *v460;
  void *v461;
  void *v462;
  unint64_t v463;
  unsigned __int8 *v465;
  unsigned __int8 *v466;
  unint64_t v467;
  unsigned __int8 *v468;
  uint64_t v469;
  unint64_t *v470;
  unint64_t v471;
  unint64_t v472;
  unint64_t *v473;
  unint64_t *v474;
  uint64_t v475;
  unint64_t *v476;
  unint64_t v477;
  unint64_t v478;
  unint64_t *v479;
  unint64_t *v480;
  unint64_t v481;
  unint64_t v482;
  unint64_t *v483;
  void *v484;
  void *v485;
  unsigned int v486;
  unint64_t *v487;
  unint64_t v488;
  unint64_t v489;
  unint64_t *v490;
  void *v491;
  unint64_t *v492;
  unint64_t v493;
  unint64_t v494;
  unint64_t *v495;
  unint64_t v496;
  unint64_t v497;
  unint64_t *v498;
  unint64_t *v499;
  unint64_t v500;
  unint64_t v501;
  unint64_t *v502;
  unint64_t *v503;
  uint64_t v504;
  unint64_t *v505;
  unint64_t v506;
  unint64_t v507;
  unint64_t *v508;
  void *v509;
  unint64_t *v510;
  unint64_t v511;
  unint64_t v512;
  unint64_t *v513;
  unint64_t *v514;
  unint64_t v515;
  unint64_t v516;
  unint64_t *v517;
  unint64_t v518;
  unint64_t v519;
  unint64_t *v520;
  unsigned int v521;
  unint64_t *v522;
  unint64_t v523;
  unint64_t v524;
  unint64_t *v525;
  void *v526;
  void *v527;
  unint64_t v528;
  unsigned __int8 *v529;
  int v530;
  unsigned __int8 v531;
  _BYTE v533[13];
  __n128 v534;
  uint64_t v535;

  v7 = result;
  v535 = *MEMORY[0x24BDAC8D0];
LABEL_2:
  v8 = a2 - 16;
  v9 = v7;
  while (2)
  {
    v7 = v9;
    v10 = (uint64_t)&a2[-v9];
    v11 = (uint64_t)&a2[-v9] >> 4;
    switch(v11)
    {
      case 0:
      case 1:
        return result;
      case 2:
        result = turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_6::operator()(v8, (unsigned __int8 *)v7, a5);
        if ((_DWORD)result)
        {
          v534 = *(__n128 *)v7;
          v158 = *(_QWORD *)v8;
          *(_QWORD *)(v7 + 5) = *(_QWORD *)(a2 - 11);
          *(_QWORD *)v7 = v158;
          v159 = v534.n128_u64[0];
          *(_QWORD *)(a2 - 11) = *(unint64_t *)((char *)v534.n128_u64 + 5);
          *(_QWORD *)v8 = v159;
        }
        return result;
      case 3:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_6 &,turi::flexible_type *>((__int128 *)v7, (__int128 *)(v7 + 16), (uint64_t)v8, a5);
      case 4:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_6 &,turi::flexible_type *>(v7, v7 + 16, v7 + 32, (uint64_t)v8, a5);
      case 5:
        v160 = (__n128 *)(v7 + 16);
        v161 = (__n128 *)(v7 + 32);
        v162 = (__n128 *)(v7 + 48);
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_6 &,turi::flexible_type *>(v7, v7 + 16, v7 + 32, v7 + 48, a5);
        result = turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_6::operator()(v8, (unsigned __int8 *)(v7 + 48), v163);
        if ((_DWORD)result)
        {
          v534 = *v162;
          v164 = v534;
          v165 = *(_QWORD *)v8;
          *(_QWORD *)(v7 + 53) = *(_QWORD *)(a2 - 11);
          v162->n128_u64[0] = v165;
          v166 = v534.n128_u64[0];
          *(_QWORD *)(a2 - 11) = *(unint64_t *)((char *)v534.n128_u64 + 5);
          *(_QWORD *)v8 = v166;
          result = turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_6::operator()((unsigned __int8 *)(v7 + 48), (unsigned __int8 *)(v7 + 32), v164);
          if ((_DWORD)result)
          {
            v534 = *v161;
            v167 = v534;
            v161->n128_u64[0] = v162->n128_u64[0];
            *(_QWORD *)(v7 + 37) = *(_QWORD *)(v7 + 53);
            v162->n128_u64[0] = v534.n128_u64[0];
            *(_QWORD *)(v7 + 53) = *(unint64_t *)((char *)v534.n128_u64 + 5);
            result = turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_6::operator()((unsigned __int8 *)(v7 + 32), (unsigned __int8 *)(v7 + 16), v167);
            if ((_DWORD)result)
            {
              v534 = *v160;
              v168 = v534;
              v160->n128_u64[0] = v161->n128_u64[0];
              *(_QWORD *)(v7 + 21) = *(_QWORD *)(v7 + 37);
              v161->n128_u64[0] = v534.n128_u64[0];
              *(_QWORD *)(v7 + 37) = *(unint64_t *)((char *)v534.n128_u64 + 5);
              result = turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_6::operator()((unsigned __int8 *)(v7 + 16), (unsigned __int8 *)v7, v168);
              if ((_DWORD)result)
              {
                v534 = *(__n128 *)v7;
                *(_QWORD *)v7 = v160->n128_u64[0];
                *(_QWORD *)(v7 + 5) = *(_QWORD *)(v7 + 21);
                v160->n128_u64[0] = v534.n128_u64[0];
                *(_QWORD *)(v7 + 21) = *(unint64_t *)((char *)v534.n128_u64 + 5);
              }
            }
          }
        }
        return result;
      default:
        if (v10 <= 383)
        {
          if ((a4 & 1) != 0)
          {
            if ((unsigned __int8 *)v7 != a2)
            {
              v169 = (unsigned __int8 *)(v7 + 16);
              if ((unsigned __int8 *)(v7 + 16) != a2)
              {
                v170 = (unsigned __int8 *)v7;
                do
                {
                  v171 = v169;
                  result = turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_6::operator()(v169, v170, a5);
                  if ((_DWORD)result)
                  {
                    v172 = *(_QWORD *)v171;
                    *(unint64_t *)((char *)v534.n128_u64 + 5) = *(_QWORD *)(v171 + 5);
                    v534.n128_u64[0] = v172;
                    v534.n128_u8[12] = v170[28];
                    v170[28] = 0;
                    v173 = v171;
                    while (1)
                    {
                      v174 = (uint64_t)v170;
                      switch(v173[12])
                      {
                        case 2u:
                          v175 = *(unint64_t **)v173;
                          do
                          {
                            v176 = __ldaxr(v175);
                            v177 = v176 - 1;
                          }
                          while (__stlxr(v177, v175));
                          if (!v177)
                          {
                            v178 = *(unint64_t **)v173;
                            if (!*(_QWORD *)v173)
                              goto LABEL_281;
                            if (*((char *)v178 + 31) < 0)
                              operator delete((void *)v178[1]);
                            v179 = v178;
                            v180 = 0x1012C404EF22A49;
                            goto LABEL_280;
                          }
                          break;
                        case 3u:
                          v181 = *(unint64_t **)v173;
                          do
                          {
                            v182 = __ldaxr(v181);
                            v183 = v182 - 1;
                          }
                          while (__stlxr(v183, v181));
                          if (!v183)
                          {
                            v184 = *(unint64_t **)v173;
                            if (!*(_QWORD *)v173)
                              goto LABEL_281;
                            v185 = (void *)v184[1];
                            if (v185)
                            {
                              v184[2] = (unint64_t)v185;
                              operator delete(v185);
                            }
                            v179 = v184;
                            v180 = 0x1080C409938AC02;
                            goto LABEL_280;
                          }
                          break;
                        case 4u:
                          v186 = *(unint64_t **)v173;
                          do
                          {
                            v187 = __ldaxr(v186);
                            v188 = v187 - 1;
                          }
                          while (__stlxr(v188, v186));
                          if (!v188)
                          {
                            v189 = *(unint64_t **)v173;
                            if (!*(_QWORD *)v173)
                              goto LABEL_281;
                            *(_QWORD *)v533 = v189 + 1;
                            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v533);
                            goto LABEL_264;
                          }
                          break;
                        case 5u:
                          v190 = *(unint64_t **)v173;
                          do
                          {
                            v191 = __ldaxr(v190);
                            v192 = v191 - 1;
                          }
                          while (__stlxr(v192, v190));
                          if (!v192)
                          {
                            v189 = *(unint64_t **)v173;
                            if (!*(_QWORD *)v173)
                              goto LABEL_281;
                            *(_QWORD *)v533 = v189 + 1;
                            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v533);
LABEL_264:
                            v179 = v189;
                            v180 = 0x1020C405E66F15BLL;
                            goto LABEL_280;
                          }
                          break;
                        case 8u:
                          v193 = *(unint64_t **)v173;
                          do
                          {
                            v194 = __ldaxr(v193);
                            v195 = v194 - 1;
                          }
                          while (__stlxr(v195, v193));
                          if (!v195)
                          {
                            v196 = *(unint64_t **)v173;
                            if (!*(_QWORD *)v173)
                              goto LABEL_281;
                            boost::detail::shared_count::~shared_count((unsigned int **)v196 + 2);
                            v179 = v196;
                            v197 = -235920773;
                            goto LABEL_279;
                          }
                          break;
                        case 9u:
                          v198 = *(unint64_t **)v173;
                          do
                          {
                            v199 = __ldaxr(v198);
                            v200 = v199 - 1;
                          }
                          while (__stlxr(v200, v198));
                          if (!v200)
                          {
                            v201 = *(unint64_t **)v173;
                            if (*(_QWORD *)v173)
                            {
                              v202 = (void *)v201[6];
                              if (v202)
                              {
                                v201[7] = (unint64_t)v202;
                                operator delete(v202);
                              }
                              v203 = (void *)v201[3];
                              if (v203)
                              {
                                v201[4] = (unint64_t)v203;
                                operator delete(v203);
                              }
                              std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v201 + 1));
                              v179 = v201;
                              v197 = 2071181815;
LABEL_279:
                              v180 = v197 | 0x1030C4000000000;
LABEL_280:
                              result = MEMORY[0x219A19A08](v179, v180);
                            }
LABEL_281:
                            *(_QWORD *)v173 = 0;
                          }
                          break;
                        default:
                          break;
                      }
                      *(_QWORD *)v173 = *(_QWORD *)v174;
                      *(_QWORD *)(v173 + 5) = *(_QWORD *)(v174 + 5);
                      v173[12] = *(_BYTE *)(v174 + 12);
                      *(_BYTE *)(v174 + 12) = 0;
                      if (v174 == v7)
                        break;
                      v170 = (unsigned __int8 *)(v174 - 16);
                      result = turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_6::operator()((unsigned __int8 *)&v534, (unsigned __int8 *)(v174 - 16), a5);
                      v173 = (unsigned __int8 *)v174;
                      if ((result & 1) == 0)
                        goto LABEL_286;
                    }
                    v174 = v7;
LABEL_286:
                    switch(*(_BYTE *)(v174 + 12))
                    {
                      case 2:
                        v204 = *(unint64_t **)v174;
                        do
                        {
                          v205 = __ldaxr(v204);
                          v206 = v205 - 1;
                        }
                        while (__stlxr(v206, v204));
                        if (!v206)
                        {
                          v207 = *(unint64_t **)v174;
                          if (!*(_QWORD *)v174)
                            goto LABEL_328;
                          if (*((char *)v207 + 31) < 0)
                            operator delete((void *)v207[1]);
                          v208 = v207;
                          v209 = 0x1012C404EF22A49;
                          goto LABEL_327;
                        }
                        break;
                      case 3:
                        v210 = *(unint64_t **)v174;
                        do
                        {
                          v211 = __ldaxr(v210);
                          v212 = v211 - 1;
                        }
                        while (__stlxr(v212, v210));
                        if (!v212)
                        {
                          v213 = *(unint64_t **)v174;
                          if (!*(_QWORD *)v174)
                            goto LABEL_328;
                          v214 = (void *)v213[1];
                          if (v214)
                          {
                            v213[2] = (unint64_t)v214;
                            operator delete(v214);
                          }
                          v208 = v213;
                          v209 = 0x1080C409938AC02;
                          goto LABEL_327;
                        }
                        break;
                      case 4:
                        v215 = *(unint64_t **)v174;
                        do
                        {
                          v216 = __ldaxr(v215);
                          v217 = v216 - 1;
                        }
                        while (__stlxr(v217, v215));
                        if (!v217)
                        {
                          v218 = *(unint64_t **)v174;
                          if (!*(_QWORD *)v174)
                            goto LABEL_328;
                          *(_QWORD *)v533 = v218 + 1;
                          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v533);
                          goto LABEL_311;
                        }
                        break;
                      case 5:
                        v219 = *(unint64_t **)v174;
                        do
                        {
                          v220 = __ldaxr(v219);
                          v221 = v220 - 1;
                        }
                        while (__stlxr(v221, v219));
                        if (!v221)
                        {
                          v218 = *(unint64_t **)v174;
                          if (!*(_QWORD *)v174)
                            goto LABEL_328;
                          *(_QWORD *)v533 = v218 + 1;
                          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v533);
LABEL_311:
                          v208 = v218;
                          v209 = 0x1020C405E66F15BLL;
                          goto LABEL_327;
                        }
                        break;
                      case 8:
                        v222 = *(unint64_t **)v174;
                        do
                        {
                          v223 = __ldaxr(v222);
                          v224 = v223 - 1;
                        }
                        while (__stlxr(v224, v222));
                        if (!v224)
                        {
                          v225 = *(unint64_t **)v174;
                          if (!*(_QWORD *)v174)
                            goto LABEL_328;
                          boost::detail::shared_count::~shared_count((unsigned int **)v225 + 2);
                          v208 = v225;
                          v226 = -235920773;
                          goto LABEL_326;
                        }
                        break;
                      case 9:
                        v227 = *(unint64_t **)v174;
                        do
                        {
                          v228 = __ldaxr(v227);
                          v229 = v228 - 1;
                        }
                        while (__stlxr(v229, v227));
                        if (!v229)
                        {
                          v230 = *(unint64_t **)v174;
                          if (*(_QWORD *)v174)
                          {
                            v231 = (void *)v230[6];
                            if (v231)
                            {
                              v230[7] = (unint64_t)v231;
                              operator delete(v231);
                            }
                            v232 = (void *)v230[3];
                            if (v232)
                            {
                              v230[4] = (unint64_t)v232;
                              operator delete(v232);
                            }
                            std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v230 + 1));
                            v208 = v230;
                            v226 = 2071181815;
LABEL_326:
                            v209 = v226 | 0x1030C4000000000;
LABEL_327:
                            result = MEMORY[0x219A19A08](v208, v209);
                          }
LABEL_328:
                          *(_QWORD *)v174 = 0;
                        }
                        break;
                      default:
                        break;
                    }
                    v233 = v534.n128_u64[0];
                    *(_QWORD *)(v174 + 5) = *(unint64_t *)((char *)v534.n128_u64 + 5);
                    *(_QWORD *)v174 = v233;
                    *(_BYTE *)(v174 + 12) = v534.n128_u8[12];
                  }
                  v169 = v171 + 16;
                  v170 = v171;
                }
                while (v171 + 16 != a2);
              }
            }
          }
          else if ((unsigned __int8 *)v7 != a2)
          {
            v465 = (unsigned __int8 *)(v7 + 16);
            if ((unsigned __int8 *)(v7 + 16) != a2)
            {
              do
              {
                v466 = v465;
                result = turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_6::operator()(v465, (unsigned __int8 *)v7, a5);
                if ((_DWORD)result)
                {
                  v467 = *(_QWORD *)v466;
                  *(unint64_t *)((char *)v534.n128_u64 + 5) = *(_QWORD *)(v466 + 5);
                  v534.n128_u64[0] = v467;
                  v534.n128_u8[12] = *(_BYTE *)(v7 + 28);
                  *(_BYTE *)(v7 + 28) = 0;
                  v468 = v466;
                  do
                  {
                    v469 = v7;
                    switch(v468[12])
                    {
                      case 2u:
                        v470 = *(unint64_t **)v468;
                        do
                        {
                          v471 = __ldaxr(v470);
                          v472 = v471 - 1;
                        }
                        while (__stlxr(v472, v470));
                        if (!v472)
                        {
                          v473 = *(unint64_t **)v468;
                          if (!*(_QWORD *)v468)
                            goto LABEL_719;
                          if (*((char *)v473 + 31) < 0)
                            operator delete((void *)v473[1]);
                          v474 = v473;
                          v475 = 0x1012C404EF22A49;
                          goto LABEL_718;
                        }
                        break;
                      case 3u:
                        v487 = *(unint64_t **)v468;
                        do
                        {
                          v488 = __ldaxr(v487);
                          v489 = v488 - 1;
                        }
                        while (__stlxr(v489, v487));
                        if (!v489)
                        {
                          v490 = *(unint64_t **)v468;
                          if (!*(_QWORD *)v468)
                            goto LABEL_719;
                          v491 = (void *)v490[1];
                          if (v491)
                          {
                            v490[2] = (unint64_t)v491;
                            operator delete(v491);
                          }
                          v474 = v490;
                          v475 = 0x1080C409938AC02;
                          goto LABEL_718;
                        }
                        break;
                      case 4u:
                        v476 = *(unint64_t **)v468;
                        do
                        {
                          v477 = __ldaxr(v476);
                          v478 = v477 - 1;
                        }
                        while (__stlxr(v478, v476));
                        if (!v478)
                        {
                          v479 = *(unint64_t **)v468;
                          if (!*(_QWORD *)v468)
                            goto LABEL_719;
                          *(_QWORD *)v533 = v479 + 1;
                          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v533);
                          goto LABEL_711;
                        }
                        break;
                      case 5u:
                        v492 = *(unint64_t **)v468;
                        do
                        {
                          v493 = __ldaxr(v492);
                          v494 = v493 - 1;
                        }
                        while (__stlxr(v494, v492));
                        if (!v494)
                        {
                          v479 = *(unint64_t **)v468;
                          if (!*(_QWORD *)v468)
                            goto LABEL_719;
                          *(_QWORD *)v533 = v479 + 1;
                          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v533);
LABEL_711:
                          v474 = v479;
                          v475 = 0x1020C405E66F15BLL;
                          goto LABEL_718;
                        }
                        break;
                      case 8u:
                        v495 = *(unint64_t **)v468;
                        do
                        {
                          v496 = __ldaxr(v495);
                          v497 = v496 - 1;
                        }
                        while (__stlxr(v497, v495));
                        if (!v497)
                        {
                          v498 = *(unint64_t **)v468;
                          if (!*(_QWORD *)v468)
                            goto LABEL_719;
                          boost::detail::shared_count::~shared_count((unsigned int **)v498 + 2);
                          v474 = v498;
                          v486 = -235920773;
                          goto LABEL_717;
                        }
                        break;
                      case 9u:
                        v480 = *(unint64_t **)v468;
                        do
                        {
                          v481 = __ldaxr(v480);
                          v482 = v481 - 1;
                        }
                        while (__stlxr(v482, v480));
                        if (!v482)
                        {
                          v483 = *(unint64_t **)v468;
                          if (*(_QWORD *)v468)
                          {
                            v484 = (void *)v483[6];
                            if (v484)
                            {
                              v483[7] = (unint64_t)v484;
                              operator delete(v484);
                            }
                            v485 = (void *)v483[3];
                            if (v485)
                            {
                              v483[4] = (unint64_t)v485;
                              operator delete(v485);
                            }
                            std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v483 + 1));
                            v474 = v483;
                            v486 = 2071181815;
LABEL_717:
                            v475 = v486 | 0x1030C4000000000;
LABEL_718:
                            MEMORY[0x219A19A08](v474, v475);
                          }
LABEL_719:
                          *(_QWORD *)v468 = 0;
                        }
                        break;
                      default:
                        break;
                    }
                    *(_QWORD *)v468 = *(_QWORD *)v469;
                    *(_QWORD *)(v468 + 5) = *(_QWORD *)(v469 + 5);
                    v468[12] = *(_BYTE *)(v469 + 12);
                    *(_BYTE *)(v469 + 12) = 0;
                    v7 = v469 - 16;
                    result = turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_6::operator()((unsigned __int8 *)&v534, (unsigned __int8 *)(v469 - 16), a5);
                    v468 = (unsigned __int8 *)v469;
                  }
                  while ((result & 1) != 0);
                  switch(*(_BYTE *)(v469 + 12))
                  {
                    case 2:
                      v499 = *(unint64_t **)v469;
                      do
                      {
                        v500 = __ldaxr(v499);
                        v501 = v500 - 1;
                      }
                      while (__stlxr(v501, v499));
                      if (!v501)
                      {
                        v502 = *(unint64_t **)v469;
                        if (!*(_QWORD *)v469)
                          goto LABEL_763;
                        if (*((char *)v502 + 31) < 0)
                          operator delete((void *)v502[1]);
                        v503 = v502;
                        v504 = 0x1012C404EF22A49;
                        goto LABEL_762;
                      }
                      break;
                    case 3:
                      v505 = *(unint64_t **)v469;
                      do
                      {
                        v506 = __ldaxr(v505);
                        v507 = v506 - 1;
                      }
                      while (__stlxr(v507, v505));
                      if (!v507)
                      {
                        v508 = *(unint64_t **)v469;
                        if (!*(_QWORD *)v469)
                          goto LABEL_763;
                        v509 = (void *)v508[1];
                        if (v509)
                        {
                          v508[2] = (unint64_t)v509;
                          operator delete(v509);
                        }
                        v503 = v508;
                        v504 = 0x1080C409938AC02;
                        goto LABEL_762;
                      }
                      break;
                    case 4:
                      v510 = *(unint64_t **)v469;
                      do
                      {
                        v511 = __ldaxr(v510);
                        v512 = v511 - 1;
                      }
                      while (__stlxr(v512, v510));
                      if (!v512)
                      {
                        v513 = *(unint64_t **)v469;
                        if (!*(_QWORD *)v469)
                          goto LABEL_763;
                        *(_QWORD *)v533 = v513 + 1;
                        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v533);
                        goto LABEL_746;
                      }
                      break;
                    case 5:
                      v514 = *(unint64_t **)v469;
                      do
                      {
                        v515 = __ldaxr(v514);
                        v516 = v515 - 1;
                      }
                      while (__stlxr(v516, v514));
                      if (!v516)
                      {
                        v513 = *(unint64_t **)v469;
                        if (!*(_QWORD *)v469)
                          goto LABEL_763;
                        *(_QWORD *)v533 = v513 + 1;
                        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v533);
LABEL_746:
                        v503 = v513;
                        v504 = 0x1020C405E66F15BLL;
                        goto LABEL_762;
                      }
                      break;
                    case 8:
                      v517 = *(unint64_t **)v469;
                      do
                      {
                        v518 = __ldaxr(v517);
                        v519 = v518 - 1;
                      }
                      while (__stlxr(v519, v517));
                      if (!v519)
                      {
                        v520 = *(unint64_t **)v469;
                        if (!*(_QWORD *)v469)
                          goto LABEL_763;
                        boost::detail::shared_count::~shared_count((unsigned int **)v520 + 2);
                        v503 = v520;
                        v521 = -235920773;
                        goto LABEL_761;
                      }
                      break;
                    case 9:
                      v522 = *(unint64_t **)v469;
                      do
                      {
                        v523 = __ldaxr(v522);
                        v524 = v523 - 1;
                      }
                      while (__stlxr(v524, v522));
                      if (!v524)
                      {
                        v525 = *(unint64_t **)v469;
                        if (*(_QWORD *)v469)
                        {
                          v526 = (void *)v525[6];
                          if (v526)
                          {
                            v525[7] = (unint64_t)v526;
                            operator delete(v526);
                          }
                          v527 = (void *)v525[3];
                          if (v527)
                          {
                            v525[4] = (unint64_t)v527;
                            operator delete(v527);
                          }
                          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v525 + 1));
                          v503 = v525;
                          v521 = 2071181815;
LABEL_761:
                          v504 = v521 | 0x1030C4000000000;
LABEL_762:
                          result = MEMORY[0x219A19A08](v503, v504);
                        }
LABEL_763:
                        *(_QWORD *)v469 = 0;
                      }
                      break;
                    default:
                      break;
                  }
                  v528 = v534.n128_u64[0];
                  *(_QWORD *)(v469 + 5) = *(unint64_t *)((char *)v534.n128_u64 + 5);
                  *(_QWORD *)v469 = v528;
                  *(_BYTE *)(v469 + 12) = v534.n128_u8[12];
                }
                v465 = v466 + 16;
                v7 = (uint64_t)v466;
              }
              while (v466 + 16 != a2);
            }
          }
          return result;
        }
        if (!a3)
        {
          if ((unsigned __int8 *)v7 != a2)
          {
            v234 = (unint64_t)(v11 - 2) >> 1;
            v235 = v234;
            do
            {
              v236 = v235;
              if (v234 >= v235)
              {
                v237 = (2 * v235) | 1;
                v238 = (unsigned __int8 *)(v7 + 16 * v237);
                if (2 * v235 + 2 < v11
                  && turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_6::operator()((unsigned __int8 *)(v7 + 16 * v237), v238 + 16, a5))
                {
                  v238 += 16;
                  v237 = 2 * v236 + 2;
                }
                v239 = v7 + 16 * v236;
                result = turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_6::operator()(v238, (unsigned __int8 *)v239, a5);
                if ((result & 1) == 0)
                {
                  v240 = *(unint64_t **)v239;
                  *(unint64_t *)((char *)v534.n128_u64 + 5) = *(_QWORD *)(v239 + 5);
                  v534.n128_u64[0] = (unint64_t)v240;
                  v534.n128_u8[12] = *(_BYTE *)(v239 + 12);
                  *(_BYTE *)(v239 + 12) = 0;
                  do
                  {
                    v241 = v238;
                    if (v238 != (unsigned __int8 *)v239)
                    {
                      switch(*(_BYTE *)(v239 + 12))
                      {
                        case 2:
                          v242 = *(unint64_t **)v239;
                          do
                          {
                            v243 = __ldaxr(v242);
                            v244 = v243 - 1;
                          }
                          while (__stlxr(v244, v242));
                          if (!v244)
                          {
                            v245 = *(unint64_t **)v239;
                            if (!*(_QWORD *)v239)
                              goto LABEL_383;
                            if (*((char *)v245 + 31) < 0)
                              operator delete((void *)v245[1]);
                            v246 = v245;
                            v247 = 0x1012C404EF22A49;
                            goto LABEL_382;
                          }
                          break;
                        case 3:
                          v248 = *(unint64_t **)v239;
                          do
                          {
                            v249 = __ldaxr(v248);
                            v250 = v249 - 1;
                          }
                          while (__stlxr(v250, v248));
                          if (!v250)
                          {
                            v251 = *(unint64_t **)v239;
                            if (!*(_QWORD *)v239)
                              goto LABEL_383;
                            v252 = (void *)v251[1];
                            if (v252)
                            {
                              v251[2] = (unint64_t)v252;
                              operator delete(v252);
                            }
                            v246 = v251;
                            v247 = 0x1080C409938AC02;
                            goto LABEL_382;
                          }
                          break;
                        case 4:
                          v253 = *(unint64_t **)v239;
                          do
                          {
                            v254 = __ldaxr(v253);
                            v255 = v254 - 1;
                          }
                          while (__stlxr(v255, v253));
                          if (!v255)
                          {
                            v256 = *(unint64_t **)v239;
                            if (!*(_QWORD *)v239)
                              goto LABEL_383;
                            *(_QWORD *)v533 = v256 + 1;
                            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v533);
                            goto LABEL_366;
                          }
                          break;
                        case 5:
                          v257 = *(unint64_t **)v239;
                          do
                          {
                            v258 = __ldaxr(v257);
                            v259 = v258 - 1;
                          }
                          while (__stlxr(v259, v257));
                          if (!v259)
                          {
                            v256 = *(unint64_t **)v239;
                            if (!*(_QWORD *)v239)
                              goto LABEL_383;
                            *(_QWORD *)v533 = v256 + 1;
                            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v533);
LABEL_366:
                            v246 = v256;
                            v247 = 0x1020C405E66F15BLL;
                            goto LABEL_382;
                          }
                          break;
                        case 8:
                          v260 = *(unint64_t **)v239;
                          do
                          {
                            v261 = __ldaxr(v260);
                            v262 = v261 - 1;
                          }
                          while (__stlxr(v262, v260));
                          if (!v262)
                          {
                            v263 = *(unint64_t **)v239;
                            if (!*(_QWORD *)v239)
                              goto LABEL_383;
                            boost::detail::shared_count::~shared_count((unsigned int **)v263 + 2);
                            v246 = v263;
                            v264 = -235920773;
                            goto LABEL_381;
                          }
                          break;
                        case 9:
                          v265 = *(unint64_t **)v239;
                          do
                          {
                            v266 = __ldaxr(v265);
                            v267 = v266 - 1;
                          }
                          while (__stlxr(v267, v265));
                          if (!v267)
                          {
                            v268 = *(unint64_t **)v239;
                            if (*(_QWORD *)v239)
                            {
                              v269 = (void *)v268[6];
                              if (v269)
                              {
                                v268[7] = (unint64_t)v269;
                                operator delete(v269);
                              }
                              v270 = (void *)v268[3];
                              if (v270)
                              {
                                v268[4] = (unint64_t)v270;
                                operator delete(v270);
                              }
                              std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v268 + 1));
                              v246 = v268;
                              v264 = 2071181815;
LABEL_381:
                              v247 = v264 | 0x1030C4000000000;
LABEL_382:
                              result = MEMORY[0x219A19A08](v246, v247);
                            }
LABEL_383:
                            *(_QWORD *)v239 = 0;
                          }
                          break;
                        default:
                          break;
                      }
                      v271 = *(unint64_t **)v241;
                      *(_QWORD *)(v239 + 5) = *(_QWORD *)(v241 + 5);
                      *(_QWORD *)v239 = v271;
                      *(_BYTE *)(v239 + 12) = v241[12];
                      v241[12] = 0;
                    }
                    if (v234 < v237)
                      break;
                    v272 = (2 * v237) | 1;
                    v238 = (unsigned __int8 *)(v7 + 16 * v272);
                    v237 = 2 * v237 + 2;
                    if (v237 >= v11)
                    {
                      v237 = v272;
                    }
                    else if (turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_6::operator()((unsigned __int8 *)(v7 + 16 * v272), v238 + 16, a5))
                    {
                      v238 += 16;
                    }
                    else
                    {
                      v237 = v272;
                    }
                    result = turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_6::operator()(v238, (unsigned __int8 *)&v534, a5);
                    v239 = (uint64_t)v241;
                  }
                  while (!(_DWORD)result);
                  switch(v241[12])
                  {
                    case 2u:
                      v273 = *(unint64_t **)v241;
                      do
                      {
                        v274 = __ldaxr(v273);
                        v275 = v274 - 1;
                      }
                      while (__stlxr(v275, v273));
                      if (!v275)
                      {
                        v276 = *(unint64_t **)v241;
                        if (!*(_QWORD *)v241)
                          goto LABEL_434;
                        if (*((char *)v276 + 31) < 0)
                          operator delete((void *)v276[1]);
                        v277 = v276;
                        v278 = 0x1012C404EF22A49;
                        goto LABEL_433;
                      }
                      break;
                    case 3u:
                      v279 = *(unint64_t **)v241;
                      do
                      {
                        v280 = __ldaxr(v279);
                        v281 = v280 - 1;
                      }
                      while (__stlxr(v281, v279));
                      if (!v281)
                      {
                        v282 = *(unint64_t **)v241;
                        if (!*(_QWORD *)v241)
                          goto LABEL_434;
                        v283 = (void *)v282[1];
                        if (v283)
                        {
                          v282[2] = (unint64_t)v283;
                          operator delete(v283);
                        }
                        v277 = v282;
                        v278 = 0x1080C409938AC02;
                        goto LABEL_433;
                      }
                      break;
                    case 4u:
                      v284 = *(unint64_t **)v241;
                      do
                      {
                        v285 = __ldaxr(v284);
                        v286 = v285 - 1;
                      }
                      while (__stlxr(v286, v284));
                      if (!v286)
                      {
                        v287 = *(unint64_t **)v241;
                        if (!*(_QWORD *)v241)
                          goto LABEL_434;
                        *(_QWORD *)v533 = v287 + 1;
                        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v533);
                        goto LABEL_417;
                      }
                      break;
                    case 5u:
                      v288 = *(unint64_t **)v241;
                      do
                      {
                        v289 = __ldaxr(v288);
                        v290 = v289 - 1;
                      }
                      while (__stlxr(v290, v288));
                      if (!v290)
                      {
                        v287 = *(unint64_t **)v241;
                        if (!*(_QWORD *)v241)
                          goto LABEL_434;
                        *(_QWORD *)v533 = v287 + 1;
                        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v533);
LABEL_417:
                        v277 = v287;
                        v278 = 0x1020C405E66F15BLL;
                        goto LABEL_433;
                      }
                      break;
                    case 8u:
                      v291 = *(unint64_t **)v241;
                      do
                      {
                        v292 = __ldaxr(v291);
                        v293 = v292 - 1;
                      }
                      while (__stlxr(v293, v291));
                      if (!v293)
                      {
                        v294 = *(unint64_t **)v241;
                        if (!*(_QWORD *)v241)
                          goto LABEL_434;
                        boost::detail::shared_count::~shared_count((unsigned int **)v294 + 2);
                        v277 = v294;
                        v295 = -235920773;
                        goto LABEL_432;
                      }
                      break;
                    case 9u:
                      v296 = *(unint64_t **)v241;
                      do
                      {
                        v297 = __ldaxr(v296);
                        v298 = v297 - 1;
                      }
                      while (__stlxr(v298, v296));
                      if (!v298)
                      {
                        v299 = *(unint64_t **)v241;
                        if (*(_QWORD *)v241)
                        {
                          v300 = (void *)v299[6];
                          if (v300)
                          {
                            v299[7] = (unint64_t)v300;
                            operator delete(v300);
                          }
                          v301 = (void *)v299[3];
                          if (v301)
                          {
                            v299[4] = (unint64_t)v301;
                            operator delete(v301);
                          }
                          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v299 + 1));
                          v277 = v299;
                          v295 = 2071181815;
LABEL_432:
                          v278 = v295 | 0x1030C4000000000;
LABEL_433:
                          result = MEMORY[0x219A19A08](v277, v278);
                        }
LABEL_434:
                        *(_QWORD *)v241 = 0;
                      }
                      break;
                    default:
                      break;
                  }
                  v302 = v534.n128_u64[0];
                  *(_QWORD *)(v241 + 5) = *(unint64_t *)((char *)v534.n128_u64 + 5);
                  *(_QWORD *)v241 = v302;
                  v241[12] = v534.n128_u8[12];
                }
              }
              v235 = v236 - 1;
            }
            while (v236);
            v303 = (unint64_t)v10 >> 4;
            do
            {
              v304 = 0;
              v529 = a2;
              v305 = *(_QWORD *)v7;
              v530 = *(_DWORD *)(v7 + 8);
              v531 = *(_BYTE *)(v7 + 12);
              *(_BYTE *)(v7 + 12) = 0;
              v306 = v7;
              do
              {
                v307 = v306 + 16 * v304 + 16;
                v308 = 2 * v304;
                v304 = (2 * v304) | 1;
                v309 = v308 + 2;
                if (v308 + 2 < v303)
                {
                  result = turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_6::operator()((unsigned __int8 *)v307, (unsigned __int8 *)(v307 + 16), a5);
                  if ((_DWORD)result)
                  {
                    v307 += 16;
                    v304 = v309;
                  }
                }
                if (v307 != v306)
                {
                  switch(*(_BYTE *)(v306 + 12))
                  {
                    case 2:
                      v310 = *(unint64_t **)v306;
                      do
                      {
                        v311 = __ldaxr(v310);
                        v312 = v311 - 1;
                      }
                      while (__stlxr(v312, v310));
                      if (!v312)
                      {
                        v313 = *(unint64_t **)v306;
                        if (!*(_QWORD *)v306)
                          goto LABEL_485;
                        if (*((char *)v313 + 31) < 0)
                          operator delete((void *)v313[1]);
                        v314 = v313;
                        v315 = 0x1012C404EF22A49;
                        goto LABEL_484;
                      }
                      break;
                    case 3:
                      v327 = *(unint64_t **)v306;
                      do
                      {
                        v328 = __ldaxr(v327);
                        v329 = v328 - 1;
                      }
                      while (__stlxr(v329, v327));
                      if (!v329)
                      {
                        v330 = *(unint64_t **)v306;
                        if (!*(_QWORD *)v306)
                          goto LABEL_485;
                        v331 = (void *)v330[1];
                        if (v331)
                        {
                          v330[2] = (unint64_t)v331;
                          operator delete(v331);
                        }
                        v314 = v330;
                        v315 = 0x1080C409938AC02;
                        goto LABEL_484;
                      }
                      break;
                    case 4:
                      v316 = *(unint64_t **)v306;
                      do
                      {
                        v317 = __ldaxr(v316);
                        v318 = v317 - 1;
                      }
                      while (__stlxr(v318, v316));
                      if (!v318)
                      {
                        v319 = *(unint64_t **)v306;
                        if (!*(_QWORD *)v306)
                          goto LABEL_485;
                        v534.n128_u64[0] = (unint64_t)(v319 + 1);
                        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v534);
                        goto LABEL_477;
                      }
                      break;
                    case 5:
                      v332 = *(unint64_t **)v306;
                      do
                      {
                        v333 = __ldaxr(v332);
                        v334 = v333 - 1;
                      }
                      while (__stlxr(v334, v332));
                      if (!v334)
                      {
                        v319 = *(unint64_t **)v306;
                        if (!*(_QWORD *)v306)
                          goto LABEL_485;
                        v534.n128_u64[0] = (unint64_t)(v319 + 1);
                        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v534);
LABEL_477:
                        v314 = v319;
                        v315 = 0x1020C405E66F15BLL;
                        goto LABEL_484;
                      }
                      break;
                    case 8:
                      v335 = *(unint64_t **)v306;
                      do
                      {
                        v336 = __ldaxr(v335);
                        v337 = v336 - 1;
                      }
                      while (__stlxr(v337, v335));
                      if (!v337)
                      {
                        v338 = *(unint64_t **)v306;
                        if (!*(_QWORD *)v306)
                          goto LABEL_485;
                        boost::detail::shared_count::~shared_count((unsigned int **)v338 + 2);
                        v314 = v338;
                        v326 = -235920773;
                        goto LABEL_483;
                      }
                      break;
                    case 9:
                      v320 = *(unint64_t **)v306;
                      do
                      {
                        v321 = __ldaxr(v320);
                        v322 = v321 - 1;
                      }
                      while (__stlxr(v322, v320));
                      if (!v322)
                      {
                        v323 = *(unint64_t **)v306;
                        if (*(_QWORD *)v306)
                        {
                          v324 = (void *)v323[6];
                          if (v324)
                          {
                            v323[7] = (unint64_t)v324;
                            operator delete(v324);
                          }
                          v325 = (void *)v323[3];
                          if (v325)
                          {
                            v323[4] = (unint64_t)v325;
                            operator delete(v325);
                          }
                          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v323 + 1));
                          v314 = v323;
                          v326 = 2071181815;
LABEL_483:
                          v315 = v326 | 0x1030C4000000000;
LABEL_484:
                          result = MEMORY[0x219A19A08](v314, v315);
                        }
LABEL_485:
                        *(_QWORD *)v306 = 0;
                      }
                      break;
                    default:
                      break;
                  }
                  v339 = *(unint64_t **)v307;
                  *(_QWORD *)(v306 + 5) = *(_QWORD *)(v307 + 5);
                  *(_QWORD *)v306 = v339;
                  *(_BYTE *)(v306 + 12) = *(_BYTE *)(v307 + 12);
                  *(_BYTE *)(v307 + 12) = 0;
                }
                v306 = v307;
              }
              while (v304 <= (uint64_t)((unint64_t)(v303 - 2) >> 1));
              a2 -= 16;
              if ((unsigned __int8 *)v307 == v529 - 16)
              {
                switch(*(_BYTE *)(v307 + 12))
                {
                  case 2:
                    v346 = *(unint64_t **)v307;
                    do
                    {
                      v347 = __ldaxr(v346);
                      v348 = v347 - 1;
                    }
                    while (__stlxr(v348, v346));
                    if (!v348)
                    {
                      v349 = *(unint64_t **)v307;
                      if (!*(_QWORD *)v307)
                        goto LABEL_632;
                      if (*((char *)v349 + 31) < 0)
                        operator delete((void *)v349[1]);
                      v350 = v349;
                      v351 = 0x1012C404EF22A49;
                      goto LABEL_631;
                    }
                    break;
                  case 3:
                    v417 = *(unint64_t **)v307;
                    do
                    {
                      v418 = __ldaxr(v417);
                      v419 = v418 - 1;
                    }
                    while (__stlxr(v419, v417));
                    if (!v419)
                    {
                      v420 = *(unint64_t **)v307;
                      if (!*(_QWORD *)v307)
                        goto LABEL_632;
                      v421 = (void *)v420[1];
                      if (v421)
                      {
                        v420[2] = (unint64_t)v421;
                        operator delete(v421);
                      }
                      v350 = v420;
                      v351 = 0x1080C409938AC02;
                      goto LABEL_631;
                    }
                    break;
                  case 4:
                    v422 = *(unint64_t **)v307;
                    do
                    {
                      v423 = __ldaxr(v422);
                      v424 = v423 - 1;
                    }
                    while (__stlxr(v424, v422));
                    if (!v424)
                    {
                      v425 = *(unint64_t **)v307;
                      if (!*(_QWORD *)v307)
                        goto LABEL_632;
                      v534.n128_u64[0] = (unint64_t)(v425 + 1);
                      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v534);
                      goto LABEL_615;
                    }
                    break;
                  case 5:
                    v426 = *(unint64_t **)v307;
                    do
                    {
                      v427 = __ldaxr(v426);
                      v428 = v427 - 1;
                    }
                    while (__stlxr(v428, v426));
                    if (!v428)
                    {
                      v425 = *(unint64_t **)v307;
                      if (!*(_QWORD *)v307)
                        goto LABEL_632;
                      v534.n128_u64[0] = (unint64_t)(v425 + 1);
                      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v534);
LABEL_615:
                      v350 = v425;
                      v351 = 0x1020C405E66F15BLL;
                      goto LABEL_631;
                    }
                    break;
                  case 8:
                    v429 = *(unint64_t **)v307;
                    do
                    {
                      v430 = __ldaxr(v429);
                      v431 = v430 - 1;
                    }
                    while (__stlxr(v431, v429));
                    if (!v431)
                    {
                      v432 = *(unint64_t **)v307;
                      if (!*(_QWORD *)v307)
                        goto LABEL_632;
                      boost::detail::shared_count::~shared_count((unsigned int **)v432 + 2);
                      v350 = v432;
                      v433 = -235920773;
                      goto LABEL_630;
                    }
                    break;
                  case 9:
                    v434 = *(unint64_t **)v307;
                    do
                    {
                      v435 = __ldaxr(v434);
                      v436 = v435 - 1;
                    }
                    while (__stlxr(v436, v434));
                    if (!v436)
                    {
                      v437 = *(unint64_t **)v307;
                      if (*(_QWORD *)v307)
                      {
                        v438 = (void *)v437[6];
                        if (v438)
                        {
                          v437[7] = (unint64_t)v438;
                          operator delete(v438);
                        }
                        v439 = (void *)v437[3];
                        if (v439)
                        {
                          v437[4] = (unint64_t)v439;
                          operator delete(v439);
                        }
                        std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v437 + 1));
                        v350 = v437;
                        v433 = 2071181815;
LABEL_630:
                        v351 = v433 | 0x1030C4000000000;
LABEL_631:
                        result = MEMORY[0x219A19A08](v350, v351);
                      }
LABEL_632:
                      *(_QWORD *)v307 = 0;
                    }
                    break;
                  default:
                    break;
                }
                *(_QWORD *)v307 = v305;
                *(_DWORD *)(v307 + 8) = v530;
                *(_BYTE *)(v307 + 12) = v531;
              }
              else
              {
                switch(*(_BYTE *)(v307 + 12))
                {
                  case 2:
                    v340 = *(unint64_t **)v307;
                    do
                    {
                      v341 = __ldaxr(v340);
                      v342 = v341 - 1;
                    }
                    while (__stlxr(v342, v340));
                    if (!v342)
                    {
                      v343 = *(unint64_t **)v307;
                      if (!*(_QWORD *)v307)
                        goto LABEL_539;
                      if (*((char *)v343 + 31) < 0)
                        operator delete((void *)v343[1]);
                      v344 = v343;
                      v345 = 0x1012C404EF22A49;
                      goto LABEL_538;
                    }
                    break;
                  case 3:
                    v352 = *(unint64_t **)v307;
                    do
                    {
                      v353 = __ldaxr(v352);
                      v354 = v353 - 1;
                    }
                    while (__stlxr(v354, v352));
                    if (!v354)
                    {
                      v355 = *(unint64_t **)v307;
                      if (!*(_QWORD *)v307)
                        goto LABEL_539;
                      v356 = (void *)v355[1];
                      if (v356)
                      {
                        v355[2] = (unint64_t)v356;
                        operator delete(v356);
                      }
                      v344 = v355;
                      v345 = 0x1080C409938AC02;
                      goto LABEL_538;
                    }
                    break;
                  case 4:
                    v357 = *(unint64_t **)v307;
                    do
                    {
                      v358 = __ldaxr(v357);
                      v359 = v358 - 1;
                    }
                    while (__stlxr(v359, v357));
                    if (!v359)
                    {
                      v360 = *(unint64_t **)v307;
                      if (!*(_QWORD *)v307)
                        goto LABEL_539;
                      v534.n128_u64[0] = (unint64_t)(v360 + 1);
                      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v534);
                      goto LABEL_522;
                    }
                    break;
                  case 5:
                    v361 = *(unint64_t **)v307;
                    do
                    {
                      v362 = __ldaxr(v361);
                      v363 = v362 - 1;
                    }
                    while (__stlxr(v363, v361));
                    if (!v363)
                    {
                      v360 = *(unint64_t **)v307;
                      if (!*(_QWORD *)v307)
                        goto LABEL_539;
                      v534.n128_u64[0] = (unint64_t)(v360 + 1);
                      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v534);
LABEL_522:
                      v344 = v360;
                      v345 = 0x1020C405E66F15BLL;
                      goto LABEL_538;
                    }
                    break;
                  case 8:
                    v364 = *(unint64_t **)v307;
                    do
                    {
                      v365 = __ldaxr(v364);
                      v366 = v365 - 1;
                    }
                    while (__stlxr(v366, v364));
                    if (!v366)
                    {
                      v367 = *(unint64_t **)v307;
                      if (!*(_QWORD *)v307)
                        goto LABEL_539;
                      boost::detail::shared_count::~shared_count((unsigned int **)v367 + 2);
                      v344 = v367;
                      v368 = -235920773;
                      goto LABEL_537;
                    }
                    break;
                  case 9:
                    v369 = *(unint64_t **)v307;
                    do
                    {
                      v370 = __ldaxr(v369);
                      v371 = v370 - 1;
                    }
                    while (__stlxr(v371, v369));
                    if (!v371)
                    {
                      v372 = *(unint64_t **)v307;
                      if (*(_QWORD *)v307)
                      {
                        v373 = (void *)v372[6];
                        if (v373)
                        {
                          v372[7] = (unint64_t)v373;
                          operator delete(v373);
                        }
                        v374 = (void *)v372[3];
                        if (v374)
                        {
                          v372[4] = (unint64_t)v374;
                          operator delete(v374);
                        }
                        std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v372 + 1));
                        v344 = v372;
                        v368 = 2071181815;
LABEL_537:
                        v345 = v368 | 0x1030C4000000000;
LABEL_538:
                        result = MEMORY[0x219A19A08](v344, v345);
                      }
LABEL_539:
                      *(_QWORD *)v307 = 0;
                    }
                    break;
                  default:
                    break;
                }
                v375 = *(_QWORD *)a2;
                *(_QWORD *)(v307 + 5) = *(_QWORD *)(a2 + 5);
                *(_QWORD *)v307 = v375;
                *(_BYTE *)(v307 + 12) = *(v529 - 4);
                *((_QWORD *)v529 - 2) = v305;
                *((_DWORD *)v529 - 2) = v530;
                *(v529 - 4) = v531;
                v376 = v307 - v7 + 16;
                if (v376 >= 17)
                {
                  v377 = (((unint64_t)v376 >> 4) - 2) >> 1;
                  v378 = (unsigned __int8 *)(v7 + 16 * v377);
                  result = turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_6::operator()(v378, (unsigned __int8 *)v307, a5);
                  if ((_DWORD)result)
                  {
                    v379 = *(unint64_t **)v307;
                    *(unint64_t *)((char *)v534.n128_u64 + 5) = *(_QWORD *)(v307 + 5);
                    v534.n128_u64[0] = (unint64_t)v379;
                    v534.n128_u8[12] = *(_BYTE *)(v307 + 12);
                    *(_BYTE *)(v307 + 12) = 0;
                    do
                    {
                      v380 = v378;
                      if (v378 != (unsigned __int8 *)v307)
                      {
                        switch(*(_BYTE *)(v307 + 12))
                        {
                          case 2:
                            v381 = *(unint64_t **)v307;
                            do
                            {
                              v382 = __ldaxr(v381);
                              v383 = v382 - 1;
                            }
                            while (__stlxr(v383, v381));
                            if (!v383)
                            {
                              v384 = *(unint64_t **)v307;
                              if (!*(_QWORD *)v307)
                                goto LABEL_586;
                              if (*((char *)v384 + 31) < 0)
                                operator delete((void *)v384[1]);
                              v385 = v384;
                              v386 = 0x1012C404EF22A49;
                              goto LABEL_585;
                            }
                            break;
                          case 3:
                            v398 = *(unint64_t **)v307;
                            do
                            {
                              v399 = __ldaxr(v398);
                              v400 = v399 - 1;
                            }
                            while (__stlxr(v400, v398));
                            if (!v400)
                            {
                              v401 = *(unint64_t **)v307;
                              if (!*(_QWORD *)v307)
                                goto LABEL_586;
                              v402 = (void *)v401[1];
                              if (v402)
                              {
                                v401[2] = (unint64_t)v402;
                                operator delete(v402);
                              }
                              v385 = v401;
                              v386 = 0x1080C409938AC02;
                              goto LABEL_585;
                            }
                            break;
                          case 4:
                            v387 = *(unint64_t **)v307;
                            do
                            {
                              v388 = __ldaxr(v387);
                              v389 = v388 - 1;
                            }
                            while (__stlxr(v389, v387));
                            if (!v389)
                            {
                              v390 = *(unint64_t **)v307;
                              if (!*(_QWORD *)v307)
                                goto LABEL_586;
                              *(_QWORD *)v533 = v390 + 1;
                              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v533);
                              goto LABEL_578;
                            }
                            break;
                          case 5:
                            v403 = *(unint64_t **)v307;
                            do
                            {
                              v404 = __ldaxr(v403);
                              v405 = v404 - 1;
                            }
                            while (__stlxr(v405, v403));
                            if (!v405)
                            {
                              v390 = *(unint64_t **)v307;
                              if (!*(_QWORD *)v307)
                                goto LABEL_586;
                              *(_QWORD *)v533 = v390 + 1;
                              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v533);
LABEL_578:
                              v385 = v390;
                              v386 = 0x1020C405E66F15BLL;
                              goto LABEL_585;
                            }
                            break;
                          case 8:
                            v406 = *(unint64_t **)v307;
                            do
                            {
                              v407 = __ldaxr(v406);
                              v408 = v407 - 1;
                            }
                            while (__stlxr(v408, v406));
                            if (!v408)
                            {
                              v409 = *(unint64_t **)v307;
                              if (!*(_QWORD *)v307)
                                goto LABEL_586;
                              boost::detail::shared_count::~shared_count((unsigned int **)v409 + 2);
                              v385 = v409;
                              v397 = -235920773;
                              goto LABEL_584;
                            }
                            break;
                          case 9:
                            v391 = *(unint64_t **)v307;
                            do
                            {
                              v392 = __ldaxr(v391);
                              v393 = v392 - 1;
                            }
                            while (__stlxr(v393, v391));
                            if (!v393)
                            {
                              v394 = *(unint64_t **)v307;
                              if (*(_QWORD *)v307)
                              {
                                v395 = (void *)v394[6];
                                if (v395)
                                {
                                  v394[7] = (unint64_t)v395;
                                  operator delete(v395);
                                }
                                v396 = (void *)v394[3];
                                if (v396)
                                {
                                  v394[4] = (unint64_t)v396;
                                  operator delete(v396);
                                }
                                std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v394 + 1));
                                v385 = v394;
                                v397 = 2071181815;
LABEL_584:
                                v386 = v397 | 0x1030C4000000000;
LABEL_585:
                                result = MEMORY[0x219A19A08](v385, v386);
                              }
LABEL_586:
                              *(_QWORD *)v307 = 0;
                            }
                            break;
                          default:
                            break;
                        }
                        v410 = *(unint64_t **)v380;
                        *(_QWORD *)(v307 + 5) = *(_QWORD *)(v380 + 5);
                        *(_QWORD *)v307 = v410;
                        *(_BYTE *)(v307 + 12) = v380[12];
                        v380[12] = 0;
                      }
                      if (!v377)
                        break;
                      v377 = (v377 - 1) >> 1;
                      v378 = (unsigned __int8 *)(v7 + 16 * v377);
                      result = turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_6::operator()(v378, (unsigned __int8 *)&v534, a5);
                      v307 = (uint64_t)v380;
                    }
                    while ((result & 1) != 0);
                    switch(v380[12])
                    {
                      case 2u:
                        v411 = *(unint64_t **)v380;
                        do
                        {
                          v412 = __ldaxr(v411);
                          v413 = v412 - 1;
                        }
                        while (__stlxr(v413, v411));
                        if (!v413)
                        {
                          v414 = *(unint64_t **)v380;
                          if (!*(_QWORD *)v380)
                            goto LABEL_668;
                          if (*((char *)v414 + 31) < 0)
                            operator delete((void *)v414[1]);
                          v415 = v414;
                          v416 = 0x1012C404EF22A49;
                          goto LABEL_667;
                        }
                        break;
                      case 3u:
                        v440 = *(unint64_t **)v380;
                        do
                        {
                          v441 = __ldaxr(v440);
                          v442 = v441 - 1;
                        }
                        while (__stlxr(v442, v440));
                        if (!v442)
                        {
                          v443 = *(unint64_t **)v380;
                          if (!*(_QWORD *)v380)
                            goto LABEL_668;
                          v444 = (void *)v443[1];
                          if (v444)
                          {
                            v443[2] = (unint64_t)v444;
                            operator delete(v444);
                          }
                          v415 = v443;
                          v416 = 0x1080C409938AC02;
                          goto LABEL_667;
                        }
                        break;
                      case 4u:
                        v445 = *(unint64_t **)v380;
                        do
                        {
                          v446 = __ldaxr(v445);
                          v447 = v446 - 1;
                        }
                        while (__stlxr(v447, v445));
                        if (!v447)
                        {
                          v448 = *(unint64_t **)v380;
                          if (!*(_QWORD *)v380)
                            goto LABEL_668;
                          *(_QWORD *)v533 = v448 + 1;
                          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v533);
                          goto LABEL_651;
                        }
                        break;
                      case 5u:
                        v449 = *(unint64_t **)v380;
                        do
                        {
                          v450 = __ldaxr(v449);
                          v451 = v450 - 1;
                        }
                        while (__stlxr(v451, v449));
                        if (!v451)
                        {
                          v448 = *(unint64_t **)v380;
                          if (!*(_QWORD *)v380)
                            goto LABEL_668;
                          *(_QWORD *)v533 = v448 + 1;
                          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v533);
LABEL_651:
                          v415 = v448;
                          v416 = 0x1020C405E66F15BLL;
                          goto LABEL_667;
                        }
                        break;
                      case 8u:
                        v452 = *(unint64_t **)v380;
                        do
                        {
                          v453 = __ldaxr(v452);
                          v454 = v453 - 1;
                        }
                        while (__stlxr(v454, v452));
                        if (!v454)
                        {
                          v455 = *(unint64_t **)v380;
                          if (!*(_QWORD *)v380)
                            goto LABEL_668;
                          boost::detail::shared_count::~shared_count((unsigned int **)v455 + 2);
                          v415 = v455;
                          v456 = -235920773;
                          goto LABEL_666;
                        }
                        break;
                      case 9u:
                        v457 = *(unint64_t **)v380;
                        do
                        {
                          v458 = __ldaxr(v457);
                          v459 = v458 - 1;
                        }
                        while (__stlxr(v459, v457));
                        if (!v459)
                        {
                          v460 = *(unint64_t **)v380;
                          if (*(_QWORD *)v380)
                          {
                            v461 = (void *)v460[6];
                            if (v461)
                            {
                              v460[7] = (unint64_t)v461;
                              operator delete(v461);
                            }
                            v462 = (void *)v460[3];
                            if (v462)
                            {
                              v460[4] = (unint64_t)v462;
                              operator delete(v462);
                            }
                            std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v460 + 1));
                            v415 = v460;
                            v456 = 2071181815;
LABEL_666:
                            v416 = v456 | 0x1030C4000000000;
LABEL_667:
                            result = MEMORY[0x219A19A08](v415, v416);
                          }
LABEL_668:
                          *(_QWORD *)v380 = 0;
                        }
                        break;
                      default:
                        break;
                    }
                    v463 = v534.n128_u64[0];
                    *(_QWORD *)(v380 + 5) = *(unint64_t *)((char *)v534.n128_u64 + 5);
                    *(_QWORD *)v380 = v463;
                    v380[12] = v534.n128_u8[12];
                  }
                }
              }
            }
            while (v303-- > 2);
          }
          return result;
        }
        v12 = (unint64_t)v11 >> 1;
        v13 = v7 + 16 * ((unint64_t)v11 >> 1);
        if ((unint64_t)v10 < 0x801)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_6 &,turi::flexible_type *>((__int128 *)v13, (__int128 *)v7, (uint64_t)v8, a5);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_6 &,turi::flexible_type *>((__int128 *)v7, (__int128 *)v13, (uint64_t)v8, a5);
          v14 = v7 + 16 * v12;
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_6 &,turi::flexible_type *>((__int128 *)(v7 + 16), (__int128 *)(v14 - 16), (uint64_t)(a2 - 32), v15);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_6 &,turi::flexible_type *>((__int128 *)(v7 + 32), (__int128 *)(v14 + 16), (uint64_t)(a2 - 48), v16);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_6 &,turi::flexible_type *>((__int128 *)(v14 - 16), (__int128 *)v13, v14 + 16, v17);
          v18 = *(__n128 *)v7;
          v534 = *(__n128 *)v7;
          v19 = *(_QWORD *)v13;
          *(_QWORD *)(v7 + 5) = *(_QWORD *)(v13 + 5);
          *(_QWORD *)v7 = v19;
          v20 = v534.n128_u64[0];
          *(_QWORD *)(v13 + 5) = *(unint64_t *)((char *)v534.n128_u64 + 5);
          *(_QWORD *)v13 = v20;
        }
        --a3;
        if ((a4 & 1) == 0
          && (turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_6::operator()((unsigned __int8 *)(v7 - 16), (unsigned __int8 *)v7, v18) & 1) == 0)
        {
          v92 = *(_QWORD *)v7;
          *(_QWORD *)&v533[5] = *(_QWORD *)(v7 + 5);
          *(_QWORD *)v533 = v92;
          v533[12] = *(_BYTE *)(v7 + 12);
          *(_BYTE *)(v7 + 12) = 0;
          result = turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_6::operator()(v533, v8, v18);
          if ((result & 1) != 0)
          {
            v9 = v7;
            do
            {
              v9 += 16;
              result = turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_6::operator()(v533, (unsigned __int8 *)v9, a5);
            }
            while ((result & 1) == 0);
          }
          else
          {
            v93 = (unsigned __int8 *)(v7 + 16);
            do
            {
              v9 = (unint64_t)v93;
              if (v93 >= a2)
                break;
              result = turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_6::operator()(v533, v93, a5);
              v93 = (unsigned __int8 *)(v9 + 16);
            }
            while (!(_DWORD)result);
          }
          v94 = a2;
          if (v9 < (unint64_t)a2)
          {
            v94 = a2;
            do
            {
              v94 -= 2;
              result = turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_6::operator()(v533, (unsigned __int8 *)v94, a5);
            }
            while ((result & 1) != 0);
          }
          while (v9 < (unint64_t)v94)
          {
            a5 = *(__n128 *)v9;
            v534 = *(__n128 *)v9;
            v95 = *v94;
            *(_QWORD *)(v9 + 5) = *(_QWORD *)((char *)v94 + 5);
            *(_QWORD *)v9 = v95;
            v96 = v534.n128_u64[0];
            *(_QWORD *)((char *)v94 + 5) = *(unint64_t *)((char *)v534.n128_u64 + 5);
            *v94 = v96;
            do
              v9 += 16;
            while (!turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_6::operator()(v533, (unsigned __int8 *)v9, a5));
            do
            {
              v94 -= 2;
              result = turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_6::operator()(v533, (unsigned __int8 *)v94, a5);
            }
            while ((result & 1) != 0);
          }
          v97 = (uint64_t *)(v9 - 16);
          if (v9 - 16 == v7)
          {
            switch(*(_BYTE *)(v9 - 4))
            {
              case 2:
                v104 = *(unint64_t **)v7;
                do
                {
                  v105 = __ldaxr(v104);
                  v106 = v105 - 1;
                }
                while (__stlxr(v106, v104));
                if (!v106)
                {
                  v107 = *(_QWORD *)v7;
                  if (!*(_QWORD *)v7)
                    goto LABEL_219;
                  if (*(char *)(v107 + 31) < 0)
                    operator delete(*(void **)(v107 + 8));
                  v108 = (_QWORD *)v107;
                  v109 = 0x1012C404EF22A49;
                  goto LABEL_218;
                }
                break;
              case 3:
                v134 = *(unint64_t **)v7;
                do
                {
                  v135 = __ldaxr(v134);
                  v136 = v135 - 1;
                }
                while (__stlxr(v136, v134));
                if (!v136)
                {
                  v137 = *(_QWORD **)v7;
                  if (!*(_QWORD *)v7)
                    goto LABEL_219;
                  v138 = (void *)v137[1];
                  if (v138)
                  {
                    v137[2] = v138;
                    operator delete(v138);
                  }
                  v108 = v137;
                  v109 = 0x1080C409938AC02;
                  goto LABEL_218;
                }
                break;
              case 4:
                v139 = *(unint64_t **)v7;
                do
                {
                  v140 = __ldaxr(v139);
                  v141 = v140 - 1;
                }
                while (__stlxr(v141, v139));
                if (!v141)
                {
                  v142 = *(_QWORD **)v7;
                  if (!*(_QWORD *)v7)
                    goto LABEL_219;
                  v534.n128_u64[0] = (unint64_t)(v142 + 1);
                  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v534);
                  goto LABEL_202;
                }
                break;
              case 5:
                v143 = *(unint64_t **)v7;
                do
                {
                  v144 = __ldaxr(v143);
                  v145 = v144 - 1;
                }
                while (__stlxr(v145, v143));
                if (!v145)
                {
                  v142 = *(_QWORD **)v7;
                  if (!*(_QWORD *)v7)
                    goto LABEL_219;
                  v534.n128_u64[0] = (unint64_t)(v142 + 1);
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v534);
LABEL_202:
                  v108 = v142;
                  v109 = 0x1020C405E66F15BLL;
                  goto LABEL_218;
                }
                break;
              case 8:
                v146 = *(unint64_t **)v7;
                do
                {
                  v147 = __ldaxr(v146);
                  v148 = v147 - 1;
                }
                while (__stlxr(v148, v146));
                if (!v148)
                {
                  v149 = *(_QWORD *)v7;
                  if (!*(_QWORD *)v7)
                    goto LABEL_219;
                  boost::detail::shared_count::~shared_count((unsigned int **)(v149 + 16));
                  v108 = (_QWORD *)v149;
                  v150 = -235920773;
                  goto LABEL_217;
                }
                break;
              case 9:
                v151 = *(unint64_t **)v7;
                do
                {
                  v152 = __ldaxr(v151);
                  v153 = v152 - 1;
                }
                while (__stlxr(v153, v151));
                if (!v153)
                {
                  v154 = *(_QWORD **)v7;
                  if (*(_QWORD *)v7)
                  {
                    v155 = (void *)v154[6];
                    if (v155)
                    {
                      v154[7] = v155;
                      operator delete(v155);
                    }
                    v156 = (void *)v154[3];
                    if (v156)
                    {
                      v154[4] = v156;
                      operator delete(v156);
                    }
                    std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v154 + 1));
                    v108 = v154;
                    v150 = 2071181815;
LABEL_217:
                    v109 = v150 | 0x1030C4000000000;
LABEL_218:
                    result = MEMORY[0x219A19A08](v108, v109);
                  }
LABEL_219:
                  *(_QWORD *)v7 = 0;
                }
                break;
              default:
                break;
            }
          }
          else
          {
            switch(*(_BYTE *)(v7 + 12))
            {
              case 2:
                v98 = *(unint64_t **)v7;
                do
                {
                  v99 = __ldaxr(v98);
                  v100 = v99 - 1;
                }
                while (__stlxr(v100, v98));
                if (!v100)
                {
                  v101 = *(_QWORD *)v7;
                  if (!*(_QWORD *)v7)
                    goto LABEL_183;
                  if (*(char *)(v101 + 31) < 0)
                    operator delete(*(void **)(v101 + 8));
                  v102 = (_QWORD *)v101;
                  v103 = 0x1012C404EF22A49;
                  goto LABEL_182;
                }
                break;
              case 3:
                v110 = *(unint64_t **)v7;
                do
                {
                  v111 = __ldaxr(v110);
                  v112 = v111 - 1;
                }
                while (__stlxr(v112, v110));
                if (!v112)
                {
                  v113 = *(_QWORD **)v7;
                  if (!*(_QWORD *)v7)
                    goto LABEL_183;
                  v114 = (void *)v113[1];
                  if (v114)
                  {
                    v113[2] = v114;
                    operator delete(v114);
                  }
                  v102 = v113;
                  v103 = 0x1080C409938AC02;
                  goto LABEL_182;
                }
                break;
              case 4:
                v115 = *(unint64_t **)v7;
                do
                {
                  v116 = __ldaxr(v115);
                  v117 = v116 - 1;
                }
                while (__stlxr(v117, v115));
                if (!v117)
                {
                  v118 = *(_QWORD **)v7;
                  if (!*(_QWORD *)v7)
                    goto LABEL_183;
                  v534.n128_u64[0] = (unint64_t)(v118 + 1);
                  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v534);
                  goto LABEL_166;
                }
                break;
              case 5:
                v119 = *(unint64_t **)v7;
                do
                {
                  v120 = __ldaxr(v119);
                  v121 = v120 - 1;
                }
                while (__stlxr(v121, v119));
                if (!v121)
                {
                  v118 = *(_QWORD **)v7;
                  if (!*(_QWORD *)v7)
                    goto LABEL_183;
                  v534.n128_u64[0] = (unint64_t)(v118 + 1);
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v534);
LABEL_166:
                  v102 = v118;
                  v103 = 0x1020C405E66F15BLL;
                  goto LABEL_182;
                }
                break;
              case 8:
                v122 = *(unint64_t **)v7;
                do
                {
                  v123 = __ldaxr(v122);
                  v124 = v123 - 1;
                }
                while (__stlxr(v124, v122));
                if (!v124)
                {
                  v125 = *(_QWORD *)v7;
                  if (!*(_QWORD *)v7)
                    goto LABEL_183;
                  boost::detail::shared_count::~shared_count((unsigned int **)(v125 + 16));
                  v102 = (_QWORD *)v125;
                  v126 = -235920773;
                  goto LABEL_181;
                }
                break;
              case 9:
                v127 = *(unint64_t **)v7;
                do
                {
                  v128 = __ldaxr(v127);
                  v129 = v128 - 1;
                }
                while (__stlxr(v129, v127));
                if (!v129)
                {
                  v130 = *(_QWORD **)v7;
                  if (*(_QWORD *)v7)
                  {
                    v131 = (void *)v130[6];
                    if (v131)
                    {
                      v130[7] = v131;
                      operator delete(v131);
                    }
                    v132 = (void *)v130[3];
                    if (v132)
                    {
                      v130[4] = v132;
                      operator delete(v132);
                    }
                    std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v130 + 1));
                    v102 = v130;
                    v126 = 2071181815;
LABEL_181:
                    v103 = v126 | 0x1030C4000000000;
LABEL_182:
                    result = MEMORY[0x219A19A08](v102, v103);
                  }
LABEL_183:
                  *(_QWORD *)v7 = 0;
                }
                break;
              default:
                break;
            }
            v133 = *v97;
            *(_QWORD *)(v7 + 5) = *(_QWORD *)(v9 - 11);
            *(_QWORD *)v7 = v133;
            *(_BYTE *)(v7 + 12) = *(_BYTE *)(v9 - 4);
            *(_BYTE *)(v9 - 4) = 0;
          }
          a4 = 0;
          v157 = *(_QWORD *)v533;
          *(_QWORD *)(v9 - 11) = *(_QWORD *)&v533[5];
          *v97 = v157;
          *(_BYTE *)(v9 - 4) = v533[12];
          continue;
        }
        v21 = 0;
        v22 = *(_QWORD *)v7;
        *(_QWORD *)&v533[5] = *(_QWORD *)(v7 + 5);
        *(_QWORD *)v533 = v22;
        v533[12] = *(_BYTE *)(v7 + 12);
        *(_BYTE *)(v7 + 12) = 0;
        do
        {
          v23 = turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_6::operator()((unsigned __int8 *)(v7 + v21 + 16), v533, v18);
          v21 += 16;
        }
        while ((v23 & 1) != 0);
        v24 = v7 + v21;
        v25 = a2;
        if (v21 == 16)
        {
          v25 = a2;
          do
          {
            if (v24 >= (unint64_t)v25)
              break;
            v25 -= 16;
          }
          while ((turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_6::operator()(v25, v533, v18) & 1) == 0);
        }
        else
        {
          do
            v25 -= 16;
          while (!turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_6::operator()(v25, v533, v18));
        }
        v9 = v7 + v21;
        if (v24 < (unint64_t)v25)
        {
          v26 = v25;
          do
          {
            v18 = *(__n128 *)v9;
            v534 = *(__n128 *)v9;
            v27 = *(_QWORD *)v26;
            *(_QWORD *)(v9 + 5) = *(_QWORD *)(v26 + 5);
            *(_QWORD *)v9 = v27;
            v28 = v534.n128_u64[0];
            *(_QWORD *)(v26 + 5) = *(unint64_t *)((char *)v534.n128_u64 + 5);
            *(_QWORD *)v26 = v28;
            do
              v9 += 16;
            while ((turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_6::operator()((unsigned __int8 *)v9, v533, v18) & 1) != 0);
            do
              v26 -= 16;
            while (!turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_6::operator()(v26, v533, v18));
          }
          while (v9 < (unint64_t)v26);
        }
        v29 = (uint64_t *)(v9 - 16);
        if (v9 - 16 == v7)
        {
          switch(*(_BYTE *)(v9 - 4))
          {
            case 2:
              v36 = *(unint64_t **)v7;
              do
              {
                v37 = __ldaxr(v36);
                v38 = v37 - 1;
              }
              while (__stlxr(v38, v36));
              if (!v38)
              {
                v39 = *(_QWORD *)v7;
                if (!*(_QWORD *)v7)
                  goto LABEL_112;
                if (*(char *)(v39 + 31) < 0)
                  operator delete(*(void **)(v39 + 8));
                v40 = (_QWORD *)v39;
                v41 = 0x1012C404EF22A49;
                goto LABEL_111;
              }
              break;
            case 3:
              v66 = *(unint64_t **)v7;
              do
              {
                v67 = __ldaxr(v66);
                v68 = v67 - 1;
              }
              while (__stlxr(v68, v66));
              if (!v68)
              {
                v69 = *(_QWORD **)v7;
                if (!*(_QWORD *)v7)
                  goto LABEL_112;
                v70 = (void *)v69[1];
                if (v70)
                {
                  v69[2] = v70;
                  operator delete(v70);
                }
                v40 = v69;
                v41 = 0x1080C409938AC02;
                goto LABEL_111;
              }
              break;
            case 4:
              v71 = *(unint64_t **)v7;
              do
              {
                v72 = __ldaxr(v71);
                v73 = v72 - 1;
              }
              while (__stlxr(v73, v71));
              if (!v73)
              {
                v74 = *(_QWORD **)v7;
                if (!*(_QWORD *)v7)
                  goto LABEL_112;
                v534.n128_u64[0] = (unint64_t)(v74 + 1);
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v534);
                goto LABEL_95;
              }
              break;
            case 5:
              v75 = *(unint64_t **)v7;
              do
              {
                v76 = __ldaxr(v75);
                v77 = v76 - 1;
              }
              while (__stlxr(v77, v75));
              if (!v77)
              {
                v74 = *(_QWORD **)v7;
                if (!*(_QWORD *)v7)
                  goto LABEL_112;
                v534.n128_u64[0] = (unint64_t)(v74 + 1);
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v534);
LABEL_95:
                v40 = v74;
                v41 = 0x1020C405E66F15BLL;
                goto LABEL_111;
              }
              break;
            case 8:
              v78 = *(unint64_t **)v7;
              do
              {
                v79 = __ldaxr(v78);
                v80 = v79 - 1;
              }
              while (__stlxr(v80, v78));
              if (!v80)
              {
                v81 = *(_QWORD *)v7;
                if (!*(_QWORD *)v7)
                  goto LABEL_112;
                boost::detail::shared_count::~shared_count((unsigned int **)(v81 + 16));
                v40 = (_QWORD *)v81;
                v82 = -235920773;
                goto LABEL_110;
              }
              break;
            case 9:
              v83 = *(unint64_t **)v7;
              do
              {
                v84 = __ldaxr(v83);
                v85 = v84 - 1;
              }
              while (__stlxr(v85, v83));
              if (!v85)
              {
                v86 = *(_QWORD **)v7;
                if (*(_QWORD *)v7)
                {
                  v87 = (void *)v86[6];
                  if (v87)
                  {
                    v86[7] = v87;
                    operator delete(v87);
                  }
                  v88 = (void *)v86[3];
                  if (v88)
                  {
                    v86[4] = v88;
                    operator delete(v88);
                  }
                  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v86 + 1));
                  v40 = v86;
                  v82 = 2071181815;
LABEL_110:
                  v41 = v82 | 0x1030C4000000000;
LABEL_111:
                  MEMORY[0x219A19A08](v40, v41);
                }
LABEL_112:
                *(_QWORD *)v7 = 0;
              }
              break;
            default:
              break;
          }
        }
        else
        {
          switch(*(_BYTE *)(v7 + 12))
          {
            case 2:
              v30 = *(unint64_t **)v7;
              do
              {
                v31 = __ldaxr(v30);
                v32 = v31 - 1;
              }
              while (__stlxr(v32, v30));
              if (!v32)
              {
                v33 = *(_QWORD *)v7;
                if (!*(_QWORD *)v7)
                  goto LABEL_76;
                if (*(char *)(v33 + 31) < 0)
                  operator delete(*(void **)(v33 + 8));
                v34 = (_QWORD *)v33;
                v35 = 0x1012C404EF22A49;
                goto LABEL_75;
              }
              break;
            case 3:
              v42 = *(unint64_t **)v7;
              do
              {
                v43 = __ldaxr(v42);
                v44 = v43 - 1;
              }
              while (__stlxr(v44, v42));
              if (!v44)
              {
                v45 = *(_QWORD **)v7;
                if (!*(_QWORD *)v7)
                  goto LABEL_76;
                v46 = (void *)v45[1];
                if (v46)
                {
                  v45[2] = v46;
                  operator delete(v46);
                }
                v34 = v45;
                v35 = 0x1080C409938AC02;
                goto LABEL_75;
              }
              break;
            case 4:
              v47 = *(unint64_t **)v7;
              do
              {
                v48 = __ldaxr(v47);
                v49 = v48 - 1;
              }
              while (__stlxr(v49, v47));
              if (!v49)
              {
                v50 = *(_QWORD **)v7;
                if (!*(_QWORD *)v7)
                  goto LABEL_76;
                v534.n128_u64[0] = (unint64_t)(v50 + 1);
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v534);
                goto LABEL_59;
              }
              break;
            case 5:
              v51 = *(unint64_t **)v7;
              do
              {
                v52 = __ldaxr(v51);
                v53 = v52 - 1;
              }
              while (__stlxr(v53, v51));
              if (!v53)
              {
                v50 = *(_QWORD **)v7;
                if (!*(_QWORD *)v7)
                  goto LABEL_76;
                v534.n128_u64[0] = (unint64_t)(v50 + 1);
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v534);
LABEL_59:
                v34 = v50;
                v35 = 0x1020C405E66F15BLL;
                goto LABEL_75;
              }
              break;
            case 8:
              v54 = *(unint64_t **)v7;
              do
              {
                v55 = __ldaxr(v54);
                v56 = v55 - 1;
              }
              while (__stlxr(v56, v54));
              if (!v56)
              {
                v57 = *(_QWORD *)v7;
                if (!*(_QWORD *)v7)
                  goto LABEL_76;
                boost::detail::shared_count::~shared_count((unsigned int **)(v57 + 16));
                v34 = (_QWORD *)v57;
                v58 = -235920773;
                goto LABEL_74;
              }
              break;
            case 9:
              v59 = *(unint64_t **)v7;
              do
              {
                v60 = __ldaxr(v59);
                v61 = v60 - 1;
              }
              while (__stlxr(v61, v59));
              if (!v61)
              {
                v62 = *(_QWORD **)v7;
                if (*(_QWORD *)v7)
                {
                  v63 = (void *)v62[6];
                  if (v63)
                  {
                    v62[7] = v63;
                    operator delete(v63);
                  }
                  v64 = (void *)v62[3];
                  if (v64)
                  {
                    v62[4] = v64;
                    operator delete(v64);
                  }
                  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v62 + 1));
                  v34 = v62;
                  v58 = 2071181815;
LABEL_74:
                  v35 = v58 | 0x1030C4000000000;
LABEL_75:
                  MEMORY[0x219A19A08](v34, v35);
                }
LABEL_76:
                *(_QWORD *)v7 = 0;
              }
              break;
            default:
              break;
          }
          v65 = *v29;
          *(_QWORD *)(v7 + 5) = *(_QWORD *)(v9 - 11);
          *(_QWORD *)v7 = v65;
          *(_BYTE *)(v7 + 12) = *(_BYTE *)(v9 - 4);
          *(_BYTE *)(v9 - 4) = 0;
        }
        v89 = *(_QWORD *)v533;
        *(_QWORD *)(v9 - 11) = *(_QWORD *)&v533[5];
        *v29 = v89;
        *(_BYTE *)(v9 - 4) = v533[12];
        if (v24 < (unint64_t)v25)
        {
LABEL_116:
          result = std::__introsort<std::_ClassicAlgPolicy,turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_6 &,turi::flexible_type *,false>(v7, v9 - 16, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v90 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_6 &,turi::flexible_type *>(v7, v9 - 16, v18);
        result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_6 &,turi::flexible_type *>(v9, (uint64_t)a2, v91);
        if (!(_DWORD)result)
        {
          if (v90)
            continue;
          goto LABEL_116;
        }
        a2 = (unsigned __int8 *)(v9 - 16);
        if (!v90)
          goto LABEL_2;
        return result;
    }
  }
}

void sub_218411B1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, uint64_t a12, uint64_t a13, int a14, char a15, uint64_t a16, int a17, char a18)
{
  int v18;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  unsigned int v36;
  void *v37;
  void *v38;

  switch(v18)
  {
    case 2:
      do
      {
        v20 = __ldaxr((unint64_t *)a13);
        v21 = v20 - 1;
      }
      while (__stlxr(v21, (unint64_t *)a13));
      if (v21 || !a13)
        goto LABEL_43;
      if (*(char *)(a13 + 31) < 0)
        operator delete(*(void **)(a13 + 8));
      v32 = a13;
      v33 = 0x1012C404EF22A49;
      goto LABEL_42;
    case 3:
      do
      {
        v22 = __ldaxr((unint64_t *)a13);
        v23 = v22 - 1;
      }
      while (__stlxr(v23, (unint64_t *)a13));
      if (v23 || !a13)
        goto LABEL_43;
      v34 = *(void **)(a13 + 8);
      if (v34)
      {
        *(_QWORD *)(a13 + 16) = v34;
        operator delete(v34);
      }
      v32 = a13;
      v33 = 0x1080C409938AC02;
      goto LABEL_42;
    case 4:
      do
      {
        v24 = __ldaxr((unint64_t *)a13);
        v25 = v24 - 1;
      }
      while (__stlxr(v25, (unint64_t *)a13));
      if (v25)
        goto LABEL_43;
      v35 = a13;
      if (!a13)
        goto LABEL_43;
      a16 = a13 + 8;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
      goto LABEL_30;
    case 5:
      do
      {
        v26 = __ldaxr((unint64_t *)a13);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, (unint64_t *)a13));
      if (v27)
        goto LABEL_43;
      v35 = a13;
      if (!a13)
        goto LABEL_43;
      a16 = a13 + 8;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
LABEL_30:
      v32 = v35;
      v33 = 0x1020C405E66F15BLL;
      goto LABEL_42;
    case 8:
      do
      {
        v28 = __ldaxr((unint64_t *)a13);
        v29 = v28 - 1;
      }
      while (__stlxr(v29, (unint64_t *)a13));
      if (v29 || !a13)
        goto LABEL_43;
      boost::detail::shared_count::~shared_count((unsigned int **)(a13 + 16));
      v32 = a13;
      v36 = -235920773;
      goto LABEL_41;
    case 9:
      do
      {
        v30 = __ldaxr((unint64_t *)a13);
        v31 = v30 - 1;
      }
      while (__stlxr(v31, (unint64_t *)a13));
      if (v31 || !a13)
        goto LABEL_43;
      v37 = *(void **)(a13 + 48);
      if (v37)
      {
        *(_QWORD *)(a13 + 56) = v37;
        operator delete(v37);
      }
      v38 = *(void **)(a13 + 24);
      if (v38)
      {
        *(_QWORD *)(a13 + 32) = v38;
        operator delete(v38);
      }
      std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](a13 + 8);
      v32 = a13;
      v36 = 2071181815;
LABEL_41:
      v33 = v36 | 0x1030C4000000000;
LABEL_42:
      MEMORY[0x219A19A08](v32, v33);
LABEL_43:
      _Unwind_Resume(exception_object);
      return;
    default:
      goto LABEL_43;
  }
}

uint64_t turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_6::operator()(unsigned __int8 *a1, unsigned __int8 *a2, __n128 a3)
{
  int v3;
  int v4;
  double *v7;
  double *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;

  v3 = a1[12];
  v4 = a2[12];
  if (v3 == v4)
  {
    if (v3 != 7)
    {
      switch(a1[12])
      {
        case 0u:
          return *(_QWORD *)a1 < *(_QWORD *)a2;
        case 1u:
          return *(double *)a1 < *(double *)a2;
        case 2u:
          return std::string::compare[abi:ne180100]((const void **)(*(_QWORD *)a1 + 8), (_BYTE *)(*(_QWORD *)a2 + 8)) >> 31;
        case 3u:
          v7 = *(double **)(*(_QWORD *)a1 + 8);
          v8 = *(double **)(*(_QWORD *)a2 + 8);
          v9 = (uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 16) - (_QWORD)v8) >> 3;
          v10 = (uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 16) - (_QWORD)v7) >> 3;
          if (*(double **)(*(_QWORD *)a1 + 16) == v7)
            return v10 < v9;
          if (v10 <= 1)
            v11 = 1;
          else
            v11 = (uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 16) - (_QWORD)v7) >> 3;
          v12 = (uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 16) - (_QWORD)v8) >> 3;
          break;
        case 4u:
          return turi::flexible_type_impl::lt_operator::operator()(a3, (uint64_t)&v14, (uint64_t *)(*(_QWORD *)a1 + 8), (_QWORD *)(*(_QWORD *)a2 + 8));
        case 5u:
        case 8u:
        case 9u:
          turi::flexible_type_fail(0);
          return 0;
        case 6u:
          v13 = (uint64_t)(*(_QWORD *)a1 << 8) >> 8;
          if (v13 < (uint64_t)(*(_QWORD *)a2 << 8) >> 8)
            return 1;
          if (v13 != (uint64_t)(*(_QWORD *)a2 << 8) >> 8)
            return 0;
          return *((_DWORD *)a1 + 2) < *((_DWORD *)a2 + 2);
        default:
          turi::apply_binary_op_ff();
      }
      while (v12 && *v7 <= *v8)
      {
        if (*v7 < *v8)
          return 1;
        --v12;
        ++v8;
        ++v7;
        if (!--v11)
          return v10 < v9;
      }
    }
    return 0;
  }
  else
  {
    return (char)v3 < (char)v4;
  }
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_6 &,turi::flexible_type *>(__int128 *a1, __int128 *a2, uint64_t a3, __n128 a4)
{
  char v7;
  __n128 v8;
  uint64_t result;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __n128 v18;
  __n128 v19;
  __n128 v20;

  v7 = turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_6::operator()((unsigned __int8 *)a2, (unsigned __int8 *)a1, a4);
  result = turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_6::operator()((unsigned __int8 *)a3, (unsigned __int8 *)a2, v8);
  if ((v7 & 1) != 0)
  {
    if ((_DWORD)result)
    {
      v17 = *a1;
      v10 = *(_QWORD *)(a3 + 5);
      *(_QWORD *)a1 = *(_QWORD *)a3;
      *(_QWORD *)((char *)a1 + 5) = v10;
    }
    else
    {
      v14 = (__n128)*a1;
      v20 = (__n128)*a1;
      v15 = *(_QWORD *)((char *)a2 + 5);
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)((char *)a1 + 5) = v15;
      *(_QWORD *)((char *)a2 + 5) = *(unint64_t *)((char *)v20.n128_u64 + 5);
      *(_QWORD *)a2 = v20.n128_u64[0];
      result = turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_6::operator()((unsigned __int8 *)a3, (unsigned __int8 *)a2, v14);
      if (!(_DWORD)result)
        return result;
      v17 = *a2;
      v16 = *(_QWORD *)(a3 + 5);
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *(_QWORD *)((char *)a2 + 5) = v16;
    }
    *(_QWORD *)(a3 + 5) = *(_QWORD *)((char *)&v17 + 5);
    *(_QWORD *)a3 = v17;
  }
  else if ((_DWORD)result)
  {
    v11 = (__n128)*a2;
    v18 = (__n128)*a2;
    v12 = *(_QWORD *)(a3 + 5);
    *(_QWORD *)a2 = *(_QWORD *)a3;
    *(_QWORD *)((char *)a2 + 5) = v12;
    *(_QWORD *)(a3 + 5) = *(unint64_t *)((char *)v18.n128_u64 + 5);
    *(_QWORD *)a3 = v18.n128_u64[0];
    result = turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_6::operator()((unsigned __int8 *)a2, (unsigned __int8 *)a1, v11);
    if ((_DWORD)result)
    {
      v19 = (__n128)*a1;
      v13 = *(_QWORD *)((char *)a2 + 5);
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)((char *)a1 + 5) = v13;
      *(_QWORD *)((char *)a2 + 5) = *(unint64_t *)((char *)v19.n128_u64 + 5);
      *(_QWORD *)a2 = v19.n128_u64[0];
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_6 &,turi::flexible_type *>(uint64_t a1, uint64_t a2, __n128 a3)
{
  uint64_t v5;
  _BOOL8 result;
  _QWORD *v7;
  uint64_t v8;
  unsigned __int8 *v9;
  __n128 v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  void *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t *v36;
  unsigned int v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t *v41;
  void *v42;
  void *v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t *v47;
  unint64_t *v48;
  uint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t *v53;
  void *v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t *v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t *v65;
  unsigned int v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t *v70;
  void *v71;
  void *v72;
  unint64_t v73;
  __n128 *v74;
  __n128 *v75;
  __n128 *v76;
  uint64_t v77;
  __n128 v78;
  __n128 v79;
  uint64_t v80;
  __n128 v81;
  __n128 v82;
  void **v83;
  __n128 v84;
  uint64_t v85;

  v85 = *MEMORY[0x24BDAC8D0];
  v5 = (a2 - a1) >> 4;
  result = 1;
  switch(v5)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v7 = (_QWORD *)(a2 - 16);
      if (turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_6::operator()((unsigned __int8 *)(a2 - 16), (unsigned __int8 *)a1, a3))
      {
        v84 = *(__n128 *)a1;
        v8 = *(_QWORD *)((char *)v7 + 5);
        *(_QWORD *)a1 = *v7;
        *(_QWORD *)(a1 + 5) = v8;
        *(_QWORD *)((char *)v7 + 5) = *(unint64_t *)((char *)v84.n128_u64 + 5);
        *v7 = v84.n128_u64[0];
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_6 &,turi::flexible_type *>((__int128 *)a1, (__int128 *)(a1 + 16), a2 - 16, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_6 &,turi::flexible_type *>(a1, a1 + 16, a1 + 32, a2 - 16, a3);
      return 1;
    case 5:
      v74 = (__n128 *)(a1 + 16);
      v75 = (__n128 *)(a1 + 32);
      v76 = (__n128 *)(a1 + 48);
      v77 = a2 - 16;
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_6 &,turi::flexible_type *>(a1, a1 + 16, a1 + 32, a1 + 48, a3);
      if (turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_6::operator()((unsigned __int8 *)v77, (unsigned __int8 *)(a1 + 48), v78))
      {
        v84 = *v76;
        v79 = v84;
        v80 = *(_QWORD *)(v77 + 5);
        v76->n128_u64[0] = *(_QWORD *)v77;
        *(_QWORD *)(a1 + 53) = v80;
        *(_QWORD *)(v77 + 5) = *(unint64_t *)((char *)v84.n128_u64 + 5);
        *(_QWORD *)v77 = v84.n128_u64[0];
        if (turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_6::operator()((unsigned __int8 *)(a1 + 48), (unsigned __int8 *)(a1 + 32), v79))
        {
          v84 = *v75;
          v81 = v84;
          v75->n128_u64[0] = v76->n128_u64[0];
          *(_QWORD *)(a1 + 37) = *(_QWORD *)(a1 + 53);
          v76->n128_u64[0] = v84.n128_u64[0];
          *(_QWORD *)(a1 + 53) = *(unint64_t *)((char *)v84.n128_u64 + 5);
          if (turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_6::operator()((unsigned __int8 *)(a1 + 32), (unsigned __int8 *)(a1 + 16), v81))
          {
            v84 = *v74;
            v82 = v84;
            v74->n128_u64[0] = v75->n128_u64[0];
            *(_QWORD *)(a1 + 21) = *(_QWORD *)(a1 + 37);
            v75->n128_u64[0] = v84.n128_u64[0];
            *(_QWORD *)(a1 + 37) = *(unint64_t *)((char *)v84.n128_u64 + 5);
            if (turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_6::operator()((unsigned __int8 *)(a1 + 16), (unsigned __int8 *)a1, v82))
            {
              v84 = *(__n128 *)a1;
              *(_QWORD *)a1 = v74->n128_u64[0];
              *(_QWORD *)(a1 + 5) = *(_QWORD *)(a1 + 21);
              v74->n128_u64[0] = v84.n128_u64[0];
              *(_QWORD *)(a1 + 21) = *(unint64_t *)((char *)v84.n128_u64 + 5);
            }
          }
        }
      }
      return 1;
    default:
      v9 = (unsigned __int8 *)(a1 + 32);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_6 &,turi::flexible_type *>((__int128 *)a1, (__int128 *)(a1 + 16), a1 + 32, a3);
      v11 = a1 + 48;
      if (a1 + 48 == a2)
        return 1;
      v12 = 0;
      break;
  }
  while (1)
  {
    if (turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_6::operator()((unsigned __int8 *)v11, v9, v10))
    {
      *(unint64_t *)((char *)v84.n128_u64 + 5) = *(_QWORD *)(v11 + 5);
      v84.n128_u64[0] = *(_QWORD *)v11;
      v84.n128_u8[12] = *(_BYTE *)(v11 + 12);
      *(_BYTE *)(v11 + 12) = 0;
      v13 = v11;
      while (1)
      {
        v14 = (uint64_t)v9;
        if (v9 != (unsigned __int8 *)v13)
        {
          switch(*(_BYTE *)(v13 + 12))
          {
            case 2:
              v15 = *(unint64_t **)v13;
              do
              {
                v16 = __ldaxr(v15);
                v17 = v16 - 1;
              }
              while (__stlxr(v17, v15));
              if (!v17)
              {
                v18 = *(unint64_t **)v13;
                if (!*(_QWORD *)v13)
                  goto LABEL_51;
                if (*((char *)v18 + 31) < 0)
                  operator delete((void *)v18[1]);
                v19 = v18;
                v20 = 0x1012C404EF22A49;
                goto LABEL_50;
              }
              break;
            case 3:
              v21 = *(unint64_t **)v13;
              do
              {
                v22 = __ldaxr(v21);
                v23 = v22 - 1;
              }
              while (__stlxr(v23, v21));
              if (!v23)
              {
                v24 = *(unint64_t **)v13;
                if (!*(_QWORD *)v13)
                  goto LABEL_51;
                v25 = (void *)v24[1];
                if (v25)
                {
                  v24[2] = (unint64_t)v25;
                  operator delete(v25);
                }
                v19 = v24;
                v20 = 0x1080C409938AC02;
                goto LABEL_50;
              }
              break;
            case 4:
              v26 = *(unint64_t **)v13;
              do
              {
                v27 = __ldaxr(v26);
                v28 = v27 - 1;
              }
              while (__stlxr(v28, v26));
              if (!v28)
              {
                v29 = *(unint64_t **)v13;
                if (!*(_QWORD *)v13)
                  goto LABEL_51;
                v83 = (void **)(v29 + 1);
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v83);
                goto LABEL_34;
              }
              break;
            case 5:
              v30 = *(unint64_t **)v13;
              do
              {
                v31 = __ldaxr(v30);
                v32 = v31 - 1;
              }
              while (__stlxr(v32, v30));
              if (!v32)
              {
                v29 = *(unint64_t **)v13;
                if (!*(_QWORD *)v13)
                  goto LABEL_51;
                v83 = (void **)(v29 + 1);
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v83);
LABEL_34:
                v19 = v29;
                v20 = 0x1020C405E66F15BLL;
                goto LABEL_50;
              }
              break;
            case 8:
              v33 = *(unint64_t **)v13;
              do
              {
                v34 = __ldaxr(v33);
                v35 = v34 - 1;
              }
              while (__stlxr(v35, v33));
              if (!v35)
              {
                v36 = *(unint64_t **)v13;
                if (!*(_QWORD *)v13)
                  goto LABEL_51;
                boost::detail::shared_count::~shared_count((unsigned int **)v36 + 2);
                v19 = v36;
                v37 = -235920773;
                goto LABEL_49;
              }
              break;
            case 9:
              v38 = *(unint64_t **)v13;
              do
              {
                v39 = __ldaxr(v38);
                v40 = v39 - 1;
              }
              while (__stlxr(v40, v38));
              if (!v40)
              {
                v41 = *(unint64_t **)v13;
                if (*(_QWORD *)v13)
                {
                  v42 = (void *)v41[6];
                  if (v42)
                  {
                    v41[7] = (unint64_t)v42;
                    operator delete(v42);
                  }
                  v43 = (void *)v41[3];
                  if (v43)
                  {
                    v41[4] = (unint64_t)v43;
                    operator delete(v43);
                  }
                  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v41 + 1));
                  v19 = v41;
                  v37 = 2071181815;
LABEL_49:
                  v20 = v37 | 0x1030C4000000000;
LABEL_50:
                  MEMORY[0x219A19A08](v19, v20);
                }
LABEL_51:
                *(_QWORD *)v13 = 0;
              }
              break;
            default:
              break;
          }
          *(_QWORD *)v13 = *(_QWORD *)v14;
          *(_QWORD *)(v13 + 5) = *(_QWORD *)(v14 + 5);
          *(_BYTE *)(v13 + 12) = *(_BYTE *)(v14 + 12);
          *(_BYTE *)(v14 + 12) = 0;
        }
        if (v14 == a1)
          break;
        v9 = (unsigned __int8 *)(v14 - 16);
        v13 = v14;
        if ((turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_6::operator()((unsigned __int8 *)&v84, (unsigned __int8 *)(v14 - 16), v10) & 1) == 0)goto LABEL_57;
      }
      v14 = a1;
LABEL_57:
      switch(*(_BYTE *)(v14 + 12))
      {
        case 2:
          v44 = *(unint64_t **)v14;
          do
          {
            v45 = __ldaxr(v44);
            v46 = v45 - 1;
          }
          while (__stlxr(v46, v44));
          if (!v46)
          {
            v47 = *(unint64_t **)v14;
            if (!*(_QWORD *)v14)
              goto LABEL_99;
            if (*((char *)v47 + 31) < 0)
              operator delete((void *)v47[1]);
            v48 = v47;
            v49 = 0x1012C404EF22A49;
            goto LABEL_98;
          }
          break;
        case 3:
          v50 = *(unint64_t **)v14;
          do
          {
            v51 = __ldaxr(v50);
            v52 = v51 - 1;
          }
          while (__stlxr(v52, v50));
          if (!v52)
          {
            v53 = *(unint64_t **)v14;
            if (!*(_QWORD *)v14)
              goto LABEL_99;
            v54 = (void *)v53[1];
            if (v54)
            {
              v53[2] = (unint64_t)v54;
              operator delete(v54);
            }
            v48 = v53;
            v49 = 0x1080C409938AC02;
            goto LABEL_98;
          }
          break;
        case 4:
          v55 = *(unint64_t **)v14;
          do
          {
            v56 = __ldaxr(v55);
            v57 = v56 - 1;
          }
          while (__stlxr(v57, v55));
          if (!v57)
          {
            v58 = *(unint64_t **)v14;
            if (!*(_QWORD *)v14)
              goto LABEL_99;
            v83 = (void **)(v58 + 1);
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v83);
            goto LABEL_82;
          }
          break;
        case 5:
          v59 = *(unint64_t **)v14;
          do
          {
            v60 = __ldaxr(v59);
            v61 = v60 - 1;
          }
          while (__stlxr(v61, v59));
          if (!v61)
          {
            v58 = *(unint64_t **)v14;
            if (!*(_QWORD *)v14)
              goto LABEL_99;
            v83 = (void **)(v58 + 1);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v83);
LABEL_82:
            v48 = v58;
            v49 = 0x1020C405E66F15BLL;
            goto LABEL_98;
          }
          break;
        case 8:
          v62 = *(unint64_t **)v14;
          do
          {
            v63 = __ldaxr(v62);
            v64 = v63 - 1;
          }
          while (__stlxr(v64, v62));
          if (!v64)
          {
            v65 = *(unint64_t **)v14;
            if (!*(_QWORD *)v14)
              goto LABEL_99;
            boost::detail::shared_count::~shared_count((unsigned int **)v65 + 2);
            v48 = v65;
            v66 = -235920773;
            goto LABEL_97;
          }
          break;
        case 9:
          v67 = *(unint64_t **)v14;
          do
          {
            v68 = __ldaxr(v67);
            v69 = v68 - 1;
          }
          while (__stlxr(v69, v67));
          if (!v69)
          {
            v70 = *(unint64_t **)v14;
            if (*(_QWORD *)v14)
            {
              v71 = (void *)v70[6];
              if (v71)
              {
                v70[7] = (unint64_t)v71;
                operator delete(v71);
              }
              v72 = (void *)v70[3];
              if (v72)
              {
                v70[4] = (unint64_t)v72;
                operator delete(v72);
              }
              std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v70 + 1));
              v48 = v70;
              v66 = 2071181815;
LABEL_97:
              v49 = v66 | 0x1030C4000000000;
LABEL_98:
              MEMORY[0x219A19A08](v48, v49);
            }
LABEL_99:
            *(_QWORD *)v14 = 0;
          }
          break;
        default:
          break;
      }
      v73 = v84.n128_u64[0];
      *(_QWORD *)(v14 + 5) = *(unint64_t *)((char *)v84.n128_u64 + 5);
      *(_QWORD *)v14 = v73;
      *(_BYTE *)(v14 + 12) = v84.n128_u8[12];
      if (++v12 == 8)
        return v11 + 16 == a2;
    }
    v9 = (unsigned __int8 *)v11;
    v11 += 16;
    if (v11 == a2)
      return 1;
  }
}

void sub_218412A20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, unint64_t *a11, int a12, char a13)
{
  switch(a13)
  {
    case 2:
      turi::full_type_name<turi::flexible_type>(&a11);
      break;
    case 3:
      turi::full_type_name<turi::flexible_type>(&a11);
      break;
    case 4:
      tc_init_set_config_parameter_cold_4(&a11);
      break;
    case 5:
      tc_init_set_config_parameter_cold_5(&a11);
      break;
    case 8:
      turi::full_type_name<turi::flexible_type>(&a11);
      break;
    case 9:
      turi::unity_sarray::make_uniform_BOOLean_array(&a11);
      break;
    default:
      break;
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_6 &,turi::flexible_type *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __n128 a5)
{
  __n128 v9;
  uint64_t result;
  __n128 v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  __int128 v17;
  __int128 v18;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_6 &,turi::flexible_type *>((__int128 *)a1, (__int128 *)a2, a3, a5);
  result = turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_6::operator()((unsigned __int8 *)a4, (unsigned __int8 *)a3, v9);
  if ((_DWORD)result)
  {
    v11 = *(__n128 *)a3;
    v16 = *(__n128 *)a3;
    v12 = *(_QWORD *)(a4 + 5);
    *(_QWORD *)a3 = *(_QWORD *)a4;
    *(_QWORD *)(a3 + 5) = v12;
    *(_QWORD *)(a4 + 5) = *(unint64_t *)((char *)v16.n128_u64 + 5);
    *(_QWORD *)a4 = v16.n128_u64[0];
    result = turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_6::operator()((unsigned __int8 *)a3, (unsigned __int8 *)a2, v11);
    if ((_DWORD)result)
    {
      v13 = *(__n128 *)a2;
      v17 = *(_OWORD *)a2;
      v14 = *(_QWORD *)(a3 + 5);
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *(_QWORD *)(a2 + 5) = v14;
      *(_QWORD *)(a3 + 5) = *(_QWORD *)((char *)&v17 + 5);
      *(_QWORD *)a3 = v17;
      result = turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_6::operator()((unsigned __int8 *)a2, (unsigned __int8 *)a1, v13);
      if ((_DWORD)result)
      {
        v18 = *(_OWORD *)a1;
        v15 = *(_QWORD *)(a2 + 5);
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_QWORD *)(a1 + 5) = v15;
        *(_QWORD *)(a2 + 5) = *(_QWORD *)((char *)&v18 + 5);
        *(_QWORD *)a2 = v18;
      }
    }
  }
  return result;
}

_QWORD *std::vector<turi::sframe_function_output_iterator<turi::ml_data_internal::row_data_block,std::function<void ()(turi::ml_data_internal::row_data_block const&)>,std::function<void ()(turi::ml_data_internal::row_data_block&&)>,std::function<void ()(turi::sframe_rows const&)>>>::vector(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<turi::sframe_function_output_iterator<std::pair<std::vector<turi::flexible_type>,std::string>,std::function<void ()(std::pair<std::vector<turi::flexible_type>,std::string> const&)>,std::function<void ()(std::pair<std::vector<turi::flexible_type>,std::string>&&)>,std::function<void ()(turi::sframe_rows const&)>>>::__vallocate[abi:ne180100](a1, a2);
    v4 = a1[1];
    v5 = v4 + 96 * a2;
    v6 = 96 * a2;
    v7 = (_QWORD *)(v4 + 88);
    do
    {
      *(v7 - 8) = 0;
      *(v7 - 4) = 0;
      *v7 = 0;
      v7 += 12;
      v6 -= 96;
    }
    while (v6);
    a1[1] = v5;
  }
  return a1;
}

void sub_218412C24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void std::__function::__func<turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_7,std::allocator<turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_7>,void ()(unsigned long,unsigned long)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

__n128 std::__function::__func<turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_7,std::allocator<turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_7>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x50uLL);
  *(_QWORD *)v2 = &off_24D93FAD0;
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *((_QWORD *)v2 + 9) = *(_QWORD *)(a1 + 72);
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_7,std::allocator<turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_7>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &off_24D93FAD0;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  v3 = *(_OWORD *)(a1 + 40);
  v4 = *(_OWORD *)(a1 + 56);
  *(_QWORD *)(a2 + 72) = *(_QWORD *)(a1 + 72);
  *(_OWORD *)(a2 + 56) = v4;
  *(_OWORD *)(a2 + 40) = v3;
  *(__n128 *)(a2 + 24) = result;
  return result;
}

void std::__function::__func<turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_7,std::allocator<turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_7>,void ()(unsigned long,unsigned long)>::operator()(uint64_t a1, const turi::flexible_type **a2, unint64_t *a3)
{
  const turi::flexible_type *v4;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t i;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  void *__p;
  void *v22;
  uint64_t v23;
  void **v24[3];
  void *v25[2];
  _OWORD v26[2];

  v4 = *a2;
  v5 = *a3;
  v6 = *(unint64_t **)(a1 + 8);
  v7 = v6[16];
  v8 = **(_QWORD **)(a1 + 16);
  v9 = v8;
  if ((const turi::flexible_type *)(*a3 - 1) != *a2)
    v9 = (v8 + v8 * (_QWORD)v4) / v5 / v7 * v7;
  memset(v26, 0, sizeof(v26));
  *(_OWORD *)v25 = 0u;
  std::vector<std::vector<turi::flexible_type>>::vector(v24, v6[12]);
  v10 = v8 * (unint64_t)v4 / v5 / v7 * v7;
  __p = 0;
  v22 = 0;
  v23 = 0;
  while (v10 != v9)
  {
    if (v6[16] + v10 >= v9)
      v11 = v9;
    else
      v11 = v6[16] + v10;
    v12 = v6[12];
    if (v12)
    {
      v13 = 0;
      v14 = 0;
      for (i = 0; i < v12; ++i)
      {
        if (*(_DWORD *)(*(_QWORD *)(v6[13] + v13) + 24) != 5)
        {
          v16 = *(_QWORD *)(**(_QWORD **)(a1 + 24) + v13);
          (*(void (**)(uint64_t, unint64_t, unint64_t, void **))(*(_QWORD *)v16 + 48))(v16, **(_QWORD **)(a1 + 32) + v10, **(_QWORD **)(a1 + 32) + v11, &v24[0][v14]);
          v12 = v6[12];
        }
        v14 += 3;
        v13 += 16;
      }
    }
    v17 = turi::ml_data_internal::fill_row_buffer_from_column_buffer((uint64_t)&__p, (char **)v25, (uint64_t)(v6 + 6), v24, v4, **(unsigned __int8 **)(a1 + 40), **(_BYTE **)(a1 + 48), **(_DWORD **)(a1 + 56));
    v18 = **(_QWORD **)(a1 + 64);
    v19 = *(_QWORD *)(v18 + 8 * (_QWORD)v4);
    if (v17 > v19)
      v19 = v17;
    *(_QWORD *)(v18 + 8 * (_QWORD)v4) = v19;
    v20 = *(_QWORD *)(**(_QWORD **)(a1 + 72) + 96 * (_QWORD)v4 + 24);
    if (!v20)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v20 + 48))(v20, v25);
    v10 = v11;
  }
  if (__p)
  {
    v22 = __p;
    operator delete(__p);
  }
  __p = v24;
  std::vector<std::vector<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  v24[0] = (void **)v26 + 1;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v24);
  if (v25[0])
  {
    v25[1] = v25[0];
    operator delete(v25[0]);
  }
}

void sub_218412ED8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18)
{
  a12 = &a18;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  if (__p)
  {
    a16 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_7,std::allocator<turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_7>,void ()(unsigned long,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_7,std::allocator<turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_7>,void ()(unsigned long,unsigned long)>::target_type()
{
}

_QWORD *turi::ml_data::_setup_untranslated_columns(turi::sframe const&,unsigned long,unsigned long)::$_0::operator()(unint64_t **a1, unint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *result;
  uint64_t v21;
  uint64_t v22[3];
  void **v23;
  _QWORD v24[3];
  _QWORD *v25;
  _BYTE v26[24];
  _BYTE *v27;
  _BYTE v28[24];
  _BYTE *v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v3 = **a1;
  v4 = a2 % v3;
  v5 = *a1[1];
  v6 = *a1[2];
  v7 = 16 * (a2 / v3);
  v8 = *(_QWORD *)(a1[3][19] + v7);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, unint64_t))(*(_QWORD *)v8 + 32))(v24, v8, a2 % v3);
  memset(v22, 0, sizeof(v22));
  std::vector<turi::flexible_type>::reserve(v22, 0x64uLL);
  v9 = v6 - v5;
  v10 = (v9 + v9 * v4) / v3 + v5;
  v11 = v9 * v4 / v3 + v5;
  while (v11 < v10)
  {
    v12 = v11;
    v13 = *(_QWORD *)(*a1[4] + v7);
    v11 += 100;
    v14 = (*(uint64_t (**)(uint64_t, unint64_t, unint64_t, uint64_t *))(*(_QWORD *)v13 + 48))(v13, v12, v11, v22);
    if (v14)
    {
      v15 = 0;
      do
      {
        if (!v27)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)v27 + 48))(v27, v22[0] + v15);
        v15 += 16;
        --v14;
      }
      while (v14);
    }
  }
  v23 = (void **)v22;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v23);
  v16 = v29;
  if (v29 == v28)
  {
    v17 = 4;
    v16 = v28;
  }
  else
  {
    if (!v29)
      goto LABEL_13;
    v17 = 5;
  }
  (*(void (**)(void))(*v16 + 8 * v17))();
LABEL_13:
  v18 = v27;
  if (v27 == v26)
  {
    v19 = 4;
    v18 = v26;
  }
  else
  {
    if (!v27)
      goto LABEL_18;
    v19 = 5;
  }
  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_18:
  result = v25;
  if (v25 == v24)
  {
    v21 = 4;
    result = v24;
  }
  else
  {
    if (!v25)
      return result;
    v21 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v21))();
}

void sub_218413168(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  void **v7;
  va_list va1;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  va_arg(va2, _QWORD);
  va_copy((va_list)v7, va);
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)va1);
  turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>::~sframe_function_output_iterator((uint64_t *)va2);
  _Unwind_Resume(a1);
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<turi::ml_data::_setup_untranslated_columns(turi::sframe const&,unsigned long,unsigned long)::$_0>(unsigned long,unsigned long,turi::ml_data::_setup_untranslated_columns(turi::sframe const&,unsigned long,unsigned long)::$_0 const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v4;
  __int128 v5;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == ((unint64_t)"ZN4turi12parallel_forIZNS_7ml_data27_setup_untranslated_columnsERKNS_6sframeEmmE"
                                        "3$_0EEvmmRKT_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)
        || (result = strcmp((const char *)result, (const char *)((unint64_t)"ZN4turi12parallel_forIZNS_7ml_data27_setup_untranslated_columnsERKNS_6sframeEmmE3$_0EEvmmRKT_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)), !(_DWORD)result))
      {
        *(_QWORD *)a2 = v4;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
    }
  }
  else
  {
    v5 = *(_OWORD *)result;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

unint64_t ***boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<turi::ml_data::_setup_untranslated_columns(turi::sframe const&,unsigned long,unsigned long)::$_0>(unsigned long,unsigned long,turi::ml_data::_setup_untranslated_columns(turi::sframe const&,unsigned long,unsigned long)::$_0 const&)::{lambda(void)#1},void>::invoke(unint64_t ***result)
{
  unint64_t v1;
  unint64_t ***v2;

  v1 = (unint64_t)result[1];
  if (v1 < (unint64_t)result[2])
  {
    v2 = result;
    do
      result = (unint64_t ***)turi::ml_data::_setup_untranslated_columns(turi::sframe const&,unsigned long,unsigned long)::$_0::operator()(*v2, v1++);
    while (v1 < (unint64_t)v2[2]);
  }
  return result;
}

void turi::ml_data_iterator::seek(turi::ml_data_iterator *this, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;

  v3 = *((_QWORD *)this + 43) + a2;
  assert_msg(v3 <= *((_QWORD *)this + 44), "Requested row index out of bounds.");
  v4 = *((_QWORD *)this + 34) == *((_QWORD *)this + 43) && *((_QWORD *)this + 35) == *((_QWORD *)this + 44);
  assert_msg(v4, "Seek not supported with multithreaded iterators.");
  *((_QWORD *)this + 36) = v3;
  if (v3 != *((_QWORD *)this + 35))
    turi::ml_data_iterator::setup_block_containing_current_row_index(this);
}

_QWORD *std::shared_ptr<turi::ml_data_internal::ml_data_block_manager>::shared_ptr[abi:ne180100]<turi::ml_data_internal::ml_data_block_manager,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_24D93FB70;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_21841336C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  a10 = 0;
  if (v10)
    std::default_delete<turi::ml_data_internal::ml_data_block_manager>::operator()[abi:ne180100]((uint64_t)&a10, v10);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<turi::ml_data_internal::ml_data_block_manager *,std::shared_ptr<turi::ml_data_internal::ml_data_block_manager>::__shared_ptr_default_delete<turi::ml_data_internal::ml_data_block_manager,turi::ml_data_internal::ml_data_block_manager>,std::allocator<turi::ml_data_internal::ml_data_block_manager>>::__on_zero_shared(uint64_t a1)
{
  std::default_delete<turi::ml_data_internal::ml_data_block_manager>::operator()[abi:ne180100](a1 + 24, *(_QWORD *)(a1 + 24));
}

uint64_t std::__shared_ptr_pointer<turi::ml_data_internal::ml_data_block_manager *,std::shared_ptr<turi::ml_data_internal::ml_data_block_manager>::__shared_ptr_default_delete<turi::ml_data_internal::ml_data_block_manager,turi::ml_data_internal::ml_data_block_manager>,std::allocator<turi::ml_data_internal::ml_data_block_manager>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::default_delete<turi::ml_data_internal::ml_data_block_manager>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  void **v5;

  if (a2)
  {
    std::__tree<std::__value_type<long,std::pair<std::weak_ptr<turi::sarray<turi::flexible_type>>,unsigned long>>,std::__map_value_compare<long,std::__value_type<long,std::pair<std::weak_ptr<turi::sarray<turi::flexible_type>>,unsigned long>>,std::less<long>,true>,std::allocator<std::__value_type<long,std::pair<std::weak_ptr<turi::sarray<turi::flexible_type>>,unsigned long>>>>::destroy(a2 + 216, *(_QWORD **)(a2 + 224));
    turi::mutex::~mutex((pthread_mutex_t *)(a2 + 144));
    v5 = (void **)(a2 + 120);
    std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v5);
    std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](a2 + 104);
    v5 = (void **)(a2 + 72);
    std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v5);
    v3 = *(void **)(a2 + 32);
    if (v3)
    {
      *(_QWORD *)(a2 + 40) = v3;
      operator delete(v3);
    }
    v4 = std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](a2);
    MEMORY[0x219A19A08](v4, 0x1030C40535333AFLL);
  }
}

uint64_t OUTLINED_FUNCTION_42_1()
{
  uint64_t v0;

  return std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v0 + 8);
}

void OUTLINED_FUNCTION_43_1(void *__p)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 32) = __p;
  operator delete(__p);
}

void OUTLINED_FUNCTION_44_1(void *__p)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 56) = __p;
  operator delete(__p);
}

void __cxx_global_var_init_13_3()
{
  int v0;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, "Mutex create error %d", v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_ml_data_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

char *turi::column_mode_enum_to_name(unsigned int a1)
{
  if (a1 >= 8)
    turi::column_mode_enum_to_name(turi::ml_column_mode)::$_0::operator()();
  return off_24D93FBD8[a1];
}

void turi::column_mode_enum_to_name(turi::ml_column_mode)::$_0::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/ml/ml_data/ml_data_column_modes.cpp", 101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/ml/ml_data/ml_data_column_modes.cpp", "operator()", 26, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::column_mode_enum_to_name(turi::ml_column_mode)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_218413698(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

uint64_t turi::ml_data_internal::check_type_consistent_with_mode(uint64_t result, unsigned int a2, int a3)
{
  _QWORD *v3;
  int v4;
  char v5;
  uint64_t v6;
  char *v7;
  int *v8;

  v5 = a2;
  v4 = a3;
  switch(a3)
  {
    case 0:
      if (a2 >= 2)
        goto LABEL_11;
      return result;
    case 1:
      if (a2 <= 7 && ((1 << a2) & 0x85) != 0)
        return result;
      goto LABEL_11;
    case 2:
    case 7:
      if (a2 != 3 && a2 != 9)
        goto LABEL_11;
      return result;
    case 3:
      if (a2 != 4)
        goto LABEL_11;
      return result;
    case 4:
      if (a2 != 5)
      {
LABEL_11:
        v6 = result;
        v7 = &v5;
        v8 = &v4;
        turi::ml_data_internal::check_type_consistent_with_mode(std::string const&,turi::flex_type_enum,turi::ml_column_mode)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
      }
      return result;
    case 5:
      return result;
    case 6:
      v3 = std::operator<<[abi:ne180100]<std::char_traits<char>>(MEMORY[0x24BEDB310], "Unsupported ml_column_mode: CATEGORICAL_SORTED");
      std::endl[abi:ne180100]<char,std::char_traits<char>>(v3);
      turi::ml_data_internal::check_type_consistent_with_mode(std::string const&,turi::flex_type_enum,turi::ml_column_mode)::$_0::operator()();
    default:
      turi::ml_data_internal::check_type_consistent_with_mode(std::string const&,turi::flex_type_enum,turi::ml_column_mode)::$_2::operator()();
  }
  return result;
}

void turi::ml_data_internal::check_type_consistent_with_mode(std::string const&,turi::flex_type_enum,turi::ml_column_mode)::$_0::operator()()
{
  turi::ml_data_internal::check_type_consistent_with_mode(std::string const&,turi::flex_type_enum,turi::ml_column_mode)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

uint64_t turi::ml_data_internal::choose_column_mode(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unsigned int v6;
  uint64_t result;
  BOOL v8;
  char v9;
  int *v10;
  file_logger *v11;
  file_logger *started;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  const std::locale::facet *v18;
  _QWORD *v19;
  int v20;
  const void *v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  const char *v26;
  size_t v27;
  _QWORD *v28;
  _QWORD *v29;
  char *v30;
  size_t v31;
  _QWORD *v32;
  _QWORD *exception;
  unsigned int v34;
  std::string v35;
  std::locale *v36;
  std::locale v37;

  if (std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>(a3, (const void **)a1))
  {
    v6 = *(_DWORD *)std::map<std::string,turi::neural_net::shared_float_array>::at(a3, (const void **)a1);
    if (v6 == 6)
      result = 1;
    else
      result = v6;
    switch((int)result)
    {
      case 0:
        v9 = a2 < 2;
        goto LABEL_18;
      case 1:
        v9 = vmaxv_u16((uint16x4_t)vceq_s16((int16x4_t)(*(_QWORD *)&vdup_n_s16(a2) & 0xFF00FF00FF00FFLL), (int16x4_t)0x7000200000001)) & 1;
        goto LABEL_18;
      case 2:
      case 7:
        v8 = a2 == 9 || a2 == 3;
        goto LABEL_15;
      case 3:
        v8 = a2 == 4;
        goto LABEL_15;
      case 4:
        v8 = a2 == 5;
LABEL_15:
        v9 = v8;
LABEL_18:
        if ((v9 & 1) != 0)
          return result;
        goto LABEL_43;
      case 5:
        return result;
      default:
LABEL_43:
        v34 = result;
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v37);
        v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v37, (uint64_t)"In column ", 10);
        v20 = *(char *)(a1 + 23);
        if (v20 >= 0)
          v21 = (const void *)a1;
        else
          v21 = *(const void **)a1;
        if (v20 >= 0)
          v22 = *(unsigned __int8 *)(a1 + 23);
        else
          v22 = *(_QWORD *)(a1 + 8);
        v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)v21, v22);
        v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)", ", 2);
        v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"column type ", 12);
        if (a2 > 9)
          v26 = "undefined";
        else
          v26 = off_24D93FC18[a2];
        v27 = strlen(v26);
        v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)v26, v27);
        v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)" is not compatible with requested mode ", 39);
        v30 = turi::column_mode_enum_to_name(v34);
        v31 = strlen(v30);
        v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)v30, v31);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)".", 1);
        v36 = &v37;
        turi::ml_data_internal::choose_column_mode(std::string const&,turi::flex_type_enum,std::map<std::string,turi::ml_column_mode> const&)::$_1::operator()();
    }
  }
  result = 0;
  switch(a2)
  {
    case 0u:
    case 1u:
      return result;
    case 2u:
      goto LABEL_42;
    case 3u:
      return 2;
    case 4u:
      return 3;
    case 5u:
      return 4;
    case 7u:
      v10 = (int *)global_logger();
      if (v10[169] <= 5)
      {
        if (cppipc::must_cancel((cppipc *)v10))
          log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
        v11 = (file_logger *)global_logger();
        started = file_logger::start_stream(v11, 5, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/ml/ml_data/ml_data_column_modes.cpp", "choose_column_mode", 214, 1);
        v13 = pthread_getspecific(*((_QWORD *)started + 74));
        if (v13 && *((_BYTE *)v13 + 280))
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13 + 2, (uint64_t)"Type of column ", 15);
        if (*(char *)(a1 + 23) < 0)
          std::string::__init_copy_ctor_external(&v35, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
        else
          v35 = *(std::string *)a1;
        v14 = file_logger::operator<<<std::string>((uint64_t)started, (uint64_t)&v35);
        v15 = pthread_getspecific(*(_QWORD *)(v14 + 592));
        if (v15 && *((_BYTE *)v15 + 280))
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15 + 2, (uint64_t)" is undefined; ",
            15);
        v16 = pthread_getspecific(*(_QWORD *)(v14 + 592));
        if (v16 && *((_BYTE *)v16 + 280))
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16 + 2, (uint64_t)"treated as categorical.  This may not yield the desired behavior.", 65);
        v17 = pthread_getspecific(*(_QWORD *)(v14 + 592));
        if (v17)
        {
          if (*((_BYTE *)v17 + 280))
          {
            std::ios_base::getloc((const std::ios_base *)((char *)v17 + *(_QWORD *)(v17[2] - 24) + 16));
            v18 = std::locale::use_facet(&v37, MEMORY[0x24BEDB350]);
            ((void (*)(const std::locale::facet *, uint64_t))v18->__vftable[2].~facet_0)(v18, 10);
            std::locale::~locale(&v37);
            std::ostream::put();
            std::ostream::flush();
            file_logger::stream_flush((file_logger *)v14);
            if (*(_DWORD *)(v14 + 600) == 7)
            {
              __print_back_trace();
              exception = __cxa_allocate_exception(8uLL);
              *exception = "LOG_FATAL encountered";
              __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
            }
          }
        }
        if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v35.__r_.__value_.__l.__data_);
      }
LABEL_42:
      result = 1;
      break;
    case 9u:
      result = 7;
      break;
    default:
      v37.__locale_ = (std::locale::__imp *)a1;
      turi::ml_data_internal::choose_column_mode(std::string const&,turi::flex_type_enum,std::map<std::string,turi::ml_column_mode> const&)::$_2::operator()();
  }
  return result;
}

void sub_218413BF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, std::locale a19)
{
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_218413DCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

uint64_t OUTLINED_FUNCTION_22_2(_QWORD *a1)
{
  uint64_t v1;

  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  return **(unsigned int **)(v1 + 16);
}

void __cxx_global_var_init_22_1()
{
  uint64_t v0;
  const char *v1;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, v1, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_ml_data_column_modes_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void turi::ml_data_iterator::setup(turi::ml_data_iterator *this, const turi::ml_data *a2, const turi::ml_data_internal::row_metadata *a3, uint64_t a4, unint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;

  turi::ml_data::operator=((uint64_t)this, (uint64_t)a2);
  *((_OWORD *)this + 12) = *(_OWORD *)a3;
  if ((turi::ml_data_iterator *)((char *)this + 192) == a3)
  {
    *(_OWORD *)((char *)this + 232) = *(_OWORD *)((char *)a3 + 40);
  }
  else
  {
    std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((char *)this + 208, *((char **)a3 + 2), *((_QWORD *)a3 + 3), (uint64_t)(*((_QWORD *)a3 + 3) - *((_QWORD *)a3 + 2)) >> 3);
    *(_OWORD *)((char *)this + 232) = *(_OWORD *)((char *)a3 + 40);
    std::vector<std::shared_ptr<turi::fileio::file_ownership_handle>>::__assign_with_size[abi:ne180100]<std::shared_ptr<turi::fileio::file_ownership_handle>*,std::shared_ptr<turi::fileio::file_ownership_handle>*>((uint64_t)this + 248, *((uint64_t **)a3 + 7), *((uint64_t **)a3 + 8), (uint64_t)(*((_QWORD *)a3 + 8) - *((_QWORD *)a3 + 7)) >> 4);
  }
  v9 = *((_QWORD *)this + 2);
  v10 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 43) = v9;
  *((_QWORD *)this + 44) = v10;
  v11 = v10 - v9;
  v12 = v11 * a4 / a5 + v9;
  *((_QWORD *)this + 34) = v12;
  *((_QWORD *)this + 35) = (v11 + v11 * a4) / a5 + v9;
  v13 = *(_QWORD **)this;
  v14 = *(_QWORD *)(*(_QWORD *)this + 72);
  *((_BYTE *)this + 337) = v14 != 0;
  *((_BYTE *)this + 336) = v14 != (uint64_t)(v13[1] - *v13) >> 4;
  *((_QWORD *)this + 36) = v12;
  turi::ml_data_iterator::setup_block_containing_current_row_index(this);
}

void turi::ml_data_iterator::setup_block_containing_current_row_index(turi::ml_data_iterator *this)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  BOOL v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;

  if (*((_QWORD *)this + 34) == *((_QWORD *)this + 35))
  {
    std::shared_ptr<turi::neural_net::Subscriber<std::unique_ptr<turi::style_transfer::Checkpoint>>>::reset[abi:ne180100]((_QWORD *)this + 38);
  }
  else
  {
    v2 = *((_QWORD *)this + 36);
    v3 = *((_QWORD *)this + 37);
    v4 = *((_QWORD *)this + 16);
    v5 = v4 * v3;
    v7 = v2 >= v4 * v3;
    v6 = v4 + v4 * v3;
    v7 = !v7 || v2 >= v6;
    if (v7)
    {
      *((_QWORD *)this + 37) = v2 / v4;
      std::shared_ptr<turi::neural_net::Subscriber<std::unique_ptr<turi::style_transfer::Checkpoint>>>::reset[abi:ne180100]((_QWORD *)this + 38);
      turi::ml_data_internal::ml_data_block_manager::get_block(*((turi::ml_data_internal::ml_data_block_manager **)this + 22), *((void ***)this + 37), (uint64_t *)&v14);
      std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)this + 304, &v14);
      v8 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
      if (*((_QWORD *)&v14 + 1))
      {
        v9 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 - 1, v9));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      v2 = *((_QWORD *)this + 36);
      v5 = *((_QWORD *)this + 16) * *((_QWORD *)this + 37);
    }
    *((_QWORD *)this + 36) = v5;
    *((_QWORD *)this + 40) = 0;
    if (*((_BYTE *)this + 194))
    {
      *((_QWORD *)this + 40) = *((_QWORD *)this + 25) * (v2 - v5);
      *((_QWORD *)this + 36) = v2;
    }
    else if (v2 != v5)
    {
      v11 = 0;
      v12 = *(_QWORD *)(*((_QWORD *)this + 38) + 96);
      v13 = v5;
      do
      {
        v11 += *(_QWORD *)(v12 + 8 * v11);
        *((_QWORD *)this + 40) = v11;
        *((_QWORD *)this + 36) = ++v13;
      }
      while (v2 != v13);
    }
    *((_QWORD *)this + 41) = v2 - v5;
  }
}

void sub_218414318(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_4_18()
{
  uint64_t v0;
  const char *v1;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, v1, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_ml_data_iterator_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void turi::ml_data_row_reference::from_row(uint64_t *a1@<X0>, _QWORD *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  char v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  const void **v15;
  _QWORD *v16;
  unsigned __int8 **v17;
  uint64_t v18;
  size_t v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  int v22;
  unsigned __int8 *v23;
  const void **v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  void *v49;
  void *v50;
  unsigned int v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  void *v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  unint64_t *v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t *v72;
  unint64_t *v73;
  uint64_t v74;
  unint64_t *v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t *v78;
  unint64_t *v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t *v82;
  void *v83;
  void *v84;
  unsigned int v85;
  unint64_t *v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t *v89;
  void *v90;
  unint64_t *v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t *v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t *v97;
  uint64_t v98;
  BOOL v99;
  int v100;
  unint64_t *v102;
  unint64_t v103;
  int v104;
  uint64_t v105;
  unint64_t v106;
  BOOL v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t *v110;
  uint64_t v111;
  std::__shared_weak_count *v112;
  unint64_t *p_shared_owners;
  unint64_t v114;
  int v115;
  unint64_t v116;
  uint64_t **v117;
  unsigned __int8 v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  int v122;
  uint64_t **v123;
  uint64_t **v124;
  _QWORD *v125;
  std::__shared_weak_count *v126;
  void *__p[3];
  void **v128;
  char v129;
  uint64_t v130[2];
  uint64_t *v131;
  uint64_t *v132;
  _QWORD v133[2];

  v133[1] = *MEMORY[0x24BDAC8D0];
  v8 = a2 + 1;
  std::vector<unsigned long>::vector(__p, (uint64_t)(a2[1] - *a2) >> 5);
  v122 = a3;
  v131 = 0;
  v9 = *v8;
  v10 = (uint64_t *)*a2;
  if (*v8 != *a2)
  {
    v11 = 0;
    v12 = 0;
    while (1)
    {
      v13 = &v10[4 * v12];
      if (*((_BYTE *)v13 + 12) != 2)
      {
        v123 = (uint64_t **)a2;
        v124 = &v131;
        turi::ml_data_row_reference::from_row(std::shared_ptr<turi::ml_metadata> const&,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> const&,turi::ml_missing_value_action)::$_0::operator()(&v123);
      }
      v14 = *v13;
      v15 = (const void **)(*v13 + 8);
      v16 = (_QWORD *)*a1;
      v17 = *(unsigned __int8 ***)(*a1 + 24);
      if (!v17)
        goto LABEL_21;
      v18 = *(unsigned __int8 *)(v14 + 31);
      v19 = *(_QWORD *)(v14 + 16);
      if ((v18 & 0x80u) == 0)
        v20 = (unsigned __int8 *)*(unsigned __int8 *)(v14 + 31);
      else
        v20 = *(unsigned __int8 **)(v14 + 16);
      v21 = (unsigned __int8 *)*((unsigned __int8 *)v17 + 23);
      v22 = (char)v21;
      if ((char)v21 < 0)
        v21 = v17[1];
      if (v20 != v21)
        goto LABEL_21;
      if (v22 >= 0)
        v23 = *(unsigned __int8 **)(*a1 + 24);
      else
        v23 = *v17;
      if ((v18 & 0x80) != 0)
      {
        if (memcmp(*v15, v23, v19))
          goto LABEL_21;
      }
      else if ((_DWORD)v18)
      {
        v24 = v15;
        while (*(unsigned __int8 *)v24 == *v23)
        {
          v24 = (const void **)((char *)v24 + 1);
          ++v23;
          if (!--v18)
            goto LABEL_26;
        }
LABEL_21:
        v25 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>((uint64_t)(v16 + 10), v15);
        if (v16 + 11 == (_QWORD *)v25)
          v26 = -1;
        else
          v26 = *(_QWORD *)(v25 + 56);
        *((_QWORD *)__p[0] + v12) = v26;
        v10 = (uint64_t *)*a2;
        v9 = a2[1];
        goto LABEL_24;
      }
LABEL_26:
      *((_QWORD *)__p[0] + v12) = (uint64_t)(v16[1] - *v16) >> 4;
      v11 = 1;
LABEL_24:
      v131 = (uint64_t *)++v12;
      if (v12 >= (v9 - (uint64_t)v10) >> 5)
        goto LABEL_29;
    }
  }
  v11 = 0;
LABEL_29:
  v27 = operator new();
  *(_QWORD *)v27 = 0;
  *(_QWORD *)(v27 + 8) = 0;
  *(_DWORD *)(v27 + 15) = 0;
  *(_OWORD *)(v27 + 24) = 0u;
  *(_OWORD *)(v27 + 40) = 0u;
  *(_OWORD *)(v27 + 56) = 0u;
  *(_OWORD *)(v27 + 72) = 0u;
  *(_OWORD *)(v27 + 88) = 0u;
  *(_OWORD *)(v27 + 104) = 0u;
  *(_OWORD *)(v27 + 120) = 0u;
  *(_OWORD *)(v27 + 136) = 0u;
  *(_OWORD *)(v27 + 152) = 0u;
  std::shared_ptr<turi::ml_data_internal::ml_data_block>::shared_ptr[abi:ne180100]<turi::ml_data_internal::ml_data_block,void>(&v125, v27);
  std::shared_ptr<turi::neural_net::mps_command_queue>::operator=[abi:ne180100](v125, a1);
  v28 = 184;
  if ((v11 & 1) != 0)
    v28 = 104;
  v29 = *a1 + v28;
  v30 = v125;
  v31 = v125 + 2;
  *((_OWORD *)v125 + 1) = *(_OWORD *)v29;
  if (v31 == (_QWORD *)v29)
  {
    *(_OWORD *)(v30 + 7) = *(_OWORD *)(v29 + 40);
  }
  else
  {
    std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((char *)v30 + 32, *(char **)(v29 + 16), *(_QWORD *)(v29 + 24), (uint64_t)(*(_QWORD *)(v29 + 24) - *(_QWORD *)(v29 + 16)) >> 3);
    *(_OWORD *)(v30 + 7) = *(_OWORD *)(v29 + 40);
    std::vector<std::shared_ptr<turi::fileio::file_ownership_handle>>::__assign_with_size[abi:ne180100]<std::shared_ptr<turi::fileio::file_ownership_handle>*,std::shared_ptr<turi::fileio::file_ownership_handle>*>((uint64_t)(v30 + 9), *(uint64_t **)(v29 + 56), *(uint64_t **)(v29 + 64), (uint64_t)(*(_QWORD *)(v29 + 64) - *(_QWORD *)(v29 + 56)) >> 4);
    v30 = v125;
  }
  v32 = v30[8];
  *(uint64_t *)((char *)v130 + 5) = *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5);
  v130[0] = turi::FLEX_UNDEFINED;
  BYTE4(v130[1]) = byte_254FF3FDC;
  if (byte_254FF3FDC <= 9u && ((1 << byte_254FF3FDC) & 0x33C) != 0)
  {
    v33 = (unint64_t *)v130[0];
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 + 1, v33));
  }
  v131 = 0;
  v132 = 0;
  v133[0] = 0;
  v128 = (void **)&v131;
  v129 = 0;
  v131 = (uint64_t *)operator new(0x10uLL);
  v132 = v131;
  v133[0] = v131 + 2;
  v132 = (uint64_t *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::flexible_type>,turi::flexible_type*,turi::flexible_type*,turi::flexible_type*>((uint64_t)v133, v130, (uint64_t *)&v131, (uint64_t)v131);
  std::vector<std::vector<turi::flexible_type>>::vector(&v123, v32, &v131);
  v128 = (void **)&v131;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v128);
  switch(BYTE4(v130[1]))
  {
    case 2:
      v35 = (unint64_t *)v130[0];
      do
      {
        v36 = __ldaxr(v35);
        v37 = v36 - 1;
      }
      while (__stlxr(v37, v35));
      if (!v37)
      {
        v38 = v130[0];
        if (v130[0])
        {
          if (*(char *)(v130[0] + 31) < 0)
            operator delete(*(void **)(v130[0] + 8));
          v39 = v38;
          v40 = 0x1012C404EF22A49;
          goto LABEL_79;
        }
      }
      break;
    case 3:
      v52 = (unint64_t *)v130[0];
      do
      {
        v53 = __ldaxr(v52);
        v54 = v53 - 1;
      }
      while (__stlxr(v54, v52));
      if (!v54)
      {
        v55 = v130[0];
        if (v130[0])
        {
          v56 = *(void **)(v130[0] + 8);
          if (v56)
          {
            *(_QWORD *)(v130[0] + 16) = v56;
            operator delete(v56);
          }
          v39 = v55;
          v40 = 0x1080C409938AC02;
          goto LABEL_79;
        }
      }
      break;
    case 4:
      v41 = (unint64_t *)v130[0];
      do
      {
        v42 = __ldaxr(v41);
        v43 = v42 - 1;
      }
      while (__stlxr(v43, v41));
      if (!v43)
      {
        v44 = v130[0];
        if (v130[0])
        {
          v128 = (void **)(v130[0] + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v128);
          goto LABEL_72;
        }
      }
      break;
    case 5:
      v57 = (unint64_t *)v130[0];
      do
      {
        v58 = __ldaxr(v57);
        v59 = v58 - 1;
      }
      while (__stlxr(v59, v57));
      if (!v59)
      {
        v44 = v130[0];
        if (v130[0])
        {
          v128 = (void **)(v130[0] + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v128);
LABEL_72:
          v39 = v44;
          v40 = 0x1020C405E66F15BLL;
          goto LABEL_79;
        }
      }
      break;
    case 8:
      v60 = (unint64_t *)v130[0];
      do
      {
        v61 = __ldaxr(v60);
        v62 = v61 - 1;
      }
      while (__stlxr(v62, v60));
      if (!v62)
      {
        v63 = v130[0];
        if (v130[0])
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v130[0] + 16));
          v39 = v63;
          v51 = -235920773;
          goto LABEL_78;
        }
      }
      break;
    case 9:
      v45 = (unint64_t *)v130[0];
      do
      {
        v46 = __ldaxr(v45);
        v47 = v46 - 1;
      }
      while (__stlxr(v47, v45));
      if (!v47)
      {
        v48 = v130[0];
        if (v130[0])
        {
          v49 = *(void **)(v130[0] + 48);
          if (v49)
          {
            *(_QWORD *)(v130[0] + 56) = v49;
            operator delete(v49);
          }
          v50 = *(void **)(v48 + 24);
          if (v50)
          {
            *(_QWORD *)(v48 + 32) = v50;
            operator delete(v50);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v48 + 8);
          v39 = v48;
          v51 = 2071181815;
LABEL_78:
          v40 = v51 | 0x1030C4000000000;
LABEL_79:
          MEMORY[0x219A19A08](v39, v40);
        }
      }
      break;
    default:
      break;
  }
  v64 = (uint64_t *)*a2;
  if (a2[1] != *a2)
  {
    v65 = 0;
    do
    {
      v66 = *((_QWORD *)__p[0] + v65);
      if (v66 != -1)
      {
        v67 = (uint64_t)&v64[4 * v65 + 2];
        v68 = v123[3 * v66];
        if ((uint64_t *)v67 != v68)
        {
          switch(*((_BYTE *)v68 + 12))
          {
            case 2:
              v69 = (unint64_t *)*v68;
              do
              {
                v70 = __ldaxr(v69);
                v71 = v70 - 1;
              }
              while (__stlxr(v71, v69));
              if (!v71)
              {
                v72 = (unint64_t *)*v68;
                if (!*v68)
                  goto LABEL_126;
                if (*((char *)v72 + 31) < 0)
                  operator delete((void *)v72[1]);
                v73 = v72;
                v74 = 0x1012C404EF22A49;
                goto LABEL_125;
              }
              break;
            case 3:
              v86 = (unint64_t *)*v68;
              do
              {
                v87 = __ldaxr(v86);
                v88 = v87 - 1;
              }
              while (__stlxr(v88, v86));
              if (!v88)
              {
                v89 = (unint64_t *)*v68;
                if (!*v68)
                  goto LABEL_126;
                v90 = (void *)v89[1];
                if (v90)
                {
                  v89[2] = (unint64_t)v90;
                  operator delete(v90);
                }
                v73 = v89;
                v74 = 0x1080C409938AC02;
                goto LABEL_125;
              }
              break;
            case 4:
              v75 = (unint64_t *)*v68;
              do
              {
                v76 = __ldaxr(v75);
                v77 = v76 - 1;
              }
              while (__stlxr(v77, v75));
              if (!v77)
              {
                v78 = (unint64_t *)*v68;
                if (!*v68)
                  goto LABEL_126;
                v131 = (uint64_t *)(v78 + 1);
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v131);
                goto LABEL_118;
              }
              break;
            case 5:
              v91 = (unint64_t *)*v68;
              do
              {
                v92 = __ldaxr(v91);
                v93 = v92 - 1;
              }
              while (__stlxr(v93, v91));
              if (!v93)
              {
                v78 = (unint64_t *)*v68;
                if (!*v68)
                  goto LABEL_126;
                v131 = (uint64_t *)(v78 + 1);
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v131);
LABEL_118:
                v73 = v78;
                v74 = 0x1020C405E66F15BLL;
                goto LABEL_125;
              }
              break;
            case 8:
              v94 = (unint64_t *)*v68;
              do
              {
                v95 = __ldaxr(v94);
                v96 = v95 - 1;
              }
              while (__stlxr(v96, v94));
              if (!v96)
              {
                v97 = (unint64_t *)*v68;
                if (!*v68)
                  goto LABEL_126;
                boost::detail::shared_count::~shared_count((unsigned int **)v97 + 2);
                v73 = v97;
                v85 = -235920773;
                goto LABEL_124;
              }
              break;
            case 9:
              v79 = (unint64_t *)*v68;
              do
              {
                v80 = __ldaxr(v79);
                v81 = v80 - 1;
              }
              while (__stlxr(v81, v79));
              if (!v81)
              {
                v82 = (unint64_t *)*v68;
                if (*v68)
                {
                  v83 = (void *)v82[6];
                  if (v83)
                  {
                    v82[7] = (unint64_t)v83;
                    operator delete(v83);
                  }
                  v84 = (void *)v82[3];
                  if (v84)
                  {
                    v82[4] = (unint64_t)v84;
                    operator delete(v84);
                  }
                  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v82 + 1));
                  v73 = v82;
                  v85 = 2071181815;
LABEL_124:
                  v74 = v85 | 0x1030C4000000000;
LABEL_125:
                  MEMORY[0x219A19A08](v73, v74);
                }
LABEL_126:
                *v68 = 0;
              }
              break;
            default:
              break;
          }
          v98 = *(_QWORD *)v67;
          *(uint64_t *)((char *)v68 + 5) = *(_QWORD *)(v67 + 5);
          *v68 = v98;
          LODWORD(v98) = *(unsigned __int8 *)(v67 + 12);
          *((_BYTE *)v68 + 12) = v98;
          v99 = v98 > 9;
          v100 = (1 << v98) & 0x33C;
          if (!v99 && v100 != 0)
          {
            v102 = (unint64_t *)*v68;
            do
              v103 = __ldaxr(v102);
            while (__stlxr(v103 + 1, v102));
          }
        }
        v104 = *(unsigned __int8 *)(v67 + 12);
        if (v104 != 7)
        {
          v105 = *(_QWORD *)(v125[9] + 16 * v66);
          turi::ml_data_internal::check_type_consistent_with_mode(v105, (char)v104, *(_DWORD *)(v105 + 24));
        }
      }
      ++v65;
      v64 = (uint64_t *)*a2;
    }
    while (v65 < (uint64_t)(a2[1] - *a2) >> 5);
  }
  v106 = *(_QWORD *)(*a1 + 72);
  v107 = v106 != 0;
  v108 = a4;
  if (v106)
  {
    std::vector<std::vector<turi::flexible_type>>::reserve(v125 + 18, v106);
    if (v124 != v123)
    {
      v109 = 0;
      do
      {
        v110 = (uint64_t *)(*(_QWORD *)*a1 + 16 * v109);
        v111 = *v110;
        v112 = (std::__shared_weak_count *)v110[1];
        if (v112)
        {
          p_shared_owners = (unint64_t *)&v112->__shared_owners_;
          do
            v114 = __ldxr(p_shared_owners);
          while (__stxr(v114 + 1, p_shared_owners));
          v115 = *(_DWORD *)(v111 + 24);
          do
            v116 = __ldaxr(p_shared_owners);
          while (__stlxr(v116 - 1, p_shared_owners));
          if (!v116)
          {
            ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
            std::__shared_weak_count::__release_weak(v112);
          }
        }
        else
        {
          v115 = *(_DWORD *)(v111 + 24);
        }
        v117 = v123;
        if (v115 == 5)
        {
          std::vector<std::vector<turi::flexible_type>>::push_back[abi:ne180100](v125 + 18, (uint64_t)&v123[3 * v109]);
          v117 = v123;
        }
        ++v109;
      }
      while (v109 < 0xAAAAAAAAAAAAAAABLL * (v124 - v117));
    }
  }
  if ((v118 & 1) == 0
  {
    v131 = 0;
    std::vector<unsigned long>::vector[abi:ne180100](turi::ml_data_row_reference::from_row(std::shared_ptr<turi::ml_metadata> const&,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> const&,turi::ml_missing_value_action)::row2data_idx_map, &v131, 1uLL);
    __cxa_atexit((void (*)(void *))std::vector<unsigned long>::~vector[abi:ne180100], turi::ml_data_row_reference::from_row(std::shared_ptr<turi::ml_metadata> const&,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> const&,turi::ml_missing_value_action)::row2data_idx_map, &dword_217E69000);
    v108 = a4;
  }
  turi::ml_data_internal::fill_row_buffer_from_column_buffer((uint64_t)turi::ml_data_row_reference::from_row(std::shared_ptr<turi::ml_metadata> const&,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> const&,turi::ml_missing_value_action)::row2data_idx_map, (char **)v125 + 12, (uint64_t)(v125 + 2), &v123, 0, 0, 1, v122);
  *(_QWORD *)v108 = 0;
  *(_QWORD *)(v108 + 8) = 0;
  *(_QWORD *)(v108 + 16) = -1;
  *(_QWORD *)(v108 + 24) = -1;
  *(_WORD *)(v108 + 32) = 0;
  std::shared_ptr<turi::neural_net::mps_command_queue>::operator=[abi:ne180100]((_QWORD *)v108, (uint64_t *)&v125);
  *(_QWORD *)(v108 + 16) = 0;
  *(_QWORD *)(v108 + 24) = 0;
  *(_BYTE *)(v108 + 32) = *(_QWORD *)(*a1 + 72) != (uint64_t)(*(_QWORD *)(*a1 + 8) - *(_QWORD *)*a1) >> 4;
  *(_BYTE *)(v108 + 33) = v107;
  v131 = (uint64_t *)&v123;
  std::vector<std::vector<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v131);
  v119 = v126;
  if (v126)
  {
    v120 = (unint64_t *)&v126->__shared_owners_;
    do
      v121 = __ldaxr(v120);
    while (__stlxr(v121 - 1, v120));
    if (!v121)
    {
      ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
      std::__shared_weak_count::__release_weak(v119);
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_218414E5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,char a23,char *a24,uint64_t a25)
{
  a24 = &a11;
  std::vector<std::vector<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  if (__p)
  {
    a17 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t std::vector<unsigned long>::~vector[abi:ne180100](uint64_t a1)
{
  void *v2;

  v2 = *(void **)a1;
  if (v2)
  {
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_218415268(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

__n128 OUTLINED_FUNCTION_0_11(__n128 *a1)
{
  __n128 result;

  result = *a1;
  a1->n128_u64[1] = 0;
  a1[1].n128_u64[0] = 0;
  a1->n128_u64[0] = 0;
  return result;
}

void __cxx_global_var_init_4_19()
{
  uint64_t v0;
  const char *v1;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, v1, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_row_reference_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

double CoreML::Specification::protobuf_Model_2eproto::TableStruct::InitDefaultsImpl(CoreML::Specification::protobuf_Model_2eproto::TableStruct *this, uint64_t a2, uint64_t a3, const char *a4)
{
  _tc_google::protobuf::internal *v4;
  CoreML::Specification::CoreMLModels::protobuf_VisionFeaturePrint_2eproto *v5;
  CoreML::Specification::CoreMLModels::protobuf_AudioFeaturePrint_2eproto *v6;
  CoreML::Specification::CoreMLModels::protobuf_TextClassifier_2eproto *v7;
  CoreML::Specification::CoreMLModels::protobuf_WordTagger_2eproto *v8;
  CoreML::Specification::CoreMLModels::protobuf_Gazetteer_2eproto *v9;
  CoreML::Specification::CoreMLModels::protobuf_WordEmbedding_2eproto *v10;
  CoreML::Specification::protobuf_ArrayFeatureExtractor_2eproto *v11;
  CoreML::Specification::protobuf_BayesianProbitRegressor_2eproto *v12;
  CoreML::Specification::protobuf_CategoricalMapping_2eproto *v13;
  CoreML::Specification::protobuf_CustomModel_2eproto *v14;
  CoreML::Specification::protobuf_DictVectorizer_2eproto *v15;
  CoreML::Specification::protobuf_FeatureTypes_2eproto *v16;
  CoreML::Specification::protobuf_FeatureVectorizer_2eproto *v17;
  CoreML::Specification::protobuf_GLMRegressor_2eproto *v18;
  CoreML::Specification::protobuf_GLMClassifier_2eproto *v19;
  CoreML::Specification::protobuf_NearestNeighbors_2eproto *v20;
  CoreML::Specification::protobuf_Identity_2eproto *v21;
  CoreML::Specification::protobuf_Imputer_2eproto *v22;
  CoreML::Specification::V5::protobuf_MIL_2eproto *v23;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto *v24;
  CoreML::Specification::protobuf_Normalizer_2eproto *v25;
  CoreML::Specification::protobuf_OneHotEncoder_2eproto *v26;
  CoreML::Specification::protobuf_Scaler_2eproto *v27;
  CoreML::Specification::protobuf_NonMaximumSuppression_2eproto *v28;
  CoreML::Specification::protobuf_SVM_2eproto *v29;
  CoreML::Specification::protobuf_TreeEnsemble_2eproto *v30;
  CoreML::Specification::protobuf_Parameters_2eproto *v31;
  CoreML::Specification::protobuf_ItemSimilarityRecommender_2eproto *v32;
  CoreML::Specification::CoreMLModels::protobuf_SoundAnalysisPreprocessing_2eproto *v33;
  CoreML::Specification::protobuf_LinkedModel_2eproto *v34;
  CoreML::Specification::Metadata *v35;
  double result;

  _tc_google::protobuf::internal::VerifyVersion((_tc_google::protobuf::internal *)0x2DD278, (_tc_google::protobuf::internal *)0x2DD278, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/external/coremltools_wrap/coremltools/mlmodel/build/format/Model.pb.cc", a4);
  _tc_google::protobuf::internal::InitProtobufDefaults(v4);
  CoreML::Specification::CoreMLModels::protobuf_VisionFeaturePrint_2eproto::InitDefaults(v5);
  CoreML::Specification::CoreMLModels::protobuf_AudioFeaturePrint_2eproto::InitDefaults(v6);
  CoreML::Specification::CoreMLModels::protobuf_TextClassifier_2eproto::InitDefaults(v7);
  CoreML::Specification::CoreMLModels::protobuf_WordTagger_2eproto::InitDefaults(v8);
  CoreML::Specification::CoreMLModels::protobuf_Gazetteer_2eproto::InitDefaults(v9);
  CoreML::Specification::CoreMLModels::protobuf_WordEmbedding_2eproto::InitDefaults(v10);
  CoreML::Specification::protobuf_ArrayFeatureExtractor_2eproto::InitDefaults(v11);
  CoreML::Specification::protobuf_BayesianProbitRegressor_2eproto::InitDefaults(v12);
  CoreML::Specification::protobuf_CategoricalMapping_2eproto::InitDefaults(v13);
  CoreML::Specification::protobuf_CustomModel_2eproto::InitDefaults(v14);
  CoreML::Specification::protobuf_DictVectorizer_2eproto::InitDefaults(v15);
  CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(v16);
  CoreML::Specification::protobuf_FeatureVectorizer_2eproto::InitDefaults(v17);
  CoreML::Specification::protobuf_GLMRegressor_2eproto::InitDefaults(v18);
  CoreML::Specification::protobuf_GLMClassifier_2eproto::InitDefaults(v19);
  CoreML::Specification::protobuf_NearestNeighbors_2eproto::InitDefaults(v20);
  CoreML::Specification::protobuf_Identity_2eproto::InitDefaults(v21);
  CoreML::Specification::protobuf_Imputer_2eproto::InitDefaults(v22);
  CoreML::Specification::V5::protobuf_MIL_2eproto::InitDefaults(v23);
  CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v24);
  CoreML::Specification::protobuf_Normalizer_2eproto::InitDefaults(v25);
  CoreML::Specification::protobuf_OneHotEncoder_2eproto::InitDefaults(v26);
  CoreML::Specification::protobuf_Scaler_2eproto::InitDefaults(v27);
  CoreML::Specification::protobuf_NonMaximumSuppression_2eproto::InitDefaults(v28);
  CoreML::Specification::protobuf_SVM_2eproto::InitDefaults(v29);
  CoreML::Specification::protobuf_TreeEnsemble_2eproto::InitDefaults(v30);
  CoreML::Specification::protobuf_Parameters_2eproto::InitDefaults(v31);
  CoreML::Specification::protobuf_ItemSimilarityRecommender_2eproto::InitDefaults(v32);
  CoreML::Specification::CoreMLModels::protobuf_SoundAnalysisPreprocessing_2eproto::InitDefaults(v33);
  CoreML::Specification::protobuf_LinkedModel_2eproto::InitDefaults(v34);
  CoreML::Specification::_Pipeline_default_instance_ = (uint64_t)&off_24D93FCC8;
  unk_254FFA938 = 0u;
  unk_254FFA948 = 0u;
  unk_254FFA958 = 0u;
  unk_254FFA964 = 0u;
  byte_254FFA978 = 1;
  qword_254FFA988 = 0;
  qword_254FFA990 = 0;
  CoreML::Specification::_PipelineClassifier_default_instance_ = (uint64_t)&off_24D93FD60;
  dword_254FFA998 = 0;
  byte_254FFA9A0 = 1;
  qword_254FFA9B0 = 0;
  qword_254FFA9B8 = 0;
  CoreML::Specification::_PipelineRegressor_default_instance_ = (uint64_t)&off_24D93FDF8;
  dword_254FFA9C0 = 0;
  byte_254FFA9C8 = 1;
  CoreML::Specification::_FeatureDescription_default_instance_ = (uint64_t)&off_24D93FE90;
  *(_QWORD *)algn_254FFA9D8 = 0;
  qword_254FFA9E0 = (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string;
  unk_254FFA9E8 = &_tc_google::protobuf::internal::fixed_address_empty_string;
  qword_254FFA9F0 = 0;
  dword_254FFA9F8 = 0;
  byte_254FFAA00 = 1;
  qword_254FFAA20 = (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string;
  unk_254FFAA28 = 0;
  qword_254FFAA18 = (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string;
  dword_254FFAA30 = 0;
  CoreML::Specification::_Metadata_UserDefinedEntry_default_instance_ = (uint64_t)&unk_24D940248;
  qword_254FFAA10 = 0;
  byte_254FFAA38 = 1;
  v35 = CoreML::Specification::Metadata::Metadata((CoreML::Specification::Metadata *)&CoreML::Specification::_Metadata_default_instance_);
  *((_BYTE *)v35 + 96) = 1;
  CoreML::Specification::_ModelDescription_default_instance_ = (uint64_t)&off_24D93FFC0;
  result = 0.0;
  *(_OWORD *)algn_254FFAAB0 = 0u;
  *(_OWORD *)&algn_254FFAAB0[16] = 0u;
  *(_OWORD *)&algn_254FFAAB0[32] = 0u;
  *(_OWORD *)&algn_254FFAAB0[48] = 0u;
  *(_OWORD *)&algn_254FFAAB0[64] = 0u;
  qword_254FFAB00 = (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string;
  unk_254FFAB08 = &_tc_google::protobuf::internal::fixed_address_empty_string;
  dword_254FFAB18 = 0;
  byte_254FFAB20 = 1;
  CoreML::Specification::_SerializedModel_default_instance_ = (uint64_t)&off_24D940058;
  unk_254FFAB30 = 0;
  qword_254FFAB38 = (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string;
  unk_254FFAB40 = &_tc_google::protobuf::internal::fixed_address_empty_string;
  dword_254FFAB48 = 0;
  byte_254FFAB50 = 1;
  qword_254FFAB80 = 0;
  qword_254FFAB60 = 0;
  *(uint64_t *)((char *)&qword_254FFAB68 + 5) = 0;
  CoreML::Specification::_Model_default_instance_ = (uint64_t)&off_24D9400F0;
  byte_254FFAB88 = 1;
  qword_254FFA990 = (uint64_t)&CoreML::Specification::_Pipeline_default_instance_;
  qword_254FFA9B8 = (uint64_t)&CoreML::Specification::_Pipeline_default_instance_;
  qword_254FFA9F0 = (uint64_t)&CoreML::Specification::_FeatureType_default_instance_;
  qword_254FFAA10 = (uint64_t)&CoreML::Specification::_Metadata_UserDefinedEntry_default_instance_;
  qword_254FFAB10 = (uint64_t)v35;
  qword_254FFAB68 = (uint64_t)&CoreML::Specification::_ModelDescription_default_instance_;
  return result;
}

void CoreML::Specification::protobuf_Model_2eproto::InitDefaults(CoreML::Specification::protobuf_Model_2eproto *this)
{
  unint64_t v1;
  _QWORD v2[2];
  char v3;

  v1 = atomic_load(&CoreML::Specification::protobuf_Model_2eproto::InitDefaults(void)::once);
  if (v1 != 2)
  {
    v2[0] = &off_24D93BCB0;
    v2[1] = CoreML::Specification::protobuf_Model_2eproto::TableStruct::InitDefaultsImpl;
    v3 = 0;
    _tc_google::protobuf::GoogleOnceInitImpl(&CoreML::Specification::protobuf_Model_2eproto::InitDefaults(void)::once, (uint64_t)v2);
    _tc_google::protobuf::internal::FunctionClosure0::~FunctionClosure0((_tc_google::protobuf::internal::FunctionClosure0 *)v2);
  }
}

void sub_2184156A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  _tc_google::protobuf::internal::FunctionClosure0::~FunctionClosure0((_tc_google::protobuf::internal::FunctionClosure0 *)va);
  _Unwind_Resume(a1);
}

CoreML::Specification::Pipeline *CoreML::Specification::Pipeline::Pipeline(CoreML::Specification::Pipeline *this)
{
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_QWORD *)this = &off_24D93FCC8;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_QWORD *)this + 7) = 0;
  if (this != (CoreML::Specification::Pipeline *)&CoreML::Specification::_Pipeline_default_instance_)
    CoreML::Specification::protobuf_Model_2eproto::InitDefaults(this);
  *((_DWORD *)this + 16) = 0;
  return this;
}

void sub_218415728(_Unwind_Exception *a1)
{
  uint64_t *v1;
  _QWORD *v2;
  _QWORD *v3;

  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Destroy<_tc_google::protobuf::RepeatedPtrField<std::string>::TypeHandler>(v2);
  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Destroy<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMRegressor_DoubleArray>::TypeHandler>(v3);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::Pipeline::~Pipeline(CoreML::Specification::Pipeline *this)
{
  *(_QWORD *)this = &off_24D93FCC8;
  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Destroy<_tc_google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((_QWORD *)this + 5);
  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Destroy<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMRegressor_DoubleArray>::TypeHandler>((_QWORD *)this + 2);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  CoreML::Specification::Pipeline::~Pipeline(this);
  JUMPOUT(0x219A19A08);
}

uint64_t *CoreML::Specification::Pipeline::default_instance(CoreML::Specification::Pipeline *this)
{
  CoreML::Specification::protobuf_Model_2eproto::InitDefaults(this);
  return &CoreML::Specification::_Pipeline_default_instance_;
}

CoreML::Specification::Pipeline *CoreML::Specification::Pipeline::New(CoreML::Specification::Pipeline *this, _tc_google::protobuf::Arena *a2)
{
  CoreML::Specification::Pipeline *v3;

  v3 = (CoreML::Specification::Pipeline *)operator new();
  CoreML::Specification::Pipeline::Pipeline(v3);
  if (a2)
    _tc_google::protobuf::Arena::Own<CoreML::Specification::Pipeline>(a2, v3);
  return v3;
}

void sub_218415834(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C40759568C3);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::Pipeline>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::Pipeline>);
  return result;
}

uint64_t CoreML::Specification::Pipeline::Clear(CoreML::Specification::Pipeline *this)
{
  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Clear<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::Model>::TypeHandler>((uint64_t)this + 16);
  return _tc_google::protobuf::internal::RepeatedPtrFieldBase::Clear<_tc_google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 40);
}

uint64_t CoreML::Specification::Pipeline::MergePartialFromCodedStream(CoreML::Specification::Pipeline *this, char **a2, unsigned int a3)
{
  unsigned int *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int TagFallback;
  CoreML::Specification::Model *v12;
  char *v13;
  int VarintSizeAsIntFallback;
  int *v15;
  uint64_t v16;
  int v17;
  std::string *Aligned;
  unint64_t v20;
  unsigned int v21;
  int v22;
  uint64_t result;
  _tc_google::protobuf::Arena *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 *v28;
  const char *v29;

  v5 = (unsigned int *)((char *)this + 40);
  v6 = (char *)this + 16;
  while (1)
  {
    while (1)
    {
      while (1)
      {
        v7 = *a2;
        if (*a2 >= a2[1])
        {
          v8 = 0;
LABEL_7:
          TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v8);
          v9 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
          if ((v9 & 0x100000000) == 0)
            goto LABEL_21;
          goto LABEL_8;
        }
        v8 = *v7;
        if (*v7 < 1)
          goto LABEL_7;
        *a2 = v7 + 1;
        v9 = v8 | 0x100000000;
        if ((v9 & 0x100000000) == 0)
          goto LABEL_21;
LABEL_8:
        if (v9 >> 3 != 2)
          break;
        if (v9 != 18)
          goto LABEL_21;
        v15 = (int *)*((_QWORD *)this + 7);
        if (!v15)
        {
          v17 = *((_DWORD *)this + 13);
          goto LABEL_34;
        }
        v16 = *((int *)this + 12);
        v17 = *v15;
        if ((int)v16 >= *v15)
        {
          if (v17 == *((_DWORD *)this + 13))
          {
LABEL_34:
            _tc_google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v5, v17 + 1);
            v15 = (int *)*((_QWORD *)this + 7);
            v17 = *v15;
          }
          *v15 = v17 + 1;
          v24 = *(_tc_google::protobuf::Arena **)v5;
          if (*(_QWORD *)v5)
          {
            Aligned->__r_.__value_.__l.__size_ = 0;
            Aligned->__r_.__value_.__r.__words[2] = 0;
            Aligned->__r_.__value_.__r.__words[0] = 0;
            _tc_google::protobuf::Arena::AddListNode(v24, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<std::string>);
          }
          else
          {
            Aligned = (std::string *)operator new();
            Aligned->__r_.__value_.__l.__size_ = 0;
            Aligned->__r_.__value_.__r.__words[2] = 0;
            Aligned->__r_.__value_.__r.__words[0] = 0;
          }
          v25 = *((_QWORD *)this + 7);
          v26 = *((int *)this + 12);
          *((_DWORD *)this + 12) = v26 + 1;
          *(_QWORD *)(v25 + 8 * v26 + 8) = Aligned;
          goto LABEL_39;
        }
        *((_DWORD *)this + 12) = v16 + 1;
        Aligned = *(std::string **)&v15[2 * v16 + 2];
LABEL_39:
        result = _tc_google::protobuf::internal::WireFormatLite::ReadBytes(a2, Aligned);
        if (!(_DWORD)result)
          return result;
        v27 = *((_QWORD *)this + 7);
        v28 = *(unsigned __int8 **)(v27 + 8 * *((int *)this + 12));
        if ((char)v28[23] < 0)
        {
          v28 = *(unsigned __int8 **)v28;
          v29 = *(const char **)(*(_QWORD *)(v27 + 8 * *((int *)this + 12)) + 8);
        }
        else
        {
          v29 = (const char *)v28[23];
        }
        if (!_tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String((_tc_google::protobuf::internal *)v28, v29, 0, (uint64_t)"CoreML.Specification.Pipeline.names"))return 0;
      }
      if (v9 >> 3 != 1 || v9 != 10)
        break;
      v12 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::Model>::TypeHandler>((uint64_t)v6);
      v13 = *a2;
      if (*a2 >= a2[1] || *v13 < 0)
      {
        VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
        if (VarintSizeAsIntFallback < 0)
          return 0;
      }
      else
      {
        VarintSizeAsIntFallback = *v13;
        *a2 = v13 + 1;
      }
      v20 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, VarintSizeAsIntFallback);
      if ((v20 & 0x8000000000000000) == 0)
      {
        v22 = v20;
        result = CoreML::Specification::Model::MergePartialFromCodedStream(v12, (_tc_google::protobuf::io::CodedInputStream *)a2, v21);
        if (!(_DWORD)result)
          return result;
        if (_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v22))
        {
          continue;
        }
      }
      return 0;
    }
LABEL_21:
    if (!(_DWORD)v9 || (v9 & 7) == 4)
      return 1;
    if ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v9, a3) & 1) == 0)return 0;
  }
}

uint64_t CoreML::Specification::Pipeline::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  int i;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  const char *v12;

  v5 = this;
  v6 = *(_DWORD *)(this + 24);
  if (v6)
  {
    for (i = 0; i != v6; ++i)
      this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(*(_QWORD *)(v5 + 32) + 8 * i + 8), a2, a4);
  }
  v8 = *(unsigned int *)(v5 + 48);
  if ((int)v8 >= 1)
  {
    v9 = -v8;
    v10 = 1;
    do
    {
      v11 = *(unsigned __int8 **)(*(_QWORD *)(v5 + 56) + 8 * v10);
      if ((char)v11[23] < 0)
      {
        v11 = *(unsigned __int8 **)v11;
        v12 = *(const char **)(*(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v10) + 8);
      }
      else
      {
        v12 = (const char *)v11[23];
      }
      _tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String((_tc_google::protobuf::internal *)v11, v12, 1, (uint64_t)"CoreML.Specification.Pipeline.names");
      this = _tc_google::protobuf::internal::WireFormatLite::WriteString(2, *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v10++), a2);
    }
    while (v9 + v10 != 1);
  }
  return this;
}

uint64_t CoreML::Specification::Pipeline::ByteSizeLong(CoreML::Specification::Pipeline *this)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *((_DWORD *)this + 6);
  if (v2)
  {
    v3 = 0;
    v4 = *((unsigned int *)this + 6);
    do
    {
      v5 = CoreML::Specification::Model::ByteSizeLong(*(CoreML::Specification::Model **)(*((_QWORD *)this + 4)
                                                                                       + 8 * v3
                                                                                       + 8));
      v4 += v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6);
      ++v3;
    }
    while (v2 != v3);
  }
  else
  {
    v4 = 0;
  }
  v6 = *((unsigned int *)this + 12);
  result = v4 + v6;
  if ((int)v6 >= 1)
  {
    v8 = (uint64_t *)(*((_QWORD *)this + 7) + 8);
    do
    {
      v9 = *v8++;
      v10 = *(unsigned __int8 *)(v9 + 23);
      v11 = *(_QWORD *)(v9 + 8);
      if ((v10 & 0x80u) == 0)
        v11 = v10;
      result += v11 + ((9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6);
      --v6;
    }
    while (v6);
  }
  *((_DWORD *)this + 16) = result;
  return result;
}

uint64_t CoreML::Specification::Pipeline::MergeFrom(uint64_t this, const CoreML::Specification::Pipeline *a2)
{
  uint64_t v3;
  uint64_t v4;
  signed int v5;
  CoreML::Specification::Model **v6;
  unsigned int *v7;
  int v8;
  int *v9;
  int v10;
  const std::string **v11;
  unsigned int *v12;
  int v13;
  int *v14;

  v3 = this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = (uint64_t)_tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)(this + 8), v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_DWORD *)a2 + 6);
  if (v5)
  {
    v6 = (CoreML::Specification::Model **)(*((_QWORD *)a2 + 4) + 8);
    v7 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((_tc_google::protobuf::internal::RepeatedPtrFieldBase *)(v3 + 16), *((_DWORD *)a2 + 6));
    this = _tc_google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::Model>::TypeHandler>(v3 + 16, (CoreML::Specification::Model **)v7, v6, v5, **(_DWORD **)(v3 + 32) - *(_DWORD *)(v3 + 24));
    v8 = *(_DWORD *)(v3 + 24) + v5;
    *(_DWORD *)(v3 + 24) = v8;
    v9 = *(int **)(v3 + 32);
    if (*v9 < v8)
      *v9 = v8;
  }
  v10 = *((_DWORD *)a2 + 12);
  if (v10)
  {
    v11 = (const std::string **)(*((_QWORD *)a2 + 7) + 8);
    v12 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((_tc_google::protobuf::internal::RepeatedPtrFieldBase *)(v3 + 40), v10);
    this = (uint64_t)_tc_google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<_tc_google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((std::string *)(v3 + 40), (std::string **)v12, v11, v10, **(_DWORD **)(v3 + 56) - *(_DWORD *)(v3 + 48));
    v13 = *(_DWORD *)(v3 + 48) + v10;
    *(_DWORD *)(v3 + 48) = v13;
    v14 = *(int **)(v3 + 56);
    if (*v14 < v13)
      *v14 = v13;
  }
  return this;
}

uint64_t CoreML::Specification::Pipeline::IsInitialized(CoreML::Specification::Pipeline *this)
{
  return 1;
}

_QWORD *CoreML::Specification::Pipeline::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.Pipeline");
}

CoreML::Specification::PipelineClassifier *CoreML::Specification::PipelineClassifier::PipelineClassifier(CoreML::Specification::PipelineClassifier *this)
{
  *(_QWORD *)this = &off_24D93FD60;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::PipelineClassifier *)&CoreML::Specification::_PipelineClassifier_default_instance_)
    CoreML::Specification::protobuf_Model_2eproto::InitDefaults(this);
  *((_QWORD *)this + 2) = 0;
  *((_DWORD *)this + 6) = 0;
  return this;
}

void sub_218415E38(_Unwind_Exception *a1)
{
  uint64_t *v1;

  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::PipelineClassifier::~PipelineClassifier(CoreML::Specification::PipelineClassifier *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24D93FD60;
  if (this != (CoreML::Specification::PipelineClassifier *)&CoreML::Specification::_PipelineClassifier_default_instance_)
  {
    v2 = *((_QWORD *)this + 2);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  CoreML::Specification::PipelineClassifier::~PipelineClassifier(this);
  JUMPOUT(0x219A19A08);
}

uint64_t *CoreML::Specification::PipelineClassifier::default_instance(CoreML::Specification::PipelineClassifier *this)
{
  CoreML::Specification::protobuf_Model_2eproto::InitDefaults(this);
  return &CoreML::Specification::_PipelineClassifier_default_instance_;
}

CoreML::Specification::PipelineClassifier *CoreML::Specification::PipelineClassifier::New(CoreML::Specification::PipelineClassifier *this, _tc_google::protobuf::Arena *a2)
{
  CoreML::Specification::PipelineClassifier *v3;

  v3 = (CoreML::Specification::PipelineClassifier *)operator new();
  CoreML::Specification::PipelineClassifier::PipelineClassifier(v3);
  if (a2)
    _tc_google::protobuf::Arena::Own<CoreML::Specification::PipelineClassifier>(a2, v3);
  return v3;
}

void sub_218415F3C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C4084265165);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::PipelineClassifier>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::PipelineClassifier>);
  return result;
}

uint64_t CoreML::Specification::PipelineClassifier::Clear(CoreML::Specification::PipelineClassifier *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 2);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 2) = 0;
  return result;
}

uint64_t CoreML::Specification::PipelineClassifier::MergePartialFromCodedStream(CoreML::Specification::PipelineClassifier *this, char **a2, unsigned int a3)
{
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  CoreML::Specification::Pipeline *v11;
  char *v12;
  int VarintSizeAsIntFallback;
  unint64_t v14;
  int v15;
  uint64_t result;

  while (1)
  {
    while (1)
    {
      v5 = *a2;
      if (*a2 >= a2[1])
      {
        v6 = 0;
LABEL_6:
        TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v6);
        v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v7 & 0x100000000) == 0)
          break;
        goto LABEL_7;
      }
      v6 = *v5;
      if (*v5 < 1)
        goto LABEL_6;
      *a2 = v5 + 1;
      v7 = v6 | 0x100000000;
      if ((v7 & 0x100000000) == 0)
        break;
LABEL_7:
      if (v7 != 10 || (v7 & 0xFFFFFFF8) != 8)
        break;
      v11 = (CoreML::Specification::Pipeline *)*((_QWORD *)this + 2);
      if (!v11)
      {
        v11 = (CoreML::Specification::Pipeline *)operator new();
        CoreML::Specification::Pipeline::Pipeline(v11);
        *((_QWORD *)this + 2) = v11;
      }
      v12 = *a2;
      if (*a2 >= a2[1] || *v12 < 0)
      {
        VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
        if (VarintSizeAsIntFallback < 0)
          return 0;
      }
      else
      {
        VarintSizeAsIntFallback = *v12;
        *a2 = v12 + 1;
      }
      v14 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, VarintSizeAsIntFallback);
      if ((v14 & 0x8000000000000000) == 0)
      {
        v15 = v14;
        result = CoreML::Specification::Pipeline::MergePartialFromCodedStream(v11, (_tc_google::protobuf::io::CodedInputStream *)a2);
        if (!(_DWORD)result)
          return result;
        if (_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v15))
        {
          continue;
        }
      }
      return 0;
    }
    if (!(_DWORD)v7 || (v7 & 7) == 4)
      return 1;
    if ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v7, a3) & 1) == 0)return 0;
  }
}

void sub_2184160F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C40759568C3);
  _Unwind_Resume(a1);
}

uint64_t *CoreML::Specification::PipelineClassifier::SerializeWithCachedSizes(uint64_t *this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;

  if (this != &CoreML::Specification::_PipelineClassifier_default_instance_)
  {
    v5 = this[2];
    if (v5)
      return (uint64_t *)_tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)1, v5, a2, a4);
  }
  return this;
}

CoreML::Specification::Pipeline *CoreML::Specification::PipelineClassifier::ByteSizeLong(CoreML::Specification::PipelineClassifier *this)
{
  CoreML::Specification::Pipeline *result;
  uint64_t v3;

  if (this == (CoreML::Specification::PipelineClassifier *)&CoreML::Specification::_PipelineClassifier_default_instance_)
  {
    result = 0;
  }
  else
  {
    result = (CoreML::Specification::Pipeline *)*((_QWORD *)this + 2);
    if (result)
    {
      v3 = CoreML::Specification::Pipeline::ByteSizeLong(result);
      result = (CoreML::Specification::Pipeline *)(v3 + ((9 * (__clz(v3 | 1) ^ 0x1F) + 73) >> 6) + 1);
    }
  }
  *((_DWORD *)this + 6) = (_DWORD)result;
  return result;
}

std::string *CoreML::Specification::PipelineClassifier::MergeFrom(std::string *this, const CoreML::Specification::PipelineClassifier *a2)
{
  std::string *v3;
  uint64_t v4;
  const CoreML::Specification::Pipeline *v5;
  CoreML::Specification::Pipeline *v7;
  const CoreML::Specification::Pipeline *v8;

  v3 = this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = (const CoreML::Specification::Pipeline *)*((_QWORD *)a2 + 2);
  if (a2 != (const CoreML::Specification::PipelineClassifier *)&CoreML::Specification::_PipelineClassifier_default_instance_
    && v5 != 0)
  {
    v7 = (CoreML::Specification::Pipeline *)v3->__r_.__value_.__r.__words[2];
    if (!v7)
    {
      v7 = (CoreML::Specification::Pipeline *)operator new();
      CoreML::Specification::Pipeline::Pipeline(v7);
      v3->__r_.__value_.__r.__words[2] = (std::string::size_type)v7;
      v5 = (const CoreML::Specification::Pipeline *)*((_QWORD *)a2 + 2);
    }
    if (v5)
      v8 = v5;
    else
      v8 = (const CoreML::Specification::Pipeline *)&CoreML::Specification::_Pipeline_default_instance_;
    return (std::string *)CoreML::Specification::Pipeline::MergeFrom((uint64_t)v7, v8);
  }
  return this;
}

void sub_218416250(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C40759568C3);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::PipelineClassifier::IsInitialized(CoreML::Specification::PipelineClassifier *this)
{
  return 1;
}

_QWORD *CoreML::Specification::PipelineClassifier::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.PipelineClassifier");
}

CoreML::Specification::PipelineRegressor *CoreML::Specification::PipelineRegressor::PipelineRegressor(CoreML::Specification::PipelineRegressor *this)
{
  *(_QWORD *)this = &off_24D93FDF8;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::PipelineRegressor *)&CoreML::Specification::_PipelineRegressor_default_instance_)
    CoreML::Specification::protobuf_Model_2eproto::InitDefaults(this);
  *((_QWORD *)this + 2) = 0;
  *((_DWORD *)this + 6) = 0;
  return this;
}

void sub_2184162DC(_Unwind_Exception *a1)
{
  uint64_t *v1;

  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::PipelineRegressor::~PipelineRegressor(CoreML::Specification::PipelineRegressor *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24D93FDF8;
  if (this != (CoreML::Specification::PipelineRegressor *)&CoreML::Specification::_PipelineRegressor_default_instance_)
  {
    v2 = *((_QWORD *)this + 2);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  CoreML::Specification::PipelineRegressor::~PipelineRegressor(this);
  JUMPOUT(0x219A19A08);
}

uint64_t *CoreML::Specification::PipelineRegressor::default_instance(CoreML::Specification::PipelineRegressor *this)
{
  CoreML::Specification::protobuf_Model_2eproto::InitDefaults(this);
  return &CoreML::Specification::_PipelineRegressor_default_instance_;
}

CoreML::Specification::PipelineRegressor *CoreML::Specification::PipelineRegressor::New(CoreML::Specification::PipelineRegressor *this, _tc_google::protobuf::Arena *a2)
{
  CoreML::Specification::PipelineRegressor *v3;

  v3 = (CoreML::Specification::PipelineRegressor *)operator new();
  CoreML::Specification::PipelineRegressor::PipelineRegressor(v3);
  if (a2)
    _tc_google::protobuf::Arena::Own<CoreML::Specification::PipelineRegressor>(a2, v3);
  return v3;
}

void sub_2184163E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C4084265165);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::PipelineRegressor>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::PipelineRegressor>);
  return result;
}

uint64_t CoreML::Specification::PipelineRegressor::Clear(CoreML::Specification::PipelineRegressor *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 2);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 2) = 0;
  return result;
}

uint64_t CoreML::Specification::PipelineRegressor::MergePartialFromCodedStream(CoreML::Specification::PipelineRegressor *this, char **a2, unsigned int a3)
{
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  CoreML::Specification::Pipeline *v11;
  char *v12;
  int VarintSizeAsIntFallback;
  unint64_t v14;
  int v15;
  uint64_t result;

  while (1)
  {
    while (1)
    {
      v5 = *a2;
      if (*a2 >= a2[1])
      {
        v6 = 0;
LABEL_6:
        TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v6);
        v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v7 & 0x100000000) == 0)
          break;
        goto LABEL_7;
      }
      v6 = *v5;
      if (*v5 < 1)
        goto LABEL_6;
      *a2 = v5 + 1;
      v7 = v6 | 0x100000000;
      if ((v7 & 0x100000000) == 0)
        break;
LABEL_7:
      if (v7 != 10 || (v7 & 0xFFFFFFF8) != 8)
        break;
      v11 = (CoreML::Specification::Pipeline *)*((_QWORD *)this + 2);
      if (!v11)
      {
        v11 = (CoreML::Specification::Pipeline *)operator new();
        CoreML::Specification::Pipeline::Pipeline(v11);
        *((_QWORD *)this + 2) = v11;
      }
      v12 = *a2;
      if (*a2 >= a2[1] || *v12 < 0)
      {
        VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
        if (VarintSizeAsIntFallback < 0)
          return 0;
      }
      else
      {
        VarintSizeAsIntFallback = *v12;
        *a2 = v12 + 1;
      }
      v14 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, VarintSizeAsIntFallback);
      if ((v14 & 0x8000000000000000) == 0)
      {
        v15 = v14;
        result = CoreML::Specification::Pipeline::MergePartialFromCodedStream(v11, (_tc_google::protobuf::io::CodedInputStream *)a2);
        if (!(_DWORD)result)
          return result;
        if (_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v15))
        {
          continue;
        }
      }
      return 0;
    }
    if (!(_DWORD)v7 || (v7 & 7) == 4)
      return 1;
    if ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v7, a3) & 1) == 0)return 0;
  }
}

void sub_218416598(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C40759568C3);
  _Unwind_Resume(a1);
}

uint64_t *CoreML::Specification::PipelineRegressor::SerializeWithCachedSizes(uint64_t *this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;

  if (this != &CoreML::Specification::_PipelineRegressor_default_instance_)
  {
    v5 = this[2];
    if (v5)
      return (uint64_t *)_tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)1, v5, a2, a4);
  }
  return this;
}

CoreML::Specification::Pipeline *CoreML::Specification::PipelineRegressor::ByteSizeLong(CoreML::Specification::PipelineRegressor *this)
{
  CoreML::Specification::Pipeline *result;
  uint64_t v3;

  if (this == (CoreML::Specification::PipelineRegressor *)&CoreML::Specification::_PipelineRegressor_default_instance_)
  {
    result = 0;
  }
  else
  {
    result = (CoreML::Specification::Pipeline *)*((_QWORD *)this + 2);
    if (result)
    {
      v3 = CoreML::Specification::Pipeline::ByteSizeLong(result);
      result = (CoreML::Specification::Pipeline *)(v3 + ((9 * (__clz(v3 | 1) ^ 0x1F) + 73) >> 6) + 1);
    }
  }
  *((_DWORD *)this + 6) = (_DWORD)result;
  return result;
}

std::string *CoreML::Specification::PipelineRegressor::MergeFrom(std::string *this, const CoreML::Specification::PipelineRegressor *a2)
{
  std::string *v3;
  uint64_t v4;
  const CoreML::Specification::Pipeline *v5;
  CoreML::Specification::Pipeline *v7;
  const CoreML::Specification::Pipeline *v8;

  v3 = this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = (const CoreML::Specification::Pipeline *)*((_QWORD *)a2 + 2);
  if (a2 != (const CoreML::Specification::PipelineRegressor *)&CoreML::Specification::_PipelineRegressor_default_instance_
    && v5 != 0)
  {
    v7 = (CoreML::Specification::Pipeline *)v3->__r_.__value_.__r.__words[2];
    if (!v7)
    {
      v7 = (CoreML::Specification::Pipeline *)operator new();
      CoreML::Specification::Pipeline::Pipeline(v7);
      v3->__r_.__value_.__r.__words[2] = (std::string::size_type)v7;
      v5 = (const CoreML::Specification::Pipeline *)*((_QWORD *)a2 + 2);
    }
    if (v5)
      v8 = v5;
    else
      v8 = (const CoreML::Specification::Pipeline *)&CoreML::Specification::_Pipeline_default_instance_;
    return (std::string *)CoreML::Specification::Pipeline::MergeFrom((uint64_t)v7, v8);
  }
  return this;
}

void sub_2184166F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C40759568C3);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::PipelineRegressor::IsInitialized(CoreML::Specification::PipelineRegressor *this)
{
  return 1;
}

_QWORD *CoreML::Specification::PipelineRegressor::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.PipelineRegressor");
}

CoreML::Specification::FeatureDescription *CoreML::Specification::FeatureDescription::FeatureDescription(CoreML::Specification::FeatureDescription *this)
{
  *(_QWORD *)this = &off_24D93FE90;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::FeatureDescription *)&CoreML::Specification::_FeatureDescription_default_instance_)
    CoreML::Specification::protobuf_Model_2eproto::InitDefaults(this);
  *((_QWORD *)this + 2) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 3) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 4) = 0;
  *((_DWORD *)this + 10) = 0;
  return this;
}

void sub_21841678C(_Unwind_Exception *a1)
{
  uint64_t *v1;

  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

CoreML::Specification::FeatureDescription *CoreML::Specification::FeatureDescription::FeatureDescription(CoreML::Specification::FeatureDescription *this, const CoreML::Specification::FeatureDescription *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  CoreML::Specification::FeatureType *v10;

  *(_QWORD *)this = &off_24D93FE90;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 10) = 0;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  *((_QWORD *)this + 2) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  v5 = *((_QWORD *)a2 + 2);
  if (*(char *)(v5 + 23) < 0)
    v6 = *(_QWORD *)(v5 + 8);
  else
    v6 = *(unsigned __int8 *)(v5 + 23);
  if ((uint64_t *)v5 != &_tc_google::protobuf::internal::fixed_address_empty_string && v6 != 0)
    _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v5);
  *((_QWORD *)this + 3) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  v8 = *((_QWORD *)a2 + 3);
  if (*(char *)(v8 + 23) < 0)
    v9 = *(_QWORD *)(v8 + 8);
  else
    v9 = *(unsigned __int8 *)(v8 + 23);
  if ((uint64_t *)v8 != &_tc_google::protobuf::internal::fixed_address_empty_string && v9)
    _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 3, v8);
  v10 = 0;
  if (a2 != (const CoreML::Specification::FeatureDescription *)&CoreML::Specification::_FeatureDescription_default_instance_
    && *((_QWORD *)a2 + 4))
  {
    v10 = (CoreML::Specification::FeatureType *)operator new();
    CoreML::Specification::FeatureType::FeatureType(v10, *((const CoreML::Specification::FeatureType **)a2 + 4));
  }
  *((_QWORD *)this + 4) = v10;
  return this;
}

void sub_2184168A8(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;

  MEMORY[0x219A19A08](v2, 0x10A1C40B6FDD44FLL);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::FeatureDescription::~FeatureDescription(CoreML::Specification::FeatureDescription *this)
{
  *(_QWORD *)this = &off_24D93FE90;
  CoreML::Specification::FeatureDescription::SharedDtor((uint64_t *)this);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  CoreML::Specification::FeatureDescription::~FeatureDescription(this);
  JUMPOUT(0x219A19A08);
}

uint64_t *CoreML::Specification::FeatureDescription::SharedDtor(uint64_t *this)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;

  v1 = this;
  v2 = this[2];
  if ((uint64_t *)v2 != &_tc_google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    this = (uint64_t *)MEMORY[0x219A19A08](v2, 0x1012C40EC159624);
  }
  v4 = v1[3];
  if ((uint64_t *)v4 != &_tc_google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0)
      operator delete(*(void **)v4);
    this = (uint64_t *)MEMORY[0x219A19A08](v4, 0x1012C40EC159624);
  }
  if (v1 != &CoreML::Specification::_FeatureDescription_default_instance_)
  {
    this = (uint64_t *)v1[4];
    if (this)
      return (uint64_t *)(*(uint64_t (**)(uint64_t *))(*this + 8))(this);
  }
  return this;
}

CoreML::Specification::FeatureDescription *CoreML::Specification::FeatureDescription::New(CoreML::Specification::FeatureDescription *this, _tc_google::protobuf::Arena *a2)
{
  CoreML::Specification::FeatureDescription *v3;

  v3 = (CoreML::Specification::FeatureDescription *)operator new();
  CoreML::Specification::FeatureDescription::FeatureDescription(v3);
  if (a2)
    _tc_google::protobuf::Arena::Own<CoreML::Specification::FeatureDescription>(a2, v3);
  return v3;
}

void sub_218416A60(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C400A278675);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::FeatureDescription::Clear(CoreML::Specification::FeatureDescription *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = *((_QWORD *)this + 2);
  if ((uint64_t *)v2 != &_tc_google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(_BYTE **)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 23) = 0;
    }
  }
  v3 = *((_QWORD *)this + 3);
  if ((uint64_t *)v3 != &_tc_google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v3 + 23) < 0)
    {
      **(_BYTE **)v3 = 0;
      *(_QWORD *)(v3 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v3 = 0;
      *(_BYTE *)(v3 + 23) = 0;
    }
  }
  result = *((_QWORD *)this + 4);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 4) = 0;
  return result;
}

uint64_t CoreML::Specification::FeatureDescription::MergePartialFromCodedStream(CoreML::Specification::FeatureDescription *this, char **a2, unsigned int a3)
{
  std::string **v5;
  std::string **v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int TagFallback;
  unsigned int v11;
  std::string *v13;
  uint64_t result;
  std::string *v15;
  const char *size;
  CoreML::Specification::FeatureType *v17;
  char *v18;
  int VarintSizeAsIntFallback;
  std::string *v20;
  unint64_t v22;
  unsigned int v23;
  int v24;
  const char *v25;

  v5 = (std::string **)((char *)this + 24);
  v6 = (std::string **)((char *)this + 16);
  while (1)
  {
    while (1)
    {
      while (1)
      {
        v7 = *a2;
        if (*a2 >= a2[1])
        {
          v8 = 0;
LABEL_7:
          TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v8);
          v9 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
          if ((v9 & 0x100000000) == 0)
            goto LABEL_32;
          goto LABEL_8;
        }
        v8 = *v7;
        if (*v7 < 1)
          goto LABEL_7;
        *a2 = v7 + 1;
        v9 = v8 | 0x100000000;
        if ((v9 & 0x100000000) == 0)
          goto LABEL_32;
LABEL_8:
        v11 = v9 >> 3;
        if (v9 >> 3 != 3)
          break;
        if (v9 != 26)
          goto LABEL_32;
        v17 = (CoreML::Specification::FeatureType *)*((_QWORD *)this + 4);
        if (!v17)
        {
          v17 = (CoreML::Specification::FeatureType *)operator new();
          CoreML::Specification::FeatureType::FeatureType(v17);
          *((_QWORD *)this + 4) = v17;
        }
        v18 = *a2;
        if (*a2 >= a2[1] || *v18 < 0)
        {
          VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
          if (VarintSizeAsIntFallback < 0)
            return 0;
        }
        else
        {
          VarintSizeAsIntFallback = *v18;
          *a2 = v18 + 1;
        }
        v22 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, VarintSizeAsIntFallback);
        if ((v22 & 0x8000000000000000) == 0)
        {
          v24 = v22;
          result = CoreML::Specification::FeatureType::MergePartialFromCodedStream(v17, (_tc_google::protobuf::io::CodedInputStream *)a2, v23);
          if (!(_DWORD)result)
            return result;
          if (_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v24))
          {
            continue;
          }
        }
        return 0;
      }
      if (v11 != 2)
        break;
      if (v9 != 18)
        goto LABEL_32;
      v20 = *v5;
      if (*v5 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string)
      {
        _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v5, (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string);
        v20 = *v5;
      }
      result = _tc_google::protobuf::internal::WireFormatLite::ReadBytes(a2, v20);
      if (!(_DWORD)result)
        return result;
      v15 = *v5;
      if (SHIBYTE((*v5)->__r_.__value_.__r.__words[2]) < 0)
      {
        v15 = (std::string *)v15->__r_.__value_.__r.__words[0];
        size = (const char *)(*v5)->__r_.__value_.__l.__size_;
      }
      else
      {
        size = (const char *)HIBYTE((*v5)->__r_.__value_.__r.__words[2]);
      }
      v25 = "CoreML.Specification.FeatureDescription.shortDescription";
LABEL_47:
      if (!_tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String((_tc_google::protobuf::internal *)v15, size, 0, (uint64_t)v25))return 0;
    }
    if (v11 == 1 && v9 == 10)
    {
      v13 = *v6;
      if (*v6 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string)
      {
        _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v6, (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string);
        v13 = *v6;
      }
      result = _tc_google::protobuf::internal::WireFormatLite::ReadBytes(a2, v13);
      if (!(_DWORD)result)
        return result;
      v15 = *v6;
      if (SHIBYTE((*v6)->__r_.__value_.__r.__words[2]) < 0)
      {
        v15 = (std::string *)v15->__r_.__value_.__r.__words[0];
        size = (const char *)(*v6)->__r_.__value_.__l.__size_;
      }
      else
      {
        size = (const char *)HIBYTE((*v6)->__r_.__value_.__r.__words[2]);
      }
      v25 = "CoreML.Specification.FeatureDescription.name";
      goto LABEL_47;
    }
LABEL_32:
    if (!(_DWORD)v9 || (v9 & 7) == 4)
      return 1;
    if ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v9, a3) & 1) == 0)return 0;
  }
}

void sub_218416D64(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C40B6FDD44FLL);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::FeatureDescription::SerializeWithCachedSizes(CoreML::Specification::FeatureDescription *this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  _tc_google::protobuf::internal *v6;
  const char *v7;
  uint64_t result;
  const char *v9;
  uint64_t v10;

  v6 = (_tc_google::protobuf::internal *)*((_QWORD *)this + 2);
  if (*((char *)v6 + 23) < 0)
  {
    v7 = (const char *)*((_QWORD *)v6 + 1);
    if (!v7)
      goto LABEL_7;
    v6 = *(_tc_google::protobuf::internal **)v6;
    goto LABEL_6;
  }
  v7 = (const char *)*((unsigned __int8 *)v6 + 23);
  if (*((_BYTE *)v6 + 23))
  {
LABEL_6:
    _tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String(v6, v7, 1, (uint64_t)"CoreML.Specification.FeatureDescription.name");
    _tc_google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(1, *((_QWORD *)this + 2), a2);
  }
LABEL_7:
  result = *((_QWORD *)this + 3);
  if (*(char *)(result + 23) < 0)
  {
    v9 = *(const char **)(result + 8);
    if (!v9)
      goto LABEL_13;
    result = *(_QWORD *)result;
    goto LABEL_12;
  }
  v9 = (const char *)*(unsigned __int8 *)(result + 23);
  if (*(_BYTE *)(result + 23))
  {
LABEL_12:
    _tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String((_tc_google::protobuf::internal *)result, v9, 1, (uint64_t)"CoreML.Specification.FeatureDescription.shortDescription");
    result = _tc_google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(2, *((_QWORD *)this + 3), a2);
  }
LABEL_13:
  if (this != (CoreML::Specification::FeatureDescription *)&CoreML::Specification::_FeatureDescription_default_instance_)
  {
    v10 = *((_QWORD *)this + 4);
    if (v10)
      return _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)3, v10, a2, a4);
  }
  return result;
}

uint64_t CoreML::Specification::FeatureDescription::ByteSizeLong(CoreML::Specification::FeatureDescription *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  CoreML::Specification::FeatureType *v9;
  uint64_t v10;

  v2 = *((_QWORD *)this + 2);
  v3 = *(unsigned __int8 *)(v2 + 23);
  if (*(char *)(v2 + 23) < 0)
  {
    if (*(_QWORD *)(v2 + 8))
      goto LABEL_3;
LABEL_7:
    v5 = 0;
    goto LABEL_8;
  }
  if (!*(_BYTE *)(v2 + 23))
    goto LABEL_7;
LABEL_3:
  v4 = *(_QWORD *)(v2 + 8);
  if ((v3 & 0x80u) == 0)
    v4 = v3;
  v5 = v4 + ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_8:
  v6 = *((_QWORD *)this + 3);
  v7 = *(unsigned __int8 *)(v6 + 23);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(_QWORD *)(v6 + 8))
      goto LABEL_13;
  }
  else if (!*(_BYTE *)(v6 + 23))
  {
    goto LABEL_13;
  }
  v8 = *(_QWORD *)(v6 + 8);
  if ((v7 & 0x80u) == 0)
    v8 = v7;
  v5 += v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_13:
  if (this != (CoreML::Specification::FeatureDescription *)&CoreML::Specification::_FeatureDescription_default_instance_)
  {
    v9 = (CoreML::Specification::FeatureType *)*((_QWORD *)this + 4);
    if (v9)
    {
      v10 = CoreML::Specification::FeatureType::ByteSizeLong(v9);
      v5 += v10 + ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
  }
  *((_DWORD *)this + 10) = v5;
  return v5;
}

void CoreML::Specification::FeatureDescription::MergeFrom(CoreML::Specification::FeatureDescription *this, const CoreML::Specification::FeatureDescription *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  const CoreML::Specification::FeatureType *v9;
  CoreML::Specification::FeatureType *v10;
  const CoreML::Specification::FeatureType *v11;

  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_QWORD *)a2 + 2);
  if (*(char *)(v5 + 23) < 0)
  {
    if (!*(_QWORD *)(v5 + 8))
      goto LABEL_11;
  }
  else if (!*(_BYTE *)(v5 + 23))
  {
    goto LABEL_11;
  }
  v6 = (uint64_t *)*((_QWORD *)this + 2);
  if (v6 != (uint64_t *)v5)
  {
    if (v6 == &_tc_google::protobuf::internal::fixed_address_empty_string)
      _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v5);
    else
      std::string::operator=(*((std::string **)this + 2), (const std::string *)v5);
  }
LABEL_11:
  v7 = *((_QWORD *)a2 + 3);
  if (*(char *)(v7 + 23) < 0)
  {
    if (!*(_QWORD *)(v7 + 8))
      goto LABEL_19;
  }
  else if (!*(_BYTE *)(v7 + 23))
  {
    goto LABEL_19;
  }
  v8 = (uint64_t *)*((_QWORD *)this + 3);
  if (v8 != (uint64_t *)v7)
  {
    if (v8 == &_tc_google::protobuf::internal::fixed_address_empty_string)
      _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 3, v7);
    else
      std::string::operator=(*((std::string **)this + 3), (const std::string *)v7);
  }
LABEL_19:
  if (a2 != (const CoreML::Specification::FeatureDescription *)&CoreML::Specification::_FeatureDescription_default_instance_)
  {
    v9 = (const CoreML::Specification::FeatureType *)*((_QWORD *)a2 + 4);
    if (v9)
    {
      v10 = (CoreML::Specification::FeatureType *)*((_QWORD *)this + 4);
      if (!v10)
      {
        v10 = (CoreML::Specification::FeatureType *)operator new();
        CoreML::Specification::FeatureType::FeatureType(v10);
        *((_QWORD *)this + 4) = v10;
        v9 = (const CoreML::Specification::FeatureType *)*((_QWORD *)a2 + 4);
      }
      if (v9)
        v11 = v9;
      else
        v11 = (const CoreML::Specification::FeatureType *)&CoreML::Specification::_FeatureType_default_instance_;
      CoreML::Specification::FeatureType::MergeFrom(v10, v11);
    }
  }
}

void sub_2184170BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C40B6FDD44FLL);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::FeatureDescription::IsInitialized(CoreML::Specification::FeatureDescription *this)
{
  return 1;
}

_QWORD *CoreML::Specification::FeatureDescription::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.FeatureDescription");
}

CoreML::Specification::Metadata *CoreML::Specification::Metadata::Metadata(CoreML::Specification::Metadata *this)
{
  CoreML::Specification::protobuf_Model_2eproto *v2;

  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)this = &off_24D93FF28;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_DWORD *)this + 8) = 0;
  v2 = (CoreML::Specification::protobuf_Model_2eproto *)_tc_google::protobuf::Map<std::string,std::string>::Init((uint64_t)this + 24);
  *((_DWORD *)this + 8) = 0;
  if (this != (CoreML::Specification::Metadata *)&CoreML::Specification::_Metadata_default_instance_)
    CoreML::Specification::protobuf_Model_2eproto::InitDefaults(v2);
  *((_QWORD *)this + 6) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 7) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 8) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 9) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 10) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  *((_DWORD *)this + 22) = 0;
  return this;
}

void sub_21841717C(_Unwind_Exception *a1)
{
  uint64_t *v1;
  _QWORD *v2;

  _tc_google::protobuf::Map<std::string,std::string>::~Map(v2);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

CoreML::Specification::Metadata *CoreML::Specification::Metadata::Metadata(CoreML::Specification::Metadata *this, const CoreML::Specification::Metadata *a2)
{
  uint64_t *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  *(_QWORD *)this = &off_24D93FF28;
  *((_QWORD *)this + 1) = 0;
  v4 = (uint64_t *)((char *)this + 8);
  *((_QWORD *)this + 2) = 0;
  v5 = (char *)this + 16;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  _tc_google::protobuf::Map<std::string,std::string>::Init((uint64_t)this + 24);
  *((_DWORD *)this + 8) = 0;
  *((_DWORD *)this + 22) = 0;
  v6 = *((_QWORD *)a2 + 1);
  if ((v6 & 1) != 0)
    _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(v4, v6 & 0xFFFFFFFFFFFFFFFELL);
  _tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>::MergeFrom((uint64_t)v5, (uint64_t)a2 + 16);
  *((_QWORD *)this + 6) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  v7 = *((_QWORD *)a2 + 6);
  if (*(char *)(v7 + 23) < 0)
    v8 = *(_QWORD *)(v7 + 8);
  else
    v8 = *(unsigned __int8 *)(v7 + 23);
  if ((uint64_t *)v7 != &_tc_google::protobuf::internal::fixed_address_empty_string && v8)
    _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 6, v7);
  *((_QWORD *)this + 7) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  v9 = *((_QWORD *)a2 + 7);
  if (*(char *)(v9 + 23) < 0)
    v10 = *(_QWORD *)(v9 + 8);
  else
    v10 = *(unsigned __int8 *)(v9 + 23);
  if ((uint64_t *)v9 != &_tc_google::protobuf::internal::fixed_address_empty_string && v10)
    _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 7, v9);
  *((_QWORD *)this + 8) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  v11 = *((_QWORD *)a2 + 8);
  if (*(char *)(v11 + 23) < 0)
    v12 = *(_QWORD *)(v11 + 8);
  else
    v12 = *(unsigned __int8 *)(v11 + 23);
  if ((uint64_t *)v11 != &_tc_google::protobuf::internal::fixed_address_empty_string && v12)
    _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 8, v11);
  *((_QWORD *)this + 9) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  v13 = *((_QWORD *)a2 + 9);
  if (*(char *)(v13 + 23) < 0)
    v14 = *(_QWORD *)(v13 + 8);
  else
    v14 = *(unsigned __int8 *)(v13 + 23);
  if ((uint64_t *)v13 != &_tc_google::protobuf::internal::fixed_address_empty_string && v14)
    _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 9, v13);
  *((_QWORD *)this + 10) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  v15 = *((_QWORD *)a2 + 10);
  if (*(char *)(v15 + 23) < 0)
    v16 = *(_QWORD *)(v15 + 8);
  else
    v16 = *(unsigned __int8 *)(v15 + 23);
  if ((uint64_t *)v15 != &_tc_google::protobuf::internal::fixed_address_empty_string && v16)
    _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 10, v15);
  return this;
}

void sub_218417328(_Unwind_Exception *a1)
{
  uint64_t *v1;

  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t _tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>::MergeFrom(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const std::string *v7;
  std::string *v8;
  _QWORD v9[3];

  result = _tc_google::protobuf::Map<std::string,std::string>::begin(a2 + 8, v9);
  v4 = v9[0];
  if (v9[0])
  {
    v5 = a1 + 8;
    do
    {
      v6 = *(_QWORD *)(v4 + 24);
      v7 = (const std::string *)(v6 + 24);
      v8 = _tc_google::protobuf::Map<std::string,std::string>::operator[](v5, v6);
      std::string::operator=(v8, v7);
      result = (uint64_t)_tc_google::protobuf::Map<std::string,std::string>::InnerMap::iterator_base<_tc_google::protobuf::Map<std::string,std::string>::KeyValuePair const>::operator++(v9);
      v4 = v9[0];
    }
    while (v9[0]);
  }
  return result;
}

void CoreML::Specification::Metadata::~Metadata(CoreML::Specification::Metadata *this)
{
  _QWORD *v2;

  *(_QWORD *)this = &off_24D93FF28;
  v2 = (_QWORD *)((char *)this + 24);
  CoreML::Specification::Metadata::SharedDtor(this);
  _tc_google::protobuf::Map<std::string,std::string>::~Map(v2);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  CoreML::Specification::Metadata::~Metadata(this);
  JUMPOUT(0x219A19A08);
}

_QWORD *CoreML::Specification::Metadata::SharedDtor(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v10;

  v1 = this;
  v2 = this[6];
  if ((uint64_t *)v2 != &_tc_google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    this = (_QWORD *)MEMORY[0x219A19A08](v2, 0x1012C40EC159624);
  }
  v4 = v1[7];
  if ((uint64_t *)v4 != &_tc_google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0)
      operator delete(*(void **)v4);
    this = (_QWORD *)MEMORY[0x219A19A08](v4, 0x1012C40EC159624);
  }
  v6 = v1[8];
  if ((uint64_t *)v6 != &_tc_google::protobuf::internal::fixed_address_empty_string && v6 != 0)
  {
    if (*(char *)(v6 + 23) < 0)
      operator delete(*(void **)v6);
    this = (_QWORD *)MEMORY[0x219A19A08](v6, 0x1012C40EC159624);
  }
  v8 = v1[9];
  if ((uint64_t *)v8 != &_tc_google::protobuf::internal::fixed_address_empty_string && v8 != 0)
  {
    if (*(char *)(v8 + 23) < 0)
      operator delete(*(void **)v8);
    this = (_QWORD *)MEMORY[0x219A19A08](v8, 0x1012C40EC159624);
  }
  v10 = v1[10];
  if ((uint64_t *)v10 != &_tc_google::protobuf::internal::fixed_address_empty_string && v10)
  {
    if (*(char *)(v10 + 23) < 0)
      operator delete(*(void **)v10);
    JUMPOUT(0x219A19A08);
  }
  return this;
}

CoreML::Specification::Metadata *CoreML::Specification::Metadata::New(CoreML::Specification::Metadata *this, _tc_google::protobuf::Arena *a2)
{
  CoreML::Specification::Metadata *v3;

  v3 = (CoreML::Specification::Metadata *)operator new();
  CoreML::Specification::Metadata::Metadata(v3);
  if (a2)
    _tc_google::protobuf::Arena::Own<CoreML::Specification::Metadata>(a2, v3);
  return v3;
}

void sub_2184175BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C4012F24C1ELL);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::Metadata>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::Metadata>);
  return result;
}

void CoreML::Specification::Metadata::Clear(CoreML::Specification::Metadata *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  _tc_google::protobuf::Map<std::string,std::string>::clear((uint64_t)this + 24);
  v2 = *((_QWORD *)this + 6);
  if ((uint64_t *)v2 != &_tc_google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(_BYTE **)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 23) = 0;
    }
  }
  v3 = *((_QWORD *)this + 7);
  if ((uint64_t *)v3 != &_tc_google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v3 + 23) < 0)
    {
      **(_BYTE **)v3 = 0;
      *(_QWORD *)(v3 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v3 = 0;
      *(_BYTE *)(v3 + 23) = 0;
    }
  }
  v4 = *((_QWORD *)this + 8);
  if ((uint64_t *)v4 != &_tc_google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v4 + 23) < 0)
    {
      **(_BYTE **)v4 = 0;
      *(_QWORD *)(v4 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v4 = 0;
      *(_BYTE *)(v4 + 23) = 0;
    }
  }
  v5 = *((_QWORD *)this + 9);
  if ((uint64_t *)v5 != &_tc_google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v5 + 23) < 0)
    {
      **(_BYTE **)v5 = 0;
      *(_QWORD *)(v5 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v5 = 0;
      *(_BYTE *)(v5 + 23) = 0;
    }
  }
  v6 = *((_QWORD *)this + 10);
  if ((uint64_t *)v6 != &_tc_google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v6 + 23) < 0)
    {
      **(_BYTE **)v6 = 0;
      *(_QWORD *)(v6 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v6 = 0;
      *(_BYTE *)(v6 + 23) = 0;
    }
  }
}

uint64_t CoreML::Specification::Metadata::MergePartialFromCodedStream(CoreML::Specification::Metadata *this, _tc_google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  std::string **v4;
  std::string **v5;
  std::string **v6;
  std::string **v7;
  std::string **v8;
  unsigned __int8 *v9;
  unint64_t v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  unsigned int v15;
  std::string *v16;
  std::string *v17;
  const char *size;
  std::string *v19;
  std::string *v20;
  std::string *v21;
  std::string *v22;
  char *v23;
  int VarintSizeAsIntFallback;
  unint64_t v25;
  int v26;
  _tc_google::protobuf::internal *v27;
  const char *v28;
  _tc_google::protobuf::internal *v29;
  const char *v30;
  const char *v31;
  _BOOL4 v32;
  BOOL v33;
  int v34;
  unsigned int TagFallback;
  char *v38;
  char *v39;
  _QWORD v40[2];
  void *__p;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v4 = (std::string **)((char *)this + 80);
  v38 = (char *)this + 24;
  v39 = (char *)this + 16;
  v5 = (std::string **)((char *)this + 72);
  v6 = (std::string **)((char *)this + 64);
  v7 = (std::string **)((char *)this + 56);
  v8 = (std::string **)((char *)this + 48);
  while (1)
  {
    while (1)
    {
      v9 = *(unsigned __int8 **)a2;
      v10 = *((_QWORD *)a2 + 1);
      if (*(_QWORD *)a2 >= v10)
      {
        v12 = 0;
LABEL_83:
        TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v12);
        v13 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x3FFF) << 32);
        if ((v13 & 0x100000000) == 0)
          goto LABEL_84;
        goto LABEL_9;
      }
      v11 = v9 + 1;
      v12 = *v9;
      if ((char)*v9 >= 1)
        break;
      if ((unint64_t)v11 >= v10)
        goto LABEL_83;
      v14 = *v11;
      if ((v12 & ~v14) < 0x80)
        goto LABEL_83;
      *(_QWORD *)a2 = v9 + 2;
      v13 = (v12 + (v14 << 7) - 128) | 0x100000000;
LABEL_9:
      v15 = v13 >> 3;
      switch(v13 >> 3)
      {
        case 1u:
          if (v13 != 10)
            goto LABEL_84;
          v16 = *v8;
          if (*v8 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string)
          {
            _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v8, (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string);
            v16 = *v8;
          }
          if (!_tc_google::protobuf::internal::WireFormatLite::ReadBytes((char **)a2, v16))
            return 0;
          v17 = *v8;
          if (SHIBYTE((*v8)->__r_.__value_.__r.__words[2]) < 0)
          {
            v17 = (std::string *)v17->__r_.__value_.__r.__words[0];
            size = (const char *)(*v8)->__r_.__value_.__l.__size_;
          }
          else
          {
            size = (const char *)HIBYTE((*v8)->__r_.__value_.__r.__words[2]);
          }
          v31 = "CoreML.Specification.Metadata.shortDescription";
          goto LABEL_69;
        case 2u:
          if (v13 != 18)
            goto LABEL_84;
          v20 = *v7;
          if (*v7 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string)
          {
            _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v7, (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string);
            v20 = *v7;
          }
          if (!_tc_google::protobuf::internal::WireFormatLite::ReadBytes((char **)a2, v20))
            return 0;
          v17 = *v7;
          if (SHIBYTE((*v7)->__r_.__value_.__r.__words[2]) < 0)
          {
            v17 = (std::string *)v17->__r_.__value_.__r.__words[0];
            size = (const char *)(*v7)->__r_.__value_.__l.__size_;
          }
          else
          {
            size = (const char *)HIBYTE((*v7)->__r_.__value_.__r.__words[2]);
          }
          v31 = "CoreML.Specification.Metadata.versionString";
          goto LABEL_69;
        case 3u:
          if (v13 != 26)
            goto LABEL_84;
          v21 = *v6;
          if (*v6 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string)
          {
            _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v6, (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string);
            v21 = *v6;
          }
          if (!_tc_google::protobuf::internal::WireFormatLite::ReadBytes((char **)a2, v21))
            return 0;
          v17 = *v6;
          if (SHIBYTE((*v6)->__r_.__value_.__r.__words[2]) < 0)
          {
            v17 = (std::string *)v17->__r_.__value_.__r.__words[0];
            size = (const char *)(*v6)->__r_.__value_.__l.__size_;
          }
          else
          {
            size = (const char *)HIBYTE((*v6)->__r_.__value_.__r.__words[2]);
          }
          v31 = "CoreML.Specification.Metadata.author";
          goto LABEL_69;
        case 4u:
          if (v13 != 34)
            goto LABEL_84;
          v22 = *v5;
          if (*v5 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string)
          {
            _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v5, (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string);
            v22 = *v5;
          }
          if (!_tc_google::protobuf::internal::WireFormatLite::ReadBytes((char **)a2, v22))
            return 0;
          v17 = *v5;
          if (SHIBYTE((*v5)->__r_.__value_.__r.__words[2]) < 0)
          {
            v17 = (std::string *)v17->__r_.__value_.__r.__words[0];
            size = (const char *)(*v5)->__r_.__value_.__l.__size_;
          }
          else
          {
            size = (const char *)HIBYTE((*v5)->__r_.__value_.__r.__words[2]);
          }
          v31 = "CoreML.Specification.Metadata.license";
          goto LABEL_69;
        default:
          if (v15 == 100)
          {
            if (v13 != 34)
              goto LABEL_84;
            v40[0] = v39;
            v40[1] = v38;
            v42 = 0;
            v43 = 0;
            __p = 0;
            v45 = 0;
            v23 = *(char **)a2;
            if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v23 < 0)
            {
              VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
              if (VarintSizeAsIntFallback < 0)
                goto LABEL_90;
            }
            else
            {
              VarintSizeAsIntFallback = *v23;
              *(_QWORD *)a2 = v23 + 1;
            }
            v25 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, VarintSizeAsIntFallback);
            v26 = v25;
            if ((v25 & 0x8000000000000000) == 0
              && _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,_tc_google::protobuf::MessageLite,std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>::Parser<_tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,_tc_google::protobuf::Map<std::string,std::string>>::MergePartialFromCodedStream((uint64_t)v40, a2)&& _tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v26))
            {
              v27 = v43 >= 0 ? (_tc_google::protobuf::internal *)&__p : (_tc_google::protobuf::internal *)__p;
              v28 = v43 >= 0 ? (const char *)HIBYTE(v43) : (const char *)v42;
              if (_tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String(v27, v28, 0, (uint64_t)"CoreML.Specification.Metadata.UserDefinedEntry.key"))
              {
                v29 = (_tc_google::protobuf::internal *)v44;
                if (*(char *)(v44 + 23) < 0)
                {
                  v29 = *(_tc_google::protobuf::internal **)v44;
                  v30 = *(const char **)(v44 + 8);
                }
                else
                {
                  v30 = (const char *)*(unsigned __int8 *)(v44 + 23);
                }
                v32 = _tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String(v29, v30, 0, (uint64_t)"CoreML.Specification.Metadata.UserDefinedEntry.value");
                v33 = v32;
                if (v32)
                  v34 = 0;
                else
                  v34 = 6;
LABEL_75:
                if (v45)
                  (*(void (**)(uint64_t))(*(_QWORD *)v45 + 8))(v45);
                if (SHIBYTE(v43) < 0)
                  operator delete(__p);
                if (!v33 && v34)
                  return 0;
                continue;
              }
            }
LABEL_90:
            v33 = 0;
            v34 = 6;
            goto LABEL_75;
          }
          if (v15 != 200 || v13 != 66)
            goto LABEL_84;
          v19 = *v4;
          if (*v4 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string)
          {
            _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v4, (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string);
            v19 = *v4;
          }
          if (!_tc_google::protobuf::internal::WireFormatLite::ReadBytes((char **)a2, v19))
            return 0;
          v17 = *v4;
          if (SHIBYTE((*v4)->__r_.__value_.__r.__words[2]) < 0)
          {
            v17 = (std::string *)v17->__r_.__value_.__r.__words[0];
            size = (const char *)(*v4)->__r_.__value_.__l.__size_;
          }
          else
          {
            size = (const char *)HIBYTE((*v4)->__r_.__value_.__r.__words[2]);
          }
          v31 = "CoreML.Specification.Metadata.externalMetadata";
LABEL_69:
          if (!_tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String((_tc_google::protobuf::internal *)v17, size, 0, (uint64_t)v31))return 0;
          break;
      }
    }
    *(_QWORD *)a2 = v11;
    v13 = v12 | 0x100000000;
    if ((v13 & 0x100000000) != 0)
      goto LABEL_9;
LABEL_84:
    if (!(_DWORD)v13 || (v13 & 7) == 4)
      return 1;
    if (!_tc_google::protobuf::internal::WireFormatLite::SkipField(a2, (_tc_google::protobuf::io::CodedInputStream *)v13, a3))return 0;
  }
}

void sub_218417BA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21)
{
  if (a21)
    (*(void (**)(uint64_t))(*(_QWORD *)a21 + 8))(a21);
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t CoreML::Specification::Metadata::SerializeWithCachedSizes(CoreML::Specification::Metadata *this, _tc_google::protobuf::io::CodedOutputStream *a2)
{
  _tc_google::protobuf::internal *v4;
  const char *v5;
  _tc_google::protobuf::internal *v6;
  const char *v7;
  _tc_google::protobuf::internal *v8;
  const char *v9;
  _tc_google::protobuf::internal *v10;
  const char *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _tc_google::protobuf::io::CodedOutputStream *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  _tc_google::protobuf::io::CodedOutputStream *v23;
  uint64_t v24;
  uint64_t result;
  const char *v26;
  _QWORD v27[3];

  v4 = (_tc_google::protobuf::internal *)*((_QWORD *)this + 6);
  if (*((char *)v4 + 23) < 0)
  {
    v5 = (const char *)*((_QWORD *)v4 + 1);
    if (!v5)
      goto LABEL_7;
    v4 = *(_tc_google::protobuf::internal **)v4;
    goto LABEL_6;
  }
  v5 = (const char *)*((unsigned __int8 *)v4 + 23);
  if (*((_BYTE *)v4 + 23))
  {
LABEL_6:
    _tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String(v4, v5, 1, (uint64_t)"CoreML.Specification.Metadata.shortDescription");
    _tc_google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(1, *((_QWORD *)this + 6), a2);
  }
LABEL_7:
  v6 = (_tc_google::protobuf::internal *)*((_QWORD *)this + 7);
  if (*((char *)v6 + 23) < 0)
  {
    v7 = (const char *)*((_QWORD *)v6 + 1);
    if (!v7)
      goto LABEL_13;
    v6 = *(_tc_google::protobuf::internal **)v6;
    goto LABEL_12;
  }
  v7 = (const char *)*((unsigned __int8 *)v6 + 23);
  if (*((_BYTE *)v6 + 23))
  {
LABEL_12:
    _tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String(v6, v7, 1, (uint64_t)"CoreML.Specification.Metadata.versionString");
    _tc_google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(2, *((_QWORD *)this + 7), a2);
  }
LABEL_13:
  v8 = (_tc_google::protobuf::internal *)*((_QWORD *)this + 8);
  if (*((char *)v8 + 23) < 0)
  {
    v9 = (const char *)*((_QWORD *)v8 + 1);
    if (!v9)
      goto LABEL_19;
    v8 = *(_tc_google::protobuf::internal **)v8;
    goto LABEL_18;
  }
  v9 = (const char *)*((unsigned __int8 *)v8 + 23);
  if (*((_BYTE *)v8 + 23))
  {
LABEL_18:
    _tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String(v8, v9, 1, (uint64_t)"CoreML.Specification.Metadata.author");
    _tc_google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(3, *((_QWORD *)this + 8), a2);
  }
LABEL_19:
  v10 = (_tc_google::protobuf::internal *)*((_QWORD *)this + 9);
  if (*((char *)v10 + 23) < 0)
  {
    v11 = (const char *)*((_QWORD *)v10 + 1);
    if (!v11)
      goto LABEL_25;
    v10 = *(_tc_google::protobuf::internal **)v10;
    goto LABEL_24;
  }
  v11 = (const char *)*((unsigned __int8 *)v10 + 23);
  if (*((_BYTE *)v10 + 23))
  {
LABEL_24:
    _tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String(v10, v11, 1, (uint64_t)"CoreML.Specification.Metadata.license");
    _tc_google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(4, *((_QWORD *)this + 9), a2);
  }
LABEL_25:
  v12 = **((_QWORD **)this + 5);
  if (!v12)
    goto LABEL_58;
  if (*((_BYTE *)a2 + 26))
  {
    if (v12 < 2 || !*((_BYTE *)a2 + 27))
    {
LABEL_36:
      _tc_google::protobuf::Map<std::string,std::string>::begin((uint64_t)this + 24, v27);
      v16 = 0;
      while (v27[0])
      {
        v18 = _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,_tc_google::protobuf::MessageLite,std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>::Wrap(*(_QWORD *)(v27[0] + 24), *(_QWORD *)(v27[0] + 24) + 24, *((_tc_google::protobuf::Arena **)this + 2));
        if (v16 != v18)
        {
          if (v16)
            (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
          v16 = v18;
        }
        _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0x64, v16, a2, v17);
        CoreML::Specification::Metadata::SerializeWithCachedSizes(_tc_google::protobuf::io::CodedOutputStream *)const::Utf8Check::Check(*(unsigned __int8 **)(v27[0] + 24));
        _tc_google::protobuf::Map<std::string,std::string>::InnerMap::iterator_base<_tc_google::protobuf::Map<std::string,std::string>::KeyValuePair const>::operator++(v27);
      }
      if (v16)
        (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
      goto LABEL_58;
    }
  }
  else if (v12 < 2 || !_tc_google::protobuf::io::CodedOutputStream::default_serialization_deterministic_)
  {
    goto LABEL_36;
  }
  v13 = operator new[]();
  _tc_google::protobuf::Map<std::string,std::string>::begin((uint64_t)this + 24, v27);
  v14 = v27[0];
  if (v27[0])
  {
    v15 = 0;
    do
    {
      *(_QWORD *)(v13 + 8 * v15) = *(_QWORD *)(v14 + 24);
      _tc_google::protobuf::Map<std::string,std::string>::InnerMap::iterator_base<_tc_google::protobuf::Map<std::string,std::string>::KeyValuePair const>::operator++(v27);
      ++v15;
      v14 = v27[0];
    }
    while (v27[0]);
  }
  else
  {
    v15 = 0;
  }
  v19 = 126 - 2 * __clz(v15);
  if (v15)
    v20 = v19;
  else
    v20 = 0;
  std::__introsort<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,std::string> const*> &,_tc_google::protobuf::MapPair<std::string,std::string> const**,false>(v13, (const void ***)(v13 + 8 * v15), (uint64_t)v27, v20, 1);
  if (v15)
  {
    v21 = 0;
    v22 = (uint64_t *)v13;
    do
    {
      v24 = _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,_tc_google::protobuf::MessageLite,std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>::Wrap(*v22, *v22 + 24, *((_tc_google::protobuf::Arena **)this + 2));
      if (v21 != v24)
      {
        if (v21)
          (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
        v21 = v24;
      }
      _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0x64, v21, a2, v23);
      CoreML::Specification::Metadata::SerializeWithCachedSizes(_tc_google::protobuf::io::CodedOutputStream *)const::Utf8Check::Check((unsigned __int8 *)*v22++);
      --v15;
    }
    while (v15);
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  }
  MEMORY[0x219A199F0](v13, 0x60C8044C4A2DFLL);
LABEL_58:
  result = *((_QWORD *)this + 10);
  if (*(char *)(result + 23) < 0)
  {
    v26 = *(const char **)(result + 8);
    if (!v26)
      return result;
    result = *(_QWORD *)result;
    goto LABEL_63;
  }
  v26 = (const char *)*(unsigned __int8 *)(result + 23);
  if (*(_BYTE *)(result + 23))
  {
LABEL_63:
    _tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String((_tc_google::protobuf::internal *)result, v26, 1, (uint64_t)"CoreML.Specification.Metadata.externalMetadata");
    return _tc_google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(200, *((_QWORD *)this + 10), a2);
  }
  return result;
}

void sub_218417F4C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A199F0](v1, 0x60C8044C4A2DFLL);
  _Unwind_Resume(a1);
}

BOOL CoreML::Specification::Metadata::SerializeWithCachedSizes(_tc_google::protobuf::io::CodedOutputStream *)const::Utf8Check::Check(unsigned __int8 *a1)
{
  unsigned __int8 *v1;
  const char *v2;
  _tc_google::protobuf::internal *v3;
  const char *v4;

  v1 = a1;
  if ((char)a1[23] < 0)
  {
    a1 = *(unsigned __int8 **)a1;
    v2 = (const char *)*((_QWORD *)v1 + 1);
  }
  else
  {
    v2 = (const char *)a1[23];
  }
  _tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String((_tc_google::protobuf::internal *)a1, v2, 1, (uint64_t)"CoreML.Specification.Metadata.UserDefinedEntry.key");
  if ((char)v1[47] < 0)
  {
    v3 = (_tc_google::protobuf::internal *)*((_QWORD *)v1 + 3);
    v4 = (const char *)*((_QWORD *)v1 + 4);
  }
  else
  {
    v3 = (_tc_google::protobuf::internal *)(v1 + 24);
    v4 = (const char *)v1[47];
  }
  return _tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String(v3, v4, 1, (uint64_t)"CoreML.Specification.Metadata.UserDefinedEntry.value");
}

uint64_t CoreML::Specification::Metadata::ByteSizeLong(CoreML::Specification::Metadata *this)
{
  uint64_t v2;
  _DWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v23[3];

  v2 = **((_QWORD **)this + 5);
  _tc_google::protobuf::Map<std::string,std::string>::begin((uint64_t)this + 24, v23);
  v3 = 0;
  v4 = 2 * v2;
  while (v23[0])
  {
    v5 = _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,_tc_google::protobuf::MessageLite,std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>::Wrap(*(_QWORD *)(v23[0] + 24), *(_QWORD *)(v23[0] + 24) + 24, *((_tc_google::protobuf::Arena **)this + 2));
    if (v3 != (_DWORD *)v5)
    {
      if (v3)
        (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
      v3 = (_DWORD *)v5;
    }
    v6 = _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,_tc_google::protobuf::MessageLite,std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>::ByteSizeLong(v3);
    v4 += v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6);
    _tc_google::protobuf::Map<std::string,std::string>::InnerMap::iterator_base<_tc_google::protobuf::Map<std::string,std::string>::KeyValuePair const>::operator++(v23);
  }
  if (v3)
    (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  v7 = *((_QWORD *)this + 6);
  v8 = *(unsigned __int8 *)(v7 + 23);
  if (*(char *)(v7 + 23) < 0)
  {
    if (!*(_QWORD *)(v7 + 8))
      goto LABEL_15;
  }
  else if (!*(_BYTE *)(v7 + 23))
  {
    goto LABEL_15;
  }
  v9 = *(_QWORD *)(v7 + 8);
  if ((v8 & 0x80u) == 0)
    v9 = v8;
  v4 += v9 + ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_15:
  v10 = *((_QWORD *)this + 7);
  v11 = *(unsigned __int8 *)(v10 + 23);
  if (*(char *)(v10 + 23) < 0)
  {
    if (!*(_QWORD *)(v10 + 8))
      goto LABEL_20;
  }
  else if (!*(_BYTE *)(v10 + 23))
  {
    goto LABEL_20;
  }
  v12 = *(_QWORD *)(v10 + 8);
  if ((v11 & 0x80u) == 0)
    v12 = v11;
  v4 += v12 + ((9 * (__clz(v12 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_20:
  v13 = *((_QWORD *)this + 8);
  v14 = *(unsigned __int8 *)(v13 + 23);
  if (*(char *)(v13 + 23) < 0)
  {
    if (!*(_QWORD *)(v13 + 8))
      goto LABEL_25;
  }
  else if (!*(_BYTE *)(v13 + 23))
  {
    goto LABEL_25;
  }
  v15 = *(_QWORD *)(v13 + 8);
  if ((v14 & 0x80u) == 0)
    v15 = v14;
  v4 += v15 + ((9 * (__clz(v15 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_25:
  v16 = *((_QWORD *)this + 9);
  v17 = *(unsigned __int8 *)(v16 + 23);
  if (*(char *)(v16 + 23) < 0)
  {
    if (!*(_QWORD *)(v16 + 8))
      goto LABEL_30;
  }
  else if (!*(_BYTE *)(v16 + 23))
  {
    goto LABEL_30;
  }
  v18 = *(_QWORD *)(v16 + 8);
  if ((v17 & 0x80u) == 0)
    v18 = v17;
  v4 += v18 + ((9 * (__clz(v18 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_30:
  v19 = *((_QWORD *)this + 10);
  v20 = *(unsigned __int8 *)(v19 + 23);
  if (*(char *)(v19 + 23) < 0)
  {
    if (!*(_QWORD *)(v19 + 8))
      goto LABEL_35;
  }
  else if (!*(_BYTE *)(v19 + 23))
  {
    goto LABEL_35;
  }
  v21 = *(_QWORD *)(v19 + 8);
  if ((v20 & 0x80u) == 0)
    v21 = v20;
  v4 += v21 + ((9 * (__clz(v21 | 1) ^ 0x1F) + 73) >> 6) + 2;
LABEL_35:
  *((_DWORD *)this + 22) = v4;
  return v4;
}

void sub_2184182A4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void CoreML::Specification::Metadata::MergeFrom(CoreML::Specification::Metadata *this, const CoreML::Specification::Metadata *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  std::string *v14;
  std::string **v15;
  std::string *v16;

  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  _tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>::MergeFrom((uint64_t)this + 16, (uint64_t)a2 + 16);
  v5 = *((_QWORD *)a2 + 6);
  if (*(char *)(v5 + 23) < 0)
  {
    if (!*(_QWORD *)(v5 + 8))
      goto LABEL_11;
  }
  else if (!*(_BYTE *)(v5 + 23))
  {
    goto LABEL_11;
  }
  v6 = (uint64_t *)*((_QWORD *)this + 6);
  if (v6 != (uint64_t *)v5)
  {
    if (v6 == &_tc_google::protobuf::internal::fixed_address_empty_string)
      _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 6, v5);
    else
      std::string::operator=(*((std::string **)this + 6), (const std::string *)v5);
  }
LABEL_11:
  v7 = *((_QWORD *)a2 + 7);
  if (*(char *)(v7 + 23) < 0)
  {
    if (!*(_QWORD *)(v7 + 8))
      goto LABEL_19;
  }
  else if (!*(_BYTE *)(v7 + 23))
  {
    goto LABEL_19;
  }
  v8 = (uint64_t *)*((_QWORD *)this + 7);
  if (v8 != (uint64_t *)v7)
  {
    if (v8 == &_tc_google::protobuf::internal::fixed_address_empty_string)
      _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 7, v7);
    else
      std::string::operator=(*((std::string **)this + 7), (const std::string *)v7);
  }
LABEL_19:
  v9 = *((_QWORD *)a2 + 8);
  if (*(char *)(v9 + 23) < 0)
  {
    if (!*(_QWORD *)(v9 + 8))
      goto LABEL_27;
  }
  else if (!*(_BYTE *)(v9 + 23))
  {
    goto LABEL_27;
  }
  v10 = (uint64_t *)*((_QWORD *)this + 8);
  if (v10 != (uint64_t *)v9)
  {
    if (v10 == &_tc_google::protobuf::internal::fixed_address_empty_string)
      _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 8, v9);
    else
      std::string::operator=(*((std::string **)this + 8), (const std::string *)v9);
  }
LABEL_27:
  v11 = *((_QWORD *)a2 + 9);
  if (*(char *)(v11 + 23) < 0)
  {
    if (!*(_QWORD *)(v11 + 8))
      goto LABEL_35;
  }
  else if (!*(_BYTE *)(v11 + 23))
  {
    goto LABEL_35;
  }
  v12 = (uint64_t *)*((_QWORD *)this + 9);
  if (v12 != (uint64_t *)v11)
  {
    if (v12 == &_tc_google::protobuf::internal::fixed_address_empty_string)
      _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 9, v11);
    else
      std::string::operator=(*((std::string **)this + 9), (const std::string *)v11);
  }
LABEL_35:
  v13 = *((_QWORD *)a2 + 10);
  if (*(char *)(v13 + 23) < 0)
  {
    if (!*(_QWORD *)(v13 + 8))
      return;
  }
  else if (!*(_BYTE *)(v13 + 23))
  {
    return;
  }
  v16 = (std::string *)*((_QWORD *)this + 10);
  v15 = (std::string **)((char *)this + 80);
  v14 = v16;
  if (v16 != (std::string *)v13)
  {
    if (v14 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string)
      _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v15, v13);
    else
      std::string::operator=(v14, (const std::string *)v13);
  }
}

uint64_t CoreML::Specification::Metadata::IsInitialized(CoreML::Specification::Metadata *this)
{
  return 1;
}

_QWORD *CoreML::Specification::Metadata::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.Metadata");
}

CoreML::Specification::ModelDescription *CoreML::Specification::ModelDescription::ModelDescription(CoreML::Specification::ModelDescription *this)
{
  *(_QWORD *)this = &off_24D93FFC0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  if (this != (CoreML::Specification::ModelDescription *)&CoreML::Specification::_ModelDescription_default_instance_)
    CoreML::Specification::protobuf_Model_2eproto::InitDefaults(this);
  *((_QWORD *)this + 11) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 12) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 13) = 0;
  *((_DWORD *)this + 28) = 0;
  return this;
}

void sub_218418544(_Unwind_Exception *a1)
{
  uint64_t *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;

  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Destroy<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMRegressor_DoubleArray>::TypeHandler>(v4);
  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Destroy<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMRegressor_DoubleArray>::TypeHandler>(v2);
  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Destroy<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMRegressor_DoubleArray>::TypeHandler>(v3);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

CoreML::Specification::ModelDescription *CoreML::Specification::ModelDescription::ModelDescription(CoreML::Specification::ModelDescription *this, const CoreML::Specification::ModelDescription *a2)
{
  uint64_t *v4;
  _tc_google::protobuf::Arena **v5;
  signed int v6;
  uint64_t v7;
  unsigned int *v8;
  int v9;
  int *v10;
  signed int v11;
  uint64_t v12;
  unsigned int *v13;
  int v14;
  int *v15;
  signed int v16;
  uint64_t v17;
  unsigned int *v18;
  int v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  CoreML::Specification::Metadata *v26;

  *(_QWORD *)this = &off_24D93FFC0;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (uint64_t *)((char *)this + 8);
  v5 = (_tc_google::protobuf::Arena **)((char *)this + 16);
  *(_OWORD *)((char *)this + 24) = 0u;
  v6 = *((_DWORD *)a2 + 6);
  if (v6)
  {
    v7 = *((_QWORD *)a2 + 4);
    v8 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((CoreML::Specification::ModelDescription *)((char *)this + 16), *((_DWORD *)a2 + 6));
    _tc_google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>::TypeHandler>(v5, (CoreML::Specification::FeatureDescription **)v8, (const CoreML::Specification::FeatureDescription **)(v7 + 8), v6, **((_DWORD **)this + 4) - *((_DWORD *)this + 6));
    v9 = *((_DWORD *)this + 6) + v6;
    *((_DWORD *)this + 6) = v9;
    v10 = (int *)*((_QWORD *)this + 4);
    if (*v10 < v9)
      *v10 = v9;
  }
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  v11 = *((_DWORD *)a2 + 12);
  if (v11)
  {
    v12 = *((_QWORD *)a2 + 7);
    v13 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((CoreML::Specification::ModelDescription *)((char *)this + 40), *((_DWORD *)a2 + 12));
    _tc_google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>::TypeHandler>((_tc_google::protobuf::Arena **)this + 5, (CoreML::Specification::FeatureDescription **)v13, (const CoreML::Specification::FeatureDescription **)(v12 + 8), v11, **((_DWORD **)this + 7) - *((_DWORD *)this + 12));
    v14 = *((_DWORD *)this + 12) + v11;
    *((_DWORD *)this + 12) = v14;
    v15 = (int *)*((_QWORD *)this + 7);
    if (*v15 < v14)
      *v15 = v14;
  }
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  v16 = *((_DWORD *)a2 + 18);
  if (v16)
  {
    v17 = *((_QWORD *)a2 + 10);
    v18 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((CoreML::Specification::ModelDescription *)((char *)this + 64), *((_DWORD *)a2 + 18));
    _tc_google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>::TypeHandler>((_tc_google::protobuf::Arena **)this + 8, (CoreML::Specification::FeatureDescription **)v18, (const CoreML::Specification::FeatureDescription **)(v17 + 8), v16, **((_DWORD **)this + 10) - *((_DWORD *)this + 18));
    v19 = *((_DWORD *)this + 18) + v16;
    *((_DWORD *)this + 18) = v19;
    v20 = (int *)*((_QWORD *)this + 10);
    if (*v20 < v19)
      *v20 = v19;
  }
  *((_DWORD *)this + 28) = 0;
  v21 = *((_QWORD *)a2 + 1);
  if ((v21 & 1) != 0)
    _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(v4, v21 & 0xFFFFFFFFFFFFFFFELL);
  *((_QWORD *)this + 11) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  v22 = *((_QWORD *)a2 + 11);
  if (*(char *)(v22 + 23) < 0)
    v23 = *(_QWORD *)(v22 + 8);
  else
    v23 = *(unsigned __int8 *)(v22 + 23);
  if ((uint64_t *)v22 != &_tc_google::protobuf::internal::fixed_address_empty_string && v23)
    _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 11, v22);
  *((_QWORD *)this + 12) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  v24 = *((_QWORD *)a2 + 12);
  if (*(char *)(v24 + 23) < 0)
    v25 = *(_QWORD *)(v24 + 8);
  else
    v25 = *(unsigned __int8 *)(v24 + 23);
  if ((uint64_t *)v24 != &_tc_google::protobuf::internal::fixed_address_empty_string && v25)
    _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 12, v24);
  v26 = 0;
  if (a2 != (const CoreML::Specification::ModelDescription *)&CoreML::Specification::_ModelDescription_default_instance_
    && *((_QWORD *)a2 + 13))
  {
    v26 = (CoreML::Specification::Metadata *)operator new();
    CoreML::Specification::Metadata::Metadata(v26, *((const CoreML::Specification::Metadata **)a2 + 13));
  }
  *((_QWORD *)this + 13) = v26;
  return this;
}

void sub_2184187CC(_Unwind_Exception *a1)
{
  uint64_t *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  MEMORY[0x219A19A08](v5, 0x10A1C4012F24C1ELL);
  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Destroy<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMRegressor_DoubleArray>::TypeHandler>(v4);
  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Destroy<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMRegressor_DoubleArray>::TypeHandler>(v3);
  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Destroy<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMRegressor_DoubleArray>::TypeHandler>(v2);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::ModelDescription::~ModelDescription(CoreML::Specification::ModelDescription *this)
{
  *(_QWORD *)this = &off_24D93FFC0;
  CoreML::Specification::ModelDescription::SharedDtor((uint64_t *)this);
  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Destroy<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMRegressor_DoubleArray>::TypeHandler>((_QWORD *)this + 8);
  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Destroy<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMRegressor_DoubleArray>::TypeHandler>((_QWORD *)this + 5);
  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Destroy<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMRegressor_DoubleArray>::TypeHandler>((_QWORD *)this + 2);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  CoreML::Specification::ModelDescription::~ModelDescription(this);
  JUMPOUT(0x219A19A08);
}

uint64_t *CoreML::Specification::ModelDescription::SharedDtor(uint64_t *this)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;

  v1 = this;
  v2 = this[11];
  if ((uint64_t *)v2 != &_tc_google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    this = (uint64_t *)MEMORY[0x219A19A08](v2, 0x1012C40EC159624);
  }
  v4 = v1[12];
  if ((uint64_t *)v4 != &_tc_google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0)
      operator delete(*(void **)v4);
    this = (uint64_t *)MEMORY[0x219A19A08](v4, 0x1012C40EC159624);
  }
  if (v1 != &CoreML::Specification::_ModelDescription_default_instance_)
  {
    this = (uint64_t *)v1[13];
    if (this)
      return (uint64_t *)(*(uint64_t (**)(uint64_t *))(*this + 8))(this);
  }
  return this;
}

CoreML::Specification::ModelDescription *CoreML::Specification::ModelDescription::New(CoreML::Specification::ModelDescription *this, _tc_google::protobuf::Arena *a2)
{
  CoreML::Specification::ModelDescription *v3;

  v3 = (CoreML::Specification::ModelDescription *)operator new();
  CoreML::Specification::ModelDescription::ModelDescription(v3);
  if (a2)
    _tc_google::protobuf::Arena::Own<CoreML::Specification::ModelDescription>(a2, v3);
  return v3;
}

void sub_2184189E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C40FD9EAC30);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::ModelDescription>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::ModelDescription>);
  return result;
}

uint64_t CoreML::Specification::ModelDescription::Clear(CoreML::Specification::ModelDescription *this)
{
  uint64_t v2;
  CoreML::Specification::FeatureDescription **v3;
  CoreML::Specification::FeatureDescription *v4;
  uint64_t v5;
  CoreML::Specification::FeatureDescription **v6;
  CoreML::Specification::FeatureDescription *v7;
  uint64_t v8;
  CoreML::Specification::FeatureDescription **v9;
  CoreML::Specification::FeatureDescription *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;

  v2 = *((unsigned int *)this + 6);
  if ((int)v2 >= 1)
  {
    v3 = (CoreML::Specification::FeatureDescription **)(*((_QWORD *)this + 4) + 8);
    do
    {
      v4 = *v3++;
      CoreML::Specification::FeatureDescription::Clear(v4);
      --v2;
    }
    while (v2);
    *((_DWORD *)this + 6) = 0;
  }
  v5 = *((unsigned int *)this + 12);
  if ((int)v5 >= 1)
  {
    v6 = (CoreML::Specification::FeatureDescription **)(*((_QWORD *)this + 7) + 8);
    do
    {
      v7 = *v6++;
      CoreML::Specification::FeatureDescription::Clear(v7);
      --v5;
    }
    while (v5);
    *((_DWORD *)this + 12) = 0;
  }
  v8 = *((unsigned int *)this + 18);
  if ((int)v8 >= 1)
  {
    v9 = (CoreML::Specification::FeatureDescription **)(*((_QWORD *)this + 10) + 8);
    do
    {
      v10 = *v9++;
      CoreML::Specification::FeatureDescription::Clear(v10);
      --v8;
    }
    while (v8);
    *((_DWORD *)this + 18) = 0;
  }
  v11 = *((_QWORD *)this + 11);
  if ((uint64_t *)v11 != &_tc_google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v11 + 23) < 0)
    {
      **(_BYTE **)v11 = 0;
      *(_QWORD *)(v11 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v11 = 0;
      *(_BYTE *)(v11 + 23) = 0;
    }
  }
  v12 = *((_QWORD *)this + 12);
  if ((uint64_t *)v12 != &_tc_google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v12 + 23) < 0)
    {
      **(_BYTE **)v12 = 0;
      *(_QWORD *)(v12 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v12 = 0;
      *(_BYTE *)(v12 + 23) = 0;
    }
  }
  result = *((_QWORD *)this + 13);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 13) = 0;
  return result;
}

